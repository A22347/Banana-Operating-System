
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 d8 fb 00 00       	call   c000fbf8 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 f3 84 02 00       	call   c0028518 <_init>
c0000025:	c3                   	ret    
c0000026:	bb c2 90 02 c0       	mov    ebx,0xc00290c2
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb d0 90 02 c0    	cmp    ebx,0xc00290d0
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 d8 d7 02 c0       	mov    eax,0xc002d7d8
c0000049:	3d d8 d7 02 c0       	cmp    eax,0xc002d7d8
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 d8 d7 02 c0       	push   0xc002d7d8
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 d8 d7 02 c0       	mov    eax,0xc002d7d8
c0000075:	2d d8 d7 02 c0       	sub    eax,0xc002d7d8
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 d8 d7 02 c0       	push   0xc002d7d8
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 08 de 02 c0 00 	cmp    BYTE PTR ds:0xc002de08,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb d8 90 02 c0       	mov    ebx,0xc00290d8
c00000bb:	81 eb d4 90 02 c0    	sub    ebx,0xc00290d4
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be d4 90 02 c0       	mov    esi,0xc00290d4
c00000ca:	a1 0c de 02 c0       	mov    eax,ds:0xc002de0c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 0c de 02 c0       	mov    ds:0xc002de0c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 0c de 02 c0       	mov    eax,ds:0xc002de0c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 d8 d7 02 c0       	push   0xc002d7d8
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 08 de 02 c0 01 	mov    BYTE PTR ds:0xc002de08,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 10 de 02 c0       	push   0xc002de10
c000012c:	68 d8 d7 02 c0       	push   0xc002d7d8
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	85 d2                	test   edx,edx
c0000391:	75 11                	jne    c00003a4 <commonThreadSwitch.firstTime>
c0000393:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c0000396:	e8 93 d4 01 00       	call   c001d82e <changeTSS>
c000039b:	5d                   	pop    ebp
c000039c:	5f                   	pop    edi
c000039d:	5e                   	pop    esi
c000039e:	5a                   	pop    edx
c000039f:	59                   	pop    ecx
c00003a0:	5b                   	pop    ebx
c00003a1:	58                   	pop    eax
c00003a2:	9d                   	popf   
c00003a3:	c3                   	ret    

c00003a4 <commonThreadSwitch.firstTime>:
c00003a4:	fa                   	cli    
c00003a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003a8:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003ad:	60                   	pusha  
c00003ae:	e8 c3 27 01 00       	call   c0012b76 <mapVASFirstTime>
c00003b3:	61                   	popa   
c00003b4:	89 c4                	mov    esp,eax
c00003b6:	56                   	push   esi
c00003b7:	52                   	push   edx
c00003b8:	e8 71 d4 01 00       	call   c001d82e <changeTSS>
c00003bd:	5a                   	pop    edx
c00003be:	5e                   	pop    esi
c00003bf:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003c6:	5d                   	pop    ebp
c00003c7:	5f                   	pop    edi
c00003c8:	5e                   	pop    esi
c00003c9:	59                   	pop    ecx
c00003ca:	59                   	pop    ecx
c00003cb:	5b                   	pop    ebx
c00003cc:	58                   	pop    eax
c00003cd:	81 c4 04 00 00 00    	add    esp,0x4
c00003d3:	6a 02                	push   0x2
c00003d5:	9d                   	popf   
c00003d6:	52                   	push   edx
c00003d7:	e8 c4 d8 01 00       	call   c001dca0 <taskStartupFunction>
c00003dc:	5a                   	pop    edx
c00003dd:	50                   	push   eax
c00003de:	ff d2                	call   edx
c00003e0:	e8 71 de 01 00       	call   c001e256 <taskReturned>
c00003e5:	e9 fb ff ff ff       	jmp    c00003e5 <commonThreadSwitch.firstTime+0x41>

c00003ea <asmQuickAcquireLock>:
c00003ea:	55                   	push   ebp
c00003eb:	89 e5                	mov    ebp,esp
c00003ed:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f0 <asmQuickAcquireLock.retry>:
c00003f0:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003f5:	72 02                	jb     c00003f9 <asmQuickAcquireLock.spin_with_pause>
c00003f7:	fa                   	cli    
c00003f8:	c3                   	ret    

c00003f9 <asmQuickAcquireLock.spin_with_pause>:
c00003f9:	f3 90                	pause  
c00003fb:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000401:	75 f6                	jne    c00003f9 <asmQuickAcquireLock.spin_with_pause>
c0000403:	e9 e8 ff ff ff       	jmp    c00003f0 <asmQuickAcquireLock.retry>

c0000408 <asmQuickReleaseLock>:
c0000408:	55                   	push   ebp
c0000409:	89 e5                	mov    ebp,esp
c000040b:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000412:	5d                   	pop    ebp
c0000413:	c3                   	ret    

c0000414 <asmAcquireLock>:
c0000414:	55                   	push   ebp
c0000415:	89 e5                	mov    ebp,esp
c0000417:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000041a <asmAcquireLock.retry>:
c000041a:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000041f:	72 05                	jb     c0000426 <asmAcquireLock.spin_with_pause>
c0000421:	9c                   	pushf  
c0000422:	58                   	pop    eax
c0000423:	fa                   	cli    
c0000424:	5d                   	pop    ebp
c0000425:	c3                   	ret    

c0000426 <asmAcquireLock.spin_with_pause>:
c0000426:	f3 90                	pause  
c0000428:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000042e:	75 f6                	jne    c0000426 <asmAcquireLock.spin_with_pause>
c0000430:	e9 e5 ff ff ff       	jmp    c000041a <asmAcquireLock.retry>

c0000435 <asmReleaseLock>:
c0000435:	55                   	push   ebp
c0000436:	89 e5                	mov    ebp,esp
c0000438:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000043b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000043e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000444:	52                   	push   edx
c0000445:	9d                   	popf   
c0000446:	5d                   	pop    ebp
c0000447:	c3                   	ret    

c0000448 <loadGDT>:
c0000448:	0f 01 15 50 e2 02 c0 	lgdtd  ds:0xc002e250
c000044f:	66 b8 10 00          	mov    ax,0x10
c0000453:	66 8e d8             	mov    ds,ax
c0000456:	66 8e c0             	mov    es,ax
c0000459:	66 8e e0             	mov    fs,ax
c000045c:	66 8e e8             	mov    gs,ax
c000045f:	66 8e d0             	mov    ss,ax
c0000462:	e9 00 00 00 00       	jmp    c0000467 <flush2>

c0000467 <flush2>:
c0000467:	c3                   	ret    

c0000468 <isr0>:
c0000468:	fa                   	cli    
c0000469:	68 00 00 00 00       	push   0x0
c000046e:	68 00 00 00 00       	push   0x0
c0000473:	e9 44 01 00 00       	jmp    c00005bc <int_common_stub>

c0000478 <isr1>:
c0000478:	fa                   	cli    
c0000479:	6a 00                	push   0x0
c000047b:	6a 01                	push   0x1
c000047d:	e9 3a 01 00 00       	jmp    c00005bc <int_common_stub>

c0000482 <isr2>:
c0000482:	fa                   	cli    
c0000483:	6a 00                	push   0x0
c0000485:	6a 02                	push   0x2
c0000487:	e9 30 01 00 00       	jmp    c00005bc <int_common_stub>

c000048c <isr3>:
c000048c:	fa                   	cli    
c000048d:	6a 00                	push   0x0
c000048f:	6a 03                	push   0x3
c0000491:	e9 26 01 00 00       	jmp    c00005bc <int_common_stub>

c0000496 <isr4>:
c0000496:	fa                   	cli    
c0000497:	6a 00                	push   0x0
c0000499:	6a 04                	push   0x4
c000049b:	e9 1c 01 00 00       	jmp    c00005bc <int_common_stub>

c00004a0 <isr5>:
c00004a0:	fa                   	cli    
c00004a1:	6a 00                	push   0x0
c00004a3:	6a 05                	push   0x5
c00004a5:	e9 12 01 00 00       	jmp    c00005bc <int_common_stub>

c00004aa <isr6>:
c00004aa:	fa                   	cli    
c00004ab:	6a 00                	push   0x0
c00004ad:	6a 06                	push   0x6
c00004af:	e9 08 01 00 00       	jmp    c00005bc <int_common_stub>

c00004b4 <isr7>:
c00004b4:	fa                   	cli    
c00004b5:	6a 00                	push   0x0
c00004b7:	6a 07                	push   0x7
c00004b9:	e9 fe 00 00 00       	jmp    c00005bc <int_common_stub>

c00004be <isr8>:
c00004be:	fa                   	cli    
c00004bf:	6a 08                	push   0x8
c00004c1:	e9 f6 00 00 00       	jmp    c00005bc <int_common_stub>

c00004c6 <isr9>:
c00004c6:	fa                   	cli    
c00004c7:	6a 00                	push   0x0
c00004c9:	6a 09                	push   0x9
c00004cb:	e9 ec 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d0 <isr10>:
c00004d0:	fa                   	cli    
c00004d1:	6a 0a                	push   0xa
c00004d3:	e9 e4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d8 <isr11>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0b                	push   0xb
c00004db:	e9 dc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e0 <isr12>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0c                	push   0xc
c00004e3:	e9 d4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e8 <isr13>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0d                	push   0xd
c00004eb:	e9 cc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f0 <isr14>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0e                	push   0xe
c00004f3:	e9 c4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f8 <isr15>:
c00004f8:	fa                   	cli    
c00004f9:	6a 00                	push   0x0
c00004fb:	6a 0f                	push   0xf
c00004fd:	e9 ba 00 00 00       	jmp    c00005bc <int_common_stub>

c0000502 <isr16>:
c0000502:	fa                   	cli    
c0000503:	6a 00                	push   0x0
c0000505:	6a 10                	push   0x10
c0000507:	e9 b0 00 00 00       	jmp    c00005bc <int_common_stub>

c000050c <isr17>:
c000050c:	fa                   	cli    
c000050d:	6a 00                	push   0x0
c000050f:	6a 11                	push   0x11
c0000511:	e9 a6 00 00 00       	jmp    c00005bc <int_common_stub>

c0000516 <isr18>:
c0000516:	fa                   	cli    
c0000517:	6a 00                	push   0x0
c0000519:	6a 12                	push   0x12
c000051b:	e9 9c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000520 <irq3>:
c0000520:	fa                   	cli    
c0000521:	6a 00                	push   0x0
c0000523:	6a 23                	push   0x23
c0000525:	e9 92 00 00 00       	jmp    c00005bc <int_common_stub>

c000052a <irq4>:
c000052a:	fa                   	cli    
c000052b:	6a 00                	push   0x0
c000052d:	6a 24                	push   0x24
c000052f:	e9 88 00 00 00       	jmp    c00005bc <int_common_stub>

c0000534 <irq5>:
c0000534:	fa                   	cli    
c0000535:	6a 00                	push   0x0
c0000537:	6a 25                	push   0x25
c0000539:	e9 7e 00 00 00       	jmp    c00005bc <int_common_stub>

c000053e <irq6>:
c000053e:	fa                   	cli    
c000053f:	6a 00                	push   0x0
c0000541:	6a 26                	push   0x26
c0000543:	e9 74 00 00 00       	jmp    c00005bc <int_common_stub>

c0000548 <irq7>:
c0000548:	fa                   	cli    
c0000549:	6a 00                	push   0x0
c000054b:	6a 27                	push   0x27
c000054d:	e9 6a 00 00 00       	jmp    c00005bc <int_common_stub>

c0000552 <irq8>:
c0000552:	fa                   	cli    
c0000553:	6a 00                	push   0x0
c0000555:	6a 28                	push   0x28
c0000557:	e9 60 00 00 00       	jmp    c00005bc <int_common_stub>

c000055c <irq9>:
c000055c:	fa                   	cli    
c000055d:	6a 00                	push   0x0
c000055f:	6a 29                	push   0x29
c0000561:	e9 56 00 00 00       	jmp    c00005bc <int_common_stub>

c0000566 <irq10>:
c0000566:	fa                   	cli    
c0000567:	6a 00                	push   0x0
c0000569:	6a 2a                	push   0x2a
c000056b:	e9 4c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000570 <irq11>:
c0000570:	fa                   	cli    
c0000571:	6a 00                	push   0x0
c0000573:	6a 2b                	push   0x2b
c0000575:	e9 42 00 00 00       	jmp    c00005bc <int_common_stub>

c000057a <irq12>:
c000057a:	fa                   	cli    
c000057b:	6a 00                	push   0x0
c000057d:	6a 2c                	push   0x2c
c000057f:	e9 38 00 00 00       	jmp    c00005bc <int_common_stub>

c0000584 <irq13>:
c0000584:	fa                   	cli    
c0000585:	6a 00                	push   0x0
c0000587:	6a 2d                	push   0x2d
c0000589:	e9 2e 00 00 00       	jmp    c00005bc <int_common_stub>

c000058e <irq14>:
c000058e:	fa                   	cli    
c000058f:	6a 00                	push   0x0
c0000591:	6a 2e                	push   0x2e
c0000593:	e9 24 00 00 00       	jmp    c00005bc <int_common_stub>

c0000598 <irq15>:
c0000598:	fa                   	cli    
c0000599:	6a 00                	push   0x0
c000059b:	6a 2f                	push   0x2f
c000059d:	e9 1a 00 00 00       	jmp    c00005bc <int_common_stub>

c00005a2 <irq1>:
c00005a2:	fa                   	cli    
c00005a3:	6a 00                	push   0x0
c00005a5:	6a 21                	push   0x21
c00005a7:	eb 13                	jmp    c00005bc <int_common_stub>

c00005a9 <irq2>:
c00005a9:	fa                   	cli    
c00005aa:	6a 00                	push   0x0
c00005ac:	6a 22                	push   0x22
c00005ae:	eb 0c                	jmp    c00005bc <int_common_stub>

c00005b0 <isr96>:
c00005b0:	6a 00                	push   0x0
c00005b2:	6a 60                	push   0x60
c00005b4:	fb                   	sti    
c00005b5:	eb 05                	jmp    c00005bc <int_common_stub>

c00005b7 <irq0>:
c00005b7:	fa                   	cli    
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 20                	push   0x20

c00005bc <int_common_stub>:
c00005bc:	60                   	pusha  
c00005bd:	1e                   	push   ds
c00005be:	06                   	push   es
c00005bf:	0f a0                	push   fs
c00005c1:	0f a8                	push   gs
c00005c3:	66 b8 10 00          	mov    ax,0x10
c00005c7:	66 8e d8             	mov    ds,ax
c00005ca:	66 8e c0             	mov    es,ax
c00005cd:	66 8e e0             	mov    fs,ax
c00005d0:	66 8e e8             	mov    gs,ax
c00005d3:	54                   	push   esp
c00005d4:	e8 a0 44 01 00       	call   c0014a79 <int_handler>
c00005d9:	81 c4 04 00 00 00    	add    esp,0x4
c00005df:	0f a9                	pop    gs
c00005e1:	0f a1                	pop    fs
c00005e3:	07                   	pop    es
c00005e4:	1f                   	pop    ds
c00005e5:	61                   	popa   
c00005e6:	81 c4 08 00 00 00    	add    esp,0x8
c00005ec:	cf                   	iret   

c00005ed <irq16>:
c00005ed:	fa                   	cli    
c00005ee:	6a 00                	push   0x0
c00005f0:	6a 30                	push   0x30
c00005f2:	e9 c5 ff ff ff       	jmp    c00005bc <int_common_stub>

c00005f7 <irq17>:
c00005f7:	fa                   	cli    
c00005f8:	6a 00                	push   0x0
c00005fa:	6a 31                	push   0x31
c00005fc:	e9 bb ff ff ff       	jmp    c00005bc <int_common_stub>

c0000601 <irq18>:
c0000601:	fa                   	cli    
c0000602:	6a 00                	push   0x0
c0000604:	6a 32                	push   0x32
c0000606:	e9 b1 ff ff ff       	jmp    c00005bc <int_common_stub>

c000060b <irq19>:
c000060b:	fa                   	cli    
c000060c:	6a 00                	push   0x0
c000060e:	6a 33                	push   0x33
c0000610:	e9 a7 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000615 <irq20>:
c0000615:	fa                   	cli    
c0000616:	6a 00                	push   0x0
c0000618:	6a 34                	push   0x34
c000061a:	e9 9d ff ff ff       	jmp    c00005bc <int_common_stub>

c000061f <irq21>:
c000061f:	fa                   	cli    
c0000620:	6a 00                	push   0x0
c0000622:	6a 35                	push   0x35
c0000624:	e9 93 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000629 <irq22>:
c0000629:	fa                   	cli    
c000062a:	6a 00                	push   0x0
c000062c:	6a 36                	push   0x36
c000062e:	e9 89 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000633 <irq23>:
c0000633:	fa                   	cli    
c0000634:	6a 00                	push   0x0
c0000636:	6a 37                	push   0x37
c0000638:	e9 7f ff ff ff       	jmp    c00005bc <int_common_stub>
c000063d:	66 90                	xchg   ax,ax
c000063f:	90                   	nop

c0000640 <memcmp>:
c0000640:	56                   	push   esi
c0000641:	53                   	push   ebx
c0000642:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000646:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000064a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000064e:	85 f6                	test   esi,esi
c0000650:	74 1d                	je     c000066f <memcmp+0x2f>
c0000652:	8a 08                	mov    cl,BYTE PTR [eax]
c0000654:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000657:	38 cb                	cmp    bl,cl
c0000659:	75 19                	jne    c0000674 <memcmp+0x34>
c000065b:	01 c6                	add    esi,eax
c000065d:	eb 0a                	jmp    c0000669 <memcmp+0x29>
c000065f:	90                   	nop
c0000660:	8a 08                	mov    cl,BYTE PTR [eax]
c0000662:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000665:	38 d9                	cmp    cl,bl
c0000667:	75 0b                	jne    c0000674 <memcmp+0x34>
c0000669:	40                   	inc    eax
c000066a:	42                   	inc    edx
c000066b:	39 f0                	cmp    eax,esi
c000066d:	75 f1                	jne    c0000660 <memcmp+0x20>
c000066f:	31 c0                	xor    eax,eax
c0000671:	5b                   	pop    ebx
c0000672:	5e                   	pop    esi
c0000673:	c3                   	ret    
c0000674:	0f b6 c1             	movzx  eax,cl
c0000677:	29 d8                	sub    eax,ebx
c0000679:	5b                   	pop    ebx
c000067a:	5e                   	pop    esi
c000067b:	c3                   	ret    

c000067c <memmove>:
c000067c:	55                   	push   ebp
c000067d:	57                   	push   edi
c000067e:	56                   	push   esi
c000067f:	53                   	push   ebx
c0000680:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000684:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000688:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000068c:	39 dd                	cmp    ebp,ebx
c000068e:	0f 83 80 00 00 00    	jae    c0000714 <memmove+0x98>
c0000694:	85 d2                	test   edx,edx
c0000696:	74 74                	je     c000070c <memmove+0x90>
c0000698:	8d 4b 04             	lea    ecx,[ebx+0x4]
c000069b:	8d 75 04             	lea    esi,[ebp+0x4]
c000069e:	39 cd                	cmp    ebp,ecx
c00006a0:	0f 93 c1             	setae  cl
c00006a3:	39 f3                	cmp    ebx,esi
c00006a5:	0f 93 c0             	setae  al
c00006a8:	89 c6                	mov    esi,eax
c00006aa:	09 ce                	or     esi,ecx
c00006ac:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006af:	89 f0                	mov    eax,esi
c00006b1:	83 f9 0c             	cmp    ecx,0xc
c00006b4:	0f 97 c1             	seta   cl
c00006b7:	84 c8                	test   al,cl
c00006b9:	74 75                	je     c0000730 <memmove+0xb4>
c00006bb:	89 e9                	mov    ecx,ebp
c00006bd:	09 d9                	or     ecx,ebx
c00006bf:	83 e1 03             	and    ecx,0x3
c00006c2:	75 6c                	jne    c0000730 <memmove+0xb4>
c00006c4:	89 d7                	mov    edi,edx
c00006c6:	89 d9                	mov    ecx,ebx
c00006c8:	83 e7 fc             	and    edi,0xfffffffc
c00006cb:	89 ee                	mov    esi,ebp
c00006cd:	01 df                	add    edi,ebx
c00006cf:	90                   	nop
c00006d0:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006d2:	83 c6 04             	add    esi,0x4
c00006d5:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006d8:	83 c1 04             	add    ecx,0x4
c00006db:	39 f9                	cmp    ecx,edi
c00006dd:	75 f1                	jne    c00006d0 <memmove+0x54>
c00006df:	89 d1                	mov    ecx,edx
c00006e1:	89 d7                	mov    edi,edx
c00006e3:	83 e1 fc             	and    ecx,0xfffffffc
c00006e6:	29 cf                	sub    edi,ecx
c00006e8:	01 cb                	add    ebx,ecx
c00006ea:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006ee:	39 ca                	cmp    edx,ecx
c00006f0:	74 1a                	je     c000070c <memmove+0x90>
c00006f2:	8a 03                	mov    al,BYTE PTR [ebx]
c00006f4:	83 ff 01             	cmp    edi,0x1
c00006f7:	88 06                	mov    BYTE PTR [esi],al
c00006f9:	74 11                	je     c000070c <memmove+0x90>
c00006fb:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00006fe:	83 ff 02             	cmp    edi,0x2
c0000701:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000704:	74 06                	je     c000070c <memmove+0x90>
c0000706:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000709:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000070c:	5b                   	pop    ebx
c000070d:	89 e8                	mov    eax,ebp
c000070f:	5e                   	pop    esi
c0000710:	5f                   	pop    edi
c0000711:	5d                   	pop    ebp
c0000712:	c3                   	ret    
c0000713:	90                   	nop
c0000714:	76 f6                	jbe    c000070c <memmove+0x90>
c0000716:	85 d2                	test   edx,edx
c0000718:	74 f2                	je     c000070c <memmove+0x90>
c000071a:	4b                   	dec    ebx
c000071b:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000071e:	66 90                	xchg   ax,ax
c0000720:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000723:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000726:	4a                   	dec    edx
c0000727:	75 f7                	jne    c0000720 <memmove+0xa4>
c0000729:	5b                   	pop    ebx
c000072a:	89 e8                	mov    eax,ebp
c000072c:	5e                   	pop    esi
c000072d:	5f                   	pop    edi
c000072e:	5d                   	pop    ebp
c000072f:	c3                   	ret    
c0000730:	01 ea                	add    edx,ebp
c0000732:	89 e9                	mov    ecx,ebp
c0000734:	8a 03                	mov    al,BYTE PTR [ebx]
c0000736:	41                   	inc    ecx
c0000737:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000073a:	43                   	inc    ebx
c000073b:	39 d1                	cmp    ecx,edx
c000073d:	75 f5                	jne    c0000734 <memmove+0xb8>
c000073f:	eb cb                	jmp    c000070c <memmove+0x90>
c0000741:	8d 76 00             	lea    esi,[esi+0x0]

c0000744 <memcpy>:
c0000744:	57                   	push   edi
c0000745:	56                   	push   esi
c0000746:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000074a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000074e:	a8 03                	test   al,0x3
c0000750:	74 12                	je     c0000764 <memcpy+0x20>
c0000752:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000756:	89 c1                	mov    ecx,eax
c0000758:	fc                   	cld    
c0000759:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000075b:	29 c7                	sub    edi,eax
c000075d:	5e                   	pop    esi
c000075e:	89 f8                	mov    eax,edi
c0000760:	5f                   	pop    edi
c0000761:	c3                   	ret    
c0000762:	66 90                	xchg   ax,ax
c0000764:	89 c1                	mov    ecx,eax
c0000766:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000076a:	c1 e9 02             	shr    ecx,0x2
c000076d:	fc                   	cld    
c000076e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0000770:	29 c7                	sub    edi,eax
c0000772:	5e                   	pop    esi
c0000773:	89 f8                	mov    eax,edi
c0000775:	5f                   	pop    edi
c0000776:	c3                   	ret    
c0000777:	90                   	nop

c0000778 <memset>:
c0000778:	57                   	push   edi
c0000779:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000077d:	85 c9                	test   ecx,ecx
c000077f:	74 0b                	je     c000078c <memset+0x14>
c0000781:	fc                   	cld    
c0000782:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000786:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000078a:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000078c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000790:	5f                   	pop    edi
c0000791:	c3                   	ret    
c0000792:	66 90                	xchg   ax,ax

c0000794 <strlen>:
c0000794:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000798:	31 c0                	xor    eax,eax
c000079a:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c000079d:	74 09                	je     c00007a8 <strlen+0x14>
c000079f:	90                   	nop
c00007a0:	40                   	inc    eax
c00007a1:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00007a5:	75 f9                	jne    c00007a0 <strlen+0xc>
c00007a7:	c3                   	ret    
c00007a8:	c3                   	ret    
c00007a9:	8d 76 00             	lea    esi,[esi+0x0]

c00007ac <strpbrk>:
c00007ac:	57                   	push   edi
c00007ad:	56                   	push   esi
c00007ae:	53                   	push   ebx
c00007af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007b3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007b7:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b9:	84 db                	test   bl,bl
c00007bb:	74 21                	je     c00007de <strpbrk+0x32>
c00007bd:	8a 07                	mov    al,BYTE PTR [edi]
c00007bf:	84 c0                	test   al,al
c00007c1:	74 14                	je     c00007d7 <strpbrk+0x2b>
c00007c3:	38 d8                	cmp    al,bl
c00007c5:	74 19                	je     c00007e0 <strpbrk+0x34>
c00007c7:	89 fa                	mov    edx,edi
c00007c9:	eb 05                	jmp    c00007d0 <strpbrk+0x24>
c00007cb:	90                   	nop
c00007cc:	38 d9                	cmp    cl,bl
c00007ce:	74 10                	je     c00007e0 <strpbrk+0x34>
c00007d0:	42                   	inc    edx
c00007d1:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007d3:	84 c9                	test   cl,cl
c00007d5:	75 f5                	jne    c00007cc <strpbrk+0x20>
c00007d7:	46                   	inc    esi
c00007d8:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007da:	84 db                	test   bl,bl
c00007dc:	75 e1                	jne    c00007bf <strpbrk+0x13>
c00007de:	31 f6                	xor    esi,esi
c00007e0:	89 f0                	mov    eax,esi
c00007e2:	5b                   	pop    ebx
c00007e3:	5e                   	pop    esi
c00007e4:	5f                   	pop    edi
c00007e5:	c3                   	ret    
c00007e6:	66 90                	xchg   ax,ax

c00007e8 <strtok>:
c00007e8:	56                   	push   esi
c00007e9:	53                   	push   ebx
c00007ea:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007ee:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007f2:	85 db                	test   ebx,ebx
c00007f4:	75 07                	jne    c00007fd <strtok+0x15>
c00007f6:	eb 2c                	jmp    c0000824 <strtok+0x3c>
c00007f8:	43                   	inc    ebx
c00007f9:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007fd:	56                   	push   esi
c00007fe:	53                   	push   ebx
c00007ff:	e8 a8 ff ff ff       	call   c00007ac <strpbrk>
c0000804:	5a                   	pop    edx
c0000805:	a3 28 de 02 c0       	mov    ds:0xc002de28,eax
c000080a:	59                   	pop    ecx
c000080b:	39 d8                	cmp    eax,ebx
c000080d:	74 e9                	je     c00007f8 <strtok+0x10>
c000080f:	85 c0                	test   eax,eax
c0000811:	74 1b                	je     c000082e <strtok+0x46>
c0000813:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000816:	8d 50 01             	lea    edx,[eax+0x1]
c0000819:	89 d8                	mov    eax,ebx
c000081b:	89 15 28 de 02 c0    	mov    DWORD PTR ds:0xc002de28,edx
c0000821:	5b                   	pop    ebx
c0000822:	5e                   	pop    esi
c0000823:	c3                   	ret    
c0000824:	8b 1d 28 de 02 c0    	mov    ebx,DWORD PTR ds:0xc002de28
c000082a:	85 db                	test   ebx,ebx
c000082c:	75 cf                	jne    c00007fd <strtok+0x15>
c000082e:	31 c0                	xor    eax,eax
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    
c0000833:	90                   	nop

c0000834 <strcpy>:
c0000834:	53                   	push   ebx
c0000835:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000839:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000083d:	89 c3                	mov    ebx,eax
c000083f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000841:	84 d2                	test   dl,dl
c0000843:	74 0d                	je     c0000852 <strcpy+0x1e>
c0000845:	8d 76 00             	lea    esi,[esi+0x0]
c0000848:	88 13                	mov    BYTE PTR [ebx],dl
c000084a:	41                   	inc    ecx
c000084b:	43                   	inc    ebx
c000084c:	8a 11                	mov    dl,BYTE PTR [ecx]
c000084e:	84 d2                	test   dl,dl
c0000850:	75 f6                	jne    c0000848 <strcpy+0x14>
c0000852:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000855:	5b                   	pop    ebx
c0000856:	c3                   	ret    
c0000857:	90                   	nop

c0000858 <strncpy>:
c0000858:	55                   	push   ebp
c0000859:	57                   	push   edi
c000085a:	56                   	push   esi
c000085b:	53                   	push   ebx
c000085c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000860:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000864:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000868:	85 c0                	test   eax,eax
c000086a:	74 39                	je     c00008a5 <strncpy+0x4d>
c000086c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000086e:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000871:	8d 55 01             	lea    edx,[ebp+0x1]
c0000874:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0000877:	84 db                	test   bl,bl
c0000879:	74 31                	je     c00008ac <strncpy+0x54>
c000087b:	85 c9                	test   ecx,ecx
c000087d:	74 26                	je     c00008a5 <strncpy+0x4d>
c000087f:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000882:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000885:	8d 55 02             	lea    edx,[ebp+0x2]
c0000888:	8d 46 02             	lea    eax,[esi+0x2]
c000088b:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c000088e:	84 db                	test   bl,bl
c0000890:	75 0f                	jne    c00008a1 <strncpy+0x49>
c0000892:	eb 18                	jmp    c00008ac <strncpy+0x54>
c0000894:	40                   	inc    eax
c0000895:	42                   	inc    edx
c0000896:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000899:	49                   	dec    ecx
c000089a:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000089d:	84 db                	test   bl,bl
c000089f:	74 0b                	je     c00008ac <strncpy+0x54>
c00008a1:	85 c9                	test   ecx,ecx
c00008a3:	75 ef                	jne    c0000894 <strncpy+0x3c>
c00008a5:	5b                   	pop    ebx
c00008a6:	89 e8                	mov    eax,ebp
c00008a8:	5e                   	pop    esi
c00008a9:	5f                   	pop    edi
c00008aa:	5d                   	pop    ebp
c00008ab:	c3                   	ret    
c00008ac:	85 c9                	test   ecx,ecx
c00008ae:	74 f5                	je     c00008a5 <strncpy+0x4d>
c00008b0:	fc                   	cld    
c00008b1:	31 c0                	xor    eax,eax
c00008b3:	89 d7                	mov    edi,edx
c00008b5:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00008b7:	89 e8                	mov    eax,ebp
c00008b9:	5b                   	pop    ebx
c00008ba:	5e                   	pop    esi
c00008bb:	5f                   	pop    edi
c00008bc:	5d                   	pop    ebp
c00008bd:	c3                   	ret    
c00008be:	66 90                	xchg   ax,ax

c00008c0 <strcmp>:
c00008c0:	56                   	push   esi
c00008c1:	53                   	push   ebx
c00008c2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00008c6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008ca:	8a 16                	mov    dl,BYTE PTR [esi]
c00008cc:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008cf:	38 d1                	cmp    cl,dl
c00008d1:	75 1d                	jne    c00008f0 <strcmp+0x30>
c00008d3:	84 c9                	test   cl,cl
c00008d5:	74 21                	je     c00008f8 <strcmp+0x38>
c00008d7:	b8 01 00 00 00       	mov    eax,0x1
c00008dc:	eb 07                	jmp    c00008e5 <strcmp+0x25>
c00008de:	66 90                	xchg   ax,ax
c00008e0:	40                   	inc    eax
c00008e1:	84 d2                	test   dl,dl
c00008e3:	74 13                	je     c00008f8 <strcmp+0x38>
c00008e5:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008e8:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 f0                	je     c00008e0 <strcmp+0x20>
c00008f0:	0f b6 c2             	movzx  eax,dl
c00008f3:	5b                   	pop    ebx
c00008f4:	29 c8                	sub    eax,ecx
c00008f6:	5e                   	pop    esi
c00008f7:	c3                   	ret    
c00008f8:	31 c0                	xor    eax,eax
c00008fa:	5b                   	pop    ebx
c00008fb:	5e                   	pop    esi
c00008fc:	c3                   	ret    
c00008fd:	8d 76 00             	lea    esi,[esi+0x0]

c0000900 <strchr>:
c0000900:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000904:	8a 10                	mov    dl,BYTE PTR [eax]
c0000906:	84 d2                	test   dl,dl
c0000908:	74 15                	je     c000091f <strchr+0x1f>
c000090a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000090e:	38 ca                	cmp    dl,cl
c0000910:	75 06                	jne    c0000918 <strchr+0x18>
c0000912:	eb 0e                	jmp    c0000922 <strchr+0x22>
c0000914:	38 ca                	cmp    dl,cl
c0000916:	74 09                	je     c0000921 <strchr+0x21>
c0000918:	40                   	inc    eax
c0000919:	8a 10                	mov    dl,BYTE PTR [eax]
c000091b:	84 d2                	test   dl,dl
c000091d:	75 f5                	jne    c0000914 <strchr+0x14>
c000091f:	31 c0                	xor    eax,eax
c0000921:	c3                   	ret    
c0000922:	c3                   	ret    
c0000923:	90                   	nop

c0000924 <strncmp>:
c0000924:	57                   	push   edi
c0000925:	56                   	push   esi
c0000926:	53                   	push   ebx
c0000927:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000092b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000092f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000933:	85 ff                	test   edi,edi
c0000935:	74 28                	je     c000095f <strncmp+0x3b>
c0000937:	8a 16                	mov    dl,BYTE PTR [esi]
c0000939:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000093c:	38 d1                	cmp    cl,dl
c000093e:	75 28                	jne    c0000968 <strncmp+0x44>
c0000940:	8d 46 01             	lea    eax,[esi+0x1]
c0000943:	84 c9                	test   cl,cl
c0000945:	74 18                	je     c000095f <strncmp+0x3b>
c0000947:	01 fe                	add    esi,edi
c0000949:	eb 0f                	jmp    c000095a <strncmp+0x36>
c000094b:	90                   	nop
c000094c:	8a 10                	mov    dl,BYTE PTR [eax]
c000094e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000951:	38 ca                	cmp    dl,cl
c0000953:	75 13                	jne    c0000968 <strncmp+0x44>
c0000955:	40                   	inc    eax
c0000956:	84 d2                	test   dl,dl
c0000958:	74 05                	je     c000095f <strncmp+0x3b>
c000095a:	43                   	inc    ebx
c000095b:	39 c6                	cmp    esi,eax
c000095d:	75 ed                	jne    c000094c <strncmp+0x28>
c000095f:	5b                   	pop    ebx
c0000960:	31 c0                	xor    eax,eax
c0000962:	5e                   	pop    esi
c0000963:	5f                   	pop    edi
c0000964:	c3                   	ret    
c0000965:	8d 76 00             	lea    esi,[esi+0x0]
c0000968:	5b                   	pop    ebx
c0000969:	0f b6 c2             	movzx  eax,dl
c000096c:	5e                   	pop    esi
c000096d:	29 c8                	sub    eax,ecx
c000096f:	5f                   	pop    edi
c0000970:	c3                   	ret    
c0000971:	8d 76 00             	lea    esi,[esi+0x0]

c0000974 <strcat>:
c0000974:	56                   	push   esi
c0000975:	53                   	push   ebx
c0000976:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000097a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000097e:	89 c3                	mov    ebx,eax
c0000980:	eb 04                	jmp    c0000986 <strcat+0x12>
c0000982:	66 90                	xchg   ax,ax
c0000984:	89 d3                	mov    ebx,edx
c0000986:	8d 53 01             	lea    edx,[ebx+0x1]
c0000989:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c000098d:	75 f5                	jne    c0000984 <strcat+0x10>
c000098f:	31 d2                	xor    edx,edx
c0000991:	8d 76 00             	lea    esi,[esi+0x0]
c0000994:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000997:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c000099a:	42                   	inc    edx
c000099b:	84 c9                	test   cl,cl
c000099d:	75 f5                	jne    c0000994 <strcat+0x20>
c000099f:	5b                   	pop    ebx
c00009a0:	5e                   	pop    esi
c00009a1:	c3                   	ret    
c00009a2:	66 90                	xchg   ax,ax

c00009a4 <strncat>:
c00009a4:	56                   	push   esi
c00009a5:	53                   	push   ebx
c00009a6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00009aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00009ae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00009b2:	85 f6                	test   esi,esi
c00009b4:	74 1e                	je     c00009d4 <strncat+0x30>
c00009b6:	89 c2                	mov    edx,eax
c00009b8:	42                   	inc    edx
c00009b9:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00009bd:	75 f9                	jne    c00009b8 <strncat+0x14>
c00009bf:	01 ce                	add    esi,ecx
c00009c1:	eb 06                	jmp    c00009c9 <strncat+0x25>
c00009c3:	90                   	nop
c00009c4:	39 f1                	cmp    ecx,esi
c00009c6:	74 10                	je     c00009d8 <strncat+0x34>
c00009c8:	42                   	inc    edx
c00009c9:	41                   	inc    ecx
c00009ca:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009cd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009d0:	84 db                	test   bl,bl
c00009d2:	75 f0                	jne    c00009c4 <strncat+0x20>
c00009d4:	5b                   	pop    ebx
c00009d5:	5e                   	pop    esi
c00009d6:	c3                   	ret    
c00009d7:	90                   	nop
c00009d8:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009db:	5b                   	pop    ebx
c00009dc:	5e                   	pop    esi
c00009dd:	c3                   	ret    
c00009de:	66 90                	xchg   ax,ax

c00009e0 <strstr>:
c00009e0:	57                   	push   edi
c00009e1:	56                   	push   esi
c00009e2:	53                   	push   ebx
c00009e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009e7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009eb:	57                   	push   edi
c00009ec:	e8 a3 fd ff ff       	call   c0000794 <strlen>
c00009f1:	59                   	pop    ecx
c00009f2:	85 c0                	test   eax,eax
c00009f4:	74 2a                	je     c0000a20 <strstr+0x40>
c00009f6:	89 c6                	mov    esi,eax
c00009f8:	eb 12                	jmp    c0000a0c <strstr+0x2c>
c00009fa:	66 90                	xchg   ax,ax
c00009fc:	56                   	push   esi
c00009fd:	57                   	push   edi
c00009fe:	53                   	push   ebx
c00009ff:	e8 3c fc ff ff       	call   c0000640 <memcmp>
c0000a04:	83 c4 0c             	add    esp,0xc
c0000a07:	85 c0                	test   eax,eax
c0000a09:	74 15                	je     c0000a20 <strstr+0x40>
c0000a0b:	43                   	inc    ebx
c0000a0c:	53                   	push   ebx
c0000a0d:	e8 82 fd ff ff       	call   c0000794 <strlen>
c0000a12:	5a                   	pop    edx
c0000a13:	39 f0                	cmp    eax,esi
c0000a15:	73 e5                	jae    c00009fc <strstr+0x1c>
c0000a17:	5b                   	pop    ebx
c0000a18:	31 c0                	xor    eax,eax
c0000a1a:	5e                   	pop    esi
c0000a1b:	5f                   	pop    edi
c0000a1c:	c3                   	ret    
c0000a1d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a20:	89 d8                	mov    eax,ebx
c0000a22:	5b                   	pop    ebx
c0000a23:	5e                   	pop    esi
c0000a24:	5f                   	pop    edi
c0000a25:	c3                   	ret    
c0000a26:	66 90                	xchg   ax,ax

c0000a28 <toupper>:
c0000a28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a2c:	0f b6 d0             	movzx  edx,al
c0000a2f:	f6 82 e0 90 02 c0 02 	test   BYTE PTR [edx-0x3ffd6f20],0x2
c0000a36:	74 03                	je     c0000a3b <toupper+0x13>
c0000a38:	83 e8 20             	sub    eax,0x20
c0000a3b:	c3                   	ret    

c0000a3c <tolower>:
c0000a3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a40:	0f b6 d0             	movzx  edx,al
c0000a43:	f6 82 e0 90 02 c0 01 	test   BYTE PTR [edx-0x3ffd6f20],0x1
c0000a4a:	74 03                	je     c0000a4f <tolower+0x13>
c0000a4c:	83 c0 20             	add    eax,0x20
c0000a4f:	c3                   	ret    

c0000a50 <simple_strtoul>:
c0000a50:	55                   	push   ebp
c0000a51:	57                   	push   edi
c0000a52:	56                   	push   esi
c0000a53:	53                   	push   ebx
c0000a54:	83 ec 08             	sub    esp,0x8
c0000a57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a5b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a5f:	90                   	nop
c0000a60:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a63:	f6 82 e0 90 02 c0 08 	test   BYTE PTR [edx-0x3ffd6f20],0x8
c0000a6a:	75 05                	jne    c0000a71 <simple_strtoul+0x21>
c0000a6c:	80 fa 09             	cmp    dl,0x9
c0000a6f:	75 03                	jne    c0000a74 <simple_strtoul+0x24>
c0000a71:	41                   	inc    ecx
c0000a72:	eb ec                	jmp    c0000a60 <simple_strtoul+0x10>
c0000a74:	80 fa 2d             	cmp    dl,0x2d
c0000a77:	0f 84 1b 01 00 00    	je     c0000b98 <simple_strtoul+0x148>
c0000a7d:	80 fa 2b             	cmp    dl,0x2b
c0000a80:	0f 84 c2 00 00 00    	je     c0000b48 <simple_strtoul+0xf8>
c0000a86:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a8e:	85 f6                	test   esi,esi
c0000a90:	0f 85 c3 00 00 00    	jne    c0000b59 <simple_strtoul+0x109>
c0000a96:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a98:	80 fa 30             	cmp    dl,0x30
c0000a9b:	0f 84 47 01 00 00    	je     c0000be8 <simple_strtoul+0x198>
c0000aa1:	be 0a 00 00 00       	mov    esi,0xa
c0000aa6:	84 d2                	test   dl,dl
c0000aa8:	0f 84 6f 01 00 00    	je     c0000c1d <simple_strtoul+0x1cd>
c0000aae:	31 ed                	xor    ebp,ebp
c0000ab0:	31 ff                	xor    edi,edi
c0000ab2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000ab9:	eb 2b                	jmp    c0000ae6 <simple_strtoul+0x96>
c0000abb:	90                   	nop
c0000abc:	83 eb 30             	sub    ebx,0x30
c0000abf:	39 f3                	cmp    ebx,esi
c0000ac1:	73 4d                	jae    c0000b10 <simple_strtoul+0xc0>
c0000ac3:	31 d2                	xor    edx,edx
c0000ac5:	89 d8                	mov    eax,ebx
c0000ac7:	f7 d0                	not    eax
c0000ac9:	f7 f6                	div    esi
c0000acb:	39 f8                	cmp    eax,edi
c0000acd:	0f 82 b1 00 00 00    	jb     c0000b84 <simple_strtoul+0x134>
c0000ad3:	0f af fe             	imul   edi,esi
c0000ad6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000add:	01 df                	add    edi,ebx
c0000adf:	41                   	inc    ecx
c0000ae0:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000ae2:	84 d2                	test   dl,dl
c0000ae4:	74 2a                	je     c0000b10 <simple_strtoul+0xc0>
c0000ae6:	0f b6 da             	movzx  ebx,dl
c0000ae9:	f6 83 e0 90 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6f20],0x4
c0000af0:	75 ca                	jne    c0000abc <simple_strtoul+0x6c>
c0000af2:	0f be d2             	movsx  edx,dl
c0000af5:	52                   	push   edx
c0000af6:	e8 2d ff ff ff       	call   c0000a28 <toupper>
c0000afb:	5b                   	pop    ebx
c0000afc:	0f b6 d0             	movzx  edx,al
c0000aff:	f6 82 e0 90 02 c0 01 	test   BYTE PTR [edx-0x3ffd6f20],0x1
c0000b06:	74 08                	je     c0000b10 <simple_strtoul+0xc0>
c0000b08:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000b0b:	39 f3                	cmp    ebx,esi
c0000b0d:	72 b4                	jb     c0000ac3 <simple_strtoul+0x73>
c0000b0f:	90                   	nop
c0000b10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b14:	85 c0                	test   eax,eax
c0000b16:	74 14                	je     c0000b2c <simple_strtoul+0xdc>
c0000b18:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000b1b:	09 f8                	or     eax,edi
c0000b1d:	75 71                	jne    c0000b90 <simple_strtoul+0x140>
c0000b1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b23:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b27:	31 ff                	xor    edi,edi
c0000b29:	89 30                	mov    DWORD PTR [eax],esi
c0000b2b:	90                   	nop
c0000b2c:	4d                   	dec    ebp
c0000b2d:	75 05                	jne    c0000b34 <simple_strtoul+0xe4>
c0000b2f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b34:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b39:	75 02                	jne    c0000b3d <simple_strtoul+0xed>
c0000b3b:	f7 df                	neg    edi
c0000b3d:	83 c4 08             	add    esp,0x8
c0000b40:	89 f8                	mov    eax,edi
c0000b42:	5b                   	pop    ebx
c0000b43:	5e                   	pop    esi
c0000b44:	5f                   	pop    edi
c0000b45:	5d                   	pop    ebp
c0000b46:	c3                   	ret    
c0000b47:	90                   	nop
c0000b48:	41                   	inc    ecx
c0000b49:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b51:	85 f6                	test   esi,esi
c0000b53:	0f 84 3d ff ff ff    	je     c0000a96 <simple_strtoul+0x46>
c0000b59:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b5c:	83 f8 22             	cmp    eax,0x22
c0000b5f:	77 6a                	ja     c0000bcb <simple_strtoul+0x17b>
c0000b61:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b63:	83 fe 08             	cmp    esi,0x8
c0000b66:	0f 84 a2 00 00 00    	je     c0000c0e <simple_strtoul+0x1be>
c0000b6c:	83 fe 10             	cmp    esi,0x10
c0000b6f:	0f 85 31 ff ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000b75:	80 fa 30             	cmp    dl,0x30
c0000b78:	74 2c                	je     c0000ba6 <simple_strtoul+0x156>
c0000b7a:	be 10 00 00 00       	mov    esi,0x10
c0000b7f:	e9 22 ff ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000b84:	bd 01 00 00 00       	mov    ebp,0x1
c0000b89:	31 ff                	xor    edi,edi
c0000b8b:	e9 4f ff ff ff       	jmp    c0000adf <simple_strtoul+0x8f>
c0000b90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b94:	89 08                	mov    DWORD PTR [eax],ecx
c0000b96:	eb 94                	jmp    c0000b2c <simple_strtoul+0xdc>
c0000b98:	41                   	inc    ecx
c0000b99:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000ba1:	e9 e8 fe ff ff       	jmp    c0000a8e <simple_strtoul+0x3e>
c0000ba6:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000baa:	88 04 24             	mov    BYTE PTR [esp],al
c0000bad:	50                   	push   eax
c0000bae:	e8 89 fe ff ff       	call   c0000a3c <tolower>
c0000bb3:	5e                   	pop    esi
c0000bb4:	83 f8 78             	cmp    eax,0x78
c0000bb7:	0f 84 84 00 00 00    	je     c0000c41 <simple_strtoul+0x1f1>
c0000bbd:	41                   	inc    ecx
c0000bbe:	be 10 00 00 00       	mov    esi,0x10
c0000bc3:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bc6:	e9 db fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000bcb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000bcf:	85 ff                	test   edi,edi
c0000bd1:	74 5c                	je     c0000c2f <simple_strtoul+0x1df>
c0000bd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bd7:	85 c9                	test   ecx,ecx
c0000bd9:	75 4e                	jne    c0000c29 <simple_strtoul+0x1d9>
c0000bdb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000be1:	31 ff                	xor    edi,edi
c0000be3:	e9 4c ff ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000be8:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bec:	88 04 24             	mov    BYTE PTR [esp],al
c0000bef:	50                   	push   eax
c0000bf0:	e8 47 fe ff ff       	call   c0000a3c <tolower>
c0000bf5:	5d                   	pop    ebp
c0000bf6:	83 f8 78             	cmp    eax,0x78
c0000bf9:	74 3b                	je     c0000c36 <simple_strtoul+0x1e6>
c0000bfb:	41                   	inc    ecx
c0000bfc:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bff:	80 fa 30             	cmp    dl,0x30
c0000c02:	74 13                	je     c0000c17 <simple_strtoul+0x1c7>
c0000c04:	be 08 00 00 00       	mov    esi,0x8
c0000c09:	e9 98 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000c0e:	80 fa 30             	cmp    dl,0x30
c0000c11:	0f 85 8f fe ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000c17:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000c1a:	41                   	inc    ecx
c0000c1b:	eb e7                	jmp    c0000c04 <simple_strtoul+0x1b4>
c0000c1d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000c21:	85 d2                	test   edx,edx
c0000c23:	74 0a                	je     c0000c2f <simple_strtoul+0x1df>
c0000c25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c29:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c2d:	89 30                	mov    DWORD PTR [eax],esi
c0000c2f:	31 ff                	xor    edi,edi
c0000c31:	e9 fe fe ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000c36:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c39:	83 c1 02             	add    ecx,0x2
c0000c3c:	e9 34 ff ff ff       	jmp    c0000b75 <simple_strtoul+0x125>
c0000c41:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c44:	be 10 00 00 00       	mov    esi,0x10
c0000c49:	83 c1 02             	add    ecx,0x2
c0000c4c:	e9 55 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>

c0000c51 <largebin_index>:
c0000c51:	89 c2                	mov    edx,eax
c0000c53:	c1 ea 08             	shr    edx,0x8
c0000c56:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c5c:	77 10                	ja     c0000c6e <largebin_index+0x1d>
c0000c5e:	0f bd d2             	bsr    edx,edx
c0000c61:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c64:	d3 e8                	shr    eax,cl
c0000c66:	83 e0 03             	and    eax,0x3
c0000c69:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c6d:	c3                   	ret    
c0000c6e:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c73:	c3                   	ret    

c0000c74 <malloc_init_state>:
c0000c74:	53                   	push   ebx
c0000c75:	8d 50 34             	lea    edx,[eax+0x34]
c0000c78:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c7e:	89 d1                	mov    ecx,edx
c0000c80:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c83:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c86:	83 c2 08             	add    edx,0x8
c0000c89:	39 da                	cmp    edx,ebx
c0000c8b:	75 f3                	jne    c0000c80 <malloc_init_state+0xc>
c0000c8d:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c8f:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c99:	83 e2 03             	and    edx,0x3
c0000c9c:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000ca6:	83 ca 48             	or     edx,0x48
c0000ca9:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000cb3:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000cbd:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000cc4:	89 10                	mov    DWORD PTR [eax],edx
c0000cc6:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000cc9:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cd3:	5b                   	pop    ebx
c0000cd4:	c3                   	ret    

c0000cd5 <malloc_consolidate>:
c0000cd5:	8b 10                	mov    edx,DWORD PTR [eax]
c0000cd7:	85 d2                	test   edx,edx
c0000cd9:	0f 84 d8 00 00 00    	je     c0000db7 <malloc_consolidate+0xe2>
c0000cdf:	55                   	push   ebp
c0000ce0:	83 e2 fd             	and    edx,0xfffffffd
c0000ce3:	57                   	push   edi
c0000ce4:	89 c5                	mov    ebp,eax
c0000ce6:	56                   	push   esi
c0000ce7:	8d 78 34             	lea    edi,[eax+0x34]
c0000cea:	53                   	push   ebx
c0000ceb:	83 ec 10             	sub    esp,0x10
c0000cee:	89 10                	mov    DWORD PTR [eax],edx
c0000cf0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cf4:	c1 ea 03             	shr    edx,0x3
c0000cf7:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cfb:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cff:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000d02:	85 d2                	test   edx,edx
c0000d04:	0f 84 98 00 00 00    	je     c0000da2 <malloc_consolidate+0xcd>
c0000d0a:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000d11:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000d14:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000d17:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d1b:	89 f9                	mov    ecx,edi
c0000d1d:	83 e1 fe             	and    ecx,0xfffffffe
c0000d20:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000d23:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000d26:	83 e3 fc             	and    ebx,0xfffffffc
c0000d29:	83 e7 01             	and    edi,0x1
c0000d2c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d2f:	75 14                	jne    c0000d45 <malloc_consolidate+0x70>
c0000d31:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d33:	29 fa                	sub    edx,edi
c0000d35:	01 f9                	add    ecx,edi
c0000d37:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d3a:	89 fb                	mov    ebx,edi
c0000d3c:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d3f:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d42:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d45:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d48:	74 40                	je     c0000d8a <malloc_consolidate+0xb5>
c0000d4a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d4d:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d50:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d54:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d57:	83 e7 01             	and    edi,0x1
c0000d5a:	75 0e                	jne    c0000d6a <malloc_consolidate+0x95>
c0000d5c:	01 d9                	add    ecx,ebx
c0000d5e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d61:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d64:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d67:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d6a:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d6d:	89 ce                	mov    esi,ecx
c0000d6f:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d72:	83 ce 01             	or     esi,0x1
c0000d75:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d78:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d7b:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d7e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d82:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d85:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d88:	eb 0c                	jmp    c0000d96 <malloc_consolidate+0xc1>
c0000d8a:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d8d:	83 c9 01             	or     ecx,0x1
c0000d90:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d93:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d9a:	85 d2                	test   edx,edx
c0000d9c:	0f 85 6f ff ff ff    	jne    c0000d11 <malloc_consolidate+0x3c>
c0000da2:	83 c5 04             	add    ebp,0x4
c0000da5:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000da9:	0f 85 50 ff ff ff    	jne    c0000cff <malloc_consolidate+0x2a>
c0000daf:	83 c4 10             	add    esp,0x10
c0000db2:	5b                   	pop    ebx
c0000db3:	5e                   	pop    esi
c0000db4:	5f                   	pop    edi
c0000db5:	5d                   	pop    ebp
c0000db6:	c3                   	ret    
c0000db7:	e9 b8 fe ff ff       	jmp    c0000c74 <malloc_init_state>

c0000dbc <dlfree>:
c0000dbc:	57                   	push   edi
c0000dbd:	56                   	push   esi
c0000dbe:	53                   	push   ebx
c0000dbf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000dc3:	85 db                	test   ebx,ebx
c0000dc5:	0f 84 e2 00 00 00    	je     c0000ead <dlfree+0xf1>
c0000dcb:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000dce:	8b 0d 40 de 02 c0    	mov    ecx,DWORD PTR ds:0xc002de40
c0000dd4:	89 f0                	mov    eax,esi
c0000dd6:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000dd9:	83 e0 fc             	and    eax,0xfffffffc
c0000ddc:	39 c1                	cmp    ecx,eax
c0000dde:	72 24                	jb     c0000e04 <dlfree+0x48>
c0000de0:	83 c9 03             	or     ecx,0x3
c0000de3:	c1 e8 03             	shr    eax,0x3
c0000de6:	89 0d 40 de 02 c0    	mov    DWORD PTR ds:0xc002de40,ecx
c0000dec:	83 e8 02             	sub    eax,0x2
c0000def:	8b 0c 85 44 de 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd21bc]
c0000df6:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000df8:	89 14 85 44 de 02 c0 	mov    DWORD PTR [eax*4-0x3ffd21bc],edx
c0000dff:	e9 a9 00 00 00       	jmp    c0000ead <dlfree+0xf1>
c0000e04:	83 e6 02             	and    esi,0x2
c0000e07:	0f 85 a0 00 00 00    	jne    c0000ead <dlfree+0xf1>
c0000e0d:	83 c9 01             	or     ecx,0x1
c0000e10:	8d 34 02             	lea    esi,[edx+eax*1]
c0000e13:	89 0d 40 de 02 c0    	mov    DWORD PTR ds:0xc002de40,ecx
c0000e19:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000e1c:	83 e1 fc             	and    ecx,0xfffffffc
c0000e1f:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000e23:	75 13                	jne    c0000e38 <dlfree+0x7c>
c0000e25:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e28:	29 da                	sub    edx,ebx
c0000e2a:	01 d8                	add    eax,ebx
c0000e2c:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e2f:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e32:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e35:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e38:	39 35 6c de 02 c0    	cmp    DWORD PTR ds:0xc002de6c,esi
c0000e3e:	74 40                	je     c0000e80 <dlfree+0xc4>
c0000e40:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e44:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e47:	80 e3 01             	and    bl,0x1
c0000e4a:	75 0e                	jne    c0000e5a <dlfree+0x9e>
c0000e4c:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e4f:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e52:	01 c8                	add    eax,ecx
c0000e54:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e57:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e5a:	8b 0d 7c de 02 c0    	mov    ecx,DWORD PTR ds:0xc002de7c
c0000e60:	c7 42 0c 74 de 02 c0 	mov    DWORD PTR [edx+0xc],0xc002de74
c0000e67:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e6a:	89 15 7c de 02 c0    	mov    DWORD PTR ds:0xc002de7c,edx
c0000e70:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e73:	89 c1                	mov    ecx,eax
c0000e75:	83 c9 01             	or     ecx,0x1
c0000e78:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e7b:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e7e:	eb 10                	jmp    c0000e90 <dlfree+0xd4>
c0000e80:	01 c8                	add    eax,ecx
c0000e82:	89 c1                	mov    ecx,eax
c0000e84:	83 c9 01             	or     ecx,0x1
c0000e87:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e8a:	89 15 6c de 02 c0    	mov    DWORD PTR ds:0xc002de6c,edx
c0000e90:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e95:	76 16                	jbe    c0000ead <dlfree+0xf1>
c0000e97:	f6 05 40 de 02 c0 02 	test   BYTE PTR ds:0xc002de40,0x2
c0000e9e:	74 0d                	je     c0000ead <dlfree+0xf1>
c0000ea0:	5b                   	pop    ebx
c0000ea1:	b8 40 de 02 c0       	mov    eax,0xc002de40
c0000ea6:	5e                   	pop    esi
c0000ea7:	5f                   	pop    edi
c0000ea8:	e9 28 fe ff ff       	jmp    c0000cd5 <malloc_consolidate>
c0000ead:	5b                   	pop    ebx
c0000eae:	5e                   	pop    esi
c0000eaf:	5f                   	pop    edi
c0000eb0:	c3                   	ret    

c0000eb1 <sYSMALLOc>:
c0000eb1:	55                   	push   ebp
c0000eb2:	57                   	push   edi
c0000eb3:	56                   	push   esi
c0000eb4:	53                   	push   ebx
c0000eb5:	89 d3                	mov    ebx,edx
c0000eb7:	83 ec 2c             	sub    esp,0x2c
c0000eba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000ebe:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000ec4:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000ec7:	8d 42 ff             	lea    eax,[edx-0x1]
c0000eca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ece:	74 1f                	je     c0000eef <sYSMALLOc+0x3e>
c0000ed0:	89 d8                	mov    eax,ebx
c0000ed2:	e8 fe fd ff ff       	call   c0000cd5 <malloc_consolidate>
c0000ed7:	83 ec 0c             	sub    esp,0xc
c0000eda:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ede:	83 e8 07             	sub    eax,0x7
c0000ee1:	50                   	push   eax
c0000ee2:	e8 30 02 00 00       	call   c0001117 <dlmalloc>
c0000ee7:	83 c4 10             	add    esp,0x10
c0000eea:	e9 20 02 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000eef:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000ef2:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ef8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000efb:	83 e0 fc             	and    eax,0xfffffffc
c0000efe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000f06:	83 c0 10             	add    eax,0x10
c0000f09:	01 c1                	add    ecx,eax
c0000f0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000f0f:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000f16:	74 04                	je     c0000f1c <sYSMALLOc+0x6b>
c0000f18:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000f1c:	f7 da                	neg    edx
c0000f1e:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000f22:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000f26:	21 d1                	and    ecx,edx
c0000f28:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f2c:	7f 07                	jg     c0000f35 <sYSMALLOc+0x84>
c0000f2e:	31 c0                	xor    eax,eax
c0000f30:	e9 da 01 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000f35:	83 ec 0c             	sub    esp,0xc
c0000f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f3c:	e8 56 e7 00 00       	call   c000f697 <sbrk>
c0000f41:	83 c4 10             	add    esp,0x10
c0000f44:	89 c6                	mov    esi,eax
c0000f46:	83 f8 ff             	cmp    eax,0xffffffff
c0000f49:	74 e3                	je     c0000f2e <sYSMALLOc+0x7d>
c0000f4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f4f:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f53:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f56:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f5c:	39 f1                	cmp    ecx,esi
c0000f5e:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f64:	75 13                	jne    c0000f79 <sYSMALLOc+0xc8>
c0000f66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f6a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f6e:	83 c8 01             	or     eax,0x1
c0000f71:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f74:	e9 3e 01 00 00       	jmp    c00010b7 <sYSMALLOc+0x206>
c0000f79:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f7f:	88 d0                	mov    al,dl
c0000f81:	83 e0 01             	and    eax,0x1
c0000f84:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f89:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f8d:	0f 95 c0             	setne  al
c0000f90:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f94:	39 f1                	cmp    ecx,esi
c0000f96:	76 12                	jbe    c0000faa <sYSMALLOc+0xf9>
c0000f98:	84 c0                	test   al,al
c0000f9a:	74 0e                	je     c0000faa <sYSMALLOc+0xf9>
c0000f9c:	83 e2 fe             	and    edx,0xfffffffe
c0000f9f:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000fa5:	e9 83 00 00 00       	jmp    c000102d <sYSMALLOc+0x17c>
c0000faa:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000faf:	74 7c                	je     c000102d <sYSMALLOc+0x17c>
c0000fb1:	84 c0                	test   al,al
c0000fb3:	74 0c                	je     c0000fc1 <sYSMALLOc+0x110>
c0000fb5:	89 f0                	mov    eax,esi
c0000fb7:	29 c8                	sub    eax,ecx
c0000fb9:	01 e8                	add    eax,ebp
c0000fbb:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000fc1:	89 f2                	mov    edx,esi
c0000fc3:	83 e2 07             	and    edx,0x7
c0000fc6:	74 0c                	je     c0000fd4 <sYSMALLOc+0x123>
c0000fc8:	b8 08 00 00 00       	mov    eax,0x8
c0000fcd:	29 d0                	sub    eax,edx
c0000fcf:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000fd2:	eb 04                	jmp    c0000fd8 <sYSMALLOc+0x127>
c0000fd4:	89 f5                	mov    ebp,esi
c0000fd6:	31 c0                	xor    eax,eax
c0000fd8:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fdc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fe0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe4:	01 c1                	add    ecx,eax
c0000fe6:	83 ec 0c             	sub    esp,0xc
c0000fe9:	01 f1                	add    ecx,esi
c0000feb:	01 ca                	add    edx,ecx
c0000fed:	29 c8                	sub    eax,ecx
c0000fef:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ff3:	01 c2                	add    edx,eax
c0000ff5:	52                   	push   edx
c0000ff6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ffa:	e8 98 e6 00 00       	call   c000f697 <sbrk>
c0000fff:	83 c4 10             	add    esp,0x10
c0001002:	83 f8 ff             	cmp    eax,0xffffffff
c0001005:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001009:	75 0f                	jne    c000101a <sYSMALLOc+0x169>
c000100b:	83 ec 0c             	sub    esp,0xc
c000100e:	6a 00                	push   0x0
c0001010:	e8 82 e6 00 00       	call   c000f697 <sbrk>
c0001015:	83 c4 10             	add    esp,0x10
c0001018:	eb 30                	jmp    c000104a <sYSMALLOc+0x199>
c000101a:	39 c6                	cmp    esi,eax
c000101c:	76 33                	jbe    c0001051 <sYSMALLOc+0x1a0>
c000101e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001022:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001029:	01 f0                	add    eax,esi
c000102b:	eb 1d                	jmp    c000104a <sYSMALLOc+0x199>
c000102d:	83 ec 0c             	sub    esp,0xc
c0001030:	89 f5                	mov    ebp,esi
c0001032:	6a 00                	push   0x0
c0001034:	e8 5e e6 00 00       	call   c000f697 <sbrk>
c0001039:	89 c2                	mov    edx,eax
c000103b:	29 f2                	sub    edx,esi
c000103d:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001041:	83 c4 10             	add    esp,0x10
c0001044:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000104a:	31 d2                	xor    edx,edx
c000104c:	83 f8 ff             	cmp    eax,0xffffffff
c000104f:	74 66                	je     c00010b7 <sYSMALLOc+0x206>
c0001051:	29 e8                	sub    eax,ebp
c0001053:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0001056:	01 d0                	add    eax,edx
c0001058:	83 c8 01             	or     eax,0x1
c000105b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000105e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001064:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001069:	74 4c                	je     c00010b7 <sYSMALLOc+0x206>
c000106b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000106f:	83 e8 0c             	sub    eax,0xc
c0001072:	83 e0 f8             	and    eax,0xfffffff8
c0001075:	89 c2                	mov    edx,eax
c0001077:	83 ca 01             	or     edx,0x1
c000107a:	83 f8 0f             	cmp    eax,0xf
c000107d:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001080:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001088:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001090:	76 25                	jbe    c00010b7 <sYSMALLOc+0x206>
c0001092:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001098:	83 ec 0c             	sub    esp,0xc
c000109b:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a5:	83 c7 08             	add    edi,0x8
c00010a8:	57                   	push   edi
c00010a9:	e8 0e fd ff ff       	call   c0000dbc <dlfree>
c00010ae:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b4:	83 c4 10             	add    esp,0x10
c00010b7:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c00010bd:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c00010c3:	73 06                	jae    c00010cb <sYSMALLOc+0x21a>
c00010c5:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010cb:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010d1:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010d7:	73 06                	jae    c00010df <sYSMALLOc+0x22e>
c00010d9:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010df:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010e2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010e5:	83 e2 fc             	and    edx,0xfffffffc
c00010e8:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010ec:	0f 82 3c fe ff ff    	jb     c0000f2e <sYSMALLOc+0x7d>
c00010f2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010f6:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010f9:	29 fa                	sub    edx,edi
c00010fb:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010fe:	83 ca 01             	or     edx,0x1
c0001101:	89 fb                	mov    ebx,edi
c0001103:	83 c0 08             	add    eax,0x8
c0001106:	83 cb 01             	or     ebx,0x1
c0001109:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000110c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000110f:	83 c4 2c             	add    esp,0x2c
c0001112:	5b                   	pop    ebx
c0001113:	5e                   	pop    esi
c0001114:	5f                   	pop    edi
c0001115:	5d                   	pop    ebp
c0001116:	c3                   	ret    

c0001117 <dlmalloc>:
c0001117:	55                   	push   ebp
c0001118:	57                   	push   edi
c0001119:	56                   	push   esi
c000111a:	53                   	push   ebx
c000111b:	83 ec 1c             	sub    esp,0x1c
c000111e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001122:	83 f8 df             	cmp    eax,0xffffffdf
c0001125:	0f 87 70 03 00 00    	ja     c000149b <dlmalloc+0x384>
c000112b:	83 c0 0b             	add    eax,0xb
c000112e:	be 10 00 00 00       	mov    esi,0x10
c0001133:	83 f8 0f             	cmp    eax,0xf
c0001136:	76 05                	jbe    c000113d <dlmalloc+0x26>
c0001138:	83 e0 f8             	and    eax,0xfffffff8
c000113b:	89 c6                	mov    esi,eax
c000113d:	8b 3d 40 de 02 c0    	mov    edi,DWORD PTR ds:0xc002de40
c0001143:	f7 c7 01 00 00 00    	test   edi,0x1
c0001149:	75 17                	jne    c0001162 <dlmalloc+0x4b>
c000114b:	85 ff                	test   edi,edi
c000114d:	0f 85 05 03 00 00    	jne    c0001458 <dlmalloc+0x341>
c0001153:	b8 40 de 02 c0       	mov    eax,0xc002de40
c0001158:	e8 78 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c000115d:	e9 f6 02 00 00       	jmp    c0001458 <dlmalloc+0x341>
c0001162:	39 f7                	cmp    edi,esi
c0001164:	72 1f                	jb     c0001185 <dlmalloc+0x6e>
c0001166:	89 f2                	mov    edx,esi
c0001168:	c1 ea 03             	shr    edx,0x3
c000116b:	83 ea 02             	sub    edx,0x2
c000116e:	8b 04 95 44 de 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd21bc]
c0001175:	85 c0                	test   eax,eax
c0001177:	74 0c                	je     c0001185 <dlmalloc+0x6e>
c0001179:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000117c:	89 0c 95 44 de 02 c0 	mov    DWORD PTR [edx*4-0x3ffd21bc],ecx
c0001183:	eb 30                	jmp    c00011b5 <dlmalloc+0x9e>
c0001185:	89 f0                	mov    eax,esi
c0001187:	81 fe ff 00 00 00    	cmp    esi,0xff
c000118d:	77 2e                	ja     c00011bd <dlmalloc+0xa6>
c000118f:	c1 e8 03             	shr    eax,0x3
c0001192:	8d 14 c5 74 de 02 c0 	lea    edx,[eax*8-0x3ffd218c]
c0001199:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000119d:	8d 5a f8             	lea    ebx,[edx-0x8]
c00011a0:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00011a3:	39 c3                	cmp    ebx,eax
c00011a5:	74 2e                	je     c00011d5 <dlmalloc+0xbe>
c00011a7:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00011aa:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00011af:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00011b2:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00011b5:	83 c0 08             	add    eax,0x8
c00011b8:	e9 e0 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c00011bd:	e8 8f fa ff ff       	call   c0000c51 <largebin_index>
c00011c2:	83 e7 02             	and    edi,0x2
c00011c5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011c9:	74 0a                	je     c00011d5 <dlmalloc+0xbe>
c00011cb:	b8 40 de 02 c0       	mov    eax,0xc002de40
c00011d0:	e8 00 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c00011d5:	8d 46 10             	lea    eax,[esi+0x10]
c00011d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011dc:	8b 1d 80 de 02 c0    	mov    ebx,DWORD PTR ds:0xc002de80
c00011e2:	81 fb 74 de 02 c0    	cmp    ebx,0xc002de74
c00011e8:	0f 84 13 01 00 00    	je     c0001301 <dlmalloc+0x1ea>
c00011ee:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011f1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011f4:	83 e7 fc             	and    edi,0xfffffffc
c00011f7:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011fd:	77 4c                	ja     c000124b <dlmalloc+0x134>
c00011ff:	3d 74 de 02 c0       	cmp    eax,0xc002de74
c0001204:	75 45                	jne    c000124b <dlmalloc+0x134>
c0001206:	39 1d 70 de 02 c0    	cmp    DWORD PTR ds:0xc002de70,ebx
c000120c:	75 3d                	jne    c000124b <dlmalloc+0x134>
c000120e:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001212:	73 37                	jae    c000124b <dlmalloc+0x134>
c0001214:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001217:	89 fa                	mov    edx,edi
c0001219:	a3 7c de 02 c0       	mov    ds:0xc002de7c,eax
c000121e:	a3 80 de 02 c0       	mov    ds:0xc002de80,eax
c0001223:	a3 70 de 02 c0       	mov    ds:0xc002de70,eax
c0001228:	29 f2                	sub    edx,esi
c000122a:	c7 40 08 74 de 02 c0 	mov    DWORD PTR [eax+0x8],0xc002de74
c0001231:	c7 40 0c 74 de 02 c0 	mov    DWORD PTR [eax+0xc],0xc002de74
c0001238:	83 ce 01             	or     esi,0x1
c000123b:	89 d1                	mov    ecx,edx
c000123d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001240:	83 c9 01             	or     ecx,0x1
c0001243:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001246:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001249:	eb 15                	jmp    c0001260 <dlmalloc+0x149>
c000124b:	a3 80 de 02 c0       	mov    ds:0xc002de80,eax
c0001250:	39 fe                	cmp    esi,edi
c0001252:	c7 40 08 74 de 02 c0 	mov    DWORD PTR [eax+0x8],0xc002de74
c0001259:	75 0d                	jne    c0001268 <dlmalloc+0x151>
c000125b:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001260:	8d 43 08             	lea    eax,[ebx+0x8]
c0001263:	e9 35 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c0001268:	89 f8                	mov    eax,edi
c000126a:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001270:	77 19                	ja     c000128b <dlmalloc+0x174>
c0001272:	c1 e8 03             	shr    eax,0x3
c0001275:	8d 14 00             	lea    edx,[eax+eax*1]
c0001278:	83 c2 0d             	add    edx,0xd
c000127b:	8d 2c 95 38 de 02 c0 	lea    ebp,[edx*4-0x3ffd21c8]
c0001282:	8b 14 95 40 de 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd21c0]
c0001289:	eb 46                	jmp    c00012d1 <dlmalloc+0x1ba>
c000128b:	e8 c1 f9 ff ff       	call   c0000c51 <largebin_index>
c0001290:	8d 14 00             	lea    edx,[eax+eax*1]
c0001293:	83 c2 0d             	add    edx,0xd
c0001296:	8d 0c 95 40 de 02 c0 	lea    ecx,[edx*4-0x3ffd21c0]
c000129d:	8b 14 95 40 de 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd21c0]
c00012a4:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00012a7:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00012ab:	89 d5                	mov    ebp,edx
c00012ad:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00012b1:	74 1e                	je     c00012d1 <dlmalloc+0x1ba>
c00012b3:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00012b6:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00012b9:	77 12                	ja     c00012cd <dlmalloc+0x1b6>
c00012bb:	83 cf 01             	or     edi,0x1
c00012be:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00012c1:	76 05                	jbe    c00012c8 <dlmalloc+0x1b1>
c00012c3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00012c6:	eb f6                	jmp    c00012be <dlmalloc+0x1a7>
c00012c8:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012cb:	eb 04                	jmp    c00012d1 <dlmalloc+0x1ba>
c00012cd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012d1:	89 c7                	mov    edi,eax
c00012d3:	88 c1                	mov    cl,al
c00012d5:	c1 ff 05             	sar    edi,0x5
c00012d8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012dc:	bf 01 00 00 00       	mov    edi,0x1
c00012e1:	d3 e7                	shl    edi,cl
c00012e3:	89 f8                	mov    eax,edi
c00012e5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012e9:	09 04 bd 74 e1 02 c0 	or     DWORD PTR [edi*4-0x3ffd1e8c],eax
c00012f0:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012f3:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012f6:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012f9:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012fc:	e9 db fe ff ff       	jmp    c00011dc <dlmalloc+0xc5>
c0001301:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001307:	76 78                	jbe    c0001381 <dlmalloc+0x26a>
c0001309:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000130d:	8d 04 c5 74 de 02 c0 	lea    eax,[eax*8-0x3ffd218c]
c0001314:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001317:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000131a:	39 ca                	cmp    edx,ecx
c000131c:	74 63                	je     c0001381 <dlmalloc+0x26a>
c000131e:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001321:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001324:	83 e3 fc             	and    ebx,0xfffffffc
c0001327:	39 de                	cmp    esi,ebx
c0001329:	77 52                	ja     c000137d <dlmalloc+0x266>
c000132b:	89 df                	mov    edi,ebx
c000132d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001330:	29 f7                	sub    edi,esi
c0001332:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001335:	01 d3                	add    ebx,edx
c0001337:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000133a:	83 ff 0f             	cmp    edi,0xf
c000133d:	8d 42 08             	lea    eax,[edx+0x8]
c0001340:	77 09                	ja     c000134b <dlmalloc+0x234>
c0001342:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001346:	e9 52 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000134b:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000134e:	83 ce 01             	or     esi,0x1
c0001351:	89 0d 7c de 02 c0    	mov    DWORD PTR ds:0xc002de7c,ecx
c0001357:	89 0d 80 de 02 c0    	mov    DWORD PTR ds:0xc002de80,ecx
c000135d:	c7 41 08 74 de 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002de74
c0001364:	c7 41 0c 74 de 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002de74
c000136b:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000136e:	89 fa                	mov    edx,edi
c0001370:	83 ca 01             	or     edx,0x1
c0001373:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001376:	89 3b                	mov    DWORD PTR [ebx],edi
c0001378:	e9 20 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000137d:	89 c2                	mov    edx,eax
c000137f:	eb 99                	jmp    c000131a <dlmalloc+0x203>
c0001381:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001385:	b8 01 00 00 00       	mov    eax,0x1
c000138a:	41                   	inc    ecx
c000138b:	89 cb                	mov    ebx,ecx
c000138d:	8d 14 cd 6c de 02 c0 	lea    edx,[ecx*8-0x3ffd2194]
c0001394:	c1 eb 05             	shr    ebx,0x5
c0001397:	d3 e0                	shl    eax,cl
c0001399:	8b 3c 9d 74 e1 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1e8c]
c00013a0:	39 f8                	cmp    eax,edi
c00013a2:	77 04                	ja     c00013a8 <dlmalloc+0x291>
c00013a4:	85 c0                	test   eax,eax
c00013a6:	75 26                	jne    c00013ce <dlmalloc+0x2b7>
c00013a8:	43                   	inc    ebx
c00013a9:	83 fb 02             	cmp    ebx,0x2
c00013ac:	0f 87 a6 00 00 00    	ja     c0001458 <dlmalloc+0x341>
c00013b2:	8b 3c 9d 74 e1 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1e8c]
c00013b9:	85 ff                	test   edi,edi
c00013bb:	74 eb                	je     c00013a8 <dlmalloc+0x291>
c00013bd:	89 d8                	mov    eax,ebx
c00013bf:	c1 e0 06             	shl    eax,0x6
c00013c2:	8d 14 85 6c de 02 c0 	lea    edx,[eax*4-0x3ffd2194]
c00013c9:	b8 01 00 00 00       	mov    eax,0x1
c00013ce:	85 f8                	test   eax,edi
c00013d0:	75 07                	jne    c00013d9 <dlmalloc+0x2c2>
c00013d2:	83 c2 08             	add    edx,0x8
c00013d5:	01 c0                	add    eax,eax
c00013d7:	eb f5                	jmp    c00013ce <dlmalloc+0x2b7>
c00013d9:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013dc:	39 ca                	cmp    edx,ecx
c00013de:	75 14                	jne    c00013f4 <dlmalloc+0x2dd>
c00013e0:	89 c1                	mov    ecx,eax
c00013e2:	83 c2 08             	add    edx,0x8
c00013e5:	f7 d1                	not    ecx
c00013e7:	01 c0                	add    eax,eax
c00013e9:	21 cf                	and    edi,ecx
c00013eb:	89 3c 9d 74 e1 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd1e8c],edi
c00013f2:	eb ac                	jmp    c00013a0 <dlmalloc+0x289>
c00013f4:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013f7:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013fa:	83 e0 fc             	and    eax,0xfffffffc
c00013fd:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001400:	89 c3                	mov    ebx,eax
c0001402:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001405:	29 f3                	sub    ebx,esi
c0001407:	8d 14 01             	lea    edx,[ecx+eax*1]
c000140a:	83 fb 0f             	cmp    ebx,0xf
c000140d:	8d 41 08             	lea    eax,[ecx+0x8]
c0001410:	77 09                	ja     c000141b <dlmalloc+0x304>
c0001412:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001416:	e9 82 00 00 00       	jmp    c000149d <dlmalloc+0x386>
c000141b:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000141e:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001424:	89 3d 7c de 02 c0    	mov    DWORD PTR ds:0xc002de7c,edi
c000142a:	89 3d 80 de 02 c0    	mov    DWORD PTR ds:0xc002de80,edi
c0001430:	c7 47 08 74 de 02 c0 	mov    DWORD PTR [edi+0x8],0xc002de74
c0001437:	c7 47 0c 74 de 02 c0 	mov    DWORD PTR [edi+0xc],0xc002de74
c000143e:	77 06                	ja     c0001446 <dlmalloc+0x32f>
c0001440:	89 3d 70 de 02 c0    	mov    DWORD PTR ds:0xc002de70,edi
c0001446:	83 ce 01             	or     esi,0x1
c0001449:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000144c:	89 d9                	mov    ecx,ebx
c000144e:	83 c9 01             	or     ecx,0x1
c0001451:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001454:	89 1a                	mov    DWORD PTR [edx],ebx
c0001456:	eb 45                	jmp    c000149d <dlmalloc+0x386>
c0001458:	a1 6c de 02 c0       	mov    eax,ds:0xc002de6c
c000145d:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001460:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001463:	83 e2 fc             	and    edx,0xfffffffc
c0001466:	39 d1                	cmp    ecx,edx
c0001468:	77 1e                	ja     c0001488 <dlmalloc+0x371>
c000146a:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000146d:	89 f3                	mov    ebx,esi
c000146f:	89 0d 6c de 02 c0    	mov    DWORD PTR ds:0xc002de6c,ecx
c0001475:	83 cb 01             	or     ebx,0x1
c0001478:	29 f2                	sub    edx,esi
c000147a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000147d:	83 ca 01             	or     edx,0x1
c0001480:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001483:	e9 2d fd ff ff       	jmp    c00011b5 <dlmalloc+0x9e>
c0001488:	83 c4 1c             	add    esp,0x1c
c000148b:	89 f0                	mov    eax,esi
c000148d:	5b                   	pop    ebx
c000148e:	ba 40 de 02 c0       	mov    edx,0xc002de40
c0001493:	5e                   	pop    esi
c0001494:	5f                   	pop    edi
c0001495:	5d                   	pop    ebp
c0001496:	e9 16 fa ff ff       	jmp    c0000eb1 <sYSMALLOc>
c000149b:	31 c0                	xor    eax,eax
c000149d:	83 c4 1c             	add    esp,0x1c
c00014a0:	5b                   	pop    ebx
c00014a1:	5e                   	pop    esi
c00014a2:	5f                   	pop    edi
c00014a3:	5d                   	pop    ebp
c00014a4:	c3                   	ret    

c00014a5 <iALLOc>:
c00014a5:	55                   	push   ebp
c00014a6:	89 c5                	mov    ebp,eax
c00014a8:	57                   	push   edi
c00014a9:	56                   	push   esi
c00014aa:	53                   	push   ebx
c00014ab:	83 ec 2c             	sub    esp,0x2c
c00014ae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00014b2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00014b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00014ba:	83 3d 40 de 02 c0 00 	cmp    DWORD PTR ds:0xc002de40,0x0
c00014c1:	75 12                	jne    c00014d5 <iALLOc+0x30>
c00014c3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00014c7:	b8 40 de 02 c0       	mov    eax,0xc002de40
c00014cc:	e8 04 f8 ff ff       	call   c0000cd5 <malloc_consolidate>
c00014d1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014d5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014da:	74 12                	je     c00014ee <iALLOc+0x49>
c00014dc:	85 ed                	test   ebp,ebp
c00014de:	0f 84 64 01 00 00    	je     c0001648 <iALLOc+0x1a3>
c00014e4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014ec:	eb 33                	jmp    c0001521 <iALLOc+0x7c>
c00014ee:	85 ed                	test   ebp,ebp
c00014f0:	75 14                	jne    c0001506 <iALLOc+0x61>
c00014f2:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014fa:	83 c4 2c             	add    esp,0x2c
c00014fd:	5b                   	pop    ebx
c00014fe:	5e                   	pop    esi
c00014ff:	5f                   	pop    edi
c0001500:	5d                   	pop    ebp
c0001501:	e9 11 fc ff ff       	jmp    c0001117 <dlmalloc>
c0001506:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000150d:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001515:	83 f8 0f             	cmp    eax,0xf
c0001518:	76 07                	jbe    c0001521 <iALLOc+0x7c>
c000151a:	83 e0 f8             	and    eax,0xfffffff8
c000151d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001521:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001526:	75 09                	jne    c0001531 <iALLOc+0x8c>
c0001528:	89 d0                	mov    eax,edx
c000152a:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000152d:	31 f6                	xor    esi,esi
c000152f:	eb 3b                	jmp    c000156c <iALLOc+0xc7>
c0001531:	8b 02                	mov    eax,DWORD PTR [edx]
c0001533:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000153b:	83 c0 0b             	add    eax,0xb
c000153e:	83 f8 0f             	cmp    eax,0xf
c0001541:	76 07                	jbe    c000154a <iALLOc+0xa5>
c0001543:	83 e0 f8             	and    eax,0xfffffff8
c0001546:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000154a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000154e:	0f af f5             	imul   esi,ebp
c0001551:	eb 25                	jmp    c0001578 <iALLOc+0xd3>
c0001553:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001555:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001558:	bb 10 00 00 00       	mov    ebx,0x10
c000155d:	83 f9 0f             	cmp    ecx,0xf
c0001560:	76 05                	jbe    c0001567 <iALLOc+0xc2>
c0001562:	83 e1 f8             	and    ecx,0xfffffff8
c0001565:	89 cb                	mov    ebx,ecx
c0001567:	01 de                	add    esi,ebx
c0001569:	83 c0 04             	add    eax,0x4
c000156c:	39 c7                	cmp    edi,eax
c000156e:	75 e3                	jne    c0001553 <iALLOc+0xae>
c0001570:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001578:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000157c:	8b 1d 94 e1 02 c0    	mov    ebx,DWORD PTR ds:0xc002e194
c0001582:	83 ec 0c             	sub    esp,0xc
c0001585:	c7 05 94 e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e194,0x0
c000158f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001593:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001597:	50                   	push   eax
c0001598:	e8 7a fb ff ff       	call   c0001117 <dlmalloc>
c000159d:	83 c4 10             	add    esp,0x10
c00015a0:	89 1d 94 e1 02 c0    	mov    DWORD PTR ds:0xc002e194,ebx
c00015a6:	85 c0                	test   eax,eax
c00015a8:	0f 84 92 00 00 00    	je     c0001640 <iALLOc+0x19b>
c00015ae:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00015b1:	8d 78 f8             	lea    edi,[eax-0x8]
c00015b4:	83 e3 fc             	and    ebx,0xfffffffc
c00015b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00015bb:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00015c0:	74 1e                	je     c00015e0 <iALLOc+0x13b>
c00015c2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00015c6:	89 d9                	mov    ecx,ebx
c00015c8:	52                   	push   edx
c00015c9:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015cd:	83 e9 04             	sub    ecx,0x4
c00015d0:	51                   	push   ecx
c00015d1:	6a 00                	push   0x0
c00015d3:	50                   	push   eax
c00015d4:	e8 9f f1 ff ff       	call   c0000778 <memset>
c00015d9:	83 c4 10             	add    esp,0x10
c00015dc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015e5:	75 14                	jne    c00015fb <iALLOc+0x156>
c00015e7:	8d 04 37             	lea    eax,[edi+esi*1]
c00015ea:	29 f3                	sub    ebx,esi
c00015ec:	8d 48 08             	lea    ecx,[eax+0x8]
c00015ef:	83 cb 01             	or     ebx,0x1
c00015f2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015f6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015f9:	89 f3                	mov    ebx,esi
c00015fb:	31 c0                	xor    eax,eax
c00015fd:	4d                   	dec    ebp
c00015fe:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001601:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001605:	39 c5                	cmp    ebp,eax
c0001607:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000160a:	74 2c                	je     c0001638 <iALLOc+0x193>
c000160c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001610:	85 c9                	test   ecx,ecx
c0001612:	75 15                	jne    c0001629 <iALLOc+0x184>
c0001614:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001617:	8d 71 0b             	lea    esi,[ecx+0xb]
c000161a:	b9 10 00 00 00       	mov    ecx,0x10
c000161f:	83 fe 0f             	cmp    esi,0xf
c0001622:	76 05                	jbe    c0001629 <iALLOc+0x184>
c0001624:	83 e6 f8             	and    esi,0xfffffff8
c0001627:	89 f1                	mov    ecx,esi
c0001629:	89 ce                	mov    esi,ecx
c000162b:	29 cb                	sub    ebx,ecx
c000162d:	83 ce 01             	or     esi,0x1
c0001630:	40                   	inc    eax
c0001631:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001634:	01 cf                	add    edi,ecx
c0001636:	eb c6                	jmp    c00015fe <iALLOc+0x159>
c0001638:	83 cb 01             	or     ebx,0x1
c000163b:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000163e:	eb 08                	jmp    c0001648 <iALLOc+0x1a3>
c0001640:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001648:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000164c:	83 c4 2c             	add    esp,0x2c
c000164f:	5b                   	pop    ebx
c0001650:	5e                   	pop    esi
c0001651:	5f                   	pop    edi
c0001652:	5d                   	pop    ebp
c0001653:	c3                   	ret    

c0001654 <dlrealloc>:
c0001654:	55                   	push   ebp
c0001655:	57                   	push   edi
c0001656:	56                   	push   esi
c0001657:	53                   	push   ebx
c0001658:	83 ec 1c             	sub    esp,0x1c
c000165b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000165f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001663:	85 db                	test   ebx,ebx
c0001665:	75 10                	jne    c0001677 <dlrealloc+0x23>
c0001667:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000166b:	83 c4 1c             	add    esp,0x1c
c000166e:	5b                   	pop    ebx
c000166f:	5e                   	pop    esi
c0001670:	5f                   	pop    edi
c0001671:	5d                   	pop    ebp
c0001672:	e9 a0 fa ff ff       	jmp    c0001117 <dlmalloc>
c0001677:	83 f8 df             	cmp    eax,0xffffffdf
c000167a:	76 07                	jbe    c0001683 <dlrealloc+0x2f>
c000167c:	31 db                	xor    ebx,ebx
c000167e:	e9 7c 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c0001683:	83 c0 0b             	add    eax,0xb
c0001686:	bf 10 00 00 00       	mov    edi,0x10
c000168b:	83 f8 0f             	cmp    eax,0xf
c000168e:	76 05                	jbe    c0001695 <dlrealloc+0x41>
c0001690:	83 e0 f8             	and    eax,0xfffffff8
c0001693:	89 c7                	mov    edi,eax
c0001695:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001698:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000169b:	89 c6                	mov    esi,eax
c000169d:	83 e6 fc             	and    esi,0xfffffffc
c00016a0:	a8 02                	test   al,0x2
c00016a2:	75 d8                	jne    c000167c <dlrealloc+0x28>
c00016a4:	39 f7                	cmp    edi,esi
c00016a6:	0f 86 15 01 00 00    	jbe    c00017c1 <dlrealloc+0x16d>
c00016ac:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00016b0:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00016b3:	39 15 6c de 02 c0    	cmp    DWORD PTR ds:0xc002de6c,edx
c00016b9:	75 33                	jne    c00016ee <dlrealloc+0x9a>
c00016bb:	83 e1 fc             	and    ecx,0xfffffffc
c00016be:	01 f1                	add    ecx,esi
c00016c0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016c4:	8d 4f 10             	lea    ecx,[edi+0x10]
c00016c7:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016cb:	77 49                	ja     c0001716 <dlrealloc+0xc2>
c00016cd:	01 fd                	add    ebp,edi
c00016cf:	83 e0 01             	and    eax,0x1
c00016d2:	09 f8                	or     eax,edi
c00016d4:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016d7:	89 2d 6c de 02 c0    	mov    DWORD PTR ds:0xc002de6c,ebp
c00016dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016e1:	29 f8                	sub    eax,edi
c00016e3:	83 c8 01             	or     eax,0x1
c00016e6:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00016e9:	e9 11 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c00016ee:	89 c8                	mov    eax,ecx
c00016f0:	83 e0 fe             	and    eax,0xfffffffe
c00016f3:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016f8:	75 1c                	jne    c0001716 <dlrealloc+0xc2>
c00016fa:	83 e1 fc             	and    ecx,0xfffffffc
c00016fd:	01 f1                	add    ecx,esi
c00016ff:	39 cf                	cmp    edi,ecx
c0001701:	77 13                	ja     c0001716 <dlrealloc+0xc2>
c0001703:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001706:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001709:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000170c:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000170f:	89 ce                	mov    esi,ecx
c0001711:	e9 ab 00 00 00       	jmp    c00017c1 <dlrealloc+0x16d>
c0001716:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000171a:	8d 47 f9             	lea    eax,[edi-0x7]
c000171d:	83 ec 0c             	sub    esp,0xc
c0001720:	50                   	push   eax
c0001721:	e8 f1 f9 ff ff       	call   c0001117 <dlmalloc>
c0001726:	83 c4 10             	add    esp,0x10
c0001729:	89 c1                	mov    ecx,eax
c000172b:	85 c0                	test   eax,eax
c000172d:	0f 84 49 ff ff ff    	je     c000167c <dlrealloc+0x28>
c0001733:	8d 40 f8             	lea    eax,[eax-0x8]
c0001736:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000173a:	39 c2                	cmp    edx,eax
c000173c:	75 0a                	jne    c0001748 <dlrealloc+0xf4>
c000173e:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001741:	83 e0 fc             	and    eax,0xfffffffc
c0001744:	01 c6                	add    esi,eax
c0001746:	eb 79                	jmp    c00017c1 <dlrealloc+0x16d>
c0001748:	83 ee 04             	sub    esi,0x4
c000174b:	83 fe 27             	cmp    esi,0x27
c000174e:	76 16                	jbe    c0001766 <dlrealloc+0x112>
c0001750:	50                   	push   eax
c0001751:	56                   	push   esi
c0001752:	53                   	push   ebx
c0001753:	51                   	push   ecx
c0001754:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001758:	e8 e7 ef ff ff       	call   c0000744 <memcpy>
c000175d:	83 c4 10             	add    esp,0x10
c0001760:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001764:	eb 43                	jmp    c00017a9 <dlrealloc+0x155>
c0001766:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001768:	83 fe 13             	cmp    esi,0x13
c000176b:	89 01                	mov    DWORD PTR [ecx],eax
c000176d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001770:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001773:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001776:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001779:	76 2e                	jbe    c00017a9 <dlrealloc+0x155>
c000177b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000177e:	83 fe 1b             	cmp    esi,0x1b
c0001781:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001784:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001787:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c000178a:	76 1d                	jbe    c00017a9 <dlrealloc+0x155>
c000178c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000178f:	83 fe 23             	cmp    esi,0x23
c0001792:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001795:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001798:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c000179b:	76 0c                	jbe    c00017a9 <dlrealloc+0x155>
c000179d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00017a0:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00017a3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00017a6:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00017a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017ad:	83 ec 0c             	sub    esp,0xc
c00017b0:	53                   	push   ebx
c00017b1:	e8 06 f6 ff ff       	call   c0000dbc <dlfree>
c00017b6:	83 c4 10             	add    esp,0x10
c00017b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00017bd:	89 cb                	mov    ebx,ecx
c00017bf:	eb 3e                	jmp    c00017ff <dlrealloc+0x1ab>
c00017c1:	89 f2                	mov    edx,esi
c00017c3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017c6:	29 fa                	sub    edx,edi
c00017c8:	83 e1 01             	and    ecx,0x1
c00017cb:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00017cf:	83 fa 0f             	cmp    edx,0xf
c00017d2:	77 0b                	ja     c00017df <dlrealloc+0x18b>
c00017d4:	09 ce                	or     esi,ecx
c00017d6:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00017d9:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017dd:	eb 20                	jmp    c00017ff <dlrealloc+0x1ab>
c00017df:	01 fd                	add    ebp,edi
c00017e1:	83 ec 0c             	sub    esp,0xc
c00017e4:	09 cf                	or     edi,ecx
c00017e6:	83 ca 01             	or     edx,0x1
c00017e9:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00017ec:	83 c5 08             	add    ebp,0x8
c00017ef:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00017f2:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017f6:	55                   	push   ebp
c00017f7:	e8 c0 f5 ff ff       	call   c0000dbc <dlfree>
c00017fc:	83 c4 10             	add    esp,0x10
c00017ff:	83 c4 1c             	add    esp,0x1c
c0001802:	89 d8                	mov    eax,ebx
c0001804:	5b                   	pop    ebx
c0001805:	5e                   	pop    esi
c0001806:	5f                   	pop    edi
c0001807:	5d                   	pop    ebp
c0001808:	c3                   	ret    

c0001809 <dlmemalign>:
c0001809:	55                   	push   ebp
c000180a:	57                   	push   edi
c000180b:	56                   	push   esi
c000180c:	53                   	push   ebx
c000180d:	83 ec 0c             	sub    esp,0xc
c0001810:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001814:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001818:	83 fa 08             	cmp    edx,0x8
c000181b:	77 10                	ja     c000182d <dlmemalign+0x24>
c000181d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001821:	83 c4 0c             	add    esp,0xc
c0001824:	5b                   	pop    ebx
c0001825:	5e                   	pop    esi
c0001826:	5f                   	pop    edi
c0001827:	5d                   	pop    ebp
c0001828:	e9 ea f8 ff ff       	jmp    c0001117 <dlmalloc>
c000182d:	bf 10 00 00 00       	mov    edi,0x10
c0001832:	83 fa 0f             	cmp    edx,0xf
c0001835:	76 13                	jbe    c000184a <dlmemalign+0x41>
c0001837:	8d 4a ff             	lea    ecx,[edx-0x1]
c000183a:	85 d1                	test   ecx,edx
c000183c:	75 04                	jne    c0001842 <dlmemalign+0x39>
c000183e:	89 d7                	mov    edi,edx
c0001840:	eb 08                	jmp    c000184a <dlmemalign+0x41>
c0001842:	39 d7                	cmp    edi,edx
c0001844:	73 04                	jae    c000184a <dlmemalign+0x41>
c0001846:	01 ff                	add    edi,edi
c0001848:	eb f8                	jmp    c0001842 <dlmemalign+0x39>
c000184a:	83 f8 df             	cmp    eax,0xffffffdf
c000184d:	76 07                	jbe    c0001856 <dlmemalign+0x4d>
c000184f:	31 c0                	xor    eax,eax
c0001851:	e9 ce 00 00 00       	jmp    c0001924 <dlmemalign+0x11b>
c0001856:	83 c0 0b             	add    eax,0xb
c0001859:	bd 10 00 00 00       	mov    ebp,0x10
c000185e:	83 f8 0f             	cmp    eax,0xf
c0001861:	76 05                	jbe    c0001868 <dlmemalign+0x5f>
c0001863:	83 e0 f8             	and    eax,0xfffffff8
c0001866:	89 c5                	mov    ebp,eax
c0001868:	83 ec 0c             	sub    esp,0xc
c000186b:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000186f:	50                   	push   eax
c0001870:	e8 a2 f8 ff ff       	call   c0001117 <dlmalloc>
c0001875:	83 c4 10             	add    esp,0x10
c0001878:	89 c1                	mov    ecx,eax
c000187a:	85 c0                	test   eax,eax
c000187c:	74 d1                	je     c000184f <dlmemalign+0x46>
c000187e:	31 d2                	xor    edx,edx
c0001880:	8d 70 f8             	lea    esi,[eax-0x8]
c0001883:	f7 f7                	div    edi
c0001885:	85 d2                	test   edx,edx
c0001887:	74 62                	je     c00018eb <dlmemalign+0xe2>
c0001889:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000188d:	89 f8                	mov    eax,edi
c000188f:	f7 d8                	neg    eax
c0001891:	21 c3                	and    ebx,eax
c0001893:	83 eb 08             	sub    ebx,0x8
c0001896:	89 d8                	mov    eax,ebx
c0001898:	29 f0                	sub    eax,esi
c000189a:	83 f8 0f             	cmp    eax,0xf
c000189d:	77 02                	ja     c00018a1 <dlmemalign+0x98>
c000189f:	01 fb                	add    ebx,edi
c00018a1:	89 d8                	mov    eax,ebx
c00018a3:	29 f0                	sub    eax,esi
c00018a5:	89 c6                	mov    esi,eax
c00018a7:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018aa:	89 c2                	mov    edx,eax
c00018ac:	83 e2 fc             	and    edx,0xfffffffc
c00018af:	29 f2                	sub    edx,esi
c00018b1:	a8 02                	test   al,0x2
c00018b3:	74 10                	je     c00018c5 <dlmemalign+0xbc>
c00018b5:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00018b8:	83 ca 02             	or     edx,0x2
c00018bb:	8d 43 08             	lea    eax,[ebx+0x8]
c00018be:	89 33                	mov    DWORD PTR [ebx],esi
c00018c0:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00018c3:	eb 5f                	jmp    c0001924 <dlmemalign+0x11b>
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	89 d0                	mov    eax,edx
c00018ca:	83 c8 01             	or     eax,0x1
c00018cd:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00018d0:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00018d5:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018d8:	83 e0 01             	and    eax,0x1
c00018db:	09 f0                	or     eax,esi
c00018dd:	89 de                	mov    esi,ebx
c00018df:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018e2:	51                   	push   ecx
c00018e3:	e8 d4 f4 ff ff       	call   c0000dbc <dlfree>
c00018e8:	83 c4 10             	add    esp,0x10
c00018eb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018ee:	a8 02                	test   al,0x2
c00018f0:	75 2f                	jne    c0001921 <dlmemalign+0x118>
c00018f2:	83 e0 fc             	and    eax,0xfffffffc
c00018f5:	8d 55 10             	lea    edx,[ebp+0x10]
c00018f8:	39 c2                	cmp    edx,eax
c00018fa:	73 25                	jae    c0001921 <dlmemalign+0x118>
c00018fc:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018ff:	83 ec 0c             	sub    esp,0xc
c0001902:	29 e8                	sub    eax,ebp
c0001904:	83 c2 08             	add    edx,0x8
c0001907:	83 c8 01             	or     eax,0x1
c000190a:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000190d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001910:	83 e0 01             	and    eax,0x1
c0001913:	09 c5                	or     ebp,eax
c0001915:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001918:	52                   	push   edx
c0001919:	e8 9e f4 ff ff       	call   c0000dbc <dlfree>
c000191e:	83 c4 10             	add    esp,0x10
c0001921:	8d 46 08             	lea    eax,[esi+0x8]
c0001924:	83 c4 0c             	add    esp,0xc
c0001927:	5b                   	pop    ebx
c0001928:	5e                   	pop    esi
c0001929:	5f                   	pop    edi
c000192a:	5d                   	pop    ebp
c000192b:	c3                   	ret    

c000192c <dlcalloc>:
c000192c:	53                   	push   ebx
c000192d:	83 ec 14             	sub    esp,0x14
c0001930:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001934:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001939:	50                   	push   eax
c000193a:	e8 d8 f7 ff ff       	call   c0001117 <dlmalloc>
c000193f:	83 c4 10             	add    esp,0x10
c0001942:	89 c3                	mov    ebx,eax
c0001944:	85 c0                	test   eax,eax
c0001946:	74 77                	je     c00019bf <dlcalloc+0x93>
c0001948:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000194b:	89 d0                	mov    eax,edx
c000194d:	83 e0 fc             	and    eax,0xfffffffc
c0001950:	80 e2 02             	and    dl,0x2
c0001953:	75 5a                	jne    c00019af <dlcalloc+0x83>
c0001955:	83 e8 04             	sub    eax,0x4
c0001958:	83 f8 27             	cmp    eax,0x27
c000195b:	76 03                	jbe    c0001960 <dlcalloc+0x34>
c000195d:	51                   	push   ecx
c000195e:	eb 53                	jmp    c00019b3 <dlcalloc+0x87>
c0001960:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001966:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000196d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001974:	83 f8 13             	cmp    eax,0x13
c0001977:	76 46                	jbe    c00019bf <dlcalloc+0x93>
c0001979:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001980:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001987:	83 f8 1b             	cmp    eax,0x1b
c000198a:	76 33                	jbe    c00019bf <dlcalloc+0x93>
c000198c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001993:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000199a:	83 f8 23             	cmp    eax,0x23
c000199d:	76 20                	jbe    c00019bf <dlcalloc+0x93>
c000199f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00019a6:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00019ad:	eb 10                	jmp    c00019bf <dlcalloc+0x93>
c00019af:	83 e8 08             	sub    eax,0x8
c00019b2:	52                   	push   edx
c00019b3:	50                   	push   eax
c00019b4:	6a 00                	push   0x0
c00019b6:	53                   	push   ebx
c00019b7:	e8 bc ed ff ff       	call   c0000778 <memset>
c00019bc:	83 c4 10             	add    esp,0x10
c00019bf:	89 d8                	mov    eax,ebx
c00019c1:	83 c4 08             	add    esp,0x8
c00019c4:	5b                   	pop    ebx
c00019c5:	c3                   	ret    

c00019c6 <dlcfree>:
c00019c6:	e9 f1 f3 ff ff       	jmp    c0000dbc <dlfree>

c00019cb <dlindependent_calloc>:
c00019cb:	83 ec 28             	sub    esp,0x28
c00019ce:	b9 03 00 00 00       	mov    ecx,0x3
c00019d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019df:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019e7:	e8 b9 fa ff ff       	call   c00014a5 <iALLOc>
c00019ec:	83 c4 2c             	add    esp,0x2c
c00019ef:	c3                   	ret    

c00019f0 <dlindependent_comalloc>:
c00019f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019f8:	31 c9                	xor    ecx,ecx
c00019fa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001a02:	e9 9e fa ff ff       	jmp    c00014a5 <iALLOc>

c0001a07 <dlvalloc>:
c0001a07:	83 ec 0c             	sub    esp,0xc
c0001a0a:	83 3d 40 de 02 c0 00 	cmp    DWORD PTR ds:0xc002de40,0x0
c0001a11:	75 0a                	jne    c0001a1d <dlvalloc+0x16>
c0001a13:	b8 40 de 02 c0       	mov    eax,0xc002de40
c0001a18:	e8 b8 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a1d:	50                   	push   eax
c0001a1e:	50                   	push   eax
c0001a1f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001a23:	ff 35 9c e1 02 c0    	push   DWORD PTR ds:0xc002e19c
c0001a29:	e8 db fd ff ff       	call   c0001809 <dlmemalign>
c0001a2e:	83 c4 1c             	add    esp,0x1c
c0001a31:	c3                   	ret    

c0001a32 <dlpvalloc>:
c0001a32:	83 ec 0c             	sub    esp,0xc
c0001a35:	83 3d 40 de 02 c0 00 	cmp    DWORD PTR ds:0xc002de40,0x0
c0001a3c:	75 0a                	jne    c0001a48 <dlpvalloc+0x16>
c0001a3e:	b8 40 de 02 c0       	mov    eax,0xc002de40
c0001a43:	e8 8d f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a48:	a1 9c e1 02 c0       	mov    eax,ds:0xc002e19c
c0001a4d:	89 c1                	mov    ecx,eax
c0001a4f:	52                   	push   edx
c0001a50:	f7 d9                	neg    ecx
c0001a52:	52                   	push   edx
c0001a53:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a57:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a5b:	21 ca                	and    edx,ecx
c0001a5d:	52                   	push   edx
c0001a5e:	50                   	push   eax
c0001a5f:	e8 a5 fd ff ff       	call   c0001809 <dlmemalign>
c0001a64:	83 c4 1c             	add    esp,0x1c
c0001a67:	c3                   	ret    

c0001a68 <dlmalloc_trim>:
c0001a68:	b8 40 de 02 c0       	mov    eax,0xc002de40
c0001a6d:	e8 63 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a72:	31 c0                	xor    eax,eax
c0001a74:	c3                   	ret    

c0001a75 <dlmalloc_usable_size>:
c0001a75:	53                   	push   ebx
c0001a76:	31 c0                	xor    eax,eax
c0001a78:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a7c:	85 c9                	test   ecx,ecx
c0001a7e:	74 24                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a80:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a83:	f6 c2 02             	test   dl,0x2
c0001a86:	74 08                	je     c0001a90 <dlmalloc_usable_size+0x1b>
c0001a88:	83 e2 fc             	and    edx,0xfffffffc
c0001a8b:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a8e:	eb 14                	jmp    c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a90:	89 d3                	mov    ebx,edx
c0001a92:	31 c0                	xor    eax,eax
c0001a94:	83 e3 fe             	and    ebx,0xfffffffe
c0001a97:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a9c:	74 06                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a9e:	83 e2 fc             	and    edx,0xfffffffc
c0001aa1:	8d 42 fc             	lea    eax,[edx-0x4]
c0001aa4:	5b                   	pop    ebx
c0001aa5:	c3                   	ret    

c0001aa6 <dlmallinfo>:
c0001aa6:	55                   	push   ebp
c0001aa7:	57                   	push   edi
c0001aa8:	56                   	push   esi
c0001aa9:	53                   	push   ebx
c0001aaa:	83 ec 08             	sub    esp,0x8
c0001aad:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001ab1:	83 3d 6c de 02 c0 00 	cmp    DWORD PTR ds:0xc002de6c,0x0
c0001ab8:	75 0a                	jne    c0001ac4 <dlmallinfo+0x1e>
c0001aba:	b8 40 de 02 c0       	mov    eax,0xc002de40
c0001abf:	e8 11 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001ac4:	a1 6c de 02 c0       	mov    eax,ds:0xc002de6c
c0001ac9:	31 ed                	xor    ebp,ebp
c0001acb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001ace:	31 c9                	xor    ecx,ecx
c0001ad0:	83 e0 fc             	and    eax,0xfffffffc
c0001ad3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ad7:	31 c0                	xor    eax,eax
c0001ad9:	8b 14 85 44 de 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd21bc]
c0001ae0:	85 d2                	test   edx,edx
c0001ae2:	74 0e                	je     c0001af2 <dlmallinfo+0x4c>
c0001ae4:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001ae7:	45                   	inc    ebp
c0001ae8:	83 e6 fc             	and    esi,0xfffffffc
c0001aeb:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aee:	01 f1                	add    ecx,esi
c0001af0:	eb ee                	jmp    c0001ae0 <dlmallinfo+0x3a>
c0001af2:	40                   	inc    eax
c0001af3:	83 f8 0a             	cmp    eax,0xa
c0001af6:	75 e1                	jne    c0001ad9 <dlmallinfo+0x33>
c0001af8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001afc:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001b03:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001b06:	b8 74 de 02 c0       	mov    eax,0xc002de74
c0001b0b:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001b0e:	39 f0                	cmp    eax,esi
c0001b10:	74 10                	je     c0001b22 <dlmallinfo+0x7c>
c0001b12:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001b15:	ff 04 24             	inc    DWORD PTR [esp]
c0001b18:	83 e7 fc             	and    edi,0xfffffffc
c0001b1b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001b1e:	01 fa                	add    edx,edi
c0001b20:	eb ec                	jmp    c0001b0e <dlmallinfo+0x68>
c0001b22:	83 c0 08             	add    eax,0x8
c0001b25:	3d 6c e1 02 c0       	cmp    eax,0xc002e16c
c0001b2a:	75 df                	jne    c0001b0b <dlmallinfo+0x65>
c0001b2c:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001b2f:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001b32:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001b35:	a1 a8 e1 02 c0       	mov    eax,ds:0xc002e1a8
c0001b3a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b3d:	89 03                	mov    DWORD PTR [ebx],eax
c0001b3f:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b42:	8b 35 90 e1 02 c0    	mov    esi,DWORD PTR ds:0xc002e190
c0001b48:	29 d0                	sub    eax,edx
c0001b4a:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b4d:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b50:	8b 35 a4 e1 02 c0    	mov    esi,DWORD PTR ds:0xc002e1a4
c0001b56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b5a:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b5d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b60:	8b 35 b4 e1 02 c0    	mov    esi,DWORD PTR ds:0xc002e1b4
c0001b66:	89 d8                	mov    eax,ebx
c0001b68:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b6b:	83 c4 08             	add    esp,0x8
c0001b6e:	5b                   	pop    ebx
c0001b6f:	5e                   	pop    esi
c0001b70:	5f                   	pop    edi
c0001b71:	5d                   	pop    ebp
c0001b72:	c2 04 00             	ret    0x4

c0001b75 <dlmalloc_stats>:
c0001b75:	83 ec 30             	sub    esp,0x30
c0001b78:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b7c:	50                   	push   eax
c0001b7d:	e8 24 ff ff ff       	call   c0001aa6 <dlmallinfo>
c0001b82:	83 c4 30             	add    esp,0x30
c0001b85:	c3                   	ret    

c0001b86 <dlmallopt>:
c0001b86:	56                   	push   esi
c0001b87:	b8 40 de 02 c0       	mov    eax,0xc002de40
c0001b8c:	53                   	push   ebx
c0001b8d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b95:	e8 3b f1 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001b9a:	8d 46 04             	lea    eax,[esi+0x4]
c0001b9d:	83 f8 05             	cmp    eax,0x5
c0001ba0:	77 67                	ja     c0001c09 <dlmallopt+0x83>
c0001ba2:	ff 24 85 e4 91 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6e1c]
c0001ba9:	83 fb 50             	cmp    ebx,0x50
c0001bac:	77 5b                	ja     c0001c09 <dlmallopt+0x83>
c0001bae:	ba 08 00 00 00       	mov    edx,0x8
c0001bb3:	85 db                	test   ebx,ebx
c0001bb5:	74 12                	je     c0001bc9 <dlmallopt+0x43>
c0001bb7:	83 c3 0b             	add    ebx,0xb
c0001bba:	ba 10 00 00 00       	mov    edx,0x10
c0001bbf:	83 fb 0f             	cmp    ebx,0xf
c0001bc2:	76 05                	jbe    c0001bc9 <dlmallopt+0x43>
c0001bc4:	89 da                	mov    edx,ebx
c0001bc6:	83 e2 f8             	and    edx,0xfffffff8
c0001bc9:	a1 40 de 02 c0       	mov    eax,ds:0xc002de40
c0001bce:	83 e0 03             	and    eax,0x3
c0001bd1:	09 d0                	or     eax,edx
c0001bd3:	a3 40 de 02 c0       	mov    ds:0xc002de40,eax
c0001bd8:	eb 31                	jmp    c0001c0b <dlmallopt+0x85>
c0001bda:	89 1d 84 e1 02 c0    	mov    DWORD PTR ds:0xc002e184,ebx
c0001be0:	eb 06                	jmp    c0001be8 <dlmallopt+0x62>
c0001be2:	89 1d 88 e1 02 c0    	mov    DWORD PTR ds:0xc002e188,ebx
c0001be8:	be 01 00 00 00       	mov    esi,0x1
c0001bed:	eb 1c                	jmp    c0001c0b <dlmallopt+0x85>
c0001bef:	89 1d 8c e1 02 c0    	mov    DWORD PTR ds:0xc002e18c,ebx
c0001bf5:	eb f1                	jmp    c0001be8 <dlmallopt+0x62>
c0001bf7:	31 f6                	xor    esi,esi
c0001bf9:	85 db                	test   ebx,ebx
c0001bfb:	75 0e                	jne    c0001c0b <dlmallopt+0x85>
c0001bfd:	c7 05 94 e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e194,0x0
c0001c07:	eb df                	jmp    c0001be8 <dlmallopt+0x62>
c0001c09:	31 f6                	xor    esi,esi
c0001c0b:	89 f0                	mov    eax,esi
c0001c0d:	5b                   	pop    ebx
c0001c0e:	5e                   	pop    esi
c0001c0f:	c3                   	ret    

c0001c10 <disk_status>:
c0001c10:	31 c0                	xor    eax,eax
c0001c12:	c3                   	ret    

c0001c13 <disk_initialize>:
c0001c13:	31 c0                	xor    eax,eax
c0001c15:	c3                   	ret    

c0001c16 <disk_read>:
c0001c16:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c1b:	0f b6 04 85 20 19 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce6e0]
c0001c23:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c27:	e9 50 f0 01 00       	jmp    c0020c7c <fatWrapperReadDisk>

c0001c2c <disk_write>:
c0001c2c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c31:	0f b6 04 85 20 19 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce6e0]
c0001c39:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c3d:	e9 81 f0 01 00       	jmp    c0020cc3 <fatWrapperWriteDisk>

c0001c42 <disk_ioctl>:
c0001c42:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c4b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c50:	0f b6 04 85 20 19 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce6e0]
c0001c58:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c5c:	e9 a9 f0 01 00       	jmp    c0020d0a <fatWrapperIoctl>

c0001c61 <ld_word>:
c0001c61:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c65:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c68:	c1 e2 08             	shl    edx,0x8
c0001c6b:	09 d0                	or     eax,edx
c0001c6d:	c3                   	ret    

c0001c6e <ld_dword>:
c0001c6e:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c72:	89 d1                	mov    ecx,edx
c0001c74:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c78:	c1 e1 08             	shl    ecx,0x8
c0001c7b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c7e:	09 ca                	or     edx,ecx
c0001c80:	c1 e2 08             	shl    edx,0x8
c0001c83:	09 d0                	or     eax,edx
c0001c85:	c3                   	ret    

c0001c86 <ld_qword>:
c0001c86:	57                   	push   edi
c0001c87:	56                   	push   esi
c0001c88:	53                   	push   ebx
c0001c89:	31 db                	xor    ebx,ebx
c0001c8b:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c8e:	89 df                	mov    edi,ebx
c0001c90:	89 ce                	mov    esi,ecx
c0001c92:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c96:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c9a:	c1 e6 08             	shl    esi,0x8
c0001c9d:	09 f2                	or     edx,esi
c0001c9f:	89 d6                	mov    esi,edx
c0001ca1:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001ca5:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ca9:	c1 e6 08             	shl    esi,0x8
c0001cac:	09 f2                	or     edx,esi
c0001cae:	89 d6                	mov    esi,edx
c0001cb0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001cb4:	0f a4 f7 08          	shld   edi,esi,0x8
c0001cb8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001cbb:	c1 e6 08             	shl    esi,0x8
c0001cbe:	89 fb                	mov    ebx,edi
c0001cc0:	09 f2                	or     edx,esi
c0001cc2:	89 d1                	mov    ecx,edx
c0001cc4:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001cc8:	c1 e1 08             	shl    ecx,0x8
c0001ccb:	89 da                	mov    edx,ebx
c0001ccd:	09 c8                	or     eax,ecx
c0001ccf:	5b                   	pop    ebx
c0001cd0:	5e                   	pop    esi
c0001cd1:	5f                   	pop    edi
c0001cd2:	c3                   	ret    

c0001cd3 <st_word>:
c0001cd3:	66 89 10             	mov    WORD PTR [eax],dx
c0001cd6:	c3                   	ret    

c0001cd7 <st_dword>:
c0001cd7:	89 10                	mov    DWORD PTR [eax],edx
c0001cd9:	c3                   	ret    

c0001cda <st_qword>:
c0001cda:	89 10                	mov    DWORD PTR [eax],edx
c0001cdc:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001cdf:	c3                   	ret    

c0001ce0 <mem_cpy>:
c0001ce0:	85 c9                	test   ecx,ecx
c0001ce2:	74 10                	je     c0001cf4 <mem_cpy+0x14>
c0001ce4:	57                   	push   edi
c0001ce5:	01 c1                	add    ecx,eax
c0001ce7:	56                   	push   esi
c0001ce8:	89 c7                	mov    edi,eax
c0001cea:	89 d6                	mov    esi,edx
c0001cec:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ced:	39 f9                	cmp    ecx,edi
c0001cef:	75 fb                	jne    c0001cec <mem_cpy+0xc>
c0001cf1:	5e                   	pop    esi
c0001cf2:	5f                   	pop    edi
c0001cf3:	c3                   	ret    
c0001cf4:	c3                   	ret    

c0001cf5 <mem_set>:
c0001cf5:	01 c1                	add    ecx,eax
c0001cf7:	40                   	inc    eax
c0001cf8:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cfb:	39 c8                	cmp    eax,ecx
c0001cfd:	75 f8                	jne    c0001cf7 <mem_set+0x2>
c0001cff:	c3                   	ret    

c0001d00 <mem_cmp>:
c0001d00:	57                   	push   edi
c0001d01:	56                   	push   esi
c0001d02:	89 c6                	mov    esi,eax
c0001d04:	53                   	push   ebx
c0001d05:	46                   	inc    esi
c0001d06:	42                   	inc    edx
c0001d07:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d0b:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d0f:	29 fb                	sub    ebx,edi
c0001d11:	89 cf                	mov    edi,ecx
c0001d13:	29 f7                	sub    edi,esi
c0001d15:	01 c7                	add    edi,eax
c0001d17:	74 04                	je     c0001d1d <mem_cmp+0x1d>
c0001d19:	85 db                	test   ebx,ebx
c0001d1b:	74 e8                	je     c0001d05 <mem_cmp+0x5>
c0001d1d:	89 d8                	mov    eax,ebx
c0001d1f:	5b                   	pop    ebx
c0001d20:	5e                   	pop    esi
c0001d21:	5f                   	pop    edi
c0001d22:	c3                   	ret    

c0001d23 <chk_chr>:
c0001d23:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d26:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d29:	74 07                	je     c0001d32 <chk_chr+0xf>
c0001d2b:	39 d1                	cmp    ecx,edx
c0001d2d:	74 03                	je     c0001d32 <chk_chr+0xf>
c0001d2f:	40                   	inc    eax
c0001d30:	eb f1                	jmp    c0001d23 <chk_chr>
c0001d32:	89 c8                	mov    eax,ecx
c0001d34:	c3                   	ret    

c0001d35 <dbc_1st>:
c0001d35:	31 c0                	xor    eax,eax
c0001d37:	c3                   	ret    

c0001d38 <dbc_2nd>:
c0001d38:	31 c0                	xor    eax,eax
c0001d3a:	c3                   	ret    

c0001d3b <tchar2uni>:
c0001d3b:	57                   	push   edi
c0001d3c:	89 c7                	mov    edi,eax
c0001d3e:	56                   	push   esi
c0001d3f:	53                   	push   ebx
c0001d40:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d42:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d44:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d47:	84 c9                	test   cl,cl
c0001d49:	78 0a                	js     c0001d55 <tchar2uni+0x1a>
c0001d4b:	0f b6 d1             	movzx  edx,cl
c0001d4e:	89 f3                	mov    ebx,esi
c0001d50:	e9 9f 00 00 00       	jmp    c0001df4 <tchar2uni+0xb9>
c0001d55:	88 ca                	mov    dl,cl
c0001d57:	83 e2 e0             	and    edx,0xffffffe0
c0001d5a:	80 fa c0             	cmp    dl,0xc0
c0001d5d:	75 0c                	jne    c0001d6b <tchar2uni+0x30>
c0001d5f:	89 ca                	mov    edx,ecx
c0001d61:	b9 01 00 00 00       	mov    ecx,0x1
c0001d66:	83 e2 1f             	and    edx,0x1f
c0001d69:	eb 2e                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d6b:	88 ca                	mov    dl,cl
c0001d6d:	83 e2 f0             	and    edx,0xfffffff0
c0001d70:	80 fa e0             	cmp    dl,0xe0
c0001d73:	75 0c                	jne    c0001d81 <tchar2uni+0x46>
c0001d75:	89 ca                	mov    edx,ecx
c0001d77:	b9 02 00 00 00       	mov    ecx,0x2
c0001d7c:	83 e2 0f             	and    edx,0xf
c0001d7f:	eb 18                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d81:	88 ca                	mov    dl,cl
c0001d83:	83 e2 f8             	and    edx,0xfffffff8
c0001d86:	88 d0                	mov    al,dl
c0001d88:	83 ca ff             	or     edx,0xffffffff
c0001d8b:	3c f0                	cmp    al,0xf0
c0001d8d:	75 6c                	jne    c0001dfb <tchar2uni+0xc0>
c0001d8f:	89 ca                	mov    edx,ecx
c0001d91:	b9 03 00 00 00       	mov    ecx,0x3
c0001d96:	83 e2 07             	and    edx,0x7
c0001d99:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d9d:	46                   	inc    esi
c0001d9e:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001da1:	88 c8                	mov    al,cl
c0001da3:	83 e0 c0             	and    eax,0xffffffc0
c0001da6:	3c 80                	cmp    al,0x80
c0001da8:	75 4e                	jne    c0001df8 <tchar2uni+0xbd>
c0001daa:	c1 e2 06             	shl    edx,0x6
c0001dad:	83 e1 3f             	and    ecx,0x3f
c0001db0:	09 ca                	or     edx,ecx
c0001db2:	39 de                	cmp    esi,ebx
c0001db4:	75 e7                	jne    c0001d9d <tchar2uni+0x62>
c0001db6:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001db9:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001dbf:	77 37                	ja     c0001df8 <tchar2uni+0xbd>
c0001dc1:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001dc7:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001dcd:	76 29                	jbe    c0001df8 <tchar2uni+0xbd>
c0001dcf:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001dd5:	76 1d                	jbe    c0001df4 <tchar2uni+0xb9>
c0001dd7:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001ddd:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001de3:	c1 e1 06             	shl    ecx,0x6
c0001de6:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001dec:	09 ca                	or     edx,ecx
c0001dee:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001df4:	89 1f                	mov    DWORD PTR [edi],ebx
c0001df6:	eb 03                	jmp    c0001dfb <tchar2uni+0xc0>
c0001df8:	83 ca ff             	or     edx,0xffffffff
c0001dfb:	5b                   	pop    ebx
c0001dfc:	89 d0                	mov    eax,edx
c0001dfe:	5e                   	pop    esi
c0001dff:	5f                   	pop    edi
c0001e00:	c3                   	ret    

c0001e01 <put_utf>:
c0001e01:	53                   	push   ebx
c0001e02:	83 f8 7f             	cmp    eax,0x7f
c0001e05:	89 c3                	mov    ebx,eax
c0001e07:	b0 00                	mov    al,0x0
c0001e09:	77 11                	ja     c0001e1c <put_utf+0x1b>
c0001e0b:	85 c9                	test   ecx,ecx
c0001e0d:	0f 84 e5 00 00 00    	je     c0001ef8 <put_utf+0xf7>
c0001e13:	88 1a                	mov    BYTE PTR [edx],bl
c0001e15:	b0 01                	mov    al,0x1
c0001e17:	e9 dc 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e1c:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e22:	77 23                	ja     c0001e47 <put_utf+0x46>
c0001e24:	83 f9 01             	cmp    ecx,0x1
c0001e27:	0f 86 cb 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e2d:	89 d8                	mov    eax,ebx
c0001e2f:	83 e3 3f             	and    ebx,0x3f
c0001e32:	c1 e8 06             	shr    eax,0x6
c0001e35:	83 cb 80             	or     ebx,0xffffff80
c0001e38:	83 c8 c0             	or     eax,0xffffffc0
c0001e3b:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e3e:	88 02                	mov    BYTE PTR [edx],al
c0001e40:	b0 02                	mov    al,0x2
c0001e42:	e9 b1 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e47:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e4d:	77 40                	ja     c0001e8f <put_utf+0x8e>
c0001e4f:	83 f9 02             	cmp    ecx,0x2
c0001e52:	0f 86 a0 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e58:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e5e:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e64:	0f 86 8e 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e6a:	89 d8                	mov    eax,ebx
c0001e6c:	c1 e8 0c             	shr    eax,0xc
c0001e6f:	83 c8 e0             	or     eax,0xffffffe0
c0001e72:	88 02                	mov    BYTE PTR [edx],al
c0001e74:	89 d8                	mov    eax,ebx
c0001e76:	83 e3 3f             	and    ebx,0x3f
c0001e79:	c1 e8 06             	shr    eax,0x6
c0001e7c:	83 cb 80             	or     ebx,0xffffff80
c0001e7f:	83 e0 3f             	and    eax,0x3f
c0001e82:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e85:	83 c8 80             	or     eax,0xffffff80
c0001e88:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e8b:	b0 03                	mov    al,0x3
c0001e8d:	eb 69                	jmp    c0001ef8 <put_utf+0xf7>
c0001e8f:	83 f9 03             	cmp    ecx,0x3
c0001e92:	76 64                	jbe    c0001ef8 <put_utf+0xf7>
c0001e94:	89 d9                	mov    ecx,ebx
c0001e96:	0f b7 c3             	movzx  eax,bx
c0001e99:	66 31 c9             	xor    cx,cx
c0001e9c:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001ea2:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001ea8:	c1 e9 06             	shr    ecx,0x6
c0001eab:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001eb1:	77 43                	ja     c0001ef6 <put_utf+0xf5>
c0001eb3:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001eb9:	77 3b                	ja     c0001ef6 <put_utf+0xf5>
c0001ebb:	09 cb                	or     ebx,ecx
c0001ebd:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ec3:	89 d8                	mov    eax,ebx
c0001ec5:	c1 e8 12             	shr    eax,0x12
c0001ec8:	83 c8 f0             	or     eax,0xfffffff0
c0001ecb:	88 02                	mov    BYTE PTR [edx],al
c0001ecd:	89 d8                	mov    eax,ebx
c0001ecf:	c1 e8 0c             	shr    eax,0xc
c0001ed2:	83 e0 3f             	and    eax,0x3f
c0001ed5:	83 c8 80             	or     eax,0xffffff80
c0001ed8:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001edb:	89 d8                	mov    eax,ebx
c0001edd:	83 e3 3f             	and    ebx,0x3f
c0001ee0:	c1 e8 06             	shr    eax,0x6
c0001ee3:	83 cb 80             	or     ebx,0xffffff80
c0001ee6:	83 e0 3f             	and    eax,0x3f
c0001ee9:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eec:	83 c8 80             	or     eax,0xffffff80
c0001eef:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001ef2:	b0 04                	mov    al,0x4
c0001ef4:	eb 02                	jmp    c0001ef8 <put_utf+0xf7>
c0001ef6:	31 c0                	xor    eax,eax
c0001ef8:	5b                   	pop    ebx
c0001ef9:	c3                   	ret    

c0001efa <clst2sect>:
c0001efa:	89 c1                	mov    ecx,eax
c0001efc:	83 ea 02             	sub    edx,0x2
c0001eff:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001f02:	83 e8 02             	sub    eax,0x2
c0001f05:	39 d0                	cmp    eax,edx
c0001f07:	76 0d                	jbe    c0001f16 <clst2sect+0x1c>
c0001f09:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001f0d:	f7 e2                	mul    edx
c0001f0f:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001f12:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001f15:	c3                   	ret    
c0001f16:	31 c0                	xor    eax,eax
c0001f18:	31 d2                	xor    edx,edx
c0001f1a:	c3                   	ret    

c0001f1b <clmt_clust>:
c0001f1b:	57                   	push   edi
c0001f1c:	89 cf                	mov    edi,ecx
c0001f1e:	56                   	push   esi
c0001f1f:	89 d6                	mov    esi,edx
c0001f21:	53                   	push   ebx
c0001f22:	0f ac fe 09          	shrd   esi,edi,0x9
c0001f26:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001f29:	89 f2                	mov    edx,esi
c0001f2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0001f2d:	c1 ef 09             	shr    edi,0x9
c0001f30:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001f34:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001f37:	89 f9                	mov    ecx,edi
c0001f39:	31 ff                	xor    edi,edi
c0001f3b:	57                   	push   edi
c0001f3c:	56                   	push   esi
c0001f3d:	51                   	push   ecx
c0001f3e:	52                   	push   edx
c0001f3f:	e8 38 49 02 00       	call   c002687c <__udivdi3>
c0001f44:	83 c4 10             	add    esp,0x10
c0001f47:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f49:	85 d2                	test   edx,edx
c0001f4b:	74 10                	je     c0001f5d <clmt_clust+0x42>
c0001f4d:	39 d0                	cmp    eax,edx
c0001f4f:	72 07                	jb     c0001f58 <clmt_clust+0x3d>
c0001f51:	29 d0                	sub    eax,edx
c0001f53:	83 c3 08             	add    ebx,0x8
c0001f56:	eb ef                	jmp    c0001f47 <clmt_clust+0x2c>
c0001f58:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f5b:	89 c2                	mov    edx,eax
c0001f5d:	5b                   	pop    ebx
c0001f5e:	89 d0                	mov    eax,edx
c0001f60:	5e                   	pop    esi
c0001f61:	5f                   	pop    edi
c0001f62:	c3                   	ret    

c0001f63 <pick_lfn>:
c0001f63:	55                   	push   ebp
c0001f64:	57                   	push   edi
c0001f65:	56                   	push   esi
c0001f66:	89 d6                	mov    esi,edx
c0001f68:	53                   	push   ebx
c0001f69:	89 c3                	mov    ebx,eax
c0001f6b:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f6e:	e8 ee fc ff ff       	call   c0001c61 <ld_word>
c0001f73:	66 85 c0             	test   ax,ax
c0001f76:	74 04                	je     c0001f7c <pick_lfn+0x19>
c0001f78:	31 c0                	xor    eax,eax
c0001f7a:	eb 5c                	jmp    c0001fd8 <pick_lfn+0x75>
c0001f7c:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f7f:	bd 01 00 00 00       	mov    ebp,0x1
c0001f84:	83 e1 bf             	and    ecx,0xffffffbf
c0001f87:	31 ff                	xor    edi,edi
c0001f89:	49                   	dec    ecx
c0001f8a:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f8d:	0f b6 87 00 93 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6d00]
c0001f94:	01 f0                	add    eax,esi
c0001f96:	e8 c6 fc ff ff       	call   c0001c61 <ld_word>
c0001f9b:	66 85 ed             	test   bp,bp
c0001f9e:	74 11                	je     c0001fb1 <pick_lfn+0x4e>
c0001fa0:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fa6:	77 d0                	ja     c0001f78 <pick_lfn+0x15>
c0001fa8:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fac:	89 c5                	mov    ebp,eax
c0001fae:	41                   	inc    ecx
c0001faf:	eb 04                	jmp    c0001fb5 <pick_lfn+0x52>
c0001fb1:	66 40                	inc    ax
c0001fb3:	75 c3                	jne    c0001f78 <pick_lfn+0x15>
c0001fb5:	47                   	inc    edi
c0001fb6:	83 ff 0d             	cmp    edi,0xd
c0001fb9:	75 d2                	jne    c0001f8d <pick_lfn+0x2a>
c0001fbb:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fbe:	74 13                	je     c0001fd3 <pick_lfn+0x70>
c0001fc0:	66 85 ed             	test   bp,bp
c0001fc3:	74 0e                	je     c0001fd3 <pick_lfn+0x70>
c0001fc5:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fcb:	77 ab                	ja     c0001f78 <pick_lfn+0x15>
c0001fcd:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001fd3:	b8 01 00 00 00       	mov    eax,0x1
c0001fd8:	5b                   	pop    ebx
c0001fd9:	5e                   	pop    esi
c0001fda:	5f                   	pop    edi
c0001fdb:	5d                   	pop    ebp
c0001fdc:	c3                   	ret    

c0001fdd <put_lfn>:
c0001fdd:	55                   	push   ebp
c0001fde:	31 ed                	xor    ebp,ebp
c0001fe0:	57                   	push   edi
c0001fe1:	89 d7                	mov    edi,edx
c0001fe3:	56                   	push   esi
c0001fe4:	31 f6                	xor    esi,esi
c0001fe6:	53                   	push   ebx
c0001fe7:	83 ec 08             	sub    esp,0x8
c0001fea:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fed:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001ff1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001ff5:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001ffb:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ffe:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002001:	31 d2                	xor    edx,edx
c0002003:	e8 cb fc ff ff       	call   c0001cd3 <st_word>
c0002008:	0f b6 d9             	movzx  ebx,cl
c000200b:	4b                   	dec    ebx
c000200c:	6b db 0d             	imul   ebx,ebx,0xd
c000200f:	66 83 fe ff          	cmp    si,0xffff
c0002013:	74 08                	je     c000201d <put_lfn+0x40>
c0002015:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002018:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000201c:	43                   	inc    ebx
c000201d:	0f b6 85 00 93 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6d00]
c0002024:	0f b7 d6             	movzx  edx,si
c0002027:	01 f8                	add    eax,edi
c0002029:	e8 a5 fc ff ff       	call   c0001cd3 <st_word>
c000202e:	66 85 f6             	test   si,si
c0002031:	75 03                	jne    c0002036 <put_lfn+0x59>
c0002033:	83 ce ff             	or     esi,0xffffffff
c0002036:	45                   	inc    ebp
c0002037:	83 fd 0d             	cmp    ebp,0xd
c000203a:	75 d3                	jne    c000200f <put_lfn+0x32>
c000203c:	66 46                	inc    si
c000203e:	74 0a                	je     c000204a <put_lfn+0x6d>
c0002040:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002043:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002048:	75 09                	jne    c0002053 <put_lfn+0x76>
c000204a:	88 c8                	mov    al,cl
c000204c:	83 c8 40             	or     eax,0x40
c000204f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002053:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002057:	88 07                	mov    BYTE PTR [edi],al
c0002059:	83 c4 08             	add    esp,0x8
c000205c:	5b                   	pop    ebx
c000205d:	5e                   	pop    esi
c000205e:	5f                   	pop    edi
c000205f:	5d                   	pop    ebp
c0002060:	c3                   	ret    

c0002061 <gen_numname>:
c0002061:	57                   	push   edi
c0002062:	89 cf                	mov    edi,ecx
c0002064:	56                   	push   esi
c0002065:	b9 0b 00 00 00       	mov    ecx,0xb
c000206a:	53                   	push   ebx
c000206b:	89 c6                	mov    esi,eax
c000206d:	83 ec 10             	sub    esp,0x10
c0002070:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002074:	e8 67 fc ff ff       	call   c0001ce0 <mem_cpy>
c0002079:	83 fb 05             	cmp    ebx,0x5
c000207c:	76 2d                	jbe    c00020ab <gen_numname+0x4a>
c000207e:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002081:	66 85 c0             	test   ax,ax
c0002084:	74 25                	je     c00020ab <gen_numname+0x4a>
c0002086:	83 c7 02             	add    edi,0x2
c0002089:	ba 10 00 00 00       	mov    edx,0x10
c000208e:	01 db                	add    ebx,ebx
c0002090:	89 c1                	mov    ecx,eax
c0002092:	66 d1 e8             	shr    ax,1
c0002095:	83 e1 01             	and    ecx,0x1
c0002098:	01 cb                	add    ebx,ecx
c000209a:	0f ba e3 10          	bt     ebx,0x10
c000209e:	73 06                	jae    c00020a6 <gen_numname+0x45>
c00020a0:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020a6:	4a                   	dec    edx
c00020a7:	75 e5                	jne    c000208e <gen_numname+0x2d>
c00020a9:	eb d3                	jmp    c000207e <gen_numname+0x1d>
c00020ab:	b8 07 00 00 00       	mov    eax,0x7
c00020b0:	88 d9                	mov    cl,bl
c00020b2:	83 e1 0f             	and    ecx,0xf
c00020b5:	8d 51 30             	lea    edx,[ecx+0x30]
c00020b8:	80 fa 39             	cmp    dl,0x39
c00020bb:	76 03                	jbe    c00020c0 <gen_numname+0x5f>
c00020bd:	8d 51 37             	lea    edx,[ecx+0x37]
c00020c0:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020c3:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020c7:	89 da                	mov    edx,ebx
c00020c9:	c1 ea 04             	shr    edx,0x4
c00020cc:	83 fb 0f             	cmp    ebx,0xf
c00020cf:	76 06                	jbe    c00020d7 <gen_numname+0x76>
c00020d1:	89 c8                	mov    eax,ecx
c00020d3:	89 d3                	mov    ebx,edx
c00020d5:	eb d9                	jmp    c00020b0 <gen_numname+0x4f>
c00020d7:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020dc:	31 d2                	xor    edx,edx
c00020de:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020e1:	8d 04 16             	lea    eax,[esi+edx*1]
c00020e4:	39 ca                	cmp    edx,ecx
c00020e6:	73 18                	jae    c0002100 <gen_numname+0x9f>
c00020e8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020eb:	3c 20                	cmp    al,0x20
c00020ed:	74 11                	je     c0002100 <gen_numname+0x9f>
c00020ef:	e8 41 fc ff ff       	call   c0001d35 <dbc_1st>
c00020f4:	85 c0                	test   eax,eax
c00020f6:	74 05                	je     c00020fd <gen_numname+0x9c>
c00020f8:	39 d3                	cmp    ebx,edx
c00020fa:	74 04                	je     c0002100 <gen_numname+0x9f>
c00020fc:	42                   	inc    edx
c00020fd:	42                   	inc    edx
c00020fe:	eb e1                	jmp    c00020e1 <gen_numname+0x80>
c0002100:	b0 20                	mov    al,0x20
c0002102:	83 f9 07             	cmp    ecx,0x7
c0002105:	77 05                	ja     c000210c <gen_numname+0xab>
c0002107:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000210b:	41                   	inc    ecx
c000210c:	42                   	inc    edx
c000210d:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002111:	83 fa 07             	cmp    edx,0x7
c0002114:	76 ea                	jbe    c0002100 <gen_numname+0x9f>
c0002116:	83 c4 10             	add    esp,0x10
c0002119:	5b                   	pop    ebx
c000211a:	5e                   	pop    esi
c000211b:	5f                   	pop    edi
c000211c:	c3                   	ret    

c000211d <sum_sfn>:
c000211d:	31 c9                	xor    ecx,ecx
c000211f:	31 d2                	xor    edx,edx
c0002121:	d0 ca                	ror    dl,1
c0002123:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002126:	41                   	inc    ecx
c0002127:	83 f9 0b             	cmp    ecx,0xb
c000212a:	75 f5                	jne    c0002121 <sum_sfn+0x4>
c000212c:	88 d0                	mov    al,dl
c000212e:	c3                   	ret    

c000212f <xdir_sum>:
c000212f:	56                   	push   esi
c0002130:	31 c9                	xor    ecx,ecx
c0002132:	53                   	push   ebx
c0002133:	31 d2                	xor    edx,edx
c0002135:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002139:	43                   	inc    ebx
c000213a:	c1 e3 05             	shl    ebx,0x5
c000213d:	83 fa 02             	cmp    edx,0x2
c0002140:	74 0b                	je     c000214d <xdir_sum+0x1e>
c0002142:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002146:	66 d1 c9             	ror    cx,1
c0002149:	01 f1                	add    ecx,esi
c000214b:	eb 05                	jmp    c0002152 <xdir_sum+0x23>
c000214d:	ba 03 00 00 00       	mov    edx,0x3
c0002152:	42                   	inc    edx
c0002153:	39 d3                	cmp    ebx,edx
c0002155:	77 e6                	ja     c000213d <xdir_sum+0xe>
c0002157:	89 c8                	mov    eax,ecx
c0002159:	5b                   	pop    ebx
c000215a:	5e                   	pop    esi
c000215b:	c3                   	ret    

c000215c <xsum32>:
c000215c:	d1 ca                	ror    edx,1
c000215e:	0f b6 c0             	movzx  eax,al
c0002161:	01 d0                	add    eax,edx
c0002163:	c3                   	ret    

c0002164 <get_xfileinfo>:
c0002164:	55                   	push   ebp
c0002165:	31 c9                	xor    ecx,ecx
c0002167:	57                   	push   edi
c0002168:	bd 40 00 00 00       	mov    ebp,0x40
c000216d:	56                   	push   esi
c000216e:	31 ff                	xor    edi,edi
c0002170:	53                   	push   ebx
c0002171:	89 c6                	mov    esi,eax
c0002173:	83 ec 0c             	sub    esp,0xc
c0002176:	89 d3                	mov    ebx,edx
c0002178:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000217f:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002183:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002186:	76 6d                	jbe    c00021f5 <get_xfileinfo+0x91>
c0002188:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000218e:	76 0b                	jbe    c000219b <get_xfileinfo+0x37>
c0002190:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0002194:	bf 01 00 00 00       	mov    edi,0x1
c0002199:	eb 63                	jmp    c00021fe <get_xfileinfo+0x9a>
c000219b:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c00021a1:	75 03                	jne    c00021a6 <get_xfileinfo+0x42>
c00021a3:	83 c5 02             	add    ebp,0x2
c00021a6:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00021a9:	83 c5 02             	add    ebp,0x2
c00021ac:	e8 b0 fa ff ff       	call   c0001c61 <ld_word>
c00021b1:	ff 04 24             	inc    DWORD PTR [esp]
c00021b4:	66 85 c9             	test   cx,cx
c00021b7:	75 0d                	jne    c00021c6 <get_xfileinfo+0x62>
c00021b9:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00021bf:	66 81 fa ff 07       	cmp    dx,0x7ff
c00021c4:	76 2b                	jbe    c00021f1 <get_xfileinfo+0x8d>
c00021c6:	c1 e1 10             	shl    ecx,0x10
c00021c9:	ba ff 00 00 00       	mov    edx,0xff
c00021ce:	0f b7 c0             	movzx  eax,ax
c00021d1:	29 fa                	sub    edx,edi
c00021d3:	09 c8                	or     eax,ecx
c00021d5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00021d9:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021dd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021e1:	e8 1b fc ff ff       	call   c0001e01 <put_utf>
c00021e6:	84 c0                	test   al,al
c00021e8:	74 a6                	je     c0002190 <get_xfileinfo+0x2c>
c00021ea:	0f b6 c0             	movzx  eax,al
c00021ed:	01 c7                	add    edi,eax
c00021ef:	31 c0                	xor    eax,eax
c00021f1:	89 c1                	mov    ecx,eax
c00021f3:	eb 8a                	jmp    c000217f <get_xfileinfo+0x1b>
c00021f5:	85 ff                	test   edi,edi
c00021f7:	74 97                	je     c0002190 <get_xfileinfo+0x2c>
c00021f9:	66 85 c9             	test   cx,cx
c00021fc:	75 92                	jne    c0002190 <get_xfileinfo+0x2c>
c00021fe:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0002203:	31 c0                	xor    eax,eax
c0002205:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002209:	31 d2                	xor    edx,edx
c000220b:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c000220e:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0002211:	80 e1 10             	and    cl,0x10
c0002214:	75 08                	jne    c000221e <get_xfileinfo+0xba>
c0002216:	8d 46 38             	lea    eax,[esi+0x38]
c0002219:	e8 68 fa ff ff       	call   c0001c86 <ld_qword>
c000221e:	89 03                	mov    DWORD PTR [ebx],eax
c0002220:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002223:	8d 46 0c             	lea    eax,[esi+0xc]
c0002226:	e8 36 fa ff ff       	call   c0001c61 <ld_word>
c000222b:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c000222f:	8d 46 0e             	lea    eax,[esi+0xe]
c0002232:	e8 2a fa ff ff       	call   c0001c61 <ld_word>
c0002237:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c000223b:	83 c4 0c             	add    esp,0xc
c000223e:	5b                   	pop    ebx
c000223f:	5e                   	pop    esi
c0002240:	5f                   	pop    edi
c0002241:	5d                   	pop    ebp
c0002242:	c3                   	ret    

c0002243 <get_ldnumber>:
c0002243:	8b 10                	mov    edx,DWORD PTR [eax]
c0002245:	85 d2                	test   edx,edx
c0002247:	74 14                	je     c000225d <get_ldnumber+0x1a>
c0002249:	56                   	push   esi
c000224a:	53                   	push   ebx
c000224b:	89 d3                	mov    ebx,edx
c000224d:	43                   	inc    ebx
c000224e:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002251:	80 f9 1f             	cmp    cl,0x1f
c0002254:	76 0d                	jbe    c0002263 <get_ldnumber+0x20>
c0002256:	80 f9 3a             	cmp    cl,0x3a
c0002259:	75 f2                	jne    c000224d <get_ldnumber+0xa>
c000225b:	eb 0a                	jmp    c0002267 <get_ldnumber+0x24>
c000225d:	83 c9 ff             	or     ecx,0xffffffff
c0002260:	89 c8                	mov    eax,ecx
c0002262:	c3                   	ret    
c0002263:	31 c9                	xor    ecx,ecx
c0002265:	eb 24                	jmp    c000228b <get_ldnumber+0x48>
c0002267:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226a:	8d 4e d0             	lea    ecx,[esi-0x30]
c000226d:	80 f9 09             	cmp    cl,0x9
c0002270:	77 16                	ja     c0002288 <get_ldnumber+0x45>
c0002272:	83 c2 02             	add    edx,0x2
c0002275:	83 c9 ff             	or     ecx,0xffffffff
c0002278:	39 d3                	cmp    ebx,edx
c000227a:	75 0f                	jne    c000228b <get_ldnumber+0x48>
c000227c:	89 f2                	mov    edx,esi
c000227e:	89 18                	mov    DWORD PTR [eax],ebx
c0002280:	0f be ca             	movsx  ecx,dl
c0002283:	83 e9 30             	sub    ecx,0x30
c0002286:	eb 03                	jmp    c000228b <get_ldnumber+0x48>
c0002288:	83 c9 ff             	or     ecx,0xffffffff
c000228b:	89 c8                	mov    eax,ecx
c000228d:	5b                   	pop    ebx
c000228e:	5e                   	pop    esi
c000228f:	c3                   	ret    

c0002290 <crc32>:
c0002290:	56                   	push   esi
c0002291:	89 d6                	mov    esi,edx
c0002293:	53                   	push   ebx
c0002294:	b2 01                	mov    dl,0x1
c0002296:	bb 08 00 00 00       	mov    ebx,0x8
c000229b:	89 f1                	mov    ecx,esi
c000229d:	84 d1                	test   cl,dl
c000229f:	0f 95 c1             	setne  cl
c00022a2:	0f b6 c9             	movzx  ecx,cl
c00022a5:	31 c1                	xor    ecx,eax
c00022a7:	89 c8                	mov    eax,ecx
c00022a9:	d1 e8                	shr    eax,1
c00022ab:	80 e1 01             	and    cl,0x1
c00022ae:	74 05                	je     c00022b5 <crc32+0x25>
c00022b0:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00022b5:	d1 e2                	shl    edx,1
c00022b7:	4b                   	dec    ebx
c00022b8:	75 e1                	jne    c000229b <crc32+0xb>
c00022ba:	5b                   	pop    ebx
c00022bb:	5e                   	pop    esi
c00022bc:	c3                   	ret    

c00022bd <test_gpt_header>:
c00022bd:	55                   	push   ebp
c00022be:	b9 10 00 00 00       	mov    ecx,0x10
c00022c3:	57                   	push   edi
c00022c4:	ba 00 92 02 c0       	mov    edx,0xc0029200
c00022c9:	56                   	push   esi
c00022ca:	31 ff                	xor    edi,edi
c00022cc:	53                   	push   ebx
c00022cd:	89 c3                	mov    ebx,eax
c00022cf:	e8 2c fa ff ff       	call   c0001d00 <mem_cmp>
c00022d4:	85 c0                	test   eax,eax
c00022d6:	75 55                	jne    c000232d <test_gpt_header+0x70>
c00022d8:	89 c7                	mov    edi,eax
c00022da:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022df:	83 ce ff             	or     esi,0xffffffff
c00022e2:	31 d2                	xor    edx,edx
c00022e4:	83 fd 03             	cmp    ebp,0x3
c00022e7:	76 05                	jbe    c00022ee <test_gpt_header+0x31>
c00022e9:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022ee:	89 f0                	mov    eax,esi
c00022f0:	45                   	inc    ebp
c00022f1:	e8 9a ff ff ff       	call   c0002290 <crc32>
c00022f6:	83 fd 4c             	cmp    ebp,0x4c
c00022f9:	89 c6                	mov    esi,eax
c00022fb:	75 e5                	jne    c00022e2 <test_gpt_header+0x25>
c00022fd:	8d 43 10             	lea    eax,[ebx+0x10]
c0002300:	f7 d6                	not    esi
c0002302:	e8 67 f9 ff ff       	call   c0001c6e <ld_dword>
c0002307:	39 c6                	cmp    esi,eax
c0002309:	75 22                	jne    c000232d <test_gpt_header+0x70>
c000230b:	8d 43 54             	lea    eax,[ebx+0x54]
c000230e:	e8 5b f9 ff ff       	call   c0001c6e <ld_dword>
c0002313:	83 c0 80             	add    eax,0xffffff80
c0002316:	75 15                	jne    c000232d <test_gpt_header+0x70>
c0002318:	8d 43 50             	lea    eax,[ebx+0x50]
c000231b:	e8 4e f9 ff ff       	call   c0001c6e <ld_dword>
c0002320:	3d 80 00 00 00       	cmp    eax,0x80
c0002325:	0f 96 c0             	setbe  al
c0002328:	0f b6 c0             	movzx  eax,al
c000232b:	89 c7                	mov    edi,eax
c000232d:	5b                   	pop    ebx
c000232e:	89 f8                	mov    eax,edi
c0002330:	5e                   	pop    esi
c0002331:	5f                   	pop    edi
c0002332:	5d                   	pop    ebp
c0002333:	c3                   	ret    

c0002334 <make_rand>:
c0002334:	56                   	push   esi
c0002335:	85 c0                	test   eax,eax
c0002337:	53                   	push   ebx
c0002338:	75 05                	jne    c000233f <make_rand+0xb>
c000233a:	b8 01 00 00 00       	mov    eax,0x1
c000233f:	01 d1                	add    ecx,edx
c0002341:	bb 08 00 00 00       	mov    ebx,0x8
c0002346:	89 c6                	mov    esi,eax
c0002348:	d1 e8                	shr    eax,1
c000234a:	83 e6 01             	and    esi,0x1
c000234d:	85 f6                	test   esi,esi
c000234f:	74 05                	je     c0002356 <make_rand+0x22>
c0002351:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002356:	4b                   	dec    ebx
c0002357:	75 ed                	jne    c0002346 <make_rand+0x12>
c0002359:	42                   	inc    edx
c000235a:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000235d:	39 ca                	cmp    edx,ecx
c000235f:	75 e0                	jne    c0002341 <make_rand+0xd>
c0002361:	5b                   	pop    ebx
c0002362:	5e                   	pop    esi
c0002363:	c3                   	ret    

c0002364 <validate>:
c0002364:	56                   	push   esi
c0002365:	53                   	push   ebx
c0002366:	89 d6                	mov    esi,edx
c0002368:	51                   	push   ecx
c0002369:	85 c0                	test   eax,eax
c000236b:	75 09                	jne    c0002376 <validate+0x12>
c000236d:	b8 09 00 00 00       	mov    eax,0x9
c0002372:	31 c9                	xor    ecx,ecx
c0002374:	eb 2f                	jmp    c00023a5 <validate+0x41>
c0002376:	89 c3                	mov    ebx,eax
c0002378:	8b 00                	mov    eax,DWORD PTR [eax]
c000237a:	85 c0                	test   eax,eax
c000237c:	74 ef                	je     c000236d <validate+0x9>
c000237e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002381:	74 ea                	je     c000236d <validate+0x9>
c0002383:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002387:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000238b:	75 e0                	jne    c000236d <validate+0x9>
c000238d:	83 ec 0c             	sub    esp,0xc
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 76 f8 ff ff       	call   c0001c10 <disk_status>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	a8 01                	test   al,0x1
c000239f:	75 cc                	jne    c000236d <validate+0x9>
c00023a1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00023a3:	31 c0                	xor    eax,eax
c00023a5:	89 0e                	mov    DWORD PTR [esi],ecx
c00023a7:	5a                   	pop    edx
c00023a8:	5b                   	pop    ebx
c00023a9:	5e                   	pop    esi
c00023aa:	c3                   	ret    

c00023ab <sync_window>:
c00023ab:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00023af:	0f 84 85 00 00 00    	je     c000243a <sync_window+0x8f>
c00023b5:	55                   	push   ebp
c00023b6:	8d 68 54             	lea    ebp,[eax+0x54]
c00023b9:	57                   	push   edi
c00023ba:	56                   	push   esi
c00023bb:	53                   	push   ebx
c00023bc:	89 c3                	mov    ebx,eax
c00023be:	83 ec 28             	sub    esp,0x28
c00023c1:	6a 01                	push   0x1
c00023c3:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00023c6:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00023c9:	55                   	push   ebp
c00023ca:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023ce:	50                   	push   eax
c00023cf:	e8 58 f8 ff ff       	call   c0001c2c <disk_write>
c00023d4:	83 c4 20             	add    esp,0x20
c00023d7:	ba 01 00 00 00       	mov    edx,0x1
c00023dc:	85 c0                	test   eax,eax
c00023de:	75 50                	jne    c0002430 <sync_window+0x85>
c00023e0:	31 ff                	xor    edi,edi
c00023e2:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023e5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023e9:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023ed:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023f0:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023f3:	89 c6                	mov    esi,eax
c00023f5:	89 d7                	mov    edi,edx
c00023f7:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023fa:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023fe:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c0002401:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0002405:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002409:	73 23                	jae    c000242e <sync_window+0x83>
c000240b:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000240f:	75 1d                	jne    c000242e <sync_window+0x83>
c0002411:	83 ec 0c             	sub    esp,0xc
c0002414:	6a 01                	push   0x1
c0002416:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000241a:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000241e:	52                   	push   edx
c000241f:	50                   	push   eax
c0002420:	55                   	push   ebp
c0002421:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002425:	50                   	push   eax
c0002426:	e8 01 f8 ff ff       	call   c0001c2c <disk_write>
c000242b:	83 c4 20             	add    esp,0x20
c000242e:	31 d2                	xor    edx,edx
c0002430:	83 c4 1c             	add    esp,0x1c
c0002433:	89 d0                	mov    eax,edx
c0002435:	5b                   	pop    ebx
c0002436:	5e                   	pop    esi
c0002437:	5f                   	pop    edi
c0002438:	5d                   	pop    ebp
c0002439:	c3                   	ret    
c000243a:	31 d2                	xor    edx,edx
c000243c:	89 d0                	mov    eax,edx
c000243e:	c3                   	ret    

c000243f <move_window>:
c000243f:	56                   	push   esi
c0002440:	53                   	push   ebx
c0002441:	89 c3                	mov    ebx,eax
c0002443:	83 ec 14             	sub    esp,0x14
c0002446:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002449:	75 07                	jne    c0002452 <move_window+0x13>
c000244b:	31 f6                	xor    esi,esi
c000244d:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002450:	74 59                	je     c00024ab <move_window+0x6c>
c0002452:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002456:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000245a:	89 d8                	mov    eax,ebx
c000245c:	e8 4a ff ff ff       	call   c00023ab <sync_window>
c0002461:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002465:	89 c6                	mov    esi,eax
c0002467:	85 c0                	test   eax,eax
c0002469:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000246d:	75 3c                	jne    c00024ab <move_window+0x6c>
c000246f:	83 ec 0c             	sub    esp,0xc
c0002472:	8d 43 54             	lea    eax,[ebx+0x54]
c0002475:	6a 01                	push   0x1
c0002477:	51                   	push   ecx
c0002478:	52                   	push   edx
c0002479:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000247d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002481:	50                   	push   eax
c0002482:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002486:	50                   	push   eax
c0002487:	e8 8a f7 ff ff       	call   c0001c16 <disk_read>
c000248c:	83 c4 20             	add    esp,0x20
c000248f:	85 c0                	test   eax,eax
c0002491:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002495:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002499:	74 0a                	je     c00024a5 <move_window+0x66>
c000249b:	83 ca ff             	or     edx,0xffffffff
c000249e:	be 01 00 00 00       	mov    esi,0x1
c00024a3:	89 d1                	mov    ecx,edx
c00024a5:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00024a8:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00024ab:	89 f0                	mov    eax,esi
c00024ad:	83 c4 14             	add    esp,0x14
c00024b0:	5b                   	pop    ebx
c00024b1:	5e                   	pop    esi
c00024b2:	c3                   	ret    

c00024b3 <check_fs>:
c00024b3:	53                   	push   ebx
c00024b4:	89 c3                	mov    ebx,eax
c00024b6:	83 ec 08             	sub    esp,0x8
c00024b9:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00024bd:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00024c4:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00024cb:	e8 6f ff ff ff       	call   c000243f <move_window>
c00024d0:	ba 04 00 00 00       	mov    edx,0x4
c00024d5:	85 c0                	test   eax,eax
c00024d7:	0f 85 89 00 00 00    	jne    c0002566 <check_fs+0xb3>
c00024dd:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024e3:	e8 79 f7 ff ff       	call   c0001c61 <ld_word>
c00024e8:	ba 03 00 00 00       	mov    edx,0x3
c00024ed:	66 3d 55 aa          	cmp    ax,0xaa55
c00024f1:	75 73                	jne    c0002566 <check_fs+0xb3>
c00024f3:	ba 20 93 02 c0       	mov    edx,0xc0029320
c00024f8:	8d 43 54             	lea    eax,[ebx+0x54]
c00024fb:	b9 0b 00 00 00       	mov    ecx,0xb
c0002500:	e8 fb f7 ff ff       	call   c0001d00 <mem_cmp>
c0002505:	ba 01 00 00 00       	mov    edx,0x1
c000250a:	85 c0                	test   eax,eax
c000250c:	74 58                	je     c0002566 <check_fs+0xb3>
c000250e:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c0002511:	8d 50 18             	lea    edx,[eax+0x18]
c0002514:	80 fa 01             	cmp    dl,0x1
c0002517:	76 09                	jbe    c0002522 <check_fs+0x6f>
c0002519:	ba 02 00 00 00       	mov    edx,0x2
c000251e:	3c eb                	cmp    al,0xeb
c0002520:	75 44                	jne    c0002566 <check_fs+0xb3>
c0002522:	ba 64 c6 02 c0       	mov    edx,0xc002c664
c0002527:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000252d:	b9 03 00 00 00       	mov    ecx,0x3
c0002532:	e8 c9 f7 ff ff       	call   c0001d00 <mem_cmp>
c0002537:	31 d2                	xor    edx,edx
c0002539:	85 c0                	test   eax,eax
c000253b:	74 29                	je     c0002566 <check_fs+0xb3>
c000253d:	ba 2c 93 02 c0       	mov    edx,0xc002932c
c0002542:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002548:	b9 05 00 00 00       	mov    ecx,0x5
c000254d:	e8 ae f7 ff ff       	call   c0001d00 <mem_cmp>
c0002552:	31 d2                	xor    edx,edx
c0002554:	85 c0                	test   eax,eax
c0002556:	74 0e                	je     c0002566 <check_fs+0xb3>
c0002558:	31 d2                	xor    edx,edx
c000255a:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002561:	0f 95 c2             	setne  dl
c0002564:	01 d2                	add    edx,edx
c0002566:	89 d0                	mov    eax,edx
c0002568:	83 c4 08             	add    esp,0x8
c000256b:	5b                   	pop    ebx
c000256c:	c3                   	ret    

c000256d <find_volume>:
c000256d:	55                   	push   ebp
c000256e:	31 c9                	xor    ecx,ecx
c0002570:	57                   	push   edi
c0002571:	56                   	push   esi
c0002572:	89 d6                	mov    esi,edx
c0002574:	53                   	push   ebx
c0002575:	31 d2                	xor    edx,edx
c0002577:	83 ec 3c             	sub    esp,0x3c
c000257a:	89 c3                	mov    ebx,eax
c000257c:	e8 32 ff ff ff       	call   c00024b3 <check_fs>
c0002581:	83 f8 02             	cmp    eax,0x2
c0002584:	74 0e                	je     c0002594 <find_volume+0x27>
c0002586:	0f 87 5d 01 00 00    	ja     c00026e9 <find_volume+0x17c>
c000258c:	85 f6                	test   esi,esi
c000258e:	0f 84 55 01 00 00    	je     c00026e9 <find_volume+0x17c>
c0002594:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000259b:	0f 85 dd 00 00 00    	jne    c000267e <find_volume+0x111>
c00025a1:	31 c9                	xor    ecx,ecx
c00025a3:	ba 01 00 00 00       	mov    edx,0x1
c00025a8:	89 d8                	mov    eax,ebx
c00025aa:	e8 90 fe ff ff       	call   c000243f <move_window>
c00025af:	85 c0                	test   eax,eax
c00025b1:	74 0a                	je     c00025bd <find_volume+0x50>
c00025b3:	b8 04 00 00 00       	mov    eax,0x4
c00025b8:	e9 2c 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025bd:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00025c0:	89 e8                	mov    eax,ebp
c00025c2:	e8 f6 fc ff ff       	call   c00022bd <test_gpt_header>
c00025c7:	85 c0                	test   eax,eax
c00025c9:	75 0a                	jne    c00025d5 <find_volume+0x68>
c00025cb:	b8 03 00 00 00       	mov    eax,0x3
c00025d0:	e9 14 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025d5:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025db:	e8 8e f6 ff ff       	call   c0001c6e <ld_dword>
c00025e0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025e4:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025ea:	e8 97 f6 ff ff       	call   c0001c86 <ld_qword>
c00025ef:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025fb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025ff:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002607:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000260b:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000260f:	74 ba                	je     c00025cb <find_volume+0x5e>
c0002611:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002615:	31 c9                	xor    ecx,ecx
c0002617:	c1 e7 07             	shl    edi,0x7
c000261a:	89 d8                	mov    eax,ebx
c000261c:	89 fa                	mov    edx,edi
c000261e:	c1 ea 09             	shr    edx,0x9
c0002621:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002625:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002629:	e8 11 fe ff ff       	call   c000243f <move_window>
c000262e:	85 c0                	test   eax,eax
c0002630:	75 81                	jne    c00025b3 <find_volume+0x46>
c0002632:	81 e7 80 01 00 00    	and    edi,0x180
c0002638:	b9 10 00 00 00       	mov    ecx,0x10
c000263d:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002641:	ba 10 93 02 c0       	mov    edx,0xc0029310
c0002646:	e8 b5 f6 ff ff       	call   c0001d00 <mem_cmp>
c000264b:	85 c0                	test   eax,eax
c000264d:	75 29                	jne    c0002678 <find_volume+0x10b>
c000264f:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002653:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002657:	e8 2a f6 ff ff       	call   c0001c86 <ld_qword>
c000265c:	89 d1                	mov    ecx,edx
c000265e:	89 c2                	mov    edx,eax
c0002660:	89 d8                	mov    eax,ebx
c0002662:	e8 4c fe ff ff       	call   c00024b3 <check_fs>
c0002667:	85 f6                	test   esi,esi
c0002669:	75 07                	jne    c0002672 <find_volume+0x105>
c000266b:	83 f8 01             	cmp    eax,0x1
c000266e:	77 08                	ja     c0002678 <find_volume+0x10b>
c0002670:	eb 77                	jmp    c00026e9 <find_volume+0x17c>
c0002672:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002676:	74 71                	je     c00026e9 <find_volume+0x17c>
c0002678:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000267c:	eb 89                	jmp    c0002607 <find_volume+0x9a>
c000267e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002682:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002688:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c000268e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002692:	89 cd                	mov    ebp,ecx
c0002694:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002698:	89 f8                	mov    eax,edi
c000269a:	83 c7 10             	add    edi,0x10
c000269d:	e8 cc f5 ff ff       	call   c0001c6e <ld_dword>
c00026a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00026a6:	89 01                	mov    DWORD PTR [ecx],eax
c00026a8:	83 c1 04             	add    ecx,0x4
c00026ab:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00026af:	75 e3                	jne    c0002694 <find_volume+0x127>
c00026b1:	31 ff                	xor    edi,edi
c00026b3:	85 f6                	test   esi,esi
c00026b5:	74 03                	je     c00026ba <find_volume+0x14d>
c00026b7:	8d 7e ff             	lea    edi,[esi-0x1]
c00026ba:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00026be:	85 d2                	test   edx,edx
c00026c0:	74 14                	je     c00026d6 <find_volume+0x169>
c00026c2:	31 c9                	xor    ecx,ecx
c00026c4:	89 d8                	mov    eax,ebx
c00026c6:	e8 e8 fd ff ff       	call   c00024b3 <check_fs>
c00026cb:	83 f8 01             	cmp    eax,0x1
c00026ce:	76 19                	jbe    c00026e9 <find_volume+0x17c>
c00026d0:	85 f6                	test   esi,esi
c00026d2:	74 0f                	je     c00026e3 <find_volume+0x176>
c00026d4:	eb 13                	jmp    c00026e9 <find_volume+0x17c>
c00026d6:	85 f6                	test   esi,esi
c00026d8:	0f 85 ed fe ff ff    	jne    c00025cb <find_volume+0x5e>
c00026de:	b8 03 00 00 00       	mov    eax,0x3
c00026e3:	47                   	inc    edi
c00026e4:	83 ff 03             	cmp    edi,0x3
c00026e7:	76 d1                	jbe    c00026ba <find_volume+0x14d>
c00026e9:	83 c4 3c             	add    esp,0x3c
c00026ec:	5b                   	pop    ebx
c00026ed:	5e                   	pop    esi
c00026ee:	5f                   	pop    edi
c00026ef:	5d                   	pop    ebp
c00026f0:	c3                   	ret    

c00026f1 <mount_volume>:
c00026f1:	55                   	push   ebp
c00026f2:	57                   	push   edi
c00026f3:	89 cf                	mov    edi,ecx
c00026f5:	56                   	push   esi
c00026f6:	53                   	push   ebx
c00026f7:	bb 0b 00 00 00       	mov    ebx,0xb
c00026fc:	83 ec 3c             	sub    esp,0x3c
c00026ff:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002705:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002709:	e8 35 fb ff ff       	call   c0002243 <get_ldnumber>
c000270e:	85 c0                	test   eax,eax
c0002710:	0f 88 3a 05 00 00    	js     c0002c50 <mount_volume+0x55f>
c0002716:	8b 2c 85 e0 e1 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd1e20]
c000271d:	89 c6                	mov    esi,eax
c000271f:	bb 0c 00 00 00       	mov    ebx,0xc
c0002724:	85 ed                	test   ebp,ebp
c0002726:	0f 84 24 05 00 00    	je     c0002c50 <mount_volume+0x55f>
c000272c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002730:	83 e7 fe             	and    edi,0xfffffffe
c0002733:	89 2a                	mov    DWORD PTR [edx],ebp
c0002735:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002739:	74 32                	je     c000276d <mount_volume+0x7c>
c000273b:	83 ec 0c             	sub    esp,0xc
c000273e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002742:	50                   	push   eax
c0002743:	e8 c8 f4 ff ff       	call   c0001c10 <disk_status>
c0002748:	83 c4 10             	add    esp,0x10
c000274b:	a8 01                	test   al,0x1
c000274d:	75 1e                	jne    c000276d <mount_volume+0x7c>
c000274f:	31 db                	xor    ebx,ebx
c0002751:	89 f9                	mov    ecx,edi
c0002753:	84 c9                	test   cl,cl
c0002755:	0f 84 f5 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c000275b:	a8 04                	test   al,0x4
c000275d:	0f 84 ed 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c0002763:	bb 0a 00 00 00       	mov    ebx,0xa
c0002768:	e9 e3 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c000276d:	83 ec 0c             	sub    esp,0xc
c0002770:	89 f0                	mov    eax,esi
c0002772:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002776:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002779:	0f b6 f0             	movzx  esi,al
c000277c:	bb 03 00 00 00       	mov    ebx,0x3
c0002781:	56                   	push   esi
c0002782:	e8 8c f4 ff ff       	call   c0001c13 <disk_initialize>
c0002787:	83 c4 10             	add    esp,0x10
c000278a:	a8 01                	test   al,0x1
c000278c:	0f 85 be 04 00 00    	jne    c0002c50 <mount_volume+0x55f>
c0002792:	89 f9                	mov    ecx,edi
c0002794:	84 c9                	test   cl,cl
c0002796:	74 04                	je     c000279c <mount_volume+0xab>
c0002798:	a8 04                	test   al,0x4
c000279a:	75 c7                	jne    c0002763 <mount_volume+0x72>
c000279c:	31 d2                	xor    edx,edx
c000279e:	89 e8                	mov    eax,ebp
c00027a0:	e8 c8 fd ff ff       	call   c000256d <find_volume>
c00027a5:	83 f8 04             	cmp    eax,0x4
c00027a8:	75 0a                	jne    c00027b4 <mount_volume+0xc3>
c00027aa:	bb 01 00 00 00       	mov    ebx,0x1
c00027af:	e9 9c 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027b4:	83 f8 01             	cmp    eax,0x1
c00027b7:	76 0a                	jbe    c00027c3 <mount_volume+0xd2>
c00027b9:	bb 0d 00 00 00       	mov    ebx,0xd
c00027be:	e9 8d 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027c3:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00027c6:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00027c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027cd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027d1:	75 17                	jne    c00027ea <mount_volume+0xf9>
c00027d3:	b8 0b 00 00 00       	mov    eax,0xb
c00027d8:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027dd:	75 da                	jne    c00027b9 <mount_volume+0xc8>
c00027df:	40                   	inc    eax
c00027e0:	83 f8 40             	cmp    eax,0x40
c00027e3:	75 f3                	jne    c00027d8 <mount_volume+0xe7>
c00027e5:	e9 5a 02 00 00       	jmp    c0002a44 <mount_volume+0x353>
c00027ea:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027ed:	e8 6f f4 ff ff       	call   c0001c61 <ld_word>
c00027f2:	66 3d 00 02          	cmp    ax,0x200
c00027f6:	75 c1                	jne    c00027b9 <mount_volume+0xc8>
c00027f8:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027fb:	e8 61 f4 ff ff       	call   c0001c61 <ld_word>
c0002800:	0f b7 c0             	movzx  eax,ax
c0002803:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002807:	85 c0                	test   eax,eax
c0002809:	75 0c                	jne    c0002817 <mount_volume+0x126>
c000280b:	8d 45 78             	lea    eax,[ebp+0x78]
c000280e:	e8 5b f4 ff ff       	call   c0001c6e <ld_dword>
c0002813:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000281b:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000281e:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002821:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002825:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002828:	48                   	dec    eax
c0002829:	3c 01                	cmp    al,0x1
c000282b:	77 8c                	ja     c00027b9 <mount_volume+0xc8>
c000282d:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002831:	89 c3                	mov    ebx,eax
c0002833:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002837:	66 85 c0             	test   ax,ax
c000283a:	0f 84 79 ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002840:	8d 40 ff             	lea    eax,[eax-0x1]
c0002843:	85 d8                	test   eax,ebx
c0002845:	0f 85 6e ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000284b:	8d 45 65             	lea    eax,[ebp+0x65]
c000284e:	e8 0e f4 ff ff       	call   c0001c61 <ld_word>
c0002853:	89 c7                	mov    edi,eax
c0002855:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002859:	a8 0f                	test   al,0xf
c000285b:	0f 85 58 ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002861:	8d 45 67             	lea    eax,[ebp+0x67]
c0002864:	e8 f8 f3 ff ff       	call   c0001c61 <ld_word>
c0002869:	0f b7 f0             	movzx  esi,ax
c000286c:	85 f6                	test   esi,esi
c000286e:	75 0a                	jne    c000287a <mount_volume+0x189>
c0002870:	8d 45 74             	lea    eax,[ebp+0x74]
c0002873:	e8 f6 f3 ff ff       	call   c0001c6e <ld_dword>
c0002878:	89 c6                	mov    esi,eax
c000287a:	8d 45 62             	lea    eax,[ebp+0x62]
c000287d:	e8 df f3 ff ff       	call   c0001c61 <ld_word>
c0002882:	66 85 c0             	test   ax,ax
c0002885:	0f 84 2e ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c000288b:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002890:	0f b7 c8             	movzx  ecx,ax
c0002893:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002898:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000289c:	89 fa                	mov    edx,edi
c000289e:	66 c1 ea 04          	shr    dx,0x4
c00028a2:	0f b7 d2             	movzx  edx,dx
c00028a5:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00028a9:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00028ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00028b0:	39 c6                	cmp    esi,eax
c00028b2:	0f 82 01 ff ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028b8:	29 c6                	sub    esi,eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 f0                	mov    eax,esi
c00028be:	f7 f3                	div    ebx
c00028c0:	39 de                	cmp    esi,ebx
c00028c2:	0f 82 f1 fe ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028c8:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00028cd:	0f 87 e6 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c00028d3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00028d8:	0f 86 63 03 00 00    	jbe    c0002c41 <mount_volume+0x550>
c00028de:	bb 03 00 00 00       	mov    ebx,0x3
c00028e3:	8d 70 02             	lea    esi,[eax+0x2]
c00028e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028ee:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028f1:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028f4:	31 d2                	xor    edx,edx
c00028f6:	89 c8                	mov    eax,ecx
c00028f8:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028fb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028ff:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002903:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002907:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000290b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000290e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002911:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002915:	31 d2                	xor    edx,edx
c0002917:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000291b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000291f:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002922:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002925:	83 fb 03             	cmp    ebx,0x3
c0002928:	75 2b                	jne    c0002955 <mount_volume+0x264>
c000292a:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000292d:	e8 2f f3 ff ff       	call   c0001c61 <ld_word>
c0002932:	66 09 c7             	or     di,ax
c0002935:	0f 85 7e fe ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000293b:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002941:	c1 e6 02             	shl    esi,0x2
c0002944:	e8 25 f3 ff ff       	call   c0001c6e <ld_dword>
c0002949:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002950:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002953:	eb 30                	jmp    c0002985 <mount_volume+0x294>
c0002955:	66 85 ff             	test   di,di
c0002958:	0f 84 5b fe ff ff    	je     c00027b9 <mount_volume+0xc8>
c000295e:	31 d2                	xor    edx,edx
c0002960:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002964:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002968:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000296c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000296f:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002972:	83 fb 02             	cmp    ebx,0x2
c0002975:	75 04                	jne    c000297b <mount_volume+0x28a>
c0002977:	01 f6                	add    esi,esi
c0002979:	eb 0a                	jmp    c0002985 <mount_volume+0x294>
c000297b:	8d 04 76             	lea    eax,[esi+esi*2]
c000297e:	83 e6 01             	and    esi,0x1
c0002981:	d1 e8                	shr    eax,1
c0002983:	01 c6                	add    esi,eax
c0002985:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000298b:	c1 ee 09             	shr    esi,0x9
c000298e:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002992:	0f 87 21 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002998:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000299f:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029a6:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00029aa:	83 fb 03             	cmp    ebx,0x3
c00029ad:	75 7a                	jne    c0002a29 <mount_volume+0x338>
c00029af:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00029b5:	e8 a7 f2 ff ff       	call   c0001c61 <ld_word>
c00029ba:	66 48                	dec    ax
c00029bc:	75 6b                	jne    c0002a29 <mount_volume+0x338>
c00029be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00029c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029c6:	83 c2 01             	add    edx,0x1
c00029c9:	89 e8                	mov    eax,ebp
c00029cb:	83 d1 00             	adc    ecx,0x0
c00029ce:	e8 6c fa ff ff       	call   c000243f <move_window>
c00029d3:	85 c0                	test   eax,eax
c00029d5:	75 52                	jne    c0002a29 <mount_volume+0x338>
c00029d7:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029db:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029e1:	e8 7b f2 ff ff       	call   c0001c61 <ld_word>
c00029e6:	66 3d 55 aa          	cmp    ax,0xaa55
c00029ea:	75 3d                	jne    c0002a29 <mount_volume+0x338>
c00029ec:	8d 45 54             	lea    eax,[ebp+0x54]
c00029ef:	e8 7a f2 ff ff       	call   c0001c6e <ld_dword>
c00029f4:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029f9:	75 2e                	jne    c0002a29 <mount_volume+0x338>
c00029fb:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c0002a01:	e8 68 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a06:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002a0b:	75 1c                	jne    c0002a29 <mount_volume+0x338>
c0002a0d:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002a13:	e8 56 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a18:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002a1b:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002a21:	e8 48 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a26:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002a29:	66 a1 c0 e1 02 c0    	mov    ax,ds:0xc002e1c0
c0002a2f:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002a32:	40                   	inc    eax
c0002a33:	31 db                	xor    ebx,ebx
c0002a35:	66 a3 c0 e1 02 c0    	mov    ds:0xc002e1c0,ax
c0002a3b:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a3f:	e9 0c 02 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c0002a44:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a4a:	e8 12 f2 ff ff       	call   c0001c61 <ld_word>
c0002a4f:	66 3d 00 01          	cmp    ax,0x100
c0002a53:	0f 85 60 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a59:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a60:	0f 85 53 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a66:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a6c:	e8 15 f2 ff ff       	call   c0001c86 <ld_qword>
c0002a71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a79:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a7f:	e8 ea f1 ff ff       	call   c0001c6e <ld_dword>
c0002a84:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a87:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a8d:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a90:	fe c8                	dec    al
c0002a92:	0f 85 21 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a98:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a9f:	bb 01 00 00 00       	mov    ebx,0x1
c0002aa4:	d3 e3                	shl    ebx,cl
c0002aa6:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002aaa:	66 85 db             	test   bx,bx
c0002aad:	0f 84 06 fd ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002ab3:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002ab9:	e8 b0 f1 ff ff       	call   c0001c6e <ld_dword>
c0002abe:	89 c6                	mov    esi,eax
c0002ac0:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002ac5:	0f 87 ee fc ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002acb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002acf:	8d 40 02             	lea    eax,[eax+0x2]
c0002ad2:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002ad5:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002ad8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002adc:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002adf:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002ae5:	e8 84 f1 ff ff       	call   c0001c6e <ld_dword>
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002af0:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002af4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002af8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002afc:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002aff:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002b02:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002b08:	e8 61 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b0d:	31 d2                	xor    edx,edx
c0002b0f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b13:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b17:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002b1b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002b1e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002b21:	0f b7 c3             	movzx  eax,bx
c0002b24:	31 d2                	xor    edx,edx
c0002b26:	0f af f0             	imul   esi,eax
c0002b29:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002b2d:	89 f0                	mov    eax,esi
c0002b2f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002b33:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002b37:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b3b:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b3f:	39 c1                	cmp    ecx,eax
c0002b41:	89 df                	mov    edi,ebx
c0002b43:	19 d7                	sbb    edi,edx
c0002b45:	0f 82 6e fc ff ff    	jb     c00027b9 <mount_volume+0xc8>
c0002b4b:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b51:	31 db                	xor    ebx,ebx
c0002b53:	e8 16 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b58:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b5f:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b62:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b6a:	85 db                	test   ebx,ebx
c0002b6c:	75 39                	jne    c0002ba7 <mount_volume+0x4b6>
c0002b6e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b72:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b76:	0f 86 3d fc ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002b7c:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b7f:	31 ff                	xor    edi,edi
c0002b81:	89 e8                	mov    eax,ebp
c0002b83:	e8 72 f3 ff ff       	call   c0001efa <clst2sect>
c0002b88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b8c:	01 c6                	add    esi,eax
c0002b8e:	89 e8                	mov    eax,ebp
c0002b90:	11 d7                	adc    edi,edx
c0002b92:	89 f2                	mov    edx,esi
c0002b94:	89 f9                	mov    ecx,edi
c0002b96:	e8 a4 f8 ff ff       	call   c000243f <move_window>
c0002b9b:	85 c0                	test   eax,eax
c0002b9d:	0f 85 07 fc ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002ba3:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002ba7:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002bac:	74 0b                	je     c0002bb9 <mount_volume+0x4c8>
c0002bae:	83 c3 20             	add    ebx,0x20
c0002bb1:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002bb7:	eb b1                	jmp    c0002b6a <mount_volume+0x479>
c0002bb9:	8d 75 54             	lea    esi,[ebp+0x54]
c0002bbc:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002bc0:	e8 a9 f0 ff ff       	call   c0001c6e <ld_dword>
c0002bc5:	89 c3                	mov    ebx,eax
c0002bc7:	83 f8 01             	cmp    eax,0x1
c0002bca:	0f 86 e9 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd0:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002bd3:	0f 86 e0 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd9:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002bdc:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002be0:	0f af c2             	imul   eax,edx
c0002be3:	31 d2                	xor    edx,edx
c0002be5:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002be8:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002beb:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bee:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bf1:	31 c9                	xor    ecx,ecx
c0002bf3:	89 da                	mov    edx,ebx
c0002bf5:	89 e8                	mov    eax,ebp
c0002bf7:	c1 ea 07             	shr    edx,0x7
c0002bfa:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bfd:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002c00:	e8 3a f8 ff ff       	call   c000243f <move_window>
c0002c05:	85 c0                	test   eax,eax
c0002c07:	0f 85 9d fb ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002c0d:	89 d8                	mov    eax,ebx
c0002c0f:	83 e0 7f             	and    eax,0x7f
c0002c12:	8d 04 86             	lea    eax,[esi+eax*4]
c0002c15:	e8 54 f0 ff ff       	call   c0001c6e <ld_dword>
c0002c1a:	83 f8 ff             	cmp    eax,0xffffffff
c0002c1d:	74 0a                	je     c0002c29 <mount_volume+0x538>
c0002c1f:	43                   	inc    ebx
c0002c20:	39 d8                	cmp    eax,ebx
c0002c22:	74 cd                	je     c0002bf1 <mount_volume+0x500>
c0002c24:	e9 90 fb ff ff       	jmp    c00027b9 <mount_volume+0xc8>
c0002c29:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002c30:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002c37:	bb 04 00 00 00       	mov    ebx,0x4
c0002c3c:	e9 e8 fd ff ff       	jmp    c0002a29 <mount_volume+0x338>
c0002c41:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c46:	19 db                	sbb    ebx,ebx
c0002c48:	83 c3 02             	add    ebx,0x2
c0002c4b:	e9 93 fc ff ff       	jmp    c00028e3 <mount_volume+0x1f2>
c0002c50:	83 c4 3c             	add    esp,0x3c
c0002c53:	89 d8                	mov    eax,ebx
c0002c55:	5b                   	pop    ebx
c0002c56:	5e                   	pop    esi
c0002c57:	5f                   	pop    edi
c0002c58:	5d                   	pop    ebp
c0002c59:	c3                   	ret    

c0002c5a <find_bitmap>:
c0002c5a:	55                   	push   ebp
c0002c5b:	57                   	push   edi
c0002c5c:	89 c7                	mov    edi,eax
c0002c5e:	56                   	push   esi
c0002c5f:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c62:	53                   	push   ebx
c0002c63:	83 ec 1c             	sub    esp,0x1c
c0002c66:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c69:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c6d:	83 e8 02             	sub    eax,0x2
c0002c70:	39 f0                	cmp    eax,esi
c0002c72:	77 02                	ja     c0002c76 <find_bitmap+0x1c>
c0002c74:	31 f6                	xor    esi,esi
c0002c76:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c7a:	89 f3                	mov    ebx,esi
c0002c7c:	31 ed                	xor    ebp,ebp
c0002c7e:	31 c9                	xor    ecx,ecx
c0002c80:	89 da                	mov    edx,ebx
c0002c82:	89 f8                	mov    eax,edi
c0002c84:	c1 ea 0c             	shr    edx,0xc
c0002c87:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c8a:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c8d:	e8 ad f7 ff ff       	call   c000243f <move_window>
c0002c92:	85 c0                	test   eax,eax
c0002c94:	75 68                	jne    c0002cfe <find_bitmap+0xa4>
c0002c96:	89 da                	mov    edx,ebx
c0002c98:	89 d9                	mov    ecx,ebx
c0002c9a:	c1 ea 03             	shr    edx,0x3
c0002c9d:	83 e1 07             	and    ecx,0x7
c0002ca0:	b8 01 00 00 00       	mov    eax,0x1
c0002ca5:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002cab:	d3 e0                	shl    eax,cl
c0002cad:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002cb0:	83 e9 02             	sub    ecx,0x2
c0002cb3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002cb7:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002cbb:	43                   	inc    ebx
c0002cbc:	21 c1                	and    ecx,eax
c0002cbe:	d1 e0                	shl    eax,1
c0002cc0:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002cc4:	77 09                	ja     c0002ccf <find_bitmap+0x75>
c0002cc6:	31 db                	xor    ebx,ebx
c0002cc8:	ba 00 02 00 00       	mov    edx,0x200
c0002ccd:	31 c0                	xor    eax,eax
c0002ccf:	84 c9                	test   cl,cl
c0002cd1:	75 10                	jne    c0002ce3 <find_bitmap+0x89>
c0002cd3:	45                   	inc    ebp
c0002cd4:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002cd8:	75 0f                	jne    c0002ce9 <find_bitmap+0x8f>
c0002cda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002cde:	83 c0 02             	add    eax,0x2
c0002ce1:	eb 22                	jmp    c0002d05 <find_bitmap+0xab>
c0002ce3:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002ce7:	31 ed                	xor    ebp,ebp
c0002ce9:	39 de                	cmp    esi,ebx
c0002ceb:	74 16                	je     c0002d03 <find_bitmap+0xa9>
c0002ced:	84 c0                	test   al,al
c0002cef:	75 c6                	jne    c0002cb7 <find_bitmap+0x5d>
c0002cf1:	42                   	inc    edx
c0002cf2:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cf8:	77 84                	ja     c0002c7e <find_bitmap+0x24>
c0002cfa:	b0 01                	mov    al,0x1
c0002cfc:	eb b9                	jmp    c0002cb7 <find_bitmap+0x5d>
c0002cfe:	83 c8 ff             	or     eax,0xffffffff
c0002d01:	eb 02                	jmp    c0002d05 <find_bitmap+0xab>
c0002d03:	31 c0                	xor    eax,eax
c0002d05:	83 c4 1c             	add    esp,0x1c
c0002d08:	5b                   	pop    ebx
c0002d09:	5e                   	pop    esi
c0002d0a:	5f                   	pop    edi
c0002d0b:	5d                   	pop    ebp
c0002d0c:	c3                   	ret    

c0002d0d <change_bitmap>:
c0002d0d:	55                   	push   ebp
c0002d0e:	89 cd                	mov    ebp,ecx
c0002d10:	57                   	push   edi
c0002d11:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002d14:	56                   	push   esi
c0002d15:	89 c7                	mov    edi,eax
c0002d17:	53                   	push   ebx
c0002d18:	89 c8                	mov    eax,ecx
c0002d1a:	83 ec 1c             	sub    esp,0x1c
c0002d1d:	31 d2                	xor    edx,edx
c0002d1f:	89 ce                	mov    esi,ecx
c0002d21:	c1 e8 0c             	shr    eax,0xc
c0002d24:	bb 01 00 00 00       	mov    ebx,0x1
c0002d29:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002d2c:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002d2f:	c1 ee 03             	shr    esi,0x3
c0002d32:	83 e1 07             	and    ecx,0x7
c0002d35:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d3b:	d3 e3                	shl    ebx,cl
c0002d3d:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d41:	89 c1                	mov    ecx,eax
c0002d43:	89 d3                	mov    ebx,edx
c0002d45:	83 c1 01             	add    ecx,0x1
c0002d48:	83 d3 00             	adc    ebx,0x0
c0002d4b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d4f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d53:	89 d1                	mov    ecx,edx
c0002d55:	89 c2                	mov    edx,eax
c0002d57:	89 f8                	mov    eax,edi
c0002d59:	e8 e1 f6 ff ff       	call   c000243f <move_window>
c0002d5e:	89 c1                	mov    ecx,eax
c0002d60:	85 c0                	test   eax,eax
c0002d62:	75 48                	jne    c0002dac <change_bitmap+0x9f>
c0002d64:	31 d2                	xor    edx,edx
c0002d66:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d6a:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d6e:	0f 95 c2             	setne  dl
c0002d71:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d75:	74 3c                	je     c0002db3 <change_bitmap+0xa6>
c0002d77:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d7b:	4d                   	dec    ebp
c0002d7c:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d80:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d84:	74 32                	je     c0002db8 <change_bitmap+0xab>
c0002d86:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d8a:	75 d8                	jne    c0002d64 <change_bitmap+0x57>
c0002d8c:	8d 46 01             	lea    eax,[esi+0x1]
c0002d8f:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d94:	89 c3                	mov    ebx,eax
c0002d96:	31 f6                	xor    esi,esi
c0002d98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d9c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002da0:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002da6:	74 99                	je     c0002d41 <change_bitmap+0x34>
c0002da8:	89 de                	mov    esi,ebx
c0002daa:	eb b8                	jmp    c0002d64 <change_bitmap+0x57>
c0002dac:	b9 01 00 00 00       	mov    ecx,0x1
c0002db1:	eb 05                	jmp    c0002db8 <change_bitmap+0xab>
c0002db3:	b9 02 00 00 00       	mov    ecx,0x2
c0002db8:	83 c4 1c             	add    esp,0x1c
c0002dbb:	89 c8                	mov    eax,ecx
c0002dbd:	5b                   	pop    ebx
c0002dbe:	5e                   	pop    esi
c0002dbf:	5f                   	pop    edi
c0002dc0:	5d                   	pop    ebp
c0002dc1:	c3                   	ret    

c0002dc2 <put_fat>:
c0002dc2:	83 fa 01             	cmp    edx,0x1
c0002dc5:	0f 86 7b 01 00 00    	jbe    c0002f46 <put_fat+0x184>
c0002dcb:	55                   	push   ebp
c0002dcc:	57                   	push   edi
c0002dcd:	89 cf                	mov    edi,ecx
c0002dcf:	56                   	push   esi
c0002dd0:	b9 02 00 00 00       	mov    ecx,0x2
c0002dd5:	53                   	push   ebx
c0002dd6:	89 c6                	mov    esi,eax
c0002dd8:	83 ec 1c             	sub    esp,0x1c
c0002ddb:	89 d3                	mov    ebx,edx
c0002ddd:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002de0:	0f 86 68 01 00 00    	jbe    c0002f4e <put_fat+0x18c>
c0002de6:	8a 00                	mov    al,BYTE PTR [eax]
c0002de8:	3c 02                	cmp    al,0x2
c0002dea:	0f 84 c7 00 00 00    	je     c0002eb7 <put_fat+0xf5>
c0002df0:	77 09                	ja     c0002dfb <put_fat+0x39>
c0002df2:	fe c8                	dec    al
c0002df4:	74 17                	je     c0002e0d <put_fat+0x4b>
c0002df6:	e9 53 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002dfb:	b9 02 00 00 00       	mov    ecx,0x2
c0002e00:	3c 04                	cmp    al,0x4
c0002e02:	0f 86 e1 00 00 00    	jbe    c0002ee9 <put_fat+0x127>
c0002e08:	e9 41 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002e0d:	89 d5                	mov    ebp,edx
c0002e0f:	31 c9                	xor    ecx,ecx
c0002e11:	d1 ed                	shr    ebp,1
c0002e13:	89 f0                	mov    eax,esi
c0002e15:	01 d5                	add    ebp,edx
c0002e17:	89 ea                	mov    edx,ebp
c0002e19:	c1 ea 09             	shr    edx,0x9
c0002e1c:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e1f:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e22:	e8 18 f6 ff ff       	call   c000243f <move_window>
c0002e27:	89 c1                	mov    ecx,eax
c0002e29:	85 c0                	test   eax,eax
c0002e2b:	0f 85 1d 01 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e31:	8d 46 54             	lea    eax,[esi+0x54]
c0002e34:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e38:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e3b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e45:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e49:	89 f8                	mov    eax,edi
c0002e4b:	83 e3 01             	and    ebx,0x1
c0002e4e:	74 0d                	je     c0002e5d <put_fat+0x9b>
c0002e50:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e53:	89 fa                	mov    edx,edi
c0002e55:	83 e0 0f             	and    eax,0xf
c0002e58:	c1 e2 04             	shl    edx,0x4
c0002e5b:	09 d0                	or     eax,edx
c0002e5d:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e64:	31 c9                	xor    ecx,ecx
c0002e66:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e6a:	c1 ea 09             	shr    edx,0x9
c0002e6d:	89 f0                	mov    eax,esi
c0002e6f:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e72:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e75:	e8 c5 f5 ff ff       	call   c000243f <move_window>
c0002e7a:	89 c1                	mov    ecx,eax
c0002e7c:	85 c0                	test   eax,eax
c0002e7e:	0f 85 ca 00 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e84:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e88:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e8e:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e92:	85 db                	test   ebx,ebx
c0002e94:	74 07                	je     c0002e9d <put_fat+0xdb>
c0002e96:	c1 ef 04             	shr    edi,0x4
c0002e99:	89 fa                	mov    edx,edi
c0002e9b:	eb 0e                	jmp    c0002eab <put_fat+0xe9>
c0002e9d:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002ea0:	c1 ef 08             	shr    edi,0x8
c0002ea3:	83 e2 f0             	and    edx,0xfffffff0
c0002ea6:	83 e7 0f             	and    edi,0xf
c0002ea9:	09 fa                	or     edx,edi
c0002eab:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002eae:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002eb2:	e9 97 00 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002eb7:	31 c9                	xor    ecx,ecx
c0002eb9:	c1 ea 08             	shr    edx,0x8
c0002ebc:	89 f0                	mov    eax,esi
c0002ebe:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ec1:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ec4:	e8 76 f5 ff ff       	call   c000243f <move_window>
c0002ec9:	89 c1                	mov    ecx,eax
c0002ecb:	85 c0                	test   eax,eax
c0002ecd:	75 7f                	jne    c0002f4e <put_fat+0x18c>
c0002ecf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ed3:	01 db                	add    ebx,ebx
c0002ed5:	0f b7 d7             	movzx  edx,di
c0002ed8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ede:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ee2:	e8 ec ed ff ff       	call   c0001cd3 <st_word>
c0002ee7:	eb 53                	jmp    c0002f3c <put_fat+0x17a>
c0002ee9:	31 c9                	xor    ecx,ecx
c0002eeb:	c1 ea 07             	shr    edx,0x7
c0002eee:	89 f0                	mov    eax,esi
c0002ef0:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ef3:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ef6:	e8 44 f5 ff ff       	call   c000243f <move_window>
c0002efb:	89 c1                	mov    ecx,eax
c0002efd:	85 c0                	test   eax,eax
c0002eff:	75 4d                	jne    c0002f4e <put_fat+0x18c>
c0002f01:	c1 e3 02             	shl    ebx,0x2
c0002f04:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002f0a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002f0d:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002f11:	74 1c                	je     c0002f2f <put_fat+0x16d>
c0002f13:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002f17:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002f1d:	89 d8                	mov    eax,ebx
c0002f1f:	e8 4a ed ff ff       	call   c0001c6e <ld_dword>
c0002f24:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f28:	25 00 00 00 f0       	and    eax,0xf0000000
c0002f2d:	09 c7                	or     edi,eax
c0002f2f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f33:	89 fa                	mov    edx,edi
c0002f35:	89 d8                	mov    eax,ebx
c0002f37:	e8 9b ed ff ff       	call   c0001cd7 <st_dword>
c0002f3c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f40:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f44:	eb 08                	jmp    c0002f4e <put_fat+0x18c>
c0002f46:	b9 02 00 00 00       	mov    ecx,0x2
c0002f4b:	89 c8                	mov    eax,ecx
c0002f4d:	c3                   	ret    
c0002f4e:	83 c4 1c             	add    esp,0x1c
c0002f51:	89 c8                	mov    eax,ecx
c0002f53:	5b                   	pop    ebx
c0002f54:	5e                   	pop    esi
c0002f55:	5f                   	pop    edi
c0002f56:	5d                   	pop    ebp
c0002f57:	c3                   	ret    

c0002f58 <fill_last_frag>:
c0002f58:	57                   	push   edi
c0002f59:	89 cf                	mov    edi,ecx
c0002f5b:	56                   	push   esi
c0002f5c:	89 d6                	mov    esi,edx
c0002f5e:	53                   	push   ebx
c0002f5f:	89 c3                	mov    ebx,eax
c0002f61:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f64:	85 c0                	test   eax,eax
c0002f66:	74 21                	je     c0002f89 <fill_last_frag+0x31>
c0002f68:	89 f9                	mov    ecx,edi
c0002f6a:	83 f8 01             	cmp    eax,0x1
c0002f6d:	76 05                	jbe    c0002f74 <fill_last_frag+0x1c>
c0002f6f:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f72:	29 c1                	sub    ecx,eax
c0002f74:	8d 56 01             	lea    edx,[esi+0x1]
c0002f77:	29 c2                	sub    edx,eax
c0002f79:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f7b:	e8 42 fe ff ff       	call   c0002dc2 <put_fat>
c0002f80:	85 c0                	test   eax,eax
c0002f82:	75 05                	jne    c0002f89 <fill_last_frag+0x31>
c0002f84:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f87:	eb d8                	jmp    c0002f61 <fill_last_frag+0x9>
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <fill_first_frag>:
c0002f8d:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f91:	75 2d                	jne    c0002fc0 <fill_first_frag+0x33>
c0002f93:	57                   	push   edi
c0002f94:	56                   	push   esi
c0002f95:	53                   	push   ebx
c0002f96:	89 c3                	mov    ebx,eax
c0002f98:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f9b:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f9e:	01 d7                	add    edi,edx
c0002fa0:	39 fa                	cmp    edx,edi
c0002fa2:	74 14                	je     c0002fb8 <fill_first_frag+0x2b>
c0002fa4:	8d 72 01             	lea    esi,[edx+0x1]
c0002fa7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002fa9:	89 f1                	mov    ecx,esi
c0002fab:	e8 12 fe ff ff       	call   c0002dc2 <put_fat>
c0002fb0:	89 f2                	mov    edx,esi
c0002fb2:	85 c0                	test   eax,eax
c0002fb4:	74 ea                	je     c0002fa0 <fill_first_frag+0x13>
c0002fb6:	eb 0b                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fb8:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fbc:	31 c0                	xor    eax,eax
c0002fbe:	eb 03                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fc0:	31 c0                	xor    eax,eax
c0002fc2:	c3                   	ret    
c0002fc3:	5b                   	pop    ebx
c0002fc4:	5e                   	pop    esi
c0002fc5:	5f                   	pop    edi
c0002fc6:	c3                   	ret    

c0002fc7 <get_fat>:
c0002fc7:	83 fa 01             	cmp    edx,0x1
c0002fca:	0f 86 db 01 00 00    	jbe    c00031ab <get_fat+0x1e4>
c0002fd0:	55                   	push   ebp
c0002fd1:	b9 01 00 00 00       	mov    ecx,0x1
c0002fd6:	57                   	push   edi
c0002fd7:	56                   	push   esi
c0002fd8:	53                   	push   ebx
c0002fd9:	83 ec 1c             	sub    esp,0x1c
c0002fdc:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fde:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fe1:	0f 86 cc 01 00 00    	jbe    c00031b3 <get_fat+0x1ec>
c0002fe7:	89 c3                	mov    ebx,eax
c0002fe9:	89 d6                	mov    esi,edx
c0002feb:	8a 07                	mov    al,BYTE PTR [edi]
c0002fed:	3c 02                	cmp    al,0x2
c0002fef:	0f 84 99 00 00 00    	je     c000308e <get_fat+0xc7>
c0002ff5:	77 09                	ja     c0003000 <get_fat+0x39>
c0002ff7:	fe c8                	dec    al
c0002ff9:	74 1a                	je     c0003015 <get_fat+0x4e>
c0002ffb:	e9 b3 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003000:	3c 03                	cmp    al,0x3
c0003002:	0f 84 b5 00 00 00    	je     c00030bd <get_fat+0xf6>
c0003008:	3c 04                	cmp    al,0x4
c000300a:	0f 84 e3 00 00 00    	je     c00030f3 <get_fat+0x12c>
c0003010:	e9 9e 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003015:	89 d3                	mov    ebx,edx
c0003017:	31 c9                	xor    ecx,ecx
c0003019:	d1 eb                	shr    ebx,1
c000301b:	89 f8                	mov    eax,edi
c000301d:	01 d3                	add    ebx,edx
c000301f:	89 da                	mov    edx,ebx
c0003021:	c1 ea 09             	shr    edx,0x9
c0003024:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003027:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000302a:	e8 10 f4 ff ff       	call   c000243f <move_window>
c000302f:	85 c0                	test   eax,eax
c0003031:	74 08                	je     c000303b <get_fat+0x74>
c0003033:	83 c9 ff             	or     ecx,0xffffffff
c0003036:	e9 78 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000303b:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000303e:	31 c9                	xor    ecx,ecx
c0003040:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003046:	89 ea                	mov    edx,ebp
c0003048:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c000304c:	c1 ea 09             	shr    edx,0x9
c000304f:	89 f8                	mov    eax,edi
c0003051:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003054:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003057:	e8 e3 f3 ff ff       	call   c000243f <move_window>
c000305c:	85 c0                	test   eax,eax
c000305e:	75 d3                	jne    c0003033 <get_fat+0x6c>
c0003060:	0f b6 c3             	movzx  eax,bl
c0003063:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003069:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c000306e:	c1 e3 08             	shl    ebx,0x8
c0003071:	09 c3                	or     ebx,eax
c0003073:	89 d9                	mov    ecx,ebx
c0003075:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000307b:	83 e6 01             	and    esi,0x1
c000307e:	0f 84 2f 01 00 00    	je     c00031b3 <get_fat+0x1ec>
c0003084:	89 d9                	mov    ecx,ebx
c0003086:	c1 e9 04             	shr    ecx,0x4
c0003089:	e9 25 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000308e:	31 c9                	xor    ecx,ecx
c0003090:	c1 ea 08             	shr    edx,0x8
c0003093:	89 f8                	mov    eax,edi
c0003095:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003098:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000309b:	e8 9f f3 ff ff       	call   c000243f <move_window>
c00030a0:	85 c0                	test   eax,eax
c00030a2:	75 8f                	jne    c0003033 <get_fat+0x6c>
c00030a4:	01 f6                	add    esi,esi
c00030a6:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00030ac:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030b0:	e8 ac eb ff ff       	call   c0001c61 <ld_word>
c00030b5:	0f b7 c8             	movzx  ecx,ax
c00030b8:	e9 f6 00 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c00030bd:	31 c9                	xor    ecx,ecx
c00030bf:	c1 ea 07             	shr    edx,0x7
c00030c2:	89 f8                	mov    eax,edi
c00030c4:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030c7:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030ca:	e8 70 f3 ff ff       	call   c000243f <move_window>
c00030cf:	85 c0                	test   eax,eax
c00030d1:	0f 85 5c ff ff ff    	jne    c0003033 <get_fat+0x6c>
c00030d7:	c1 e6 02             	shl    esi,0x2
c00030da:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030e0:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030e4:	e8 85 eb ff ff       	call   c0001c6e <ld_dword>
c00030e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030ee:	e9 b4 00 00 00       	jmp    c00031a7 <get_fat+0x1e0>
c00030f3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030f6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030f9:	89 d1                	mov    ecx,edx
c00030fb:	09 c1                	or     ecx,eax
c00030fd:	74 06                	je     c0003105 <get_fat+0x13e>
c00030ff:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0003103:	75 0f                	jne    c0003114 <get_fat+0x14d>
c0003105:	b9 01 00 00 00       	mov    ecx,0x1
c000310a:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c000310e:	0f 85 9f 00 00 00    	jne    c00031b3 <get_fat+0x1ec>
c0003114:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003118:	89 f5                	mov    ebp,esi
c000311a:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c000311f:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0003122:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0003125:	80 f9 02             	cmp    cl,0x2
c0003128:	75 35                	jne    c000315f <get_fat+0x198>
c000312a:	83 c0 ff             	add    eax,0xffffffff
c000312d:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0003132:	83 d2 ff             	adc    edx,0xffffffff
c0003135:	31 db                	xor    ebx,ebx
c0003137:	0f ac d0 09          	shrd   eax,edx,0x9
c000313b:	53                   	push   ebx
c000313c:	c1 ea 09             	shr    edx,0x9
c000313f:	51                   	push   ecx
c0003140:	52                   	push   edx
c0003141:	50                   	push   eax
c0003142:	e8 35 37 02 00       	call   c002687c <__udivdi3>
c0003147:	83 c4 10             	add    esp,0x10
c000314a:	b9 01 00 00 00       	mov    ecx,0x1
c000314f:	39 c5                	cmp    ebp,eax
c0003151:	77 60                	ja     c00031b3 <get_fat+0x1ec>
c0003153:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003158:	74 59                	je     c00031b3 <get_fat+0x1ec>
c000315a:	8d 4e 01             	lea    ecx,[esi+0x1]
c000315d:	eb 54                	jmp    c00031b3 <get_fat+0x1ec>
c000315f:	80 f9 03             	cmp    cl,0x3
c0003162:	75 05                	jne    c0003169 <get_fat+0x1a2>
c0003164:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003167:	77 f1                	ja     c000315a <get_fat+0x193>
c0003169:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000316e:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003172:	75 3f                	jne    c00031b3 <get_fat+0x1ec>
c0003174:	31 c9                	xor    ecx,ecx
c0003176:	89 f2                	mov    edx,esi
c0003178:	89 f8                	mov    eax,edi
c000317a:	c1 ea 07             	shr    edx,0x7
c000317d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003180:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003183:	e8 b7 f2 ff ff       	call   c000243f <move_window>
c0003188:	85 c0                	test   eax,eax
c000318a:	0f 85 a3 fe ff ff    	jne    c0003033 <get_fat+0x6c>
c0003190:	c1 e6 02             	shl    esi,0x2
c0003193:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003199:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000319d:	e8 cc ea ff ff       	call   c0001c6e <ld_dword>
c00031a2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00031a7:	89 c1                	mov    ecx,eax
c00031a9:	eb 08                	jmp    c00031b3 <get_fat+0x1ec>
c00031ab:	b9 01 00 00 00       	mov    ecx,0x1
c00031b0:	89 c8                	mov    eax,ecx
c00031b2:	c3                   	ret    
c00031b3:	83 c4 1c             	add    esp,0x1c
c00031b6:	89 c8                	mov    eax,ecx
c00031b8:	5b                   	pop    ebx
c00031b9:	5e                   	pop    esi
c00031ba:	5f                   	pop    edi
c00031bb:	5d                   	pop    ebp
c00031bc:	c3                   	ret    

c00031bd <dir_sdi>:
c00031bd:	55                   	push   ebp
c00031be:	57                   	push   edi
c00031bf:	56                   	push   esi
c00031c0:	53                   	push   ebx
c00031c1:	89 c3                	mov    ebx,eax
c00031c3:	83 ec 1c             	sub    esp,0x1c
c00031c6:	8b 38                	mov    edi,DWORD PTR [eax]
c00031c8:	31 c0                	xor    eax,eax
c00031ca:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00031cd:	0f 94 c0             	sete   al
c00031d0:	48                   	dec    eax
c00031d1:	25 00 00 20 f0       	and    eax,0xf0200000
c00031d6:	05 00 00 00 10       	add    eax,0x10000000
c00031db:	39 d0                	cmp    eax,edx
c00031dd:	77 0a                	ja     c00031e9 <dir_sdi+0x2c>
c00031df:	b8 02 00 00 00       	mov    eax,0x2
c00031e4:	e9 c4 00 00 00       	jmp    c00032ad <dir_sdi+0xf0>
c00031e9:	89 d6                	mov    esi,edx
c00031eb:	f6 c2 1f             	test   dl,0x1f
c00031ee:	75 ef                	jne    c00031df <dir_sdi+0x22>
c00031f0:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031f3:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031f6:	85 c9                	test   ecx,ecx
c00031f8:	75 2d                	jne    c0003227 <dir_sdi+0x6a>
c00031fa:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031fd:	77 1b                	ja     c000321a <dir_sdi+0x5d>
c00031ff:	89 f2                	mov    edx,esi
c0003201:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003205:	c1 ea 05             	shr    edx,0x5
c0003208:	39 c2                	cmp    edx,eax
c000320a:	73 d3                	jae    c00031df <dir_sdi+0x22>
c000320c:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000320f:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0003212:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003215:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003218:	eb 4b                	jmp    c0003265 <dir_sdi+0xa8>
c000321a:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000321d:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003221:	85 c0                	test   eax,eax
c0003223:	74 da                	je     c00031ff <dir_sdi+0x42>
c0003225:	89 c1                	mov    ecx,eax
c0003227:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000322b:	c1 e5 09             	shl    ebp,0x9
c000322e:	89 ca                	mov    edx,ecx
c0003230:	39 ee                	cmp    esi,ebp
c0003232:	72 1c                	jb     c0003250 <dir_sdi+0x93>
c0003234:	89 d8                	mov    eax,ebx
c0003236:	e8 8c fd ff ff       	call   c0002fc7 <get_fat>
c000323b:	89 c1                	mov    ecx,eax
c000323d:	83 f8 ff             	cmp    eax,0xffffffff
c0003240:	74 66                	je     c00032a8 <dir_sdi+0xeb>
c0003242:	83 f8 01             	cmp    eax,0x1
c0003245:	76 98                	jbe    c00031df <dir_sdi+0x22>
c0003247:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c000324a:	76 93                	jbe    c00031df <dir_sdi+0x22>
c000324c:	29 ee                	sub    esi,ebp
c000324e:	eb de                	jmp    c000322e <dir_sdi+0x71>
c0003250:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003254:	89 f8                	mov    eax,edi
c0003256:	e8 9f ec ff ff       	call   c0001efa <clst2sect>
c000325b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000325f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003262:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003265:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003268:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000326b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000326e:	89 d1                	mov    ecx,edx
c0003270:	09 c1                	or     ecx,eax
c0003272:	0f 84 67 ff ff ff    	je     c00031df <dir_sdi+0x22>
c0003278:	89 f1                	mov    ecx,esi
c000327a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003282:	c1 e9 09             	shr    ecx,0x9
c0003285:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003289:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000328d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003291:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003294:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000329a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000329d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00032a1:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00032a4:	31 c0                	xor    eax,eax
c00032a6:	eb 05                	jmp    c00032ad <dir_sdi+0xf0>
c00032a8:	b8 01 00 00 00       	mov    eax,0x1
c00032ad:	83 c4 1c             	add    esp,0x1c
c00032b0:	5b                   	pop    ebx
c00032b1:	5e                   	pop    esi
c00032b2:	5f                   	pop    edi
c00032b3:	5d                   	pop    ebp
c00032b4:	c3                   	ret    

c00032b5 <create_chain>:
c00032b5:	55                   	push   ebp
c00032b6:	89 c5                	mov    ebp,eax
c00032b8:	57                   	push   edi
c00032b9:	56                   	push   esi
c00032ba:	53                   	push   ebx
c00032bb:	83 ec 1c             	sub    esp,0x1c
c00032be:	85 d2                	test   edx,edx
c00032c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00032c4:	8b 30                	mov    esi,DWORD PTR [eax]
c00032c6:	75 0e                	jne    c00032d6 <create_chain+0x21>
c00032c8:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00032cb:	85 ff                	test   edi,edi
c00032cd:	74 39                	je     c0003308 <create_chain+0x53>
c00032cf:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00032d2:	77 39                	ja     c000330d <create_chain+0x58>
c00032d4:	eb 32                	jmp    c0003308 <create_chain+0x53>
c00032d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032da:	e8 e8 fc ff ff       	call   c0002fc7 <get_fat>
c00032df:	89 c3                	mov    ebx,eax
c00032e1:	83 f8 01             	cmp    eax,0x1
c00032e4:	77 0a                	ja     c00032f0 <create_chain+0x3b>
c00032e6:	bb 01 00 00 00       	mov    ebx,0x1
c00032eb:	e9 ba 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c00032f0:	83 f8 ff             	cmp    eax,0xffffffff
c00032f3:	0f 84 62 01 00 00    	je     c000345b <create_chain+0x1a6>
c00032f9:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032fc:	0f 87 a8 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c0003302:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003306:	eb 05                	jmp    c000330d <create_chain+0x58>
c0003308:	bf 01 00 00 00       	mov    edi,0x1
c000330d:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c0003311:	75 07                	jne    c000331a <create_chain+0x65>
c0003313:	31 db                	xor    ebx,ebx
c0003315:	e9 90 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c000331a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000331d:	75 74                	jne    c0003393 <create_chain+0xde>
c000331f:	b9 01 00 00 00       	mov    ecx,0x1
c0003324:	89 fa                	mov    edx,edi
c0003326:	89 f0                	mov    eax,esi
c0003328:	e8 2d f9 ff ff       	call   c0002c5a <find_bitmap>
c000332d:	89 c3                	mov    ebx,eax
c000332f:	8d 40 ff             	lea    eax,[eax-0x1]
c0003332:	83 f8 fd             	cmp    eax,0xfffffffd
c0003335:	0f 87 6f 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c000333b:	83 ec 0c             	sub    esp,0xc
c000333e:	b9 01 00 00 00       	mov    ecx,0x1
c0003343:	6a 01                	push   0x1
c0003345:	89 da                	mov    edx,ebx
c0003347:	89 f0                	mov    eax,esi
c0003349:	e8 bf f9 ff ff       	call   c0002d0d <change_bitmap>
c000334e:	83 c4 10             	add    esp,0x10
c0003351:	83 f8 02             	cmp    eax,0x2
c0003354:	74 90                	je     c00032e6 <create_chain+0x31>
c0003356:	83 f8 01             	cmp    eax,0x1
c0003359:	0f 84 fc 00 00 00    	je     c000345b <create_chain+0x1a6>
c000335f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003364:	75 09                	jne    c000336f <create_chain+0xba>
c0003366:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000336a:	e9 0c 01 00 00       	jmp    c000347b <create_chain+0x1c6>
c000336f:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003373:	0f 85 e7 00 00 00    	jne    c0003460 <create_chain+0x1ab>
c0003379:	8d 57 01             	lea    edx,[edi+0x1]
c000337c:	39 da                	cmp    edx,ebx
c000337e:	0f 84 f7 00 00 00    	je     c000347b <create_chain+0x1c6>
c0003384:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003387:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000338b:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c000338e:	e9 cd 00 00 00       	jmp    c0003460 <create_chain+0x1ab>
c0003393:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003397:	75 41                	jne    c00033da <create_chain+0x125>
c0003399:	8d 5f 01             	lea    ebx,[edi+0x1]
c000339c:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000339f:	77 05                	ja     c00033a6 <create_chain+0xf1>
c00033a1:	bb 02 00 00 00       	mov    ebx,0x2
c00033a6:	89 da                	mov    edx,ebx
c00033a8:	89 e8                	mov    eax,ebp
c00033aa:	e8 18 fc ff ff       	call   c0002fc7 <get_fat>
c00033af:	83 f8 01             	cmp    eax,0x1
c00033b2:	0f 84 2e ff ff ff    	je     c00032e6 <create_chain+0x31>
c00033b8:	83 f8 ff             	cmp    eax,0xffffffff
c00033bb:	0f 84 9a 00 00 00    	je     c000345b <create_chain+0x1a6>
c00033c1:	85 c0                	test   eax,eax
c00033c3:	74 11                	je     c00033d6 <create_chain+0x121>
c00033c5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 0d                	jbe    c00033da <create_chain+0x125>
c00033cd:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00033d0:	76 08                	jbe    c00033da <create_chain+0x125>
c00033d2:	89 c7                	mov    edi,eax
c00033d4:	eb 04                	jmp    c00033da <create_chain+0x125>
c00033d6:	85 db                	test   ebx,ebx
c00033d8:	75 38                	jne    c0003412 <create_chain+0x15d>
c00033da:	89 fb                	mov    ebx,edi
c00033dc:	43                   	inc    ebx
c00033dd:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033e0:	77 0e                	ja     c00033f0 <create_chain+0x13b>
c00033e2:	83 ff 01             	cmp    edi,0x1
c00033e5:	0f 86 28 ff ff ff    	jbe    c0003313 <create_chain+0x5e>
c00033eb:	bb 02 00 00 00       	mov    ebx,0x2
c00033f0:	89 da                	mov    edx,ebx
c00033f2:	89 e8                	mov    eax,ebp
c00033f4:	e8 ce fb ff ff       	call   c0002fc7 <get_fat>
c00033f9:	85 c0                	test   eax,eax
c00033fb:	74 15                	je     c0003412 <create_chain+0x15d>
c00033fd:	83 f8 01             	cmp    eax,0x1
c0003400:	0f 84 e0 fe ff ff    	je     c00032e6 <create_chain+0x31>
c0003406:	40                   	inc    eax
c0003407:	74 52                	je     c000345b <create_chain+0x1a6>
c0003409:	39 fb                	cmp    ebx,edi
c000340b:	75 cf                	jne    c00033dc <create_chain+0x127>
c000340d:	e9 01 ff ff ff       	jmp    c0003313 <create_chain+0x5e>
c0003412:	83 c9 ff             	or     ecx,0xffffffff
c0003415:	89 da                	mov    edx,ebx
c0003417:	89 f0                	mov    eax,esi
c0003419:	e8 a4 f9 ff ff       	call   c0002dc2 <put_fat>
c000341e:	85 c0                	test   eax,eax
c0003420:	75 32                	jne    c0003454 <create_chain+0x19f>
c0003422:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003427:	74 11                	je     c000343a <create_chain+0x185>
c0003429:	89 d9                	mov    ecx,ebx
c000342b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000342f:	89 f0                	mov    eax,esi
c0003431:	e8 8c f9 ff ff       	call   c0002dc2 <put_fat>
c0003436:	85 c0                	test   eax,eax
c0003438:	75 1a                	jne    c0003454 <create_chain+0x19f>
c000343a:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000343d:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003440:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003443:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003446:	39 d0                	cmp    eax,edx
c0003448:	77 04                	ja     c000344e <create_chain+0x199>
c000344a:	48                   	dec    eax
c000344b:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000344e:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003452:	eb 56                	jmp    c00034aa <create_chain+0x1f5>
c0003454:	48                   	dec    eax
c0003455:	0f 85 8b fe ff ff    	jne    c00032e6 <create_chain+0x31>
c000345b:	83 cb ff             	or     ebx,0xffffffff
c000345e:	eb 4a                	jmp    c00034aa <create_chain+0x1f5>
c0003460:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003464:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003467:	41                   	inc    ecx
c0003468:	39 d9                	cmp    ecx,ebx
c000346a:	75 19                	jne    c0003485 <create_chain+0x1d0>
c000346c:	b9 02 00 00 00       	mov    ecx,0x2
c0003471:	85 d2                	test   edx,edx
c0003473:	74 03                	je     c0003478 <create_chain+0x1c3>
c0003475:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003478:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000347b:	85 c0                	test   eax,eax
c000347d:	0f 85 63 fe ff ff    	jne    c00032e6 <create_chain+0x31>
c0003483:	eb b5                	jmp    c000343a <create_chain+0x185>
c0003485:	85 d2                	test   edx,edx
c0003487:	75 07                	jne    c0003490 <create_chain+0x1db>
c0003489:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003490:	89 d9                	mov    ecx,ebx
c0003492:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003496:	89 e8                	mov    eax,ebp
c0003498:	e8 bb fa ff ff       	call   c0002f58 <fill_last_frag>
c000349d:	85 c0                	test   eax,eax
c000349f:	75 b3                	jne    c0003454 <create_chain+0x19f>
c00034a1:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00034a8:	eb 90                	jmp    c000343a <create_chain+0x185>
c00034aa:	83 c4 1c             	add    esp,0x1c
c00034ad:	89 d8                	mov    eax,ebx
c00034af:	5b                   	pop    ebx
c00034b0:	5e                   	pop    esi
c00034b1:	5f                   	pop    edi
c00034b2:	5d                   	pop    ebp
c00034b3:	c3                   	ret    

c00034b4 <remove_chain>:
c00034b4:	55                   	push   ebp
c00034b5:	57                   	push   edi
c00034b6:	56                   	push   esi
c00034b7:	53                   	push   ebx
c00034b8:	83 ec 1c             	sub    esp,0x1c
c00034bb:	83 fa 01             	cmp    edx,0x1
c00034be:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00034c2:	8b 18                	mov    ebx,DWORD PTR [eax]
c00034c4:	77 0a                	ja     c00034d0 <remove_chain+0x1c>
c00034c6:	b8 02 00 00 00       	mov    eax,0x2
c00034cb:	e9 24 01 00 00       	jmp    c00035f4 <remove_chain+0x140>
c00034d0:	89 d6                	mov    esi,edx
c00034d2:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00034d5:	76 ef                	jbe    c00034c6 <remove_chain+0x12>
c00034d7:	89 c7                	mov    edi,eax
c00034d9:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034de:	75 06                	jne    c00034e6 <remove_chain+0x32>
c00034e0:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034e4:	eb 54                	jmp    c000353a <remove_chain+0x86>
c00034e6:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034e9:	75 06                	jne    c00034f1 <remove_chain+0x3d>
c00034eb:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034ef:	74 ef                	je     c00034e0 <remove_chain+0x2c>
c00034f1:	83 c9 ff             	or     ecx,0xffffffff
c00034f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034f8:	89 d8                	mov    eax,ebx
c00034fa:	e8 c3 f8 ff ff       	call   c0002dc2 <put_fat>
c00034ff:	85 c0                	test   eax,eax
c0003501:	74 dd                	je     c00034e0 <remove_chain+0x2c>
c0003503:	e9 ec 00 00 00       	jmp    c00035f4 <remove_chain+0x140>
c0003508:	83 f8 01             	cmp    eax,0x1
c000350b:	74 b9                	je     c00034c6 <remove_chain+0x12>
c000350d:	83 f8 ff             	cmp    eax,0xffffffff
c0003510:	74 6d                	je     c000357f <remove_chain+0xcb>
c0003512:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003515:	75 6f                	jne    c0003586 <remove_chain+0xd2>
c0003517:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000351a:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c000351d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003520:	39 d0                	cmp    eax,edx
c0003522:	73 08                	jae    c000352c <remove_chain+0x78>
c0003524:	40                   	inc    eax
c0003525:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003529:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000352c:	8d 4e 01             	lea    ecx,[esi+0x1]
c000352f:	39 e9                	cmp    ecx,ebp
c0003531:	75 64                	jne    c0003597 <remove_chain+0xe3>
c0003533:	89 ee                	mov    esi,ebp
c0003535:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003538:	76 0f                	jbe    c0003549 <remove_chain+0x95>
c000353a:	89 f2                	mov    edx,esi
c000353c:	89 f8                	mov    eax,edi
c000353e:	e8 84 fa ff ff       	call   c0002fc7 <get_fat>
c0003543:	89 c5                	mov    ebp,eax
c0003545:	85 c0                	test   eax,eax
c0003547:	75 bf                	jne    c0003508 <remove_chain+0x54>
c0003549:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000354c:	0f 85 a0 00 00 00    	jne    c00035f2 <remove_chain+0x13e>
c0003552:	eb 6c                	jmp    c00035c0 <remove_chain+0x10c>
c0003554:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003557:	84 c0                	test   al,al
c0003559:	75 7d                	jne    c00035d8 <remove_chain+0x124>
c000355b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000355e:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003562:	0f 84 86 00 00 00    	je     c00035ee <remove_chain+0x13a>
c0003568:	89 da                	mov    edx,ebx
c000356a:	89 f8                	mov    eax,edi
c000356c:	e8 56 fa ff ff       	call   c0002fc7 <get_fat>
c0003571:	83 f8 01             	cmp    eax,0x1
c0003574:	0f 86 4c ff ff ff    	jbe    c00034c6 <remove_chain+0x12>
c000357a:	83 f8 ff             	cmp    eax,0xffffffff
c000357d:	75 4e                	jne    c00035cd <remove_chain+0x119>
c000357f:	b8 01 00 00 00       	mov    eax,0x1
c0003584:	eb 6e                	jmp    c00035f4 <remove_chain+0x140>
c0003586:	31 c9                	xor    ecx,ecx
c0003588:	89 f2                	mov    edx,esi
c000358a:	89 d8                	mov    eax,ebx
c000358c:	e8 31 f8 ff ff       	call   c0002dc2 <put_fat>
c0003591:	85 c0                	test   eax,eax
c0003593:	74 82                	je     c0003517 <remove_chain+0x63>
c0003595:	eb 5d                	jmp    c00035f4 <remove_chain+0x140>
c0003597:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000359a:	75 1b                	jne    c00035b7 <remove_chain+0x103>
c000359c:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00035a0:	89 d8                	mov    eax,ebx
c00035a2:	83 ec 0c             	sub    esp,0xc
c00035a5:	6a 00                	push   0x0
c00035a7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00035ab:	e8 5d f7 ff ff       	call   c0002d0d <change_bitmap>
c00035b0:	83 c4 10             	add    esp,0x10
c00035b3:	85 c0                	test   eax,eax
c00035b5:	75 3d                	jne    c00035f4 <remove_chain+0x140>
c00035b7:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00035bb:	e9 73 ff ff ff       	jmp    c0003533 <remove_chain+0x7f>
c00035c0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00035c5:	75 8d                	jne    c0003554 <remove_chain+0xa0>
c00035c7:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00035cb:	eb 25                	jmp    c00035f2 <remove_chain+0x13e>
c00035cd:	8d 53 01             	lea    edx,[ebx+0x1]
c00035d0:	89 c3                	mov    ebx,eax
c00035d2:	39 c2                	cmp    edx,eax
c00035d4:	74 88                	je     c000355e <remove_chain+0xaa>
c00035d6:	eb 1a                	jmp    c00035f2 <remove_chain+0x13e>
c00035d8:	3c 03                	cmp    al,0x3
c00035da:	75 16                	jne    c00035f2 <remove_chain+0x13e>
c00035dc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035df:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035e3:	77 0d                	ja     c00035f2 <remove_chain+0x13e>
c00035e5:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035e8:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035ec:	72 04                	jb     c00035f2 <remove_chain+0x13e>
c00035ee:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035f2:	31 c0                	xor    eax,eax
c00035f4:	83 c4 1c             	add    esp,0x1c
c00035f7:	5b                   	pop    ebx
c00035f8:	5e                   	pop    esi
c00035f9:	5f                   	pop    edi
c00035fa:	5d                   	pop    ebp
c00035fb:	c3                   	ret    

c00035fc <dir_clear>:
c00035fc:	55                   	push   ebp
c00035fd:	57                   	push   edi
c00035fe:	56                   	push   esi
c00035ff:	89 c6                	mov    esi,eax
c0003601:	53                   	push   ebx
c0003602:	83 ec 1c             	sub    esp,0x1c
c0003605:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003609:	e8 9d ed ff ff       	call   c00023ab <sync_window>
c000360e:	85 c0                	test   eax,eax
c0003610:	0f 85 de 00 00 00    	jne    c00036f4 <dir_clear+0xf8>
c0003616:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000361a:	89 f0                	mov    eax,esi
c000361c:	8d 6e 54             	lea    ebp,[esi+0x54]
c000361f:	e8 d6 e8 ff ff       	call   c0001efa <clst2sect>
c0003624:	b9 00 02 00 00       	mov    ecx,0x200
c0003629:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000362d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003631:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003634:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003637:	89 e8                	mov    eax,ebp
c0003639:	31 d2                	xor    edx,edx
c000363b:	e8 b5 e6 ff ff       	call   c0001cf5 <mem_set>
c0003640:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003644:	c1 e3 09             	shl    ebx,0x9
c0003647:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000364d:	76 1f                	jbe    c000366e <dir_clear+0x72>
c000364f:	bb 00 80 00 00       	mov    ebx,0x8000
c0003654:	eb 18                	jmp    c000366e <dir_clear+0x72>
c0003656:	83 ec 0c             	sub    esp,0xc
c0003659:	53                   	push   ebx
c000365a:	e8 35 4e 00 00       	call   c0008494 <ff_memalloc>
c000365f:	83 c4 10             	add    esp,0x10
c0003662:	89 c7                	mov    edi,eax
c0003664:	85 c0                	test   eax,eax
c0003666:	0f 85 8f 00 00 00    	jne    c00036fb <dir_clear+0xff>
c000366c:	d1 eb                	shr    ebx,1
c000366e:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003674:	77 e0                	ja     c0003656 <dir_clear+0x5a>
c0003676:	31 db                	xor    ebx,ebx
c0003678:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000367c:	39 d8                	cmp    eax,ebx
c000367e:	76 66                	jbe    c00036e6 <dir_clear+0xea>
c0003680:	83 ec 0c             	sub    esp,0xc
c0003683:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003687:	6a 01                	push   0x1
c0003689:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000368d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003691:	55                   	push   ebp
c0003692:	50                   	push   eax
c0003693:	e8 94 e5 ff ff       	call   c0001c2c <disk_write>
c0003698:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000369d:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00036a2:	83 c4 20             	add    esp,0x20
c00036a5:	85 c0                	test   eax,eax
c00036a7:	75 3d                	jne    c00036e6 <dir_clear+0xea>
c00036a9:	43                   	inc    ebx
c00036aa:	eb cc                	jmp    c0003678 <dir_clear+0x7c>
c00036ac:	83 ec 0c             	sub    esp,0xc
c00036af:	31 d2                	xor    edx,edx
c00036b1:	55                   	push   ebp
c00036b2:	89 d8                	mov    eax,ebx
c00036b4:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00036b8:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00036bc:	52                   	push   edx
c00036bd:	50                   	push   eax
c00036be:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00036c2:	57                   	push   edi
c00036c3:	50                   	push   eax
c00036c4:	e8 63 e5 ff ff       	call   c0001c2c <disk_write>
c00036c9:	83 c4 20             	add    esp,0x20
c00036cc:	85 c0                	test   eax,eax
c00036ce:	75 0a                	jne    c00036da <dir_clear+0xde>
c00036d0:	01 eb                	add    ebx,ebp
c00036d2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036d6:	39 d8                	cmp    eax,ebx
c00036d8:	77 d2                	ja     c00036ac <dir_clear+0xb0>
c00036da:	83 ec 0c             	sub    esp,0xc
c00036dd:	57                   	push   edi
c00036de:	e8 c7 4d 00 00       	call   c00084aa <ff_memfree>
c00036e3:	83 c4 10             	add    esp,0x10
c00036e6:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036ea:	39 d8                	cmp    eax,ebx
c00036ec:	0f 95 c0             	setne  al
c00036ef:	0f b6 c0             	movzx  eax,al
c00036f2:	eb 19                	jmp    c000370d <dir_clear+0x111>
c00036f4:	b8 01 00 00 00       	mov    eax,0x1
c00036f9:	eb 12                	jmp    c000370d <dir_clear+0x111>
c00036fb:	89 d9                	mov    ecx,ebx
c00036fd:	31 d2                	xor    edx,edx
c00036ff:	c1 eb 09             	shr    ebx,0x9
c0003702:	e8 ee e5 ff ff       	call   c0001cf5 <mem_set>
c0003707:	89 dd                	mov    ebp,ebx
c0003709:	31 db                	xor    ebx,ebx
c000370b:	eb c5                	jmp    c00036d2 <dir_clear+0xd6>
c000370d:	83 c4 1c             	add    esp,0x1c
c0003710:	5b                   	pop    ebx
c0003711:	5e                   	pop    esi
c0003712:	5f                   	pop    edi
c0003713:	5d                   	pop    ebp
c0003714:	c3                   	ret    

c0003715 <dir_next>:
c0003715:	55                   	push   ebp
c0003716:	57                   	push   edi
c0003717:	56                   	push   esi
c0003718:	53                   	push   ebx
c0003719:	89 c3                	mov    ebx,eax
c000371b:	83 ec 1c             	sub    esp,0x1c
c000371e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003720:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003724:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003727:	8d 78 20             	lea    edi,[eax+0x20]
c000372a:	31 c0                	xor    eax,eax
c000372c:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003730:	0f 94 c0             	sete   al
c0003733:	48                   	dec    eax
c0003734:	25 00 00 20 f0       	and    eax,0xf0200000
c0003739:	05 00 00 00 10       	add    eax,0x10000000
c000373e:	39 f8                	cmp    eax,edi
c0003740:	77 0e                	ja     c0003750 <dir_next+0x3b>
c0003742:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003749:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003750:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003753:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003756:	b8 04 00 00 00       	mov    eax,0x4
c000375b:	89 ce                	mov    esi,ecx
c000375d:	09 d6                	or     esi,edx
c000375f:	0f 84 da 00 00 00    	je     c000383f <dir_next+0x12a>
c0003765:	89 f8                	mov    eax,edi
c0003767:	25 ff 01 00 00       	and    eax,0x1ff
c000376c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003770:	0f 85 b9 00 00 00    	jne    c000382f <dir_next+0x11a>
c0003776:	83 c2 01             	add    edx,0x1
c0003779:	83 d1 00             	adc    ecx,0x0
c000377c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000377f:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003782:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003785:	85 d2                	test   edx,edx
c0003787:	75 29                	jne    c00037b2 <dir_next+0x9d>
c0003789:	89 fa                	mov    edx,edi
c000378b:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000378f:	c1 ea 05             	shr    edx,0x5
c0003792:	39 c2                	cmp    edx,eax
c0003794:	0f 82 95 00 00 00    	jb     c000382f <dir_next+0x11a>
c000379a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00037a1:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00037a8:	b8 04 00 00 00       	mov    eax,0x4
c00037ad:	e9 8d 00 00 00       	jmp    c000383f <dir_next+0x12a>
c00037b2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00037b6:	89 f9                	mov    ecx,edi
c00037b8:	48                   	dec    eax
c00037b9:	c1 e9 09             	shr    ecx,0x9
c00037bc:	85 c8                	test   eax,ecx
c00037be:	75 6f                	jne    c000382f <dir_next+0x11a>
c00037c0:	89 d8                	mov    eax,ebx
c00037c2:	e8 00 f8 ff ff       	call   c0002fc7 <get_fat>
c00037c7:	89 c6                	mov    esi,eax
c00037c9:	83 f8 01             	cmp    eax,0x1
c00037cc:	77 07                	ja     c00037d5 <dir_next+0xc0>
c00037ce:	b8 02 00 00 00       	mov    eax,0x2
c00037d3:	eb 6a                	jmp    c000383f <dir_next+0x12a>
c00037d5:	83 f8 ff             	cmp    eax,0xffffffff
c00037d8:	75 07                	jne    c00037e1 <dir_next+0xcc>
c00037da:	b8 01 00 00 00       	mov    eax,0x1
c00037df:	eb 5e                	jmp    c000383f <dir_next+0x12a>
c00037e1:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037e4:	77 37                	ja     c000381d <dir_next+0x108>
c00037e6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037eb:	74 ad                	je     c000379a <dir_next+0x85>
c00037ed:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037f0:	89 d8                	mov    eax,ebx
c00037f2:	e8 be fa ff ff       	call   c00032b5 <create_chain>
c00037f7:	89 c6                	mov    esi,eax
c00037f9:	b8 07 00 00 00       	mov    eax,0x7
c00037fe:	85 f6                	test   esi,esi
c0003800:	74 3d                	je     c000383f <dir_next+0x12a>
c0003802:	83 fe 01             	cmp    esi,0x1
c0003805:	74 c7                	je     c00037ce <dir_next+0xb9>
c0003807:	83 fe ff             	cmp    esi,0xffffffff
c000380a:	74 ce                	je     c00037da <dir_next+0xc5>
c000380c:	89 f2                	mov    edx,esi
c000380e:	89 e8                	mov    eax,ebp
c0003810:	e8 e7 fd ff ff       	call   c00035fc <dir_clear>
c0003815:	85 c0                	test   eax,eax
c0003817:	75 c1                	jne    c00037da <dir_next+0xc5>
c0003819:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c000381d:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003820:	89 f2                	mov    edx,esi
c0003822:	89 e8                	mov    eax,ebp
c0003824:	e8 d1 e6 ff ff       	call   c0001efa <clst2sect>
c0003829:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000382c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000382f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003833:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003836:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c000383a:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000383d:	31 c0                	xor    eax,eax
c000383f:	83 c4 1c             	add    esp,0x1c
c0003842:	5b                   	pop    ebx
c0003843:	5e                   	pop    esi
c0003844:	5f                   	pop    edi
c0003845:	5d                   	pop    ebp
c0003846:	c3                   	ret    

c0003847 <load_xdir>:
c0003847:	55                   	push   ebp
c0003848:	57                   	push   edi
c0003849:	56                   	push   esi
c000384a:	89 c6                	mov    esi,eax
c000384c:	53                   	push   ebx
c000384d:	83 ec 1c             	sub    esp,0x1c
c0003850:	8b 00                	mov    eax,DWORD PTR [eax]
c0003852:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003855:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003858:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000385b:	e8 df eb ff ff       	call   c000243f <move_window>
c0003860:	89 c3                	mov    ebx,eax
c0003862:	85 c0                	test   eax,eax
c0003864:	0f 85 0c 01 00 00    	jne    c0003976 <load_xdir+0x12f>
c000386a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000386d:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003870:	0f 85 fb 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c0003876:	89 f8                	mov    eax,edi
c0003878:	b9 20 00 00 00       	mov    ecx,0x20
c000387d:	e8 5e e4 ff ff       	call   c0001ce0 <mem_cpy>
c0003882:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003886:	40                   	inc    eax
c0003887:	c1 e0 05             	shl    eax,0x5
c000388a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000388e:	83 e8 60             	sub    eax,0x60
c0003891:	3d 00 02 00 00       	cmp    eax,0x200
c0003896:	0f 87 d5 00 00 00    	ja     c0003971 <load_xdir+0x12a>
c000389c:	31 d2                	xor    edx,edx
c000389e:	89 f0                	mov    eax,esi
c00038a0:	e8 70 fe ff ff       	call   c0003715 <dir_next>
c00038a5:	89 c3                	mov    ebx,eax
c00038a7:	83 f8 04             	cmp    eax,0x4
c00038aa:	0f 84 c1 00 00 00    	je     c0003971 <load_xdir+0x12a>
c00038b0:	85 c0                	test   eax,eax
c00038b2:	0f 85 be 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038b8:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038bb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038be:	8b 06                	mov    eax,DWORD PTR [esi]
c00038c0:	e8 7a eb ff ff       	call   c000243f <move_window>
c00038c5:	89 c3                	mov    ebx,eax
c00038c7:	85 c0                	test   eax,eax
c00038c9:	0f 85 a7 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038cf:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038d2:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00038d5:	0f 85 96 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c00038db:	8d 47 20             	lea    eax,[edi+0x20]
c00038de:	b9 20 00 00 00       	mov    ecx,0x20
c00038e3:	e8 f8 e3 ff ff       	call   c0001ce0 <mem_cpy>
c00038e8:	31 d2                	xor    edx,edx
c00038ea:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038ee:	b9 0f 00 00 00       	mov    ecx,0xf
c00038f3:	83 c0 2c             	add    eax,0x2c
c00038f6:	f7 f1                	div    ecx
c00038f8:	c1 e0 05             	shl    eax,0x5
c00038fb:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038ff:	77 70                	ja     c0003971 <load_xdir+0x12a>
c0003901:	bd 40 00 00 00       	mov    ebp,0x40
c0003906:	31 d2                	xor    edx,edx
c0003908:	89 f0                	mov    eax,esi
c000390a:	e8 06 fe ff ff       	call   c0003715 <dir_next>
c000390f:	89 c3                	mov    ebx,eax
c0003911:	83 f8 04             	cmp    eax,0x4
c0003914:	74 5b                	je     c0003971 <load_xdir+0x12a>
c0003916:	85 c0                	test   eax,eax
c0003918:	75 5c                	jne    c0003976 <load_xdir+0x12f>
c000391a:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000391d:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003920:	8b 06                	mov    eax,DWORD PTR [esi]
c0003922:	e8 18 eb ff ff       	call   c000243f <move_window>
c0003927:	89 c3                	mov    ebx,eax
c0003929:	85 c0                	test   eax,eax
c000392b:	75 49                	jne    c0003976 <load_xdir+0x12f>
c000392d:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003930:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003933:	75 3c                	jne    c0003971 <load_xdir+0x12a>
c0003935:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000393b:	77 0d                	ja     c000394a <load_xdir+0x103>
c000393d:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003940:	b9 20 00 00 00       	mov    ecx,0x20
c0003945:	e8 96 e3 ff ff       	call   c0001ce0 <mem_cpy>
c000394a:	83 c5 20             	add    ebp,0x20
c000394d:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003951:	77 b3                	ja     c0003906 <load_xdir+0xbf>
c0003953:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003959:	77 1b                	ja     c0003976 <load_xdir+0x12f>
c000395b:	89 f8                	mov    eax,edi
c000395d:	e8 cd e7 ff ff       	call   c000212f <xdir_sum>
c0003962:	89 c1                	mov    ecx,eax
c0003964:	8d 47 02             	lea    eax,[edi+0x2]
c0003967:	e8 f5 e2 ff ff       	call   c0001c61 <ld_word>
c000396c:	66 39 c1             	cmp    cx,ax
c000396f:	74 05                	je     c0003976 <load_xdir+0x12f>
c0003971:	bb 02 00 00 00       	mov    ebx,0x2
c0003976:	83 c4 1c             	add    esp,0x1c
c0003979:	89 d8                	mov    eax,ebx
c000397b:	5b                   	pop    ebx
c000397c:	5e                   	pop    esi
c000397d:	5f                   	pop    edi
c000397e:	5d                   	pop    ebp
c000397f:	c3                   	ret    

c0003980 <load_obj_xdir>:
c0003980:	53                   	push   ebx
c0003981:	89 c3                	mov    ebx,eax
c0003983:	83 ec 08             	sub    esp,0x8
c0003986:	8b 02                	mov    eax,DWORD PTR [edx]
c0003988:	89 03                	mov    DWORD PTR [ebx],eax
c000398a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000398d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003990:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003993:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003996:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003999:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00039a0:	30 c0                	xor    al,al
c00039a2:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00039a9:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00039ac:	89 d8                	mov    eax,ebx
c00039ae:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00039b1:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00039b4:	e8 04 f8 ff ff       	call   c00031bd <dir_sdi>
c00039b9:	85 c0                	test   eax,eax
c00039bb:	75 0b                	jne    c00039c8 <load_obj_xdir+0x48>
c00039bd:	89 d8                	mov    eax,ebx
c00039bf:	83 c4 08             	add    esp,0x8
c00039c2:	5b                   	pop    ebx
c00039c3:	e9 7f fe ff ff       	jmp    c0003847 <load_xdir>
c00039c8:	83 c4 08             	add    esp,0x8
c00039cb:	5b                   	pop    ebx
c00039cc:	c3                   	ret    

c00039cd <dir_read>:
c00039cd:	55                   	push   ebp
c00039ce:	bd 04 00 00 00       	mov    ebp,0x4
c00039d3:	57                   	push   edi
c00039d4:	56                   	push   esi
c00039d5:	be ff ff ff ff       	mov    esi,0xffffffff
c00039da:	53                   	push   ebx
c00039db:	89 c3                	mov    ebx,eax
c00039dd:	83 ec 1c             	sub    esp,0x1c
c00039e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e4:	8b 38                	mov    edi,DWORD PTR [eax]
c00039e6:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039eb:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039ee:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039f1:	89 c8                	mov    eax,ecx
c00039f3:	09 d0                	or     eax,edx
c00039f5:	0f 84 25 01 00 00    	je     c0003b20 <dir_read+0x153>
c00039fb:	89 f8                	mov    eax,edi
c00039fd:	e8 3d ea ff ff       	call   c000243f <move_window>
c0003a02:	89 c5                	mov    ebp,eax
c0003a04:	85 c0                	test   eax,eax
c0003a06:	0f 85 23 01 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a0c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a0f:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003a11:	84 c9                	test   cl,cl
c0003a13:	0f 84 11 01 00 00    	je     c0003b2a <dir_read+0x15d>
c0003a19:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a1c:	75 48                	jne    c0003a66 <dir_read+0x99>
c0003a1e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003a23:	74 10                	je     c0003a35 <dir_read+0x68>
c0003a25:	80 f9 83             	cmp    cl,0x83
c0003a28:	0f 85 dd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a2e:	31 ed                	xor    ebp,ebp
c0003a30:	e9 08 01 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a35:	80 f9 85             	cmp    cl,0x85
c0003a38:	0f 85 cd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a3e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a41:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a44:	89 d8                	mov    eax,ebx
c0003a46:	e8 fc fd ff ff       	call   c0003847 <load_xdir>
c0003a4b:	89 c5                	mov    ebp,eax
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	0f 85 da 00 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a55:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a58:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a5b:	83 e0 3f             	and    eax,0x3f
c0003a5e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a61:	e9 d7 00 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a66:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a69:	83 e0 3f             	and    eax,0x3f
c0003a6c:	80 f9 2e             	cmp    cl,0x2e
c0003a6f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a73:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a76:	0f 84 8a 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a7c:	80 f9 e5             	cmp    cl,0xe5
c0003a7f:	0f 84 81 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a89:	83 e0 1f             	and    eax,0x1f
c0003a8c:	83 f8 08             	cmp    eax,0x8
c0003a8f:	0f 94 c0             	sete   al
c0003a92:	0f b6 c0             	movzx  eax,al
c0003a95:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a99:	75 6b                	jne    c0003b06 <dir_read+0x139>
c0003a9b:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003aa0:	75 44                	jne    c0003ae6 <dir_read+0x119>
c0003aa2:	f6 c1 40             	test   cl,0x40
c0003aa5:	74 12                	je     c0003ab9 <dir_read+0xec>
c0003aa7:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003aaa:	83 e1 bf             	and    ecx,0xffffffbf
c0003aad:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003ab1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003ab4:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003ab7:	eb 06                	jmp    c0003abf <dir_read+0xf2>
c0003ab9:	89 f0                	mov    eax,esi
c0003abb:	38 c8                	cmp    al,cl
c0003abd:	75 47                	jne    c0003b06 <dir_read+0x139>
c0003abf:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003ac3:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ac8:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003acb:	75 3e                	jne    c0003b0b <dir_read+0x13e>
c0003acd:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003ad1:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003ad4:	e8 8a e4 ff ff       	call   c0001f63 <pick_lfn>
c0003ad9:	85 c0                	test   eax,eax
c0003adb:	74 2e                	je     c0003b0b <dir_read+0x13e>
c0003add:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003ae1:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003ae4:	eb 25                	jmp    c0003b0b <dir_read+0x13e>
c0003ae6:	89 f0                	mov    eax,esi
c0003ae8:	84 c0                	test   al,al
c0003aea:	75 11                	jne    c0003afd <dir_read+0x130>
c0003aec:	89 d0                	mov    eax,edx
c0003aee:	e8 2a e6 ff ff       	call   c000211d <sum_sfn>
c0003af3:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003af7:	0f 84 31 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003afd:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003b04:	eb 37                	jmp    c0003b3d <dir_read+0x170>
c0003b06:	be ff ff ff ff       	mov    esi,0xffffffff
c0003b0b:	31 d2                	xor    edx,edx
c0003b0d:	89 d8                	mov    eax,ebx
c0003b0f:	e8 01 fc ff ff       	call   c0003715 <dir_next>
c0003b14:	89 c5                	mov    ebp,eax
c0003b16:	85 c0                	test   eax,eax
c0003b18:	0f 84 cd fe ff ff    	je     c00039eb <dir_read+0x1e>
c0003b1e:	eb 0f                	jmp    c0003b2f <dir_read+0x162>
c0003b20:	85 ed                	test   ebp,ebp
c0003b22:	0f 84 06 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003b28:	eb 05                	jmp    c0003b2f <dir_read+0x162>
c0003b2a:	bd 04 00 00 00       	mov    ebp,0x4
c0003b2f:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003b36:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b3d:	83 c4 1c             	add    esp,0x1c
c0003b40:	89 e8                	mov    eax,ebp
c0003b42:	5b                   	pop    ebx
c0003b43:	5e                   	pop    esi
c0003b44:	5f                   	pop    edi
c0003b45:	5d                   	pop    ebp
c0003b46:	c3                   	ret    

c0003b47 <dir_alloc>:
c0003b47:	55                   	push   ebp
c0003b48:	89 d5                	mov    ebp,edx
c0003b4a:	57                   	push   edi
c0003b4b:	31 d2                	xor    edx,edx
c0003b4d:	56                   	push   esi
c0003b4e:	53                   	push   ebx
c0003b4f:	89 c3                	mov    ebx,eax
c0003b51:	83 ec 0c             	sub    esp,0xc
c0003b54:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b56:	e8 62 f6 ff ff       	call   c00031bd <dir_sdi>
c0003b5b:	85 c0                	test   eax,eax
c0003b5d:	75 4e                	jne    c0003bad <dir_alloc+0x66>
c0003b5f:	31 f6                	xor    esi,esi
c0003b61:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b64:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b67:	89 f8                	mov    eax,edi
c0003b69:	e8 d1 e8 ff ff       	call   c000243f <move_window>
c0003b6e:	85 c0                	test   eax,eax
c0003b70:	75 3b                	jne    c0003bad <dir_alloc+0x66>
c0003b72:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b75:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b78:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b7a:	75 07                	jne    c0003b83 <dir_alloc+0x3c>
c0003b7c:	f7 d2                	not    edx
c0003b7e:	c0 ea 07             	shr    dl,0x7
c0003b81:	eb 0d                	jmp    c0003b90 <dir_alloc+0x49>
c0003b83:	84 d2                	test   dl,dl
c0003b85:	0f 94 c1             	sete   cl
c0003b88:	80 fa e5             	cmp    dl,0xe5
c0003b8b:	0f 94 c2             	sete   dl
c0003b8e:	09 ca                	or     edx,ecx
c0003b90:	84 d2                	test   dl,dl
c0003b92:	74 07                	je     c0003b9b <dir_alloc+0x54>
c0003b94:	46                   	inc    esi
c0003b95:	39 ee                	cmp    esi,ebp
c0003b97:	75 04                	jne    c0003b9d <dir_alloc+0x56>
c0003b99:	eb 1c                	jmp    c0003bb7 <dir_alloc+0x70>
c0003b9b:	31 f6                	xor    esi,esi
c0003b9d:	ba 01 00 00 00       	mov    edx,0x1
c0003ba2:	89 d8                	mov    eax,ebx
c0003ba4:	e8 6c fb ff ff       	call   c0003715 <dir_next>
c0003ba9:	85 c0                	test   eax,eax
c0003bab:	74 b4                	je     c0003b61 <dir_alloc+0x1a>
c0003bad:	83 f8 04             	cmp    eax,0x4
c0003bb0:	75 05                	jne    c0003bb7 <dir_alloc+0x70>
c0003bb2:	b8 07 00 00 00       	mov    eax,0x7
c0003bb7:	83 c4 0c             	add    esp,0xc
c0003bba:	5b                   	pop    ebx
c0003bbb:	5e                   	pop    esi
c0003bbc:	5f                   	pop    edi
c0003bbd:	5d                   	pop    ebp
c0003bbe:	c3                   	ret    

c0003bbf <store_xdir>:
c0003bbf:	55                   	push   ebp
c0003bc0:	57                   	push   edi
c0003bc1:	89 c7                	mov    edi,eax
c0003bc3:	56                   	push   esi
c0003bc4:	53                   	push   ebx
c0003bc5:	83 ec 0c             	sub    esp,0xc
c0003bc8:	8b 00                	mov    eax,DWORD PTR [eax]
c0003bca:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003bcd:	89 e8                	mov    eax,ebp
c0003bcf:	e8 5b e5 ff ff       	call   c000212f <xdir_sum>
c0003bd4:	0f b7 d0             	movzx  edx,ax
c0003bd7:	8d 45 02             	lea    eax,[ebp+0x2]
c0003bda:	e8 f4 e0 ff ff       	call   c0001cd3 <st_word>
c0003bdf:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003be3:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003be6:	89 f8                	mov    eax,edi
c0003be8:	e8 d0 f5 ff ff       	call   c00031bd <dir_sdi>
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	85 f6                	test   esi,esi
c0003bf1:	75 3d                	jne    c0003c30 <store_xdir+0x71>
c0003bf3:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bf6:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bf9:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bfb:	e8 3f e8 ff ff       	call   c000243f <move_window>
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	85 c0                	test   eax,eax
c0003c04:	75 2a                	jne    c0003c30 <store_xdir+0x71>
c0003c06:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003c09:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0e:	89 ea                	mov    edx,ebp
c0003c10:	e8 cb e0 ff ff       	call   c0001ce0 <mem_cpy>
c0003c15:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c17:	85 db                	test   ebx,ebx
c0003c19:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c1d:	74 11                	je     c0003c30 <store_xdir+0x71>
c0003c1f:	31 d2                	xor    edx,edx
c0003c21:	89 f8                	mov    eax,edi
c0003c23:	83 c5 20             	add    ebp,0x20
c0003c26:	e8 ea fa ff ff       	call   c0003715 <dir_next>
c0003c2b:	4b                   	dec    ebx
c0003c2c:	89 c6                	mov    esi,eax
c0003c2e:	eb bf                	jmp    c0003bef <store_xdir+0x30>
c0003c30:	89 f0                	mov    eax,esi
c0003c32:	83 fe 02             	cmp    esi,0x2
c0003c35:	76 05                	jbe    c0003c3c <store_xdir+0x7d>
c0003c37:	b8 02 00 00 00       	mov    eax,0x2
c0003c3c:	83 c4 0c             	add    esp,0xc
c0003c3f:	5b                   	pop    ebx
c0003c40:	5e                   	pop    esi
c0003c41:	5f                   	pop    edi
c0003c42:	5d                   	pop    ebp
c0003c43:	c3                   	ret    

c0003c44 <dir_remove>:
c0003c44:	57                   	push   edi
c0003c45:	56                   	push   esi
c0003c46:	53                   	push   ebx
c0003c47:	89 c3                	mov    ebx,eax
c0003c49:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c4c:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c4e:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c51:	83 fa ff             	cmp    edx,0xffffffff
c0003c54:	74 09                	je     c0003c5f <dir_remove+0x1b>
c0003c56:	e8 62 f5 ff ff       	call   c00031bd <dir_sdi>
c0003c5b:	85 c0                	test   eax,eax
c0003c5d:	75 41                	jne    c0003ca0 <dir_remove+0x5c>
c0003c5f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c62:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c65:	89 f0                	mov    eax,esi
c0003c67:	e8 d3 e7 ff ff       	call   c000243f <move_window>
c0003c6c:	85 c0                	test   eax,eax
c0003c6e:	75 26                	jne    c0003c96 <dir_remove+0x52>
c0003c70:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c73:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c76:	75 05                	jne    c0003c7d <dir_remove+0x39>
c0003c78:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c7b:	eb 03                	jmp    c0003c80 <dir_remove+0x3c>
c0003c7d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c80:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c84:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c87:	73 17                	jae    c0003ca0 <dir_remove+0x5c>
c0003c89:	31 d2                	xor    edx,edx
c0003c8b:	89 d8                	mov    eax,ebx
c0003c8d:	e8 83 fa ff ff       	call   c0003715 <dir_next>
c0003c92:	85 c0                	test   eax,eax
c0003c94:	74 c9                	je     c0003c5f <dir_remove+0x1b>
c0003c96:	83 f8 04             	cmp    eax,0x4
c0003c99:	75 05                	jne    c0003ca0 <dir_remove+0x5c>
c0003c9b:	b8 02 00 00 00       	mov    eax,0x2
c0003ca0:	5b                   	pop    ebx
c0003ca1:	5e                   	pop    esi
c0003ca2:	5f                   	pop    edi
c0003ca3:	c3                   	ret    

c0003ca4 <create_name>:
c0003ca4:	55                   	push   ebp
c0003ca5:	89 d5                	mov    ebp,edx
c0003ca7:	57                   	push   edi
c0003ca8:	89 c7                	mov    edi,eax
c0003caa:	56                   	push   esi
c0003cab:	31 f6                	xor    esi,esi
c0003cad:	53                   	push   ebx
c0003cae:	83 ec 3c             	sub    esp,0x3c
c0003cb1:	8b 02                	mov    eax,DWORD PTR [edx]
c0003cb3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cb7:	8b 07                	mov    eax,DWORD PTR [edi]
c0003cb9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003cbc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003cc0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003cc4:	e8 72 e0 ff ff       	call   c0001d3b <tchar2uni>
c0003cc9:	89 c3                	mov    ebx,eax
c0003ccb:	83 f8 ff             	cmp    eax,0xffffffff
c0003cce:	75 0a                	jne    c0003cda <create_name+0x36>
c0003cd0:	b8 06 00 00 00       	mov    eax,0x6
c0003cd5:	e9 9e 02 00 00       	jmp    c0003f78 <create_name+0x2d4>
c0003cda:	3d ff ff 00 00       	cmp    eax,0xffff
c0003cdf:	76 0c                	jbe    c0003ced <create_name+0x49>
c0003ce1:	c1 e8 10             	shr    eax,0x10
c0003ce4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003ce8:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cec:	46                   	inc    esi
c0003ced:	66 83 fb 1f          	cmp    bx,0x1f
c0003cf1:	76 4f                	jbe    c0003d42 <create_name+0x9e>
c0003cf3:	66 83 fb 5c          	cmp    bx,0x5c
c0003cf7:	74 35                	je     c0003d2e <create_name+0x8a>
c0003cf9:	66 83 fb 2f          	cmp    bx,0x2f
c0003cfd:	74 2f                	je     c0003d2e <create_name+0x8a>
c0003cff:	66 83 fb 7f          	cmp    bx,0x7f
c0003d03:	77 11                	ja     c0003d16 <create_name+0x72>
c0003d05:	0f b7 d3             	movzx  edx,bx
c0003d08:	b8 32 93 02 c0       	mov    eax,0xc0029332
c0003d0d:	e8 11 e0 ff ff       	call   c0001d23 <chk_chr>
c0003d12:	85 c0                	test   eax,eax
c0003d14:	75 ba                	jne    c0003cd0 <create_name+0x2c>
c0003d16:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003d1c:	77 b2                	ja     c0003cd0 <create_name+0x2c>
c0003d1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d22:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003d26:	46                   	inc    esi
c0003d27:	eb 97                	jmp    c0003cc0 <create_name+0x1c>
c0003d29:	40                   	inc    eax
c0003d2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003d2e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d32:	8a 10                	mov    dl,BYTE PTR [eax]
c0003d34:	80 fa 2f             	cmp    dl,0x2f
c0003d37:	74 f0                	je     c0003d29 <create_name+0x85>
c0003d39:	80 fa 5c             	cmp    dl,0x5c
c0003d3c:	74 eb                	je     c0003d29 <create_name+0x85>
c0003d3e:	31 db                	xor    ebx,ebx
c0003d40:	eb 02                	jmp    c0003d44 <create_name+0xa0>
c0003d42:	b3 04                	mov    bl,0x4
c0003d44:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d48:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d4b:	85 f6                	test   esi,esi
c0003d4d:	74 18                	je     c0003d67 <create_name+0xc3>
c0003d4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d53:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d58:	66 83 f8 20          	cmp    ax,0x20
c0003d5c:	74 06                	je     c0003d64 <create_name+0xc0>
c0003d5e:	66 83 f8 2e          	cmp    ax,0x2e
c0003d62:	75 03                	jne    c0003d67 <create_name+0xc3>
c0003d64:	4e                   	dec    esi
c0003d65:	eb e4                	jmp    c0003d4b <create_name+0xa7>
c0003d67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6b:	31 ed                	xor    ebp,ebp
c0003d6d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d73:	85 f6                	test   esi,esi
c0003d75:	0f 84 55 ff ff ff    	je     c0003cd0 <create_name+0x2c>
c0003d7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d7f:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d82:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d86:	66 83 f8 20          	cmp    ax,0x20
c0003d8a:	75 04                	jne    c0003d90 <create_name+0xec>
c0003d8c:	89 d5                	mov    ebp,edx
c0003d8e:	eb eb                	jmp    c0003d7b <create_name+0xd7>
c0003d90:	85 ed                	test   ebp,ebp
c0003d92:	75 06                	jne    c0003d9a <create_name+0xf6>
c0003d94:	66 83 f8 2e          	cmp    ax,0x2e
c0003d98:	75 08                	jne    c0003da2 <create_name+0xfe>
c0003d9a:	83 cb 03             	or     ebx,0x3
c0003d9d:	eb 03                	jmp    c0003da2 <create_name+0xfe>
c0003d9f:	4e                   	dec    esi
c0003da0:	74 0c                	je     c0003dae <create_name+0x10a>
c0003da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da6:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003dac:	75 f1                	jne    c0003d9f <create_name+0xfb>
c0003dae:	b9 0b 00 00 00       	mov    ecx,0xb
c0003db3:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003db6:	ba 20 00 00 00       	mov    edx,0x20
c0003dbb:	e8 35 df ff ff       	call   c0001cf5 <mem_set>
c0003dc0:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003dc8:	31 c9                	xor    ecx,ecx
c0003dca:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003dcf:	8d 45 01             	lea    eax,[ebp+0x1]
c0003dd2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003dd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003dda:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003dde:	66 85 ed             	test   bp,bp
c0003de1:	0f 84 30 01 00 00    	je     c0003f17 <create_name+0x273>
c0003de7:	66 83 fd 20          	cmp    bp,0x20
c0003deb:	74 10                	je     c0003dfd <create_name+0x159>
c0003ded:	66 83 fd 2e          	cmp    bp,0x2e
c0003df1:	75 13                	jne    c0003e06 <create_name+0x162>
c0003df3:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df7:	0f 84 6b 01 00 00    	je     c0003f68 <create_name+0x2c4>
c0003dfd:	83 cb 03             	or     ebx,0x3
c0003e00:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003e04:	eb c9                	jmp    c0003dcf <create_name+0x12b>
c0003e06:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003e0a:	73 0b                	jae    c0003e17 <create_name+0x173>
c0003e0c:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e10:	75 47                	jne    c0003e59 <create_name+0x1b5>
c0003e12:	e9 51 01 00 00       	jmp    c0003f68 <create_name+0x2c4>
c0003e17:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e1c:	75 10                	jne    c0003e2e <create_name+0x18a>
c0003e1e:	83 cb 03             	or     ebx,0x3
c0003e21:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e29:	e9 e9 00 00 00       	jmp    c0003f17 <create_name+0x273>
c0003e2e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e32:	74 0d                	je     c0003e41 <create_name+0x19d>
c0003e34:	83 cb 03             	or     ebx,0x3
c0003e37:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e3b:	0f 87 d6 00 00 00    	ja     c0003f17 <create_name+0x273>
c0003e41:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e46:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e4a:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e52:	b9 08 00 00 00       	mov    ecx,0x8
c0003e57:	eb a7                	jmp    c0003e00 <create_name+0x15c>
c0003e59:	66 83 fd 7f          	cmp    bp,0x7f
c0003e5d:	76 68                	jbe    c0003ec7 <create_name+0x223>
c0003e5f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e63:	88 da                	mov    dl,bl
c0003e65:	83 ca 02             	or     edx,0x2
c0003e68:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e6c:	50                   	push   eax
c0003e6d:	50                   	push   eax
c0003e6e:	68 b5 01 00 00       	push   0x1b5
c0003e73:	55                   	push   ebp
c0003e74:	e8 48 46 00 00       	call   c00084c1 <ff_uni2oem>
c0003e79:	83 c4 10             	add    esp,0x10
c0003e7c:	89 c5                	mov    ebp,eax
c0003e7e:	a8 80                	test   al,0x80
c0003e80:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e84:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e88:	74 0c                	je     c0003e96 <create_name+0x1f2>
c0003e8a:	83 e5 7f             	and    ebp,0x7f
c0003e8d:	0f b6 ad 80 92 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6d80]
c0003e94:	eb 2a                	jmp    c0003ec0 <create_name+0x21c>
c0003e96:	66 3d ff 00          	cmp    ax,0xff
c0003e9a:	76 24                	jbe    c0003ec0 <create_name+0x21c>
c0003e9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ea0:	48                   	dec    eax
c0003ea1:	39 c8                	cmp    eax,ecx
c0003ea3:	77 0c                	ja     c0003eb1 <create_name+0x20d>
c0003ea5:	83 cb 03             	or     ebx,0x3
c0003ea8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003eac:	e9 4f ff ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003eb1:	89 e8                	mov    eax,ebp
c0003eb3:	88 d3                	mov    bl,dl
c0003eb5:	66 c1 e8 08          	shr    ax,0x8
c0003eb9:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ebd:	41                   	inc    ecx
c0003ebe:	eb 4b                	jmp    c0003f0b <create_name+0x267>
c0003ec0:	88 d3                	mov    bl,dl
c0003ec2:	66 85 ed             	test   bp,bp
c0003ec5:	74 19                	je     c0003ee0 <create_name+0x23c>
c0003ec7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003ecb:	0f b7 d5             	movzx  edx,bp
c0003ece:	b8 3b 93 02 c0       	mov    eax,0xc002933b
c0003ed3:	e8 4b de ff ff       	call   c0001d23 <chk_chr>
c0003ed8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003edc:	85 c0                	test   eax,eax
c0003ede:	74 0a                	je     c0003eea <create_name+0x246>
c0003ee0:	83 cb 03             	or     ebx,0x3
c0003ee3:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003ee8:	eb 21                	jmp    c0003f0b <create_name+0x267>
c0003eea:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eed:	66 83 f8 19          	cmp    ax,0x19
c0003ef1:	77 07                	ja     c0003efa <create_name+0x256>
c0003ef3:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ef8:	eb 11                	jmp    c0003f0b <create_name+0x267>
c0003efa:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003efd:	66 83 f8 19          	cmp    ax,0x19
c0003f01:	77 08                	ja     c0003f0b <create_name+0x267>
c0003f03:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003f08:	83 ed 20             	sub    ebp,0x20
c0003f0b:	89 e8                	mov    eax,ebp
c0003f0d:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003f11:	41                   	inc    ecx
c0003f12:	e9 e9 fe ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003f17:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003f1b:	75 04                	jne    c0003f21 <create_name+0x27d>
c0003f1d:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003f21:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003f26:	75 05                	jne    c0003f2d <create_name+0x289>
c0003f28:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003f2d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f31:	83 e0 0c             	and    eax,0xc
c0003f34:	3c 0c                	cmp    al,0xc
c0003f36:	74 0b                	je     c0003f43 <create_name+0x29f>
c0003f38:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f3c:	83 e0 03             	and    eax,0x3
c0003f3f:	3c 03                	cmp    al,0x3
c0003f41:	75 05                	jne    c0003f48 <create_name+0x2a4>
c0003f43:	83 cb 02             	or     ebx,0x2
c0003f46:	eb 19                	jmp    c0003f61 <create_name+0x2bd>
c0003f48:	f6 c3 02             	test   bl,0x2
c0003f4b:	75 14                	jne    c0003f61 <create_name+0x2bd>
c0003f4d:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f52:	74 03                	je     c0003f57 <create_name+0x2b3>
c0003f54:	83 cb 10             	or     ebx,0x10
c0003f57:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f5c:	74 03                	je     c0003f61 <create_name+0x2bd>
c0003f5e:	83 cb 08             	or     ebx,0x8
c0003f61:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f64:	31 c0                	xor    eax,eax
c0003f66:	eb 10                	jmp    c0003f78 <create_name+0x2d4>
c0003f68:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f6d:	0f 85 ce fe ff ff    	jne    c0003e41 <create_name+0x19d>
c0003f73:	e9 a6 fe ff ff       	jmp    c0003e1e <create_name+0x17a>
c0003f78:	83 c4 3c             	add    esp,0x3c
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	5f                   	pop    edi
c0003f7e:	5d                   	pop    ebp
c0003f7f:	c3                   	ret    

c0003f80 <xname_sum>:
c0003f80:	56                   	push   esi
c0003f81:	53                   	push   ebx
c0003f82:	89 c6                	mov    esi,eax
c0003f84:	51                   	push   ecx
c0003f85:	31 db                	xor    ebx,ebx
c0003f87:	83 c6 02             	add    esi,0x2
c0003f8a:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f8e:	66 85 c0             	test   ax,ax
c0003f91:	74 1f                	je     c0003fb2 <xname_sum+0x32>
c0003f93:	83 ec 0c             	sub    esp,0xc
c0003f96:	66 d1 cb             	ror    bx,1
c0003f99:	50                   	push   eax
c0003f9a:	e8 1e 46 00 00       	call   c00085bd <ff_wtoupper>
c0003f9f:	83 c4 10             	add    esp,0x10
c0003fa2:	0f b6 d0             	movzx  edx,al
c0003fa5:	66 c1 e8 08          	shr    ax,0x8
c0003fa9:	01 d3                	add    ebx,edx
c0003fab:	66 d1 cb             	ror    bx,1
c0003fae:	01 c3                	add    ebx,eax
c0003fb0:	eb d5                	jmp    c0003f87 <xname_sum+0x7>
c0003fb2:	89 d8                	mov    eax,ebx
c0003fb4:	5a                   	pop    edx
c0003fb5:	5b                   	pop    ebx
c0003fb6:	5e                   	pop    esi
c0003fb7:	c3                   	ret    

c0003fb8 <create_xdir>:
c0003fb8:	55                   	push   ebp
c0003fb9:	b9 40 00 00 00       	mov    ecx,0x40
c0003fbe:	57                   	push   edi
c0003fbf:	bd 01 00 00 00       	mov    ebp,0x1
c0003fc4:	56                   	push   esi
c0003fc5:	31 ff                	xor    edi,edi
c0003fc7:	53                   	push   ebx
c0003fc8:	be 40 00 00 00       	mov    esi,0x40
c0003fcd:	89 c3                	mov    ebx,eax
c0003fcf:	83 ec 1c             	sub    esp,0x1c
c0003fd2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003fd6:	31 d2                	xor    edx,edx
c0003fd8:	e8 18 dd ff ff       	call   c0001cf5 <mem_set>
c0003fdd:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fe0:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003fe4:	31 c9                	xor    ecx,ecx
c0003fe6:	8d 46 01             	lea    eax,[esi+0x1]
c0003fe9:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fed:	83 c6 02             	add    esi,0x2
c0003ff0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003ff4:	66 85 ed             	test   bp,bp
c0003ff7:	74 12                	je     c000400b <create_xdir+0x53>
c0003ff9:	0f b6 c1             	movzx  eax,cl
c0003ffc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004000:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0004004:	66 83 fd 01          	cmp    bp,0x1
c0004008:	80 d9 ff             	sbb    cl,0xff
c000400b:	8d 04 33             	lea    eax,[ebx+esi*1]
c000400e:	0f b7 d5             	movzx  edx,bp
c0004011:	83 c6 02             	add    esi,0x2
c0004014:	e8 ba dc ff ff       	call   c0001cd3 <st_word>
c0004019:	f7 c6 1f 00 00 00    	test   esi,0x1f
c000401f:	75 d3                	jne    c0003ff4 <create_xdir+0x3c>
c0004021:	8d 47 01             	lea    eax,[edi+0x1]
c0004024:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004028:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000402c:	0f b6 c1             	movzx  eax,cl
c000402f:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0004034:	74 07                	je     c000403d <create_xdir+0x85>
c0004036:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c000403b:	eb a9                	jmp    c0003fe6 <create_xdir+0x2e>
c000403d:	8d 47 02             	lea    eax,[edi+0x2]
c0004040:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004043:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0004046:	89 d0                	mov    eax,edx
c0004048:	e8 33 ff ff ff       	call   c0003f80 <xname_sum>
c000404d:	83 c4 1c             	add    esp,0x1c
c0004050:	0f b7 d0             	movzx  edx,ax
c0004053:	8d 43 24             	lea    eax,[ebx+0x24]
c0004056:	5b                   	pop    ebx
c0004057:	5e                   	pop    esi
c0004058:	5f                   	pop    edi
c0004059:	5d                   	pop    ebp
c000405a:	e9 74 dc ff ff       	jmp    c0001cd3 <st_word>

c000405f <cmp_lfn>:
c000405f:	55                   	push   ebp
c0004060:	57                   	push   edi
c0004061:	89 d7                	mov    edi,edx
c0004063:	56                   	push   esi
c0004064:	53                   	push   ebx
c0004065:	83 ec 1c             	sub    esp,0x1c
c0004068:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000406c:	8d 42 1a             	lea    eax,[edx+0x1a]
c000406f:	e8 ed db ff ff       	call   c0001c61 <ld_word>
c0004074:	66 85 c0             	test   ax,ax
c0004077:	74 07                	je     c0004080 <cmp_lfn+0x21>
c0004079:	31 c0                	xor    eax,eax
c000407b:	e9 9a 00 00 00       	jmp    c000411a <cmp_lfn+0xbb>
c0004080:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004082:	bd 01 00 00 00       	mov    ebp,0x1
c0004087:	83 e3 3f             	and    ebx,0x3f
c000408a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004092:	4b                   	dec    ebx
c0004093:	6b db 0d             	imul   ebx,ebx,0xd
c0004096:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000409a:	0f b6 80 00 93 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6d00]
c00040a1:	01 f8                	add    eax,edi
c00040a3:	e8 b9 db ff ff       	call   c0001c61 <ld_word>
c00040a8:	66 85 ed             	test   bp,bp
c00040ab:	89 c6                	mov    esi,eax
c00040ad:	74 3c                	je     c00040eb <cmp_lfn+0x8c>
c00040af:	81 fb ff 00 00 00    	cmp    ebx,0xff
c00040b5:	77 c2                	ja     c0004079 <cmp_lfn+0x1a>
c00040b7:	83 ec 0c             	sub    esp,0xc
c00040ba:	0f b7 c0             	movzx  eax,ax
c00040bd:	50                   	push   eax
c00040be:	e8 fa 44 00 00       	call   c00085bd <ff_wtoupper>
c00040c3:	89 c5                	mov    ebp,eax
c00040c5:	8d 43 01             	lea    eax,[ebx+0x1]
c00040c8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00040cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00040d0:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c00040d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00040d7:	e8 e1 44 00 00       	call   c00085bd <ff_wtoupper>
c00040dc:	83 c4 10             	add    esp,0x10
c00040df:	39 c5                	cmp    ebp,eax
c00040e1:	75 96                	jne    c0004079 <cmp_lfn+0x1a>
c00040e3:	89 f5                	mov    ebp,esi
c00040e5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040e9:	eb 04                	jmp    c00040ef <cmp_lfn+0x90>
c00040eb:	66 46                	inc    si
c00040ed:	75 8a                	jne    c0004079 <cmp_lfn+0x1a>
c00040ef:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040f3:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040f8:	75 9c                	jne    c0004096 <cmp_lfn+0x37>
c00040fa:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040fd:	74 16                	je     c0004115 <cmp_lfn+0xb6>
c00040ff:	66 85 ed             	test   bp,bp
c0004102:	74 11                	je     c0004115 <cmp_lfn+0xb6>
c0004104:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004108:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000410d:	0f 94 c0             	sete   al
c0004110:	0f b6 c0             	movzx  eax,al
c0004113:	eb 05                	jmp    c000411a <cmp_lfn+0xbb>
c0004115:	b8 01 00 00 00       	mov    eax,0x1
c000411a:	83 c4 1c             	add    esp,0x1c
c000411d:	5b                   	pop    ebx
c000411e:	5e                   	pop    esi
c000411f:	5f                   	pop    edi
c0004120:	5d                   	pop    ebp
c0004121:	c3                   	ret    

c0004122 <dir_find>:
c0004122:	55                   	push   ebp
c0004123:	31 d2                	xor    edx,edx
c0004125:	57                   	push   edi
c0004126:	56                   	push   esi
c0004127:	53                   	push   ebx
c0004128:	89 c3                	mov    ebx,eax
c000412a:	83 ec 1c             	sub    esp,0x1c
c000412d:	8b 30                	mov    esi,DWORD PTR [eax]
c000412f:	e8 89 f0 ff ff       	call   c00031bd <dir_sdi>
c0004134:	89 04 24             	mov    DWORD PTR [esp],eax
c0004137:	85 c0                	test   eax,eax
c0004139:	0f 85 9e 01 00 00    	jne    c00042dd <dir_find+0x1bb>
c000413f:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004142:	0f 85 8d 00 00 00    	jne    c00041d5 <dir_find+0xb3>
c0004148:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000414b:	e8 30 fe ff ff       	call   c0003f80 <xname_sum>
c0004150:	89 c7                	mov    edi,eax
c0004152:	31 d2                	xor    edx,edx
c0004154:	89 d8                	mov    eax,ebx
c0004156:	e8 72 f8 ff ff       	call   c00039cd <dir_read>
c000415b:	85 c0                	test   eax,eax
c000415d:	0f 85 5e 01 00 00    	jne    c00042c1 <dir_find+0x19f>
c0004163:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004166:	8d 41 24             	lea    eax,[ecx+0x24]
c0004169:	e8 f3 da ff ff       	call   c0001c61 <ld_word>
c000416e:	66 39 f8             	cmp    ax,di
c0004171:	75 df                	jne    c0004152 <dir_find+0x30>
c0004173:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004176:	31 ed                	xor    ebp,ebp
c0004178:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000417c:	ba 40 00 00 00       	mov    edx,0x40
c0004181:	89 e9                	mov    ecx,ebp
c0004183:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004187:	0f 84 42 01 00 00    	je     c00042cf <dir_find+0x1ad>
c000418d:	f6 c2 1f             	test   dl,0x1f
c0004190:	75 03                	jne    c0004195 <dir_find+0x73>
c0004192:	83 c2 02             	add    edx,0x2
c0004195:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004199:	89 d0                	mov    eax,edx
c000419b:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c000419e:	e8 be da ff ff       	call   c0001c61 <ld_word>
c00041a3:	83 ec 0c             	sub    esp,0xc
c00041a6:	0f b7 c0             	movzx  eax,ax
c00041a9:	50                   	push   eax
c00041aa:	e8 0e 44 00 00       	call   c00085bd <ff_wtoupper>
c00041af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00041b3:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041b6:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00041ba:	89 04 24             	mov    DWORD PTR [esp],eax
c00041bd:	e8 fb 43 00 00       	call   c00085bd <ff_wtoupper>
c00041c2:	83 c4 10             	add    esp,0x10
c00041c5:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00041c9:	75 87                	jne    c0004152 <dir_find+0x30>
c00041cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00041cf:	45                   	inc    ebp
c00041d0:	83 c2 02             	add    edx,0x2
c00041d3:	eb ac                	jmp    c0004181 <dir_find+0x5f>
c00041d5:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041dc:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041e1:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041e6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041e9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041ec:	89 f0                	mov    eax,esi
c00041ee:	e8 4c e2 ff ff       	call   c000243f <move_window>
c00041f3:	85 c0                	test   eax,eax
c00041f5:	0f 85 c6 00 00 00    	jne    c00042c1 <dir_find+0x19f>
c00041fb:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041fe:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0004201:	84 c9                	test   cl,cl
c0004203:	0f 84 bd 00 00 00    	je     c00042c6 <dir_find+0x1a4>
c0004209:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c000420c:	88 d0                	mov    al,dl
c000420e:	83 e0 3f             	and    eax,0x3f
c0004211:	80 f9 e5             	cmp    cl,0xe5
c0004214:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004217:	0f 84 87 00 00 00    	je     c00042a4 <dir_find+0x182>
c000421d:	80 e2 08             	and    dl,0x8
c0004220:	74 06                	je     c0004228 <dir_find+0x106>
c0004222:	3c 0f                	cmp    al,0xf
c0004224:	75 7e                	jne    c00042a4 <dir_find+0x182>
c0004226:	eb 04                	jmp    c000422c <dir_find+0x10a>
c0004228:	3c 0f                	cmp    al,0xf
c000422a:	75 4c                	jne    c0004278 <dir_find+0x156>
c000422c:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004230:	75 7e                	jne    c00042b0 <dir_find+0x18e>
c0004232:	f6 c1 40             	test   cl,0x40
c0004235:	74 12                	je     c0004249 <dir_find+0x127>
c0004237:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000423a:	83 e1 bf             	and    ecx,0xffffffbf
c000423d:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004241:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004244:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004247:	eb 06                	jmp    c000424f <dir_find+0x12d>
c0004249:	89 f8                	mov    eax,edi
c000424b:	38 c8                	cmp    al,cl
c000424d:	75 5c                	jne    c00042ab <dir_find+0x189>
c000424f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004253:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004258:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000425b:	75 53                	jne    c00042b0 <dir_find+0x18e>
c000425d:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004261:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004264:	89 ea                	mov    edx,ebp
c0004266:	e8 f4 fd ff ff       	call   c000405f <cmp_lfn>
c000426b:	85 c0                	test   eax,eax
c000426d:	74 41                	je     c00042b0 <dir_find+0x18e>
c000426f:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004273:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004276:	eb 38                	jmp    c00042b0 <dir_find+0x18e>
c0004278:	89 f8                	mov    eax,edi
c000427a:	84 c0                	test   al,al
c000427c:	75 0d                	jne    c000428b <dir_find+0x169>
c000427e:	89 e8                	mov    eax,ebp
c0004280:	e8 98 de ff ff       	call   c000211d <sum_sfn>
c0004285:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004289:	74 52                	je     c00042dd <dir_find+0x1bb>
c000428b:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c000428f:	75 13                	jne    c00042a4 <dir_find+0x182>
c0004291:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004294:	b9 0b 00 00 00       	mov    ecx,0xb
c0004299:	89 e8                	mov    eax,ebp
c000429b:	e8 60 da ff ff       	call   c0001d00 <mem_cmp>
c00042a0:	85 c0                	test   eax,eax
c00042a2:	74 39                	je     c00042dd <dir_find+0x1bb>
c00042a4:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00042ab:	bf ff ff ff ff       	mov    edi,0xffffffff
c00042b0:	31 d2                	xor    edx,edx
c00042b2:	89 d8                	mov    eax,ebx
c00042b4:	e8 5c f4 ff ff       	call   c0003715 <dir_next>
c00042b9:	85 c0                	test   eax,eax
c00042bb:	0f 84 25 ff ff ff    	je     c00041e6 <dir_find+0xc4>
c00042c1:	89 04 24             	mov    DWORD PTR [esp],eax
c00042c4:	eb 17                	jmp    c00042dd <dir_find+0x1bb>
c00042c6:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00042cd:	eb 0e                	jmp    c00042dd <dir_find+0x1bb>
c00042cf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00042d2:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00042d7:	0f 85 75 fe ff ff    	jne    c0004152 <dir_find+0x30>
c00042dd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042e0:	83 c4 1c             	add    esp,0x1c
c00042e3:	5b                   	pop    ebx
c00042e4:	5e                   	pop    esi
c00042e5:	5f                   	pop    edi
c00042e6:	5d                   	pop    ebp
c00042e7:	c3                   	ret    

c00042e8 <dir_register>:
c00042e8:	55                   	push   ebp
c00042e9:	57                   	push   edi
c00042ea:	56                   	push   esi
c00042eb:	be 06 00 00 00       	mov    esi,0x6
c00042f0:	53                   	push   ebx
c00042f1:	83 ec 6c             	sub    esp,0x6c
c00042f4:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042f8:	0f 85 62 02 00 00    	jne    c0004560 <dir_register+0x278>
c00042fe:	8b 28                	mov    ebp,DWORD PTR [eax]
c0004300:	31 ff                	xor    edi,edi
c0004302:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004305:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c000430a:	74 03                	je     c000430f <dir_register+0x27>
c000430c:	47                   	inc    edi
c000430d:	eb f6                	jmp    c0004305 <dir_register+0x1d>
c000430f:	89 c3                	mov    ebx,eax
c0004311:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004315:	0f 85 e1 00 00 00    	jne    c00043fc <dir_register+0x114>
c000431b:	83 c7 0e             	add    edi,0xe
c000431e:	b9 0f 00 00 00       	mov    ecx,0xf
c0004323:	89 f8                	mov    eax,edi
c0004325:	31 d2                	xor    edx,edx
c0004327:	f7 f1                	div    ecx
c0004329:	8d 50 02             	lea    edx,[eax+0x2]
c000432c:	89 c7                	mov    edi,eax
c000432e:	89 d8                	mov    eax,ebx
c0004330:	e8 12 f8 ff ff       	call   c0003b47 <dir_alloc>
c0004335:	89 c6                	mov    esi,eax
c0004337:	85 c0                	test   eax,eax
c0004339:	0f 85 21 02 00 00    	jne    c0004560 <dir_register+0x278>
c000433f:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004345:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004348:	c1 e7 05             	shl    edi,0x5
c000434b:	29 f8                	sub    eax,edi
c000434d:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004350:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004353:	a8 04                	test   al,0x4
c0004355:	0f 84 91 00 00 00    	je     c00043ec <dir_register+0x104>
c000435b:	83 e0 fb             	and    eax,0xfffffffb
c000435e:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004361:	89 d8                	mov    eax,ebx
c0004363:	e8 25 ec ff ff       	call   c0002f8d <fill_first_frag>
c0004368:	85 c0                	test   eax,eax
c000436a:	0f 85 ee 01 00 00    	jne    c000455e <dir_register+0x276>
c0004370:	83 c9 ff             	or     ecx,0xffffffff
c0004373:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004376:	89 d8                	mov    eax,ebx
c0004378:	e8 db eb ff ff       	call   c0002f58 <fill_last_frag>
c000437d:	85 c0                	test   eax,eax
c000437f:	0f 85 d9 01 00 00    	jne    c000455e <dir_register+0x276>
c0004385:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004389:	74 61                	je     c00043ec <dir_register+0x104>
c000438b:	89 da                	mov    edx,ebx
c000438d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004391:	e8 ea f5 ff ff       	call   c0003980 <load_obj_xdir>
c0004396:	85 c0                	test   eax,eax
c0004398:	0f 85 c0 01 00 00    	jne    c000455e <dir_register+0x276>
c000439e:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00043a2:	31 c9                	xor    ecx,ecx
c00043a4:	c1 e2 09             	shl    edx,0x9
c00043a7:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00043aa:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00043ad:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00043b0:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00043b3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b6:	83 c0 38             	add    eax,0x38
c00043b9:	e8 1c d9 ff ff       	call   c0001cda <st_qword>
c00043be:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043c1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043c4:	83 c0 28             	add    eax,0x28
c00043c7:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00043ca:	e8 0b d9 ff ff       	call   c0001cda <st_qword>
c00043cf:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00043d2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00043d5:	83 c8 01             	or     eax,0x1
c00043d8:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043db:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043df:	e8 db f7 ff ff       	call   c0003bbf <store_xdir>
c00043e4:	85 c0                	test   eax,eax
c00043e6:	0f 85 72 01 00 00    	jne    c000455e <dir_register+0x276>
c00043ec:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043ef:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043f2:	e8 c1 fb ff ff       	call   c0003fb8 <create_xdir>
c00043f7:	e9 64 01 00 00       	jmp    c0004560 <dir_register+0x278>
c00043fc:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043ff:	b9 0c 00 00 00       	mov    ecx,0xc
c0004404:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004408:	89 c2                	mov    edx,eax
c000440a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000440e:	e8 cd d8 ff ff       	call   c0001ce0 <mem_cpy>
c0004413:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004418:	74 58                	je     c0004472 <dir_register+0x18a>
c000441a:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c000441e:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004426:	83 ec 0c             	sub    esp,0xc
c0004429:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000442c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004430:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004434:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004438:	e8 24 dc ff ff       	call   c0002061 <gen_numname>
c000443d:	89 d8                	mov    eax,ebx
c000443f:	e8 de fc ff ff       	call   c0004122 <dir_find>
c0004444:	83 c4 10             	add    esp,0x10
c0004447:	89 c6                	mov    esi,eax
c0004449:	85 c0                	test   eax,eax
c000444b:	75 15                	jne    c0004462 <dir_register+0x17a>
c000444d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004451:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004456:	75 ce                	jne    c0004426 <dir_register+0x13e>
c0004458:	be 07 00 00 00       	mov    esi,0x7
c000445d:	e9 fe 00 00 00       	jmp    c0004560 <dir_register+0x278>
c0004462:	83 f8 04             	cmp    eax,0x4
c0004465:	0f 85 f5 00 00 00    	jne    c0004560 <dir_register+0x278>
c000446b:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000446f:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004472:	b9 01 00 00 00       	mov    ecx,0x1
c0004477:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000447c:	74 0f                	je     c000448d <dir_register+0x1a5>
c000447e:	b9 0d 00 00 00       	mov    ecx,0xd
c0004483:	8d 47 0c             	lea    eax,[edi+0xc]
c0004486:	31 d2                	xor    edx,edx
c0004488:	f7 f1                	div    ecx
c000448a:	8d 48 01             	lea    ecx,[eax+0x1]
c000448d:	89 ca                	mov    edx,ecx
c000448f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004493:	89 d8                	mov    eax,ebx
c0004495:	e8 ad f6 ff ff       	call   c0003b47 <dir_alloc>
c000449a:	89 c6                	mov    esi,eax
c000449c:	85 c0                	test   eax,eax
c000449e:	0f 85 bc 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044a4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00044a8:	49                   	dec    ecx
c00044a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00044ad:	74 6a                	je     c0004519 <dir_register+0x231>
c00044af:	89 c8                	mov    eax,ecx
c00044b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044b4:	c1 e0 05             	shl    eax,0x5
c00044b7:	29 c2                	sub    edx,eax
c00044b9:	89 d8                	mov    eax,ebx
c00044bb:	e8 fd ec ff ff       	call   c00031bd <dir_sdi>
c00044c0:	89 c6                	mov    esi,eax
c00044c2:	85 c0                	test   eax,eax
c00044c4:	0f 85 96 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00044ce:	e8 4a dc ff ff       	call   c000211d <sum_sfn>
c00044d3:	0f b6 f8             	movzx  edi,al
c00044d6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044d9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044dc:	89 e8                	mov    eax,ebp
c00044de:	e8 5c df ff ff       	call   c000243f <move_window>
c00044e3:	89 c6                	mov    esi,eax
c00044e5:	85 c0                	test   eax,eax
c00044e7:	75 77                	jne    c0004560 <dir_register+0x278>
c00044e9:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044ee:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044f1:	83 ec 0c             	sub    esp,0xc
c00044f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044f7:	57                   	push   edi
c00044f8:	e8 e0 da ff ff       	call   c0001fdd <put_lfn>
c00044fd:	31 d2                	xor    edx,edx
c00044ff:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004503:	89 d8                	mov    eax,ebx
c0004505:	e8 0b f2 ff ff       	call   c0003715 <dir_next>
c000450a:	83 c4 10             	add    esp,0x10
c000450d:	89 c6                	mov    esi,eax
c000450f:	85 c0                	test   eax,eax
c0004511:	75 4d                	jne    c0004560 <dir_register+0x278>
c0004513:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004517:	75 bd                	jne    c00044d6 <dir_register+0x1ee>
c0004519:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000451c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000451f:	89 e8                	mov    eax,ebp
c0004521:	e8 19 df ff ff       	call   c000243f <move_window>
c0004526:	89 c6                	mov    esi,eax
c0004528:	85 c0                	test   eax,eax
c000452a:	75 34                	jne    c0004560 <dir_register+0x278>
c000452c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000452f:	b9 20 00 00 00       	mov    ecx,0x20
c0004534:	31 d2                	xor    edx,edx
c0004536:	e8 ba d7 ff ff       	call   c0001cf5 <mem_set>
c000453b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000453e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004542:	b9 0b 00 00 00       	mov    ecx,0xb
c0004547:	e8 94 d7 ff ff       	call   c0001ce0 <mem_cpy>
c000454c:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000454f:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004552:	83 e0 18             	and    eax,0x18
c0004555:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004558:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000455c:	eb 02                	jmp    c0004560 <dir_register+0x278>
c000455e:	89 c6                	mov    esi,eax
c0004560:	83 c4 6c             	add    esp,0x6c
c0004563:	89 f0                	mov    eax,esi
c0004565:	5b                   	pop    ebx
c0004566:	5e                   	pop    esi
c0004567:	5f                   	pop    edi
c0004568:	5d                   	pop    ebp
c0004569:	c3                   	ret    

c000456a <sync_fs>:
c000456a:	56                   	push   esi
c000456b:	53                   	push   ebx
c000456c:	53                   	push   ebx
c000456d:	89 c3                	mov    ebx,eax
c000456f:	e8 37 de ff ff       	call   c00023ab <sync_window>
c0004574:	85 c0                	test   eax,eax
c0004576:	0f 85 b1 00 00 00    	jne    c000462d <sync_fs+0xc3>
c000457c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000457f:	0f 85 8e 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c0004585:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004589:	0f 85 84 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c000458f:	b9 00 02 00 00       	mov    ecx,0x200
c0004594:	8d 73 54             	lea    esi,[ebx+0x54]
c0004597:	31 d2                	xor    edx,edx
c0004599:	89 f0                	mov    eax,esi
c000459b:	e8 55 d7 ff ff       	call   c0001cf5 <mem_set>
c00045a0:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00045a6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00045ab:	e8 23 d7 ff ff       	call   c0001cd3 <st_word>
c00045b0:	ba 52 52 61 41       	mov    edx,0x41615252
c00045b5:	89 f0                	mov    eax,esi
c00045b7:	e8 1b d7 ff ff       	call   c0001cd7 <st_dword>
c00045bc:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00045c2:	ba 72 72 41 61       	mov    edx,0x61417272
c00045c7:	e8 0b d7 ff ff       	call   c0001cd7 <st_dword>
c00045cc:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00045cf:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00045d5:	e8 fd d6 ff ff       	call   c0001cd7 <st_dword>
c00045da:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045dd:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045e3:	e8 ef d6 ff ff       	call   c0001cd7 <st_dword>
c00045e8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045eb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045ee:	83 c0 01             	add    eax,0x1
c00045f1:	83 d2 00             	adc    edx,0x0
c00045f4:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045f7:	83 ec 0c             	sub    esp,0xc
c00045fa:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045fd:	6a 01                	push   0x1
c00045ff:	52                   	push   edx
c0004600:	50                   	push   eax
c0004601:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004605:	56                   	push   esi
c0004606:	50                   	push   eax
c0004607:	e8 20 d6 ff ff       	call   c0001c2c <disk_write>
c000460c:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0004610:	83 c4 20             	add    esp,0x20
c0004613:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004617:	51                   	push   ecx
c0004618:	6a 00                	push   0x0
c000461a:	6a 00                	push   0x0
c000461c:	50                   	push   eax
c000461d:	e8 20 d6 ff ff       	call   c0001c42 <disk_ioctl>
c0004622:	83 c4 10             	add    esp,0x10
c0004625:	85 c0                	test   eax,eax
c0004627:	0f 95 c0             	setne  al
c000462a:	0f b6 c0             	movzx  eax,al
c000462d:	5a                   	pop    edx
c000462e:	5b                   	pop    ebx
c000462f:	5e                   	pop    esi
c0004630:	c3                   	ret    

c0004631 <create_partition>:
c0004631:	55                   	push   ebp
c0004632:	0f b6 c0             	movzx  eax,al
c0004635:	57                   	push   edi
c0004636:	56                   	push   esi
c0004637:	53                   	push   ebx
c0004638:	83 ec 60             	sub    esp,0x60
c000463b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000463f:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004643:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004647:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000464b:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000464f:	50                   	push   eax
c0004650:	6a 01                	push   0x1
c0004652:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004656:	e8 e7 d5 ff ff       	call   c0001c42 <disk_ioctl>
c000465b:	83 c4 10             	add    esp,0x10
c000465e:	85 c0                	test   eax,eax
c0004660:	74 0a                	je     c000466c <create_partition+0x3b>
c0004662:	b8 01 00 00 00       	mov    eax,0x1
c0004667:	e9 67 05 00 00       	jmp    c0004bd3 <create_partition+0x5a2>
c000466c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004670:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004674:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004678:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000467c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004681:	0f 86 ed 03 00 00    	jbe    c0004a74 <create_partition+0x443>
c0004687:	83 c0 df             	add    eax,0xffffffdf
c000468a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004692:	83 d2 ff             	adc    edx,0xffffffff
c0004695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000469d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00046a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00046a5:	83 c0 bd             	add    eax,0xffffffbd
c00046a8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00046af:	83 d2 ff             	adc    edx,0xffffffff
c00046b2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00046b6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00046ba:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046c2:	be 22 00 00 00       	mov    esi,0x22
c00046c7:	31 ff                	xor    edi,edi
c00046c9:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00046d1:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00046d9:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046e1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046e5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046eb:	75 0e                	jne    c00046fb <create_partition+0xca>
c00046ed:	b9 00 02 00 00       	mov    ecx,0x200
c00046f2:	31 d2                	xor    edx,edx
c00046f4:	89 d8                	mov    eax,ebx
c00046f6:	e8 fa d5 ff ff       	call   c0001cf5 <mem_set>
c00046fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046ff:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0004703:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004707:	0b 04 24             	or     eax,DWORD PTR [esp]
c000470a:	0f 84 23 01 00 00    	je     c0004833 <create_partition+0x202>
c0004710:	89 f0                	mov    eax,esi
c0004712:	89 fa                	mov    edx,edi
c0004714:	05 ff 07 00 00       	add    eax,0x7ff
c0004719:	83 d2 00             	adc    edx,0x0
c000471c:	89 c1                	mov    ecx,eax
c000471e:	89 d7                	mov    edi,edx
c0004720:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004726:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000472a:	89 ce                	mov    esi,ecx
c000472c:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004730:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004734:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004738:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c000473b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000473f:	89 04 24             	mov    DWORD PTR [esp],eax
c0004742:	b8 64 00 00 00       	mov    eax,0x64
c0004747:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000474a:	b8 00 00 00 00       	mov    eax,0x0
c000474f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004753:	72 41                	jb     c0004796 <create_partition+0x165>
c0004755:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004759:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000475d:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004761:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004766:	01 c1                	add    ecx,eax
c0004768:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000476c:	f7 24 24             	mul    DWORD PTR [esp]
c000476f:	6a 00                	push   0x0
c0004771:	01 ca                	add    edx,ecx
c0004773:	6a 64                	push   0x64
c0004775:	52                   	push   edx
c0004776:	50                   	push   eax
c0004777:	e8 00 21 02 00       	call   c002687c <__udivdi3>
c000477c:	83 c4 10             	add    esp,0x10
c000477f:	05 ff 07 00 00       	add    eax,0x7ff
c0004784:	83 d2 00             	adc    edx,0x0
c0004787:	89 c1                	mov    ecx,eax
c0004789:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000478d:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004793:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004796:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004799:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000479d:	01 f0                	add    eax,esi
c000479f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047a3:	11 fa                	adc    edx,edi
c00047a5:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00047a9:	19 d1                	sbb    ecx,edx
c00047ab:	73 2e                	jae    c00047db <create_partition+0x1aa>
c00047ad:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00047b1:	89 f8                	mov    eax,edi
c00047b3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00047ba:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00047be:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00047c6:	73 6b                	jae    c0004833 <create_partition+0x202>
c00047c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00047cc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00047d0:	29 f0                	sub    eax,esi
c00047d2:	19 fa                	sbb    edx,edi
c00047d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00047d7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047df:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047e2:	74 4f                	je     c0004833 <create_partition+0x202>
c00047e4:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047e7:	b9 10 00 00 00       	mov    ecx,0x10
c00047ec:	ba 10 93 02 c0       	mov    edx,0xc0029310
c00047f1:	e8 ea d4 ff ff       	call   c0001ce0 <mem_cpy>
c00047f6:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047fa:	b9 10 00 00 00       	mov    ecx,0x10
c00047ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004803:	e8 2c db ff ff       	call   c0002334 <make_rand>
c0004808:	89 f2                	mov    edx,esi
c000480a:	89 f9                	mov    ecx,edi
c000480c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004810:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004814:	e8 c1 d4 ff ff       	call   c0001cda <st_qword>
c0004819:	03 34 24             	add    esi,DWORD PTR [esp]
c000481c:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004820:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004824:	89 f2                	mov    edx,esi
c0004826:	89 f9                	mov    ecx,edi
c0004828:	83 c2 ff             	add    edx,0xffffffff
c000482b:	83 d1 ff             	adc    ecx,0xffffffff
c000482e:	e8 a7 d4 ff ff       	call   c0001cda <st_qword>
c0004833:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004837:	83 e8 80             	sub    eax,0xffffff80
c000483a:	89 c5                	mov    ebp,eax
c000483c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004840:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004846:	75 6b                	jne    c00048b3 <create_partition+0x282>
c0004848:	45                   	inc    ebp
c0004849:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000484d:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004852:	e8 39 da ff ff       	call   c0002290 <crc32>
c0004857:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000485d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004861:	75 e5                	jne    c0004848 <create_partition+0x217>
c0004863:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004867:	31 d2                	xor    edx,edx
c0004869:	83 ec 0c             	sub    esp,0xc
c000486c:	c1 ed 09             	shr    ebp,0x9
c000486f:	6a 01                	push   0x1
c0004871:	8d 45 02             	lea    eax,[ebp+0x2]
c0004874:	52                   	push   edx
c0004875:	50                   	push   eax
c0004876:	53                   	push   ebx
c0004877:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000487b:	e8 ac d3 ff ff       	call   c0001c2c <disk_write>
c0004880:	83 c4 20             	add    esp,0x20
c0004883:	85 c0                	test   eax,eax
c0004885:	0f 85 d7 fd ff ff    	jne    c0004662 <create_partition+0x31>
c000488b:	83 ec 0c             	sub    esp,0xc
c000488e:	31 d2                	xor    edx,edx
c0004890:	6a 01                	push   0x1
c0004892:	89 e8                	mov    eax,ebp
c0004894:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004898:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000489c:	52                   	push   edx
c000489d:	50                   	push   eax
c000489e:	53                   	push   ebx
c000489f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048a3:	e8 84 d3 ff ff       	call   c0001c2c <disk_write>
c00048a8:	83 c4 20             	add    esp,0x20
c00048ab:	85 c0                	test   eax,eax
c00048ad:	0f 85 af fd ff ff    	jne    c0004662 <create_partition+0x31>
c00048b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00048b7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00048bb:	3d 00 40 00 00       	cmp    eax,0x4000
c00048c0:	74 0d                	je     c00048cf <create_partition+0x29e>
c00048c2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00048c6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048ca:	e9 12 fe ff ff       	jmp    c00046e1 <create_partition+0xb0>
c00048cf:	31 d2                	xor    edx,edx
c00048d1:	b9 00 02 00 00       	mov    ecx,0x200
c00048d6:	89 d8                	mov    eax,ebx
c00048d8:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048db:	e8 15 d4 ff ff       	call   c0001cf5 <mem_set>
c00048e0:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048e3:	b9 10 00 00 00       	mov    ecx,0x10
c00048e8:	ba 00 92 02 c0       	mov    edx,0xc0029200
c00048ed:	89 d8                	mov    eax,ebx
c00048ef:	e8 ec d3 ff ff       	call   c0001ce0 <mem_cpy>
c00048f4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048f8:	8d 43 58             	lea    eax,[ebx+0x58]
c00048fb:	f7 d2                	not    edx
c00048fd:	e8 d5 d3 ff ff       	call   c0001cd7 <st_dword>
c0004902:	8d 43 18             	lea    eax,[ebx+0x18]
c0004905:	31 c9                	xor    ecx,ecx
c0004907:	89 04 24             	mov    DWORD PTR [esp],eax
c000490a:	ba 01 00 00 00       	mov    edx,0x1
c000490f:	e8 c6 d3 ff ff       	call   c0001cda <st_qword>
c0004914:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004918:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000491c:	83 c2 ff             	add    edx,0xffffffff
c000491f:	89 e8                	mov    eax,ebp
c0004921:	83 d1 ff             	adc    ecx,0xffffffff
c0004924:	e8 b1 d3 ff ff       	call   c0001cda <st_qword>
c0004929:	31 c9                	xor    ecx,ecx
c000492b:	8d 43 28             	lea    eax,[ebx+0x28]
c000492e:	ba 22 00 00 00       	mov    edx,0x22
c0004933:	e8 a2 d3 ff ff       	call   c0001cda <st_qword>
c0004938:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000493c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004940:	83 c2 de             	add    edx,0xffffffde
c0004943:	8d 43 30             	lea    eax,[ebx+0x30]
c0004946:	83 d1 ff             	adc    ecx,0xffffffff
c0004949:	31 f6                	xor    esi,esi
c000494b:	e8 8a d3 ff ff       	call   c0001cda <st_qword>
c0004950:	8d 43 54             	lea    eax,[ebx+0x54]
c0004953:	ba 80 00 00 00       	mov    edx,0x80
c0004958:	e8 7a d3 ff ff       	call   c0001cd7 <st_dword>
c000495d:	8d 43 50             	lea    eax,[ebx+0x50]
c0004960:	ba 80 00 00 00       	mov    edx,0x80
c0004965:	e8 6d d3 ff ff       	call   c0001cd7 <st_dword>
c000496a:	ba 02 00 00 00       	mov    edx,0x2
c000496f:	89 f8                	mov    eax,edi
c0004971:	e8 61 d3 ff ff       	call   c0001cd7 <st_dword>
c0004976:	8d 53 38             	lea    edx,[ebx+0x38]
c0004979:	b9 10 00 00 00       	mov    ecx,0x10
c000497e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004982:	e8 ad d9 ff ff       	call   c0002334 <make_rand>
c0004987:	83 c8 ff             	or     eax,0xffffffff
c000498a:	46                   	inc    esi
c000498b:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004990:	e8 fb d8 ff ff       	call   c0002290 <crc32>
c0004995:	83 fe 5c             	cmp    esi,0x5c
c0004998:	75 f0                	jne    c000498a <create_partition+0x359>
c000499a:	f7 d0                	not    eax
c000499c:	8d 73 10             	lea    esi,[ebx+0x10]
c000499f:	89 c2                	mov    edx,eax
c00049a1:	89 f0                	mov    eax,esi
c00049a3:	e8 2f d3 ff ff       	call   c0001cd7 <st_dword>
c00049a8:	83 ec 0c             	sub    esp,0xc
c00049ab:	6a 01                	push   0x1
c00049ad:	6a 00                	push   0x0
c00049af:	6a 01                	push   0x1
c00049b1:	53                   	push   ebx
c00049b2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00049b6:	e8 71 d2 ff ff       	call   c0001c2c <disk_write>
c00049bb:	83 c4 20             	add    esp,0x20
c00049be:	85 c0                	test   eax,eax
c00049c0:	0f 85 9c fc ff ff    	jne    c0004662 <create_partition+0x31>
c00049c6:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00049ca:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00049ce:	83 c2 ff             	add    edx,0xffffffff
c00049d1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049d4:	83 d1 ff             	adc    ecx,0xffffffff
c00049d7:	e8 fe d2 ff ff       	call   c0001cda <st_qword>
c00049dc:	ba 01 00 00 00       	mov    edx,0x1
c00049e1:	31 c9                	xor    ecx,ecx
c00049e3:	89 e8                	mov    eax,ebp
c00049e5:	e8 f0 d2 ff ff       	call   c0001cda <st_qword>
c00049ea:	89 f8                	mov    eax,edi
c00049ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049f0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049f4:	31 ff                	xor    edi,edi
c00049f6:	e8 df d2 ff ff       	call   c0001cda <st_qword>
c00049fb:	89 f0                	mov    eax,esi
c00049fd:	31 d2                	xor    edx,edx
c00049ff:	e8 d3 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a04:	83 c8 ff             	or     eax,0xffffffff
c0004a07:	47                   	inc    edi
c0004a08:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004a0d:	e8 7e d8 ff ff       	call   c0002290 <crc32>
c0004a12:	83 ff 5c             	cmp    edi,0x5c
c0004a15:	75 f0                	jne    c0004a07 <create_partition+0x3d6>
c0004a17:	f7 d0                	not    eax
c0004a19:	89 c2                	mov    edx,eax
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	e8 b5 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a22:	83 ec 0c             	sub    esp,0xc
c0004a25:	6a 01                	push   0x1
c0004a27:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004a2b:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004a2f:	83 c0 ff             	add    eax,0xffffffff
c0004a32:	83 d2 ff             	adc    edx,0xffffffff
c0004a35:	52                   	push   edx
c0004a36:	50                   	push   eax
c0004a37:	53                   	push   ebx
c0004a38:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a3c:	e8 eb d1 ff ff       	call   c0001c2c <disk_write>
c0004a41:	83 c4 20             	add    esp,0x20
c0004a44:	85 c0                	test   eax,eax
c0004a46:	0f 85 16 fc ff ff    	jne    c0004662 <create_partition+0x31>
c0004a4c:	31 d2                	xor    edx,edx
c0004a4e:	89 d8                	mov    eax,ebx
c0004a50:	b9 00 02 00 00       	mov    ecx,0x200
c0004a55:	e8 9b d2 ff ff       	call   c0001cf5 <mem_set>
c0004a5a:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a60:	b9 10 00 00 00       	mov    ecx,0x10
c0004a65:	ba 10 92 02 c0       	mov    edx,0xc0029210
c0004a6a:	e8 71 d2 ff ff       	call   c0001ce0 <mem_cpy>
c0004a6f:	e9 21 01 00 00       	jmp    c0004b95 <create_partition+0x564>
c0004a74:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a78:	b9 05 00 00 00       	mov    ecx,0x5
c0004a7d:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a80:	bf 08 00 00 00       	mov    edi,0x8
c0004a85:	89 f8                	mov    eax,edi
c0004a87:	31 d2                	xor    edx,edx
c0004a89:	0f b6 f0             	movzx  esi,al
c0004a8c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a8f:	f7 f6                	div    esi
c0004a91:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a96:	76 0a                	jbe    c0004aa2 <create_partition+0x471>
c0004a98:	d1 e7                	shl    edi,1
c0004a9a:	49                   	dec    ecx
c0004a9b:	75 e8                	jne    c0004a85 <create_partition+0x454>
c0004a9d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004aa2:	b9 00 02 00 00       	mov    ecx,0x200
c0004aa7:	31 d2                	xor    edx,edx
c0004aa9:	89 d8                	mov    eax,ebx
c0004aab:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004ab1:	e8 3f d2 ff ff       	call   c0001cf5 <mem_set>
c0004ab6:	b9 64 00 00 00       	mov    ecx,0x64
c0004abb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004abe:	31 d2                	xor    edx,edx
c0004ac0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004ac8:	f7 f1                	div    ecx
c0004aca:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004acf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ad3:	89 f8                	mov    eax,edi
c0004ad5:	0f b6 c0             	movzx  eax,al
c0004ad8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004adc:	e9 80 00 00 00       	jmp    c0004b61 <create_partition+0x530>
c0004ae1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004ae4:	29 cf                	sub    edi,ecx
c0004ae6:	89 ca                	mov    edx,ecx
c0004ae8:	89 f0                	mov    eax,esi
c0004aea:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004aef:	e8 e3 d1 ff ff       	call   c0001cd7 <st_dword>
c0004af4:	8d 46 04             	lea    eax,[esi+0x4]
c0004af7:	89 fa                	mov    edx,edi
c0004af9:	83 c6 10             	add    esi,0x10
c0004afc:	e8 d6 d1 ff ff       	call   c0001cd7 <st_dword>
c0004b01:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004b05:	31 d2                	xor    edx,edx
c0004b07:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004b0a:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004b0e:	89 c8                	mov    eax,ecx
c0004b10:	01 f9                	add    ecx,edi
c0004b12:	f7 f5                	div    ebp
c0004b14:	89 d5                	mov    ebp,edx
c0004b16:	31 d2                	xor    edx,edx
c0004b18:	45                   	inc    ebp
c0004b19:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b1d:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004b20:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004b23:	89 c2                	mov    edx,eax
c0004b25:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004b28:	c1 ea 02             	shr    edx,0x2
c0004b2b:	83 e2 c0             	and    edx,0xffffffc0
c0004b2e:	09 ea                	or     edx,ebp
c0004b30:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b35:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004b38:	31 d2                	xor    edx,edx
c0004b3a:	f7 f5                	div    ebp
c0004b3c:	89 d7                	mov    edi,edx
c0004b3e:	31 d2                	xor    edx,edx
c0004b40:	47                   	inc    edi
c0004b41:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b45:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b48:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b4b:	89 c5                	mov    ebp,eax
c0004b4d:	c1 ed 02             	shr    ebp,0x2
c0004b50:	83 e5 c0             	and    ebp,0xffffffc0
c0004b53:	09 ef                	or     edi,ebp
c0004b55:	89 fa                	mov    edx,edi
c0004b57:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b5a:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b5f:	74 34                	je     c0004b95 <create_partition+0x564>
c0004b61:	85 c9                	test   ecx,ecx
c0004b63:	74 30                	je     c0004b95 <create_partition+0x564>
c0004b65:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b68:	76 2b                	jbe    c0004b95 <create_partition+0x564>
c0004b6a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b6e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b72:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b75:	83 ff 64             	cmp    edi,0x64
c0004b78:	76 4b                	jbe    c0004bc5 <create_partition+0x594>
c0004b7a:	89 f8                	mov    eax,edi
c0004b7c:	01 c8                	add    eax,ecx
c0004b7e:	0f 82 5d ff ff ff    	jb     c0004ae1 <create_partition+0x4b0>
c0004b84:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b87:	0f 87 54 ff ff ff    	ja     c0004ae1 <create_partition+0x4b0>
c0004b8d:	85 ff                	test   edi,edi
c0004b8f:	0f 85 51 ff ff ff    	jne    c0004ae6 <create_partition+0x4b5>
c0004b95:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b9b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004ba0:	e8 2e d1 ff ff       	call   c0001cd3 <st_word>
c0004ba5:	83 ec 0c             	sub    esp,0xc
c0004ba8:	6a 01                	push   0x1
c0004baa:	6a 00                	push   0x0
c0004bac:	6a 00                	push   0x0
c0004bae:	53                   	push   ebx
c0004baf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004bb3:	e8 74 d0 ff ff       	call   c0001c2c <disk_write>
c0004bb8:	83 c4 20             	add    esp,0x20
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	0f 95 c0             	setne  al
c0004bc0:	0f b6 c0             	movzx  eax,al
c0004bc3:	eb 0e                	jmp    c0004bd3 <create_partition+0x5a2>
c0004bc5:	74 07                	je     c0004bce <create_partition+0x59d>
c0004bc7:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004bcc:	eb ac                	jmp    c0004b7a <create_partition+0x549>
c0004bce:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004bd1:	eb a7                	jmp    c0004b7a <create_partition+0x549>
c0004bd3:	83 c4 5c             	add    esp,0x5c
c0004bd6:	5b                   	pop    ebx
c0004bd7:	5e                   	pop    esi
c0004bd8:	5f                   	pop    edi
c0004bd9:	5d                   	pop    ebp
c0004bda:	c3                   	ret    

c0004bdb <get_fileinfo>:
c0004bdb:	55                   	push   ebp
c0004bdc:	57                   	push   edi
c0004bdd:	56                   	push   esi
c0004bde:	53                   	push   ebx
c0004bdf:	83 ec 1c             	sub    esp,0x1c
c0004be2:	8b 30                	mov    esi,DWORD PTR [eax]
c0004be4:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004be8:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bec:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bef:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bf2:	0f 84 dc 01 00 00    	je     c0004dd4 <get_fileinfo+0x1f9>
c0004bf8:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bfb:	75 0f                	jne    c0004c0c <get_fileinfo+0x31>
c0004bfd:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004c00:	83 c4 1c             	add    esp,0x1c
c0004c03:	5b                   	pop    ebx
c0004c04:	5e                   	pop    esi
c0004c05:	5f                   	pop    edi
c0004c06:	5d                   	pop    ebp
c0004c07:	e9 58 d5 ff ff       	jmp    c0002164 <get_xfileinfo>
c0004c0c:	89 d3                	mov    ebx,edx
c0004c0e:	89 c6                	mov    esi,eax
c0004c10:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004c14:	74 6a                	je     c0004c80 <get_fileinfo+0xa5>
c0004c16:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004c1e:	31 ed                	xor    ebp,ebp
c0004c20:	31 ff                	xor    edi,edi
c0004c22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004c26:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004c2a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004c2d:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004c31:	66 85 d2             	test   dx,dx
c0004c34:	74 3e                	je     c0004c74 <get_fileinfo+0x99>
c0004c36:	66 85 ed             	test   bp,bp
c0004c39:	75 0c                	jne    c0004c47 <get_fileinfo+0x6c>
c0004c3b:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c41:	66 3d ff 07          	cmp    ax,0x7ff
c0004c45:	76 22                	jbe    c0004c69 <get_fileinfo+0x8e>
c0004c47:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c4c:	89 e8                	mov    eax,ebp
c0004c4e:	29 f9                	sub    ecx,edi
c0004c50:	c1 e0 10             	shl    eax,0x10
c0004c53:	09 d0                	or     eax,edx
c0004c55:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c59:	e8 a3 d1 ff ff       	call   c0001e01 <put_utf>
c0004c5e:	84 c0                	test   al,al
c0004c60:	74 10                	je     c0004c72 <get_fileinfo+0x97>
c0004c62:	0f b6 c0             	movzx  eax,al
c0004c65:	31 d2                	xor    edx,edx
c0004c67:	01 c7                	add    edi,eax
c0004c69:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c6e:	89 d5                	mov    ebp,edx
c0004c70:	eb b0                	jmp    c0004c22 <get_fileinfo+0x47>
c0004c72:	31 ff                	xor    edi,edi
c0004c74:	66 85 ed             	test   bp,bp
c0004c77:	74 02                	je     c0004c7b <get_fileinfo+0xa0>
c0004c79:	31 ff                	xor    edi,edi
c0004c7b:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c80:	31 ff                	xor    edi,edi
c0004c82:	31 c9                	xor    ecx,ecx
c0004c84:	83 f9 0a             	cmp    ecx,0xa
c0004c87:	0f 87 ad 00 00 00    	ja     c0004d3a <get_fileinfo+0x15f>
c0004c8d:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c90:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c93:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c97:	66 83 fa 20          	cmp    dx,0x20
c0004c9b:	0f 84 92 00 00 00    	je     c0004d33 <get_fileinfo+0x158>
c0004ca1:	66 83 fa 05          	cmp    dx,0x5
c0004ca5:	75 05                	jne    c0004cac <get_fileinfo+0xd1>
c0004ca7:	ba e5 00 00 00       	mov    edx,0xe5
c0004cac:	83 ff 0b             	cmp    edi,0xb
c0004caf:	77 0b                	ja     c0004cbc <get_fileinfo+0xe1>
c0004cb1:	83 fd 09             	cmp    ebp,0x9
c0004cb4:	75 06                	jne    c0004cbc <get_fileinfo+0xe1>
c0004cb6:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004cbb:	47                   	inc    edi
c0004cbc:	0f b7 c2             	movzx  eax,dx
c0004cbf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cc3:	e8 6d d0 ff ff       	call   c0001d35 <dbc_1st>
c0004cc8:	85 c0                	test   eax,eax
c0004cca:	74 2f                	je     c0004cfb <get_fileinfo+0x120>
c0004ccc:	83 fd 08             	cmp    ebp,0x8
c0004ccf:	74 2a                	je     c0004cfb <get_fileinfo+0x120>
c0004cd1:	83 fd 0b             	cmp    ebp,0xb
c0004cd4:	74 25                	je     c0004cfb <get_fileinfo+0x120>
c0004cd6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cd9:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004cdd:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ce1:	e8 52 d0 ff ff       	call   c0001d38 <dbc_2nd>
c0004ce6:	85 c0                	test   eax,eax
c0004ce8:	74 11                	je     c0004cfb <get_fileinfo+0x120>
c0004cea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cee:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cf3:	c1 e2 08             	shl    edx,0x8
c0004cf6:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cf9:	09 c2                	or     edx,eax
c0004cfb:	0f b7 d2             	movzx  edx,dx
c0004cfe:	50                   	push   eax
c0004cff:	50                   	push   eax
c0004d00:	68 b5 01 00 00       	push   0x1b5
c0004d05:	52                   	push   edx
c0004d06:	e8 46 38 00 00       	call   c0008551 <ff_oem2uni>
c0004d0b:	83 c4 10             	add    esp,0x10
c0004d0e:	66 85 c0             	test   ax,ax
c0004d11:	75 04                	jne    c0004d17 <get_fileinfo+0x13c>
c0004d13:	31 ff                	xor    edi,edi
c0004d15:	eb 23                	jmp    c0004d3a <get_fileinfo+0x15f>
c0004d17:	b9 0c 00 00 00       	mov    ecx,0xc
c0004d1c:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004d20:	29 f9                	sub    ecx,edi
c0004d22:	0f b7 c0             	movzx  eax,ax
c0004d25:	e8 d7 d0 ff ff       	call   c0001e01 <put_utf>
c0004d2a:	84 c0                	test   al,al
c0004d2c:	74 e5                	je     c0004d13 <get_fileinfo+0x138>
c0004d2e:	0f b6 c0             	movzx  eax,al
c0004d31:	01 c7                	add    edi,eax
c0004d33:	89 e9                	mov    ecx,ebp
c0004d35:	e9 4a ff ff ff       	jmp    c0004c84 <get_fileinfo+0xa9>
c0004d3a:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d3f:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d43:	75 54                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d45:	85 ff                	test   edi,edi
c0004d47:	75 0b                	jne    c0004d54 <get_fileinfo+0x179>
c0004d49:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d4d:	ba 01 00 00 00       	mov    edx,0x1
c0004d52:	eb 33                	jmp    c0004d87 <get_fileinfo+0x1ac>
c0004d54:	b1 08                	mov    cl,0x8
c0004d56:	31 d2                	xor    edx,edx
c0004d58:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d5e:	84 c0                	test   al,al
c0004d60:	74 25                	je     c0004d87 <get_fileinfo+0x1ac>
c0004d62:	66 83 f8 2e          	cmp    ax,0x2e
c0004d66:	74 16                	je     c0004d7e <get_fileinfo+0x1a3>
c0004d68:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d6b:	66 83 ff 19          	cmp    di,0x19
c0004d6f:	77 0f                	ja     c0004d80 <get_fileinfo+0x1a5>
c0004d71:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d74:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d77:	74 07                	je     c0004d80 <get_fileinfo+0x1a5>
c0004d79:	83 c0 20             	add    eax,0x20
c0004d7c:	eb 02                	jmp    c0004d80 <get_fileinfo+0x1a5>
c0004d7e:	b1 10                	mov    cl,0x10
c0004d80:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d84:	42                   	inc    edx
c0004d85:	eb d1                	jmp    c0004d58 <get_fileinfo+0x17d>
c0004d87:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d8c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8f:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d93:	75 04                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d95:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d99:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d9c:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d9f:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004da2:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004da5:	83 c0 1c             	add    eax,0x1c
c0004da8:	e8 c1 ce ff ff       	call   c0001c6e <ld_dword>
c0004dad:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004db4:	89 03                	mov    DWORD PTR [ebx],eax
c0004db6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004db9:	83 c0 16             	add    eax,0x16
c0004dbc:	e8 a0 ce ff ff       	call   c0001c61 <ld_word>
c0004dc1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004dc5:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dc8:	83 c0 18             	add    eax,0x18
c0004dcb:	e8 91 ce ff ff       	call   c0001c61 <ld_word>
c0004dd0:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004dd4:	83 c4 1c             	add    esp,0x1c
c0004dd7:	5b                   	pop    ebx
c0004dd8:	5e                   	pop    esi
c0004dd9:	5f                   	pop    edi
c0004dda:	5d                   	pop    ebp
c0004ddb:	c3                   	ret    

c0004ddc <ld_clust.isra.0>:
c0004ddc:	56                   	push   esi
c0004ddd:	89 c6                	mov    esi,eax
c0004ddf:	53                   	push   ebx
c0004de0:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004de3:	89 d3                	mov    ebx,edx
c0004de5:	e8 77 ce ff ff       	call   c0001c61 <ld_word>
c0004dea:	0f b7 c8             	movzx  ecx,ax
c0004ded:	89 f0                	mov    eax,esi
c0004def:	3c 03                	cmp    al,0x3
c0004df1:	75 0d                	jne    c0004e00 <ld_clust.isra.0+0x24>
c0004df3:	8d 43 14             	lea    eax,[ebx+0x14]
c0004df6:	e8 66 ce ff ff       	call   c0001c61 <ld_word>
c0004dfb:	c1 e0 10             	shl    eax,0x10
c0004dfe:	09 c1                	or     ecx,eax
c0004e00:	89 c8                	mov    eax,ecx
c0004e02:	5b                   	pop    ebx
c0004e03:	5e                   	pop    esi
c0004e04:	c3                   	ret    

c0004e05 <st_clust.isra.1>:
c0004e05:	56                   	push   esi
c0004e06:	89 c6                	mov    esi,eax
c0004e08:	53                   	push   ebx
c0004e09:	89 d3                	mov    ebx,edx
c0004e0b:	0f b7 d1             	movzx  edx,cx
c0004e0e:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004e11:	e8 bd ce ff ff       	call   c0001cd3 <st_word>
c0004e16:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004e19:	75 0f                	jne    c0004e2a <st_clust.isra.1+0x25>
c0004e1b:	c1 e9 10             	shr    ecx,0x10
c0004e1e:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e21:	89 ca                	mov    edx,ecx
c0004e23:	5b                   	pop    ebx
c0004e24:	5e                   	pop    esi
c0004e25:	e9 a9 ce ff ff       	jmp    c0001cd3 <st_word>
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <init_alloc_info.isra.2>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c6                	mov    esi,eax
c0004e31:	89 d3                	mov    ebx,edx
c0004e33:	51                   	push   ecx
c0004e34:	8b 00                	mov    eax,DWORD PTR [eax]
c0004e36:	83 c0 34             	add    eax,0x34
c0004e39:	e8 30 ce ff ff       	call   c0001c6e <ld_dword>
c0004e3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e41:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e43:	83 c0 38             	add    eax,0x38
c0004e46:	e8 3b ce ff ff       	call   c0001c86 <ld_qword>
c0004e4b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e4e:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e51:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e53:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e56:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5d:	83 e0 02             	and    eax,0x2
c0004e60:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e63:	5b                   	pop    ebx
c0004e64:	5b                   	pop    ebx
c0004e65:	5e                   	pop    esi
c0004e66:	c3                   	ret    

c0004e67 <follow_path>:
c0004e67:	56                   	push   esi
c0004e68:	53                   	push   ebx
c0004e69:	89 c3                	mov    ebx,eax
c0004e6b:	83 ec 14             	sub    esp,0x14
c0004e6e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e72:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e78:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e7a:	80 fa 5c             	cmp    dl,0x5c
c0004e7d:	75 07                	jne    c0004e86 <follow_path+0x1f>
c0004e7f:	40                   	inc    eax
c0004e80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e84:	eb ee                	jmp    c0004e74 <follow_path+0xd>
c0004e86:	80 fa 2f             	cmp    dl,0x2f
c0004e89:	74 f4                	je     c0004e7f <follow_path+0x18>
c0004e8b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e92:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e99:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e9c:	77 52                	ja     c0004ef0 <follow_path+0x89>
c0004e9e:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004ea2:	31 d2                	xor    edx,edx
c0004ea4:	89 d8                	mov    eax,ebx
c0004ea6:	e8 12 e3 ff ff       	call   c00031bd <dir_sdi>
c0004eab:	eb 7c                	jmp    c0004f29 <follow_path+0xc2>
c0004ead:	89 d8                	mov    eax,ebx
c0004eaf:	e8 6e f2 ff ff       	call   c0004122 <dir_find>
c0004eb4:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004eb7:	85 c0                	test   eax,eax
c0004eb9:	75 46                	jne    c0004f01 <follow_path+0x9a>
c0004ebb:	80 e2 04             	and    dl,0x4
c0004ebe:	75 69                	jne    c0004f29 <follow_path+0xc2>
c0004ec0:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004ec4:	74 5e                	je     c0004f24 <follow_path+0xbd>
c0004ec6:	8a 06                	mov    al,BYTE PTR [esi]
c0004ec8:	3c 04                	cmp    al,0x4
c0004eca:	75 41                	jne    c0004f0d <follow_path+0xa6>
c0004ecc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004ecf:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004ed3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004ed6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004ed9:	30 c0                	xor    al,al
c0004edb:	09 d0                	or     eax,edx
c0004edd:	89 da                	mov    edx,ebx
c0004edf:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ee2:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ee5:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004ee8:	8d 46 10             	lea    eax,[esi+0x10]
c0004eeb:	e8 3d ff ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0004ef0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004ef4:	89 d8                	mov    eax,ebx
c0004ef6:	e8 a9 ed ff ff       	call   c0003ca4 <create_name>
c0004efb:	85 c0                	test   eax,eax
c0004efd:	74 ae                	je     c0004ead <follow_path+0x46>
c0004eff:	eb 28                	jmp    c0004f29 <follow_path+0xc2>
c0004f01:	83 f8 04             	cmp    eax,0x4
c0004f04:	75 23                	jne    c0004f29 <follow_path+0xc2>
c0004f06:	80 e2 04             	and    dl,0x4
c0004f09:	74 19                	je     c0004f24 <follow_path+0xbd>
c0004f0b:	eb 1c                	jmp    c0004f29 <follow_path+0xc2>
c0004f0d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004f10:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004f16:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004f1a:	e8 bd fe ff ff       	call   c0004ddc <ld_clust.isra.0>
c0004f1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f22:	eb cc                	jmp    c0004ef0 <follow_path+0x89>
c0004f24:	b8 05 00 00 00       	mov    eax,0x5
c0004f29:	83 c4 14             	add    esp,0x14
c0004f2c:	5b                   	pop    ebx
c0004f2d:	5e                   	pop    esi
c0004f2e:	c3                   	ret    

c0004f2f <f_mount>:
c0004f2f:	53                   	push   ebx
c0004f30:	83 ec 18             	sub    esp,0x18
c0004f33:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004f37:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f3f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f43:	e8 fb d2 ff ff       	call   c0002243 <get_ldnumber>
c0004f48:	89 c2                	mov    edx,eax
c0004f4a:	b8 0b 00 00 00       	mov    eax,0xb
c0004f4f:	85 d2                	test   edx,edx
c0004f51:	78 39                	js     c0004f8c <f_mount+0x5d>
c0004f53:	8b 04 95 e0 e1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1e20]
c0004f5a:	85 c0                	test   eax,eax
c0004f5c:	74 03                	je     c0004f61 <f_mount+0x32>
c0004f5e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f65:	85 c0                	test   eax,eax
c0004f67:	74 03                	je     c0004f6c <f_mount+0x3d>
c0004f69:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f70:	89 04 95 e0 e1 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1e20],eax
c0004f77:	31 c0                	xor    eax,eax
c0004f79:	84 db                	test   bl,bl
c0004f7b:	74 0f                	je     c0004f8c <f_mount+0x5d>
c0004f7d:	31 c9                	xor    ecx,ecx
c0004f7f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f83:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f87:	e8 65 d7 ff ff       	call   c00026f1 <mount_volume>
c0004f8c:	83 c4 18             	add    esp,0x18
c0004f8f:	5b                   	pop    ebx
c0004f90:	c3                   	ret    

c0004f91 <f_open>:
c0004f91:	55                   	push   ebp
c0004f92:	bd 09 00 00 00       	mov    ebp,0x9
c0004f97:	57                   	push   edi
c0004f98:	56                   	push   esi
c0004f99:	53                   	push   ebx
c0004f9a:	83 ec 7c             	sub    esp,0x7c
c0004f9d:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004fa4:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004fab:	85 db                	test   ebx,ebx
c0004fad:	0f 84 10 04 00 00    	je     c00053c3 <f_open+0x432>
c0004fb3:	89 fe                	mov    esi,edi
c0004fb5:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004fb9:	83 e6 3f             	and    esi,0x3f
c0004fbc:	89 f0                	mov    eax,esi
c0004fbe:	0f b6 c8             	movzx  ecx,al
c0004fc1:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004fc8:	e8 24 d7 ff ff       	call   c00026f1 <mount_volume>
c0004fcd:	89 c5                	mov    ebp,eax
c0004fcf:	85 c0                	test   eax,eax
c0004fd1:	0f 85 e6 03 00 00    	jne    c00053bd <f_open+0x42c>
c0004fd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fdb:	bd 11 00 00 00       	mov    ebp,0x11
c0004fe0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fe4:	83 ec 0c             	sub    esp,0xc
c0004fe7:	68 60 04 00 00       	push   0x460
c0004fec:	e8 a3 34 00 00       	call   c0008494 <ff_memalloc>
c0004ff1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ff5:	83 c4 10             	add    esp,0x10
c0004ff8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004ffd:	0f 84 c0 03 00 00    	je     c00053c3 <f_open+0x432>
c0005003:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005007:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000500b:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0005011:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0005014:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005017:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c000501e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005022:	e8 40 fe ff ff       	call   c0004e67 <follow_path>
c0005027:	89 c5                	mov    ebp,eax
c0005029:	85 c0                	test   eax,eax
c000502b:	75 0c                	jne    c0005039 <f_open+0xa8>
c000502d:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0005032:	79 05                	jns    c0005039 <f_open+0xa8>
c0005034:	bd 06 00 00 00       	mov    ebp,0x6
c0005039:	f7 c7 1c 00 00 00    	test   edi,0x1c
c000503f:	0f 84 84 01 00 00    	je     c00051c9 <f_open+0x238>
c0005045:	85 ed                	test   ebp,ebp
c0005047:	74 20                	je     c0005069 <f_open+0xd8>
c0005049:	83 fd 04             	cmp    ebp,0x4
c000504c:	0f 85 58 03 00 00    	jne    c00053aa <f_open+0x419>
c0005052:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005056:	83 ce 08             	or     esi,0x8
c0005059:	e8 8a f2 ff ff       	call   c00042e8 <dir_register>
c000505e:	89 c5                	mov    ebp,eax
c0005060:	85 c0                	test   eax,eax
c0005062:	74 2f                	je     c0005093 <f_open+0x102>
c0005064:	e9 41 03 00 00       	jmp    c00053aa <f_open+0x419>
c0005069:	bd 07 00 00 00       	mov    ebp,0x7
c000506e:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005073:	0f 85 31 03 00 00    	jne    c00053aa <f_open+0x419>
c0005079:	bd 08 00 00 00       	mov    ebp,0x8
c000507e:	f7 c7 04 00 00 00    	test   edi,0x4
c0005084:	0f 85 20 03 00 00    	jne    c00053aa <f_open+0x419>
c000508a:	83 e7 08             	and    edi,0x8
c000508d:	0f 84 65 01 00 00    	je     c00051f8 <f_open+0x267>
c0005093:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005097:	8a 02                	mov    al,BYTE PTR [edx]
c0005099:	3c 04                	cmp    al,0x4
c000509b:	0f 85 97 00 00 00    	jne    c0005138 <f_open+0x1a7>
c00050a1:	8d 42 10             	lea    eax,[edx+0x10]
c00050a4:	89 13                	mov    DWORD PTR [ebx],edx
c00050a6:	89 da                	mov    edx,ebx
c00050a8:	e8 80 fd ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c00050ad:	31 d2                	xor    edx,edx
c00050af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b3:	b9 1e 00 00 00       	mov    ecx,0x1e
c00050b8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050bb:	83 c0 02             	add    eax,0x2
c00050be:	e8 32 cc ff ff       	call   c0001cf5 <mem_set>
c00050c3:	b9 1a 00 00 00       	mov    ecx,0x1a
c00050c8:	31 d2                	xor    edx,edx
c00050ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050ce:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050d1:	83 c0 26             	add    eax,0x26
c00050d4:	e8 1c cc ff ff       	call   c0001cf5 <mem_set>
c00050d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050e0:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050e4:	ba 00 00 21 50       	mov    edx,0x50210000
c00050e9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050ec:	83 c0 08             	add    eax,0x8
c00050ef:	e8 e3 cb ff ff       	call   c0001cd7 <st_dword>
c00050f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050fb:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050ff:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005103:	e8 b7 ea ff ff       	call   c0003bbf <store_xdir>
c0005108:	89 c5                	mov    ebp,eax
c000510a:	85 c0                	test   eax,eax
c000510c:	0f 85 98 02 00 00    	jne    c00053aa <f_open+0x419>
c0005112:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005115:	85 d2                	test   edx,edx
c0005117:	0f 84 db 00 00 00    	je     c00051f8 <f_open+0x267>
c000511d:	31 c9                	xor    ecx,ecx
c000511f:	89 d8                	mov    eax,ebx
c0005121:	e8 8e e3 ff ff       	call   c00034b4 <remove_chain>
c0005126:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000512a:	89 c5                	mov    ebp,eax
c000512c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000512f:	48                   	dec    eax
c0005130:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005133:	e9 b8 00 00 00       	jmp    c00051f0 <f_open+0x25f>
c0005138:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000513c:	89 ea                	mov    edx,ebp
c000513e:	e8 99 fc ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005143:	ba 00 00 21 50       	mov    edx,0x50210000
c0005148:	89 c7                	mov    edi,eax
c000514a:	8d 45 0e             	lea    eax,[ebp+0xe]
c000514d:	e8 85 cb ff ff       	call   c0001cd7 <st_dword>
c0005152:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005156:	31 c9                	xor    ecx,ecx
c0005158:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c000515c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005160:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0005164:	e8 9c fc ff ff       	call   c0004e05 <st_clust.isra.1>
c0005169:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000516d:	31 d2                	xor    edx,edx
c000516f:	83 c0 1c             	add    eax,0x1c
c0005172:	e8 60 cb ff ff       	call   c0001cd7 <st_dword>
c0005177:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517b:	85 ff                	test   edi,edi
c000517d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005181:	74 75                	je     c00051f8 <f_open+0x267>
c0005183:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005187:	31 c9                	xor    ecx,ecx
c0005189:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c000518c:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000518f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005193:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005197:	89 fa                	mov    edx,edi
c0005199:	8d 44 24 24          	lea    eax,[esp+0x24]
c000519d:	e8 12 e3 ff ff       	call   c00034b4 <remove_chain>
c00051a2:	89 c5                	mov    ebp,eax
c00051a4:	85 c0                	test   eax,eax
c00051a6:	0f 85 fe 01 00 00    	jne    c00053aa <f_open+0x419>
c00051ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00051b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051b8:	4f                   	dec    edi
c00051b9:	e8 81 d2 ff ff       	call   c000243f <move_window>
c00051be:	89 c5                	mov    ebp,eax
c00051c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051c4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00051c7:	eb 27                	jmp    c00051f0 <f_open+0x25f>
c00051c9:	85 ed                	test   ebp,ebp
c00051cb:	0f 85 d9 01 00 00    	jne    c00053aa <f_open+0x419>
c00051d1:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00051d5:	bd 04 00 00 00       	mov    ebp,0x4
c00051da:	a8 10                	test   al,0x10
c00051dc:	0f 85 c8 01 00 00    	jne    c00053aa <f_open+0x419>
c00051e2:	83 e7 02             	and    edi,0x2
c00051e5:	74 11                	je     c00051f8 <f_open+0x267>
c00051e7:	bd 07 00 00 00       	mov    ebp,0x7
c00051ec:	a8 01                	test   al,0x1
c00051ee:	eb 02                	jmp    c00051f2 <f_open+0x261>
c00051f0:	85 ed                	test   ebp,ebp
c00051f2:	0f 85 b2 01 00 00    	jne    c00053aa <f_open+0x419>
c00051f8:	f7 c6 08 00 00 00    	test   esi,0x8
c00051fe:	74 03                	je     c0005203 <f_open+0x272>
c0005200:	83 ce 40             	or     esi,0x40
c0005203:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005207:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c000520a:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c000520d:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0005210:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0005213:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005217:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c000521a:	8a 02                	mov    al,BYTE PTR [edx]
c000521c:	3c 04                	cmp    al,0x4
c000521e:	75 2a                	jne    c000524a <f_open+0x2b9>
c0005220:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005224:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005229:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000522c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005230:	30 c0                	xor    al,al
c0005232:	09 c8                	or     eax,ecx
c0005234:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005237:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000523b:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000523e:	8d 42 10             	lea    eax,[edx+0x10]
c0005241:	89 da                	mov    edx,ebx
c0005243:	e8 e5 fb ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0005248:	eb 1c                	jmp    c0005266 <f_open+0x2d5>
c000524a:	89 fa                	mov    edx,edi
c000524c:	e8 8b fb ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005251:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005254:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005257:	e8 12 ca ff ff       	call   c0001c6e <ld_dword>
c000525c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005263:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005266:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000526a:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005271:	89 03                	mov    DWORD PTR [ebx],eax
c0005273:	31 d2                	xor    edx,edx
c0005275:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005279:	b9 00 02 00 00       	mov    ecx,0x200
c000527e:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005282:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005286:	89 f0                	mov    eax,esi
c0005288:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000528f:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005292:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005299:	8d 43 50             	lea    eax,[ebx+0x50]
c000529c:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c00052a3:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00052aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00052ae:	e8 42 ca ff ff       	call   c0001cf5 <mem_set>
c00052b3:	83 e6 20             	and    esi,0x20
c00052b6:	75 07                	jne    c00052bf <f_open+0x32e>
c00052b8:	31 ed                	xor    ebp,ebp
c00052ba:	e9 eb 00 00 00       	jmp    c00053aa <f_open+0x419>
c00052bf:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00052c2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00052c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00052cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00052d1:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00052d5:	74 e1                	je     c00052b8 <f_open+0x327>
c00052d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052df:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052e2:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052e9:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052ec:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052f0:	31 ff                	xor    edi,edi
c00052f2:	c1 e5 09             	shl    ebp,0x9
c00052f5:	89 ee                	mov    esi,ebp
c00052f7:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052fb:	89 f8                	mov    eax,edi
c00052fd:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005301:	73 22                	jae    c0005325 <f_open+0x394>
c0005303:	89 d8                	mov    eax,ebx
c0005305:	e8 bd dc ff ff       	call   c0002fc7 <get_fat>
c000530a:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000530e:	89 c2                	mov    edx,eax
c0005310:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005314:	83 f8 01             	cmp    eax,0x1
c0005317:	76 10                	jbe    c0005329 <f_open+0x398>
c0005319:	83 f8 ff             	cmp    eax,0xffffffff
c000531c:	75 d9                	jne    c00052f7 <f_open+0x366>
c000531e:	bd 01 00 00 00       	mov    ebp,0x1
c0005323:	eb 09                	jmp    c000532e <f_open+0x39d>
c0005325:	31 ed                	xor    ebp,ebp
c0005327:	eb 05                	jmp    c000532e <f_open+0x39d>
c0005329:	bd 02 00 00 00       	mov    ebp,0x2
c000532e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005331:	85 ed                	test   ebp,ebp
c0005333:	75 75                	jne    c00053aa <f_open+0x419>
c0005335:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005339:	25 ff 01 00 00       	and    eax,0x1ff
c000533e:	0f 84 74 ff ff ff    	je     c00052b8 <f_open+0x327>
c0005344:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005348:	bd 02 00 00 00       	mov    ebp,0x2
c000534d:	89 c8                	mov    eax,ecx
c000534f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005353:	e8 a2 cb ff ff       	call   c0001efa <clst2sect>
c0005358:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000535c:	89 d7                	mov    edi,edx
c000535e:	09 c7                	or     edi,eax
c0005360:	74 48                	je     c00053aa <f_open+0x419>
c0005362:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005366:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000536a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005372:	0f ac fe 09          	shrd   esi,edi,0x9
c0005376:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000537a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000537e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005381:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005385:	83 ec 0c             	sub    esp,0xc
c0005388:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000538b:	6a 01                	push   0x1
c000538d:	52                   	push   edx
c000538e:	50                   	push   eax
c000538f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005393:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005397:	50                   	push   eax
c0005398:	e8 79 c8 ff ff       	call   c0001c16 <disk_read>
c000539d:	83 c4 20             	add    esp,0x20
c00053a0:	85 c0                	test   eax,eax
c00053a2:	0f 95 c0             	setne  al
c00053a5:	0f b6 c0             	movzx  eax,al
c00053a8:	89 c5                	mov    ebp,eax
c00053aa:	83 ec 0c             	sub    esp,0xc
c00053ad:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00053b1:	e8 f4 30 00 00       	call   c00084aa <ff_memfree>
c00053b6:	83 c4 10             	add    esp,0x10
c00053b9:	85 ed                	test   ebp,ebp
c00053bb:	74 06                	je     c00053c3 <f_open+0x432>
c00053bd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00053c3:	83 c4 7c             	add    esp,0x7c
c00053c6:	89 e8                	mov    eax,ebp
c00053c8:	5b                   	pop    ebx
c00053c9:	5e                   	pop    esi
c00053ca:	5f                   	pop    edi
c00053cb:	5d                   	pop    ebp
c00053cc:	c3                   	ret    

c00053cd <f_read>:
c00053cd:	55                   	push   ebp
c00053ce:	57                   	push   edi
c00053cf:	56                   	push   esi
c00053d0:	53                   	push   ebx
c00053d1:	83 ec 2c             	sub    esp,0x2c
c00053d4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053d8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053dc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053e6:	89 d8                	mov    eax,ebx
c00053e8:	e8 77 cf ff ff       	call   c0002364 <validate>
c00053ed:	89 c5                	mov    ebp,eax
c00053ef:	85 c0                	test   eax,eax
c00053f1:	0f 85 4c 02 00 00    	jne    c0005643 <f_read+0x276>
c00053f7:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053fb:	85 ed                	test   ebp,ebp
c00053fd:	0f 85 40 02 00 00    	jne    c0005643 <f_read+0x276>
c0005403:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005407:	0f 84 31 02 00 00    	je     c000563e <f_read+0x271>
c000540d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005410:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005413:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005416:	bf 00 00 00 00       	mov    edi,0x0
c000541b:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000541e:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0005422:	89 d1                	mov    ecx,edx
c0005424:	19 f9                	sbb    ecx,edi
c0005426:	0f 83 cf 00 00 00    	jae    c00054fb <f_read+0x12e>
c000542c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005430:	e9 c6 00 00 00       	jmp    c00054fb <f_read+0x12e>
c0005435:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005438:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000543b:	89 d0                	mov    eax,edx
c000543d:	25 ff 01 00 00       	and    eax,0x1ff
c0005442:	0f 85 c9 01 00 00    	jne    c0005611 <f_read+0x244>
c0005448:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000544c:	89 d6                	mov    esi,edx
c000544e:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005452:	89 cf                	mov    edi,ecx
c0005454:	48                   	dec    eax
c0005455:	0f ac fe 09          	shrd   esi,edi,0x9
c0005459:	21 f0                	and    eax,esi
c000545b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000545f:	0f 84 a6 00 00 00    	je     c000550b <f_read+0x13e>
c0005465:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005469:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000546c:	89 c8                	mov    eax,ecx
c000546e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005471:	e8 84 ca ff ff       	call   c0001efa <clst2sect>
c0005476:	89 d7                	mov    edi,edx
c0005478:	09 c7                	or     edi,eax
c000547a:	0f 84 b4 00 00 00    	je     c0005534 <f_read+0x167>
c0005480:	31 ff                	xor    edi,edi
c0005482:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005486:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005489:	01 c6                	add    esi,eax
c000548b:	11 d7                	adc    edi,edx
c000548d:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005495:	0f 86 fd 00 00 00    	jbe    c0005598 <f_read+0x1cb>
c000549b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000549f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054a3:	c1 e8 09             	shr    eax,0x9
c00054a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00054a9:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054ad:	03 14 24             	add    edx,DWORD PTR [esp]
c00054b0:	39 c2                	cmp    edx,eax
c00054b2:	76 07                	jbe    c00054bb <f_read+0xee>
c00054b4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054b8:	89 04 24             	mov    DWORD PTR [esp],eax
c00054bb:	83 ec 0c             	sub    esp,0xc
c00054be:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00054c2:	57                   	push   edi
c00054c3:	56                   	push   esi
c00054c4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00054c8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054cc:	50                   	push   eax
c00054cd:	e8 44 c7 ff ff       	call   c0001c16 <disk_read>
c00054d2:	83 c4 20             	add    esp,0x20
c00054d5:	85 c0                	test   eax,eax
c00054d7:	75 6e                	jne    c0005547 <f_read+0x17a>
c00054d9:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054dd:	78 7e                	js     c000555d <f_read+0x190>
c00054df:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054e2:	c1 e6 09             	shl    esi,0x9
c00054e5:	31 ff                	xor    edi,edi
c00054e7:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054eb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054ef:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054f3:	01 30                	add    DWORD PTR [eax],esi
c00054f5:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054f8:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054fb:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005500:	0f 85 2f ff ff ff    	jne    c0005435 <f_read+0x68>
c0005506:	e9 38 01 00 00       	jmp    c0005643 <f_read+0x276>
c000550b:	89 c8                	mov    eax,ecx
c000550d:	09 d0                	or     eax,edx
c000550f:	75 05                	jne    c0005516 <f_read+0x149>
c0005511:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005514:	eb 19                	jmp    c000552f <f_read+0x162>
c0005516:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000551a:	74 09                	je     c0005525 <f_read+0x158>
c000551c:	89 d8                	mov    eax,ebx
c000551e:	e8 f8 c9 ff ff       	call   c0001f1b <clmt_clust>
c0005523:	eb 0a                	jmp    c000552f <f_read+0x162>
c0005525:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005528:	89 d8                	mov    eax,ebx
c000552a:	e8 98 da ff ff       	call   c0002fc7 <get_fat>
c000552f:	83 f8 01             	cmp    eax,0x1
c0005532:	77 0e                	ja     c0005542 <f_read+0x175>
c0005534:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005538:	bd 02 00 00 00       	mov    ebp,0x2
c000553d:	e9 01 01 00 00       	jmp    c0005643 <f_read+0x276>
c0005542:	83 f8 ff             	cmp    eax,0xffffffff
c0005545:	75 0e                	jne    c0005555 <f_read+0x188>
c0005547:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000554b:	bd 01 00 00 00       	mov    ebp,0x1
c0005550:	e9 ee 00 00 00       	jmp    c0005643 <f_read+0x276>
c0005555:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005558:	e9 08 ff ff ff       	jmp    c0005465 <f_read+0x98>
c000555d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005560:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005563:	29 f0                	sub    eax,esi
c0005565:	19 fa                	sbb    edx,edi
c0005567:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000556a:	89 d7                	mov    edi,edx
c000556c:	ba 00 00 00 00       	mov    edx,0x0
c0005571:	89 f9                	mov    ecx,edi
c0005573:	19 d1                	sbb    ecx,edx
c0005575:	0f 83 64 ff ff ff    	jae    c00054df <f_read+0x112>
c000557b:	89 c7                	mov    edi,eax
c000557d:	8d 53 50             	lea    edx,[ebx+0x50]
c0005580:	c1 e7 09             	shl    edi,0x9
c0005583:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005587:	b9 00 02 00 00       	mov    ecx,0x200
c000558c:	01 f8                	add    eax,edi
c000558e:	e8 4d c7 ff ff       	call   c0001ce0 <mem_cpy>
c0005593:	e9 47 ff ff ff       	jmp    c00054df <f_read+0x112>
c0005598:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000559b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000559e:	89 04 24             	mov    DWORD PTR [esp],eax
c00055a1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00055a5:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00055a9:	75 05                	jne    c00055b0 <f_read+0x1e3>
c00055ab:	39 34 24             	cmp    DWORD PTR [esp],esi
c00055ae:	74 5b                	je     c000560b <f_read+0x23e>
c00055b0:	8d 43 50             	lea    eax,[ebx+0x50]
c00055b3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055bb:	79 2a                	jns    c00055e7 <f_read+0x21a>
c00055bd:	83 ec 0c             	sub    esp,0xc
c00055c0:	6a 01                	push   0x1
c00055c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055ce:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055d2:	50                   	push   eax
c00055d3:	e8 54 c6 ff ff       	call   c0001c2c <disk_write>
c00055d8:	83 c4 20             	add    esp,0x20
c00055db:	85 c0                	test   eax,eax
c00055dd:	0f 85 64 ff ff ff    	jne    c0005547 <f_read+0x17a>
c00055e3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055e7:	83 ec 0c             	sub    esp,0xc
c00055ea:	6a 01                	push   0x1
c00055ec:	57                   	push   edi
c00055ed:	56                   	push   esi
c00055ee:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055f2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055fa:	50                   	push   eax
c00055fb:	e8 16 c6 ff ff       	call   c0001c16 <disk_read>
c0005600:	83 c4 20             	add    esp,0x20
c0005603:	85 c0                	test   eax,eax
c0005605:	0f 85 3c ff ff ff    	jne    c0005547 <f_read+0x17a>
c000560b:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000560e:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005611:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005614:	ba 00 02 00 00       	mov    edx,0x200
c0005619:	25 ff 01 00 00       	and    eax,0x1ff
c000561e:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005622:	29 c2                	sub    edx,eax
c0005624:	39 d6                	cmp    esi,edx
c0005626:	76 02                	jbe    c000562a <f_read+0x25d>
c0005628:	89 d6                	mov    esi,edx
c000562a:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c000562e:	89 f1                	mov    ecx,esi
c0005630:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005634:	e8 a7 c6 ff ff       	call   c0001ce0 <mem_cpy>
c0005639:	e9 a7 fe ff ff       	jmp    c00054e5 <f_read+0x118>
c000563e:	bd 07 00 00 00       	mov    ebp,0x7
c0005643:	83 c4 2c             	add    esp,0x2c
c0005646:	89 e8                	mov    eax,ebp
c0005648:	5b                   	pop    ebx
c0005649:	5e                   	pop    esi
c000564a:	5f                   	pop    edi
c000564b:	5d                   	pop    ebp
c000564c:	c3                   	ret    

c000564d <f_write>:
c000564d:	55                   	push   ebp
c000564e:	57                   	push   edi
c000564f:	56                   	push   esi
c0005650:	53                   	push   ebx
c0005651:	83 ec 2c             	sub    esp,0x2c
c0005654:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005658:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000565c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005662:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005666:	89 d8                	mov    eax,ebx
c0005668:	e8 f7 cc ff ff       	call   c0002364 <validate>
c000566d:	89 c5                	mov    ebp,eax
c000566f:	85 c0                	test   eax,eax
c0005671:	0f 85 86 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005677:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000567b:	85 ed                	test   ebp,ebp
c000567d:	0f 85 7a 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005683:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005687:	0f 84 6b 02 00 00    	je     c00058f8 <f_write+0x2ab>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005694:	0f 84 43 01 00 00    	je     c00057dd <f_write+0x190>
c000569a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000569d:	89 c1                	mov    ecx,eax
c000569f:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00056a3:	0f 83 34 01 00 00    	jae    c00057dd <f_write+0x190>
c00056a9:	f7 d0                	not    eax
c00056ab:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00056af:	e9 29 01 00 00       	jmp    c00057dd <f_write+0x190>
c00056b4:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00056b7:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00056ba:	89 d0                	mov    eax,edx
c00056bc:	25 ff 01 00 00       	and    eax,0x1ff
c00056c1:	0f 85 00 02 00 00    	jne    c00058c7 <f_write+0x27a>
c00056c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056cb:	89 d6                	mov    esi,edx
c00056cd:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00056d1:	89 cf                	mov    edi,ecx
c00056d3:	48                   	dec    eax
c00056d4:	0f ac fe 09          	shrd   esi,edi,0x9
c00056d8:	21 f0                	and    eax,esi
c00056da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056de:	0f 84 06 01 00 00    	je     c00057ea <f_write+0x19d>
c00056e4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056e8:	0f 88 6e 01 00 00    	js     c000585c <f_write+0x20f>
c00056ee:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056f2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056f5:	89 c8                	mov    eax,ecx
c00056f7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056fb:	e8 fa c7 ff ff       	call   c0001efa <clst2sect>
c0005700:	89 d1                	mov    ecx,edx
c0005702:	09 c1                	or     ecx,eax
c0005704:	0f 84 1c 01 00 00    	je     c0005826 <f_write+0x1d9>
c000570a:	31 ff                	xor    edi,edi
c000570c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005710:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005714:	01 c6                	add    esi,eax
c0005716:	11 d7                	adc    edi,edx
c0005718:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005720:	0f 86 63 01 00 00    	jbe    c0005889 <f_write+0x23c>
c0005726:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000572a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000572e:	c1 e8 09             	shr    eax,0x9
c0005731:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005735:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005739:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000573d:	39 c2                	cmp    edx,eax
c000573f:	76 08                	jbe    c0005749 <f_write+0xfc>
c0005741:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005745:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005749:	83 ec 0c             	sub    esp,0xc
c000574c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005750:	57                   	push   edi
c0005751:	56                   	push   esi
c0005752:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005756:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000575a:	50                   	push   eax
c000575b:	e8 cc c4 ff ff       	call   c0001c2c <disk_write>
c0005760:	83 c4 20             	add    esp,0x20
c0005763:	85 c0                	test   eax,eax
c0005765:	0f 85 ce 00 00 00    	jne    c0005839 <f_write+0x1ec>
c000576b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000576e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005771:	29 f0                	sub    eax,esi
c0005773:	19 fa                	sbb    edx,edi
c0005775:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005779:	89 d7                	mov    edi,edx
c000577b:	ba 00 00 00 00       	mov    edx,0x0
c0005780:	89 f9                	mov    ecx,edi
c0005782:	19 d1                	sbb    ecx,edx
c0005784:	73 1c                	jae    c00057a2 <f_write+0x155>
c0005786:	89 c7                	mov    edi,eax
c0005788:	b9 00 02 00 00       	mov    ecx,0x200
c000578d:	c1 e7 09             	shl    edi,0x9
c0005790:	8d 43 50             	lea    eax,[ebx+0x50]
c0005793:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005797:	89 fa                	mov    edx,edi
c0005799:	e8 42 c5 ff ff       	call   c0001ce0 <mem_cpy>
c000579e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00057a2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00057a6:	c1 e6 09             	shl    esi,0x9
c00057a9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00057ad:	31 ff                	xor    edi,edi
c00057af:	01 30                	add    DWORD PTR [eax],esi
c00057b1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00057b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00057b9:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057bc:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00057bf:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00057c2:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00057c5:	89 c1                	mov    ecx,eax
c00057c7:	39 f2                	cmp    edx,esi
c00057c9:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00057cc:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00057cf:	19 f9                	sbb    ecx,edi
c00057d1:	73 04                	jae    c00057d7 <f_write+0x18a>
c00057d3:	89 f2                	mov    edx,esi
c00057d5:	89 f8                	mov    eax,edi
c00057d7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057da:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057dd:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057e2:	0f 85 cc fe ff ff    	jne    c00056b4 <f_write+0x67>
c00057e8:	eb 2e                	jmp    c0005818 <f_write+0x1cb>
c00057ea:	89 c8                	mov    eax,ecx
c00057ec:	09 d0                	or     eax,edx
c00057ee:	75 0b                	jne    c00057fb <f_write+0x1ae>
c00057f0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057f3:	31 d2                	xor    edx,edx
c00057f5:	85 c0                	test   eax,eax
c00057f7:	75 28                	jne    c0005821 <f_write+0x1d4>
c00057f9:	eb 12                	jmp    c000580d <f_write+0x1c0>
c00057fb:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057ff:	74 09                	je     c000580a <f_write+0x1bd>
c0005801:	89 d8                	mov    eax,ebx
c0005803:	e8 13 c7 ff ff       	call   c0001f1b <clmt_clust>
c0005808:	eb 0a                	jmp    c0005814 <f_write+0x1c7>
c000580a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000580d:	89 d8                	mov    eax,ebx
c000580f:	e8 a1 da ff ff       	call   c00032b5 <create_chain>
c0005814:	85 c0                	test   eax,eax
c0005816:	75 09                	jne    c0005821 <f_write+0x1d4>
c0005818:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000581c:	e9 dc 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005821:	83 f8 01             	cmp    eax,0x1
c0005824:	75 0e                	jne    c0005834 <f_write+0x1e7>
c0005826:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000582a:	bd 02 00 00 00       	mov    ebp,0x2
c000582f:	e9 c9 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005834:	83 f8 ff             	cmp    eax,0xffffffff
c0005837:	75 0e                	jne    c0005847 <f_write+0x1fa>
c0005839:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000583d:	bd 01 00 00 00       	mov    ebp,0x1
c0005842:	e9 b6 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005847:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000584a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000584e:	0f 85 90 fe ff ff    	jne    c00056e4 <f_write+0x97>
c0005854:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005857:	e9 88 fe ff ff       	jmp    c00056e4 <f_write+0x97>
c000585c:	83 ec 0c             	sub    esp,0xc
c000585f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005862:	6a 01                	push   0x1
c0005864:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005867:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000586a:	50                   	push   eax
c000586b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000586f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005873:	50                   	push   eax
c0005874:	e8 b3 c3 ff ff       	call   c0001c2c <disk_write>
c0005879:	83 c4 20             	add    esp,0x20
c000587c:	85 c0                	test   eax,eax
c000587e:	75 b9                	jne    c0005839 <f_write+0x1ec>
c0005880:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005884:	e9 65 fe ff ff       	jmp    c00056ee <f_write+0xa1>
c0005889:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000588c:	75 05                	jne    c0005893 <f_write+0x246>
c000588e:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005891:	74 2e                	je     c00058c1 <f_write+0x274>
c0005893:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005896:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005899:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000589c:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c000589f:	73 20                	jae    c00058c1 <f_write+0x274>
c00058a1:	83 ec 0c             	sub    esp,0xc
c00058a4:	8d 43 50             	lea    eax,[ebx+0x50]
c00058a7:	6a 01                	push   0x1
c00058a9:	57                   	push   edi
c00058aa:	56                   	push   esi
c00058ab:	50                   	push   eax
c00058ac:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00058b0:	50                   	push   eax
c00058b1:	e8 60 c3 ff ff       	call   c0001c16 <disk_read>
c00058b6:	83 c4 20             	add    esp,0x20
c00058b9:	85 c0                	test   eax,eax
c00058bb:	0f 85 78 ff ff ff    	jne    c0005839 <f_write+0x1ec>
c00058c1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00058c4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00058c7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00058ca:	ba 00 02 00 00       	mov    edx,0x200
c00058cf:	25 ff 01 00 00       	and    eax,0x1ff
c00058d4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00058d8:	29 c2                	sub    edx,eax
c00058da:	39 d6                	cmp    esi,edx
c00058dc:	76 02                	jbe    c00058e0 <f_write+0x293>
c00058de:	89 d6                	mov    esi,edx
c00058e0:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058e4:	89 f1                	mov    ecx,esi
c00058e6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058ea:	e8 f1 c3 ff ff       	call   c0001ce0 <mem_cpy>
c00058ef:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058f3:	e9 b1 fe ff ff       	jmp    c00057a9 <f_write+0x15c>
c00058f8:	bd 07 00 00 00       	mov    ebp,0x7
c00058fd:	83 c4 2c             	add    esp,0x2c
c0005900:	89 e8                	mov    eax,ebp
c0005902:	5b                   	pop    ebx
c0005903:	5e                   	pop    esi
c0005904:	5f                   	pop    edi
c0005905:	5d                   	pop    ebp
c0005906:	c3                   	ret    

c0005907 <f_sync>:
c0005907:	56                   	push   esi
c0005908:	53                   	push   ebx
c0005909:	83 ec 64             	sub    esp,0x64
c000590c:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0005910:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005914:	89 d8                	mov    eax,ebx
c0005916:	e8 49 ca ff ff       	call   c0002364 <validate>
c000591b:	85 c0                	test   eax,eax
c000591d:	0f 85 ba 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005923:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005926:	f6 c2 40             	test   dl,0x40
c0005929:	0f 84 ae 01 00 00    	je     c0005add <f_sync+0x1d6>
c000592f:	84 d2                	test   dl,dl
c0005931:	79 33                	jns    c0005966 <f_sync+0x5f>
c0005933:	83 ec 0c             	sub    esp,0xc
c0005936:	8d 43 50             	lea    eax,[ebx+0x50]
c0005939:	6a 01                	push   0x1
c000593b:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000593e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005941:	50                   	push   eax
c0005942:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005946:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000594a:	50                   	push   eax
c000594b:	e8 dc c2 ff ff       	call   c0001c2c <disk_write>
c0005950:	83 c4 20             	add    esp,0x20
c0005953:	89 c2                	mov    edx,eax
c0005955:	b8 01 00 00 00       	mov    eax,0x1
c000595a:	85 d2                	test   edx,edx
c000595c:	0f 85 7b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005962:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005966:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000596a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000596d:	0f 85 11 01 00 00    	jne    c0005a84 <f_sync+0x17d>
c0005973:	89 d8                	mov    eax,ebx
c0005975:	e8 13 d6 ff ff       	call   c0002f8d <fill_first_frag>
c000597a:	85 c0                	test   eax,eax
c000597c:	0f 85 5b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005982:	83 c9 ff             	or     ecx,0xffffffff
c0005985:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005988:	89 d8                	mov    eax,ebx
c000598a:	e8 c9 d5 ff ff       	call   c0002f58 <fill_last_frag>
c000598f:	85 c0                	test   eax,eax
c0005991:	0f 85 46 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005997:	83 ec 0c             	sub    esp,0xc
c000599a:	68 60 04 00 00       	push   0x460
c000599f:	e8 f0 2a 00 00       	call   c0008494 <ff_memalloc>
c00059a4:	83 c4 10             	add    esp,0x10
c00059a7:	89 c6                	mov    esi,eax
c00059a9:	b8 11 00 00 00       	mov    eax,0x11
c00059ae:	85 f6                	test   esi,esi
c00059b0:	0f 84 27 01 00 00    	je     c0005add <f_sync+0x1d6>
c00059b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059ba:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00059c0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00059c3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00059c6:	89 da                	mov    edx,ebx
c00059c8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00059cc:	e8 af df ff ff       	call   c0003980 <load_obj_xdir>
c00059d1:	85 c0                	test   eax,eax
c00059d3:	0f 85 95 00 00 00    	jne    c0005a6e <f_sync+0x167>
c00059d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059e0:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059e4:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059e7:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059ea:	83 ca 01             	or     edx,0x1
c00059ed:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059f0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059f3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059f6:	83 c0 34             	add    eax,0x34
c00059f9:	e8 d9 c2 ff ff       	call   c0001cd7 <st_dword>
c00059fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a05:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a08:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a0b:	83 c0 38             	add    eax,0x38
c0005a0e:	e8 c7 c2 ff ff       	call   c0001cda <st_qword>
c0005a13:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a1a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a1d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a20:	83 c0 28             	add    eax,0x28
c0005a23:	e8 b2 c2 ff ff       	call   c0001cda <st_qword>
c0005a28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a31:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a34:	83 c0 0c             	add    eax,0xc
c0005a37:	e8 9b c2 ff ff       	call   c0001cd7 <st_dword>
c0005a3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a40:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a43:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a47:	31 d2                	xor    edx,edx
c0005a49:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a4c:	83 c0 10             	add    eax,0x10
c0005a4f:	e8 83 c2 ff ff       	call   c0001cd7 <st_dword>
c0005a54:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a58:	e8 62 e1 ff ff       	call   c0003bbf <store_xdir>
c0005a5d:	85 c0                	test   eax,eax
c0005a5f:	75 0d                	jne    c0005a6e <f_sync+0x167>
c0005a61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a65:	e8 00 eb ff ff       	call   c000456a <sync_fs>
c0005a6a:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a72:	83 ec 0c             	sub    esp,0xc
c0005a75:	56                   	push   esi
c0005a76:	e8 2f 2a 00 00       	call   c00084aa <ff_memfree>
c0005a7b:	83 c4 10             	add    esp,0x10
c0005a7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a82:	eb 59                	jmp    c0005add <f_sync+0x1d6>
c0005a84:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a87:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a8a:	e8 b0 c9 ff ff       	call   c000243f <move_window>
c0005a8f:	85 c0                	test   eax,eax
c0005a91:	75 4a                	jne    c0005add <f_sync+0x1d6>
c0005a93:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a96:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a9a:	89 f2                	mov    edx,esi
c0005a9c:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a9f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005aa1:	e8 5f f3 ff ff       	call   c0004e05 <st_clust.isra.1>
c0005aa6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005aa9:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005aac:	e8 26 c2 ff ff       	call   c0001cd7 <st_dword>
c0005ab1:	8d 46 16             	lea    eax,[esi+0x16]
c0005ab4:	ba 00 00 21 50       	mov    edx,0x50210000
c0005ab9:	e8 19 c2 ff ff       	call   c0001cd7 <st_dword>
c0005abe:	8d 46 12             	lea    eax,[esi+0x12]
c0005ac1:	31 d2                	xor    edx,edx
c0005ac3:	e8 0b c2 ff ff       	call   c0001cd3 <st_word>
c0005ac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005acc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005ad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ad4:	e8 91 ea ff ff       	call   c000456a <sync_fs>
c0005ad9:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005add:	83 c4 64             	add    esp,0x64
c0005ae0:	5b                   	pop    ebx
c0005ae1:	5e                   	pop    esi
c0005ae2:	c3                   	ret    

c0005ae3 <f_close>:
c0005ae3:	53                   	push   ebx
c0005ae4:	83 ec 24             	sub    esp,0x24
c0005ae7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005aeb:	53                   	push   ebx
c0005aec:	e8 16 fe ff ff       	call   c0005907 <f_sync>
c0005af1:	83 c4 10             	add    esp,0x10
c0005af4:	85 c0                	test   eax,eax
c0005af6:	75 15                	jne    c0005b0d <f_close+0x2a>
c0005af8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005afc:	89 d8                	mov    eax,ebx
c0005afe:	e8 61 c8 ff ff       	call   c0002364 <validate>
c0005b03:	85 c0                	test   eax,eax
c0005b05:	75 06                	jne    c0005b0d <f_close+0x2a>
c0005b07:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005b0d:	83 c4 18             	add    esp,0x18
c0005b10:	5b                   	pop    ebx
c0005b11:	c3                   	ret    

c0005b12 <f_lseek>:
c0005b12:	55                   	push   ebp
c0005b13:	57                   	push   edi
c0005b14:	56                   	push   esi
c0005b15:	53                   	push   ebx
c0005b16:	83 ec 3c             	sub    esp,0x3c
c0005b19:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005b1d:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005b21:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005b25:	89 04 24             	mov    DWORD PTR [esp],eax
c0005b28:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005b2c:	89 d8                	mov    eax,ebx
c0005b2e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005b32:	e8 2d c8 ff ff       	call   c0002364 <validate>
c0005b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	0f 85 7a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b43:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b47:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b4b:	85 c0                	test   eax,eax
c0005b4d:	0f 85 6a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b53:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b57:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b5a:	74 0c                	je     c0005b68 <f_lseek+0x56>
c0005b5c:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b5f:	85 c0                	test   eax,eax
c0005b61:	75 1f                	jne    c0005b82 <f_lseek+0x70>
c0005b63:	e9 b5 01 00 00       	jmp    c0005d1d <f_lseek+0x20b>
c0005b68:	83 c9 ff             	or     ecx,0xffffffff
c0005b6b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b6e:	89 d8                	mov    eax,ebx
c0005b70:	e8 e3 d3 ff ff       	call   c0002f58 <fill_last_frag>
c0005b75:	85 c0                	test   eax,eax
c0005b77:	74 e3                	je     c0005b5c <f_lseek+0x4a>
c0005b79:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b7d:	e9 3b 04 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005b82:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b87:	0f 85 ac 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b8d:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b91:	0f 85 a2 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b97:	8d 78 04             	lea    edi,[eax+0x4]
c0005b9a:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b9f:	be 02 00 00 00       	mov    esi,0x2
c0005ba4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ba8:	85 ed                	test   ebp,ebp
c0005baa:	74 73                	je     c0005c1f <f_lseek+0x10d>
c0005bac:	89 e9                	mov    ecx,ebp
c0005bae:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005bb5:	ff 04 24             	inc    DWORD PTR [esp]
c0005bb8:	89 ca                	mov    edx,ecx
c0005bba:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005bbe:	89 d8                	mov    eax,ebx
c0005bc0:	e8 02 d4 ff ff       	call   c0002fc7 <get_fat>
c0005bc5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bc9:	83 f8 01             	cmp    eax,0x1
c0005bcc:	77 11                	ja     c0005bdf <f_lseek+0xcd>
c0005bce:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005bd2:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005bda:	e9 de 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bdf:	83 f8 ff             	cmp    eax,0xffffffff
c0005be2:	75 11                	jne    c0005bf5 <f_lseek+0xe3>
c0005be4:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005be8:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bf0:	e9 c8 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bf5:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bf8:	89 c1                	mov    ecx,eax
c0005bfa:	39 c2                	cmp    edx,eax
c0005bfc:	74 b7                	je     c0005bb5 <f_lseek+0xa3>
c0005bfe:	83 c6 02             	add    esi,0x2
c0005c01:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005c05:	72 0b                	jb     c0005c12 <f_lseek+0x100>
c0005c07:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005c0a:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005c0d:	89 0f                	mov    DWORD PTR [edi],ecx
c0005c0f:	83 c7 08             	add    edi,0x8
c0005c12:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c16:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c19:	76 04                	jbe    c0005c1f <f_lseek+0x10d>
c0005c1b:	89 c5                	mov    ebp,eax
c0005c1d:	eb 8d                	jmp    c0005bac <f_lseek+0x9a>
c0005c1f:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005c22:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005c26:	89 30                	mov    DWORD PTR [eax],esi
c0005c28:	0f 87 87 03 00 00    	ja     c0005fb5 <f_lseek+0x4a3>
c0005c2e:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005c34:	e9 84 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005c39:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c3c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c47:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c4b:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c52:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c56:	73 0f                	jae    c0005c67 <f_lseek+0x155>
c0005c58:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c5b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c6b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c6f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c72:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c79:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c7d:	0f 84 3a 03 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005c83:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c87:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c8b:	83 c6 ff             	add    esi,0xffffffff
c0005c8e:	89 d8                	mov    eax,ebx
c0005c90:	83 d7 ff             	adc    edi,0xffffffff
c0005c93:	89 f2                	mov    edx,esi
c0005c95:	89 f9                	mov    ecx,edi
c0005c97:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c9b:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c9e:	e8 78 c2 ff ff       	call   c0001f1b <clmt_clust>
c0005ca3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ca7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005caa:	89 c2                	mov    edx,eax
c0005cac:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005cb0:	89 c8                	mov    eax,ecx
c0005cb2:	e8 43 c2 ff ff       	call   c0001efa <clst2sect>
c0005cb7:	89 d7                	mov    edi,edx
c0005cb9:	09 c7                	or     edi,eax
c0005cbb:	0f 84 0d ff ff ff    	je     c0005bce <f_lseek+0xbc>
c0005cc1:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005cc5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005ccb:	0f 84 ec 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cd1:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cd5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005cd9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cdc:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ce0:	0f ac fe 09          	shrd   esi,edi,0x9
c0005ce4:	4d                   	dec    ebp
c0005ce5:	31 ff                	xor    edi,edi
c0005ce7:	21 ee                	and    esi,ebp
c0005ce9:	01 c6                	add    esi,eax
c0005ceb:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cee:	11 d7                	adc    edi,edx
c0005cf0:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cf3:	39 fa                	cmp    edx,edi
c0005cf5:	75 08                	jne    c0005cff <f_lseek+0x1ed>
c0005cf7:	39 f0                	cmp    eax,esi
c0005cf9:	0f 84 be 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cff:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d02:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d06:	0f 89 80 02 00 00    	jns    c0005f8c <f_lseek+0x47a>
c0005d0c:	83 ec 0c             	sub    esp,0xc
c0005d0f:	6a 01                	push   0x1
c0005d11:	52                   	push   edx
c0005d12:	50                   	push   eax
c0005d13:	55                   	push   ebp
c0005d14:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005d18:	e9 5a 02 00 00       	jmp    c0005f77 <f_lseek+0x465>
c0005d1d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005d21:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005d24:	74 16                	je     c0005d3c <f_lseek+0x22a>
c0005d26:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005d2b:	76 0f                	jbe    c0005d3c <f_lseek+0x22a>
c0005d2d:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005d34:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d3c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d3f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d42:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d45:	89 c7                	mov    edi,eax
c0005d47:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d4b:	73 0d                	jae    c0005d5a <f_lseek+0x248>
c0005d4d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d51:	75 07                	jne    c0005d5a <f_lseek+0x248>
c0005d53:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d56:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d5a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d5d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d60:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d64:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d6b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d72:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d75:	75 09                	jne    c0005d80 <f_lseek+0x26e>
c0005d77:	31 f6                	xor    esi,esi
c0005d79:	31 ff                	xor    edi,edi
c0005d7b:	e9 af 01 00 00       	jmp    c0005f2f <f_lseek+0x41d>
c0005d80:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d84:	89 d7                	mov    edi,edx
c0005d86:	c1 e1 09             	shl    ecx,0x9
c0005d89:	09 c7                	or     edi,eax
c0005d8b:	89 cd                	mov    ebp,ecx
c0005d8d:	74 6d                	je     c0005dfc <f_lseek+0x2ea>
c0005d8f:	83 c0 ff             	add    eax,0xffffffff
c0005d92:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d96:	83 d2 ff             	adc    edx,0xffffffff
c0005d99:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d9c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005da0:	83 c0 ff             	add    eax,0xffffffff
c0005da3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005da7:	83 d2 ff             	adc    edx,0xffffffff
c0005daa:	31 ff                	xor    edi,edi
c0005dac:	57                   	push   edi
c0005dad:	51                   	push   ecx
c0005dae:	52                   	push   edx
c0005daf:	50                   	push   eax
c0005db0:	e8 c7 0a 02 00       	call   c002687c <__udivdi3>
c0005db5:	83 c4 10             	add    esp,0x10
c0005db8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005dbc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005dc0:	57                   	push   edi
c0005dc1:	55                   	push   ebp
c0005dc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dc6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dca:	e8 ad 0a 02 00       	call   c002687c <__udivdi3>
c0005dcf:	83 c4 10             	add    esp,0x10
c0005dd2:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005dd6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dda:	19 d1                	sbb    ecx,edx
c0005ddc:	72 1e                	jb     c0005dfc <f_lseek+0x2ea>
c0005dde:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005de2:	89 e9                	mov    ecx,ebp
c0005de4:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005de7:	f7 d9                	neg    ecx
c0005de9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005dec:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005df0:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005df3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005df6:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dfa:	eb 28                	jmp    c0005e24 <f_lseek+0x312>
c0005dfc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dff:	85 c0                	test   eax,eax
c0005e01:	75 1e                	jne    c0005e21 <f_lseek+0x30f>
c0005e03:	31 d2                	xor    edx,edx
c0005e05:	89 d8                	mov    eax,ebx
c0005e07:	e8 a9 d4 ff ff       	call   c00032b5 <create_chain>
c0005e0c:	83 f8 01             	cmp    eax,0x1
c0005e0f:	0f 84 b9 fd ff ff    	je     c0005bce <f_lseek+0xbc>
c0005e15:	83 f8 ff             	cmp    eax,0xffffffff
c0005e18:	0f 84 c6 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005e1e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e21:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e24:	85 c0                	test   eax,eax
c0005e26:	0f 84 4b ff ff ff    	je     c0005d77 <f_lseek+0x265>
c0005e2c:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005e30:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005e38:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e3b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e3f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e42:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e45:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e49:	0f 83 9d 00 00 00    	jae    c0005eec <f_lseek+0x3da>
c0005e4f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e53:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e57:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e5a:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e5e:	01 f2                	add    edx,esi
c0005e60:	11 f9                	adc    ecx,edi
c0005e62:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e66:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e6a:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e6d:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e70:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e73:	f6 c1 02             	test   cl,0x2
c0005e76:	74 35                	je     c0005ead <f_lseek+0x39b>
c0005e78:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e7c:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e7f:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e82:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e86:	73 16                	jae    c0005e9e <f_lseek+0x38c>
c0005e88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e8c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e90:	88 ca                	mov    dl,cl
c0005e92:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e95:	83 ca 40             	or     edx,0x40
c0005e98:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e9b:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e9e:	89 c2                	mov    edx,eax
c0005ea0:	89 d8                	mov    eax,ebx
c0005ea2:	e8 0e d4 ff ff       	call   c00032b5 <create_chain>
c0005ea7:	85 c0                	test   eax,eax
c0005ea9:	75 0b                	jne    c0005eb6 <f_lseek+0x3a4>
c0005eab:	eb 30                	jmp    c0005edd <f_lseek+0x3cb>
c0005ead:	89 c2                	mov    edx,eax
c0005eaf:	89 d8                	mov    eax,ebx
c0005eb1:	e8 11 d1 ff ff       	call   c0002fc7 <get_fat>
c0005eb6:	83 f8 ff             	cmp    eax,0xffffffff
c0005eb9:	0f 84 25 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005ebf:	83 f8 01             	cmp    eax,0x1
c0005ec2:	0f 86 06 fd ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ec8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005ecc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005ecf:	0f 86 f9 fc ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ed5:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ed8:	e9 5b ff ff ff       	jmp    c0005e38 <f_lseek+0x326>
c0005edd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005ee4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eec:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eef:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ef3:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ef6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ef9:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005efc:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005f02:	0f 84 6f fe ff ff    	je     c0005d77 <f_lseek+0x265>
c0005f08:	89 c2                	mov    edx,eax
c0005f0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005f0e:	e8 e7 bf ff ff       	call   c0001efa <clst2sect>
c0005f13:	89 d7                	mov    edi,edx
c0005f15:	09 c7                	or     edi,eax
c0005f17:	0f 84 b1 fc ff ff    	je     c0005bce <f_lseek+0xbc>
c0005f1d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005f21:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005f24:	0f ac fe 09          	shrd   esi,edi,0x9
c0005f28:	c1 ef 09             	shr    edi,0x9
c0005f2b:	01 c6                	add    esi,eax
c0005f2d:	11 d7                	adc    edi,edx
c0005f2f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005f32:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005f35:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005f38:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f3b:	19 d1                	sbb    ecx,edx
c0005f3d:	73 0a                	jae    c0005f49 <f_lseek+0x437>
c0005f3f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f42:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f45:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f49:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f4e:	74 6d                	je     c0005fbd <f_lseek+0x4ab>
c0005f50:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f53:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f56:	39 fa                	cmp    edx,edi
c0005f58:	75 04                	jne    c0005f5e <f_lseek+0x44c>
c0005f5a:	39 f0                	cmp    eax,esi
c0005f5c:	74 5f                	je     c0005fbd <f_lseek+0x4ab>
c0005f5e:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f61:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f65:	79 25                	jns    c0005f8c <f_lseek+0x47a>
c0005f67:	83 ec 0c             	sub    esp,0xc
c0005f6a:	6a 01                	push   0x1
c0005f6c:	52                   	push   edx
c0005f6d:	50                   	push   eax
c0005f6e:	55                   	push   ebp
c0005f6f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f73:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f77:	50                   	push   eax
c0005f78:	e8 af bc ff ff       	call   c0001c2c <disk_write>
c0005f7d:	83 c4 20             	add    esp,0x20
c0005f80:	85 c0                	test   eax,eax
c0005f82:	0f 85 5c fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005f88:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f8c:	83 ec 0c             	sub    esp,0xc
c0005f8f:	6a 01                	push   0x1
c0005f91:	57                   	push   edi
c0005f92:	56                   	push   esi
c0005f93:	55                   	push   ebp
c0005f94:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f98:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f9c:	50                   	push   eax
c0005f9d:	e8 74 bc ff ff       	call   c0001c16 <disk_read>
c0005fa2:	83 c4 20             	add    esp,0x20
c0005fa5:	85 c0                	test   eax,eax
c0005fa7:	0f 85 37 fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005fad:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005fb0:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005fb3:	eb 08                	jmp    c0005fbd <f_lseek+0x4ab>
c0005fb5:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005fbd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005fc1:	83 c4 3c             	add    esp,0x3c
c0005fc4:	5b                   	pop    ebx
c0005fc5:	5e                   	pop    esi
c0005fc6:	5f                   	pop    edi
c0005fc7:	5d                   	pop    ebp
c0005fc8:	c3                   	ret    

c0005fc9 <f_opendir>:
c0005fc9:	56                   	push   esi
c0005fca:	b8 09 00 00 00       	mov    eax,0x9
c0005fcf:	53                   	push   ebx
c0005fd0:	83 ec 24             	sub    esp,0x24
c0005fd3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005fd7:	85 db                	test   ebx,ebx
c0005fd9:	0f 84 e6 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c0005fdf:	31 c9                	xor    ecx,ecx
c0005fe1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fe5:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005fe9:	e8 03 c7 ff ff       	call   c00026f1 <mount_volume>
c0005fee:	85 c0                	test   eax,eax
c0005ff0:	0f 85 c9 00 00 00    	jne    c00060bf <f_opendir+0xf6>
c0005ff6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ffa:	83 ec 0c             	sub    esp,0xc
c0005ffd:	89 03                	mov    DWORD PTR [ebx],eax
c0005fff:	68 60 04 00 00       	push   0x460
c0006004:	e8 8b 24 00 00       	call   c0008494 <ff_memalloc>
c0006009:	83 c4 10             	add    esp,0x10
c000600c:	89 c6                	mov    esi,eax
c000600e:	b8 11 00 00 00       	mov    eax,0x11
c0006013:	85 f6                	test   esi,esi
c0006015:	0f 84 aa 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c000601b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000601f:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006025:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006028:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000602b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000602f:	89 d8                	mov    eax,ebx
c0006031:	e8 31 ee ff ff       	call   c0004e67 <follow_path>
c0006036:	85 c0                	test   eax,eax
c0006038:	75 61                	jne    c000609b <f_opendir+0xd2>
c000603a:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c000603e:	78 46                	js     c0006086 <f_opendir+0xbd>
c0006040:	b8 05 00 00 00       	mov    eax,0x5
c0006045:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0006049:	74 50                	je     c000609b <f_opendir+0xd2>
c000604b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000604f:	8a 01                	mov    al,BYTE PTR [ecx]
c0006051:	3c 04                	cmp    al,0x4
c0006053:	75 26                	jne    c000607b <f_opendir+0xb2>
c0006055:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0006058:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000605b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000605e:	30 d2                	xor    dl,dl
c0006060:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0006064:	09 c2                	or     edx,eax
c0006066:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0006069:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000606c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000606f:	89 da                	mov    edx,ebx
c0006071:	8d 41 10             	lea    eax,[ecx+0x10]
c0006074:	e8 b4 ed ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0006079:	eb 0b                	jmp    c0006086 <f_opendir+0xbd>
c000607b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000607e:	e8 59 ed ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006083:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0006086:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000608a:	31 d2                	xor    edx,edx
c000608c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006090:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0006094:	89 d8                	mov    eax,ebx
c0006096:	e8 22 d1 ff ff       	call   c00031bd <dir_sdi>
c000609b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000609f:	83 ec 0c             	sub    esp,0xc
c00060a2:	56                   	push   esi
c00060a3:	e8 02 24 00 00       	call   c00084aa <ff_memfree>
c00060a8:	83 c4 10             	add    esp,0x10
c00060ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00060af:	83 f8 04             	cmp    eax,0x4
c00060b2:	74 06                	je     c00060ba <f_opendir+0xf1>
c00060b4:	85 c0                	test   eax,eax
c00060b6:	74 0d                	je     c00060c5 <f_opendir+0xfc>
c00060b8:	eb 05                	jmp    c00060bf <f_opendir+0xf6>
c00060ba:	b8 05 00 00 00       	mov    eax,0x5
c00060bf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060c5:	83 c4 24             	add    esp,0x24
c00060c8:	5b                   	pop    ebx
c00060c9:	5e                   	pop    esi
c00060ca:	c3                   	ret    

c00060cb <f_closedir>:
c00060cb:	53                   	push   ebx
c00060cc:	83 ec 18             	sub    esp,0x18
c00060cf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00060d3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00060d7:	89 d8                	mov    eax,ebx
c00060d9:	e8 86 c2 ff ff       	call   c0002364 <validate>
c00060de:	85 c0                	test   eax,eax
c00060e0:	75 06                	jne    c00060e8 <f_closedir+0x1d>
c00060e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060e8:	83 c4 18             	add    esp,0x18
c00060eb:	5b                   	pop    ebx
c00060ec:	c3                   	ret    

c00060ed <f_readdir>:
c00060ed:	57                   	push   edi
c00060ee:	56                   	push   esi
c00060ef:	53                   	push   ebx
c00060f0:	83 ec 20             	sub    esp,0x20
c00060f3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060f7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060fb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060ff:	89 d8                	mov    eax,ebx
c0006101:	e8 5e c2 ff ff       	call   c0002364 <validate>
c0006106:	85 c0                	test   eax,eax
c0006108:	75 77                	jne    c0006181 <f_readdir+0x94>
c000610a:	85 ff                	test   edi,edi
c000610c:	75 0b                	jne    c0006119 <f_readdir+0x2c>
c000610e:	31 d2                	xor    edx,edx
c0006110:	89 d8                	mov    eax,ebx
c0006112:	e8 a6 d0 ff ff       	call   c00031bd <dir_sdi>
c0006117:	eb 68                	jmp    c0006181 <f_readdir+0x94>
c0006119:	83 ec 0c             	sub    esp,0xc
c000611c:	68 60 04 00 00       	push   0x460
c0006121:	e8 6e 23 00 00       	call   c0008494 <ff_memalloc>
c0006126:	83 c4 10             	add    esp,0x10
c0006129:	89 c6                	mov    esi,eax
c000612b:	b8 11 00 00 00       	mov    eax,0x11
c0006130:	85 f6                	test   esi,esi
c0006132:	74 4d                	je     c0006181 <f_readdir+0x94>
c0006134:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006138:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000613e:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006141:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006144:	31 d2                	xor    edx,edx
c0006146:	89 d8                	mov    eax,ebx
c0006148:	e8 80 d8 ff ff       	call   c00039cd <dir_read>
c000614d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006152:	75 19                	jne    c000616d <f_readdir+0x80>
c0006154:	89 fa                	mov    edx,edi
c0006156:	89 d8                	mov    eax,ebx
c0006158:	e8 7e ea ff ff       	call   c0004bdb <get_fileinfo>
c000615d:	31 d2                	xor    edx,edx
c000615f:	89 d8                	mov    eax,ebx
c0006161:	e8 af d5 ff ff       	call   c0003715 <dir_next>
c0006166:	83 f8 04             	cmp    eax,0x4
c0006169:	75 02                	jne    c000616d <f_readdir+0x80>
c000616b:	31 c0                	xor    eax,eax
c000616d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006171:	83 ec 0c             	sub    esp,0xc
c0006174:	56                   	push   esi
c0006175:	e8 30 23 00 00       	call   c00084aa <ff_memfree>
c000617a:	83 c4 10             	add    esp,0x10
c000617d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006181:	83 c4 20             	add    esp,0x20
c0006184:	5b                   	pop    ebx
c0006185:	5e                   	pop    esi
c0006186:	5f                   	pop    edi
c0006187:	c3                   	ret    

c0006188 <f_stat>:
c0006188:	57                   	push   edi
c0006189:	31 c9                	xor    ecx,ecx
c000618b:	56                   	push   esi
c000618c:	53                   	push   ebx
c000618d:	83 ec 50             	sub    esp,0x50
c0006190:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0006194:	8d 54 24 04          	lea    edx,[esp+0x4]
c0006198:	8d 44 24 60          	lea    eax,[esp+0x60]
c000619c:	e8 50 c5 ff ff       	call   c00026f1 <mount_volume>
c00061a1:	89 c3                	mov    ebx,eax
c00061a3:	85 c0                	test   eax,eax
c00061a5:	75 67                	jne    c000620e <f_stat+0x86>
c00061a7:	83 ec 0c             	sub    esp,0xc
c00061aa:	bb 11 00 00 00       	mov    ebx,0x11
c00061af:	68 60 04 00 00       	push   0x460
c00061b4:	e8 db 22 00 00       	call   c0008494 <ff_memalloc>
c00061b9:	83 c4 10             	add    esp,0x10
c00061bc:	89 c6                	mov    esi,eax
c00061be:	85 c0                	test   eax,eax
c00061c0:	74 4c                	je     c000620e <f_stat+0x86>
c00061c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00061c6:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00061cc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00061cf:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00061d2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00061d6:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061da:	e8 88 ec ff ff       	call   c0004e67 <follow_path>
c00061df:	89 c3                	mov    ebx,eax
c00061e1:	85 c0                	test   eax,eax
c00061e3:	75 1d                	jne    c0006202 <f_stat+0x7a>
c00061e5:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061ea:	78 11                	js     c00061fd <f_stat+0x75>
c00061ec:	85 ff                	test   edi,edi
c00061ee:	74 12                	je     c0006202 <f_stat+0x7a>
c00061f0:	89 fa                	mov    edx,edi
c00061f2:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061f6:	e8 e0 e9 ff ff       	call   c0004bdb <get_fileinfo>
c00061fb:	eb 05                	jmp    c0006202 <f_stat+0x7a>
c00061fd:	bb 06 00 00 00       	mov    ebx,0x6
c0006202:	83 ec 0c             	sub    esp,0xc
c0006205:	56                   	push   esi
c0006206:	e8 9f 22 00 00       	call   c00084aa <ff_memfree>
c000620b:	83 c4 10             	add    esp,0x10
c000620e:	83 c4 50             	add    esp,0x50
c0006211:	89 d8                	mov    eax,ebx
c0006213:	5b                   	pop    ebx
c0006214:	5e                   	pop    esi
c0006215:	5f                   	pop    edi
c0006216:	c3                   	ret    

c0006217 <f_getfree>:
c0006217:	55                   	push   ebp
c0006218:	31 c9                	xor    ecx,ecx
c000621a:	57                   	push   edi
c000621b:	56                   	push   esi
c000621c:	53                   	push   ebx
c000621d:	83 ec 5c             	sub    esp,0x5c
c0006220:	8d 54 24 24          	lea    edx,[esp+0x24]
c0006224:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006228:	e8 c4 c4 ff ff       	call   c00026f1 <mount_volume>
c000622d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006231:	85 c0                	test   eax,eax
c0006233:	0f 85 9d 01 00 00    	jne    c00063d6 <f_getfree+0x1bf>
c0006239:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000623d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006241:	89 02                	mov    DWORD PTR [edx],eax
c0006243:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006246:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006249:	8d 71 fe             	lea    esi,[ecx-0x2]
c000624c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006250:	39 f2                	cmp    edx,esi
c0006252:	77 0b                	ja     c000625f <f_getfree+0x48>
c0006254:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006258:	89 10                	mov    DWORD PTR [eax],edx
c000625a:	e9 77 01 00 00       	jmp    c00063d6 <f_getfree+0x1bf>
c000625f:	8a 10                	mov    dl,BYTE PTR [eax]
c0006261:	80 fa 01             	cmp    dl,0x1
c0006264:	75 3a                	jne    c00062a0 <f_getfree+0x89>
c0006266:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000626a:	be 02 00 00 00       	mov    esi,0x2
c000626f:	31 db                	xor    ebx,ebx
c0006271:	89 f2                	mov    edx,esi
c0006273:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006277:	e8 4b cd ff ff       	call   c0002fc7 <get_fat>
c000627c:	83 f8 ff             	cmp    eax,0xffffffff
c000627f:	0f 84 28 01 00 00    	je     c00063ad <f_getfree+0x196>
c0006285:	83 f8 01             	cmp    eax,0x1
c0006288:	0f 84 29 01 00 00    	je     c00063b7 <f_getfree+0x1a0>
c000628e:	83 d3 00             	adc    ebx,0x0
c0006291:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006295:	46                   	inc    esi
c0006296:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006299:	77 d6                	ja     c0006271 <f_getfree+0x5a>
c000629b:	e9 25 01 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c00062a0:	80 fa 04             	cmp    dl,0x4
c00062a3:	0f 85 88 00 00 00    	jne    c0006331 <f_getfree+0x11a>
c00062a9:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00062ac:	31 ed                	xor    ebp,ebp
c00062ae:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00062b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062b5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062b9:	31 db                	xor    ebx,ebx
c00062bb:	85 ed                	test   ebp,ebp
c00062bd:	75 3f                	jne    c00062fe <f_getfree+0xe7>
c00062bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00062c7:	83 c0 01             	add    eax,0x1
c00062ca:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00062ce:	83 d2 00             	adc    edx,0x0
c00062d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00062d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00062d9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062e1:	e8 59 c1 ff ff       	call   c000243f <move_window>
c00062e6:	85 c0                	test   eax,eax
c00062e8:	0f 85 d3 00 00 00    	jne    c00063c1 <f_getfree+0x1aa>
c00062ee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062f2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062fa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062fe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006302:	8d 4e f8             	lea    ecx,[esi-0x8]
c0006305:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006309:	89 cf                	mov    edi,ecx
c000630b:	85 f6                	test   esi,esi
c000630d:	74 12                	je     c0006321 <f_getfree+0x10a>
c000630f:	88 c1                	mov    cl,al
c0006311:	83 e1 01             	and    ecx,0x1
c0006314:	80 f9 01             	cmp    cl,0x1
c0006317:	83 d3 00             	adc    ebx,0x0
c000631a:	d0 e8                	shr    al,1
c000631c:	4e                   	dec    esi
c000631d:	39 fe                	cmp    esi,edi
c000631f:	75 ea                	jne    c000630b <f_getfree+0xf4>
c0006321:	45                   	inc    ebp
c0006322:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006328:	85 f6                	test   esi,esi
c000632a:	75 8f                	jne    c00062bb <f_getfree+0xa4>
c000632c:	e9 94 00 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c0006331:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006334:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006337:	31 f6                	xor    esi,esi
c0006339:	31 db                	xor    ebx,ebx
c000633b:	85 f6                	test   esi,esi
c000633d:	75 1b                	jne    c000635a <f_getfree+0x143>
c000633f:	89 d7                	mov    edi,edx
c0006341:	89 cd                	mov    ebp,ecx
c0006343:	83 c7 01             	add    edi,0x1
c0006346:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000634a:	83 d5 00             	adc    ebp,0x0
c000634d:	e8 ed c0 ff ff       	call   c000243f <move_window>
c0006352:	85 c0                	test   eax,eax
c0006354:	75 6b                	jne    c00063c1 <f_getfree+0x1aa>
c0006356:	89 fa                	mov    edx,edi
c0006358:	89 e9                	mov    ecx,ebp
c000635a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000635e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006362:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006366:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006369:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000636d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006371:	75 11                	jne    c0006384 <f_getfree+0x16d>
c0006373:	e8 e9 b8 ff ff       	call   c0001c61 <ld_word>
c0006378:	66 83 f8 01          	cmp    ax,0x1
c000637c:	83 d3 00             	adc    ebx,0x0
c000637f:	83 c6 02             	add    esi,0x2
c0006382:	eb 13                	jmp    c0006397 <f_getfree+0x180>
c0006384:	e8 e5 b8 ff ff       	call   c0001c6e <ld_dword>
c0006389:	25 ff ff ff 0f       	and    eax,0xfffffff
c000638e:	83 f8 01             	cmp    eax,0x1
c0006391:	83 d3 00             	adc    ebx,0x0
c0006394:	83 c6 04             	add    esi,0x4
c0006397:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000639d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063a1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00063a5:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00063a9:	75 90                	jne    c000633b <f_getfree+0x124>
c00063ab:	eb 18                	jmp    c00063c5 <f_getfree+0x1ae>
c00063ad:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00063b5:	eb 0e                	jmp    c00063c5 <f_getfree+0x1ae>
c00063b7:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00063bf:	eb 04                	jmp    c00063c5 <f_getfree+0x1ae>
c00063c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063c5:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00063c9:	89 18                	mov    DWORD PTR [eax],ebx
c00063cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00063cf:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00063d2:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00063d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063da:	83 c4 5c             	add    esp,0x5c
c00063dd:	5b                   	pop    ebx
c00063de:	5e                   	pop    esi
c00063df:	5f                   	pop    edi
c00063e0:	5d                   	pop    ebp
c00063e1:	c3                   	ret    

c00063e2 <f_truncate>:
c00063e2:	56                   	push   esi
c00063e3:	53                   	push   ebx
c00063e4:	83 ec 14             	sub    esp,0x14
c00063e7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063eb:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063ef:	89 d8                	mov    eax,ebx
c00063f1:	e8 6e bf ff ff       	call   c0002364 <validate>
c00063f6:	89 c6                	mov    esi,eax
c00063f8:	85 c0                	test   eax,eax
c00063fa:	0f 85 d2 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c0006400:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c0006404:	85 f6                	test   esi,esi
c0006406:	0f 85 c6 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c000640c:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0006410:	0f 84 b7 00 00 00    	je     c00064cd <f_truncate+0xeb>
c0006416:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006419:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000641c:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000641f:	89 d1                	mov    ecx,edx
c0006421:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006424:	0f 83 a8 00 00 00    	jae    c00064d2 <f_truncate+0xf0>
c000642a:	09 c2                	or     edx,eax
c000642c:	75 15                	jne    c0006443 <f_truncate+0x61>
c000642e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006431:	31 c9                	xor    ecx,ecx
c0006433:	89 d8                	mov    eax,ebx
c0006435:	e8 7a d0 ff ff       	call   c00034b4 <remove_chain>
c000643a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006441:	eb 35                	jmp    c0006478 <f_truncate+0x96>
c0006443:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006446:	89 d8                	mov    eax,ebx
c0006448:	e8 7a cb ff ff       	call   c0002fc7 <get_fat>
c000644d:	89 c2                	mov    edx,eax
c000644f:	b8 01 00 00 00       	mov    eax,0x1
c0006454:	83 fa ff             	cmp    edx,0xffffffff
c0006457:	74 1f                	je     c0006478 <f_truncate+0x96>
c0006459:	b8 02 00 00 00       	mov    eax,0x2
c000645e:	83 fa 01             	cmp    edx,0x1
c0006461:	74 15                	je     c0006478 <f_truncate+0x96>
c0006463:	31 c0                	xor    eax,eax
c0006465:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006469:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000646c:	76 0a                	jbe    c0006478 <f_truncate+0x96>
c000646e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006471:	89 d8                	mov    eax,ebx
c0006473:	e8 3c d0 ff ff       	call   c00034b4 <remove_chain>
c0006478:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000647b:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000647e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006481:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006484:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006487:	83 ca 40             	or     edx,0x40
c000648a:	85 c0                	test   eax,eax
c000648c:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c000648f:	75 35                	jne    c00064c6 <f_truncate+0xe4>
c0006491:	84 d2                	test   dl,dl
c0006493:	79 3d                	jns    c00064d2 <f_truncate+0xf0>
c0006495:	83 ec 0c             	sub    esp,0xc
c0006498:	8d 43 50             	lea    eax,[ebx+0x50]
c000649b:	6a 01                	push   0x1
c000649d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00064a0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00064a3:	50                   	push   eax
c00064a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00064a8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00064ac:	50                   	push   eax
c00064ad:	e8 7a b7 ff ff       	call   c0001c2c <disk_write>
c00064b2:	83 c4 20             	add    esp,0x20
c00064b5:	85 c0                	test   eax,eax
c00064b7:	75 08                	jne    c00064c1 <f_truncate+0xdf>
c00064b9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00064bd:	31 f6                	xor    esi,esi
c00064bf:	eb 11                	jmp    c00064d2 <f_truncate+0xf0>
c00064c1:	b8 01 00 00 00       	mov    eax,0x1
c00064c6:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00064c9:	89 c6                	mov    esi,eax
c00064cb:	eb 05                	jmp    c00064d2 <f_truncate+0xf0>
c00064cd:	be 07 00 00 00       	mov    esi,0x7
c00064d2:	89 f0                	mov    eax,esi
c00064d4:	83 c4 14             	add    esp,0x14
c00064d7:	5b                   	pop    ebx
c00064d8:	5e                   	pop    esi
c00064d9:	c3                   	ret    

c00064da <f_unlink>:
c00064da:	56                   	push   esi
c00064db:	b9 02 00 00 00       	mov    ecx,0x2
c00064e0:	53                   	push   ebx
c00064e1:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064e7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064eb:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064f2:	e8 fa c1 ff ff       	call   c00026f1 <mount_volume>
c00064f7:	85 c0                	test   eax,eax
c00064f9:	0f 85 55 01 00 00    	jne    c0006654 <f_unlink+0x17a>
c00064ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006503:	83 ec 0c             	sub    esp,0xc
c0006506:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000650a:	68 60 04 00 00       	push   0x460
c000650f:	e8 80 1f 00 00       	call   c0008494 <ff_memalloc>
c0006514:	83 c4 10             	add    esp,0x10
c0006517:	89 c3                	mov    ebx,eax
c0006519:	b8 11 00 00 00       	mov    eax,0x11
c000651e:	85 db                	test   ebx,ebx
c0006520:	0f 84 2e 01 00 00    	je     c0006654 <f_unlink+0x17a>
c0006526:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000652a:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006530:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006533:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006536:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000653d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006541:	e8 21 e9 ff ff       	call   c0004e67 <follow_path>
c0006546:	85 c0                	test   eax,eax
c0006548:	0f 85 f2 00 00 00    	jne    c0006640 <f_unlink+0x166>
c000654e:	b8 06 00 00 00       	mov    eax,0x6
c0006553:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000655b:	0f 88 df 00 00 00    	js     c0006640 <f_unlink+0x166>
c0006561:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006566:	74 0a                	je     c0006572 <f_unlink+0x98>
c0006568:	b8 07 00 00 00       	mov    eax,0x7
c000656d:	e9 ce 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c0006572:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006576:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000657a:	8a 02                	mov    al,BYTE PTR [edx]
c000657c:	3c 04                	cmp    al,0x4
c000657e:	75 12                	jne    c0006592 <f_unlink+0xb8>
c0006580:	8d 42 10             	lea    eax,[edx+0x10]
c0006583:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006587:	e8 a1 e8 ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c000658c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006590:	eb 0e                	jmp    c00065a0 <f_unlink+0xc6>
c0006592:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006599:	e8 3e e8 ff ff       	call   c0004ddc <ld_clust.isra.0>
c000659e:	89 c6                	mov    esi,eax
c00065a0:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00065a5:	75 12                	jne    c00065b9 <f_unlink+0xdf>
c00065a7:	8d 44 24 48          	lea    eax,[esp+0x48]
c00065ab:	e8 94 d6 ff ff       	call   c0003c44 <dir_remove>
c00065b0:	85 c0                	test   eax,eax
c00065b2:	74 6c                	je     c0006620 <f_unlink+0x146>
c00065b4:	e9 87 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c00065b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065bd:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00065c4:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00065cb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065ce:	75 21                	jne    c00065f1 <f_unlink+0x117>
c00065d0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00065d4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00065d8:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065df:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065e6:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065ea:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065f1:	31 d2                	xor    edx,edx
c00065f3:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065fa:	e8 be cb ff ff       	call   c00031bd <dir_sdi>
c00065ff:	85 c0                	test   eax,eax
c0006601:	75 3d                	jne    c0006640 <f_unlink+0x166>
c0006603:	31 d2                	xor    edx,edx
c0006605:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c000660c:	e8 bc d3 ff ff       	call   c00039cd <dir_read>
c0006611:	85 c0                	test   eax,eax
c0006613:	0f 84 4f ff ff ff    	je     c0006568 <f_unlink+0x8e>
c0006619:	83 f8 04             	cmp    eax,0x4
c000661c:	75 22                	jne    c0006640 <f_unlink+0x166>
c000661e:	eb 87                	jmp    c00065a7 <f_unlink+0xcd>
c0006620:	85 f6                	test   esi,esi
c0006622:	75 0b                	jne    c000662f <f_unlink+0x155>
c0006624:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006628:	e8 3d df ff ff       	call   c000456a <sync_fs>
c000662d:	eb 11                	jmp    c0006640 <f_unlink+0x166>
c000662f:	31 c9                	xor    ecx,ecx
c0006631:	89 f2                	mov    edx,esi
c0006633:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006637:	e8 78 ce ff ff       	call   c00034b4 <remove_chain>
c000663c:	85 c0                	test   eax,eax
c000663e:	74 e4                	je     c0006624 <f_unlink+0x14a>
c0006640:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006644:	83 ec 0c             	sub    esp,0xc
c0006647:	53                   	push   ebx
c0006648:	e8 5d 1e 00 00       	call   c00084aa <ff_memfree>
c000664d:	83 c4 10             	add    esp,0x10
c0006650:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006654:	81 c4 e4 00 00 00    	add    esp,0xe4
c000665a:	5b                   	pop    ebx
c000665b:	5e                   	pop    esi
c000665c:	c3                   	ret    

c000665d <f_mkdir>:
c000665d:	57                   	push   edi
c000665e:	b9 02 00 00 00       	mov    ecx,0x2
c0006663:	56                   	push   esi
c0006664:	53                   	push   ebx
c0006665:	83 c4 80             	add    esp,0xffffff80
c0006668:	8d 54 24 08          	lea    edx,[esp+0x8]
c000666c:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006673:	e8 79 c0 ff ff       	call   c00026f1 <mount_volume>
c0006678:	89 c3                	mov    ebx,eax
c000667a:	85 c0                	test   eax,eax
c000667c:	0f 85 fe 01 00 00    	jne    c0006880 <f_mkdir+0x223>
c0006682:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006686:	bb 11 00 00 00       	mov    ebx,0x11
c000668b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000668f:	83 ec 0c             	sub    esp,0xc
c0006692:	68 60 04 00 00       	push   0x460
c0006697:	e8 f8 1d 00 00       	call   c0008494 <ff_memalloc>
c000669c:	83 c4 10             	add    esp,0x10
c000669f:	89 c7                	mov    edi,eax
c00066a1:	85 c0                	test   eax,eax
c00066a3:	0f 84 d7 01 00 00    	je     c0006880 <f_mkdir+0x223>
c00066a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066ad:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00066b3:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00066b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066b9:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00066c0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066c4:	e8 9e e7 ff ff       	call   c0004e67 <follow_path>
c00066c9:	89 c3                	mov    ebx,eax
c00066cb:	85 c0                	test   eax,eax
c00066cd:	74 3e                	je     c000670d <f_mkdir+0xb0>
c00066cf:	83 f8 04             	cmp    eax,0x4
c00066d2:	75 3e                	jne    c0006712 <f_mkdir+0xb5>
c00066d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066d8:	31 d2                	xor    edx,edx
c00066da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066de:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066e2:	e8 ce cb ff ff       	call   c00032b5 <create_chain>
c00066e7:	89 c6                	mov    esi,eax
c00066e9:	85 c0                	test   eax,eax
c00066eb:	74 0c                	je     c00066f9 <f_mkdir+0x9c>
c00066ed:	bb 02 00 00 00       	mov    ebx,0x2
c00066f2:	83 f8 01             	cmp    eax,0x1
c00066f5:	74 07                	je     c00066fe <f_mkdir+0xa1>
c00066f7:	eb 2a                	jmp    c0006723 <f_mkdir+0xc6>
c00066f9:	bb 07 00 00 00       	mov    ebx,0x7
c00066fe:	31 c9                	xor    ecx,ecx
c0006700:	89 f2                	mov    edx,esi
c0006702:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006706:	e8 a9 cd ff ff       	call   c00034b4 <remove_chain>
c000670b:	eb 05                	jmp    c0006712 <f_mkdir+0xb5>
c000670d:	bb 08 00 00 00       	mov    ebx,0x8
c0006712:	83 ec 0c             	sub    esp,0xc
c0006715:	57                   	push   edi
c0006716:	e8 8f 1d 00 00       	call   c00084aa <ff_memfree>
c000671b:	83 c4 10             	add    esp,0x10
c000671e:	e9 5d 01 00 00       	jmp    c0006880 <f_mkdir+0x223>
c0006723:	bb 01 00 00 00       	mov    ebx,0x1
c0006728:	83 f8 ff             	cmp    eax,0xffffffff
c000672b:	74 d1                	je     c00066fe <f_mkdir+0xa1>
c000672d:	89 f2                	mov    edx,esi
c000672f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006733:	e8 c4 ce ff ff       	call   c00035fc <dir_clear>
c0006738:	89 c3                	mov    ebx,eax
c000673a:	85 c0                	test   eax,eax
c000673c:	75 c0                	jne    c00066fe <f_mkdir+0xa1>
c000673e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006742:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006745:	74 69                	je     c00067b0 <f_mkdir+0x153>
c0006747:	b9 0b 00 00 00       	mov    ecx,0xb
c000674c:	83 c0 54             	add    eax,0x54
c000674f:	ba 20 00 00 00       	mov    edx,0x20
c0006754:	e8 9c b5 ff ff       	call   c0001cf5 <mem_set>
c0006759:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675d:	ba 00 00 21 50       	mov    edx,0x50210000
c0006762:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006766:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000676a:	83 c0 6a             	add    eax,0x6a
c000676d:	e8 65 b5 ff ff       	call   c0001cd7 <st_dword>
c0006772:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006776:	89 f1                	mov    ecx,esi
c0006778:	8d 50 54             	lea    edx,[eax+0x54]
c000677b:	e8 85 e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006780:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006784:	b9 20 00 00 00       	mov    ecx,0x20
c0006789:	8d 50 54             	lea    edx,[eax+0x54]
c000678c:	83 c0 74             	add    eax,0x74
c000678f:	e8 4c b5 ff ff       	call   c0001ce0 <mem_cpy>
c0006794:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006798:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000679c:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00067a0:	8d 50 74             	lea    edx,[eax+0x74]
c00067a3:	e8 5d e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c00067a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067ac:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00067b0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067b4:	e8 2f db ff ff       	call   c00042e8 <dir_register>
c00067b9:	89 c3                	mov    ebx,eax
c00067bb:	85 c0                	test   eax,eax
c00067bd:	0f 85 3b ff ff ff    	jne    c00066fe <f_mkdir+0xa1>
c00067c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067c7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00067ca:	75 74                	jne    c0006840 <f_mkdir+0x1e3>
c00067cc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067cf:	ba 00 00 21 50       	mov    edx,0x50210000
c00067d4:	83 c0 0c             	add    eax,0xc
c00067d7:	e8 fb b4 ff ff       	call   c0001cd7 <st_dword>
c00067dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e0:	89 f2                	mov    edx,esi
c00067e2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067e5:	83 c0 34             	add    eax,0x34
c00067e8:	e8 ea b4 ff ff       	call   c0001cd7 <st_dword>
c00067ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067f1:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067f5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067f8:	c1 e2 09             	shl    edx,0x9
c00067fb:	83 c0 38             	add    eax,0x38
c00067fe:	e8 d4 b4 ff ff       	call   c0001cd7 <st_dword>
c0006803:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006807:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000680b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000680e:	c1 e2 09             	shl    edx,0x9
c0006811:	83 c0 28             	add    eax,0x28
c0006814:	e8 be b4 ff ff       	call   c0001cd7 <st_dword>
c0006819:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006820:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006824:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006827:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c000682b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000682f:	e8 8b d3 ff ff       	call   c0003bbf <store_xdir>
c0006834:	89 c3                	mov    ebx,eax
c0006836:	85 c0                	test   eax,eax
c0006838:	0f 85 d4 fe ff ff    	jne    c0006712 <f_mkdir+0xb5>
c000683e:	eb 30                	jmp    c0006870 <f_mkdir+0x213>
c0006840:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006844:	ba 00 00 21 50       	mov    edx,0x50210000
c0006849:	83 c0 16             	add    eax,0x16
c000684c:	e8 86 b4 ff ff       	call   c0001cd7 <st_dword>
c0006851:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006855:	89 f1                	mov    ecx,esi
c0006857:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000685b:	e8 a5 e5 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006860:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006864:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006868:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000686c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006870:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006874:	e8 f1 dc ff ff       	call   c000456a <sync_fs>
c0006879:	89 c3                	mov    ebx,eax
c000687b:	e9 92 fe ff ff       	jmp    c0006712 <f_mkdir+0xb5>
c0006880:	83 ec 80             	sub    esp,0xffffff80
c0006883:	89 d8                	mov    eax,ebx
c0006885:	5b                   	pop    ebx
c0006886:	5e                   	pop    esi
c0006887:	5f                   	pop    edi
c0006888:	c3                   	ret    

c0006889 <f_rename>:
c0006889:	55                   	push   ebp
c000688a:	57                   	push   edi
c000688b:	56                   	push   esi
c000688c:	53                   	push   ebx
c000688d:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006893:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000689a:	e8 a4 b9 ff ff       	call   c0002243 <get_ldnumber>
c000689f:	b9 02 00 00 00       	mov    ecx,0x2
c00068a4:	8d 54 24 14          	lea    edx,[esp+0x14]
c00068a8:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00068af:	e8 3d be ff ff       	call   c00026f1 <mount_volume>
c00068b4:	85 c0                	test   eax,eax
c00068b6:	0f 85 b5 02 00 00    	jne    c0006b71 <f_rename+0x2e8>
c00068bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068c0:	83 ec 0c             	sub    esp,0xc
c00068c3:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00068c7:	68 60 04 00 00       	push   0x460
c00068cc:	e8 c3 1b 00 00       	call   c0008494 <ff_memalloc>
c00068d1:	83 c4 10             	add    esp,0x10
c00068d4:	89 c3                	mov    ebx,eax
c00068d6:	b8 11 00 00 00       	mov    eax,0x11
c00068db:	85 db                	test   ebx,ebx
c00068dd:	0f 84 8e 02 00 00    	je     c0006b71 <f_rename+0x2e8>
c00068e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e7:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068ed:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068f0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068f3:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068fa:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068fe:	e8 64 e5 ff ff       	call   c0004e67 <follow_path>
c0006903:	85 c0                	test   eax,eax
c0006905:	0f 85 52 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000690b:	b8 06 00 00 00       	mov    eax,0x6
c0006910:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006918:	0f 85 3f 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000691e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006922:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006925:	0f 85 05 01 00 00    	jne    c0006a30 <f_rename+0x1a7>
c000692b:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000692e:	b9 40 00 00 00       	mov    ecx,0x40
c0006933:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006937:	e8 a4 b3 ff ff       	call   c0001ce0 <mem_cpy>
c000693c:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006941:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006945:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000694c:	e8 8f b3 ff ff       	call   c0001ce0 <mem_cpy>
c0006951:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006958:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000695f:	e8 03 e5 ff ff       	call   c0004e67 <follow_path>
c0006964:	85 c0                	test   eax,eax
c0006966:	75 29                	jne    c0006991 <f_rename+0x108>
c0006968:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000696c:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006973:	74 0a                	je     c000697f <f_rename+0xf6>
c0006975:	b8 08 00 00 00       	mov    eax,0x8
c000697a:	e9 de 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c000697f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006986:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000698d:	75 e6                	jne    c0006975 <f_rename+0xec>
c000698f:	eb 09                	jmp    c000699a <f_rename+0x111>
c0006991:	83 f8 04             	cmp    eax,0x4
c0006994:	0f 85 c3 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000699a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a1:	e8 42 d9 ff ff       	call   c00042e8 <dir_register>
c00069a6:	85 c0                	test   eax,eax
c00069a8:	0f 85 af 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c00069ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b2:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00069b5:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00069b8:	89 c5                	mov    ebp,eax
c00069ba:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00069bd:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00069c1:	8d 46 24             	lea    eax,[esi+0x24]
c00069c4:	e8 98 b2 ff ff       	call   c0001c61 <ld_word>
c00069c9:	b9 40 00 00 00       	mov    ecx,0x40
c00069ce:	89 c7                	mov    edi,eax
c00069d0:	8d 54 24 18          	lea    edx,[esp+0x18]
c00069d4:	89 f0                	mov    eax,esi
c00069d6:	e8 05 b3 ff ff       	call   c0001ce0 <mem_cpy>
c00069db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069df:	89 e9                	mov    ecx,ebp
c00069e1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069e4:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069e7:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069ef:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069f2:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069f5:	0f b7 d7             	movzx  edx,di
c00069f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069fb:	83 c0 24             	add    eax,0x24
c00069fe:	e8 d0 b2 ff ff       	call   c0001cd3 <st_word>
c0006a03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a07:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006a0a:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006a0d:	a8 10                	test   al,0x10
c0006a0f:	75 06                	jne    c0006a17 <f_rename+0x18e>
c0006a11:	83 c8 20             	or     eax,0x20
c0006a14:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006a17:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1e:	e8 9c d1 ff ff       	call   c0003bbf <store_xdir>
c0006a23:	85 c0                	test   eax,eax
c0006a25:	0f 84 1c 01 00 00    	je     c0006b47 <f_rename+0x2be>
c0006a2b:	e9 2d 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c0006a30:	b9 20 00 00 00       	mov    ecx,0x20
c0006a35:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a3c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a40:	e8 9b b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a45:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a4a:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a4e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a55:	e8 86 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a5a:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a61:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a68:	e8 fa e3 ff ff       	call   c0004e67 <follow_path>
c0006a6d:	85 c0                	test   eax,eax
c0006a6f:	75 27                	jne    c0006a98 <f_rename+0x20f>
c0006a71:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a75:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a7c:	0f 85 f3 fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a82:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a89:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a90:	0f 85 df fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a96:	eb 09                	jmp    c0006aa1 <f_rename+0x218>
c0006a98:	83 f8 04             	cmp    eax,0x4
c0006a9b:	0f 85 bc 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006aa1:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006aa8:	e8 3b d8 ff ff       	call   c00042e8 <dir_register>
c0006aad:	85 c0                	test   eax,eax
c0006aaf:	0f 85 a8 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006ab5:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006abc:	b9 13 00 00 00       	mov    ecx,0x13
c0006ac1:	8d 46 0d             	lea    eax,[esi+0xd]
c0006ac4:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006ac8:	e8 13 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006acd:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006ad1:	a8 10                	test   al,0x10
c0006ad3:	75 03                	jne    c0006ad8 <f_rename+0x24f>
c0006ad5:	83 c8 20             	or     eax,0x20
c0006ad8:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006adb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006adf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ae3:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006ae7:	74 5e                	je     c0006b47 <f_rename+0x2be>
c0006ae9:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006af0:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006af4:	74 51                	je     c0006b47 <f_rename+0x2be>
c0006af6:	89 f2                	mov    edx,esi
c0006af8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006afc:	8a 07                	mov    al,BYTE PTR [edi]
c0006afe:	e8 d9 e2 ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006b03:	89 c2                	mov    edx,eax
c0006b05:	89 f8                	mov    eax,edi
c0006b07:	e8 ee b3 ff ff       	call   c0001efa <clst2sect>
c0006b0c:	89 c6                	mov    esi,eax
c0006b0e:	89 d1                	mov    ecx,edx
c0006b10:	b8 02 00 00 00       	mov    eax,0x2
c0006b15:	09 f2                	or     edx,esi
c0006b17:	74 44                	je     c0006b5d <f_rename+0x2d4>
c0006b19:	89 f2                	mov    edx,esi
c0006b1b:	89 f8                	mov    eax,edi
c0006b1d:	e8 1d b9 ff ff       	call   c000243f <move_window>
c0006b22:	85 c0                	test   eax,eax
c0006b24:	75 37                	jne    c0006b5d <f_rename+0x2d4>
c0006b26:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b2a:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006b2e:	75 17                	jne    c0006b47 <f_rename+0x2be>
c0006b30:	8d 50 74             	lea    edx,[eax+0x74]
c0006b33:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b3a:	e8 c6 e2 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006b3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b43:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b47:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b4b:	e8 f4 d0 ff ff       	call   c0003c44 <dir_remove>
c0006b50:	85 c0                	test   eax,eax
c0006b52:	75 09                	jne    c0006b5d <f_rename+0x2d4>
c0006b54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b58:	e8 0d da ff ff       	call   c000456a <sync_fs>
c0006b5d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b61:	83 ec 0c             	sub    esp,0xc
c0006b64:	53                   	push   ebx
c0006b65:	e8 40 19 00 00       	call   c00084aa <ff_memfree>
c0006b6a:	83 c4 10             	add    esp,0x10
c0006b6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b71:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b77:	5b                   	pop    ebx
c0006b78:	5e                   	pop    esi
c0006b79:	5f                   	pop    edi
c0006b7a:	5d                   	pop    ebp
c0006b7b:	c3                   	ret    

c0006b7c <f_chmod>:
c0006b7c:	57                   	push   edi
c0006b7d:	b9 02 00 00 00       	mov    ecx,0x2
c0006b82:	56                   	push   esi
c0006b83:	53                   	push   ebx
c0006b84:	83 ec 60             	sub    esp,0x60
c0006b87:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b8b:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b8f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b93:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b97:	e8 55 bb ff ff       	call   c00026f1 <mount_volume>
c0006b9c:	85 c0                	test   eax,eax
c0006b9e:	0f 85 af 00 00 00    	jne    c0006c53 <f_chmod+0xd7>
c0006ba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba8:	83 ec 0c             	sub    esp,0xc
c0006bab:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006baf:	68 60 04 00 00       	push   0x460
c0006bb4:	e8 db 18 00 00       	call   c0008494 <ff_memalloc>
c0006bb9:	83 c4 10             	add    esp,0x10
c0006bbc:	89 c6                	mov    esi,eax
c0006bbe:	b8 11 00 00 00       	mov    eax,0x11
c0006bc3:	85 f6                	test   esi,esi
c0006bc5:	0f 84 88 00 00 00    	je     c0006c53 <f_chmod+0xd7>
c0006bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bcf:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006bd5:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006bd8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bdb:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bdf:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006be3:	e8 7f e2 ff ff       	call   c0004e67 <follow_path>
c0006be8:	85 c0                	test   eax,eax
c0006bea:	75 53                	jne    c0006c3f <f_chmod+0xc3>
c0006bec:	b8 06 00 00 00       	mov    eax,0x6
c0006bf1:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bf6:	75 47                	jne    c0006c3f <f_chmod+0xc3>
c0006bf8:	89 f9                	mov    ecx,edi
c0006bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bfe:	83 e1 27             	and    ecx,0x27
c0006c01:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c04:	75 1d                	jne    c0006c23 <f_chmod+0xa7>
c0006c06:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006c09:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c0c:	21 cb                	and    ebx,ecx
c0006c0e:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c11:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006c14:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c18:	e8 a2 cf ff ff       	call   c0003bbf <store_xdir>
c0006c1d:	85 c0                	test   eax,eax
c0006c1f:	75 1e                	jne    c0006c3f <f_chmod+0xc3>
c0006c21:	eb 13                	jmp    c0006c36 <f_chmod+0xba>
c0006c23:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006c27:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2a:	21 cb                	and    ebx,ecx
c0006c2c:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2f:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006c32:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c3a:	e8 2b d9 ff ff       	call   c000456a <sync_fs>
c0006c3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	56                   	push   esi
c0006c47:	e8 5e 18 00 00       	call   c00084aa <ff_memfree>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c53:	83 c4 60             	add    esp,0x60
c0006c56:	5b                   	pop    ebx
c0006c57:	5e                   	pop    esi
c0006c58:	5f                   	pop    edi
c0006c59:	c3                   	ret    

c0006c5a <f_utime>:
c0006c5a:	56                   	push   esi
c0006c5b:	b9 02 00 00 00       	mov    ecx,0x2
c0006c60:	53                   	push   ebx
c0006c61:	83 ec 64             	sub    esp,0x64
c0006c64:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c68:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c70:	e8 7c ba ff ff       	call   c00026f1 <mount_volume>
c0006c75:	85 c0                	test   eax,eax
c0006c77:	0f 85 b5 00 00 00    	jne    c0006d32 <f_utime+0xd8>
c0006c7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c81:	83 ec 0c             	sub    esp,0xc
c0006c84:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c88:	68 60 04 00 00       	push   0x460
c0006c8d:	e8 02 18 00 00       	call   c0008494 <ff_memalloc>
c0006c92:	83 c4 10             	add    esp,0x10
c0006c95:	89 c3                	mov    ebx,eax
c0006c97:	b8 11 00 00 00       	mov    eax,0x11
c0006c9c:	85 db                	test   ebx,ebx
c0006c9e:	0f 84 8e 00 00 00    	je     c0006d32 <f_utime+0xd8>
c0006ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ca8:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006cae:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006cb1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006cb4:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 a6 e1 ff ff       	call   c0004e67 <follow_path>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 59                	jne    c0006d1e <f_utime+0xc4>
c0006cc5:	b8 06 00 00 00       	mov    eax,0x6
c0006cca:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006ccf:	75 4d                	jne    c0006d1e <f_utime+0xc4>
c0006cd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd5:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006cd9:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006cdd:	c1 e2 10             	shl    edx,0x10
c0006ce0:	09 ca                	or     edx,ecx
c0006ce2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ce5:	75 1a                	jne    c0006d01 <f_utime+0xa7>
c0006ce7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cea:	83 c0 0c             	add    eax,0xc
c0006ced:	e8 e5 af ff ff       	call   c0001cd7 <st_dword>
c0006cf2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cf6:	e8 c4 ce ff ff       	call   c0003bbf <store_xdir>
c0006cfb:	85 c0                	test   eax,eax
c0006cfd:	75 1f                	jne    c0006d1e <f_utime+0xc4>
c0006cff:	eb 14                	jmp    c0006d15 <f_utime+0xbb>
c0006d01:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d05:	83 c0 16             	add    eax,0x16
c0006d08:	e8 ca af ff ff       	call   c0001cd7 <st_dword>
c0006d0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d11:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d19:	e8 4c d8 ff ff       	call   c000456a <sync_fs>
c0006d1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d22:	83 ec 0c             	sub    esp,0xc
c0006d25:	53                   	push   ebx
c0006d26:	e8 7f 17 00 00       	call   c00084aa <ff_memfree>
c0006d2b:	83 c4 10             	add    esp,0x10
c0006d2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d32:	83 c4 64             	add    esp,0x64
c0006d35:	5b                   	pop    ebx
c0006d36:	5e                   	pop    esi
c0006d37:	c3                   	ret    

c0006d38 <f_getlabel>:
c0006d38:	55                   	push   ebp
c0006d39:	31 c9                	xor    ecx,ecx
c0006d3b:	57                   	push   edi
c0006d3c:	56                   	push   esi
c0006d3d:	53                   	push   ebx
c0006d3e:	83 ec 6c             	sub    esp,0x6c
c0006d41:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d45:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d4c:	e8 a0 b9 ff ff       	call   c00026f1 <mount_volume>
c0006d51:	89 c6                	mov    esi,eax
c0006d53:	85 c0                	test   eax,eax
c0006d55:	0f 85 c1 01 00 00    	jne    c0006f1c <f_getlabel+0x1e4>
c0006d5b:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d63:	0f 84 5f 01 00 00    	je     c0006ec8 <f_getlabel+0x190>
c0006d69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6d:	31 d2                	xor    edx,edx
c0006d6f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d73:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d7b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d7f:	e8 39 c4 ff ff       	call   c00031bd <dir_sdi>
c0006d84:	85 c0                	test   eax,eax
c0006d86:	0f 85 2d 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006d8c:	ba 01 00 00 00       	mov    edx,0x1
c0006d91:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d95:	e8 33 cc ff ff       	call   c00039cd <dir_read>
c0006d9a:	85 c0                	test   eax,eax
c0006d9c:	0f 85 17 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006da6:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006da9:	74 09                	je     c0006db4 <f_getlabel+0x7c>
c0006dab:	31 db                	xor    ebx,ebx
c0006dad:	31 c9                	xor    ecx,ecx
c0006daf:	e9 c8 00 00 00       	jmp    c0006e7c <f_getlabel+0x144>
c0006db4:	31 ed                	xor    ebp,ebp
c0006db6:	31 db                	xor    ebx,ebx
c0006db8:	31 ff                	xor    edi,edi
c0006dba:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006dbe:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006dc2:	39 fa                	cmp    edx,edi
c0006dc4:	76 4b                	jbe    c0006e11 <f_getlabel+0xd9>
c0006dc6:	47                   	inc    edi
c0006dc7:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006dca:	01 d0                	add    eax,edx
c0006dcc:	e8 90 ae ff ff       	call   c0001c61 <ld_word>
c0006dd1:	66 85 ed             	test   bp,bp
c0006dd4:	75 0d                	jne    c0006de3 <f_getlabel+0xab>
c0006dd6:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006ddc:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006de1:	76 28                	jbe    c0006e0b <f_getlabel+0xd3>
c0006de3:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006dea:	89 e9                	mov    ecx,ebp
c0006dec:	01 da                	add    edx,ebx
c0006dee:	c1 e1 10             	shl    ecx,0x10
c0006df1:	0f b7 c0             	movzx  eax,ax
c0006df4:	09 c8                	or     eax,ecx
c0006df6:	b9 04 00 00 00       	mov    ecx,0x4
c0006dfb:	e8 01 b0 ff ff       	call   c0001e01 <put_utf>
c0006e00:	84 c0                	test   al,al
c0006e02:	74 0b                	je     c0006e0f <f_getlabel+0xd7>
c0006e04:	0f b6 c0             	movzx  eax,al
c0006e07:	01 c3                	add    ebx,eax
c0006e09:	31 c0                	xor    eax,eax
c0006e0b:	89 c5                	mov    ebp,eax
c0006e0d:	eb ab                	jmp    c0006dba <f_getlabel+0x82>
c0006e0f:	31 db                	xor    ebx,ebx
c0006e11:	66 85 ed             	test   bp,bp
c0006e14:	74 02                	je     c0006e18 <f_getlabel+0xe0>
c0006e16:	31 db                	xor    ebx,ebx
c0006e18:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e1f:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006e23:	e9 a0 00 00 00       	jmp    c0006ec8 <f_getlabel+0x190>
c0006e28:	83 ff 0b             	cmp    edi,0xb
c0006e2b:	74 11                	je     c0006e3e <f_getlabel+0x106>
c0006e2d:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006e32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e36:	8d 79 02             	lea    edi,[ecx+0x2]
c0006e39:	c1 e0 08             	shl    eax,0x8
c0006e3c:	09 c2                	or     edx,eax
c0006e3e:	0f b7 d2             	movzx  edx,dx
c0006e41:	50                   	push   eax
c0006e42:	50                   	push   eax
c0006e43:	68 b5 01 00 00       	push   0x1b5
c0006e48:	52                   	push   edx
c0006e49:	e8 03 17 00 00       	call   c0008551 <ff_oem2uni>
c0006e4e:	83 c4 10             	add    esp,0x10
c0006e51:	66 85 c0             	test   ax,ax
c0006e54:	74 46                	je     c0006e9c <f_getlabel+0x164>
c0006e56:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e5d:	0f b7 c0             	movzx  eax,ax
c0006e60:	01 da                	add    edx,ebx
c0006e62:	b9 04 00 00 00       	mov    ecx,0x4
c0006e67:	e8 95 af ff ff       	call   c0001e01 <put_utf>
c0006e6c:	84 c0                	test   al,al
c0006e6e:	74 2c                	je     c0006e9c <f_getlabel+0x164>
c0006e70:	0f b6 c0             	movzx  eax,al
c0006e73:	01 c3                	add    ebx,eax
c0006e75:	83 ff 0b             	cmp    edi,0xb
c0006e78:	74 24                	je     c0006e9e <f_getlabel+0x166>
c0006e7a:	89 f9                	mov    ecx,edi
c0006e7c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e80:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e83:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e88:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e91:	e8 9f ae ff ff       	call   c0001d35 <dbc_1st>
c0006e96:	85 c0                	test   eax,eax
c0006e98:	74 a4                	je     c0006e3e <f_getlabel+0x106>
c0006e9a:	eb 8c                	jmp    c0006e28 <f_getlabel+0xf0>
c0006e9c:	31 db                	xor    ebx,ebx
c0006e9e:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006ea5:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006ea8:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006eaf:	74 17                	je     c0006ec8 <f_getlabel+0x190>
c0006eb1:	4b                   	dec    ebx
c0006eb2:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006eb5:	74 ee                	je     c0006ea5 <f_getlabel+0x16d>
c0006eb7:	eb 0f                	jmp    c0006ec8 <f_getlabel+0x190>
c0006eb9:	83 f8 04             	cmp    eax,0x4
c0006ebc:	75 5c                	jne    c0006f1a <f_getlabel+0x1e2>
c0006ebe:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006ec5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006ec8:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006ed0:	74 4a                	je     c0006f1c <f_getlabel+0x1e4>
c0006ed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ed6:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006ed9:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006edc:	e8 5e b5 ff ff       	call   c000243f <move_window>
c0006ee1:	89 c6                	mov    esi,eax
c0006ee3:	85 c0                	test   eax,eax
c0006ee5:	75 35                	jne    c0006f1c <f_getlabel+0x1e4>
c0006ee7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eeb:	b8 43 00 00 00       	mov    eax,0x43
c0006ef0:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006ef2:	80 f9 03             	cmp    cl,0x3
c0006ef5:	74 0f                	je     c0006f06 <f_getlabel+0x1ce>
c0006ef7:	31 c0                	xor    eax,eax
c0006ef9:	80 f9 04             	cmp    cl,0x4
c0006efc:	0f 94 c0             	sete   al
c0006eff:	48                   	dec    eax
c0006f00:	83 e0 c3             	and    eax,0xffffffc3
c0006f03:	83 c0 64             	add    eax,0x64
c0006f06:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006f0a:	e8 5f ad ff ff       	call   c0001c6e <ld_dword>
c0006f0f:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006f16:	89 07                	mov    DWORD PTR [edi],eax
c0006f18:	eb 02                	jmp    c0006f1c <f_getlabel+0x1e4>
c0006f1a:	89 c6                	mov    esi,eax
c0006f1c:	83 c4 6c             	add    esp,0x6c
c0006f1f:	89 f0                	mov    eax,esi
c0006f21:	5b                   	pop    ebx
c0006f22:	5e                   	pop    esi
c0006f23:	5f                   	pop    edi
c0006f24:	5d                   	pop    ebp
c0006f25:	c3                   	ret    

c0006f26 <f_setlabel>:
c0006f26:	56                   	push   esi
c0006f27:	b9 02 00 00 00       	mov    ecx,0x2
c0006f2c:	53                   	push   ebx
c0006f2d:	83 ec 74             	sub    esp,0x74
c0006f30:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006f34:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f3b:	e8 b1 b7 ff ff       	call   c00026f1 <mount_volume>
c0006f40:	89 c6                	mov    esi,eax
c0006f42:	85 c0                	test   eax,eax
c0006f44:	0f 85 41 02 00 00    	jne    c000718b <f_setlabel+0x265>
c0006f4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f4e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f51:	0f 85 8e 00 00 00    	jne    c0006fe5 <f_setlabel+0xbf>
c0006f57:	b9 16 00 00 00       	mov    ecx,0x16
c0006f5c:	31 d2                	xor    edx,edx
c0006f5e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f62:	31 db                	xor    ebx,ebx
c0006f64:	e8 8c ad ff ff       	call   c0001cf5 <mem_set>
c0006f69:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f70:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f73:	0f 86 0a 01 00 00    	jbe    c0007083 <f_setlabel+0x15d>
c0006f79:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f80:	e8 b6 ad ff ff       	call   c0001d3b <tchar2uni>
c0006f85:	89 c6                	mov    esi,eax
c0006f87:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f8c:	76 2a                	jbe    c0006fb8 <f_setlabel+0x92>
c0006f8e:	83 f8 ff             	cmp    eax,0xffffffff
c0006f91:	74 05                	je     c0006f98 <f_setlabel+0x72>
c0006f93:	83 fb 09             	cmp    ebx,0x9
c0006f96:	76 0a                	jbe    c0006fa2 <f_setlabel+0x7c>
c0006f98:	be 06 00 00 00       	mov    esi,0x6
c0006f9d:	e9 e9 01 00 00       	jmp    c000718b <f_setlabel+0x265>
c0006fa2:	89 c2                	mov    edx,eax
c0006fa4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fa8:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fab:	c1 ea 10             	shr    edx,0x10
c0006fae:	01 c8                	add    eax,ecx
c0006fb0:	43                   	inc    ebx
c0006fb1:	e8 1d ad ff ff       	call   c0001cd3 <st_word>
c0006fb6:	eb 04                	jmp    c0006fbc <f_setlabel+0x96>
c0006fb8:	85 c0                	test   eax,eax
c0006fba:	74 dc                	je     c0006f98 <f_setlabel+0x72>
c0006fbc:	89 f2                	mov    edx,esi
c0006fbe:	b8 57 92 02 c0       	mov    eax,0xc0029257
c0006fc3:	e8 5b ad ff ff       	call   c0001d23 <chk_chr>
c0006fc8:	85 c0                	test   eax,eax
c0006fca:	75 cc                	jne    c0006f98 <f_setlabel+0x72>
c0006fcc:	83 fb 0a             	cmp    ebx,0xa
c0006fcf:	77 c7                	ja     c0006f98 <f_setlabel+0x72>
c0006fd1:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fd4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fd8:	0f b7 d6             	movzx  edx,si
c0006fdb:	01 c8                	add    eax,ecx
c0006fdd:	43                   	inc    ebx
c0006fde:	e8 f0 ac ff ff       	call   c0001cd3 <st_word>
c0006fe3:	eb 84                	jmp    c0006f69 <f_setlabel+0x43>
c0006fe5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fea:	ba 20 00 00 00       	mov    edx,0x20
c0006fef:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006ff3:	31 db                	xor    ebx,ebx
c0006ff5:	e8 fb ac ff ff       	call   c0001cf5 <mem_set>
c0006ffa:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0007001:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0007004:	76 60                	jbe    c0007066 <f_setlabel+0x140>
c0007006:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c000700d:	e8 29 ad ff ff       	call   c0001d3b <tchar2uni>
c0007012:	3d ff ff 00 00       	cmp    eax,0xffff
c0007017:	0f 87 7b ff ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000701d:	83 ec 0c             	sub    esp,0xc
c0007020:	50                   	push   eax
c0007021:	e8 97 15 00 00       	call   c00085bd <ff_wtoupper>
c0007026:	5a                   	pop    edx
c0007027:	59                   	pop    ecx
c0007028:	68 b5 01 00 00       	push   0x1b5
c000702d:	50                   	push   eax
c000702e:	e8 8e 14 00 00       	call   c00084c1 <ff_uni2oem>
c0007033:	83 c4 10             	add    esp,0x10
c0007036:	89 c6                	mov    esi,eax
c0007038:	66 85 c0             	test   ax,ax
c000703b:	0f 84 57 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007041:	0f b7 d0             	movzx  edx,ax
c0007044:	b8 50 92 02 c0       	mov    eax,0xc0029250
c0007049:	e8 d5 ac ff ff       	call   c0001d23 <chk_chr>
c000704e:	85 c0                	test   eax,eax
c0007050:	0f 85 42 ff ff ff    	jne    c0006f98 <f_setlabel+0x72>
c0007056:	66 81 fe ff 00       	cmp    si,0xff
c000705b:	0f 87 14 01 00 00    	ja     c0007175 <f_setlabel+0x24f>
c0007061:	e9 fa 00 00 00       	jmp    c0007160 <f_setlabel+0x23a>
c0007066:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c000706b:	0f 84 27 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007071:	85 db                	test   ebx,ebx
c0007073:	74 0e                	je     c0007083 <f_setlabel+0x15d>
c0007075:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007078:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c000707d:	75 04                	jne    c0007083 <f_setlabel+0x15d>
c000707f:	89 c3                	mov    ebx,eax
c0007081:	eb ee                	jmp    c0007071 <f_setlabel+0x14b>
c0007083:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007087:	31 d2                	xor    edx,edx
c0007089:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000708d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007095:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007099:	e8 1f c1 ff ff       	call   c00031bd <dir_sdi>
c000709e:	89 c6                	mov    esi,eax
c00070a0:	85 c0                	test   eax,eax
c00070a2:	0f 85 e3 00 00 00    	jne    c000718b <f_setlabel+0x265>
c00070a8:	ba 01 00 00 00       	mov    edx,0x1
c00070ad:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b1:	e8 17 c9 ff ff       	call   c00039cd <dir_read>
c00070b6:	85 c0                	test   eax,eax
c00070b8:	75 21                	jne    c00070db <f_setlabel+0x1b5>
c00070ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00070be:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070c2:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c00070c5:	74 5d                	je     c0007124 <f_setlabel+0x1fe>
c00070c7:	85 db                	test   ebx,ebx
c00070c9:	74 0b                	je     c00070d6 <f_setlabel+0x1b0>
c00070cb:	b9 0b 00 00 00       	mov    ecx,0xb
c00070d0:	8d 54 24 0e          	lea    edx,[esp+0xe]
c00070d4:	eb 70                	jmp    c0007146 <f_setlabel+0x220>
c00070d6:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00070d9:	eb 70                	jmp    c000714b <f_setlabel+0x225>
c00070db:	83 f8 04             	cmp    eax,0x4
c00070de:	75 7c                	jne    c000715c <f_setlabel+0x236>
c00070e0:	85 db                	test   ebx,ebx
c00070e2:	0f 84 a3 00 00 00    	je     c000718b <f_setlabel+0x265>
c00070e8:	ba 01 00 00 00       	mov    edx,0x1
c00070ed:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070f1:	e8 51 ca ff ff       	call   c0003b47 <dir_alloc>
c00070f6:	89 c6                	mov    esi,eax
c00070f8:	85 c0                	test   eax,eax
c00070fa:	0f 85 8b 00 00 00    	jne    c000718b <f_setlabel+0x265>
c0007100:	31 d2                	xor    edx,edx
c0007102:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007106:	b9 20 00 00 00       	mov    ecx,0x20
c000710b:	e8 e5 ab ff ff       	call   c0001cf5 <mem_set>
c0007110:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007114:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007117:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000711b:	75 18                	jne    c0007135 <f_setlabel+0x20f>
c000711d:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0007120:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007124:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007127:	b9 16 00 00 00       	mov    ecx,0x16
c000712c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007130:	83 c0 02             	add    eax,0x2
c0007133:	eb 9b                	jmp    c00070d0 <f_setlabel+0x1aa>
c0007135:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007139:	b9 0b 00 00 00       	mov    ecx,0xb
c000713e:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007142:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007146:	e8 95 ab ff ff       	call   c0001ce0 <mem_cpy>
c000714b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000714f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007153:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007157:	e8 0e d4 ff ff       	call   c000456a <sync_fs>
c000715c:	89 c6                	mov    esi,eax
c000715e:	eb 2b                	jmp    c000718b <f_setlabel+0x265>
c0007160:	83 fb 0a             	cmp    ebx,0xa
c0007163:	0f 87 2f fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c0007169:	89 f0                	mov    eax,esi
c000716b:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000716f:	43                   	inc    ebx
c0007170:	e9 85 fe ff ff       	jmp    c0006ffa <f_setlabel+0xd4>
c0007175:	83 fb 09             	cmp    ebx,0x9
c0007178:	0f 87 1a fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000717e:	89 f0                	mov    eax,esi
c0007180:	66 c1 e8 08          	shr    ax,0x8
c0007184:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007188:	43                   	inc    ebx
c0007189:	eb de                	jmp    c0007169 <f_setlabel+0x243>
c000718b:	89 f0                	mov    eax,esi
c000718d:	83 c4 74             	add    esp,0x74
c0007190:	5b                   	pop    ebx
c0007191:	5e                   	pop    esi
c0007192:	c3                   	ret    

c0007193 <f_forward>:
c0007193:	55                   	push   ebp
c0007194:	57                   	push   edi
c0007195:	56                   	push   esi
c0007196:	53                   	push   ebx
c0007197:	83 ec 2c             	sub    esp,0x2c
c000719a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000719e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00071a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00071a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00071ac:	89 d8                	mov    eax,ebx
c00071ae:	e8 b1 b1 ff ff       	call   c0002364 <validate>
c00071b3:	89 c5                	mov    ebp,eax
c00071b5:	85 c0                	test   eax,eax
c00071b7:	0f 85 aa 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00071c1:	85 ed                	test   ebp,ebp
c00071c3:	0f 85 9e 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00071cd:	0f 84 8f 01 00 00    	je     c0007362 <f_forward+0x1cf>
c00071d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00071d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00071d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071dc:	bf 00 00 00 00       	mov    edi,0x0
c00071e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071e8:	89 d1                	mov    ecx,edx
c00071ea:	19 f9                	sbb    ecx,edi
c00071ec:	0f 83 cf 00 00 00    	jae    c00072c1 <f_forward+0x12e>
c00071f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071f6:	e9 c6 00 00 00       	jmp    c00072c1 <f_forward+0x12e>
c00071fb:	50                   	push   eax
c00071fc:	50                   	push   eax
c00071fd:	6a 00                	push   0x0
c00071ff:	6a 00                	push   0x0
c0007201:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007205:	83 c4 10             	add    esp,0x10
c0007208:	85 c0                	test   eax,eax
c000720a:	0f 84 57 01 00 00    	je     c0007367 <f_forward+0x1d4>
c0007210:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007213:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007217:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000721a:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000721e:	89 d7                	mov    edi,edx
c0007220:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007223:	89 c6                	mov    esi,eax
c0007225:	0f ac fe 09          	shrd   esi,edi,0x9
c0007229:	21 ce                	and    esi,ecx
c000722b:	89 c1                	mov    ecx,eax
c000722d:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007233:	0f 84 98 00 00 00    	je     c00072d1 <f_forward+0x13e>
c0007239:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000723d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007240:	89 c8                	mov    eax,ecx
c0007242:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007246:	e8 af ac ff ff       	call   c0001efa <clst2sect>
c000724b:	89 d7                	mov    edi,edx
c000724d:	09 c7                	or     edi,eax
c000724f:	0f 84 9e 00 00 00    	je     c00072f3 <f_forward+0x160>
c0007255:	31 ff                	xor    edi,edi
c0007257:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000725a:	01 c6                	add    esi,eax
c000725c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007260:	11 d7                	adc    edi,edx
c0007262:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007265:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007268:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000726c:	39 fa                	cmp    edx,edi
c000726e:	0f 85 a2 00 00 00    	jne    c0007316 <f_forward+0x183>
c0007274:	39 f0                	cmp    eax,esi
c0007276:	0f 85 9a 00 00 00    	jne    c0007316 <f_forward+0x183>
c000727c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000727f:	ba 00 02 00 00       	mov    edx,0x200
c0007284:	25 ff 01 00 00       	and    eax,0x1ff
c0007289:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000728d:	29 c2                	sub    edx,eax
c000728f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007292:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007295:	39 d1                	cmp    ecx,edx
c0007297:	76 02                	jbe    c000729b <f_forward+0x108>
c0007299:	89 d1                	mov    ecx,edx
c000729b:	8d 73 50             	lea    esi,[ebx+0x50]
c000729e:	52                   	push   edx
c000729f:	01 c6                	add    esi,eax
c00072a1:	52                   	push   edx
c00072a2:	51                   	push   ecx
c00072a3:	56                   	push   esi
c00072a4:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00072a8:	83 c4 10             	add    esp,0x10
c00072ab:	85 c0                	test   eax,eax
c00072ad:	74 44                	je     c00072f3 <f_forward+0x160>
c00072af:	31 ff                	xor    edi,edi
c00072b1:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00072b4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00072b7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00072bb:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00072bf:	01 07                	add    DWORD PTR [edi],eax
c00072c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00072c6:	0f 85 2f ff ff ff    	jne    c00071fb <f_forward+0x68>
c00072cc:	e9 96 00 00 00       	jmp    c0007367 <f_forward+0x1d4>
c00072d1:	85 f6                	test   esi,esi
c00072d3:	0f 85 60 ff ff ff    	jne    c0007239 <f_forward+0xa6>
c00072d9:	89 d7                	mov    edi,edx
c00072db:	09 c7                	or     edi,eax
c00072dd:	75 05                	jne    c00072e4 <f_forward+0x151>
c00072df:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072e2:	eb 0a                	jmp    c00072ee <f_forward+0x15b>
c00072e4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072e7:	89 d8                	mov    eax,ebx
c00072e9:	e8 d9 bc ff ff       	call   c0002fc7 <get_fat>
c00072ee:	83 f8 01             	cmp    eax,0x1
c00072f1:	77 0b                	ja     c00072fe <f_forward+0x16b>
c00072f3:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072f7:	bd 02 00 00 00       	mov    ebp,0x2
c00072fc:	eb 69                	jmp    c0007367 <f_forward+0x1d4>
c00072fe:	83 f8 ff             	cmp    eax,0xffffffff
c0007301:	75 0b                	jne    c000730e <f_forward+0x17b>
c0007303:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007307:	bd 01 00 00 00       	mov    ebp,0x1
c000730c:	eb 59                	jmp    c0007367 <f_forward+0x1d4>
c000730e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007311:	e9 23 ff ff ff       	jmp    c0007239 <f_forward+0xa6>
c0007316:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000731a:	79 20                	jns    c000733c <f_forward+0x1a9>
c000731c:	83 ec 0c             	sub    esp,0xc
c000731f:	6a 01                	push   0x1
c0007321:	52                   	push   edx
c0007322:	50                   	push   eax
c0007323:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007327:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000732b:	50                   	push   eax
c000732c:	e8 fb a8 ff ff       	call   c0001c2c <disk_write>
c0007331:	83 c4 20             	add    esp,0x20
c0007334:	85 c0                	test   eax,eax
c0007336:	75 cb                	jne    c0007303 <f_forward+0x170>
c0007338:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000733c:	83 ec 0c             	sub    esp,0xc
c000733f:	6a 01                	push   0x1
c0007341:	57                   	push   edi
c0007342:	56                   	push   esi
c0007343:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007347:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000734b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000734f:	50                   	push   eax
c0007350:	e8 c1 a8 ff ff       	call   c0001c16 <disk_read>
c0007355:	83 c4 20             	add    esp,0x20
c0007358:	85 c0                	test   eax,eax
c000735a:	0f 84 1c ff ff ff    	je     c000727c <f_forward+0xe9>
c0007360:	eb a1                	jmp    c0007303 <f_forward+0x170>
c0007362:	bd 07 00 00 00       	mov    ebp,0x7
c0007367:	83 c4 2c             	add    esp,0x2c
c000736a:	89 e8                	mov    eax,ebp
c000736c:	5b                   	pop    ebx
c000736d:	5e                   	pop    esi
c000736e:	5f                   	pop    edi
c000736f:	5d                   	pop    ebp
c0007370:	c3                   	ret    

c0007371 <f_mkfs>:
c0007371:	55                   	push   ebp
c0007372:	57                   	push   edi
c0007373:	56                   	push   esi
c0007374:	53                   	push   ebx
c0007375:	bb 0b 00 00 00       	mov    ebx,0xb
c000737a:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007380:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007387:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000738e:	e8 b0 ae ff ff       	call   c0002243 <get_ldnumber>
c0007393:	85 c0                	test   eax,eax
c0007395:	0f 88 ec 10 00 00    	js     c0008487 <f_mkfs+0x1116>
c000739b:	8b 14 85 e0 e1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1e20]
c00073a2:	85 d2                	test   edx,edx
c00073a4:	74 03                	je     c00073a9 <f_mkfs+0x38>
c00073a6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00073a9:	85 f6                	test   esi,esi
c00073ab:	75 05                	jne    c00073b2 <f_mkfs+0x41>
c00073ad:	be 40 92 02 c0       	mov    esi,0xc0029240
c00073b2:	83 ec 0c             	sub    esp,0xc
c00073b5:	0f b6 c0             	movzx  eax,al
c00073b8:	bb 03 00 00 00       	mov    ebx,0x3
c00073bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00073c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073c5:	e8 49 a8 ff ff       	call   c0001c13 <disk_initialize>
c00073ca:	83 c4 10             	add    esp,0x10
c00073cd:	a8 01                	test   al,0x1
c00073cf:	0f 85 b2 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073d5:	bb 0a 00 00 00       	mov    ebx,0xa
c00073da:	a8 04                	test   al,0x4
c00073dc:	0f 85 a5 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073e5:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073e9:	85 c0                	test   eax,eax
c00073eb:	75 20                	jne    c000740d <f_mkfs+0x9c>
c00073ed:	51                   	push   ecx
c00073ee:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073f2:	50                   	push   eax
c00073f3:	6a 03                	push   0x3
c00073f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073f9:	e8 44 a8 ff ff       	call   c0001c42 <disk_ioctl>
c00073fe:	83 c4 10             	add    esp,0x10
c0007401:	85 c0                	test   eax,eax
c0007403:	74 08                	je     c000740d <f_mkfs+0x9c>
c0007405:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000740d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007411:	8d 42 ff             	lea    eax,[edx-0x1]
c0007414:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007419:	77 04                	ja     c000741f <f_mkfs+0xae>
c000741b:	85 c2                	test   edx,eax
c000741d:	74 08                	je     c0007427 <f_mkfs+0xb6>
c000741f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007427:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000742a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000742e:	48                   	dec    eax
c000742f:	3c 01                	cmp    al,0x1
c0007431:	76 05                	jbe    c0007438 <f_mkfs+0xc7>
c0007433:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007438:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000743b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000743f:	48                   	dec    eax
c0007440:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007445:	77 07                	ja     c000744e <f_mkfs+0xdd>
c0007447:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000744c:	74 08                	je     c0007456 <f_mkfs+0xe5>
c000744e:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007456:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007459:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000745f:	77 07                	ja     c0007468 <f_mkfs+0xf7>
c0007461:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007464:	85 d8                	test   eax,ebx
c0007466:	74 02                	je     c000746a <f_mkfs+0xf9>
c0007468:	31 db                	xor    ebx,ebx
c000746a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007475:	77 0a                	ja     c0007481 <f_mkfs+0x110>
c0007477:	bb 11 00 00 00       	mov    ebx,0x11
c000747c:	e9 06 10 00 00       	jmp    c0008487 <f_mkfs+0x1116>
c0007481:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007488:	8b 36                	mov    esi,DWORD PTR [esi]
c000748a:	85 ed                	test   ebp,ebp
c000748c:	75 1e                	jne    c00074ac <f_mkfs+0x13b>
c000748e:	83 ec 0c             	sub    esp,0xc
c0007491:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007498:	25 00 fe ff ff       	and    eax,0xfffffe00
c000749d:	50                   	push   eax
c000749e:	e8 f1 0f 00 00       	call   c0008494 <ff_memalloc>
c00074a3:	83 c4 10             	add    esp,0x10
c00074a6:	89 c5                	mov    ebp,eax
c00074a8:	85 c0                	test   eax,eax
c00074aa:	74 cb                	je     c0007477 <f_mkfs+0x106>
c00074ac:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00074b4:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00074bc:	52                   	push   edx
c00074bd:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00074c1:	50                   	push   eax
c00074c2:	6a 01                	push   0x1
c00074c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074c8:	e8 75 a7 ff ff       	call   c0001c42 <disk_ioctl>
c00074cd:	83 c4 10             	add    esp,0x10
c00074d0:	85 c0                	test   eax,eax
c00074d2:	0f 85 4a 0f 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00074d8:	89 f1                	mov    ecx,esi
c00074da:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074e2:	83 e1 0f             	and    ecx,0xf
c00074e5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074ed:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074f1:	83 e6 08             	and    esi,0x8
c00074f4:	75 56                	jne    c000754c <f_mkfs+0x1db>
c00074f6:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074fa:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074fe:	83 ff 00             	cmp    edi,0x0
c0007501:	76 20                	jbe    c0007523 <f_mkfs+0x1b2>
c0007503:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007508:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007510:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007516:	83 d7 ff             	adc    edi,0xffffffff
c0007519:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000751d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007521:	eb 21                	jmp    c0007544 <f_mkfs+0x1d3>
c0007523:	ba 3f 00 00 00       	mov    edx,0x3f
c0007528:	39 f2                	cmp    edx,esi
c000752a:	19 f8                	sbb    eax,edi
c000752c:	73 1e                	jae    c000754c <f_mkfs+0x1db>
c000752e:	83 c6 c1             	add    esi,0xffffffc1
c0007531:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007539:	83 d7 ff             	adc    edi,0xffffffff
c000753c:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007540:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007544:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000754c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007550:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007554:	89 04 24             	mov    DWORD PTR [esp],eax
c0007557:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000755b:	31 c0                	xor    eax,eax
c000755d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007562:	89 c7                	mov    edi,eax
c0007564:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007567:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000756b:	0f 83 c5 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c0007571:	89 df                	mov    edi,ebx
c0007573:	c1 ef 09             	shr    edi,0x9
c0007576:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000757a:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007581:	c1 ef 09             	shr    edi,0x9
c0007584:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007589:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000758d:	74 29                	je     c00075b8 <f_mkfs+0x247>
c000758f:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007595:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000759a:	0f 97 c2             	seta   dl
c000759d:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00075a0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075a4:	0f 92 c0             	setb   al
c00075a7:	08 c2                	or     dl,al
c00075a9:	75 5b                	jne    c0007606 <f_mkfs+0x295>
c00075ab:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075af:	83 e0 07             	and    eax,0x7
c00075b2:	3c 04                	cmp    al,0x4
c00075b4:	74 50                	je     c0007606 <f_mkfs+0x295>
c00075b6:	eb 1b                	jmp    c00075d3 <f_mkfs+0x262>
c00075b8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00075bd:	0f 87 73 0a 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c00075c3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00075c9:	76 08                	jbe    c00075d3 <f_mkfs+0x262>
c00075cb:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00075d3:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075d7:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075db:	83 e0 01             	and    eax,0x1
c00075de:	80 e1 02             	and    cl,0x2
c00075e1:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075e5:	74 0d                	je     c00075f4 <f_mkfs+0x283>
c00075e7:	84 c0                	test   al,al
c00075e9:	0f 84 53 09 00 00    	je     c0007f42 <f_mkfs+0xbd1>
c00075ef:	e9 12 08 00 00       	jmp    c0007e06 <f_mkfs+0xa95>
c00075f4:	bb 13 00 00 00       	mov    ebx,0x13
c00075f9:	84 c0                	test   al,al
c00075fb:	0f 85 05 08 00 00    	jne    c0007e06 <f_mkfs+0xa95>
c0007601:	e9 39 0e 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0007606:	31 c0                	xor    eax,eax
c0007608:	ba ff 0f 00 00       	mov    edx,0xfff
c000760d:	89 c7                	mov    edi,eax
c000760f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007612:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007616:	0f 83 1a 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c000761c:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007622:	77 39                	ja     c000765d <f_mkfs+0x2ec>
c0007624:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007629:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007631:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007634:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007638:	73 08                	jae    c0007642 <f_mkfs+0x2d1>
c000763a:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007642:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007647:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000764a:	b8 00 00 00 00       	mov    eax,0x0
c000764f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007653:	73 08                	jae    c000765d <f_mkfs+0x2ec>
c0007655:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000765d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007661:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007665:	83 c0 20             	add    eax,0x20
c0007668:	83 d2 00             	adc    edx,0x0
c000766b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000766f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007673:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007677:	31 d2                	xor    edx,edx
c0007679:	31 ff                	xor    edi,edi
c000767b:	52                   	push   edx
c000767c:	89 fb                	mov    ebx,edi
c000767e:	50                   	push   eax
c000767f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007683:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007687:	e8 f0 f1 01 00       	call   c002687c <__udivdi3>
c000768c:	83 c4 10             	add    esp,0x10
c000768f:	c1 e0 02             	shl    eax,0x2
c0007692:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007696:	05 07 02 00 00       	add    eax,0x207
c000769b:	89 f1                	mov    ecx,esi
c000769d:	c1 e8 09             	shr    eax,0x9
c00076a0:	83 c1 ff             	add    ecx,0xffffffff
c00076a3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00076a7:	83 d3 ff             	adc    ebx,0xffffffff
c00076aa:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00076ae:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00076b2:	31 d2                	xor    edx,edx
c00076b4:	01 c8                	add    eax,ecx
c00076b6:	11 da                	adc    edx,ebx
c00076b8:	89 c1                	mov    ecx,eax
c00076ba:	f7 de                	neg    esi
c00076bc:	89 d0                	mov    eax,edx
c00076be:	83 d7 00             	adc    edi,0x0
c00076c1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00076c5:	f7 df                	neg    edi
c00076c7:	21 f1                	and    ecx,esi
c00076c9:	21 f8                	and    eax,edi
c00076cb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00076cf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00076d3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00076d7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076db:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076df:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076e2:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076e6:	0f ac d0 01          	shrd   eax,edx,0x1
c00076ea:	89 df                	mov    edi,ebx
c00076ec:	d1 ea                	shr    edx,1
c00076ee:	39 c1                	cmp    ecx,eax
c00076f0:	19 d7                	sbb    edi,edx
c00076f2:	0f 83 3e 09 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c00076f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076fc:	31 d2                	xor    edx,edx
c00076fe:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007702:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007706:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000770a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000770d:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007711:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007715:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007719:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000771d:	83 f8 0f             	cmp    eax,0xf
c0007720:	0f 86 10 09 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007726:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000772e:	0f 87 02 09 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007734:	31 d2                	xor    edx,edx
c0007736:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000773a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007742:	83 c0 07             	add    eax,0x7
c0007745:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000774d:	c1 e8 03             	shr    eax,0x3
c0007750:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007757:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000775b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000775f:	c1 e0 09             	shl    eax,0x9
c0007762:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007766:	48                   	dec    eax
c0007767:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000776b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000776f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007773:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007777:	31 d2                	xor    edx,edx
c0007779:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000777d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007784:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007788:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000778d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007791:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007795:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007799:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000779d:	31 ff                	xor    edi,edi
c000779f:	31 f6                	xor    esi,esi
c00077a1:	31 db                	xor    ebx,ebx
c00077a3:	85 ff                	test   edi,edi
c00077a5:	74 05                	je     c00077ac <f_mkfs+0x43b>
c00077a7:	4f                   	dec    edi
c00077a8:	74 44                	je     c00077ee <f_mkfs+0x47d>
c00077aa:	eb 4f                	jmp    c00077fb <f_mkfs+0x48a>
c00077ac:	83 ec 0c             	sub    esp,0xc
c00077af:	0f b7 c3             	movzx  eax,bx
c00077b2:	50                   	push   eax
c00077b3:	e8 05 0e 00 00       	call   c00085bd <ff_wtoupper>
c00077b8:	83 c4 10             	add    esp,0x10
c00077bb:	89 c1                	mov    ecx,eax
c00077bd:	8d 53 01             	lea    edx,[ebx+0x1]
c00077c0:	66 39 c3             	cmp    bx,ax
c00077c3:	75 3e                	jne    c0007803 <f_mkfs+0x492>
c00077c5:	be 01 00 00 00       	mov    esi,0x1
c00077ca:	89 df                	mov    edi,ebx
c00077cc:	66 01 f7             	add    di,si
c00077cf:	75 07                	jne    c00077d8 <f_mkfs+0x467>
c00077d1:	83 fe 7f             	cmp    esi,0x7f
c00077d4:	77 31                	ja     c0007807 <f_mkfs+0x496>
c00077d6:	eb 16                	jmp    c00077ee <f_mkfs+0x47d>
c00077d8:	83 ec 0c             	sub    esp,0xc
c00077db:	0f b7 ff             	movzx  edi,di
c00077de:	57                   	push   edi
c00077df:	e8 d9 0d 00 00       	call   c00085bd <ff_wtoupper>
c00077e4:	83 c4 10             	add    esp,0x10
c00077e7:	39 c7                	cmp    edi,eax
c00077e9:	75 e6                	jne    c00077d1 <f_mkfs+0x460>
c00077eb:	46                   	inc    esi
c00077ec:	eb dc                	jmp    c00077ca <f_mkfs+0x459>
c00077ee:	31 c0                	xor    eax,eax
c00077f0:	89 d9                	mov    ecx,ebx
c00077f2:	4e                   	dec    esi
c00077f3:	0f 95 c0             	setne  al
c00077f6:	43                   	inc    ebx
c00077f7:	89 c7                	mov    edi,eax
c00077f9:	eb 14                	jmp    c000780f <f_mkfs+0x49e>
c00077fb:	89 f1                	mov    ecx,esi
c00077fd:	01 f3                	add    ebx,esi
c00077ff:	31 ff                	xor    edi,edi
c0007801:	eb 0c                	jmp    c000780f <f_mkfs+0x49e>
c0007803:	89 d3                	mov    ebx,edx
c0007805:	eb 08                	jmp    c000780f <f_mkfs+0x49e>
c0007807:	bf 02 00 00 00       	mov    edi,0x2
c000780c:	83 c9 ff             	or     ecx,0xffffffff
c000780f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007813:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007816:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000781a:	0f b6 c1             	movzx  eax,cl
c000781d:	e8 3a a9 ff ff       	call   c000215c <xsum32>
c0007822:	66 c1 e9 08          	shr    cx,0x8
c0007826:	89 c2                	mov    edx,eax
c0007828:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782b:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000782f:	0f b7 c1             	movzx  eax,cx
c0007832:	e8 25 a9 ff ff       	call   c000215c <xsum32>
c0007837:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000783c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007840:	66 85 db             	test   bx,bx
c0007843:	74 1f                	je     c0007864 <f_mkfs+0x4f3>
c0007845:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007848:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000784f:	83 c0 02             	add    eax,0x2
c0007852:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007858:	39 c2                	cmp    edx,eax
c000785a:	74 08                	je     c0007864 <f_mkfs+0x4f3>
c000785c:	89 04 24             	mov    DWORD PTR [esp],eax
c000785f:	e9 3f ff ff ff       	jmp    c00077a3 <f_mkfs+0x432>
c0007864:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007867:	83 ec 0c             	sub    esp,0xc
c000786a:	05 01 02 00 00       	add    eax,0x201
c000786f:	c1 e8 09             	shr    eax,0x9
c0007872:	50                   	push   eax
c0007873:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007877:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787f:	55                   	push   ebp
c0007880:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007884:	e8 a3 a3 ff ff       	call   c0001c2c <disk_write>
c0007889:	83 c4 20             	add    esp,0x20
c000788c:	85 c0                	test   eax,eax
c000788e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007891:	0f 85 8b 0b 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007897:	89 d0                	mov    eax,edx
c0007899:	31 d2                	xor    edx,edx
c000789b:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c000789f:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00078a3:	66 85 db             	test   bx,bx
c00078a6:	74 04                	je     c00078ac <f_mkfs+0x53b>
c00078a8:	31 c0                	xor    eax,eax
c00078aa:	eb b0                	jmp    c000785c <f_mkfs+0x4eb>
c00078ac:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078b0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00078b4:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00078b8:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00078be:	31 d2                	xor    edx,edx
c00078c0:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00078cb:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078cf:	c1 eb 09             	shr    ebx,0x9
c00078d2:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00078d9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078dd:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078e5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078e9:	8d 70 01             	lea    esi,[eax+0x1]
c00078ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078f0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078f4:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078fb:	31 d2                	xor    edx,edx
c00078fd:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007902:	89 04 24             	mov    DWORD PTR [esp],eax
c0007905:	89 c1                	mov    ecx,eax
c0007907:	89 e8                	mov    eax,ebp
c0007909:	e8 e7 a3 ff ff       	call   c0001cf5 <mem_set>
c000790e:	31 c0                	xor    eax,eax
c0007910:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007913:	76 10                	jbe    c0007925 <f_mkfs+0x5b4>
c0007915:	83 fe 07             	cmp    esi,0x7
c0007918:	76 0b                	jbe    c0007925 <f_mkfs+0x5b4>
c000791a:	40                   	inc    eax
c000791b:	83 ee 08             	sub    esi,0x8
c000791e:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007923:	eb eb                	jmp    c0007910 <f_mkfs+0x59f>
c0007925:	b2 01                	mov    dl,0x1
c0007927:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c000792b:	85 f6                	test   esi,esi
c000792d:	74 0c                	je     c000793b <f_mkfs+0x5ca>
c000792f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007932:	76 07                	jbe    c000793b <f_mkfs+0x5ca>
c0007934:	08 11                	or     BYTE PTR [ecx],dl
c0007936:	4e                   	dec    esi
c0007937:	d1 e2                	shl    edx,1
c0007939:	eb f0                	jmp    c000792b <f_mkfs+0x5ba>
c000793b:	89 df                	mov    edi,ebx
c000793d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007941:	76 04                	jbe    c0007947 <f_mkfs+0x5d6>
c0007943:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007947:	83 ec 0c             	sub    esp,0xc
c000794a:	57                   	push   edi
c000794b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000794f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007953:	55                   	push   ebp
c0007954:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007958:	e8 cf a2 ff ff       	call   c0001c2c <disk_write>
c000795d:	83 c4 20             	add    esp,0x20
c0007960:	85 c0                	test   eax,eax
c0007962:	0f 85 ba 0a 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007968:	31 d2                	xor    edx,edx
c000796a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000796e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007972:	29 fb                	sub    ebx,edi
c0007974:	0f 85 7a ff ff ff    	jne    c00078f4 <f_mkfs+0x583>
c000797a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000797e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007986:	31 f6                	xor    esi,esi
c0007988:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000798c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000798f:	31 d2                	xor    edx,edx
c0007991:	89 e8                	mov    eax,ebp
c0007993:	e8 5d a3 ff ff       	call   c0001cf5 <mem_set>
c0007998:	31 c9                	xor    ecx,ecx
c000799a:	85 db                	test   ebx,ebx
c000799c:	75 40                	jne    c00079de <f_mkfs+0x66d>
c000799e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00079a3:	89 e8                	mov    eax,ebp
c00079a5:	bb 02 00 00 00       	mov    ebx,0x2
c00079aa:	e8 28 a3 ff ff       	call   c0001cd7 <st_dword>
c00079af:	8d 45 04             	lea    eax,[ebp+0x4]
c00079b2:	83 ca ff             	or     edx,0xffffffff
c00079b5:	e8 1d a3 ff ff       	call   c0001cd7 <st_dword>
c00079ba:	b9 08 00 00 00       	mov    ecx,0x8
c00079bf:	eb 1d                	jmp    c00079de <f_mkfs+0x66d>
c00079c1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c4:	76 3b                	jbe    c0007a01 <f_mkfs+0x690>
c00079c6:	43                   	inc    ebx
c00079c7:	83 fe 01             	cmp    esi,0x1
c00079ca:	89 da                	mov    edx,ebx
c00079cc:	77 03                	ja     c00079d1 <f_mkfs+0x660>
c00079ce:	83 ca ff             	or     edx,0xffffffff
c00079d1:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00079d5:	4e                   	dec    esi
c00079d6:	e8 fc a2 ff ff       	call   c0001cd7 <st_dword>
c00079db:	83 c1 04             	add    ecx,0x4
c00079de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079e2:	85 f6                	test   esi,esi
c00079e4:	75 db                	jne    c00079c1 <f_mkfs+0x650>
c00079e6:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079eb:	77 14                	ja     c0007a01 <f_mkfs+0x690>
c00079ed:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079f1:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079f8:	85 f6                	test   esi,esi
c00079fa:	74 05                	je     c0007a01 <f_mkfs+0x690>
c00079fc:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079ff:	77 dd                	ja     c00079de <f_mkfs+0x66d>
c0007a01:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007a05:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a09:	39 cf                	cmp    edi,ecx
c0007a0b:	76 02                	jbe    c0007a0f <f_mkfs+0x69e>
c0007a0d:	89 cf                	mov    edi,ecx
c0007a0f:	83 ec 0c             	sub    esp,0xc
c0007a12:	57                   	push   edi
c0007a13:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a17:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a1b:	55                   	push   ebp
c0007a1c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a20:	e8 07 a2 ff ff       	call   c0001c2c <disk_write>
c0007a25:	83 c4 20             	add    esp,0x20
c0007a28:	85 c0                	test   eax,eax
c0007a2a:	0f 85 f2 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007a30:	31 d2                	xor    edx,edx
c0007a32:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007a36:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a3a:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a3e:	0f 85 48 ff ff ff    	jne    c000798c <f_mkfs+0x61b>
c0007a44:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a47:	31 d2                	xor    edx,edx
c0007a49:	89 e8                	mov    eax,ebp
c0007a4b:	31 ff                	xor    edi,edi
c0007a4d:	e8 a3 a2 ff ff       	call   c0001cf5 <mem_set>
c0007a52:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a55:	ba 02 00 00 00       	mov    edx,0x2
c0007a5a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a5e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a62:	e8 70 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a67:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a6a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a6e:	e8 64 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a73:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a76:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a7a:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a7e:	e8 54 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a83:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a86:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a8a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a8e:	83 c2 02             	add    edx,0x2
c0007a91:	e8 41 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a96:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a99:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a9d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007aa1:	e8 31 a2 ff ff       	call   c0001cd7 <st_dword>
c0007aa6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007aaa:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007aaf:	89 c6                	mov    esi,eax
c0007ab1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ab5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007ab9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007abc:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007ac0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007ac3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007ac7:	39 cb                	cmp    ebx,ecx
c0007ac9:	76 02                	jbe    c0007acd <f_mkfs+0x75c>
c0007acb:	89 cb                	mov    ebx,ecx
c0007acd:	83 ec 0c             	sub    esp,0xc
c0007ad0:	53                   	push   ebx
c0007ad1:	57                   	push   edi
c0007ad2:	56                   	push   esi
c0007ad3:	55                   	push   ebp
c0007ad4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ad8:	e8 4f a1 ff ff       	call   c0001c2c <disk_write>
c0007add:	83 c4 20             	add    esp,0x20
c0007ae0:	85 c0                	test   eax,eax
c0007ae2:	0f 85 3a 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007ae8:	31 d2                	xor    edx,edx
c0007aea:	b9 00 02 00 00       	mov    ecx,0x200
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 ff a1 ff ff       	call   c0001cf5 <mem_set>
c0007af6:	31 d2                	xor    edx,edx
c0007af8:	01 de                	add    esi,ebx
c0007afa:	11 d7                	adc    edi,edx
c0007afc:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007aff:	75 bf                	jne    c0007ac0 <f_mkfs+0x74f>
c0007b01:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b05:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007b09:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007b11:	b9 00 02 00 00       	mov    ecx,0x200
c0007b16:	31 d2                	xor    edx,edx
c0007b18:	89 e8                	mov    eax,ebp
c0007b1a:	e8 d6 a1 ff ff       	call   c0001cf5 <mem_set>
c0007b1f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007b24:	ba 20 93 02 c0       	mov    edx,0xc0029320
c0007b29:	89 e8                	mov    eax,ebp
c0007b2b:	e8 b0 a1 ff ff       	call   c0001ce0 <mem_cpy>
c0007b30:	8d 45 40             	lea    eax,[ebp+0x40]
c0007b33:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007b37:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b3b:	e8 9a a1 ff ff       	call   c0001cda <st_qword>
c0007b40:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b44:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b47:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b4b:	e8 8a a1 ff ff       	call   c0001cda <st_qword>
c0007b50:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b53:	ba 20 00 00 00       	mov    edx,0x20
c0007b58:	e8 7a a1 ff ff       	call   c0001cd7 <st_dword>
c0007b5d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b61:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b65:	e8 6d a1 ff ff       	call   c0001cd7 <st_dword>
c0007b6a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b6e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b72:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b76:	e8 5c a1 ff ff       	call   c0001cd7 <st_dword>
c0007b7b:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b7e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b82:	e8 50 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b87:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b8b:	8d 50 02             	lea    edx,[eax+0x2]
c0007b8e:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b91:	e8 41 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b96:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b99:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b9e:	e8 34 a1 ff ff       	call   c0001cd7 <st_dword>
c0007ba3:	8d 45 68             	lea    eax,[ebp+0x68]
c0007ba6:	ba 00 01 00 00       	mov    edx,0x100
c0007bab:	e8 23 a1 ff ff       	call   c0001cd3 <st_word>
c0007bb0:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007bb4:	b8 0a 00 00 00       	mov    eax,0xa
c0007bb9:	48                   	dec    eax
c0007bba:	74 05                	je     c0007bc1 <f_mkfs+0x850>
c0007bbc:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007bbf:	eb f8                	jmp    c0007bb9 <f_mkfs+0x848>
c0007bc1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bc5:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007bc9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007bcd:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007bd1:	74 05                	je     c0007bd8 <f_mkfs+0x867>
c0007bd3:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007bd6:	eb f5                	jmp    c0007bcd <f_mkfs+0x85c>
c0007bd8:	8d 45 78             	lea    eax,[ebp+0x78]
c0007bdb:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007be0:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007be6:	31 db                	xor    ebx,ebx
c0007be8:	e8 e6 a0 ff ff       	call   c0001cd3 <st_word>
c0007bed:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bf3:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bf8:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bfb:	e8 d3 a0 ff ff       	call   c0001cd3 <st_word>
c0007c00:	31 c9                	xor    ecx,ecx
c0007c02:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007c05:	83 f8 01             	cmp    eax,0x1
c0007c08:	76 13                	jbe    c0007c1d <f_mkfs+0x8ac>
c0007c0a:	83 f9 70             	cmp    ecx,0x70
c0007c0d:	74 0e                	je     c0007c1d <f_mkfs+0x8ac>
c0007c0f:	89 da                	mov    edx,ebx
c0007c11:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007c16:	e8 41 a5 ff ff       	call   c000215c <xsum32>
c0007c1b:	89 c3                	mov    ebx,eax
c0007c1d:	41                   	inc    ecx
c0007c1e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c24:	75 dc                	jne    c0007c02 <f_mkfs+0x891>
c0007c26:	89 f0                	mov    eax,esi
c0007c28:	89 fa                	mov    edx,edi
c0007c2a:	83 c0 01             	add    eax,0x1
c0007c2d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007c31:	83 d2 00             	adc    edx,0x0
c0007c34:	83 ec 0c             	sub    esp,0xc
c0007c37:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c3b:	6a 01                	push   0x1
c0007c3d:	57                   	push   edi
c0007c3e:	56                   	push   esi
c0007c3f:	55                   	push   ebp
c0007c40:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c44:	e8 e3 9f ff ff       	call   c0001c2c <disk_write>
c0007c49:	83 c4 20             	add    esp,0x20
c0007c4c:	85 c0                	test   eax,eax
c0007c4e:	0f 85 ce 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007c54:	31 d2                	xor    edx,edx
c0007c56:	b9 00 02 00 00       	mov    ecx,0x200
c0007c5b:	89 e8                	mov    eax,ebp
c0007c5d:	e8 93 a0 ff ff       	call   c0001cf5 <mem_set>
c0007c62:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c67:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c6a:	e8 64 a0 ff ff       	call   c0001cd3 <st_word>
c0007c6f:	89 f0                	mov    eax,esi
c0007c71:	89 fa                	mov    edx,edi
c0007c73:	83 c0 09             	add    eax,0x9
c0007c76:	83 d2 00             	adc    edx,0x0
c0007c79:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c7c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c80:	31 c9                	xor    ecx,ecx
c0007c82:	41                   	inc    ecx
c0007c83:	89 da                	mov    edx,ebx
c0007c85:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c8a:	e8 cd a4 ff ff       	call   c000215c <xsum32>
c0007c8f:	89 c3                	mov    ebx,eax
c0007c91:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c97:	75 e9                	jne    c0007c82 <f_mkfs+0x911>
c0007c99:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c9d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007ca1:	83 c0 01             	add    eax,0x1
c0007ca4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007ca8:	83 d2 00             	adc    edx,0x0
c0007cab:	83 ec 0c             	sub    esp,0xc
c0007cae:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007cb2:	6a 01                	push   0x1
c0007cb4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cb8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cbc:	55                   	push   ebp
c0007cbd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007cc1:	e8 66 9f ff ff       	call   c0001c2c <disk_write>
c0007cc6:	83 c4 20             	add    esp,0x20
c0007cc9:	85 c0                	test   eax,eax
c0007ccb:	0f 85 51 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007cd1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cd5:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007cd9:	75 09                	jne    c0007ce4 <f_mkfs+0x973>
c0007cdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007cde:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ce2:	74 12                	je     c0007cf6 <f_mkfs+0x985>
c0007ce4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ce8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cf0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cf4:	eb 8a                	jmp    c0007c80 <f_mkfs+0x90f>
c0007cf6:	31 d2                	xor    edx,edx
c0007cf8:	b9 00 02 00 00       	mov    ecx,0x200
c0007cfd:	89 e8                	mov    eax,ebp
c0007cff:	e8 f1 9f ff ff       	call   c0001cf5 <mem_set>
c0007d04:	83 c6 0b             	add    esi,0xb
c0007d07:	83 d7 00             	adc    edi,0x0
c0007d0a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007d0e:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007d12:	31 c9                	xor    ecx,ecx
c0007d14:	41                   	inc    ecx
c0007d15:	89 da                	mov    edx,ebx
c0007d17:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007d1c:	e8 3b a4 ff ff       	call   c000215c <xsum32>
c0007d21:	89 c3                	mov    ebx,eax
c0007d23:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d29:	75 e9                	jne    c0007d14 <f_mkfs+0x9a3>
c0007d2b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d2e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d32:	83 c6 01             	add    esi,0x1
c0007d35:	83 d7 00             	adc    edi,0x0
c0007d38:	83 ec 0c             	sub    esp,0xc
c0007d3b:	6a 01                	push   0x1
c0007d3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d45:	55                   	push   ebp
c0007d46:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d4a:	e8 dd 9e ff ff       	call   c0001c2c <disk_write>
c0007d4f:	83 c4 20             	add    esp,0x20
c0007d52:	85 c0                	test   eax,eax
c0007d54:	0f 85 c8 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007d5a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d5e:	75 06                	jne    c0007d66 <f_mkfs+0x9f5>
c0007d60:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d64:	74 09                	je     c0007d6f <f_mkfs+0x9fe>
c0007d66:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d69:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d6d:	eb a3                	jmp    c0007d12 <f_mkfs+0x9a1>
c0007d6f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d73:	89 da                	mov    edx,ebx
c0007d75:	01 e8                	add    eax,ebp
c0007d77:	e8 5b 9f ff ff       	call   c0001cd7 <st_dword>
c0007d7c:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d81:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d89:	75 e4                	jne    c0007d6f <f_mkfs+0x9fe>
c0007d8b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d8e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d92:	83 c6 02             	add    esi,0x2
c0007d95:	83 d7 00             	adc    edi,0x0
c0007d98:	83 ec 0c             	sub    esp,0xc
c0007d9b:	6a 01                	push   0x1
c0007d9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da5:	55                   	push   ebp
c0007da6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007daa:	e8 7d 9e ff ff       	call   c0001c2c <disk_write>
c0007daf:	83 c4 20             	add    esp,0x20
c0007db2:	85 c0                	test   eax,eax
c0007db4:	0f 85 68 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007dba:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007dbf:	74 0d                	je     c0007dce <f_mkfs+0xa5d>
c0007dc1:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007dc9:	e9 43 fd ff ff       	jmp    c0007b11 <f_mkfs+0x7a0>
c0007dce:	b1 07                	mov    cl,0x7
c0007dd0:	e9 e3 05 00 00       	jmp    c00083b8 <f_mkfs+0x1047>
c0007dd5:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007dda:	0f 85 4f 02 00 00    	jne    c000802f <f_mkfs+0xcbe>
c0007de0:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007de5:	0f 86 22 02 00 00    	jbe    c000800d <f_mkfs+0xc9c>
c0007deb:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007df0:	0f 85 81 06 00 00    	jne    c0008477 <f_mkfs+0x1106>
c0007df6:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007df9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dfd:	83 f8 40             	cmp    eax,0x40
c0007e00:	0f 87 51 06 00 00    	ja     c0008457 <f_mkfs+0x10e6>
c0007e06:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007e0a:	85 ff                	test   edi,edi
c0007e0c:	75 1c                	jne    c0007e2a <f_mkfs+0xab9>
c0007e0e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007e11:	ba 20 92 02 c0       	mov    edx,0xc0029220
c0007e16:	c1 e9 0c             	shr    ecx,0xc
c0007e19:	bf 01 00 00 00       	mov    edi,0x1
c0007e1e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007e21:	66 85 c0             	test   ax,ax
c0007e24:	0f 85 95 01 00 00    	jne    c0007fbf <f_mkfs+0xc4e>
c0007e2a:	31 d2                	xor    edx,edx
c0007e2c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e2f:	f7 f7                	div    edi
c0007e31:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e36:	0f 86 95 01 00 00    	jbe    c0007fd1 <f_mkfs+0xc60>
c0007e3c:	83 c0 02             	add    eax,0x2
c0007e3f:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e44:	01 c0                	add    eax,eax
c0007e46:	05 ff 01 00 00       	add    eax,0x1ff
c0007e4b:	be 01 00 00 00       	mov    esi,0x1
c0007e50:	c1 e8 09             	shr    eax,0x9
c0007e53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e57:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e5b:	c1 e0 05             	shl    eax,0x5
c0007e5e:	c1 e8 09             	shr    eax,0x9
c0007e61:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e65:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e6a:	31 d2                	xor    edx,edx
c0007e6c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e70:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e74:	89 f0                	mov    eax,esi
c0007e76:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e7a:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e7e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e82:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e86:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e8a:	31 d2                	xor    edx,edx
c0007e8c:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e91:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e95:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e99:	31 db                	xor    ebx,ebx
c0007e9b:	01 c8                	add    eax,ecx
c0007e9d:	11 da                	adc    edx,ebx
c0007e9f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007ea3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007ea7:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007eab:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007eaf:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007eb3:	f7 da                	neg    edx
c0007eb5:	21 d1                	and    ecx,edx
c0007eb7:	29 d9                	sub    ecx,ebx
c0007eb9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ebe:	0f 85 20 01 00 00    	jne    c0007fe4 <f_mkfs+0xc73>
c0007ec4:	31 db                	xor    ebx,ebx
c0007ec6:	01 ce                	add    esi,ecx
c0007ec8:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ecc:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007ed0:	31 d2                	xor    edx,edx
c0007ed2:	89 f8                	mov    eax,edi
c0007ed4:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007ed8:	c1 e0 04             	shl    eax,0x4
c0007edb:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007edf:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ee3:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ee7:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eeb:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eee:	19 d3                	sbb    ebx,edx
c0007ef0:	0f 82 40 01 00 00    	jb     c0008036 <f_mkfs+0xcc5>
c0007ef6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ef9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007efd:	89 c8                	mov    eax,ecx
c0007eff:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007f04:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007f08:	29 f0                	sub    eax,esi
c0007f0a:	29 d0                	sub    eax,edx
c0007f0c:	31 d2                	xor    edx,edx
c0007f0e:	f7 f7                	div    edi
c0007f10:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f15:	89 c3                	mov    ebx,eax
c0007f17:	0f 85 b8 fe ff ff    	jne    c0007dd5 <f_mkfs+0xa64>
c0007f1d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f22:	0f 87 1d 01 00 00    	ja     c0008045 <f_mkfs+0xcd4>
c0007f28:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f2d:	0f 85 03 01 00 00    	jne    c0008036 <f_mkfs+0xcc5>
c0007f33:	83 ff 01             	cmp    edi,0x1
c0007f36:	0f 86 fa 00 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007f3c:	d1 ef                	shr    edi,1
c0007f3e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f42:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f46:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f49:	85 db                	test   ebx,ebx
c0007f4b:	75 2d                	jne    c0007f7a <f_mkfs+0xc09>
c0007f4d:	89 cb                	mov    ebx,ecx
c0007f4f:	ba 30 92 02 c0       	mov    edx,0xc0029230
c0007f54:	c1 eb 11             	shr    ebx,0x11
c0007f57:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f5f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f62:	66 85 c0             	test   ax,ax
c0007f65:	74 11                	je     c0007f78 <f_mkfs+0xc07>
c0007f67:	83 c2 02             	add    edx,0x2
c0007f6a:	39 d8                	cmp    eax,ebx
c0007f6c:	77 0a                	ja     c0007f78 <f_mkfs+0xc07>
c0007f6e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f72:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f76:	eb e7                	jmp    c0007f5f <f_mkfs+0xbee>
c0007f78:	31 db                	xor    ebx,ebx
c0007f7a:	31 d2                	xor    edx,edx
c0007f7c:	89 c8                	mov    eax,ecx
c0007f7e:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f82:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f89:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f8e:	c1 ea 09             	shr    edx,0x9
c0007f91:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f96:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f9a:	0f 87 96 00 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007fa0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007fa4:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007fac:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007fb0:	be 20 00 00 00       	mov    esi,0x20
c0007fb5:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007fba:	e9 a6 fe ff ff       	jmp    c0007e65 <f_mkfs+0xaf4>
c0007fbf:	83 c2 02             	add    edx,0x2
c0007fc2:	39 c8                	cmp    eax,ecx
c0007fc4:	0f 87 60 fe ff ff    	ja     c0007e2a <f_mkfs+0xab9>
c0007fca:	01 ff                	add    edi,edi
c0007fcc:	e9 4d fe ff ff       	jmp    c0007e1e <f_mkfs+0xaad>
c0007fd1:	8d 04 40             	lea    eax,[eax+eax*2]
c0007fd4:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007fd9:	40                   	inc    eax
c0007fda:	d1 e8                	shr    eax,1
c0007fdc:	83 c0 03             	add    eax,0x3
c0007fdf:	e9 62 fe ff ff       	jmp    c0007e46 <f_mkfs+0xad5>
c0007fe4:	31 d2                	xor    edx,edx
c0007fe6:	89 c8                	mov    eax,ecx
c0007fe8:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fec:	85 d2                	test   edx,edx
c0007fee:	74 0c                	je     c0007ffc <f_mkfs+0xc8b>
c0007ff0:	49                   	dec    ecx
c0007ff1:	46                   	inc    esi
c0007ff2:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007ff7:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007ffc:	89 c8                	mov    eax,ecx
c0007ffe:	31 d2                	xor    edx,edx
c0008000:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008004:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008008:	e9 c3 fe ff ff       	jmp    c0007ed0 <f_mkfs+0xb5f>
c000800d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008012:	77 31                	ja     c0008045 <f_mkfs+0xcd4>
c0008014:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008019:	75 1b                	jne    c0008036 <f_mkfs+0xcc5>
c000801b:	8d 04 3f             	lea    eax,[edi+edi*1]
c000801e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008022:	3d 80 00 00 00       	cmp    eax,0x80
c0008027:	0f 86 d9 fd ff ff    	jbe    c0007e06 <f_mkfs+0xa95>
c000802d:	eb 07                	jmp    c0008036 <f_mkfs+0xcc5>
c000802f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008034:	76 0a                	jbe    c0008040 <f_mkfs+0xccf>
c0008036:	bb 0e 00 00 00       	mov    ebx,0xe
c000803b:	e9 ff 03 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0008040:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008045:	31 d2                	xor    edx,edx
c0008047:	b9 00 02 00 00       	mov    ecx,0x200
c000804c:	89 e8                	mov    eax,ebp
c000804e:	e8 a2 9c ff ff       	call   c0001cf5 <mem_set>
c0008053:	b9 0b 00 00 00       	mov    ecx,0xb
c0008058:	ba 42 93 02 c0       	mov    edx,0xc0029342
c000805d:	89 e8                	mov    eax,ebp
c000805f:	e8 7c 9c ff ff       	call   c0001ce0 <mem_cpy>
c0008064:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008067:	ba 00 02 00 00       	mov    edx,0x200
c000806c:	e8 62 9c ff ff       	call   c0001cd3 <st_word>
c0008071:	89 f8                	mov    eax,edi
c0008073:	0f b7 d6             	movzx  edx,si
c0008076:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0008079:	8d 45 0e             	lea    eax,[ebp+0xe]
c000807c:	e8 52 9c ff ff       	call   c0001cd3 <st_word>
c0008081:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0008085:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000808a:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c000808d:	75 08                	jne    c0008097 <f_mkfs+0xd26>
c000808f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0008097:	8d 45 11             	lea    eax,[ebp+0x11]
c000809a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000809e:	e8 30 9c ff ff       	call   c0001cd3 <st_word>
c00080a3:	b8 ff ff 00 00       	mov    eax,0xffff
c00080a8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00080ac:	39 d0                	cmp    eax,edx
c00080ae:	b8 00 00 00 00       	mov    eax,0x0
c00080b3:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00080b7:	72 0a                	jb     c00080c3 <f_mkfs+0xd52>
c00080b9:	8d 45 13             	lea    eax,[ebp+0x13]
c00080bc:	e8 12 9c ff ff       	call   c0001cd3 <st_word>
c00080c1:	eb 08                	jmp    c00080cb <f_mkfs+0xd5a>
c00080c3:	8d 45 20             	lea    eax,[ebp+0x20]
c00080c6:	e8 0c 9c ff ff       	call   c0001cd7 <st_dword>
c00080cb:	8d 45 18             	lea    eax,[ebp+0x18]
c00080ce:	ba 3f 00 00 00       	mov    edx,0x3f
c00080d3:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00080d7:	e8 f7 9b ff ff       	call   c0001cd3 <st_word>
c00080dc:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080df:	ba ff 00 00 00       	mov    edx,0xff
c00080e4:	e8 ea 9b ff ff       	call   c0001cd3 <st_word>
c00080e9:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080f0:	e8 e2 9b ff ff       	call   c0001cd7 <st_dword>
c00080f5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080fa:	75 57                	jne    c0008153 <f_mkfs+0xde2>
c00080fc:	8d 45 43             	lea    eax,[ebp+0x43]
c00080ff:	ba 00 00 21 50       	mov    edx,0x50210000
c0008104:	e8 ce 9b ff ff       	call   c0001cd7 <st_dword>
c0008109:	8d 45 24             	lea    eax,[ebp+0x24]
c000810c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008110:	e8 c2 9b ff ff       	call   c0001cd7 <st_dword>
c0008115:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008118:	ba 02 00 00 00       	mov    edx,0x2
c000811d:	e8 b5 9b ff ff       	call   c0001cd7 <st_dword>
c0008122:	8d 45 30             	lea    eax,[ebp+0x30]
c0008125:	ba 01 00 00 00       	mov    edx,0x1
c000812a:	e8 a4 9b ff ff       	call   c0001cd3 <st_word>
c000812f:	8d 45 32             	lea    eax,[ebp+0x32]
c0008132:	ba 06 00 00 00       	mov    edx,0x6
c0008137:	e8 97 9b ff ff       	call   c0001cd3 <st_word>
c000813c:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008140:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008144:	8d 45 47             	lea    eax,[ebp+0x47]
c0008147:	b9 13 00 00 00       	mov    ecx,0x13
c000814c:	ba 4e 93 02 c0       	mov    edx,0xc002934e
c0008151:	eb 2f                	jmp    c0008182 <f_mkfs+0xe11>
c0008153:	8d 45 27             	lea    eax,[ebp+0x27]
c0008156:	ba 00 00 21 50       	mov    edx,0x50210000
c000815b:	e8 77 9b ff ff       	call   c0001cd7 <st_dword>
c0008160:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008165:	8d 45 16             	lea    eax,[ebp+0x16]
c0008168:	e8 66 9b ff ff       	call   c0001cd3 <st_word>
c000816d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008171:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0008175:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0008178:	b9 13 00 00 00       	mov    ecx,0x13
c000817d:	ba 62 93 02 c0       	mov    edx,0xc0029362
c0008182:	e8 59 9b ff ff       	call   c0001ce0 <mem_cpy>
c0008187:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c000818d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008192:	89 f0                	mov    eax,esi
c0008194:	e8 3a 9b ff ff       	call   c0001cd3 <st_word>
c0008199:	83 ec 0c             	sub    esp,0xc
c000819c:	6a 01                	push   0x1
c000819e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a6:	55                   	push   ebp
c00081a7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081ab:	e8 7c 9a ff ff       	call   c0001c2c <disk_write>
c00081b0:	83 c4 20             	add    esp,0x20
c00081b3:	85 c0                	test   eax,eax
c00081b5:	0f 85 67 02 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00081bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081c0:	0f 85 b7 00 00 00    	jne    c000827d <f_mkfs+0xf0c>
c00081c6:	83 ec 0c             	sub    esp,0xc
c00081c9:	6a 01                	push   0x1
c00081cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081cf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00081d3:	83 c0 06             	add    eax,0x6
c00081d6:	83 d2 00             	adc    edx,0x0
c00081d9:	52                   	push   edx
c00081da:	50                   	push   eax
c00081db:	55                   	push   ebp
c00081dc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081e0:	e8 47 9a ff ff       	call   c0001c2c <disk_write>
c00081e5:	83 c4 20             	add    esp,0x20
c00081e8:	b9 00 02 00 00       	mov    ecx,0x200
c00081ed:	31 d2                	xor    edx,edx
c00081ef:	89 e8                	mov    eax,ebp
c00081f1:	e8 ff 9a ff ff       	call   c0001cf5 <mem_set>
c00081f6:	ba 52 52 61 41       	mov    edx,0x41615252
c00081fb:	89 e8                	mov    eax,ebp
c00081fd:	e8 d5 9a ff ff       	call   c0001cd7 <st_dword>
c0008202:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008208:	ba 72 72 41 61       	mov    edx,0x61417272
c000820d:	e8 c5 9a ff ff       	call   c0001cd7 <st_dword>
c0008212:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008215:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000821b:	e8 b7 9a ff ff       	call   c0001cd7 <st_dword>
c0008220:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008226:	ba 02 00 00 00       	mov    edx,0x2
c000822b:	e8 a7 9a ff ff       	call   c0001cd7 <st_dword>
c0008230:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008235:	89 f0                	mov    eax,esi
c0008237:	e8 97 9a ff ff       	call   c0001cd3 <st_word>
c000823c:	83 ec 0c             	sub    esp,0xc
c000823f:	6a 01                	push   0x1
c0008241:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008245:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008249:	83 c0 07             	add    eax,0x7
c000824c:	83 d2 00             	adc    edx,0x0
c000824f:	52                   	push   edx
c0008250:	50                   	push   eax
c0008251:	55                   	push   ebp
c0008252:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008256:	e8 d1 99 ff ff       	call   c0001c2c <disk_write>
c000825b:	83 c4 14             	add    esp,0x14
c000825e:	6a 01                	push   0x1
c0008260:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008264:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008268:	83 c0 01             	add    eax,0x1
c000826b:	83 d2 00             	adc    edx,0x0
c000826e:	52                   	push   edx
c000826f:	50                   	push   eax
c0008270:	55                   	push   ebp
c0008271:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008275:	e8 b2 99 ff ff       	call   c0001c2c <disk_write>
c000827a:	83 c4 20             	add    esp,0x20
c000827d:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008284:	31 d2                	xor    edx,edx
c0008286:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000828c:	31 db                	xor    ebx,ebx
c000828e:	89 e8                	mov    eax,ebp
c0008290:	e8 60 9a ff ff       	call   c0001cf5 <mem_set>
c0008295:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000829a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00082a1:	0f 94 c3             	sete   bl
c00082a4:	4b                   	dec    ebx
c00082a5:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00082ab:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00082b1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082b6:	75 21                	jne    c00082d9 <f_mkfs+0xf68>
c00082b8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00082bd:	89 e8                	mov    eax,ebp
c00082bf:	e8 13 9a ff ff       	call   c0001cd7 <st_dword>
c00082c4:	8d 45 04             	lea    eax,[ebp+0x4]
c00082c7:	83 ca ff             	or     edx,0xffffffff
c00082ca:	e8 08 9a ff ff       	call   c0001cd7 <st_dword>
c00082cf:	8d 45 08             	lea    eax,[ebp+0x8]
c00082d2:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00082d7:	eb 04                	jmp    c00082dd <f_mkfs+0xf6c>
c00082d9:	89 da                	mov    edx,ebx
c00082db:	89 e8                	mov    eax,ebp
c00082dd:	e8 f5 99 ff ff       	call   c0001cd7 <st_dword>
c00082e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082ea:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082ee:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082f2:	39 ce                	cmp    esi,ecx
c00082f4:	76 02                	jbe    c00082f8 <f_mkfs+0xf87>
c00082f6:	89 ce                	mov    esi,ecx
c00082f8:	83 ec 0c             	sub    esp,0xc
c00082fb:	56                   	push   esi
c00082fc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008300:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008304:	55                   	push   ebp
c0008305:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008309:	e8 1e 99 ff ff       	call   c0001c2c <disk_write>
c000830e:	83 c4 20             	add    esp,0x20
c0008311:	85 c0                	test   eax,eax
c0008313:	0f 85 09 01 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008319:	31 d2                	xor    edx,edx
c000831b:	b9 00 02 00 00       	mov    ecx,0x200
c0008320:	89 e8                	mov    eax,ebp
c0008322:	e8 ce 99 ff ff       	call   c0001cf5 <mem_set>
c0008327:	31 d2                	xor    edx,edx
c0008329:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000832d:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008331:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008335:	75 b3                	jne    c00082ea <f_mkfs+0xf79>
c0008337:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000833a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008341:	40                   	inc    eax
c0008342:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008346:	0f 87 65 ff ff ff    	ja     c00082b1 <f_mkfs+0xf40>
c000834c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008351:	74 04                	je     c0008357 <f_mkfs+0xfe6>
c0008353:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008357:	89 fb                	mov    ebx,edi
c0008359:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000835d:	76 04                	jbe    c0008363 <f_mkfs+0xff2>
c000835f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008363:	83 ec 0c             	sub    esp,0xc
c0008366:	53                   	push   ebx
c0008367:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836f:	55                   	push   ebp
c0008370:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008374:	e8 b3 98 ff ff       	call   c0001c2c <disk_write>
c0008379:	83 c4 20             	add    esp,0x20
c000837c:	85 c0                	test   eax,eax
c000837e:	0f 85 9e 00 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008384:	31 d2                	xor    edx,edx
c0008386:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000838a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000838e:	29 df                	sub    edi,ebx
c0008390:	75 c5                	jne    c0008357 <f_mkfs+0xfe6>
c0008392:	b1 0c                	mov    cl,0xc
c0008394:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008399:	74 1d                	je     c00083b8 <f_mkfs+0x1047>
c000839b:	b8 ff ff 00 00       	mov    eax,0xffff
c00083a0:	b1 06                	mov    cl,0x6
c00083a2:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00083a6:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00083aa:	72 0c                	jb     c00083b8 <f_mkfs+0x1047>
c00083ac:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00083b1:	0f 94 c1             	sete   cl
c00083b4:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00083b8:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00083bd:	75 4c                	jne    c000840b <f_mkfs+0x109a>
c00083bf:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00083c3:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00083c7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00083ce:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00083d5:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083e0:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083eb:	0f b6 c9             	movzx  ecx,cl
c00083ee:	83 ec 0c             	sub    esp,0xc
c00083f1:	55                   	push   ebp
c00083f2:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083fd:	e8 2f c2 ff ff       	call   c0004631 <create_partition>
c0008402:	83 c4 10             	add    esp,0x10
c0008405:	89 c3                	mov    ebx,eax
c0008407:	85 c0                	test   eax,eax
c0008409:	75 34                	jne    c000843f <f_mkfs+0x10ce>
c000840b:	31 db                	xor    ebx,ebx
c000840d:	50                   	push   eax
c000840e:	6a 00                	push   0x0
c0008410:	6a 00                	push   0x0
c0008412:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008416:	e8 27 98 ff ff       	call   c0001c42 <disk_ioctl>
c000841b:	83 c4 10             	add    esp,0x10
c000841e:	85 c0                	test   eax,eax
c0008420:	74 1d                	je     c000843f <f_mkfs+0x10ce>
c0008422:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000842a:	75 0c                	jne    c0008438 <f_mkfs+0x10c7>
c000842c:	83 ec 0c             	sub    esp,0xc
c000842f:	55                   	push   ebp
c0008430:	e8 75 00 00 00       	call   c00084aa <ff_memfree>
c0008435:	83 c4 10             	add    esp,0x10
c0008438:	bb 01 00 00 00       	mov    ebx,0x1
c000843d:	eb 48                	jmp    c0008487 <f_mkfs+0x1116>
c000843f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008447:	75 3e                	jne    c0008487 <f_mkfs+0x1116>
c0008449:	83 ec 0c             	sub    esp,0xc
c000844c:	55                   	push   ebp
c000844d:	e8 58 00 00 00       	call   c00084aa <ff_memfree>
c0008452:	83 c4 10             	add    esp,0x10
c0008455:	eb 30                	jmp    c0008487 <f_mkfs+0x1116>
c0008457:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000845c:	0f 85 eb fa ff ff    	jne    c0007f4d <f_mkfs+0xbdc>
c0008462:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008466:	81 ff 80 00 00 00    	cmp    edi,0x80
c000846c:	0f 86 b8 f9 ff ff    	jbe    c0007e2a <f_mkfs+0xab9>
c0008472:	e9 bf fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008477:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000847c:	0f 85 c0 fa ff ff    	jne    c0007f42 <f_mkfs+0xbd1>
c0008482:	e9 af fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008487:	81 c4 9c 00 00 00    	add    esp,0x9c
c000848d:	89 d8                	mov    eax,ebx
c000848f:	5b                   	pop    ebx
c0008490:	5e                   	pop    esi
c0008491:	5f                   	pop    edi
c0008492:	5d                   	pop    ebp
c0008493:	c3                   	ret    

c0008494 <ff_memalloc>:
c0008494:	83 ec 0c             	sub    esp,0xc
c0008497:	83 ec 0c             	sub    esp,0xc
c000849a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000849e:	e8 9d 73 00 00       	call   c000f840 <malloc>
c00084a3:	83 c4 10             	add    esp,0x10
c00084a6:	83 c4 0c             	add    esp,0xc
c00084a9:	c3                   	ret    

c00084aa <ff_memfree>:
c00084aa:	83 ec 0c             	sub    esp,0xc
c00084ad:	83 ec 0c             	sub    esp,0xc
c00084b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084b4:	e8 97 73 00 00       	call   c000f850 <free>
c00084b9:	83 c4 10             	add    esp,0x10
c00084bc:	90                   	nop
c00084bd:	83 c4 0c             	add    esp,0xc
c00084c0:	c3                   	ret    

c00084c1 <ff_uni2oem>:
c00084c1:	83 ec 14             	sub    esp,0x14
c00084c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00084c8:	66 89 04 24          	mov    WORD PTR [esp],ax
c00084cc:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084d3:	c7 44 24 0c 80 96 02 c0 	mov    DWORD PTR [esp+0xc],0xc0029680
c00084db:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084e0:	77 0b                	ja     c00084ed <ff_uni2oem+0x2c>
c00084e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084e6:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084eb:	eb 5b                	jmp    c0008548 <ff_uni2oem+0x87>
c00084ed:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084f5:	77 51                	ja     c0008548 <ff_uni2oem+0x87>
c00084f7:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084fd:	75 49                	jne    c0008548 <ff_uni2oem+0x87>
c00084ff:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008506:	eb 0b                	jmp    c0008513 <ff_uni2oem+0x52>
c0008508:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000850d:	40                   	inc    eax
c000850e:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008513:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008519:	77 1b                	ja     c0008536 <ff_uni2oem+0x75>
c000851b:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008520:	01 c0                	add    eax,eax
c0008522:	89 c2                	mov    edx,eax
c0008524:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008528:	01 d0                	add    eax,edx
c000852a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000852d:	0f b7 c0             	movzx  eax,ax
c0008530:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008534:	75 d2                	jne    c0008508 <ff_uni2oem+0x47>
c0008536:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000853b:	83 e8 80             	sub    eax,0xffffff80
c000853e:	25 ff 00 00 00       	and    eax,0xff
c0008543:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008548:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000854d:	83 c4 14             	add    esp,0x14
c0008550:	c3                   	ret    

c0008551 <ff_oem2uni>:
c0008551:	83 ec 18             	sub    esp,0x18
c0008554:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008558:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000855c:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008561:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008565:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000856c:	c7 44 24 10 80 96 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029680
c0008574:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000857a:	77 0b                	ja     c0008587 <ff_oem2uni+0x36>
c000857c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008580:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008585:	eb 2d                	jmp    c00085b4 <ff_oem2uni+0x63>
c0008587:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000858d:	75 25                	jne    c00085b4 <ff_oem2uni+0x63>
c000858f:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008596:	77 1c                	ja     c00085b4 <ff_oem2uni+0x63>
c0008598:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000859d:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00085a2:	01 c0                	add    eax,eax
c00085a4:	89 c2                	mov    edx,eax
c00085a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085aa:	01 d0                	add    eax,edx
c00085ac:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085af:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00085b4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00085b9:	83 c4 18             	add    esp,0x18
c00085bc:	c3                   	ret    

c00085bd <ff_wtoupper>:
c00085bd:	83 ec 10             	sub    esp,0x10
c00085c0:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00085c8:	0f 87 3e 01 00 00    	ja     c000870c <ff_wtoupper+0x14f>
c00085ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00085d2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00085d7:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085de:	77 07                	ja     c00085e7 <ff_wtoupper+0x2a>
c00085e0:	b8 80 94 02 c0       	mov    eax,0xc0029480
c00085e5:	eb 05                	jmp    c00085ec <ff_wtoupper+0x2f>
c00085e7:	b8 c0 93 02 c0       	mov    eax,0xc00293c0
c00085ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085f4:	8d 50 02             	lea    edx,[eax+0x2]
c00085f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085fb:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085fe:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008603:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008609:	0f 84 f4 00 00 00    	je     c0008703 <ff_wtoupper+0x146>
c000860f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008614:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008619:	0f 82 e4 00 00 00    	jb     c0008703 <ff_wtoupper+0x146>
c000861f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008623:	8d 50 02             	lea    edx,[eax+0x2]
c0008626:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000862a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000862d:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008632:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008637:	66 c1 e8 08          	shr    ax,0x8
c000863b:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008640:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008647:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000864c:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008651:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008656:	01 ca                	add    edx,ecx
c0008658:	39 d0                	cmp    eax,edx
c000865a:	0f 8d 86 00 00 00    	jge    c00086e6 <ff_wtoupper+0x129>
c0008660:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008665:	83 f8 08             	cmp    eax,0x8
c0008668:	0f 87 94 00 00 00    	ja     c0008702 <ff_wtoupper+0x145>
c000866e:	8b 04 85 80 93 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6c80]
c0008675:	ff e0                	jmp    eax
c0008677:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000867c:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008681:	29 c2                	sub    edx,eax
c0008683:	89 d0                	mov    eax,edx
c0008685:	01 c0                	add    eax,eax
c0008687:	89 c2                	mov    edx,eax
c0008689:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000868d:	01 d0                	add    eax,edx
c000868f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008692:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008697:	eb 4b                	jmp    c00086e4 <ff_wtoupper+0x127>
c0008699:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000869e:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00086a2:	83 e0 01             	and    eax,0x1
c00086a5:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00086aa:	eb 38                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086ac:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00086b2:	eb 30                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086b4:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00086ba:	eb 28                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086bc:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00086c2:	eb 20                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086c4:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00086ca:	eb 18                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086cc:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00086d2:	eb 10                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086d4:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086da:	eb 08                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086dc:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086e3:	90                   	nop
c00086e4:	eb 1c                	jmp    c0008702 <ff_wtoupper+0x145>
c00086e6:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086ec:	0f 85 fe fe ff ff    	jne    c00085f0 <ff_wtoupper+0x33>
c00086f2:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086f7:	01 c0                	add    eax,eax
c00086f9:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086fd:	e9 ee fe ff ff       	jmp    c00085f0 <ff_wtoupper+0x33>
c0008702:	90                   	nop
c0008703:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008708:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000870c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008710:	83 c4 10             	add    esp,0x10
c0008713:	c3                   	ret    

c0008714 <psrc_set_converter>:
c0008714:	56                   	push   esi
c0008715:	89 d6                	mov    esi,edx
c0008717:	53                   	push   ebx
c0008718:	89 c3                	mov    ebx,eax
c000871a:	83 ec 0c             	sub    esp,0xc
c000871d:	52                   	push   edx
c000871e:	50                   	push   eax
c000871f:	e8 6f 55 00 00       	call   c000dc93 <sinc_set_converter>
c0008724:	83 c4 10             	add    esp,0x10
c0008727:	85 c0                	test   eax,eax
c0008729:	74 25                	je     c0008750 <psrc_set_converter+0x3c>
c000872b:	50                   	push   eax
c000872c:	50                   	push   eax
c000872d:	56                   	push   esi
c000872e:	53                   	push   ebx
c000872f:	e8 17 5d 00 00       	call   c000e44b <zoh_set_converter>
c0008734:	83 c4 10             	add    esp,0x10
c0008737:	85 c0                	test   eax,eax
c0008739:	74 15                	je     c0008750 <psrc_set_converter+0x3c>
c000873b:	51                   	push   ecx
c000873c:	51                   	push   ecx
c000873d:	56                   	push   esi
c000873e:	53                   	push   ebx
c000873f:	e8 0f 11 00 00       	call   c0009853 <linear_set_converter>
c0008744:	83 c4 10             	add    esp,0x10
c0008747:	ba 0a 00 00 00       	mov    edx,0xa
c000874c:	85 c0                	test   eax,eax
c000874e:	75 02                	jne    c0008752 <psrc_set_converter+0x3e>
c0008750:	31 d2                	xor    edx,edx
c0008752:	89 d0                	mov    eax,edx
c0008754:	5a                   	pop    edx
c0008755:	5b                   	pop    ebx
c0008756:	5e                   	pop    esi
c0008757:	c3                   	ret    

c0008758 <src_delete>:
c0008758:	53                   	push   ebx
c0008759:	83 ec 08             	sub    esp,0x8
c000875c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008760:	85 db                	test   ebx,ebx
c0008762:	74 29                	je     c000878d <src_delete+0x35>
c0008764:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008767:	85 c0                	test   eax,eax
c0008769:	74 0c                	je     c0008777 <src_delete+0x1f>
c000876b:	83 ec 0c             	sub    esp,0xc
c000876e:	50                   	push   eax
c000876f:	e8 dc 70 00 00       	call   c000f850 <free>
c0008774:	83 c4 10             	add    esp,0x10
c0008777:	50                   	push   eax
c0008778:	6a 3c                	push   0x3c
c000877a:	6a 00                	push   0x0
c000877c:	53                   	push   ebx
c000877d:	e8 f6 7f ff ff       	call   c0000778 <memset>
c0008782:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008785:	e8 c6 70 00 00       	call   c000f850 <free>
c000878a:	83 c4 10             	add    esp,0x10
c000878d:	31 c0                	xor    eax,eax
c000878f:	83 c4 08             	add    esp,0x8
c0008792:	5b                   	pop    ebx
c0008793:	c3                   	ret    

c0008794 <src_process>:
c0008794:	55                   	push   ebp
c0008795:	57                   	push   edi
c0008796:	56                   	push   esi
c0008797:	53                   	push   ebx
c0008798:	83 ec 1c             	sub    esp,0x1c
c000879b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000879f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00087a3:	85 ed                	test   ebp,ebp
c00087a5:	0f 84 6f 01 00 00    	je     c000891a <src_process+0x186>
c00087ab:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c00087af:	0f 84 6c 01 00 00    	je     c0008921 <src_process+0x18d>
c00087b5:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00087b9:	0f 84 62 01 00 00    	je     c0008921 <src_process+0x18d>
c00087bf:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00087c6:	0f 85 5c 01 00 00    	jne    c0008928 <src_process+0x194>
c00087cc:	85 db                	test   ebx,ebx
c00087ce:	0f 84 5b 01 00 00    	je     c000892f <src_process+0x19b>
c00087d4:	8b 33                	mov    esi,DWORD PTR [ebx]
c00087d6:	85 f6                	test   esi,esi
c00087d8:	0f 84 58 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087de:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087e1:	85 ff                	test   edi,edi
c00087e3:	0f 84 4d 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087e9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087ec:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087f7:	68 00 00 70 3f       	push   0x3f700000
c00087fc:	6a 00                	push   0x0
c00087fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008802:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008806:	e8 44 fb 01 00       	call   c002834f <__ltdf2>
c000880b:	83 c4 10             	add    esp,0x10
c000880e:	85 c0                	test   eax,eax
c0008810:	0f 88 27 01 00 00    	js     c000893d <src_process+0x1a9>
c0008816:	68 00 00 70 40       	push   0x40700000
c000881b:	6a 00                	push   0x0
c000881d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008821:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008825:	e8 07 fb 01 00       	call   c0028331 <__gtdf2>
c000882a:	83 c4 10             	add    esp,0x10
c000882d:	85 c0                	test   eax,eax
c000882f:	0f 8f 08 01 00 00    	jg     c000893d <src_process+0x1a9>
c0008835:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008839:	79 07                	jns    c0008842 <src_process+0xae>
c000883b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008842:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008845:	85 c0                	test   eax,eax
c0008847:	79 50                	jns    c0008899 <src_process+0x105>
c0008849:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008850:	39 fe                	cmp    esi,edi
c0008852:	72 37                	jb     c000888b <src_process+0xf7>
c0008854:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000885b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008862:	68 00 00 70 3f       	push   0x3f700000
c0008867:	6a 00                	push   0x0
c0008869:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000886c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000886f:	e8 db fa 01 00       	call   c002834f <__ltdf2>
c0008874:	83 c4 10             	add    esp,0x10
c0008877:	85 c0                	test   eax,eax
c0008879:	79 37                	jns    c00088b2 <src_process+0x11e>
c000887b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000887f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008883:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008886:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008889:	eb 27                	jmp    c00088b2 <src_process+0x11e>
c000888b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000888e:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008892:	8d 04 86             	lea    eax,[esi+eax*4]
c0008895:	39 c7                	cmp    edi,eax
c0008897:	eb 0d                	jmp    c00088a6 <src_process+0x112>
c0008899:	39 fe                	cmp    esi,edi
c000889b:	72 ee                	jb     c000888b <src_process+0xf7>
c000889d:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c00088a1:	8d 04 87             	lea    eax,[edi+eax*4]
c00088a4:	39 c6                	cmp    esi,eax
c00088a6:	73 ac                	jae    c0008854 <src_process+0xc0>
c00088a8:	b8 10 00 00 00       	mov    eax,0x10
c00088ad:	e9 90 00 00 00       	jmp    c0008942 <src_process+0x1ae>
c00088b2:	83 ec 10             	sub    esp,0x10
c00088b5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00088b8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00088bb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00088be:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00088c1:	e8 8e f1 01 00       	call   c0027a54 <__subdf3>
c00088c6:	83 c4 18             	add    esp,0x18
c00088c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00088cd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00088d1:	52                   	push   edx
c00088d2:	50                   	push   eax
c00088d3:	e8 08 fc 01 00       	call   c00284e0 <fabs>
c00088d8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088dc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088e0:	83 c4 10             	add    esp,0x10
c00088e3:	68 af 03 d2 3c       	push   0x3cd203af
c00088e8:	68 16 56 e7 9e       	push   0x9ee75616
c00088ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f5:	e8 55 fa 01 00       	call   c002834f <__ltdf2>
c00088fa:	83 c4 10             	add    esp,0x10
c00088fd:	85 c0                	test   eax,eax
c00088ff:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0008903:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c0008907:	79 05                	jns    c000890e <src_process+0x17a>
c0008909:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000890c:	eb 03                	jmp    c0008911 <src_process+0x17d>
c000890e:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0008911:	83 c4 1c             	add    esp,0x1c
c0008914:	5b                   	pop    ebx
c0008915:	5e                   	pop    esi
c0008916:	5f                   	pop    edi
c0008917:	5d                   	pop    ebp
c0008918:	ff e0                	jmp    eax
c000891a:	b8 02 00 00 00       	mov    eax,0x2
c000891f:	eb 21                	jmp    c0008942 <src_process+0x1ae>
c0008921:	b8 07 00 00 00       	mov    eax,0x7
c0008926:	eb 1a                	jmp    c0008942 <src_process+0x1ae>
c0008928:	b8 12 00 00 00       	mov    eax,0x12
c000892d:	eb 13                	jmp    c0008942 <src_process+0x1ae>
c000892f:	b8 03 00 00 00       	mov    eax,0x3
c0008934:	eb 0c                	jmp    c0008942 <src_process+0x1ae>
c0008936:	b8 04 00 00 00       	mov    eax,0x4
c000893b:	eb 05                	jmp    c0008942 <src_process+0x1ae>
c000893d:	b8 06 00 00 00       	mov    eax,0x6
c0008942:	83 c4 1c             	add    esp,0x1c
c0008945:	5b                   	pop    ebx
c0008946:	5e                   	pop    esi
c0008947:	5f                   	pop    edi
c0008948:	5d                   	pop    ebp
c0008949:	c3                   	ret    

c000894a <src_callback_read>:
c000894a:	55                   	push   ebp
c000894b:	57                   	push   edi
c000894c:	56                   	push   esi
c000894d:	53                   	push   ebx
c000894e:	83 ec 3c             	sub    esp,0x3c
c0008951:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008955:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008959:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000895d:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008961:	85 ed                	test   ebp,ebp
c0008963:	0f 8e 52 01 00 00    	jle    c0008abb <src_callback_read+0x171>
c0008969:	85 db                	test   ebx,ebx
c000896b:	0f 84 4a 01 00 00    	je     c0008abb <src_callback_read+0x171>
c0008971:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008978:	74 0c                	je     c0008986 <src_callback_read+0x3c>
c000897a:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008981:	e9 35 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008986:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000898a:	75 0c                	jne    c0008998 <src_callback_read+0x4e>
c000898c:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008993:	e9 23 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008998:	51                   	push   ecx
c0008999:	6a 24                	push   0x24
c000899b:	6a 00                	push   0x0
c000899d:	8d 44 24 18          	lea    eax,[esp+0x18]
c00089a1:	50                   	push   eax
c00089a2:	e8 d1 7d ff ff       	call   c0000778 <memset>
c00089a7:	83 c4 10             	add    esp,0x10
c00089aa:	68 00 00 70 3f       	push   0x3f700000
c00089af:	6a 00                	push   0x0
c00089b1:	57                   	push   edi
c00089b2:	56                   	push   esi
c00089b3:	e8 97 f9 01 00       	call   c002834f <__ltdf2>
c00089b8:	83 c4 10             	add    esp,0x10
c00089bb:	85 c0                	test   eax,eax
c00089bd:	78 3e                	js     c00089fd <src_callback_read+0xb3>
c00089bf:	68 00 00 70 40       	push   0x40700000
c00089c4:	6a 00                	push   0x0
c00089c6:	57                   	push   edi
c00089c7:	56                   	push   esi
c00089c8:	e8 64 f9 01 00       	call   c0028331 <__gtdf2>
c00089cd:	83 c4 10             	add    esp,0x10
c00089d0:	85 c0                	test   eax,eax
c00089d2:	7f 29                	jg     c00089fd <src_callback_read+0xb3>
c00089d4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00089d8:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089e0:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089e4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089e7:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089ef:	31 f6                	xor    esi,esi
c00089f1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089f4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089f8:	e9 97 00 00 00       	jmp    c0008a94 <src_callback_read+0x14a>
c00089fd:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008a04:	e9 b2 00 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008a09:	8d 44 24 04          	lea    eax,[esp+0x4]
c0008a0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008a11:	52                   	push   edx
c0008a12:	52                   	push   edx
c0008a13:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008a17:	50                   	push   eax
c0008a18:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a1b:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008a1e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008a22:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008a26:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008a2a:	83 c4 10             	add    esp,0x10
c0008a2d:	85 c0                	test   eax,eax
c0008a2f:	75 08                	jne    c0008a39 <src_callback_read+0xef>
c0008a31:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008a39:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a40:	50                   	push   eax
c0008a41:	50                   	push   eax
c0008a42:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a46:	50                   	push   eax
c0008a47:	53                   	push   ebx
c0008a48:	e8 47 fd ff ff       	call   c0008794 <src_process>
c0008a4d:	83 c4 10             	add    esp,0x10
c0008a50:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a57:	85 c0                	test   eax,eax
c0008a59:	75 49                	jne    c0008aa4 <src_callback_read+0x15a>
c0008a5b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a5f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a62:	89 f9                	mov    ecx,edi
c0008a64:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a68:	0f af ca             	imul   ecx,edx
c0008a6b:	c1 e1 02             	shl    ecx,0x2
c0008a6e:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a72:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a76:	0f af d1             	imul   edx,ecx
c0008a79:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a7d:	c1 e2 02             	shl    edx,0x2
c0008a80:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a84:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a87:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a8c:	74 12                	je     c0008aa0 <src_callback_read+0x156>
c0008a8e:	39 d5                	cmp    ebp,edx
c0008a90:	7e 14                	jle    c0008aa6 <src_callback_read+0x15c>
c0008a92:	89 d6                	mov    esi,edx
c0008a94:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a99:	75 9e                	jne    c0008a39 <src_callback_read+0xef>
c0008a9b:	e9 69 ff ff ff       	jmp    c0008a09 <src_callback_read+0xbf>
c0008aa0:	85 c9                	test   ecx,ecx
c0008aa2:	75 ea                	jne    c0008a8e <src_callback_read+0x144>
c0008aa4:	89 f2                	mov    edx,esi
c0008aa6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008aaa:	85 c0                	test   eax,eax
c0008aac:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008aaf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008ab3:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008ab6:	74 05                	je     c0008abd <src_callback_read+0x173>
c0008ab8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008abb:	31 d2                	xor    edx,edx
c0008abd:	83 c4 3c             	add    esp,0x3c
c0008ac0:	89 d0                	mov    eax,edx
c0008ac2:	5b                   	pop    ebx
c0008ac3:	5e                   	pop    esi
c0008ac4:	5f                   	pop    edi
c0008ac5:	5d                   	pop    ebp
c0008ac6:	c3                   	ret    

c0008ac7 <src_set_ratio>:
c0008ac7:	57                   	push   edi
c0008ac8:	ba 02 00 00 00       	mov    edx,0x2
c0008acd:	56                   	push   esi
c0008ace:	53                   	push   ebx
c0008acf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ad3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008ad7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008adb:	85 db                	test   ebx,ebx
c0008add:	74 4c                	je     c0008b2b <src_set_ratio+0x64>
c0008adf:	ba 07 00 00 00       	mov    edx,0x7
c0008ae4:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008ae8:	74 41                	je     c0008b2b <src_set_ratio+0x64>
c0008aea:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008aee:	74 3b                	je     c0008b2b <src_set_ratio+0x64>
c0008af0:	68 00 00 70 3f       	push   0x3f700000
c0008af5:	6a 00                	push   0x0
c0008af7:	57                   	push   edi
c0008af8:	56                   	push   esi
c0008af9:	e8 51 f8 01 00       	call   c002834f <__ltdf2>
c0008afe:	83 c4 10             	add    esp,0x10
c0008b01:	ba 06 00 00 00       	mov    edx,0x6
c0008b06:	85 c0                	test   eax,eax
c0008b08:	78 21                	js     c0008b2b <src_set_ratio+0x64>
c0008b0a:	68 00 00 70 40       	push   0x40700000
c0008b0f:	6a 00                	push   0x0
c0008b11:	57                   	push   edi
c0008b12:	56                   	push   esi
c0008b13:	e8 19 f8 01 00       	call   c0028331 <__gtdf2>
c0008b18:	83 c4 10             	add    esp,0x10
c0008b1b:	ba 06 00 00 00       	mov    edx,0x6
c0008b20:	85 c0                	test   eax,eax
c0008b22:	7f 07                	jg     c0008b2b <src_set_ratio+0x64>
c0008b24:	89 33                	mov    DWORD PTR [ebx],esi
c0008b26:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008b29:	31 d2                	xor    edx,edx
c0008b2b:	5b                   	pop    ebx
c0008b2c:	89 d0                	mov    eax,edx
c0008b2e:	5e                   	pop    esi
c0008b2f:	5f                   	pop    edi
c0008b30:	c3                   	ret    

c0008b31 <src_get_channels>:
c0008b31:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b35:	b8 02 00 00 00       	mov    eax,0x2
c0008b3a:	85 d2                	test   edx,edx
c0008b3c:	74 14                	je     c0008b52 <src_get_channels+0x21>
c0008b3e:	b8 07 00 00 00       	mov    eax,0x7
c0008b43:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b47:	74 09                	je     c0008b52 <src_get_channels+0x21>
c0008b49:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b4d:	74 03                	je     c0008b52 <src_get_channels+0x21>
c0008b4f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b52:	c3                   	ret    

c0008b53 <src_reset>:
c0008b53:	53                   	push   ebx
c0008b54:	b8 02 00 00 00       	mov    eax,0x2
c0008b59:	83 ec 08             	sub    esp,0x8
c0008b5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b60:	85 db                	test   ebx,ebx
c0008b62:	74 36                	je     c0008b9a <src_reset+0x47>
c0008b64:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b67:	85 c0                	test   eax,eax
c0008b69:	74 09                	je     c0008b74 <src_reset+0x21>
c0008b6b:	83 ec 0c             	sub    esp,0xc
c0008b6e:	53                   	push   ebx
c0008b6f:	ff d0                	call   eax
c0008b71:	83 c4 10             	add    esp,0x10
c0008b74:	31 c0                	xor    eax,eax
c0008b76:	31 d2                	xor    edx,edx
c0008b78:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b7b:	89 03                	mov    DWORD PTR [ebx],eax
c0008b7d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b80:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b83:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b8a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b91:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b98:	31 c0                	xor    eax,eax
c0008b9a:	83 c4 08             	add    esp,0x8
c0008b9d:	5b                   	pop    ebx
c0008b9e:	c3                   	ret    

c0008b9f <src_new>:
c0008b9f:	57                   	push   edi
c0008ba0:	56                   	push   esi
c0008ba1:	53                   	push   ebx
c0008ba2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008ba6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008baa:	85 f6                	test   esi,esi
c0008bac:	74 73                	je     c0008c21 <src_new+0x82>
c0008bae:	85 ff                	test   edi,edi
c0008bb0:	7f 08                	jg     c0008bba <src_new+0x1b>
c0008bb2:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008bb8:	eb 1e                	jmp    c0008bd8 <src_new+0x39>
c0008bba:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008bc0:	50                   	push   eax
c0008bc1:	50                   	push   eax
c0008bc2:	6a 3c                	push   0x3c
c0008bc4:	6a 01                	push   0x1
c0008bc6:	e8 a5 6c 00 00       	call   c000f870 <calloc>
c0008bcb:	83 c4 10             	add    esp,0x10
c0008bce:	89 c3                	mov    ebx,eax
c0008bd0:	85 c0                	test   eax,eax
c0008bd2:	75 10                	jne    c0008be4 <src_new+0x45>
c0008bd4:	85 f6                	test   esi,esi
c0008bd6:	75 04                	jne    c0008bdc <src_new+0x3d>
c0008bd8:	31 db                	xor    ebx,ebx
c0008bda:	eb 4b                	jmp    c0008c27 <src_new+0x88>
c0008bdc:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008be2:	eb 43                	jmp    c0008c27 <src_new+0x88>
c0008be4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008be7:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bf2:	e8 1d fb ff ff       	call   c0008714 <psrc_set_converter>
c0008bf7:	85 c0                	test   eax,eax
c0008bf9:	74 18                	je     c0008c13 <src_new+0x74>
c0008bfb:	85 f6                	test   esi,esi
c0008bfd:	74 06                	je     c0008c05 <src_new+0x66>
c0008bff:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008c05:	83 ec 0c             	sub    esp,0xc
c0008c08:	53                   	push   ebx
c0008c09:	31 db                	xor    ebx,ebx
c0008c0b:	e8 40 6c 00 00       	call   c000f850 <free>
c0008c10:	83 c4 10             	add    esp,0x10
c0008c13:	83 ec 0c             	sub    esp,0xc
c0008c16:	53                   	push   ebx
c0008c17:	e8 37 ff ff ff       	call   c0008b53 <src_reset>
c0008c1c:	83 c4 10             	add    esp,0x10
c0008c1f:	eb 06                	jmp    c0008c27 <src_new+0x88>
c0008c21:	85 ff                	test   edi,edi
c0008c23:	7f 9b                	jg     c0008bc0 <src_new+0x21>
c0008c25:	eb b1                	jmp    c0008bd8 <src_new+0x39>
c0008c27:	89 d8                	mov    eax,ebx
c0008c29:	5b                   	pop    ebx
c0008c2a:	5e                   	pop    esi
c0008c2b:	5f                   	pop    edi
c0008c2c:	c3                   	ret    

c0008c2d <src_callback_new>:
c0008c2d:	56                   	push   esi
c0008c2e:	53                   	push   ebx
c0008c2f:	53                   	push   ebx
c0008c30:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008c34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c38:	85 f6                	test   esi,esi
c0008c3a:	75 0e                	jne    c0008c4a <src_callback_new+0x1d>
c0008c3c:	31 db                	xor    ebx,ebx
c0008c3e:	85 c0                	test   eax,eax
c0008c40:	74 47                	je     c0008c89 <src_callback_new+0x5c>
c0008c42:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c48:	eb 3f                	jmp    c0008c89 <src_callback_new+0x5c>
c0008c4a:	85 c0                	test   eax,eax
c0008c4c:	74 06                	je     c0008c54 <src_callback_new+0x27>
c0008c4e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c54:	51                   	push   ecx
c0008c55:	50                   	push   eax
c0008c56:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5e:	e8 3c ff ff ff       	call   c0008b9f <src_new>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	89 c3                	mov    ebx,eax
c0008c68:	85 c0                	test   eax,eax
c0008c6a:	74 1d                	je     c0008c89 <src_callback_new+0x5c>
c0008c6c:	83 ec 0c             	sub    esp,0xc
c0008c6f:	50                   	push   eax
c0008c70:	e8 de fe ff ff       	call   c0008b53 <src_reset>
c0008c75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c79:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c80:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c83:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c86:	83 c4 10             	add    esp,0x10
c0008c89:	89 d8                	mov    eax,ebx
c0008c8b:	5a                   	pop    edx
c0008c8c:	5b                   	pop    ebx
c0008c8d:	5e                   	pop    esi
c0008c8e:	c3                   	ret    

c0008c8f <src_get_name>:
c0008c8f:	53                   	push   ebx
c0008c90:	83 ec 14             	sub    esp,0x14
c0008c93:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c97:	53                   	push   ebx
c0008c98:	e8 d0 4f 00 00       	call   c000dc6d <sinc_get_name>
c0008c9d:	83 c4 10             	add    esp,0x10
c0008ca0:	85 c0                	test   eax,eax
c0008ca2:	75 1d                	jne    c0008cc1 <src_get_name+0x32>
c0008ca4:	83 ec 0c             	sub    esp,0xc
c0008ca7:	53                   	push   ebx
c0008ca8:	e8 80 57 00 00       	call   c000e42d <zoh_get_name>
c0008cad:	83 c4 10             	add    esp,0x10
c0008cb0:	85 c0                	test   eax,eax
c0008cb2:	75 0d                	jne    c0008cc1 <src_get_name+0x32>
c0008cb4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb8:	83 c4 08             	add    esp,0x8
c0008cbb:	5b                   	pop    ebx
c0008cbc:	e9 74 0b 00 00       	jmp    c0009835 <linear_get_name>
c0008cc1:	83 c4 08             	add    esp,0x8
c0008cc4:	5b                   	pop    ebx
c0008cc5:	c3                   	ret    

c0008cc6 <src_get_description>:
c0008cc6:	53                   	push   ebx
c0008cc7:	83 ec 14             	sub    esp,0x14
c0008cca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008cce:	53                   	push   ebx
c0008ccf:	e8 ac 4f 00 00       	call   c000dc80 <sinc_get_description>
c0008cd4:	83 c4 10             	add    esp,0x10
c0008cd7:	85 c0                	test   eax,eax
c0008cd9:	75 1d                	jne    c0008cf8 <src_get_description+0x32>
c0008cdb:	83 ec 0c             	sub    esp,0xc
c0008cde:	53                   	push   ebx
c0008cdf:	e8 58 57 00 00       	call   c000e43c <zoh_get_description>
c0008ce4:	83 c4 10             	add    esp,0x10
c0008ce7:	85 c0                	test   eax,eax
c0008ce9:	75 0d                	jne    c0008cf8 <src_get_description+0x32>
c0008ceb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cef:	83 c4 08             	add    esp,0x8
c0008cf2:	5b                   	pop    ebx
c0008cf3:	e9 4c 0b 00 00       	jmp    c0009844 <linear_get_description>
c0008cf8:	83 c4 08             	add    esp,0x8
c0008cfb:	5b                   	pop    ebx
c0008cfc:	c3                   	ret    

c0008cfd <src_get_version>:
c0008cfd:	b8 80 97 02 c0       	mov    eax,0xc0029780
c0008d02:	c3                   	ret    

c0008d03 <src_is_valid_ratio>:
c0008d03:	83 ec 1c             	sub    esp,0x1c
c0008d06:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008d0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d16:	68 00 00 70 3f       	push   0x3f700000
c0008d1b:	6a 00                	push   0x0
c0008d1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d25:	e8 25 f6 01 00       	call   c002834f <__ltdf2>
c0008d2a:	83 c4 10             	add    esp,0x10
c0008d2d:	31 d2                	xor    edx,edx
c0008d2f:	85 c0                	test   eax,eax
c0008d31:	78 1e                	js     c0008d51 <src_is_valid_ratio+0x4e>
c0008d33:	68 00 00 70 40       	push   0x40700000
c0008d38:	6a 00                	push   0x0
c0008d3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d3e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d42:	e8 ea f5 01 00       	call   c0028331 <__gtdf2>
c0008d47:	31 d2                	xor    edx,edx
c0008d49:	83 c4 10             	add    esp,0x10
c0008d4c:	85 c0                	test   eax,eax
c0008d4e:	0f 9e c2             	setle  dl
c0008d51:	89 d0                	mov    eax,edx
c0008d53:	83 c4 1c             	add    esp,0x1c
c0008d56:	c3                   	ret    

c0008d57 <src_error>:
c0008d57:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d5b:	31 c0                	xor    eax,eax
c0008d5d:	85 d2                	test   edx,edx
c0008d5f:	74 03                	je     c0008d64 <src_error+0xd>
c0008d61:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d64:	c3                   	ret    

c0008d65 <src_strerror>:
c0008d65:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d69:	31 c0                	xor    eax,eax
c0008d6b:	83 fa 17             	cmp    edx,0x17
c0008d6e:	77 07                	ja     c0008d77 <src_strerror+0x12>
c0008d70:	8b 04 95 e0 9b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6420]
c0008d77:	c3                   	ret    

c0008d78 <src_simple>:
c0008d78:	56                   	push   esi
c0008d79:	53                   	push   ebx
c0008d7a:	83 ec 18             	sub    esp,0x18
c0008d7d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d81:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d85:	50                   	push   eax
c0008d86:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8e:	e8 0c fe ff ff       	call   c0008b9f <src_new>
c0008d93:	83 c4 10             	add    esp,0x10
c0008d96:	85 c0                	test   eax,eax
c0008d98:	75 06                	jne    c0008da0 <src_simple+0x28>
c0008d9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d9e:	eb 25                	jmp    c0008dc5 <src_simple+0x4d>
c0008da0:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008da7:	89 c3                	mov    ebx,eax
c0008da9:	50                   	push   eax
c0008daa:	50                   	push   eax
c0008dab:	56                   	push   esi
c0008dac:	53                   	push   ebx
c0008dad:	e8 e2 f9 ff ff       	call   c0008794 <src_process>
c0008db2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008db5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008db9:	e8 9a f9 ff ff       	call   c0008758 <src_delete>
c0008dbe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008dc2:	83 c4 10             	add    esp,0x10
c0008dc5:	83 c4 14             	add    esp,0x14
c0008dc8:	5b                   	pop    ebx
c0008dc9:	5e                   	pop    esi
c0008dca:	c3                   	ret    

c0008dcb <src_short_to_float_array>:
c0008dcb:	53                   	push   ebx
c0008dcc:	83 ec 18             	sub    esp,0x18
c0008dcf:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008dd3:	85 db                	test   ebx,ebx
c0008dd5:	74 54                	je     c0008e2b <src_short_to_float_array+0x60>
c0008dd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ddb:	4b                   	dec    ebx
c0008ddc:	83 ec 0c             	sub    esp,0xc
c0008ddf:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008de3:	50                   	push   eax
c0008de4:	e8 fa f2 01 00       	call   c00280e3 <__floatsidf>
c0008de9:	83 c4 10             	add    esp,0x10
c0008dec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008df0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008df4:	68 00 00 00 3f       	push   0x3f000000
c0008df9:	6a 00                	push   0x0
c0008dfb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e03:	e8 78 ec 01 00       	call   c0027a80 <__muldf3>
c0008e08:	59                   	pop    ecx
c0008e09:	59                   	pop    ecx
c0008e0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e0e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e12:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e1a:	e8 34 f5 01 00       	call   c0028353 <__truncdfsf2>
c0008e1f:	83 c4 10             	add    esp,0x10
c0008e22:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008e26:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008e29:	eb a8                	jmp    c0008dd3 <src_short_to_float_array+0x8>
c0008e2b:	83 c4 18             	add    esp,0x18
c0008e2e:	5b                   	pop    ebx
c0008e2f:	c3                   	ret    

c0008e30 <src_float_to_short_array>:
c0008e30:	56                   	push   esi
c0008e31:	53                   	push   ebx
c0008e32:	83 ec 14             	sub    esp,0x14
c0008e35:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008e39:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e3d:	85 db                	test   ebx,ebx
c0008e3f:	0f 84 a4 00 00 00    	je     c0008ee9 <src_float_to_short_array+0xb9>
c0008e45:	83 ec 0c             	sub    esp,0xc
c0008e48:	4b                   	dec    ebx
c0008e49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e4d:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e50:	e8 22 f6 01 00       	call   c0028477 <__extendsfdf2>
c0008e55:	83 c4 10             	add    esp,0x10
c0008e58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e5c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e60:	68 00 00 e0 41       	push   0x41e00000
c0008e65:	6a 00                	push   0x0
c0008e67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6f:	e8 0c ec 01 00       	call   c0027a80 <__muldf3>
c0008e74:	83 c4 10             	add    esp,0x10
c0008e77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e7b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e7f:	68 ff ff df 41       	push   0x41dfffff
c0008e84:	68 00 00 c0 ff       	push   0xffc00000
c0008e89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e91:	e8 b7 f4 01 00       	call   c002834d <__gedf2>
c0008e96:	83 c4 10             	add    esp,0x10
c0008e99:	85 c0                	test   eax,eax
c0008e9b:	78 08                	js     c0008ea5 <src_float_to_short_array+0x75>
c0008e9d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008ea3:	eb 98                	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ea5:	68 00 00 e0 c1       	push   0xc1e00000
c0008eaa:	6a 00                	push   0x0
c0008eac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb4:	e8 98 f4 01 00       	call   c0028351 <__ledf2>
c0008eb9:	83 c4 10             	add    esp,0x10
c0008ebc:	85 c0                	test   eax,eax
c0008ebe:	7f 0b                	jg     c0008ecb <src_float_to_short_array+0x9b>
c0008ec0:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008ec6:	e9 72 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ecb:	50                   	push   eax
c0008ecc:	50                   	push   eax
c0008ecd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed5:	e8 26 f6 01 00       	call   c0028500 <lrint>
c0008eda:	83 c4 10             	add    esp,0x10
c0008edd:	c1 f8 10             	sar    eax,0x10
c0008ee0:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008ee4:	e9 54 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ee9:	83 c4 14             	add    esp,0x14
c0008eec:	5b                   	pop    ebx
c0008eed:	5e                   	pop    esi
c0008eee:	c3                   	ret    

c0008eef <src_int_to_float_array>:
c0008eef:	53                   	push   ebx
c0008ef0:	83 ec 18             	sub    esp,0x18
c0008ef3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ef7:	85 db                	test   ebx,ebx
c0008ef9:	74 52                	je     c0008f4d <src_int_to_float_array+0x5e>
c0008efb:	83 ec 0c             	sub    esp,0xc
c0008efe:	4b                   	dec    ebx
c0008eff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f03:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f06:	e8 d8 f1 01 00       	call   c00280e3 <__floatsidf>
c0008f0b:	83 c4 10             	add    esp,0x10
c0008f0e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f12:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f16:	68 00 00 00 3e       	push   0x3e000000
c0008f1b:	6a 00                	push   0x0
c0008f1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f25:	e8 56 eb 01 00       	call   c0027a80 <__muldf3>
c0008f2a:	59                   	pop    ecx
c0008f2b:	59                   	pop    ecx
c0008f2c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f30:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f3c:	e8 12 f4 01 00       	call   c0028353 <__truncdfsf2>
c0008f41:	83 c4 10             	add    esp,0x10
c0008f44:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f48:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f4b:	eb aa                	jmp    c0008ef7 <src_int_to_float_array+0x8>
c0008f4d:	83 c4 18             	add    esp,0x18
c0008f50:	5b                   	pop    ebx
c0008f51:	c3                   	ret    

c0008f52 <src_float_to_int_array>:
c0008f52:	56                   	push   esi
c0008f53:	53                   	push   ebx
c0008f54:	83 ec 14             	sub    esp,0x14
c0008f57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f5b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f5f:	85 db                	test   ebx,ebx
c0008f61:	0f 84 a2 00 00 00    	je     c0009009 <src_float_to_int_array+0xb7>
c0008f67:	83 ec 0c             	sub    esp,0xc
c0008f6a:	4b                   	dec    ebx
c0008f6b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f6f:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f72:	e8 00 f5 01 00       	call   c0028477 <__extendsfdf2>
c0008f77:	83 c4 10             	add    esp,0x10
c0008f7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f82:	68 00 00 e0 41       	push   0x41e00000
c0008f87:	6a 00                	push   0x0
c0008f89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f91:	e8 ea ea 01 00       	call   c0027a80 <__muldf3>
c0008f96:	83 c4 10             	add    esp,0x10
c0008f99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f9d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008fa1:	68 ff ff df 41       	push   0x41dfffff
c0008fa6:	68 00 00 c0 ff       	push   0xffc00000
c0008fab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008faf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb3:	e8 95 f3 01 00       	call   c002834d <__gedf2>
c0008fb8:	83 c4 10             	add    esp,0x10
c0008fbb:	85 c0                	test   eax,eax
c0008fbd:	78 09                	js     c0008fc8 <src_float_to_int_array+0x76>
c0008fbf:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008fc6:	eb 97                	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fc8:	68 00 00 e0 c1       	push   0xc1e00000
c0008fcd:	6a 00                	push   0x0
c0008fcf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd7:	e8 75 f3 01 00       	call   c0028351 <__ledf2>
c0008fdc:	83 c4 10             	add    esp,0x10
c0008fdf:	85 c0                	test   eax,eax
c0008fe1:	7f 0c                	jg     c0008fef <src_float_to_int_array+0x9d>
c0008fe3:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fea:	e9 70 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fef:	50                   	push   eax
c0008ff0:	50                   	push   eax
c0008ff1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff9:	e8 02 f5 01 00       	call   c0028500 <lrint>
c0008ffe:	83 c4 10             	add    esp,0x10
c0009001:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0009004:	e9 56 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0009009:	83 c4 14             	add    esp,0x14
c000900c:	5b                   	pop    ebx
c000900d:	5e                   	pop    esi
c000900e:	c3                   	ret    

c000900f <linear_vari_process>:
c000900f:	55                   	push   ebp
c0009010:	31 d2                	xor    edx,edx
c0009012:	57                   	push   edi
c0009013:	56                   	push   esi
c0009014:	53                   	push   ebx
c0009015:	83 ec 3c             	sub    esp,0x3c
c0009018:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000901c:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0009020:	0f 8e d3 07 00 00    	jle    c00097f9 <linear_vari_process+0x7ea>
c0009026:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000902a:	ba 05 00 00 00       	mov    edx,0x5
c000902f:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0009032:	85 db                	test   ebx,ebx
c0009034:	0f 84 bf 07 00 00    	je     c00097f9 <linear_vari_process+0x7ea>
c000903a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000903d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009041:	74 19                	je     c000905c <linear_vari_process+0x4d>
c0009043:	31 d2                	xor    edx,edx
c0009045:	39 c2                	cmp    edx,eax
c0009047:	7d 0c                	jge    c0009055 <linear_vari_process+0x46>
c0009049:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000904b:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000904e:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009052:	42                   	inc    edx
c0009053:	eb f0                	jmp    c0009045 <linear_vari_process+0x36>
c0009055:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000905c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000905f:	0f af d0             	imul   edx,eax
c0009062:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0009065:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0009069:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009070:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009073:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000907a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000907e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009081:	8b 00                	mov    eax,DWORD PTR [eax]
c0009083:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009087:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000908b:	68 00 00 70 3f       	push   0x3f700000
c0009090:	6a 00                	push   0x0
c0009092:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009096:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000909a:	e8 b0 f2 01 00       	call   c002834f <__ltdf2>
c000909f:	83 c4 10             	add    esp,0x10
c00090a2:	ba 16 00 00 00       	mov    edx,0x16
c00090a7:	85 c0                	test   eax,eax
c00090a9:	0f 88 4a 07 00 00    	js     c00097f9 <linear_vari_process+0x7ea>
c00090af:	68 00 00 70 40       	push   0x40700000
c00090b4:	6a 00                	push   0x0
c00090b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090be:	e8 6e f2 01 00       	call   c0028331 <__gtdf2>
c00090c3:	83 c4 10             	add    esp,0x10
c00090c6:	ba 16 00 00 00       	mov    edx,0x16
c00090cb:	85 c0                	test   eax,eax
c00090cd:	0f 8f 26 07 00 00    	jg     c00097f9 <linear_vari_process+0x7ea>
c00090d3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00090d7:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090da:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090e5:	68 00 00 f0 3f       	push   0x3ff00000
c00090ea:	6a 00                	push   0x0
c00090ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f4:	e8 56 f2 01 00       	call   c002834f <__ltdf2>
c00090f9:	83 c4 10             	add    esp,0x10
c00090fc:	85 c0                	test   eax,eax
c00090fe:	0f 89 89 02 00 00    	jns    c000938d <linear_vari_process+0x37e>
c0009104:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0009107:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c000910a:	0f 8d 7d 02 00 00    	jge    c000938d <linear_vari_process+0x37e>
c0009110:	83 ec 0c             	sub    esp,0xc
c0009113:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009116:	e8 c8 ef 01 00       	call   c00280e3 <__floatsidf>
c000911b:	83 c4 10             	add    esp,0x10
c000911e:	89 04 24             	mov    DWORD PTR [esp],eax
c0009121:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009125:	68 00 00 f0 3f       	push   0x3ff00000
c000912a:	6a 00                	push   0x0
c000912c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009130:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009134:	e8 ca e2 01 00       	call   c0027403 <__adddf3>
c0009139:	83 c4 10             	add    esp,0x10
c000913c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009140:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009144:	52                   	push   edx
c0009145:	50                   	push   eax
c0009146:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914e:	e8 2d e9 01 00       	call   c0027a80 <__muldf3>
c0009153:	5d                   	pop    ebp
c0009154:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009158:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000915c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000915f:	e8 7f ef 01 00       	call   c00280e3 <__floatsidf>
c0009164:	83 c4 10             	add    esp,0x10
c0009167:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000916b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000916f:	52                   	push   edx
c0009170:	50                   	push   eax
c0009171:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009175:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009179:	e8 85 e2 01 00       	call   c0027403 <__adddf3>
c000917e:	59                   	pop    ecx
c000917f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009183:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009187:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000918a:	e8 54 ef 01 00       	call   c00280e3 <__floatsidf>
c000918f:	83 c4 10             	add    esp,0x10
c0009192:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009196:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000919a:	52                   	push   edx
c000919b:	50                   	push   eax
c000919c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a4:	e8 a4 f1 01 00       	call   c002834d <__gedf2>
c00091a9:	83 c4 10             	add    esp,0x10
c00091ac:	85 c0                	test   eax,eax
c00091ae:	0f 89 d9 01 00 00    	jns    c000938d <linear_vari_process+0x37e>
c00091b4:	85 ff                	test   edi,edi
c00091b6:	0f 8e f4 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c00091bc:	83 ec 10             	sub    esp,0x10
c00091bf:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091c2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091c5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00091c9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00091cc:	ff 30                	push   DWORD PTR [eax]
c00091ce:	e8 81 e8 01 00       	call   c0027a54 <__subdf3>
c00091d3:	83 c4 18             	add    esp,0x18
c00091d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091de:	52                   	push   edx
c00091df:	50                   	push   eax
c00091e0:	e8 fb f2 01 00       	call   c00284e0 <fabs>
c00091e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091e9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091ed:	83 c4 10             	add    esp,0x10
c00091f0:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091f5:	68 23 42 92 0c       	push   0xc924223
c00091fa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091fe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009202:	e8 2a f1 01 00       	call   c0028331 <__gtdf2>
c0009207:	83 c4 10             	add    esp,0x10
c000920a:	85 c0                	test   eax,eax
c000920c:	0f 8e 9e 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c0009212:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009216:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009219:	8b 00                	mov    eax,DWORD PTR [eax]
c000921b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000921f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009222:	52                   	push   edx
c0009223:	50                   	push   eax
c0009224:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009227:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000922a:	e8 25 e8 01 00       	call   c0027a54 <__subdf3>
c000922f:	59                   	pop    ecx
c0009230:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009234:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009238:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000923b:	e8 a3 ee 01 00       	call   c00280e3 <__floatsidf>
c0009240:	83 c4 10             	add    esp,0x10
c0009243:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009247:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000924b:	52                   	push   edx
c000924c:	50                   	push   eax
c000924d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009255:	e8 26 e8 01 00       	call   c0027a80 <__muldf3>
c000925a:	5f                   	pop    edi
c000925b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000925f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009263:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009266:	e8 78 ee 01 00       	call   c00280e3 <__floatsidf>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009272:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009276:	52                   	push   edx
c0009277:	50                   	push   eax
c0009278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000927c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009280:	e8 df ea 01 00       	call   c0027d64 <__divdf3>
c0009285:	83 c4 10             	add    esp,0x10
c0009288:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000928c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009290:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009294:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009298:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000929c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092a0:	e8 5e e1 01 00       	call   c0027403 <__adddf3>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092b0:	31 ff                	xor    edi,edi
c00092b2:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c00092b5:	0f 8e 9d 00 00 00    	jle    c0009358 <linear_vari_process+0x349>
c00092bb:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00092be:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00092c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00092c5:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00092c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00092cc:	8b 06                	mov    eax,DWORD PTR [esi]
c00092ce:	52                   	push   edx
c00092cf:	52                   	push   edx
c00092d0:	55                   	push   ebp
c00092d1:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00092d4:	47                   	inc    edi
c00092d5:	e8 be da 01 00       	call   c0026d98 <__subsf3>
c00092da:	89 04 24             	mov    DWORD PTR [esp],eax
c00092dd:	e8 95 f1 01 00       	call   c0028477 <__extendsfdf2>
c00092e2:	83 c4 10             	add    esp,0x10
c00092e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092e9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092fd:	e8 7e e7 01 00       	call   c0027a80 <__muldf3>
c0009302:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009305:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009309:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000930d:	e8 65 f1 01 00       	call   c0028477 <__extendsfdf2>
c0009312:	83 c4 10             	add    esp,0x10
c0009315:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009319:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000931d:	52                   	push   edx
c000931e:	50                   	push   eax
c000931f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009323:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009327:	e8 d7 e0 01 00       	call   c0027403 <__adddf3>
c000932c:	59                   	pop    ecx
c000932d:	5d                   	pop    ebp
c000932e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009332:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009336:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933e:	e8 10 f0 01 00       	call   c0028353 <__truncdfsf2>
c0009343:	83 c4 10             	add    esp,0x10
c0009346:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0009349:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000934d:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009350:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009353:	e9 5a ff ff ff       	jmp    c00092b2 <linear_vari_process+0x2a3>
c0009358:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009360:	68 00 00 f0 3f       	push   0x3ff00000
c0009365:	6a 00                	push   0x0
c0009367:	e8 f8 e9 01 00       	call   c0027d64 <__divdf3>
c000936c:	83 c4 10             	add    esp,0x10
c000936f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009372:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000937c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009380:	e8 7e e0 01 00       	call   c0027403 <__adddf3>
c0009385:	83 c4 10             	add    esp,0x10
c0009388:	e9 50 fd ff ff       	jmp    c00090dd <linear_vari_process+0xce>
c000938d:	50                   	push   eax
c000938e:	50                   	push   eax
c000938f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009393:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009397:	e8 64 f1 01 00       	call   c0028500 <lrint>
c000939c:	83 ec 0c             	sub    esp,0xc
c000939f:	50                   	push   eax
c00093a0:	e8 3e ed 01 00       	call   c00280e3 <__floatsidf>
c00093a5:	83 c4 10             	add    esp,0x10
c00093a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093b0:	52                   	push   edx
c00093b1:	50                   	push   eax
c00093b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093ba:	e8 95 e6 01 00       	call   c0027a54 <__subdf3>
c00093bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00093c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00093c7:	83 c4 20             	add    esp,0x20
c00093ca:	6a 00                	push   0x0
c00093cc:	6a 00                	push   0x0
c00093ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d6:	e8 74 ef 01 00       	call   c002834f <__ltdf2>
c00093db:	83 c4 10             	add    esp,0x10
c00093de:	85 c0                	test   eax,eax
c00093e0:	79 1e                	jns    c0009400 <linear_vari_process+0x3f1>
c00093e2:	68 00 00 f0 3f       	push   0x3ff00000
c00093e7:	6a 00                	push   0x0
c00093e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093f1:	e8 0d e0 01 00       	call   c0027403 <__adddf3>
c00093f6:	83 c4 10             	add    esp,0x10
c00093f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00093fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009400:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009403:	83 ec 10             	sub    esp,0x10
c0009406:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009412:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009416:	e8 39 e6 01 00       	call   c0027a54 <__subdf3>
c000941b:	83 c4 18             	add    esp,0x18
c000941e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009422:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009426:	52                   	push   edx
c0009427:	50                   	push   eax
c0009428:	e8 d3 f0 01 00       	call   c0028500 <lrint>
c000942d:	83 c4 10             	add    esp,0x10
c0009430:	0f af f8             	imul   edi,eax
c0009433:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009436:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009439:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000943c:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c000943f:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009442:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009446:	0f 8d 13 03 00 00    	jge    c000975f <linear_vari_process+0x750>
c000944c:	83 ec 0c             	sub    esp,0xc
c000944f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009452:	e8 8c ec 01 00       	call   c00280e3 <__floatsidf>
c0009457:	83 c4 10             	add    esp,0x10
c000945a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000945e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009462:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009466:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000946a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000946e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009472:	e8 09 e6 01 00       	call   c0027a80 <__muldf3>
c0009477:	89 3c 24             	mov    DWORD PTR [esp],edi
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	e8 5c ec 01 00       	call   c00280e3 <__floatsidf>
c0009487:	83 c4 10             	add    esp,0x10
c000948a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000948e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009492:	52                   	push   edx
c0009493:	50                   	push   eax
c0009494:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009498:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000949c:	e8 62 df 01 00       	call   c0027403 <__adddf3>
c00094a1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00094a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094a8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094ac:	e8 32 ec 01 00       	call   c00280e3 <__floatsidf>
c00094b1:	83 c4 10             	add    esp,0x10
c00094b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094bc:	52                   	push   edx
c00094bd:	50                   	push   eax
c00094be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c6:	e8 84 ee 01 00       	call   c002834f <__ltdf2>
c00094cb:	83 c4 10             	add    esp,0x10
c00094ce:	85 c0                	test   eax,eax
c00094d0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00094d4:	0f 89 85 02 00 00    	jns    c000975f <linear_vari_process+0x750>
c00094da:	85 c9                	test   ecx,ecx
c00094dc:	0f 8e f5 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c00094e2:	83 ec 10             	sub    esp,0x10
c00094e5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094e8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094eb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094ef:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094f2:	ff 30                	push   DWORD PTR [eax]
c00094f4:	e8 5b e5 01 00       	call   c0027a54 <__subdf3>
c00094f9:	83 c4 18             	add    esp,0x18
c00094fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009500:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009504:	52                   	push   edx
c0009505:	50                   	push   eax
c0009506:	e8 d5 ef 01 00       	call   c00284e0 <fabs>
c000950b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000950f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009513:	83 c4 10             	add    esp,0x10
c0009516:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000951b:	68 23 42 92 0c       	push   0xc924223
c0009520:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009524:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009528:	e8 04 ee 01 00       	call   c0028331 <__gtdf2>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	85 c0                	test   eax,eax
c0009532:	0f 8e 9f 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c0009538:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000953c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000953f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009541:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009545:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009549:	52                   	push   edx
c000954a:	50                   	push   eax
c000954b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000954e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009551:	e8 fe e4 01 00       	call   c0027a54 <__subdf3>
c0009556:	5f                   	pop    edi
c0009557:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000955b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000955f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009562:	e8 7c eb 01 00       	call   c00280e3 <__floatsidf>
c0009567:	83 c4 10             	add    esp,0x10
c000956a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000956e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009572:	52                   	push   edx
c0009573:	50                   	push   eax
c0009574:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009578:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000957c:	e8 ff e4 01 00       	call   c0027a80 <__muldf3>
c0009581:	5d                   	pop    ebp
c0009582:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009586:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000958a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000958d:	e8 51 eb 01 00       	call   c00280e3 <__floatsidf>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009599:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000959d:	52                   	push   edx
c000959e:	50                   	push   eax
c000959f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a7:	e8 b8 e7 01 00       	call   c0027d64 <__divdf3>
c00095ac:	83 c4 10             	add    esp,0x10
c00095af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095b3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c7:	e8 37 de 01 00       	call   c0027403 <__adddf3>
c00095cc:	83 c4 10             	add    esp,0x10
c00095cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095d7:	31 ff                	xor    edi,edi
c00095d9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095dc:	39 f8                	cmp    eax,edi
c00095de:	0f 8e ac 00 00 00    	jle    c0009690 <linear_vari_process+0x681>
c00095e4:	8b 16                	mov    edx,DWORD PTR [esi]
c00095e6:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095e9:	29 c1                	sub    ecx,eax
c00095eb:	89 c8                	mov    eax,ecx
c00095ed:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095f0:	01 f8                	add    eax,edi
c00095f2:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095f6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095f9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009600:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009603:	51                   	push   ecx
c0009604:	01 f8                	add    eax,edi
c0009606:	51                   	push   ecx
c0009607:	47                   	inc    edi
c0009608:	55                   	push   ebp
c0009609:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c000960c:	e8 87 d7 01 00       	call   c0026d98 <__subsf3>
c0009611:	89 04 24             	mov    DWORD PTR [esp],eax
c0009614:	e8 5e ee 01 00       	call   c0028477 <__extendsfdf2>
c0009619:	83 c4 10             	add    esp,0x10
c000961c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009620:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009624:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009628:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000962c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009630:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009634:	e8 47 e4 01 00       	call   c0027a80 <__muldf3>
c0009639:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000963c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009640:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009644:	e8 2e ee 01 00       	call   c0028477 <__extendsfdf2>
c0009649:	83 c4 10             	add    esp,0x10
c000964c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009650:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009654:	52                   	push   edx
c0009655:	50                   	push   eax
c0009656:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965e:	e8 a0 dd 01 00       	call   c0027403 <__adddf3>
c0009663:	5d                   	pop    ebp
c0009664:	59                   	pop    ecx
c0009665:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009669:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000966d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009671:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009675:	e8 d9 ec 01 00       	call   c0028353 <__truncdfsf2>
c000967a:	83 c4 10             	add    esp,0x10
c000967d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009681:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009685:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009688:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000968b:	e9 49 ff ff ff       	jmp    c00095d9 <linear_vari_process+0x5ca>
c0009690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	68 00 00 f0 3f       	push   0x3ff00000
c000969d:	6a 00                	push   0x0
c000969f:	e8 c0 e6 01 00       	call   c0027d64 <__divdf3>
c00096a4:	83 c4 10             	add    esp,0x10
c00096a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096af:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b3:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bf:	e8 3f dd 01 00       	call   c0027403 <__adddf3>
c00096c4:	59                   	pop    ecx
c00096c5:	5f                   	pop    edi
c00096c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d6:	e8 25 ee 01 00       	call   c0028500 <lrint>
c00096db:	83 ec 0c             	sub    esp,0xc
c00096de:	50                   	push   eax
c00096df:	e8 ff e9 01 00       	call   c00280e3 <__floatsidf>
c00096e4:	83 c4 10             	add    esp,0x10
c00096e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096eb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ef:	52                   	push   edx
c00096f0:	50                   	push   eax
c00096f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f9:	e8 56 e3 01 00       	call   c0027a54 <__subdf3>
c00096fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009702:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009706:	83 c4 20             	add    esp,0x20
c0009709:	6a 00                	push   0x0
c000970b:	6a 00                	push   0x0
c000970d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009711:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009715:	e8 35 ec 01 00       	call   c002834f <__ltdf2>
c000971a:	83 c4 10             	add    esp,0x10
c000971d:	85 c0                	test   eax,eax
c000971f:	79 1e                	jns    c000973f <linear_vari_process+0x730>
c0009721:	68 00 00 f0 3f       	push   0x3ff00000
c0009726:	6a 00                	push   0x0
c0009728:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000972c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009730:	e8 ce dc 01 00       	call   c0027403 <__adddf3>
c0009735:	83 c4 10             	add    esp,0x10
c0009738:	89 04 24             	mov    DWORD PTR [esp],eax
c000973b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000973f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009742:	83 ec 10             	sub    esp,0x10
c0009745:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009749:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000974d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009751:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009755:	e8 fa e2 01 00       	call   c0027a54 <__subdf3>
c000975a:	e9 bc fc ff ff       	jmp    c000941b <linear_vari_process+0x40c>
c000975f:	39 fd                	cmp    ebp,edi
c0009761:	7d 38                	jge    c000979b <linear_vari_process+0x78c>
c0009763:	83 ec 0c             	sub    esp,0xc
c0009766:	89 f8                	mov    eax,edi
c0009768:	29 e8                	sub    eax,ebp
c000976a:	99                   	cdq    
c000976b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000976e:	50                   	push   eax
c000976f:	e8 6f e9 01 00       	call   c00280e3 <__floatsidf>
c0009774:	83 c4 10             	add    esp,0x10
c0009777:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000977b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000977f:	52                   	push   edx
c0009780:	50                   	push   eax
c0009781:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009785:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009789:	e8 75 dc 01 00       	call   c0027403 <__adddf3>
c000978e:	83 c4 10             	add    esp,0x10
c0009791:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009794:	89 04 24             	mov    DWORD PTR [esp],eax
c0009797:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000979b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000979f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00097a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00097a6:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00097a9:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00097ac:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097af:	85 c0                	test   eax,eax
c00097b1:	7f 29                	jg     c00097dc <linear_vari_process+0x7cd>
c00097b3:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00097b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00097bf:	89 01                	mov    DWORD PTR [ecx],eax
c00097c1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00097c4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097c7:	99                   	cdq    
c00097c8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097cb:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00097ce:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00097d1:	99                   	cdq    
c00097d2:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097d5:	31 d2                	xor    edx,edx
c00097d7:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097da:	eb 1d                	jmp    c00097f9 <linear_vari_process+0x7ea>
c00097dc:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097df:	31 d2                	xor    edx,edx
c00097e1:	29 c8                	sub    eax,ecx
c00097e3:	c1 e0 02             	shl    eax,0x2
c00097e6:	39 d1                	cmp    ecx,edx
c00097e8:	7e c9                	jle    c00097b3 <linear_vari_process+0x7a4>
c00097ea:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097ec:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097ef:	83 c0 04             	add    eax,0x4
c00097f2:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097f6:	42                   	inc    edx
c00097f7:	eb ed                	jmp    c00097e6 <linear_vari_process+0x7d7>
c00097f9:	83 c4 3c             	add    esp,0x3c
c00097fc:	89 d0                	mov    eax,edx
c00097fe:	5b                   	pop    ebx
c00097ff:	5e                   	pop    esi
c0009800:	5f                   	pop    edi
c0009801:	5d                   	pop    ebp
c0009802:	c3                   	ret    

c0009803 <linear_reset>:
c0009803:	83 ec 0c             	sub    esp,0xc
c0009806:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000980a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000980d:	85 c0                	test   eax,eax
c000980f:	74 20                	je     c0009831 <linear_reset+0x2e>
c0009811:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0009814:	83 c0 1c             	add    eax,0x1c
c0009817:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000981a:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0009821:	c1 e2 02             	shl    edx,0x2
c0009824:	51                   	push   ecx
c0009825:	52                   	push   edx
c0009826:	6a 00                	push   0x0
c0009828:	50                   	push   eax
c0009829:	e8 4a 6f ff ff       	call   c0000778 <memset>
c000982e:	83 c4 10             	add    esp,0x10
c0009831:	83 c4 0c             	add    esp,0xc
c0009834:	c3                   	ret    

c0009835 <linear_get_name>:
c0009835:	31 c0                	xor    eax,eax
c0009837:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000983c:	75 05                	jne    c0009843 <linear_get_name+0xe>
c000983e:	b8 40 9c 02 c0       	mov    eax,0xc0029c40
c0009843:	c3                   	ret    

c0009844 <linear_get_description>:
c0009844:	31 c0                	xor    eax,eax
c0009846:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000984b:	75 05                	jne    c0009852 <linear_get_description+0xe>
c000984d:	b8 54 9c 02 c0       	mov    eax,0xc0029c54
c0009852:	c3                   	ret    

c0009853 <linear_set_converter>:
c0009853:	53                   	push   ebx
c0009854:	b8 0a 00 00 00       	mov    eax,0xa
c0009859:	83 ec 08             	sub    esp,0x8
c000985c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009860:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009865:	75 6e                	jne    c00098d5 <linear_set_converter+0x82>
c0009867:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000986a:	85 c0                	test   eax,eax
c000986c:	74 13                	je     c0009881 <linear_set_converter+0x2e>
c000986e:	83 ec 0c             	sub    esp,0xc
c0009871:	50                   	push   eax
c0009872:	e8 d9 5f 00 00       	call   c000f850 <free>
c0009877:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000987e:	83 c4 10             	add    esp,0x10
c0009881:	50                   	push   eax
c0009882:	50                   	push   eax
c0009883:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009886:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000988d:	50                   	push   eax
c000988e:	6a 01                	push   0x1
c0009890:	e8 db 5f 00 00       	call   c000f870 <calloc>
c0009895:	83 c4 10             	add    esp,0x10
c0009898:	89 c2                	mov    edx,eax
c000989a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000989d:	85 d2                	test   edx,edx
c000989f:	b8 01 00 00 00       	mov    eax,0x1
c00098a4:	74 2f                	je     c00098d5 <linear_set_converter+0x82>
c00098a6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00098a9:	83 ec 0c             	sub    esp,0xc
c00098ac:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00098af:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c00098b5:	c7 43 24 0f 90 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000900f
c00098bc:	c7 43 20 0f 90 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000900f
c00098c3:	c7 43 28 03 98 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0009803
c00098ca:	53                   	push   ebx
c00098cb:	e8 33 ff ff ff       	call   c0009803 <linear_reset>
c00098d0:	83 c4 10             	add    esp,0x10
c00098d3:	31 c0                	xor    eax,eax
c00098d5:	83 c4 08             	add    esp,0x8
c00098d8:	5b                   	pop    ebx
c00098d9:	c3                   	ret    

c00098da <int_to_fp>:
c00098da:	c1 e0 0c             	shl    eax,0xc
c00098dd:	c3                   	ret    

c00098de <fp_to_int>:
c00098de:	c1 f8 0c             	sar    eax,0xc
c00098e1:	c3                   	ret    

c00098e2 <fp_fraction_part>:
c00098e2:	25 ff 0f 00 00       	and    eax,0xfff
c00098e7:	c3                   	ret    

c00098e8 <fp_to_double>:
c00098e8:	83 ec 1c             	sub    esp,0x1c
c00098eb:	e8 f2 ff ff ff       	call   c00098e2 <fp_fraction_part>
c00098f0:	83 ec 0c             	sub    esp,0xc
c00098f3:	50                   	push   eax
c00098f4:	e8 ea e7 01 00       	call   c00280e3 <__floatsidf>
c00098f9:	83 c4 10             	add    esp,0x10
c00098fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009900:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009904:	68 00 00 30 3f       	push   0x3f300000
c0009909:	6a 00                	push   0x0
c000990b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000990f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009913:	e8 68 e1 01 00       	call   c0027a80 <__muldf3>
c0009918:	83 c4 2c             	add    esp,0x2c
c000991b:	c3                   	ret    

c000991c <calc_output_single>:
c000991c:	55                   	push   ebp
c000991d:	57                   	push   edi
c000991e:	56                   	push   esi
c000991f:	89 c6                	mov    esi,eax
c0009921:	53                   	push   ebx
c0009922:	89 d3                	mov    ebx,edx
c0009924:	83 ec 4c             	sub    esp,0x4c
c0009927:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000992b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000992e:	e8 a7 ff ff ff       	call   c00098da <int_to_fp>
c0009933:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c0009936:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000993a:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000993e:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009942:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c0009945:	99                   	cdq    
c0009946:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000994e:	f7 fb                	idiv   ebx
c0009950:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009958:	89 da                	mov    edx,ebx
c000995a:	0f af d0             	imul   edx,eax
c000995d:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009961:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009965:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009969:	29 c2                	sub    edx,eax
c000996b:	8d 2c 96             	lea    ebp,[esi+edx*4]
c000996e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009972:	83 c5 04             	add    ebp,0x4
c0009975:	e8 6e ff ff ff       	call   c00098e8 <fp_to_double>
c000997a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000997e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009986:	e8 53 ff ff ff       	call   c00098de <fp_to_int>
c000998b:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c000998e:	52                   	push   edx
c000998f:	52                   	push   edx
c0009990:	51                   	push   ecx
c0009991:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009995:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009999:	e8 fa d3 01 00       	call   c0026d98 <__subsf3>
c000999e:	89 04 24             	mov    DWORD PTR [esp],eax
c00099a1:	e8 d1 ea 01 00       	call   c0028477 <__extendsfdf2>
c00099a6:	83 c4 10             	add    esp,0x10
c00099a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099ad:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099c1:	e8 ba e0 01 00       	call   c0027a80 <__muldf3>
c00099c6:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00099ca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00099ce:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099d1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00099d5:	e8 9d ea 01 00       	call   c0028477 <__extendsfdf2>
c00099da:	83 c4 10             	add    esp,0x10
c00099dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099e5:	52                   	push   edx
c00099e6:	50                   	push   eax
c00099e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099ef:	e8 0f da 01 00       	call   c0027403 <__adddf3>
c00099f4:	59                   	pop    ecx
c00099f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099fd:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c0009a03:	e8 6f ea 01 00       	call   c0028477 <__extendsfdf2>
c0009a08:	83 c4 10             	add    esp,0x10
c0009a0b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009a0f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009a13:	52                   	push   edx
c0009a14:	50                   	push   eax
c0009a15:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a19:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a1d:	e8 5e e0 01 00       	call   c0027a80 <__muldf3>
c0009a22:	83 c4 10             	add    esp,0x10
c0009a25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009a29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009a2d:	52                   	push   edx
c0009a2e:	50                   	push   eax
c0009a2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a33:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a37:	e8 c7 d9 01 00       	call   c0027403 <__adddf3>
c0009a3c:	83 c4 10             	add    esp,0x10
c0009a3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a47:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a4b:	0f 89 1d ff ff ff    	jns    c000996e <calc_output_single+0x52>
c0009a51:	89 d9                	mov    ecx,ebx
c0009a53:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a57:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a5b:	89 dd                	mov    ebp,ebx
c0009a5d:	29 c8                	sub    eax,ecx
c0009a5f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a67:	99                   	cdq    
c0009a68:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a70:	f7 fb                	idiv   ebx
c0009a72:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a76:	0f af e8             	imul   ebp,eax
c0009a79:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a7d:	01 cd                	add    ebp,ecx
c0009a7f:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a82:	89 e8                	mov    eax,ebp
c0009a84:	83 ee 04             	sub    esi,0x4
c0009a87:	e8 5c fe ff ff       	call   c00098e8 <fp_to_double>
c0009a8c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a90:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a94:	89 e8                	mov    eax,ebp
c0009a96:	29 dd                	sub    ebp,ebx
c0009a98:	e8 41 fe ff ff       	call   c00098de <fp_to_int>
c0009a9d:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009aa0:	52                   	push   edx
c0009aa1:	52                   	push   edx
c0009aa2:	51                   	push   ecx
c0009aa3:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009aa7:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009aab:	e8 e8 d2 01 00       	call   c0026d98 <__subsf3>
c0009ab0:	89 04 24             	mov    DWORD PTR [esp],eax
c0009ab3:	e8 bf e9 01 00       	call   c0028477 <__extendsfdf2>
c0009ab8:	83 c4 10             	add    esp,0x10
c0009abb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009abf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009ac3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ac7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009acb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009acf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ad3:	e8 a8 df 01 00       	call   c0027a80 <__muldf3>
c0009ad8:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009adc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ae0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009ae3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009ae7:	e8 8b e9 01 00       	call   c0028477 <__extendsfdf2>
c0009aec:	83 c4 10             	add    esp,0x10
c0009aef:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009af3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009af7:	52                   	push   edx
c0009af8:	50                   	push   eax
c0009af9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b01:	e8 fd d8 01 00       	call   c0027403 <__adddf3>
c0009b06:	59                   	pop    ecx
c0009b07:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009b0b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009b0f:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009b15:	e8 5d e9 01 00       	call   c0028477 <__extendsfdf2>
c0009b1a:	83 c4 10             	add    esp,0x10
c0009b1d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b21:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b25:	52                   	push   edx
c0009b26:	50                   	push   eax
c0009b27:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2f:	e8 4c df 01 00       	call   c0027a80 <__muldf3>
c0009b34:	83 c4 10             	add    esp,0x10
c0009b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b3f:	52                   	push   edx
c0009b40:	50                   	push   eax
c0009b41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b49:	e8 b5 d8 01 00       	call   c0027403 <__adddf3>
c0009b4e:	83 c4 10             	add    esp,0x10
c0009b51:	85 ed                	test   ebp,ebp
c0009b53:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b57:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b5b:	0f 8f 21 ff ff ff    	jg     c0009a82 <calc_output_single+0x166>
c0009b61:	52                   	push   edx
c0009b62:	50                   	push   eax
c0009b63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b6b:	e8 93 d8 01 00       	call   c0027403 <__adddf3>
c0009b70:	83 c4 5c             	add    esp,0x5c
c0009b73:	5b                   	pop    ebx
c0009b74:	5e                   	pop    esi
c0009b75:	5f                   	pop    edi
c0009b76:	5d                   	pop    ebp
c0009b77:	c3                   	ret    

c0009b78 <calc_output_stereo>:
c0009b78:	55                   	push   ebp
c0009b79:	89 cd                	mov    ebp,ecx
c0009b7b:	57                   	push   edi
c0009b7c:	56                   	push   esi
c0009b7d:	53                   	push   ebx
c0009b7e:	89 c3                	mov    ebx,eax
c0009b80:	83 ec 6c             	sub    esp,0x6c
c0009b83:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b87:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b8e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b95:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b99:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b9d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009ba0:	e8 35 fd ff ff       	call   c00098da <int_to_fp>
c0009ba5:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009bad:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bb1:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009bb9:	29 c8                	sub    eax,ecx
c0009bbb:	99                   	cdq    
c0009bbc:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009bc0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009bc4:	0f af d0             	imul   edx,eax
c0009bc7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009bca:	31 d2                	xor    edx,edx
c0009bcc:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009bd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009bd4:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009bd7:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009bdb:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009bde:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009be2:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009be6:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009be9:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bee:	29 c1                	sub    ecx,eax
c0009bf0:	31 c0                	xor    eax,eax
c0009bf2:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bf5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bf9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bfd:	83 c7 08             	add    edi,0x8
c0009c00:	e8 e3 fc ff ff       	call   c00098e8 <fp_to_double>
c0009c05:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009c09:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009c0d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c11:	e8 c8 fc ff ff       	call   c00098de <fp_to_int>
c0009c16:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009c19:	52                   	push   edx
c0009c1a:	52                   	push   edx
c0009c1b:	51                   	push   ecx
c0009c1c:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009c20:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009c24:	e8 6f d1 01 00       	call   c0026d98 <__subsf3>
c0009c29:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c2c:	e8 46 e8 01 00       	call   c0028477 <__extendsfdf2>
c0009c31:	83 c4 10             	add    esp,0x10
c0009c34:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c38:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c3c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c40:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c44:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c48:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c4c:	e8 2f de 01 00       	call   c0027a80 <__muldf3>
c0009c51:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c55:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c59:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c5c:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c60:	e8 12 e8 01 00       	call   c0028477 <__extendsfdf2>
c0009c65:	83 c4 10             	add    esp,0x10
c0009c68:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c6c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c70:	52                   	push   edx
c0009c71:	50                   	push   eax
c0009c72:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c76:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c7a:	e8 84 d7 01 00       	call   c0027403 <__adddf3>
c0009c7f:	59                   	pop    ecx
c0009c80:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c84:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c88:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c8e:	e8 e4 e7 01 00       	call   c0028477 <__extendsfdf2>
c0009c93:	83 c4 10             	add    esp,0x10
c0009c96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c9e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009caa:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cae:	e8 cd dd 01 00       	call   c0027a80 <__muldf3>
c0009cb3:	83 c4 10             	add    esp,0x10
c0009cb6:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cba:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cbe:	52                   	push   edx
c0009cbf:	50                   	push   eax
c0009cc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc8:	e8 36 d7 01 00       	call   c0027403 <__adddf3>
c0009ccd:	59                   	pop    ecx
c0009cce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009cd2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009cd6:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009cdc:	e8 96 e7 01 00       	call   c0028477 <__extendsfdf2>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ce8:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cf8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cfc:	e8 7f dd 01 00       	call   c0027a80 <__muldf3>
c0009d01:	83 c4 10             	add    esp,0x10
c0009d04:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009d08:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009d0c:	52                   	push   edx
c0009d0d:	50                   	push   eax
c0009d0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d12:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d16:	e8 e8 d6 01 00       	call   c0027403 <__adddf3>
c0009d1b:	83 c4 10             	add    esp,0x10
c0009d1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009d22:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d26:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d2a:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009d2e:	0f 89 c5 fe ff ff    	jns    c0009bf9 <calc_output_stereo+0x81>
c0009d34:	29 e9                	sub    ecx,ebp
c0009d36:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d3a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d3e:	29 c8                	sub    eax,ecx
c0009d40:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d48:	99                   	cdq    
c0009d49:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d4d:	31 d2                	xor    edx,edx
c0009d4f:	0f af f8             	imul   edi,eax
c0009d52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d56:	40                   	inc    eax
c0009d57:	01 cf                	add    edi,ecx
c0009d59:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d5e:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d62:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d6a:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d6d:	31 c0                	xor    eax,eax
c0009d6f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d73:	89 f8                	mov    eax,edi
c0009d75:	83 eb 08             	sub    ebx,0x8
c0009d78:	e8 6b fb ff ff       	call   c00098e8 <fp_to_double>
c0009d7d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d81:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d85:	89 f8                	mov    eax,edi
c0009d87:	e8 52 fb ff ff       	call   c00098de <fp_to_int>
c0009d8c:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d8f:	52                   	push   edx
c0009d90:	52                   	push   edx
c0009d91:	55                   	push   ebp
c0009d92:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d96:	e8 fd cf 01 00       	call   c0026d98 <__subsf3>
c0009d9b:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d9e:	e8 d4 e6 01 00       	call   c0028477 <__extendsfdf2>
c0009da3:	83 c4 10             	add    esp,0x10
c0009da6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009daa:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dbe:	e8 bd dc 01 00       	call   c0027a80 <__muldf3>
c0009dc3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009dc6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009dca:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009dce:	e8 a4 e6 01 00       	call   c0028477 <__extendsfdf2>
c0009dd3:	83 c4 10             	add    esp,0x10
c0009dd6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dda:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dde:	52                   	push   edx
c0009ddf:	50                   	push   eax
c0009de0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de8:	e8 16 d6 01 00       	call   c0027403 <__adddf3>
c0009ded:	59                   	pop    ecx
c0009dee:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009df2:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009df6:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dfc:	e8 76 e6 01 00       	call   c0028477 <__extendsfdf2>
c0009e01:	83 c4 10             	add    esp,0x10
c0009e04:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e08:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e0c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e10:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e14:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e1c:	e8 5f dc 01 00       	call   c0027a80 <__muldf3>
c0009e21:	83 c4 10             	add    esp,0x10
c0009e24:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e28:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e2c:	52                   	push   edx
c0009e2d:	50                   	push   eax
c0009e2e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e32:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e36:	e8 c8 d5 01 00       	call   c0027403 <__adddf3>
c0009e3b:	5d                   	pop    ebp
c0009e3c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e40:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e44:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e4a:	e8 28 e6 01 00       	call   c0028477 <__extendsfdf2>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e56:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e5a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e5e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e62:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e66:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e6a:	e8 11 dc 01 00       	call   c0027a80 <__muldf3>
c0009e6f:	83 c4 10             	add    esp,0x10
c0009e72:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e76:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e7a:	52                   	push   edx
c0009e7b:	50                   	push   eax
c0009e7c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e80:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e84:	e8 7a d5 01 00       	call   c0027403 <__adddf3>
c0009e89:	83 c4 10             	add    esp,0x10
c0009e8c:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e90:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e94:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e98:	85 ff                	test   edi,edi
c0009e9a:	0f 8f d3 fe ff ff    	jg     c0009d73 <calc_output_stereo+0x1fb>
c0009ea0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb0:	e8 4e d5 01 00       	call   c0027403 <__adddf3>
c0009eb5:	83 c4 10             	add    esp,0x10
c0009eb8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ebc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ec0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ecc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ed0:	e8 ab db 01 00       	call   c0027a80 <__muldf3>
c0009ed5:	59                   	pop    ecx
c0009ed6:	5b                   	pop    ebx
c0009ed7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009edb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009edf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee7:	e8 67 e4 01 00       	call   c0028353 <__truncdfsf2>
c0009eec:	83 c4 10             	add    esp,0x10
c0009eef:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ef6:	89 03                	mov    DWORD PTR [ebx],eax
c0009ef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009efc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f08:	e8 f6 d4 01 00       	call   c0027403 <__adddf3>
c0009f0d:	83 c4 10             	add    esp,0x10
c0009f10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009f14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009f18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f1c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f28:	e8 53 db 01 00       	call   c0027a80 <__muldf3>
c0009f2d:	5e                   	pop    esi
c0009f2e:	5f                   	pop    edi
c0009f2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f33:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3f:	e8 0f e4 01 00       	call   c0028353 <__truncdfsf2>
c0009f44:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f4b:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f4e:	83 c4 7c             	add    esp,0x7c
c0009f51:	5b                   	pop    ebx
c0009f52:	5e                   	pop    esi
c0009f53:	5f                   	pop    edi
c0009f54:	5d                   	pop    ebp
c0009f55:	c3                   	ret    

c0009f56 <calc_output_quad>:
c0009f56:	55                   	push   ebp
c0009f57:	57                   	push   edi
c0009f58:	56                   	push   esi
c0009f59:	89 c6                	mov    esi,eax
c0009f5b:	53                   	push   ebx
c0009f5c:	83 ec 7c             	sub    esp,0x7c
c0009f5f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f63:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f67:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f6e:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f75:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f79:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f7d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f80:	e8 55 f9 ff ff       	call   c00098da <int_to_fp>
c0009f85:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f88:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f8b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f8f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f93:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f97:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f9b:	99                   	cdq    
c0009f9c:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009fa0:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009fa4:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009fa7:	31 d2                	xor    edx,edx
c0009fa9:	0f af d8             	imul   ebx,eax
c0009fac:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009fb4:	0f af c7             	imul   eax,edi
c0009fb7:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009fbb:	29 c1                	sub    ecx,eax
c0009fbd:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009fc5:	31 c0                	xor    eax,eax
c0009fc7:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009fca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009fce:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009fd2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fd6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fda:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fde:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fe2:	89 d8                	mov    eax,ebx
c0009fe4:	83 c7 10             	add    edi,0x10
c0009fe7:	e8 fc f8 ff ff       	call   c00098e8 <fp_to_double>
c0009fec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009ff0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ff4:	89 d8                	mov    eax,ebx
c0009ff6:	e8 e3 f8 ff ff       	call   c00098de <fp_to_int>
c0009ffb:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fff:	52                   	push   edx
c000a000:	52                   	push   edx
c000a001:	51                   	push   ecx
c000a002:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c000a006:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a00a:	e8 89 cd 01 00       	call   c0026d98 <__subsf3>
c000a00f:	89 04 24             	mov    DWORD PTR [esp],eax
c000a012:	e8 60 e4 01 00       	call   c0028477 <__extendsfdf2>
c000a017:	83 c4 10             	add    esp,0x10
c000a01a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a01e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a02a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a02e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a032:	e8 49 da 01 00       	call   c0027a80 <__muldf3>
c000a037:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a03b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a03f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a042:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a046:	e8 2c e4 01 00       	call   c0028477 <__extendsfdf2>
c000a04b:	83 c4 10             	add    esp,0x10
c000a04e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a052:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a056:	52                   	push   edx
c000a057:	50                   	push   eax
c000a058:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a05c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a060:	e8 9e d3 01 00       	call   c0027403 <__adddf3>
c000a065:	59                   	pop    ecx
c000a066:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a06a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a06e:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a074:	e8 fe e3 01 00       	call   c0028477 <__extendsfdf2>
c000a079:	83 c4 10             	add    esp,0x10
c000a07c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a080:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a08c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a090:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a094:	e8 e7 d9 01 00       	call   c0027a80 <__muldf3>
c000a099:	83 c4 10             	add    esp,0x10
c000a09c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0a4:	52                   	push   edx
c000a0a5:	50                   	push   eax
c000a0a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0ae:	e8 50 d3 01 00       	call   c0027403 <__adddf3>
c000a0b3:	59                   	pop    ecx
c000a0b4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a0b8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a0bc:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a0c2:	e8 b0 e3 01 00       	call   c0028477 <__extendsfdf2>
c000a0c7:	83 c4 10             	add    esp,0x10
c000a0ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0e2:	e8 99 d9 01 00       	call   c0027a80 <__muldf3>
c000a0e7:	83 c4 10             	add    esp,0x10
c000a0ea:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ee:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0f2:	52                   	push   edx
c000a0f3:	50                   	push   eax
c000a0f4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0f8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0fc:	e8 02 d3 01 00       	call   c0027403 <__adddf3>
c000a101:	59                   	pop    ecx
c000a102:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a106:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a10a:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a110:	e8 62 e3 01 00       	call   c0028477 <__extendsfdf2>
c000a115:	83 c4 10             	add    esp,0x10
c000a118:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a11c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a120:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a124:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a128:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a12c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a130:	e8 4b d9 01 00       	call   c0027a80 <__muldf3>
c000a135:	83 c4 10             	add    esp,0x10
c000a138:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a13c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a140:	52                   	push   edx
c000a141:	50                   	push   eax
c000a142:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a146:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a14a:	e8 b4 d2 01 00       	call   c0027403 <__adddf3>
c000a14f:	59                   	pop    ecx
c000a150:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a154:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a158:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a15e:	e8 14 e3 01 00       	call   c0028477 <__extendsfdf2>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a16a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a16e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a172:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a176:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17e:	e8 fd d8 01 00       	call   c0027a80 <__muldf3>
c000a183:	83 c4 10             	add    esp,0x10
c000a186:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a18a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a18e:	52                   	push   edx
c000a18f:	50                   	push   eax
c000a190:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a194:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a198:	e8 66 d2 01 00       	call   c0027403 <__adddf3>
c000a19d:	83 c4 10             	add    esp,0x10
c000a1a0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a1a4:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a1a8:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a1ac:	0f 89 30 fe ff ff    	jns    c0009fe2 <calc_output_quad+0x8c>
c000a1b2:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a1b6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a1ba:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a1be:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a1c2:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a1ca:	29 c8                	sub    eax,ecx
c000a1cc:	99                   	cdq    
c000a1cd:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a1d1:	31 d2                	xor    edx,edx
c000a1d3:	0f af d8             	imul   ebx,eax
c000a1d6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1da:	40                   	inc    eax
c000a1db:	01 cb                	add    ebx,ecx
c000a1dd:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1e2:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1e6:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1ea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1ee:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1f1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1f9:	31 c0                	xor    eax,eax
c000a1fb:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1ff:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a203:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a207:	89 d8                	mov    eax,ebx
c000a209:	83 ee 10             	sub    esi,0x10
c000a20c:	e8 d7 f6 ff ff       	call   c00098e8 <fp_to_double>
c000a211:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a215:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a219:	89 d8                	mov    eax,ebx
c000a21b:	e8 be f6 ff ff       	call   c00098de <fp_to_int>
c000a220:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a224:	52                   	push   edx
c000a225:	52                   	push   edx
c000a226:	57                   	push   edi
c000a227:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a22b:	e8 68 cb 01 00       	call   c0026d98 <__subsf3>
c000a230:	89 04 24             	mov    DWORD PTR [esp],eax
c000a233:	e8 3f e2 01 00       	call   c0028477 <__extendsfdf2>
c000a238:	83 c4 10             	add    esp,0x10
c000a23b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a23f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a243:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a247:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a24b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a24f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a253:	e8 28 d8 01 00       	call   c0027a80 <__muldf3>
c000a258:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a25b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a25f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a263:	e8 0f e2 01 00       	call   c0028477 <__extendsfdf2>
c000a268:	83 c4 10             	add    esp,0x10
c000a26b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a26f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a273:	52                   	push   edx
c000a274:	50                   	push   eax
c000a275:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a279:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a27d:	e8 81 d1 01 00       	call   c0027403 <__adddf3>
c000a282:	59                   	pop    ecx
c000a283:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a287:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a28b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a291:	e8 e1 e1 01 00       	call   c0028477 <__extendsfdf2>
c000a296:	83 c4 10             	add    esp,0x10
c000a299:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a29d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ad:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2b1:	e8 ca d7 01 00       	call   c0027a80 <__muldf3>
c000a2b6:	83 c4 10             	add    esp,0x10
c000a2b9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2bd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2c1:	52                   	push   edx
c000a2c2:	50                   	push   eax
c000a2c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2cb:	e8 33 d1 01 00       	call   c0027403 <__adddf3>
c000a2d0:	5f                   	pop    edi
c000a2d1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a2d5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a2d9:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2df:	e8 93 e1 01 00       	call   c0028477 <__extendsfdf2>
c000a2e4:	83 c4 10             	add    esp,0x10
c000a2e7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2eb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2fb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ff:	e8 7c d7 01 00       	call   c0027a80 <__muldf3>
c000a304:	83 c4 10             	add    esp,0x10
c000a307:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a30b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a30f:	52                   	push   edx
c000a310:	50                   	push   eax
c000a311:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a315:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a319:	e8 e5 d0 01 00       	call   c0027403 <__adddf3>
c000a31e:	59                   	pop    ecx
c000a31f:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a323:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a327:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a32d:	e8 45 e1 01 00       	call   c0028477 <__extendsfdf2>
c000a332:	83 c4 10             	add    esp,0x10
c000a335:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a339:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a33d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a341:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a345:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a349:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a34d:	e8 2e d7 01 00       	call   c0027a80 <__muldf3>
c000a352:	83 c4 10             	add    esp,0x10
c000a355:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a359:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a35d:	52                   	push   edx
c000a35e:	50                   	push   eax
c000a35f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a363:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a367:	e8 97 d0 01 00       	call   c0027403 <__adddf3>
c000a36c:	5f                   	pop    edi
c000a36d:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a371:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a375:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a37b:	e8 f7 e0 01 00       	call   c0028477 <__extendsfdf2>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a387:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a38b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a38f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a393:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a397:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a39b:	e8 e0 d6 01 00       	call   c0027a80 <__muldf3>
c000a3a0:	83 c4 10             	add    esp,0x10
c000a3a3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a3a7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a3ab:	52                   	push   edx
c000a3ac:	50                   	push   eax
c000a3ad:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b5:	e8 49 d0 01 00       	call   c0027403 <__adddf3>
c000a3ba:	83 c4 10             	add    esp,0x10
c000a3bd:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a3c1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a3c5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a3c9:	85 db                	test   ebx,ebx
c000a3cb:	0f 8f 36 fe ff ff    	jg     c000a207 <calc_output_quad+0x2b1>
c000a3d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3e1:	e8 1d d0 01 00       	call   c0027403 <__adddf3>
c000a3e6:	83 c4 10             	add    esp,0x10
c000a3e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a401:	e8 7a d6 01 00       	call   c0027a80 <__muldf3>
c000a406:	59                   	pop    ecx
c000a407:	5b                   	pop    ebx
c000a408:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a40c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a410:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a414:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a418:	e8 36 df 01 00       	call   c0028353 <__truncdfsf2>
c000a41d:	83 c4 10             	add    esp,0x10
c000a420:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a427:	89 06                	mov    DWORD PTR [esi],eax
c000a429:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a42d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a431:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a435:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a439:	e8 c5 cf 01 00       	call   c0027403 <__adddf3>
c000a43e:	83 c4 10             	add    esp,0x10
c000a441:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a445:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a449:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a44d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a451:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a455:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a459:	e8 22 d6 01 00       	call   c0027a80 <__muldf3>
c000a45e:	5e                   	pop    esi
c000a45f:	5f                   	pop    edi
c000a460:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a464:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	e8 de de 01 00       	call   c0028353 <__truncdfsf2>
c000a475:	83 c4 10             	add    esp,0x10
c000a478:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a47f:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a482:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a486:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a48a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a48e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a492:	e8 6c cf 01 00       	call   c0027403 <__adddf3>
c000a497:	83 c4 10             	add    esp,0x10
c000a49a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a49e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4b2:	e8 c9 d5 01 00       	call   c0027a80 <__muldf3>
c000a4b7:	5d                   	pop    ebp
c000a4b8:	59                   	pop    ecx
c000a4b9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	e8 85 de 01 00       	call   c0028353 <__truncdfsf2>
c000a4ce:	83 c4 10             	add    esp,0x10
c000a4d1:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a4d8:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4db:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4df:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4eb:	e8 13 cf 01 00       	call   c0027403 <__adddf3>
c000a4f0:	83 c4 10             	add    esp,0x10
c000a4f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a503:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a507:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a50b:	e8 70 d5 01 00       	call   c0027a80 <__muldf3>
c000a510:	5b                   	pop    ebx
c000a511:	5e                   	pop    esi
c000a512:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a516:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a51a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a51e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a522:	e8 2c de 01 00       	call   c0028353 <__truncdfsf2>
c000a527:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a52e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a531:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a537:	5b                   	pop    ebx
c000a538:	5e                   	pop    esi
c000a539:	5f                   	pop    edi
c000a53a:	5d                   	pop    ebp
c000a53b:	c3                   	ret    

c000a53c <calc_output_hex>:
c000a53c:	55                   	push   ebp
c000a53d:	89 cd                	mov    ebp,ecx
c000a53f:	57                   	push   edi
c000a540:	56                   	push   esi
c000a541:	53                   	push   ebx
c000a542:	89 c3                	mov    ebx,eax
c000a544:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a54a:	89 14 24             	mov    DWORD PTR [esp],edx
c000a54d:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a554:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a55b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a55f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a563:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a566:	e8 6f f3 ff ff       	call   c00098da <int_to_fp>
c000a56b:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a56e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a572:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a575:	29 c8                	sub    eax,ecx
c000a577:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a57b:	99                   	cdq    
c000a57c:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a584:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a587:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a58f:	0f af f8             	imul   edi,eax
c000a592:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a595:	01 cf                	add    edi,ecx
c000a597:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a59b:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a59e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a5a2:	0f af c2             	imul   eax,edx
c000a5a5:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a5a9:	29 c1                	sub    ecx,eax
c000a5ab:	31 d2                	xor    edx,edx
c000a5ad:	31 c0                	xor    eax,eax
c000a5af:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a5ba:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a5be:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a5c2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a5c6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a5ca:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a5ce:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a5d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5d6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5da:	89 f8                	mov    eax,edi
c000a5dc:	e8 07 f3 ff ff       	call   c00098e8 <fp_to_double>
c000a5e1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5e9:	89 f8                	mov    eax,edi
c000a5eb:	e8 ee f2 ff ff       	call   c00098de <fp_to_int>
c000a5f0:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5f4:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5f7:	52                   	push   edx
c000a5f8:	52                   	push   edx
c000a5f9:	51                   	push   ecx
c000a5fa:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5fe:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a605:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a609:	e8 8a c7 01 00       	call   c0026d98 <__subsf3>
c000a60e:	89 04 24             	mov    DWORD PTR [esp],eax
c000a611:	e8 61 de 01 00       	call   c0028477 <__extendsfdf2>
c000a616:	83 c4 10             	add    esp,0x10
c000a619:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a61d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a625:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a629:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a62d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a631:	e8 4a d4 01 00       	call   c0027a80 <__muldf3>
c000a636:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a63a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a63e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a641:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a645:	e8 2d de 01 00       	call   c0028477 <__extendsfdf2>
c000a64a:	83 c4 10             	add    esp,0x10
c000a64d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a651:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a655:	52                   	push   edx
c000a656:	50                   	push   eax
c000a657:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65f:	e8 9f cd 01 00       	call   c0027403 <__adddf3>
c000a664:	59                   	pop    ecx
c000a665:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a669:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a66d:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a673:	e8 ff dd 01 00       	call   c0028477 <__extendsfdf2>
c000a678:	83 c4 10             	add    esp,0x10
c000a67b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a67f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a683:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a687:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a68b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a68f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a693:	e8 e8 d3 01 00       	call   c0027a80 <__muldf3>
c000a698:	83 c4 10             	add    esp,0x10
c000a69b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a69f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6a3:	52                   	push   edx
c000a6a4:	50                   	push   eax
c000a6a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6ad:	e8 51 cd 01 00       	call   c0027403 <__adddf3>
c000a6b2:	59                   	pop    ecx
c000a6b3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a6b7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a6bb:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a6c1:	e8 b1 dd 01 00       	call   c0028477 <__extendsfdf2>
c000a6c6:	83 c4 10             	add    esp,0x10
c000a6c9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6cd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6dd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6e1:	e8 9a d3 01 00       	call   c0027a80 <__muldf3>
c000a6e6:	83 c4 10             	add    esp,0x10
c000a6e9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6ed:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6f1:	52                   	push   edx
c000a6f2:	50                   	push   eax
c000a6f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6f7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6fb:	e8 03 cd 01 00       	call   c0027403 <__adddf3>
c000a700:	59                   	pop    ecx
c000a701:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a705:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a709:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a70f:	e8 63 dd 01 00       	call   c0028477 <__extendsfdf2>
c000a714:	83 c4 10             	add    esp,0x10
c000a717:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a71b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a71f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a723:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a727:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72f:	e8 4c d3 01 00       	call   c0027a80 <__muldf3>
c000a734:	83 c4 10             	add    esp,0x10
c000a737:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a73b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a73f:	52                   	push   edx
c000a740:	50                   	push   eax
c000a741:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a745:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a749:	e8 b5 cc 01 00       	call   c0027403 <__adddf3>
c000a74e:	59                   	pop    ecx
c000a74f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a753:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a757:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a75d:	e8 15 dd 01 00       	call   c0028477 <__extendsfdf2>
c000a762:	83 c4 10             	add    esp,0x10
c000a765:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a769:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a76d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a771:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a775:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a779:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a77d:	e8 fe d2 01 00       	call   c0027a80 <__muldf3>
c000a782:	83 c4 10             	add    esp,0x10
c000a785:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a789:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a78d:	52                   	push   edx
c000a78e:	50                   	push   eax
c000a78f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a793:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a797:	e8 67 cc 01 00       	call   c0027403 <__adddf3>
c000a79c:	59                   	pop    ecx
c000a79d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a7a1:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a7a5:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a7ab:	e8 c7 dc 01 00       	call   c0028477 <__extendsfdf2>
c000a7b0:	83 c4 10             	add    esp,0x10
c000a7b3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7b7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7c3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7c7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7cb:	e8 b0 d2 01 00       	call   c0027a80 <__muldf3>
c000a7d0:	83 c4 10             	add    esp,0x10
c000a7d3:	83 c6 18             	add    esi,0x18
c000a7d6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7da:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7de:	52                   	push   edx
c000a7df:	50                   	push   eax
c000a7e0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e8:	e8 16 cc 01 00       	call   c0027403 <__adddf3>
c000a7ed:	59                   	pop    ecx
c000a7ee:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7f2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7f6:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7fc:	e8 76 dc 01 00       	call   c0028477 <__extendsfdf2>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a808:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a80c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a810:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a814:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a818:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a81c:	e8 5f d2 01 00       	call   c0027a80 <__muldf3>
c000a821:	83 c4 10             	add    esp,0x10
c000a824:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a828:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a82c:	52                   	push   edx
c000a82d:	50                   	push   eax
c000a82e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a832:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a836:	e8 c8 cb 01 00       	call   c0027403 <__adddf3>
c000a83b:	83 c4 10             	add    esp,0x10
c000a83e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a842:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a846:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a849:	0f 89 8b fd ff ff    	jns    c000a5da <calc_output_hex+0x9e>
c000a84f:	31 f6                	xor    esi,esi
c000a851:	31 ff                	xor    edi,edi
c000a853:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a857:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a85a:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a85e:	29 e9                	sub    ecx,ebp
c000a860:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a864:	29 c8                	sub    eax,ecx
c000a866:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a869:	99                   	cdq    
c000a86a:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a86e:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a871:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a875:	0f af e8             	imul   ebp,eax
c000a878:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a87c:	40                   	inc    eax
c000a87d:	01 cd                	add    ebp,ecx
c000a87f:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a884:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a888:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a88c:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a890:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a893:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a897:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a89b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a89f:	89 e8                	mov    eax,ebp
c000a8a1:	e8 42 f0 ff ff       	call   c00098e8 <fp_to_double>
c000a8a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8ae:	89 e8                	mov    eax,ebp
c000a8b0:	e8 29 f0 ff ff       	call   c00098de <fp_to_int>
c000a8b5:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a8b9:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a8bc:	52                   	push   edx
c000a8bd:	52                   	push   edx
c000a8be:	51                   	push   ecx
c000a8bf:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a8c6:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a8cd:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a8d1:	e8 c2 c4 01 00       	call   c0026d98 <__subsf3>
c000a8d6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8d9:	e8 99 db 01 00       	call   c0028477 <__extendsfdf2>
c000a8de:	83 c4 10             	add    esp,0x10
c000a8e1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8f1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f9:	e8 82 d1 01 00       	call   c0027a80 <__muldf3>
c000a8fe:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a905:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a909:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a90c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a910:	e8 62 db 01 00       	call   c0028477 <__extendsfdf2>
c000a915:	83 c4 10             	add    esp,0x10
c000a918:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a91c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a920:	52                   	push   edx
c000a921:	50                   	push   eax
c000a922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a92a:	e8 d4 ca 01 00       	call   c0027403 <__adddf3>
c000a92f:	59                   	pop    ecx
c000a930:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a934:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a938:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a93e:	e8 34 db 01 00       	call   c0028477 <__extendsfdf2>
c000a943:	83 c4 10             	add    esp,0x10
c000a946:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a94a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a94e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a952:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a956:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95e:	e8 1d d1 01 00       	call   c0027a80 <__muldf3>
c000a963:	83 c4 10             	add    esp,0x10
c000a966:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a96a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a96e:	52                   	push   edx
c000a96f:	50                   	push   eax
c000a970:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a974:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a978:	e8 86 ca 01 00       	call   c0027403 <__adddf3>
c000a97d:	59                   	pop    ecx
c000a97e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a982:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a986:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a98c:	e8 e6 da 01 00       	call   c0028477 <__extendsfdf2>
c000a991:	83 c4 10             	add    esp,0x10
c000a994:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a998:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a99c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9a8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9ac:	e8 cf d0 01 00       	call   c0027a80 <__muldf3>
c000a9b1:	83 c4 10             	add    esp,0x10
c000a9b4:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9b8:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9bc:	52                   	push   edx
c000a9bd:	50                   	push   eax
c000a9be:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c2:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c6:	e8 38 ca 01 00       	call   c0027403 <__adddf3>
c000a9cb:	59                   	pop    ecx
c000a9cc:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a9d0:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a9d4:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9da:	e8 98 da 01 00       	call   c0028477 <__extendsfdf2>
c000a9df:	83 c4 10             	add    esp,0x10
c000a9e2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9e6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9f2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9f6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9fa:	e8 81 d0 01 00       	call   c0027a80 <__muldf3>
c000a9ff:	83 c4 10             	add    esp,0x10
c000aa02:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa06:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa0a:	52                   	push   edx
c000aa0b:	50                   	push   eax
c000aa0c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa10:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa14:	e8 ea c9 01 00       	call   c0027403 <__adddf3>
c000aa19:	59                   	pop    ecx
c000aa1a:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000aa1e:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000aa22:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000aa28:	e8 4a da 01 00       	call   c0028477 <__extendsfdf2>
c000aa2d:	83 c4 10             	add    esp,0x10
c000aa30:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa34:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa40:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa44:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa48:	e8 33 d0 01 00       	call   c0027a80 <__muldf3>
c000aa4d:	83 c4 10             	add    esp,0x10
c000aa50:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa54:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa58:	52                   	push   edx
c000aa59:	50                   	push   eax
c000aa5a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa5e:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa62:	e8 9c c9 01 00       	call   c0027403 <__adddf3>
c000aa67:	59                   	pop    ecx
c000aa68:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa6c:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa70:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa76:	e8 fc d9 01 00       	call   c0028477 <__extendsfdf2>
c000aa7b:	83 c4 10             	add    esp,0x10
c000aa7e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa82:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa92:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa96:	e8 e5 cf 01 00       	call   c0027a80 <__muldf3>
c000aa9b:	83 c4 10             	add    esp,0x10
c000aa9e:	83 eb 18             	sub    ebx,0x18
c000aaa1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aaa5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aaa9:	52                   	push   edx
c000aaaa:	50                   	push   eax
c000aaab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aaaf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aab3:	e8 4b c9 01 00       	call   c0027403 <__adddf3>
c000aab8:	59                   	pop    ecx
c000aab9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aabd:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aac1:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aac7:	e8 ab d9 01 00       	call   c0028477 <__extendsfdf2>
c000aacc:	83 c4 10             	add    esp,0x10
c000aacf:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aad3:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aad7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadf:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae3:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae7:	e8 94 cf 01 00       	call   c0027a80 <__muldf3>
c000aaec:	83 c4 10             	add    esp,0x10
c000aaef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aaf3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aaf7:	52                   	push   edx
c000aaf8:	50                   	push   eax
c000aaf9:	57                   	push   edi
c000aafa:	56                   	push   esi
c000aafb:	e8 03 c9 01 00       	call   c0027403 <__adddf3>
c000ab00:	83 c4 10             	add    esp,0x10
c000ab03:	89 c6                	mov    esi,eax
c000ab05:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000ab08:	89 d7                	mov    edi,edx
c000ab0a:	85 ed                	test   ebp,ebp
c000ab0c:	0f 8f 8d fd ff ff    	jg     c000a89f <calc_output_hex+0x363>
c000ab12:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab16:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab22:	e8 dc c8 01 00       	call   c0027403 <__adddf3>
c000ab27:	83 c4 10             	add    esp,0x10
c000ab2a:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab2d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab31:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab35:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab3d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab41:	e8 3a cf 01 00       	call   c0027a80 <__muldf3>
c000ab46:	59                   	pop    ecx
c000ab47:	5b                   	pop    ebx
c000ab48:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab4c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab50:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab54:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab58:	e8 f6 d7 01 00       	call   c0028353 <__truncdfsf2>
c000ab5d:	83 c4 10             	add    esp,0x10
c000ab60:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab67:	89 03                	mov    DWORD PTR [ebx],eax
c000ab69:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab6d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab79:	e8 85 c8 01 00       	call   c0027403 <__adddf3>
c000ab7e:	83 c4 10             	add    esp,0x10
c000ab81:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab84:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab98:	e8 e3 ce 01 00       	call   c0027a80 <__muldf3>
c000ab9d:	5d                   	pop    ebp
c000ab9e:	59                   	pop    ecx
c000ab9f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aba3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aba7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaf:	e8 9f d7 01 00       	call   c0028353 <__truncdfsf2>
c000abb4:	83 c4 10             	add    esp,0x10
c000abb7:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abbe:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000abc1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc5:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abcd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abd1:	e8 2d c8 01 00       	call   c0027403 <__adddf3>
c000abd6:	83 c4 10             	add    esp,0x10
c000abd9:	89 04 24             	mov    DWORD PTR [esp],eax
c000abdc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abe0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf0:	e8 8b ce 01 00       	call   c0027a80 <__muldf3>
c000abf5:	5b                   	pop    ebx
c000abf6:	5d                   	pop    ebp
c000abf7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abfb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac07:	e8 47 d7 01 00       	call   c0028353 <__truncdfsf2>
c000ac0c:	83 c4 10             	add    esp,0x10
c000ac0f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac16:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ac19:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac1d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac21:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac25:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac29:	e8 d5 c7 01 00       	call   c0027403 <__adddf3>
c000ac2e:	83 c4 10             	add    esp,0x10
c000ac31:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac34:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac38:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac3c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac48:	e8 33 ce 01 00       	call   c0027a80 <__muldf3>
c000ac4d:	59                   	pop    ecx
c000ac4e:	5b                   	pop    ebx
c000ac4f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac53:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac57:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5f:	e8 ef d6 01 00       	call   c0028353 <__truncdfsf2>
c000ac64:	83 c4 10             	add    esp,0x10
c000ac67:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac6e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac79:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac7d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac81:	e8 7d c7 01 00       	call   c0027403 <__adddf3>
c000ac86:	83 c4 10             	add    esp,0x10
c000ac89:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac8c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aca0:	e8 db cd 01 00       	call   c0027a80 <__muldf3>
c000aca5:	5d                   	pop    ebp
c000aca6:	59                   	pop    ecx
c000aca7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acaf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb7:	e8 97 d6 01 00       	call   c0028353 <__truncdfsf2>
c000acbc:	83 c4 10             	add    esp,0x10
c000acbf:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000acc6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000acc9:	57                   	push   edi
c000acca:	56                   	push   esi
c000accb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000accf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acd3:	e8 2b c7 01 00       	call   c0027403 <__adddf3>
c000acd8:	83 c4 10             	add    esp,0x10
c000acdb:	89 04 24             	mov    DWORD PTR [esp],eax
c000acde:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ace2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ace6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acf2:	e8 89 cd 01 00       	call   c0027a80 <__muldf3>
c000acf7:	5b                   	pop    ebx
c000acf8:	5e                   	pop    esi
c000acf9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acfd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad01:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad09:	e8 45 d6 01 00       	call   c0028353 <__truncdfsf2>
c000ad0e:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000ad15:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000ad18:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ad1e:	5b                   	pop    ebx
c000ad1f:	5e                   	pop    esi
c000ad20:	5f                   	pop    edi
c000ad21:	5d                   	pop    ebp
c000ad22:	c3                   	ret    

c000ad23 <sinc_reset>:
c000ad23:	56                   	push   esi
c000ad24:	53                   	push   ebx
c000ad25:	51                   	push   ecx
c000ad26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad2a:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ad2d:	85 db                	test   ebx,ebx
c000ad2f:	74 59                	je     c000ad8a <sinc_reset+0x67>
c000ad31:	31 d2                	xor    edx,edx
c000ad33:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad3a:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad3d:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad40:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad47:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad4e:	31 c0                	xor    eax,eax
c000ad50:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad56:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad59:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad5c:	52                   	push   edx
c000ad5d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad60:	c1 e0 02             	shl    eax,0x2
c000ad63:	50                   	push   eax
c000ad64:	6a 00                	push   0x0
c000ad66:	56                   	push   esi
c000ad67:	e8 0c 5a ff ff       	call   c0000778 <memset>
c000ad6c:	83 c4 0c             	add    esp,0xc
c000ad6f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad72:	c1 e0 02             	shl    eax,0x2
c000ad75:	50                   	push   eax
c000ad76:	68 aa 00 00 00       	push   0xaa
c000ad7b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad7e:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad81:	50                   	push   eax
c000ad82:	e8 f1 59 ff ff       	call   c0000778 <memset>
c000ad87:	83 c4 10             	add    esp,0x10
c000ad8a:	58                   	pop    eax
c000ad8b:	5b                   	pop    ebx
c000ad8c:	5e                   	pop    esi
c000ad8d:	c3                   	ret    

c000ad8e <calc_output_multi>:
c000ad8e:	55                   	push   ebp
c000ad8f:	57                   	push   edi
c000ad90:	56                   	push   esi
c000ad91:	89 c6                	mov    esi,eax
c000ad93:	53                   	push   ebx
c000ad94:	83 ec 4c             	sub    esp,0x4c
c000ad97:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad9b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad9f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ada3:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ada7:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000adab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000adaf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000adb3:	8d 46 44             	lea    eax,[esi+0x44]
c000adb6:	89 04 24             	mov    DWORD PTR [esp],eax
c000adb9:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000adbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000adc3:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000adc6:	e8 0f eb ff ff       	call   c00098da <int_to_fp>
c000adcb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000adce:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000add2:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000add6:	99                   	cdq    
c000add7:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000addb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000addf:	0f af d0             	imul   edx,eax
c000ade2:	0f af c3             	imul   eax,ebx
c000ade5:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000ade9:	29 c1                	sub    ecx,eax
c000adeb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adef:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adf3:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adfa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adfe:	57                   	push   edi
c000adff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae03:	6a 00                	push   0x0
c000ae05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae09:	e8 6a 59 ff ff       	call   c0000778 <memset>
c000ae0e:	83 c4 10             	add    esp,0x10
c000ae11:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae15:	89 df                	mov    edi,ebx
c000ae17:	e8 cc ea ff ff       	call   c00098e8 <fp_to_double>
c000ae1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae24:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae28:	e8 b1 ea ff ff       	call   c00098de <fp_to_int>
c000ae2d:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ae30:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ae33:	51                   	push   ecx
c000ae34:	51                   	push   ecx
c000ae35:	55                   	push   ebp
c000ae36:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae3a:	e8 59 bf 01 00       	call   c0026d98 <__subsf3>
c000ae3f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae42:	e8 30 d6 01 00       	call   c0028477 <__extendsfdf2>
c000ae47:	83 c4 10             	add    esp,0x10
c000ae4a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae4e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae56:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae5a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae5e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae62:	e8 19 cc 01 00       	call   c0027a80 <__muldf3>
c000ae67:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae6e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae72:	e8 00 d6 01 00       	call   c0028477 <__extendsfdf2>
c000ae77:	83 c4 10             	add    esp,0x10
c000ae7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae82:	52                   	push   edx
c000ae83:	50                   	push   eax
c000ae84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae8c:	e8 72 c5 01 00       	call   c0027403 <__adddf3>
c000ae91:	83 c4 10             	add    esp,0x10
c000ae94:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae98:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae9c:	89 f8                	mov    eax,edi
c000ae9e:	b9 08 00 00 00       	mov    ecx,0x8
c000aea3:	99                   	cdq    
c000aea4:	f7 f9                	idiv   ecx
c000aea6:	4a                   	dec    edx
c000aea7:	83 fa 06             	cmp    edx,0x6
c000aeaa:	77 07                	ja     c000aeb3 <calc_output_multi+0x125>
c000aeac:	ff 24 95 84 9c 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd637c]
c000aeb3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aeb6:	4f                   	dec    edi
c000aeb7:	83 ec 0c             	sub    esp,0xc
c000aeba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aebd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aec1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aec8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aecc:	e8 a6 d5 01 00       	call   c0028477 <__extendsfdf2>
c000aed1:	83 c4 10             	add    esp,0x10
c000aed4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aed8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aedc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aee8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeec:	e8 8f cb 01 00       	call   c0027a80 <__muldf3>
c000aef1:	83 c4 10             	add    esp,0x10
c000aef4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aef8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aefc:	52                   	push   edx
c000aefd:	50                   	push   eax
c000aefe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af01:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af04:	e8 fa c4 01 00       	call   c0027403 <__adddf3>
c000af09:	83 c4 10             	add    esp,0x10
c000af0c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af0f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af12:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af15:	4f                   	dec    edi
c000af16:	83 ec 0c             	sub    esp,0xc
c000af19:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af20:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af27:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af2b:	e8 47 d5 01 00       	call   c0028477 <__extendsfdf2>
c000af30:	83 c4 10             	add    esp,0x10
c000af33:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af37:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af43:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af47:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af4b:	e8 30 cb 01 00       	call   c0027a80 <__muldf3>
c000af50:	83 c4 10             	add    esp,0x10
c000af53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af57:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af5b:	52                   	push   edx
c000af5c:	50                   	push   eax
c000af5d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af60:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af63:	e8 9b c4 01 00       	call   c0027403 <__adddf3>
c000af68:	83 c4 10             	add    esp,0x10
c000af6b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af6e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af71:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af74:	4f                   	dec    edi
c000af75:	83 ec 0c             	sub    esp,0xc
c000af78:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af7f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af86:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af8a:	e8 e8 d4 01 00       	call   c0028477 <__extendsfdf2>
c000af8f:	83 c4 10             	add    esp,0x10
c000af92:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af96:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afa2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afa6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afaa:	e8 d1 ca 01 00       	call   c0027a80 <__muldf3>
c000afaf:	83 c4 10             	add    esp,0x10
c000afb2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afb6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afba:	52                   	push   edx
c000afbb:	50                   	push   eax
c000afbc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afbf:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afc2:	e8 3c c4 01 00       	call   c0027403 <__adddf3>
c000afc7:	83 c4 10             	add    esp,0x10
c000afca:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000afcd:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000afd0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000afd3:	4f                   	dec    edi
c000afd4:	83 ec 0c             	sub    esp,0xc
c000afd7:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afda:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afde:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afe5:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afe9:	e8 89 d4 01 00       	call   c0028477 <__extendsfdf2>
c000afee:	83 c4 10             	add    esp,0x10
c000aff1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aff5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aff9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000affd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b001:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b005:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b009:	e8 72 ca 01 00       	call   c0027a80 <__muldf3>
c000b00e:	83 c4 10             	add    esp,0x10
c000b011:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b015:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b019:	52                   	push   edx
c000b01a:	50                   	push   eax
c000b01b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b01e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b021:	e8 dd c3 01 00       	call   c0027403 <__adddf3>
c000b026:	83 c4 10             	add    esp,0x10
c000b029:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b02c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b02f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b032:	4f                   	dec    edi
c000b033:	83 ec 0c             	sub    esp,0xc
c000b036:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b039:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b03d:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b044:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b048:	e8 2a d4 01 00       	call   c0028477 <__extendsfdf2>
c000b04d:	83 c4 10             	add    esp,0x10
c000b050:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b054:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b058:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b060:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b064:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b068:	e8 13 ca 01 00       	call   c0027a80 <__muldf3>
c000b06d:	83 c4 10             	add    esp,0x10
c000b070:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b074:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b078:	52                   	push   edx
c000b079:	50                   	push   eax
c000b07a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b07d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b080:	e8 7e c3 01 00       	call   c0027403 <__adddf3>
c000b085:	83 c4 10             	add    esp,0x10
c000b088:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b08b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b08e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b091:	4f                   	dec    edi
c000b092:	83 ec 0c             	sub    esp,0xc
c000b095:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b098:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b09c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0a3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0a7:	e8 cb d3 01 00       	call   c0028477 <__extendsfdf2>
c000b0ac:	83 c4 10             	add    esp,0x10
c000b0af:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0b3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c7:	e8 b4 c9 01 00       	call   c0027a80 <__muldf3>
c000b0cc:	83 c4 10             	add    esp,0x10
c000b0cf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0d7:	52                   	push   edx
c000b0d8:	50                   	push   eax
c000b0d9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0dc:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0df:	e8 1f c3 01 00       	call   c0027403 <__adddf3>
c000b0e4:	83 c4 10             	add    esp,0x10
c000b0e7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0ea:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0ed:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0f0:	4f                   	dec    edi
c000b0f1:	83 ec 0c             	sub    esp,0xc
c000b0f4:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0fb:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b102:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b106:	e8 6c d3 01 00       	call   c0028477 <__extendsfdf2>
c000b10b:	83 c4 10             	add    esp,0x10
c000b10e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b112:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b116:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b122:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b126:	e8 55 c9 01 00       	call   c0027a80 <__muldf3>
c000b12b:	83 c4 10             	add    esp,0x10
c000b12e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b132:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b136:	52                   	push   edx
c000b137:	50                   	push   eax
c000b138:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b13b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b13e:	e8 c0 c2 01 00       	call   c0027403 <__adddf3>
c000b143:	83 c4 10             	add    esp,0x10
c000b146:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b149:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b14c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b14f:	4f                   	dec    edi
c000b150:	83 ec 0c             	sub    esp,0xc
c000b153:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b156:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b15a:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b161:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b165:	e8 0d d3 01 00       	call   c0028477 <__extendsfdf2>
c000b16a:	83 c4 10             	add    esp,0x10
c000b16d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b171:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b175:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b179:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b17d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b181:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b185:	e8 f6 c8 01 00       	call   c0027a80 <__muldf3>
c000b18a:	83 c4 10             	add    esp,0x10
c000b18d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b191:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b195:	52                   	push   edx
c000b196:	50                   	push   eax
c000b197:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b19a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b19d:	e8 61 c2 01 00       	call   c0027403 <__adddf3>
c000b1a2:	83 c4 10             	add    esp,0x10
c000b1a5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1a8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1ab:	85 ff                	test   edi,edi
c000b1ad:	0f 8f e9 fc ff ff    	jg     c000ae9c <calc_output_multi+0x10e>
c000b1b3:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b1b7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b1bb:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b1bf:	0f 89 4c fc ff ff    	jns    c000ae11 <calc_output_multi+0x83>
c000b1c5:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b1c9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b1cd:	29 c8                	sub    eax,ecx
c000b1cf:	99                   	cdq    
c000b1d0:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b1d4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b1d8:	0f af d0             	imul   edx,eax
c000b1db:	40                   	inc    eax
c000b1dc:	01 d1                	add    ecx,edx
c000b1de:	0f af c3             	imul   eax,ebx
c000b1e1:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1e5:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1ec:	55                   	push   ebp
c000b1ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1f1:	6a 00                	push   0x0
c000b1f3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1f7:	e8 7c 55 ff ff       	call   c0000778 <memset>
c000b1fc:	83 c4 10             	add    esp,0x10
c000b1ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b203:	e8 e0 e6 ff ff       	call   c00098e8 <fp_to_double>
c000b208:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b20c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b210:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b214:	e8 c5 e6 ff ff       	call   c00098de <fp_to_int>
c000b219:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b21c:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b21f:	57                   	push   edi
c000b220:	57                   	push   edi
c000b221:	89 df                	mov    edi,ebx
c000b223:	55                   	push   ebp
c000b224:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b228:	e8 6b bb 01 00       	call   c0026d98 <__subsf3>
c000b22d:	89 04 24             	mov    DWORD PTR [esp],eax
c000b230:	e8 42 d2 01 00       	call   c0028477 <__extendsfdf2>
c000b235:	83 c4 10             	add    esp,0x10
c000b238:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b23c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b240:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b244:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b248:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b24c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b250:	e8 2b c8 01 00       	call   c0027a80 <__muldf3>
c000b255:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b258:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b25c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b260:	e8 12 d2 01 00       	call   c0028477 <__extendsfdf2>
c000b265:	83 c4 10             	add    esp,0x10
c000b268:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b26c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b270:	52                   	push   edx
c000b271:	50                   	push   eax
c000b272:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b276:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b27a:	e8 84 c1 01 00       	call   c0027403 <__adddf3>
c000b27f:	83 c4 10             	add    esp,0x10
c000b282:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b286:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b28a:	89 f8                	mov    eax,edi
c000b28c:	b9 08 00 00 00       	mov    ecx,0x8
c000b291:	99                   	cdq    
c000b292:	f7 f9                	idiv   ecx
c000b294:	4a                   	dec    edx
c000b295:	83 fa 06             	cmp    edx,0x6
c000b298:	77 07                	ja     c000b2a1 <calc_output_multi+0x513>
c000b29a:	ff 24 95 a0 9c 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6360]
c000b2a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2a5:	4f                   	dec    edi
c000b2a6:	83 ec 0c             	sub    esp,0xc
c000b2a9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2b0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2b7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2bb:	e8 b7 d1 01 00       	call   c0028477 <__extendsfdf2>
c000b2c0:	83 c4 10             	add    esp,0x10
c000b2c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2d7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2db:	e8 a0 c7 01 00       	call   c0027a80 <__muldf3>
c000b2e0:	83 c4 10             	add    esp,0x10
c000b2e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2eb:	52                   	push   edx
c000b2ec:	50                   	push   eax
c000b2ed:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2f0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2f3:	e8 0b c1 01 00       	call   c0027403 <__adddf3>
c000b2f8:	83 c4 10             	add    esp,0x10
c000b2fb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2fe:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b301:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b305:	4f                   	dec    edi
c000b306:	83 ec 0c             	sub    esp,0xc
c000b309:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b30c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b310:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b317:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b31b:	e8 57 d1 01 00       	call   c0028477 <__extendsfdf2>
c000b320:	83 c4 10             	add    esp,0x10
c000b323:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b327:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b32b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b32f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b333:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b337:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b33b:	e8 40 c7 01 00       	call   c0027a80 <__muldf3>
c000b340:	83 c4 10             	add    esp,0x10
c000b343:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b347:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b34b:	52                   	push   edx
c000b34c:	50                   	push   eax
c000b34d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b350:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b353:	e8 ab c0 01 00       	call   c0027403 <__adddf3>
c000b358:	83 c4 10             	add    esp,0x10
c000b35b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b35e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b361:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b365:	4f                   	dec    edi
c000b366:	83 ec 0c             	sub    esp,0xc
c000b369:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b36c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b370:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b377:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b37b:	e8 f7 d0 01 00       	call   c0028477 <__extendsfdf2>
c000b380:	83 c4 10             	add    esp,0x10
c000b383:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b387:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b38b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b38f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b393:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b397:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b39b:	e8 e0 c6 01 00       	call   c0027a80 <__muldf3>
c000b3a0:	83 c4 10             	add    esp,0x10
c000b3a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3ab:	52                   	push   edx
c000b3ac:	50                   	push   eax
c000b3ad:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3b0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3b3:	e8 4b c0 01 00       	call   c0027403 <__adddf3>
c000b3b8:	83 c4 10             	add    esp,0x10
c000b3bb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3be:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3c5:	4f                   	dec    edi
c000b3c6:	83 ec 0c             	sub    esp,0xc
c000b3c9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3d0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3d7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3db:	e8 97 d0 01 00       	call   c0028477 <__extendsfdf2>
c000b3e0:	83 c4 10             	add    esp,0x10
c000b3e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3fb:	e8 80 c6 01 00       	call   c0027a80 <__muldf3>
c000b400:	83 c4 10             	add    esp,0x10
c000b403:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b407:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b40b:	52                   	push   edx
c000b40c:	50                   	push   eax
c000b40d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b410:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b413:	e8 eb bf 01 00       	call   c0027403 <__adddf3>
c000b418:	83 c4 10             	add    esp,0x10
c000b41b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b41e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b421:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b425:	4f                   	dec    edi
c000b426:	83 ec 0c             	sub    esp,0xc
c000b429:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b42c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b430:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b437:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b43b:	e8 37 d0 01 00       	call   c0028477 <__extendsfdf2>
c000b440:	83 c4 10             	add    esp,0x10
c000b443:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b447:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b44b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b44f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b453:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b457:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b45b:	e8 20 c6 01 00       	call   c0027a80 <__muldf3>
c000b460:	83 c4 10             	add    esp,0x10
c000b463:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b467:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b46b:	52                   	push   edx
c000b46c:	50                   	push   eax
c000b46d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b470:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b473:	e8 8b bf 01 00       	call   c0027403 <__adddf3>
c000b478:	83 c4 10             	add    esp,0x10
c000b47b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b47e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b481:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b485:	4f                   	dec    edi
c000b486:	83 ec 0c             	sub    esp,0xc
c000b489:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b48c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b490:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b497:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b49b:	e8 d7 cf 01 00       	call   c0028477 <__extendsfdf2>
c000b4a0:	83 c4 10             	add    esp,0x10
c000b4a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4b7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4bb:	e8 c0 c5 01 00       	call   c0027a80 <__muldf3>
c000b4c0:	83 c4 10             	add    esp,0x10
c000b4c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4cb:	52                   	push   edx
c000b4cc:	50                   	push   eax
c000b4cd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4d0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4d3:	e8 2b bf 01 00       	call   c0027403 <__adddf3>
c000b4d8:	83 c4 10             	add    esp,0x10
c000b4db:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4de:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4e5:	4f                   	dec    edi
c000b4e6:	83 ec 0c             	sub    esp,0xc
c000b4e9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4f0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4f7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4fb:	e8 77 cf 01 00       	call   c0028477 <__extendsfdf2>
c000b500:	83 c4 10             	add    esp,0x10
c000b503:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b507:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b50b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b50f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b513:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b517:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b51b:	e8 60 c5 01 00       	call   c0027a80 <__muldf3>
c000b520:	83 c4 10             	add    esp,0x10
c000b523:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b527:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b52b:	52                   	push   edx
c000b52c:	50                   	push   eax
c000b52d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b530:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b533:	e8 cb be 01 00       	call   c0027403 <__adddf3>
c000b538:	83 c4 10             	add    esp,0x10
c000b53b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b53e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b541:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b545:	4f                   	dec    edi
c000b546:	83 ec 0c             	sub    esp,0xc
c000b549:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b54c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b550:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b557:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b55b:	e8 17 cf 01 00       	call   c0028477 <__extendsfdf2>
c000b560:	83 c4 10             	add    esp,0x10
c000b563:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b567:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b56b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b56f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b573:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b577:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b57b:	e8 00 c5 01 00       	call   c0027a80 <__muldf3>
c000b580:	83 c4 10             	add    esp,0x10
c000b583:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b587:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b58b:	52                   	push   edx
c000b58c:	50                   	push   eax
c000b58d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b590:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b593:	e8 6b be 01 00       	call   c0027403 <__adddf3>
c000b598:	83 c4 10             	add    esp,0x10
c000b59b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b59e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b5a1:	85 ff                	test   edi,edi
c000b5a3:	0f 8f e1 fc ff ff    	jg     c000b28a <calc_output_multi+0x4fc>
c000b5a9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b5ad:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b5b1:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b5b5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b5ba:	0f 8f 3f fc ff ff    	jg     c000b1ff <calc_output_multi+0x471>
c000b5c0:	be 08 00 00 00       	mov    esi,0x8
c000b5c5:	89 d8                	mov    eax,ebx
c000b5c7:	99                   	cdq    
c000b5c8:	f7 fe                	idiv   esi
c000b5ca:	4a                   	dec    edx
c000b5cb:	83 fa 06             	cmp    edx,0x6
c000b5ce:	77 07                	ja     c000b5d7 <calc_output_multi+0x849>
c000b5d0:	ff 24 95 bc 9c 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6344]
c000b5d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5db:	4b                   	dec    ebx
c000b5dc:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5e0:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5e7:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5eb:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5ee:	e8 10 be 01 00       	call   c0027403 <__adddf3>
c000b5f3:	83 c4 10             	add    esp,0x10
c000b5f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b602:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b606:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60e:	e8 6d c4 01 00       	call   c0027a80 <__muldf3>
c000b613:	5d                   	pop    ebp
c000b614:	59                   	pop    ecx
c000b615:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b619:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b61d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b625:	e8 29 cd 01 00       	call   c0028353 <__truncdfsf2>
c000b62a:	83 c4 10             	add    esp,0x10
c000b62d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b631:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b634:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b638:	4b                   	dec    ebx
c000b639:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b63d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b640:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b644:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b648:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b64b:	e8 b3 bd 01 00       	call   c0027403 <__adddf3>
c000b650:	83 c4 10             	add    esp,0x10
c000b653:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b657:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b65f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b663:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b667:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b66b:	e8 10 c4 01 00       	call   c0027a80 <__muldf3>
c000b670:	59                   	pop    ecx
c000b671:	5f                   	pop    edi
c000b672:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b676:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b67a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b67e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b682:	e8 cc cc 01 00       	call   c0028353 <__truncdfsf2>
c000b687:	83 c4 10             	add    esp,0x10
c000b68a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b68e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b691:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b695:	4b                   	dec    ebx
c000b696:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b69a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b69d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6a1:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6a5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6a8:	e8 56 bd 01 00       	call   c0027403 <__adddf3>
c000b6ad:	83 c4 10             	add    esp,0x10
c000b6b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6b4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c8:	e8 b3 c3 01 00       	call   c0027a80 <__muldf3>
c000b6cd:	5f                   	pop    edi
c000b6ce:	5d                   	pop    ebp
c000b6cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6df:	e8 6f cc 01 00       	call   c0028353 <__truncdfsf2>
c000b6e4:	83 c4 10             	add    esp,0x10
c000b6e7:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6eb:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6f2:	4b                   	dec    ebx
c000b6f3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6f7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6fe:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b702:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b705:	e8 f9 bc 01 00       	call   c0027403 <__adddf3>
c000b70a:	83 c4 10             	add    esp,0x10
c000b70d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b711:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b715:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b719:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b71d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b721:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b725:	e8 56 c3 01 00       	call   c0027a80 <__muldf3>
c000b72a:	5d                   	pop    ebp
c000b72b:	59                   	pop    ecx
c000b72c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b730:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b734:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b738:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b73c:	e8 12 cc 01 00       	call   c0028353 <__truncdfsf2>
c000b741:	83 c4 10             	add    esp,0x10
c000b744:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b748:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b74b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b74f:	4b                   	dec    ebx
c000b750:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b754:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b757:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b75b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b75f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b762:	e8 9c bc 01 00       	call   c0027403 <__adddf3>
c000b767:	83 c4 10             	add    esp,0x10
c000b76a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b76e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b772:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b782:	e8 f9 c2 01 00       	call   c0027a80 <__muldf3>
c000b787:	59                   	pop    ecx
c000b788:	5f                   	pop    edi
c000b789:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b78d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b791:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b799:	e8 b5 cb 01 00       	call   c0028353 <__truncdfsf2>
c000b79e:	83 c4 10             	add    esp,0x10
c000b7a1:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7a5:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7ac:	4b                   	dec    ebx
c000b7ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7b8:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7bc:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7bf:	e8 3f bc 01 00       	call   c0027403 <__adddf3>
c000b7c4:	83 c4 10             	add    esp,0x10
c000b7c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7df:	e8 9c c2 01 00       	call   c0027a80 <__muldf3>
c000b7e4:	5f                   	pop    edi
c000b7e5:	5d                   	pop    ebp
c000b7e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7ea:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f6:	e8 58 cb 01 00       	call   c0028353 <__truncdfsf2>
c000b7fb:	83 c4 10             	add    esp,0x10
c000b7fe:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b802:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b805:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b809:	4b                   	dec    ebx
c000b80a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b80e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b811:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b815:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b819:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b81c:	e8 e2 bb 01 00       	call   c0027403 <__adddf3>
c000b821:	83 c4 10             	add    esp,0x10
c000b824:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b828:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b82c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b830:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b834:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b838:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b83c:	e8 3f c2 01 00       	call   c0027a80 <__muldf3>
c000b841:	5d                   	pop    ebp
c000b842:	59                   	pop    ecx
c000b843:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b847:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b84b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b84f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b853:	e8 fb ca 01 00       	call   c0028353 <__truncdfsf2>
c000b858:	83 c4 10             	add    esp,0x10
c000b85b:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b85f:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b862:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b866:	4b                   	dec    ebx
c000b867:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b86b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b86e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b872:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b876:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b879:	e8 85 bb 01 00       	call   c0027403 <__adddf3>
c000b87e:	83 c4 10             	add    esp,0x10
c000b881:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b885:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b889:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b88d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b891:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b895:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b899:	e8 e2 c1 01 00       	call   c0027a80 <__muldf3>
c000b89e:	59                   	pop    ecx
c000b89f:	5f                   	pop    edi
c000b8a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8a4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b8a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8b0:	e8 9e ca 01 00       	call   c0028353 <__truncdfsf2>
c000b8b5:	83 c4 10             	add    esp,0x10
c000b8b8:	85 db                	test   ebx,ebx
c000b8ba:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b8be:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b8c1:	0f 8f fe fc ff ff    	jg     c000b5c5 <calc_output_multi+0x837>
c000b8c7:	83 c4 4c             	add    esp,0x4c
c000b8ca:	5b                   	pop    ebx
c000b8cb:	5e                   	pop    esi
c000b8cc:	5f                   	pop    edi
c000b8cd:	5d                   	pop    ebp
c000b8ce:	c3                   	ret    

c000b8cf <double_to_fp>:
c000b8cf:	83 ec 0c             	sub    esp,0xc
c000b8d2:	68 00 00 b0 40       	push   0x40b00000
c000b8d7:	6a 00                	push   0x0
c000b8d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8e1:	e8 9a c1 01 00       	call   c0027a80 <__muldf3>
c000b8e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8ee:	83 c4 1c             	add    esp,0x1c
c000b8f1:	e9 0a cc 01 00       	jmp    c0028500 <lrint>

c000b8f6 <prepare_data>:
c000b8f6:	55                   	push   ebp
c000b8f7:	57                   	push   edi
c000b8f8:	56                   	push   esi
c000b8f9:	53                   	push   ebx
c000b8fa:	83 ec 1c             	sub    esp,0x1c
c000b8fd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b901:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b905:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b909:	0f 89 57 01 00 00    	jns    c000ba66 <prepare_data+0x170>
c000b90f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b912:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b915:	85 d2                	test   edx,edx
c000b917:	75 0d                	jne    c000b926 <prepare_data+0x30>
c000b919:	8d 14 36             	lea    edx,[esi+esi*1]
c000b91c:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b91f:	29 d0                	sub    eax,edx
c000b921:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b924:	eb 44                	jmp    c000b96a <prepare_data+0x74>
c000b926:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b929:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b92c:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b92f:	39 c1                	cmp    ecx,eax
c000b931:	7d 04                	jge    c000b937 <prepare_data+0x41>
c000b933:	29 d0                	sub    eax,edx
c000b935:	eb 2d                	jmp    c000b964 <prepare_data+0x6e>
c000b937:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b93d:	29 d7                	sub    edi,edx
c000b93f:	01 f7                	add    edi,esi
c000b941:	51                   	push   ecx
c000b942:	29 f2                	sub    edx,esi
c000b944:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b94b:	8d 14 90             	lea    edx,[eax+edx*4]
c000b94e:	51                   	push   ecx
c000b94f:	52                   	push   edx
c000b950:	50                   	push   eax
c000b951:	e8 26 4d ff ff       	call   c000067c <memmove>
c000b956:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b959:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b95c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b95f:	29 f0                	sub    eax,esi
c000b961:	83 c4 10             	add    esp,0x10
c000b964:	29 f0                	sub    eax,esi
c000b966:	79 02                	jns    c000b96a <prepare_data+0x74>
c000b968:	31 c0                	xor    eax,eax
c000b96a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b96d:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b970:	29 ef                	sub    edi,ebp
c000b972:	39 c7                	cmp    edi,eax
c000b974:	7e 02                	jle    c000b978 <prepare_data+0x82>
c000b976:	89 c7                	mov    edi,eax
c000b978:	89 f8                	mov    eax,edi
c000b97a:	99                   	cdq    
c000b97b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b97e:	b8 15 00 00 00       	mov    eax,0x15
c000b983:	29 d7                	sub    edi,edx
c000b985:	0f 88 dd 00 00 00    	js     c000ba68 <prepare_data+0x172>
c000b98b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b98e:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b991:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b994:	0f 8f ce 00 00 00    	jg     c000ba68 <prepare_data+0x172>
c000b99a:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b9a0:	50                   	push   eax
c000b9a1:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9a8:	50                   	push   eax
c000b9a9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b9ad:	8b 00                	mov    eax,DWORD PTR [eax]
c000b9af:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b9b2:	50                   	push   eax
c000b9b3:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9b6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b9ba:	50                   	push   eax
c000b9bb:	e8 84 4d ff ff       	call   c0000744 <memcpy>
c000b9c0:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b9c3:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b9c6:	01 fd                	add    ebp,edi
c000b9c8:	01 f9                	add    ecx,edi
c000b9ca:	83 c4 10             	add    esp,0x10
c000b9cd:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b9d0:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b9d3:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b9d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9da:	0f 85 86 00 00 00    	jne    c000ba66 <prepare_data+0x170>
c000b9e0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9e3:	89 e8                	mov    eax,ebp
c000b9e5:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9e8:	29 c8                	sub    eax,ecx
c000b9ea:	39 f8                	cmp    eax,edi
c000b9ec:	7d 78                	jge    c000ba66 <prepare_data+0x170>
c000b9ee:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9f2:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9f6:	74 6e                	je     c000ba66 <prepare_data+0x170>
c000b9f8:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9fb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9ff:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000ba02:	29 ef                	sub    edi,ebp
c000ba04:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000ba08:	7c 29                	jl     c000ba33 <prepare_data+0x13d>
c000ba0a:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0d:	29 f1                	sub    ecx,esi
c000ba0f:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000ba16:	55                   	push   ebp
c000ba17:	50                   	push   eax
c000ba18:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000ba1b:	50                   	push   eax
c000ba1c:	52                   	push   edx
c000ba1d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba21:	e8 56 4c ff ff       	call   c000067c <memmove>
c000ba26:	83 c4 10             	add    esp,0x10
c000ba29:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000ba2c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000ba2f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba33:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ba36:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ba39:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba3c:	83 c6 05             	add    esi,0x5
c000ba3f:	78 07                	js     c000ba48 <prepare_data+0x152>
c000ba41:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba44:	39 cf                	cmp    edi,ecx
c000ba46:	7e 04                	jle    c000ba4c <prepare_data+0x156>
c000ba48:	89 ce                	mov    esi,ecx
c000ba4a:	29 c6                	sub    esi,eax
c000ba4c:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba4f:	51                   	push   ecx
c000ba50:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba57:	51                   	push   ecx
c000ba58:	6a 00                	push   0x0
c000ba5a:	50                   	push   eax
c000ba5b:	e8 18 4d ff ff       	call   c0000778 <memset>
c000ba60:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba63:	83 c4 10             	add    esp,0x10
c000ba66:	31 c0                	xor    eax,eax
c000ba68:	83 c4 1c             	add    esp,0x1c
c000ba6b:	5b                   	pop    ebx
c000ba6c:	5e                   	pop    esi
c000ba6d:	5f                   	pop    edi
c000ba6e:	5d                   	pop    ebp
c000ba6f:	c3                   	ret    

c000ba70 <sinc_multichan_vari_process>:
c000ba70:	55                   	push   ebp
c000ba71:	ba 05 00 00 00       	mov    edx,0x5
c000ba76:	57                   	push   edi
c000ba77:	56                   	push   esi
c000ba78:	53                   	push   ebx
c000ba79:	83 ec 4c             	sub    esp,0x4c
c000ba7c:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba80:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba84:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba87:	85 db                	test   ebx,ebx
c000ba89:	0f 84 9b 06 00 00    	je     c000c12a <sinc_multichan_vari_process+0x6ba>
c000ba8f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba92:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba95:	0f af c5             	imul   eax,ebp
c000ba98:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba9b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba9e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000baa5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000baac:	0f af c5             	imul   eax,ebp
c000baaf:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bab2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bab5:	8b 06                	mov    eax,DWORD PTR [esi]
c000bab7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000babb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000babf:	68 00 00 70 3f       	push   0x3f700000
c000bac4:	6a 00                	push   0x0
c000bac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bace:	e8 7c c8 01 00       	call   c002834f <__ltdf2>
c000bad3:	83 c4 10             	add    esp,0x10
c000bad6:	ba 16 00 00 00       	mov    edx,0x16
c000badb:	85 c0                	test   eax,eax
c000badd:	0f 88 47 06 00 00    	js     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bae3:	68 00 00 70 40       	push   0x40700000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baf2:	e8 3a c8 01 00       	call   c0028331 <__gtdf2>
c000baf7:	83 c4 10             	add    esp,0x10
c000bafa:	ba 16 00 00 00       	mov    edx,0x16
c000baff:	85 c0                	test   eax,eax
c000bb01:	0f 8f 23 06 00 00    	jg     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bb07:	83 ec 0c             	sub    esp,0xc
c000bb0a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bb0d:	e8 d1 c5 01 00       	call   c00280e3 <__floatsidf>
c000bb12:	83 c4 10             	add    esp,0x10
c000bb15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb1d:	68 00 00 00 40       	push   0x40000000
c000bb22:	6a 00                	push   0x0
c000bb24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb2c:	e8 d2 b8 01 00       	call   c0027403 <__adddf3>
c000bb31:	59                   	pop    ecx
c000bb32:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb36:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb3a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb3d:	e8 a1 c5 01 00       	call   c00280e3 <__floatsidf>
c000bb42:	83 c4 10             	add    esp,0x10
c000bb45:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb49:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb4d:	52                   	push   edx
c000bb4e:	50                   	push   eax
c000bb4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb57:	e8 08 c2 01 00       	call   c0027d64 <__divdf3>
c000bb5c:	83 c4 10             	add    esp,0x10
c000bb5f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb63:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb67:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb6a:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb6d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb71:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb85:	e8 a7 c7 01 00       	call   c0028331 <__gtdf2>
c000bb8a:	83 c4 10             	add    esp,0x10
c000bb8d:	85 c0                	test   eax,eax
c000bb8f:	7e 2d                	jle    c000bbbe <sinc_multichan_vari_process+0x14e>
c000bb91:	68 00 00 f0 3f       	push   0x3ff00000
c000bb96:	6a 00                	push   0x0
c000bb98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bba0:	e8 aa c7 01 00       	call   c002834f <__ltdf2>
c000bba5:	83 c4 10             	add    esp,0x10
c000bba8:	85 c0                	test   eax,eax
c000bbaa:	79 4d                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbb0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bbb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bbb8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bbbc:	eb 1b                	jmp    c000bbd9 <sinc_multichan_vari_process+0x169>
c000bbbe:	68 00 00 f0 3f       	push   0x3ff00000
c000bbc3:	6a 00                	push   0x0
c000bbc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbcd:	e8 7d c7 01 00       	call   c002834f <__ltdf2>
c000bbd2:	83 c4 10             	add    esp,0x10
c000bbd5:	85 c0                	test   eax,eax
c000bbd7:	79 20                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbd9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbdd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbe1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe9:	e8 76 c1 01 00       	call   c0027d64 <__divdf3>
c000bbee:	83 c4 10             	add    esp,0x10
c000bbf1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbf5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbf9:	50                   	push   eax
c000bbfa:	50                   	push   eax
c000bbfb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc03:	e8 f8 c8 01 00       	call   c0028500 <lrint>
c000bc08:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bc0b:	40                   	inc    eax
c000bc0c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc10:	0f af c5             	imul   eax,ebp
c000bc13:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bc17:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bc1a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1e:	58                   	pop    eax
c000bc1f:	5a                   	pop    edx
c000bc20:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc24:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc28:	e8 d3 c8 01 00       	call   c0028500 <lrint>
c000bc2d:	83 ec 0c             	sub    esp,0xc
c000bc30:	50                   	push   eax
c000bc31:	e8 ad c4 01 00       	call   c00280e3 <__floatsidf>
c000bc36:	83 c4 10             	add    esp,0x10
c000bc39:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc3d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc41:	52                   	push   edx
c000bc42:	50                   	push   eax
c000bc43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc47:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc4b:	e8 04 be 01 00       	call   c0027a54 <__subdf3>
c000bc50:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc54:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc58:	83 c4 20             	add    esp,0x20
c000bc5b:	6a 00                	push   0x0
c000bc5d:	6a 00                	push   0x0
c000bc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc67:	e8 e3 c6 01 00       	call   c002834f <__ltdf2>
c000bc6c:	83 c4 10             	add    esp,0x10
c000bc6f:	85 c0                	test   eax,eax
c000bc71:	79 1f                	jns    c000bc92 <sinc_multichan_vari_process+0x222>
c000bc73:	68 00 00 f0 3f       	push   0x3ff00000
c000bc78:	6a 00                	push   0x0
c000bc7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc7e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc82:	e8 7c b7 01 00       	call   c0027403 <__adddf3>
c000bc87:	83 c4 10             	add    esp,0x10
c000bc8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc92:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc95:	83 ec 10             	sub    esp,0x10
c000bc98:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc9c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcaf:	e8 a0 bd 01 00       	call   c0027a54 <__subdf3>
c000bcb4:	83 c4 18             	add    esp,0x18
c000bcb7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcbb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcbf:	52                   	push   edx
c000bcc0:	50                   	push   eax
c000bcc1:	e8 3a c8 01 00       	call   c0028500 <lrint>
c000bcc6:	0f af e8             	imul   ebp,eax
c000bcc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bccd:	01 e8                	add    eax,ebp
c000bccf:	99                   	cdq    
c000bcd0:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bcd3:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bcd6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcda:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcde:	68 00 00 f0 3f       	push   0x3ff00000
c000bce3:	6a 00                	push   0x0
c000bce5:	e8 7a c0 01 00       	call   c0027d64 <__divdf3>
c000bcea:	83 c4 10             	add    esp,0x10
c000bced:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcf1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcf5:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcfa:	68 23 42 92 0c       	push   0xc924223
c000bcff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd07:	e8 f7 b6 01 00       	call   c0027403 <__adddf3>
c000bd0c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bd10:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bd14:	83 c4 20             	add    esp,0x20
c000bd17:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd1f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bd27:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bd2a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bd2d:	7d 50                	jge    c000bd7f <sinc_multichan_vari_process+0x30f>
c000bd2f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd32:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd35:	01 c8                	add    eax,ecx
c000bd37:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3a:	99                   	cdq    
c000bd3b:	f7 f9                	idiv   ecx
c000bd3d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd41:	7d 0c                	jge    c000bd4f <sinc_multichan_vari_process+0x2df>
c000bd43:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd46:	85 ed                	test   ebp,ebp
c000bd48:	79 6b                	jns    c000bdb5 <sinc_multichan_vari_process+0x345>
c000bd4a:	e9 e6 00 00 00       	jmp    c000be35 <sinc_multichan_vari_process+0x3c5>
c000bd4f:	50                   	push   eax
c000bd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd54:	57                   	push   edi
c000bd55:	53                   	push   ebx
c000bd56:	e8 9b fb ff ff       	call   c000b8f6 <prepare_data>
c000bd5b:	83 c4 10             	add    esp,0x10
c000bd5e:	89 c2                	mov    edx,eax
c000bd60:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd63:	85 c0                	test   eax,eax
c000bd65:	0f 85 bf 03 00 00    	jne    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bd6b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd6e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd71:	01 c8                	add    eax,ecx
c000bd73:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd76:	99                   	cdq    
c000bd77:	f7 f9                	idiv   ecx
c000bd79:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd7d:	7c c4                	jl     c000bd43 <sinc_multichan_vari_process+0x2d3>
c000bd7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd83:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd87:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd8a:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd91:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd95:	89 06                	mov    DWORD PTR [esi],eax
c000bd97:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd9a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd9d:	99                   	cdq    
c000bd9e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bda1:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bda4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bda7:	99                   	cdq    
c000bda8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bdab:	31 d2                	xor    edx,edx
c000bdad:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bdb0:	e9 75 03 00 00       	jmp    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bdb5:	83 ec 0c             	sub    esp,0xc
c000bdb8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bdbb:	e8 23 c3 01 00       	call   c00280e3 <__floatsidf>
c000bdc0:	83 c4 10             	add    esp,0x10
c000bdc3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdc7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdcf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bddb:	e8 23 b6 01 00       	call   c0027403 <__adddf3>
c000bde0:	83 c4 10             	add    esp,0x10
c000bde3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bde7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdeb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdf3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdf7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdfb:	e8 03 b6 01 00       	call   c0027403 <__adddf3>
c000be00:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000be03:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be07:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be0b:	e8 d3 c2 01 00       	call   c00280e3 <__floatsidf>
c000be10:	83 c4 10             	add    esp,0x10
c000be13:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be17:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be1b:	52                   	push   edx
c000be1c:	50                   	push   eax
c000be1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be25:	e8 23 c5 01 00       	call   c002834d <__gedf2>
c000be2a:	83 c4 10             	add    esp,0x10
c000be2d:	85 c0                	test   eax,eax
c000be2f:	0f 89 4a ff ff ff    	jns    c000bd7f <sinc_multichan_vari_process+0x30f>
c000be35:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000be39:	0f 8e ed 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be3f:	83 ec 10             	sub    esp,0x10
c000be42:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be45:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be48:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be4b:	ff 36                	push   DWORD PTR [esi]
c000be4d:	e8 02 bc 01 00       	call   c0027a54 <__subdf3>
c000be52:	83 c4 18             	add    esp,0x18
c000be55:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be59:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be5d:	52                   	push   edx
c000be5e:	50                   	push   eax
c000be5f:	e8 7c c6 01 00       	call   c00284e0 <fabs>
c000be64:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be68:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be6c:	83 c4 10             	add    esp,0x10
c000be6f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be74:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be81:	e8 ab c4 01 00       	call   c0028331 <__gtdf2>
c000be86:	83 c4 10             	add    esp,0x10
c000be89:	85 c0                	test   eax,eax
c000be8b:	0f 8e 9b 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be91:	8b 06                	mov    eax,DWORD PTR [esi]
c000be93:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be96:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be9a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be9e:	52                   	push   edx
c000be9f:	50                   	push   eax
c000bea0:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bea3:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bea6:	e8 a9 bb 01 00       	call   c0027a54 <__subdf3>
c000beab:	59                   	pop    ecx
c000beac:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000beb0:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000beb4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000beb7:	e8 27 c2 01 00       	call   c00280e3 <__floatsidf>
c000bebc:	83 c4 10             	add    esp,0x10
c000bebf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bec3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bec7:	52                   	push   edx
c000bec8:	50                   	push   eax
c000bec9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000becd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bed1:	e8 aa bb 01 00       	call   c0027a80 <__muldf3>
c000bed6:	5d                   	pop    ebp
c000bed7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bedb:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bedf:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bee2:	e8 fc c1 01 00       	call   c00280e3 <__floatsidf>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bef2:	52                   	push   edx
c000bef3:	50                   	push   eax
c000bef4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000befc:	e8 63 be 01 00       	call   c0027d64 <__divdf3>
c000bf01:	83 c4 10             	add    esp,0x10
c000bf04:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf08:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf14:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf18:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf1c:	e8 e2 b4 01 00       	call   c0027403 <__adddf3>
c000bf21:	83 c4 10             	add    esp,0x10
c000bf24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf28:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf2c:	83 ec 0c             	sub    esp,0xc
c000bf2f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bf32:	e8 ac c1 01 00       	call   c00280e3 <__floatsidf>
c000bf37:	83 c4 10             	add    esp,0x10
c000bf3a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf3e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf52:	e8 f8 c3 01 00       	call   c002834f <__ltdf2>
c000bf57:	83 c4 10             	add    esp,0x10
c000bf5a:	85 c0                	test   eax,eax
c000bf5c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf60:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf64:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf68:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf6c:	78 10                	js     c000bf7e <sinc_multichan_vari_process+0x50e>
c000bf6e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf72:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf76:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf7a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf86:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8e:	e8 ed ba 01 00       	call   c0027a80 <__muldf3>
c000bf93:	59                   	pop    ecx
c000bf94:	5d                   	pop    ebp
c000bf95:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf99:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa5:	e8 25 f9 ff ff       	call   c000b8cf <double_to_fp>
c000bfaa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfae:	89 c5                	mov    ebp,eax
c000bfb0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfb4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfb8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfbc:	e8 bf ba 01 00       	call   c0027a80 <__muldf3>
c000bfc1:	83 c4 18             	add    esp,0x18
c000bfc4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bfc8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bfcc:	52                   	push   edx
c000bfcd:	50                   	push   eax
c000bfce:	e8 fc f8 ff ff       	call   c000b8cf <double_to_fp>
c000bfd3:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bfd6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfda:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfdd:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfe0:	50                   	push   eax
c000bfe1:	50                   	push   eax
c000bfe2:	50                   	push   eax
c000bfe3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfe6:	e8 f8 c0 01 00       	call   c00280e3 <__floatsidf>
c000bfeb:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfef:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bff3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bff7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bffb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c003:	e8 5c bd 01 00       	call   c0027d64 <__divdf3>
c000c008:	83 c4 1c             	add    esp,0x1c
c000c00b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c00f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000c013:	52                   	push   edx
c000c014:	89 ea                	mov    edx,ebp
c000c016:	50                   	push   eax
c000c017:	89 d8                	mov    eax,ebx
c000c019:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c01c:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000c020:	e8 69 ed ff ff       	call   c000ad8e <calc_output_multi>
c000c025:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c028:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000c02b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c02f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c033:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c037:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c03b:	e8 24 bd 01 00       	call   c0027d64 <__divdf3>
c000c040:	83 c4 10             	add    esp,0x10
c000c043:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c047:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c04b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c04f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c053:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c057:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c05b:	e8 a3 b3 01 00       	call   c0027403 <__adddf3>
c000c060:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c064:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c068:	83 c4 28             	add    esp,0x28
c000c06b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c06f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c073:	e8 88 c4 01 00       	call   c0028500 <lrint>
c000c078:	83 ec 0c             	sub    esp,0xc
c000c07b:	50                   	push   eax
c000c07c:	e8 62 c0 01 00       	call   c00280e3 <__floatsidf>
c000c081:	83 c4 10             	add    esp,0x10
c000c084:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c088:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c08c:	52                   	push   edx
c000c08d:	50                   	push   eax
c000c08e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c092:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c096:	e8 b9 b9 01 00       	call   c0027a54 <__subdf3>
c000c09b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c09f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0a3:	83 c4 20             	add    esp,0x20
c000c0a6:	6a 00                	push   0x0
c000c0a8:	6a 00                	push   0x0
c000c0aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0b2:	e8 98 c2 01 00       	call   c002834f <__ltdf2>
c000c0b7:	83 c4 10             	add    esp,0x10
c000c0ba:	85 c0                	test   eax,eax
c000c0bc:	79 20                	jns    c000c0de <sinc_multichan_vari_process+0x66e>
c000c0be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ce:	e8 30 b3 01 00       	call   c0027403 <__adddf3>
c000c0d3:	83 c4 10             	add    esp,0x10
c000c0d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0de:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0e1:	83 ec 10             	sub    esp,0x10
c000c0e4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0e8:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0f3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0fb:	e8 54 b9 01 00       	call   c0027a54 <__subdf3>
c000c100:	83 c4 18             	add    esp,0x18
c000c103:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c107:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c10b:	52                   	push   edx
c000c10c:	50                   	push   eax
c000c10d:	e8 ee c3 01 00       	call   c0028500 <lrint>
c000c112:	0f af e8             	imul   ebp,eax
c000c115:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c119:	83 c4 10             	add    esp,0x10
c000c11c:	01 e8                	add    eax,ebp
c000c11e:	99                   	cdq    
c000c11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c125:	e9 fd fb ff ff       	jmp    c000bd27 <sinc_multichan_vari_process+0x2b7>
c000c12a:	83 c4 4c             	add    esp,0x4c
c000c12d:	89 d0                	mov    eax,edx
c000c12f:	5b                   	pop    ebx
c000c130:	5e                   	pop    esi
c000c131:	5f                   	pop    edi
c000c132:	5d                   	pop    ebp
c000c133:	c3                   	ret    

c000c134 <sinc_hex_vari_process>:
c000c134:	55                   	push   ebp
c000c135:	ba 05 00 00 00       	mov    edx,0x5
c000c13a:	57                   	push   edi
c000c13b:	56                   	push   esi
c000c13c:	53                   	push   ebx
c000c13d:	83 ec 4c             	sub    esp,0x4c
c000c140:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c144:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c148:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c14b:	85 db                	test   ebx,ebx
c000c14d:	0f 84 9c 06 00 00    	je     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c153:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c156:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c159:	0f af c7             	imul   eax,edi
c000c15c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c15f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c162:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c169:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c170:	0f af c7             	imul   eax,edi
c000c173:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c176:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c179:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c17c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c180:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c184:	68 00 00 70 3f       	push   0x3f700000
c000c189:	6a 00                	push   0x0
c000c18b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c18f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c193:	e8 b7 c1 01 00       	call   c002834f <__ltdf2>
c000c198:	83 c4 10             	add    esp,0x10
c000c19b:	ba 16 00 00 00       	mov    edx,0x16
c000c1a0:	85 c0                	test   eax,eax
c000c1a2:	0f 88 47 06 00 00    	js     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1a8:	68 00 00 70 40       	push   0x40700000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b7:	e8 75 c1 01 00       	call   c0028331 <__gtdf2>
c000c1bc:	83 c4 10             	add    esp,0x10
c000c1bf:	ba 16 00 00 00       	mov    edx,0x16
c000c1c4:	85 c0                	test   eax,eax
c000c1c6:	0f 8f 23 06 00 00    	jg     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1cc:	83 ec 0c             	sub    esp,0xc
c000c1cf:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c1d2:	e8 0c bf 01 00       	call   c00280e3 <__floatsidf>
c000c1d7:	83 c4 10             	add    esp,0x10
c000c1da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1e2:	68 00 00 00 40       	push   0x40000000
c000c1e7:	6a 00                	push   0x0
c000c1e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1f1:	e8 0d b2 01 00       	call   c0027403 <__adddf3>
c000c1f6:	59                   	pop    ecx
c000c1f7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1fb:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1ff:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c202:	e8 dc be 01 00       	call   c00280e3 <__floatsidf>
c000c207:	83 c4 10             	add    esp,0x10
c000c20a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c20e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c212:	52                   	push   edx
c000c213:	50                   	push   eax
c000c214:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c218:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c21c:	e8 43 bb 01 00       	call   c0027d64 <__divdf3>
c000c221:	83 c4 10             	add    esp,0x10
c000c224:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c228:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c22c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c22f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c232:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c236:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c23a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c23e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c242:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c246:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c24a:	e8 e2 c0 01 00       	call   c0028331 <__gtdf2>
c000c24f:	83 c4 10             	add    esp,0x10
c000c252:	85 c0                	test   eax,eax
c000c254:	7e 2d                	jle    c000c283 <sinc_hex_vari_process+0x14f>
c000c256:	68 00 00 f0 3f       	push   0x3ff00000
c000c25b:	6a 00                	push   0x0
c000c25d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c261:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c265:	e8 e5 c0 01 00       	call   c002834f <__ltdf2>
c000c26a:	83 c4 10             	add    esp,0x10
c000c26d:	85 c0                	test   eax,eax
c000c26f:	79 4d                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c271:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c275:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c279:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c27d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c281:	eb 1b                	jmp    c000c29e <sinc_hex_vari_process+0x16a>
c000c283:	68 00 00 f0 3f       	push   0x3ff00000
c000c288:	6a 00                	push   0x0
c000c28a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c28e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c292:	e8 b8 c0 01 00       	call   c002834f <__ltdf2>
c000c297:	83 c4 10             	add    esp,0x10
c000c29a:	85 c0                	test   eax,eax
c000c29c:	79 20                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c29e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ae:	e8 b1 ba 01 00       	call   c0027d64 <__divdf3>
c000c2b3:	83 c4 10             	add    esp,0x10
c000c2b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2ba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2be:	50                   	push   eax
c000c2bf:	50                   	push   eax
c000c2c0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c8:	e8 33 c2 01 00       	call   c0028500 <lrint>
c000c2cd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c2d0:	40                   	inc    eax
c000c2d1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2d5:	0f af c7             	imul   eax,edi
c000c2d8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2df:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2e3:	58                   	pop    eax
c000c2e4:	5a                   	pop    edx
c000c2e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ed:	e8 0e c2 01 00       	call   c0028500 <lrint>
c000c2f2:	83 ec 0c             	sub    esp,0xc
c000c2f5:	50                   	push   eax
c000c2f6:	e8 e8 bd 01 00       	call   c00280e3 <__floatsidf>
c000c2fb:	83 c4 10             	add    esp,0x10
c000c2fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c302:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c306:	52                   	push   edx
c000c307:	50                   	push   eax
c000c308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c30c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c310:	e8 3f b7 01 00       	call   c0027a54 <__subdf3>
c000c315:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c319:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c31d:	83 c4 20             	add    esp,0x20
c000c320:	6a 00                	push   0x0
c000c322:	6a 00                	push   0x0
c000c324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c32c:	e8 1e c0 01 00       	call   c002834f <__ltdf2>
c000c331:	83 c4 10             	add    esp,0x10
c000c334:	85 c0                	test   eax,eax
c000c336:	79 1f                	jns    c000c357 <sinc_hex_vari_process+0x223>
c000c338:	68 00 00 f0 3f       	push   0x3ff00000
c000c33d:	6a 00                	push   0x0
c000c33f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c343:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c347:	e8 b7 b0 01 00       	call   c0027403 <__adddf3>
c000c34c:	83 c4 10             	add    esp,0x10
c000c34f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c353:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c357:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c35a:	83 ec 10             	sub    esp,0x10
c000c35d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c361:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c368:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c36c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c370:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c374:	e8 db b6 01 00       	call   c0027a54 <__subdf3>
c000c379:	83 c4 18             	add    esp,0x18
c000c37c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c380:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c384:	52                   	push   edx
c000c385:	50                   	push   eax
c000c386:	e8 75 c1 01 00       	call   c0028500 <lrint>
c000c38b:	0f af f8             	imul   edi,eax
c000c38e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c392:	01 f8                	add    eax,edi
c000c394:	99                   	cdq    
c000c395:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c398:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c39b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c39f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3a3:	68 00 00 f0 3f       	push   0x3ff00000
c000c3a8:	6a 00                	push   0x0
c000c3aa:	e8 b5 b9 01 00       	call   c0027d64 <__divdf3>
c000c3af:	83 c4 10             	add    esp,0x10
c000c3b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3ba:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c3bf:	68 23 42 92 0c       	push   0xc924223
c000c3c4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3cc:	e8 32 b0 01 00       	call   c0027403 <__adddf3>
c000c3d1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c3d5:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c3d9:	83 c4 20             	add    esp,0x20
c000c3dc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3e4:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3ef:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3f2:	7d 50                	jge    c000c444 <sinc_hex_vari_process+0x310>
c000c3f4:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fa:	01 c8                	add    eax,ecx
c000c3fc:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3ff:	99                   	cdq    
c000c400:	f7 f9                	idiv   ecx
c000c402:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c406:	7d 0c                	jge    c000c414 <sinc_hex_vari_process+0x2e0>
c000c408:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c40b:	85 ff                	test   edi,edi
c000c40d:	79 6c                	jns    c000c47b <sinc_hex_vari_process+0x347>
c000c40f:	e9 e7 00 00 00       	jmp    c000c4fb <sinc_hex_vari_process+0x3c7>
c000c414:	50                   	push   eax
c000c415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c419:	56                   	push   esi
c000c41a:	53                   	push   ebx
c000c41b:	e8 d6 f4 ff ff       	call   c000b8f6 <prepare_data>
c000c420:	83 c4 10             	add    esp,0x10
c000c423:	89 c2                	mov    edx,eax
c000c425:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c428:	85 c0                	test   eax,eax
c000c42a:	0f 85 bf 03 00 00    	jne    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c430:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c433:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c436:	01 c8                	add    eax,ecx
c000c438:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c43b:	99                   	cdq    
c000c43c:	f7 f9                	idiv   ecx
c000c43e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c442:	7c c4                	jl     c000c408 <sinc_hex_vari_process+0x2d4>
c000c444:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c448:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c44c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c44f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c456:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c45a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c45d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c460:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c463:	99                   	cdq    
c000c464:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c467:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c46a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c46d:	99                   	cdq    
c000c46e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c471:	31 d2                	xor    edx,edx
c000c473:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c476:	e9 74 03 00 00       	jmp    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c47b:	83 ec 0c             	sub    esp,0xc
c000c47e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c481:	e8 5d bc 01 00       	call   c00280e3 <__floatsidf>
c000c486:	83 c4 10             	add    esp,0x10
c000c489:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c48d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c491:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c495:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c499:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c49d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4a1:	e8 5d af 01 00       	call   c0027403 <__adddf3>
c000c4a6:	83 c4 10             	add    esp,0x10
c000c4a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c4ad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c4b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4c1:	e8 3d af 01 00       	call   c0027403 <__adddf3>
c000c4c6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c4c9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4cd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4d1:	e8 0d bc 01 00       	call   c00280e3 <__floatsidf>
c000c4d6:	83 c4 10             	add    esp,0x10
c000c4d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4e1:	52                   	push   edx
c000c4e2:	50                   	push   eax
c000c4e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4eb:	e8 5d be 01 00       	call   c002834d <__gedf2>
c000c4f0:	83 c4 10             	add    esp,0x10
c000c4f3:	85 c0                	test   eax,eax
c000c4f5:	0f 89 49 ff ff ff    	jns    c000c444 <sinc_hex_vari_process+0x310>
c000c4fb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4ff:	0f 8e ef 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c505:	83 ec 10             	sub    esp,0x10
c000c508:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c50b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c50e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c511:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c514:	e8 3b b5 01 00       	call   c0027a54 <__subdf3>
c000c519:	83 c4 18             	add    esp,0x18
c000c51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c520:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c524:	52                   	push   edx
c000c525:	50                   	push   eax
c000c526:	e8 b5 bf 01 00       	call   c00284e0 <fabs>
c000c52b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c52f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c533:	83 c4 10             	add    esp,0x10
c000c536:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c53b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c540:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c544:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c548:	e8 e4 bd 01 00       	call   c0028331 <__gtdf2>
c000c54d:	83 c4 10             	add    esp,0x10
c000c550:	85 c0                	test   eax,eax
c000c552:	0f 8e 9c 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c558:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c55b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c55e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c562:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c566:	52                   	push   edx
c000c567:	50                   	push   eax
c000c568:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c56b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c56e:	e8 e1 b4 01 00       	call   c0027a54 <__subdf3>
c000c573:	59                   	pop    ecx
c000c574:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c578:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c57c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c57f:	e8 5f bb 01 00       	call   c00280e3 <__floatsidf>
c000c584:	83 c4 10             	add    esp,0x10
c000c587:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c58b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c58f:	52                   	push   edx
c000c590:	50                   	push   eax
c000c591:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c595:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c599:	e8 e2 b4 01 00       	call   c0027a80 <__muldf3>
c000c59e:	5f                   	pop    edi
c000c59f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c5a3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c5a7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c5aa:	e8 34 bb 01 00       	call   c00280e3 <__floatsidf>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5ba:	52                   	push   edx
c000c5bb:	50                   	push   eax
c000c5bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c4:	e8 9b b7 01 00       	call   c0027d64 <__divdf3>
c000c5c9:	83 c4 10             	add    esp,0x10
c000c5cc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c5d0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c5d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e4:	e8 1a ae 01 00       	call   c0027403 <__adddf3>
c000c5e9:	83 c4 10             	add    esp,0x10
c000c5ec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5f0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5f4:	83 ec 0c             	sub    esp,0xc
c000c5f7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5fa:	e8 e4 ba 01 00       	call   c00280e3 <__floatsidf>
c000c5ff:	83 c4 10             	add    esp,0x10
c000c602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c60a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c60e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c616:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c61a:	e8 30 bd 01 00       	call   c002834f <__ltdf2>
c000c61f:	83 c4 10             	add    esp,0x10
c000c622:	85 c0                	test   eax,eax
c000c624:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c628:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c62c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c630:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c634:	78 10                	js     c000c646 <sinc_hex_vari_process+0x512>
c000c636:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c63a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c63e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c642:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c652:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c656:	e8 25 b4 01 00       	call   c0027a80 <__muldf3>
c000c65b:	59                   	pop    ecx
c000c65c:	5f                   	pop    edi
c000c65d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c661:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c665:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c669:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c66d:	e8 5d f2 ff ff       	call   c000b8cf <double_to_fp>
c000c672:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c676:	89 c7                	mov    edi,eax
c000c678:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c67c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c680:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c684:	e8 f7 b3 01 00       	call   c0027a80 <__muldf3>
c000c689:	83 c4 18             	add    esp,0x18
c000c68c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c690:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c694:	52                   	push   edx
c000c695:	50                   	push   eax
c000c696:	e8 34 f2 ff ff       	call   c000b8cf <double_to_fp>
c000c69b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c69e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c6a2:	83 c4 0c             	add    esp,0xc
c000c6a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c6a8:	8d 04 90             	lea    eax,[eax+edx*4]
c000c6ab:	50                   	push   eax
c000c6ac:	50                   	push   eax
c000c6ad:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c6b0:	e8 2e ba 01 00       	call   c00280e3 <__floatsidf>
c000c6b5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c6b9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c6bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6cd:	e8 92 b6 01 00       	call   c0027d64 <__divdf3>
c000c6d2:	83 c4 18             	add    esp,0x18
c000c6d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6dd:	52                   	push   edx
c000c6de:	89 fa                	mov    edx,edi
c000c6e0:	50                   	push   eax
c000c6e1:	89 d8                	mov    eax,ebx
c000c6e3:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6e7:	e8 50 de ff ff       	call   c000a53c <calc_output_hex>
c000c6ec:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c700:	e8 5f b6 01 00       	call   c0027d64 <__divdf3>
c000c705:	83 c4 10             	add    esp,0x10
c000c708:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c70c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c710:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c714:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c718:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c720:	e8 de ac 01 00       	call   c0027403 <__adddf3>
c000c725:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c729:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c72d:	83 c4 18             	add    esp,0x18
c000c730:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c734:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c738:	e8 c3 bd 01 00       	call   c0028500 <lrint>
c000c73d:	83 ec 0c             	sub    esp,0xc
c000c740:	50                   	push   eax
c000c741:	e8 9d b9 01 00       	call   c00280e3 <__floatsidf>
c000c746:	83 c4 10             	add    esp,0x10
c000c749:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c74d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c751:	52                   	push   edx
c000c752:	50                   	push   eax
c000c753:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c757:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c75b:	e8 f4 b2 01 00       	call   c0027a54 <__subdf3>
c000c760:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c764:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c768:	83 c4 20             	add    esp,0x20
c000c76b:	6a 00                	push   0x0
c000c76d:	6a 00                	push   0x0
c000c76f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c773:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c777:	e8 d3 bb 01 00       	call   c002834f <__ltdf2>
c000c77c:	83 c4 10             	add    esp,0x10
c000c77f:	85 c0                	test   eax,eax
c000c781:	79 20                	jns    c000c7a3 <sinc_hex_vari_process+0x66f>
c000c783:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c787:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c78b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c78f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c793:	e8 6b ac 01 00       	call   c0027403 <__adddf3>
c000c798:	83 c4 10             	add    esp,0x10
c000c79b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c79f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c7a3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c7a6:	83 ec 10             	sub    esp,0x10
c000c7a9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c7ad:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7bc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7c0:	e8 8f b2 01 00       	call   c0027a54 <__subdf3>
c000c7c5:	83 c4 18             	add    esp,0x18
c000c7c8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7d0:	52                   	push   edx
c000c7d1:	50                   	push   eax
c000c7d2:	e8 29 bd 01 00       	call   c0028500 <lrint>
c000c7d7:	0f af f8             	imul   edi,eax
c000c7da:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7de:	83 c4 10             	add    esp,0x10
c000c7e1:	01 f8                	add    eax,edi
c000c7e3:	99                   	cdq    
c000c7e4:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7e7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7ea:	e9 fd fb ff ff       	jmp    c000c3ec <sinc_hex_vari_process+0x2b8>
c000c7ef:	83 c4 4c             	add    esp,0x4c
c000c7f2:	89 d0                	mov    eax,edx
c000c7f4:	5b                   	pop    ebx
c000c7f5:	5e                   	pop    esi
c000c7f6:	5f                   	pop    edi
c000c7f7:	5d                   	pop    ebp
c000c7f8:	c3                   	ret    

c000c7f9 <sinc_quad_vari_process>:
c000c7f9:	55                   	push   ebp
c000c7fa:	ba 05 00 00 00       	mov    edx,0x5
c000c7ff:	57                   	push   edi
c000c800:	56                   	push   esi
c000c801:	53                   	push   ebx
c000c802:	83 ec 4c             	sub    esp,0x4c
c000c805:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c809:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c80d:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c810:	85 db                	test   ebx,ebx
c000c812:	0f 84 9c 06 00 00    	je     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c818:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c81b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c81e:	0f af c7             	imul   eax,edi
c000c821:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c824:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c827:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c82e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c835:	0f af c7             	imul   eax,edi
c000c838:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c83b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c83e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c841:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c845:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c849:	68 00 00 70 3f       	push   0x3f700000
c000c84e:	6a 00                	push   0x0
c000c850:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c854:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c858:	e8 f2 ba 01 00       	call   c002834f <__ltdf2>
c000c85d:	83 c4 10             	add    esp,0x10
c000c860:	ba 16 00 00 00       	mov    edx,0x16
c000c865:	85 c0                	test   eax,eax
c000c867:	0f 88 47 06 00 00    	js     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c86d:	68 00 00 70 40       	push   0x40700000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c87c:	e8 b0 ba 01 00       	call   c0028331 <__gtdf2>
c000c881:	83 c4 10             	add    esp,0x10
c000c884:	ba 16 00 00 00       	mov    edx,0x16
c000c889:	85 c0                	test   eax,eax
c000c88b:	0f 8f 23 06 00 00    	jg     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c891:	83 ec 0c             	sub    esp,0xc
c000c894:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c897:	e8 47 b8 01 00       	call   c00280e3 <__floatsidf>
c000c89c:	83 c4 10             	add    esp,0x10
c000c89f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8a7:	68 00 00 00 40       	push   0x40000000
c000c8ac:	6a 00                	push   0x0
c000c8ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b6:	e8 48 ab 01 00       	call   c0027403 <__adddf3>
c000c8bb:	59                   	pop    ecx
c000c8bc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c8c0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c8c4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8c7:	e8 17 b8 01 00       	call   c00280e3 <__floatsidf>
c000c8cc:	83 c4 10             	add    esp,0x10
c000c8cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8d3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8d7:	52                   	push   edx
c000c8d8:	50                   	push   eax
c000c8d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8e1:	e8 7e b4 01 00       	call   c0027d64 <__divdf3>
c000c8e6:	83 c4 10             	add    esp,0x10
c000c8e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8f1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8f4:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c903:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c907:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90f:	e8 1d ba 01 00       	call   c0028331 <__gtdf2>
c000c914:	83 c4 10             	add    esp,0x10
c000c917:	85 c0                	test   eax,eax
c000c919:	7e 2d                	jle    c000c948 <sinc_quad_vari_process+0x14f>
c000c91b:	68 00 00 f0 3f       	push   0x3ff00000
c000c920:	6a 00                	push   0x0
c000c922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c92a:	e8 20 ba 01 00       	call   c002834f <__ltdf2>
c000c92f:	83 c4 10             	add    esp,0x10
c000c932:	85 c0                	test   eax,eax
c000c934:	79 4d                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c93a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c93e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c942:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c946:	eb 1b                	jmp    c000c963 <sinc_quad_vari_process+0x16a>
c000c948:	68 00 00 f0 3f       	push   0x3ff00000
c000c94d:	6a 00                	push   0x0
c000c94f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c953:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c957:	e8 f3 b9 01 00       	call   c002834f <__ltdf2>
c000c95c:	83 c4 10             	add    esp,0x10
c000c95f:	85 c0                	test   eax,eax
c000c961:	79 20                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c963:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c967:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c96b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c96f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c973:	e8 ec b3 01 00       	call   c0027d64 <__divdf3>
c000c978:	83 c4 10             	add    esp,0x10
c000c97b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c97f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c983:	50                   	push   eax
c000c984:	50                   	push   eax
c000c985:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c989:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c98d:	e8 6e bb 01 00       	call   c0028500 <lrint>
c000c992:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c995:	40                   	inc    eax
c000c996:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c99a:	0f af c7             	imul   eax,edi
c000c99d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c9a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9a4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a8:	58                   	pop    eax
c000c9a9:	5a                   	pop    edx
c000c9aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9b2:	e8 49 bb 01 00       	call   c0028500 <lrint>
c000c9b7:	83 ec 0c             	sub    esp,0xc
c000c9ba:	50                   	push   eax
c000c9bb:	e8 23 b7 01 00       	call   c00280e3 <__floatsidf>
c000c9c0:	83 c4 10             	add    esp,0x10
c000c9c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c9c7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c9cb:	52                   	push   edx
c000c9cc:	50                   	push   eax
c000c9cd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d5:	e8 7a b0 01 00       	call   c0027a54 <__subdf3>
c000c9da:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9de:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9e2:	83 c4 20             	add    esp,0x20
c000c9e5:	6a 00                	push   0x0
c000c9e7:	6a 00                	push   0x0
c000c9e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9f1:	e8 59 b9 01 00       	call   c002834f <__ltdf2>
c000c9f6:	83 c4 10             	add    esp,0x10
c000c9f9:	85 c0                	test   eax,eax
c000c9fb:	79 1f                	jns    c000ca1c <sinc_quad_vari_process+0x223>
c000c9fd:	68 00 00 f0 3f       	push   0x3ff00000
c000ca02:	6a 00                	push   0x0
c000ca04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca0c:	e8 f2 a9 01 00       	call   c0027403 <__adddf3>
c000ca11:	83 c4 10             	add    esp,0x10
c000ca14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca18:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ca1c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ca1f:	83 ec 10             	sub    esp,0x10
c000ca22:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ca26:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca31:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca35:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca39:	e8 16 b0 01 00       	call   c0027a54 <__subdf3>
c000ca3e:	83 c4 18             	add    esp,0x18
c000ca41:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca45:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca49:	52                   	push   edx
c000ca4a:	50                   	push   eax
c000ca4b:	e8 b0 ba 01 00       	call   c0028500 <lrint>
c000ca50:	0f af f8             	imul   edi,eax
c000ca53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca57:	01 f8                	add    eax,edi
c000ca59:	99                   	cdq    
c000ca5a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca5d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca64:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca68:	68 00 00 f0 3f       	push   0x3ff00000
c000ca6d:	6a 00                	push   0x0
c000ca6f:	e8 f0 b2 01 00       	call   c0027d64 <__divdf3>
c000ca74:	83 c4 10             	add    esp,0x10
c000ca77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca7f:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca84:	68 23 42 92 0c       	push   0xc924223
c000ca89:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca8d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca91:	e8 6d a9 01 00       	call   c0027403 <__adddf3>
c000ca96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca9e:	83 c4 20             	add    esp,0x20
c000caa1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000caa9:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cab1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cab4:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cab7:	7d 50                	jge    c000cb09 <sinc_quad_vari_process+0x310>
c000cab9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cabf:	01 c8                	add    eax,ecx
c000cac1:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac4:	99                   	cdq    
c000cac5:	f7 f9                	idiv   ecx
c000cac7:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacb:	7d 0c                	jge    c000cad9 <sinc_quad_vari_process+0x2e0>
c000cacd:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cad0:	85 ff                	test   edi,edi
c000cad2:	79 6c                	jns    c000cb40 <sinc_quad_vari_process+0x347>
c000cad4:	e9 e7 00 00 00       	jmp    c000cbc0 <sinc_quad_vari_process+0x3c7>
c000cad9:	50                   	push   eax
c000cada:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cade:	56                   	push   esi
c000cadf:	53                   	push   ebx
c000cae0:	e8 11 ee ff ff       	call   c000b8f6 <prepare_data>
c000cae5:	83 c4 10             	add    esp,0x10
c000cae8:	89 c2                	mov    edx,eax
c000caea:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000caed:	85 c0                	test   eax,eax
c000caef:	0f 85 bf 03 00 00    	jne    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000caf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000caf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cafb:	01 c8                	add    eax,ecx
c000cafd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cb00:	99                   	cdq    
c000cb01:	f7 f9                	idiv   ecx
c000cb03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cb07:	7c c4                	jl     c000cacd <sinc_quad_vari_process+0x2d4>
c000cb09:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb0d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb11:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cb14:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cb17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb1b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb1f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cb22:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cb25:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cb28:	99                   	cdq    
c000cb29:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb2c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cb2f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cb32:	99                   	cdq    
c000cb33:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb36:	31 d2                	xor    edx,edx
c000cb38:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb3b:	e9 74 03 00 00       	jmp    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000cb40:	83 ec 0c             	sub    esp,0xc
c000cb43:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb46:	e8 98 b5 01 00       	call   c00280e3 <__floatsidf>
c000cb4b:	83 c4 10             	add    esp,0x10
c000cb4e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb52:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb66:	e8 98 a8 01 00       	call   c0027403 <__adddf3>
c000cb6b:	83 c4 10             	add    esp,0x10
c000cb6e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb72:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb86:	e8 78 a8 01 00       	call   c0027403 <__adddf3>
c000cb8b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb92:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb96:	e8 48 b5 01 00       	call   c00280e3 <__floatsidf>
c000cb9b:	83 c4 10             	add    esp,0x10
c000cb9e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cba2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cba6:	52                   	push   edx
c000cba7:	50                   	push   eax
c000cba8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbb0:	e8 98 b7 01 00       	call   c002834d <__gedf2>
c000cbb5:	83 c4 10             	add    esp,0x10
c000cbb8:	85 c0                	test   eax,eax
c000cbba:	0f 89 49 ff ff ff    	jns    c000cb09 <sinc_quad_vari_process+0x310>
c000cbc0:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cbc4:	0f 8e ef 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cbca:	83 ec 10             	sub    esp,0x10
c000cbcd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbd0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbd3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cbd6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cbd9:	e8 76 ae 01 00       	call   c0027a54 <__subdf3>
c000cbde:	83 c4 18             	add    esp,0x18
c000cbe1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbe5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbe9:	52                   	push   edx
c000cbea:	50                   	push   eax
c000cbeb:	e8 f0 b8 01 00       	call   c00284e0 <fabs>
c000cbf0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbf4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbf8:	83 c4 10             	add    esp,0x10
c000cbfb:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cc00:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cc05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc09:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc0d:	e8 1f b7 01 00       	call   c0028331 <__gtdf2>
c000cc12:	83 c4 10             	add    esp,0x10
c000cc15:	85 c0                	test   eax,eax
c000cc17:	0f 8e 9c 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cc1d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cc20:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cc23:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc27:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc2b:	52                   	push   edx
c000cc2c:	50                   	push   eax
c000cc2d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cc30:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cc33:	e8 1c ae 01 00       	call   c0027a54 <__subdf3>
c000cc38:	59                   	pop    ecx
c000cc39:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc3d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc41:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc44:	e8 9a b4 01 00       	call   c00280e3 <__floatsidf>
c000cc49:	83 c4 10             	add    esp,0x10
c000cc4c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc50:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc54:	52                   	push   edx
c000cc55:	50                   	push   eax
c000cc56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5e:	e8 1d ae 01 00       	call   c0027a80 <__muldf3>
c000cc63:	5f                   	pop    edi
c000cc64:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc68:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc6c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc6f:	e8 6f b4 01 00       	call   c00280e3 <__floatsidf>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc7f:	52                   	push   edx
c000cc80:	50                   	push   eax
c000cc81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc89:	e8 d6 b0 01 00       	call   c0027d64 <__divdf3>
c000cc8e:	83 c4 10             	add    esp,0x10
c000cc91:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc95:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cca1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca9:	e8 55 a7 01 00       	call   c0027403 <__adddf3>
c000ccae:	83 c4 10             	add    esp,0x10
c000ccb1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccb5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccb9:	83 ec 0c             	sub    esp,0xc
c000ccbc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ccbf:	e8 1f b4 01 00       	call   c00280e3 <__floatsidf>
c000ccc4:	83 c4 10             	add    esp,0x10
c000ccc7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cccb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cccf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdf:	e8 6b b6 01 00       	call   c002834f <__ltdf2>
c000cce4:	83 c4 10             	add    esp,0x10
c000cce7:	85 c0                	test   eax,eax
c000cce9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cced:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccf1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccf5:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccf9:	78 10                	js     c000cd0b <sinc_quad_vari_process+0x512>
c000ccfb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cd03:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cd07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd13:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd17:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd1b:	e8 60 ad 01 00       	call   c0027a80 <__muldf3>
c000cd20:	59                   	pop    ecx
c000cd21:	5f                   	pop    edi
c000cd22:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd26:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd2a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd2e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd32:	e8 98 eb ff ff       	call   c000b8cf <double_to_fp>
c000cd37:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd3b:	89 c7                	mov    edi,eax
c000cd3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd45:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd49:	e8 32 ad 01 00       	call   c0027a80 <__muldf3>
c000cd4e:	83 c4 18             	add    esp,0x18
c000cd51:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd55:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd59:	52                   	push   edx
c000cd5a:	50                   	push   eax
c000cd5b:	e8 6f eb ff ff       	call   c000b8cf <double_to_fp>
c000cd60:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd63:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd67:	83 c4 0c             	add    esp,0xc
c000cd6a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd6d:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd70:	50                   	push   eax
c000cd71:	50                   	push   eax
c000cd72:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd75:	e8 69 b3 01 00       	call   c00280e3 <__floatsidf>
c000cd7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd82:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd86:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd92:	e8 cd af 01 00       	call   c0027d64 <__divdf3>
c000cd97:	83 c4 18             	add    esp,0x18
c000cd9a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd9e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cda2:	52                   	push   edx
c000cda3:	89 fa                	mov    edx,edi
c000cda5:	50                   	push   eax
c000cda6:	89 d8                	mov    eax,ebx
c000cda8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cdac:	e8 a5 d1 ff ff       	call   c0009f56 <calc_output_quad>
c000cdb1:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cdb5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdb9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdbd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc5:	e8 9a af 01 00       	call   c0027d64 <__divdf3>
c000cdca:	83 c4 10             	add    esp,0x10
c000cdcd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cdd1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cdd5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdd9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cddd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde5:	e8 19 a6 01 00       	call   c0027403 <__adddf3>
c000cdea:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdee:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdf2:	83 c4 18             	add    esp,0x18
c000cdf5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdf9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdfd:	e8 fe b6 01 00       	call   c0028500 <lrint>
c000ce02:	83 ec 0c             	sub    esp,0xc
c000ce05:	50                   	push   eax
c000ce06:	e8 d8 b2 01 00       	call   c00280e3 <__floatsidf>
c000ce0b:	83 c4 10             	add    esp,0x10
c000ce0e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce12:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce16:	52                   	push   edx
c000ce17:	50                   	push   eax
c000ce18:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce1c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce20:	e8 2f ac 01 00       	call   c0027a54 <__subdf3>
c000ce25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce2d:	83 c4 20             	add    esp,0x20
c000ce30:	6a 00                	push   0x0
c000ce32:	6a 00                	push   0x0
c000ce34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce3c:	e8 0e b5 01 00       	call   c002834f <__ltdf2>
c000ce41:	83 c4 10             	add    esp,0x10
c000ce44:	85 c0                	test   eax,eax
c000ce46:	79 20                	jns    c000ce68 <sinc_quad_vari_process+0x66f>
c000ce48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce58:	e8 a6 a5 01 00       	call   c0027403 <__adddf3>
c000ce5d:	83 c4 10             	add    esp,0x10
c000ce60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce64:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce68:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce6b:	83 ec 10             	sub    esp,0x10
c000ce6e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce72:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce7d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce81:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce85:	e8 ca ab 01 00       	call   c0027a54 <__subdf3>
c000ce8a:	83 c4 18             	add    esp,0x18
c000ce8d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce91:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce95:	52                   	push   edx
c000ce96:	50                   	push   eax
c000ce97:	e8 64 b6 01 00       	call   c0028500 <lrint>
c000ce9c:	0f af f8             	imul   edi,eax
c000ce9f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cea3:	83 c4 10             	add    esp,0x10
c000cea6:	01 f8                	add    eax,edi
c000cea8:	99                   	cdq    
c000cea9:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ceac:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ceaf:	e9 fd fb ff ff       	jmp    c000cab1 <sinc_quad_vari_process+0x2b8>
c000ceb4:	83 c4 4c             	add    esp,0x4c
c000ceb7:	89 d0                	mov    eax,edx
c000ceb9:	5b                   	pop    ebx
c000ceba:	5e                   	pop    esi
c000cebb:	5f                   	pop    edi
c000cebc:	5d                   	pop    ebp
c000cebd:	c3                   	ret    

c000cebe <sinc_stereo_vari_process>:
c000cebe:	55                   	push   ebp
c000cebf:	ba 05 00 00 00       	mov    edx,0x5
c000cec4:	57                   	push   edi
c000cec5:	56                   	push   esi
c000cec6:	53                   	push   ebx
c000cec7:	83 ec 4c             	sub    esp,0x4c
c000ceca:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cece:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ced2:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ced5:	85 db                	test   ebx,ebx
c000ced7:	0f 84 9c 06 00 00    	je     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cedd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cee0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cee3:	0f af c7             	imul   eax,edi
c000cee6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cee9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceec:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cef3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cefa:	0f af c7             	imul   eax,edi
c000cefd:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cf00:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cf03:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf06:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cf0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cf0e:	68 00 00 70 3f       	push   0x3f700000
c000cf13:	6a 00                	push   0x0
c000cf15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf1d:	e8 2d b4 01 00       	call   c002834f <__ltdf2>
c000cf22:	83 c4 10             	add    esp,0x10
c000cf25:	ba 16 00 00 00       	mov    edx,0x16
c000cf2a:	85 c0                	test   eax,eax
c000cf2c:	0f 88 47 06 00 00    	js     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf32:	68 00 00 70 40       	push   0x40700000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf41:	e8 eb b3 01 00       	call   c0028331 <__gtdf2>
c000cf46:	83 c4 10             	add    esp,0x10
c000cf49:	ba 16 00 00 00       	mov    edx,0x16
c000cf4e:	85 c0                	test   eax,eax
c000cf50:	0f 8f 23 06 00 00    	jg     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf56:	83 ec 0c             	sub    esp,0xc
c000cf59:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf5c:	e8 82 b1 01 00       	call   c00280e3 <__floatsidf>
c000cf61:	83 c4 10             	add    esp,0x10
c000cf64:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf6c:	68 00 00 00 40       	push   0x40000000
c000cf71:	6a 00                	push   0x0
c000cf73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf7b:	e8 83 a4 01 00       	call   c0027403 <__adddf3>
c000cf80:	59                   	pop    ecx
c000cf81:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf85:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf89:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf8c:	e8 52 b1 01 00       	call   c00280e3 <__floatsidf>
c000cf91:	83 c4 10             	add    esp,0x10
c000cf94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf98:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf9c:	52                   	push   edx
c000cf9d:	50                   	push   eax
c000cf9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa6:	e8 b9 ad 01 00       	call   c0027d64 <__divdf3>
c000cfab:	83 c4 10             	add    esp,0x10
c000cfae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cfb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cfb6:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cfb9:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cfbc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfc0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd4:	e8 58 b3 01 00       	call   c0028331 <__gtdf2>
c000cfd9:	83 c4 10             	add    esp,0x10
c000cfdc:	85 c0                	test   eax,eax
c000cfde:	7e 2d                	jle    c000d00d <sinc_stereo_vari_process+0x14f>
c000cfe0:	68 00 00 f0 3f       	push   0x3ff00000
c000cfe5:	6a 00                	push   0x0
c000cfe7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfeb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfef:	e8 5b b3 01 00       	call   c002834f <__ltdf2>
c000cff4:	83 c4 10             	add    esp,0x10
c000cff7:	85 c0                	test   eax,eax
c000cff9:	79 4d                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000cffb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d003:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d007:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d00b:	eb 1b                	jmp    c000d028 <sinc_stereo_vari_process+0x16a>
c000d00d:	68 00 00 f0 3f       	push   0x3ff00000
c000d012:	6a 00                	push   0x0
c000d014:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d018:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d01c:	e8 2e b3 01 00       	call   c002834f <__ltdf2>
c000d021:	83 c4 10             	add    esp,0x10
c000d024:	85 c0                	test   eax,eax
c000d026:	79 20                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000d028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d02c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d030:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d034:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d038:	e8 27 ad 01 00       	call   c0027d64 <__divdf3>
c000d03d:	83 c4 10             	add    esp,0x10
c000d040:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d044:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d048:	50                   	push   eax
c000d049:	50                   	push   eax
c000d04a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d04e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d052:	e8 a9 b4 01 00       	call   c0028500 <lrint>
c000d057:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d05a:	40                   	inc    eax
c000d05b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d05f:	0f af c7             	imul   eax,edi
c000d062:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d066:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d069:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d06d:	58                   	pop    eax
c000d06e:	5a                   	pop    edx
c000d06f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d073:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d077:	e8 84 b4 01 00       	call   c0028500 <lrint>
c000d07c:	83 ec 0c             	sub    esp,0xc
c000d07f:	50                   	push   eax
c000d080:	e8 5e b0 01 00       	call   c00280e3 <__floatsidf>
c000d085:	83 c4 10             	add    esp,0x10
c000d088:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d08c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d090:	52                   	push   edx
c000d091:	50                   	push   eax
c000d092:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d096:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d09a:	e8 b5 a9 01 00       	call   c0027a54 <__subdf3>
c000d09f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0a7:	83 c4 20             	add    esp,0x20
c000d0aa:	6a 00                	push   0x0
c000d0ac:	6a 00                	push   0x0
c000d0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b6:	e8 94 b2 01 00       	call   c002834f <__ltdf2>
c000d0bb:	83 c4 10             	add    esp,0x10
c000d0be:	85 c0                	test   eax,eax
c000d0c0:	79 1f                	jns    c000d0e1 <sinc_stereo_vari_process+0x223>
c000d0c2:	68 00 00 f0 3f       	push   0x3ff00000
c000d0c7:	6a 00                	push   0x0
c000d0c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0d1:	e8 2d a3 01 00       	call   c0027403 <__adddf3>
c000d0d6:	83 c4 10             	add    esp,0x10
c000d0d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0e1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0e4:	83 ec 10             	sub    esp,0x10
c000d0e7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0eb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fe:	e8 51 a9 01 00       	call   c0027a54 <__subdf3>
c000d103:	83 c4 18             	add    esp,0x18
c000d106:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d10a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d10e:	52                   	push   edx
c000d10f:	50                   	push   eax
c000d110:	e8 eb b3 01 00       	call   c0028500 <lrint>
c000d115:	0f af f8             	imul   edi,eax
c000d118:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d11c:	01 f8                	add    eax,edi
c000d11e:	99                   	cdq    
c000d11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d125:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d129:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d12d:	68 00 00 f0 3f       	push   0x3ff00000
c000d132:	6a 00                	push   0x0
c000d134:	e8 2b ac 01 00       	call   c0027d64 <__divdf3>
c000d139:	83 c4 10             	add    esp,0x10
c000d13c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d140:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d144:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d149:	68 23 42 92 0c       	push   0xc924223
c000d14e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d152:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d156:	e8 a8 a2 01 00       	call   c0027403 <__adddf3>
c000d15b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d15f:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d163:	83 c4 20             	add    esp,0x20
c000d166:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d16e:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d176:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d179:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d17c:	7d 50                	jge    c000d1ce <sinc_stereo_vari_process+0x310>
c000d17e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d181:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d184:	01 c8                	add    eax,ecx
c000d186:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d189:	99                   	cdq    
c000d18a:	f7 f9                	idiv   ecx
c000d18c:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d190:	7d 0c                	jge    c000d19e <sinc_stereo_vari_process+0x2e0>
c000d192:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d195:	85 ff                	test   edi,edi
c000d197:	79 6c                	jns    c000d205 <sinc_stereo_vari_process+0x347>
c000d199:	e9 e7 00 00 00       	jmp    c000d285 <sinc_stereo_vari_process+0x3c7>
c000d19e:	50                   	push   eax
c000d19f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1a3:	56                   	push   esi
c000d1a4:	53                   	push   ebx
c000d1a5:	e8 4c e7 ff ff       	call   c000b8f6 <prepare_data>
c000d1aa:	83 c4 10             	add    esp,0x10
c000d1ad:	89 c2                	mov    edx,eax
c000d1af:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d1b2:	85 c0                	test   eax,eax
c000d1b4:	0f 85 bf 03 00 00    	jne    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d1ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d1bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d1c0:	01 c8                	add    eax,ecx
c000d1c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d1c5:	99                   	cdq    
c000d1c6:	f7 f9                	idiv   ecx
c000d1c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d1cc:	7c c4                	jl     c000d192 <sinc_stereo_vari_process+0x2d4>
c000d1ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d1d2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1d6:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d1d9:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1e4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1e7:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1ea:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1ed:	99                   	cdq    
c000d1ee:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1f1:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1f4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1f7:	99                   	cdq    
c000d1f8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1fb:	31 d2                	xor    edx,edx
c000d1fd:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d200:	e9 74 03 00 00       	jmp    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d205:	83 ec 0c             	sub    esp,0xc
c000d208:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d20b:	e8 d3 ae 01 00       	call   c00280e3 <__floatsidf>
c000d210:	83 c4 10             	add    esp,0x10
c000d213:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d217:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d21b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d21f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d223:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d227:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d22b:	e8 d3 a1 01 00       	call   c0027403 <__adddf3>
c000d230:	83 c4 10             	add    esp,0x10
c000d233:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d237:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d23b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d23f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d243:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d247:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d24b:	e8 b3 a1 01 00       	call   c0027403 <__adddf3>
c000d250:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d253:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d257:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d25b:	e8 83 ae 01 00       	call   c00280e3 <__floatsidf>
c000d260:	83 c4 10             	add    esp,0x10
c000d263:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d267:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d26b:	52                   	push   edx
c000d26c:	50                   	push   eax
c000d26d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d271:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d275:	e8 d3 b0 01 00       	call   c002834d <__gedf2>
c000d27a:	83 c4 10             	add    esp,0x10
c000d27d:	85 c0                	test   eax,eax
c000d27f:	0f 89 49 ff ff ff    	jns    c000d1ce <sinc_stereo_vari_process+0x310>
c000d285:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d289:	0f 8e ef 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d28f:	83 ec 10             	sub    esp,0x10
c000d292:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d295:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d298:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d29b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d29e:	e8 b1 a7 01 00       	call   c0027a54 <__subdf3>
c000d2a3:	83 c4 18             	add    esp,0x18
c000d2a6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2aa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2ae:	52                   	push   edx
c000d2af:	50                   	push   eax
c000d2b0:	e8 2b b2 01 00       	call   c00284e0 <fabs>
c000d2b5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d2b9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d2bd:	83 c4 10             	add    esp,0x10
c000d2c0:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d2c5:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d2ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2d2:	e8 5a b0 01 00       	call   c0028331 <__gtdf2>
c000d2d7:	83 c4 10             	add    esp,0x10
c000d2da:	85 c0                	test   eax,eax
c000d2dc:	0f 8e 9c 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d2e2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2e5:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2ec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2f0:	52                   	push   edx
c000d2f1:	50                   	push   eax
c000d2f2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2f5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2f8:	e8 57 a7 01 00       	call   c0027a54 <__subdf3>
c000d2fd:	59                   	pop    ecx
c000d2fe:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d302:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d306:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d309:	e8 d5 ad 01 00       	call   c00280e3 <__floatsidf>
c000d30e:	83 c4 10             	add    esp,0x10
c000d311:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d315:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d319:	52                   	push   edx
c000d31a:	50                   	push   eax
c000d31b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d31f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d323:	e8 58 a7 01 00       	call   c0027a80 <__muldf3>
c000d328:	5f                   	pop    edi
c000d329:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d32d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d331:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d334:	e8 aa ad 01 00       	call   c00280e3 <__floatsidf>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d340:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d344:	52                   	push   edx
c000d345:	50                   	push   eax
c000d346:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34e:	e8 11 aa 01 00       	call   c0027d64 <__divdf3>
c000d353:	83 c4 10             	add    esp,0x10
c000d356:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d35a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d35e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d362:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d366:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36e:	e8 90 a0 01 00       	call   c0027403 <__adddf3>
c000d373:	83 c4 10             	add    esp,0x10
c000d376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d37e:	83 ec 0c             	sub    esp,0xc
c000d381:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d384:	e8 5a ad 01 00       	call   c00280e3 <__floatsidf>
c000d389:	83 c4 10             	add    esp,0x10
c000d38c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d390:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d394:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d398:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d39c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a4:	e8 a6 af 01 00       	call   c002834f <__ltdf2>
c000d3a9:	83 c4 10             	add    esp,0x10
c000d3ac:	85 c0                	test   eax,eax
c000d3ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d3b2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d3b6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d3ba:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d3be:	78 10                	js     c000d3d0 <sinc_stereo_vari_process+0x512>
c000d3c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d3c4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d3c8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d3cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3e0:	e8 9b a6 01 00       	call   c0027a80 <__muldf3>
c000d3e5:	59                   	pop    ecx
c000d3e6:	5f                   	pop    edi
c000d3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f7:	e8 d3 e4 ff ff       	call   c000b8cf <double_to_fp>
c000d3fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d400:	89 c7                	mov    edi,eax
c000d402:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d406:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40e:	e8 6d a6 01 00       	call   c0027a80 <__muldf3>
c000d413:	83 c4 18             	add    esp,0x18
c000d416:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d41a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d41e:	52                   	push   edx
c000d41f:	50                   	push   eax
c000d420:	e8 aa e4 ff ff       	call   c000b8cf <double_to_fp>
c000d425:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d428:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d42c:	83 c4 0c             	add    esp,0xc
c000d42f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d432:	8d 04 90             	lea    eax,[eax+edx*4]
c000d435:	50                   	push   eax
c000d436:	50                   	push   eax
c000d437:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d43a:	e8 a4 ac 01 00       	call   c00280e3 <__floatsidf>
c000d43f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d443:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d447:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d453:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d457:	e8 08 a9 01 00       	call   c0027d64 <__divdf3>
c000d45c:	83 c4 18             	add    esp,0x18
c000d45f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d463:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d467:	52                   	push   edx
c000d468:	89 fa                	mov    edx,edi
c000d46a:	50                   	push   eax
c000d46b:	89 d8                	mov    eax,ebx
c000d46d:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d471:	e8 02 c7 ff ff       	call   c0009b78 <calc_output_stereo>
c000d476:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d47a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d47e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d482:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d486:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d48a:	e8 d5 a8 01 00       	call   c0027d64 <__divdf3>
c000d48f:	83 c4 10             	add    esp,0x10
c000d492:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d496:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d49a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d49e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4aa:	e8 54 9f 01 00       	call   c0027403 <__adddf3>
c000d4af:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d4b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d4b7:	83 c4 18             	add    esp,0x18
c000d4ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4c2:	e8 39 b0 01 00       	call   c0028500 <lrint>
c000d4c7:	83 ec 0c             	sub    esp,0xc
c000d4ca:	50                   	push   eax
c000d4cb:	e8 13 ac 01 00       	call   c00280e3 <__floatsidf>
c000d4d0:	83 c4 10             	add    esp,0x10
c000d4d3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4db:	52                   	push   edx
c000d4dc:	50                   	push   eax
c000d4dd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e5:	e8 6a a5 01 00       	call   c0027a54 <__subdf3>
c000d4ea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4ee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4f2:	83 c4 20             	add    esp,0x20
c000d4f5:	6a 00                	push   0x0
c000d4f7:	6a 00                	push   0x0
c000d4f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d501:	e8 49 ae 01 00       	call   c002834f <__ltdf2>
c000d506:	83 c4 10             	add    esp,0x10
c000d509:	85 c0                	test   eax,eax
c000d50b:	79 20                	jns    c000d52d <sinc_stereo_vari_process+0x66f>
c000d50d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d511:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d515:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d519:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d51d:	e8 e1 9e 01 00       	call   c0027403 <__adddf3>
c000d522:	83 c4 10             	add    esp,0x10
c000d525:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d529:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d52d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d530:	83 ec 10             	sub    esp,0x10
c000d533:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d537:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d53a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d53e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d542:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d546:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d54a:	e8 05 a5 01 00       	call   c0027a54 <__subdf3>
c000d54f:	83 c4 18             	add    esp,0x18
c000d552:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d556:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d55a:	52                   	push   edx
c000d55b:	50                   	push   eax
c000d55c:	e8 9f af 01 00       	call   c0028500 <lrint>
c000d561:	0f af f8             	imul   edi,eax
c000d564:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d568:	83 c4 10             	add    esp,0x10
c000d56b:	01 f8                	add    eax,edi
c000d56d:	99                   	cdq    
c000d56e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d571:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d574:	e9 fd fb ff ff       	jmp    c000d176 <sinc_stereo_vari_process+0x2b8>
c000d579:	83 c4 4c             	add    esp,0x4c
c000d57c:	89 d0                	mov    eax,edx
c000d57e:	5b                   	pop    ebx
c000d57f:	5e                   	pop    esi
c000d580:	5f                   	pop    edi
c000d581:	5d                   	pop    ebp
c000d582:	c3                   	ret    

c000d583 <sinc_mono_vari_process>:
c000d583:	55                   	push   ebp
c000d584:	ba 05 00 00 00       	mov    edx,0x5
c000d589:	57                   	push   edi
c000d58a:	56                   	push   esi
c000d58b:	53                   	push   ebx
c000d58c:	83 ec 4c             	sub    esp,0x4c
c000d58f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d593:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d597:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d59a:	85 db                	test   ebx,ebx
c000d59c:	0f 84 c1 06 00 00    	je     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5a2:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d5a5:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d5a8:	0f af c7             	imul   eax,edi
c000d5ab:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d5ae:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d5b1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d5b8:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d5bf:	0f af c7             	imul   eax,edi
c000d5c2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d5c5:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d5c9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d5cc:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d5d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d5d6:	68 00 00 70 3f       	push   0x3f700000
c000d5db:	6a 00                	push   0x0
c000d5dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e5:	e8 65 ad 01 00       	call   c002834f <__ltdf2>
c000d5ea:	83 c4 10             	add    esp,0x10
c000d5ed:	ba 16 00 00 00       	mov    edx,0x16
c000d5f2:	85 c0                	test   eax,eax
c000d5f4:	0f 88 69 06 00 00    	js     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5fa:	68 00 00 70 40       	push   0x40700000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d605:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d609:	e8 23 ad 01 00       	call   c0028331 <__gtdf2>
c000d60e:	83 c4 10             	add    esp,0x10
c000d611:	ba 16 00 00 00       	mov    edx,0x16
c000d616:	85 c0                	test   eax,eax
c000d618:	0f 8f 45 06 00 00    	jg     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d61e:	83 ec 0c             	sub    esp,0xc
c000d621:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d624:	e8 ba aa 01 00       	call   c00280e3 <__floatsidf>
c000d629:	83 c4 10             	add    esp,0x10
c000d62c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d630:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d634:	68 00 00 00 40       	push   0x40000000
c000d639:	6a 00                	push   0x0
c000d63b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d63f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d643:	e8 bb 9d 01 00       	call   c0027403 <__adddf3>
c000d648:	59                   	pop    ecx
c000d649:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d64d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d651:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d654:	e8 8a aa 01 00       	call   c00280e3 <__floatsidf>
c000d659:	83 c4 10             	add    esp,0x10
c000d65c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d660:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d664:	52                   	push   edx
c000d665:	50                   	push   eax
c000d666:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66e:	e8 f1 a6 01 00       	call   c0027d64 <__divdf3>
c000d673:	83 c4 10             	add    esp,0x10
c000d676:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d67a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d67e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d681:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d684:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d688:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d68c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d69c:	e8 90 ac 01 00       	call   c0028331 <__gtdf2>
c000d6a1:	83 c4 10             	add    esp,0x10
c000d6a4:	85 c0                	test   eax,eax
c000d6a6:	7e 2d                	jle    c000d6d5 <sinc_mono_vari_process+0x152>
c000d6a8:	68 00 00 f0 3f       	push   0x3ff00000
c000d6ad:	6a 00                	push   0x0
c000d6af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b7:	e8 93 ac 01 00       	call   c002834f <__ltdf2>
c000d6bc:	83 c4 10             	add    esp,0x10
c000d6bf:	85 c0                	test   eax,eax
c000d6c1:	79 4d                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d6cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6d3:	eb 1b                	jmp    c000d6f0 <sinc_mono_vari_process+0x16d>
c000d6d5:	68 00 00 f0 3f       	push   0x3ff00000
c000d6da:	6a 00                	push   0x0
c000d6dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e4:	e8 66 ac 01 00       	call   c002834f <__ltdf2>
c000d6e9:	83 c4 10             	add    esp,0x10
c000d6ec:	85 c0                	test   eax,eax
c000d6ee:	79 20                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d700:	e8 5f a6 01 00       	call   c0027d64 <__divdf3>
c000d705:	83 c4 10             	add    esp,0x10
c000d708:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d70c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d710:	50                   	push   eax
c000d711:	50                   	push   eax
c000d712:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d716:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d71a:	e8 e1 ad 01 00       	call   c0028500 <lrint>
c000d71f:	40                   	inc    eax
c000d720:	0f af c7             	imul   eax,edi
c000d723:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d727:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d72b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d72e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d731:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d735:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d739:	58                   	pop    eax
c000d73a:	5a                   	pop    edx
c000d73b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d73f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d743:	e8 b8 ad 01 00       	call   c0028500 <lrint>
c000d748:	83 ec 0c             	sub    esp,0xc
c000d74b:	50                   	push   eax
c000d74c:	e8 92 a9 01 00       	call   c00280e3 <__floatsidf>
c000d751:	83 c4 10             	add    esp,0x10
c000d754:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d758:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d75c:	52                   	push   edx
c000d75d:	50                   	push   eax
c000d75e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d762:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d766:	e8 e9 a2 01 00       	call   c0027a54 <__subdf3>
c000d76b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d76f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d773:	83 c4 20             	add    esp,0x20
c000d776:	6a 00                	push   0x0
c000d778:	6a 00                	push   0x0
c000d77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d782:	e8 c8 ab 01 00       	call   c002834f <__ltdf2>
c000d787:	83 c4 10             	add    esp,0x10
c000d78a:	85 c0                	test   eax,eax
c000d78c:	79 1f                	jns    c000d7ad <sinc_mono_vari_process+0x22a>
c000d78e:	68 00 00 f0 3f       	push   0x3ff00000
c000d793:	6a 00                	push   0x0
c000d795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d799:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d79d:	e8 61 9c 01 00       	call   c0027403 <__adddf3>
c000d7a2:	83 c4 10             	add    esp,0x10
c000d7a5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d7ad:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d7b0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d7b3:	83 ec 10             	sub    esp,0x10
c000d7b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c6:	e8 89 a2 01 00       	call   c0027a54 <__subdf3>
c000d7cb:	83 c4 18             	add    esp,0x18
c000d7ce:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d7d2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d7d6:	52                   	push   edx
c000d7d7:	50                   	push   eax
c000d7d8:	e8 23 ad 01 00       	call   c0028500 <lrint>
c000d7dd:	0f af f8             	imul   edi,eax
c000d7e0:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7e3:	31 ff                	xor    edi,edi
c000d7e5:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7ea:	99                   	cdq    
c000d7eb:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7ee:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f9:	55                   	push   ebp
c000d7fa:	57                   	push   edi
c000d7fb:	e8 64 a5 01 00       	call   c0027d64 <__divdf3>
c000d800:	83 c4 10             	add    esp,0x10
c000d803:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d807:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d80b:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d810:	68 23 42 92 0c       	push   0xc924223
c000d815:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d819:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d81d:	e8 e1 9b 01 00       	call   c0027403 <__adddf3>
c000d822:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d826:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d82a:	83 c4 20             	add    esp,0x20
c000d82d:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d831:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d835:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d838:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d83b:	7d 54                	jge    c000d891 <sinc_mono_vari_process+0x30e>
c000d83d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d840:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d843:	01 c8                	add    eax,ecx
c000d845:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d848:	99                   	cdq    
c000d849:	f7 f9                	idiv   ecx
c000d84b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d84f:	7d 0c                	jge    c000d85d <sinc_mono_vari_process+0x2da>
c000d851:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d854:	85 ff                	test   edi,edi
c000d856:	79 73                	jns    c000d8cb <sinc_mono_vari_process+0x348>
c000d858:	e9 ee 00 00 00       	jmp    c000d94b <sinc_mono_vari_process+0x3c8>
c000d85d:	50                   	push   eax
c000d85e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d862:	56                   	push   esi
c000d863:	53                   	push   ebx
c000d864:	e8 8d e0 ff ff       	call   c000b8f6 <prepare_data>
c000d869:	89 c2                	mov    edx,eax
c000d86b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d86f:	83 c4 10             	add    esp,0x10
c000d872:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d875:	85 d2                	test   edx,edx
c000d877:	0f 85 e6 03 00 00    	jne    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d87d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d880:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d883:	01 c8                	add    eax,ecx
c000d885:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d888:	99                   	cdq    
c000d889:	f7 f9                	idiv   ecx
c000d88b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d88f:	7c c0                	jl     c000d851 <sinc_mono_vari_process+0x2ce>
c000d891:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d895:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d899:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d89d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d8a0:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d8a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8a7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d8ab:	89 01                	mov    DWORD PTR [ecx],eax
c000d8ad:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d8b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d8b3:	99                   	cdq    
c000d8b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d8ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d8bd:	99                   	cdq    
c000d8be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8c1:	31 d2                	xor    edx,edx
c000d8c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d8c6:	e9 98 03 00 00       	jmp    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d8cb:	83 ec 0c             	sub    esp,0xc
c000d8ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d8d1:	e8 0d a8 01 00       	call   c00280e3 <__floatsidf>
c000d8d6:	83 c4 10             	add    esp,0x10
c000d8d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8f1:	e8 0d 9b 01 00       	call   c0027403 <__adddf3>
c000d8f6:	83 c4 10             	add    esp,0x10
c000d8f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8fd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d901:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d905:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d909:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d90d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d911:	e8 ed 9a 01 00       	call   c0027403 <__adddf3>
c000d916:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d919:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d91d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d921:	e8 bd a7 01 00       	call   c00280e3 <__floatsidf>
c000d926:	83 c4 10             	add    esp,0x10
c000d929:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d92d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d931:	52                   	push   edx
c000d932:	50                   	push   eax
c000d933:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d937:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d93b:	e8 f1 a9 01 00       	call   c0028331 <__gtdf2>
c000d940:	83 c4 10             	add    esp,0x10
c000d943:	85 c0                	test   eax,eax
c000d945:	0f 8f 46 ff ff ff    	jg     c000d891 <sinc_mono_vari_process+0x30e>
c000d94b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d94f:	0f 8e f5 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d955:	83 ec 10             	sub    esp,0x10
c000d958:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d95b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d95e:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d962:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d965:	ff 30                	push   DWORD PTR [eax]
c000d967:	e8 e8 a0 01 00       	call   c0027a54 <__subdf3>
c000d96c:	83 c4 18             	add    esp,0x18
c000d96f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d977:	52                   	push   edx
c000d978:	50                   	push   eax
c000d979:	e8 62 ab 01 00       	call   c00284e0 <fabs>
c000d97e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d982:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d986:	83 c4 10             	add    esp,0x10
c000d989:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d98e:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d99b:	e8 91 a9 01 00       	call   c0028331 <__gtdf2>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	85 c0                	test   eax,eax
c000d9a5:	0f 8e 9f 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d9ab:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d9af:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d9b2:	8b 00                	mov    eax,DWORD PTR [eax]
c000d9b4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d9b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d9bc:	52                   	push   edx
c000d9bd:	50                   	push   eax
c000d9be:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d9c1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d9c4:	e8 8b a0 01 00       	call   c0027a54 <__subdf3>
c000d9c9:	5f                   	pop    edi
c000d9ca:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9ce:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9d2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d9d5:	e8 09 a7 01 00       	call   c00280e3 <__floatsidf>
c000d9da:	83 c4 10             	add    esp,0x10
c000d9dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9e5:	52                   	push   edx
c000d9e6:	50                   	push   eax
c000d9e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9ef:	e8 8c a0 01 00       	call   c0027a80 <__muldf3>
c000d9f4:	5d                   	pop    ebp
c000d9f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9fd:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000da00:	e8 de a6 01 00       	call   c00280e3 <__floatsidf>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da0c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da10:	52                   	push   edx
c000da11:	50                   	push   eax
c000da12:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da16:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da1a:	e8 45 a3 01 00       	call   c0027d64 <__divdf3>
c000da1f:	83 c4 10             	add    esp,0x10
c000da22:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da26:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da32:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da36:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da3a:	e8 c4 99 01 00       	call   c0027403 <__adddf3>
c000da3f:	83 c4 10             	add    esp,0x10
c000da42:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da46:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da4a:	83 ec 0c             	sub    esp,0xc
c000da4d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da50:	e8 8e a6 01 00       	call   c00280e3 <__floatsidf>
c000da55:	83 c4 10             	add    esp,0x10
c000da58:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da5c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da70:	e8 da a8 01 00       	call   c002834f <__ltdf2>
c000da75:	83 c4 10             	add    esp,0x10
c000da78:	85 c0                	test   eax,eax
c000da7a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da7e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da82:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da86:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da8a:	78 10                	js     c000da9c <sinc_mono_vari_process+0x519>
c000da8c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da90:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da94:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da98:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da9c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daa8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daac:	e8 cf 9f 01 00       	call   c0027a80 <__muldf3>
c000dab1:	59                   	pop    ecx
c000dab2:	5f                   	pop    edi
c000dab3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dab7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dabb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dabf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dac3:	e8 07 de ff ff       	call   c000b8cf <double_to_fp>
c000dac8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dacc:	89 c7                	mov    edi,eax
c000dace:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dad2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dad6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dada:	e8 a1 9f 01 00       	call   c0027a80 <__muldf3>
c000dadf:	83 c4 18             	add    esp,0x18
c000dae2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dae6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000daea:	52                   	push   edx
c000daeb:	50                   	push   eax
c000daec:	e8 de dd ff ff       	call   c000b8cf <double_to_fp>
c000daf1:	83 ec 0c             	sub    esp,0xc
c000daf4:	89 c5                	mov    ebp,eax
c000daf6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000daf9:	e8 e5 a5 01 00       	call   c00280e3 <__floatsidf>
c000dafe:	83 c4 10             	add    esp,0x10
c000db01:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db05:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db09:	52                   	push   edx
c000db0a:	50                   	push   eax
c000db0b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db0f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db13:	e8 4c a2 01 00       	call   c0027d64 <__divdf3>
c000db18:	83 c4 10             	add    esp,0x10
c000db1b:	89 e9                	mov    ecx,ebp
c000db1d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db21:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db25:	89 d8                	mov    eax,ebx
c000db27:	89 fa                	mov    edx,edi
c000db29:	e8 ee bd ff ff       	call   c000991c <calc_output_single>
c000db2e:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000db31:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000db34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db38:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db3c:	52                   	push   edx
c000db3d:	50                   	push   eax
c000db3e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db42:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db46:	e8 35 9f 01 00       	call   c0027a80 <__muldf3>
c000db4b:	59                   	pop    ecx
c000db4c:	59                   	pop    ecx
c000db4d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db51:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db55:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	e8 f1 a7 01 00       	call   c0028353 <__truncdfsf2>
c000db62:	83 c4 10             	add    esp,0x10
c000db65:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db68:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db6f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db73:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db77:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db7b:	e8 e4 a1 01 00       	call   c0027d64 <__divdf3>
c000db80:	83 c4 10             	add    esp,0x10
c000db83:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db87:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db97:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9b:	e8 63 98 01 00       	call   c0027403 <__adddf3>
c000dba0:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000dba4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dba8:	83 c4 18             	add    esp,0x18
c000dbab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbb3:	e8 48 a9 01 00       	call   c0028500 <lrint>
c000dbb8:	83 ec 0c             	sub    esp,0xc
c000dbbb:	50                   	push   eax
c000dbbc:	e8 22 a5 01 00       	call   c00280e3 <__floatsidf>
c000dbc1:	83 c4 10             	add    esp,0x10
c000dbc4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dbc8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dbcc:	52                   	push   edx
c000dbcd:	50                   	push   eax
c000dbce:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd6:	e8 79 9e 01 00       	call   c0027a54 <__subdf3>
c000dbdb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dbdf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dbe3:	83 c4 20             	add    esp,0x20
c000dbe6:	6a 00                	push   0x0
c000dbe8:	6a 00                	push   0x0
c000dbea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbf2:	e8 58 a7 01 00       	call   c002834f <__ltdf2>
c000dbf7:	83 c4 10             	add    esp,0x10
c000dbfa:	85 c0                	test   eax,eax
c000dbfc:	79 20                	jns    c000dc1e <sinc_mono_vari_process+0x69b>
c000dbfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0e:	e8 f0 97 01 00       	call   c0027403 <__adddf3>
c000dc13:	83 c4 10             	add    esp,0x10
c000dc16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc1a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dc1e:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dc21:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dc24:	83 ec 10             	sub    esp,0x10
c000dc27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc33:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc37:	e8 18 9e 01 00       	call   c0027a54 <__subdf3>
c000dc3c:	83 c4 18             	add    esp,0x18
c000dc3f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc43:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc47:	52                   	push   edx
c000dc48:	50                   	push   eax
c000dc49:	e8 b2 a8 01 00       	call   c0028500 <lrint>
c000dc4e:	83 c4 10             	add    esp,0x10
c000dc51:	0f af f8             	imul   edi,eax
c000dc54:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc57:	99                   	cdq    
c000dc58:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc5b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc5e:	e9 d2 fb ff ff       	jmp    c000d835 <sinc_mono_vari_process+0x2b2>
c000dc63:	83 c4 4c             	add    esp,0x4c
c000dc66:	89 d0                	mov    eax,edx
c000dc68:	5b                   	pop    ebx
c000dc69:	5e                   	pop    esi
c000dc6a:	5f                   	pop    edi
c000dc6b:	5d                   	pop    ebp
c000dc6c:	c3                   	ret    

c000dc6d <sinc_get_name>:
c000dc6d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc71:	31 c0                	xor    eax,eax
c000dc73:	83 fa 02             	cmp    edx,0x2
c000dc76:	77 07                	ja     c000dc7f <sinc_get_name+0x12>
c000dc78:	8b 04 95 e4 9c 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd631c]
c000dc7f:	c3                   	ret    

c000dc80 <sinc_get_description>:
c000dc80:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc84:	31 c0                	xor    eax,eax
c000dc86:	83 fa 02             	cmp    edx,0x2
c000dc89:	77 07                	ja     c000dc92 <sinc_get_description+0x12>
c000dc8b:	8b 04 95 d8 9c 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6328]
c000dc92:	c3                   	ret    

c000dc93 <sinc_set_converter>:
c000dc93:	53                   	push   ebx
c000dc94:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc9a:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dca1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dca4:	85 c0                	test   eax,eax
c000dca6:	74 13                	je     c000dcbb <sinc_set_converter+0x28>
c000dca8:	83 ec 0c             	sub    esp,0xc
c000dcab:	50                   	push   eax
c000dcac:	e8 9f 1b 00 00       	call   c000f850 <free>
c000dcb1:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dcb8:	83 c4 10             	add    esp,0x10
c000dcbb:	50                   	push   eax
c000dcbc:	68 44 08 00 00       	push   0x844
c000dcc1:	6a 00                	push   0x0
c000dcc3:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dcc7:	50                   	push   eax
c000dcc8:	e8 ab 2a ff ff       	call   c0000778 <memset>
c000dccd:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dcd0:	83 c4 10             	add    esp,0x10
c000dcd3:	b8 0b 00 00 00       	mov    eax,0xb
c000dcd8:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dcde:	7f 6e                	jg     c000dd4e <sinc_set_converter+0xbb>
c000dce0:	83 fa 01             	cmp    edx,0x1
c000dce3:	75 10                	jne    c000dcf5 <sinc_set_converter+0x62>
c000dce5:	c7 43 24 83 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d583
c000dcec:	c7 43 20 83 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d583
c000dcf3:	eb 4d                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dcf5:	83 fa 02             	cmp    edx,0x2
c000dcf8:	75 10                	jne    c000dd0a <sinc_set_converter+0x77>
c000dcfa:	c7 43 24 be ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cebe
c000dd01:	c7 43 20 be ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cebe
c000dd08:	eb 38                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd0a:	83 fa 04             	cmp    edx,0x4
c000dd0d:	75 10                	jne    c000dd1f <sinc_set_converter+0x8c>
c000dd0f:	c7 43 24 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7f9
c000dd16:	c7 43 20 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7f9
c000dd1d:	eb 23                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd1f:	83 fa 06             	cmp    edx,0x6
c000dd22:	75 10                	jne    c000dd34 <sinc_set_converter+0xa1>
c000dd24:	c7 43 24 34 c1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c134
c000dd2b:	c7 43 20 34 c1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c134
c000dd32:	eb 0e                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd34:	c7 43 24 70 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba70
c000dd3b:	c7 43 20 70 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba70
c000dd42:	c7 43 28 23 ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad23
c000dd49:	b8 0a 00 00 00       	mov    eax,0xa
c000dd4e:	81 c4 58 08 00 00    	add    esp,0x858
c000dd54:	5b                   	pop    ebx
c000dd55:	c3                   	ret    

c000dd56 <zoh_vari_process>:
c000dd56:	55                   	push   ebp
c000dd57:	31 d2                	xor    edx,edx
c000dd59:	57                   	push   edi
c000dd5a:	56                   	push   esi
c000dd5b:	53                   	push   ebx
c000dd5c:	83 ec 3c             	sub    esp,0x3c
c000dd5f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd63:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd67:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd6b:	0f 8e 80 06 00 00    	jle    c000e3f1 <zoh_vari_process+0x69b>
c000dd71:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd74:	ba 05 00 00 00       	mov    edx,0x5
c000dd79:	85 db                	test   ebx,ebx
c000dd7b:	0f 84 70 06 00 00    	je     c000e3f1 <zoh_vari_process+0x69b>
c000dd81:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd84:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd88:	74 19                	je     c000dda3 <zoh_vari_process+0x4d>
c000dd8a:	31 d2                	xor    edx,edx
c000dd8c:	39 c2                	cmp    edx,eax
c000dd8e:	7d 0c                	jge    c000dd9c <zoh_vari_process+0x46>
c000dd90:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd92:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd95:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd99:	42                   	inc    edx
c000dd9a:	eb f0                	jmp    c000dd8c <zoh_vari_process+0x36>
c000dd9c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dda3:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dda6:	0f af d0             	imul   edx,eax
c000dda9:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000ddac:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000ddb0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000ddb7:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ddba:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000ddc1:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000ddc4:	8b 07                	mov    eax,DWORD PTR [edi]
c000ddc6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ddca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddce:	68 00 00 70 3f       	push   0x3f700000
c000ddd3:	6a 00                	push   0x0
c000ddd5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddd9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dddd:	e8 6d a5 01 00       	call   c002834f <__ltdf2>
c000dde2:	83 c4 10             	add    esp,0x10
c000dde5:	ba 16 00 00 00       	mov    edx,0x16
c000ddea:	85 c0                	test   eax,eax
c000ddec:	0f 88 ff 05 00 00    	js     c000e3f1 <zoh_vari_process+0x69b>
c000ddf2:	68 00 00 70 40       	push   0x40700000
c000ddf7:	6a 00                	push   0x0
c000ddf9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddfd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de01:	e8 2b a5 01 00       	call   c0028331 <__gtdf2>
c000de06:	83 c4 10             	add    esp,0x10
c000de09:	ba 16 00 00 00       	mov    edx,0x16
c000de0e:	85 c0                	test   eax,eax
c000de10:	0f 8f db 05 00 00    	jg     c000e3f1 <zoh_vari_process+0x69b>
c000de16:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000de19:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000de1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000de24:	68 00 00 f0 3f       	push   0x3ff00000
c000de29:	6a 00                	push   0x0
c000de2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de33:	e8 17 a5 01 00       	call   c002834f <__ltdf2>
c000de38:	83 c4 10             	add    esp,0x10
c000de3b:	85 c0                	test   eax,eax
c000de3d:	0f 89 da 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000de43:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de46:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de49:	0f 8d ce 01 00 00    	jge    c000e01d <zoh_vari_process+0x2c7>
c000de4f:	83 ec 0c             	sub    esp,0xc
c000de52:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de55:	e8 89 a2 01 00       	call   c00280e3 <__floatsidf>
c000de5a:	83 c4 10             	add    esp,0x10
c000de5d:	89 04 24             	mov    DWORD PTR [esp],eax
c000de60:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de6c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de70:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de74:	e8 07 9c 01 00       	call   c0027a80 <__muldf3>
c000de79:	59                   	pop    ecx
c000de7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de7e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de82:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de85:	e8 59 a2 01 00       	call   c00280e3 <__floatsidf>
c000de8a:	83 c4 10             	add    esp,0x10
c000de8d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de91:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de95:	52                   	push   edx
c000de96:	50                   	push   eax
c000de97:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9f:	e8 5f 95 01 00       	call   c0027403 <__adddf3>
c000dea4:	59                   	pop    ecx
c000dea5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dea9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dead:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000deb0:	e8 2e a2 01 00       	call   c00280e3 <__floatsidf>
c000deb5:	83 c4 10             	add    esp,0x10
c000deb8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000debc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dec0:	52                   	push   edx
c000dec1:	50                   	push   eax
c000dec2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dec6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deca:	e8 7e a4 01 00       	call   c002834d <__gedf2>
c000decf:	83 c4 10             	add    esp,0x10
c000ded2:	85 c0                	test   eax,eax
c000ded4:	0f 89 43 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000deda:	85 ed                	test   ebp,ebp
c000dedc:	0f 8e ec 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000dee2:	83 ec 10             	sub    esp,0x10
c000dee5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dee8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deeb:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deee:	ff 37                	push   DWORD PTR [edi]
c000def0:	e8 5f 9b 01 00       	call   c0027a54 <__subdf3>
c000def5:	83 c4 18             	add    esp,0x18
c000def8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000defc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df00:	52                   	push   edx
c000df01:	50                   	push   eax
c000df02:	e8 d9 a5 01 00       	call   c00284e0 <fabs>
c000df07:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df0b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000df0f:	83 c4 10             	add    esp,0x10
c000df12:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df17:	68 23 42 92 0c       	push   0xc924223
c000df1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df24:	e8 08 a4 01 00       	call   c0028331 <__gtdf2>
c000df29:	83 c4 10             	add    esp,0x10
c000df2c:	85 c0                	test   eax,eax
c000df2e:	0f 8e 9a 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000df34:	8b 07                	mov    eax,DWORD PTR [edi]
c000df36:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df39:	89 04 24             	mov    DWORD PTR [esp],eax
c000df3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df40:	52                   	push   edx
c000df41:	50                   	push   eax
c000df42:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df45:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df48:	e8 07 9b 01 00       	call   c0027a54 <__subdf3>
c000df4d:	59                   	pop    ecx
c000df4e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df52:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df56:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df59:	e8 85 a1 01 00       	call   c00280e3 <__floatsidf>
c000df5e:	83 c4 10             	add    esp,0x10
c000df61:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df65:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df69:	52                   	push   edx
c000df6a:	50                   	push   eax
c000df6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df73:	e8 08 9b 01 00       	call   c0027a80 <__muldf3>
c000df78:	5d                   	pop    ebp
c000df79:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df7d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df81:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df84:	e8 5a a1 01 00       	call   c00280e3 <__floatsidf>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df90:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df94:	52                   	push   edx
c000df95:	50                   	push   eax
c000df96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9e:	e8 c1 9d 01 00       	call   c0027d64 <__divdf3>
c000dfa3:	83 c4 10             	add    esp,0x10
c000dfa6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfaa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfbe:	e8 40 94 01 00       	call   c0027403 <__adddf3>
c000dfc3:	83 c4 10             	add    esp,0x10
c000dfc6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfce:	31 c0                	xor    eax,eax
c000dfd0:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dfd3:	7e 13                	jle    c000dfe8 <zoh_vari_process+0x292>
c000dfd5:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dfd9:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfdc:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfdf:	40                   	inc    eax
c000dfe0:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfe3:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfe6:	eb e8                	jmp    c000dfd0 <zoh_vari_process+0x27a>
c000dfe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dff0:	68 00 00 f0 3f       	push   0x3ff00000
c000dff5:	6a 00                	push   0x0
c000dff7:	e8 68 9d 01 00       	call   c0027d64 <__divdf3>
c000dffc:	83 c4 10             	add    esp,0x10
c000dfff:	89 04 24             	mov    DWORD PTR [esp],eax
c000e002:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e00c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e010:	e8 ee 93 01 00       	call   c0027403 <__adddf3>
c000e015:	83 c4 10             	add    esp,0x10
c000e018:	e9 ff fd ff ff       	jmp    c000de1c <zoh_vari_process+0xc6>
c000e01d:	55                   	push   ebp
c000e01e:	55                   	push   ebp
c000e01f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e023:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e027:	e8 d4 a4 01 00       	call   c0028500 <lrint>
c000e02c:	83 ec 0c             	sub    esp,0xc
c000e02f:	50                   	push   eax
c000e030:	e8 ae a0 01 00       	call   c00280e3 <__floatsidf>
c000e035:	83 c4 10             	add    esp,0x10
c000e038:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e03c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e040:	52                   	push   edx
c000e041:	50                   	push   eax
c000e042:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e046:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e04a:	e8 05 9a 01 00       	call   c0027a54 <__subdf3>
c000e04f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e053:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e057:	83 c4 20             	add    esp,0x20
c000e05a:	6a 00                	push   0x0
c000e05c:	6a 00                	push   0x0
c000e05e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e062:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e066:	e8 e4 a2 01 00       	call   c002834f <__ltdf2>
c000e06b:	83 c4 10             	add    esp,0x10
c000e06e:	85 c0                	test   eax,eax
c000e070:	79 1e                	jns    c000e090 <zoh_vari_process+0x33a>
c000e072:	68 00 00 f0 3f       	push   0x3ff00000
c000e077:	6a 00                	push   0x0
c000e079:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e07d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e081:	e8 7d 93 01 00       	call   c0027403 <__adddf3>
c000e086:	83 c4 10             	add    esp,0x10
c000e089:	89 04 24             	mov    DWORD PTR [esp],eax
c000e08c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e090:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e093:	83 ec 10             	sub    esp,0x10
c000e096:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a6:	e8 a9 99 01 00       	call   c0027a54 <__subdf3>
c000e0ab:	83 c4 18             	add    esp,0x18
c000e0ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0b6:	52                   	push   edx
c000e0b7:	50                   	push   eax
c000e0b8:	e8 43 a4 01 00       	call   c0028500 <lrint>
c000e0bd:	83 c4 10             	add    esp,0x10
c000e0c0:	0f af e8             	imul   ebp,eax
c000e0c3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e0c6:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e0c9:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e0cd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e0d0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e0d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0d7:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0da:	0f 8d 7a 02 00 00    	jge    c000e35a <zoh_vari_process+0x604>
c000e0e0:	83 ec 0c             	sub    esp,0xc
c000e0e3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0e6:	e8 f8 9f 01 00       	call   c00280e3 <__floatsidf>
c000e0eb:	83 c4 10             	add    esp,0x10
c000e0ee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0f2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0f6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e102:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e106:	e8 75 99 01 00       	call   c0027a80 <__muldf3>
c000e10b:	59                   	pop    ecx
c000e10c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e110:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e118:	e8 c6 9f 01 00       	call   c00280e3 <__floatsidf>
c000e11d:	83 c4 10             	add    esp,0x10
c000e120:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e124:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e128:	52                   	push   edx
c000e129:	50                   	push   eax
c000e12a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e12e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e132:	e8 cc 92 01 00       	call   c0027403 <__adddf3>
c000e137:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e13a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e13e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e142:	e8 9c 9f 01 00       	call   c00280e3 <__floatsidf>
c000e147:	83 c4 10             	add    esp,0x10
c000e14a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e14e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e152:	52                   	push   edx
c000e153:	50                   	push   eax
c000e154:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e158:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e15c:	e8 f0 a1 01 00       	call   c0028351 <__ledf2>
c000e161:	83 c4 10             	add    esp,0x10
c000e164:	85 c0                	test   eax,eax
c000e166:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e16a:	0f 8f ea 01 00 00    	jg     c000e35a <zoh_vari_process+0x604>
c000e170:	85 c9                	test   ecx,ecx
c000e172:	0f 8e ed 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e178:	83 ec 10             	sub    esp,0x10
c000e17b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e17e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e181:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e184:	ff 37                	push   DWORD PTR [edi]
c000e186:	e8 c9 98 01 00       	call   c0027a54 <__subdf3>
c000e18b:	83 c4 18             	add    esp,0x18
c000e18e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e192:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e196:	52                   	push   edx
c000e197:	50                   	push   eax
c000e198:	e8 43 a3 01 00       	call   c00284e0 <fabs>
c000e19d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e1a1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e1a5:	83 c4 10             	add    esp,0x10
c000e1a8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e1ad:	68 23 42 92 0c       	push   0xc924223
c000e1b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1ba:	e8 72 a1 01 00       	call   c0028331 <__gtdf2>
c000e1bf:	83 c4 10             	add    esp,0x10
c000e1c2:	85 c0                	test   eax,eax
c000e1c4:	0f 8e 9b 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e1ca:	8b 07                	mov    eax,DWORD PTR [edi]
c000e1cc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e1cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1d7:	52                   	push   edx
c000e1d8:	50                   	push   eax
c000e1d9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1dc:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1df:	e8 70 98 01 00       	call   c0027a54 <__subdf3>
c000e1e4:	5d                   	pop    ebp
c000e1e5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1e9:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1ed:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1f0:	e8 ee 9e 01 00       	call   c00280e3 <__floatsidf>
c000e1f5:	83 c4 10             	add    esp,0x10
c000e1f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1fc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e200:	52                   	push   edx
c000e201:	50                   	push   eax
c000e202:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e206:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e20a:	e8 71 98 01 00       	call   c0027a80 <__muldf3>
c000e20f:	59                   	pop    ecx
c000e210:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e214:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e218:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e21b:	e8 c3 9e 01 00       	call   c00280e3 <__floatsidf>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e227:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e22b:	52                   	push   edx
c000e22c:	50                   	push   eax
c000e22d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e231:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e235:	e8 2a 9b 01 00       	call   c0027d64 <__divdf3>
c000e23a:	83 c4 10             	add    esp,0x10
c000e23d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e241:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e245:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e249:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e24d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e255:	e8 a9 91 01 00       	call   c0027403 <__adddf3>
c000e25a:	83 c4 10             	add    esp,0x10
c000e25d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e261:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e265:	31 d2                	xor    edx,edx
c000e267:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e26a:	39 d0                	cmp    eax,edx
c000e26c:	7e 1d                	jle    c000e28b <zoh_vari_process+0x535>
c000e26e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e271:	29 c1                	sub    ecx,eax
c000e273:	89 c8                	mov    eax,ecx
c000e275:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e277:	01 d0                	add    eax,edx
c000e279:	42                   	inc    edx
c000e27a:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e27d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e280:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e283:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e286:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e289:	eb dc                	jmp    c000e267 <zoh_vari_process+0x511>
c000e28b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e28f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e293:	68 00 00 f0 3f       	push   0x3ff00000
c000e298:	6a 00                	push   0x0
c000e29a:	e8 c5 9a 01 00       	call   c0027d64 <__divdf3>
c000e29f:	83 c4 10             	add    esp,0x10
c000e2a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2aa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2ae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2ba:	e8 44 91 01 00       	call   c0027403 <__adddf3>
c000e2bf:	5d                   	pop    ebp
c000e2c0:	59                   	pop    ecx
c000e2c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2c5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2d1:	e8 2a a2 01 00       	call   c0028500 <lrint>
c000e2d6:	83 ec 0c             	sub    esp,0xc
c000e2d9:	50                   	push   eax
c000e2da:	e8 04 9e 01 00       	call   c00280e3 <__floatsidf>
c000e2df:	83 c4 10             	add    esp,0x10
c000e2e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2e6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2ea:	52                   	push   edx
c000e2eb:	50                   	push   eax
c000e2ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f4:	e8 5b 97 01 00       	call   c0027a54 <__subdf3>
c000e2f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e301:	83 c4 20             	add    esp,0x20
c000e304:	6a 00                	push   0x0
c000e306:	6a 00                	push   0x0
c000e308:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e30c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e310:	e8 3a a0 01 00       	call   c002834f <__ltdf2>
c000e315:	83 c4 10             	add    esp,0x10
c000e318:	85 c0                	test   eax,eax
c000e31a:	79 1e                	jns    c000e33a <zoh_vari_process+0x5e4>
c000e31c:	68 00 00 f0 3f       	push   0x3ff00000
c000e321:	6a 00                	push   0x0
c000e323:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e327:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e32b:	e8 d3 90 01 00       	call   c0027403 <__adddf3>
c000e330:	83 c4 10             	add    esp,0x10
c000e333:	89 04 24             	mov    DWORD PTR [esp],eax
c000e336:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e33a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e33d:	83 ec 10             	sub    esp,0x10
c000e340:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e344:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e348:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e34c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e350:	e8 ff 96 01 00       	call   c0027a54 <__subdf3>
c000e355:	e9 51 fd ff ff       	jmp    c000e0ab <zoh_vari_process+0x355>
c000e35a:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e35e:	7d 3a                	jge    c000e39a <zoh_vari_process+0x644>
c000e360:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e364:	83 ec 0c             	sub    esp,0xc
c000e367:	29 e8                	sub    eax,ebp
c000e369:	99                   	cdq    
c000e36a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e36d:	50                   	push   eax
c000e36e:	e8 70 9d 01 00       	call   c00280e3 <__floatsidf>
c000e373:	83 c4 10             	add    esp,0x10
c000e376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e37e:	52                   	push   edx
c000e37f:	50                   	push   eax
c000e380:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e384:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e388:	e8 76 90 01 00       	call   c0027403 <__adddf3>
c000e38d:	83 c4 10             	add    esp,0x10
c000e390:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e393:	89 04 24             	mov    DWORD PTR [esp],eax
c000e396:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e39a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e39d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e3a1:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e3a4:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e3a7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3aa:	85 c0                	test   eax,eax
c000e3ac:	7f 25                	jg     c000e3d3 <zoh_vari_process+0x67d>
c000e3ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e3b2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e3b6:	89 07                	mov    DWORD PTR [edi],eax
c000e3b8:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e3bb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3be:	99                   	cdq    
c000e3bf:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3c2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e3c5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e3c8:	99                   	cdq    
c000e3c9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3cc:	31 d2                	xor    edx,edx
c000e3ce:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e3d1:	eb 1e                	jmp    c000e3f1 <zoh_vari_process+0x69b>
c000e3d3:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e3d6:	31 d2                	xor    edx,edx
c000e3d8:	29 c8                	sub    eax,ecx
c000e3da:	c1 e0 02             	shl    eax,0x2
c000e3dd:	39 d1                	cmp    ecx,edx
c000e3df:	7e cd                	jle    c000e3ae <zoh_vari_process+0x658>
c000e3e1:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3e3:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3e7:	83 c0 04             	add    eax,0x4
c000e3ea:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3ee:	42                   	inc    edx
c000e3ef:	eb ec                	jmp    c000e3dd <zoh_vari_process+0x687>
c000e3f1:	83 c4 3c             	add    esp,0x3c
c000e3f4:	89 d0                	mov    eax,edx
c000e3f6:	5b                   	pop    ebx
c000e3f7:	5e                   	pop    esi
c000e3f8:	5f                   	pop    edi
c000e3f9:	5d                   	pop    ebp
c000e3fa:	c3                   	ret    

c000e3fb <zoh_reset>:
c000e3fb:	83 ec 0c             	sub    esp,0xc
c000e3fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e402:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e405:	85 c0                	test   eax,eax
c000e407:	74 20                	je     c000e429 <zoh_reset+0x2e>
c000e409:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e40c:	83 c0 1c             	add    eax,0x1c
c000e40f:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e412:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e419:	c1 e2 02             	shl    edx,0x2
c000e41c:	51                   	push   ecx
c000e41d:	52                   	push   edx
c000e41e:	6a 00                	push   0x0
c000e420:	50                   	push   eax
c000e421:	e8 52 23 ff ff       	call   c0000778 <memset>
c000e426:	83 c4 10             	add    esp,0x10
c000e429:	83 c4 0c             	add    esp,0xc
c000e42c:	c3                   	ret    

c000e42d <zoh_get_name>:
c000e42d:	31 c0                	xor    eax,eax
c000e42f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e434:	75 05                	jne    c000e43b <zoh_get_name+0xe>
c000e436:	b8 fe 9d 02 c0       	mov    eax,0xc0029dfe
c000e43b:	c3                   	ret    

c000e43c <zoh_get_description>:
c000e43c:	31 c0                	xor    eax,eax
c000e43e:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e443:	75 05                	jne    c000e44a <zoh_get_description+0xe>
c000e445:	b8 0f 9e 02 c0       	mov    eax,0xc0029e0f
c000e44a:	c3                   	ret    

c000e44b <zoh_set_converter>:
c000e44b:	53                   	push   ebx
c000e44c:	b8 0a 00 00 00       	mov    eax,0xa
c000e451:	83 ec 08             	sub    esp,0x8
c000e454:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e458:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e45d:	75 6e                	jne    c000e4cd <zoh_set_converter+0x82>
c000e45f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e462:	85 c0                	test   eax,eax
c000e464:	74 13                	je     c000e479 <zoh_set_converter+0x2e>
c000e466:	83 ec 0c             	sub    esp,0xc
c000e469:	50                   	push   eax
c000e46a:	e8 e1 13 00 00       	call   c000f850 <free>
c000e46f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e476:	83 c4 10             	add    esp,0x10
c000e479:	50                   	push   eax
c000e47a:	50                   	push   eax
c000e47b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e47e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e485:	50                   	push   eax
c000e486:	6a 01                	push   0x1
c000e488:	e8 e3 13 00 00       	call   c000f870 <calloc>
c000e48d:	83 c4 10             	add    esp,0x10
c000e490:	89 c2                	mov    edx,eax
c000e492:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e495:	85 d2                	test   edx,edx
c000e497:	b8 01 00 00 00       	mov    eax,0x1
c000e49c:	74 2f                	je     c000e4cd <zoh_set_converter+0x82>
c000e49e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e4a1:	83 ec 0c             	sub    esp,0xc
c000e4a4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e4a7:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e4ad:	c7 43 24 56 dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd56
c000e4b4:	c7 43 20 56 dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd56
c000e4bb:	c7 43 28 fb e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3fb
c000e4c2:	53                   	push   ebx
c000e4c3:	e8 33 ff ff ff       	call   c000e3fb <zoh_reset>
c000e4c8:	83 c4 10             	add    esp,0x10
c000e4cb:	31 c0                	xor    eax,eax
c000e4cd:	83 c4 08             	add    esp,0x8
c000e4d0:	5b                   	pop    ebx
c000e4d1:	c3                   	ret    

c000e4d2 <CPU::current()>:
c000e4d2:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c000e4d7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4dd:	90                   	nop
c000e4de:	c3                   	ret    

c000e4df <operator new(unsigned long)>:
c000e4df:	83 ec 0c             	sub    esp,0xc
c000e4e2:	83 ec 0c             	sub    esp,0xc
c000e4e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4e9:	e8 52 13 00 00       	call   c000f840 <malloc>
c000e4ee:	83 c4 10             	add    esp,0x10
c000e4f1:	83 c4 0c             	add    esp,0xc
c000e4f4:	c3                   	ret    

c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>:
c000e4f5:	83 ec 0c             	sub    esp,0xc
c000e4f8:	83 ec 08             	sub    esp,0x8
c000e4fb:	68 46 9e 02 c0       	push   0xc0029e46
c000e500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e504:	e8 b7 23 ff ff       	call   c00008c0 <strcmp>
c000e509:	83 c4 10             	add    esp,0x10
c000e50c:	85 c0                	test   eax,eax
c000e50e:	0f 94 c0             	sete   al
c000e511:	84 c0                	test   al,al
c000e513:	74 0a                	je     c000e51f <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e515:	b8 48 e2 02 c0       	mov    eax,0xc002e248
c000e51a:	e9 e3 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e51f:	83 ec 08             	sub    esp,0x8
c000e522:	68 4f 9e 02 c0       	push   0xc0029e4f
c000e527:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e52b:	e8 90 23 ff ff       	call   c00008c0 <strcmp>
c000e530:	83 c4 10             	add    esp,0x10
c000e533:	85 c0                	test   eax,eax
c000e535:	0f 94 c0             	sete   al
c000e538:	84 c0                	test   al,al
c000e53a:	74 0a                	je     c000e546 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e53c:	b8 7c 68 02 c0       	mov    eax,0xc002687c
c000e541:	e9 bc 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e546:	83 ec 08             	sub    esp,0x8
c000e549:	68 59 9e 02 c0       	push   0xc0029e59
c000e54e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e552:	e8 69 23 ff ff       	call   c00008c0 <strcmp>
c000e557:	83 c4 10             	add    esp,0x10
c000e55a:	85 c0                	test   eax,eax
c000e55c:	0f 94 c0             	sete   al
c000e55f:	84 c0                	test   al,al
c000e561:	74 0a                	je     c000e56d <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e563:	b8 b0 65 02 c0       	mov    eax,0xc00265b0
c000e568:	e9 95 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e56d:	83 ec 08             	sub    esp,0x8
c000e570:	68 62 9e 02 c0       	push   0xc0029e62
c000e575:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e579:	e8 42 23 ff ff       	call   c00008c0 <strcmp>
c000e57e:	83 c4 10             	add    esp,0x10
c000e581:	85 c0                	test   eax,eax
c000e583:	0f 94 c0             	sete   al
c000e586:	84 c0                	test   al,al
c000e588:	74 07                	je     c000e591 <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e58a:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c000e58f:	eb 71                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e591:	83 ec 08             	sub    esp,0x8
c000e594:	68 6c 9e 02 c0       	push   0xc0029e6c
c000e599:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59d:	e8 1e 23 ff ff       	call   c00008c0 <strcmp>
c000e5a2:	83 c4 10             	add    esp,0x10
c000e5a5:	85 c0                	test   eax,eax
c000e5a7:	0f 94 c0             	sete   al
c000e5aa:	84 c0                	test   al,al
c000e5ac:	74 07                	je     c000e5b5 <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5ae:	b8 fc 66 02 c0       	mov    eax,0xc00266fc
c000e5b3:	eb 4d                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b5:	83 ec 08             	sub    esp,0x8
c000e5b8:	68 75 9e 02 c0       	push   0xc0029e75
c000e5bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c1:	e8 fa 22 ff ff       	call   c00008c0 <strcmp>
c000e5c6:	83 c4 10             	add    esp,0x10
c000e5c9:	85 c0                	test   eax,eax
c000e5cb:	0f 94 c0             	sete   al
c000e5ce:	84 c0                	test   al,al
c000e5d0:	74 07                	je     c000e5d9 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e5d2:	b8 4c e2 02 c0       	mov    eax,0xc002e24c
c000e5d7:	eb 29                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5d9:	83 ec 08             	sub    esp,0x8
c000e5dc:	68 82 9e 02 c0       	push   0xc0029e82
c000e5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e5:	e8 d6 22 ff ff       	call   c00008c0 <strcmp>
c000e5ea:	83 c4 10             	add    esp,0x10
c000e5ed:	85 c0                	test   eax,eax
c000e5ef:	0f 94 c0             	sete   al
c000e5f2:	84 c0                	test   al,al
c000e5f4:	74 07                	je     c000e5fd <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e5f6:	b8 4d e2 02 c0       	mov    eax,0xc002e24d
c000e5fb:	eb 05                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5fd:	b8 00 00 00 00       	mov    eax,0x0
c000e602:	83 c4 0c             	add    esp,0xc
c000e605:	c3                   	ret    

c000e606 <Computer::close(int, int, void*)>:
c000e606:	57                   	push   edi
c000e607:	56                   	push   esi
c000e608:	53                   	push   ebx
c000e609:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e60d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e611:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e615:	83 ec 0c             	sub    esp,0xc
c000e618:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e61e:	e8 11 5d 00 00       	call   c0014334 <Device::closeAll()>
c000e623:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e629:	83 c4 10             	add    esp,0x10
c000e62c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e62e:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e632:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e63a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e63e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e642:	5b                   	pop    ebx
c000e643:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e646:	5e                   	pop    esi
c000e647:	5f                   	pop    edi
c000e648:	ff e0                	jmp    eax

c000e64a <Krnl::firstTask()>:
c000e64a:	53                   	push   ebx
c000e64b:	83 ec 14             	sub    esp,0x14
c000e64e:	fb                   	sti    
c000e64f:	68 3f 1b 00 00       	push   0x1b3f
c000e654:	e8 e7 11 00 00       	call   c000f840 <malloc>
c000e659:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e660:	89 c3                	mov    ebx,eax
c000e662:	ff 35 b4 17 03 c0    	push   DWORD PTR ds:0xc00317b4
c000e668:	68 8f 9e 02 c0       	push   0xc0029e8f
c000e66d:	6a 01                	push   0x1
c000e66f:	50                   	push   eax
c000e670:	e8 29 f4 00 00       	call   c001da9e <Process::Process(bool, char const*, Process*, char**)>
c000e675:	83 c4 20             	add    esp,0x20
c000e678:	68 ff 00 00 00       	push   0xff
c000e67d:	6a 00                	push   0x0
c000e67f:	68 d5 f1 00 c0       	push   0xc000f1d5
c000e684:	53                   	push   ebx
c000e685:	e8 14 f7 00 00       	call   c001dd9e <Process::createThread(void (*)(void*), void*, int)>
c000e68a:	6a 7a                	push   0x7a
c000e68c:	6a 00                	push   0x0
c000e68e:	68 fd e5 01 c0       	push   0xc001e5fd
c000e693:	ff 35 b4 17 03 c0    	push   DWORD PTR ds:0xc00317b4
c000e699:	e8 00 f7 00 00       	call   c001dd9e <Process::createThread(void (*)(void*), void*, int)>
c000e69e:	83 c4 20             	add    esp,0x20
c000e6a1:	a3 68 17 03 c0       	mov    ds:0xc0031768,eax
c000e6a6:	c6 05 4d e2 02 c0 01 	mov    BYTE PTR ds:0xc002e24d,0x1
c000e6ad:	e8 cb 02 01 00       	call   c001e97d <Vm::initialise8086()>
c000e6b2:	e8 65 4a 00 00       	call   c001311c <Fs::initVFS()>
c000e6b7:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c000e6bc:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e6c2:	8b 10                	mov    edx,DWORD PTR [eax]
c000e6c4:	6a 00                	push   0x0
c000e6c6:	6a 00                	push   0x0
c000e6c8:	6a 00                	push   0x0
c000e6ca:	50                   	push   eax
c000e6cb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e6ce:	e8 3f dd 00 00       	call   c001c412 <Sys::loadSyscalls()>
c000e6d3:	e8 62 bc 00 00       	call   c001a33a <Krnl::loadSystemEnv()>
c000e6d8:	83 c4 0c             	add    esp,0xc
c000e6db:	6a 3a                	push   0x3a
c000e6dd:	68 9c 9e 02 c0       	push   0xc0029e9c
c000e6e2:	68 a5 9e 02 c0       	push   0xc0029ea5
c000e6e7:	e8 74 c9 00 00       	call   c001b060 <Reg::readIntWithDefault(char*, char*, int)>
c000e6ec:	89 04 24             	mov    DWORD PTR [esp],eax
c000e6ef:	e8 10 55 00 00       	call   c0013c04 <User::loadClockSettings(int)>
c000e6f4:	58                   	pop    eax
c000e6f5:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c000e6fa:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e700:	e8 03 5c 00 00       	call   c0014308 <Device::loadDriversForAll()>
c000e705:	e8 76 b7 00 00       	call   c0019e80 <Krnl::startCPUs()>
c000e70a:	5a                   	pop    edx
c000e70b:	8b 1d 48 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e248
c000e711:	59                   	pop    ecx
c000e712:	6a 01                	push   0x1
c000e714:	68 ad 9e 02 c0       	push   0xc0029ead
c000e719:	e8 88 ee 00 00       	call   c001d5a6 <Thr::loadDLL(char const*, bool)>
c000e71e:	5a                   	pop    edx
c000e71f:	59                   	pop    ecx
c000e720:	53                   	push   ebx
c000e721:	50                   	push   eax
c000e722:	e8 ce f0 00 00       	call   c001d7f5 <Thr::executeDLL(unsigned long, void*)>
c000e727:	83 c4 10             	add    esp,0x10
c000e72a:	83 ec 0c             	sub    esp,0xc
c000e72d:	6a 02                	push   0x2
c000e72f:	e8 ce f9 00 00       	call   c001e102 <blockTask(TaskState)>
c000e734:	83 c4 10             	add    esp,0x10
c000e737:	eb f1                	jmp    c000e72a <Krnl::firstTask()+0xe0>
c000e739:	90                   	nop

c000e73a <Computer::Computer()>:
c000e73a:	83 ec 0c             	sub    esp,0xc
c000e73d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e741:	83 ec 08             	sub    esp,0x8
c000e744:	68 c9 9e 02 c0       	push   0xc0029ec9
c000e749:	50                   	push   eax
c000e74a:	e8 5f 5c 00 00       	call   c00143ae <Device::Device(char const*)>
c000e74f:	83 c4 10             	add    esp,0x10
c000e752:	ba 68 a0 02 c0       	mov    edx,0xc002a068
c000e757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e75b:	89 10                	mov    DWORD PTR [eax],edx
c000e75d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e761:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e76b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e76f:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e779:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e77d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e783:	83 ca 04             	or     edx,0x4
c000e786:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e78c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e790:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e796:	0f b6 d0             	movzx  edx,al
c000e799:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e79d:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e7a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ae:	0f b6 d0             	movzx  edx,al
c000e7b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7b5:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e7ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7be:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7c4:	8d 50 01             	lea    edx,[eax+0x1]
c000e7c7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e7cb:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e7d1:	0f b6 d0             	movzx  edx,al
c000e7d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7d8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e7dc:	83 e1 3f             	and    ecx,0x3f
c000e7df:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e7e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ed:	0f b6 d0             	movzx  edx,al
c000e7f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f4:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e7fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ff:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e805:	0f b6 d0             	movzx  edx,al
c000e808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80c:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e815:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e81b:	8d 50 01             	lea    edx,[eax+0x1]
c000e81e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e822:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e828:	0f b6 d0             	movzx  edx,al
c000e82b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e82f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e833:	83 e1 3f             	and    ecx,0x3f
c000e836:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e83e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e844:	0f b6 d0             	movzx  edx,al
c000e847:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e84b:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e856:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e85c:	0f b6 d0             	movzx  edx,al
c000e85f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e863:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e86c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e872:	8d 50 01             	lea    edx,[eax+0x1]
c000e875:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e879:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e87f:	0f b6 d0             	movzx  edx,al
c000e882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e886:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e88a:	83 e1 3f             	and    ecx,0x3f
c000e88d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e891:	90                   	nop
c000e892:	83 c4 0c             	add    esp,0xc
c000e895:	c3                   	ret    

c000e896 <Computer::setBootMessage(char const*)>:
c000e896:	c3                   	ret    
c000e897:	90                   	nop

c000e898 <Computer::detectFeatures()>:
c000e898:	55                   	push   ebp
c000e899:	57                   	push   edi
c000e89a:	56                   	push   esi
c000e89b:	53                   	push   ebx
c000e89c:	83 ec 1c             	sub    esp,0x1c
c000e89f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e8a3:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e8ad:	e8 32 1a ff ff       	call   c00002e4 <detectCPUID>
c000e8b2:	85 c0                	test   eax,eax
c000e8b4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8ba:	0f 95 c2             	setne  dl
c000e8bd:	83 e0 fd             	and    eax,0xfffffffd
c000e8c0:	d1 e2                	shl    edx,1
c000e8c2:	09 d0                	or     eax,edx
c000e8c4:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8ca:	a8 02                	test   al,0x2
c000e8cc:	75 46                	jne    c000e914 <Computer::detectFeatures()+0x7c>
c000e8ce:	f6 05 61 e2 02 c0 04 	test   BYTE PTR ds:0xc002e261,0x4
c000e8d5:	74 07                	je     c000e8de <Computer::detectFeatures()+0x46>
c000e8d7:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e8de:	e8 63 7c 01 00       	call   c0026546 <x87Detect>
c000e8e3:	83 e0 01             	and    eax,0x1
c000e8e6:	c1 e0 04             	shl    eax,0x4
c000e8e9:	88 c2                	mov    dl,al
c000e8eb:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8f1:	83 e0 ef             	and    eax,0xffffffef
c000e8f4:	09 d0                	or     eax,edx
c000e8f6:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8fc:	a8 10                	test   al,0x10
c000e8fe:	0f 85 2a 01 00 00    	jne    c000ea2e <Computer::detectFeatures()+0x196>
c000e904:	84 c0                	test   al,al
c000e906:	0f 88 45 01 00 00    	js     c000ea51 <Computer::detectFeatures()+0x1b9>
c000e90c:	83 c4 1c             	add    esp,0x1c
c000e90f:	5b                   	pop    ebx
c000e910:	5e                   	pop    esi
c000e911:	5f                   	pop    edi
c000e912:	5d                   	pop    ebp
c000e913:	c3                   	ret    
c000e914:	83 ec 0c             	sub    esp,0xc
c000e917:	6a 20                	push   0x20
c000e919:	e8 74 a2 00 00       	call   c0018b92 <CPU::cpuidCheckEDX(unsigned int)>
c000e91e:	83 e0 01             	and    eax,0x1
c000e921:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e928:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e92e:	83 e0 f7             	and    eax,0xfffffff7
c000e931:	09 d0                	or     eax,edx
c000e933:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e939:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e940:	e8 4d a2 00 00       	call   c0018b92 <CPU::cpuidCheckEDX(unsigned int)>
c000e945:	83 e0 01             	and    eax,0x1
c000e948:	88 c2                	mov    dl,al
c000e94a:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e950:	83 e0 fe             	and    eax,0xfffffffe
c000e953:	09 d0                	or     eax,edx
c000e955:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e95b:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e962:	e8 2b a2 00 00       	call   c0018b92 <CPU::cpuidCheckEDX(unsigned int)>
c000e967:	c1 e0 07             	shl    eax,0x7
c000e96a:	88 c2                	mov    dl,al
c000e96c:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e972:	83 e0 7f             	and    eax,0x7f
c000e975:	09 d0                	or     eax,edx
c000e977:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e97d:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e984:	e8 09 a2 00 00       	call   c0018b92 <CPU::cpuidCheckEDX(unsigned int)>
c000e989:	83 c4 10             	add    esp,0x10
c000e98c:	83 e0 01             	and    eax,0x1
c000e98f:	c1 e0 05             	shl    eax,0x5
c000e992:	88 c2                	mov    dl,al
c000e994:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e99a:	83 e0 df             	and    eax,0xffffffdf
c000e99d:	09 d0                	or     eax,edx
c000e99f:	f7 05 60 e2 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002e260,0x401
c000e9a9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9af:	0f 84 c2 00 00 00    	je     c000ea77 <Computer::detectFeatures()+0x1df>
c000e9b5:	83 e0 fe             	and    eax,0xfffffffe
c000e9b8:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9be:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9c4:	88 c2                	mov    dl,al
c000e9c6:	83 e2 09             	and    edx,0x9
c000e9c9:	fe ca                	dec    dl
c000e9cb:	75 09                	jne    c000e9d6 <Computer::detectFeatures()+0x13e>
c000e9cd:	83 e0 fe             	and    eax,0xfffffffe
c000e9d0:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9d6:	83 ec 0c             	sub    esp,0xc
c000e9d9:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e9dd:	50                   	push   eax
c000e9de:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e9e2:	55                   	push   ebp
c000e9e3:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e9e7:	57                   	push   edi
c000e9e8:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e9ec:	56                   	push   esi
c000e9ed:	68 00 00 00 80       	push   0x80000000
c000e9f2:	e8 17 a1 00 00       	call   c0018b0e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e9f7:	83 c4 20             	add    esp,0x20
c000e9fa:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea01:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ea05:	0f 86 c3 fe ff ff    	jbe    c000e8ce <Computer::detectFeatures()+0x36>
c000ea0b:	83 ec 0c             	sub    esp,0xc
c000ea0e:	50                   	push   eax
c000ea0f:	55                   	push   ebp
c000ea10:	57                   	push   edi
c000ea11:	56                   	push   esi
c000ea12:	68 01 00 00 80       	push   0x80000001
c000ea17:	e8 f2 a0 00 00       	call   c0018b0e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea1c:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000ea26:	83 c4 20             	add    esp,0x20
c000ea29:	e9 a0 fe ff ff       	jmp    c000e8ce <Computer::detectFeatures()+0x36>
c000ea2e:	e8 cd 7a 01 00       	call   c0026500 <absolutelyNoChanceInHell>
c000ea33:	88 c2                	mov    dl,al
c000ea35:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea3b:	c1 e2 07             	shl    edx,0x7
c000ea3e:	83 e0 7f             	and    eax,0x7f
c000ea41:	09 d0                	or     eax,edx
c000ea43:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea49:	84 c0                	test   al,al
c000ea4b:	0f 89 bb fe ff ff    	jns    c000e90c <Computer::detectFeatures()+0x74>
c000ea51:	e8 8a 7a 01 00       	call   c00264e0 <avxDetect>
c000ea56:	83 e0 01             	and    eax,0x1
c000ea59:	c1 e0 05             	shl    eax,0x5
c000ea5c:	88 c2                	mov    dl,al
c000ea5e:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea64:	83 e0 df             	and    eax,0xffffffdf
c000ea67:	09 d0                	or     eax,edx
c000ea69:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea6f:	83 c4 1c             	add    esp,0x1c
c000ea72:	5b                   	pop    ebx
c000ea73:	5e                   	pop    esi
c000ea74:	5f                   	pop    edi
c000ea75:	5d                   	pop    ebp
c000ea76:	c3                   	ret    
c000ea77:	83 ec 0c             	sub    esp,0xc
c000ea7a:	68 00 02 00 00       	push   0x200
c000ea7f:	e8 0e a1 00 00       	call   c0018b92 <CPU::cpuidCheckEDX(unsigned int)>
c000ea84:	83 c4 10             	add    esp,0x10
c000ea87:	83 e0 01             	and    eax,0x1
c000ea8a:	88 c2                	mov    dl,al
c000ea8c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea92:	83 e0 fe             	and    eax,0xfffffffe
c000ea95:	09 d0                	or     eax,edx
c000ea97:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea9d:	e9 1c ff ff ff       	jmp    c000e9be <Computer::detectFeatures()+0x126>

c000eaa2 <Computer::displayFeatures()>:
c000eaa2:	53                   	push   ebx
c000eaa3:	83 ec 14             	sub    esp,0x14
c000eaa6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eaaa:	68 d9 9e 02 c0       	push   0xc0029ed9
c000eaaf:	e8 e4 42 00 00       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c000eab4:	83 c4 10             	add    esp,0x10
c000eab7:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eabe:	0f 85 73 02 00 00    	jne    c000ed37 <Computer::displayFeatures()+0x295>
c000eac4:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c000eac9:	83 ec 08             	sub    esp,0x8
c000eacc:	50                   	push   eax
c000eacd:	68 ec 9e 02 c0       	push   0xc0029eec
c000ead2:	e8 c1 42 00 00       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c000ead7:	83 c4 10             	add    esp,0x10
c000eada:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000eae1:	0f 85 8c 02 00 00    	jne    c000ed73 <Computer::displayFeatures()+0x2d1>
c000eae7:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c000eaec:	83 ec 08             	sub    esp,0x8
c000eaef:	50                   	push   eax
c000eaf0:	68 fd 9e 02 c0       	push   0xc0029efd
c000eaf5:	e8 9e 42 00 00       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c000eafa:	83 c4 10             	add    esp,0x10
c000eafd:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000eb04:	0f 85 5f 02 00 00    	jne    c000ed69 <Computer::displayFeatures()+0x2c7>
c000eb0a:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c000eb0f:	83 ec 08             	sub    esp,0x8
c000eb12:	50                   	push   eax
c000eb13:	68 0e 9f 02 c0       	push   0xc0029f0e
c000eb18:	e8 7b 42 00 00       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c000eb1d:	83 c4 10             	add    esp,0x10
c000eb20:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000eb27:	0f 85 32 02 00 00    	jne    c000ed5f <Computer::displayFeatures()+0x2bd>
c000eb2d:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c000eb32:	83 ec 08             	sub    esp,0x8
c000eb35:	50                   	push   eax
c000eb36:	68 1f 9f 02 c0       	push   0xc0029f1f
c000eb3b:	e8 58 42 00 00       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c000eb40:	83 c4 10             	add    esp,0x10
c000eb43:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000eb4a:	0f 85 05 02 00 00    	jne    c000ed55 <Computer::displayFeatures()+0x2b3>
c000eb50:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c000eb55:	83 ec 08             	sub    esp,0x8
c000eb58:	50                   	push   eax
c000eb59:	68 30 9f 02 c0       	push   0xc0029f30
c000eb5e:	e8 35 42 00 00       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c000eb63:	83 c4 10             	add    esp,0x10
c000eb66:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000eb6d:	0f 85 d8 01 00 00    	jne    c000ed4b <Computer::displayFeatures()+0x2a9>
c000eb73:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c000eb78:	83 ec 08             	sub    esp,0x8
c000eb7b:	50                   	push   eax
c000eb7c:	68 41 9f 02 c0       	push   0xc0029f41
c000eb81:	e8 12 42 00 00       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c000eb86:	83 c4 10             	add    esp,0x10
c000eb89:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000eb90:	0f 85 ab 01 00 00    	jne    c000ed41 <Computer::displayFeatures()+0x29f>
c000eb96:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c000eb9b:	83 ec 08             	sub    esp,0x8
c000eb9e:	50                   	push   eax
c000eb9f:	68 52 9f 02 c0       	push   0xc0029f52
c000eba4:	e8 ef 41 00 00       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c000eba9:	83 c4 10             	add    esp,0x10
c000ebac:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ebb3:	0f 88 1b 02 00 00    	js     c000edd4 <Computer::displayFeatures()+0x332>
c000ebb9:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c000ebbe:	83 ec 08             	sub    esp,0x8
c000ebc1:	50                   	push   eax
c000ebc2:	68 63 9f 02 c0       	push   0xc0029f63
c000ebc7:	e8 cc 41 00 00       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c000ebcc:	83 c4 10             	add    esp,0x10
c000ebcf:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ebd6:	0f 85 a1 01 00 00    	jne    c000ed7d <Computer::displayFeatures()+0x2db>
c000ebdc:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c000ebe1:	83 ec 08             	sub    esp,0x8
c000ebe4:	50                   	push   eax
c000ebe5:	68 74 9f 02 c0       	push   0xc0029f74
c000ebea:	e8 a9 41 00 00       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c000ebef:	83 c4 10             	add    esp,0x10
c000ebf2:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ebf9:	0f 85 cb 01 00 00    	jne    c000edca <Computer::displayFeatures()+0x328>
c000ebff:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c000ec04:	83 ec 08             	sub    esp,0x8
c000ec07:	50                   	push   eax
c000ec08:	68 85 9f 02 c0       	push   0xc0029f85
c000ec0d:	e8 86 41 00 00       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c000ec12:	83 c4 10             	add    esp,0x10
c000ec15:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ec1c:	0f 85 9e 01 00 00    	jne    c000edc0 <Computer::displayFeatures()+0x31e>
c000ec22:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c000ec27:	83 ec 08             	sub    esp,0x8
c000ec2a:	50                   	push   eax
c000ec2b:	68 96 9f 02 c0       	push   0xc0029f96
c000ec30:	e8 63 41 00 00       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c000ec35:	83 c4 10             	add    esp,0x10
c000ec38:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ec3f:	0f 85 71 01 00 00    	jne    c000edb6 <Computer::displayFeatures()+0x314>
c000ec45:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c000ec4a:	83 ec 08             	sub    esp,0x8
c000ec4d:	50                   	push   eax
c000ec4e:	68 a7 9f 02 c0       	push   0xc0029fa7
c000ec53:	e8 40 41 00 00       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c000ec58:	83 c4 10             	add    esp,0x10
c000ec5b:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ec62:	0f 85 44 01 00 00    	jne    c000edac <Computer::displayFeatures()+0x30a>
c000ec68:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c000ec6d:	83 ec 08             	sub    esp,0x8
c000ec70:	50                   	push   eax
c000ec71:	68 b8 9f 02 c0       	push   0xc0029fb8
c000ec76:	e8 1d 41 00 00       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c000ec7b:	83 c4 10             	add    esp,0x10
c000ec7e:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000ec85:	0f 85 17 01 00 00    	jne    c000eda2 <Computer::displayFeatures()+0x300>
c000ec8b:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c000ec90:	83 ec 08             	sub    esp,0x8
c000ec93:	50                   	push   eax
c000ec94:	68 c9 9f 02 c0       	push   0xc0029fc9
c000ec99:	e8 fa 40 00 00       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c000ec9e:	83 c4 10             	add    esp,0x10
c000eca1:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000eca8:	0f 85 ea 00 00 00    	jne    c000ed98 <Computer::displayFeatures()+0x2f6>
c000ecae:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c000ecb3:	83 ec 08             	sub    esp,0x8
c000ecb6:	50                   	push   eax
c000ecb7:	68 da 9f 02 c0       	push   0xc0029fda
c000ecbc:	e8 d7 40 00 00       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c000ecc1:	83 c4 10             	add    esp,0x10
c000ecc4:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000eccb:	0f 88 0d 01 00 00    	js     c000edde <Computer::displayFeatures()+0x33c>
c000ecd1:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c000ecd6:	83 ec 08             	sub    esp,0x8
c000ecd9:	50                   	push   eax
c000ecda:	68 eb 9f 02 c0       	push   0xc0029feb
c000ecdf:	e8 b4 40 00 00       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c000ece4:	83 c4 10             	add    esp,0x10
c000ece7:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ecee:	0f 85 9a 00 00 00    	jne    c000ed8e <Computer::displayFeatures()+0x2ec>
c000ecf4:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c000ecf9:	83 ec 08             	sub    esp,0x8
c000ecfc:	50                   	push   eax
c000ecfd:	68 fc 9f 02 c0       	push   0xc0029ffc
c000ed02:	e8 91 40 00 00       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c000ed07:	83 c4 10             	add    esp,0x10
c000ed0a:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000ed11:	75 74                	jne    c000ed87 <Computer::displayFeatures()+0x2e5>
c000ed13:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c000ed18:	83 ec 08             	sub    esp,0x8
c000ed1b:	50                   	push   eax
c000ed1c:	68 0d a0 02 c0       	push   0xc002a00d
c000ed21:	e8 72 40 00 00       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c000ed26:	c7 44 24 20 30 b9 02 c0 	mov    DWORD PTR [esp+0x20],0xc002b930
c000ed2e:	83 c4 18             	add    esp,0x18
c000ed31:	5b                   	pop    ebx
c000ed32:	e9 61 40 00 00       	jmp    c0012d98 <Dbg::kprintf(char const*, ...)>
c000ed37:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c000ed3c:	e9 88 fd ff ff       	jmp    c000eac9 <Computer::displayFeatures()+0x27>
c000ed41:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c000ed46:	e9 50 fe ff ff       	jmp    c000eb9b <Computer::displayFeatures()+0xf9>
c000ed4b:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c000ed50:	e9 23 fe ff ff       	jmp    c000eb78 <Computer::displayFeatures()+0xd6>
c000ed55:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c000ed5a:	e9 f6 fd ff ff       	jmp    c000eb55 <Computer::displayFeatures()+0xb3>
c000ed5f:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c000ed64:	e9 c9 fd ff ff       	jmp    c000eb32 <Computer::displayFeatures()+0x90>
c000ed69:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c000ed6e:	e9 9c fd ff ff       	jmp    c000eb0f <Computer::displayFeatures()+0x6d>
c000ed73:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c000ed78:	e9 6f fd ff ff       	jmp    c000eaec <Computer::displayFeatures()+0x4a>
c000ed7d:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c000ed82:	e9 5a fe ff ff       	jmp    c000ebe1 <Computer::displayFeatures()+0x13f>
c000ed87:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c000ed8c:	eb 8a                	jmp    c000ed18 <Computer::displayFeatures()+0x276>
c000ed8e:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c000ed93:	e9 61 ff ff ff       	jmp    c000ecf9 <Computer::displayFeatures()+0x257>
c000ed98:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c000ed9d:	e9 11 ff ff ff       	jmp    c000ecb3 <Computer::displayFeatures()+0x211>
c000eda2:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c000eda7:	e9 e4 fe ff ff       	jmp    c000ec90 <Computer::displayFeatures()+0x1ee>
c000edac:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c000edb1:	e9 b7 fe ff ff       	jmp    c000ec6d <Computer::displayFeatures()+0x1cb>
c000edb6:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c000edbb:	e9 8a fe ff ff       	jmp    c000ec4a <Computer::displayFeatures()+0x1a8>
c000edc0:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c000edc5:	e9 5d fe ff ff       	jmp    c000ec27 <Computer::displayFeatures()+0x185>
c000edca:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c000edcf:	e9 30 fe ff ff       	jmp    c000ec04 <Computer::displayFeatures()+0x162>
c000edd4:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c000edd9:	e9 e0 fd ff ff       	jmp    c000ebbe <Computer::displayFeatures()+0x11c>
c000edde:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c000ede3:	e9 ee fe ff ff       	jmp    c000ecd6 <Computer::displayFeatures()+0x234>

c000ede8 <Computer::rdmsr(unsigned int)>:
c000ede8:	83 ec 0c             	sub    esp,0xc
c000edeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000edef:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000edf6:	74 0a                	je     c000ee02 <Computer::rdmsr(unsigned int)+0x1a>
c000edf8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000edfc:	0f 32                	rdmsr  
c000edfe:	83 c4 0c             	add    esp,0xc
c000ee01:	c3                   	ret    
c000ee02:	83 ec 0c             	sub    esp,0xc
c000ee05:	68 1e a0 02 c0       	push   0xc002a01e
c000ee0a:	e8 64 b6 00 00       	call   c001a473 <Krnl::panic(char const*)>
c000ee0f:	83 c4 10             	add    esp,0x10
c000ee12:	eb e4                	jmp    c000edf8 <Computer::rdmsr(unsigned int)+0x10>

c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ee14:	57                   	push   edi
c000ee15:	56                   	push   esi
c000ee16:	52                   	push   edx
c000ee17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee1b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ee1f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ee23:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee2a:	74 0e                	je     c000ee3a <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ee2c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee30:	89 f0                	mov    eax,esi
c000ee32:	89 fa                	mov    edx,edi
c000ee34:	0f 30                	wrmsr  
c000ee36:	58                   	pop    eax
c000ee37:	5e                   	pop    esi
c000ee38:	5f                   	pop    edi
c000ee39:	c3                   	ret    
c000ee3a:	83 ec 0c             	sub    esp,0xc
c000ee3d:	68 24 a0 02 c0       	push   0xc002a024
c000ee42:	e8 2c b6 00 00       	call   c001a473 <Krnl::panic(char const*)>
c000ee47:	83 c4 10             	add    esp,0x10
c000ee4a:	eb e0                	jmp    c000ee2c <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ee4c <Computer::nmiEnabled()>:
c000ee4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee50:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ee56:	c3                   	ret    
c000ee57:	90                   	nop

c000ee58 <Computer::readCMOS(unsigned char)>:
c000ee58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee5c:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ee63:	19 c0                	sbb    eax,eax
c000ee65:	83 e0 80             	and    eax,0xffffff80
c000ee68:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ee6c:	e6 70                	out    0x70,al
c000ee6e:	e4 71                	in     al,0x71
c000ee70:	c3                   	ret    
c000ee71:	90                   	nop

c000ee72 <Computer::enableNMI(bool)>:
c000ee72:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ee76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee7a:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ee80:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ee88:	eb ce                	jmp    c000ee58 <Computer::readCMOS(unsigned char)>

c000ee8a <Computer::open(int, int, void*)>:
c000ee8a:	56                   	push   esi
c000ee8b:	53                   	push   ebx
c000ee8c:	83 ec 10             	sub    esp,0x10
c000ee8f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ee93:	f6 05 60 e2 02 c0 04 	test   BYTE PTR ds:0xc002e260,0x4
c000ee9a:	68 68 12 00 00       	push   0x1268
c000ee9f:	0f 94 05 84 d1 02 c0 	sete   BYTE PTR ds:0xc002d184
c000eea6:	e8 95 09 00 00       	call   c000f840 <malloc>
c000eeab:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeae:	89 c6                	mov    esi,eax
c000eeb0:	e8 a9 91 00 00       	call   c001805e <ACPI::ACPI()>
c000eeb5:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000eebb:	58                   	pop    eax
c000eebc:	5a                   	pop    edx
c000eebd:	56                   	push   esi
c000eebe:	53                   	push   ebx
c000eebf:	e8 fa 52 00 00       	call   c00141be <Device::addChild(Device*)>
c000eec4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eec7:	e8 cc f9 ff ff       	call   c000e898 <Computer::detectFeatures()>
c000eecc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eecf:	e8 ce fb ff ff       	call   c000eaa2 <Computer::displayFeatures()>
c000eed4:	59                   	pop    ecx
c000eed5:	5e                   	pop    esi
c000eed6:	6a 01                	push   0x1
c000eed8:	53                   	push   ebx
c000eed9:	e8 94 ff ff ff       	call   c000ee72 <Computer::enableNMI(bool)>
c000eede:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000eee5:	e8 56 09 00 00       	call   c000f840 <malloc>
c000eeea:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeed:	89 c6                	mov    esi,eax
c000eeef:	e8 56 9d 00 00       	call   c0018c4a <CPU::CPU()>
c000eef4:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000eefa:	58                   	pop    eax
c000eefb:	5a                   	pop    edx
c000eefc:	56                   	push   esi
c000eefd:	53                   	push   ebx
c000eefe:	e8 bb 52 00 00       	call   c00141be <Device::addChild(Device*)>
c000ef03:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ef09:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef0b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef0f:	6a 00                	push   0x0
c000ef11:	6a 00                	push   0x0
c000ef13:	50                   	push   eax
c000ef14:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef17:	83 c4 20             	add    esp,0x20
c000ef1a:	e8 25 58 00 00       	call   c0014744 <setupFPU()>
c000ef1f:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ef25:	85 c0                	test   eax,eax
c000ef27:	74 1f                	je     c000ef48 <Computer::open(int, int, void*)+0xbe>
c000ef29:	83 ec 08             	sub    esp,0x8
c000ef2c:	50                   	push   eax
c000ef2d:	53                   	push   ebx
c000ef2e:	e8 8b 52 00 00       	call   c00141be <Device::addChild(Device*)>
c000ef33:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ef39:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef3b:	6a 00                	push   0x0
c000ef3d:	6a 00                	push   0x0
c000ef3f:	6a 00                	push   0x0
c000ef41:	50                   	push   eax
c000ef42:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef45:	83 c4 20             	add    esp,0x20
c000ef48:	83 ec 0c             	sub    esp,0xc
c000ef4b:	68 4a e6 00 c0       	push   0xc000e64a
c000ef50:	e8 49 ef 00 00       	call   c001de9e <setupMultitasking(void (*)())>
c000ef55:	83 c4 14             	add    esp,0x14
c000ef58:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef5d:	5b                   	pop    ebx
c000ef5e:	5e                   	pop    esi
c000ef5f:	c3                   	ret    

c000ef60 <Computer::disableNMI()>:
c000ef60:	6a 00                	push   0x0
c000ef62:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ef66:	e8 07 ff ff ff       	call   c000ee72 <Computer::enableNMI(bool)>
c000ef6b:	58                   	pop    eax
c000ef6c:	5a                   	pop    edx
c000ef6d:	c3                   	ret    

c000ef6e <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ef6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef72:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ef79:	19 c0                	sbb    eax,eax
c000ef7b:	83 e0 80             	and    eax,0xffffff80
c000ef7e:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ef82:	e6 70                	out    0x70,al
c000ef84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef88:	e6 71                	out    0x71,al
c000ef8a:	c3                   	ret    
c000ef8b:	90                   	nop

c000ef8c <Computer::handleNMI()>:
c000ef8c:	56                   	push   esi
c000ef8d:	53                   	push   ebx
c000ef8e:	83 ec 10             	sub    esp,0x10
c000ef91:	e4 92                	in     al,0x92
c000ef93:	89 c6                	mov    esi,eax
c000ef95:	e4 61                	in     al,0x61
c000ef97:	68 2a a0 02 c0       	push   0xc002a02a
c000ef9c:	88 c3                	mov    bl,al
c000ef9e:	e8 f5 3d 00 00       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c000efa3:	83 c4 10             	add    esp,0x10
c000efa6:	83 e6 10             	and    esi,0x10
c000efa9:	75 0d                	jne    c000efb8 <Computer::handleNMI()+0x2c>
c000efab:	f6 c3 40             	test   bl,0x40
c000efae:	75 1d                	jne    c000efcd <Computer::handleNMI()+0x41>
c000efb0:	84 db                	test   bl,bl
c000efb2:	78 2d                	js     c000efe1 <Computer::handleNMI()+0x55>
c000efb4:	58                   	pop    eax
c000efb5:	5b                   	pop    ebx
c000efb6:	5e                   	pop    esi
c000efb7:	c3                   	ret    
c000efb8:	83 ec 0c             	sub    esp,0xc
c000efbb:	68 3b a0 02 c0       	push   0xc002a03b
c000efc0:	e8 ae b4 00 00       	call   c001a473 <Krnl::panic(char const*)>
c000efc5:	83 c4 10             	add    esp,0x10
c000efc8:	f6 c3 40             	test   bl,0x40
c000efcb:	74 e3                	je     c000efb0 <Computer::handleNMI()+0x24>
c000efcd:	83 ec 0c             	sub    esp,0xc
c000efd0:	68 48 a0 02 c0       	push   0xc002a048
c000efd5:	e8 99 b4 00 00       	call   c001a473 <Krnl::panic(char const*)>
c000efda:	83 c4 10             	add    esp,0x10
c000efdd:	84 db                	test   bl,bl
c000efdf:	79 d3                	jns    c000efb4 <Computer::handleNMI()+0x28>
c000efe1:	c7 44 24 10 52 a0 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a052
c000efe9:	5a                   	pop    edx
c000efea:	5b                   	pop    ebx
c000efeb:	5e                   	pop    esi
c000efec:	e9 82 b4 00 00       	jmp    c001a473 <Krnl::panic(char const*)>
c000eff1:	90                   	nop

c000eff2 <Computer::setDiskActivityLight(int, bool)>:
c000eff2:	56                   	push   esi
c000eff3:	53                   	push   ebx
c000eff4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000eff8:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000effd:	77 1b                	ja     c000f01a <Computer::setDiskActivityLight(int, bool)+0x28>
c000efff:	e4 92                	in     al,0x92
c000f001:	bb 40 00 00 00       	mov    ebx,0x40
c000f006:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f00a:	89 da                	mov    edx,ebx
c000f00c:	d3 e2                	shl    edx,cl
c000f00e:	89 f1                	mov    ecx,esi
c000f010:	f7 d2                	not    edx
c000f012:	d3 e3                	shl    ebx,cl
c000f014:	21 d0                	and    eax,edx
c000f016:	09 d8                	or     eax,ebx
c000f018:	e6 92                	out    0x92,al
c000f01a:	5b                   	pop    ebx
c000f01b:	5e                   	pop    esi
c000f01c:	c3                   	ret    
c000f01d:	90                   	nop

c000f01e <GDTEntry::setBase(unsigned int)>:
c000f01e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f022:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f026:	89 c1                	mov    ecx,eax
c000f028:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f02c:	c1 e9 10             	shr    ecx,0x10
c000f02f:	c1 e8 18             	shr    eax,0x18
c000f032:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f035:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f038:	c3                   	ret    
c000f039:	90                   	nop

c000f03a <GDTEntry::setLimit(unsigned int)>:
c000f03a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f03e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f042:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f045:	66 89 01             	mov    WORD PTR [ecx],ax
c000f048:	83 e2 f0             	and    edx,0xfffffff0
c000f04b:	c1 e8 10             	shr    eax,0x10
c000f04e:	83 e0 0f             	and    eax,0xf
c000f051:	09 d0                	or     eax,edx
c000f053:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f056:	c3                   	ret    
c000f057:	90                   	nop

c000f058 <GDT::GDT()>:
c000f058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f05c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f062:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f066:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f06c:	90                   	nop
c000f06d:	c3                   	ret    

c000f06e <GDT::addEntry(GDTEntry)>:
c000f06e:	53                   	push   ebx
c000f06f:	83 ec 0c             	sub    esp,0xc
c000f072:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f076:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f078:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f07f:	52                   	push   edx
c000f080:	50                   	push   eax
c000f081:	68 8c a0 02 c0       	push   0xc002a08c
c000f086:	e8 0d 3d 00 00       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c000f08b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f08d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f091:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f095:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f099:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f09d:	8d 50 01             	lea    edx,[eax+0x1]
c000f0a0:	c1 e0 03             	shl    eax,0x3
c000f0a3:	89 13                	mov    DWORD PTR [ebx],edx
c000f0a5:	83 c4 18             	add    esp,0x18
c000f0a8:	5b                   	pop    ebx
c000f0a9:	c3                   	ret    

c000f0aa <GDT::getNumberOfEntries()>:
c000f0aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0ae:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0b0:	c3                   	ret    
c000f0b1:	90                   	nop

c000f0b2 <GDT::flush()>:
c000f0b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0b6:	8b 10                	mov    edx,DWORD PTR [eax]
c000f0b8:	83 c0 04             	add    eax,0x4
c000f0bb:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f0c2:	a3 52 e2 02 c0       	mov    ds:0xc002e252,eax
c000f0c7:	66 89 15 50 e2 02 c0 	mov    WORD PTR ds:0xc002e250,dx
c000f0ce:	e9 75 13 ff ff       	jmp    c0000448 <loadGDT>
c000f0d3:	90                   	nop

c000f0d4 <GDT::setup()>:
c000f0d4:	55                   	push   ebp
c000f0d5:	57                   	push   edi
c000f0d6:	56                   	push   esi
c000f0d7:	53                   	push   ebx
c000f0d8:	83 ec 3c             	sub    esp,0x3c
c000f0db:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f0df:	6a 00                	push   0x0
c000f0e1:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f0e5:	53                   	push   ebx
c000f0e6:	e8 33 ff ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f0eb:	6a 00                	push   0x0
c000f0ed:	53                   	push   ebx
c000f0ee:	e8 47 ff ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f0f3:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f0fb:	6a 00                	push   0x0
c000f0fd:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f101:	53                   	push   ebx
c000f102:	e8 17 ff ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f107:	68 ff ff ff 00       	push   0xffffff
c000f10c:	53                   	push   ebx
c000f10d:	e8 28 ff ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f112:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f116:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f11b:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f120:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f124:	83 c4 20             	add    esp,0x20
c000f127:	6a 00                	push   0x0
c000f129:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f12d:	53                   	push   ebx
c000f12e:	e8 eb fe ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f133:	68 ff ff ff 00       	push   0xffffff
c000f138:	53                   	push   ebx
c000f139:	e8 fc fe ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f13e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f142:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f146:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f14a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f14e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f152:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f157:	0d 00 92 c0 00       	or     eax,0xc09200
c000f15c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f160:	89 d8                	mov    eax,ebx
c000f162:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f166:	80 cc 60             	or     ah,0x60
c000f169:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f16d:	83 c4 0c             	add    esp,0xc
c000f170:	89 f8                	mov    eax,edi
c000f172:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f176:	80 cc 60             	or     ah,0x60
c000f179:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f17d:	89 c7                	mov    edi,eax
c000f17f:	55                   	push   ebp
c000f180:	e8 e9 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f185:	83 c4 0c             	add    esp,0xc
c000f188:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f18c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f190:	55                   	push   ebp
c000f191:	e8 d8 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f196:	83 c4 0c             	add    esp,0xc
c000f199:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f19d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1a1:	55                   	push   ebp
c000f1a2:	e8 c7 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1a7:	83 c4 0c             	add    esp,0xc
c000f1aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f1ae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f1b2:	53                   	push   ebx
c000f1b3:	51                   	push   ecx
c000f1b4:	55                   	push   ebp
c000f1b5:	e8 b4 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1ba:	83 c4 0c             	add    esp,0xc
c000f1bd:	57                   	push   edi
c000f1be:	56                   	push   esi
c000f1bf:	55                   	push   ebp
c000f1c0:	e8 a9 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1c5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f1c8:	e8 e5 fe ff ff       	call   c000f0b2 <GDT::flush()>
c000f1cd:	83 c4 4c             	add    esp,0x4c
c000f1d0:	5b                   	pop    ebx
c000f1d1:	5e                   	pop    esi
c000f1d2:	5f                   	pop    edi
c000f1d3:	5d                   	pop    ebp
c000f1d4:	c3                   	ret    

c000f1d5 <idleFunction(void*)>:
c000f1d5:	53                   	push   ebx
c000f1d6:	83 ec 08             	sub    esp,0x8
c000f1d9:	e8 91 ea 00 00       	call   c001dc6f <unlockScheduler()>
c000f1de:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c000f1e3:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f1e9:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f1f0:	74 3c                	je     c000f22e <idleFunction(void*)+0x59>
c000f1f2:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f1f9:	74 33                	je     c000f22e <idleFunction(void*)+0x59>
c000f1fb:	31 db                	xor    ebx,ebx
c000f1fd:	52                   	push   edx
c000f1fe:	52                   	push   edx
c000f1ff:	68 e1 00 00 00       	push   0xe1
c000f204:	50                   	push   eax
c000f205:	e8 de fb ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c000f20a:	53                   	push   ebx
c000f20b:	83 e0 02             	and    eax,0x2
c000f20e:	50                   	push   eax
c000f20f:	68 e1 00 00 00       	push   0xe1
c000f214:	ff 35 48 e2 02 c0    	push   DWORD PTR ds:0xc002e248
c000f21a:	e8 f5 fb ff ff       	call   c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>
c000f21f:	83 c4 20             	add    esp,0x20
c000f222:	e8 58 10 ff ff       	call   c000027f <doTPAUSE>
c000f227:	e8 54 93 01 00       	call   c0028580 <idleCommon()>
c000f22c:	eb f4                	jmp    c000f222 <idleFunction(void*)+0x4d>
c000f22e:	fb                   	sti    
c000f22f:	f4                   	hlt    
c000f230:	e8 4b 93 01 00       	call   c0028580 <idleCommon()>
c000f235:	eb f7                	jmp    c000f22e <idleFunction(void*)+0x59>
c000f237:	90                   	nop

c000f238 <IDTEntry::IDTEntry(bool)>:
c000f238:	83 ec 04             	sub    esp,0x4
c000f23b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f23f:	88 04 24             	mov    BYTE PTR [esp],al
c000f242:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f246:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f24c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f250:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f254:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f258:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f25b:	83 e2 f0             	and    edx,0xfffffff0
c000f25e:	83 ca 0e             	or     edx,0xe
c000f261:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f264:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f268:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f26b:	83 e2 ef             	and    edx,0xffffffef
c000f26e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f271:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f275:	74 04                	je     c000f27b <IDTEntry::IDTEntry(bool)+0x43>
c000f277:	b2 03                	mov    dl,0x3
c000f279:	eb 02                	jmp    c000f27d <IDTEntry::IDTEntry(bool)+0x45>
c000f27b:	b2 00                	mov    dl,0x0
c000f27d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f281:	83 e2 03             	and    edx,0x3
c000f284:	88 d1                	mov    cl,dl
c000f286:	c1 e1 05             	shl    ecx,0x5
c000f289:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f28c:	83 e2 9f             	and    edx,0xffffff9f
c000f28f:	09 ca                	or     edx,ecx
c000f291:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f294:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f298:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f29b:	83 ca 80             	or     edx,0xffffff80
c000f29e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2a1:	90                   	nop
c000f2a2:	83 c4 04             	add    esp,0x4
c000f2a5:	c3                   	ret    

c000f2a6 <IDTEntry::setOffset(unsigned int)>:
c000f2a6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2ae:	66 89 02             	mov    WORD PTR [edx],ax
c000f2b1:	c1 e8 10             	shr    eax,0x10
c000f2b4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f2b8:	c3                   	ret    
c000f2b9:	90                   	nop

c000f2ba <IDT::IDT()>:
c000f2ba:	90                   	nop
c000f2bb:	c3                   	ret    

c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f2bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f2c0:	83 c0 30             	add    eax,0x30
c000f2c3:	c3                   	ret    

c000f2c4 <IDT::addEntry(IDTEntry, int)>:
c000f2c4:	53                   	push   ebx
c000f2c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2c9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f2cd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f2d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f2d5:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f2d8:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f2dc:	5b                   	pop    ebx
c000f2dd:	c3                   	ret    

c000f2de <IDT::addEntry(int, void (*)(), bool)>:
c000f2de:	53                   	push   ebx
c000f2df:	83 ec 10             	sub    esp,0x10
c000f2e2:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f2e7:	50                   	push   eax
c000f2e8:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f2ec:	53                   	push   ebx
c000f2ed:	e8 46 ff ff ff       	call   c000f238 <IDTEntry::IDTEntry(bool)>
c000f2f2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f2f6:	53                   	push   ebx
c000f2f7:	e8 aa ff ff ff       	call   c000f2a6 <IDTEntry::setOffset(unsigned int)>
c000f2fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f300:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f304:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f30c:	e8 b3 ff ff ff       	call   c000f2c4 <IDT::addEntry(IDTEntry, int)>
c000f311:	83 c4 30             	add    esp,0x30
c000f314:	5b                   	pop    ebx
c000f315:	c3                   	ret    

c000f316 <IDT::flush()>:
c000f316:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f31a:	66 c7 05 58 e2 02 c0 ff 07 	mov    WORD PTR ds:0xc002e258,0x7ff
c000f323:	a3 5a e2 02 c0       	mov    ds:0xc002e25a,eax
c000f328:	0f 01 1d 58 e2 02 c0 	lidtd  ds:0xc002e258
c000f32f:	c3                   	ret    

c000f330 <IDT::setup()>:
c000f330:	57                   	push   edi
c000f331:	56                   	push   esi
c000f332:	53                   	push   ebx
c000f333:	83 ec 10             	sub    esp,0x10
c000f336:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f33a:	6a 00                	push   0x0
c000f33c:	68 68 04 00 c0       	push   0xc0000468
c000f341:	6a 00                	push   0x0
c000f343:	53                   	push   ebx
c000f344:	e8 95 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f349:	6a 00                	push   0x0
c000f34b:	68 78 04 00 c0       	push   0xc0000478
c000f350:	6a 01                	push   0x1
c000f352:	53                   	push   ebx
c000f353:	e8 86 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f358:	83 c4 20             	add    esp,0x20
c000f35b:	6a 00                	push   0x0
c000f35d:	68 82 04 00 c0       	push   0xc0000482
c000f362:	6a 02                	push   0x2
c000f364:	53                   	push   ebx
c000f365:	e8 74 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f36a:	6a 00                	push   0x0
c000f36c:	68 8c 04 00 c0       	push   0xc000048c
c000f371:	6a 03                	push   0x3
c000f373:	53                   	push   ebx
c000f374:	e8 65 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f379:	83 c4 20             	add    esp,0x20
c000f37c:	6a 00                	push   0x0
c000f37e:	68 96 04 00 c0       	push   0xc0000496
c000f383:	6a 04                	push   0x4
c000f385:	53                   	push   ebx
c000f386:	e8 53 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f38b:	6a 00                	push   0x0
c000f38d:	68 a0 04 00 c0       	push   0xc00004a0
c000f392:	6a 05                	push   0x5
c000f394:	53                   	push   ebx
c000f395:	e8 44 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f39a:	83 c4 20             	add    esp,0x20
c000f39d:	6a 00                	push   0x0
c000f39f:	68 aa 04 00 c0       	push   0xc00004aa
c000f3a4:	6a 06                	push   0x6
c000f3a6:	53                   	push   ebx
c000f3a7:	e8 32 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3ac:	6a 00                	push   0x0
c000f3ae:	68 b4 04 00 c0       	push   0xc00004b4
c000f3b3:	6a 07                	push   0x7
c000f3b5:	53                   	push   ebx
c000f3b6:	e8 23 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3bb:	83 c4 20             	add    esp,0x20
c000f3be:	6a 00                	push   0x0
c000f3c0:	68 be 04 00 c0       	push   0xc00004be
c000f3c5:	6a 08                	push   0x8
c000f3c7:	53                   	push   ebx
c000f3c8:	e8 11 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3cd:	6a 00                	push   0x0
c000f3cf:	68 c6 04 00 c0       	push   0xc00004c6
c000f3d4:	6a 09                	push   0x9
c000f3d6:	53                   	push   ebx
c000f3d7:	e8 02 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3dc:	83 c4 20             	add    esp,0x20
c000f3df:	6a 00                	push   0x0
c000f3e1:	68 d0 04 00 c0       	push   0xc00004d0
c000f3e6:	6a 0a                	push   0xa
c000f3e8:	53                   	push   ebx
c000f3e9:	e8 f0 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3ee:	6a 00                	push   0x0
c000f3f0:	68 d8 04 00 c0       	push   0xc00004d8
c000f3f5:	6a 0b                	push   0xb
c000f3f7:	53                   	push   ebx
c000f3f8:	e8 e1 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3fd:	83 c4 20             	add    esp,0x20
c000f400:	6a 00                	push   0x0
c000f402:	68 e0 04 00 c0       	push   0xc00004e0
c000f407:	6a 0c                	push   0xc
c000f409:	53                   	push   ebx
c000f40a:	e8 cf fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f40f:	6a 00                	push   0x0
c000f411:	68 e8 04 00 c0       	push   0xc00004e8
c000f416:	6a 0d                	push   0xd
c000f418:	53                   	push   ebx
c000f419:	e8 c0 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f41e:	83 c4 20             	add    esp,0x20
c000f421:	6a 00                	push   0x0
c000f423:	68 f0 04 00 c0       	push   0xc00004f0
c000f428:	6a 0e                	push   0xe
c000f42a:	53                   	push   ebx
c000f42b:	e8 ae fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f430:	6a 00                	push   0x0
c000f432:	68 f8 04 00 c0       	push   0xc00004f8
c000f437:	6a 0f                	push   0xf
c000f439:	53                   	push   ebx
c000f43a:	e8 9f fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f43f:	83 c4 20             	add    esp,0x20
c000f442:	6a 00                	push   0x0
c000f444:	68 02 05 00 c0       	push   0xc0000502
c000f449:	6a 10                	push   0x10
c000f44b:	53                   	push   ebx
c000f44c:	e8 8d fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f451:	6a 00                	push   0x0
c000f453:	68 0c 05 00 c0       	push   0xc000050c
c000f458:	6a 11                	push   0x11
c000f45a:	53                   	push   ebx
c000f45b:	e8 7e fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f460:	83 c4 20             	add    esp,0x20
c000f463:	6a 00                	push   0x0
c000f465:	68 16 05 00 c0       	push   0xc0000516
c000f46a:	6a 12                	push   0x12
c000f46c:	53                   	push   ebx
c000f46d:	e8 6c fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f472:	6a 01                	push   0x1
c000f474:	68 b0 05 00 c0       	push   0xc00005b0
c000f479:	6a 60                	push   0x60
c000f47b:	53                   	push   ebx
c000f47c:	e8 5d fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f481:	83 c4 20             	add    esp,0x20
c000f484:	6a 00                	push   0x0
c000f486:	68 b7 05 00 c0       	push   0xc00005b7
c000f48b:	6a 20                	push   0x20
c000f48d:	53                   	push   ebx
c000f48e:	e8 4b fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f493:	6a 00                	push   0x0
c000f495:	68 a2 05 00 c0       	push   0xc00005a2
c000f49a:	6a 21                	push   0x21
c000f49c:	53                   	push   ebx
c000f49d:	e8 3c fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4a2:	83 c4 20             	add    esp,0x20
c000f4a5:	6a 00                	push   0x0
c000f4a7:	68 a9 05 00 c0       	push   0xc00005a9
c000f4ac:	6a 22                	push   0x22
c000f4ae:	53                   	push   ebx
c000f4af:	e8 2a fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4b4:	6a 00                	push   0x0
c000f4b6:	68 20 05 00 c0       	push   0xc0000520
c000f4bb:	6a 23                	push   0x23
c000f4bd:	53                   	push   ebx
c000f4be:	e8 1b fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4c3:	83 c4 20             	add    esp,0x20
c000f4c6:	6a 00                	push   0x0
c000f4c8:	68 2a 05 00 c0       	push   0xc000052a
c000f4cd:	6a 24                	push   0x24
c000f4cf:	53                   	push   ebx
c000f4d0:	e8 09 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4d5:	6a 00                	push   0x0
c000f4d7:	68 34 05 00 c0       	push   0xc0000534
c000f4dc:	6a 25                	push   0x25
c000f4de:	53                   	push   ebx
c000f4df:	e8 fa fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4e4:	83 c4 20             	add    esp,0x20
c000f4e7:	6a 00                	push   0x0
c000f4e9:	68 3e 05 00 c0       	push   0xc000053e
c000f4ee:	6a 26                	push   0x26
c000f4f0:	53                   	push   ebx
c000f4f1:	e8 e8 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4f6:	6a 00                	push   0x0
c000f4f8:	68 48 05 00 c0       	push   0xc0000548
c000f4fd:	6a 27                	push   0x27
c000f4ff:	53                   	push   ebx
c000f500:	e8 d9 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f505:	83 c4 20             	add    esp,0x20
c000f508:	6a 00                	push   0x0
c000f50a:	68 52 05 00 c0       	push   0xc0000552
c000f50f:	6a 28                	push   0x28
c000f511:	53                   	push   ebx
c000f512:	e8 c7 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f517:	6a 00                	push   0x0
c000f519:	68 5c 05 00 c0       	push   0xc000055c
c000f51e:	6a 29                	push   0x29
c000f520:	53                   	push   ebx
c000f521:	e8 b8 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f526:	83 c4 20             	add    esp,0x20
c000f529:	6a 00                	push   0x0
c000f52b:	68 66 05 00 c0       	push   0xc0000566
c000f530:	6a 2a                	push   0x2a
c000f532:	53                   	push   ebx
c000f533:	e8 a6 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f538:	6a 00                	push   0x0
c000f53a:	68 70 05 00 c0       	push   0xc0000570
c000f53f:	6a 2b                	push   0x2b
c000f541:	53                   	push   ebx
c000f542:	e8 97 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f547:	83 c4 20             	add    esp,0x20
c000f54a:	6a 00                	push   0x0
c000f54c:	68 7a 05 00 c0       	push   0xc000057a
c000f551:	6a 2c                	push   0x2c
c000f553:	53                   	push   ebx
c000f554:	e8 85 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f559:	6a 00                	push   0x0
c000f55b:	68 84 05 00 c0       	push   0xc0000584
c000f560:	6a 2d                	push   0x2d
c000f562:	53                   	push   ebx
c000f563:	e8 76 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f568:	83 c4 20             	add    esp,0x20
c000f56b:	6a 00                	push   0x0
c000f56d:	68 8e 05 00 c0       	push   0xc000058e
c000f572:	6a 2e                	push   0x2e
c000f574:	53                   	push   ebx
c000f575:	e8 64 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f57a:	6a 00                	push   0x0
c000f57c:	68 98 05 00 c0       	push   0xc0000598
c000f581:	6a 2f                	push   0x2f
c000f583:	53                   	push   ebx
c000f584:	e8 55 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f589:	83 c4 20             	add    esp,0x20
c000f58c:	6a 00                	push   0x0
c000f58e:	68 ed 05 00 c0       	push   0xc00005ed
c000f593:	6a 30                	push   0x30
c000f595:	53                   	push   ebx
c000f596:	e8 43 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f59b:	6a 00                	push   0x0
c000f59d:	68 f7 05 00 c0       	push   0xc00005f7
c000f5a2:	6a 31                	push   0x31
c000f5a4:	53                   	push   ebx
c000f5a5:	e8 34 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5aa:	83 c4 20             	add    esp,0x20
c000f5ad:	6a 00                	push   0x0
c000f5af:	68 01 06 00 c0       	push   0xc0000601
c000f5b4:	6a 32                	push   0x32
c000f5b6:	53                   	push   ebx
c000f5b7:	e8 22 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5bc:	6a 00                	push   0x0
c000f5be:	68 0b 06 00 c0       	push   0xc000060b
c000f5c3:	6a 33                	push   0x33
c000f5c5:	53                   	push   ebx
c000f5c6:	e8 13 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5cb:	83 c4 20             	add    esp,0x20
c000f5ce:	6a 00                	push   0x0
c000f5d0:	68 15 06 00 c0       	push   0xc0000615
c000f5d5:	6a 34                	push   0x34
c000f5d7:	53                   	push   ebx
c000f5d8:	e8 01 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5dd:	6a 00                	push   0x0
c000f5df:	68 1f 06 00 c0       	push   0xc000061f
c000f5e4:	6a 35                	push   0x35
c000f5e6:	53                   	push   ebx
c000f5e7:	e8 f2 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5ec:	83 c4 20             	add    esp,0x20
c000f5ef:	6a 00                	push   0x0
c000f5f1:	68 29 06 00 c0       	push   0xc0000629
c000f5f6:	6a 36                	push   0x36
c000f5f8:	53                   	push   ebx
c000f5f9:	e8 e0 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5fe:	6a 00                	push   0x0
c000f600:	68 33 06 00 c0       	push   0xc0000633
c000f605:	6a 37                	push   0x37
c000f607:	53                   	push   ebx
c000f608:	e8 d1 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f60d:	83 c4 20             	add    esp,0x20
c000f610:	e8 cd 27 00 00       	call   c0011de2 <Virt::getAKernelVAS()>
c000f615:	52                   	push   edx
c000f616:	6a 03                	push   0x3
c000f618:	6a 02                	push   0x2
c000f61a:	50                   	push   eax
c000f61b:	e8 e4 2c 00 00       	call   c0012304 <VAS::allocatePages(int, int)>
c000f620:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f627:	89 c6                	mov    esi,eax
c000f629:	e8 12 02 00 00       	call   c000f840 <malloc>
c000f62e:	81 c6 00 20 00 00    	add    esi,0x2000
c000f634:	89 04 24             	mov    DWORD PTR [esp],eax
c000f637:	89 c7                	mov    edi,eax
c000f639:	e8 2e 1e 00 00       	call   c001146c <TSS::TSS()>
c000f63e:	83 c4 0c             	add    esp,0xc
c000f641:	68 be 04 00 c0       	push   0xc00004be
c000f646:	56                   	push   esi
c000f647:	57                   	push   edi
c000f648:	e8 5f 1e 00 00       	call   c00114ac <TSS::setup(unsigned long, unsigned long)>
c000f64d:	59                   	pop    ecx
c000f64e:	89 c6                	mov    esi,eax
c000f650:	5f                   	pop    edi
c000f651:	6a 00                	push   0x0
c000f653:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f657:	50                   	push   eax
c000f658:	e8 db fb ff ff       	call   c000f238 <IDTEntry::IDTEntry(bool)>
c000f65d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f661:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f666:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f66d:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f673:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f677:	80 ce 05             	or     dh,0x5
c000f67a:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f67d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f681:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f685:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f688:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f68b:	e8 86 fc ff ff       	call   c000f316 <IDT::flush()>
c000f690:	83 c4 20             	add    esp,0x20
c000f693:	5b                   	pop    ebx
c000f694:	5e                   	pop    esi
c000f695:	5f                   	pop    edi
c000f696:	c3                   	ret    

c000f697 <sbrk>:
c000f697:	55                   	push   ebp
c000f698:	57                   	push   edi
c000f699:	56                   	push   esi
c000f69a:	53                   	push   ebx
c000f69b:	83 ec 1c             	sub    esp,0x1c
c000f69e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f6a2:	85 c0                	test   eax,eax
c000f6a4:	74 3e                	je     c000f6e4 <sbrk+0x4d>
c000f6a6:	78 43                	js     c000f6eb <sbrk+0x54>
c000f6a8:	8b 15 48 e2 02 c0    	mov    edx,DWORD PTR ds:0xc002e248
c000f6ae:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f6b4:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f6ba:	83 e2 01             	and    edx,0x1
c000f6bd:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f6c1:	8b 0d 78 d1 02 c0    	mov    ecx,DWORD PTR ds:0xc002d178
c000f6c7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f6cb:	05 ff 0f 00 00       	add    eax,0xfff
c000f6d0:	89 c2                	mov    edx,eax
c000f6d2:	78 2f                	js     c000f703 <sbrk+0x6c>
c000f6d4:	c1 fa 0c             	sar    edx,0xc
c000f6d7:	89 d7                	mov    edi,edx
c000f6d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f6dd:	be 00 00 00 00       	mov    esi,0x0
c000f6e2:	eb 36                	jmp    c000f71a <sbrk+0x83>
c000f6e4:	a1 78 d1 02 c0       	mov    eax,ds:0xc002d178
c000f6e9:	eb 74                	jmp    c000f75f <sbrk+0xc8>
c000f6eb:	83 ec 08             	sub    esp,0x8
c000f6ee:	50                   	push   eax
c000f6ef:	68 a8 a0 02 c0       	push   0xc002a0a8
c000f6f4:	e8 9f 36 00 00       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c000f6f9:	83 c4 10             	add    esp,0x10
c000f6fc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f701:	eb 5c                	jmp    c000f75f <sbrk+0xc8>
c000f703:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f709:	eb c9                	jmp    c000f6d4 <sbrk+0x3d>
c000f70b:	81 05 78 d1 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002d178,0x1000
c000f715:	46                   	inc    esi
c000f716:	39 f7                	cmp    edi,esi
c000f718:	74 34                	je     c000f74e <sbrk+0xb7>
c000f71a:	e8 c3 26 00 00       	call   c0011de2 <Virt::getAKernelVAS()>
c000f71f:	89 c3                	mov    ebx,eax
c000f721:	8b 2d 78 d1 02 c0    	mov    ebp,DWORD PTR ds:0xc002d178
c000f727:	e8 b1 07 00 00       	call   c000fedd <Phys::allocatePage()>
c000f72c:	68 01 04 00 00       	push   0x401
c000f731:	55                   	push   ebp
c000f732:	50                   	push   eax
c000f733:	53                   	push   ebx
c000f734:	e8 cb 2a 00 00       	call   c0012204 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f739:	83 c4 10             	add    esp,0x10
c000f73c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f741:	74 c8                	je     c000f70b <sbrk+0x74>
c000f743:	8b 1d 78 d1 02 c0    	mov    ebx,DWORD PTR ds:0xc002d178
c000f749:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f74c:	eb bd                	jmp    c000f70b <sbrk+0x74>
c000f74e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f753:	75 12                	jne    c000f767 <sbrk+0xd0>
c000f755:	0f 20 d8             	mov    eax,cr3
c000f758:	0f 22 d8             	mov    cr3,eax
c000f75b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f75f:	83 c4 1c             	add    esp,0x1c
c000f762:	5b                   	pop    ebx
c000f763:	5e                   	pop    esi
c000f764:	5f                   	pop    edi
c000f765:	5d                   	pop    ebp
c000f766:	c3                   	ret    
c000f767:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f76b:	89 cb                	mov    ebx,ecx
c000f76d:	c1 eb 0a             	shr    ebx,0xa
c000f770:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f776:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f77c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f780:	c1 e0 0c             	shl    eax,0xc
c000f783:	01 c8                	add    eax,ecx
c000f785:	c1 e8 0a             	shr    eax,0xa
c000f788:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f78d:	2d 00 00 40 00       	sub    eax,0x400000
c000f792:	39 c3                	cmp    ebx,eax
c000f794:	77 c5                	ja     c000f75b <sbrk+0xc4>
c000f796:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f799:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f79f:	39 d8                	cmp    eax,ebx
c000f7a1:	73 f3                	jae    c000f796 <sbrk+0xff>
c000f7a3:	eb b6                	jmp    c000f75b <sbrk+0xc4>

c000f7a5 <mmap>:
c000f7a5:	83 ec 18             	sub    esp,0x18
c000f7a8:	68 d8 a0 02 c0       	push   0xc002a0d8
c000f7ad:	e8 c1 ac 00 00       	call   c001a473 <Krnl::panic(char const*)>
c000f7b2:	b8 00 00 00 00       	mov    eax,0x0
c000f7b7:	83 c4 1c             	add    esp,0x1c
c000f7ba:	c3                   	ret    

c000f7bb <munmap>:
c000f7bb:	83 ec 18             	sub    esp,0x18
c000f7be:	68 dd a0 02 c0       	push   0xc002a0dd
c000f7c3:	e8 ab ac 00 00       	call   c001a473 <Krnl::panic(char const*)>
c000f7c8:	b8 00 00 00 00       	mov    eax,0x0
c000f7cd:	83 c4 1c             	add    esp,0x1c
c000f7d0:	c3                   	ret    

c000f7d1 <liballoc_lock()>:
c000f7d1:	83 ec 0c             	sub    esp,0xc
c000f7d4:	e8 94 e4 00 00       	call   c001dc6d <lockScheduler()>
c000f7d9:	b8 00 00 00 00       	mov    eax,0x0
c000f7de:	83 c4 0c             	add    esp,0xc
c000f7e1:	c3                   	ret    

c000f7e2 <liballoc_unlock()>:
c000f7e2:	83 ec 0c             	sub    esp,0xc
c000f7e5:	e8 85 e4 00 00       	call   c001dc6f <unlockScheduler()>
c000f7ea:	b8 00 00 00 00       	mov    eax,0x0
c000f7ef:	83 c4 0c             	add    esp,0xc
c000f7f2:	c3                   	ret    

c000f7f3 <liballoc_alloc(int)>:
c000f7f3:	83 ec 0c             	sub    esp,0xc
c000f7f6:	e8 e7 25 00 00       	call   c0011de2 <Virt::getAKernelVAS()>
c000f7fb:	83 ec 04             	sub    esp,0x4
c000f7fe:	6a 01                	push   0x1
c000f800:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f804:	50                   	push   eax
c000f805:	e8 fa 2a 00 00       	call   c0012304 <VAS::allocatePages(int, int)>
c000f80a:	83 c4 1c             	add    esp,0x1c
c000f80d:	c3                   	ret    

c000f80e <liballoc_free(void*, int)>:
c000f80e:	83 ec 0c             	sub    esp,0xc
c000f811:	e8 cc 25 00 00       	call   c0011de2 <Virt::getAKernelVAS()>
c000f816:	83 ec 08             	sub    esp,0x8
c000f819:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f81d:	50                   	push   eax
c000f81e:	e8 9d 27 00 00       	call   c0011fc0 <VAS::freeAllocatedPages(unsigned long)>
c000f823:	b8 00 00 00 00       	mov    eax,0x0
c000f828:	83 c4 1c             	add    esp,0x1c
c000f82b:	c3                   	ret    

c000f82c <realloc>:
c000f82c:	83 ec 14             	sub    esp,0x14
c000f82f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f833:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f837:	e8 18 1e ff ff       	call   c0001654 <dlrealloc>
c000f83c:	83 c4 1c             	add    esp,0x1c
c000f83f:	c3                   	ret    

c000f840 <malloc>:
c000f840:	83 ec 18             	sub    esp,0x18
c000f843:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f847:	e8 cb 18 ff ff       	call   c0001117 <dlmalloc>
c000f84c:	83 c4 1c             	add    esp,0x1c
c000f84f:	c3                   	ret    

c000f850 <free>:
c000f850:	83 ec 18             	sub    esp,0x18
c000f853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f857:	e8 60 15 ff ff       	call   c0000dbc <dlfree>
c000f85c:	83 c4 1c             	add    esp,0x1c
c000f85f:	c3                   	ret    

c000f860 <rfree>:
c000f860:	83 ec 18             	sub    esp,0x18
c000f863:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f867:	e8 50 15 ff ff       	call   c0000dbc <dlfree>
c000f86c:	83 c4 1c             	add    esp,0x1c
c000f86f:	c3                   	ret    

c000f870 <calloc>:
c000f870:	56                   	push   esi
c000f871:	53                   	push   ebx
c000f872:	83 ec 10             	sub    esp,0x10
c000f875:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f879:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f87e:	53                   	push   ebx
c000f87f:	e8 bc ff ff ff       	call   c000f840 <malloc>
c000f884:	89 c6                	mov    esi,eax
c000f886:	83 c4 0c             	add    esp,0xc
c000f889:	53                   	push   ebx
c000f88a:	6a 00                	push   0x0
c000f88c:	50                   	push   eax
c000f88d:	e8 e6 0e ff ff       	call   c0000778 <memset>
c000f892:	89 f0                	mov    eax,esi
c000f894:	83 c4 14             	add    esp,0x14
c000f897:	5b                   	pop    ebx
c000f898:	5e                   	pop    esi
c000f899:	c3                   	ret    

c000f89a <hwTextMode_loadInData(VgaText*)>:
c000f89a:	55                   	push   ebp
c000f89b:	a1 80 d1 02 c0       	mov    eax,ds:0xc002d180
c000f8a0:	57                   	push   edi
c000f8a1:	56                   	push   esi
c000f8a2:	53                   	push   ebx
c000f8a3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f8a7:	8b 97 ac 0f 00 00    	mov    edx,DWORD PTR [edi+0xfac]
c000f8ad:	85 d2                	test   edx,edx
c000f8af:	7e 2f                	jle    c000f8e0 <hwTextMode_loadInData(VgaText*)+0x46>
c000f8b1:	8d a8 94 00 00 00    	lea    ebp,[eax+0x94]
c000f8b7:	8d 4f 0c             	lea    ecx,[edi+0xc]
c000f8ba:	31 f6                	xor    esi,esi
c000f8bc:	29 fd                	sub    ebp,edi
c000f8be:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f8c1:	31 c0                	xor    eax,eax
c000f8c3:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f8c7:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f8cb:	40                   	inc    eax
c000f8cc:	83 f8 50             	cmp    eax,0x50
c000f8cf:	75 f2                	jne    c000f8c3 <hwTextMode_loadInData(VgaText*)+0x29>
c000f8d1:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f8d7:	46                   	inc    esi
c000f8d8:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f8de:	7f de                	jg     c000f8be <hwTextMode_loadInData(VgaText*)+0x24>
c000f8e0:	5b                   	pop    ebx
c000f8e1:	5e                   	pop    esi
c000f8e2:	5f                   	pop    edi
c000f8e3:	5d                   	pop    ebp
c000f8e4:	c3                   	ret    

c000f8e5 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f8e5:	55                   	push   ebp
c000f8e6:	80 3d e0 e2 02 c0 00 	cmp    BYTE PTR ds:0xc002e2e0,0x0
c000f8ed:	57                   	push   edi
c000f8ee:	56                   	push   esi
c000f8ef:	53                   	push   ebx
c000f8f0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f8f4:	75 50                	jne    c000f946 <hwTextMode_loadInTitle(VgaText*, char*)+0x61>
c000f8f6:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f8fc:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f902:	8b 15 80 d1 02 c0    	mov    edx,DWORD PTR ds:0xc002d180
c000f908:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f90c:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f912:	eb 0e                	jmp    c000f922 <hwTextMode_loadInTitle(VgaText*, char*)+0x3d>
c000f914:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f91a:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f920:	89 da                	mov    edx,ebx
c000f922:	83 e5 0f             	and    ebp,0xf
c000f925:	c1 e0 04             	shl    eax,0x4
c000f928:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f92b:	0f b6 c0             	movzx  eax,al
c000f92e:	41                   	inc    ecx
c000f92f:	09 e8                	or     eax,ebp
c000f931:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f935:	c1 e0 08             	shl    eax,0x8
c000f938:	09 e8                	or     eax,ebp
c000f93a:	39 fb                	cmp    ebx,edi
c000f93c:	66 89 02             	mov    WORD PTR [edx],ax
c000f93f:	75 d3                	jne    c000f914 <hwTextMode_loadInTitle(VgaText*, char*)+0x2f>
c000f941:	5b                   	pop    ebx
c000f942:	5e                   	pop    esi
c000f943:	5f                   	pop    edi
c000f944:	5d                   	pop    ebp
c000f945:	c3                   	ret    
c000f946:	c7 86 d8 0f 00 00 02 00 00 00 	mov    DWORD PTR [esi+0xfd8],0x2
c000f950:	c7 86 d4 0f 00 00 00 00 00 00 	mov    DWORD PTR [esi+0xfd4],0x0
c000f95a:	31 c0                	xor    eax,eax
c000f95c:	bd 02 00 00 00       	mov    ebp,0x2
c000f961:	eb 9f                	jmp    c000f902 <hwTextMode_loadInTitle(VgaText*, char*)+0x1d>

c000f963 <hwTextMode_showCursor(VgaText*, bool)>:
c000f963:	56                   	push   esi
c000f964:	80 3d e0 e2 02 c0 00 	cmp    BYTE PTR ds:0xc002e2e0,0x0
c000f96b:	53                   	push   ebx
c000f96c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f970:	75 39                	jne    c000f9ab <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000f972:	84 c0                	test   al,al
c000f974:	74 38                	je     c000f9ae <hwTextMode_showCursor(VgaText*, bool)+0x4b>
c000f976:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f97b:	b0 0a                	mov    al,0xa
c000f97d:	89 da                	mov    edx,ebx
c000f97f:	ee                   	out    dx,al
c000f980:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f985:	89 ca                	mov    edx,ecx
c000f987:	ec                   	in     al,dx
c000f988:	b2 0f                	mov    dl,0xf
c000f98a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f98e:	83 e0 c0             	and    eax,0xffffffc0
c000f991:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f997:	09 d0                	or     eax,edx
c000f999:	89 ca                	mov    edx,ecx
c000f99b:	ee                   	out    dx,al
c000f99c:	b0 0b                	mov    al,0xb
c000f99e:	89 da                	mov    edx,ebx
c000f9a0:	ee                   	out    dx,al
c000f9a1:	89 ca                	mov    edx,ecx
c000f9a3:	ec                   	in     al,dx
c000f9a4:	83 e0 e0             	and    eax,0xffffffe0
c000f9a7:	83 c8 0f             	or     eax,0xf
c000f9aa:	ee                   	out    dx,al
c000f9ab:	5b                   	pop    ebx
c000f9ac:	5e                   	pop    esi
c000f9ad:	c3                   	ret    
c000f9ae:	b0 0a                	mov    al,0xa
c000f9b0:	ba d4 03 00 00       	mov    edx,0x3d4
c000f9b5:	ee                   	out    dx,al
c000f9b6:	b0 20                	mov    al,0x20
c000f9b8:	ba d5 03 00 00       	mov    edx,0x3d5
c000f9bd:	ee                   	out    dx,al
c000f9be:	5b                   	pop    ebx
c000f9bf:	5e                   	pop    esi
c000f9c0:	c3                   	ret    

c000f9c1 <hwTextMode_update(VgaText*)>:
c000f9c1:	c3                   	ret    

c000f9c2 <hwTextMode_updateCursor(VgaText*)>:
c000f9c2:	56                   	push   esi
c000f9c3:	80 3d e0 e2 02 c0 00 	cmp    BYTE PTR ds:0xc002e2e0,0x0
c000f9ca:	53                   	push   ebx
c000f9cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f9cf:	75 3f                	jne    c000fa10 <hwTextMode_updateCursor(VgaText*)+0x4e>
c000f9d1:	be d4 03 00 00       	mov    esi,0x3d4
c000f9d6:	b9 19 00 00 00       	mov    ecx,0x19
c000f9db:	89 f2                	mov    edx,esi
c000f9dd:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f9e3:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f9e9:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f9ec:	c1 e1 04             	shl    ecx,0x4
c000f9ef:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f9f5:	b0 0f                	mov    al,0xf
c000f9f7:	ee                   	out    dx,al
c000f9f8:	bb d5 03 00 00       	mov    ebx,0x3d5
c000f9fd:	88 c8                	mov    al,cl
c000f9ff:	89 da                	mov    edx,ebx
c000fa01:	ee                   	out    dx,al
c000fa02:	b0 0e                	mov    al,0xe
c000fa04:	89 f2                	mov    edx,esi
c000fa06:	ee                   	out    dx,al
c000fa07:	89 c8                	mov    eax,ecx
c000fa09:	89 da                	mov    edx,ebx
c000fa0b:	66 c1 e8 08          	shr    ax,0x8
c000fa0f:	ee                   	out    dx,al
c000fa10:	5b                   	pop    ebx
c000fa11:	5e                   	pop    esi
c000fa12:	c3                   	ret    

c000fa13 <hwTextMode_disableBlink(VgaText*, bool)>:
c000fa13:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa17:	80 3d e0 e2 02 c0 00 	cmp    BYTE PTR ds:0xc002e2e0,0x0
c000fa1e:	75 38                	jne    c000fa58 <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000fa20:	ba da 03 00 00       	mov    edx,0x3da
c000fa25:	84 c0                	test   al,al
c000fa27:	75 18                	jne    c000fa41 <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000fa29:	ec                   	in     al,dx
c000fa2a:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa2f:	b0 30                	mov    al,0x30
c000fa31:	89 ca                	mov    edx,ecx
c000fa33:	ee                   	out    dx,al
c000fa34:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa39:	ec                   	in     al,dx
c000fa3a:	83 c8 08             	or     eax,0x8
c000fa3d:	89 ca                	mov    edx,ecx
c000fa3f:	ee                   	out    dx,al
c000fa40:	c3                   	ret    
c000fa41:	ec                   	in     al,dx
c000fa42:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa47:	b0 30                	mov    al,0x30
c000fa49:	89 ca                	mov    edx,ecx
c000fa4b:	ee                   	out    dx,al
c000fa4c:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa51:	ec                   	in     al,dx
c000fa52:	83 e0 f7             	and    eax,0xfffffff7
c000fa55:	89 ca                	mov    edx,ecx
c000fa57:	ee                   	out    dx,al
c000fa58:	c3                   	ret    

c000fa59 <hwTextMode_scrollScreen(VgaText*)>:
c000fa59:	55                   	push   ebp
c000fa5a:	57                   	push   edi
c000fa5b:	56                   	push   esi
c000fa5c:	53                   	push   ebx
c000fa5d:	83 ec 1c             	sub    esp,0x1c
c000fa60:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fa64:	80 3d e0 e2 02 c0 00 	cmp    BYTE PTR ds:0xc002e2e0,0x0
c000fa6b:	74 14                	je     c000fa81 <hwTextMode_scrollScreen(VgaText*)+0x28>
c000fa6d:	c7 81 d0 0f 00 00 02 00 00 00 	mov    DWORD PTR [ecx+0xfd0],0x2
c000fa77:	c7 81 cc 0f 00 00 00 00 00 00 	mov    DWORD PTR [ecx+0xfcc],0x0
c000fa81:	a1 80 d1 02 c0       	mov    eax,ds:0xc002d180
c000fa86:	bd 02 00 00 00       	mov    ebp,0x2
c000fa8b:	05 a0 00 00 00       	add    eax,0xa0
c000fa90:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fa94:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fa98:	31 c0                	xor    eax,eax
c000fa9a:	eb 0b                	jmp    c000faa7 <hwTextMode_scrollScreen(VgaText*)+0x4e>
c000fa9c:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faa2:	74 57                	je     c000fafb <hwTextMode_scrollScreen(VgaText*)+0xa2>
c000faa4:	43                   	inc    ebx
c000faa5:	89 f0                	mov    eax,esi
c000faa7:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000faad:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000fab3:	88 13                	mov    BYTE PTR [ebx],dl
c000fab5:	8d 70 01             	lea    esi,[eax+0x1]
c000fab8:	83 fd 18             	cmp    ebp,0x18
c000fabb:	75 df                	jne    c000fa9c <hwTextMode_scrollScreen(VgaText*)+0x43>
c000fabd:	a8 01                	test   al,0x1
c000fabf:	75 13                	jne    c000fad4 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000fac1:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000fac4:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faca:	75 d8                	jne    c000faa4 <hwTextMode_scrollScreen(VgaText*)+0x4b>
c000facc:	83 c4 1c             	add    esp,0x1c
c000facf:	5b                   	pop    ebx
c000fad0:	5e                   	pop    esi
c000fad1:	5f                   	pop    edi
c000fad2:	5d                   	pop    ebp
c000fad3:	c3                   	ret    
c000fad4:	83 ec 08             	sub    esp,0x8
c000fad7:	0f b6 81 cc 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfcc]
c000fade:	50                   	push   eax
c000fadf:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000fae3:	0f b6 81 d0 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfd0]
c000faea:	50                   	push   eax
c000faeb:	e8 4e 0c 00 00       	call   c001073e <VgaText::combineColours(unsigned char, unsigned char)>
c000faf0:	83 c4 10             	add    esp,0x10
c000faf3:	88 07                	mov    BYTE PTR [edi],al
c000faf5:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000faf9:	eb c9                	jmp    c000fac4 <hwTextMode_scrollScreen(VgaText*)+0x6b>
c000fafb:	45                   	inc    ebp
c000fafc:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000fb04:	eb 8e                	jmp    c000fa94 <hwTextMode_scrollScreen(VgaText*)+0x3b>

c000fb06 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000fb06:	57                   	push   edi
c000fb07:	80 3d e0 e2 02 c0 00 	cmp    BYTE PTR ds:0xc002e2e0,0x0
c000fb0e:	56                   	push   esi
c000fb0f:	53                   	push   ebx
c000fb10:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fb14:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000fb18:	75 65                	jne    c000fb7f <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x79>
c000fb1a:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000fb1f:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000fb24:	83 ec 08             	sub    esp,0x8
c000fb27:	52                   	push   edx
c000fb28:	50                   	push   eax
c000fb29:	e8 10 0c 00 00       	call   c001073e <VgaText::combineColours(unsigned char, unsigned char)>
c000fb2e:	5a                   	pop    edx
c000fb2f:	0f b6 c0             	movzx  eax,al
c000fb32:	59                   	pop    ecx
c000fb33:	50                   	push   eax
c000fb34:	0f be c3             	movsx  eax,bl
c000fb37:	50                   	push   eax
c000fb38:	e8 a7 0c 00 00       	call   c00107e4 <VgaText::combineCharAndColour(char, unsigned char)>
c000fb3d:	83 c4 10             	add    esp,0x10
c000fb40:	8b 35 80 d1 02 c0    	mov    esi,DWORD PTR ds:0xc002d180
c000fb46:	80 3d e0 e2 02 c0 00 	cmp    BYTE PTR ds:0xc002e2e0,0x0
c000fb4d:	74 07                	je     c000fb56 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000fb4f:	66 0f be c3          	movsx  ax,bl
c000fb53:	80 cc 02             	or     ah,0x2
c000fb56:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fb5a:	ba 19 00 00 00       	mov    edx,0x19
c000fb5f:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000fb65:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000fb68:	8d 14 92             	lea    edx,[edx+edx*4]
c000fb6b:	c1 e1 04             	shl    ecx,0x4
c000fb6e:	c1 e2 04             	shl    edx,0x4
c000fb71:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000fb75:	01 ca                	add    edx,ecx
c000fb77:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000fb7b:	5b                   	pop    ebx
c000fb7c:	5e                   	pop    esi
c000fb7d:	5f                   	pop    edi
c000fb7e:	c3                   	ret    
c000fb7f:	b8 02 00 00 00       	mov    eax,0x2
c000fb84:	31 d2                	xor    edx,edx
c000fb86:	eb 9c                	jmp    c000fb24 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000fb88 <setupTextMode()>:
c000fb88:	a1 10 04 00 00       	mov    eax,ds:0x410
c000fb8d:	83 e0 30             	and    eax,0x30
c000fb90:	66 83 f8 30          	cmp    ax,0x30
c000fb94:	75 11                	jne    c000fba7 <setupTextMode()+0x1f>
c000fb96:	81 2d 80 d1 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002d180,0x8000
c000fba0:	c6 05 e0 e2 02 c0 01 	mov    BYTE PTR ds:0xc002e2e0,0x1
c000fba7:	c7 05 18 e3 02 c0 13 fa 00 c0 	mov    DWORD PTR ds:0xc002e318,0xc000fa13
c000fbb1:	c7 05 04 e3 02 c0 9a f8 00 c0 	mov    DWORD PTR ds:0xc002e304,0xc000f89a
c000fbbb:	c7 05 00 e3 02 c0 e5 f8 00 c0 	mov    DWORD PTR ds:0xc002e300,0xc000f8e5
c000fbc5:	c7 05 0c e3 02 c0 59 fa 00 c0 	mov    DWORD PTR ds:0xc002e30c,0xc000fa59
c000fbcf:	c7 05 14 e3 02 c0 63 f9 00 c0 	mov    DWORD PTR ds:0xc002e314,0xc000f963
c000fbd9:	c7 05 08 e3 02 c0 c1 f9 00 c0 	mov    DWORD PTR ds:0xc002e308,0xc000f9c1
c000fbe3:	c7 05 10 e3 02 c0 c2 f9 00 c0 	mov    DWORD PTR ds:0xc002e310,0xc000f9c2
c000fbed:	c7 05 1c e3 02 c0 06 fb 00 c0 	mov    DWORD PTR ds:0xc002e31c,0xc000fb06
c000fbf7:	c3                   	ret    

c000fbf8 <kernel_main>:
c000fbf8:	57                   	push   edi
c000fbf9:	bf f9 03 00 00       	mov    edi,0x3f9
c000fbfe:	56                   	push   esi
c000fbff:	31 f6                	xor    esi,esi
c000fc01:	53                   	push   ebx
c000fc02:	83 ec 20             	sub    esp,0x20
c000fc05:	e8 8e 09 00 00       	call   c0010598 <installVgaTextImplementation()>
c000fc0a:	e8 79 ff ff ff       	call   c000fb88 <setupTextMode()>
c000fc0f:	89 f0                	mov    eax,esi
c000fc11:	89 fa                	mov    edx,edi
c000fc13:	ee                   	out    dx,al
c000fc14:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fc19:	b0 80                	mov    al,0x80
c000fc1b:	89 da                	mov    edx,ebx
c000fc1d:	ee                   	out    dx,al
c000fc1e:	b1 03                	mov    cl,0x3
c000fc20:	ba f8 03 00 00       	mov    edx,0x3f8
c000fc25:	88 c8                	mov    al,cl
c000fc27:	ee                   	out    dx,al
c000fc28:	89 f0                	mov    eax,esi
c000fc2a:	89 fa                	mov    edx,edi
c000fc2c:	ee                   	out    dx,al
c000fc2d:	88 c8                	mov    al,cl
c000fc2f:	89 da                	mov    edx,ebx
c000fc31:	ee                   	out    dx,al
c000fc32:	b0 c7                	mov    al,0xc7
c000fc34:	ba fa 03 00 00       	mov    edx,0x3fa
c000fc39:	ee                   	out    dx,al
c000fc3a:	b0 0b                	mov    al,0xb
c000fc3c:	ba fc 03 00 00       	mov    edx,0x3fc
c000fc41:	ee                   	out    dx,al
c000fc42:	83 ec 0c             	sub    esp,0xc
c000fc45:	68 e4 a0 02 c0       	push   0xc002a0e4
c000fc4a:	e8 49 31 00 00       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c000fc4f:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fc54:	05 ff 0f 00 00       	add    eax,0xfff
c000fc59:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fc5e:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc61:	e8 ee 03 00 00       	call   c0010054 <Phys::physicalMemorySetup(unsigned int)>
c000fc66:	e8 8f 20 00 00       	call   c0011cfa <Virt::virtualMemorySetup()>
c000fc6b:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fc71:	83 c4 10             	add    esp,0x10
c000fc74:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fc7a:	75 0e                	jne    c000fc8a <kernel_main+0x92>
c000fc7c:	89 d8                	mov    eax,ebx
c000fc7e:	25 48 03 00 00       	and    eax,0x348
c000fc83:	3d 00 03 00 00       	cmp    eax,0x300
c000fc88:	74 10                	je     c000fc9a <kernel_main+0xa2>
c000fc8a:	83 ec 0c             	sub    esp,0xc
c000fc8d:	68 31 b9 02 c0       	push   0xc002b931
c000fc92:	e8 dc a7 00 00       	call   c001a473 <Krnl::panic(char const*)>
c000fc97:	83 c4 10             	add    esp,0x10
c000fc9a:	83 ec 0c             	sub    esp,0xc
c000fc9d:	89 1d 60 e2 02 c0    	mov    DWORD PTR ds:0xc002e260,ebx
c000fca3:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000fca7:	53                   	push   ebx
c000fca8:	e8 3b 21 00 00       	call   c0011de8 <VAS::VAS()>
c000fcad:	89 1d cc e3 02 c0    	mov    DWORD PTR ds:0xc002e3cc,ebx
c000fcb3:	e8 68 03 ff ff       	call   c0000020 <callGlobalConstructors>
c000fcb8:	c7 04 24 fb a0 02 c0 	mov    DWORD PTR [esp],0xc002a0fb
c000fcbf:	e8 d4 30 00 00       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c000fcc4:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fccb:	e8 70 fb ff ff       	call   c000f840 <malloc>
c000fcd0:	89 04 24             	mov    DWORD PTR [esp],eax
c000fcd3:	89 c6                	mov    esi,eax
c000fcd5:	e8 60 ea ff ff       	call   c000e73a <Computer::Computer()>
c000fcda:	58                   	pop    eax
c000fcdb:	89 35 48 e2 02 c0    	mov    DWORD PTR ds:0xc002e248,esi
c000fce1:	5a                   	pop    edx
c000fce2:	56                   	push   esi
c000fce3:	68 18 a1 02 c0       	push   0xc002a118
c000fce8:	e8 ab 30 00 00       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c000fced:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c000fcf2:	8b 10                	mov    edx,DWORD PTR [eax]
c000fcf4:	6a 00                	push   0x0
c000fcf6:	6a 00                	push   0x0
c000fcf8:	6a 00                	push   0x0
c000fcfa:	50                   	push   eax
c000fcfb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fcfe:	83 c4 14             	add    esp,0x14
c000fd01:	53                   	push   ebx
c000fd02:	e8 91 23 00 00       	call   c0012098 <VAS::~VAS()>
c000fd07:	c7 04 24 2b a1 02 c0 	mov    DWORD PTR [esp],0xc002a12b
c000fd0e:	e8 60 a7 00 00       	call   c001a473 <Krnl::panic(char const*)>
c000fd13:	83 c4 30             	add    esp,0x30
c000fd16:	5b                   	pop    ebx
c000fd17:	5e                   	pop    esi
c000fd18:	5f                   	pop    edi
c000fd19:	c3                   	ret    

c000fd1a <Phys::allocateDMA(unsigned long)>:
c000fd1a:	55                   	push   ebp
c000fd1b:	31 d2                	xor    edx,edx
c000fd1d:	57                   	push   edi
c000fd1e:	31 ed                	xor    ebp,ebp
c000fd20:	56                   	push   esi
c000fd21:	31 c9                	xor    ecx,ecx
c000fd23:	53                   	push   ebx
c000fd24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd28:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fd2e:	31 c0                	xor    eax,eax
c000fd30:	c1 ee 0c             	shr    esi,0xc
c000fd33:	eb 17                	jmp    c000fd4c <Phys::allocateDMA(unsigned long)+0x32>
c000fd35:	85 c9                	test   ecx,ecx
c000fd37:	75 04                	jne    c000fd3d <Phys::allocateDMA(unsigned long)+0x23>
c000fd39:	89 d5                	mov    ebp,edx
c000fd3b:	89 d0                	mov    eax,edx
c000fd3d:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fd40:	39 de                	cmp    esi,ebx
c000fd42:	74 20                	je     c000fd64 <Phys::allocateDMA(unsigned long)+0x4a>
c000fd44:	42                   	inc    edx
c000fd45:	89 d9                	mov    ecx,ebx
c000fd47:	83 fa 2f             	cmp    edx,0x2f
c000fd4a:	7f 11                	jg     c000fd5d <Phys::allocateDMA(unsigned long)+0x43>
c000fd4c:	80 ba a0 e2 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd1d60],0x0
c000fd53:	74 e0                	je     c000fd35 <Phys::allocateDMA(unsigned long)+0x1b>
c000fd55:	31 c9                	xor    ecx,ecx
c000fd57:	42                   	inc    edx
c000fd58:	83 fa 2f             	cmp    edx,0x2f
c000fd5b:	7e ef                	jle    c000fd4c <Phys::allocateDMA(unsigned long)+0x32>
c000fd5d:	5b                   	pop    ebx
c000fd5e:	31 c0                	xor    eax,eax
c000fd60:	5e                   	pop    esi
c000fd61:	5f                   	pop    edi
c000fd62:	5d                   	pop    ebp
c000fd63:	c3                   	ret    
c000fd64:	8d 14 30             	lea    edx,[eax+esi*1]
c000fd67:	89 d7                	mov    edi,edx
c000fd69:	4f                   	dec    edi
c000fd6a:	79 03                	jns    c000fd6f <Phys::allocateDMA(unsigned long)+0x55>
c000fd6c:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fd6f:	c1 ff 04             	sar    edi,0x4
c000fd72:	89 c2                	mov    edx,eax
c000fd74:	c1 fa 04             	sar    edx,0x4
c000fd77:	39 fa                	cmp    edx,edi
c000fd79:	75 2f                	jne    c000fdaa <Phys::allocateDMA(unsigned long)+0x90>
c000fd7b:	85 db                	test   ebx,ebx
c000fd7d:	74 1a                	je     c000fd99 <Phys::allocateDMA(unsigned long)+0x7f>
c000fd7f:	be a0 e2 02 c0       	mov    esi,0xc002e2a0
c000fd84:	8d 90 a0 e2 02 c0    	lea    edx,[eax-0x3ffd1d60]
c000fd8a:	f7 d6                	not    esi
c000fd8c:	29 c6                	sub    esi,eax
c000fd8e:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fd91:	42                   	inc    edx
c000fd92:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fd95:	39 d9                	cmp    ecx,ebx
c000fd97:	7f f5                	jg     c000fd8e <Phys::allocateDMA(unsigned long)+0x74>
c000fd99:	85 ff                	test   edi,edi
c000fd9b:	74 13                	je     c000fdb0 <Phys::allocateDMA(unsigned long)+0x96>
c000fd9d:	5b                   	pop    ebx
c000fd9e:	05 50 20 0c 00       	add    eax,0xc2050
c000fda3:	5e                   	pop    esi
c000fda4:	c1 e0 0c             	shl    eax,0xc
c000fda7:	5f                   	pop    edi
c000fda8:	5d                   	pop    ebp
c000fda9:	c3                   	ret    
c000fdaa:	89 ea                	mov    edx,ebp
c000fdac:	31 c9                	xor    ecx,ecx
c000fdae:	eb a7                	jmp    c000fd57 <Phys::allocateDMA(unsigned long)+0x3d>
c000fdb0:	5b                   	pop    ebx
c000fdb1:	c1 e0 0c             	shl    eax,0xc
c000fdb4:	5e                   	pop    esi
c000fdb5:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fdba:	5f                   	pop    edi
c000fdbb:	5d                   	pop    ebp
c000fdbc:	c3                   	ret    

c000fdbd <Phys::freeDMA(unsigned long, unsigned long)>:
c000fdbd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdc1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fdc5:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fdcb:	c1 e9 0c             	shr    ecx,0xc
c000fdce:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fdd3:	76 25                	jbe    c000fdfa <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fdd5:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fdda:	c1 e8 0c             	shr    eax,0xc
c000fddd:	8d 50 10             	lea    edx,[eax+0x10]
c000fde0:	85 c9                	test   ecx,ecx
c000fde2:	74 15                	je     c000fdf9 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fde4:	8d 82 a0 e2 02 c0    	lea    eax,[edx-0x3ffd1d60]
c000fdea:	8d 94 11 a0 e2 02 c0 	lea    edx,[ecx+edx*1-0x3ffd1d60]
c000fdf1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fdf4:	40                   	inc    eax
c000fdf5:	39 d0                	cmp    eax,edx
c000fdf7:	75 f8                	jne    c000fdf1 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fdf9:	c3                   	ret    
c000fdfa:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fe00:	c1 ea 0c             	shr    edx,0xc
c000fe03:	eb db                	jmp    c000fde0 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fe05 <Phys::setPageState(unsigned long, bool)>:
c000fe05:	56                   	push   esi
c000fe06:	ba 01 00 00 00       	mov    edx,0x1
c000fe0b:	53                   	push   ebx
c000fe0c:	8b 35 7c d1 02 c0    	mov    esi,DWORD PTR ds:0xc002d17c
c000fe12:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe16:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe1a:	89 c8                	mov    eax,ecx
c000fe1c:	83 e1 07             	and    ecx,0x7
c000fe1f:	c1 e8 03             	shr    eax,0x3
c000fe22:	d3 e3                	shl    ebx,cl
c000fe24:	01 c6                	add    esi,eax
c000fe26:	d3 e2                	shl    edx,cl
c000fe28:	f7 d2                	not    edx
c000fe2a:	20 16                	and    BYTE PTR [esi],dl
c000fe2c:	03 05 7c d1 02 c0    	add    eax,DWORD PTR ds:0xc002d17c
c000fe32:	08 18                	or     BYTE PTR [eax],bl
c000fe34:	5b                   	pop    ebx
c000fe35:	5e                   	pop    esi
c000fe36:	c3                   	ret    

c000fe37 <Phys::getPageState(unsigned long)>:
c000fe37:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fe3b:	8b 15 7c d1 02 c0    	mov    edx,DWORD PTR ds:0xc002d17c
c000fe41:	89 c8                	mov    eax,ecx
c000fe43:	83 e1 07             	and    ecx,0x7
c000fe46:	c1 e8 03             	shr    eax,0x3
c000fe49:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fe4d:	d3 f8                	sar    eax,cl
c000fe4f:	83 e0 01             	and    eax,0x1
c000fe52:	c3                   	ret    

c000fe53 <Phys::freePage(unsigned long)>:
c000fe53:	53                   	push   ebx
c000fe54:	83 ec 08             	sub    esp,0x8
c000fe57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe5b:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fe61:	76 57                	jbe    c000feba <Phys::freePage(unsigned long)+0x67>
c000fe63:	c1 eb 0c             	shr    ebx,0xc
c000fe66:	53                   	push   ebx
c000fe67:	e8 cb ff ff ff       	call   c000fe37 <Phys::getPageState(unsigned long)>
c000fe6c:	5a                   	pop    edx
c000fe6d:	84 c0                	test   al,al
c000fe6f:	74 5b                	je     c000fecc <Phys::freePage(unsigned long)+0x79>
c000fe71:	a1 90 e2 02 c0       	mov    eax,ds:0xc002e290
c000fe76:	48                   	dec    eax
c000fe77:	a3 90 e2 02 c0       	mov    ds:0xc002e290,eax
c000fe7c:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe7f:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe82:	c1 e0 02             	shl    eax,0x2
c000fe85:	99                   	cdq    
c000fe86:	f7 3d 94 e2 02 c0    	idiv   DWORD PTR ds:0xc002e294
c000fe8c:	39 05 8c e2 02 c0    	cmp    DWORD PTR ds:0xc002e28c,eax
c000fe92:	75 13                	jne    c000fea7 <Phys::freePage(unsigned long)+0x54>
c000fe94:	83 ec 08             	sub    esp,0x8
c000fe97:	6a 00                	push   0x0
c000fe99:	53                   	push   ebx
c000fe9a:	e8 66 ff ff ff       	call   c000fe05 <Phys::setPageState(unsigned long, bool)>
c000fe9f:	83 c4 10             	add    esp,0x10
c000fea2:	83 c4 08             	add    esp,0x8
c000fea5:	5b                   	pop    ebx
c000fea6:	c3                   	ret    
c000fea7:	83 ec 0c             	sub    esp,0xc
c000feaa:	a3 8c e2 02 c0       	mov    ds:0xc002e28c,eax
c000feaf:	50                   	push   eax
c000feb0:	e8 77 0a 00 00       	call   c001092c <VgaText::updateRAMUsageDisplay(int)>
c000feb5:	83 c4 10             	add    esp,0x10
c000feb8:	eb da                	jmp    c000fe94 <Phys::freePage(unsigned long)+0x41>
c000feba:	68 00 10 00 00       	push   0x1000
c000febf:	53                   	push   ebx
c000fec0:	e8 f8 fe ff ff       	call   c000fdbd <Phys::freeDMA(unsigned long, unsigned long)>
c000fec5:	59                   	pop    ecx
c000fec6:	5b                   	pop    ebx
c000fec7:	83 c4 08             	add    esp,0x8
c000feca:	5b                   	pop    ebx
c000fecb:	c3                   	ret    
c000fecc:	c7 44 24 10 46 a1 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a146
c000fed4:	83 c4 08             	add    esp,0x8
c000fed7:	5b                   	pop    ebx
c000fed8:	e9 96 a5 00 00       	jmp    c001a473 <Krnl::panic(char const*)>

c000fedd <Phys::allocatePage()>:
c000fedd:	56                   	push   esi
c000fede:	53                   	push   ebx
c000fedf:	51                   	push   ecx
c000fee0:	8b 35 84 e2 02 c0    	mov    esi,DWORD PTR ds:0xc002e284
c000fee6:	89 f3                	mov    ebx,esi
c000fee8:	eb 0a                	jmp    c000fef4 <Phys::allocatePage()+0x17>
c000feea:	89 1d 84 e2 02 c0    	mov    DWORD PTR ds:0xc002e284,ebx
c000fef0:	39 de                	cmp    esi,ebx
c000fef2:	74 24                	je     c000ff18 <Phys::allocatePage()+0x3b>
c000fef4:	53                   	push   ebx
c000fef5:	e8 3d ff ff ff       	call   c000fe37 <Phys::getPageState(unsigned long)>
c000fefa:	5a                   	pop    edx
c000fefb:	84 c0                	test   al,al
c000fefd:	74 77                	je     c000ff76 <Phys::allocatePage()+0x99>
c000feff:	43                   	inc    ebx
c000ff00:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ff06:	75 e2                	jne    c000feea <Phys::allocatePage()+0xd>
c000ff08:	31 db                	xor    ebx,ebx
c000ff0a:	c7 05 84 e2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e284,0x0
c000ff14:	39 de                	cmp    esi,ebx
c000ff16:	75 dc                	jne    c000fef4 <Phys::allocatePage()+0x17>
c000ff18:	83 ec 0c             	sub    esp,0xc
c000ff1b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ff20:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ff23:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c000ff29:	e8 66 2b 00 00       	call   c0012a94 <VAS::scanForEviction()>
c000ff2e:	83 c4 10             	add    esp,0x10
c000ff31:	85 c0                	test   eax,eax
c000ff33:	75 76                	jne    c000ffab <Phys::allocatePage()+0xce>
c000ff35:	83 ec 0c             	sub    esp,0xc
c000ff38:	68 5c a1 02 c0       	push   0xc002a15c
c000ff3d:	e8 56 2e 00 00       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c000ff42:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000ff49:	e8 cc fd ff ff       	call   c000fd1a <Phys::allocateDMA(unsigned long)>
c000ff4e:	83 c4 10             	add    esp,0x10
c000ff51:	85 c0                	test   eax,eax
c000ff53:	75 56                	jne    c000ffab <Phys::allocatePage()+0xce>
c000ff55:	83 ec 0c             	sub    esp,0xc
c000ff58:	68 6d a1 02 c0       	push   0xc002a16d
c000ff5d:	e8 11 a5 00 00       	call   c001a473 <Krnl::panic(char const*)>
c000ff62:	83 c4 10             	add    esp,0x10
c000ff65:	8b 1d 84 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e284
c000ff6b:	53                   	push   ebx
c000ff6c:	e8 c6 fe ff ff       	call   c000fe37 <Phys::getPageState(unsigned long)>
c000ff71:	5a                   	pop    edx
c000ff72:	84 c0                	test   al,al
c000ff74:	75 89                	jne    c000feff <Phys::allocatePage()+0x22>
c000ff76:	6a 01                	push   0x1
c000ff78:	53                   	push   ebx
c000ff79:	e8 87 fe ff ff       	call   c000fe05 <Phys::setPageState(unsigned long, bool)>
c000ff7e:	a1 90 e2 02 c0       	mov    eax,ds:0xc002e290
c000ff83:	59                   	pop    ecx
c000ff84:	40                   	inc    eax
c000ff85:	5b                   	pop    ebx
c000ff86:	a3 90 e2 02 c0       	mov    ds:0xc002e290,eax
c000ff8b:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff8e:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff91:	c1 e0 02             	shl    eax,0x2
c000ff94:	99                   	cdq    
c000ff95:	f7 3d 94 e2 02 c0    	idiv   DWORD PTR ds:0xc002e294
c000ff9b:	39 05 8c e2 02 c0    	cmp    DWORD PTR ds:0xc002e28c,eax
c000ffa1:	75 0c                	jne    c000ffaf <Phys::allocatePage()+0xd2>
c000ffa3:	a1 84 e2 02 c0       	mov    eax,ds:0xc002e284
c000ffa8:	c1 e0 0c             	shl    eax,0xc
c000ffab:	5a                   	pop    edx
c000ffac:	5b                   	pop    ebx
c000ffad:	5e                   	pop    esi
c000ffae:	c3                   	ret    
c000ffaf:	83 ec 0c             	sub    esp,0xc
c000ffb2:	a3 8c e2 02 c0       	mov    ds:0xc002e28c,eax
c000ffb7:	50                   	push   eax
c000ffb8:	e8 6f 09 00 00       	call   c001092c <VgaText::updateRAMUsageDisplay(int)>
c000ffbd:	83 c4 10             	add    esp,0x10
c000ffc0:	eb e1                	jmp    c000ffa3 <Phys::allocatePage()+0xc6>

c000ffc2 <Phys::allocateContiguousPages(int)>:
c000ffc2:	57                   	push   edi
c000ffc3:	56                   	push   esi
c000ffc4:	53                   	push   ebx
c000ffc5:	31 db                	xor    ebx,ebx
c000ffc7:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000ffcb:	e8 9d dc 00 00       	call   c001dc6d <lockScheduler()>
c000ffd0:	85 db                	test   ebx,ebx
c000ffd2:	75 11                	jne    c000ffe5 <Phys::allocateContiguousPages(int)+0x23>
c000ffd4:	e8 04 ff ff ff       	call   c000fedd <Phys::allocatePage()>
c000ffd9:	83 ff 01             	cmp    edi,0x1
c000ffdc:	89 c6                	mov    esi,eax
c000ffde:	74 21                	je     c0010001 <Phys::allocateContiguousPages(int)+0x3f>
c000ffe0:	bb 01 00 00 00       	mov    ebx,0x1
c000ffe5:	e8 f3 fe ff ff       	call   c000fedd <Phys::allocatePage()>
c000ffea:	89 da                	mov    edx,ebx
c000ffec:	c1 e2 0c             	shl    edx,0xc
c000ffef:	01 f2                	add    edx,esi
c000fff1:	39 c2                	cmp    edx,eax
c000fff3:	74 17                	je     c001000c <Phys::allocateContiguousPages(int)+0x4a>
c000fff5:	bb 01 00 00 00       	mov    ebx,0x1
c000fffa:	89 c6                	mov    esi,eax
c000fffc:	83 ff 01             	cmp    edi,0x1
c000ffff:	75 e4                	jne    c000ffe5 <Phys::allocateContiguousPages(int)+0x23>
c0010001:	e8 69 dc 00 00       	call   c001dc6f <unlockScheduler()>
c0010006:	89 f0                	mov    eax,esi
c0010008:	5b                   	pop    ebx
c0010009:	5e                   	pop    esi
c001000a:	5f                   	pop    edi
c001000b:	c3                   	ret    
c001000c:	43                   	inc    ebx
c001000d:	39 fb                	cmp    ebx,edi
c001000f:	75 bf                	jne    c000ffd0 <Phys::allocateContiguousPages(int)+0xe>
c0010011:	e8 59 dc 00 00       	call   c001dc6f <unlockScheduler()>
c0010016:	89 f0                	mov    eax,esi
c0010018:	5b                   	pop    ebx
c0010019:	5e                   	pop    esi
c001001a:	5f                   	pop    edi
c001001b:	c3                   	ret    

c001001c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c001001c:	56                   	push   esi
c001001d:	53                   	push   ebx
c001001e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010022:	39 1d 88 e2 02 c0    	cmp    DWORD PTR ds:0xc002e288,ebx
c0010028:	73 06                	jae    c0010030 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c001002a:	89 1d 88 e2 02 c0    	mov    DWORD PTR ds:0xc002e288,ebx
c0010030:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010034:	c1 eb 0c             	shr    ebx,0xc
c0010037:	c1 e8 0c             	shr    eax,0xc
c001003a:	39 d8                	cmp    eax,ebx
c001003c:	73 13                	jae    c0010051 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c001003e:	6a 00                	push   0x0
c0010040:	8d 70 01             	lea    esi,[eax+0x1]
c0010043:	50                   	push   eax
c0010044:	e8 bc fd ff ff       	call   c000fe05 <Phys::setPageState(unsigned long, bool)>
c0010049:	5a                   	pop    edx
c001004a:	89 f0                	mov    eax,esi
c001004c:	59                   	pop    ecx
c001004d:	39 f3                	cmp    ebx,esi
c001004f:	75 ed                	jne    c001003e <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0010051:	5b                   	pop    ebx
c0010052:	5e                   	pop    esi
c0010053:	c3                   	ret    

c0010054 <Phys::physicalMemorySetup(unsigned int)>:
c0010054:	55                   	push   ebp
c0010055:	57                   	push   edi
c0010056:	56                   	push   esi
c0010057:	53                   	push   ebx
c0010058:	31 db                	xor    ebx,ebx
c001005a:	83 ec 40             	sub    esp,0x40
c001005d:	6a 30                	push   0x30
c001005f:	6a 00                	push   0x0
c0010061:	68 a0 e2 02 c0       	push   0xc002e2a0
c0010066:	e8 0d 07 ff ff       	call   c0000778 <memset>
c001006b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001006f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0010074:	05 00 10 00 00       	add    eax,0x1000
c0010079:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001007d:	83 c4 10             	add    esp,0x10
c0010080:	83 ec 08             	sub    esp,0x8
c0010083:	6a 01                	push   0x1
c0010085:	53                   	push   ebx
c0010086:	43                   	inc    ebx
c0010087:	e8 79 fd ff ff       	call   c000fe05 <Phys::setPageState(unsigned long, bool)>
c001008c:	83 c4 10             	add    esp,0x10
c001008f:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0010095:	75 e9                	jne    c0010080 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c0010097:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c001009e:	66 85 c0             	test   ax,ax
c00100a1:	0f 84 8e 01 00 00    	je     c0010235 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c00100a7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00100ab:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00100b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00100b7:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c00100bc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00100c0:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00100c8:	eb 15                	jmp    c00100df <Phys::physicalMemorySetup(unsigned int)+0x8b>
c00100ca:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00100ce:	83 c3 18             	add    ebx,0x18
c00100d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00100d5:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00100d9:	0f 84 66 01 00 00    	je     c0010245 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c00100df:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00100e2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00100e5:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00100e8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00100ec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00100f0:	8b 33                	mov    esi,DWORD PTR [ebx]
c00100f2:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c00100f5:	01 f0                	add    eax,esi
c00100f7:	55                   	push   ebp
c00100f8:	11 fa                	adc    edx,edi
c00100fa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00100fe:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0010102:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0010106:	56                   	push   esi
c0010107:	68 a8 a1 02 c0       	push   0xc002a1a8
c001010c:	e8 87 2c 00 00       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0010111:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010115:	83 c4 10             	add    esp,0x10
c0010118:	09 f8                	or     eax,edi
c001011a:	0f 85 25 01 00 00    	jne    c0010245 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c0010120:	4d                   	dec    ebp
c0010121:	75 a7                	jne    c00100ca <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010123:	ba 00 00 08 00       	mov    edx,0x80000
c0010128:	89 c1                	mov    ecx,eax
c001012a:	39 f2                	cmp    edx,esi
c001012c:	19 f9                	sbb    ecx,edi
c001012e:	0f 82 a7 00 00 00    	jb     c00101db <Phys::physicalMemorySetup(unsigned int)+0x187>
c0010134:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0010138:	89 c1                	mov    ecx,eax
c001013a:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c001013e:	0f 83 97 00 00 00    	jae    c00101db <Phys::physicalMemorySetup(unsigned int)+0x187>
c0010144:	ba 00 00 0a 00       	mov    edx,0xa0000
c0010149:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001014d:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010151:	39 fa                	cmp    edx,edi
c0010153:	19 e8                	sbb    eax,ebp
c0010155:	0f 82 14 01 00 00    	jb     c001026f <Phys::physicalMemorySetup(unsigned int)+0x21b>
c001015b:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001015f:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010163:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0010169:	ba ff 1f 00 00       	mov    edx,0x1fff
c001016e:	83 d5 ff             	adc    ebp,0xffffffff
c0010171:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0010175:	31 c0                	xor    eax,eax
c0010177:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c001017b:	39 fa                	cmp    edx,edi
c001017d:	89 c1                	mov    ecx,eax
c001017f:	19 e9                	sbb    ecx,ebp
c0010181:	0f 83 43 ff ff ff    	jae    c00100ca <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010187:	be 00 00 08 00       	mov    esi,0x80000
c001018c:	50                   	push   eax
c001018d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0010191:	57                   	push   edi
c0010192:	56                   	push   esi
c0010193:	68 cc a1 02 c0       	push   0xc002a1cc
c0010198:	e8 fb 2b 00 00       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001019d:	5a                   	pop    edx
c001019e:	59                   	pop    ecx
c001019f:	57                   	push   edi
c00101a0:	56                   	push   esi
c00101a1:	e8 76 fe ff ff       	call   c001001c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00101a6:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00101aa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00101ae:	83 c4 0c             	add    esp,0xc
c00101b1:	0f ac d0 0c          	shrd   eax,edx,0xc
c00101b5:	03 05 94 e2 02 c0    	add    eax,DWORD PTR ds:0xc002e294
c00101bb:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00101c2:	a3 94 e2 02 c0       	mov    ds:0xc002e294,eax
c00101c7:	52                   	push   edx
c00101c8:	50                   	push   eax
c00101c9:	68 89 a1 02 c0       	push   0xc002a189
c00101ce:	e8 c5 2b 00 00       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c00101d3:	83 c4 10             	add    esp,0x10
c00101d6:	e9 ef fe ff ff       	jmp    c00100ca <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101db:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00101df:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101e3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00101e7:	39 ea                	cmp    edx,ebp
c00101e9:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c00101ed:	0f 82 d7 fe ff ff    	jb     c00100ca <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101f3:	ba ff 1f 00 00       	mov    edx,0x1fff
c00101f8:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00101fc:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0010200:	0f 83 c4 fe ff ff    	jae    c00100ca <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010206:	39 ee                	cmp    esi,ebp
c0010208:	89 f8                	mov    eax,edi
c001020a:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c001020e:	0f 83 78 ff ff ff    	jae    c001018c <Phys::physicalMemorySetup(unsigned int)+0x138>
c0010214:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010218:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001021c:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0010220:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010224:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0010228:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001022c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010230:	e9 57 ff ff ff       	jmp    c001018c <Phys::physicalMemorySetup(unsigned int)+0x138>
c0010235:	83 ec 0c             	sub    esp,0xc
c0010238:	68 7b a1 02 c0       	push   0xc002a17b
c001023d:	e8 31 a2 00 00       	call   c001a473 <Krnl::panic(char const*)>
c0010242:	83 c4 10             	add    esp,0x10
c0010245:	bb 40 01 00 00       	mov    ebx,0x140
c001024a:	83 ec 08             	sub    esp,0x8
c001024d:	6a 00                	push   0x0
c001024f:	53                   	push   ebx
c0010250:	43                   	inc    ebx
c0010251:	e8 af fb ff ff       	call   c000fe05 <Phys::setPageState(unsigned long, bool)>
c0010256:	ff 05 94 e2 02 c0    	inc    DWORD PTR ds:0xc002e294
c001025c:	83 c4 10             	add    esp,0x10
c001025f:	81 fb 80 01 00 00    	cmp    ebx,0x180
c0010265:	75 e3                	jne    c001024a <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c0010267:	83 c4 3c             	add    esp,0x3c
c001026a:	5b                   	pop    ebx
c001026b:	5e                   	pop    esi
c001026c:	5f                   	pop    edi
c001026d:	5d                   	pop    ebp
c001026e:	c3                   	ret    
c001026f:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0010277:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001027f:	e9 d7 fe ff ff       	jmp    c001015b <Phys::physicalMemorySetup(unsigned int)+0x107>

c0010284 <Pipe::isAtty()>:
c0010284:	31 c0                	xor    eax,eax
c0010286:	c3                   	ret    
c0010287:	90                   	nop

c0010288 <Pipe::~Pipe()>:
c0010288:	83 ec 0c             	sub    esp,0xc
c001028b:	ba 38 a2 02 c0       	mov    edx,0xc002a238
c0010290:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010294:	89 10                	mov    DWORD PTR [eax],edx
c0010296:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001029a:	83 ec 0c             	sub    esp,0xc
c001029d:	50                   	push   eax
c001029e:	e8 37 16 00 00       	call   c00118da <UnixFile::~UnixFile()>
c00102a3:	83 c4 10             	add    esp,0x10
c00102a6:	90                   	nop
c00102a7:	83 c4 0c             	add    esp,0xc
c00102aa:	c3                   	ret    
c00102ab:	90                   	nop

c00102ac <Pipe::~Pipe()>:
c00102ac:	83 ec 0c             	sub    esp,0xc
c00102af:	83 ec 0c             	sub    esp,0xc
c00102b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102b6:	e8 cd ff ff ff       	call   c0010288 <Pipe::~Pipe()>
c00102bb:	83 c4 10             	add    esp,0x10
c00102be:	83 ec 08             	sub    esp,0x8
c00102c1:	6a 20                	push   0x20
c00102c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102c7:	e8 ec 29 00 00       	call   c0012cb8 <operator delete(void*, unsigned long)>
c00102cc:	83 c4 10             	add    esp,0x10
c00102cf:	83 c4 0c             	add    esp,0xc
c00102d2:	c3                   	ret    
c00102d3:	90                   	nop

c00102d4 <Pipe::read(unsigned long long, void*, int*)>:
c00102d4:	55                   	push   ebp
c00102d5:	57                   	push   edi
c00102d6:	56                   	push   esi
c00102d7:	53                   	push   ebx
c00102d8:	83 ec 1c             	sub    esp,0x1c
c00102db:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00102df:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00102e3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00102e7:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00102ea:	89 c8                	mov    eax,ecx
c00102ec:	99                   	cdq    
c00102ed:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c00102f1:	74 19                	je     c001030c <Pipe::read(unsigned long long, void*, int*)+0x38>
c00102f3:	39 f9                	cmp    ecx,edi
c00102f5:	89 d1                	mov    ecx,edx
c00102f7:	19 f1                	sbb    ecx,esi
c00102f9:	73 11                	jae    c001030c <Pipe::read(unsigned long long, void*, int*)+0x38>
c00102fb:	e8 6d d9 00 00       	call   c001dc6d <lockScheduler()>
c0010300:	e8 a3 dc 00 00       	call   c001dfa8 <schedule()>
c0010305:	e8 65 d9 00 00       	call   c001dc6f <unlockScheduler()>
c001030a:	eb db                	jmp    c00102e7 <Pipe::read(unsigned long long, void*, int*)+0x13>
c001030c:	39 f8                	cmp    eax,edi
c001030e:	89 d1                	mov    ecx,edx
c0010310:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0010314:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0010318:	19 f1                	sbb    ecx,esi
c001031a:	73 08                	jae    c0010324 <Pipe::read(unsigned long long, void*, int*)+0x50>
c001031c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010320:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010324:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010327:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c001032a:	29 c6                	sub    esi,eax
c001032c:	89 f1                	mov    ecx,esi
c001032e:	c1 f9 1f             	sar    ecx,0x1f
c0010331:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0010335:	89 ca                	mov    edx,ecx
c0010337:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001033b:	19 d1                	sbb    ecx,edx
c001033d:	73 04                	jae    c0010343 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c001033f:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0010343:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010347:	89 fd                	mov    ebp,edi
c0010349:	29 f5                	sub    ebp,esi
c001034b:	85 f6                	test   esi,esi
c001034d:	74 12                	je     c0010361 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c001034f:	52                   	push   edx
c0010350:	56                   	push   esi
c0010351:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c0010354:	50                   	push   eax
c0010355:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0010359:	e8 e6 03 ff ff       	call   c0000744 <memcpy>
c001035e:	83 c4 10             	add    esp,0x10
c0010361:	85 ed                	test   ebp,ebp
c0010363:	74 12                	je     c0010377 <Pipe::read(unsigned long long, void*, int*)+0xa3>
c0010365:	50                   	push   eax
c0010366:	55                   	push   ebp
c0010367:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c001036a:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c001036e:	56                   	push   esi
c001036f:	e8 d0 03 ff ff       	call   c0000744 <memcpy>
c0010374:	83 c4 10             	add    esp,0x10
c0010377:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c001037a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001037d:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010380:	99                   	cdq    
c0010381:	89 f7                	mov    edi,esi
c0010383:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0010387:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c001038b:	c1 ff 1f             	sar    edi,0x1f
c001038e:	57                   	push   edi
c001038f:	56                   	push   esi
c0010390:	52                   	push   edx
c0010391:	50                   	push   eax
c0010392:	e8 e5 65 01 00       	call   c002697c <__umoddi3>
c0010397:	83 c4 10             	add    esp,0x10
c001039a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001039d:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00103a2:	75 10                	jne    c00103b4 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c00103a4:	83 ec 0c             	sub    esp,0xc
c00103a7:	68 f5 a1 02 c0       	push   0xc002a1f5
c00103ac:	e8 c2 a0 00 00       	call   c001a473 <Krnl::panic(char const*)>
c00103b1:	83 c4 10             	add    esp,0x10
c00103b4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00103b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00103bc:	89 10                	mov    DWORD PTR [eax],edx
c00103be:	83 c4 1c             	add    esp,0x1c
c00103c1:	31 c0                	xor    eax,eax
c00103c3:	5b                   	pop    ebx
c00103c4:	5e                   	pop    esi
c00103c5:	5f                   	pop    edi
c00103c6:	5d                   	pop    ebp
c00103c7:	c3                   	ret    

c00103c8 <Pipe::write(unsigned long long, void*, int*)>:
c00103c8:	55                   	push   ebp
c00103c9:	57                   	push   edi
c00103ca:	56                   	push   esi
c00103cb:	53                   	push   ebx
c00103cc:	83 ec 1c             	sub    esp,0x1c
c00103cf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00103d3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00103d7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00103db:	89 04 24             	mov    DWORD PTR [esp],eax
c00103de:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c00103e1:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c00103e4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00103e8:	89 de                	mov    esi,ebx
c00103ea:	89 df                	mov    edi,ebx
c00103ec:	c1 ff 1f             	sar    edi,0x1f
c00103ef:	01 c6                	add    esi,eax
c00103f1:	89 c8                	mov    eax,ecx
c00103f3:	11 d7                	adc    edi,edx
c00103f5:	99                   	cdq    
c00103f6:	39 f1                	cmp    ecx,esi
c00103f8:	89 d0                	mov    eax,edx
c00103fa:	19 f8                	sbb    eax,edi
c00103fc:	b8 01 00 00 00       	mov    eax,0x1
c0010401:	0f 82 80 00 00 00    	jb     c0010487 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c0010407:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001040a:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001040d:	01 d8                	add    eax,ebx
c001040f:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0010413:	99                   	cdq    
c0010414:	f7 f9                	idiv   ecx
c0010416:	29 d1                	sub    ecx,edx
c0010418:	89 d7                	mov    edi,edx
c001041a:	89 c8                	mov    eax,ecx
c001041c:	99                   	cdq    
c001041d:	39 ce                	cmp    esi,ecx
c001041f:	19 d3                	sbb    ebx,edx
c0010421:	bb 00 00 00 00       	mov    ebx,0x0
c0010426:	72 04                	jb     c001042c <Pipe::write(unsigned long long, void*, int*)+0x64>
c0010428:	89 f3                	mov    ebx,esi
c001042a:	29 cb                	sub    ebx,ecx
c001042c:	89 f1                	mov    ecx,esi
c001042e:	29 d9                	sub    ecx,ebx
c0010430:	74 1a                	je     c001044c <Pipe::write(unsigned long long, void*, int*)+0x84>
c0010432:	52                   	push   edx
c0010433:	51                   	push   ecx
c0010434:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010438:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001043c:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c001043f:	57                   	push   edi
c0010440:	e8 ff 02 ff ff       	call   c0000744 <memcpy>
c0010445:	83 c4 10             	add    esp,0x10
c0010448:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001044c:	85 db                	test   ebx,ebx
c001044e:	74 12                	je     c0010462 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c0010450:	50                   	push   eax
c0010451:	53                   	push   ebx
c0010452:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c0010456:	51                   	push   ecx
c0010457:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c001045a:	e8 e5 02 ff ff       	call   c0000744 <memcpy>
c001045f:	83 c4 10             	add    esp,0x10
c0010462:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c0010465:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c001046a:	75 10                	jne    c001047c <Pipe::write(unsigned long long, void*, int*)+0xb4>
c001046c:	83 ec 0c             	sub    esp,0xc
c001046f:	68 11 a2 02 c0       	push   0xc002a211
c0010474:	e8 fa 9f 00 00       	call   c001a473 <Krnl::panic(char const*)>
c0010479:	83 c4 10             	add    esp,0x10
c001047c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010480:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0010483:	89 38                	mov    DWORD PTR [eax],edi
c0010485:	31 c0                	xor    eax,eax
c0010487:	83 c4 1c             	add    esp,0x1c
c001048a:	5b                   	pop    ebx
c001048b:	5e                   	pop    esi
c001048c:	5f                   	pop    edi
c001048d:	5d                   	pop    ebp
c001048e:	c3                   	ret    
c001048f:	90                   	nop

c0010490 <Pipe::Pipe(int)>:
c0010490:	83 ec 0c             	sub    esp,0xc
c0010493:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010497:	83 ec 08             	sub    esp,0x8
c001049a:	6a 00                	push   0x0
c001049c:	50                   	push   eax
c001049d:	e8 56 12 00 00       	call   c00116f8 <UnixFile::UnixFile(int)>
c00104a2:	83 c4 10             	add    esp,0x10
c00104a5:	ba 38 a2 02 c0       	mov    edx,0xc002a238
c00104aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104ae:	89 10                	mov    DWORD PTR [eax],edx
c00104b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104b4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00104b8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00104bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104bf:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00104c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104ca:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00104d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00104d5:	83 ec 0c             	sub    esp,0xc
c00104d8:	50                   	push   eax
c00104d9:	e8 62 f3 ff ff       	call   c000f840 <malloc>
c00104de:	83 c4 10             	add    esp,0x10
c00104e1:	89 c2                	mov    edx,eax
c00104e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104e7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00104ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104ee:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00104f2:	90                   	nop
c00104f3:	83 c4 0c             	add    esp,0xc
c00104f6:	c3                   	ret    
c00104f7:	90                   	nop

c00104f8 <VgaText::isAtty()>:
c00104f8:	b0 01                	mov    al,0x1
c00104fa:	c3                   	ret    
c00104fb:	90                   	nop

c00104fc <VgaText::~VgaText()>:
c00104fc:	83 ec 0c             	sub    esp,0xc
c00104ff:	ba f4 a2 02 c0       	mov    edx,0xc002a2f4
c0010504:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010508:	89 10                	mov    DWORD PTR [eax],edx
c001050a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001050e:	83 ec 0c             	sub    esp,0xc
c0010511:	50                   	push   eax
c0010512:	e8 c3 13 00 00       	call   c00118da <UnixFile::~UnixFile()>
c0010517:	83 c4 10             	add    esp,0x10
c001051a:	90                   	nop
c001051b:	83 c4 0c             	add    esp,0xc
c001051e:	c3                   	ret    
c001051f:	90                   	nop

c0010520 <VgaText::~VgaText()>:
c0010520:	83 ec 0c             	sub    esp,0xc
c0010523:	83 ec 0c             	sub    esp,0xc
c0010526:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001052a:	e8 cd ff ff ff       	call   c00104fc <VgaText::~VgaText()>
c001052f:	83 c4 10             	add    esp,0x10
c0010532:	83 ec 08             	sub    esp,0x8
c0010535:	68 60 12 00 00       	push   0x1260
c001053a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001053e:	e8 75 27 00 00       	call   c0012cb8 <operator delete(void*, unsigned long)>
c0010543:	83 c4 10             	add    esp,0x10
c0010546:	83 c4 0c             	add    esp,0xc
c0010549:	c3                   	ret    

c001054a <VgaText::read(unsigned long long, void*, int*)>:
c001054a:	83 ec 10             	sub    esp,0x10
c001054d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010551:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010555:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010559:	e8 12 5c 00 00       	call   c0016170 <readKeyboard(VgaText*, char*, unsigned long)>
c001055e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010562:	89 02                	mov    DWORD PTR [edx],eax
c0010564:	31 c0                	xor    eax,eax
c0010566:	83 c4 1c             	add    esp,0x1c
c0010569:	c3                   	ret    

c001056a <setTerminalScrollLock(bool)>:
c001056a:	c3                   	ret    

c001056b <addToTerminalCycle(VgaText*)>:
c001056b:	8b 15 20 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e320
c0010571:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010575:	85 d2                	test   edx,edx
c0010577:	75 0c                	jne    c0010585 <addToTerminalCycle(VgaText*)+0x1a>
c0010579:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c001057f:	a3 20 e3 02 c0       	mov    ds:0xc002e320,eax
c0010584:	c3                   	ret    
c0010585:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c001058b:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c0010591:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c0010597:	c3                   	ret    

c0010598 <installVgaTextImplementation()>:
c0010598:	83 ec 10             	sub    esp,0x10
c001059b:	6a 20                	push   0x20
c001059d:	6a 00                	push   0x0
c001059f:	68 00 e3 02 c0       	push   0xc002e300
c00105a4:	e8 cf 01 ff ff       	call   c0000778 <memset>
c00105a9:	83 c4 1c             	add    esp,0x1c
c00105ac:	c3                   	ret    

c00105ad <scrollTerminalScrollLock(int)>:
c00105ad:	c3                   	ret    

c00105ae <VgaText::load()>:
c00105ae:	53                   	push   ebx
c00105af:	31 c0                	xor    eax,eax
c00105b1:	83 ec 58             	sub    esp,0x58
c00105b4:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c00105b8:	89 e2                	mov    edx,esp
c00105ba:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c00105be:	40                   	inc    eax
c00105bf:	83 f8 50             	cmp    eax,0x50
c00105c2:	75 f6                	jne    c00105ba <VgaText::load()+0xc>
c00105c4:	31 c0                	xor    eax,eax
c00105c6:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c00105cd:	84 c9                	test   cl,cl
c00105cf:	74 06                	je     c00105d7 <VgaText::load()+0x29>
c00105d1:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00105d4:	40                   	inc    eax
c00105d5:	eb ef                	jmp    c00105c6 <VgaText::load()+0x18>
c00105d7:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c00105dd:	85 c0                	test   eax,eax
c00105df:	74 09                	je     c00105ea <VgaText::load()+0x3c>
c00105e1:	51                   	push   ecx
c00105e2:	51                   	push   ecx
c00105e3:	52                   	push   edx
c00105e4:	53                   	push   ebx
c00105e5:	ff d0                	call   eax
c00105e7:	83 c4 10             	add    esp,0x10
c00105ea:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c00105f0:	85 c0                	test   eax,eax
c00105f2:	74 09                	je     c00105fd <VgaText::load()+0x4f>
c00105f4:	83 ec 0c             	sub    esp,0xc
c00105f7:	53                   	push   ebx
c00105f8:	ff d0                	call   eax
c00105fa:	83 c4 10             	add    esp,0x10
c00105fd:	83 c4 58             	add    esp,0x58
c0010600:	5b                   	pop    ebx
c0010601:	c3                   	ret    

c0010602 <VgaText::updateCursor()>:
c0010602:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010606:	39 05 24 e3 02 c0    	cmp    DWORD PTR ds:0xc002e324,eax
c001060c:	75 0c                	jne    c001061a <VgaText::updateCursor()+0x18>
c001060e:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c0010614:	85 c0                	test   eax,eax
c0010616:	74 02                	je     c001061a <VgaText::updateCursor()+0x18>
c0010618:	ff e0                	jmp    eax
c001061a:	c3                   	ret    
c001061b:	90                   	nop

c001061c <VgaText::showCursor(bool)>:
c001061c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010620:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010624:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c001062a:	c3                   	ret    
c001062b:	90                   	nop

c001062c <VgaText::disableBlink(bool)>:
c001062c:	56                   	push   esi
c001062d:	53                   	push   ebx
c001062e:	51                   	push   ecx
c001062f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010633:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010637:	39 1d 24 e3 02 c0    	cmp    DWORD PTR ds:0xc002e324,ebx
c001063d:	75 18                	jne    c0010657 <VgaText::disableBlink(bool)+0x2b>
c001063f:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c0010645:	85 c0                	test   eax,eax
c0010647:	74 0e                	je     c0010657 <VgaText::disableBlink(bool)+0x2b>
c0010649:	89 f1                	mov    ecx,esi
c001064b:	52                   	push   edx
c001064c:	52                   	push   edx
c001064d:	0f b6 d1             	movzx  edx,cl
c0010650:	52                   	push   edx
c0010651:	53                   	push   ebx
c0010652:	ff d0                	call   eax
c0010654:	83 c4 10             	add    esp,0x10
c0010657:	89 f0                	mov    eax,esi
c0010659:	83 f0 01             	xor    eax,0x1
c001065c:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c0010662:	58                   	pop    eax
c0010663:	5b                   	pop    ebx
c0010664:	5e                   	pop    esi
c0010665:	c3                   	ret    

c0010666 <VgaText::doANSI_SGR(int)>:
c0010666:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001066a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001066e:	85 d2                	test   edx,edx
c0010670:	75 14                	jne    c0010686 <VgaText::doANSI_SGR(int)+0x20>
c0010672:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c0010678:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c001067e:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c0010684:	eb 65                	jmp    c00106eb <VgaText::doANSI_SGR(int)+0x85>
c0010686:	83 fa 07             	cmp    edx,0x7
c0010689:	75 14                	jne    c001069f <VgaText::doANSI_SGR(int)+0x39>
c001068b:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c0010691:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c0010697:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c001069d:	eb 4c                	jmp    c00106eb <VgaText::doANSI_SGR(int)+0x85>
c001069f:	83 fa 1b             	cmp    edx,0x1b
c00106a2:	74 ce                	je     c0010672 <VgaText::doANSI_SGR(int)+0xc>
c00106a4:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00106a7:	83 f9 07             	cmp    ecx,0x7
c00106aa:	77 09                	ja     c00106b5 <VgaText::doANSI_SGR(int)+0x4f>
c00106ac:	8b 14 8d a0 d1 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2e60]
c00106b3:	eb 20                	jmp    c00106d5 <VgaText::doANSI_SGR(int)+0x6f>
c00106b5:	8d 4a d8             	lea    ecx,[edx-0x28]
c00106b8:	83 f9 07             	cmp    ecx,0x7
c00106bb:	77 09                	ja     c00106c6 <VgaText::doANSI_SGR(int)+0x60>
c00106bd:	8b 14 8d a0 d1 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2e60]
c00106c4:	eb 25                	jmp    c00106eb <VgaText::doANSI_SGR(int)+0x85>
c00106c6:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00106c9:	83 f9 07             	cmp    ecx,0x7
c00106cc:	77 0e                	ja     c00106dc <VgaText::doANSI_SGR(int)+0x76>
c00106ce:	8b 14 95 58 d0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2fa8]
c00106d5:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00106db:	c3                   	ret    
c00106dc:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00106df:	83 f9 07             	cmp    ecx,0x7
c00106e2:	77 0d                	ja     c00106f1 <VgaText::doANSI_SGR(int)+0x8b>
c00106e4:	8b 14 95 30 d0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2fd0]
c00106eb:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c00106f1:	c3                   	ret    

c00106f2 <VgaText::setDefaultBgColour(VgaColour)>:
c00106f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106f6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106fa:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c0010700:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c0010706:	c3                   	ret    
c0010707:	90                   	nop

c0010708 <VgaText::setDefaultFgColour(VgaColour)>:
c0010708:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001070c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010710:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c0010716:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c001071c:	c3                   	ret    
c001071d:	90                   	nop

c001071e <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c001071e:	53                   	push   ebx
c001071f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010723:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010727:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001072b:	51                   	push   ecx
c001072c:	e8 c1 ff ff ff       	call   c00106f2 <VgaText::setDefaultBgColour(VgaColour)>
c0010731:	58                   	pop    eax
c0010732:	5a                   	pop    edx
c0010733:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0010737:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001073b:	5b                   	pop    ebx
c001073c:	eb ca                	jmp    c0010708 <VgaText::setDefaultFgColour(VgaColour)>

c001073e <VgaText::combineColours(unsigned char, unsigned char)>:
c001073e:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0010742:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0010747:	83 e0 0f             	and    eax,0xf
c001074a:	c1 e2 04             	shl    edx,0x4
c001074d:	09 d0                	or     eax,edx
c001074f:	c3                   	ret    

c0010750 <VgaText::scrollScreen()>:
c0010750:	57                   	push   edi
c0010751:	56                   	push   esi
c0010752:	be 01 00 00 00       	mov    esi,0x1
c0010757:	53                   	push   ebx
c0010758:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001075c:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0010762:	31 ff                	xor    edi,edi
c0010764:	01 d9                	add    ecx,ebx
c0010766:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c0010769:	83 fe 17             	cmp    esi,0x17
c001076c:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c0010772:	75 28                	jne    c001079c <VgaText::scrollScreen()+0x4c>
c0010774:	f7 c7 01 00 00 00    	test   edi,0x1
c001077a:	74 1c                	je     c0010798 <VgaText::scrollScreen()+0x48>
c001077c:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c0010783:	50                   	push   eax
c0010784:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c001078b:	50                   	push   eax
c001078c:	e8 ad ff ff ff       	call   c001073e <VgaText::combineColours(unsigned char, unsigned char)>
c0010791:	5a                   	pop    edx
c0010792:	5a                   	pop    edx
c0010793:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c0010796:	eb 04                	jmp    c001079c <VgaText::scrollScreen()+0x4c>
c0010798:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c001079c:	47                   	inc    edi
c001079d:	41                   	inc    ecx
c001079e:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00107a4:	75 c0                	jne    c0010766 <VgaText::scrollScreen()+0x16>
c00107a6:	46                   	inc    esi
c00107a7:	83 fe 18             	cmp    esi,0x18
c00107aa:	75 b0                	jne    c001075c <VgaText::scrollScreen()+0xc>
c00107ac:	39 1d 24 e3 02 c0    	cmp    DWORD PTR ds:0xc002e324,ebx
c00107b2:	75 24                	jne    c00107d8 <VgaText::scrollScreen()+0x88>
c00107b4:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c00107bb:	74 08                	je     c00107c5 <VgaText::scrollScreen()+0x75>
c00107bd:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c00107c3:	eb 13                	jmp    c00107d8 <VgaText::scrollScreen()+0x88>
c00107c5:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c00107cb:	85 c0                	test   eax,eax
c00107cd:	74 09                	je     c00107d8 <VgaText::scrollScreen()+0x88>
c00107cf:	83 ec 0c             	sub    esp,0xc
c00107d2:	53                   	push   ebx
c00107d3:	ff d0                	call   eax
c00107d5:	83 c4 10             	add    esp,0x10
c00107d8:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00107dc:	5b                   	pop    ebx
c00107dd:	5e                   	pop    esi
c00107de:	5f                   	pop    edi
c00107df:	e9 1e fe ff ff       	jmp    c0010602 <VgaText::updateCursor()>

c00107e4 <VgaText::combineCharAndColour(char, unsigned char)>:
c00107e4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00107e9:	c1 e0 08             	shl    eax,0x8
c00107ec:	89 c2                	mov    edx,eax
c00107ee:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00107f3:	09 d0                	or     eax,edx
c00107f5:	c3                   	ret    

c00107f6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00107f6:	53                   	push   ebx
c00107f7:	83 ec 08             	sub    esp,0x8
c00107fa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00107fe:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010803:	50                   	push   eax
c0010804:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010809:	50                   	push   eax
c001080a:	e8 2f ff ff ff       	call   c001073e <VgaText::combineColours(unsigned char, unsigned char)>
c001080f:	5a                   	pop    edx
c0010810:	0f b6 c0             	movzx  eax,al
c0010813:	5b                   	pop    ebx
c0010814:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0010819:	50                   	push   eax
c001081a:	53                   	push   ebx
c001081b:	e8 c4 ff ff ff       	call   c00107e4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010820:	5a                   	pop    edx
c0010821:	5a                   	pop    edx
c0010822:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c0010828:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c001082c:	0f b7 d2             	movzx  edx,dx
c001082f:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c0010834:	39 0d 24 e3 02 c0    	cmp    DWORD PTR ds:0xc002e324,ecx
c001083a:	75 14                	jne    c0010850 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c001083c:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c0010842:	85 c0                	test   eax,eax
c0010844:	74 0a                	je     c0010850 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c0010846:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001084a:	83 c4 08             	add    esp,0x8
c001084d:	5b                   	pop    ebx
c001084e:	ff e0                	jmp    eax
c0010850:	83 c4 08             	add    esp,0x8
c0010853:	5b                   	pop    ebx
c0010854:	c3                   	ret    
c0010855:	90                   	nop

c0010856 <VgaText::getCursorX()>:
c0010856:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001085a:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c0010860:	c3                   	ret    
c0010861:	90                   	nop

c0010862 <VgaText::getCursorY()>:
c0010862:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010866:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c001086c:	c3                   	ret    
c001086d:	90                   	nop

c001086e <VgaText::setCursor(int, int)>:
c001086e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010872:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010876:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c001087c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010880:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c0010886:	e9 77 fd ff ff       	jmp    c0010602 <VgaText::updateCursor()>
c001088b:	90                   	nop

c001088c <VgaText::setCursorX(int)>:
c001088c:	83 ec 10             	sub    esp,0x10
c001088f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010893:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c0010899:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001089d:	50                   	push   eax
c001089e:	e8 cb ff ff ff       	call   c001086e <VgaText::setCursor(int, int)>
c00108a3:	83 c4 1c             	add    esp,0x1c
c00108a6:	c3                   	ret    
c00108a7:	90                   	nop

c00108a8 <VgaText::setCursorY(int)>:
c00108a8:	83 ec 10             	sub    esp,0x10
c00108ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00108af:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00108b3:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c00108b9:	50                   	push   eax
c00108ba:	e8 af ff ff ff       	call   c001086e <VgaText::setCursor(int, int)>
c00108bf:	83 c4 1c             	add    esp,0x1c
c00108c2:	c3                   	ret    
c00108c3:	90                   	nop

c00108c4 <VgaText::incrementCursor(bool)>:
c00108c4:	56                   	push   esi
c00108c5:	53                   	push   ebx
c00108c6:	51                   	push   ecx
c00108c7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00108cb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00108cf:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c00108d5:	40                   	inc    eax
c00108d6:	83 f8 50             	cmp    eax,0x50
c00108d9:	74 08                	je     c00108e3 <VgaText::incrementCursor(bool)+0x1f>
c00108db:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c00108e1:	eb 33                	jmp    c0010916 <VgaText::incrementCursor(bool)+0x52>
c00108e3:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c00108e9:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c00108f3:	8d 50 01             	lea    edx,[eax+0x1]
c00108f6:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c00108fc:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010902:	75 12                	jne    c0010916 <VgaText::incrementCursor(bool)+0x52>
c0010904:	83 ec 0c             	sub    esp,0xc
c0010907:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c001090d:	53                   	push   ebx
c001090e:	e8 3d fe ff ff       	call   c0010750 <VgaText::scrollScreen()>
c0010913:	83 c4 10             	add    esp,0x10
c0010916:	89 f0                	mov    eax,esi
c0010918:	84 c0                	test   al,al
c001091a:	74 0c                	je     c0010928 <VgaText::incrementCursor(bool)+0x64>
c001091c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010920:	5a                   	pop    edx
c0010921:	5b                   	pop    ebx
c0010922:	5e                   	pop    esi
c0010923:	e9 da fc ff ff       	jmp    c0010602 <VgaText::updateCursor()>
c0010928:	58                   	pop    eax
c0010929:	5b                   	pop    ebx
c001092a:	5e                   	pop    esi
c001092b:	c3                   	ret    

c001092c <VgaText::updateRAMUsageDisplay(int)>:
c001092c:	56                   	push   esi
c001092d:	8b 35 80 d1 02 c0    	mov    esi,DWORD PTR ds:0xc002d180
c0010933:	53                   	push   ebx
c0010934:	bb 0a 00 00 00       	mov    ebx,0xa
c0010939:	6a 0f                	push   0xf
c001093b:	6a 00                	push   0x0
c001093d:	e8 fc fd ff ff       	call   c001073e <VgaText::combineColours(unsigned char, unsigned char)>
c0010942:	5a                   	pop    edx
c0010943:	59                   	pop    ecx
c0010944:	0f b6 c8             	movzx  ecx,al
c0010947:	51                   	push   ecx
c0010948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001094c:	99                   	cdq    
c001094d:	f7 fb                	idiv   ebx
c001094f:	89 d3                	mov    ebx,edx
c0010951:	83 c0 30             	add    eax,0x30
c0010954:	83 c3 30             	add    ebx,0x30
c0010957:	0f be c0             	movsx  eax,al
c001095a:	0f b6 db             	movzx  ebx,bl
c001095d:	50                   	push   eax
c001095e:	e8 81 fe ff ff       	call   c00107e4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010963:	5a                   	pop    edx
c0010964:	5a                   	pop    edx
c0010965:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c001096c:	51                   	push   ecx
c001096d:	53                   	push   ebx
c001096e:	e8 71 fe ff ff       	call   c00107e4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010973:	5b                   	pop    ebx
c0010974:	5a                   	pop    edx
c0010975:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c001097c:	51                   	push   ecx
c001097d:	6a 25                	push   0x25
c001097f:	e8 60 fe ff ff       	call   c00107e4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010984:	59                   	pop    ecx
c0010985:	5b                   	pop    ebx
c0010986:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c001098d:	5b                   	pop    ebx
c001098e:	5e                   	pop    esi
c001098f:	c3                   	ret    

c0010990 <VgaText::updateDiskUsage()>:
c0010990:	55                   	push   ebp
c0010991:	bd 10 27 00 00       	mov    ebp,0x2710
c0010996:	57                   	push   edi
c0010997:	8b 3d 80 d1 02 c0    	mov    edi,DWORD PTR ds:0xc002d180
c001099d:	56                   	push   esi
c001099e:	53                   	push   ebx
c001099f:	6a 0f                	push   0xf
c00109a1:	6a 00                	push   0x0
c00109a3:	e8 96 fd ff ff       	call   c001073e <VgaText::combineColours(unsigned char, unsigned char)>
c00109a8:	5a                   	pop    edx
c00109a9:	0f b6 d8             	movzx  ebx,al
c00109ac:	59                   	pop    ecx
c00109ad:	8b 35 a8 25 03 c0    	mov    esi,DWORD PTR ds:0xc00325a8
c00109b3:	53                   	push   ebx
c00109b4:	b9 0a 00 00 00       	mov    ecx,0xa
c00109b9:	89 f0                	mov    eax,esi
c00109bb:	99                   	cdq    
c00109bc:	f7 fd                	idiv   ebp
c00109be:	99                   	cdq    
c00109bf:	f7 f9                	idiv   ecx
c00109c1:	8d 42 30             	lea    eax,[edx+0x30]
c00109c4:	0f b6 c0             	movzx  eax,al
c00109c7:	50                   	push   eax
c00109c8:	e8 17 fe ff ff       	call   c00107e4 <VgaText::combineCharAndColour(char, unsigned char)>
c00109cd:	5d                   	pop    ebp
c00109ce:	bd e8 03 00 00       	mov    ebp,0x3e8
c00109d3:	5a                   	pop    edx
c00109d4:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c00109d8:	53                   	push   ebx
c00109d9:	89 f0                	mov    eax,esi
c00109db:	99                   	cdq    
c00109dc:	f7 fd                	idiv   ebp
c00109de:	99                   	cdq    
c00109df:	f7 f9                	idiv   ecx
c00109e1:	8d 42 30             	lea    eax,[edx+0x30]
c00109e4:	0f b6 c0             	movzx  eax,al
c00109e7:	50                   	push   eax
c00109e8:	e8 f7 fd ff ff       	call   c00107e4 <VgaText::combineCharAndColour(char, unsigned char)>
c00109ed:	5d                   	pop    ebp
c00109ee:	bd 64 00 00 00       	mov    ebp,0x64
c00109f3:	5a                   	pop    edx
c00109f4:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c00109fb:	53                   	push   ebx
c00109fc:	89 f0                	mov    eax,esi
c00109fe:	99                   	cdq    
c00109ff:	f7 fd                	idiv   ebp
c0010a01:	99                   	cdq    
c0010a02:	f7 f9                	idiv   ecx
c0010a04:	8d 42 30             	lea    eax,[edx+0x30]
c0010a07:	0f b6 c0             	movzx  eax,al
c0010a0a:	50                   	push   eax
c0010a0b:	e8 d4 fd ff ff       	call   c00107e4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a10:	5d                   	pop    ebp
c0010a11:	5a                   	pop    edx
c0010a12:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c0010a19:	53                   	push   ebx
c0010a1a:	89 f0                	mov    eax,esi
c0010a1c:	99                   	cdq    
c0010a1d:	f7 f9                	idiv   ecx
c0010a1f:	89 d6                	mov    esi,edx
c0010a21:	99                   	cdq    
c0010a22:	f7 f9                	idiv   ecx
c0010a24:	8d 42 30             	lea    eax,[edx+0x30]
c0010a27:	0f b6 c0             	movzx  eax,al
c0010a2a:	50                   	push   eax
c0010a2b:	e8 b4 fd ff ff       	call   c00107e4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a30:	5d                   	pop    ebp
c0010a31:	5a                   	pop    edx
c0010a32:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c0010a39:	53                   	push   ebx
c0010a3a:	8d 46 30             	lea    eax,[esi+0x30]
c0010a3d:	0f b6 f0             	movzx  esi,al
c0010a40:	56                   	push   esi
c0010a41:	e8 9e fd ff ff       	call   c00107e4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a46:	5e                   	pop    esi
c0010a47:	8b 35 a4 25 03 c0    	mov    esi,DWORD PTR ds:0xc00325a4
c0010a4d:	5d                   	pop    ebp
c0010a4e:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c0010a55:	bd 10 27 00 00       	mov    ebp,0x2710
c0010a5a:	53                   	push   ebx
c0010a5b:	89 f0                	mov    eax,esi
c0010a5d:	99                   	cdq    
c0010a5e:	f7 fd                	idiv   ebp
c0010a60:	99                   	cdq    
c0010a61:	f7 f9                	idiv   ecx
c0010a63:	8d 42 30             	lea    eax,[edx+0x30]
c0010a66:	0f b6 c0             	movzx  eax,al
c0010a69:	50                   	push   eax
c0010a6a:	e8 75 fd ff ff       	call   c00107e4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a6f:	5a                   	pop    edx
c0010a70:	5d                   	pop    ebp
c0010a71:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c0010a78:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010a7d:	53                   	push   ebx
c0010a7e:	89 f0                	mov    eax,esi
c0010a80:	99                   	cdq    
c0010a81:	f7 fd                	idiv   ebp
c0010a83:	99                   	cdq    
c0010a84:	f7 f9                	idiv   ecx
c0010a86:	8d 42 30             	lea    eax,[edx+0x30]
c0010a89:	0f b6 c0             	movzx  eax,al
c0010a8c:	50                   	push   eax
c0010a8d:	e8 52 fd ff ff       	call   c00107e4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a92:	5a                   	pop    edx
c0010a93:	5d                   	pop    ebp
c0010a94:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c0010a9b:	bd 64 00 00 00       	mov    ebp,0x64
c0010aa0:	53                   	push   ebx
c0010aa1:	89 f0                	mov    eax,esi
c0010aa3:	99                   	cdq    
c0010aa4:	f7 fd                	idiv   ebp
c0010aa6:	99                   	cdq    
c0010aa7:	f7 f9                	idiv   ecx
c0010aa9:	83 c2 30             	add    edx,0x30
c0010aac:	0f b6 d2             	movzx  edx,dl
c0010aaf:	52                   	push   edx
c0010ab0:	e8 2f fd ff ff       	call   c00107e4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010ab5:	5a                   	pop    edx
c0010ab6:	5d                   	pop    ebp
c0010ab7:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010abe:	53                   	push   ebx
c0010abf:	89 f0                	mov    eax,esi
c0010ac1:	99                   	cdq    
c0010ac2:	f7 f9                	idiv   ecx
c0010ac4:	89 d6                	mov    esi,edx
c0010ac6:	99                   	cdq    
c0010ac7:	f7 f9                	idiv   ecx
c0010ac9:	8d 42 30             	lea    eax,[edx+0x30]
c0010acc:	0f b6 c0             	movzx  eax,al
c0010acf:	50                   	push   eax
c0010ad0:	e8 0f fd ff ff       	call   c00107e4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010ad5:	5a                   	pop    edx
c0010ad6:	59                   	pop    ecx
c0010ad7:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c0010ade:	53                   	push   ebx
c0010adf:	8d 46 30             	lea    eax,[esi+0x30]
c0010ae2:	0f b6 f0             	movzx  esi,al
c0010ae5:	56                   	push   esi
c0010ae6:	e8 f9 fc ff ff       	call   c00107e4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010aeb:	5b                   	pop    ebx
c0010aec:	5e                   	pop    esi
c0010aed:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010af4:	5b                   	pop    ebx
c0010af5:	5e                   	pop    esi
c0010af6:	5f                   	pop    edi
c0010af7:	5d                   	pop    ebp
c0010af8:	c3                   	ret    
c0010af9:	90                   	nop

c0010afa <VgaText::updateTitle()>:
c0010afa:	53                   	push   ebx
c0010afb:	31 c0                	xor    eax,eax
c0010afd:	83 ec 58             	sub    esp,0x58
c0010b00:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010b04:	89 e1                	mov    ecx,esp
c0010b06:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010b0a:	40                   	inc    eax
c0010b0b:	83 f8 50             	cmp    eax,0x50
c0010b0e:	75 f6                	jne    c0010b06 <VgaText::updateTitle()+0xc>
c0010b10:	31 c0                	xor    eax,eax
c0010b12:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c0010b19:	84 db                	test   bl,bl
c0010b1b:	74 06                	je     c0010b23 <VgaText::updateTitle()+0x29>
c0010b1d:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010b20:	40                   	inc    eax
c0010b21:	eb ef                	jmp    c0010b12 <VgaText::updateTitle()+0x18>
c0010b23:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c0010b29:	85 c0                	test   eax,eax
c0010b2b:	74 09                	je     c0010b36 <VgaText::updateTitle()+0x3c>
c0010b2d:	53                   	push   ebx
c0010b2e:	53                   	push   ebx
c0010b2f:	51                   	push   ecx
c0010b30:	52                   	push   edx
c0010b31:	ff d0                	call   eax
c0010b33:	83 c4 10             	add    esp,0x10
c0010b36:	e8 55 fe ff ff       	call   c0010990 <VgaText::updateDiskUsage()>
c0010b3b:	83 c4 58             	add    esp,0x58
c0010b3e:	5b                   	pop    ebx
c0010b3f:	c3                   	ret    

c0010b40 <VgaText::setTitleTextColour(VgaColour)>:
c0010b40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b44:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b48:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c0010b4e:	eb aa                	jmp    c0010afa <VgaText::updateTitle()>

c0010b50 <VgaText::setTitleColour(VgaColour)>:
c0010b50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b54:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b58:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c0010b5e:	eb 9a                	jmp    c0010afa <VgaText::updateTitle()>

c0010b60 <VgaText::setTitle(char*)>:
c0010b60:	53                   	push   ebx
c0010b61:	83 ec 10             	sub    esp,0x10
c0010b64:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010b68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b6c:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c0010b72:	50                   	push   eax
c0010b73:	e8 bc fc fe ff       	call   c0000834 <strcpy>
c0010b78:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010b7c:	83 c4 18             	add    esp,0x18
c0010b7f:	5b                   	pop    ebx
c0010b80:	e9 75 ff ff ff       	jmp    c0010afa <VgaText::updateTitle()>
c0010b85:	90                   	nop

c0010b86 <VgaText::decrementCursor(bool)>:
c0010b86:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010b8a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010b8e:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c0010b94:	85 c0                	test   eax,eax
c0010b96:	74 07                	je     c0010b9f <VgaText::decrementCursor(bool)+0x19>
c0010b98:	48                   	dec    eax
c0010b99:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c0010b9f:	84 c9                	test   cl,cl
c0010ba1:	74 09                	je     c0010bac <VgaText::decrementCursor(bool)+0x26>
c0010ba3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010ba7:	e9 56 fa ff ff       	jmp    c0010602 <VgaText::updateCursor()>
c0010bac:	c3                   	ret    
c0010bad:	90                   	nop

c0010bae <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010bae:	53                   	push   ebx
c0010baf:	83 ec 08             	sub    esp,0x8
c0010bb2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010bb6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010bba:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010bbe:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010bc2:	3c 07                	cmp    al,0x7
c0010bc4:	75 2a                	jne    c0010bf0 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010bc6:	a1 d4 e3 02 c0       	mov    eax,ds:0xc002e3d4
c0010bcb:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010bd3:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010bdb:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010be3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010be7:	83 c4 08             	add    esp,0x8
c0010bea:	5b                   	pop    ebx
c0010beb:	e9 a6 2f 00 00       	jmp    c0013b96 <Buzzer::beep(int, int, bool)>
c0010bf0:	3c 0d                	cmp    al,0xd
c0010bf2:	75 0c                	jne    c0010c00 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c0010bf4:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010bfe:	eb 3b                	jmp    c0010c3b <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c0010c00:	3c 0a                	cmp    al,0xa
c0010c02:	75 40                	jne    c0010c44 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c0010c04:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010c0a:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010c14:	8d 50 01             	lea    edx,[eax+0x1]
c0010c17:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010c1d:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010c23:	75 12                	jne    c0010c37 <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c0010c25:	83 ec 0c             	sub    esp,0xc
c0010c28:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010c2e:	53                   	push   ebx
c0010c2f:	e8 1c fb ff ff       	call   c0010750 <VgaText::scrollScreen()>
c0010c34:	83 c4 10             	add    esp,0x10
c0010c37:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010c3b:	83 c4 08             	add    esp,0x8
c0010c3e:	5b                   	pop    ebx
c0010c3f:	e9 be f9 ff ff       	jmp    c0010602 <VgaText::updateCursor()>
c0010c44:	3c 08                	cmp    al,0x8
c0010c46:	75 31                	jne    c0010c79 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c0010c48:	50                   	push   eax
c0010c49:	50                   	push   eax
c0010c4a:	6a 01                	push   0x1
c0010c4c:	53                   	push   ebx
c0010c4d:	e8 34 ff ff ff       	call   c0010b86 <VgaText::decrementCursor(bool)>
c0010c52:	5a                   	pop    edx
c0010c53:	59                   	pop    ecx
c0010c54:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010c5a:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010c60:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010c66:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010c6c:	6a 20                	push   0x20
c0010c6e:	53                   	push   ebx
c0010c6f:	e8 82 fb ff ff       	call   c00107f6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010c74:	83 c4 28             	add    esp,0x28
c0010c77:	5b                   	pop    ebx
c0010c78:	c3                   	ret    
c0010c79:	83 ec 08             	sub    esp,0x8
c0010c7c:	0f be c0             	movsx  eax,al
c0010c7f:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010c85:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010c8b:	51                   	push   ecx
c0010c8c:	52                   	push   edx
c0010c8d:	50                   	push   eax
c0010c8e:	53                   	push   ebx
c0010c8f:	e8 62 fb ff ff       	call   c00107f6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010c94:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010c98:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010ca0:	83 c4 28             	add    esp,0x28
c0010ca3:	5b                   	pop    ebx
c0010ca4:	e9 1b fc ff ff       	jmp    c00108c4 <VgaText::incrementCursor(bool)>
c0010ca9:	90                   	nop

c0010caa <VgaText::isShowingCursor()>:
c0010caa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cae:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c0010cb4:	c3                   	ret    
c0010cb5:	90                   	nop

c0010cb6 <VgaText::isBlinkDisabled()>:
c0010cb6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cba:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c0010cc0:	83 f0 01             	xor    eax,0x1
c0010cc3:	c3                   	ret    

c0010cc4 <VgaText::setCursorHeight(int)>:
c0010cc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cc8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010ccc:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010cd2:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c0010cd9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010cdd:	e9 3a f9 ff ff       	jmp    c001061c <VgaText::showCursor(bool)>

c0010ce2 <VgaText::getCursorHeight()>:
c0010ce2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ce6:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0010cec:	c3                   	ret    

c0010ced <setActiveTerminal(VgaText*)>:
c0010ced:	53                   	push   ebx
c0010cee:	83 ec 08             	sub    esp,0x8
c0010cf1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010cf5:	85 db                	test   ebx,ebx
c0010cf7:	75 11                	jne    c0010d0a <setActiveTerminal(VgaText*)+0x1d>
c0010cf9:	c7 44 24 10 4c a2 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a24c
c0010d01:	83 c4 08             	add    esp,0x8
c0010d04:	5b                   	pop    ebx
c0010d05:	e9 69 97 00 00       	jmp    c001a473 <Krnl::panic(char const*)>
c0010d0a:	50                   	push   eax
c0010d0b:	50                   	push   eax
c0010d0c:	53                   	push   ebx
c0010d0d:	68 5a a2 02 c0       	push   0xc002a25a
c0010d12:	e8 81 20 00 00       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0010d17:	a1 24 e3 02 c0       	mov    eax,ds:0xc002e324
c0010d1c:	83 c4 10             	add    esp,0x10
c0010d1f:	85 c0                	test   eax,eax
c0010d21:	74 0c                	je     c0010d2f <setActiveTerminal(VgaText*)+0x42>
c0010d23:	83 ec 0c             	sub    esp,0xc
c0010d26:	50                   	push   eax
c0010d27:	e8 d6 f8 ff ff       	call   c0010602 <VgaText::updateCursor()>
c0010d2c:	83 c4 10             	add    esp,0x10
c0010d2f:	89 1d 24 e3 02 c0    	mov    DWORD PTR ds:0xc002e324,ebx
c0010d35:	51                   	push   ecx
c0010d36:	51                   	push   ecx
c0010d37:	53                   	push   ebx
c0010d38:	68 72 a2 02 c0       	push   0xc002a272
c0010d3d:	e8 56 20 00 00       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0010d42:	83 c4 0c             	add    esp,0xc
c0010d45:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010d4b:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010d51:	53                   	push   ebx
c0010d52:	e8 17 fb ff ff       	call   c001086e <VgaText::setCursor(int, int)>
c0010d57:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d5a:	e8 57 ff ff ff       	call   c0010cb6 <VgaText::isBlinkDisabled()>
c0010d5f:	5a                   	pop    edx
c0010d60:	0f b6 c0             	movzx  eax,al
c0010d63:	59                   	pop    ecx
c0010d64:	50                   	push   eax
c0010d65:	53                   	push   ebx
c0010d66:	e8 c1 f8 ff ff       	call   c001062c <VgaText::disableBlink(bool)>
c0010d6b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d6e:	e8 6f ff ff ff       	call   c0010ce2 <VgaText::getCursorHeight()>
c0010d73:	5a                   	pop    edx
c0010d74:	59                   	pop    ecx
c0010d75:	50                   	push   eax
c0010d76:	53                   	push   ebx
c0010d77:	e8 48 ff ff ff       	call   c0010cc4 <VgaText::setCursorHeight(int)>
c0010d7c:	83 c4 10             	add    esp,0x10
c0010d7f:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010d86:	75 0a                	jne    c0010d92 <setActiveTerminal(VgaText*)+0xa5>
c0010d88:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c0010d92:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010d96:	83 c4 08             	add    esp,0x8
c0010d99:	5b                   	pop    ebx
c0010d9a:	e9 0f f8 ff ff       	jmp    c00105ae <VgaText::load()>

c0010d9f <doTerminalCycle()>:
c0010d9f:	83 ec 18             	sub    esp,0x18
c0010da2:	a1 20 e3 02 c0       	mov    eax,ds:0xc002e320
c0010da7:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c0010dad:	50                   	push   eax
c0010dae:	a3 20 e3 02 c0       	mov    ds:0xc002e320,eax
c0010db3:	e8 35 ff ff ff       	call   c0010ced <setActiveTerminal(VgaText*)>
c0010db8:	83 c4 1c             	add    esp,0x1c
c0010dbb:	c3                   	ret    

c0010dbc <VgaText::doUpdate()>:
c0010dbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010dc0:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c0010dc6:	85 c0                	test   eax,eax
c0010dc8:	74 02                	je     c0010dcc <VgaText::doUpdate()+0x10>
c0010dca:	ff e0                	jmp    eax
c0010dcc:	c3                   	ret    
c0010dcd:	90                   	nop

c0010dce <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010dce:	55                   	push   ebp
c0010dcf:	57                   	push   edi
c0010dd0:	56                   	push   esi
c0010dd1:	53                   	push   ebx
c0010dd2:	83 ec 1c             	sub    esp,0x1c
c0010dd5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010dd9:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010dde:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010de5:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010de8:	50                   	push   eax
c0010de9:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010dee:	50                   	push   eax
c0010def:	e8 4a f9 ff ff       	call   c001073e <VgaText::combineColours(unsigned char, unsigned char)>
c0010df4:	59                   	pop    ecx
c0010df5:	0f b6 c0             	movzx  eax,al
c0010df8:	5b                   	pop    ebx
c0010df9:	31 c9                	xor    ecx,ecx
c0010dfb:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010e03:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010e07:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010e0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010e11:	0f b7 db             	movzx  ebx,bx
c0010e14:	01 db                	add    ebx,ebx
c0010e16:	01 fb                	add    ebx,edi
c0010e18:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010e1b:	84 c0                	test   al,al
c0010e1d:	0f 84 38 01 00 00    	je     c0010f5b <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c0010e23:	3c 0d                	cmp    al,0xd
c0010e25:	75 0f                	jne    c0010e36 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010e27:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010e31:	e9 1f 01 00 00       	jmp    c0010f55 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010e36:	3c 0a                	cmp    al,0xa
c0010e38:	75 5b                	jne    c0010e95 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c0010e3a:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c0010e40:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010e4a:	8d 48 01             	lea    ecx,[eax+0x1]
c0010e4d:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c0010e53:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c0010e59:	75 12                	jne    c0010e6d <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010e5b:	83 ec 0c             	sub    esp,0xc
c0010e5e:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c0010e64:	55                   	push   ebp
c0010e65:	e8 e6 f8 ff ff       	call   c0010750 <VgaText::scrollScreen()>
c0010e6a:	83 c4 10             	add    esp,0x10
c0010e6d:	83 ec 0c             	sub    esp,0xc
c0010e70:	55                   	push   ebp
c0010e71:	e8 8c f7 ff ff       	call   c0010602 <VgaText::updateCursor()>
c0010e76:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010e7e:	83 c4 10             	add    esp,0x10
c0010e81:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010e87:	31 c9                	xor    ecx,ecx
c0010e89:	0f b7 db             	movzx  ebx,bx
c0010e8c:	01 db                	add    ebx,ebx
c0010e8e:	01 fb                	add    ebx,edi
c0010e90:	e9 c0 00 00 00       	jmp    c0010f55 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010e95:	3c 08                	cmp    al,0x8
c0010e97:	75 4e                	jne    c0010ee7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c0010e99:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010e9d:	53                   	push   ebx
c0010e9e:	53                   	push   ebx
c0010e9f:	6a 01                	push   0x1
c0010ea1:	55                   	push   ebp
c0010ea2:	e8 df fc ff ff       	call   c0010b86 <VgaText::decrementCursor(bool)>
c0010ea7:	58                   	pop    eax
c0010ea8:	5a                   	pop    edx
c0010ea9:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010eaf:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010eb5:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010ebb:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010ec1:	6a 20                	push   0x20
c0010ec3:	55                   	push   ebp
c0010ec4:	e8 2d f9 ff ff       	call   c00107f6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010ec9:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010ed1:	83 c4 20             	add    esp,0x20
c0010ed4:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010eda:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010ede:	0f b7 db             	movzx  ebx,bx
c0010ee1:	01 db                	add    ebx,ebx
c0010ee3:	01 fb                	add    ebx,edi
c0010ee5:	eb 6e                	jmp    c0010f55 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010ee7:	51                   	push   ecx
c0010ee8:	51                   	push   ecx
c0010ee9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010eed:	50                   	push   eax
c0010eee:	e8 f1 f8 ff ff       	call   c00107e4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010ef3:	83 c4 10             	add    esp,0x10
c0010ef6:	66 89 03             	mov    WORD PTR [ebx],ax
c0010ef9:	39 2d 24 e3 02 c0    	cmp    DWORD PTR ds:0xc002e324,ebp
c0010eff:	75 2a                	jne    c0010f2b <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010f01:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010f07:	85 c0                	test   eax,eax
c0010f09:	74 20                	je     c0010f2b <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010f0b:	52                   	push   edx
c0010f0c:	52                   	push   edx
c0010f0d:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010f13:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010f19:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f1d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f21:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010f24:	51                   	push   ecx
c0010f25:	55                   	push   ebp
c0010f26:	ff d0                	call   eax
c0010f28:	83 c4 20             	add    esp,0x20
c0010f2b:	83 c3 02             	add    ebx,0x2
c0010f2e:	50                   	push   eax
c0010f2f:	50                   	push   eax
c0010f30:	6a 00                	push   0x0
c0010f32:	55                   	push   ebp
c0010f33:	e8 8c f9 ff ff       	call   c00108c4 <VgaText::incrementCursor(bool)>
c0010f38:	83 c4 10             	add    esp,0x10
c0010f3b:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c0010f42:	75 0f                	jne    c0010f53 <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c0010f44:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010f4c:	0f b7 db             	movzx  ebx,bx
c0010f4f:	01 db                	add    ebx,ebx
c0010f51:	01 fb                	add    ebx,edi
c0010f53:	b1 01                	mov    cl,0x1
c0010f55:	46                   	inc    esi
c0010f56:	e9 bd fe ff ff       	jmp    c0010e18 <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010f5b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010f5f:	83 ec 0c             	sub    esp,0xc
c0010f62:	55                   	push   ebp
c0010f63:	e8 9a f6 ff ff       	call   c0010602 <VgaText::updateCursor()>
c0010f68:	83 c4 10             	add    esp,0x10
c0010f6b:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010f6f:	84 c9                	test   cl,cl
c0010f71:	74 0c                	je     c0010f7f <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c0010f73:	83 ec 0c             	sub    esp,0xc
c0010f76:	55                   	push   ebp
c0010f77:	e8 40 fe ff ff       	call   c0010dbc <VgaText::doUpdate()>
c0010f7c:	83 c4 10             	add    esp,0x10
c0010f7f:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0010f86:	83 c4 1c             	add    esp,0x1c
c0010f89:	5b                   	pop    ebx
c0010f8a:	5e                   	pop    esi
c0010f8b:	5f                   	pop    edi
c0010f8c:	5d                   	pop    ebp
c0010f8d:	c3                   	ret    

c0010f8e <VgaText::clearScreen()>:
c0010f8e:	57                   	push   edi
c0010f8f:	56                   	push   esi
c0010f90:	31 f6                	xor    esi,esi
c0010f92:	53                   	push   ebx
c0010f93:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010f97:	52                   	push   edx
c0010f98:	6a 00                	push   0x0
c0010f9a:	6a 00                	push   0x0
c0010f9c:	53                   	push   ebx
c0010f9d:	e8 cc f8 ff ff       	call   c001086e <VgaText::setCursor(int, int)>
c0010fa2:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c0010fa9:	83 c4 10             	add    esp,0x10
c0010fac:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c0010fb2:	7e 26                	jle    c0010fda <VgaText::clearScreen()+0x4c>
c0010fb4:	31 ff                	xor    edi,edi
c0010fb6:	50                   	push   eax
c0010fb7:	50                   	push   eax
c0010fb8:	56                   	push   esi
c0010fb9:	57                   	push   edi
c0010fba:	47                   	inc    edi
c0010fbb:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010fc1:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010fc7:	6a 20                	push   0x20
c0010fc9:	53                   	push   ebx
c0010fca:	e8 27 f8 ff ff       	call   c00107f6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010fcf:	83 c4 20             	add    esp,0x20
c0010fd2:	83 ff 50             	cmp    edi,0x50
c0010fd5:	75 df                	jne    c0010fb6 <VgaText::clearScreen()+0x28>
c0010fd7:	46                   	inc    esi
c0010fd8:	eb d2                	jmp    c0010fac <VgaText::clearScreen()+0x1e>
c0010fda:	83 ec 0c             	sub    esp,0xc
c0010fdd:	53                   	push   ebx
c0010fde:	e8 d9 fd ff ff       	call   c0010dbc <VgaText::doUpdate()>
c0010fe3:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c0010fea:	83 c4 10             	add    esp,0x10
c0010fed:	5b                   	pop    ebx
c0010fee:	5e                   	pop    esi
c0010fef:	5f                   	pop    edi
c0010ff0:	c3                   	ret    
c0010ff1:	90                   	nop

c0010ff2 <VgaText::putchar(char)>:
c0010ff2:	56                   	push   esi
c0010ff3:	53                   	push   ebx
c0010ff4:	83 ec 14             	sub    esp,0x14
c0010ff7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010ffb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010fff:	3c 5b                	cmp    al,0x5b
c0011001:	75 21                	jne    c0011024 <VgaText::putchar(char)+0x32>
c0011003:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c001100a:	74 28                	je     c0011034 <VgaText::putchar(char)+0x42>
c001100c:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c0011015:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c001101f:	e9 e2 00 00 00       	jmp    c0011106 <VgaText::putchar(char)+0x114>
c0011024:	3c 1b                	cmp    al,0x1b
c0011026:	75 0c                	jne    c0011034 <VgaText::putchar(char)+0x42>
c0011028:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c001102f:	e9 d2 00 00 00       	jmp    c0011106 <VgaText::putchar(char)+0x114>
c0011034:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c001103a:	84 c9                	test   cl,cl
c001103c:	0f 84 ab 00 00 00    	je     c00110ed <VgaText::putchar(char)+0xfb>
c0011042:	8d 50 c0             	lea    edx,[eax-0x40]
c0011045:	80 fa 3e             	cmp    dl,0x3e
c0011048:	0f 87 82 00 00 00    	ja     c00110d0 <VgaText::putchar(char)+0xde>
c001104e:	3c 6d                	cmp    al,0x6d
c0011050:	75 4d                	jne    c001109f <VgaText::putchar(char)+0xad>
c0011052:	31 f6                	xor    esi,esi
c0011054:	31 d2                	xor    edx,edx
c0011056:	31 c0                	xor    eax,eax
c0011058:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c001105e:	7e 30                	jle    c0011090 <VgaText::putchar(char)+0x9e>
c0011060:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c0011068:	80 fa 3b             	cmp    dl,0x3b
c001106b:	75 17                	jne    c0011084 <VgaText::putchar(char)+0x92>
c001106d:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0011071:	50                   	push   eax
c0011072:	53                   	push   ebx
c0011073:	e8 ee f5 ff ff       	call   c0010666 <VgaText::doANSI_SGR(int)>
c0011078:	59                   	pop    ecx
c0011079:	31 d2                	xor    edx,edx
c001107b:	58                   	pop    eax
c001107c:	31 c0                	xor    eax,eax
c001107e:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0011082:	eb 09                	jmp    c001108d <VgaText::putchar(char)+0x9b>
c0011084:	6b c0 0a             	imul   eax,eax,0xa
c0011087:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c001108b:	88 ca                	mov    dl,cl
c001108d:	46                   	inc    esi
c001108e:	eb c8                	jmp    c0011058 <VgaText::putchar(char)+0x66>
c0011090:	84 d2                	test   dl,dl
c0011092:	74 31                	je     c00110c5 <VgaText::putchar(char)+0xd3>
c0011094:	50                   	push   eax
c0011095:	53                   	push   ebx
c0011096:	e8 cb f5 ff ff       	call   c0010666 <VgaText::doANSI_SGR(int)>
c001109b:	58                   	pop    eax
c001109c:	5a                   	pop    edx
c001109d:	eb 26                	jmp    c00110c5 <VgaText::putchar(char)+0xd3>
c001109f:	3c 4a                	cmp    al,0x4a
c00110a1:	75 22                	jne    c00110c5 <VgaText::putchar(char)+0xd3>
c00110a3:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c00110aa:	75 19                	jne    c00110c5 <VgaText::putchar(char)+0xd3>
c00110ac:	83 ec 0c             	sub    esp,0xc
c00110af:	53                   	push   ebx
c00110b0:	e8 d9 fe ff ff       	call   c0010f8e <VgaText::clearScreen()>
c00110b5:	83 c4 0c             	add    esp,0xc
c00110b8:	6a 00                	push   0x0
c00110ba:	6a 00                	push   0x0
c00110bc:	53                   	push   ebx
c00110bd:	e8 ac f7 ff ff       	call   c001086e <VgaText::setCursor(int, int)>
c00110c2:	83 c4 10             	add    esp,0x10
c00110c5:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c00110ce:	eb 36                	jmp    c0011106 <VgaText::putchar(char)+0x114>
c00110d0:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c00110d6:	83 fa 0e             	cmp    edx,0xe
c00110d9:	7f 2b                	jg     c0011106 <VgaText::putchar(char)+0x114>
c00110db:	8d 4a 01             	lea    ecx,[edx+0x1]
c00110de:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c00110e4:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c00110eb:	eb 19                	jmp    c0011106 <VgaText::putchar(char)+0x114>
c00110ed:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c00110f3:	0f be c0             	movsx  eax,al
c00110f6:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c00110fc:	50                   	push   eax
c00110fd:	53                   	push   ebx
c00110fe:	e8 ab fa ff ff       	call   c0010bae <VgaText::putchar(char, VgaColour, VgaColour)>
c0011103:	83 c4 10             	add    esp,0x10
c0011106:	83 c4 14             	add    esp,0x14
c0011109:	5b                   	pop    ebx
c001110a:	5e                   	pop    esi
c001110b:	c3                   	ret    

c001110c <VgaText::puts(char const*)>:
c001110c:	53                   	push   ebx
c001110d:	83 ec 08             	sub    esp,0x8
c0011110:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011114:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0011117:	84 c0                	test   al,al
c0011119:	74 12                	je     c001112d <VgaText::puts(char const*)+0x21>
c001111b:	43                   	inc    ebx
c001111c:	51                   	push   ecx
c001111d:	51                   	push   ecx
c001111e:	50                   	push   eax
c001111f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011123:	e8 ca fe ff ff       	call   c0010ff2 <VgaText::putchar(char)>
c0011128:	83 c4 10             	add    esp,0x10
c001112b:	eb e7                	jmp    c0011114 <VgaText::puts(char const*)+0x8>
c001112d:	83 c4 08             	add    esp,0x8
c0011130:	5b                   	pop    ebx
c0011131:	c3                   	ret    

c0011132 <VgaText::putx(unsigned int)>:
c0011132:	57                   	push   edi
c0011133:	b9 11 00 00 00       	mov    ecx,0x11
c0011138:	56                   	push   esi
c0011139:	be 8e a2 02 c0       	mov    esi,0xc002a28e
c001113e:	53                   	push   ebx
c001113f:	83 ec 20             	sub    esp,0x20
c0011142:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011146:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c001114a:	fc                   	cld    
c001114b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001114d:	be 08 00 00 00       	mov    esi,0x8
c0011152:	50                   	push   eax
c0011153:	50                   	push   eax
c0011154:	89 d8                	mov    eax,ebx
c0011156:	c1 e3 04             	shl    ebx,0x4
c0011159:	c1 e8 1c             	shr    eax,0x1c
c001115c:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0011161:	50                   	push   eax
c0011162:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011166:	e8 87 fe ff ff       	call   c0010ff2 <VgaText::putchar(char)>
c001116b:	83 c4 10             	add    esp,0x10
c001116e:	4e                   	dec    esi
c001116f:	75 e1                	jne    c0011152 <VgaText::putx(unsigned int)+0x20>
c0011171:	83 c4 20             	add    esp,0x20
c0011174:	5b                   	pop    ebx
c0011175:	5e                   	pop    esi
c0011176:	5f                   	pop    edi
c0011177:	c3                   	ret    

c0011178 <VgaText::VgaText(char const*)>:
c0011178:	57                   	push   edi
c0011179:	56                   	push   esi
c001117a:	53                   	push   ebx
c001117b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001117f:	83 ec 08             	sub    esp,0x8
c0011182:	6a 00                	push   0x0
c0011184:	50                   	push   eax
c0011185:	e8 6e 05 00 00       	call   c00116f8 <UnixFile::UnixFile(int)>
c001118a:	83 c4 10             	add    esp,0x10
c001118d:	ba f4 a2 02 c0       	mov    edx,0xc002a2f4
c0011192:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011196:	89 10                	mov    DWORD PTR [eax],edx
c0011198:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001119c:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c00111a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111aa:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c00111b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111b8:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c00111bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111c3:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c00111ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111ce:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c00111d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111dc:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c00111e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111ea:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c00111f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111f5:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c00111fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011200:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c0011206:	bb 00 e3 02 c0       	mov    ebx,0xc002e300
c001120b:	b8 08 00 00 00       	mov    eax,0x8
c0011210:	fc                   	cld    
c0011211:	89 d7                	mov    edi,edx
c0011213:	89 de                	mov    esi,ebx
c0011215:	89 c1                	mov    ecx,eax
c0011217:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011219:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001121d:	05 1e 10 00 00       	add    eax,0x101e
c0011222:	83 ec 08             	sub    esp,0x8
c0011225:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011229:	50                   	push   eax
c001122a:	e8 05 f6 fe ff       	call   c0000834 <strcpy>
c001122f:	83 c4 10             	add    esp,0x10
c0011232:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011236:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c0011240:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011244:	83 c0 0c             	add    eax,0xc
c0011247:	83 ec 04             	sub    esp,0x4
c001124a:	68 00 0f 00 00       	push   0xf00
c001124f:	6a 00                	push   0x0
c0011251:	50                   	push   eax
c0011252:	e8 21 f5 fe ff       	call   c0000778 <memset>
c0011257:	83 c4 10             	add    esp,0x10
c001125a:	83 ec 04             	sub    esp,0x4
c001125d:	6a 00                	push   0x0
c001125f:	6a 07                	push   0x7
c0011261:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011265:	e8 b4 f4 ff ff       	call   c001071e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001126a:	83 c4 10             	add    esp,0x10
c001126d:	83 ec 08             	sub    esp,0x8
c0011270:	6a 02                	push   0x2
c0011272:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011276:	e8 49 fa ff ff       	call   c0010cc4 <VgaText::setCursorHeight(int)>
c001127b:	83 c4 10             	add    esp,0x10
c001127e:	83 ec 04             	sub    esp,0x4
c0011281:	6a 00                	push   0x0
c0011283:	6a 00                	push   0x0
c0011285:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011289:	e8 e0 f5 ff ff       	call   c001086e <VgaText::setCursor(int, int)>
c001128e:	83 c4 10             	add    esp,0x10
c0011291:	83 ec 08             	sub    esp,0x8
c0011294:	6a 01                	push   0x1
c0011296:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001129a:	e8 7d f3 ff ff       	call   c001061c <VgaText::showCursor(bool)>
c001129f:	83 c4 10             	add    esp,0x10
c00112a2:	83 ec 08             	sub    esp,0x8
c00112a5:	6a 01                	push   0x1
c00112a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112ab:	e8 7c f3 ff ff       	call   c001062c <VgaText::disableBlink(bool)>
c00112b0:	83 c4 10             	add    esp,0x10
c00112b3:	83 ec 0c             	sub    esp,0xc
c00112b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112ba:	e8 cf fc ff ff       	call   c0010f8e <VgaText::clearScreen()>
c00112bf:	83 c4 10             	add    esp,0x10
c00112c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112c6:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c00112cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112d1:	05 9e 10 00 00       	add    eax,0x109e
c00112d6:	83 ec 04             	sub    esp,0x4
c00112d9:	68 96 00 00 00       	push   0x96
c00112de:	6a 00                	push   0x0
c00112e0:	50                   	push   eax
c00112e1:	e8 92 f4 fe ff       	call   c0000778 <memset>
c00112e6:	83 c4 10             	add    esp,0x10
c00112e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112ed:	05 34 11 00 00       	add    eax,0x1134
c00112f2:	83 ec 04             	sub    esp,0x4
c00112f5:	68 2c 01 00 00       	push   0x12c
c00112fa:	6a 00                	push   0x0
c00112fc:	50                   	push   eax
c00112fd:	e8 76 f4 fe ff       	call   c0000778 <memset>
c0011302:	83 c4 10             	add    esp,0x10
c0011305:	90                   	nop
c0011306:	5b                   	pop    ebx
c0011307:	5e                   	pop    esi
c0011308:	5f                   	pop    edi
c0011309:	c3                   	ret    

c001130a <VgaText::receiveKey(unsigned char)>:
c001130a:	55                   	push   ebp
c001130b:	57                   	push   edi
c001130c:	56                   	push   esi
c001130d:	53                   	push   ebx
c001130e:	83 ec 1c             	sub    esp,0x1c
c0011311:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011315:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011319:	84 db                	test   bl,bl
c001131b:	0f 84 c9 00 00 00    	je     c00113ea <VgaText::receiveKey(unsigned char)+0xe0>
c0011321:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c0011327:	80 fb 08             	cmp    bl,0x8
c001132a:	75 2c                	jne    c0011358 <VgaText::receiveKey(unsigned char)+0x4e>
c001132c:	83 ec 0c             	sub    esp,0xc
c001132f:	57                   	push   edi
c0011330:	e8 5f f4 fe ff       	call   c0000794 <strlen>
c0011335:	83 c4 10             	add    esp,0x10
c0011338:	85 c0                	test   eax,eax
c001133a:	74 41                	je     c001137d <VgaText::receiveKey(unsigned char)+0x73>
c001133c:	50                   	push   eax
c001133d:	50                   	push   eax
c001133e:	6a 08                	push   0x8
c0011340:	56                   	push   esi
c0011341:	e8 ac fc ff ff       	call   c0010ff2 <VgaText::putchar(char)>
c0011346:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011349:	e8 46 f4 fe ff       	call   c0000794 <strlen>
c001134e:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c0011356:	eb 22                	jmp    c001137a <VgaText::receiveKey(unsigned char)+0x70>
c0011358:	0f be c3             	movsx  eax,bl
c001135b:	52                   	push   edx
c001135c:	52                   	push   edx
c001135d:	50                   	push   eax
c001135e:	56                   	push   esi
c001135f:	e8 8e fc ff ff       	call   c0010ff2 <VgaText::putchar(char)>
c0011364:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0011368:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001136d:	59                   	pop    ecx
c001136e:	5d                   	pop    ebp
c001136f:	8d 44 24 16          	lea    eax,[esp+0x16]
c0011373:	50                   	push   eax
c0011374:	57                   	push   edi
c0011375:	e8 fa f5 fe ff       	call   c0000974 <strcat>
c001137a:	83 c4 10             	add    esp,0x10
c001137d:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c0011384:	75 05                	jne    c001138b <VgaText::receiveKey(unsigned char)+0x81>
c0011386:	80 fb 0a             	cmp    bl,0xa
c0011389:	75 53                	jne    c00113de <VgaText::receiveKey(unsigned char)+0xd4>
c001138b:	83 ec 0c             	sub    esp,0xc
c001138e:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c0011394:	53                   	push   ebx
c0011395:	e8 fa f3 fe ff       	call   c0000794 <strlen>
c001139a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001139d:	89 c5                	mov    ebp,eax
c001139f:	e8 f0 f3 fe ff       	call   c0000794 <strlen>
c00113a4:	83 c4 10             	add    esp,0x10
c00113a7:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c00113ab:	3d 2c 01 00 00       	cmp    eax,0x12c
c00113b0:	76 10                	jbe    c00113c2 <VgaText::receiveKey(unsigned char)+0xb8>
c00113b2:	83 ec 0c             	sub    esp,0xc
c00113b5:	68 9f a2 02 c0       	push   0xc002a29f
c00113ba:	e8 b4 90 00 00       	call   c001a473 <Krnl::panic(char const*)>
c00113bf:	83 c4 10             	add    esp,0x10
c00113c2:	50                   	push   eax
c00113c3:	50                   	push   eax
c00113c4:	57                   	push   edi
c00113c5:	53                   	push   ebx
c00113c6:	e8 a9 f5 fe ff       	call   c0000974 <strcat>
c00113cb:	83 c4 0c             	add    esp,0xc
c00113ce:	68 96 00 00 00       	push   0x96
c00113d3:	6a 00                	push   0x0
c00113d5:	57                   	push   edi
c00113d6:	e8 9d f3 fe ff       	call   c0000778 <memset>
c00113db:	83 c4 10             	add    esp,0x10
c00113de:	83 ec 0c             	sub    esp,0xc
c00113e1:	56                   	push   esi
c00113e2:	e8 d5 f9 ff ff       	call   c0010dbc <VgaText::doUpdate()>
c00113e7:	83 c4 10             	add    esp,0x10
c00113ea:	83 c4 1c             	add    esp,0x1c
c00113ed:	5b                   	pop    ebx
c00113ee:	5e                   	pop    esi
c00113ef:	5f                   	pop    edi
c00113f0:	5d                   	pop    ebp
c00113f1:	c3                   	ret    

c00113f2 <VgaText::write(unsigned long long, void*, int*)>:
c00113f2:	55                   	push   ebp
c00113f3:	57                   	push   edi
c00113f4:	56                   	push   esi
c00113f5:	53                   	push   ebx
c00113f6:	83 ec 0c             	sub    esp,0xc
c00113f9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00113fd:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0011401:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011405:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c001140c:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c001140f:	39 eb                	cmp    ebx,ebp
c0011411:	74 13                	je     c0011426 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0011413:	43                   	inc    ebx
c0011414:	50                   	push   eax
c0011415:	50                   	push   eax
c0011416:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c001141a:	50                   	push   eax
c001141b:	56                   	push   esi
c001141c:	e8 d1 fb ff ff       	call   c0010ff2 <VgaText::putchar(char)>
c0011421:	83 c4 10             	add    esp,0x10
c0011424:	eb e9                	jmp    c001140f <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0011426:	83 ec 0c             	sub    esp,0xc
c0011429:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c0011430:	56                   	push   esi
c0011431:	e8 86 f9 ff ff       	call   c0010dbc <VgaText::doUpdate()>
c0011436:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001143a:	89 38                	mov    DWORD PTR [eax],edi
c001143c:	83 c4 1c             	add    esp,0x1c
c001143f:	31 c0                	xor    eax,eax
c0011441:	5b                   	pop    ebx
c0011442:	5e                   	pop    esi
c0011443:	5f                   	pop    edi
c0011444:	5d                   	pop    ebp
c0011445:	c3                   	ret    

c0011446 <newTerminal(char*)>:
c0011446:	83 ec 28             	sub    esp,0x28
c0011449:	68 60 12 00 00       	push   0x1260
c001144e:	e8 ed e3 ff ff       	call   c000f840 <malloc>
c0011453:	5a                   	pop    edx
c0011454:	59                   	pop    ecx
c0011455:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011459:	50                   	push   eax
c001145a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001145e:	e8 15 fd ff ff       	call   c0011178 <VgaText::VgaText(char const*)>
c0011463:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011467:	83 c4 2c             	add    esp,0x2c
c001146a:	c3                   	ret    
c001146b:	90                   	nop

c001146c <TSS::TSS()>:
c001146c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011470:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011477:	90                   	nop
c0011478:	c3                   	ret    
c0011479:	90                   	nop

c001147a <TSS::setESP(unsigned long)>:
c001147a:	55                   	push   ebp
c001147b:	89 e5                	mov    ebp,esp
c001147d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011480:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011483:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011486:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011489:	90                   	nop
c001148a:	5d                   	pop    ebp
c001148b:	c3                   	ret    

c001148c <TSS::flush()>:
c001148c:	55                   	push   ebp
c001148d:	89 e5                	mov    ebp,esp
c001148f:	83 ec 10             	sub    esp,0x10
c0011492:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011495:	8b 00                	mov    eax,DWORD PTR [eax]
c0011497:	83 c8 03             	or     eax,0x3
c001149a:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c001149e:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00114a2:	66 89 d0             	mov    ax,dx
c00114a5:	0f 00 d8             	ltr    ax
c00114a8:	90                   	nop
c00114a9:	c9                   	leave  
c00114aa:	c3                   	ret    
c00114ab:	90                   	nop

c00114ac <TSS::setup(unsigned long, unsigned long)>:
c00114ac:	55                   	push   ebp
c00114ad:	89 e5                	mov    ebp,esp
c00114af:	83 ec 18             	sub    esp,0x18
c00114b2:	83 ec 0c             	sub    esp,0xc
c00114b5:	6a 68                	push   0x68
c00114b7:	e8 84 e3 ff ff       	call   c000f840 <malloc>
c00114bc:	83 c4 10             	add    esp,0x10
c00114bf:	89 c2                	mov    edx,eax
c00114c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114c4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00114c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114ca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114cd:	83 ec 04             	sub    esp,0x4
c00114d0:	6a 68                	push   0x68
c00114d2:	6a 00                	push   0x0
c00114d4:	50                   	push   eax
c00114d5:	e8 9e f2 fe ff       	call   c0000778 <memset>
c00114da:	83 c4 10             	add    esp,0x10
c00114dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114e0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114e3:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c00114e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114ec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114ef:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c00114f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114f8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114fb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00114fe:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011501:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011504:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011507:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c001150d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011510:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011513:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0011519:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001151c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001151f:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0011525:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011528:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001152b:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0011531:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011534:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011537:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c001153d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011540:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011543:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0011549:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001154c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001154f:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0011552:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0011555:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011558:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001155b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001155e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011561:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011564:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011567:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c001156e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011571:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011574:	0f 20 da             	mov    edx,cr3
c0011577:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001157a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001157d:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0011580:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011583:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011586:	83 ec 08             	sub    esp,0x8
c0011589:	50                   	push   eax
c001158a:	8d 45 ec             	lea    eax,[ebp-0x14]
c001158d:	50                   	push   eax
c001158e:	e8 8b da ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c0011593:	83 c4 10             	add    esp,0x10
c0011596:	83 ec 08             	sub    esp,0x8
c0011599:	6a 68                	push   0x68
c001159b:	8d 45 ec             	lea    eax,[ebp-0x14]
c001159e:	50                   	push   eax
c001159f:	e8 96 da ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c00115a4:	83 c4 10             	add    esp,0x10
c00115a7:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c00115ab:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00115ae:	83 e0 0f             	and    eax,0xf
c00115b1:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00115b4:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00115b7:	83 c8 40             	or     eax,0x40
c00115ba:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00115bd:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c00115c2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00115c8:	05 78 01 00 00       	add    eax,0x178
c00115cd:	83 ec 04             	sub    esp,0x4
c00115d0:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00115d3:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00115d6:	50                   	push   eax
c00115d7:	e8 92 da ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c00115dc:	83 c4 10             	add    esp,0x10
c00115df:	89 c2                	mov    edx,eax
c00115e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115e4:	89 10                	mov    DWORD PTR [eax],edx
c00115e6:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c00115eb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00115f1:	05 78 01 00 00       	add    eax,0x178
c00115f6:	83 ec 0c             	sub    esp,0xc
c00115f9:	50                   	push   eax
c00115fa:	e8 b3 da ff ff       	call   c000f0b2 <GDT::flush()>
c00115ff:	83 c4 10             	add    esp,0x10
c0011602:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011605:	8b 00                	mov    eax,DWORD PTR [eax]
c0011607:	83 ec 08             	sub    esp,0x8
c001160a:	50                   	push   eax
c001160b:	68 08 a3 02 c0       	push   0xc002a308
c0011610:	e8 83 17 00 00       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0011615:	83 c4 10             	add    esp,0x10
c0011618:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001161b:	8b 00                	mov    eax,DWORD PTR [eax]
c001161d:	c9                   	leave  
c001161e:	c3                   	ret    
c001161f:	90                   	nop

c0011620 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0011620:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011624:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011628:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001162b:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011630:	75 08                	jne    c001163a <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0011632:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011638:	eb 38                	jmp    c0011672 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c001163a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001163f:	75 17                	jne    c0011658 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0011641:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011646:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011649:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c001164f:	8b 10                	mov    edx,DWORD PTR [eax]
c0011651:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011655:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0011658:	89 c1                	mov    ecx,eax
c001165a:	83 e1 fd             	and    ecx,0xfffffffd
c001165d:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0011663:	74 cd                	je     c0011632 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011665:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c001166a:	83 e0 ef             	and    eax,0xffffffef
c001166d:	83 f8 08             	cmp    eax,0x8
c0011670:	76 c0                	jbe    c0011632 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011672:	31 c0                	xor    eax,eax
c0011674:	c3                   	ret    
c0011675:	90                   	nop

c0011676 <ReservedFilename::isAtty()>:
c0011676:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001167a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001167d:	31 c0                	xor    eax,eax
c001167f:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0011685:	74 09                	je     c0011690 <ReservedFilename::isAtty()+0x1a>
c0011687:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c001168d:	0f 94 c0             	sete   al
c0011690:	c3                   	ret    
c0011691:	90                   	nop

c0011692 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0011692:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011696:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001169a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001169d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00116a1:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00116a6:	75 08                	jne    c00116b0 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c00116a8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00116ae:	eb 3d                	jmp    c00116ed <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00116b0:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00116b5:	75 17                	jne    c00116ce <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c00116b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00116bc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00116bf:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c00116c5:	8b 10                	mov    edx,DWORD PTR [eax]
c00116c7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00116cb:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c00116ce:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00116d3:	75 04                	jne    c00116d9 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c00116d5:	89 0a                	mov    DWORD PTR [edx],ecx
c00116d7:	eb 14                	jmp    c00116ed <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00116d9:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00116de:	74 c8                	je     c00116a8 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00116e0:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00116e5:	83 e0 ef             	and    eax,0xffffffef
c00116e8:	83 f8 08             	cmp    eax,0x8
c00116eb:	76 bb                	jbe    c00116a8 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00116ed:	31 c0                	xor    eax,eax
c00116ef:	c3                   	ret    

c00116f0 <UnixFile::getFileDescriptor()>:
c00116f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00116f7:	c3                   	ret    

c00116f8 <UnixFile::UnixFile(int)>:
c00116f8:	53                   	push   ebx
c00116f9:	83 ec 28             	sub    esp,0x28
c00116fc:	ba f4 a3 02 c0       	mov    edx,0xc002a3f4
c0011701:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011705:	89 10                	mov    DWORD PTR [eax],edx
c0011707:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c001170f:	0f 8f 8c 01 00 00    	jg     c00118a1 <UnixFile::UnixFile(int)+0x1a9>
c0011715:	a1 e0 d1 02 c0       	mov    eax,ds:0xc002d1e0
c001171a:	8d 50 01             	lea    edx,[eax+0x1]
c001171d:	89 15 e0 d1 02 c0    	mov    DWORD PTR ds:0xc002d1e0,edx
c0011723:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011727:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001172a:	83 ec 08             	sub    esp,0x8
c001172d:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011731:	68 b8 e3 02 c0       	push   0xc002e3b8
c0011736:	e8 b5 6e 01 00       	call   c00285f0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c001173b:	83 c4 10             	add    esp,0x10
c001173e:	a0 b4 e3 02 c0       	mov    al,ds:0xc002e3b4
c0011743:	83 f0 01             	xor    eax,0x1
c0011746:	84 c0                	test   al,al
c0011748:	0f 84 54 01 00 00    	je     c00118a2 <UnixFile::UnixFile(int)+0x1aa>
c001174e:	c6 05 b4 e3 02 c0 01 	mov    BYTE PTR ds:0xc002e3b4,0x1
c0011755:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c001175d:	83 ec 0c             	sub    esp,0xc
c0011760:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011764:	e8 d7 e0 ff ff       	call   c000f840 <malloc>
c0011769:	83 c4 10             	add    esp,0x10
c001176c:	89 c3                	mov    ebx,eax
c001176e:	83 ec 08             	sub    esp,0x8
c0011771:	68 03 ff ff 0f       	push   0xfffff03
c0011776:	53                   	push   ebx
c0011777:	e8 2c 01 00 00       	call   c00118a8 <ReservedFilename::ReservedFilename(int)>
c001177c:	83 c4 10             	add    esp,0x10
c001177f:	89 1d ac e3 02 c0    	mov    DWORD PTR ds:0xc002e3ac,ebx
c0011785:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c001178d:	83 ec 0c             	sub    esp,0xc
c0011790:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011794:	e8 a7 e0 ff ff       	call   c000f840 <malloc>
c0011799:	83 c4 10             	add    esp,0x10
c001179c:	89 c3                	mov    ebx,eax
c001179e:	83 ec 08             	sub    esp,0x8
c00117a1:	68 01 ff ff 0f       	push   0xfffff01
c00117a6:	53                   	push   ebx
c00117a7:	e8 fc 00 00 00       	call   c00118a8 <ReservedFilename::ReservedFilename(int)>
c00117ac:	83 c4 10             	add    esp,0x10
c00117af:	89 1d b0 e3 02 c0    	mov    DWORD PTR ds:0xc002e3b0,ebx
c00117b5:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c00117bd:	83 ec 0c             	sub    esp,0xc
c00117c0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00117c4:	e8 77 e0 ff ff       	call   c000f840 <malloc>
c00117c9:	83 c4 10             	add    esp,0x10
c00117cc:	89 c3                	mov    ebx,eax
c00117ce:	83 ec 08             	sub    esp,0x8
c00117d1:	68 00 ff ff 0f       	push   0xfffff00
c00117d6:	53                   	push   ebx
c00117d7:	e8 cc 00 00 00       	call   c00118a8 <ReservedFilename::ReservedFilename(int)>
c00117dc:	83 c4 10             	add    esp,0x10
c00117df:	89 1d a4 e3 02 c0    	mov    DWORD PTR ds:0xc002e3a4,ebx
c00117e5:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00117ed:	83 ec 0c             	sub    esp,0xc
c00117f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00117f4:	e8 47 e0 ff ff       	call   c000f840 <malloc>
c00117f9:	83 c4 10             	add    esp,0x10
c00117fc:	89 c3                	mov    ebx,eax
c00117fe:	83 ec 08             	sub    esp,0x8
c0011801:	68 02 ff ff 0f       	push   0xfffff02
c0011806:	53                   	push   ebx
c0011807:	e8 9c 00 00 00       	call   c00118a8 <ReservedFilename::ReservedFilename(int)>
c001180c:	83 c4 10             	add    esp,0x10
c001180f:	89 1d a8 e3 02 c0    	mov    DWORD PTR ds:0xc002e3a8,ebx
c0011815:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001181d:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0011822:	7f 7e                	jg     c00118a2 <UnixFile::UnixFile(int)+0x1aa>
c0011824:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c001182c:	83 ec 0c             	sub    esp,0xc
c001182f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011833:	e8 08 e0 ff ff       	call   c000f840 <malloc>
c0011838:	83 c4 10             	add    esp,0x10
c001183b:	89 c3                	mov    ebx,eax
c001183d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011841:	05 10 ff ff 0f       	add    eax,0xfffff10
c0011846:	83 ec 08             	sub    esp,0x8
c0011849:	50                   	push   eax
c001184a:	53                   	push   ebx
c001184b:	e8 58 00 00 00       	call   c00118a8 <ReservedFilename::ReservedFilename(int)>
c0011850:	83 c4 10             	add    esp,0x10
c0011853:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011857:	89 1c 85 80 e3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1c80],ebx
c001185e:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0011866:	83 ec 0c             	sub    esp,0xc
c0011869:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001186d:	e8 ce df ff ff       	call   c000f840 <malloc>
c0011872:	83 c4 10             	add    esp,0x10
c0011875:	89 c3                	mov    ebx,eax
c0011877:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001187b:	05 20 ff ff 0f       	add    eax,0xfffff20
c0011880:	83 ec 08             	sub    esp,0x8
c0011883:	50                   	push   eax
c0011884:	53                   	push   ebx
c0011885:	e8 1e 00 00 00       	call   c00118a8 <ReservedFilename::ReservedFilename(int)>
c001188a:	83 c4 10             	add    esp,0x10
c001188d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011891:	89 1c 85 40 e3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1cc0],ebx
c0011898:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001189c:	e9 7c ff ff ff       	jmp    c001181d <UnixFile::UnixFile(int)+0x125>
c00118a1:	90                   	nop
c00118a2:	83 c4 28             	add    esp,0x28
c00118a5:	5b                   	pop    ebx
c00118a6:	c3                   	ret    
c00118a7:	90                   	nop

c00118a8 <ReservedFilename::ReservedFilename(int)>:
c00118a8:	83 ec 0c             	sub    esp,0xc
c00118ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118af:	83 ec 08             	sub    esp,0x8
c00118b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118b6:	50                   	push   eax
c00118b7:	e8 3c fe ff ff       	call   c00116f8 <UnixFile::UnixFile(int)>
c00118bc:	83 c4 10             	add    esp,0x10
c00118bf:	ba 10 a4 02 c0       	mov    edx,0xc002a410
c00118c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118c8:	89 10                	mov    DWORD PTR [eax],edx
c00118ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118ce:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00118d2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00118d5:	90                   	nop
c00118d6:	83 c4 0c             	add    esp,0xc
c00118d9:	c3                   	ret    

c00118da <UnixFile::~UnixFile()>:
c00118da:	83 ec 1c             	sub    esp,0x1c
c00118dd:	ba f4 a3 02 c0       	mov    edx,0xc002a3f4
c00118e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00118e6:	89 10                	mov    DWORD PTR [eax],edx
c00118e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00118ec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00118ef:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00118f4:	7f 73                	jg     c0011969 <UnixFile::~UnixFile()+0x8f>
c00118f6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00118fe:	83 ec 0c             	sub    esp,0xc
c0011901:	68 b8 e3 02 c0       	push   0xc002e3b8
c0011906:	e8 b9 6d 01 00       	call   c00286c4 <LinkedList<UnixFile>::getFirstElement()>
c001190b:	83 c4 10             	add    esp,0x10
c001190e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011912:	83 ec 0c             	sub    esp,0xc
c0011915:	68 b8 e3 02 c0       	push   0xc002e3b8
c001191a:	e8 ad 6d 01 00       	call   c00286cc <LinkedList<UnixFile>::removeFirst()>
c001191f:	83 c4 10             	add    esp,0x10
c0011922:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011926:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001192a:	74 40                	je     c001196c <UnixFile::~UnixFile()+0x92>
c001192c:	83 ec 08             	sub    esp,0x8
c001192f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011933:	68 b8 e3 02 c0       	push   0xc002e3b8
c0011938:	e8 b3 6c 01 00       	call   c00285f0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c001193d:	83 c4 10             	add    esp,0x10
c0011940:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011944:	8d 50 01             	lea    edx,[eax+0x1]
c0011947:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001194b:	3d 88 13 00 00       	cmp    eax,0x1388
c0011950:	0f 94 c0             	sete   al
c0011953:	84 c0                	test   al,al
c0011955:	74 a7                	je     c00118fe <UnixFile::~UnixFile()+0x24>
c0011957:	83 ec 0c             	sub    esp,0xc
c001195a:	68 cc a3 02 c0       	push   0xc002a3cc
c001195f:	e8 0f 8b 00 00       	call   c001a473 <Krnl::panic(char const*)>
c0011964:	83 c4 10             	add    esp,0x10
c0011967:	eb 95                	jmp    c00118fe <UnixFile::~UnixFile()+0x24>
c0011969:	90                   	nop
c001196a:	eb 01                	jmp    c001196d <UnixFile::~UnixFile()+0x93>
c001196c:	90                   	nop
c001196d:	90                   	nop
c001196e:	83 c4 1c             	add    esp,0x1c
c0011971:	c3                   	ret    

c0011972 <UnixFile::~UnixFile()>:
c0011972:	83 ec 0c             	sub    esp,0xc
c0011975:	83 ec 0c             	sub    esp,0xc
c0011978:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001197c:	e8 59 ff ff ff       	call   c00118da <UnixFile::~UnixFile()>
c0011981:	83 c4 10             	add    esp,0x10
c0011984:	83 ec 08             	sub    esp,0x8
c0011987:	6a 0c                	push   0xc
c0011989:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001198d:	e8 26 13 00 00       	call   c0012cb8 <operator delete(void*, unsigned long)>
c0011992:	83 c4 10             	add    esp,0x10
c0011995:	83 c4 0c             	add    esp,0xc
c0011998:	c3                   	ret    
c0011999:	90                   	nop

c001199a <ReservedFilename::~ReservedFilename()>:
c001199a:	83 ec 0c             	sub    esp,0xc
c001199d:	ba 10 a4 02 c0       	mov    edx,0xc002a410
c00119a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119a6:	89 10                	mov    DWORD PTR [eax],edx
c00119a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119ac:	83 ec 0c             	sub    esp,0xc
c00119af:	50                   	push   eax
c00119b0:	e8 25 ff ff ff       	call   c00118da <UnixFile::~UnixFile()>
c00119b5:	83 c4 10             	add    esp,0x10
c00119b8:	90                   	nop
c00119b9:	83 c4 0c             	add    esp,0xc
c00119bc:	c3                   	ret    
c00119bd:	90                   	nop

c00119be <ReservedFilename::~ReservedFilename()>:
c00119be:	83 ec 0c             	sub    esp,0xc
c00119c1:	83 ec 0c             	sub    esp,0xc
c00119c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119c8:	e8 cd ff ff ff       	call   c001199a <ReservedFilename::~ReservedFilename()>
c00119cd:	83 c4 10             	add    esp,0x10
c00119d0:	83 ec 08             	sub    esp,0x8
c00119d3:	6a 0c                	push   0xc
c00119d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119d9:	e8 da 12 00 00       	call   c0012cb8 <operator delete(void*, unsigned long)>
c00119de:	83 c4 10             	add    esp,0x10
c00119e1:	83 c4 0c             	add    esp,0xc
c00119e4:	c3                   	ret    

c00119e5 <getFromFileDescriptor(int)>:
c00119e5:	53                   	push   ebx
c00119e6:	83 ec 08             	sub    esp,0x8
c00119e9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00119ed:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00119f3:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00119f9:	7f 2c                	jg     c0011a27 <getFromFileDescriptor(int)+0x42>
c00119fb:	83 ec 0c             	sub    esp,0xc
c00119fe:	68 b8 e3 02 c0       	push   0xc002e3b8
c0011a03:	e8 bc 6c 01 00       	call   c00286c4 <LinkedList<UnixFile>::getFirstElement()>
c0011a08:	83 c4 10             	add    esp,0x10
c0011a0b:	85 c0                	test   eax,eax
c0011a0d:	75 04                	jne    c0011a13 <getFromFileDescriptor(int)+0x2e>
c0011a0f:	31 c0                	xor    eax,eax
c0011a11:	eb 6e                	jmp    c0011a81 <getFromFileDescriptor(int)+0x9c>
c0011a13:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011a16:	74 69                	je     c0011a81 <getFromFileDescriptor(int)+0x9c>
c0011a18:	52                   	push   edx
c0011a19:	52                   	push   edx
c0011a1a:	50                   	push   eax
c0011a1b:	68 b8 e3 02 c0       	push   0xc002e3b8
c0011a20:	e8 49 6d 01 00       	call   c002876e <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011a25:	eb e1                	jmp    c0011a08 <getFromFileDescriptor(int)+0x23>
c0011a27:	a1 ac e3 02 c0       	mov    eax,ds:0xc002e3ac
c0011a2c:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011a32:	74 4d                	je     c0011a81 <getFromFileDescriptor(int)+0x9c>
c0011a34:	a1 b0 e3 02 c0       	mov    eax,ds:0xc002e3b0
c0011a39:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011a3f:	74 40                	je     c0011a81 <getFromFileDescriptor(int)+0x9c>
c0011a41:	a1 a8 e3 02 c0       	mov    eax,ds:0xc002e3a8
c0011a46:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011a4c:	74 33                	je     c0011a81 <getFromFileDescriptor(int)+0x9c>
c0011a4e:	a1 a4 e3 02 c0       	mov    eax,ds:0xc002e3a4
c0011a53:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011a59:	74 26                	je     c0011a81 <getFromFileDescriptor(int)+0x9c>
c0011a5b:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011a61:	83 f8 08             	cmp    eax,0x8
c0011a64:	77 09                	ja     c0011a6f <getFromFileDescriptor(int)+0x8a>
c0011a66:	8b 04 85 80 e3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1c80]
c0011a6d:	eb 12                	jmp    c0011a81 <getFromFileDescriptor(int)+0x9c>
c0011a6f:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011a75:	83 fb 08             	cmp    ebx,0x8
c0011a78:	77 95                	ja     c0011a0f <getFromFileDescriptor(int)+0x2a>
c0011a7a:	8b 04 9d 40 e3 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd1cc0]
c0011a81:	83 c4 08             	add    esp,0x8
c0011a84:	5b                   	pop    ebx
c0011a85:	c3                   	ret    

c0011a86 <__static_initialization_and_destruction_0(int, int)>:
c0011a86:	83 ec 0c             	sub    esp,0xc
c0011a89:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011a8e:	75 34                	jne    c0011ac4 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011a90:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011a98:	75 2a                	jne    c0011ac4 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011a9a:	83 ec 0c             	sub    esp,0xc
c0011a9d:	68 b8 e3 02 c0       	push   0xc002e3b8
c0011aa2:	e8 f1 6a 01 00       	call   c0028598 <LinkedList<UnixFile>::LinkedList()>
c0011aa7:	83 c4 10             	add    esp,0x10
c0011aaa:	83 ec 04             	sub    esp,0x4
c0011aad:	68 74 d1 02 c0       	push   0xc002d174
c0011ab2:	68 b8 e3 02 c0       	push   0xc002e3b8
c0011ab7:	68 96 85 02 c0       	push   0xc0028596
c0011abc:	e8 71 11 00 00       	call   c0012c32 <__cxa_atexit>
c0011ac1:	83 c4 10             	add    esp,0x10
c0011ac4:	90                   	nop
c0011ac5:	83 c4 0c             	add    esp,0xc
c0011ac8:	c3                   	ret    

c0011ac9 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011ac9:	83 ec 0c             	sub    esp,0xc
c0011acc:	83 ec 08             	sub    esp,0x8
c0011acf:	68 ff ff 00 00       	push   0xffff
c0011ad4:	6a 01                	push   0x1
c0011ad6:	e8 ab ff ff ff       	call   c0011a86 <__static_initialization_and_destruction_0(int, int)>
c0011adb:	83 c4 10             	add    esp,0x10
c0011ade:	83 c4 0c             	add    esp,0xc
c0011ae1:	c3                   	ret    

c0011ae2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011ae2:	53                   	push   ebx
c0011ae3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011ae7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011aeb:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011af1:	89 c8                	mov    eax,ecx
c0011af3:	d1 e8                	shr    eax,1
c0011af5:	03 05 e8 d1 02 c0    	add    eax,DWORD PTR ds:0xc002d1e8
c0011afb:	83 e1 01             	and    ecx,0x1
c0011afe:	8a 10                	mov    dl,BYTE PTR [eax]
c0011b00:	75 09                	jne    c0011b0b <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011b02:	83 e2 f0             	and    edx,0xfffffff0
c0011b05:	09 da                	or     edx,ebx
c0011b07:	88 10                	mov    BYTE PTR [eax],dl
c0011b09:	5b                   	pop    ebx
c0011b0a:	c3                   	ret    
c0011b0b:	c1 e3 04             	shl    ebx,0x4
c0011b0e:	83 e2 0f             	and    edx,0xf
c0011b11:	09 da                	or     edx,ebx
c0011b13:	88 10                	mov    BYTE PTR [eax],dl
c0011b15:	5b                   	pop    ebx
c0011b16:	c3                   	ret    

c0011b17 <Virt::getPageState(unsigned long)>:
c0011b17:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b1b:	8b 0d e8 d1 02 c0    	mov    ecx,DWORD PTR ds:0xc002d1e8
c0011b21:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011b27:	89 d0                	mov    eax,edx
c0011b29:	d1 e8                	shr    eax,1
c0011b2b:	83 e2 01             	and    edx,0x1
c0011b2e:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011b31:	75 04                	jne    c0011b37 <Virt::getPageState(unsigned long)+0x20>
c0011b33:	83 e0 0f             	and    eax,0xf
c0011b36:	c3                   	ret    
c0011b37:	c0 e8 04             	shr    al,0x4
c0011b3a:	c3                   	ret    

c0011b3b <Virt::allocateKernelVirtualPages(int)>:
c0011b3b:	55                   	push   ebp
c0011b3c:	31 ed                	xor    ebp,ebp
c0011b3e:	57                   	push   edi
c0011b3f:	56                   	push   esi
c0011b40:	53                   	push   ebx
c0011b41:	31 db                	xor    ebx,ebx
c0011b43:	83 ec 1c             	sub    esp,0x1c
c0011b46:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011b4a:	8b 3d e4 d1 02 c0    	mov    edi,DWORD PTR ds:0xc002d1e4
c0011b50:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011b55:	57                   	push   edi
c0011b56:	e8 bc ff ff ff       	call   c0011b17 <Virt::getPageState(unsigned long)>
c0011b5b:	5a                   	pop    edx
c0011b5c:	84 c0                	test   al,al
c0011b5e:	75 3a                	jne    c0011b9a <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011b60:	85 db                	test   ebx,ebx
c0011b62:	75 02                	jne    c0011b66 <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011b64:	89 fd                	mov    ebp,edi
c0011b66:	43                   	inc    ebx
c0011b67:	39 f3                	cmp    ebx,esi
c0011b69:	74 5a                	je     c0011bc5 <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011b6b:	47                   	inc    edi
c0011b6c:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011b72:	76 31                	jbe    c0011ba5 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011b74:	c7 05 e4 d1 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002d1e4,0xc8000
c0011b7e:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011b83:	75 28                	jne    c0011bad <Virt::allocateKernelVirtualPages(int)+0x72>
c0011b85:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011b8a:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011b8f:	57                   	push   edi
c0011b90:	e8 82 ff ff ff       	call   c0011b17 <Virt::getPageState(unsigned long)>
c0011b95:	5a                   	pop    edx
c0011b96:	84 c0                	test   al,al
c0011b98:	74 c6                	je     c0011b60 <Virt::allocateKernelVirtualPages(int)+0x25>
c0011b9a:	31 db                	xor    ebx,ebx
c0011b9c:	47                   	inc    edi
c0011b9d:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011ba3:	77 cf                	ja     c0011b74 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011ba5:	89 3d e4 d1 02 c0    	mov    DWORD PTR ds:0xc002d1e4,edi
c0011bab:	eb a8                	jmp    c0011b55 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011bad:	83 ec 0c             	sub    esp,0xc
c0011bb0:	68 24 a4 02 c0       	push   0xc002a424
c0011bb5:	e8 b9 88 00 00       	call   c001a473 <Krnl::panic(char const*)>
c0011bba:	8b 3d e4 d1 02 c0    	mov    edi,DWORD PTR ds:0xc002d1e4
c0011bc0:	83 c4 10             	add    esp,0x10
c0011bc3:	eb 90                	jmp    c0011b55 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011bc5:	89 2d e4 d1 02 c0    	mov    DWORD PTR ds:0xc002d1e4,ebp
c0011bcb:	4b                   	dec    ebx
c0011bcc:	74 5f                	je     c0011c2d <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011bce:	85 f6                	test   esi,esi
c0011bd0:	74 3d                	je     c0011c0f <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011bd2:	89 e8                	mov    eax,ebp
c0011bd4:	31 db                	xor    ebx,ebx
c0011bd6:	8d 7e ff             	lea    edi,[esi-0x1]
c0011bd9:	eb 14                	jmp    c0011bef <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011bdb:	6a 01                	push   0x1
c0011bdd:	43                   	inc    ebx
c0011bde:	50                   	push   eax
c0011bdf:	e8 fe fe ff ff       	call   c0011ae2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011be4:	58                   	pop    eax
c0011be5:	39 f3                	cmp    ebx,esi
c0011be7:	5a                   	pop    edx
c0011be8:	74 25                	je     c0011c0f <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011bea:	a1 e4 d1 02 c0       	mov    eax,ds:0xc002d1e4
c0011bef:	8d 50 01             	lea    edx,[eax+0x1]
c0011bf2:	85 db                	test   ebx,ebx
c0011bf4:	89 15 e4 d1 02 c0    	mov    DWORD PTR ds:0xc002d1e4,edx
c0011bfa:	74 20                	je     c0011c1c <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011bfc:	39 df                	cmp    edi,ebx
c0011bfe:	75 db                	jne    c0011bdb <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011c00:	6a 03                	push   0x3
c0011c02:	43                   	inc    ebx
c0011c03:	50                   	push   eax
c0011c04:	e8 d9 fe ff ff       	call   c0011ae2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c09:	59                   	pop    ecx
c0011c0a:	39 f3                	cmp    ebx,esi
c0011c0c:	58                   	pop    eax
c0011c0d:	75 db                	jne    c0011bea <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011c0f:	83 c4 1c             	add    esp,0x1c
c0011c12:	89 e8                	mov    eax,ebp
c0011c14:	5b                   	pop    ebx
c0011c15:	c1 e0 0c             	shl    eax,0xc
c0011c18:	5e                   	pop    esi
c0011c19:	5f                   	pop    edi
c0011c1a:	5d                   	pop    ebp
c0011c1b:	c3                   	ret    
c0011c1c:	6a 02                	push   0x2
c0011c1e:	bb 01 00 00 00       	mov    ebx,0x1
c0011c23:	50                   	push   eax
c0011c24:	e8 b9 fe ff ff       	call   c0011ae2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c29:	58                   	pop    eax
c0011c2a:	5a                   	pop    edx
c0011c2b:	eb bd                	jmp    c0011bea <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011c2d:	6a 04                	push   0x4
c0011c2f:	8d 45 01             	lea    eax,[ebp+0x1]
c0011c32:	55                   	push   ebp
c0011c33:	a3 e4 d1 02 c0       	mov    ds:0xc002d1e4,eax
c0011c38:	e8 a5 fe ff ff       	call   c0011ae2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c3d:	59                   	pop    ecx
c0011c3e:	89 e8                	mov    eax,ebp
c0011c40:	5b                   	pop    ebx
c0011c41:	c1 e0 0c             	shl    eax,0xc
c0011c44:	83 c4 1c             	add    esp,0x1c
c0011c47:	5b                   	pop    ebx
c0011c48:	5e                   	pop    esi
c0011c49:	5f                   	pop    edi
c0011c4a:	5d                   	pop    ebp
c0011c4b:	c3                   	ret    

c0011c4c <Virt::freeSwapfilePage(unsigned long)>:
c0011c4c:	53                   	push   ebx
c0011c4d:	8b 15 c8 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e3c8
c0011c53:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011c57:	b8 01 00 00 00       	mov    eax,0x1
c0011c5c:	89 cb                	mov    ebx,ecx
c0011c5e:	d3 e0                	shl    eax,cl
c0011c60:	c1 eb 05             	shr    ebx,0x5
c0011c63:	f7 d0                	not    eax
c0011c65:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0011c68:	5b                   	pop    ebx
c0011c69:	c3                   	ret    

c0011c6a <Virt::swapIDToSector(unsigned long)>:
c0011c6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c6e:	0f af 05 ec d1 02 c0 	imul   eax,DWORD PTR ds:0xc002d1ec
c0011c75:	03 05 f4 d1 02 c0    	add    eax,DWORD PTR ds:0xc002d1f4
c0011c7b:	c3                   	ret    

c0011c7c <Virt::allocateSwapfilePage()>:
c0011c7c:	55                   	push   ebp
c0011c7d:	31 d2                	xor    edx,edx
c0011c7f:	57                   	push   edi
c0011c80:	56                   	push   esi
c0011c81:	53                   	push   ebx
c0011c82:	83 ec 0c             	sub    esp,0xc
c0011c85:	8b 0d ec d1 02 c0    	mov    ecx,DWORD PTR ds:0xc002d1ec
c0011c8b:	a1 f0 d1 02 c0       	mov    eax,ds:0xc002d1f0
c0011c90:	f7 f1                	div    ecx
c0011c92:	39 0d f0 d1 02 c0    	cmp    DWORD PTR ds:0xc002d1f0,ecx
c0011c98:	72 2d                	jb     c0011cc7 <Virt::allocateSwapfilePage()+0x4b>
c0011c9a:	8b 35 c8 e3 02 c0    	mov    esi,DWORD PTR ds:0xc002e3c8
c0011ca0:	8b 16                	mov    edx,DWORD PTR [esi]
c0011ca2:	f6 c2 01             	test   dl,0x1
c0011ca5:	74 3c                	je     c0011ce3 <Virt::allocateSwapfilePage()+0x67>
c0011ca7:	31 c9                	xor    ecx,ecx
c0011ca9:	bf 01 00 00 00       	mov    edi,0x1
c0011cae:	eb 12                	jmp    c0011cc2 <Virt::allocateSwapfilePage()+0x46>
c0011cb0:	89 fd                	mov    ebp,edi
c0011cb2:	89 ca                	mov    edx,ecx
c0011cb4:	d3 e5                	shl    ebp,cl
c0011cb6:	c1 ea 05             	shr    edx,0x5
c0011cb9:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011cbc:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011cbe:	85 ea                	test   edx,ebp
c0011cc0:	74 2a                	je     c0011cec <Virt::allocateSwapfilePage()+0x70>
c0011cc2:	41                   	inc    ecx
c0011cc3:	39 c8                	cmp    eax,ecx
c0011cc5:	77 e9                	ja     c0011cb0 <Virt::allocateSwapfilePage()+0x34>
c0011cc7:	83 ec 0c             	sub    esp,0xc
c0011cca:	68 ab a5 02 c0       	push   0xc002a5ab
c0011ccf:	e8 9f 87 00 00       	call   c001a473 <Krnl::panic(char const*)>
c0011cd4:	83 c4 10             	add    esp,0x10
c0011cd7:	31 c9                	xor    ecx,ecx
c0011cd9:	83 c4 0c             	add    esp,0xc
c0011cdc:	89 c8                	mov    eax,ecx
c0011cde:	5b                   	pop    ebx
c0011cdf:	5e                   	pop    esi
c0011ce0:	5f                   	pop    edi
c0011ce1:	5d                   	pop    ebp
c0011ce2:	c3                   	ret    
c0011ce3:	89 f3                	mov    ebx,esi
c0011ce5:	bd 01 00 00 00       	mov    ebp,0x1
c0011cea:	31 c9                	xor    ecx,ecx
c0011cec:	09 ea                	or     edx,ebp
c0011cee:	89 c8                	mov    eax,ecx
c0011cf0:	89 13                	mov    DWORD PTR [ebx],edx
c0011cf2:	83 c4 0c             	add    esp,0xc
c0011cf5:	5b                   	pop    ebx
c0011cf6:	5e                   	pop    esi
c0011cf7:	5f                   	pop    edi
c0011cf8:	5d                   	pop    ebp
c0011cf9:	c3                   	ret    

c0011cfa <Virt::virtualMemorySetup()>:
c0011cfa:	53                   	push   ebx
c0011cfb:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011d00:	83 ec 08             	sub    esp,0x8
c0011d03:	6a 0f                	push   0xf
c0011d05:	53                   	push   ebx
c0011d06:	43                   	inc    ebx
c0011d07:	e8 d6 fd ff ff       	call   c0011ae2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d0c:	59                   	pop    ecx
c0011d0d:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011d13:	58                   	pop    eax
c0011d14:	75 ed                	jne    c0011d03 <Virt::virtualMemorySetup()+0x9>
c0011d16:	83 ec 08             	sub    esp,0x8
c0011d19:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011d1e:	68 00 00 00 c8       	push   0xc8000000
c0011d23:	68 c2 a5 02 c0       	push   0xc002a5c2
c0011d28:	e8 6b 10 00 00       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0011d2d:	58                   	pop    eax
c0011d2e:	5a                   	pop    edx
c0011d2f:	68 00 f0 ff ef       	push   0xeffff000
c0011d34:	68 d6 a5 02 c0       	push   0xc002a5d6
c0011d39:	e8 5a 10 00 00       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0011d3e:	83 c4 10             	add    esp,0x10
c0011d41:	83 ec 08             	sub    esp,0x8
c0011d44:	6a 00                	push   0x0
c0011d46:	53                   	push   ebx
c0011d47:	43                   	inc    ebx
c0011d48:	e8 95 fd ff ff       	call   c0011ae2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d4d:	83 c4 10             	add    esp,0x10
c0011d50:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011d56:	75 e9                	jne    c0011d41 <Virt::virtualMemorySetup()+0x47>
c0011d58:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011d5d:	83 ec 08             	sub    esp,0x8
c0011d60:	6a 0f                	push   0xf
c0011d62:	53                   	push   ebx
c0011d63:	43                   	inc    ebx
c0011d64:	e8 79 fd ff ff       	call   c0011ae2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d69:	83 c4 10             	add    esp,0x10
c0011d6c:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011d72:	75 e9                	jne    c0011d5d <Virt::virtualMemorySetup()+0x63>
c0011d74:	83 c4 08             	add    esp,0x8
c0011d77:	5b                   	pop    ebx
c0011d78:	c3                   	ret    

c0011d79 <Virt::swappingSetup()>:
c0011d79:	83 ec 18             	sub    esp,0x18
c0011d7c:	68 ea a5 02 c0       	push   0xc002a5ea
c0011d81:	e8 12 10 00 00       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0011d86:	58                   	pop    eax
c0011d87:	a1 f0 d1 02 c0       	mov    eax,ds:0xc002d1f0
c0011d8c:	5a                   	pop    edx
c0011d8d:	31 d2                	xor    edx,edx
c0011d8f:	f7 35 ec d1 02 c0    	div    DWORD PTR ds:0xc002d1ec
c0011d95:	c1 e8 05             	shr    eax,0x5
c0011d98:	50                   	push   eax
c0011d99:	68 00 a6 02 c0       	push   0xc002a600
c0011d9e:	e8 f5 0f 00 00       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0011da3:	a1 f0 d1 02 c0       	mov    eax,ds:0xc002d1f0
c0011da8:	31 d2                	xor    edx,edx
c0011daa:	f7 35 ec d1 02 c0    	div    DWORD PTR ds:0xc002d1ec
c0011db0:	c1 e8 05             	shr    eax,0x5
c0011db3:	89 04 24             	mov    DWORD PTR [esp],eax
c0011db6:	e8 85 da ff ff       	call   c000f840 <malloc>
c0011dbb:	83 c4 0c             	add    esp,0xc
c0011dbe:	89 c1                	mov    ecx,eax
c0011dc0:	a3 c8 e3 02 c0       	mov    ds:0xc002e3c8,eax
c0011dc5:	31 d2                	xor    edx,edx
c0011dc7:	a1 f0 d1 02 c0       	mov    eax,ds:0xc002d1f0
c0011dcc:	f7 35 ec d1 02 c0    	div    DWORD PTR ds:0xc002d1ec
c0011dd2:	c1 e8 05             	shr    eax,0x5
c0011dd5:	50                   	push   eax
c0011dd6:	6a 00                	push   0x0
c0011dd8:	51                   	push   ecx
c0011dd9:	e8 9a e9 fe ff       	call   c0000778 <memset>
c0011dde:	83 c4 1c             	add    esp,0x1c
c0011de1:	c3                   	ret    

c0011de2 <Virt::getAKernelVAS()>:
c0011de2:	a1 cc e3 02 c0       	mov    eax,ds:0xc002e3cc
c0011de7:	c3                   	ret    

c0011de8 <VAS::VAS()>:
c0011de8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011dec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011df3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011df7:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0011dfe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e02:	a3 cc e3 02 c0       	mov    ds:0xc002e3cc,eax
c0011e07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e0b:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011e0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e13:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011e16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e1a:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c0011e21:	90                   	nop
c0011e22:	c3                   	ret    
c0011e23:	90                   	nop

c0011e24 <VAS::VAS(VAS*)>:
c0011e24:	83 ec 0c             	sub    esp,0xc
c0011e27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e2b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e36:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0011e3d:	83 ec 0c             	sub    esp,0xc
c0011e40:	68 44 a4 02 c0       	push   0xc002a444
c0011e45:	e8 29 86 00 00       	call   c001a473 <Krnl::panic(char const*)>
c0011e4a:	83 c4 10             	add    esp,0x10
c0011e4d:	90                   	nop
c0011e4e:	83 c4 0c             	add    esp,0xc
c0011e51:	c3                   	ret    

c0011e52 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011e52:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011e56:	89 c2                	mov    edx,eax
c0011e58:	c1 e8 0a             	shr    eax,0xa
c0011e5b:	c1 ea 16             	shr    edx,0x16
c0011e5e:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011e63:	19 c9                	sbb    ecx,ecx
c0011e65:	c1 e2 0c             	shl    edx,0xc
c0011e68:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011e6e:	25 fc 0f 00 00       	and    eax,0xffc
c0011e73:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011e7a:	01 d0                	add    eax,edx
c0011e7c:	c3                   	ret    
c0011e7d:	90                   	nop

c0011e7e <VAS::getPageTableEntry(unsigned long)>:
c0011e7e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011e82:	89 ca                	mov    edx,ecx
c0011e84:	c1 e9 0a             	shr    ecx,0xa
c0011e87:	c1 ea 16             	shr    edx,0x16
c0011e8a:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011e90:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011e96:	c1 e0 0c             	shl    eax,0xc
c0011e99:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011e9c:	c3                   	ret    

c0011e9d <Virt::freeKernelVirtualPages(unsigned long)>:
c0011e9d:	57                   	push   edi
c0011e9e:	56                   	push   esi
c0011e9f:	be 01 00 00 00       	mov    esi,0x1
c0011ea4:	53                   	push   ebx
c0011ea5:	83 ec 10             	sub    esp,0x10
c0011ea8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011eac:	c1 eb 0c             	shr    ebx,0xc
c0011eaf:	eb 3f                	jmp    c0011ef0 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011eb1:	e8 2c ff ff ff       	call   c0011de2 <Virt::getAKernelVAS()>
c0011eb6:	83 ec 08             	sub    esp,0x8
c0011eb9:	57                   	push   edi
c0011eba:	50                   	push   eax
c0011ebb:	e8 be ff ff ff       	call   c0011e7e <VAS::getPageTableEntry(unsigned long)>
c0011ec0:	83 c4 10             	add    esp,0x10
c0011ec3:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ec5:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011ec9:	f6 c4 04             	test   ah,0x4
c0011ecc:	75 5f                	jne    c0011f2d <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011ece:	80 fa 04             	cmp    dl,0x4
c0011ed1:	74 78                	je     c0011f4b <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011ed3:	80 fa 02             	cmp    dl,0x2
c0011ed6:	0f 84 88 00 00 00    	je     c0011f64 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011edc:	80 fa 03             	cmp    dl,0x3
c0011edf:	0f 84 ad 00 00 00    	je     c0011f92 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011ee5:	fe ca                	dec    dl
c0011ee7:	0f 84 92 00 00 00    	je     c0011f7f <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011eed:	43                   	inc    ebx
c0011eee:	31 f6                	xor    esi,esi
c0011ef0:	53                   	push   ebx
c0011ef1:	e8 21 fc ff ff       	call   c0011b17 <Virt::getPageState(unsigned long)>
c0011ef6:	5f                   	pop    edi
c0011ef7:	89 df                	mov    edi,ebx
c0011ef9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011efd:	c1 e7 0c             	shl    edi,0xc
c0011f00:	84 c0                	test   al,al
c0011f02:	75 ad                	jne    c0011eb1 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011f04:	83 ec 0c             	sub    esp,0xc
c0011f07:	68 1b a6 02 c0       	push   0xc002a61b
c0011f0c:	e8 62 85 00 00       	call   c001a473 <Krnl::panic(char const*)>
c0011f11:	e8 cc fe ff ff       	call   c0011de2 <Virt::getAKernelVAS()>
c0011f16:	5a                   	pop    edx
c0011f17:	59                   	pop    ecx
c0011f18:	57                   	push   edi
c0011f19:	50                   	push   eax
c0011f1a:	e8 5f ff ff ff       	call   c0011e7e <VAS::getPageTableEntry(unsigned long)>
c0011f1f:	83 c4 10             	add    esp,0x10
c0011f22:	8b 00                	mov    eax,DWORD PTR [eax]
c0011f24:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011f28:	f6 c4 04             	test   ah,0x4
c0011f2b:	74 c0                	je     c0011eed <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011f2d:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011f31:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011f36:	83 ec 0c             	sub    esp,0xc
c0011f39:	50                   	push   eax
c0011f3a:	e8 14 df ff ff       	call   c000fe53 <Phys::freePage(unsigned long)>
c0011f3f:	83 c4 10             	add    esp,0x10
c0011f42:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011f46:	80 fa 04             	cmp    dl,0x4
c0011f49:	75 88                	jne    c0011ed3 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011f4b:	89 f0                	mov    eax,esi
c0011f4d:	84 c0                	test   al,al
c0011f4f:	75 47                	jne    c0011f98 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011f51:	c7 44 24 20 68 a4 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a468
c0011f59:	83 c4 10             	add    esp,0x10
c0011f5c:	5b                   	pop    ebx
c0011f5d:	5e                   	pop    esi
c0011f5e:	5f                   	pop    edi
c0011f5f:	e9 0f 85 00 00       	jmp    c001a473 <Krnl::panic(char const*)>
c0011f64:	89 f0                	mov    eax,esi
c0011f66:	84 c0                	test   al,al
c0011f68:	75 15                	jne    c0011f7f <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011f6a:	83 ec 0c             	sub    esp,0xc
c0011f6d:	68 37 a6 02 c0       	push   0xc002a637
c0011f72:	e8 fc 84 00 00       	call   c001a473 <Krnl::panic(char const*)>
c0011f77:	83 c4 10             	add    esp,0x10
c0011f7a:	e9 6e ff ff ff       	jmp    c0011eed <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011f7f:	83 ec 08             	sub    esp,0x8
c0011f82:	6a 00                	push   0x0
c0011f84:	53                   	push   ebx
c0011f85:	e8 58 fb ff ff       	call   c0011ae2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011f8a:	83 c4 10             	add    esp,0x10
c0011f8d:	e9 5b ff ff ff       	jmp    c0011eed <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011f92:	89 f0                	mov    eax,esi
c0011f94:	84 c0                	test   al,al
c0011f96:	75 15                	jne    c0011fad <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011f98:	83 ec 08             	sub    esp,0x8
c0011f9b:	6a 00                	push   0x0
c0011f9d:	53                   	push   ebx
c0011f9e:	e8 3f fb ff ff       	call   c0011ae2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011fa3:	83 c4 10             	add    esp,0x10
c0011fa6:	83 c4 10             	add    esp,0x10
c0011fa9:	5b                   	pop    ebx
c0011faa:	5e                   	pop    esi
c0011fab:	5f                   	pop    edi
c0011fac:	c3                   	ret    
c0011fad:	c7 44 24 20 53 a6 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a653
c0011fb5:	83 c4 10             	add    esp,0x10
c0011fb8:	5b                   	pop    ebx
c0011fb9:	5e                   	pop    esi
c0011fba:	5f                   	pop    edi
c0011fbb:	e9 b3 84 00 00       	jmp    c001a473 <Krnl::panic(char const*)>

c0011fc0 <VAS::freeAllocatedPages(unsigned long)>:
c0011fc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011fc4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011fc8:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011fcc:	74 09                	je     c0011fd7 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011fce:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011fd2:	e9 c6 fe ff ff       	jmp    c0011e9d <Virt::freeKernelVirtualPages(unsigned long)>
c0011fd7:	c7 44 24 04 8c a4 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a48c
c0011fdf:	e9 b4 0d 00 00       	jmp    c0012d98 <Dbg::kprintf(char const*, ...)>

c0011fe4 <VAS::virtualToPhysical(unsigned long)>:
c0011fe4:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011fe8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011fec:	e8 8d fe ff ff       	call   c0011e7e <VAS::getPageTableEntry(unsigned long)>
c0011ff1:	5a                   	pop    edx
c0011ff2:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ff4:	59                   	pop    ecx
c0011ff5:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011ffa:	c3                   	ret    
c0011ffb:	90                   	nop

c0011ffc <VAS::reflagRange(unsigned long, int, int, int)>:
c0011ffc:	55                   	push   ebp
c0011ffd:	57                   	push   edi
c0011ffe:	56                   	push   esi
c0011fff:	53                   	push   ebx
c0012000:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012004:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0012008:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001200c:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0012010:	85 db                	test   ebx,ebx
c0012012:	7e 22                	jle    c0012036 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0012014:	c1 e3 0c             	shl    ebx,0xc
c0012017:	01 f3                	add    ebx,esi
c0012019:	56                   	push   esi
c001201a:	81 c6 00 10 00 00    	add    esi,0x1000
c0012020:	55                   	push   ebp
c0012021:	e8 58 fe ff ff       	call   c0011e7e <VAS::getPageTableEntry(unsigned long)>
c0012026:	5a                   	pop    edx
c0012027:	59                   	pop    ecx
c0012028:	8b 08                	mov    ecx,DWORD PTR [eax]
c001202a:	21 f9                	and    ecx,edi
c001202c:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0012030:	39 f3                	cmp    ebx,esi
c0012032:	89 08                	mov    DWORD PTR [eax],ecx
c0012034:	75 e3                	jne    c0012019 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0012036:	5b                   	pop    ebx
c0012037:	5e                   	pop    esi
c0012038:	5f                   	pop    edi
c0012039:	5d                   	pop    ebp
c001203a:	c3                   	ret    
c001203b:	90                   	nop

c001203c <VAS::setToWriteCombining(unsigned long, int)>:
c001203c:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c0012041:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012047:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c001204e:	75 01                	jne    c0012051 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0012050:	c3                   	ret    
c0012051:	68 80 00 00 00       	push   0x80
c0012056:	6a ff                	push   0xffffffff
c0012058:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001205c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012060:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012064:	e8 93 ff ff ff       	call   c0011ffc <VAS::reflagRange(unsigned long, int, int, int)>
c0012069:	83 c4 14             	add    esp,0x14
c001206c:	c3                   	ret    
c001206d:	90                   	nop

c001206e <VAS::mapOtherVASIn(bool, VAS*)>:
c001206e:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0012073:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012077:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001207a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001207e:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0012081:	19 c0                	sbb    eax,eax
c0012083:	83 ca 03             	or     edx,0x3
c0012086:	83 e0 fc             	and    eax,0xfffffffc
c0012089:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0012090:	0f 20 d8             	mov    eax,cr3
c0012093:	0f 22 d8             	mov    cr3,eax
c0012096:	c3                   	ret    
c0012097:	90                   	nop

c0012098 <VAS::~VAS()>:
c0012098:	83 ec 2c             	sub    esp,0x2c
c001209b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00120a3:	e8 c5 bb 00 00       	call   c001dc6d <lockScheduler()>
c00120a8:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00120ad:	8b 00                	mov    eax,DWORD PTR [eax]
c00120af:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00120b2:	8b 80 32 19 00 00    	mov    eax,DWORD PTR [eax+0x1932]
c00120b8:	83 ec 04             	sub    esp,0x4
c00120bb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00120bf:	6a 01                	push   0x1
c00120c1:	50                   	push   eax
c00120c2:	e8 a7 ff ff ff       	call   c001206e <VAS::mapOtherVASIn(bool, VAS*)>
c00120c7:	83 c4 10             	add    esp,0x10
c00120ca:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00120d2:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00120da:	0f 8f d7 00 00 00    	jg     c00121b7 <VAS::~VAS()+0x11f>
c00120e0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00120e4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00120e7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00120eb:	c1 e2 02             	shl    edx,0x2
c00120ee:	01 d0                	add    eax,edx
c00120f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00120f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00120f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00120fa:	83 e0 01             	and    eax,0x1
c00120fd:	0f 84 ab 00 00 00    	je     c00121ae <VAS::~VAS()+0x116>
c0012103:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001210b:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0012113:	7f 75                	jg     c001218a <VAS::~VAS()+0xf2>
c0012115:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012119:	c1 e0 0a             	shl    eax,0xa
c001211c:	89 c2                	mov    edx,eax
c001211e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012122:	01 d0                	add    eax,edx
c0012124:	c1 e0 0c             	shl    eax,0xc
c0012127:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001212b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0012130:	8b 00                	mov    eax,DWORD PTR [eax]
c0012132:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012135:	8b 80 32 19 00 00    	mov    eax,DWORD PTR [eax+0x1932]
c001213b:	83 ec 04             	sub    esp,0x4
c001213e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012142:	6a 01                	push   0x1
c0012144:	50                   	push   eax
c0012145:	e8 08 fd ff ff       	call   c0011e52 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c001214a:	83 c4 10             	add    esp,0x10
c001214d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012151:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012155:	8b 00                	mov    eax,DWORD PTR [eax]
c0012157:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001215b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001215f:	25 01 04 00 00       	and    eax,0x401
c0012164:	3d 01 04 00 00       	cmp    eax,0x401
c0012169:	75 19                	jne    c0012184 <VAS::~VAS()+0xec>
c001216b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001216f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012174:	83 ec 0c             	sub    esp,0xc
c0012177:	50                   	push   eax
c0012178:	e8 d6 dc ff ff       	call   c000fe53 <Phys::freePage(unsigned long)>
c001217d:	83 c4 10             	add    esp,0x10
c0012180:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012184:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0012188:	eb 81                	jmp    c001210b <VAS::~VAS()+0x73>
c001218a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001218e:	25 00 04 00 00       	and    eax,0x400
c0012193:	74 19                	je     c00121ae <VAS::~VAS()+0x116>
c0012195:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012199:	25 00 f0 ff ff       	and    eax,0xfffff000
c001219e:	83 ec 0c             	sub    esp,0xc
c00121a1:	50                   	push   eax
c00121a2:	e8 ac dc ff ff       	call   c000fe53 <Phys::freePage(unsigned long)>
c00121a7:	83 c4 10             	add    esp,0x10
c00121aa:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00121ae:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00121b2:	e9 1b ff ff ff       	jmp    c00120d2 <VAS::~VAS()+0x3a>
c00121b7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121bb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00121be:	83 ec 0c             	sub    esp,0xc
c00121c1:	50                   	push   eax
c00121c2:	e8 d6 fc ff ff       	call   c0011e9d <Virt::freeKernelVirtualPages(unsigned long)>
c00121c7:	83 c4 10             	add    esp,0x10
c00121ca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121ce:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00121d1:	83 ec 0c             	sub    esp,0xc
c00121d4:	50                   	push   eax
c00121d5:	e8 79 dc ff ff       	call   c000fe53 <Phys::freePage(unsigned long)>
c00121da:	83 c4 10             	add    esp,0x10
c00121dd:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00121e1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00121e5:	c1 e0 02             	shl    eax,0x2
c00121e8:	83 ec 08             	sub    esp,0x8
c00121eb:	50                   	push   eax
c00121ec:	68 b0 a4 02 c0       	push   0xc002a4b0
c00121f1:	e8 a2 0b 00 00       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c00121f6:	83 c4 10             	add    esp,0x10
c00121f9:	e8 71 ba 00 00       	call   c001dc6f <unlockScheduler()>
c00121fe:	90                   	nop
c00121ff:	83 c4 2c             	add    esp,0x2c
c0012202:	c3                   	ret    
c0012203:	90                   	nop

c0012204 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0012204:	55                   	push   ebp
c0012205:	57                   	push   edi
c0012206:	56                   	push   esi
c0012207:	53                   	push   ebx
c0012208:	83 ec 1c             	sub    esp,0x1c
c001220b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001220f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012213:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0012219:	77 08                	ja     c0012223 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c001221b:	0f 20 d8             	mov    eax,cr3
c001221e:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c0012221:	75 47                	jne    c001226a <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0012223:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012227:	09 d8                	or     eax,ebx
c0012229:	a9 ff 0f 00 00       	test   eax,0xfff
c001222e:	75 57                	jne    c0012287 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0012230:	89 de                	mov    esi,ebx
c0012232:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012235:	c1 ee 16             	shr    esi,0x16
c0012238:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c001223f:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0012243:	74 54                	je     c0012299 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0012245:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012249:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c001224f:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0012253:	c1 e6 0c             	shl    esi,0xc
c0012256:	c1 eb 0a             	shr    ebx,0xa
c0012259:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c001225f:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0012262:	83 c4 1c             	add    esp,0x1c
c0012265:	5b                   	pop    ebx
c0012266:	5e                   	pop    esi
c0012267:	5f                   	pop    edi
c0012268:	5d                   	pop    ebp
c0012269:	c3                   	ret    
c001226a:	83 ec 0c             	sub    esp,0xc
c001226d:	68 d0 a4 02 c0       	push   0xc002a4d0
c0012272:	e8 21 0b 00 00       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0012277:	83 c4 10             	add    esp,0x10
c001227a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001227e:	09 d8                	or     eax,ebx
c0012280:	a9 ff 0f 00 00       	test   eax,0xfff
c0012285:	74 a9                	je     c0012230 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0012287:	83 ec 0c             	sub    esp,0xc
c001228a:	68 38 a5 02 c0       	push   0xc002a538
c001228f:	e8 df 81 00 00       	call   c001a473 <Krnl::panic(char const*)>
c0012294:	83 c4 10             	add    esp,0x10
c0012297:	eb 97                	jmp    c0012230 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0012299:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001229d:	e8 3b dc ff ff       	call   c000fedd <Phys::allocatePage()>
c00122a2:	89 c5                	mov    ebp,eax
c00122a4:	e8 39 fb ff ff       	call   c0011de2 <Virt::getAKernelVAS()>
c00122a9:	83 ec 0c             	sub    esp,0xc
c00122ac:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00122b0:	6a 01                	push   0x1
c00122b2:	e8 84 f8 ff ff       	call   c0011b3b <Virt::allocateKernelVirtualPages(int)>
c00122b7:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00122be:	6a 01                	push   0x1
c00122c0:	50                   	push   eax
c00122c1:	55                   	push   ebp
c00122c2:	81 cd 07 04 00 00    	or     ebp,0x407
c00122c8:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00122cc:	51                   	push   ecx
c00122cd:	e8 26 02 00 00       	call   c00124f8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00122d2:	83 c4 1c             	add    esp,0x1c
c00122d5:	68 00 10 00 00       	push   0x1000
c00122da:	6a 00                	push   0x0
c00122dc:	50                   	push   eax
c00122dd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00122e1:	e8 92 e4 fe ff       	call   c0000778 <memset>
c00122e6:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00122ea:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00122ed:	e8 ab fb ff ff       	call   c0011e9d <Virt::freeKernelVirtualPages(unsigned long)>
c00122f2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00122f6:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00122f9:	83 c4 10             	add    esp,0x10
c00122fc:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c00122ff:	e9 41 ff ff ff       	jmp    c0012245 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c0012304 <VAS::allocatePages(int, int)>:
c0012304:	55                   	push   ebp
c0012305:	57                   	push   edi
c0012306:	56                   	push   esi
c0012307:	53                   	push   ebx
c0012308:	83 ec 1c             	sub    esp,0x1c
c001230b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001230f:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c0012314:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001231a:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012320:	83 e0 01             	and    eax,0x1
c0012323:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0012327:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001232b:	0f 85 cc 00 00 00    	jne    c00123fd <VAS::allocatePages(int, int)+0xf9>
c0012331:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012334:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012338:	85 c0                	test   eax,eax
c001233a:	0f 84 a1 00 00 00    	je     c00123e1 <VAS::allocatePages(int, int)+0xdd>
c0012340:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0012344:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012348:	c1 e6 0c             	shl    esi,0xc
c001234b:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c001234f:	85 c0                	test   eax,eax
c0012351:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0012354:	7e 33                	jle    c0012389 <VAS::allocatePages(int, int)+0x85>
c0012356:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001235a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001235e:	81 cd 00 04 00 00    	or     ebp,0x400
c0012364:	e8 74 db ff ff       	call   c000fedd <Phys::allocatePage()>
c0012369:	55                   	push   ebp
c001236a:	53                   	push   ebx
c001236b:	50                   	push   eax
c001236c:	57                   	push   edi
c001236d:	e8 92 fe ff ff       	call   c0012204 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012372:	83 c4 10             	add    esp,0x10
c0012375:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001237a:	74 03                	je     c001237f <VAS::allocatePages(int, int)+0x7b>
c001237c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001237f:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012385:	39 de                	cmp    esi,ebx
c0012387:	75 db                	jne    c0012364 <VAS::allocatePages(int, int)+0x60>
c0012389:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001238e:	75 12                	jne    c00123a2 <VAS::allocatePages(int, int)+0x9e>
c0012390:	0f 20 d8             	mov    eax,cr3
c0012393:	0f 22 d8             	mov    cr3,eax
c0012396:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001239a:	83 c4 1c             	add    esp,0x1c
c001239d:	5b                   	pop    ebx
c001239e:	5e                   	pop    esi
c001239f:	5f                   	pop    edi
c00123a0:	5d                   	pop    ebp
c00123a1:	c3                   	ret    
c00123a2:	c1 ee 0a             	shr    esi,0xa
c00123a5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00123a9:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c00123af:	c1 eb 0a             	shr    ebx,0xa
c00123b2:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c00123b8:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00123be:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00123c4:	39 c3                	cmp    ebx,eax
c00123c6:	77 ce                	ja     c0012396 <VAS::allocatePages(int, int)+0x92>
c00123c8:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00123cb:	81 c3 00 10 00 00    	add    ebx,0x1000
c00123d1:	39 d8                	cmp    eax,ebx
c00123d3:	73 f3                	jae    c00123c8 <VAS::allocatePages(int, int)+0xc4>
c00123d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00123d9:	83 c4 1c             	add    esp,0x1c
c00123dc:	5b                   	pop    ebx
c00123dd:	5e                   	pop    esi
c00123de:	5f                   	pop    edi
c00123df:	5d                   	pop    ebp
c00123e0:	c3                   	ret    
c00123e1:	83 ec 0c             	sub    esp,0xc
c00123e4:	68 5c a5 02 c0       	push   0xc002a55c
c00123e9:	e8 85 80 00 00       	call   c001a473 <Krnl::panic(char const*)>
c00123ee:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00123f1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00123f5:	83 c4 10             	add    esp,0x10
c00123f8:	e9 43 ff ff ff       	jmp    c0012340 <VAS::allocatePages(int, int)+0x3c>
c00123fd:	83 ec 0c             	sub    esp,0xc
c0012400:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012404:	e8 32 f7 ff ff       	call   c0011b3b <Virt::allocateKernelVirtualPages(int)>
c0012409:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001240d:	83 c4 10             	add    esp,0x10
c0012410:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0012415:	0f 87 9b 00 00 00    	ja     c00124b6 <VAS::allocatePages(int, int)+0x1b2>
c001241b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001241f:	85 d2                	test   edx,edx
c0012421:	7e 3c                	jle    c001245f <VAS::allocatePages(int, int)+0x15b>
c0012423:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012427:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001242b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001242f:	c1 e5 0c             	shl    ebp,0xc
c0012432:	81 ce 00 04 00 00    	or     esi,0x400
c0012438:	01 dd                	add    ebp,ebx
c001243a:	e8 9e da ff ff       	call   c000fedd <Phys::allocatePage()>
c001243f:	56                   	push   esi
c0012440:	53                   	push   ebx
c0012441:	50                   	push   eax
c0012442:	57                   	push   edi
c0012443:	e8 bc fd ff ff       	call   c0012204 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012448:	83 c4 10             	add    esp,0x10
c001244b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012450:	74 03                	je     c0012455 <VAS::allocatePages(int, int)+0x151>
c0012452:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012455:	81 c3 00 10 00 00    	add    ebx,0x1000
c001245b:	39 dd                	cmp    ebp,ebx
c001245d:	75 db                	jne    c001243a <VAS::allocatePages(int, int)+0x136>
c001245f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012464:	0f 84 26 ff ff ff    	je     c0012390 <VAS::allocatePages(int, int)+0x8c>
c001246a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001246e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012472:	89 d3                	mov    ebx,edx
c0012474:	c1 e0 0c             	shl    eax,0xc
c0012477:	c1 eb 0a             	shr    ebx,0xa
c001247a:	01 d0                	add    eax,edx
c001247c:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012482:	c1 e8 0a             	shr    eax,0xa
c0012485:	81 eb 00 00 40 00    	sub    ebx,0x400000
c001248b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012490:	2d 00 00 40 00       	sub    eax,0x400000
c0012495:	39 c3                	cmp    ebx,eax
c0012497:	0f 87 f9 fe ff ff    	ja     c0012396 <VAS::allocatePages(int, int)+0x92>
c001249d:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00124a0:	81 c3 00 10 00 00    	add    ebx,0x1000
c00124a6:	39 d8                	cmp    eax,ebx
c00124a8:	73 f3                	jae    c001249d <VAS::allocatePages(int, int)+0x199>
c00124aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00124ae:	83 c4 1c             	add    esp,0x1c
c00124b1:	5b                   	pop    ebx
c00124b2:	5e                   	pop    esi
c00124b3:	5f                   	pop    edi
c00124b4:	5d                   	pop    ebp
c00124b5:	c3                   	ret    
c00124b6:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c00124bb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00124c1:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c00124c8:	0f 84 4d ff ff ff    	je     c001241b <VAS::allocatePages(int, int)+0x117>
c00124ce:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c00124d6:	e9 40 ff ff ff       	jmp    c001241b <VAS::allocatePages(int, int)+0x117>
c00124db:	90                   	nop

c00124dc <VAS::setCPUSpecific(unsigned long)>:
c00124dc:	83 ec 0c             	sub    esp,0xc
c00124df:	6a 05                	push   0x5
c00124e1:	68 00 00 40 c2       	push   0xc2400000
c00124e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00124ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00124ee:	e8 11 fd ff ff       	call   c0012204 <VAS::mapPage(unsigned long, unsigned long, int)>
c00124f3:	83 c4 1c             	add    esp,0x1c
c00124f6:	c3                   	ret    
c00124f7:	90                   	nop

c00124f8 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c00124f8:	55                   	push   ebp
c00124f9:	57                   	push   edi
c00124fa:	56                   	push   esi
c00124fb:	53                   	push   ebx
c00124fc:	83 ec 1c             	sub    esp,0x1c
c00124ff:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c0012504:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012508:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001250e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012512:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012518:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001251c:	83 e0 01             	and    eax,0x1
c001251f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012523:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012527:	85 c0                	test   eax,eax
c0012529:	7e 39                	jle    c0012564 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c001252b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001252f:	89 f3                	mov    ebx,esi
c0012531:	c1 e0 0c             	shl    eax,0xc
c0012534:	01 f0                	add    eax,esi
c0012536:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001253a:	55                   	push   ebp
c001253b:	53                   	push   ebx
c001253c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012540:	29 f0                	sub    eax,esi
c0012542:	01 d8                	add    eax,ebx
c0012544:	50                   	push   eax
c0012545:	57                   	push   edi
c0012546:	e8 b9 fc ff ff       	call   c0012204 <VAS::mapPage(unsigned long, unsigned long, int)>
c001254b:	83 c4 10             	add    esp,0x10
c001254e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012553:	74 03                	je     c0012558 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0012555:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012558:	81 c3 00 10 00 00    	add    ebx,0x1000
c001255e:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0012562:	75 d6                	jne    c001253a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0012564:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012569:	75 10                	jne    c001257b <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c001256b:	0f 20 d8             	mov    eax,cr3
c001256e:	0f 22 d8             	mov    cr3,eax
c0012571:	83 c4 1c             	add    esp,0x1c
c0012574:	89 f0                	mov    eax,esi
c0012576:	5b                   	pop    ebx
c0012577:	5e                   	pop    esi
c0012578:	5f                   	pop    edi
c0012579:	5d                   	pop    ebp
c001257a:	c3                   	ret    
c001257b:	89 f3                	mov    ebx,esi
c001257d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012581:	c1 eb 0a             	shr    ebx,0xa
c0012584:	c1 e0 0c             	shl    eax,0xc
c0012587:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001258d:	01 f0                	add    eax,esi
c001258f:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012595:	c1 e8 0a             	shr    eax,0xa
c0012598:	25 00 f0 ff ff       	and    eax,0xfffff000
c001259d:	2d 00 00 40 00       	sub    eax,0x400000
c00125a2:	39 c3                	cmp    ebx,eax
c00125a4:	77 cb                	ja     c0012571 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c00125a6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00125a9:	81 c3 00 10 00 00    	add    ebx,0x1000
c00125af:	39 d8                	cmp    eax,ebx
c00125b1:	73 f3                	jae    c00125a6 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c00125b3:	83 c4 1c             	add    esp,0x1c
c00125b6:	89 f0                	mov    eax,esi
c00125b8:	5b                   	pop    ebx
c00125b9:	5e                   	pop    esi
c00125ba:	5f                   	pop    edi
c00125bb:	5d                   	pop    ebp
c00125bc:	c3                   	ret    
c00125bd:	90                   	nop

c00125be <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c00125be:	55                   	push   ebp
c00125bf:	57                   	push   edi
c00125c0:	56                   	push   esi
c00125c1:	53                   	push   ebx
c00125c2:	83 ec 1c             	sub    esp,0x1c
c00125c5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00125c9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00125cd:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c00125d1:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00125d5:	a9 ff 0f 00 00       	test   eax,0xfff
c00125da:	75 4a                	jne    c0012626 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c00125dc:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00125e0:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00125e3:	c1 eb 16             	shr    ebx,0x16
c00125e6:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c00125ed:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c00125f1:	74 4d                	je     c0012640 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c00125f3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00125f7:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00125fb:	c1 e8 0a             	shr    eax,0xa
c00125fe:	80 fa 01             	cmp    dl,0x1
c0012601:	19 d2                	sbb    edx,edx
c0012603:	c1 e3 0c             	shl    ebx,0xc
c0012606:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c001260a:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0012610:	25 fc 0f 00 00       	and    eax,0xffc
c0012615:	01 d8                	add    eax,ebx
c0012617:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c001261e:	83 c4 1c             	add    esp,0x1c
c0012621:	5b                   	pop    ebx
c0012622:	5e                   	pop    esi
c0012623:	5f                   	pop    edi
c0012624:	5d                   	pop    ebp
c0012625:	c3                   	ret    
c0012626:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001262a:	83 ec 0c             	sub    esp,0xc
c001262d:	68 88 a5 02 c0       	push   0xc002a588
c0012632:	e8 3c 7e 00 00       	call   c001a473 <Krnl::panic(char const*)>
c0012637:	83 c4 10             	add    esp,0x10
c001263a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001263e:	eb 9c                	jmp    c00125dc <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0012640:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012644:	e8 94 d8 ff ff       	call   c000fedd <Phys::allocatePage()>
c0012649:	89 c5                	mov    ebp,eax
c001264b:	e8 92 f7 ff ff       	call   c0011de2 <Virt::getAKernelVAS()>
c0012650:	83 ec 0c             	sub    esp,0xc
c0012653:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012657:	6a 01                	push   0x1
c0012659:	e8 dd f4 ff ff       	call   c0011b3b <Virt::allocateKernelVirtualPages(int)>
c001265e:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012665:	6a 01                	push   0x1
c0012667:	50                   	push   eax
c0012668:	55                   	push   ebp
c0012669:	81 cd 07 04 00 00    	or     ebp,0x407
c001266f:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012673:	51                   	push   ecx
c0012674:	e8 7f fe ff ff       	call   c00124f8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012679:	83 c4 1c             	add    esp,0x1c
c001267c:	68 00 10 00 00       	push   0x1000
c0012681:	6a 00                	push   0x0
c0012683:	50                   	push   eax
c0012684:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012688:	e8 eb e0 fe ff       	call   c0000778 <memset>
c001268d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012691:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012694:	e8 04 f8 ff ff       	call   c0011e9d <Virt::freeKernelVirtualPages(unsigned long)>
c0012699:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001269c:	83 c4 10             	add    esp,0x10
c001269f:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c00126a2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00126a6:	e9 48 ff ff ff       	jmp    c00125f3 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c00126ab:	90                   	nop

c00126ac <VAS::VAS(bool)>:
c00126ac:	53                   	push   ebx
c00126ad:	83 ec 28             	sub    esp,0x28
c00126b0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00126b4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00126b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126bc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00126c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126c7:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00126ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126d2:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c00126d6:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c00126d9:	e8 ff d7 ff ff       	call   c000fedd <Phys::allocatePage()>
c00126de:	89 c2                	mov    edx,eax
c00126e0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126e4:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00126e7:	e8 f6 f6 ff ff       	call   c0011de2 <Virt::getAKernelVAS()>
c00126ec:	89 c3                	mov    ebx,eax
c00126ee:	83 ec 0c             	sub    esp,0xc
c00126f1:	6a 01                	push   0x1
c00126f3:	e8 43 f4 ff ff       	call   c0011b3b <Virt::allocateKernelVirtualPages(int)>
c00126f8:	83 c4 10             	add    esp,0x10
c00126fb:	89 c2                	mov    edx,eax
c00126fd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012701:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012704:	83 ec 0c             	sub    esp,0xc
c0012707:	6a 03                	push   0x3
c0012709:	6a 01                	push   0x1
c001270b:	52                   	push   edx
c001270c:	50                   	push   eax
c001270d:	53                   	push   ebx
c001270e:	e8 e5 fd ff ff       	call   c00124f8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012713:	83 c4 20             	add    esp,0x20
c0012716:	89 c2                	mov    edx,eax
c0012718:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001271c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001271f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012727:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c001272f:	7f 1c                	jg     c001274d <VAS::VAS(bool)+0xa1>
c0012731:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012735:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012738:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001273c:	c1 e2 02             	shl    edx,0x2
c001273f:	01 d0                	add    eax,edx
c0012741:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012747:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001274b:	eb da                	jmp    c0012727 <VAS::VAS(bool)+0x7b>
c001274d:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0012755:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c001275d:	7f 7a                	jg     c00127d9 <VAS::VAS(bool)+0x12d>
c001275f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012763:	2d 00 02 00 00       	sub    eax,0x200
c0012768:	c1 e0 0c             	shl    eax,0xc
c001276b:	83 c8 03             	or     eax,0x3
c001276e:	89 c2                	mov    edx,eax
c0012770:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c0012775:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001277b:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012781:	83 e0 10             	and    eax,0x10
c0012784:	84 c0                	test   al,al
c0012786:	74 07                	je     c001278f <VAS::VAS(bool)+0xe3>
c0012788:	b8 00 01 00 00       	mov    eax,0x100
c001278d:	eb 05                	jmp    c0012794 <VAS::VAS(bool)+0xe8>
c001278f:	b8 00 00 00 00       	mov    eax,0x0
c0012794:	09 d0                	or     eax,edx
c0012796:	89 c1                	mov    ecx,eax
c0012798:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001279c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001279f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00127a3:	c1 e2 02             	shl    edx,0x2
c00127a6:	01 d0                	add    eax,edx
c00127a8:	89 ca                	mov    edx,ecx
c00127aa:	89 10                	mov    DWORD PTR [eax],edx
c00127ac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00127b0:	2d 40 03 00 00       	sub    eax,0x340
c00127b5:	83 f8 7f             	cmp    eax,0x7f
c00127b8:	77 16                	ja     c00127d0 <VAS::VAS(bool)+0x124>
c00127ba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127be:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00127c1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00127c5:	c1 e2 02             	shl    edx,0x2
c00127c8:	01 d0                	add    eax,edx
c00127ca:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00127d0:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00127d4:	e9 7c ff ff ff       	jmp    c0012755 <VAS::VAS(bool)+0xa9>
c00127d9:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c00127de:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00127e4:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00127ea:	83 e0 10             	and    eax,0x10
c00127ed:	84 c0                	test   al,al
c00127ef:	74 07                	je     c00127f8 <VAS::VAS(bool)+0x14c>
c00127f1:	b8 03 41 00 00       	mov    eax,0x4103
c00127f6:	eb 05                	jmp    c00127fd <VAS::VAS(bool)+0x151>
c00127f8:	b8 03 40 00 00       	mov    eax,0x4003
c00127fd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012801:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0012804:	81 c2 20 0c 00 00    	add    edx,0xc20
c001280a:	89 02                	mov    DWORD PTR [edx],eax
c001280c:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c0012811:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012817:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001281d:	83 ec 08             	sub    esp,0x8
c0012820:	50                   	push   eax
c0012821:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012825:	e8 b2 fc ff ff       	call   c00124dc <VAS::setCPUSpecific(unsigned long)>
c001282a:	83 c4 10             	add    esp,0x10
c001282d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012831:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012834:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c0012839:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001283f:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012845:	83 e0 10             	and    eax,0x10
c0012848:	84 c0                	test   al,al
c001284a:	74 07                	je     c0012853 <VAS::VAS(bool)+0x1a7>
c001284c:	b8 00 01 00 00       	mov    eax,0x100
c0012851:	eb 05                	jmp    c0012858 <VAS::VAS(bool)+0x1ac>
c0012853:	b8 00 00 00 00       	mov    eax,0x0
c0012858:	09 c2                	or     edx,eax
c001285a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001285e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012861:	05 fc 0f 00 00       	add    eax,0xffc
c0012866:	83 ca 03             	or     edx,0x3
c0012869:	89 10                	mov    DWORD PTR [eax],edx
c001286b:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c0012870:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012876:	83 ec 0c             	sub    esp,0xc
c0012879:	50                   	push   eax
c001287a:	e8 2b 1c 00 00       	call   c00144aa <Device::getName()>
c001287f:	83 c4 10             	add    esp,0x10
c0012882:	83 ec 08             	sub    esp,0x8
c0012885:	68 6d a6 02 c0       	push   0xc002a66d
c001288a:	50                   	push   eax
c001288b:	e8 30 e0 fe ff       	call   c00008c0 <strcmp>
c0012890:	83 c4 10             	add    esp,0x10
c0012893:	85 c0                	test   eax,eax
c0012895:	0f 94 c0             	sete   al
c0012898:	84 c0                	test   al,al
c001289a:	74 70                	je     c001290c <VAS::VAS(bool)+0x260>
c001289c:	e8 af b3 00 00       	call   c001dc50 <disableIRQs()>
c00128a1:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c00128a6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128ac:	05 7c 09 00 00       	add    eax,0x97c
c00128b1:	83 ec 0c             	sub    esp,0xc
c00128b4:	50                   	push   eax
c00128b5:	e8 02 ca ff ff       	call   c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00128ba:	83 c4 10             	add    esp,0x10
c00128bd:	25 00 f0 ff ff       	and    eax,0xfffff000
c00128c2:	89 c3                	mov    ebx,eax
c00128c4:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c00128c9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128cf:	05 7c 09 00 00       	add    eax,0x97c
c00128d4:	83 ec 0c             	sub    esp,0xc
c00128d7:	50                   	push   eax
c00128d8:	e8 df c9 ff ff       	call   c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00128dd:	83 c4 10             	add    esp,0x10
c00128e0:	83 ec 08             	sub    esp,0x8
c00128e3:	50                   	push   eax
c00128e4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00128e8:	e8 91 f5 ff ff       	call   c0011e7e <VAS::getPageTableEntry(unsigned long)>
c00128ed:	83 c4 10             	add    esp,0x10
c00128f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00128f2:	25 00 f0 ff ff       	and    eax,0xfffff000
c00128f7:	6a 11                	push   0x11
c00128f9:	53                   	push   ebx
c00128fa:	50                   	push   eax
c00128fb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00128ff:	e8 00 f9 ff ff       	call   c0012204 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012904:	83 c4 10             	add    esp,0x10
c0012907:	e8 52 b3 00 00       	call   c001dc5e <enableIRQs()>
c001290c:	90                   	nop
c001290d:	83 c4 28             	add    esp,0x28
c0012910:	5b                   	pop    ebx
c0012911:	c3                   	ret    

c0012912 <VAS::evict(unsigned long)>:
c0012912:	55                   	push   ebp
c0012913:	57                   	push   edi
c0012914:	56                   	push   esi
c0012915:	53                   	push   ebx
c0012916:	83 ec 14             	sub    esp,0x14
c0012919:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001291d:	55                   	push   ebp
c001291e:	68 7b a6 02 c0       	push   0xc002a67b
c0012923:	e8 70 04 00 00       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0012928:	e8 4f f3 ff ff       	call   c0011c7c <Virt::allocateSwapfilePage()>
c001292d:	83 c4 10             	add    esp,0x10
c0012930:	89 c7                	mov    edi,eax
c0012932:	a1 ec d1 02 c0       	mov    eax,ds:0xc002d1ec
c0012937:	85 c0                	test   eax,eax
c0012939:	7e 3d                	jle    c0012978 <VAS::evict(unsigned long)+0x66>
c001293b:	89 ee                	mov    esi,ebp
c001293d:	31 db                	xor    ebx,ebx
c001293f:	83 ec 0c             	sub    esp,0xc
c0012942:	57                   	push   edi
c0012943:	e8 22 f3 ff ff       	call   c0011c6a <Virt::swapIDToSector(unsigned long)>
c0012948:	89 34 24             	mov    DWORD PTR [esp],esi
c001294b:	01 d8                	add    eax,ebx
c001294d:	6a 01                	push   0x1
c001294f:	31 d2                	xor    edx,edx
c0012951:	43                   	inc    ebx
c0012952:	52                   	push   edx
c0012953:	81 c6 00 02 00 00    	add    esi,0x200
c0012959:	50                   	push   eax
c001295a:	0f be 05 f8 d1 02 c0 	movsx  eax,BYTE PTR ds:0xc002d1f8
c0012961:	ff 34 85 5c e7 02 c0 	push   DWORD PTR [eax*4-0x3ffd18a4]
c0012968:	e8 dd 3c 00 00       	call   c001664a <LogicalDisk::write(unsigned long long, int, void*)>
c001296d:	83 c4 20             	add    esp,0x20
c0012970:	39 1d ec d1 02 c0    	cmp    DWORD PTR ds:0xc002d1ec,ebx
c0012976:	7f c7                	jg     c001293f <VAS::evict(unsigned long)+0x2d>
c0012978:	83 ec 08             	sub    esp,0x8
c001297b:	c1 e7 0b             	shl    edi,0xb
c001297e:	55                   	push   ebp
c001297f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012983:	e8 f6 f4 ff ff       	call   c0011e7e <VAS::getPageTableEntry(unsigned long)>
c0012988:	8b 10                	mov    edx,DWORD PTR [eax]
c001298a:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012990:	09 d7                	or     edi,edx
c0012992:	89 38                	mov    DWORD PTR [eax],edi
c0012994:	ff 05 c4 e3 02 c0    	inc    DWORD PTR ds:0xc002e3c4
c001299a:	0f 20 d8             	mov    eax,cr3
c001299d:	0f 22 d8             	mov    cr3,eax
c00129a0:	83 c4 1c             	add    esp,0x1c
c00129a3:	5b                   	pop    ebx
c00129a4:	5e                   	pop    esi
c00129a5:	5f                   	pop    edi
c00129a6:	5d                   	pop    ebp
c00129a7:	c3                   	ret    

c00129a8 <VAS::tryLoadBackOffDisk(unsigned long)>:
c00129a8:	57                   	push   edi
c00129a9:	56                   	push   esi
c00129aa:	53                   	push   ebx
c00129ab:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00129af:	83 ec 08             	sub    esp,0x8
c00129b2:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00129b8:	53                   	push   ebx
c00129b9:	68 8a a6 02 c0       	push   0xc002a68a
c00129be:	e8 d5 03 00 00       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c00129c3:	83 c4 10             	add    esp,0x10
c00129c6:	85 db                	test   ebx,ebx
c00129c8:	74 20                	je     c00129ea <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c00129ca:	83 ec 08             	sub    esp,0x8
c00129cd:	53                   	push   ebx
c00129ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00129d2:	e8 a7 f4 ff ff       	call   c0011e7e <VAS::getPageTableEntry(unsigned long)>
c00129d7:	83 c4 10             	add    esp,0x10
c00129da:	89 c6                	mov    esi,eax
c00129dc:	85 c0                	test   eax,eax
c00129de:	74 0a                	je     c00129ea <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c00129e0:	8b 38                	mov    edi,DWORD PTR [eax]
c00129e2:	f7 c7 01 00 00 00    	test   edi,0x1
c00129e8:	74 06                	je     c00129f0 <VAS::tryLoadBackOffDisk(unsigned long)+0x48>
c00129ea:	31 c0                	xor    eax,eax
c00129ec:	5b                   	pop    ebx
c00129ed:	5e                   	pop    esi
c00129ee:	5f                   	pop    edi
c00129ef:	c3                   	ret    
c00129f0:	e8 e8 d4 ff ff       	call   c000fedd <Phys::allocatePage()>
c00129f5:	c1 ef 0b             	shr    edi,0xb
c00129f8:	8b 16                	mov    edx,DWORD PTR [esi]
c00129fa:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012a00:	09 c2                	or     edx,eax
c0012a02:	81 ca 01 08 00 00    	or     edx,0x801
c0012a08:	89 16                	mov    DWORD PTR [esi],edx
c0012a0a:	0f 20 d8             	mov    eax,cr3
c0012a0d:	0f 22 d8             	mov    cr3,eax
c0012a10:	a1 ec d1 02 c0       	mov    eax,ds:0xc002d1ec
c0012a15:	85 c0                	test   eax,eax
c0012a17:	7e 3b                	jle    c0012a54 <VAS::tryLoadBackOffDisk(unsigned long)+0xac>
c0012a19:	31 f6                	xor    esi,esi
c0012a1b:	83 ec 0c             	sub    esp,0xc
c0012a1e:	57                   	push   edi
c0012a1f:	e8 46 f2 ff ff       	call   c0011c6a <Virt::swapIDToSector(unsigned long)>
c0012a24:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012a27:	01 f0                	add    eax,esi
c0012a29:	6a 01                	push   0x1
c0012a2b:	31 d2                	xor    edx,edx
c0012a2d:	46                   	inc    esi
c0012a2e:	52                   	push   edx
c0012a2f:	81 c3 00 02 00 00    	add    ebx,0x200
c0012a35:	50                   	push   eax
c0012a36:	0f be 05 f8 d1 02 c0 	movsx  eax,BYTE PTR ds:0xc002d1f8
c0012a3d:	ff 34 85 5c e7 02 c0 	push   DWORD PTR [eax*4-0x3ffd18a4]
c0012a44:	e8 95 3b 00 00       	call   c00165de <LogicalDisk::read(unsigned long long, int, void*)>
c0012a49:	83 c4 20             	add    esp,0x20
c0012a4c:	39 35 ec d1 02 c0    	cmp    DWORD PTR ds:0xc002d1ec,esi
c0012a52:	7f c7                	jg     c0012a1b <VAS::tryLoadBackOffDisk(unsigned long)+0x73>
c0012a54:	83 ec 0c             	sub    esp,0xc
c0012a57:	ff 0d c4 e3 02 c0    	dec    DWORD PTR ds:0xc002e3c4
c0012a5d:	57                   	push   edi
c0012a5e:	e8 e9 f1 ff ff       	call   c0011c4c <Virt::freeSwapfilePage(unsigned long)>
c0012a63:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012a67:	83 c4 10             	add    esp,0x10
c0012a6a:	25 ff 0f 00 00       	and    eax,0xfff
c0012a6f:	3d e0 0f 00 00       	cmp    eax,0xfe0
c0012a74:	77 07                	ja     c0012a7d <VAS::tryLoadBackOffDisk(unsigned long)+0xd5>
c0012a76:	b0 01                	mov    al,0x1
c0012a78:	e9 6f ff ff ff       	jmp    c00129ec <VAS::tryLoadBackOffDisk(unsigned long)+0x44>
c0012a7d:	83 ec 0c             	sub    esp,0xc
c0012a80:	68 98 a6 02 c0       	push   0xc002a698
c0012a85:	e8 0e 03 00 00       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0012a8a:	83 c4 10             	add    esp,0x10
c0012a8d:	b0 01                	mov    al,0x1
c0012a8f:	e9 58 ff ff ff       	jmp    c00129ec <VAS::tryLoadBackOffDisk(unsigned long)+0x44>

c0012a94 <VAS::scanForEviction()>:
c0012a94:	55                   	push   ebp
c0012a95:	57                   	push   edi
c0012a96:	31 ff                	xor    edi,edi
c0012a98:	56                   	push   esi
c0012a99:	31 f6                	xor    esi,esi
c0012a9b:	53                   	push   ebx
c0012a9c:	83 ec 1c             	sub    esp,0x1c
c0012a9f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0012aa3:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0012aa6:	89 d8                	mov    eax,ebx
c0012aa8:	39 c3                	cmp    ebx,eax
c0012aaa:	74 72                	je     c0012b1e <VAS::scanForEviction()+0x8a>
c0012aac:	a9 ff ff 3f 00       	test   eax,0x3fffff
c0012ab1:	75 0e                	jne    c0012ac1 <VAS::scanForEviction()+0x2d>
c0012ab3:	89 c1                	mov    ecx,eax
c0012ab5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0012ab8:	c1 e9 16             	shr    ecx,0x16
c0012abb:	f6 04 8a 01          	test   BYTE PTR [edx+ecx*4],0x1
c0012abf:	74 51                	je     c0012b12 <VAS::scanForEviction()+0x7e>
c0012ac1:	50                   	push   eax
c0012ac2:	55                   	push   ebp
c0012ac3:	e8 b6 f3 ff ff       	call   c0011e7e <VAS::getPageTableEntry(unsigned long)>
c0012ac8:	5a                   	pop    edx
c0012ac9:	8b 10                	mov    edx,DWORD PTR [eax]
c0012acb:	59                   	pop    ecx
c0012acc:	89 d1                	mov    ecx,edx
c0012ace:	81 e1 00 0c 00 00    	and    ecx,0xc00
c0012ad4:	81 f9 00 0c 00 00    	cmp    ecx,0xc00
c0012ada:	74 54                	je     c0012b30 <VAS::scanForEviction()+0x9c>
c0012adc:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0012adf:	05 00 10 00 00       	add    eax,0x1000
c0012ae4:	3d ff ff bf ff       	cmp    eax,0xffbfffff
c0012ae9:	76 3d                	jbe    c0012b28 <VAS::scanForEviction()+0x94>
c0012aeb:	c7 45 10 00 00 00 00 	mov    DWORD PTR [ebp+0x10],0x0
c0012af2:	85 db                	test   ebx,ebx
c0012af4:	74 79                	je     c0012b6f <VAS::scanForEviction()+0xdb>
c0012af6:	31 c0                	xor    eax,eax
c0012af8:	be 01 00 00 00       	mov    esi,0x1
c0012afd:	a9 ff ff 3f 00       	test   eax,0x3fffff
c0012b02:	75 bd                	jne    c0012ac1 <VAS::scanForEviction()+0x2d>
c0012b04:	89 c1                	mov    ecx,eax
c0012b06:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0012b09:	c1 e9 16             	shr    ecx,0x16
c0012b0c:	f6 04 8a 01          	test   BYTE PTR [edx+ecx*4],0x1
c0012b10:	75 af                	jne    c0012ac1 <VAS::scanForEviction()+0x2d>
c0012b12:	05 00 00 40 00       	add    eax,0x400000
c0012b17:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0012b1a:	39 c3                	cmp    ebx,eax
c0012b1c:	75 8e                	jne    c0012aac <VAS::scanForEviction()+0x18>
c0012b1e:	89 f1                	mov    ecx,esi
c0012b20:	84 c9                	test   cl,cl
c0012b22:	74 88                	je     c0012aac <VAS::scanForEviction()+0x18>
c0012b24:	89 f7                	mov    edi,esi
c0012b26:	eb 84                	jmp    c0012aac <VAS::scanForEviction()+0x18>
c0012b28:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0012b2b:	e9 78 ff ff ff       	jmp    c0012aa8 <VAS::scanForEviction()+0x14>
c0012b30:	f6 c2 01             	test   dl,0x1
c0012b33:	74 a7                	je     c0012adc <VAS::scanForEviction()+0x48>
c0012b35:	f6 c2 40             	test   dl,0x40
c0012b38:	74 0b                	je     c0012b45 <VAS::scanForEviction()+0xb1>
c0012b3a:	83 e2 bf             	and    edx,0xffffffbf
c0012b3d:	89 10                	mov    DWORD PTR [eax],edx
c0012b3f:	89 f8                	mov    eax,edi
c0012b41:	84 c0                	test   al,al
c0012b43:	74 97                	je     c0012adc <VAS::scanForEviction()+0x48>
c0012b45:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012b49:	83 ec 08             	sub    esp,0x8
c0012b4c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0012b4f:	55                   	push   ebp
c0012b50:	e8 bd fd ff ff       	call   c0012912 <VAS::evict(unsigned long)>
c0012b55:	81 45 10 00 10 00 00 	add    DWORD PTR [ebp+0x10],0x1000
c0012b5c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012b60:	83 c4 2c             	add    esp,0x2c
c0012b63:	89 d0                	mov    eax,edx
c0012b65:	5b                   	pop    ebx
c0012b66:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012b6b:	5e                   	pop    esi
c0012b6c:	5f                   	pop    edi
c0012b6d:	5d                   	pop    ebp
c0012b6e:	c3                   	ret    
c0012b6f:	bf 01 00 00 00       	mov    edi,0x1
c0012b74:	eb 80                	jmp    c0012af6 <VAS::scanForEviction()+0x62>

c0012b76 <mapVASFirstTime>:
c0012b76:	55                   	push   ebp
c0012b77:	57                   	push   edi
c0012b78:	56                   	push   esi
c0012b79:	53                   	push   ebx
c0012b7a:	83 ec 0c             	sub    esp,0xc
c0012b7d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012b82:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012b85:	4a                   	dec    edx
c0012b86:	0f 84 8e 00 00 00    	je     c0012c1a <mapVASFirstTime+0xa4>
c0012b8c:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012b8f:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012b92:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012b97:	c1 e5 15             	shl    ebp,0x15
c0012b9a:	be 00 90 e7 01       	mov    esi,0x1e79000
c0012b9f:	8b ba 32 19 00 00    	mov    edi,DWORD PTR [edx+0x1932]
c0012ba5:	29 eb                	sub    ebx,ebp
c0012ba7:	29 ee                	sub    esi,ebp
c0012ba9:	e8 2f d3 ff ff       	call   c000fedd <Phys::allocatePage()>
c0012bae:	83 ec 0c             	sub    esp,0xc
c0012bb1:	68 03 04 00 00       	push   0x403
c0012bb6:	6a 01                	push   0x1
c0012bb8:	53                   	push   ebx
c0012bb9:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012bbf:	50                   	push   eax
c0012bc0:	57                   	push   edi
c0012bc1:	e8 32 f9 ff ff       	call   c00124f8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012bc6:	83 c4 20             	add    esp,0x20
c0012bc9:	39 f3                	cmp    ebx,esi
c0012bcb:	75 dc                	jne    c0012ba9 <mapVASFirstTime+0x33>
c0012bcd:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012bd2:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012bd7:	29 ee                	sub    esi,ebp
c0012bd9:	29 e8                	sub    eax,ebp
c0012bdb:	89 c5                	mov    ebp,eax
c0012bdd:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012be1:	19 db                	sbb    ebx,ebx
c0012be3:	e8 f5 d2 ff ff       	call   c000fedd <Phys::allocatePage()>
c0012be8:	83 e3 04             	and    ebx,0x4
c0012beb:	83 ec 0c             	sub    esp,0xc
c0012bee:	81 c3 03 04 00 00    	add    ebx,0x403
c0012bf4:	53                   	push   ebx
c0012bf5:	6a 01                	push   0x1
c0012bf7:	56                   	push   esi
c0012bf8:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012bfe:	50                   	push   eax
c0012bff:	57                   	push   edi
c0012c00:	e8 f3 f8 ff ff       	call   c00124f8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012c05:	83 c4 20             	add    esp,0x20
c0012c08:	39 f5                	cmp    ebp,esi
c0012c0a:	75 d1                	jne    c0012bdd <mapVASFirstTime+0x67>
c0012c0c:	0f 20 d8             	mov    eax,cr3
c0012c0f:	0f 22 d8             	mov    cr3,eax
c0012c12:	83 c4 0c             	add    esp,0xc
c0012c15:	5b                   	pop    ebx
c0012c16:	5e                   	pop    esi
c0012c17:	5f                   	pop    edi
c0012c18:	5d                   	pop    ebp
c0012c19:	c3                   	ret    
c0012c1a:	83 ec 0c             	sub    esp,0xc
c0012c1d:	68 ac a6 02 c0       	push   0xc002a6ac
c0012c22:	e8 71 01 00 00       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0012c27:	83 c4 10             	add    esp,0x10
c0012c2a:	83 c4 0c             	add    esp,0xc
c0012c2d:	5b                   	pop    ebx
c0012c2e:	5e                   	pop    esi
c0012c2f:	5f                   	pop    edi
c0012c30:	5d                   	pop    ebp
c0012c31:	c3                   	ret    

c0012c32 <__cxa_atexit>:
c0012c32:	31 c0                	xor    eax,eax
c0012c34:	c3                   	ret    

c0012c35 <__cxa_finalize>:
c0012c35:	c3                   	ret    

c0012c36 <__stack_chk_fail>:
c0012c36:	55                   	push   ebp
c0012c37:	89 e5                	mov    ebp,esp
c0012c39:	83 ec 14             	sub    esp,0x14
c0012c3c:	68 c5 a6 02 c0       	push   0xc002a6c5
c0012c41:	e8 52 01 00 00       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0012c46:	58                   	pop    eax
c0012c47:	5a                   	pop    edx
c0012c48:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012c4b:	68 15 a7 02 c0       	push   0xc002a715
c0012c50:	e8 43 01 00 00       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0012c55:	59                   	pop    ecx
c0012c56:	58                   	pop    eax
c0012c57:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012c5a:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012c5d:	68 15 a7 02 c0       	push   0xc002a715
c0012c62:	e8 31 01 00 00       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0012c67:	5a                   	pop    edx
c0012c68:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012c6b:	59                   	pop    ecx
c0012c6c:	8b 00                	mov    eax,DWORD PTR [eax]
c0012c6e:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012c71:	68 15 a7 02 c0       	push   0xc002a715
c0012c76:	e8 1d 01 00 00       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0012c7b:	5a                   	pop    edx
c0012c7c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012c7f:	59                   	pop    ecx
c0012c80:	8b 00                	mov    eax,DWORD PTR [eax]
c0012c82:	8b 00                	mov    eax,DWORD PTR [eax]
c0012c84:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012c87:	68 15 a7 02 c0       	push   0xc002a715
c0012c8c:	e8 07 01 00 00       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0012c91:	c7 04 24 1d a7 02 c0 	mov    DWORD PTR [esp],0xc002a71d
c0012c98:	e8 d6 77 00 00       	call   c001a473 <Krnl::panic(char const*)>
c0012c9d:	83 c4 10             	add    esp,0x10
c0012ca0:	c9                   	leave  
c0012ca1:	c3                   	ret    

c0012ca2 <__cxa_pure_virtual>:
c0012ca2:	83 ec 18             	sub    esp,0x18
c0012ca5:	68 35 a7 02 c0       	push   0xc002a735
c0012caa:	e8 c4 77 00 00       	call   c001a473 <Krnl::panic(char const*)>
c0012caf:	83 c4 1c             	add    esp,0x1c
c0012cb2:	c3                   	ret    

c0012cb3 <operator new[](unsigned long)>:
c0012cb3:	e9 88 cb ff ff       	jmp    c000f840 <malloc>

c0012cb8 <operator delete(void*, unsigned long)>:
c0012cb8:	e9 a3 cb ff ff       	jmp    c000f860 <rfree>

c0012cbd <operator delete[](void*)>:
c0012cbd:	e9 9e cb ff ff       	jmp    c000f860 <rfree>

c0012cc2 <operator delete[](void*, unsigned long)>:
c0012cc2:	e9 99 cb ff ff       	jmp    c000f860 <rfree>

c0012cc7 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012cc7:	57                   	push   edi
c0012cc8:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012ccd:	56                   	push   esi
c0012cce:	be 48 a7 02 c0       	mov    esi,0xc002a748
c0012cd3:	53                   	push   ebx
c0012cd4:	83 ec 40             	sub    esp,0x40
c0012cd7:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012cdb:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012cdf:	fc                   	cld    
c0012ce0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012ce2:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012ce6:	83 f9 3e             	cmp    ecx,0x3e
c0012ce9:	7e 05                	jle    c0012cf0 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012ceb:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012cf0:	89 df                	mov    edi,ebx
c0012cf2:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012cf6:	eb 02                	jmp    c0012cfa <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012cf8:	89 c7                	mov    edi,eax
c0012cfa:	31 d2                	xor    edx,edx
c0012cfc:	46                   	inc    esi
c0012cfd:	89 f8                	mov    eax,edi
c0012cff:	f7 f1                	div    ecx
c0012d01:	39 cf                	cmp    edi,ecx
c0012d03:	73 f3                	jae    c0012cf8 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012d05:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012d08:	eb 02                	jmp    c0012d0c <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012d0a:	89 c3                	mov    ebx,eax
c0012d0c:	31 d2                	xor    edx,edx
c0012d0e:	4e                   	dec    esi
c0012d0f:	89 d8                	mov    eax,ebx
c0012d11:	f7 f1                	div    ecx
c0012d13:	39 cb                	cmp    ebx,ecx
c0012d15:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012d19:	88 16                	mov    BYTE PTR [esi],dl
c0012d1b:	73 ed                	jae    c0012d0a <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012d1d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012d21:	83 c4 40             	add    esp,0x40
c0012d24:	5b                   	pop    ebx
c0012d25:	5e                   	pop    esi
c0012d26:	5f                   	pop    edi
c0012d27:	c3                   	ret    

c0012d28 <Dbg::logc(char)>:
c0012d28:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012d2c:	ba fd 03 00 00       	mov    edx,0x3fd
c0012d31:	ec                   	in     al,dx
c0012d32:	a8 20                	test   al,0x20
c0012d34:	74 fb                	je     c0012d31 <Dbg::logc(char)+0x9>
c0012d36:	ba f8 03 00 00       	mov    edx,0x3f8
c0012d3b:	88 c8                	mov    al,cl
c0012d3d:	ee                   	out    dx,al
c0012d3e:	c3                   	ret    

c0012d3f <Dbg::logs(char*)>:
c0012d3f:	53                   	push   ebx
c0012d40:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012d44:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012d47:	84 c0                	test   al,al
c0012d49:	74 0f                	je     c0012d5a <Dbg::logs(char*)+0x1b>
c0012d4b:	50                   	push   eax
c0012d4c:	43                   	inc    ebx
c0012d4d:	e8 d6 ff ff ff       	call   c0012d28 <Dbg::logc(char)>
c0012d52:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012d55:	5a                   	pop    edx
c0012d56:	84 c0                	test   al,al
c0012d58:	75 f1                	jne    c0012d4b <Dbg::logs(char*)+0xc>
c0012d5a:	5b                   	pop    ebx
c0012d5b:	c3                   	ret    

c0012d5c <Dbg::logWriteInt(unsigned int)>:
c0012d5c:	83 ec 10             	sub    esp,0x10
c0012d5f:	6a 0a                	push   0xa
c0012d61:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012d65:	50                   	push   eax
c0012d66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d6a:	e8 58 ff ff ff       	call   c0012cc7 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012d6f:	50                   	push   eax
c0012d70:	e8 ca ff ff ff       	call   c0012d3f <Dbg::logs(char*)>
c0012d75:	83 c4 20             	add    esp,0x20
c0012d78:	c3                   	ret    

c0012d79 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012d79:	83 ec 10             	sub    esp,0x10
c0012d7c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012d80:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012d84:	50                   	push   eax
c0012d85:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d89:	e8 39 ff ff ff       	call   c0012cc7 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012d8e:	50                   	push   eax
c0012d8f:	e8 ab ff ff ff       	call   c0012d3f <Dbg::logs(char*)>
c0012d94:	83 c4 20             	add    esp,0x20
c0012d97:	c3                   	ret    

c0012d98 <Dbg::kprintf(char const*, ...)>:
c0012d98:	55                   	push   ebp
c0012d99:	57                   	push   edi
c0012d9a:	56                   	push   esi
c0012d9b:	53                   	push   ebx
c0012d9c:	83 ec 0c             	sub    esp,0xc
c0012d9f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012da3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012da7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012dab:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012dae:	84 c0                	test   al,al
c0012db0:	74 4a                	je     c0012dfc <Dbg::kprintf(char const*, ...)+0x64>
c0012db2:	31 db                	xor    ebx,ebx
c0012db4:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012db7:	3c 25                	cmp    al,0x25
c0012db9:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012dbc:	0f 85 e4 00 00 00    	jne    c0012ea6 <Dbg::kprintf(char const*, ...)+0x10e>
c0012dc2:	83 c3 02             	add    ebx,0x2
c0012dc5:	8a 07                	mov    al,BYTE PTR [edi]
c0012dc7:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012dca:	83 e8 25             	sub    eax,0x25
c0012dcd:	3c 53                	cmp    al,0x53
c0012dcf:	0f 87 ba 00 00 00    	ja     c0012e8f <Dbg::kprintf(char const*, ...)+0xf7>
c0012dd5:	0f b6 c0             	movzx  eax,al
c0012dd8:	ff 24 85 88 a7 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd5878]
c0012ddf:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012de3:	89 c8                	mov    eax,ecx
c0012de5:	83 c1 04             	add    ecx,0x4
c0012de8:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012dec:	ff 30                	push   DWORD PTR [eax]
c0012dee:	e8 4c ff ff ff       	call   c0012d3f <Dbg::logs(char*)>
c0012df3:	58                   	pop    eax
c0012df4:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012df8:	84 c0                	test   al,al
c0012dfa:	75 b8                	jne    c0012db4 <Dbg::kprintf(char const*, ...)+0x1c>
c0012dfc:	83 c4 0c             	add    esp,0xc
c0012dff:	5b                   	pop    ebx
c0012e00:	5e                   	pop    esi
c0012e01:	5f                   	pop    edi
c0012e02:	5d                   	pop    ebp
c0012e03:	c3                   	ret    
c0012e04:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012e08:	89 d0                	mov    eax,edx
c0012e0a:	83 c2 04             	add    edx,0x4
c0012e0d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012e11:	ff 30                	push   DWORD PTR [eax]
c0012e13:	e8 44 ff ff ff       	call   c0012d5c <Dbg::logWriteInt(unsigned int)>
c0012e18:	58                   	pop    eax
c0012e19:	eb d9                	jmp    c0012df4 <Dbg::kprintf(char const*, ...)+0x5c>
c0012e1b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012e1f:	89 d0                	mov    eax,edx
c0012e21:	83 c2 04             	add    edx,0x4
c0012e24:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012e27:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012e2b:	50                   	push   eax
c0012e2c:	e8 f7 fe ff ff       	call   c0012d28 <Dbg::logc(char)>
c0012e31:	58                   	pop    eax
c0012e32:	eb c0                	jmp    c0012df4 <Dbg::kprintf(char const*, ...)+0x5c>
c0012e34:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012e38:	89 c8                	mov    eax,ecx
c0012e3a:	83 c1 04             	add    ecx,0x4
c0012e3d:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012e41:	ff 30                	push   DWORD PTR [eax]
c0012e43:	e8 14 ff ff ff       	call   c0012d5c <Dbg::logWriteInt(unsigned int)>
c0012e48:	5f                   	pop    edi
c0012e49:	eb a9                	jmp    c0012df4 <Dbg::kprintf(char const*, ...)+0x5c>
c0012e4b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012e4f:	89 c8                	mov    eax,ecx
c0012e51:	83 c1 04             	add    ecx,0x4
c0012e54:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012e58:	6a 10                	push   0x10
c0012e5a:	ff 30                	push   DWORD PTR [eax]
c0012e5c:	e8 18 ff ff ff       	call   c0012d79 <Dbg::logWriteIntBase(unsigned int, int)>
c0012e61:	59                   	pop    ecx
c0012e62:	5f                   	pop    edi
c0012e63:	eb 8f                	jmp    c0012df4 <Dbg::kprintf(char const*, ...)+0x5c>
c0012e65:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012e69:	89 d0                	mov    eax,edx
c0012e6b:	83 c2 08             	add    edx,0x8
c0012e6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012e72:	6a 10                	push   0x10
c0012e74:	ff 30                	push   DWORD PTR [eax]
c0012e76:	e8 fe fe ff ff       	call   c0012d79 <Dbg::logWriteIntBase(unsigned int, int)>
c0012e7b:	58                   	pop    eax
c0012e7c:	5a                   	pop    edx
c0012e7d:	e9 72 ff ff ff       	jmp    c0012df4 <Dbg::kprintf(char const*, ...)+0x5c>
c0012e82:	6a 25                	push   0x25
c0012e84:	e8 9f fe ff ff       	call   c0012d28 <Dbg::logc(char)>
c0012e89:	58                   	pop    eax
c0012e8a:	e9 65 ff ff ff       	jmp    c0012df4 <Dbg::kprintf(char const*, ...)+0x5c>
c0012e8f:	6a 25                	push   0x25
c0012e91:	e8 92 fe ff ff       	call   c0012d28 <Dbg::logc(char)>
c0012e96:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012e99:	50                   	push   eax
c0012e9a:	e8 89 fe ff ff       	call   c0012d28 <Dbg::logc(char)>
c0012e9f:	5a                   	pop    edx
c0012ea0:	59                   	pop    ecx
c0012ea1:	e9 4e ff ff ff       	jmp    c0012df4 <Dbg::kprintf(char const*, ...)+0x5c>
c0012ea6:	50                   	push   eax
c0012ea7:	89 eb                	mov    ebx,ebp
c0012ea9:	e8 7a fe ff ff       	call   c0012d28 <Dbg::logc(char)>
c0012eae:	89 fd                	mov    ebp,edi
c0012eb0:	58                   	pop    eax
c0012eb1:	e9 3e ff ff ff       	jmp    c0012df4 <Dbg::kprintf(char const*, ...)+0x5c>

c0012eb6 <File::read(unsigned long long, void*, int*)>:
c0012eb6:	53                   	push   ebx
c0012eb7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012ebb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012ebf:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012ec6:	3c 19                	cmp    al,0x19
c0012ec8:	77 35                	ja     c0012eff <File::read(unsigned long long, void*, int*)+0x49>
c0012eca:	8b 04 85 60 e8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd17a0]
c0012ed1:	85 c0                	test   eax,eax
c0012ed3:	74 2a                	je     c0012eff <File::read(unsigned long long, void*, int*)+0x49>
c0012ed5:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012edb:	85 c0                	test   eax,eax
c0012edd:	74 20                	je     c0012eff <File::read(unsigned long long, void*, int*)+0x49>
c0012edf:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012ee3:	74 21                	je     c0012f06 <File::read(unsigned long long, void*, int*)+0x50>
c0012ee5:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012ee7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012eeb:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012ef1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012ef5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012ef9:	5b                   	pop    ebx
c0012efa:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0012efd:	ff e0                	jmp    eax
c0012eff:	b8 0b 00 00 00       	mov    eax,0xb
c0012f04:	eb 05                	jmp    c0012f0b <File::read(unsigned long long, void*, int*)+0x55>
c0012f06:	b8 05 00 00 00       	mov    eax,0x5
c0012f0b:	5b                   	pop    ebx
c0012f0c:	c3                   	ret    
c0012f0d:	90                   	nop

c0012f0e <File::write(unsigned long long, void*, int*)>:
c0012f0e:	53                   	push   ebx
c0012f0f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012f13:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012f17:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012f1e:	3c 19                	cmp    al,0x19
c0012f20:	77 35                	ja     c0012f57 <File::write(unsigned long long, void*, int*)+0x49>
c0012f22:	8b 04 85 60 e8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd17a0]
c0012f29:	85 c0                	test   eax,eax
c0012f2b:	74 2a                	je     c0012f57 <File::write(unsigned long long, void*, int*)+0x49>
c0012f2d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012f33:	85 c0                	test   eax,eax
c0012f35:	74 20                	je     c0012f57 <File::write(unsigned long long, void*, int*)+0x49>
c0012f37:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012f3b:	74 21                	je     c0012f5e <File::write(unsigned long long, void*, int*)+0x50>
c0012f3d:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012f3f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012f43:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012f49:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012f4d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012f51:	5b                   	pop    ebx
c0012f52:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0012f55:	ff e0                	jmp    eax
c0012f57:	b8 0b 00 00 00       	mov    eax,0xb
c0012f5c:	eb 05                	jmp    c0012f63 <File::write(unsigned long long, void*, int*)+0x55>
c0012f5e:	b8 05 00 00 00       	mov    eax,0x5
c0012f63:	5b                   	pop    ebx
c0012f64:	c3                   	ret    
c0012f65:	90                   	nop

c0012f66 <Directory::read(unsigned long long, void*, int*)>:
c0012f66:	53                   	push   ebx
c0012f67:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012f6b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012f6f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012f76:	3c 19                	cmp    al,0x19
c0012f78:	77 35                	ja     c0012faf <Directory::read(unsigned long long, void*, int*)+0x49>
c0012f7a:	8b 04 85 60 e8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd17a0]
c0012f81:	85 c0                	test   eax,eax
c0012f83:	74 2a                	je     c0012faf <Directory::read(unsigned long long, void*, int*)+0x49>
c0012f85:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012f8b:	85 c0                	test   eax,eax
c0012f8d:	74 20                	je     c0012faf <Directory::read(unsigned long long, void*, int*)+0x49>
c0012f8f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012f93:	74 21                	je     c0012fb6 <Directory::read(unsigned long long, void*, int*)+0x50>
c0012f95:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012f97:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012f9b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012fa1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012fa5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012fa9:	5b                   	pop    ebx
c0012faa:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0012fad:	ff e0                	jmp    eax
c0012faf:	b8 0b 00 00 00       	mov    eax,0xb
c0012fb4:	eb 05                	jmp    c0012fbb <Directory::read(unsigned long long, void*, int*)+0x55>
c0012fb6:	b8 05 00 00 00       	mov    eax,0x5
c0012fbb:	5b                   	pop    ebx
c0012fbc:	c3                   	ret    
c0012fbd:	90                   	nop

c0012fbe <Directory::write(unsigned long long, void*, int*)>:
c0012fbe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012fc2:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0012fc9:	b8 0b 00 00 00       	mov    eax,0xb
c0012fce:	80 fa 19             	cmp    dl,0x19
c0012fd1:	77 18                	ja     c0012feb <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012fd3:	8b 14 95 60 e8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd17a0]
c0012fda:	85 d2                	test   edx,edx
c0012fdc:	74 0d                	je     c0012feb <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012fde:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0012fe5:	19 c0                	sbb    eax,eax
c0012fe7:	83 e0 0a             	and    eax,0xa
c0012fea:	40                   	inc    eax
c0012feb:	c3                   	ret    

c0012fec <File::isAtty()>:
c0012fec:	31 c0                	xor    eax,eax
c0012fee:	c3                   	ret    
c0012fef:	90                   	nop

c0012ff0 <Directory::isAtty()>:
c0012ff0:	31 c0                	xor    eax,eax
c0012ff2:	c3                   	ret    
c0012ff3:	90                   	nop

c0012ff4 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0012ff4:	b8 0a 00 00 00       	mov    eax,0xa
c0012ff9:	c3                   	ret    

c0012ffa <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0012ffa:	b8 0a 00 00 00       	mov    eax,0xa
c0012fff:	c3                   	ret    

c0013000 <File::~File()>:
c0013000:	83 ec 0c             	sub    esp,0xc
c0013003:	ba 44 a9 02 c0       	mov    edx,0xc002a944
c0013008:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001300c:	89 10                	mov    DWORD PTR [eax],edx
c001300e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013012:	83 ec 0c             	sub    esp,0xc
c0013015:	50                   	push   eax
c0013016:	e8 bf e8 ff ff       	call   c00118da <UnixFile::~UnixFile()>
c001301b:	83 c4 10             	add    esp,0x10
c001301e:	90                   	nop
c001301f:	83 c4 0c             	add    esp,0xc
c0013022:	c3                   	ret    
c0013023:	90                   	nop

c0013024 <File::~File()>:
c0013024:	83 ec 0c             	sub    esp,0xc
c0013027:	83 ec 0c             	sub    esp,0xc
c001302a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001302e:	e8 cd ff ff ff       	call   c0013000 <File::~File()>
c0013033:	83 c4 10             	add    esp,0x10
c0013036:	83 ec 08             	sub    esp,0x8
c0013039:	68 14 01 00 00       	push   0x114
c001303e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013042:	e8 71 fc ff ff       	call   c0012cb8 <operator delete(void*, unsigned long)>
c0013047:	83 c4 10             	add    esp,0x10
c001304a:	83 c4 0c             	add    esp,0xc
c001304d:	c3                   	ret    

c001304e <Directory::~Directory()>:
c001304e:	83 ec 0c             	sub    esp,0xc
c0013051:	ba 60 a9 02 c0       	mov    edx,0xc002a960
c0013056:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001305a:	89 10                	mov    DWORD PTR [eax],edx
c001305c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013060:	83 ec 0c             	sub    esp,0xc
c0013063:	50                   	push   eax
c0013064:	e8 71 e8 ff ff       	call   c00118da <UnixFile::~UnixFile()>
c0013069:	83 c4 10             	add    esp,0x10
c001306c:	90                   	nop
c001306d:	83 c4 0c             	add    esp,0xc
c0013070:	c3                   	ret    
c0013071:	90                   	nop

c0013072 <Directory::~Directory()>:
c0013072:	83 ec 0c             	sub    esp,0xc
c0013075:	83 ec 0c             	sub    esp,0xc
c0013078:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001307c:	e8 cd ff ff ff       	call   c001304e <Directory::~Directory()>
c0013081:	83 c4 10             	add    esp,0x10
c0013084:	83 ec 08             	sub    esp,0x8
c0013087:	68 14 01 00 00       	push   0x114
c001308c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013090:	e8 23 fc ff ff       	call   c0012cb8 <operator delete(void*, unsigned long)>
c0013095:	83 c4 10             	add    esp,0x10
c0013098:	83 c4 0c             	add    esp,0xc
c001309b:	c3                   	ret    

c001309c <Filesystem::Filesystem()>:
c001309c:	ba e0 a8 02 c0       	mov    edx,0xc002a8e0
c00130a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00130a5:	89 10                	mov    DWORD PTR [eax],edx
c00130a7:	8b 15 d0 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e3d0
c00130ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00130b1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00130b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00130b8:	a3 d0 e3 02 c0       	mov    ds:0xc002e3d0,eax
c00130bd:	90                   	nop
c00130be:	c3                   	ret    
c00130bf:	90                   	nop

c00130c0 <Filesystem::~Filesystem()>:
c00130c0:	ba e0 a8 02 c0       	mov    edx,0xc002a8e0
c00130c5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00130c9:	89 10                	mov    DWORD PTR [eax],edx
c00130cb:	90                   	nop
c00130cc:	c3                   	ret    
c00130cd:	90                   	nop

c00130ce <Filesystem::~Filesystem()>:
c00130ce:	83 ec 0c             	sub    esp,0xc
c00130d1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00130d5:	e8 e6 ff ff ff       	call   c00130c0 <Filesystem::~Filesystem()>
c00130da:	83 c4 04             	add    esp,0x4
c00130dd:	83 ec 08             	sub    esp,0x8
c00130e0:	6a 08                	push   0x8
c00130e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130e6:	e8 cd fb ff ff       	call   c0012cb8 <operator delete(void*, unsigned long)>
c00130eb:	83 c4 10             	add    esp,0x10
c00130ee:	83 c4 0c             	add    esp,0xc
c00130f1:	c3                   	ret    

c00130f2 <Fs::getcwd(Process*, char*, int)>:
c00130f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00130f6:	31 c0                	xor    eax,eax
c00130f8:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00130fb:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00130ff:	7d 15                	jge    c0013116 <Fs::getcwd(Process*, char*, int)+0x24>
c0013101:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013105:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c001310c:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c001310f:	84 c9                	test   cl,cl
c0013111:	74 06                	je     c0013119 <Fs::getcwd(Process*, char*, int)+0x27>
c0013113:	40                   	inc    eax
c0013114:	eb e2                	jmp    c00130f8 <Fs::getcwd(Process*, char*, int)+0x6>
c0013116:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0013119:	31 c0                	xor    eax,eax
c001311b:	c3                   	ret    

c001311c <Fs::initVFS()>:
c001311c:	83 ec 18             	sub    esp,0x18
c001311f:	6a 08                	push   0x8
c0013121:	e8 1a c7 ff ff       	call   c000f840 <malloc>
c0013126:	89 04 24             	mov    DWORD PTR [esp],eax
c0013129:	e8 e0 dc 00 00       	call   c0020e0e <FAT::FAT()>
c001312e:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0013135:	e8 06 c7 ff ff       	call   c000f840 <malloc>
c001313a:	89 04 24             	mov    DWORD PTR [esp],eax
c001313d:	e8 24 ef 00 00       	call   c0022066 <ISO9660::ISO9660()>
c0013142:	83 c4 1c             	add    esp,0x1c
c0013145:	c3                   	ret    

c0013146 <Fs::standardiseFiles(char*, char const*, char const*)>:
c0013146:	55                   	push   ebp
c0013147:	57                   	push   edi
c0013148:	56                   	push   esi
c0013149:	53                   	push   ebx
c001314a:	81 ec 10 04 00 00    	sub    esp,0x410
c0013150:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0013157:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c001315e:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0013165:	68 00 04 00 00       	push   0x400
c001316a:	6a 00                	push   0x0
c001316c:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0013170:	56                   	push   esi
c0013171:	e8 02 d6 fe ff       	call   c0000778 <memset>
c0013176:	83 c4 10             	add    esp,0x10
c0013179:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c001317d:	75 0b                	jne    c001318a <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c001317f:	50                   	push   eax
c0013180:	50                   	push   eax
c0013181:	57                   	push   edi
c0013182:	56                   	push   esi
c0013183:	e8 ac d6 fe ff       	call   c0000834 <strcpy>
c0013188:	eb 41                	jmp    c00131cb <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c001318a:	8a 07                	mov    al,BYTE PTR [edi]
c001318c:	3c 5c                	cmp    al,0x5c
c001318e:	74 04                	je     c0013194 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0013190:	3c 2f                	cmp    al,0x2f
c0013192:	75 18                	jne    c00131ac <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0013194:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0013197:	3c 60                	cmp    al,0x60
c0013199:	7e 03                	jle    c001319e <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c001319b:	83 e8 20             	sub    eax,0x20
c001319e:	88 04 24             	mov    BYTE PTR [esp],al
c00131a1:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c00131a8:	50                   	push   eax
c00131a9:	50                   	push   eax
c00131aa:	eb 18                	jmp    c00131c4 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c00131ac:	50                   	push   eax
c00131ad:	50                   	push   eax
c00131ae:	55                   	push   ebp
c00131af:	56                   	push   esi
c00131b0:	e8 7f d6 fe ff       	call   c0000834 <strcpy>
c00131b5:	5a                   	pop    edx
c00131b6:	59                   	pop    ecx
c00131b7:	68 38 c0 02 c0       	push   0xc002c038
c00131bc:	56                   	push   esi
c00131bd:	e8 b2 d7 fe ff       	call   c0000974 <strcat>
c00131c2:	5d                   	pop    ebp
c00131c3:	58                   	pop    eax
c00131c4:	57                   	push   edi
c00131c5:	56                   	push   esi
c00131c6:	e8 a9 d7 fe ff       	call   c0000974 <strcat>
c00131cb:	83 c4 10             	add    esp,0x10
c00131ce:	8a 04 24             	mov    al,BYTE PTR [esp]
c00131d1:	3c 60                	cmp    al,0x60
c00131d3:	7e 03                	jle    c00131d8 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c00131d5:	83 e8 20             	sub    eax,0x20
c00131d8:	88 04 24             	mov    BYTE PTR [esp],al
c00131db:	88 03                	mov    BYTE PTR [ebx],al
c00131dd:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c00131e4:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c00131ea:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00131ee:	bf 03 00 00 00       	mov    edi,0x3
c00131f3:	b8 03 00 00 00       	mov    eax,0x3
c00131f8:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c00131fb:	84 d2                	test   dl,dl
c00131fd:	0f 84 91 00 00 00    	je     c0013294 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0013203:	8d 4f 01             	lea    ecx,[edi+0x1]
c0013206:	80 fa 5c             	cmp    dl,0x5c
c0013209:	74 05                	je     c0013210 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c001320b:	80 fa 2f             	cmp    dl,0x2f
c001320e:	75 12                	jne    c0013222 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0013210:	89 c5                	mov    ebp,eax
c0013212:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0013217:	74 09                	je     c0013222 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0013219:	40                   	inc    eax
c001321a:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c001321e:	89 cf                	mov    edi,ecx
c0013220:	eb d6                	jmp    c00131f8 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0013222:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0013227:	75 5b                	jne    c0013284 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0013229:	80 fa 2e             	cmp    dl,0x2e
c001322c:	75 56                	jne    c0013284 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c001322e:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0013232:	74 19                	je     c001324d <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0013234:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0013239:	74 53                	je     c001328e <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c001323b:	89 f9                	mov    ecx,edi
c001323d:	41                   	inc    ecx
c001323e:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0013241:	80 fa 2f             	cmp    dl,0x2f
c0013244:	74 f7                	je     c001323d <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0013246:	80 fa 5c             	cmp    dl,0x5c
c0013249:	74 f2                	je     c001323d <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c001324b:	eb d1                	jmp    c001321e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001324d:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0013252:	74 3a                	je     c001328e <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0013254:	83 f8 03             	cmp    eax,0x3
c0013257:	74 c5                	je     c001321e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013259:	41                   	inc    ecx
c001325a:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c001325d:	80 fa 2f             	cmp    dl,0x2f
c0013260:	74 f7                	je     c0013259 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0013262:	80 fa 5c             	cmp    dl,0x5c
c0013265:	74 f2                	je     c0013259 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0013267:	48                   	dec    eax
c0013268:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001326c:	75 06                	jne    c0013274 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c001326e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013272:	eb f3                	jmp    c0013267 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0013274:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0013278:	74 07                	je     c0013281 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c001327a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001327e:	48                   	dec    eax
c001327f:	eb f3                	jmp    c0013274 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0013281:	40                   	inc    eax
c0013282:	eb 9a                	jmp    c001321e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013284:	80 fa 2f             	cmp    dl,0x2f
c0013287:	74 95                	je     c001321e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013289:	80 fa 5c             	cmp    dl,0x5c
c001328c:	74 90                	je     c001321e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001328e:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0013291:	40                   	inc    eax
c0013292:	eb 8a                	jmp    c001321e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013294:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013298:	83 ec 0c             	sub    esp,0xc
c001329b:	53                   	push   ebx
c001329c:	e8 f3 d4 fe ff       	call   c0000794 <strlen>
c00132a1:	83 c4 10             	add    esp,0x10
c00132a4:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c00132a9:	75 26                	jne    c00132d1 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c00132ab:	83 ec 0c             	sub    esp,0xc
c00132ae:	53                   	push   ebx
c00132af:	e8 e0 d4 fe ff       	call   c0000794 <strlen>
c00132b4:	83 c4 10             	add    esp,0x10
c00132b7:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c00132bc:	74 26                	je     c00132e4 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c00132be:	83 ec 0c             	sub    esp,0xc
c00132c1:	53                   	push   ebx
c00132c2:	e8 cd d4 fe ff       	call   c0000794 <strlen>
c00132c7:	83 c4 10             	add    esp,0x10
c00132ca:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00132cf:	eb c7                	jmp    c0013298 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c00132d1:	83 ec 0c             	sub    esp,0xc
c00132d4:	53                   	push   ebx
c00132d5:	e8 ba d4 fe ff       	call   c0000794 <strlen>
c00132da:	83 c4 10             	add    esp,0x10
c00132dd:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c00132e2:	74 c7                	je     c00132ab <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c00132e4:	81 c4 0c 04 00 00    	add    esp,0x40c
c00132ea:	5b                   	pop    ebx
c00132eb:	5e                   	pop    esi
c00132ec:	5f                   	pop    edi
c00132ed:	5d                   	pop    ebp
c00132ee:	c3                   	ret    
c00132ef:	90                   	nop

c00132f0 <File::File(char const*, Process*)>:
c00132f0:	83 ec 0c             	sub    esp,0xc
c00132f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132f7:	83 ec 08             	sub    esp,0x8
c00132fa:	6a 00                	push   0x0
c00132fc:	50                   	push   eax
c00132fd:	e8 f6 e3 ff ff       	call   c00116f8 <UnixFile::UnixFile(int)>
c0013302:	83 c4 10             	add    esp,0x10
c0013305:	ba 44 a9 02 c0       	mov    edx,0xc002a944
c001330a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001330e:	89 10                	mov    DWORD PTR [eax],edx
c0013310:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013314:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001331a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001331e:	83 c0 0d             	add    eax,0xd
c0013321:	83 ec 04             	sub    esp,0x4
c0013324:	52                   	push   edx
c0013325:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013329:	50                   	push   eax
c001332a:	e8 17 fe ff ff       	call   c0013146 <Fs::standardiseFiles(char*, char const*, char const*)>
c001332f:	83 c4 10             	add    esp,0x10
c0013332:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013336:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013339:	8d 50 bf             	lea    edx,[eax-0x41]
c001333c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013340:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013346:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001334a:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001334e:	90                   	nop
c001334f:	83 c4 0c             	add    esp,0xc
c0013352:	c3                   	ret    
c0013353:	90                   	nop

c0013354 <File::open(FileOpenMode)>:
c0013354:	53                   	push   ebx
c0013355:	b8 0b 00 00 00       	mov    eax,0xb
c001335a:	83 ec 08             	sub    esp,0x8
c001335d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013361:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013368:	80 fa 19             	cmp    dl,0x19
c001336b:	77 40                	ja     c00133ad <File::open(FileOpenMode)+0x59>
c001336d:	8b 14 95 60 e8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd17a0]
c0013374:	85 d2                	test   edx,edx
c0013376:	74 35                	je     c00133ad <File::open(FileOpenMode)+0x59>
c0013378:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001337e:	85 d2                	test   edx,edx
c0013380:	74 2b                	je     c00133ad <File::open(FileOpenMode)+0x59>
c0013382:	b8 06 00 00 00       	mov    eax,0x6
c0013387:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001338b:	75 20                	jne    c00133ad <File::open(FileOpenMode)+0x59>
c001338d:	8b 02                	mov    eax,DWORD PTR [edx]
c001338f:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013395:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013399:	51                   	push   ecx
c001339a:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001339d:	51                   	push   ecx
c001339e:	52                   	push   edx
c001339f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00133a2:	83 c4 10             	add    esp,0x10
c00133a5:	85 c0                	test   eax,eax
c00133a7:	75 04                	jne    c00133ad <File::open(FileOpenMode)+0x59>
c00133a9:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00133ad:	83 c4 08             	add    esp,0x8
c00133b0:	5b                   	pop    ebx
c00133b1:	c3                   	ret    

c00133b2 <File::close()>:
c00133b2:	53                   	push   ebx
c00133b3:	b8 0b 00 00 00       	mov    eax,0xb
c00133b8:	83 ec 08             	sub    esp,0x8
c00133bb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00133bf:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00133c6:	80 fa 19             	cmp    dl,0x19
c00133c9:	77 41                	ja     c001340c <File::close()+0x5a>
c00133cb:	8b 1c 95 60 e8 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd17a0]
c00133d2:	85 db                	test   ebx,ebx
c00133d4:	74 36                	je     c001340c <File::close()+0x5a>
c00133d6:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00133dd:	74 2d                	je     c001340c <File::close()+0x5a>
c00133df:	b8 05 00 00 00       	mov    eax,0x5
c00133e4:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00133e8:	74 22                	je     c001340c <File::close()+0x5a>
c00133ea:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00133ee:	8b 04 95 60 e8 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd17a0]
c00133f5:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00133fb:	53                   	push   ebx
c00133fc:	53                   	push   ebx
c00133fd:	8b 10                	mov    edx,DWORD PTR [eax]
c00133ff:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013405:	50                   	push   eax
c0013406:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0013409:	83 c4 10             	add    esp,0x10
c001340c:	83 c4 08             	add    esp,0x8
c001340f:	5b                   	pop    ebx
c0013410:	c3                   	ret    
c0013411:	90                   	nop

c0013412 <File::seek(unsigned long long)>:
c0013412:	56                   	push   esi
c0013413:	53                   	push   ebx
c0013414:	b8 0b 00 00 00       	mov    eax,0xb
c0013419:	51                   	push   ecx
c001341a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001341e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0013422:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0013429:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001342d:	80 fa 19             	cmp    dl,0x19
c0013430:	77 31                	ja     c0013463 <File::seek(unsigned long long)+0x51>
c0013432:	8b 14 95 60 e8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd17a0]
c0013439:	85 d2                	test   edx,edx
c001343b:	74 26                	je     c0013463 <File::seek(unsigned long long)+0x51>
c001343d:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013443:	85 d2                	test   edx,edx
c0013445:	74 1c                	je     c0013463 <File::seek(unsigned long long)+0x51>
c0013447:	b8 05 00 00 00       	mov    eax,0x5
c001344c:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0013450:	74 11                	je     c0013463 <File::seek(unsigned long long)+0x51>
c0013452:	8b 02                	mov    eax,DWORD PTR [edx]
c0013454:	53                   	push   ebx
c0013455:	51                   	push   ecx
c0013456:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c001345c:	52                   	push   edx
c001345d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013460:	83 c4 10             	add    esp,0x10
c0013463:	5a                   	pop    edx
c0013464:	5b                   	pop    ebx
c0013465:	5e                   	pop    esi
c0013466:	c3                   	ret    
c0013467:	90                   	nop

c0013468 <File::tell(unsigned long long*)>:
c0013468:	83 ec 0c             	sub    esp,0xc
c001346b:	b8 0b 00 00 00       	mov    eax,0xb
c0013470:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013474:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001347b:	80 fa 19             	cmp    dl,0x19
c001347e:	77 34                	ja     c00134b4 <File::tell(unsigned long long*)+0x4c>
c0013480:	8b 14 95 60 e8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd17a0]
c0013487:	85 d2                	test   edx,edx
c0013489:	74 29                	je     c00134b4 <File::tell(unsigned long long*)+0x4c>
c001348b:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013491:	85 d2                	test   edx,edx
c0013493:	74 1f                	je     c00134b4 <File::tell(unsigned long long*)+0x4c>
c0013495:	b8 05 00 00 00       	mov    eax,0x5
c001349a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001349e:	74 14                	je     c00134b4 <File::tell(unsigned long long*)+0x4c>
c00134a0:	50                   	push   eax
c00134a1:	8b 02                	mov    eax,DWORD PTR [edx]
c00134a3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00134a7:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00134ad:	52                   	push   edx
c00134ae:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00134b1:	83 c4 10             	add    esp,0x10
c00134b4:	83 c4 0c             	add    esp,0xc
c00134b7:	c3                   	ret    

c00134b8 <File::rewind()>:
c00134b8:	83 ec 10             	sub    esp,0x10
c00134bb:	6a 00                	push   0x0
c00134bd:	6a 00                	push   0x0
c00134bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134c3:	e8 4a ff ff ff       	call   c0013412 <File::seek(unsigned long long)>
c00134c8:	83 c4 1c             	add    esp,0x1c
c00134cb:	c3                   	ret    

c00134cc <File::unlink()>:
c00134cc:	83 ec 0c             	sub    esp,0xc
c00134cf:	b8 0b 00 00 00       	mov    eax,0xb
c00134d4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00134d8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00134df:	80 f9 19             	cmp    cl,0x19
c00134e2:	77 2f                	ja     c0013513 <File::unlink()+0x47>
c00134e4:	8b 0c 8d 60 e8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd17a0]
c00134eb:	85 c9                	test   ecx,ecx
c00134ed:	74 24                	je     c0013513 <File::unlink()+0x47>
c00134ef:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00134f5:	85 c9                	test   ecx,ecx
c00134f7:	74 1a                	je     c0013513 <File::unlink()+0x47>
c00134f9:	b8 06 00 00 00       	mov    eax,0x6
c00134fe:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013502:	75 0f                	jne    c0013513 <File::unlink()+0x47>
c0013504:	83 c2 0d             	add    edx,0xd
c0013507:	50                   	push   eax
c0013508:	50                   	push   eax
c0013509:	8b 01                	mov    eax,DWORD PTR [ecx]
c001350b:	52                   	push   edx
c001350c:	51                   	push   ecx
c001350d:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013510:	83 c4 10             	add    esp,0x10
c0013513:	83 c4 0c             	add    esp,0xc
c0013516:	c3                   	ret    
c0013517:	90                   	nop

c0013518 <File::rename(char const*)>:
c0013518:	83 ec 0c             	sub    esp,0xc
c001351b:	b8 0b 00 00 00       	mov    eax,0xb
c0013520:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013524:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001352b:	80 f9 19             	cmp    cl,0x19
c001352e:	77 32                	ja     c0013562 <File::rename(char const*)+0x4a>
c0013530:	8b 0c 8d 60 e8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd17a0]
c0013537:	85 c9                	test   ecx,ecx
c0013539:	74 27                	je     c0013562 <File::rename(char const*)+0x4a>
c001353b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013541:	85 c9                	test   ecx,ecx
c0013543:	74 1d                	je     c0013562 <File::rename(char const*)+0x4a>
c0013545:	b8 06 00 00 00       	mov    eax,0x6
c001354a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001354e:	75 12                	jne    c0013562 <File::rename(char const*)+0x4a>
c0013550:	83 c2 0d             	add    edx,0xd
c0013553:	50                   	push   eax
c0013554:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013556:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001355a:	52                   	push   edx
c001355b:	51                   	push   ecx
c001355c:	ff 50 40             	call   DWORD PTR [eax+0x40]
c001355f:	83 c4 10             	add    esp,0x10
c0013562:	83 c4 0c             	add    esp,0xc
c0013565:	c3                   	ret    

c0013566 <File::chfatattr(unsigned char, unsigned char)>:
c0013566:	57                   	push   edi
c0013567:	b8 0b 00 00 00       	mov    eax,0xb
c001356c:	56                   	push   esi
c001356d:	53                   	push   ebx
c001356e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013572:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013576:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001357d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013581:	80 f9 19             	cmp    cl,0x19
c0013584:	77 37                	ja     c00135bd <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013586:	8b 0c 8d 60 e8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd17a0]
c001358d:	85 c9                	test   ecx,ecx
c001358f:	74 2c                	je     c00135bd <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013591:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013597:	85 c9                	test   ecx,ecx
c0013599:	74 22                	je     c00135bd <File::chfatattr(unsigned char, unsigned char)+0x57>
c001359b:	b8 06 00 00 00       	mov    eax,0x6
c00135a0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00135a4:	75 17                	jne    c00135bd <File::chfatattr(unsigned char, unsigned char)+0x57>
c00135a6:	8b 39                	mov    edi,DWORD PTR [ecx]
c00135a8:	89 f0                	mov    eax,esi
c00135aa:	83 c2 0d             	add    edx,0xd
c00135ad:	0f b6 f0             	movzx  esi,al
c00135b0:	0f b6 db             	movzx  ebx,bl
c00135b3:	56                   	push   esi
c00135b4:	53                   	push   ebx
c00135b5:	52                   	push   edx
c00135b6:	51                   	push   ecx
c00135b7:	ff 57 34             	call   DWORD PTR [edi+0x34]
c00135ba:	83 c4 10             	add    esp,0x10
c00135bd:	5b                   	pop    ebx
c00135be:	5e                   	pop    esi
c00135bf:	5f                   	pop    edi
c00135c0:	c3                   	ret    
c00135c1:	90                   	nop

c00135c2 <File::exists()>:
c00135c2:	83 ec 0c             	sub    esp,0xc
c00135c5:	31 c0                	xor    eax,eax
c00135c7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00135cb:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00135d2:	80 f9 19             	cmp    cl,0x19
c00135d5:	77 24                	ja     c00135fb <File::exists()+0x39>
c00135d7:	8b 0c 8d 60 e8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd17a0]
c00135de:	85 c9                	test   ecx,ecx
c00135e0:	74 19                	je     c00135fb <File::exists()+0x39>
c00135e2:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00135e8:	85 c9                	test   ecx,ecx
c00135ea:	74 0f                	je     c00135fb <File::exists()+0x39>
c00135ec:	83 c2 0d             	add    edx,0xd
c00135ef:	50                   	push   eax
c00135f0:	50                   	push   eax
c00135f1:	8b 01                	mov    eax,DWORD PTR [ecx]
c00135f3:	52                   	push   edx
c00135f4:	51                   	push   ecx
c00135f5:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00135f8:	83 c4 10             	add    esp,0x10
c00135fb:	83 c4 0c             	add    esp,0xc
c00135fe:	c3                   	ret    
c00135ff:	90                   	nop

c0013600 <File::stat(unsigned long long*, bool*)>:
c0013600:	56                   	push   esi
c0013601:	53                   	push   ebx
c0013602:	50                   	push   eax
c0013603:	b8 0b 00 00 00       	mov    eax,0xb
c0013608:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001360c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013610:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013617:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001361b:	80 f9 19             	cmp    cl,0x19
c001361e:	77 3d                	ja     c001365d <File::stat(unsigned long long*, bool*)+0x5d>
c0013620:	8b 0c 8d 60 e8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd17a0]
c0013627:	85 c9                	test   ecx,ecx
c0013629:	74 32                	je     c001365d <File::stat(unsigned long long*, bool*)+0x5d>
c001362b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013631:	85 c9                	test   ecx,ecx
c0013633:	74 28                	je     c001365d <File::stat(unsigned long long*, bool*)+0x5d>
c0013635:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013637:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001363b:	74 13                	je     c0013650 <File::stat(unsigned long long*, bool*)+0x50>
c001363d:	83 ec 04             	sub    esp,0x4
c0013640:	56                   	push   esi
c0013641:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0013647:	51                   	push   ecx
c0013648:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c001364b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001364e:	eb 0a                	jmp    c001365a <File::stat(unsigned long long*, bool*)+0x5a>
c0013650:	53                   	push   ebx
c0013651:	83 c2 0d             	add    edx,0xd
c0013654:	56                   	push   esi
c0013655:	52                   	push   edx
c0013656:	51                   	push   ecx
c0013657:	ff 50 30             	call   DWORD PTR [eax+0x30]
c001365a:	83 c4 10             	add    esp,0x10
c001365d:	5a                   	pop    edx
c001365e:	5b                   	pop    ebx
c001365f:	5e                   	pop    esi
c0013660:	c3                   	ret    

c0013661 <Fs::setcwd(Process*, char*)>:
c0013661:	55                   	push   ebp
c0013662:	57                   	push   edi
c0013663:	56                   	push   esi
c0013664:	53                   	push   ebx
c0013665:	81 ec 20 02 00 00    	sub    esp,0x220
c001366b:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0013672:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0013678:	57                   	push   edi
c0013679:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0013680:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0013684:	56                   	push   esi
c0013685:	e8 bc fa ff ff       	call   c0013146 <Fs::standardiseFiles(char*, char const*, char const*)>
c001368a:	89 34 24             	mov    DWORD PTR [esp],esi
c001368d:	e8 02 d1 fe ff       	call   c0000794 <strlen>
c0013692:	83 c4 10             	add    esp,0x10
c0013695:	83 f8 02             	cmp    eax,0x2
c0013698:	77 17                	ja     c00136b1 <Fs::setcwd(Process*, char*)+0x50>
c001369a:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c001369f:	83 e8 41             	sub    eax,0x41
c00136a2:	83 f8 19             	cmp    eax,0x19
c00136a5:	76 24                	jbe    c00136cb <Fs::setcwd(Process*, char*)+0x6a>
c00136a7:	b8 03 00 00 00       	mov    eax,0x3
c00136ac:	e9 e0 00 00 00       	jmp    c0013791 <Fs::setcwd(Process*, char*)+0x130>
c00136b1:	83 ec 0c             	sub    esp,0xc
c00136b4:	56                   	push   esi
c00136b5:	e8 da d0 fe ff       	call   c0000794 <strlen>
c00136ba:	83 c4 10             	add    esp,0x10
c00136bd:	83 f8 03             	cmp    eax,0x3
c00136c0:	75 34                	jne    c00136f6 <Fs::setcwd(Process*, char*)+0x95>
c00136c2:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c00136c7:	75 2d                	jne    c00136f6 <Fs::setcwd(Process*, char*)+0x95>
c00136c9:	eb cf                	jmp    c001369a <Fs::setcwd(Process*, char*)+0x39>
c00136cb:	8b 14 85 60 e8 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd17a0]
c00136d2:	b8 05 00 00 00       	mov    eax,0x5
c00136d7:	85 d2                	test   edx,edx
c00136d9:	0f 84 b2 00 00 00    	je     c0013791 <Fs::setcwd(Process*, char*)+0x130>
c00136df:	b8 06 00 00 00       	mov    eax,0x6
c00136e4:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00136eb:	0f 85 92 00 00 00    	jne    c0013783 <Fs::setcwd(Process*, char*)+0x122>
c00136f1:	e9 9b 00 00 00       	jmp    c0013791 <Fs::setcwd(Process*, char*)+0x130>
c00136f6:	83 ec 0c             	sub    esp,0xc
c00136f9:	68 14 01 00 00       	push   0x114
c00136fe:	e8 3d c1 ff ff       	call   c000f840 <malloc>
c0013703:	83 c4 0c             	add    esp,0xc
c0013706:	89 c3                	mov    ebx,eax
c0013708:	55                   	push   ebp
c0013709:	56                   	push   esi
c001370a:	50                   	push   eax
c001370b:	e8 e0 fb ff ff       	call   c00132f0 <File::File(char const*, Process*)>
c0013710:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0013715:	83 c4 0c             	add    esp,0xc
c0013718:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001371c:	50                   	push   eax
c001371d:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013721:	50                   	push   eax
c0013722:	53                   	push   ebx
c0013723:	e8 d8 fe ff ff       	call   c0013600 <File::stat(unsigned long long*, bool*)>
c0013728:	83 c4 10             	add    esp,0x10
c001372b:	83 f8 02             	cmp    eax,0x2
c001372e:	74 04                	je     c0013734 <Fs::setcwd(Process*, char*)+0xd3>
c0013730:	85 c0                	test   eax,eax
c0013732:	74 1c                	je     c0013750 <Fs::setcwd(Process*, char*)+0xef>
c0013734:	b8 01 00 00 00       	mov    eax,0x1
c0013739:	85 db                	test   ebx,ebx
c001373b:	74 54                	je     c0013791 <Fs::setcwd(Process*, char*)+0x130>
c001373d:	83 ec 0c             	sub    esp,0xc
c0013740:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013742:	53                   	push   ebx
c0013743:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013746:	83 c4 10             	add    esp,0x10
c0013749:	b8 01 00 00 00       	mov    eax,0x1
c001374e:	eb 41                	jmp    c0013791 <Fs::setcwd(Process*, char*)+0x130>
c0013750:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0013755:	75 1c                	jne    c0013773 <Fs::setcwd(Process*, char*)+0x112>
c0013757:	b8 02 00 00 00       	mov    eax,0x2
c001375c:	85 db                	test   ebx,ebx
c001375e:	74 31                	je     c0013791 <Fs::setcwd(Process*, char*)+0x130>
c0013760:	83 ec 0c             	sub    esp,0xc
c0013763:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013765:	53                   	push   ebx
c0013766:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013769:	83 c4 10             	add    esp,0x10
c001376c:	b8 02 00 00 00       	mov    eax,0x2
c0013771:	eb 1e                	jmp    c0013791 <Fs::setcwd(Process*, char*)+0x130>
c0013773:	85 db                	test   ebx,ebx
c0013775:	74 0c                	je     c0013783 <Fs::setcwd(Process*, char*)+0x122>
c0013777:	83 ec 0c             	sub    esp,0xc
c001377a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001377c:	53                   	push   ebx
c001377d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013780:	83 c4 10             	add    esp,0x10
c0013783:	50                   	push   eax
c0013784:	50                   	push   eax
c0013785:	56                   	push   esi
c0013786:	57                   	push   edi
c0013787:	e8 a8 d0 fe ff       	call   c0000834 <strcpy>
c001378c:	83 c4 10             	add    esp,0x10
c001378f:	31 c0                	xor    eax,eax
c0013791:	81 c4 1c 02 00 00    	add    esp,0x21c
c0013797:	5b                   	pop    ebx
c0013798:	5e                   	pop    esi
c0013799:	5f                   	pop    edi
c001379a:	5d                   	pop    ebp
c001379b:	c3                   	ret    

c001379c <Directory::Directory(char const*, Process*)>:
c001379c:	83 ec 0c             	sub    esp,0xc
c001379f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137a3:	83 ec 08             	sub    esp,0x8
c00137a6:	6a 00                	push   0x0
c00137a8:	50                   	push   eax
c00137a9:	e8 4a df ff ff       	call   c00116f8 <UnixFile::UnixFile(int)>
c00137ae:	83 c4 10             	add    esp,0x10
c00137b1:	ba 60 a9 02 c0       	mov    edx,0xc002a960
c00137b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137ba:	89 10                	mov    DWORD PTR [eax],edx
c00137bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00137c0:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00137c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137ca:	83 c0 0d             	add    eax,0xd
c00137cd:	83 ec 04             	sub    esp,0x4
c00137d0:	52                   	push   edx
c00137d1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00137d5:	50                   	push   eax
c00137d6:	e8 6b f9 ff ff       	call   c0013146 <Fs::standardiseFiles(char*, char const*, char const*)>
c00137db:	83 c4 10             	add    esp,0x10
c00137de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137e2:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00137e5:	8d 50 bf             	lea    edx,[eax-0x41]
c00137e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137ec:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00137f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137f6:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00137fa:	90                   	nop
c00137fb:	83 c4 0c             	add    esp,0xc
c00137fe:	c3                   	ret    
c00137ff:	90                   	nop

c0013800 <Directory::open()>:
c0013800:	53                   	push   ebx
c0013801:	b8 0b 00 00 00       	mov    eax,0xb
c0013806:	83 ec 08             	sub    esp,0x8
c0013809:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001380d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013814:	80 fa 19             	cmp    dl,0x19
c0013817:	77 3d                	ja     c0013856 <Directory::open()+0x56>
c0013819:	8b 14 95 60 e8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd17a0]
c0013820:	85 d2                	test   edx,edx
c0013822:	74 32                	je     c0013856 <Directory::open()+0x56>
c0013824:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001382a:	85 d2                	test   edx,edx
c001382c:	74 28                	je     c0013856 <Directory::open()+0x56>
c001382e:	b8 06 00 00 00       	mov    eax,0x6
c0013833:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013837:	75 1d                	jne    c0013856 <Directory::open()+0x56>
c0013839:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001383f:	50                   	push   eax
c0013840:	8b 02                	mov    eax,DWORD PTR [edx]
c0013842:	51                   	push   ecx
c0013843:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013846:	51                   	push   ecx
c0013847:	52                   	push   edx
c0013848:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c001384b:	83 c4 10             	add    esp,0x10
c001384e:	85 c0                	test   eax,eax
c0013850:	75 04                	jne    c0013856 <Directory::open()+0x56>
c0013852:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013856:	83 c4 08             	add    esp,0x8
c0013859:	5b                   	pop    ebx
c001385a:	c3                   	ret    
c001385b:	90                   	nop

c001385c <Directory::close()>:
c001385c:	53                   	push   ebx
c001385d:	b8 0b 00 00 00       	mov    eax,0xb
c0013862:	83 ec 08             	sub    esp,0x8
c0013865:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013869:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013870:	80 fa 19             	cmp    dl,0x19
c0013873:	77 41                	ja     c00138b6 <Directory::close()+0x5a>
c0013875:	8b 1c 95 60 e8 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd17a0]
c001387c:	85 db                	test   ebx,ebx
c001387e:	74 36                	je     c00138b6 <Directory::close()+0x5a>
c0013880:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013887:	74 2d                	je     c00138b6 <Directory::close()+0x5a>
c0013889:	b8 05 00 00 00       	mov    eax,0x5
c001388e:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013892:	74 22                	je     c00138b6 <Directory::close()+0x5a>
c0013894:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013898:	8b 04 95 60 e8 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd17a0]
c001389f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00138a5:	53                   	push   ebx
c00138a6:	53                   	push   ebx
c00138a7:	8b 10                	mov    edx,DWORD PTR [eax]
c00138a9:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00138af:	50                   	push   eax
c00138b0:	ff 52 20             	call   DWORD PTR [edx+0x20]
c00138b3:	83 c4 10             	add    esp,0x10
c00138b6:	83 c4 08             	add    esp,0x8
c00138b9:	5b                   	pop    ebx
c00138ba:	c3                   	ret    
c00138bb:	90                   	nop

c00138bc <Directory::unlink()>:
c00138bc:	83 ec 0c             	sub    esp,0xc
c00138bf:	b8 0b 00 00 00       	mov    eax,0xb
c00138c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00138c8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00138cf:	80 f9 19             	cmp    cl,0x19
c00138d2:	77 2f                	ja     c0013903 <Directory::unlink()+0x47>
c00138d4:	8b 0c 8d 60 e8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd17a0]
c00138db:	85 c9                	test   ecx,ecx
c00138dd:	74 24                	je     c0013903 <Directory::unlink()+0x47>
c00138df:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00138e5:	85 c9                	test   ecx,ecx
c00138e7:	74 1a                	je     c0013903 <Directory::unlink()+0x47>
c00138e9:	b8 06 00 00 00       	mov    eax,0x6
c00138ee:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00138f2:	75 0f                	jne    c0013903 <Directory::unlink()+0x47>
c00138f4:	83 c2 0d             	add    edx,0xd
c00138f7:	50                   	push   eax
c00138f8:	50                   	push   eax
c00138f9:	8b 01                	mov    eax,DWORD PTR [ecx]
c00138fb:	52                   	push   edx
c00138fc:	51                   	push   ecx
c00138fd:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013900:	83 c4 10             	add    esp,0x10
c0013903:	83 c4 0c             	add    esp,0xc
c0013906:	c3                   	ret    
c0013907:	90                   	nop

c0013908 <Directory::rename(char const*)>:
c0013908:	83 ec 0c             	sub    esp,0xc
c001390b:	b8 0b 00 00 00       	mov    eax,0xb
c0013910:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013914:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001391b:	80 f9 19             	cmp    cl,0x19
c001391e:	77 32                	ja     c0013952 <Directory::rename(char const*)+0x4a>
c0013920:	8b 0c 8d 60 e8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd17a0]
c0013927:	85 c9                	test   ecx,ecx
c0013929:	74 27                	je     c0013952 <Directory::rename(char const*)+0x4a>
c001392b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013931:	85 c9                	test   ecx,ecx
c0013933:	74 1d                	je     c0013952 <Directory::rename(char const*)+0x4a>
c0013935:	b8 06 00 00 00       	mov    eax,0x6
c001393a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001393e:	75 12                	jne    c0013952 <Directory::rename(char const*)+0x4a>
c0013940:	83 c2 0d             	add    edx,0xd
c0013943:	50                   	push   eax
c0013944:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013946:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001394a:	52                   	push   edx
c001394b:	51                   	push   ecx
c001394c:	ff 50 40             	call   DWORD PTR [eax+0x40]
c001394f:	83 c4 10             	add    esp,0x10
c0013952:	83 c4 0c             	add    esp,0xc
c0013955:	c3                   	ret    

c0013956 <Directory::exists()>:
c0013956:	83 ec 0c             	sub    esp,0xc
c0013959:	31 c0                	xor    eax,eax
c001395b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001395f:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013966:	80 f9 19             	cmp    cl,0x19
c0013969:	77 24                	ja     c001398f <Directory::exists()+0x39>
c001396b:	8b 0c 8d 60 e8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd17a0]
c0013972:	85 c9                	test   ecx,ecx
c0013974:	74 19                	je     c001398f <Directory::exists()+0x39>
c0013976:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001397c:	85 c9                	test   ecx,ecx
c001397e:	74 0f                	je     c001398f <Directory::exists()+0x39>
c0013980:	83 c2 0d             	add    edx,0xd
c0013983:	50                   	push   eax
c0013984:	50                   	push   eax
c0013985:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013987:	52                   	push   edx
c0013988:	51                   	push   ecx
c0013989:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001398c:	83 c4 10             	add    esp,0x10
c001398f:	83 c4 0c             	add    esp,0xc
c0013992:	c3                   	ret    
c0013993:	90                   	nop

c0013994 <Directory::read(dirent*)>:
c0013994:	83 ec 1c             	sub    esp,0x1c
c0013997:	b8 0b 00 00 00       	mov    eax,0xb
c001399c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00139a0:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00139a7:	80 fa 19             	cmp    dl,0x19
c00139aa:	77 30                	ja     c00139dc <Directory::read(dirent*)+0x48>
c00139ac:	8b 14 95 60 e8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd17a0]
c00139b3:	85 d2                	test   edx,edx
c00139b5:	74 25                	je     c00139dc <Directory::read(dirent*)+0x48>
c00139b7:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00139be:	74 1c                	je     c00139dc <Directory::read(dirent*)+0x48>
c00139c0:	83 ec 0c             	sub    esp,0xc
c00139c3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00139c5:	8d 54 24 18          	lea    edx,[esp+0x18]
c00139c9:	52                   	push   edx
c00139ca:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00139ce:	6a 00                	push   0x0
c00139d0:	68 10 01 00 00       	push   0x110
c00139d5:	51                   	push   ecx
c00139d6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00139d9:	83 c4 20             	add    esp,0x20
c00139dc:	83 c4 1c             	add    esp,0x1c
c00139df:	c3                   	ret    

c00139e0 <Directory::create()>:
c00139e0:	83 ec 0c             	sub    esp,0xc
c00139e3:	b8 0b 00 00 00       	mov    eax,0xb
c00139e8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00139ec:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00139f3:	80 f9 19             	cmp    cl,0x19
c00139f6:	77 2f                	ja     c0013a27 <Directory::create()+0x47>
c00139f8:	8b 0c 8d 60 e8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd17a0]
c00139ff:	85 c9                	test   ecx,ecx
c0013a01:	74 24                	je     c0013a27 <Directory::create()+0x47>
c0013a03:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013a09:	85 c9                	test   ecx,ecx
c0013a0b:	74 1a                	je     c0013a27 <Directory::create()+0x47>
c0013a0d:	b8 06 00 00 00       	mov    eax,0x6
c0013a12:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013a16:	75 0f                	jne    c0013a27 <Directory::create()+0x47>
c0013a18:	83 c2 0d             	add    edx,0xd
c0013a1b:	50                   	push   eax
c0013a1c:	50                   	push   eax
c0013a1d:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013a1f:	52                   	push   edx
c0013a20:	51                   	push   ecx
c0013a21:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013a24:	83 c4 10             	add    esp,0x10
c0013a27:	83 c4 0c             	add    esp,0xc
c0013a2a:	c3                   	ret    
c0013a2b:	90                   	nop

c0013a2c <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013a2c:	b8 0a 00 00 00       	mov    eax,0xa
c0013a31:	c3                   	ret    

c0013a32 <Bus::Bus(char const*)>:
c0013a32:	83 ec 0c             	sub    esp,0xc
c0013a35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a39:	83 ec 08             	sub    esp,0x8
c0013a3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a40:	50                   	push   eax
c0013a41:	e8 68 09 00 00       	call   c00143ae <Device::Device(char const*)>
c0013a46:	83 c4 10             	add    esp,0x10
c0013a49:	ba 7c a9 02 c0       	mov    edx,0xc002a97c
c0013a4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a52:	89 10                	mov    DWORD PTR [eax],edx
c0013a54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a58:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013a62:	90                   	nop
c0013a63:	83 c4 0c             	add    esp,0xc
c0013a66:	c3                   	ret    
c0013a67:	90                   	nop

c0013a68 <Bus::~Bus()>:
c0013a68:	83 ec 0c             	sub    esp,0xc
c0013a6b:	ba 7c a9 02 c0       	mov    edx,0xc002a97c
c0013a70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a74:	89 10                	mov    DWORD PTR [eax],edx
c0013a76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a7a:	83 ec 0c             	sub    esp,0xc
c0013a7d:	50                   	push   eax
c0013a7e:	e8 0d 06 00 00       	call   c0014090 <Device::~Device()>
c0013a83:	83 c4 10             	add    esp,0x10
c0013a86:	90                   	nop
c0013a87:	83 c4 0c             	add    esp,0xc
c0013a8a:	c3                   	ret    
c0013a8b:	90                   	nop

c0013a8c <Bus::~Bus()>:
c0013a8c:	83 ec 0c             	sub    esp,0xc
c0013a8f:	83 ec 0c             	sub    esp,0xc
c0013a92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a96:	e8 cd ff ff ff       	call   c0013a68 <Bus::~Bus()>
c0013a9b:	83 c4 10             	add    esp,0x10
c0013a9e:	83 ec 08             	sub    esp,0x8
c0013aa1:	68 58 01 00 00       	push   0x158
c0013aa6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013aaa:	e8 09 f2 ff ff       	call   c0012cb8 <operator delete(void*, unsigned long)>
c0013aaf:	83 c4 10             	add    esp,0x10
c0013ab2:	83 c4 0c             	add    esp,0xc
c0013ab5:	c3                   	ret    

c0013ab6 <Buzzer::Buzzer(char const*)>:
c0013ab6:	83 ec 0c             	sub    esp,0xc
c0013ab9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013abd:	83 ec 08             	sub    esp,0x8
c0013ac0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ac4:	50                   	push   eax
c0013ac5:	e8 e4 08 00 00       	call   c00143ae <Device::Device(char const*)>
c0013aca:	83 c4 10             	add    esp,0x10
c0013acd:	ba a8 a9 02 c0       	mov    edx,0xc002a9a8
c0013ad2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ad6:	89 10                	mov    DWORD PTR [eax],edx
c0013ad8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013adc:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013ae6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013aea:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013af4:	90                   	nop
c0013af5:	83 c4 0c             	add    esp,0xc
c0013af8:	c3                   	ret    
c0013af9:	90                   	nop

c0013afa <Buzzer::~Buzzer()>:
c0013afa:	83 ec 0c             	sub    esp,0xc
c0013afd:	ba a8 a9 02 c0       	mov    edx,0xc002a9a8
c0013b02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b06:	89 10                	mov    DWORD PTR [eax],edx
c0013b08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b0c:	83 ec 0c             	sub    esp,0xc
c0013b0f:	50                   	push   eax
c0013b10:	e8 7b 05 00 00       	call   c0014090 <Device::~Device()>
c0013b15:	83 c4 10             	add    esp,0x10
c0013b18:	90                   	nop
c0013b19:	83 c4 0c             	add    esp,0xc
c0013b1c:	c3                   	ret    
c0013b1d:	90                   	nop

c0013b1e <Buzzer::~Buzzer()>:
c0013b1e:	83 ec 0c             	sub    esp,0xc
c0013b21:	83 ec 0c             	sub    esp,0xc
c0013b24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b28:	e8 cd ff ff ff       	call   c0013afa <Buzzer::~Buzzer()>
c0013b2d:	83 c4 10             	add    esp,0x10
c0013b30:	83 ec 08             	sub    esp,0x8
c0013b33:	68 5c 01 00 00       	push   0x15c
c0013b38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b3c:	e8 77 f1 ff ff       	call   c0012cb8 <operator delete(void*, unsigned long)>
c0013b41:	83 c4 10             	add    esp,0x10
c0013b44:	83 c4 0c             	add    esp,0xc
c0013b47:	c3                   	ret    

c0013b48 <Buzzer::stop()>:
c0013b48:	83 ec 14             	sub    esp,0x14
c0013b4b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013b4f:	8b 10                	mov    edx,DWORD PTR [eax]
c0013b51:	6a 00                	push   0x0
c0013b53:	50                   	push   eax
c0013b54:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013b57:	83 c4 1c             	add    esp,0x1c
c0013b5a:	c3                   	ret    

c0013b5b <beepThread(void*)>:
c0013b5b:	53                   	push   ebx
c0013b5c:	83 ec 08             	sub    esp,0x8
c0013b5f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013b63:	e8 07 a1 00 00       	call   c001dc6f <unlockScheduler()>
c0013b68:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013b6d:	52                   	push   edx
c0013b6e:	52                   	push   edx
c0013b6f:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013b75:	52                   	push   edx
c0013b76:	50                   	push   eax
c0013b77:	e8 40 a6 00 00       	call   c001e1bc <nanoSleep(unsigned long long)>
c0013b7c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013b7f:	e8 c4 ff ff ff       	call   c0013b48 <Buzzer::stop()>
c0013b84:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013b8c:	83 c4 18             	add    esp,0x18
c0013b8f:	5b                   	pop    ebx
c0013b90:	e9 6d a5 00 00       	jmp    c001e102 <blockTask(TaskState)>
c0013b95:	90                   	nop

c0013b96 <Buzzer::beep(int, int, bool)>:
c0013b96:	57                   	push   edi
c0013b97:	56                   	push   esi
c0013b98:	53                   	push   ebx
c0013b99:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013b9d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013ba1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013ba5:	52                   	push   edx
c0013ba6:	52                   	push   edx
c0013ba7:	8b 06                	mov    eax,DWORD PTR [esi]
c0013ba9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bad:	56                   	push   esi
c0013bae:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013bb1:	83 c4 10             	add    esp,0x10
c0013bb4:	89 f8                	mov    eax,edi
c0013bb6:	84 c0                	test   al,al
c0013bb8:	74 1f                	je     c0013bd9 <Buzzer::beep(int, int, bool)+0x43>
c0013bba:	50                   	push   eax
c0013bbb:	50                   	push   eax
c0013bbc:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013bc2:	99                   	cdq    
c0013bc3:	52                   	push   edx
c0013bc4:	50                   	push   eax
c0013bc5:	e8 f2 a5 00 00       	call   c001e1bc <nanoSleep(unsigned long long)>
c0013bca:	83 c4 10             	add    esp,0x10
c0013bcd:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013bd1:	5b                   	pop    ebx
c0013bd2:	5e                   	pop    esi
c0013bd3:	5f                   	pop    edi
c0013bd4:	e9 6f ff ff ff       	jmp    c0013b48 <Buzzer::stop()>
c0013bd9:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013bdf:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c0013be4:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013bec:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013bf0:	c7 44 24 14 5b 3b 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013b5b
c0013bf8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013bfc:	5b                   	pop    ebx
c0013bfd:	5e                   	pop    esi
c0013bfe:	5f                   	pop    edi
c0013bff:	e9 9a a1 00 00       	jmp    c001dd9e <Process::createThread(void (*)(void*), void*, int)>

c0013c04 <User::loadClockSettings(int)>:
c0013c04:	53                   	push   ebx
c0013c05:	83 ec 14             	sub    esp,0x14
c0013c08:	68 14 01 00 00       	push   0x114
c0013c0d:	e8 2e bc ff ff       	call   c000f840 <malloc>
c0013c12:	83 c4 0c             	add    esp,0xc
c0013c15:	89 c3                	mov    ebx,eax
c0013c17:	ff 35 b4 17 03 c0    	push   DWORD PTR ds:0xc00317b4
c0013c1d:	68 d0 a9 02 c0       	push   0xc002a9d0
c0013c22:	50                   	push   eax
c0013c23:	e8 c8 f6 ff ff       	call   c00132f0 <File::File(char const*, Process*)>
c0013c28:	58                   	pop    eax
c0013c29:	5a                   	pop    edx
c0013c2a:	6a 01                	push   0x1
c0013c2c:	53                   	push   ebx
c0013c2d:	e8 22 f7 ff ff       	call   c0013354 <File::open(FileOpenMode)>
c0013c32:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013c35:	e8 78 f7 ff ff       	call   c00133b2 <File::close()>
c0013c3a:	83 c4 10             	add    esp,0x10
c0013c3d:	85 db                	test   ebx,ebx
c0013c3f:	74 0f                	je     c0013c50 <User::loadClockSettings(int)+0x4c>
c0013c41:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c43:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013c47:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013c4a:	83 c4 08             	add    esp,0x8
c0013c4d:	5b                   	pop    ebx
c0013c4e:	ff e0                	jmp    eax
c0013c50:	83 c4 08             	add    esp,0x8
c0013c53:	5b                   	pop    ebx
c0013c54:	c3                   	ret    
c0013c55:	90                   	nop

c0013c56 <Clock::Clock(char const*)>:
c0013c56:	83 ec 0c             	sub    esp,0xc
c0013c59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c5d:	83 ec 08             	sub    esp,0x8
c0013c60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c64:	50                   	push   eax
c0013c65:	e8 44 07 00 00       	call   c00143ae <Device::Device(char const*)>
c0013c6a:	83 c4 10             	add    esp,0x10
c0013c6d:	ba f8 a9 02 c0       	mov    edx,0xc002a9f8
c0013c72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c76:	89 10                	mov    DWORD PTR [eax],edx
c0013c78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c7c:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013c86:	90                   	nop
c0013c87:	83 c4 0c             	add    esp,0xc
c0013c8a:	c3                   	ret    
c0013c8b:	90                   	nop

c0013c8c <Clock::~Clock()>:
c0013c8c:	83 ec 0c             	sub    esp,0xc
c0013c8f:	ba f8 a9 02 c0       	mov    edx,0xc002a9f8
c0013c94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c98:	89 10                	mov    DWORD PTR [eax],edx
c0013c9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c9e:	83 ec 0c             	sub    esp,0xc
c0013ca1:	50                   	push   eax
c0013ca2:	e8 e9 03 00 00       	call   c0014090 <Device::~Device()>
c0013ca7:	83 c4 10             	add    esp,0x10
c0013caa:	90                   	nop
c0013cab:	83 c4 0c             	add    esp,0xc
c0013cae:	c3                   	ret    
c0013caf:	90                   	nop

c0013cb0 <Clock::~Clock()>:
c0013cb0:	83 ec 0c             	sub    esp,0xc
c0013cb3:	83 ec 0c             	sub    esp,0xc
c0013cb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013cba:	e8 cd ff ff ff       	call   c0013c8c <Clock::~Clock()>
c0013cbf:	83 c4 10             	add    esp,0x10
c0013cc2:	83 ec 08             	sub    esp,0x8
c0013cc5:	68 58 01 00 00       	push   0x158
c0013cca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013cce:	e8 e5 ef ff ff       	call   c0012cb8 <operator delete(void*, unsigned long)>
c0013cd3:	83 c4 10             	add    esp,0x10
c0013cd6:	83 c4 0c             	add    esp,0xc
c0013cd9:	c3                   	ret    

c0013cda <Clock::timeInSecondsLocal()>:
c0013cda:	53                   	push   ebx
c0013cdb:	83 ec 14             	sub    esp,0x14
c0013cde:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013ce2:	8b 10                	mov    edx,DWORD PTR [eax]
c0013ce4:	50                   	push   eax
c0013ce5:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013ce8:	0f b6 0d d8 e3 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e3d8
c0013cef:	03 0d dc e3 02 c0    	add    ecx,DWORD PTR ds:0xc002e3dc
c0013cf5:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013cfb:	89 cb                	mov    ebx,ecx
c0013cfd:	c1 fb 1f             	sar    ebx,0x1f
c0013d00:	01 c8                	add    eax,ecx
c0013d02:	11 da                	adc    edx,ebx
c0013d04:	83 c4 10             	add    esp,0x10
c0013d07:	31 c9                	xor    ecx,ecx
c0013d09:	80 3d d9 e3 02 c0 00 	cmp    BYTE PTR ds:0xc002e3d9,0x0
c0013d10:	74 05                	je     c0013d17 <Clock::timeInSecondsLocal()+0x3d>
c0013d12:	b9 08 07 00 00       	mov    ecx,0x708
c0013d17:	31 db                	xor    ebx,ebx
c0013d19:	01 c8                	add    eax,ecx
c0013d1b:	11 da                	adc    edx,ebx
c0013d1d:	83 c4 08             	add    esp,0x8
c0013d20:	5b                   	pop    ebx
c0013d21:	c3                   	ret    

c0013d22 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013d22:	57                   	push   edi
c0013d23:	56                   	push   esi
c0013d24:	53                   	push   ebx
c0013d25:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013d29:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013d2d:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013d2f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013d33:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013d36:	0f b6 05 d8 e3 02 c0 	movzx  eax,BYTE PTR ds:0xc002e3d8
c0013d3d:	03 05 dc e3 02 c0    	add    eax,DWORD PTR ds:0xc002e3dc
c0013d43:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013d49:	99                   	cdq    
c0013d4a:	29 c6                	sub    esi,eax
c0013d4c:	19 d7                	sbb    edi,edx
c0013d4e:	89 f0                	mov    eax,esi
c0013d50:	89 fa                	mov    edx,edi
c0013d52:	31 f6                	xor    esi,esi
c0013d54:	80 3d d9 e3 02 c0 00 	cmp    BYTE PTR ds:0xc002e3d9,0x0
c0013d5b:	74 05                	je     c0013d62 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013d5d:	be 08 07 00 00       	mov    esi,0x708
c0013d62:	31 ff                	xor    edi,edi
c0013d64:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013d68:	29 f0                	sub    eax,esi
c0013d6a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013d6e:	19 fa                	sbb    edx,edi
c0013d70:	89 d8                	mov    eax,ebx
c0013d72:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013d76:	5b                   	pop    ebx
c0013d77:	5e                   	pop    esi
c0013d78:	5f                   	pop    edi
c0013d79:	ff e0                	jmp    eax

c0013d7b <datetimeToSeconds(datetime_t)>:
c0013d7b:	55                   	push   ebp
c0013d7c:	57                   	push   edi
c0013d7d:	56                   	push   esi
c0013d7e:	53                   	push   ebx
c0013d7f:	83 ec 14             	sub    esp,0x14
c0013d82:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013d86:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013d8a:	89 d3                	mov    ebx,edx
c0013d8c:	0f b6 c6             	movzx  eax,dh
c0013d8f:	c1 eb 10             	shr    ebx,0x10
c0013d92:	48                   	dec    eax
c0013d93:	66 81 eb 6c 07       	sub    bx,0x76c
c0013d98:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013d9c:	0f b6 f5             	movzx  esi,ch
c0013d9f:	89 cf                	mov    edi,ecx
c0013da1:	6b f6 3c             	imul   esi,esi,0x3c
c0013da4:	c1 ef 10             	shr    edi,0x10
c0013da7:	0f b6 c9             	movzx  ecx,cl
c0013daa:	89 f8                	mov    eax,edi
c0013dac:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013db2:	0f b6 f8             	movzx  edi,al
c0013db5:	0f b6 d2             	movzx  edx,dl
c0013db8:	01 fe                	add    esi,edi
c0013dba:	01 f1                	add    ecx,esi
c0013dbc:	0f b7 f3             	movzx  esi,bx
c0013dbf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013dc3:	c1 f9 1f             	sar    ecx,0x1f
c0013dc6:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013dcb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013dcf:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013dd4:	8b 0c 8d 40 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd55c0]
c0013ddb:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013ddf:	76 29                	jbe    c0013e0a <datetimeToSeconds(datetime_t)+0x8f>
c0013de1:	f6 c3 03             	test   bl,0x3
c0013de4:	75 24                	jne    c0013e0a <datetimeToSeconds(datetime_t)+0x8f>
c0013de6:	31 d2                	xor    edx,edx
c0013de8:	bf 64 00 00 00       	mov    edi,0x64
c0013ded:	89 d8                	mov    eax,ebx
c0013def:	66 f7 f7             	div    di
c0013df2:	66 85 d2             	test   dx,dx
c0013df5:	75 12                	jne    c0013e09 <datetimeToSeconds(datetime_t)+0x8e>
c0013df7:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013dfd:	bf 90 01 00 00       	mov    edi,0x190
c0013e02:	99                   	cdq    
c0013e03:	f7 ff                	idiv   edi
c0013e05:	85 d2                	test   edx,edx
c0013e07:	75 01                	jne    c0013e0a <datetimeToSeconds(datetime_t)+0x8f>
c0013e09:	41                   	inc    ecx
c0013e0a:	66 83 fb 46          	cmp    bx,0x46
c0013e0e:	76 45                	jbe    c0013e55 <datetimeToSeconds(datetime_t)+0xda>
c0013e10:	bb 46 00 00 00       	mov    ebx,0x46
c0013e15:	bf 64 00 00 00       	mov    edi,0x64
c0013e1a:	bd 90 01 00 00       	mov    ebp,0x190
c0013e1f:	b8 6d 01 00 00       	mov    eax,0x16d
c0013e24:	f6 c3 03             	test   bl,0x3
c0013e27:	75 23                	jne    c0013e4c <datetimeToSeconds(datetime_t)+0xd1>
c0013e29:	89 d8                	mov    eax,ebx
c0013e2b:	99                   	cdq    
c0013e2c:	f7 ff                	idiv   edi
c0013e2e:	b8 6e 01 00 00       	mov    eax,0x16e
c0013e33:	85 d2                	test   edx,edx
c0013e35:	75 15                	jne    c0013e4c <datetimeToSeconds(datetime_t)+0xd1>
c0013e37:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013e3d:	99                   	cdq    
c0013e3e:	f7 fd                	idiv   ebp
c0013e40:	83 fa 01             	cmp    edx,0x1
c0013e43:	19 c0                	sbb    eax,eax
c0013e45:	f7 d0                	not    eax
c0013e47:	05 6e 01 00 00       	add    eax,0x16e
c0013e4c:	01 c1                	add    ecx,eax
c0013e4e:	43                   	inc    ebx
c0013e4f:	39 f3                	cmp    ebx,esi
c0013e51:	7c cc                	jl     c0013e1f <datetimeToSeconds(datetime_t)+0xa4>
c0013e53:	eb 35                	jmp    c0013e8a <datetimeToSeconds(datetime_t)+0x10f>
c0013e55:	74 33                	je     c0013e8a <datetimeToSeconds(datetime_t)+0x10f>
c0013e57:	b8 45 00 00 00       	mov    eax,0x45
c0013e5c:	89 c2                	mov    edx,eax
c0013e5e:	83 e2 03             	and    edx,0x3
c0013e61:	39 f0                	cmp    eax,esi
c0013e63:	7e 0f                	jle    c0013e74 <datetimeToSeconds(datetime_t)+0xf9>
c0013e65:	83 fa 01             	cmp    edx,0x1
c0013e68:	19 d2                	sbb    edx,edx
c0013e6a:	48                   	dec    eax
c0013e6b:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013e72:	eb e8                	jmp    c0013e5c <datetimeToSeconds(datetime_t)+0xe1>
c0013e74:	b8 6d 01 00 00       	mov    eax,0x16d
c0013e79:	85 d2                	test   edx,edx
c0013e7b:	75 0b                	jne    c0013e88 <datetimeToSeconds(datetime_t)+0x10d>
c0013e7d:	66 83 fb 01          	cmp    bx,0x1
c0013e81:	19 c0                	sbb    eax,eax
c0013e83:	05 6e 01 00 00       	add    eax,0x16e
c0013e88:	29 c1                	sub    ecx,eax
c0013e8a:	b8 80 51 01 00       	mov    eax,0x15180
c0013e8f:	f7 e9                	imul   ecx
c0013e91:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013e95:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013e99:	83 c4 14             	add    esp,0x14
c0013e9c:	5b                   	pop    ebx
c0013e9d:	5e                   	pop    esi
c0013e9e:	5f                   	pop    edi
c0013e9f:	5d                   	pop    ebp
c0013ea0:	c3                   	ret    
c0013ea1:	90                   	nop

c0013ea2 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013ea2:	57                   	push   edi
c0013ea3:	56                   	push   esi
c0013ea4:	53                   	push   ebx
c0013ea5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013ea9:	8b 06                	mov    eax,DWORD PTR [esi]
c0013eab:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013eae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013eb2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013eb6:	e8 c0 fe ff ff       	call   c0013d7b <datetimeToSeconds(datetime_t)>
c0013ebb:	59                   	pop    ecx
c0013ebc:	0f b6 0d d8 e3 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e3d8
c0013ec3:	5b                   	pop    ebx
c0013ec4:	03 0d dc e3 02 c0    	add    ecx,DWORD PTR ds:0xc002e3dc
c0013eca:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013ed0:	89 cb                	mov    ebx,ecx
c0013ed2:	c1 fb 1f             	sar    ebx,0x1f
c0013ed5:	29 c8                	sub    eax,ecx
c0013ed7:	19 da                	sbb    edx,ebx
c0013ed9:	31 c9                	xor    ecx,ecx
c0013edb:	80 3d d9 e3 02 c0 00 	cmp    BYTE PTR ds:0xc002e3d9,0x0
c0013ee2:	74 05                	je     c0013ee9 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013ee4:	b9 08 07 00 00       	mov    ecx,0x708
c0013ee9:	31 db                	xor    ebx,ebx
c0013eeb:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013eef:	29 c8                	sub    eax,ecx
c0013ef1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013ef5:	19 da                	sbb    edx,ebx
c0013ef7:	89 f8                	mov    eax,edi
c0013ef9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013efd:	5b                   	pop    ebx
c0013efe:	5e                   	pop    esi
c0013eff:	5f                   	pop    edi
c0013f00:	ff e0                	jmp    eax

c0013f02 <secondsToDatetime(unsigned long long)>:
c0013f02:	55                   	push   ebp
c0013f03:	57                   	push   edi
c0013f04:	56                   	push   esi
c0013f05:	53                   	push   ebx
c0013f06:	83 ec 1c             	sub    esp,0x1c
c0013f09:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013f0d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013f11:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013f15:	6a 00                	push   0x0
c0013f17:	68 80 51 01 00       	push   0x15180
c0013f1c:	55                   	push   ebp
c0013f1d:	57                   	push   edi
c0013f1e:	e8 59 29 01 00       	call   c002687c <__udivdi3>
c0013f23:	83 c4 10             	add    esp,0x10
c0013f26:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0013f2c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013f30:	6a 00                	push   0x0
c0013f32:	68 80 51 01 00       	push   0x15180
c0013f37:	55                   	push   ebp
c0013f38:	57                   	push   edi
c0013f39:	bf 10 0e 00 00       	mov    edi,0xe10
c0013f3e:	e8 39 2a 01 00       	call   c002697c <__umoddi3>
c0013f43:	83 c4 10             	add    esp,0x10
c0013f46:	99                   	cdq    
c0013f47:	f7 ff                	idiv   edi
c0013f49:	bf 3c 00 00 00       	mov    edi,0x3c
c0013f4e:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0013f51:	89 d0                	mov    eax,edx
c0013f53:	99                   	cdq    
c0013f54:	f7 ff                	idiv   edi
c0013f56:	85 db                	test   ebx,ebx
c0013f58:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0013f5b:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0013f5e:	79 11                	jns    c0013f71 <secondsToDatetime(unsigned long long)+0x6f>
c0013f60:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013f64:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0013f6a:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013f6f:	eb 07                	jmp    c0013f78 <secondsToDatetime(unsigned long long)+0x76>
c0013f71:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013f76:	89 d8                	mov    eax,ebx
c0013f78:	bf b4 05 00 00       	mov    edi,0x5b4
c0013f7d:	99                   	cdq    
c0013f7e:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0013f83:	f7 f9                	idiv   ecx
c0013f85:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0013f8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013f8e:	31 d2                	xor    edx,edx
c0013f90:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0013f98:	01 c3                	add    ebx,eax
c0013f9a:	89 d8                	mov    eax,ebx
c0013f9c:	f7 f1                	div    ecx
c0013f9e:	31 d2                	xor    edx,edx
c0013fa0:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013fa3:	89 d8                	mov    eax,ebx
c0013fa5:	f7 f7                	div    edi
c0013fa7:	31 d2                	xor    edx,edx
c0013fa9:	29 c1                	sub    ecx,eax
c0013fab:	89 d8                	mov    eax,ebx
c0013fad:	f7 f5                	div    ebp
c0013faf:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013fb4:	29 c1                	sub    ecx,eax
c0013fb6:	31 d2                	xor    edx,edx
c0013fb8:	89 c8                	mov    eax,ecx
c0013fba:	f7 f5                	div    ebp
c0013fbc:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0013fc1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013fc5:	31 d2                	xor    edx,edx
c0013fc7:	89 c8                	mov    eax,ecx
c0013fc9:	f7 f5                	div    ebp
c0013fcb:	31 d2                	xor    edx,edx
c0013fcd:	01 c3                	add    ebx,eax
c0013fcf:	89 c8                	mov    eax,ecx
c0013fd1:	f7 f7                	div    edi
c0013fd3:	bf 99 00 00 00       	mov    edi,0x99
c0013fd8:	29 c3                	sub    ebx,eax
c0013fda:	31 d2                	xor    edx,edx
c0013fdc:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0013fe4:	29 c3                	sub    ebx,eax
c0013fe6:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013fe9:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0013fec:	bb 05 00 00 00       	mov    ebx,0x5
c0013ff1:	83 c1 02             	add    ecx,0x2
c0013ff4:	89 c8                	mov    eax,ecx
c0013ff6:	f7 f7                	div    edi
c0013ff8:	31 d2                	xor    edx,edx
c0013ffa:	89 c7                	mov    edi,eax
c0013ffc:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0014002:	83 c0 02             	add    eax,0x2
c0014005:	f7 f3                	div    ebx
c0014007:	89 eb                	mov    ebx,ebp
c0014009:	29 c3                	sub    ebx,eax
c001400b:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0014011:	88 1e                	mov    BYTE PTR [esi],bl
c0014013:	19 c0                	sbb    eax,eax
c0014015:	31 d2                	xor    edx,edx
c0014017:	83 e0 0c             	and    eax,0xc
c001401a:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c001401e:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0014026:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001402a:	83 f9 01             	cmp    ecx,0x1
c001402d:	0f 96 c2             	setbe  dl
c0014030:	41                   	inc    ecx
c0014031:	01 d0                	add    eax,edx
c0014033:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0014036:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c001403a:	83 c4 1c             	add    esp,0x1c
c001403d:	89 f0                	mov    eax,esi
c001403f:	5b                   	pop    ebx
c0014040:	5e                   	pop    esi
c0014041:	5f                   	pop    edi
c0014042:	5d                   	pop    ebp
c0014043:	c2 04 00             	ret    0x4

c0014046 <Clock::timeInDatetimeLocal()>:
c0014046:	53                   	push   ebx
c0014047:	83 ec 14             	sub    esp,0x14
c001404a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001404e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014052:	e8 83 fc ff ff       	call   c0013cda <Clock::timeInSecondsLocal()>
c0014057:	83 c4 0c             	add    esp,0xc
c001405a:	52                   	push   edx
c001405b:	50                   	push   eax
c001405c:	53                   	push   ebx
c001405d:	e8 a0 fe ff ff       	call   c0013f02 <secondsToDatetime(unsigned long long)>
c0014062:	89 d8                	mov    eax,ebx
c0014064:	83 c4 14             	add    esp,0x14
c0014067:	5b                   	pop    ebx
c0014068:	c2 04 00             	ret    0x4
c001406b:	90                   	nop

c001406c <Device::hibernate()>:
c001406c:	c3                   	ret    
c001406d:	90                   	nop

c001406e <Device::wake()>:
c001406e:	c3                   	ret    
c001406f:	90                   	nop

c0014070 <Device::detect()>:
c0014070:	c3                   	ret    
c0014071:	90                   	nop

c0014072 <Device::disableLegacy()>:
c0014072:	c3                   	ret    
c0014073:	90                   	nop

c0014074 <Device::powerSaving(PowerSavingLevel)>:
c0014074:	c3                   	ret    
c0014075:	90                   	nop

c0014076 <DriverlessDevice::close(int, int, void*)>:
c0014076:	31 c0                	xor    eax,eax
c0014078:	c3                   	ret    
c0014079:	90                   	nop

c001407a <DriverlessDevice::detect()>:
c001407a:	c3                   	ret    
c001407b:	90                   	nop

c001407c <DriverlessDevice::open(int, int, void*)>:
c001407c:	83 ec 18             	sub    esp,0x18
c001407f:	68 70 aa 02 c0       	push   0xc002aa70
c0014084:	e8 ea 63 00 00       	call   c001a473 <Krnl::panic(char const*)>
c0014089:	83 c8 ff             	or     eax,0xffffffff
c001408c:	83 c4 1c             	add    esp,0x1c
c001408f:	c3                   	ret    

c0014090 <Device::~Device()>:
c0014090:	ba 98 aa 02 c0       	mov    edx,0xc002aa98
c0014095:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014099:	89 10                	mov    DWORD PTR [eax],edx
c001409b:	90                   	nop
c001409c:	c3                   	ret    
c001409d:	90                   	nop

c001409e <Device::~Device()>:
c001409e:	83 ec 0c             	sub    esp,0xc
c00140a1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00140a5:	e8 e6 ff ff ff       	call   c0014090 <Device::~Device()>
c00140aa:	83 c4 04             	add    esp,0x4
c00140ad:	83 ec 08             	sub    esp,0x8
c00140b0:	68 58 01 00 00       	push   0x158
c00140b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140b9:	e8 fa eb ff ff       	call   c0012cb8 <operator delete(void*, unsigned long)>
c00140be:	83 c4 10             	add    esp,0x10
c00140c1:	83 c4 0c             	add    esp,0xc
c00140c4:	c3                   	ret    
c00140c5:	90                   	nop

c00140c6 <Device::findAndLoadDriver()>:
c00140c6:	c3                   	ret    
c00140c7:	90                   	nop

c00140c8 <Device::preOpenPCI(PCIDeviceInfo)>:
c00140c8:	57                   	push   edi
c00140c9:	b9 09 00 00 00       	mov    ecx,0x9
c00140ce:	56                   	push   esi
c00140cf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00140d3:	8d 74 24 10          	lea    esi,[esp+0x10]
c00140d7:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c00140e1:	81 c7 18 01 00 00    	add    edi,0x118
c00140e7:	fc                   	cld    
c00140e8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00140ea:	5e                   	pop    esi
c00140eb:	5f                   	pop    edi
c00140ec:	c3                   	ret    
c00140ed:	90                   	nop

c00140ee <Device::preOpenACPI(void*, char*, char*)>:
c00140ee:	56                   	push   esi
c00140ef:	53                   	push   ebx
c00140f0:	83 ec 08             	sub    esp,0x8
c00140f3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00140f7:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00140fb:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0014105:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014109:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c001410f:	6a 1e                	push   0x1e
c0014111:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0014117:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001411b:	81 c3 3a 01 00 00    	add    ebx,0x13a
c0014121:	50                   	push   eax
c0014122:	e8 1d c6 fe ff       	call   c0000744 <memcpy>
c0014127:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c001412b:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001412f:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c0014137:	83 c4 14             	add    esp,0x14
c001413a:	5b                   	pop    ebx
c001413b:	5e                   	pop    esi
c001413c:	e9 03 c6 fe ff       	jmp    c0000744 <memcpy>
c0014141:	90                   	nop

c0014142 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014142:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014146:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001414b:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0014152:	75 0b                	jne    c001415f <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0014154:	8b 00                	mov    eax,DWORD PTR [eax]
c0014156:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001415a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001415d:	eb 1e                	jmp    c001417d <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c001415f:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c0014164:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001416a:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0014170:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014172:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014176:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001417a:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001417d:	ff e0                	jmp    eax
c001417f:	90                   	nop

c0014180 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014180:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014184:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0014189:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0014190:	75 0b                	jne    c001419d <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0014192:	8b 00                	mov    eax,DWORD PTR [eax]
c0014194:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014198:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001419b:	eb 1e                	jmp    c00141bb <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c001419d:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c00141a2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00141a8:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00141ae:	8b 08                	mov    ecx,DWORD PTR [eax]
c00141b0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00141b4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00141b8:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c00141bb:	ff e0                	jmp    eax
c00141bd:	90                   	nop

c00141be <Device::addChild(Device*)>:
c00141be:	53                   	push   ebx
c00141bf:	83 ec 08             	sub    esp,0x8
c00141c2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00141c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00141ca:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c00141d0:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c00141d6:	8b 13                	mov    edx,DWORD PTR [ebx]
c00141d8:	85 d2                	test   edx,edx
c00141da:	74 04                	je     c00141e0 <Device::addChild(Device*)+0x22>
c00141dc:	89 d3                	mov    ebx,edx
c00141de:	eb f6                	jmp    c00141d6 <Device::addChild(Device*)+0x18>
c00141e0:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00141e3:	83 ec 0c             	sub    esp,0xc
c00141e6:	6a 08                	push   0x8
c00141e8:	e8 53 b6 ff ff       	call   c000f840 <malloc>
c00141ed:	89 03                	mov    DWORD PTR [ebx],eax
c00141ef:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00141f5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00141fc:	83 c4 18             	add    esp,0x18
c00141ff:	5b                   	pop    ebx
c0014200:	c3                   	ret    
c0014201:	90                   	nop

c0014202 <Device::removeAllChildren()>:
c0014202:	56                   	push   esi
c0014203:	53                   	push   ebx
c0014204:	52                   	push   edx
c0014205:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014209:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c001420f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014212:	74 17                	je     c001422b <Device::removeAllChildren()+0x29>
c0014214:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0014217:	85 c0                	test   eax,eax
c0014219:	74 0c                	je     c0014227 <Device::removeAllChildren()+0x25>
c001421b:	83 ec 0c             	sub    esp,0xc
c001421e:	8b 10                	mov    edx,DWORD PTR [eax]
c0014220:	50                   	push   eax
c0014221:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0014224:	83 c4 10             	add    esp,0x10
c0014227:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014229:	eb e4                	jmp    c001420f <Device::removeAllChildren()+0xd>
c001422b:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0014231:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014237:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001423d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014244:	58                   	pop    eax
c0014245:	5b                   	pop    ebx
c0014246:	5e                   	pop    esi
c0014247:	c3                   	ret    

c0014248 <Device::hibernateAll()>:
c0014248:	53                   	push   ebx
c0014249:	83 ec 14             	sub    esp,0x14
c001424c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014250:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014252:	53                   	push   ebx
c0014253:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0014256:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001425c:	83 c4 10             	add    esp,0x10
c001425f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014262:	74 0f                	je     c0014273 <Device::hibernateAll()+0x2b>
c0014264:	83 ec 0c             	sub    esp,0xc
c0014267:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001426a:	e8 d9 ff ff ff       	call   c0014248 <Device::hibernateAll()>
c001426f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014271:	eb e9                	jmp    c001425c <Device::hibernateAll()+0x14>
c0014273:	83 c4 08             	add    esp,0x8
c0014276:	5b                   	pop    ebx
c0014277:	c3                   	ret    

c0014278 <Device::wakeAll()>:
c0014278:	53                   	push   ebx
c0014279:	83 ec 14             	sub    esp,0x14
c001427c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014280:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014282:	53                   	push   ebx
c0014283:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0014286:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001428c:	83 c4 10             	add    esp,0x10
c001428f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014292:	74 0f                	je     c00142a3 <Device::wakeAll()+0x2b>
c0014294:	83 ec 0c             	sub    esp,0xc
c0014297:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001429a:	e8 d9 ff ff ff       	call   c0014278 <Device::wakeAll()>
c001429f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00142a1:	eb e9                	jmp    c001428c <Device::wakeAll()+0x14>
c00142a3:	83 c4 08             	add    esp,0x8
c00142a6:	5b                   	pop    ebx
c00142a7:	c3                   	ret    

c00142a8 <Device::detectAll()>:
c00142a8:	53                   	push   ebx
c00142a9:	83 ec 14             	sub    esp,0x14
c00142ac:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00142b0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00142b2:	53                   	push   ebx
c00142b3:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00142b6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00142bc:	83 c4 10             	add    esp,0x10
c00142bf:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00142c2:	74 0f                	je     c00142d3 <Device::detectAll()+0x2b>
c00142c4:	83 ec 0c             	sub    esp,0xc
c00142c7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00142ca:	e8 d9 ff ff ff       	call   c00142a8 <Device::detectAll()>
c00142cf:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00142d1:	eb e9                	jmp    c00142bc <Device::detectAll()+0x14>
c00142d3:	83 c4 08             	add    esp,0x8
c00142d6:	5b                   	pop    ebx
c00142d7:	c3                   	ret    

c00142d8 <Device::disableLegacyAll()>:
c00142d8:	53                   	push   ebx
c00142d9:	83 ec 14             	sub    esp,0x14
c00142dc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00142e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00142e2:	53                   	push   ebx
c00142e3:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c00142e6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00142ec:	83 c4 10             	add    esp,0x10
c00142ef:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00142f2:	74 0f                	je     c0014303 <Device::disableLegacyAll()+0x2b>
c00142f4:	83 ec 0c             	sub    esp,0xc
c00142f7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00142fa:	e8 d9 ff ff ff       	call   c00142d8 <Device::disableLegacyAll()>
c00142ff:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014301:	eb e9                	jmp    c00142ec <Device::disableLegacyAll()+0x14>
c0014303:	83 c4 08             	add    esp,0x8
c0014306:	5b                   	pop    ebx
c0014307:	c3                   	ret    

c0014308 <Device::loadDriversForAll()>:
c0014308:	53                   	push   ebx
c0014309:	83 ec 08             	sub    esp,0x8
c001430c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014310:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014316:	8b 18                	mov    ebx,DWORD PTR [eax]
c0014318:	85 db                	test   ebx,ebx
c001431a:	74 12                	je     c001432e <Device::loadDriversForAll()+0x26>
c001431c:	83 ec 0c             	sub    esp,0xc
c001431f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0014322:	e8 e1 ff ff ff       	call   c0014308 <Device::loadDriversForAll()>
c0014327:	83 c4 10             	add    esp,0x10
c001432a:	89 d8                	mov    eax,ebx
c001432c:	eb e8                	jmp    c0014316 <Device::loadDriversForAll()+0xe>
c001432e:	83 c4 08             	add    esp,0x8
c0014331:	5b                   	pop    ebx
c0014332:	c3                   	ret    
c0014333:	90                   	nop

c0014334 <Device::closeAll()>:
c0014334:	53                   	push   ebx
c0014335:	83 ec 08             	sub    esp,0x8
c0014338:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001433c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001433e:	6a 00                	push   0x0
c0014340:	6a 00                	push   0x0
c0014342:	6a 00                	push   0x0
c0014344:	53                   	push   ebx
c0014345:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014348:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001434e:	83 c4 10             	add    esp,0x10
c0014351:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014354:	74 0f                	je     c0014365 <Device::closeAll()+0x31>
c0014356:	83 ec 0c             	sub    esp,0xc
c0014359:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001435c:	e8 d3 ff ff ff       	call   c0014334 <Device::closeAll()>
c0014361:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014363:	eb e9                	jmp    c001434e <Device::closeAll()+0x1a>
c0014365:	83 c4 08             	add    esp,0x8
c0014368:	5b                   	pop    ebx
c0014369:	c3                   	ret    

c001436a <Device::powerSavingAll(PowerSavingLevel)>:
c001436a:	56                   	push   esi
c001436b:	53                   	push   ebx
c001436c:	83 ec 0c             	sub    esp,0xc
c001436f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014373:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0014377:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014379:	56                   	push   esi
c001437a:	53                   	push   ebx
c001437b:	ff 50 20             	call   DWORD PTR [eax+0x20]
c001437e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014384:	83 c4 10             	add    esp,0x10
c0014387:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001438a:	74 0f                	je     c001439b <Device::powerSavingAll(PowerSavingLevel)+0x31>
c001438c:	52                   	push   edx
c001438d:	52                   	push   edx
c001438e:	56                   	push   esi
c001438f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014392:	e8 d3 ff ff ff       	call   c001436a <Device::powerSavingAll(PowerSavingLevel)>
c0014397:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014399:	eb e9                	jmp    c0014384 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c001439b:	58                   	pop    eax
c001439c:	5b                   	pop    ebx
c001439d:	5e                   	pop    esi
c001439e:	c3                   	ret    
c001439f:	90                   	nop

c00143a0 <Device::setName(char const*)>:
c00143a0:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c00143a8:	e9 87 c4 fe ff       	jmp    c0000834 <strcpy>
c00143ad:	90                   	nop

c00143ae <Device::Device(char const*)>:
c00143ae:	83 ec 1c             	sub    esp,0x1c
c00143b1:	ba 98 aa 02 c0       	mov    edx,0xc002aa98
c00143b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143ba:	89 10                	mov    DWORD PTR [eax],edx
c00143bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143c0:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c00143ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143ce:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00143d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143dc:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00143e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143ea:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00143f4:	83 ec 08             	sub    esp,0x8
c00143f7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00143fb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00143ff:	e8 9c ff ff ff       	call   c00143a0 <Device::setName(char const*)>
c0014404:	83 c4 10             	add    esp,0x10
c0014407:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c001440f:	83 ec 0c             	sub    esp,0xc
c0014412:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014416:	e8 25 b4 ff ff       	call   c000f840 <malloc>
c001441b:	83 c4 10             	add    esp,0x10
c001441e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014424:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001442b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001442f:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0014435:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014439:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001443f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014445:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014449:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001444f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014456:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001445a:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0014461:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014465:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c001446c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014470:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001447a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001447e:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0014488:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001448c:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0014496:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001449a:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c00144a4:	90                   	nop
c00144a5:	83 c4 1c             	add    esp,0x1c
c00144a8:	c3                   	ret    
c00144a9:	90                   	nop

c00144aa <Device::getName()>:
c00144aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00144ae:	05 d0 00 00 00       	add    eax,0xd0
c00144b3:	c3                   	ret    

c00144b4 <DriverlessDevice::DriverlessDevice(char const*)>:
c00144b4:	83 ec 0c             	sub    esp,0xc
c00144b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00144bb:	83 ec 08             	sub    esp,0x8
c00144be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00144c2:	50                   	push   eax
c00144c3:	e8 e6 fe ff ff       	call   c00143ae <Device::Device(char const*)>
c00144c8:	83 c4 10             	add    esp,0x10
c00144cb:	ba c4 aa 02 c0       	mov    edx,0xc002aac4
c00144d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00144d4:	89 10                	mov    DWORD PTR [eax],edx
c00144d6:	90                   	nop
c00144d7:	83 c4 0c             	add    esp,0xc
c00144da:	c3                   	ret    
c00144db:	90                   	nop

c00144dc <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c00144dc:	57                   	push   edi
c00144dd:	56                   	push   esi
c00144de:	53                   	push   ebx
c00144df:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00144e3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00144e7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00144eb:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c00144f1:	75 0c                	jne    c00144ff <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c00144f3:	52                   	push   edx
c00144f4:	52                   	push   edx
c00144f5:	53                   	push   ebx
c00144f6:	56                   	push   esi
c00144f7:	e8 be 42 01 00       	call   c00287ba <LinkedList<Device>::addElement(Device*)>
c00144fc:	83 c4 10             	add    esp,0x10
c00144ff:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014505:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014508:	74 12                	je     c001451c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c001450a:	50                   	push   eax
c001450b:	57                   	push   edi
c001450c:	56                   	push   esi
c001450d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014510:	e8 c7 ff ff ff       	call   c00144dc <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014515:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014517:	83 c4 10             	add    esp,0x10
c001451a:	eb e9                	jmp    c0014505 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c001451c:	5b                   	pop    ebx
c001451d:	5e                   	pop    esi
c001451e:	5f                   	pop    edi
c001451f:	c3                   	ret    

c0014520 <getDevicesOfType(DeviceType)>:
c0014520:	53                   	push   ebx
c0014521:	83 ec 14             	sub    esp,0x14
c0014524:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014528:	53                   	push   ebx
c0014529:	e8 68 43 01 00       	call   c0028896 <LinkedList<Device>::LinkedList()>
c001452e:	83 c4 0c             	add    esp,0xc
c0014531:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014535:	53                   	push   ebx
c0014536:	ff 35 48 e2 02 c0    	push   DWORD PTR ds:0xc002e248
c001453c:	e8 9b ff ff ff       	call   c00144dc <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014541:	89 d8                	mov    eax,ebx
c0014543:	83 c4 18             	add    esp,0x18
c0014546:	5b                   	pop    ebx
c0014547:	c2 04 00             	ret    0x4

c001454a <HardDiskController::HardDiskController(char const*)>:
c001454a:	83 ec 0c             	sub    esp,0xc
c001454d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014551:	83 ec 08             	sub    esp,0x8
c0014554:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014558:	50                   	push   eax
c0014559:	e8 50 fe ff ff       	call   c00143ae <Device::Device(char const*)>
c001455e:	83 c4 10             	add    esp,0x10
c0014561:	ba f0 aa 02 c0       	mov    edx,0xc002aaf0
c0014566:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001456a:	89 10                	mov    DWORD PTR [eax],edx
c001456c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014570:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c001457a:	90                   	nop
c001457b:	83 c4 0c             	add    esp,0xc
c001457e:	c3                   	ret    
c001457f:	90                   	nop

c0014580 <HardDiskController::~HardDiskController()>:
c0014580:	83 ec 0c             	sub    esp,0xc
c0014583:	ba f0 aa 02 c0       	mov    edx,0xc002aaf0
c0014588:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001458c:	89 10                	mov    DWORD PTR [eax],edx
c001458e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014592:	83 ec 0c             	sub    esp,0xc
c0014595:	50                   	push   eax
c0014596:	e8 f5 fa ff ff       	call   c0014090 <Device::~Device()>
c001459b:	83 c4 10             	add    esp,0x10
c001459e:	90                   	nop
c001459f:	83 c4 0c             	add    esp,0xc
c00145a2:	c3                   	ret    
c00145a3:	90                   	nop

c00145a4 <HardDiskController::~HardDiskController()>:
c00145a4:	83 ec 0c             	sub    esp,0xc
c00145a7:	83 ec 0c             	sub    esp,0xc
c00145aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00145ae:	e8 cd ff ff ff       	call   c0014580 <HardDiskController::~HardDiskController()>
c00145b3:	83 c4 10             	add    esp,0x10
c00145b6:	83 ec 08             	sub    esp,0x8
c00145b9:	68 58 01 00 00       	push   0x158
c00145be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00145c2:	e8 f1 e6 ff ff       	call   c0012cb8 <operator delete(void*, unsigned long)>
c00145c7:	83 c4 10             	add    esp,0x10
c00145ca:	83 c4 0c             	add    esp,0xc
c00145cd:	c3                   	ret    

c00145ce <PhysicalDisk::eject()>:
c00145ce:	83 ec 18             	sub    esp,0x18
c00145d1:	68 14 ab 02 c0       	push   0xc002ab14
c00145d6:	e8 bd e7 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c00145db:	83 c8 ff             	or     eax,0xffffffff
c00145de:	83 c4 1c             	add    esp,0x1c
c00145e1:	c3                   	ret    

c00145e2 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c00145e2:	83 ec 0c             	sub    esp,0xc
c00145e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145e9:	83 ec 08             	sub    esp,0x8
c00145ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00145f0:	50                   	push   eax
c00145f1:	e8 b8 fd ff ff       	call   c00143ae <Device::Device(char const*)>
c00145f6:	83 c4 10             	add    esp,0x10
c00145f9:	ba 44 ab 02 c0       	mov    edx,0xc002ab44
c00145fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014602:	89 10                	mov    DWORD PTR [eax],edx
c0014604:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014608:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001460f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014613:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c001461a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001461e:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0014628:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001462c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014630:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0014636:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001463a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014644:	90                   	nop
c0014645:	83 c4 0c             	add    esp,0xc
c0014648:	c3                   	ret    
c0014649:	90                   	nop

c001464a <PhysicalDisk::startCache()>:
c001464a:	56                   	push   esi
c001464b:	53                   	push   ebx
c001464c:	83 ec 10             	sub    esp,0x10
c001464f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014653:	6a 44                	push   0x44
c0014655:	e8 e6 b1 ff ff       	call   c000f840 <malloc>
c001465a:	89 c6                	mov    esi,eax
c001465c:	58                   	pop    eax
c001465d:	5a                   	pop    edx
c001465e:	53                   	push   ebx
c001465f:	56                   	push   esi
c0014660:	e8 5f 27 00 00       	call   c0016dc4 <VCache::VCache(PhysicalDisk*)>
c0014665:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c001466b:	83 c4 14             	add    esp,0x14
c001466e:	5b                   	pop    ebx
c001466f:	5e                   	pop    esi
c0014670:	c3                   	ret    
c0014671:	90                   	nop

c0014672 <PhysicalDisk::~PhysicalDisk()>:
c0014672:	83 ec 0c             	sub    esp,0xc
c0014675:	ba 44 ab 02 c0       	mov    edx,0xc002ab44
c001467a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001467e:	89 10                	mov    DWORD PTR [eax],edx
c0014680:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014684:	83 ec 0c             	sub    esp,0xc
c0014687:	50                   	push   eax
c0014688:	e8 03 fa ff ff       	call   c0014090 <Device::~Device()>
c001468d:	83 c4 10             	add    esp,0x10
c0014690:	90                   	nop
c0014691:	83 c4 0c             	add    esp,0xc
c0014694:	c3                   	ret    
c0014695:	90                   	nop

c0014696 <PhysicalDisk::~PhysicalDisk()>:
c0014696:	83 ec 0c             	sub    esp,0xc
c0014699:	83 ec 0c             	sub    esp,0xc
c001469c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146a0:	e8 cd ff ff ff       	call   c0014672 <PhysicalDisk::~PhysicalDisk()>
c00146a5:	83 c4 10             	add    esp,0x10
c00146a8:	83 ec 08             	sub    esp,0x8
c00146ab:	68 6c 01 00 00       	push   0x16c
c00146b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146b4:	e8 ff e5 ff ff       	call   c0012cb8 <operator delete(void*, unsigned long)>
c00146b9:	83 c4 10             	add    esp,0x10
c00146bc:	83 c4 0c             	add    esp,0xc
c00146bf:	c3                   	ret    

c00146c0 <FPU::FPU(char const*)>:
c00146c0:	83 ec 0c             	sub    esp,0xc
c00146c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146c7:	83 ec 08             	sub    esp,0x8
c00146ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146ce:	50                   	push   eax
c00146cf:	e8 da fc ff ff       	call   c00143ae <Device::Device(char const*)>
c00146d4:	83 c4 10             	add    esp,0x10
c00146d7:	ba 88 ab 02 c0       	mov    edx,0xc002ab88
c00146dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146e0:	89 10                	mov    DWORD PTR [eax],edx
c00146e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146e6:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c00146f0:	90                   	nop
c00146f1:	83 c4 0c             	add    esp,0xc
c00146f4:	c3                   	ret    
c00146f5:	90                   	nop

c00146f6 <FPU::~FPU()>:
c00146f6:	83 ec 0c             	sub    esp,0xc
c00146f9:	ba 88 ab 02 c0       	mov    edx,0xc002ab88
c00146fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014702:	89 10                	mov    DWORD PTR [eax],edx
c0014704:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014708:	83 ec 0c             	sub    esp,0xc
c001470b:	50                   	push   eax
c001470c:	e8 7f f9 ff ff       	call   c0014090 <Device::~Device()>
c0014711:	83 c4 10             	add    esp,0x10
c0014714:	90                   	nop
c0014715:	83 c4 0c             	add    esp,0xc
c0014718:	c3                   	ret    
c0014719:	90                   	nop

c001471a <FPU::~FPU()>:
c001471a:	83 ec 0c             	sub    esp,0xc
c001471d:	83 ec 0c             	sub    esp,0xc
c0014720:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014724:	e8 cd ff ff ff       	call   c00146f6 <FPU::~FPU()>
c0014729:	83 c4 10             	add    esp,0x10
c001472c:	83 ec 08             	sub    esp,0x8
c001472f:	68 58 01 00 00       	push   0x158
c0014734:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014738:	e8 7b e5 ff ff       	call   c0012cb8 <operator delete(void*, unsigned long)>
c001473d:	83 c4 10             	add    esp,0x10
c0014740:	83 c4 0c             	add    esp,0xc
c0014743:	c3                   	ret    

c0014744 <setupFPU()>:
c0014744:	53                   	push   ebx
c0014745:	83 ec 08             	sub    esp,0x8
c0014748:	8b 15 48 e2 02 c0    	mov    edx,DWORD PTR ds:0xc002e248
c001474e:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c0014755:	74 19                	je     c0014770 <setupFPU()+0x2c>
c0014757:	83 ec 0c             	sub    esp,0xc
c001475a:	68 58 01 00 00       	push   0x158
c001475f:	e8 dc b0 ff ff       	call   c000f840 <malloc>
c0014764:	89 c3                	mov    ebx,eax
c0014766:	89 04 24             	mov    DWORD PTR [esp],eax
c0014769:	e8 92 0c 01 00       	call   c0025400 <AVX::AVX()>
c001476e:	eb 5b                	jmp    c00147cb <setupFPU()+0x87>
c0014770:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0014776:	84 c0                	test   al,al
c0014778:	79 19                	jns    c0014793 <setupFPU()+0x4f>
c001477a:	83 ec 0c             	sub    esp,0xc
c001477d:	68 58 01 00 00       	push   0x158
c0014782:	e8 b9 b0 ff ff       	call   c000f840 <malloc>
c0014787:	89 c3                	mov    ebx,eax
c0014789:	89 04 24             	mov    DWORD PTR [esp],eax
c001478c:	e8 95 0d 01 00       	call   c0025526 <SSE::SSE()>
c0014791:	eb 38                	jmp    c00147cb <setupFPU()+0x87>
c0014793:	a8 20                	test   al,0x20
c0014795:	74 19                	je     c00147b0 <setupFPU()+0x6c>
c0014797:	83 ec 0c             	sub    esp,0xc
c001479a:	68 58 01 00 00       	push   0x158
c001479f:	e8 9c b0 ff ff       	call   c000f840 <malloc>
c00147a4:	89 c3                	mov    ebx,eax
c00147a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00147a9:	e8 e2 0c 01 00       	call   c0025490 <MMX::MMX()>
c00147ae:	eb 1b                	jmp    c00147cb <setupFPU()+0x87>
c00147b0:	a8 10                	test   al,0x10
c00147b2:	74 1c                	je     c00147d0 <setupFPU()+0x8c>
c00147b4:	83 ec 0c             	sub    esp,0xc
c00147b7:	68 58 01 00 00       	push   0x158
c00147bc:	e8 7f b0 ff ff       	call   c000f840 <malloc>
c00147c1:	89 c3                	mov    ebx,eax
c00147c3:	89 04 24             	mov    DWORD PTR [esp],eax
c00147c6:	e8 e9 0d 01 00       	call   c00255b4 <x87::x87()>
c00147cb:	83 c4 10             	add    esp,0x10
c00147ce:	eb 24                	jmp    c00147f4 <setupFPU()+0xb0>
c00147d0:	83 e0 ef             	and    eax,0xffffffef
c00147d3:	83 ec 0c             	sub    esp,0xc
c00147d6:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00147dc:	68 74 ab 02 c0       	push   0xc002ab74
c00147e1:	e8 b2 e5 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c00147e6:	0f 20 c0             	mov    eax,cr0
c00147e9:	83 c8 04             	or     eax,0x4
c00147ec:	0f 22 c0             	mov    cr0,eax
c00147ef:	31 db                	xor    ebx,ebx
c00147f1:	83 c4 10             	add    esp,0x10
c00147f4:	89 d8                	mov    eax,ebx
c00147f6:	83 c4 08             	add    esp,0x8
c00147f9:	5b                   	pop    ebx
c00147fa:	c3                   	ret    
c00147fb:	90                   	nop

c00147fc <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c00147fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014800:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014804:	c1 e0 04             	shl    eax,0x4
c0014807:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001480b:	8d 50 10             	lea    edx,[eax+0x10]
c001480e:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0014814:	74 08                	je     c001481e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0014816:	83 c0 04             	add    eax,0x4
c0014819:	39 d0                	cmp    eax,edx
c001481b:	75 f1                	jne    c001480e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c001481d:	c3                   	ret    
c001481e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014828:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014832:	eb e2                	jmp    c0014816 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0014834 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0014834:	57                   	push   edi
c0014835:	31 c0                	xor    eax,eax
c0014837:	56                   	push   esi
c0014838:	53                   	push   ebx
c0014839:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001483d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014841:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0014845:	89 da                	mov    edx,ebx
c0014847:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001484b:	c1 e2 04             	shl    edx,0x4
c001484e:	01 ca                	add    edx,ecx
c0014850:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0014858:	74 16                	je     c0014870 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c001485a:	40                   	inc    eax
c001485b:	83 f8 04             	cmp    eax,0x4
c001485e:	75 f0                	jne    c0014850 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0014860:	c7 44 24 10 b8 ab 02 c0 	mov    DWORD PTR [esp+0x10],0xc002abb8
c0014868:	5b                   	pop    ebx
c0014869:	5e                   	pop    esi
c001486a:	5f                   	pop    edi
c001486b:	e9 03 5c 00 00       	jmp    c001a473 <Krnl::panic(char const*)>
c0014870:	8d 04 98             	lea    eax,[eax+ebx*4]
c0014873:	8d 04 81             	lea    eax,[ecx+eax*4]
c0014876:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c001487c:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0014882:	5b                   	pop    ebx
c0014883:	5e                   	pop    esi
c0014884:	5f                   	pop    edi
c0014885:	c3                   	ret    

c0014886 <doubleFault(regs*, void*)>:
c0014886:	55                   	push   ebp
c0014887:	89 e5                	mov    ebp,esp
c0014889:	83 ec 08             	sub    esp,0x8
c001488c:	83 ec 0c             	sub    esp,0xc
c001488f:	68 f3 ab 02 c0       	push   0xc002abf3
c0014894:	e8 da 5b 00 00       	call   c001a473 <Krnl::panic(char const*)>
c0014899:	83 c4 10             	add    esp,0x10
c001489c:	90                   	nop
c001489d:	c9                   	leave  
c001489e:	c3                   	ret    
c001489f:	90                   	nop

c00148a0 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00148a0:	56                   	push   esi
c00148a1:	53                   	push   ebx
c00148a2:	50                   	push   eax
c00148a3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00148a7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00148ab:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00148b0:	75 35                	jne    c00148e7 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c00148b2:	8d 43 20             	lea    eax,[ebx+0x20]
c00148b5:	31 d2                	xor    edx,edx
c00148b7:	89 c1                	mov    ecx,eax
c00148b9:	c1 e1 04             	shl    ecx,0x4
c00148bc:	01 f1                	add    ecx,esi
c00148be:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c00148c6:	74 3e                	je     c0014906 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c00148c8:	42                   	inc    edx
c00148c9:	83 fa 04             	cmp    edx,0x4
c00148cc:	75 f0                	jne    c00148be <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c00148ce:	83 ec 0c             	sub    esp,0xc
c00148d1:	68 38 ac 02 c0       	push   0xc002ac38
c00148d6:	e8 98 5b 00 00       	call   c001a473 <Krnl::panic(char const*)>
c00148db:	83 c4 10             	add    esp,0x10
c00148de:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00148e3:	5a                   	pop    edx
c00148e4:	5b                   	pop    ebx
c00148e5:	5e                   	pop    esi
c00148e6:	c3                   	ret    
c00148e7:	83 ec 0c             	sub    esp,0xc
c00148ea:	56                   	push   esi
c00148eb:	e8 ba fb ff ff       	call   c00144aa <Device::getName()>
c00148f0:	83 c4 10             	add    esp,0x10
c00148f3:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00148f6:	75 ba                	jne    c00148b2 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00148f8:	83 fb 0f             	cmp    ebx,0xf
c00148fb:	7f 29                	jg     c0014926 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c00148fd:	0f b6 9b a0 d4 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd2b60]
c0014904:	eb ac                	jmp    c00148b2 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014906:	8d 04 82             	lea    eax,[edx+eax*4]
c0014909:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001490d:	8d 04 86             	lea    eax,[esi+eax*4]
c0014910:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014916:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001491a:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0014920:	89 d8                	mov    eax,ebx
c0014922:	5a                   	pop    edx
c0014923:	5b                   	pop    ebx
c0014924:	5e                   	pop    esi
c0014925:	c3                   	ret    
c0014926:	83 ec 0c             	sub    esp,0xc
c0014929:	68 00 ac 02 c0       	push   0xc002ac00
c001492e:	e8 40 5b 00 00       	call   c001a473 <Krnl::panic(char const*)>
c0014933:	83 c4 10             	add    esp,0x10
c0014936:	e9 77 ff ff ff       	jmp    c00148b2 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c001493b:	90                   	nop

c001493c <InterruptController::clearAllHandlers(int, bool)>:
c001493c:	56                   	push   esi
c001493d:	53                   	push   ebx
c001493e:	52                   	push   edx
c001493f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014943:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014947:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001494c:	75 61                	jne    c00149af <InterruptController::clearAllHandlers(int, bool)+0x73>
c001494e:	8d 46 20             	lea    eax,[esi+0x20]
c0014951:	c1 e6 04             	shl    esi,0x4
c0014954:	c1 e0 04             	shl    eax,0x4
c0014957:	01 de                	add    esi,ebx
c0014959:	01 d8                	add    eax,ebx
c001495b:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014965:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c001496f:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014979:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014983:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c001498d:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014997:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c00149a1:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c00149ab:	58                   	pop    eax
c00149ac:	5b                   	pop    ebx
c00149ad:	5e                   	pop    esi
c00149ae:	c3                   	ret    
c00149af:	83 ec 0c             	sub    esp,0xc
c00149b2:	53                   	push   ebx
c00149b3:	e8 f2 fa ff ff       	call   c00144aa <Device::getName()>
c00149b8:	83 c4 10             	add    esp,0x10
c00149bb:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00149be:	75 8e                	jne    c001494e <InterruptController::clearAllHandlers(int, bool)+0x12>
c00149c0:	83 fe 0f             	cmp    esi,0xf
c00149c3:	7f 09                	jg     c00149ce <InterruptController::clearAllHandlers(int, bool)+0x92>
c00149c5:	0f b6 b6 a0 d4 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd2b60]
c00149cc:	eb 80                	jmp    c001494e <InterruptController::clearAllHandlers(int, bool)+0x12>
c00149ce:	83 ec 0c             	sub    esp,0xc
c00149d1:	68 74 ac 02 c0       	push   0xc002ac74
c00149d6:	e8 98 5a 00 00       	call   c001a473 <Krnl::panic(char const*)>
c00149db:	83 c4 10             	add    esp,0x10
c00149de:	e9 6b ff ff ff       	jmp    c001494e <InterruptController::clearAllHandlers(int, bool)+0x12>
c00149e3:	90                   	nop

c00149e4 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c00149e4:	56                   	push   esi
c00149e5:	53                   	push   ebx
c00149e6:	52                   	push   edx
c00149e7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00149eb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00149ef:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00149f4:	75 3a                	jne    c0014a30 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c00149f6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00149fa:	8d 50 20             	lea    edx,[eax+0x20]
c00149fd:	c1 e2 04             	shl    edx,0x4
c0014a00:	8d 04 16             	lea    eax,[esi+edx*1]
c0014a03:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014a07:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014a0d:	74 0b                	je     c0014a1a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014a0f:	83 c0 04             	add    eax,0x4
c0014a12:	39 d0                	cmp    eax,edx
c0014a14:	75 f1                	jne    c0014a07 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014a16:	58                   	pop    eax
c0014a17:	5b                   	pop    ebx
c0014a18:	5e                   	pop    esi
c0014a19:	c3                   	ret    
c0014a1a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014a24:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014a2e:	eb df                	jmp    c0014a0f <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014a30:	83 ec 0c             	sub    esp,0xc
c0014a33:	56                   	push   esi
c0014a34:	e8 71 fa ff ff       	call   c00144aa <Device::getName()>
c0014a39:	83 c4 10             	add    esp,0x10
c0014a3c:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014a3f:	75 b5                	jne    c00149f6 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014a41:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014a46:	7f 11                	jg     c0014a59 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014a48:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014a4c:	0f b6 80 a0 d4 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd2b60]
c0014a53:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014a57:	eb 9d                	jmp    c00149f6 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014a59:	83 ec 0c             	sub    esp,0xc
c0014a5c:	68 74 ac 02 c0       	push   0xc002ac74
c0014a61:	e8 0d 5a 00 00       	call   c001a473 <Krnl::panic(char const*)>
c0014a66:	83 c4 10             	add    esp,0x10
c0014a69:	eb 8b                	jmp    c00149f6 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014a6b <nmiHandler(regs*, void*)>:
c0014a6b:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c0014a70:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014a74:	e9 13 a5 ff ff       	jmp    c000ef8c <Computer::handleNMI()>

c0014a79 <int_handler>:
c0014a79:	55                   	push   ebp
c0014a7a:	57                   	push   edi
c0014a7b:	56                   	push   esi
c0014a7c:	53                   	push   ebx
c0014a7d:	83 ec 0c             	sub    esp,0xc
c0014a80:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014a84:	80 3d a4 0d 03 c0 00 	cmp    BYTE PTR ds:0xc0030da4,0x0
c0014a8b:	74 0b                	je     c0014a98 <int_handler+0x1f>
c0014a8d:	fa                   	cli    
c0014a8e:	f4                   	hlt    
c0014a8f:	80 3d a4 0d 03 c0 00 	cmp    BYTE PTR ds:0xc0030da4,0x0
c0014a96:	75 f5                	jne    c0014a8d <int_handler+0x14>
c0014a98:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c0014a9d:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014aa0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014aa6:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014aac:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014aaf:	83 f8 17             	cmp    eax,0x17
c0014ab2:	77 13                	ja     c0014ac7 <int_handler+0x4e>
c0014ab4:	83 ec 08             	sub    esp,0x8
c0014ab7:	8b 17                	mov    edx,DWORD PTR [edi]
c0014ab9:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014abc:	0f b6 c0             	movzx  eax,al
c0014abf:	50                   	push   eax
c0014ac0:	57                   	push   edi
c0014ac1:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014ac4:	83 c4 10             	add    esp,0x10
c0014ac7:	83 c3 15             	add    ebx,0x15
c0014aca:	c1 e3 04             	shl    ebx,0x4
c0014acd:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014ad1:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014ad8:	31 db                	xor    ebx,ebx
c0014ada:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014ade:	85 c0                	test   eax,eax
c0014ae0:	74 13                	je     c0014af5 <int_handler+0x7c>
c0014ae2:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014ae5:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014ae9:	74 1c                	je     c0014b07 <int_handler+0x8e>
c0014aeb:	83 ec 08             	sub    esp,0x8
c0014aee:	52                   	push   edx
c0014aef:	56                   	push   esi
c0014af0:	ff d0                	call   eax
c0014af2:	83 c4 10             	add    esp,0x10
c0014af5:	43                   	inc    ebx
c0014af6:	83 fb 04             	cmp    ebx,0x4
c0014af9:	75 df                	jne    c0014ada <int_handler+0x61>
c0014afb:	83 c4 0c             	add    esp,0xc
c0014afe:	31 c0                	xor    eax,eax
c0014b00:	5b                   	pop    ebx
c0014b01:	31 d2                	xor    edx,edx
c0014b03:	5e                   	pop    esi
c0014b04:	5f                   	pop    edi
c0014b05:	5d                   	pop    ebp
c0014b06:	c3                   	ret    
c0014b07:	83 ec 08             	sub    esp,0x8
c0014b0a:	52                   	push   edx
c0014b0b:	56                   	push   esi
c0014b0c:	ff d0                	call   eax
c0014b0e:	83 c4 10             	add    esp,0x10
c0014b11:	83 c4 0c             	add    esp,0xc
c0014b14:	5b                   	pop    ebx
c0014b15:	5e                   	pop    esi
c0014b16:	5f                   	pop    edi
c0014b17:	5d                   	pop    ebp
c0014b18:	c3                   	ret    
c0014b19:	90                   	nop

c0014b1a <InterruptController::InterruptController(char const*)>:
c0014b1a:	83 ec 1c             	sub    esp,0x1c
c0014b1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b21:	83 ec 08             	sub    esp,0x8
c0014b24:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014b28:	50                   	push   eax
c0014b29:	e8 80 f8 ff ff       	call   c00143ae <Device::Device(char const*)>
c0014b2e:	83 c4 10             	add    esp,0x10
c0014b31:	ba 30 af 02 c0       	mov    edx,0xc002af30
c0014b36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b3a:	89 10                	mov    DWORD PTR [eax],edx
c0014b3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b40:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014b4a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014b52:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014b5a:	7f 5e                	jg     c0014bba <InterruptController::InterruptController(char const*)+0xa0>
c0014b5c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014b64:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014b69:	7f 49                	jg     c0014bb4 <InterruptController::InterruptController(char const*)+0x9a>
c0014b6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b6f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014b73:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014b7a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014b7e:	01 ca                	add    edx,ecx
c0014b80:	83 c2 54             	add    edx,0x54
c0014b83:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014b8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b8f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014b93:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014b9a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014b9e:	01 ca                	add    edx,ecx
c0014ba0:	81 c2 54 04 00 00    	add    edx,0x454
c0014ba6:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014bae:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014bb2:	eb b0                	jmp    c0014b64 <InterruptController::InterruptController(char const*)+0x4a>
c0014bb4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014bb8:	eb 98                	jmp    c0014b52 <InterruptController::InterruptController(char const*)+0x38>
c0014bba:	90                   	nop
c0014bbb:	83 c4 1c             	add    esp,0x1c
c0014bbe:	c3                   	ret    
c0014bbf:	90                   	nop

c0014bc0 <InterruptController::~InterruptController()>:
c0014bc0:	83 ec 0c             	sub    esp,0xc
c0014bc3:	ba 30 af 02 c0       	mov    edx,0xc002af30
c0014bc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014bcc:	89 10                	mov    DWORD PTR [eax],edx
c0014bce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014bd2:	83 ec 0c             	sub    esp,0xc
c0014bd5:	50                   	push   eax
c0014bd6:	e8 b5 f4 ff ff       	call   c0014090 <Device::~Device()>
c0014bdb:	83 c4 10             	add    esp,0x10
c0014bde:	90                   	nop
c0014bdf:	83 c4 0c             	add    esp,0xc
c0014be2:	c3                   	ret    
c0014be3:	90                   	nop

c0014be4 <InterruptController::~InterruptController()>:
c0014be4:	83 ec 0c             	sub    esp,0xc
c0014be7:	83 ec 0c             	sub    esp,0xc
c0014bea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014bee:	e8 cd ff ff ff       	call   c0014bc0 <InterruptController::~InterruptController()>
c0014bf3:	83 c4 10             	add    esp,0x10
c0014bf6:	83 ec 08             	sub    esp,0x8
c0014bf9:	68 58 21 00 00       	push   0x2158
c0014bfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014c02:	e8 b1 e0 ff ff       	call   c0012cb8 <operator delete(void*, unsigned long)>
c0014c07:	83 c4 10             	add    esp,0x10
c0014c0a:	83 c4 0c             	add    esp,0xc
c0014c0d:	c3                   	ret    

c0014c0e <displayDebugInfo(regs*)>:
c0014c0e:	55                   	push   ebp
c0014c0f:	57                   	push   edi
c0014c10:	56                   	push   esi
c0014c11:	53                   	push   ebx
c0014c12:	83 ec 24             	sub    esp,0x24
c0014c15:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014c19:	0f 20 c2             	mov    edx,cr0
c0014c1c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014c20:	0f 20 d7             	mov    edi,cr2
c0014c23:	0f 20 de             	mov    esi,cr3
c0014c26:	0f 20 e5             	mov    ebp,cr4
c0014c29:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014c2c:	68 ae ac 02 c0       	push   0xc002acae
c0014c31:	e8 62 e1 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0014c36:	59                   	pop    ecx
c0014c37:	58                   	pop    eax
c0014c38:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014c3b:	68 b9 ac 02 c0       	push   0xc002acb9
c0014c40:	e8 53 e1 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0014c45:	58                   	pop    eax
c0014c46:	5a                   	pop    edx
c0014c47:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014c4a:	68 c4 ac 02 c0       	push   0xc002acc4
c0014c4f:	e8 44 e1 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0014c54:	59                   	pop    ecx
c0014c55:	58                   	pop    eax
c0014c56:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014c59:	68 cf ac 02 c0       	push   0xc002accf
c0014c5e:	e8 35 e1 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0014c63:	58                   	pop    eax
c0014c64:	5a                   	pop    edx
c0014c65:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014c68:	68 da ac 02 c0       	push   0xc002acda
c0014c6d:	e8 26 e1 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0014c72:	59                   	pop    ecx
c0014c73:	58                   	pop    eax
c0014c74:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014c77:	68 e5 ac 02 c0       	push   0xc002ace5
c0014c7c:	e8 17 e1 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0014c81:	58                   	pop    eax
c0014c82:	5a                   	pop    edx
c0014c83:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014c86:	68 f0 ac 02 c0       	push   0xc002acf0
c0014c8b:	e8 08 e1 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0014c90:	59                   	pop    ecx
c0014c91:	58                   	pop    eax
c0014c92:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014c95:	68 fb ac 02 c0       	push   0xc002acfb
c0014c9a:	e8 f9 e0 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0014c9f:	58                   	pop    eax
c0014ca0:	5a                   	pop    edx
c0014ca1:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014ca4:	68 06 ad 02 c0       	push   0xc002ad06
c0014ca9:	e8 ea e0 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0014cae:	59                   	pop    ecx
c0014caf:	58                   	pop    eax
c0014cb0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014cb3:	68 15 ad 02 c0       	push   0xc002ad15
c0014cb8:	e8 db e0 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0014cbd:	58                   	pop    eax
c0014cbe:	5a                   	pop    edx
c0014cbf:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014cc2:	68 20 ad 02 c0       	push   0xc002ad20
c0014cc7:	e8 cc e0 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0014ccc:	59                   	pop    ecx
c0014ccd:	58                   	pop    eax
c0014cce:	57                   	push   edi
c0014ccf:	68 2b ad 02 c0       	push   0xc002ad2b
c0014cd4:	e8 bf e0 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0014cd9:	58                   	pop    eax
c0014cda:	5a                   	pop    edx
c0014cdb:	56                   	push   esi
c0014cdc:	68 36 ad 02 c0       	push   0xc002ad36
c0014ce1:	e8 b2 e0 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0014ce6:	59                   	pop    ecx
c0014ce7:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c0014cec:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014cf2:	e8 f6 bf ff ff       	call   c0010ced <setActiveTerminal(VgaText*)>
c0014cf7:	58                   	pop    eax
c0014cf8:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014cfb:	5a                   	pop    edx
c0014cfc:	c1 e0 05             	shl    eax,0x5
c0014cff:	05 00 d2 02 c0       	add    eax,0xc002d200
c0014d04:	50                   	push   eax
c0014d05:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c0014d0a:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014d10:	e8 f7 c3 ff ff       	call   c001110c <VgaText::puts(char const*)>
c0014d15:	59                   	pop    ecx
c0014d16:	58                   	pop    eax
c0014d17:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c0014d1c:	68 41 ad 02 c0       	push   0xc002ad41
c0014d21:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014d27:	e8 e0 c3 ff ff       	call   c001110c <VgaText::puts(char const*)>
c0014d2c:	58                   	pop    eax
c0014d2d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014d32:	5a                   	pop    edx
c0014d33:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014d36:	83 c0 0c             	add    eax,0xc
c0014d39:	50                   	push   eax
c0014d3a:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c0014d3f:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014d45:	e8 c2 c3 ff ff       	call   c001110c <VgaText::puts(char const*)>
c0014d4a:	59                   	pop    ecx
c0014d4b:	58                   	pop    eax
c0014d4c:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c0014d51:	68 4a ad 02 c0       	push   0xc002ad4a
c0014d56:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014d5c:	e8 ab c3 ff ff       	call   c001110c <VgaText::puts(char const*)>
c0014d61:	58                   	pop    eax
c0014d62:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c0014d67:	5a                   	pop    edx
c0014d68:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014d6b:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014d71:	e8 bc c3 ff ff       	call   c0011132 <VgaText::putx(unsigned int)>
c0014d76:	59                   	pop    ecx
c0014d77:	58                   	pop    eax
c0014d78:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c0014d7d:	68 52 ad 02 c0       	push   0xc002ad52
c0014d82:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014d88:	e8 7f c3 ff ff       	call   c001110c <VgaText::puts(char const*)>
c0014d8d:	58                   	pop    eax
c0014d8e:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c0014d93:	5a                   	pop    edx
c0014d94:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014d97:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014d9d:	e8 90 c3 ff ff       	call   c0011132 <VgaText::putx(unsigned int)>
c0014da2:	59                   	pop    ecx
c0014da3:	58                   	pop    eax
c0014da4:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c0014da9:	68 5a ad 02 c0       	push   0xc002ad5a
c0014dae:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014db4:	e8 53 c3 ff ff       	call   c001110c <VgaText::puts(char const*)>
c0014db9:	58                   	pop    eax
c0014dba:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c0014dbf:	5a                   	pop    edx
c0014dc0:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014dc3:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014dc9:	e8 64 c3 ff ff       	call   c0011132 <VgaText::putx(unsigned int)>
c0014dce:	59                   	pop    ecx
c0014dcf:	58                   	pop    eax
c0014dd0:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c0014dd5:	68 62 ad 02 c0       	push   0xc002ad62
c0014dda:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014de0:	e8 27 c3 ff ff       	call   c001110c <VgaText::puts(char const*)>
c0014de5:	58                   	pop    eax
c0014de6:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c0014deb:	5a                   	pop    edx
c0014dec:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014def:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014df5:	e8 38 c3 ff ff       	call   c0011132 <VgaText::putx(unsigned int)>
c0014dfa:	59                   	pop    ecx
c0014dfb:	58                   	pop    eax
c0014dfc:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c0014e01:	68 6a ad 02 c0       	push   0xc002ad6a
c0014e06:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014e0c:	e8 fb c2 ff ff       	call   c001110c <VgaText::puts(char const*)>
c0014e11:	58                   	pop    eax
c0014e12:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c0014e17:	5a                   	pop    edx
c0014e18:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014e1b:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014e21:	e8 0c c3 ff ff       	call   c0011132 <VgaText::putx(unsigned int)>
c0014e26:	59                   	pop    ecx
c0014e27:	58                   	pop    eax
c0014e28:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c0014e2d:	68 72 ad 02 c0       	push   0xc002ad72
c0014e32:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014e38:	e8 cf c2 ff ff       	call   c001110c <VgaText::puts(char const*)>
c0014e3d:	58                   	pop    eax
c0014e3e:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c0014e43:	5a                   	pop    edx
c0014e44:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014e47:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014e4d:	e8 e0 c2 ff ff       	call   c0011132 <VgaText::putx(unsigned int)>
c0014e52:	59                   	pop    ecx
c0014e53:	58                   	pop    eax
c0014e54:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c0014e59:	68 7a ad 02 c0       	push   0xc002ad7a
c0014e5e:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014e64:	e8 a3 c2 ff ff       	call   c001110c <VgaText::puts(char const*)>
c0014e69:	58                   	pop    eax
c0014e6a:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c0014e6f:	5a                   	pop    edx
c0014e70:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014e74:	52                   	push   edx
c0014e75:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014e7b:	e8 b2 c2 ff ff       	call   c0011132 <VgaText::putx(unsigned int)>
c0014e80:	59                   	pop    ecx
c0014e81:	58                   	pop    eax
c0014e82:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c0014e87:	68 83 ad 02 c0       	push   0xc002ad83
c0014e8c:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014e92:	e8 75 c2 ff ff       	call   c001110c <VgaText::puts(char const*)>
c0014e97:	58                   	pop    eax
c0014e98:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c0014e9d:	5a                   	pop    edx
c0014e9e:	57                   	push   edi
c0014e9f:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014ea5:	e8 88 c2 ff ff       	call   c0011132 <VgaText::putx(unsigned int)>
c0014eaa:	59                   	pop    ecx
c0014eab:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c0014eb0:	5f                   	pop    edi
c0014eb1:	68 8b ad 02 c0       	push   0xc002ad8b
c0014eb6:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014ebc:	e8 4b c2 ff ff       	call   c001110c <VgaText::puts(char const*)>
c0014ec1:	58                   	pop    eax
c0014ec2:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c0014ec7:	5a                   	pop    edx
c0014ec8:	56                   	push   esi
c0014ec9:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014ecf:	e8 5e c2 ff ff       	call   c0011132 <VgaText::putx(unsigned int)>
c0014ed4:	59                   	pop    ecx
c0014ed5:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c0014eda:	5e                   	pop    esi
c0014edb:	68 93 ad 02 c0       	push   0xc002ad93
c0014ee0:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014ee6:	e8 21 c2 ff ff       	call   c001110c <VgaText::puts(char const*)>
c0014eeb:	5f                   	pop    edi
c0014eec:	58                   	pop    eax
c0014eed:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c0014ef2:	55                   	push   ebp
c0014ef3:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014ef9:	e8 34 c2 ff ff       	call   c0011132 <VgaText::putx(unsigned int)>
c0014efe:	58                   	pop    eax
c0014eff:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c0014f04:	5a                   	pop    edx
c0014f05:	68 9b ad 02 c0       	push   0xc002ad9b
c0014f0a:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014f10:	e8 f7 c1 ff ff       	call   c001110c <VgaText::puts(char const*)>
c0014f15:	0f 21 c0             	mov    eax,db0
c0014f18:	59                   	pop    ecx
c0014f19:	5e                   	pop    esi
c0014f1a:	50                   	push   eax
c0014f1b:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c0014f20:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014f26:	e8 07 c2 ff ff       	call   c0011132 <VgaText::putx(unsigned int)>
c0014f2b:	5f                   	pop    edi
c0014f2c:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c0014f31:	5d                   	pop    ebp
c0014f32:	68 a4 ad 02 c0       	push   0xc002ada4
c0014f37:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014f3d:	e8 ca c1 ff ff       	call   c001110c <VgaText::puts(char const*)>
c0014f42:	0f 21 c8             	mov    eax,db1
c0014f45:	5a                   	pop    edx
c0014f46:	59                   	pop    ecx
c0014f47:	50                   	push   eax
c0014f48:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c0014f4d:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014f53:	e8 da c1 ff ff       	call   c0011132 <VgaText::putx(unsigned int)>
c0014f58:	5e                   	pop    esi
c0014f59:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c0014f5e:	5f                   	pop    edi
c0014f5f:	68 ac ad 02 c0       	push   0xc002adac
c0014f64:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014f6a:	e8 9d c1 ff ff       	call   c001110c <VgaText::puts(char const*)>
c0014f6f:	0f 21 d0             	mov    eax,db2
c0014f72:	5d                   	pop    ebp
c0014f73:	5a                   	pop    edx
c0014f74:	50                   	push   eax
c0014f75:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c0014f7a:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014f80:	e8 ad c1 ff ff       	call   c0011132 <VgaText::putx(unsigned int)>
c0014f85:	59                   	pop    ecx
c0014f86:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c0014f8b:	5e                   	pop    esi
c0014f8c:	68 b4 ad 02 c0       	push   0xc002adb4
c0014f91:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014f97:	e8 70 c1 ff ff       	call   c001110c <VgaText::puts(char const*)>
c0014f9c:	0f 21 d8             	mov    eax,db3
c0014f9f:	5f                   	pop    edi
c0014fa0:	5d                   	pop    ebp
c0014fa1:	50                   	push   eax
c0014fa2:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c0014fa7:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014fad:	e8 80 c1 ff ff       	call   c0011132 <VgaText::putx(unsigned int)>
c0014fb2:	58                   	pop    eax
c0014fb3:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c0014fb8:	5a                   	pop    edx
c0014fb9:	68 bc ad 02 c0       	push   0xc002adbc
c0014fbe:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014fc4:	e8 43 c1 ff ff       	call   c001110c <VgaText::puts(char const*)>
c0014fc9:	0f 21 f0             	mov    eax,db6
c0014fcc:	59                   	pop    ecx
c0014fcd:	5e                   	pop    esi
c0014fce:	50                   	push   eax
c0014fcf:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c0014fd4:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014fda:	e8 53 c1 ff ff       	call   c0011132 <VgaText::putx(unsigned int)>
c0014fdf:	5f                   	pop    edi
c0014fe0:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c0014fe5:	5d                   	pop    ebp
c0014fe6:	68 c4 ad 02 c0       	push   0xc002adc4
c0014feb:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014ff1:	e8 16 c1 ff ff       	call   c001110c <VgaText::puts(char const*)>
c0014ff6:	0f 21 f8             	mov    eax,db7
c0014ff9:	5a                   	pop    edx
c0014ffa:	59                   	pop    ecx
c0014ffb:	50                   	push   eax
c0014ffc:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c0015001:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0015007:	e8 26 c1 ff ff       	call   c0011132 <VgaText::putx(unsigned int)>
c001500c:	5e                   	pop    esi
c001500d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0015010:	e8 40 85 00 00       	call   c001d555 <Thr::getDriverNameFromAddress(unsigned long)>
c0015015:	83 c4 10             	add    esp,0x10
c0015018:	85 c0                	test   eax,eax
c001501a:	74 7d                	je     c0015099 <displayDebugInfo(regs*)+0x48b>
c001501c:	89 c6                	mov    esi,eax
c001501e:	50                   	push   eax
c001501f:	50                   	push   eax
c0015020:	56                   	push   esi
c0015021:	68 cc ad 02 c0       	push   0xc002adcc
c0015026:	e8 6d dd ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001502b:	5a                   	pop    edx
c001502c:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c0015031:	59                   	pop    ecx
c0015032:	68 da ad 02 c0       	push   0xc002adda
c0015037:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001503d:	e8 ca c0 ff ff       	call   c001110c <VgaText::puts(char const*)>
c0015042:	5f                   	pop    edi
c0015043:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c0015048:	5d                   	pop    ebp
c0015049:	56                   	push   esi
c001504a:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0015050:	e8 b7 c0 ff ff       	call   c001110c <VgaText::puts(char const*)>
c0015055:	58                   	pop    eax
c0015056:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c001505b:	5a                   	pop    edx
c001505c:	68 e6 ad 02 c0       	push   0xc002ade6
c0015061:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0015067:	e8 a0 c0 ff ff       	call   c001110c <VgaText::puts(char const*)>
c001506c:	59                   	pop    ecx
c001506d:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c0015072:	8b b8 26 19 00 00    	mov    edi,DWORD PTR [eax+0x1926]
c0015078:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001507b:	e8 0c 85 00 00       	call   c001d58c <Thr::getDriverOffsetFromAddress(unsigned long)>
c0015080:	5b                   	pop    ebx
c0015081:	5d                   	pop    ebp
c0015082:	50                   	push   eax
c0015083:	57                   	push   edi
c0015084:	e8 a9 c0 ff ff       	call   c0011132 <VgaText::putx(unsigned int)>
c0015089:	58                   	pop    eax
c001508a:	5a                   	pop    edx
c001508b:	56                   	push   esi
c001508c:	68 f2 ad 02 c0       	push   0xc002adf2
c0015091:	e8 02 dd ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0015096:	83 c4 10             	add    esp,0x10
c0015099:	fa                   	cli    
c001509a:	f4                   	hlt    
c001509b:	eb fe                	jmp    c001509b <displayDebugInfo(regs*)+0x48d>

c001509d <x87EmulHandler(regs*, void*)>:
c001509d:	53                   	push   ebx
c001509e:	83 ec 14             	sub    esp,0x14
c00150a1:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00150a5:	53                   	push   ebx
c00150a6:	e8 83 a8 00 00       	call   c001f92e <Vm::x87Handler(regs*)>
c00150ab:	83 c4 10             	add    esp,0x10
c00150ae:	84 c0                	test   al,al
c00150b0:	74 05                	je     c00150b7 <x87EmulHandler(regs*, void*)+0x1a>
c00150b2:	83 c4 08             	add    esp,0x8
c00150b5:	5b                   	pop    ebx
c00150b6:	c3                   	ret    
c00150b7:	83 ec 0c             	sub    esp,0xc
c00150ba:	68 02 ae 02 c0       	push   0xc002ae02
c00150bf:	e8 d4 dc ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c00150c4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00150c7:	e8 42 fb ff ff       	call   c0014c0e <displayDebugInfo(regs*)>

c00150cc <gpFault(regs*, void*)>:
c00150cc:	53                   	push   ebx
c00150cd:	83 ec 14             	sub    esp,0x14
c00150d0:	c7 05 f8 e3 02 c0 7d ec 01 c0 	mov    DWORD PTR ds:0xc002e3f8,0xc001ec7d
c00150da:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00150de:	53                   	push   ebx
c00150df:	e8 99 9b 00 00       	call   c001ec7d <Vm::faultHandler(regs*)>
c00150e4:	83 c4 10             	add    esp,0x10
c00150e7:	84 c0                	test   al,al
c00150e9:	74 05                	je     c00150f0 <gpFault(regs*, void*)+0x24>
c00150eb:	83 c4 08             	add    esp,0x8
c00150ee:	5b                   	pop    ebx
c00150ef:	c3                   	ret    
c00150f0:	83 ec 0c             	sub    esp,0xc
c00150f3:	68 18 ae 02 c0       	push   0xc002ae18
c00150f8:	e8 9b dc ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c00150fd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015100:	e8 09 fb ff ff       	call   c0014c0e <displayDebugInfo(regs*)>

c0015105 <pgFault(regs*, void*)>:
c0015105:	83 ec 14             	sub    esp,0x14
c0015108:	0f 20 d0             	mov    eax,cr2
c001510b:	50                   	push   eax
c001510c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015111:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015114:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001511a:	e8 89 d8 ff ff       	call   c00129a8 <VAS::tryLoadBackOffDisk(unsigned long)>
c001511f:	83 c4 10             	add    esp,0x10
c0015122:	84 c0                	test   al,al
c0015124:	74 04                	je     c001512a <pgFault(regs*, void*)+0x25>
c0015126:	83 c4 0c             	add    esp,0xc
c0015129:	c3                   	ret    
c001512a:	83 ec 0c             	sub    esp,0xc
c001512d:	68 33 ae 02 c0       	push   0xc002ae33
c0015132:	e8 61 dc ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0015137:	58                   	pop    eax
c0015138:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001513c:	e8 cd fa ff ff       	call   c0014c0e <displayDebugInfo(regs*)>

c0015141 <otherISRHandler(regs*, void*)>:
c0015141:	53                   	push   ebx
c0015142:	83 ec 0c             	sub    esp,0xc
c0015145:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015149:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c001514c:	50                   	push   eax
c001514d:	50                   	push   eax
c001514e:	68 45 ae 02 c0       	push   0xc002ae45
c0015153:	e8 40 dc ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0015158:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001515b:	e8 ae fa ff ff       	call   c0014c0e <displayDebugInfo(regs*)>

c0015160 <opcodeFault(regs*, void*)>:
c0015160:	55                   	push   ebp
c0015161:	89 e5                	mov    ebp,esp
c0015163:	56                   	push   esi
c0015164:	53                   	push   ebx
c0015165:	83 ec 40             	sub    esp,0x40
c0015168:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c001516d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015173:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0015179:	84 c0                	test   al,al
c001517b:	74 24                	je     c00151a1 <opcodeFault(regs*, void*)+0x41>
c001517d:	83 ec 0c             	sub    esp,0xc
c0015180:	68 64 ae 02 c0       	push   0xc002ae64
c0015185:	e8 0e dc ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001518a:	83 c4 10             	add    esp,0x10
c001518d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015190:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015193:	8d 50 19             	lea    edx,[eax+0x19]
c0015196:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015199:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001519c:	e9 be 05 00 00       	jmp    c001575f <opcodeFault(regs*, void*)+0x5ff>
c00151a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151a4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00151a7:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00151aa:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c00151ae:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c00151b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151b5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00151b8:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00151bb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151be:	8a 00                	mov    al,BYTE PTR [eax]
c00151c0:	3c f0                	cmp    al,0xf0
c00151c2:	75 17                	jne    c00151db <opcodeFault(regs*, void*)+0x7b>
c00151c4:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00151c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151ca:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00151cd:	8d 50 01             	lea    edx,[eax+0x1]
c00151d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151d3:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00151d6:	e9 da 00 00 00       	jmp    c00152b5 <opcodeFault(regs*, void*)+0x155>
c00151db:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151de:	8a 00                	mov    al,BYTE PTR [eax]
c00151e0:	3c f2                	cmp    al,0xf2
c00151e2:	74 09                	je     c00151ed <opcodeFault(regs*, void*)+0x8d>
c00151e4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151e7:	8a 00                	mov    al,BYTE PTR [eax]
c00151e9:	3c f3                	cmp    al,0xf3
c00151eb:	75 1b                	jne    c0015208 <opcodeFault(regs*, void*)+0xa8>
c00151ed:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00151f1:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00151f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151f7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00151fa:	8d 50 01             	lea    edx,[eax+0x1]
c00151fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015200:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015203:	e9 ad 00 00 00       	jmp    c00152b5 <opcodeFault(regs*, void*)+0x155>
c0015208:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001520b:	8a 00                	mov    al,BYTE PTR [eax]
c001520d:	3c 66                	cmp    al,0x66
c001520f:	75 1f                	jne    c0015230 <opcodeFault(regs*, void*)+0xd0>
c0015211:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015215:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0015219:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001521c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001521f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015222:	8d 50 01             	lea    edx,[eax+0x1]
c0015225:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015228:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001522b:	e9 85 00 00 00       	jmp    c00152b5 <opcodeFault(regs*, void*)+0x155>
c0015230:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015233:	8a 00                	mov    al,BYTE PTR [eax]
c0015235:	3c 67                	cmp    al,0x67
c0015237:	75 18                	jne    c0015251 <opcodeFault(regs*, void*)+0xf1>
c0015239:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001523d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015240:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015243:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015246:	8d 50 01             	lea    edx,[eax+0x1]
c0015249:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001524c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001524f:	eb 64                	jmp    c00152b5 <opcodeFault(regs*, void*)+0x155>
c0015251:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015254:	8a 00                	mov    al,BYTE PTR [eax]
c0015256:	3c 2e                	cmp    al,0x2e
c0015258:	74 09                	je     c0015263 <opcodeFault(regs*, void*)+0x103>
c001525a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001525d:	8a 00                	mov    al,BYTE PTR [eax]
c001525f:	3c 3e                	cmp    al,0x3e
c0015261:	75 18                	jne    c001527b <opcodeFault(regs*, void*)+0x11b>
c0015263:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015267:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001526a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001526d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015270:	8d 50 01             	lea    edx,[eax+0x1]
c0015273:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015276:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015279:	eb 3a                	jmp    c00152b5 <opcodeFault(regs*, void*)+0x155>
c001527b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001527e:	8a 00                	mov    al,BYTE PTR [eax]
c0015280:	3c 36                	cmp    al,0x36
c0015282:	74 1b                	je     c001529f <opcodeFault(regs*, void*)+0x13f>
c0015284:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015287:	8a 00                	mov    al,BYTE PTR [eax]
c0015289:	3c 26                	cmp    al,0x26
c001528b:	74 12                	je     c001529f <opcodeFault(regs*, void*)+0x13f>
c001528d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015290:	8a 00                	mov    al,BYTE PTR [eax]
c0015292:	3c 64                	cmp    al,0x64
c0015294:	74 09                	je     c001529f <opcodeFault(regs*, void*)+0x13f>
c0015296:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015299:	8a 00                	mov    al,BYTE PTR [eax]
c001529b:	3c 65                	cmp    al,0x65
c001529d:	75 16                	jne    c00152b5 <opcodeFault(regs*, void*)+0x155>
c001529f:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00152a3:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00152a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152a9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152ac:	8d 50 01             	lea    edx,[eax+0x1]
c00152af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152b2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00152b5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152b8:	8a 00                	mov    al,BYTE PTR [eax]
c00152ba:	3c 0f                	cmp    al,0xf
c00152bc:	0f 85 ad 00 00 00    	jne    c001536f <opcodeFault(regs*, void*)+0x20f>
c00152c2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152c5:	40                   	inc    eax
c00152c6:	8a 00                	mov    al,BYTE PTR [eax]
c00152c8:	3c c2                	cmp    al,0xc2
c00152ca:	74 0e                	je     c00152da <opcodeFault(regs*, void*)+0x17a>
c00152cc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152cf:	40                   	inc    eax
c00152d0:	8a 00                	mov    al,BYTE PTR [eax]
c00152d2:	3c c3                	cmp    al,0xc3
c00152d4:	0f 85 95 00 00 00    	jne    c001536f <opcodeFault(regs*, void*)+0x20f>
c00152da:	83 ec 0c             	sub    esp,0xc
c00152dd:	68 87 ae 02 c0       	push   0xc002ae87
c00152e2:	e8 b1 da ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c00152e7:	83 c4 10             	add    esp,0x10
c00152ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152ed:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152f0:	8d 50 01             	lea    edx,[eax+0x1]
c00152f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152f6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00152f9:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00152fc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152ff:	8a 00                	mov    al,BYTE PTR [eax]
c0015301:	8d 50 fe             	lea    edx,[eax-0x2]
c0015304:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015307:	88 10                	mov    BYTE PTR [eax],dl
c0015309:	8d 45 c2             	lea    eax,[ebp-0x3e]
c001530c:	50                   	push   eax
c001530d:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0015310:	50                   	push   eax
c0015311:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0015314:	50                   	push   eax
c0015315:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015318:	e8 1d 48 00 00       	call   c0019b3a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001531d:	83 c4 10             	add    esp,0x10
c0015320:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015323:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015326:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0015329:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c001532c:	01 d0                	add    eax,edx
c001532e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0015331:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015334:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015337:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c001533a:	48                   	dec    eax
c001533b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001533e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015341:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0015344:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015347:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001534a:	83 ec 04             	sub    esp,0x4
c001534d:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015350:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015353:	50                   	push   eax
c0015354:	e8 5b ae fe ff       	call   c00001b4 <voodooXADD>
c0015359:	83 c4 10             	add    esp,0x10
c001535c:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001535f:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0015362:	01 c2                	add    edx,eax
c0015364:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015367:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001536a:	e9 f0 03 00 00       	jmp    c001575f <opcodeFault(regs*, void*)+0x5ff>
c001536f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015372:	8a 00                	mov    al,BYTE PTR [eax]
c0015374:	3c 0f                	cmp    al,0xf
c0015376:	0f 85 8b 01 00 00    	jne    c0015507 <opcodeFault(regs*, void*)+0x3a7>
c001537c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001537f:	40                   	inc    eax
c0015380:	8a 00                	mov    al,BYTE PTR [eax]
c0015382:	3c c7                	cmp    al,0xc7
c0015384:	0f 86 7d 01 00 00    	jbe    c0015507 <opcodeFault(regs*, void*)+0x3a7>
c001538a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001538d:	40                   	inc    eax
c001538e:	8a 00                	mov    al,BYTE PTR [eax]
c0015390:	3c cf                	cmp    al,0xcf
c0015392:	0f 87 6f 01 00 00    	ja     c0015507 <opcodeFault(regs*, void*)+0x3a7>
c0015398:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001539b:	40                   	inc    eax
c001539c:	8a 00                	mov    al,BYTE PTR [eax]
c001539e:	83 c0 38             	add    eax,0x38
c00153a1:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c00153a4:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c00153a8:	75 0b                	jne    c00153b5 <opcodeFault(regs*, void*)+0x255>
c00153aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153ad:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00153b0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00153b3:	eb 75                	jmp    c001542a <opcodeFault(regs*, void*)+0x2ca>
c00153b5:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c00153b9:	75 0b                	jne    c00153c6 <opcodeFault(regs*, void*)+0x266>
c00153bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153be:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00153c1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00153c4:	eb 64                	jmp    c001542a <opcodeFault(regs*, void*)+0x2ca>
c00153c6:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00153ca:	75 0b                	jne    c00153d7 <opcodeFault(regs*, void*)+0x277>
c00153cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153cf:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00153d2:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00153d5:	eb 53                	jmp    c001542a <opcodeFault(regs*, void*)+0x2ca>
c00153d7:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00153db:	75 0b                	jne    c00153e8 <opcodeFault(regs*, void*)+0x288>
c00153dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153e0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00153e3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00153e6:	eb 42                	jmp    c001542a <opcodeFault(regs*, void*)+0x2ca>
c00153e8:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00153ec:	75 0b                	jne    c00153f9 <opcodeFault(regs*, void*)+0x299>
c00153ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153f1:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00153f4:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00153f7:	eb 31                	jmp    c001542a <opcodeFault(regs*, void*)+0x2ca>
c00153f9:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00153fd:	75 0b                	jne    c001540a <opcodeFault(regs*, void*)+0x2aa>
c00153ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015402:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0015405:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015408:	eb 20                	jmp    c001542a <opcodeFault(regs*, void*)+0x2ca>
c001540a:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c001540e:	75 0b                	jne    c001541b <opcodeFault(regs*, void*)+0x2bb>
c0015410:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015413:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015416:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015419:	eb 0f                	jmp    c001542a <opcodeFault(regs*, void*)+0x2ca>
c001541b:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c001541f:	75 09                	jne    c001542a <opcodeFault(regs*, void*)+0x2ca>
c0015421:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015424:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0015427:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001542a:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c001542e:	74 10                	je     c0015440 <opcodeFault(regs*, void*)+0x2e0>
c0015430:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0015437:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c001543e:	eb 2d                	jmp    c001546d <opcodeFault(regs*, void*)+0x30d>
c0015440:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015443:	c1 e0 18             	shl    eax,0x18
c0015446:	89 c2                	mov    edx,eax
c0015448:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001544b:	c1 e0 08             	shl    eax,0x8
c001544e:	25 00 00 ff 00       	and    eax,0xff0000
c0015453:	09 c2                	or     edx,eax
c0015455:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015458:	c1 e8 08             	shr    eax,0x8
c001545b:	25 00 ff 00 00       	and    eax,0xff00
c0015460:	09 c2                	or     edx,eax
c0015462:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015465:	c1 e8 18             	shr    eax,0x18
c0015468:	09 d0                	or     eax,edx
c001546a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001546d:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0015471:	75 0b                	jne    c001547e <opcodeFault(regs*, void*)+0x31e>
c0015473:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015476:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015479:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001547c:	eb 75                	jmp    c00154f3 <opcodeFault(regs*, void*)+0x393>
c001547e:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0015482:	75 0b                	jne    c001548f <opcodeFault(regs*, void*)+0x32f>
c0015484:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015487:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001548a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001548d:	eb 64                	jmp    c00154f3 <opcodeFault(regs*, void*)+0x393>
c001548f:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0015493:	75 0b                	jne    c00154a0 <opcodeFault(regs*, void*)+0x340>
c0015495:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015498:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001549b:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c001549e:	eb 53                	jmp    c00154f3 <opcodeFault(regs*, void*)+0x393>
c00154a0:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00154a4:	75 0b                	jne    c00154b1 <opcodeFault(regs*, void*)+0x351>
c00154a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154a9:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00154ac:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00154af:	eb 42                	jmp    c00154f3 <opcodeFault(regs*, void*)+0x393>
c00154b1:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00154b5:	75 0b                	jne    c00154c2 <opcodeFault(regs*, void*)+0x362>
c00154b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154ba:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00154bd:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c00154c0:	eb 31                	jmp    c00154f3 <opcodeFault(regs*, void*)+0x393>
c00154c2:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00154c6:	75 0b                	jne    c00154d3 <opcodeFault(regs*, void*)+0x373>
c00154c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154cb:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00154ce:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00154d1:	eb 20                	jmp    c00154f3 <opcodeFault(regs*, void*)+0x393>
c00154d3:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00154d7:	75 0b                	jne    c00154e4 <opcodeFault(regs*, void*)+0x384>
c00154d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154dc:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00154df:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00154e2:	eb 0f                	jmp    c00154f3 <opcodeFault(regs*, void*)+0x393>
c00154e4:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00154e8:	75 09                	jne    c00154f3 <opcodeFault(regs*, void*)+0x393>
c00154ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154ed:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00154f0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00154f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154f6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154f9:	8d 50 02             	lea    edx,[eax+0x2]
c00154fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154ff:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015502:	e9 58 02 00 00       	jmp    c001575f <opcodeFault(regs*, void*)+0x5ff>
c0015507:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001550a:	8a 00                	mov    al,BYTE PTR [eax]
c001550c:	3c 0f                	cmp    al,0xf
c001550e:	0f 85 76 01 00 00    	jne    c001568a <opcodeFault(regs*, void*)+0x52a>
c0015514:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015517:	40                   	inc    eax
c0015518:	8a 00                	mov    al,BYTE PTR [eax]
c001551a:	3c c7                	cmp    al,0xc7
c001551c:	0f 85 68 01 00 00    	jne    c001568a <opcodeFault(regs*, void*)+0x52a>
c0015522:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015525:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015528:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001552b:	8d 50 01             	lea    edx,[eax+0x1]
c001552e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015531:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015534:	8d 45 ba             	lea    eax,[ebp-0x46]
c0015537:	50                   	push   eax
c0015538:	8d 45 bb             	lea    eax,[ebp-0x45]
c001553b:	50                   	push   eax
c001553c:	8d 45 bc             	lea    eax,[ebp-0x44]
c001553f:	50                   	push   eax
c0015540:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015543:	e8 f2 45 00 00       	call   c0019b3a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0015548:	83 c4 10             	add    esp,0x10
c001554b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001554e:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0015551:	83 f0 01             	xor    eax,0x1
c0015554:	84 c0                	test   al,al
c0015556:	0f 84 2e 01 00 00    	je     c001568a <opcodeFault(regs*, void*)+0x52a>
c001555c:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c001555f:	3c 01                	cmp    al,0x1
c0015561:	0f 85 23 01 00 00    	jne    c001568a <opcodeFault(regs*, void*)+0x52a>
c0015567:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c001556a:	83 f0 01             	xor    eax,0x1
c001556d:	84 c0                	test   al,al
c001556f:	0f 84 15 01 00 00    	je     c001568a <opcodeFault(regs*, void*)+0x52a>
c0015575:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015578:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001557b:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001557e:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0015585:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015588:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001558b:	89 c2                	mov    edx,eax
c001558d:	b8 00 00 00 00       	mov    eax,0x0
c0015592:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015595:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0015598:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001559b:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001559e:	ba 00 00 00 00       	mov    edx,0x0
c00155a3:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c00155a6:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c00155a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155ac:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00155af:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00155b2:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c00155b9:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00155bc:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00155bf:	89 c2                	mov    edx,eax
c00155c1:	b8 00 00 00 00       	mov    eax,0x0
c00155c6:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00155c9:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c00155cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155cf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00155d2:	ba 00 00 00 00       	mov    edx,0x0
c00155d7:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c00155da:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c00155dd:	e8 8b 86 00 00       	call   c001dc6d <lockScheduler()>
c00155e2:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00155e5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00155e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00155ea:	89 c1                	mov    ecx,eax
c00155ec:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c00155ef:	89 cb                	mov    ebx,ecx
c00155f1:	89 d0                	mov    eax,edx
c00155f3:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c00155f6:	89 c6                	mov    esi,eax
c00155f8:	89 f0                	mov    eax,esi
c00155fa:	09 d8                	or     eax,ebx
c00155fc:	85 c0                	test   eax,eax
c00155fe:	75 21                	jne    c0015621 <opcodeFault(regs*, void*)+0x4c1>
c0015600:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0015603:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015606:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015609:	89 01                	mov    DWORD PTR [ecx],eax
c001560b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001560e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015611:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015614:	83 c8 40             	or     eax,0x40
c0015617:	89 c2                	mov    edx,eax
c0015619:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001561c:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c001561f:	eb 3e                	jmp    c001565f <opcodeFault(regs*, void*)+0x4ff>
c0015621:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015624:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015627:	8b 00                	mov    eax,DWORD PTR [eax]
c0015629:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001562c:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c001562f:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0015632:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015635:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0015638:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001563b:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001563e:	89 d0                	mov    eax,edx
c0015640:	31 d2                	xor    edx,edx
c0015642:	89 c3                	mov    ebx,eax
c0015644:	89 d6                	mov    esi,edx
c0015646:	89 da                	mov    edx,ebx
c0015648:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001564b:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c001564e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015651:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015654:	83 e0 bf             	and    eax,0xffffffbf
c0015657:	89 c2                	mov    edx,eax
c0015659:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001565c:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c001565f:	e8 0b 86 00 00       	call   c001dc6f <unlockScheduler()>
c0015664:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015667:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001566a:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c001566d:	01 c2                	add    edx,eax
c001566f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015672:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015675:	83 ec 0c             	sub    esp,0xc
c0015678:	68 96 ae 02 c0       	push   0xc002ae96
c001567d:	e8 16 d7 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0015682:	83 c4 10             	add    esp,0x10
c0015685:	e9 d5 00 00 00       	jmp    c001575f <opcodeFault(regs*, void*)+0x5ff>
c001568a:	83 ec 0c             	sub    esp,0xc
c001568d:	68 a9 ae 02 c0       	push   0xc002aea9
c0015692:	e8 01 d7 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0015697:	83 c4 10             	add    esp,0x10
c001569a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001569d:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00156a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156a3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00156a6:	c1 e0 04             	shl    eax,0x4
c00156a9:	01 d0                	add    eax,edx
c00156ab:	83 c0 03             	add    eax,0x3
c00156ae:	8a 00                	mov    al,BYTE PTR [eax]
c00156b0:	0f b6 d8             	movzx  ebx,al
c00156b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156b6:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00156b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156bc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00156bf:	c1 e0 04             	shl    eax,0x4
c00156c2:	01 d0                	add    eax,edx
c00156c4:	83 c0 02             	add    eax,0x2
c00156c7:	8a 00                	mov    al,BYTE PTR [eax]
c00156c9:	0f b6 c8             	movzx  ecx,al
c00156cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156cf:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00156d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156d5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00156d8:	c1 e0 04             	shl    eax,0x4
c00156db:	01 d0                	add    eax,edx
c00156dd:	40                   	inc    eax
c00156de:	8a 00                	mov    al,BYTE PTR [eax]
c00156e0:	0f b6 d0             	movzx  edx,al
c00156e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156e6:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c00156e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156ec:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00156ef:	c1 e0 04             	shl    eax,0x4
c00156f2:	01 f0                	add    eax,esi
c00156f4:	8a 00                	mov    al,BYTE PTR [eax]
c00156f6:	0f b6 c0             	movzx  eax,al
c00156f9:	83 ec 0c             	sub    esp,0xc
c00156fc:	53                   	push   ebx
c00156fd:	51                   	push   ecx
c00156fe:	52                   	push   edx
c00156ff:	50                   	push   eax
c0015700:	68 bc ae 02 c0       	push   0xc002aebc
c0015705:	e8 8e d6 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001570a:	83 c4 20             	add    esp,0x20
c001570d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015710:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015713:	83 c0 03             	add    eax,0x3
c0015716:	8a 00                	mov    al,BYTE PTR [eax]
c0015718:	0f b6 d8             	movzx  ebx,al
c001571b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001571e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015721:	83 c0 02             	add    eax,0x2
c0015724:	8a 00                	mov    al,BYTE PTR [eax]
c0015726:	0f b6 c8             	movzx  ecx,al
c0015729:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001572c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001572f:	40                   	inc    eax
c0015730:	8a 00                	mov    al,BYTE PTR [eax]
c0015732:	0f b6 d0             	movzx  edx,al
c0015735:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015738:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001573b:	8a 00                	mov    al,BYTE PTR [eax]
c001573d:	0f b6 c0             	movzx  eax,al
c0015740:	83 ec 0c             	sub    esp,0xc
c0015743:	53                   	push   ebx
c0015744:	51                   	push   ecx
c0015745:	52                   	push   edx
c0015746:	50                   	push   eax
c0015747:	68 e4 ae 02 c0       	push   0xc002aee4
c001574c:	e8 47 d6 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0015751:	83 c4 20             	add    esp,0x20
c0015754:	83 ec 0c             	sub    esp,0xc
c0015757:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001575a:	e8 af f4 ff ff       	call   c0014c0e <displayDebugInfo(regs*)>
c001575f:	8d 65 f8             	lea    esp,[ebp-0x8]
c0015762:	5b                   	pop    ebx
c0015763:	5e                   	pop    esi
c0015764:	5d                   	pop    ebp
c0015765:	c3                   	ret    

c0015766 <displayProgramFault(char const*)>:
c0015766:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001576b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001576e:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c0015774:	85 c0                	test   eax,eax
c0015776:	74 15                	je     c001578d <displayProgramFault(char const*)+0x27>
c0015778:	83 ec 0c             	sub    esp,0xc
c001577b:	6a 04                	push   0x4
c001577d:	6a 0f                	push   0xf
c001577f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015783:	50                   	push   eax
c0015784:	e8 45 b6 ff ff       	call   c0010dce <VgaText::puts(char const*, VgaColour, VgaColour)>
c0015789:	83 c4 1c             	add    esp,0x1c
c001578c:	c3                   	ret    
c001578d:	c3                   	ret    

c001578e <setupInterruptController()>:
c001578e:	55                   	push   ebp
c001578f:	89 e5                	mov    ebp,esp
c0015791:	53                   	push   ebx
c0015792:	83 ec 24             	sub    esp,0x24
c0015795:	b8 00 00 00 00       	mov    eax,0x0
c001579a:	85 c0                	test   eax,eax
c001579c:	0f 95 c0             	setne  al
c001579f:	84 c0                	test   al,al
c00157a1:	74 5b                	je     c00157fe <setupInterruptController()+0x70>
c00157a3:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c00157aa:	83 ec 0c             	sub    esp,0xc
c00157ad:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c00157b0:	e8 8b a0 ff ff       	call   c000f840 <malloc>
c00157b5:	83 c4 10             	add    esp,0x10
c00157b8:	89 c3                	mov    ebx,eax
c00157ba:	83 ec 0c             	sub    esp,0xc
c00157bd:	53                   	push   ebx
c00157be:	e8 2f 00 01 00       	call   c00257f2 <APIC::APIC()>
c00157c3:	83 c4 10             	add    esp,0x10
c00157c6:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c00157c9:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c00157cc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00157cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00157d1:	83 c0 08             	add    eax,0x8
c00157d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00157d6:	6a 00                	push   0x0
c00157d8:	6a 00                	push   0x0
c00157da:	6a 00                	push   0x0
c00157dc:	52                   	push   edx
c00157dd:	ff d0                	call   eax
c00157df:	83 c4 10             	add    esp,0x10
c00157e2:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c00157e7:	83 ec 08             	sub    esp,0x8
c00157ea:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00157ed:	50                   	push   eax
c00157ee:	e8 cb e9 ff ff       	call   c00141be <Device::addChild(Device*)>
c00157f3:	83 c4 10             	add    esp,0x10
c00157f6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00157f9:	e9 88 03 00 00       	jmp    c0015b86 <setupInterruptController()+0x3f8>
c00157fe:	a0 e0 0b 03 c0       	mov    al,ds:0xc0030be0
c0015803:	0f b6 c0             	movzx  eax,al
c0015806:	83 ec 08             	sub    esp,0x8
c0015809:	50                   	push   eax
c001580a:	68 09 af 02 c0       	push   0xc002af09
c001580f:	e8 84 d5 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0015814:	83 c4 10             	add    esp,0x10
c0015817:	a0 e0 0b 03 c0       	mov    al,ds:0xc0030be0
c001581c:	84 c0                	test   al,al
c001581e:	75 14                	jne    c0015834 <setupInterruptController()+0xa6>
c0015820:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c0015825:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001582b:	83 e2 fe             	and    edx,0xfffffffe
c001582e:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0015834:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c0015839:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001583f:	83 e0 01             	and    eax,0x1
c0015842:	84 c0                	test   al,al
c0015844:	0f 95 c0             	setne  al
c0015847:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c001584a:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c0015851:	83 ec 0c             	sub    esp,0xc
c0015854:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015857:	e8 e4 9f ff ff       	call   c000f840 <malloc>
c001585c:	83 c4 10             	add    esp,0x10
c001585f:	89 c3                	mov    ebx,eax
c0015861:	83 ec 0c             	sub    esp,0xc
c0015864:	53                   	push   ebx
c0015865:	e8 e0 04 01 00       	call   c0025d4a <PIC::PIC()>
c001586a:	83 c4 10             	add    esp,0x10
c001586d:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015870:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015873:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015876:	8b 00                	mov    eax,DWORD PTR [eax]
c0015878:	83 c0 08             	add    eax,0x8
c001587b:	8b 00                	mov    eax,DWORD PTR [eax]
c001587d:	6a 00                	push   0x0
c001587f:	6a 00                	push   0x0
c0015881:	6a 00                	push   0x0
c0015883:	52                   	push   edx
c0015884:	ff d0                	call   eax
c0015886:	83 c4 10             	add    esp,0x10
c0015889:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c001588d:	74 73                	je     c0015902 <setupInterruptController()+0x174>
c001588f:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015892:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015895:	8b 00                	mov    eax,DWORD PTR [eax]
c0015897:	83 c0 0c             	add    eax,0xc
c001589a:	8b 00                	mov    eax,DWORD PTR [eax]
c001589c:	6a 00                	push   0x0
c001589e:	6a 00                	push   0x0
c00158a0:	6a 00                	push   0x0
c00158a2:	52                   	push   edx
c00158a3:	ff d0                	call   eax
c00158a5:	83 c4 10             	add    esp,0x10
c00158a8:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00158ac:	74 15                	je     c00158c3 <setupInterruptController()+0x135>
c00158ae:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00158b1:	8b 00                	mov    eax,DWORD PTR [eax]
c00158b3:	83 c0 04             	add    eax,0x4
c00158b6:	8b 00                	mov    eax,DWORD PTR [eax]
c00158b8:	83 ec 0c             	sub    esp,0xc
c00158bb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00158be:	ff d0                	call   eax
c00158c0:	83 c4 10             	add    esp,0x10
c00158c3:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c00158ca:	83 ec 0c             	sub    esp,0xc
c00158cd:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00158d0:	e8 6b 9f ff ff       	call   c000f840 <malloc>
c00158d5:	83 c4 10             	add    esp,0x10
c00158d8:	89 c3                	mov    ebx,eax
c00158da:	83 ec 0c             	sub    esp,0xc
c00158dd:	53                   	push   ebx
c00158de:	e8 0f ff 00 00       	call   c00257f2 <APIC::APIC()>
c00158e3:	83 c4 10             	add    esp,0x10
c00158e6:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00158e9:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00158ec:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00158ef:	8b 00                	mov    eax,DWORD PTR [eax]
c00158f1:	83 c0 08             	add    eax,0x8
c00158f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00158f6:	6a 00                	push   0x0
c00158f8:	6a 00                	push   0x0
c00158fa:	6a 00                	push   0x0
c00158fc:	52                   	push   edx
c00158fd:	ff d0                	call   eax
c00158ff:	83 c4 10             	add    esp,0x10
c0015902:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c0015907:	83 ec 08             	sub    esp,0x8
c001590a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001590d:	50                   	push   eax
c001590e:	e8 ab e8 ff ff       	call   c00141be <Device::addChild(Device*)>
c0015913:	83 c4 10             	add    esp,0x10
c0015916:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015919:	8b 00                	mov    eax,DWORD PTR [eax]
c001591b:	83 c0 24             	add    eax,0x24
c001591e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015920:	6a 00                	push   0x0
c0015922:	68 41 51 01 c0       	push   0xc0015141
c0015927:	6a 00                	push   0x0
c0015929:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001592c:	ff d0                	call   eax
c001592e:	83 c4 10             	add    esp,0x10
c0015931:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015934:	8b 00                	mov    eax,DWORD PTR [eax]
c0015936:	83 c0 24             	add    eax,0x24
c0015939:	8b 00                	mov    eax,DWORD PTR [eax]
c001593b:	6a 00                	push   0x0
c001593d:	68 41 51 01 c0       	push   0xc0015141
c0015942:	6a 01                	push   0x1
c0015944:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015947:	ff d0                	call   eax
c0015949:	83 c4 10             	add    esp,0x10
c001594c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001594f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015951:	83 c0 24             	add    eax,0x24
c0015954:	8b 00                	mov    eax,DWORD PTR [eax]
c0015956:	6a 00                	push   0x0
c0015958:	68 6b 4a 01 c0       	push   0xc0014a6b
c001595d:	6a 02                	push   0x2
c001595f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015962:	ff d0                	call   eax
c0015964:	83 c4 10             	add    esp,0x10
c0015967:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001596a:	8b 00                	mov    eax,DWORD PTR [eax]
c001596c:	83 c0 24             	add    eax,0x24
c001596f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015971:	6a 00                	push   0x0
c0015973:	68 41 51 01 c0       	push   0xc0015141
c0015978:	6a 03                	push   0x3
c001597a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001597d:	ff d0                	call   eax
c001597f:	83 c4 10             	add    esp,0x10
c0015982:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015985:	8b 00                	mov    eax,DWORD PTR [eax]
c0015987:	83 c0 24             	add    eax,0x24
c001598a:	8b 00                	mov    eax,DWORD PTR [eax]
c001598c:	6a 00                	push   0x0
c001598e:	68 41 51 01 c0       	push   0xc0015141
c0015993:	6a 04                	push   0x4
c0015995:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015998:	ff d0                	call   eax
c001599a:	83 c4 10             	add    esp,0x10
c001599d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00159a2:	83 c0 24             	add    eax,0x24
c00159a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00159a7:	6a 00                	push   0x0
c00159a9:	68 41 51 01 c0       	push   0xc0015141
c00159ae:	6a 05                	push   0x5
c00159b0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00159b3:	ff d0                	call   eax
c00159b5:	83 c4 10             	add    esp,0x10
c00159b8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00159bd:	83 c0 24             	add    eax,0x24
c00159c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00159c2:	6a 00                	push   0x0
c00159c4:	68 60 51 01 c0       	push   0xc0015160
c00159c9:	6a 06                	push   0x6
c00159cb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00159ce:	ff d0                	call   eax
c00159d0:	83 c4 10             	add    esp,0x10
c00159d3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00159d8:	83 c0 24             	add    eax,0x24
c00159db:	8b 00                	mov    eax,DWORD PTR [eax]
c00159dd:	6a 00                	push   0x0
c00159df:	68 9d 50 01 c0       	push   0xc001509d
c00159e4:	6a 07                	push   0x7
c00159e6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00159e9:	ff d0                	call   eax
c00159eb:	83 c4 10             	add    esp,0x10
c00159ee:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159f1:	8b 00                	mov    eax,DWORD PTR [eax]
c00159f3:	83 c0 24             	add    eax,0x24
c00159f6:	8b 00                	mov    eax,DWORD PTR [eax]
c00159f8:	6a 00                	push   0x0
c00159fa:	68 86 48 01 c0       	push   0xc0014886
c00159ff:	6a 08                	push   0x8
c0015a01:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a04:	ff d0                	call   eax
c0015a06:	83 c4 10             	add    esp,0x10
c0015a09:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a0c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a0e:	83 c0 24             	add    eax,0x24
c0015a11:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a13:	6a 00                	push   0x0
c0015a15:	68 41 51 01 c0       	push   0xc0015141
c0015a1a:	6a 09                	push   0x9
c0015a1c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a1f:	ff d0                	call   eax
c0015a21:	83 c4 10             	add    esp,0x10
c0015a24:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a27:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a29:	83 c0 24             	add    eax,0x24
c0015a2c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a2e:	6a 00                	push   0x0
c0015a30:	68 41 51 01 c0       	push   0xc0015141
c0015a35:	6a 0a                	push   0xa
c0015a37:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a3a:	ff d0                	call   eax
c0015a3c:	83 c4 10             	add    esp,0x10
c0015a3f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a42:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a44:	83 c0 24             	add    eax,0x24
c0015a47:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a49:	6a 00                	push   0x0
c0015a4b:	68 41 51 01 c0       	push   0xc0015141
c0015a50:	6a 0b                	push   0xb
c0015a52:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a55:	ff d0                	call   eax
c0015a57:	83 c4 10             	add    esp,0x10
c0015a5a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a5d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a5f:	83 c0 24             	add    eax,0x24
c0015a62:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a64:	6a 00                	push   0x0
c0015a66:	68 41 51 01 c0       	push   0xc0015141
c0015a6b:	6a 0c                	push   0xc
c0015a6d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a70:	ff d0                	call   eax
c0015a72:	83 c4 10             	add    esp,0x10
c0015a75:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a78:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a7a:	83 c0 24             	add    eax,0x24
c0015a7d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a7f:	6a 00                	push   0x0
c0015a81:	68 cc 50 01 c0       	push   0xc00150cc
c0015a86:	6a 0d                	push   0xd
c0015a88:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a8b:	ff d0                	call   eax
c0015a8d:	83 c4 10             	add    esp,0x10
c0015a90:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a93:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a95:	83 c0 24             	add    eax,0x24
c0015a98:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a9a:	6a 00                	push   0x0
c0015a9c:	68 05 51 01 c0       	push   0xc0015105
c0015aa1:	6a 0e                	push   0xe
c0015aa3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015aa6:	ff d0                	call   eax
c0015aa8:	83 c4 10             	add    esp,0x10
c0015aab:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015aae:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ab0:	83 c0 24             	add    eax,0x24
c0015ab3:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ab5:	6a 00                	push   0x0
c0015ab7:	68 41 51 01 c0       	push   0xc0015141
c0015abc:	6a 0f                	push   0xf
c0015abe:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ac1:	ff d0                	call   eax
c0015ac3:	83 c4 10             	add    esp,0x10
c0015ac6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ac9:	8b 00                	mov    eax,DWORD PTR [eax]
c0015acb:	83 c0 24             	add    eax,0x24
c0015ace:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ad0:	6a 00                	push   0x0
c0015ad2:	68 41 51 01 c0       	push   0xc0015141
c0015ad7:	6a 10                	push   0x10
c0015ad9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015adc:	ff d0                	call   eax
c0015ade:	83 c4 10             	add    esp,0x10
c0015ae1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ae4:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ae6:	83 c0 24             	add    eax,0x24
c0015ae9:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aeb:	6a 00                	push   0x0
c0015aed:	68 41 51 01 c0       	push   0xc0015141
c0015af2:	6a 11                	push   0x11
c0015af4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015af7:	ff d0                	call   eax
c0015af9:	83 c4 10             	add    esp,0x10
c0015afc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015aff:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b01:	83 c0 24             	add    eax,0x24
c0015b04:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b06:	6a 00                	push   0x0
c0015b08:	68 41 51 01 c0       	push   0xc0015141
c0015b0d:	6a 12                	push   0x12
c0015b0f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b12:	ff d0                	call   eax
c0015b14:	83 c4 10             	add    esp,0x10
c0015b17:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b1a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b1c:	83 c0 24             	add    eax,0x24
c0015b1f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b21:	6a 00                	push   0x0
c0015b23:	68 41 51 01 c0       	push   0xc0015141
c0015b28:	6a 13                	push   0x13
c0015b2a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b2d:	ff d0                	call   eax
c0015b2f:	83 c4 10             	add    esp,0x10
c0015b32:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b35:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b37:	83 c0 24             	add    eax,0x24
c0015b3a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b3c:	6a 00                	push   0x0
c0015b3e:	68 41 51 01 c0       	push   0xc0015141
c0015b43:	6a 14                	push   0x14
c0015b45:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b48:	ff d0                	call   eax
c0015b4a:	83 c4 10             	add    esp,0x10
c0015b4d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b50:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b52:	83 c0 24             	add    eax,0x24
c0015b55:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b57:	6a 00                	push   0x0
c0015b59:	68 41 51 01 c0       	push   0xc0015141
c0015b5e:	6a 1e                	push   0x1e
c0015b60:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b63:	ff d0                	call   eax
c0015b65:	83 c4 10             	add    esp,0x10
c0015b68:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b6b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b6d:	83 c0 24             	add    eax,0x24
c0015b70:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b72:	6a 00                	push   0x0
c0015b74:	68 fd c5 01 c0       	push   0xc001c5fd
c0015b79:	6a 60                	push   0x60
c0015b7b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b7e:	ff d0                	call   eax
c0015b80:	83 c4 10             	add    esp,0x10
c0015b83:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b86:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015b89:	c9                   	leave  
c0015b8a:	c3                   	ret    
c0015b8b:	90                   	nop

c0015b8c <InterruptController::convertLegacyIRQNumber(int)>:
c0015b8c:	55                   	push   ebp
c0015b8d:	89 e5                	mov    ebp,esp
c0015b8f:	83 ec 08             	sub    esp,0x8
c0015b92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b95:	83 ec 0c             	sub    esp,0xc
c0015b98:	50                   	push   eax
c0015b99:	e8 0c e9 ff ff       	call   c00144aa <Device::getName()>
c0015b9e:	83 c4 10             	add    esp,0x10
c0015ba1:	8a 00                	mov    al,BYTE PTR [eax]
c0015ba3:	3c 41                	cmp    al,0x41
c0015ba5:	0f 94 c0             	sete   al
c0015ba8:	84 c0                	test   al,al
c0015baa:	74 28                	je     c0015bd4 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015bac:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015bb0:	7f 12                	jg     c0015bc4 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015bb2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015bb5:	05 a0 d4 02 c0       	add    eax,0xc002d4a0
c0015bba:	8a 00                	mov    al,BYTE PTR [eax]
c0015bbc:	0f b6 c0             	movzx  eax,al
c0015bbf:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015bc2:	eb 10                	jmp    c0015bd4 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015bc4:	83 ec 0c             	sub    esp,0xc
c0015bc7:	68 00 ac 02 c0       	push   0xc002ac00
c0015bcc:	e8 a2 48 00 00       	call   c001a473 <Krnl::panic(char const*)>
c0015bd1:	83 c4 10             	add    esp,0x10
c0015bd4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015bd7:	c9                   	leave  
c0015bd8:	c3                   	ret    
c0015bd9:	90                   	nop

c0015bda <startGUI(void*)>:
c0015bda:	55                   	push   ebp
c0015bdb:	89 e5                	mov    ebp,esp
c0015bdd:	53                   	push   ebx
c0015bde:	83 ec 04             	sub    esp,0x4
c0015be1:	e8 89 80 00 00       	call   c001dc6f <unlockScheduler()>
c0015be6:	8b 1d 48 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e248
c0015bec:	83 ec 08             	sub    esp,0x8
c0015bef:	6a 01                	push   0x1
c0015bf1:	68 70 af 02 c0       	push   0xc002af70
c0015bf6:	e8 ab 79 00 00       	call   c001d5a6 <Thr::loadDLL(char const*, bool)>
c0015bfb:	83 c4 10             	add    esp,0x10
c0015bfe:	83 ec 08             	sub    esp,0x8
c0015c01:	53                   	push   ebx
c0015c02:	50                   	push   eax
c0015c03:	e8 ed 7b 00 00       	call   c001d7f5 <Thr::executeDLL(unsigned long, void*)>
c0015c08:	83 c4 10             	add    esp,0x10
c0015c0b:	8b 1d 48 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e248
c0015c11:	83 ec 08             	sub    esp,0x8
c0015c14:	6a 01                	push   0x1
c0015c16:	68 8a af 02 c0       	push   0xc002af8a
c0015c1b:	e8 86 79 00 00       	call   c001d5a6 <Thr::loadDLL(char const*, bool)>
c0015c20:	83 c4 10             	add    esp,0x10
c0015c23:	83 ec 08             	sub    esp,0x8
c0015c26:	53                   	push   ebx
c0015c27:	50                   	push   eax
c0015c28:	e8 c8 7b 00 00       	call   c001d7f5 <Thr::executeDLL(unsigned long, void*)>
c0015c2d:	83 c4 10             	add    esp,0x10
c0015c30:	90                   	nop
c0015c31:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015c34:	c9                   	leave  
c0015c35:	c3                   	ret    

c0015c36 <startGUIVESA(void*)>:
c0015c36:	55                   	push   ebp
c0015c37:	89 e5                	mov    ebp,esp
c0015c39:	53                   	push   ebx
c0015c3a:	83 ec 04             	sub    esp,0x4
c0015c3d:	e8 2d 80 00 00       	call   c001dc6f <unlockScheduler()>
c0015c42:	8b 1d 48 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e248
c0015c48:	83 ec 08             	sub    esp,0x8
c0015c4b:	6a 01                	push   0x1
c0015c4d:	68 a4 af 02 c0       	push   0xc002afa4
c0015c52:	e8 4f 79 00 00       	call   c001d5a6 <Thr::loadDLL(char const*, bool)>
c0015c57:	83 c4 10             	add    esp,0x10
c0015c5a:	83 ec 08             	sub    esp,0x8
c0015c5d:	53                   	push   ebx
c0015c5e:	50                   	push   eax
c0015c5f:	e8 91 7b 00 00       	call   c001d7f5 <Thr::executeDLL(unsigned long, void*)>
c0015c64:	83 c4 10             	add    esp,0x10
c0015c67:	8b 1d 48 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e248
c0015c6d:	83 ec 08             	sub    esp,0x8
c0015c70:	6a 01                	push   0x1
c0015c72:	68 8a af 02 c0       	push   0xc002af8a
c0015c77:	e8 2a 79 00 00       	call   c001d5a6 <Thr::loadDLL(char const*, bool)>
c0015c7c:	83 c4 10             	add    esp,0x10
c0015c7f:	83 ec 08             	sub    esp,0x8
c0015c82:	53                   	push   ebx
c0015c83:	50                   	push   eax
c0015c84:	e8 6c 7b 00 00       	call   c001d7f5 <Thr::executeDLL(unsigned long, void*)>
c0015c89:	83 c4 10             	add    esp,0x10
c0015c8c:	90                   	nop
c0015c8d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015c90:	c9                   	leave  
c0015c91:	c3                   	ret    

c0015c92 <sendKeyToTerminal(unsigned char)>:
c0015c92:	55                   	push   ebp
c0015c93:	89 e5                	mov    ebp,esp
c0015c95:	83 ec 28             	sub    esp,0x28
c0015c98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c9b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015c9e:	a1 24 e3 02 c0       	mov    eax,ds:0xc002e324
c0015ca3:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015ca7:	83 ec 08             	sub    esp,0x8
c0015caa:	52                   	push   edx
c0015cab:	50                   	push   eax
c0015cac:	e8 59 b6 ff ff       	call   c001130a <VgaText::receiveKey(unsigned char)>
c0015cb1:	83 c4 10             	add    esp,0x10
c0015cb4:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015cb8:	75 41                	jne    c0015cfb <sendKeyToTerminal(unsigned char)+0x69>
c0015cba:	e8 d5 7f 00 00       	call   c001dc94 <lockStuff()>
c0015cbf:	a1 00 e4 02 c0       	mov    eax,ds:0xc002e400
c0015cc4:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015cc7:	c7 05 00 e4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e400,0x0
c0015cd1:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015cd5:	74 1f                	je     c0015cf6 <sendKeyToTerminal(unsigned char)+0x64>
c0015cd7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cda:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015cdd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015ce0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015ce3:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015ce6:	83 ec 0c             	sub    esp,0xc
c0015ce9:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015cec:	e8 93 85 00 00       	call   c001e284 <unblockTask(ThreadControlBlock*)>
c0015cf1:	83 c4 10             	add    esp,0x10
c0015cf4:	eb db                	jmp    c0015cd1 <sendKeyToTerminal(unsigned char)+0x3f>
c0015cf6:	e8 32 83 00 00       	call   c001e02d <unlockStuff()>
c0015cfb:	90                   	nop
c0015cfc:	c9                   	leave  
c0015cfd:	c3                   	ret    

c0015cfe <sendKeyboardToken(KeyboardToken)>:
c0015cfe:	55                   	push   ebp
c0015cff:	89 e5                	mov    ebp,esp
c0015d01:	83 ec 18             	sub    esp,0x18
c0015d04:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015d07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d0a:	0f b7 c0             	movzx  eax,ax
c0015d0d:	83 f2 01             	xor    edx,0x1
c0015d10:	88 90 20 e4 02 c0    	mov    BYTE PTR [eax-0x3ffd1be0],dl
c0015d16:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0015d1b:	85 c0                	test   eax,eax
c0015d1d:	74 24                	je     c0015d43 <sendKeyboardToken(KeyboardToken)+0x45>
c0015d1f:	8b 0d 08 e4 02 c0    	mov    ecx,DWORD PTR ds:0xc002e408
c0015d25:	83 ec 04             	sub    esp,0x4
c0015d28:	68 20 e4 02 c0       	push   0xc002e420
c0015d2d:	83 ec 08             	sub    esp,0x8
c0015d30:	89 e2                	mov    edx,esp
c0015d32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d35:	89 02                	mov    DWORD PTR [edx],eax
c0015d37:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015d3a:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015d3e:	ff d1                	call   ecx
c0015d40:	83 c4 10             	add    esp,0x10
c0015d43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d46:	66 3d 03 02          	cmp    ax,0x203
c0015d4a:	75 07                	jne    c0015d53 <sendKeyboardToken(KeyboardToken)+0x55>
c0015d4c:	a0 20 e5 02 c0       	mov    al,ds:0xc002e520
c0015d51:	84 c0                	test   al,al
c0015d53:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015d57:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015d5a:	a0 28 e8 02 c0       	mov    al,ds:0xc002e828
c0015d5f:	38 c2                	cmp    dl,al
c0015d61:	74 1c                	je     c0015d7f <sendKeyboardToken(KeyboardToken)+0x81>
c0015d63:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015d66:	a2 28 e8 02 c0       	mov    ds:0xc002e828,al
c0015d6b:	a0 28 e8 02 c0       	mov    al,ds:0xc002e828
c0015d70:	0f b6 c0             	movzx  eax,al
c0015d73:	83 ec 0c             	sub    esp,0xc
c0015d76:	50                   	push   eax
c0015d77:	e8 ee a7 ff ff       	call   c001056a <setTerminalScrollLock(bool)>
c0015d7c:	83 c4 10             	add    esp,0x10
c0015d7f:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015d82:	84 c0                	test   al,al
c0015d84:	0f 84 ae 00 00 00    	je     c0015e38 <sendKeyboardToken(KeyboardToken)+0x13a>
c0015d8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d8d:	66 3d 10 03          	cmp    ax,0x310
c0015d91:	75 06                	jne    c0015d99 <sendKeyboardToken(KeyboardToken)+0x9b>
c0015d93:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015d99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d9c:	66 3d 11 03          	cmp    ax,0x311
c0015da0:	75 06                	jne    c0015da8 <sendKeyboardToken(KeyboardToken)+0xaa>
c0015da2:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015da8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015dab:	66 3d 12 03          	cmp    ax,0x312
c0015daf:	75 06                	jne    c0015db7 <sendKeyboardToken(KeyboardToken)+0xb9>
c0015db1:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015db7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015dba:	66 3d 13 03          	cmp    ax,0x313
c0015dbe:	75 06                	jne    c0015dc6 <sendKeyboardToken(KeyboardToken)+0xc8>
c0015dc0:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015dc6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015dc9:	66 3d 14 03          	cmp    ax,0x314
c0015dcd:	75 06                	jne    c0015dd5 <sendKeyboardToken(KeyboardToken)+0xd7>
c0015dcf:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015dd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015dd8:	66 3d 15 03          	cmp    ax,0x315
c0015ddc:	75 06                	jne    c0015de4 <sendKeyboardToken(KeyboardToken)+0xe6>
c0015dde:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015de4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015de7:	66 3d 16 03          	cmp    ax,0x316
c0015deb:	75 06                	jne    c0015df3 <sendKeyboardToken(KeyboardToken)+0xf5>
c0015ded:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015df3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015df6:	66 3d 17 03          	cmp    ax,0x317
c0015dfa:	75 06                	jne    c0015e02 <sendKeyboardToken(KeyboardToken)+0x104>
c0015dfc:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015e02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e05:	66 3d 18 03          	cmp    ax,0x318
c0015e09:	75 06                	jne    c0015e11 <sendKeyboardToken(KeyboardToken)+0x113>
c0015e0b:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015e11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e14:	66 3d 19 03          	cmp    ax,0x319
c0015e18:	75 06                	jne    c0015e20 <sendKeyboardToken(KeyboardToken)+0x122>
c0015e1a:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015e20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e23:	66 3d 1a 03          	cmp    ax,0x31a
c0015e27:	0f 85 c9 00 00 00    	jne    c0015ef6 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015e2d:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015e33:	e9 be 00 00 00       	jmp    c0015ef6 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015e38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e3b:	66 3d 10 03          	cmp    ax,0x310
c0015e3f:	75 0a                	jne    c0015e4b <sendKeyboardToken(KeyboardToken)+0x14d>
c0015e41:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015e47:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015e4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e4e:	66 3d 11 03          	cmp    ax,0x311
c0015e52:	75 0a                	jne    c0015e5e <sendKeyboardToken(KeyboardToken)+0x160>
c0015e54:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015e5a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015e5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e61:	66 3d 12 03          	cmp    ax,0x312
c0015e65:	75 0a                	jne    c0015e71 <sendKeyboardToken(KeyboardToken)+0x173>
c0015e67:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015e6d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015e71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e74:	66 3d 13 03          	cmp    ax,0x313
c0015e78:	75 0a                	jne    c0015e84 <sendKeyboardToken(KeyboardToken)+0x186>
c0015e7a:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0015e80:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015e84:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e87:	66 3d 14 03          	cmp    ax,0x314
c0015e8b:	75 0a                	jne    c0015e97 <sendKeyboardToken(KeyboardToken)+0x199>
c0015e8d:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0015e93:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015e97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e9a:	66 3d 15 03          	cmp    ax,0x315
c0015e9e:	75 0a                	jne    c0015eaa <sendKeyboardToken(KeyboardToken)+0x1ac>
c0015ea0:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015ea6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015eaa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ead:	66 3d 16 03          	cmp    ax,0x316
c0015eb1:	75 0a                	jne    c0015ebd <sendKeyboardToken(KeyboardToken)+0x1bf>
c0015eb3:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0015eb9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ebd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ec0:	66 3d 17 03          	cmp    ax,0x317
c0015ec4:	75 0a                	jne    c0015ed0 <sendKeyboardToken(KeyboardToken)+0x1d2>
c0015ec6:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0015ecc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ed0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ed3:	66 3d 18 03          	cmp    ax,0x318
c0015ed7:	75 0a                	jne    c0015ee3 <sendKeyboardToken(KeyboardToken)+0x1e5>
c0015ed9:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0015edf:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ee3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ee6:	66 3d 19 03          	cmp    ax,0x319
c0015eea:	75 0a                	jne    c0015ef6 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015eec:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0015ef2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ef6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ef9:	66 3d 00 02          	cmp    ax,0x200
c0015efd:	75 2c                	jne    c0015f2b <sendKeyboardToken(KeyboardToken)+0x22d>
c0015eff:	a0 20 e8 02 c0       	mov    al,ds:0xc002e820
c0015f04:	83 f0 01             	xor    eax,0x1
c0015f07:	84 c0                	test   al,al
c0015f09:	74 20                	je     c0015f2b <sendKeyboardToken(KeyboardToken)+0x22d>
c0015f0b:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c0015f10:	6a 01                	push   0x1
c0015f12:	6a 00                	push   0x0
c0015f14:	68 da 5b 01 c0       	push   0xc0015bda
c0015f19:	50                   	push   eax
c0015f1a:	e8 7f 7e 00 00       	call   c001dd9e <Process::createThread(void (*)(void*), void*, int)>
c0015f1f:	83 c4 10             	add    esp,0x10
c0015f22:	c6 05 20 e8 02 c0 01 	mov    BYTE PTR ds:0xc002e820,0x1
c0015f29:	eb 33                	jmp    c0015f5e <sendKeyboardToken(KeyboardToken)+0x260>
c0015f2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f2e:	66 3d 01 02          	cmp    ax,0x201
c0015f32:	75 2a                	jne    c0015f5e <sendKeyboardToken(KeyboardToken)+0x260>
c0015f34:	a0 20 e8 02 c0       	mov    al,ds:0xc002e820
c0015f39:	83 f0 01             	xor    eax,0x1
c0015f3c:	84 c0                	test   al,al
c0015f3e:	74 1e                	je     c0015f5e <sendKeyboardToken(KeyboardToken)+0x260>
c0015f40:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c0015f45:	6a 01                	push   0x1
c0015f47:	6a 00                	push   0x0
c0015f49:	68 36 5c 01 c0       	push   0xc0015c36
c0015f4e:	50                   	push   eax
c0015f4f:	e8 4a 7e 00 00       	call   c001dd9e <Process::createThread(void (*)(void*), void*, int)>
c0015f54:	83 c4 10             	add    esp,0x10
c0015f57:	c6 05 20 e8 02 c0 01 	mov    BYTE PTR ds:0xc002e820,0x1
c0015f5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f61:	66 3d 1d 03          	cmp    ax,0x31d
c0015f65:	75 06                	jne    c0015f6d <sendKeyboardToken(KeyboardToken)+0x26f>
c0015f67:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0015f6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f70:	66 3d 1c 03          	cmp    ax,0x31c
c0015f74:	75 06                	jne    c0015f7c <sendKeyboardToken(KeyboardToken)+0x27e>
c0015f76:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0015f7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f7f:	66 3d 1b 03          	cmp    ax,0x31b
c0015f83:	75 06                	jne    c0015f8b <sendKeyboardToken(KeyboardToken)+0x28d>
c0015f85:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0015f8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f8e:	66 3d 1e 03          	cmp    ax,0x31e
c0015f92:	75 06                	jne    c0015f9a <sendKeyboardToken(KeyboardToken)+0x29c>
c0015f94:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0015f9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f9d:	66 3d 1f 03          	cmp    ax,0x31f
c0015fa1:	75 06                	jne    c0015fa9 <sendKeyboardToken(KeyboardToken)+0x2ab>
c0015fa3:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0015fa9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fac:	66 3d 1a 03          	cmp    ax,0x31a
c0015fb0:	75 06                	jne    c0015fb8 <sendKeyboardToken(KeyboardToken)+0x2ba>
c0015fb2:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0015fb8:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0015fbc:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015fbf:	83 f0 01             	xor    eax,0x1
c0015fc2:	84 c0                	test   al,al
c0015fc4:	74 77                	je     c001603d <sendKeyboardToken(KeyboardToken)+0x33f>
c0015fc6:	a0 21 e5 02 c0       	mov    al,ds:0xc002e521
c0015fcb:	84 c0                	test   al,al
c0015fcd:	74 41                	je     c0016010 <sendKeyboardToken(KeyboardToken)+0x312>
c0015fcf:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015fd3:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0015fd7:	74 2b                	je     c0016004 <sendKeyboardToken(KeyboardToken)+0x306>
c0015fd9:	8b 15 24 e8 02 c0    	mov    edx,DWORD PTR ds:0xc002e824
c0015fdf:	89 d0                	mov    eax,edx
c0015fe1:	c1 e0 02             	shl    eax,0x2
c0015fe4:	01 d0                	add    eax,edx
c0015fe6:	01 c0                	add    eax,eax
c0015fe8:	a3 24 e8 02 c0       	mov    ds:0xc002e824,eax
c0015fed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ff0:	0f b7 c0             	movzx  eax,ax
c0015ff3:	8d 50 d0             	lea    edx,[eax-0x30]
c0015ff6:	a1 24 e8 02 c0       	mov    eax,ds:0xc002e824
c0015ffb:	01 d0                	add    eax,edx
c0015ffd:	a3 24 e8 02 c0       	mov    ds:0xc002e824,eax
c0016002:	eb 6d                	jmp    c0016071 <sendKeyboardToken(KeyboardToken)+0x373>
c0016004:	c7 05 24 e8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e824,0x0
c001600e:	eb 61                	jmp    c0016071 <sendKeyboardToken(KeyboardToken)+0x373>
c0016010:	a1 24 e8 02 c0       	mov    eax,ds:0xc002e824
c0016015:	85 c0                	test   eax,eax
c0016017:	74 18                	je     c0016031 <sendKeyboardToken(KeyboardToken)+0x333>
c0016019:	a1 24 e8 02 c0       	mov    eax,ds:0xc002e824
c001601e:	0f b6 c0             	movzx  eax,al
c0016021:	83 ec 0c             	sub    esp,0xc
c0016024:	50                   	push   eax
c0016025:	e8 68 fc ff ff       	call   c0015c92 <sendKeyToTerminal(unsigned char)>
c001602a:	83 c4 10             	add    esp,0x10
c001602d:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0016031:	c7 05 24 e8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e824,0x0
c001603b:	eb 34                	jmp    c0016071 <sendKeyboardToken(KeyboardToken)+0x373>
c001603d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016040:	66 3d 01 01          	cmp    ax,0x101
c0016044:	75 2b                	jne    c0016071 <sendKeyboardToken(KeyboardToken)+0x373>
c0016046:	a1 24 e8 02 c0       	mov    eax,ds:0xc002e824
c001604b:	85 c0                	test   eax,eax
c001604d:	74 18                	je     c0016067 <sendKeyboardToken(KeyboardToken)+0x369>
c001604f:	a1 24 e8 02 c0       	mov    eax,ds:0xc002e824
c0016054:	0f b6 c0             	movzx  eax,al
c0016057:	83 ec 0c             	sub    esp,0xc
c001605a:	50                   	push   eax
c001605b:	e8 32 fc ff ff       	call   c0015c92 <sendKeyToTerminal(unsigned char)>
c0016060:	83 c4 10             	add    esp,0x10
c0016063:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0016067:	c7 05 24 e8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e824,0x0
c0016071:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0016074:	83 f0 01             	xor    eax,0x1
c0016077:	84 c0                	test   al,al
c0016079:	74 4c                	je     c00160c7 <sendKeyboardToken(KeyboardToken)+0x3c9>
c001607b:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001607e:	83 f0 01             	xor    eax,0x1
c0016081:	84 c0                	test   al,al
c0016083:	74 42                	je     c00160c7 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016085:	a0 20 e5 02 c0       	mov    al,ds:0xc002e520
c001608a:	83 f0 01             	xor    eax,0x1
c001608d:	84 c0                	test   al,al
c001608f:	74 36                	je     c00160c7 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016091:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016094:	66 83 f8 1f          	cmp    ax,0x1f
c0016098:	76 09                	jbe    c00160a3 <sendKeyboardToken(KeyboardToken)+0x3a5>
c001609a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001609d:	66 83 f8 7e          	cmp    ax,0x7e
c00160a1:	76 12                	jbe    c00160b5 <sendKeyboardToken(KeyboardToken)+0x3b7>
c00160a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160a6:	66 83 f8 0a          	cmp    ax,0xa
c00160aa:	74 09                	je     c00160b5 <sendKeyboardToken(KeyboardToken)+0x3b7>
c00160ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160af:	66 83 f8 08          	cmp    ax,0x8
c00160b3:	75 12                	jne    c00160c7 <sendKeyboardToken(KeyboardToken)+0x3c9>
c00160b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160b8:	0f b6 c0             	movzx  eax,al
c00160bb:	83 ec 0c             	sub    esp,0xc
c00160be:	50                   	push   eax
c00160bf:	e8 ce fb ff ff       	call   c0015c92 <sendKeyToTerminal(unsigned char)>
c00160c4:	83 c4 10             	add    esp,0x10
c00160c7:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00160ca:	83 f0 01             	xor    eax,0x1
c00160cd:	84 c0                	test   al,al
c00160cf:	74 4f                	je     c0016120 <sendKeyboardToken(KeyboardToken)+0x422>
c00160d1:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00160d4:	83 f0 01             	xor    eax,0x1
c00160d7:	84 c0                	test   al,al
c00160d9:	74 45                	je     c0016120 <sendKeyboardToken(KeyboardToken)+0x422>
c00160db:	a0 20 e5 02 c0       	mov    al,ds:0xc002e520
c00160e0:	84 c0                	test   al,al
c00160e2:	74 3c                	je     c0016120 <sendKeyboardToken(KeyboardToken)+0x422>
c00160e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160e7:	66 83 f8 3f          	cmp    ax,0x3f
c00160eb:	76 33                	jbe    c0016120 <sendKeyboardToken(KeyboardToken)+0x422>
c00160ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160f0:	66 83 f8 7f          	cmp    ax,0x7f
c00160f4:	77 2a                	ja     c0016120 <sendKeyboardToken(KeyboardToken)+0x422>
c00160f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160f9:	88 c2                	mov    dl,al
c00160fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160fe:	66 83 f8 5f          	cmp    ax,0x5f
c0016102:	76 04                	jbe    c0016108 <sendKeyboardToken(KeyboardToken)+0x40a>
c0016104:	b0 20                	mov    al,0x20
c0016106:	eb 02                	jmp    c001610a <sendKeyboardToken(KeyboardToken)+0x40c>
c0016108:	b0 00                	mov    al,0x0
c001610a:	29 c2                	sub    edx,eax
c001610c:	88 d0                	mov    al,dl
c001610e:	83 e8 40             	sub    eax,0x40
c0016111:	0f b6 c0             	movzx  eax,al
c0016114:	83 ec 0c             	sub    esp,0xc
c0016117:	50                   	push   eax
c0016118:	e8 75 fb ff ff       	call   c0015c92 <sendKeyToTerminal(unsigned char)>
c001611d:	83 c4 10             	add    esp,0x10
c0016120:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016123:	66 3d 00 03          	cmp    ax,0x300
c0016127:	75 0f                	jne    c0016138 <sendKeyboardToken(KeyboardToken)+0x43a>
c0016129:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001612c:	83 f0 01             	xor    eax,0x1
c001612f:	84 c0                	test   al,al
c0016131:	74 05                	je     c0016138 <sendKeyboardToken(KeyboardToken)+0x43a>
c0016133:	e8 67 ac ff ff       	call   c0010d9f <doTerminalCycle()>
c0016138:	90                   	nop
c0016139:	c9                   	leave  
c001613a:	c3                   	ret    

c001613b <clearInternalKeybuffer(VgaText*)>:
c001613b:	55                   	push   ebp
c001613c:	89 e5                	mov    ebp,esp
c001613e:	83 ec 08             	sub    esp,0x8
c0016141:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016144:	05 34 11 00 00       	add    eax,0x1134
c0016149:	83 ec 0c             	sub    esp,0xc
c001614c:	50                   	push   eax
c001614d:	e8 42 a6 fe ff       	call   c0000794 <strlen>
c0016152:	83 c4 10             	add    esp,0x10
c0016155:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016158:	81 c2 34 11 00 00    	add    edx,0x1134
c001615e:	83 ec 04             	sub    esp,0x4
c0016161:	50                   	push   eax
c0016162:	6a 00                	push   0x0
c0016164:	52                   	push   edx
c0016165:	e8 0e a6 fe ff       	call   c0000778 <memset>
c001616a:	83 c4 10             	add    esp,0x10
c001616d:	90                   	nop
c001616e:	c9                   	leave  
c001616f:	c3                   	ret    

c0016170 <readKeyboard(VgaText*, char*, unsigned long)>:
c0016170:	55                   	push   ebp
c0016171:	89 e5                	mov    ebp,esp
c0016173:	83 ec 18             	sub    esp,0x18
c0016176:	fb                   	sti    
c0016177:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c001617e:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0016182:	0f 84 8a 00 00 00    	je     c0016212 <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c0016188:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001618b:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0016191:	84 c0                	test   al,al
c0016193:	75 11                	jne    c00161a6 <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c0016195:	e8 d3 7a 00 00       	call   c001dc6d <lockScheduler()>
c001619a:	e8 09 7e 00 00       	call   c001dfa8 <schedule()>
c001619f:	e8 cb 7a 00 00       	call   c001dc6f <unlockScheduler()>
c00161a4:	eb e2                	jmp    c0016188 <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c00161a6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00161a9:	8d 50 01             	lea    edx,[eax+0x1]
c00161ac:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c00161af:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00161b2:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c00161b8:	88 10                	mov    BYTE PTR [eax],dl
c00161ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161bd:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c00161c3:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c00161c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161c9:	05 34 11 00 00       	add    eax,0x1134
c00161ce:	83 ec 0c             	sub    esp,0xc
c00161d1:	50                   	push   eax
c00161d2:	e8 bd a5 fe ff       	call   c0000794 <strlen>
c00161d7:	83 c4 10             	add    esp,0x10
c00161da:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00161dd:	81 c2 34 11 00 00    	add    edx,0x1134
c00161e3:	8d 4a 01             	lea    ecx,[edx+0x1]
c00161e6:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00161e9:	81 c2 34 11 00 00    	add    edx,0x1134
c00161ef:	83 ec 04             	sub    esp,0x4
c00161f2:	50                   	push   eax
c00161f3:	51                   	push   ecx
c00161f4:	52                   	push   edx
c00161f5:	e8 82 a4 fe ff       	call   c000067c <memmove>
c00161fa:	83 c4 10             	add    esp,0x10
c00161fd:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0016200:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0016203:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0016207:	0f 85 71 ff ff ff    	jne    c001617e <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c001620d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0016210:	eb 03                	jmp    c0016215 <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c0016212:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0016215:	c9                   	leave  
c0016216:	c3                   	ret    
c0016217:	90                   	nop

c0016218 <Keyboard::Keyboard(char const*)>:
c0016218:	83 ec 0c             	sub    esp,0xc
c001621b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001621f:	83 ec 08             	sub    esp,0x8
c0016222:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016226:	50                   	push   eax
c0016227:	e8 82 e1 ff ff       	call   c00143ae <Device::Device(char const*)>
c001622c:	83 c4 10             	add    esp,0x10
c001622f:	ba c8 af 02 c0       	mov    edx,0xc002afc8
c0016234:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016238:	89 10                	mov    DWORD PTR [eax],edx
c001623a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001623e:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0016248:	c6 05 04 e4 02 c0 01 	mov    BYTE PTR ds:0xc002e404,0x1
c001624f:	90                   	nop
c0016250:	83 c4 0c             	add    esp,0xc
c0016253:	c3                   	ret    

c0016254 <Keyboard::~Keyboard()>:
c0016254:	83 ec 0c             	sub    esp,0xc
c0016257:	ba c8 af 02 c0       	mov    edx,0xc002afc8
c001625c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016260:	89 10                	mov    DWORD PTR [eax],edx
c0016262:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016266:	83 ec 0c             	sub    esp,0xc
c0016269:	50                   	push   eax
c001626a:	e8 21 de ff ff       	call   c0014090 <Device::~Device()>
c001626f:	83 c4 10             	add    esp,0x10
c0016272:	90                   	nop
c0016273:	83 c4 0c             	add    esp,0xc
c0016276:	c3                   	ret    
c0016277:	90                   	nop

c0016278 <Keyboard::~Keyboard()>:
c0016278:	83 ec 0c             	sub    esp,0xc
c001627b:	83 ec 0c             	sub    esp,0xc
c001627e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016282:	e8 cd ff ff ff       	call   c0016254 <Keyboard::~Keyboard()>
c0016287:	83 c4 10             	add    esp,0x10
c001628a:	83 ec 08             	sub    esp,0x8
c001628d:	68 5c 01 00 00       	push   0x15c
c0016292:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016296:	e8 1d ca ff ff       	call   c0012cb8 <operator delete(void*, unsigned long)>
c001629b:	83 c4 10             	add    esp,0x10
c001629e:	83 c4 0c             	add    esp,0xc
c00162a1:	c3                   	ret    

c00162a2 <LogicalDisk::close(int, int, void*)>:
c00162a2:	83 c8 ff             	or     eax,0xffffffff
c00162a5:	c3                   	ret    

c00162a6 <LogicalDisk::~LogicalDisk()>:
c00162a6:	83 ec 0c             	sub    esp,0xc
c00162a9:	ba 78 b0 02 c0       	mov    edx,0xc002b078
c00162ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162b2:	89 10                	mov    DWORD PTR [eax],edx
c00162b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162b8:	83 ec 0c             	sub    esp,0xc
c00162bb:	50                   	push   eax
c00162bc:	e8 cf dd ff ff       	call   c0014090 <Device::~Device()>
c00162c1:	83 c4 10             	add    esp,0x10
c00162c4:	90                   	nop
c00162c5:	83 c4 0c             	add    esp,0xc
c00162c8:	c3                   	ret    
c00162c9:	90                   	nop

c00162ca <LogicalDisk::~LogicalDisk()>:
c00162ca:	83 ec 0c             	sub    esp,0xc
c00162cd:	83 ec 0c             	sub    esp,0xc
c00162d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00162d4:	e8 cd ff ff ff       	call   c00162a6 <LogicalDisk::~LogicalDisk()>
c00162d9:	83 c4 10             	add    esp,0x10
c00162dc:	83 ec 08             	sub    esp,0x8
c00162df:	68 74 01 00 00       	push   0x174
c00162e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00162e8:	e8 cb c9 ff ff       	call   c0012cb8 <operator delete(void*, unsigned long)>
c00162ed:	83 c4 10             	add    esp,0x10
c00162f0:	83 c4 0c             	add    esp,0xc
c00162f3:	c3                   	ret    

c00162f4 <LogicalDisk::open(int, int, void*)>:
c00162f4:	83 ec 18             	sub    esp,0x18
c00162f7:	68 f4 af 02 c0       	push   0xc002aff4
c00162fc:	e8 72 41 00 00       	call   c001a473 <Krnl::panic(char const*)>
c0016301:	83 c8 ff             	or     eax,0xffffffff
c0016304:	83 c4 1c             	add    esp,0x1c
c0016307:	c3                   	ret    

c0016308 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0016308:	53                   	push   ebx
c0016309:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001630d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016311:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016315:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c001631b:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0016321:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0016327:	77 10                	ja     c0016339 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0016329:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c001632f:	89 d3                	mov    ebx,edx
c0016331:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0016337:	72 05                	jb     c001633e <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0016339:	83 c8 ff             	or     eax,0xffffffff
c001633c:	89 c2                	mov    edx,eax
c001633e:	5b                   	pop    ebx
c001633f:	c3                   	ret    

c0016340 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0016340:	56                   	push   esi
c0016341:	83 c8 ff             	or     eax,0xffffffff
c0016344:	53                   	push   ebx
c0016345:	89 c2                	mov    edx,eax
c0016347:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001634b:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001634f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016353:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016359:	77 27                	ja     c0016382 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001635b:	89 d8                	mov    eax,ebx
c001635d:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0016363:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0016369:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001636e:	89 c2                	mov    edx,eax
c0016370:	73 10                	jae    c0016382 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0016372:	89 c8                	mov    eax,ecx
c0016374:	89 da                	mov    edx,ebx
c0016376:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001637c:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0016382:	5b                   	pop    ebx
c0016383:	5e                   	pop    esi
c0016384:	c3                   	ret    
c0016385:	90                   	nop

c0016386 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016386:	83 ec 1c             	sub    esp,0x1c
c0016389:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001638d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016391:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016395:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016399:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001639d:	89 04 24             	mov    DWORD PTR [esp],eax
c00163a0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00163a4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00163a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00163ac:	83 ec 08             	sub    esp,0x8
c00163af:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00163b3:	50                   	push   eax
c00163b4:	e8 f5 df ff ff       	call   c00143ae <Device::Device(char const*)>
c00163b9:	83 c4 10             	add    esp,0x10
c00163bc:	ba 78 b0 02 c0       	mov    edx,0xc002b078
c00163c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00163c5:	89 10                	mov    DWORD PTR [eax],edx
c00163c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00163cb:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00163d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00163d6:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00163dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00163e1:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c00163eb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00163ef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00163f3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00163f7:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c00163fd:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0016403:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016407:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001640a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001640e:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0016414:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c001641a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001641e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016422:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0016428:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001642c:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0016436:	90                   	nop
c0016437:	83 c4 1c             	add    esp,0x1c
c001643a:	c3                   	ret    
c001643b:	90                   	nop

c001643c <LogicalDisk::assignDriveLetter()>:
c001643c:	55                   	push   ebp
c001643d:	57                   	push   edi
c001643e:	56                   	push   esi
c001643f:	53                   	push   ebx
c0016440:	83 ec 14             	sub    esp,0x14
c0016443:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016447:	8b 3d 40 e8 02 c0    	mov    edi,DWORD PTR ds:0xc002e840
c001644d:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0016453:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0016457:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c001645d:	8b 3d 44 e8 02 c0    	mov    edi,DWORD PTR ds:0xc002e844
c0016463:	3c 01                	cmp    al,0x1
c0016465:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0016469:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001646d:	19 c0                	sbb    eax,eax
c001646f:	83 e0 02             	and    eax,0x2
c0016472:	83 c0 41             	add    eax,0x41
c0016475:	0f be e8             	movsx  ebp,al
c0016478:	3c 43                	cmp    al,0x43
c001647a:	75 10                	jne    c001648c <LogicalDisk::assignDriveLetter()+0x50>
c001647c:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0016483:	75 5d                	jne    c00164e2 <LogicalDisk::assignDriveLetter()+0xa6>
c0016485:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001648a:	75 56                	jne    c00164e2 <LogicalDisk::assignDriveLetter()+0xa6>
c001648c:	8d 75 bf             	lea    esi,[ebp-0x41]
c001648f:	ba 01 00 00 00       	mov    edx,0x1
c0016494:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0016498:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001649c:	d3 e2                	shl    edx,cl
c001649e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00164a2:	89 d7                	mov    edi,edx
c00164a4:	89 d6                	mov    esi,edx
c00164a6:	c1 ff 1f             	sar    edi,0x1f
c00164a9:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c00164ad:	21 f9                	and    ecx,edi
c00164af:	09 d1                	or     ecx,edx
c00164b1:	75 2f                	jne    c00164e2 <LogicalDisk::assignDriveLetter()+0xa6>
c00164b3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00164b7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00164bb:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c00164c1:	09 f2                	or     edx,esi
c00164c3:	89 15 40 e8 02 c0    	mov    DWORD PTR ds:0xc002e840,edx
c00164c9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00164cd:	09 fa                	or     edx,edi
c00164cf:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00164d3:	89 15 44 e8 02 c0    	mov    DWORD PTR ds:0xc002e844,edx
c00164d9:	89 1c bd 60 e8 02 c0 	mov    DWORD PTR [edi*4-0x3ffd17a0],ebx
c00164e0:	eb 08                	jmp    c00164ea <LogicalDisk::assignDriveLetter()+0xae>
c00164e2:	45                   	inc    ebp
c00164e3:	40                   	inc    eax
c00164e4:	3c 5b                	cmp    al,0x5b
c00164e6:	75 90                	jne    c0016478 <LogicalDisk::assignDriveLetter()+0x3c>
c00164e8:	31 c0                	xor    eax,eax
c00164ea:	83 c4 14             	add    esp,0x14
c00164ed:	5b                   	pop    ebx
c00164ee:	5e                   	pop    esi
c00164ef:	5f                   	pop    edi
c00164f0:	5d                   	pop    ebp
c00164f1:	c3                   	ret    

c00164f2 <LogicalDisk::mount()>:
c00164f2:	56                   	push   esi
c00164f3:	53                   	push   ebx
c00164f4:	51                   	push   ecx
c00164f5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00164f9:	8b 1d d0 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e3d0
c00164ff:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0016509:	85 db                	test   ebx,ebx
c001650b:	74 50                	je     c001655d <LogicalDisk::mount()+0x6b>
c001650d:	e8 46 77 00 00       	call   c001dc58 <getIRQNestingLevel()>
c0016512:	52                   	push   edx
c0016513:	52                   	push   edx
c0016514:	50                   	push   eax
c0016515:	68 18 b0 02 c0       	push   0xc002b018
c001651a:	e8 79 c8 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001651f:	83 c4 0c             	add    esp,0xc
c0016522:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0016529:	8b 13                	mov    edx,DWORD PTR [ebx]
c001652b:	83 e8 41             	sub    eax,0x41
c001652e:	50                   	push   eax
c001652f:	56                   	push   esi
c0016530:	53                   	push   ebx
c0016531:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016534:	83 c4 10             	add    esp,0x10
c0016537:	84 c0                	test   al,al
c0016539:	74 08                	je     c0016543 <LogicalDisk::mount()+0x51>
c001653b:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0016541:	eb 1c                	jmp    c001655f <LogicalDisk::mount()+0x6d>
c0016543:	e8 10 77 00 00       	call   c001dc58 <getIRQNestingLevel()>
c0016548:	51                   	push   ecx
c0016549:	51                   	push   ecx
c001654a:	50                   	push   eax
c001654b:	68 33 b0 02 c0       	push   0xc002b033
c0016550:	e8 43 c8 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0016555:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0016558:	83 c4 10             	add    esp,0x10
c001655b:	eb ac                	jmp    c0016509 <LogicalDisk::mount()+0x17>
c001655d:	31 c0                	xor    eax,eax
c001655f:	5a                   	pop    edx
c0016560:	5b                   	pop    ebx
c0016561:	5e                   	pop    esi
c0016562:	c3                   	ret    
c0016563:	90                   	nop

c0016564 <LogicalDisk::unmount()>:
c0016564:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016568:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0016572:	c3                   	ret    
c0016573:	90                   	nop

c0016574 <LogicalDisk::eject()>:
c0016574:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016578:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001657e:	8b 10                	mov    edx,DWORD PTR [eax]
c0016580:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016584:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0016587:	90                   	nop

c0016588 <LogicalDisk::unassignDriveLetter()>:
c0016588:	57                   	push   edi
c0016589:	56                   	push   esi
c001658a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001658e:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0016595:	84 c9                	test   cl,cl
c0016597:	75 0f                	jne    c00165a8 <LogicalDisk::unassignDriveLetter()+0x20>
c0016599:	c7 44 24 0c 4e b0 02 c0 	mov    DWORD PTR [esp+0xc],0xc002b04e
c00165a1:	5e                   	pop    esi
c00165a2:	5f                   	pop    edi
c00165a3:	e9 cb 3e 00 00       	jmp    c001a473 <Krnl::panic(char const*)>
c00165a8:	83 e9 41             	sub    ecx,0x41
c00165ab:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c00165b2:	b8 01 00 00 00       	mov    eax,0x1
c00165b7:	c7 04 8d 60 e8 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd17a0],0x0
c00165c2:	d3 e0                	shl    eax,cl
c00165c4:	89 c7                	mov    edi,eax
c00165c6:	f7 d0                	not    eax
c00165c8:	c1 ff 1f             	sar    edi,0x1f
c00165cb:	21 05 40 e8 02 c0    	and    DWORD PTR ds:0xc002e840,eax
c00165d1:	89 fe                	mov    esi,edi
c00165d3:	f7 d6                	not    esi
c00165d5:	21 35 44 e8 02 c0    	and    DWORD PTR ds:0xc002e844,esi
c00165db:	5e                   	pop    esi
c00165dc:	5f                   	pop    edi
c00165dd:	c3                   	ret    

c00165de <LogicalDisk::read(unsigned long long, int, void*)>:
c00165de:	57                   	push   edi
c00165df:	56                   	push   esi
c00165e0:	53                   	push   ebx
c00165e1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00165e5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00165e9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00165ed:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00165f1:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00165f7:	77 41                	ja     c001663a <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c00165f9:	99                   	cdq    
c00165fa:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016600:	01 c8                	add    eax,ecx
c0016602:	11 da                	adc    edx,ebx
c0016604:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001660a:	19 d7                	sbb    edi,edx
c001660c:	72 33                	jb     c0016641 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c001660e:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016614:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001661a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001661e:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016622:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016628:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001662e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016632:	5b                   	pop    ebx
c0016633:	5e                   	pop    esi
c0016634:	5f                   	pop    edi
c0016635:	e9 b0 0a 00 00       	jmp    c00170ea <VCache::read(unsigned long long, int, void*)>
c001663a:	b8 05 00 00 00       	mov    eax,0x5
c001663f:	eb 05                	jmp    c0016646 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0016641:	b8 07 00 00 00       	mov    eax,0x7
c0016646:	5b                   	pop    ebx
c0016647:	5e                   	pop    esi
c0016648:	5f                   	pop    edi
c0016649:	c3                   	ret    

c001664a <LogicalDisk::write(unsigned long long, int, void*)>:
c001664a:	57                   	push   edi
c001664b:	56                   	push   esi
c001664c:	53                   	push   ebx
c001664d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016651:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016655:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016659:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001665d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016663:	77 41                	ja     c00166a6 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0016665:	99                   	cdq    
c0016666:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001666c:	01 c8                	add    eax,ecx
c001666e:	11 da                	adc    edx,ebx
c0016670:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016676:	19 d7                	sbb    edi,edx
c0016678:	72 33                	jb     c00166ad <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c001667a:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016680:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016686:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001668a:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001668e:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016694:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001669a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001669e:	5b                   	pop    ebx
c001669f:	5e                   	pop    esi
c00166a0:	5f                   	pop    edi
c00166a1:	e9 4e 09 00 00       	jmp    c0016ff4 <VCache::write(unsigned long long, int, void*)>
c00166a6:	b8 05 00 00 00       	mov    eax,0x5
c00166ab:	eb 05                	jmp    c00166b2 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c00166ad:	b8 07 00 00 00       	mov    eax,0x7
c00166b2:	5b                   	pop    ebx
c00166b3:	5e                   	pop    esi
c00166b4:	5f                   	pop    edi
c00166b5:	c3                   	ret    

c00166b6 <Mouse::Mouse(char const*)>:
c00166b6:	83 ec 0c             	sub    esp,0xc
c00166b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00166bd:	83 ec 08             	sub    esp,0x8
c00166c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00166c4:	50                   	push   eax
c00166c5:	e8 e4 dc ff ff       	call   c00143ae <Device::Device(char const*)>
c00166ca:	83 c4 10             	add    esp,0x10
c00166cd:	ba a4 b0 02 c0       	mov    edx,0xc002b0a4
c00166d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00166d6:	89 10                	mov    DWORD PTR [eax],edx
c00166d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00166dc:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c00166e6:	90                   	nop
c00166e7:	83 c4 0c             	add    esp,0xc
c00166ea:	c3                   	ret    
c00166eb:	90                   	nop

c00166ec <Mouse::~Mouse()>:
c00166ec:	83 ec 0c             	sub    esp,0xc
c00166ef:	ba a4 b0 02 c0       	mov    edx,0xc002b0a4
c00166f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00166f8:	89 10                	mov    DWORD PTR [eax],edx
c00166fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00166fe:	83 ec 0c             	sub    esp,0xc
c0016701:	50                   	push   eax
c0016702:	e8 89 d9 ff ff       	call   c0014090 <Device::~Device()>
c0016707:	83 c4 10             	add    esp,0x10
c001670a:	90                   	nop
c001670b:	83 c4 0c             	add    esp,0xc
c001670e:	c3                   	ret    
c001670f:	90                   	nop

c0016710 <Mouse::~Mouse()>:
c0016710:	83 ec 0c             	sub    esp,0xc
c0016713:	83 ec 0c             	sub    esp,0xc
c0016716:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001671a:	e8 cd ff ff ff       	call   c00166ec <Mouse::~Mouse()>
c001671f:	83 c4 10             	add    esp,0x10
c0016722:	83 ec 08             	sub    esp,0x8
c0016725:	68 58 01 00 00       	push   0x158
c001672a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001672e:	e8 85 c5 ff ff       	call   c0012cb8 <operator delete(void*, unsigned long)>
c0016733:	83 c4 10             	add    esp,0x10
c0016736:	83 c4 0c             	add    esp,0xc
c0016739:	c3                   	ret    

c001673a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c001673a:	55                   	push   ebp
c001673b:	57                   	push   edi
c001673c:	56                   	push   esi
c001673d:	53                   	push   ebx
c001673e:	81 ec 28 01 00 00    	sub    esp,0x128
c0016744:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001674b:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0016752:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0016759:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0016760:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016764:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0016768:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001676f:	e8 36 dd ff ff       	call   c00144aa <Device::getName()>
c0016774:	5a                   	pop    edx
c0016775:	59                   	pop    ecx
c0016776:	50                   	push   eax
c0016777:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001677b:	55                   	push   ebp
c001677c:	e8 b3 a0 fe ff       	call   c0000834 <strcpy>
c0016781:	5b                   	pop    ebx
c0016782:	58                   	pop    eax
c0016783:	68 c8 b0 02 c0       	push   0xc002b0c8
c0016788:	55                   	push   ebp
c0016789:	e8 e6 a1 fe ff       	call   c0000974 <strcat>
c001678e:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0016795:	e8 a6 90 ff ff       	call   c000f840 <malloc>
c001679a:	83 c4 0c             	add    esp,0xc
c001679d:	89 c3                	mov    ebx,eax
c001679f:	57                   	push   edi
c00167a0:	56                   	push   esi
c00167a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00167a5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00167a9:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00167b0:	55                   	push   ebp
c00167b1:	50                   	push   eax
c00167b2:	e8 cf fb ff ff       	call   c0016386 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00167b7:	83 c4 14             	add    esp,0x14
c00167ba:	53                   	push   ebx
c00167bb:	e8 7c fc ff ff       	call   c001643c <LogicalDisk::assignDriveLetter()>
c00167c0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00167c3:	89 c6                	mov    esi,eax
c00167c5:	e8 28 fd ff ff       	call   c00164f2 <LogicalDisk::mount()>
c00167ca:	58                   	pop    eax
c00167cb:	5a                   	pop    edx
c00167cc:	53                   	push   ebx
c00167cd:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00167d4:	e8 e5 d9 ff ff       	call   c00141be <Device::addChild(Device*)>
c00167d9:	59                   	pop    ecx
c00167da:	89 f0                	mov    eax,esi
c00167dc:	5b                   	pop    ebx
c00167dd:	0f be f0             	movsx  esi,al
c00167e0:	56                   	push   esi
c00167e1:	68 d3 b0 02 c0       	push   0xc002b0d3
c00167e6:	e8 ad c5 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c00167eb:	81 c4 2c 01 00 00    	add    esp,0x12c
c00167f1:	5b                   	pop    ebx
c00167f2:	5e                   	pop    esi
c00167f3:	5f                   	pop    edi
c00167f4:	5d                   	pop    ebp
c00167f5:	c3                   	ret    

c00167f6 <createPartitionsForDisk(PhysicalDisk*)>:
c00167f6:	55                   	push   ebp
c00167f7:	57                   	push   edi
c00167f8:	56                   	push   esi
c00167f9:	53                   	push   ebx
c00167fa:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0016800:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0016807:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001680d:	3d 00 02 00 00       	cmp    eax,0x200
c0016812:	74 27                	je     c001683b <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0016814:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c001681a:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0016820:	83 ec 10             	sub    esp,0x10
c0016823:	0f a4 f7 0a          	shld   edi,esi,0xa
c0016827:	99                   	cdq    
c0016828:	c1 e6 0a             	shl    esi,0xa
c001682b:	52                   	push   edx
c001682c:	89 fd                	mov    ebp,edi
c001682e:	50                   	push   eax
c001682f:	55                   	push   ebp
c0016830:	56                   	push   esi
c0016831:	e8 46 00 01 00       	call   c002687c <__udivdi3>
c0016836:	e9 b1 00 00 00       	jmp    c00168ec <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c001683b:	83 ec 0c             	sub    esp,0xc
c001683e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016840:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0016844:	56                   	push   esi
c0016845:	6a 01                	push   0x1
c0016847:	6a 00                	push   0x0
c0016849:	6a 00                	push   0x0
c001684b:	53                   	push   ebx
c001684c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001684f:	83 c4 20             	add    esp,0x20
c0016852:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c001685a:	75 0a                	jne    c0016866 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c001685c:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0016864:	74 2c                	je     c0016892 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0016866:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001686c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016872:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016878:	83 ec 10             	sub    esp,0x10
c001687b:	0f a4 c2 0a          	shld   edx,eax,0xa
c001687f:	89 f7                	mov    edi,esi
c0016881:	c1 e0 0a             	shl    eax,0xa
c0016884:	c1 ff 1f             	sar    edi,0x1f
c0016887:	57                   	push   edi
c0016888:	56                   	push   esi
c0016889:	52                   	push   edx
c001688a:	50                   	push   eax
c001688b:	e8 ec ff 00 00       	call   c002687c <__udivdi3>
c0016890:	eb 5a                	jmp    c00168ec <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016892:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0016899:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c00168a0:	83 e1 7f             	and    ecx,0x7f
c00168a3:	83 e0 7f             	and    eax,0x7f
c00168a6:	01 c1                	add    ecx,eax
c00168a8:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c00168af:	83 e0 7f             	and    eax,0x7f
c00168b2:	01 c1                	add    ecx,eax
c00168b4:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c00168bb:	83 e0 7f             	and    eax,0x7f
c00168be:	00 c1                	add    cl,al
c00168c0:	74 41                	je     c0016903 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c00168c2:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00168c8:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00168ce:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00168d4:	83 ec 10             	sub    esp,0x10
c00168d7:	0f a4 c2 0a          	shld   edx,eax,0xa
c00168db:	89 f7                	mov    edi,esi
c00168dd:	c1 e0 0a             	shl    eax,0xa
c00168e0:	c1 ff 1f             	sar    edi,0x1f
c00168e3:	57                   	push   edi
c00168e4:	56                   	push   esi
c00168e5:	52                   	push   edx
c00168e6:	50                   	push   eax
c00168e7:	e8 90 ff 00 00       	call   c002687c <__udivdi3>
c00168ec:	83 c4 14             	add    esp,0x14
c00168ef:	52                   	push   edx
c00168f0:	50                   	push   eax
c00168f1:	6a 00                	push   0x0
c00168f3:	6a 00                	push   0x0
c00168f5:	53                   	push   ebx
c00168f6:	e8 3f fe ff ff       	call   c001673a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00168fb:	83 c4 20             	add    esp,0x20
c00168fe:	e9 79 01 00 00       	jmp    c0016a7c <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016903:	89 f0                	mov    eax,esi
c0016905:	31 f6                	xor    esi,esi
c0016907:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c001690e:	75 02                	jne    c0016912 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016910:	89 f1                	mov    ecx,esi
c0016912:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016919:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016920:	c1 e2 08             	shl    edx,0x8
c0016923:	c1 e7 10             	shl    edi,0x10
c0016926:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c001692e:	09 fa                	or     edx,edi
c0016930:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016938:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c001693f:	83 c0 10             	add    eax,0x10
c0016942:	09 fa                	or     edx,edi
c0016944:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c001694b:	c1 e7 18             	shl    edi,0x18
c001694e:	09 fa                	or     edx,edi
c0016950:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016957:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c001695b:	c1 e7 10             	shl    edi,0x10
c001695e:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016965:	c1 e2 08             	shl    edx,0x8
c0016968:	09 fa                	or     edx,edi
c001696a:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016971:	09 fa                	or     edx,edi
c0016973:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c001697a:	c1 e7 18             	shl    edi,0x18
c001697d:	09 fa                	or     edx,edi
c001697f:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016983:	46                   	inc    esi
c0016984:	83 fe 04             	cmp    esi,0x4
c0016987:	0f 85 7a ff ff ff    	jne    c0016907 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c001698d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016991:	83 f0 01             	xor    eax,0x1
c0016994:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016998:	75 57                	jne    c00169f1 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001699a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001699e:	83 f0 01             	xor    eax,0x1
c00169a1:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00169a5:	75 4a                	jne    c00169f1 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00169a7:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00169ab:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00169b3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00169bb:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00169c1:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00169c7:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00169cd:	0f a4 c2 0a          	shld   edx,eax,0xa
c00169d1:	89 f7                	mov    edi,esi
c00169d3:	c1 e0 0a             	shl    eax,0xa
c00169d6:	c1 ff 1f             	sar    edi,0x1f
c00169d9:	57                   	push   edi
c00169da:	56                   	push   esi
c00169db:	52                   	push   edx
c00169dc:	50                   	push   eax
c00169dd:	e8 9a fe 00 00       	call   c002687c <__udivdi3>
c00169e2:	83 c4 10             	add    esp,0x10
c00169e5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00169e9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00169ed:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00169f1:	84 c9                	test   cl,cl
c00169f3:	74 53                	je     c0016a48 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c00169f5:	0f b6 c9             	movzx  ecx,cl
c00169f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00169fc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016a00:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016a04:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016a08:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016a0c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016a10:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016a14:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016a18:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016a1c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016a20:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016a24:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016a28:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016a2c:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016a30:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016a34:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016a38:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016a3c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016a40:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016a44:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016a48:	31 ed                	xor    ebp,ebp
c0016a4a:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016a4e:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016a52:	89 f8                	mov    eax,edi
c0016a54:	09 f0                	or     eax,esi
c0016a56:	74 1e                	je     c0016a76 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016a58:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016a5c:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016a60:	89 d1                	mov    ecx,edx
c0016a62:	09 c1                	or     ecx,eax
c0016a64:	74 10                	je     c0016a76 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016a66:	83 ec 0c             	sub    esp,0xc
c0016a69:	57                   	push   edi
c0016a6a:	56                   	push   esi
c0016a6b:	52                   	push   edx
c0016a6c:	50                   	push   eax
c0016a6d:	53                   	push   ebx
c0016a6e:	e8 c7 fc ff ff       	call   c001673a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016a73:	83 c4 20             	add    esp,0x20
c0016a76:	45                   	inc    ebp
c0016a77:	83 fd 04             	cmp    ebp,0x4
c0016a7a:	75 ce                	jne    c0016a4a <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016a7c:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016a82:	5b                   	pop    ebx
c0016a83:	5e                   	pop    esi
c0016a84:	5f                   	pop    edi
c0016a85:	5d                   	pop    ebp
c0016a86:	c3                   	ret    
c0016a87:	90                   	nop

c0016a88 <Serial::Serial(char const*)>:
c0016a88:	83 ec 0c             	sub    esp,0xc
c0016a8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a8f:	83 ec 08             	sub    esp,0x8
c0016a92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016a96:	50                   	push   eax
c0016a97:	e8 12 d9 ff ff       	call   c00143ae <Device::Device(char const*)>
c0016a9c:	83 c4 10             	add    esp,0x10
c0016a9f:	ba 00 b1 02 c0       	mov    edx,0xc002b100
c0016aa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016aa8:	89 10                	mov    DWORD PTR [eax],edx
c0016aaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016aae:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016ab8:	90                   	nop
c0016ab9:	83 c4 0c             	add    esp,0xc
c0016abc:	c3                   	ret    
c0016abd:	90                   	nop

c0016abe <Serial::~Serial()>:
c0016abe:	83 ec 0c             	sub    esp,0xc
c0016ac1:	ba 00 b1 02 c0       	mov    edx,0xc002b100
c0016ac6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016aca:	89 10                	mov    DWORD PTR [eax],edx
c0016acc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ad0:	83 ec 0c             	sub    esp,0xc
c0016ad3:	50                   	push   eax
c0016ad4:	e8 b7 d5 ff ff       	call   c0014090 <Device::~Device()>
c0016ad9:	83 c4 10             	add    esp,0x10
c0016adc:	90                   	nop
c0016add:	83 c4 0c             	add    esp,0xc
c0016ae0:	c3                   	ret    
c0016ae1:	90                   	nop

c0016ae2 <Serial::~Serial()>:
c0016ae2:	83 ec 0c             	sub    esp,0xc
c0016ae5:	83 ec 0c             	sub    esp,0xc
c0016ae8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016aec:	e8 cd ff ff ff       	call   c0016abe <Serial::~Serial()>
c0016af1:	83 c4 10             	add    esp,0x10
c0016af4:	83 ec 08             	sub    esp,0x8
c0016af7:	68 58 01 00 00       	push   0x158
c0016afc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016b00:	e8 b3 c1 ff ff       	call   c0012cb8 <operator delete(void*, unsigned long)>
c0016b05:	83 c4 10             	add    esp,0x10
c0016b08:	83 c4 0c             	add    esp,0xc
c0016b0b:	c3                   	ret    

c0016b0c <Timer::Timer(char const*)>:
c0016b0c:	83 ec 0c             	sub    esp,0xc
c0016b0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b13:	83 ec 08             	sub    esp,0x8
c0016b16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016b1a:	50                   	push   eax
c0016b1b:	e8 8e d8 ff ff       	call   c00143ae <Device::Device(char const*)>
c0016b20:	83 c4 10             	add    esp,0x10
c0016b23:	ba 44 b1 02 c0       	mov    edx,0xc002b144
c0016b28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b2c:	89 10                	mov    DWORD PTR [eax],edx
c0016b2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b32:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016b3c:	90                   	nop
c0016b3d:	83 c4 0c             	add    esp,0xc
c0016b40:	c3                   	ret    
c0016b41:	90                   	nop

c0016b42 <Timer::~Timer()>:
c0016b42:	83 ec 0c             	sub    esp,0xc
c0016b45:	ba 44 b1 02 c0       	mov    edx,0xc002b144
c0016b4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b4e:	89 10                	mov    DWORD PTR [eax],edx
c0016b50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b54:	83 ec 0c             	sub    esp,0xc
c0016b57:	50                   	push   eax
c0016b58:	e8 33 d5 ff ff       	call   c0014090 <Device::~Device()>
c0016b5d:	83 c4 10             	add    esp,0x10
c0016b60:	90                   	nop
c0016b61:	83 c4 0c             	add    esp,0xc
c0016b64:	c3                   	ret    
c0016b65:	90                   	nop

c0016b66 <Timer::~Timer()>:
c0016b66:	83 ec 0c             	sub    esp,0xc
c0016b69:	83 ec 0c             	sub    esp,0xc
c0016b6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016b70:	e8 cd ff ff ff       	call   c0016b42 <Timer::~Timer()>
c0016b75:	83 c4 10             	add    esp,0x10
c0016b78:	83 ec 08             	sub    esp,0x8
c0016b7b:	68 5c 01 00 00       	push   0x15c
c0016b80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016b84:	e8 2f c1 ff ff       	call   c0012cb8 <operator delete(void*, unsigned long)>
c0016b89:	83 c4 10             	add    esp,0x10
c0016b8c:	83 c4 0c             	add    esp,0xc
c0016b8f:	c3                   	ret    

c0016b90 <Timer::read()>:
c0016b90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016b94:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016b9a:	c3                   	ret    

c0016b9b <timerHandler(unsigned long long)>:
c0016b9b:	55                   	push   ebp
c0016b9c:	57                   	push   edi
c0016b9d:	56                   	push   esi
c0016b9e:	53                   	push   ebx
c0016b9f:	83 ec 0c             	sub    esp,0xc
c0016ba2:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016ba6:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016baa:	01 35 d0 e8 02 c0    	add    DWORD PTR ds:0xc002e8d0,esi
c0016bb0:	11 3d d4 e8 02 c0    	adc    DWORD PTR ds:0xc002e8d4,edi
c0016bb6:	80 3d 4d e2 02 c0 00 	cmp    BYTE PTR ds:0xc002e24d,0x0
c0016bbd:	0f 84 07 01 00 00    	je     c0016cca <timerHandler(unsigned long long)+0x12f>
c0016bc3:	e8 cc 70 00 00       	call   c001dc94 <lockStuff()>
c0016bc8:	83 ec 0c             	sub    esp,0xc
c0016bcb:	68 9c 17 03 c0       	push   0xc003179c
c0016bd0:	e8 19 1d 01 00       	call   c00288ee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016bd5:	c7 04 24 9c 17 03 c0 	mov    DWORD PTR [esp],0xc003179c
c0016bdc:	89 c3                	mov    ebx,eax
c0016bde:	e8 13 1d 01 00       	call   c00288f6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016be3:	83 c4 10             	add    esp,0x10
c0016be6:	84 c0                	test   al,al
c0016be8:	74 60                	je     c0016c4a <timerHandler(unsigned long long)+0xaf>
c0016bea:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016bf0:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0016bf3:	85 c0                	test   eax,eax
c0016bf5:	0f 85 91 00 00 00    	jne    c0016c8c <timerHandler(unsigned long long)+0xf1>
c0016bfb:	e9 be 00 00 00       	jmp    c0016cbe <timerHandler(unsigned long long)+0x123>
c0016c00:	83 ec 0c             	sub    esp,0xc
c0016c03:	55                   	push   ebp
c0016c04:	e8 7b 76 00 00       	call   c001e284 <unblockTask(ThreadControlBlock*)>
c0016c09:	83 c4 10             	add    esp,0x10
c0016c0c:	39 eb                	cmp    ebx,ebp
c0016c0e:	75 12                	jne    c0016c22 <timerHandler(unsigned long long)+0x87>
c0016c10:	83 ec 0c             	sub    esp,0xc
c0016c13:	68 9c 17 03 c0       	push   0xc003179c
c0016c18:	e8 d1 1c 01 00       	call   c00288ee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016c1d:	89 c3                	mov    ebx,eax
c0016c1f:	83 c4 10             	add    esp,0x10
c0016c22:	83 ec 0c             	sub    esp,0xc
c0016c25:	68 9c 17 03 c0       	push   0xc003179c
c0016c2a:	e8 c7 1c 01 00       	call   c00288f6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016c2f:	83 c4 10             	add    esp,0x10
c0016c32:	84 c0                	test   al,al
c0016c34:	75 b4                	jne    c0016bea <timerHandler(unsigned long long)+0x4f>
c0016c36:	83 ec 0c             	sub    esp,0xc
c0016c39:	68 9c 17 03 c0       	push   0xc003179c
c0016c3e:	e8 ab 1c 01 00       	call   c00288ee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016c43:	83 c4 10             	add    esp,0x10
c0016c46:	39 d8                	cmp    eax,ebx
c0016c48:	74 a0                	je     c0016bea <timerHandler(unsigned long long)+0x4f>
c0016c4a:	83 ec 0c             	sub    esp,0xc
c0016c4d:	68 9c 17 03 c0       	push   0xc003179c
c0016c52:	e8 97 1c 01 00       	call   c00288ee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016c57:	c7 04 24 9c 17 03 c0 	mov    DWORD PTR [esp],0xc003179c
c0016c5e:	89 c5                	mov    ebp,eax
c0016c60:	e8 ad 1c 01 00       	call   c0028912 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016c65:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016c68:	83 c4 10             	add    esp,0x10
c0016c6b:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016c6e:	39 15 d0 e8 02 c0    	cmp    DWORD PTR ds:0xc002e8d0,edx
c0016c74:	a1 d4 e8 02 c0       	mov    eax,ds:0xc002e8d4
c0016c79:	19 c8                	sbb    eax,ecx
c0016c7b:	73 83                	jae    c0016c00 <timerHandler(unsigned long long)+0x65>
c0016c7d:	50                   	push   eax
c0016c7e:	50                   	push   eax
c0016c7f:	55                   	push   ebp
c0016c80:	68 9c 17 03 c0       	push   0xc003179c
c0016c85:	e8 36 1d 01 00       	call   c00289c0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016c8a:	eb 93                	jmp    c0016c1f <timerHandler(unsigned long long)+0x84>
c0016c8c:	80 3d 4c e2 02 c0 00 	cmp    BYTE PTR ds:0xc002e24c,0x0
c0016c93:	74 29                	je     c0016cbe <timerHandler(unsigned long long)+0x123>
c0016c95:	39 c6                	cmp    esi,eax
c0016c97:	bb 00 00 00 00       	mov    ebx,0x0
c0016c9c:	19 df                	sbb    edi,ebx
c0016c9e:	72 19                	jb     c0016cb9 <timerHandler(unsigned long long)+0x11e>
c0016ca0:	e8 c8 6f 00 00       	call   c001dc6d <lockScheduler()>
c0016ca5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016caa:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016cad:	e8 f6 72 00 00       	call   c001dfa8 <schedule()>
c0016cb2:	e8 b8 6f 00 00       	call   c001dc6f <unlockScheduler()>
c0016cb7:	eb 05                	jmp    c0016cbe <timerHandler(unsigned long long)+0x123>
c0016cb9:	29 f0                	sub    eax,esi
c0016cbb:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0016cbe:	83 c4 0c             	add    esp,0xc
c0016cc1:	5b                   	pop    ebx
c0016cc2:	5e                   	pop    esi
c0016cc3:	5f                   	pop    edi
c0016cc4:	5d                   	pop    ebp
c0016cc5:	e9 63 73 00 00       	jmp    c001e02d <unlockStuff()>
c0016cca:	83 c4 0c             	add    esp,0xc
c0016ccd:	5b                   	pop    ebx
c0016cce:	5e                   	pop    esi
c0016ccf:	5f                   	pop    edi
c0016cd0:	5d                   	pop    ebp
c0016cd1:	c3                   	ret    

c0016cd2 <setupTimer(int)>:
c0016cd2:	57                   	push   edi
c0016cd3:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c0016cd8:	56                   	push   esi
c0016cd9:	53                   	push   ebx
c0016cda:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016cde:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016ce4:	83 ec 0c             	sub    esp,0xc
c0016ce7:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016ced:	e8 b8 d7 ff ff       	call   c00144aa <Device::getName()>
c0016cf2:	83 c4 10             	add    esp,0x10
c0016cf5:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016cf8:	0f 85 8d 00 00 00    	jne    c0016d8b <setupTimer(int)+0xb9>
c0016cfe:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c0016d03:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016d0a:	74 7f                	je     c0016d8b <setupTimer(int)+0xb9>
c0016d0c:	83 ec 0c             	sub    esp,0xc
c0016d0f:	68 5c 01 00 00       	push   0x15c
c0016d14:	e8 27 8b ff ff       	call   c000f840 <malloc>
c0016d19:	89 04 24             	mov    DWORD PTR [esp],eax
c0016d1c:	89 c3                	mov    ebx,eax
c0016d1e:	e8 31 f7 00 00       	call   c0026454 <PIT::PIT()>
c0016d23:	59                   	pop    ecx
c0016d24:	5f                   	pop    edi
c0016d25:	53                   	push   ebx
c0016d26:	ff 35 48 e2 02 c0    	push   DWORD PTR ds:0xc002e248
c0016d2c:	e8 8d d4 ff ff       	call   c00141be <Device::addChild(Device*)>
c0016d31:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016d33:	6a 00                	push   0x0
c0016d35:	6a 00                	push   0x0
c0016d37:	56                   	push   esi
c0016d38:	53                   	push   ebx
c0016d39:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016d3c:	83 c4 14             	add    esp,0x14
c0016d3f:	68 60 01 00 00       	push   0x160
c0016d44:	e8 f7 8a ff ff       	call   c000f840 <malloc>
c0016d49:	89 04 24             	mov    DWORD PTR [esp],eax
c0016d4c:	89 c7                	mov    edi,eax
c0016d4e:	e8 b1 f5 00 00       	call   c0026304 <APICTimer::APICTimer()>
c0016d53:	6a 00                	push   0x0
c0016d55:	6a 00                	push   0x0
c0016d57:	56                   	push   esi
c0016d58:	57                   	push   edi
c0016d59:	e8 a8 f4 00 00       	call   c0026206 <APICTimer::open(int, int, void*)>
c0016d5e:	83 c4 20             	add    esp,0x20
c0016d61:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016d63:	6a 00                	push   0x0
c0016d65:	6a 00                	push   0x0
c0016d67:	6a 00                	push   0x0
c0016d69:	53                   	push   ebx
c0016d6a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016d6d:	58                   	pop    eax
c0016d6e:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c0016d73:	5a                   	pop    edx
c0016d74:	57                   	push   edi
c0016d75:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016d7b:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016d81:	e8 38 d4 ff ff       	call   c00141be <Device::addChild(Device*)>
c0016d86:	83 c4 10             	add    esp,0x10
c0016d89:	eb 33                	jmp    c0016dbe <setupTimer(int)+0xec>
c0016d8b:	83 ec 0c             	sub    esp,0xc
c0016d8e:	68 5c 01 00 00       	push   0x15c
c0016d93:	e8 a8 8a ff ff       	call   c000f840 <malloc>
c0016d98:	89 04 24             	mov    DWORD PTR [esp],eax
c0016d9b:	89 c3                	mov    ebx,eax
c0016d9d:	e8 b2 f6 00 00       	call   c0026454 <PIT::PIT()>
c0016da2:	58                   	pop    eax
c0016da3:	5a                   	pop    edx
c0016da4:	53                   	push   ebx
c0016da5:	ff 35 48 e2 02 c0    	push   DWORD PTR ds:0xc002e248
c0016dab:	e8 0e d4 ff ff       	call   c00141be <Device::addChild(Device*)>
c0016db0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016db2:	6a 00                	push   0x0
c0016db4:	6a 00                	push   0x0
c0016db6:	56                   	push   esi
c0016db7:	53                   	push   ebx
c0016db8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016dbb:	83 c4 20             	add    esp,0x20
c0016dbe:	89 d8                	mov    eax,ebx
c0016dc0:	5b                   	pop    ebx
c0016dc1:	5e                   	pop    esi
c0016dc2:	5f                   	pop    edi
c0016dc3:	c3                   	ret    

c0016dc4 <VCache::VCache(PhysicalDisk*)>:
c0016dc4:	53                   	push   ebx
c0016dc5:	83 ec 18             	sub    esp,0x18
c0016dc8:	ba 74 b1 02 c0       	mov    edx,0xc002b174
c0016dcd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016dd1:	89 10                	mov    DWORD PTR [eax],edx
c0016dd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016dd7:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016dde:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016de2:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016de9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ded:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016df4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016dfb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016dff:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016e06:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016e0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e11:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016e18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e1c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016e20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e24:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0016e2b:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0016e32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e36:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016e3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e3e:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0016e42:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e46:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016e4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e4e:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016e55:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0016e5d:	83 ec 0c             	sub    esp,0xc
c0016e60:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016e64:	e8 d7 89 ff ff       	call   c000f840 <malloc>
c0016e69:	83 c4 10             	add    esp,0x10
c0016e6c:	89 c3                	mov    ebx,eax
c0016e6e:	83 ec 0c             	sub    esp,0xc
c0016e71:	53                   	push   ebx
c0016e72:	e8 15 6f 00 00       	call   c001dd8c <Mutex::Mutex()>
c0016e77:	83 c4 10             	add    esp,0x10
c0016e7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e7e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0016e81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e85:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016e89:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0016e8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e90:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0016e97:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016e9b:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016ea1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ea5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016ea8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016eac:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0016eb2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016eb8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016ebc:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0016ebf:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0016ec2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ec6:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016eca:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016ece:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016ed4:	05 00 01 00 00       	add    eax,0x100
c0016ed9:	c1 e0 04             	shl    eax,0x4
c0016edc:	83 ec 0c             	sub    esp,0xc
c0016edf:	50                   	push   eax
c0016ee0:	e8 5b 89 ff ff       	call   c000f840 <malloc>
c0016ee5:	83 c4 10             	add    esp,0x10
c0016ee8:	89 c2                	mov    edx,eax
c0016eea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016eee:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016ef1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ef5:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016efc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f00:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016f04:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016f08:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016f0e:	c1 e0 07             	shl    eax,0x7
c0016f11:	83 ec 0c             	sub    esp,0xc
c0016f14:	50                   	push   eax
c0016f15:	e8 26 89 ff ff       	call   c000f840 <malloc>
c0016f1a:	83 c4 10             	add    esp,0x10
c0016f1d:	89 c2                	mov    edx,eax
c0016f1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f23:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0016f26:	90                   	nop
c0016f27:	83 c4 18             	add    esp,0x18
c0016f2a:	5b                   	pop    ebx
c0016f2b:	c3                   	ret    

c0016f2c <VCache::invalidateReadBuffer()>:
c0016f2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016f30:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0016f36:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016f3a:	c3                   	ret    
c0016f3b:	90                   	nop

c0016f3c <VCache::writeWriteBuffer()>:
c0016f3c:	53                   	push   ebx
c0016f3d:	83 ec 14             	sub    esp,0x14
c0016f40:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016f44:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016f47:	8b 10                	mov    edx,DWORD PTR [eax]
c0016f49:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016f4c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016f4f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0016f52:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0016f55:	50                   	push   eax
c0016f56:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016f59:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0016f60:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0016f67:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0016f6b:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0016f72:	83 c4 28             	add    esp,0x28
c0016f75:	5b                   	pop    ebx
c0016f76:	c3                   	ret    
c0016f77:	90                   	nop

c0016f78 <VCache::~VCache()>:
c0016f78:	83 ec 0c             	sub    esp,0xc
c0016f7b:	ba 74 b1 02 c0       	mov    edx,0xc002b174
c0016f80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f84:	89 10                	mov    DWORD PTR [eax],edx
c0016f86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f8a:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0016f8d:	84 c0                	test   al,al
c0016f8f:	74 0f                	je     c0016fa0 <VCache::~VCache()+0x28>
c0016f91:	83 ec 0c             	sub    esp,0xc
c0016f94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016f98:	e8 9f ff ff ff       	call   c0016f3c <VCache::writeWriteBuffer()>
c0016f9d:	83 c4 10             	add    esp,0x10
c0016fa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016fa4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0016fa7:	83 ec 0c             	sub    esp,0xc
c0016faa:	50                   	push   eax
c0016fab:	e8 a0 88 ff ff       	call   c000f850 <free>
c0016fb0:	83 c4 10             	add    esp,0x10
c0016fb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016fb7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016fba:	83 ec 0c             	sub    esp,0xc
c0016fbd:	50                   	push   eax
c0016fbe:	e8 8d 88 ff ff       	call   c000f850 <free>
c0016fc3:	83 c4 10             	add    esp,0x10
c0016fc6:	90                   	nop
c0016fc7:	83 c4 0c             	add    esp,0xc
c0016fca:	c3                   	ret    
c0016fcb:	90                   	nop

c0016fcc <VCache::~VCache()>:
c0016fcc:	83 ec 0c             	sub    esp,0xc
c0016fcf:	83 ec 0c             	sub    esp,0xc
c0016fd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016fd6:	e8 9d ff ff ff       	call   c0016f78 <VCache::~VCache()>
c0016fdb:	83 c4 10             	add    esp,0x10
c0016fde:	83 ec 08             	sub    esp,0x8
c0016fe1:	6a 44                	push   0x44
c0016fe3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016fe7:	e8 cc bc ff ff       	call   c0012cb8 <operator delete(void*, unsigned long)>
c0016fec:	83 c4 10             	add    esp,0x10
c0016fef:	83 c4 0c             	add    esp,0xc
c0016ff2:	c3                   	ret    
c0016ff3:	90                   	nop

c0016ff4 <VCache::write(unsigned long long, int, void*)>:
c0016ff4:	55                   	push   ebp
c0016ff5:	57                   	push   edi
c0016ff6:	56                   	push   esi
c0016ff7:	53                   	push   ebx
c0016ff8:	83 ec 28             	sub    esp,0x28
c0016ffb:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016fff:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017003:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0017007:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001700b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001700e:	e8 db 71 00 00       	call   c001e1ee <Semaphore::acquire()>
c0017013:	83 c4 10             	add    esp,0x10
c0017016:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001701a:	74 0c                	je     c0017028 <VCache::write(unsigned long long, int, void*)+0x34>
c001701c:	83 ec 0c             	sub    esp,0xc
c001701f:	53                   	push   ebx
c0017020:	e8 07 ff ff ff       	call   c0016f2c <VCache::invalidateReadBuffer()>
c0017025:	83 c4 10             	add    esp,0x10
c0017028:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001702c:	74 66                	je     c0017094 <VCache::write(unsigned long long, int, void*)+0xa0>
c001702e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0017031:	99                   	cdq    
c0017032:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017036:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0017039:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c001703c:	89 c1                	mov    ecx,eax
c001703e:	89 d0                	mov    eax,edx
c0017040:	31 f1                	xor    ecx,esi
c0017042:	31 f8                	xor    eax,edi
c0017044:	89 ca                	mov    edx,ecx
c0017046:	09 c2                	or     edx,eax
c0017048:	75 3e                	jne    c0017088 <VCache::write(unsigned long long, int, void*)+0x94>
c001704a:	83 fd 01             	cmp    ebp,0x1
c001704d:	75 39                	jne    c0017088 <VCache::write(unsigned long long, int, void*)+0x94>
c001704f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017052:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017058:	51                   	push   ecx
c0017059:	50                   	push   eax
c001705a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001705e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0017062:	0f af c8             	imul   ecx,eax
c0017065:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c0017068:	51                   	push   ecx
c0017069:	e8 d6 96 fe ff       	call   c0000744 <memcpy>
c001706e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0017071:	83 c4 10             	add    esp,0x10
c0017074:	40                   	inc    eax
c0017075:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0017078:	83 c0 80             	add    eax,0xffffff80
c001707b:	75 57                	jne    c00170d4 <VCache::write(unsigned long long, int, void*)+0xe0>
c001707d:	83 ec 0c             	sub    esp,0xc
c0017080:	53                   	push   ebx
c0017081:	e8 b6 fe ff ff       	call   c0016f3c <VCache::writeWriteBuffer()>
c0017086:	eb 34                	jmp    c00170bc <VCache::write(unsigned long long, int, void*)+0xc8>
c0017088:	83 ec 0c             	sub    esp,0xc
c001708b:	53                   	push   ebx
c001708c:	e8 ab fe ff ff       	call   c0016f3c <VCache::writeWriteBuffer()>
c0017091:	83 c4 10             	add    esp,0x10
c0017094:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017097:	83 fd 7f             	cmp    ebp,0x7f
c001709a:	7f 25                	jg     c00170c1 <VCache::write(unsigned long long, int, void*)+0xcd>
c001709c:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c001709f:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c00170a2:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c00170a5:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c00170a9:	52                   	push   edx
c00170aa:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00170b0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00170b4:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00170b7:	e8 88 96 fe ff       	call   c0000744 <memcpy>
c00170bc:	83 c4 10             	add    esp,0x10
c00170bf:	eb 13                	jmp    c00170d4 <VCache::write(unsigned long long, int, void*)+0xe0>
c00170c1:	83 ec 0c             	sub    esp,0xc
c00170c4:	8b 10                	mov    edx,DWORD PTR [eax]
c00170c6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00170ca:	55                   	push   ebp
c00170cb:	57                   	push   edi
c00170cc:	56                   	push   esi
c00170cd:	50                   	push   eax
c00170ce:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c00170d1:	83 c4 20             	add    esp,0x20
c00170d4:	83 ec 0c             	sub    esp,0xc
c00170d7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00170da:	e8 bd 76 00 00       	call   c001e79c <Semaphore::release()>
c00170df:	83 c4 2c             	add    esp,0x2c
c00170e2:	31 c0                	xor    eax,eax
c00170e4:	5b                   	pop    ebx
c00170e5:	5e                   	pop    esi
c00170e6:	5f                   	pop    edi
c00170e7:	5d                   	pop    ebp
c00170e8:	c3                   	ret    
c00170e9:	90                   	nop

c00170ea <VCache::read(unsigned long long, int, void*)>:
c00170ea:	55                   	push   ebp
c00170eb:	57                   	push   edi
c00170ec:	56                   	push   esi
c00170ed:	53                   	push   ebx
c00170ee:	83 ec 28             	sub    esp,0x28
c00170f1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00170f5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00170f9:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00170fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017101:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0017105:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0017109:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001710d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017110:	e8 d9 70 00 00       	call   c001e1ee <Semaphore::acquire()>
c0017115:	83 c4 10             	add    esp,0x10
c0017118:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001711c:	74 0c                	je     c001712a <VCache::read(unsigned long long, int, void*)+0x40>
c001711e:	83 ec 0c             	sub    esp,0xc
c0017121:	53                   	push   ebx
c0017122:	e8 15 fe ff ff       	call   c0016f3c <VCache::writeWriteBuffer()>
c0017127:	83 c4 10             	add    esp,0x10
c001712a:	83 fe 01             	cmp    esi,0x1
c001712d:	0f 85 80 00 00 00    	jne    c00171b3 <VCache::read(unsigned long long, int, void*)+0xc9>
c0017133:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017136:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c001713d:	75 74                	jne    c00171b3 <VCache::read(unsigned long long, int, void*)+0xc9>
c001713f:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0017142:	89 d1                	mov    ecx,edx
c0017144:	f7 d9                	neg    ecx
c0017146:	89 cf                	mov    edi,ecx
c0017148:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001714c:	c1 ff 1f             	sar    edi,0x1f
c001714f:	23 0c 24             	and    ecx,DWORD PTR [esp]
c0017152:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0017156:	89 ce                	mov    esi,ecx
c0017158:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001715c:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c0017160:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0017164:	89 cf                	mov    edi,ecx
c0017166:	74 0a                	je     c0017172 <VCache::read(unsigned long long, int, void*)+0x88>
c0017168:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c001716b:	75 05                	jne    c0017172 <VCache::read(unsigned long long, int, void*)+0x88>
c001716d:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c0017170:	74 1c                	je     c001718e <VCache::read(unsigned long long, int, void*)+0xa4>
c0017172:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0017176:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c0017179:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c001717c:	83 ec 0c             	sub    esp,0xc
c001717f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017181:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0017184:	52                   	push   edx
c0017185:	57                   	push   edi
c0017186:	56                   	push   esi
c0017187:	50                   	push   eax
c0017188:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c001718b:	83 c4 20             	add    esp,0x20
c001718e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017191:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0017197:	50                   	push   eax
c0017198:	52                   	push   edx
c0017199:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001719c:	48                   	dec    eax
c001719d:	23 44 24 08          	and    eax,DWORD PTR [esp+0x8]
c00171a1:	0f af c2             	imul   eax,edx
c00171a4:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c00171a7:	50                   	push   eax
c00171a8:	55                   	push   ebp
c00171a9:	e8 96 95 fe ff       	call   c0000744 <memcpy>
c00171ae:	83 c4 10             	add    esp,0x10
c00171b1:	eb 21                	jmp    c00171d4 <VCache::read(unsigned long long, int, void*)+0xea>
c00171b3:	83 ec 0c             	sub    esp,0xc
c00171b6:	53                   	push   ebx
c00171b7:	e8 70 fd ff ff       	call   c0016f2c <VCache::invalidateReadBuffer()>
c00171bc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00171bf:	8b 10                	mov    edx,DWORD PTR [eax]
c00171c1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00171c4:	56                   	push   esi
c00171c5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00171c9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00171cd:	50                   	push   eax
c00171ce:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00171d1:	83 c4 20             	add    esp,0x20
c00171d4:	83 ec 0c             	sub    esp,0xc
c00171d7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00171da:	e8 bd 75 00 00       	call   c001e79c <Semaphore::release()>
c00171df:	83 c4 2c             	add    esp,0x2c
c00171e2:	31 c0                	xor    eax,eax
c00171e4:	5b                   	pop    ebx
c00171e5:	5e                   	pop    esi
c00171e6:	5f                   	pop    edi
c00171e7:	5d                   	pop    ebp
c00171e8:	c3                   	ret    
c00171e9:	90                   	nop

c00171ea <Video::putrect(int, int, int, int, unsigned int)>:
c00171ea:	55                   	push   ebp
c00171eb:	57                   	push   edi
c00171ec:	56                   	push   esi
c00171ed:	53                   	push   ebx
c00171ee:	83 ec 1c             	sub    esp,0x1c
c00171f1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00171f5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00171f9:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00171fd:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0017201:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017205:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017209:	01 df                	add    edi,ebx
c001720b:	39 fb                	cmp    ebx,edi
c001720d:	7d 1f                	jge    c001722e <Video::putrect(int, int, int, int, unsigned int)+0x44>
c001720f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017213:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0017217:	7d 12                	jge    c001722b <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0017219:	8b 16                	mov    edx,DWORD PTR [esi]
c001721b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001721f:	53                   	push   ebx
c0017220:	55                   	push   ebp
c0017221:	45                   	inc    ebp
c0017222:	56                   	push   esi
c0017223:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0017226:	83 c4 10             	add    esp,0x10
c0017229:	eb e8                	jmp    c0017213 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c001722b:	43                   	inc    ebx
c001722c:	eb dd                	jmp    c001720b <Video::putrect(int, int, int, int, unsigned int)+0x21>
c001722e:	83 c4 1c             	add    esp,0x1c
c0017231:	5b                   	pop    ebx
c0017232:	5e                   	pop    esi
c0017233:	5f                   	pop    edi
c0017234:	5d                   	pop    ebp
c0017235:	c3                   	ret    

c0017236 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0017236:	55                   	push   ebp
c0017237:	57                   	push   edi
c0017238:	31 ff                	xor    edi,edi
c001723a:	56                   	push   esi
c001723b:	53                   	push   ebx
c001723c:	83 ec 1c             	sub    esp,0x1c
c001723f:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0017243:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0017247:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c001724e:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0017253:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017257:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c001725b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001725f:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0017262:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017266:	01 f9                	add    ecx,edi
c0017268:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c001726c:	7d 2f                	jge    c001729d <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c001726e:	31 f6                	xor    esi,esi
c0017270:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017274:	01 f2                	add    edx,esi
c0017276:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c001727a:	7d 1a                	jge    c0017296 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c001727c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001727f:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0017282:	46                   	inc    esi
c0017283:	51                   	push   ecx
c0017284:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0017288:	52                   	push   edx
c0017289:	55                   	push   ebp
c001728a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001728d:	83 c4 10             	add    esp,0x10
c0017290:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017294:	eb da                	jmp    c0017270 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0017296:	47                   	inc    edi
c0017297:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001729b:	eb c5                	jmp    c0017262 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c001729d:	83 c4 1c             	add    esp,0x1c
c00172a0:	5b                   	pop    ebx
c00172a1:	5e                   	pop    esi
c00172a2:	5f                   	pop    edi
c00172a3:	5d                   	pop    ebp
c00172a4:	c3                   	ret    
c00172a5:	90                   	nop

c00172a6 <Video::blit(unsigned int*, int, int, int, int)>:
c00172a6:	55                   	push   ebp
c00172a7:	57                   	push   edi
c00172a8:	56                   	push   esi
c00172a9:	53                   	push   ebx
c00172aa:	83 ec 1c             	sub    esp,0x1c
c00172ad:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00172b1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00172b5:	85 c0                	test   eax,eax
c00172b7:	79 02                	jns    c00172bb <Video::blit(unsigned int*, int, int, int, int)+0x15>
c00172b9:	31 c0                	xor    eax,eax
c00172bb:	c1 e0 02             	shl    eax,0x2
c00172be:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00172c2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00172c6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00172ca:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c00172ce:	39 d8                	cmp    eax,ebx
c00172d0:	7e 49                	jle    c001731b <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00172d2:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00172d8:	7c 41                	jl     c001731b <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00172da:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00172de:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00172e2:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00172e6:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c00172ea:	39 f9                	cmp    ecx,edi
c00172ec:	7e 22                	jle    c0017310 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c00172ee:	83 c5 04             	add    ebp,0x4
c00172f1:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00172f7:	7c 14                	jl     c001730d <Video::blit(unsigned int*, int, int, int, int)+0x67>
c00172f9:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00172fb:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c00172fe:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017302:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017306:	56                   	push   esi
c0017307:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c001730a:	83 c4 10             	add    esp,0x10
c001730d:	47                   	inc    edi
c001730e:	eb d2                	jmp    c00172e2 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0017310:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017314:	43                   	inc    ebx
c0017315:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0017319:	eb ab                	jmp    c00172c6 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c001731b:	83 c4 1c             	add    esp,0x1c
c001731e:	5b                   	pop    ebx
c001731f:	5e                   	pop    esi
c0017320:	5f                   	pop    edi
c0017321:	5d                   	pop    ebp
c0017322:	c3                   	ret    
c0017323:	90                   	nop

c0017324 <Video::clearScreen(unsigned int)>:
c0017324:	57                   	push   edi
c0017325:	56                   	push   esi
c0017326:	53                   	push   ebx
c0017327:	31 db                	xor    ebx,ebx
c0017329:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001732d:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0017333:	7e 1f                	jle    c0017354 <Video::clearScreen(unsigned int)+0x30>
c0017335:	31 ff                	xor    edi,edi
c0017337:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001733d:	7e 12                	jle    c0017351 <Video::clearScreen(unsigned int)+0x2d>
c001733f:	8b 06                	mov    eax,DWORD PTR [esi]
c0017341:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017345:	53                   	push   ebx
c0017346:	57                   	push   edi
c0017347:	47                   	inc    edi
c0017348:	56                   	push   esi
c0017349:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001734c:	83 c4 10             	add    esp,0x10
c001734f:	eb e6                	jmp    c0017337 <Video::clearScreen(unsigned int)+0x13>
c0017351:	43                   	inc    ebx
c0017352:	eb d9                	jmp    c001732d <Video::clearScreen(unsigned int)+0x9>
c0017354:	5b                   	pop    ebx
c0017355:	5e                   	pop    esi
c0017356:	5f                   	pop    edi
c0017357:	c3                   	ret    

c0017358 <Video::putpixel(int, int, unsigned int)>:
c0017358:	c7 44 24 04 7c b1 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b17c
c0017360:	e9 0e 31 00 00       	jmp    c001a473 <Krnl::panic(char const*)>
c0017365:	90                   	nop

c0017366 <Video::Video(char const*)>:
c0017366:	83 ec 0c             	sub    esp,0xc
c0017369:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001736d:	83 ec 08             	sub    esp,0x8
c0017370:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017374:	50                   	push   eax
c0017375:	e8 34 d0 ff ff       	call   c00143ae <Device::Device(char const*)>
c001737a:	83 c4 10             	add    esp,0x10
c001737d:	ba 00 b2 02 c0       	mov    edx,0xc002b200
c0017382:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017386:	89 10                	mov    DWORD PTR [eax],edx
c0017388:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001738c:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0017396:	90                   	nop
c0017397:	83 c4 0c             	add    esp,0xc
c001739a:	c3                   	ret    
c001739b:	90                   	nop

c001739c <Video::~Video()>:
c001739c:	83 ec 0c             	sub    esp,0xc
c001739f:	ba 00 b2 02 c0       	mov    edx,0xc002b200
c00173a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00173a8:	89 10                	mov    DWORD PTR [eax],edx
c00173aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00173ae:	83 ec 0c             	sub    esp,0xc
c00173b1:	50                   	push   eax
c00173b2:	e8 d9 cc ff ff       	call   c0014090 <Device::~Device()>
c00173b7:	83 c4 10             	add    esp,0x10
c00173ba:	90                   	nop
c00173bb:	83 c4 0c             	add    esp,0xc
c00173be:	c3                   	ret    
c00173bf:	90                   	nop

c00173c0 <Video::~Video()>:
c00173c0:	83 ec 0c             	sub    esp,0xc
c00173c3:	83 ec 0c             	sub    esp,0xc
c00173c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00173ca:	e8 cd ff ff ff       	call   c001739c <Video::~Video()>
c00173cf:	83 c4 10             	add    esp,0x10
c00173d2:	83 ec 08             	sub    esp,0x8
c00173d5:	68 64 01 00 00       	push   0x164
c00173da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00173de:	e8 d5 b8 ff ff       	call   c0012cb8 <operator delete(void*, unsigned long)>
c00173e3:	83 c4 10             	add    esp,0x10
c00173e6:	83 c4 0c             	add    esp,0xc
c00173e9:	c3                   	ret    

c00173ea <Video::isMonochrome()>:
c00173ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00173ee:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c00173f4:	c3                   	ret    
c00173f5:	90                   	nop

c00173f6 <Video::getWidth()>:
c00173f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00173fa:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0017400:	c3                   	ret    
c0017401:	90                   	nop

c0017402 <Video::getHeight()>:
c0017402:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017406:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001740c:	c3                   	ret    
c001740d:	90                   	nop

c001740e <Video::drawCursor(int, int, unsigned char*, int)>:
c001740e:	55                   	push   ebp
c001740f:	57                   	push   edi
c0017410:	56                   	push   esi
c0017411:	53                   	push   ebx
c0017412:	83 ec 2c             	sub    esp,0x2c
c0017415:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017419:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001741d:	83 f8 01             	cmp    eax,0x1
c0017420:	19 c9                	sbb    ecx,ecx
c0017422:	31 db                	xor    ebx,ebx
c0017424:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0017428:	89 cd                	mov    ebp,ecx
c001742a:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0017432:	f7 d5                	not    ebp
c0017434:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c001743a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001743e:	01 d8                	add    eax,ebx
c0017440:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017444:	56                   	push   esi
c0017445:	e8 b8 ff ff ff       	call   c0017402 <Video::getHeight()>
c001744a:	59                   	pop    ecx
c001744b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001744f:	7e 70                	jle    c00174c1 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0017451:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017455:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0017459:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c001745c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017460:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017464:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c001746b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001746f:	89 f8                	mov    eax,edi
c0017471:	83 c0 20             	add    eax,0x20
c0017474:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017478:	56                   	push   esi
c0017479:	e8 78 ff ff ff       	call   c00173f6 <Video::getWidth()>
c001747e:	5a                   	pop    edx
c001747f:	39 c7                	cmp    edi,eax
c0017481:	7d 34                	jge    c00174b7 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0017483:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0017488:	74 05                	je     c001748f <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c001748a:	8b 06                	mov    eax,DWORD PTR [esi]
c001748c:	55                   	push   ebp
c001748d:	eb 0d                	jmp    c001749c <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c001748f:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0017494:	74 12                	je     c00174a8 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0017496:	8b 06                	mov    eax,DWORD PTR [esi]
c0017498:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001749c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00174a0:	57                   	push   edi
c00174a1:	56                   	push   esi
c00174a2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00174a5:	83 c4 10             	add    esp,0x10
c00174a8:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c00174ac:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c00174b0:	47                   	inc    edi
c00174b1:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00174b5:	75 c1                	jne    c0017478 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c00174b7:	43                   	inc    ebx
c00174b8:	83 fb 20             	cmp    ebx,0x20
c00174bb:	0f 85 79 ff ff ff    	jne    c001743a <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c00174c1:	83 c4 2c             	add    esp,0x2c
c00174c4:	5b                   	pop    ebx
c00174c5:	5e                   	pop    esi
c00174c6:	5f                   	pop    edi
c00174c7:	5d                   	pop    ebp
c00174c8:	c3                   	ret    
c00174c9:	90                   	nop

c00174ca <Video::tgaParse(unsigned char*, int, int*, int*)>:
c00174ca:	55                   	push   ebp
c00174cb:	57                   	push   edi
c00174cc:	56                   	push   esi
c00174cd:	53                   	push   ebx
c00174ce:	83 ec 28             	sub    esp,0x28
c00174d1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00174d5:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c00174d9:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c00174dd:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c00174e1:	c1 e7 08             	shl    edi,0x8
c00174e4:	01 c7                	add    edi,eax
c00174e6:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c00174ea:	c1 e0 08             	shl    eax,0x8
c00174ed:	01 d0                	add    eax,edx
c00174ef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00174f3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00174f7:	0f af c7             	imul   eax,edi
c00174fa:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0017501:	50                   	push   eax
c0017502:	e8 39 83 ff ff       	call   c000f840 <malloc>
c0017507:	83 c4 10             	add    esp,0x10
c001750a:	89 c5                	mov    ebp,eax
c001750c:	85 c0                	test   eax,eax
c001750e:	75 15                	jne    c0017525 <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c0017510:	83 ec 0c             	sub    esp,0xc
c0017513:	68 9d b1 02 c0       	push   0xc002b19d
c0017518:	e8 7b b8 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001751d:	83 c4 10             	add    esp,0x10
c0017520:	e9 1c 01 00 00       	jmp    c0017641 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0017525:	be 12 00 00 00       	mov    esi,0x12
c001752a:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c001752e:	74 11                	je     c0017541 <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c0017530:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c0017534:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c0017538:	c1 fe 03             	sar    esi,0x3
c001753b:	0f af f0             	imul   esi,eax
c001753e:	83 c6 12             	add    esi,0x12
c0017541:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0017545:	74 04                	je     c001754b <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c0017547:	85 ff                	test   edi,edi
c0017549:	75 12                	jne    c001755d <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c001754b:	83 ec 0c             	sub    esp,0xc
c001754e:	68 b4 b1 02 c0       	push   0xc002b1b4
c0017553:	e8 40 b8 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0017558:	e9 ce 00 00 00       	jmp    c001762b <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c001755d:	52                   	push   edx
c001755e:	52                   	push   edx
c001755f:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c0017563:	50                   	push   eax
c0017564:	68 c9 b1 02 c0       	push   0xc002b1c9
c0017569:	e8 2a b8 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001756e:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c0017572:	83 c4 10             	add    esp,0x10
c0017575:	80 fa 02             	cmp    dl,0x2
c0017578:	0f 85 98 00 00 00    	jne    c0017616 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c001757e:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0017583:	75 10                	jne    c0017595 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0017585:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0017589:	75 0a                	jne    c0017595 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c001758b:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c001758e:	83 e8 18             	sub    eax,0x18
c0017591:	a8 f7                	test   al,0xf7
c0017593:	74 0a                	je     c001759f <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c0017595:	83 ec 0c             	sub    esp,0xc
c0017598:	68 d6 b1 02 c0       	push   0xc002b1d6
c001759d:	eb 7f                	jmp    c001761e <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c001759f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00175a7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00175af:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00175b3:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00175bb:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c00175bf:	75 0c                	jne    c00175cd <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c00175c1:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c00175c6:	c1 e0 18             	shl    eax,0x18
c00175c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00175cd:	41                   	inc    ecx
c00175ce:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c00175d3:	c1 e2 10             	shl    edx,0x10
c00175d6:	89 d0                	mov    eax,edx
c00175d8:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c00175dd:	c1 e2 08             	shl    edx,0x8
c00175e0:	09 c2                	or     edx,eax
c00175e2:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c00175e6:	09 c2                	or     edx,eax
c00175e8:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c00175ec:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c00175f0:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c00175f4:	c1 f8 03             	sar    eax,0x3
c00175f7:	01 c6                	add    esi,eax
c00175f9:	89 c8                	mov    eax,ecx
c00175fb:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00175ff:	39 c7                	cmp    edi,eax
c0017601:	7f b0                	jg     c00175b3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0017603:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017607:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001760b:	39 14 24             	cmp    DWORD PTR [esp],edx
c001760e:	7e 22                	jle    c0017632 <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c0017610:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0017614:	eb 99                	jmp    c00175af <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c0017616:	50                   	push   eax
c0017617:	50                   	push   eax
c0017618:	52                   	push   edx
c0017619:	68 e4 b1 02 c0       	push   0xc002b1e4
c001761e:	e8 75 b7 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0017623:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017626:	e8 25 82 ff ff       	call   c000f850 <free>
c001762b:	83 c4 10             	add    esp,0x10
c001762e:	31 ed                	xor    ebp,ebp
c0017630:	eb 0f                	jmp    c0017641 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0017632:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017636:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0017639:	89 38                	mov    DWORD PTR [eax],edi
c001763b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001763f:	89 08                	mov    DWORD PTR [eax],ecx
c0017641:	83 c4 1c             	add    esp,0x1c
c0017644:	89 e8                	mov    eax,ebp
c0017646:	5b                   	pop    ebx
c0017647:	5e                   	pop    esi
c0017648:	5f                   	pop    edi
c0017649:	5d                   	pop    ebp
c001764a:	c3                   	ret    
c001764b:	90                   	nop

c001764c <Video::putTGA(int, int, unsigned char*, int)>:
c001764c:	55                   	push   ebp
c001764d:	57                   	push   edi
c001764e:	56                   	push   esi
c001764f:	53                   	push   ebx
c0017650:	83 ec 28             	sub    esp,0x28
c0017653:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0017657:	8d 44 24 18          	lea    eax,[esp+0x18]
c001765b:	50                   	push   eax
c001765c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017660:	50                   	push   eax
c0017661:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017665:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017669:	56                   	push   esi
c001766a:	e8 5b fe ff ff       	call   c00174ca <Video::tgaParse(unsigned char*, int, int*, int*)>
c001766f:	83 c4 20             	add    esp,0x20
c0017672:	85 c0                	test   eax,eax
c0017674:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0017678:	74 35                	je     c00176af <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001767a:	89 c7                	mov    edi,eax
c001767c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017680:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0017684:	39 d8                	cmp    eax,ebx
c0017686:	7e 27                	jle    c00176af <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017688:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001768c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017690:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0017694:	39 e8                	cmp    eax,ebp
c0017696:	7e 14                	jle    c00176ac <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0017698:	8b 06                	mov    eax,DWORD PTR [esi]
c001769a:	83 c7 04             	add    edi,0x4
c001769d:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c00176a0:	53                   	push   ebx
c00176a1:	55                   	push   ebp
c00176a2:	45                   	inc    ebp
c00176a3:	56                   	push   esi
c00176a4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00176a7:	83 c4 10             	add    esp,0x10
c00176aa:	eb e0                	jmp    c001768c <Video::putTGA(int, int, unsigned char*, int)+0x40>
c00176ac:	43                   	inc    ebx
c00176ad:	eb cd                	jmp    c001767c <Video::putTGA(int, int, unsigned char*, int)+0x30>
c00176af:	83 c4 1c             	add    esp,0x1c
c00176b2:	5b                   	pop    ebx
c00176b3:	5e                   	pop    esi
c00176b4:	5f                   	pop    edi
c00176b5:	5d                   	pop    ebp
c00176b6:	c3                   	ret    
c00176b7:	90                   	nop

c00176b8 <ACPI::close(int, int, void*)>:
c00176b8:	83 ec 1c             	sub    esp,0x1c
c00176bb:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c00176c3:	74 0a                	je     c00176cf <ACPI::close(int, int, void*)+0x17>
c00176c5:	b8 00 00 00 00       	mov    eax,0x0
c00176ca:	e9 9a 00 00 00       	jmp    c0017769 <ACPI::close(int, int, void*)+0xb1>
c00176cf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00176d4:	75 37                	jne    c001770d <ACPI::close(int, int, void*)+0x55>
c00176d6:	83 ec 0c             	sub    esp,0xc
c00176d9:	68 40 b2 02 c0       	push   0xc002b240
c00176de:	e8 b5 b6 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c00176e3:	83 c4 10             	add    esp,0x10
c00176e6:	a1 08 09 03 c0       	mov    eax,ds:0xc0030908
c00176eb:	85 c0                	test   eax,eax
c00176ed:	74 07                	je     c00176f6 <ACPI::close(int, int, void*)+0x3e>
c00176ef:	a1 08 09 03 c0       	mov    eax,ds:0xc0030908
c00176f4:	ff d0                	call   eax
c00176f6:	83 ec 0c             	sub    esp,0xc
c00176f9:	68 64 b3 02 c0       	push   0xc002b364
c00176fe:	e8 70 2d 00 00       	call   c001a473 <Krnl::panic(char const*)>
c0017703:	83 c4 10             	add    esp,0x10
c0017706:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001770b:	eb 5c                	jmp    c0017769 <ACPI::close(int, int, void*)+0xb1>
c001770d:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0017712:	75 50                	jne    c0017764 <ACPI::close(int, int, void*)+0xac>
c0017714:	a1 04 09 03 c0       	mov    eax,ds:0xc0030904
c0017719:	85 c0                	test   eax,eax
c001771b:	74 07                	je     c0017724 <ACPI::close(int, int, void*)+0x6c>
c001771d:	a1 04 09 03 c0       	mov    eax,ds:0xc0030904
c0017722:	ff d0                	call   eax
c0017724:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0017729:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001772e:	83 e0 02             	and    eax,0x2
c0017731:	74 1c                	je     c001774f <ACPI::close(int, int, void*)+0x97>
c0017733:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c001773a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001773e:	89 c2                	mov    edx,eax
c0017740:	ec                   	in     al,dx
c0017741:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0017745:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0017749:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001774d:	eb da                	jmp    c0017729 <ACPI::close(int, int, void*)+0x71>
c001774f:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0017756:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c001775b:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001775f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017763:	ee                   	out    dx,al
c0017764:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017769:	83 c4 1c             	add    esp,0x1c
c001776c:	c3                   	ret    

c001776d <findRSDP()>:
c001776d:	83 ec 1c             	sub    esp,0x1c
c0017770:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c0017775:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001777b:	83 e0 04             	and    eax,0x4
c001777e:	84 c0                	test   al,al
c0017780:	75 07                	jne    c0017789 <findRSDP()+0x1c>
c0017782:	b8 00 00 00 00       	mov    eax,0x0
c0017787:	eb 6a                	jmp    c00177f3 <findRSDP()+0x86>
c0017789:	a1 94 e2 02 c0       	mov    eax,ds:0xc002e294
c001778e:	3d ff 07 00 00       	cmp    eax,0x7ff
c0017793:	7f 1b                	jg     c00177b0 <findRSDP()+0x43>
c0017795:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c001779a:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00177a0:	83 e2 fb             	and    edx,0xfffffffb
c00177a3:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00177a9:	b8 00 00 00 00       	mov    eax,0x0
c00177ae:	eb 43                	jmp    c00177f3 <findRSDP()+0x86>
c00177b0:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c00177b8:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c00177c0:	77 2c                	ja     c00177ee <findRSDP()+0x81>
c00177c2:	83 ec 04             	sub    esp,0x4
c00177c5:	6a 08                	push   0x8
c00177c7:	68 4d b2 02 c0       	push   0xc002b24d
c00177cc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00177d0:	e8 6b 8e fe ff       	call   c0000640 <memcmp>
c00177d5:	83 c4 10             	add    esp,0x10
c00177d8:	85 c0                	test   eax,eax
c00177da:	0f 94 c0             	sete   al
c00177dd:	84 c0                	test   al,al
c00177df:	74 06                	je     c00177e7 <findRSDP()+0x7a>
c00177e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00177e5:	eb 0c                	jmp    c00177f3 <findRSDP()+0x86>
c00177e7:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c00177ec:	eb ca                	jmp    c00177b8 <findRSDP()+0x4b>
c00177ee:	b8 00 00 00 00       	mov    eax,0x0
c00177f3:	83 c4 1c             	add    esp,0x1c
c00177f6:	c3                   	ret    

c00177f7 <loadACPITables(unsigned char*)>:
c00177f7:	56                   	push   esi
c00177f8:	53                   	push   ebx
c00177f9:	83 ec 44             	sub    esp,0x44
c00177fc:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c0017801:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017807:	83 e0 04             	and    eax,0x4
c001780a:	84 c0                	test   al,al
c001780c:	0f 84 05 02 00 00    	je     c0017a17 <loadACPITables(unsigned char*)+0x220>
c0017812:	a0 20 0b 03 c0       	mov    al,ds:0xc0030b20
c0017817:	84 c0                	test   al,al
c0017819:	74 75                	je     c0017890 <loadACPITables(unsigned char*)+0x99>
c001781b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001781f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017823:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017827:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001782a:	83 e8 24             	sub    eax,0x24
c001782d:	c1 e8 03             	shr    eax,0x3
c0017830:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017834:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c001783c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017840:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0017844:	0f 8d b2 00 00 00    	jge    c00178fc <loadACPITables(unsigned char*)+0x105>
c001784a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001784e:	83 c0 24             	add    eax,0x24
c0017851:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017855:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017859:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001785d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017861:	c1 e0 03             	shl    eax,0x3
c0017864:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0017868:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001786c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001786f:	8b 00                	mov    eax,DWORD PTR [eax]
c0017871:	89 c1                	mov    ecx,eax
c0017873:	a1 0c 09 03 c0       	mov    eax,ds:0xc003090c
c0017878:	8d 50 01             	lea    edx,[eax+0x1]
c001787b:	89 15 0c 09 03 c0    	mov    DWORD PTR ds:0xc003090c,edx
c0017881:	89 ca                	mov    edx,ecx
c0017883:	89 14 c5 24 09 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf6dc],edx
c001788a:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c001788e:	eb ac                	jmp    c001783c <loadACPITables(unsigned char*)+0x45>
c0017890:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017894:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017898:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001789c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001789f:	83 e8 24             	sub    eax,0x24
c00178a2:	c1 e8 02             	shr    eax,0x2
c00178a5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00178a9:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c00178b1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00178b5:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c00178b9:	7d 41                	jge    c00178fc <loadACPITables(unsigned char*)+0x105>
c00178bb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00178bf:	83 c0 24             	add    eax,0x24
c00178c2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00178c6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00178ca:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00178ce:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00178d2:	c1 e0 02             	shl    eax,0x2
c00178d5:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c00178d9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00178dd:	8b 08                	mov    ecx,DWORD PTR [eax]
c00178df:	a1 0c 09 03 c0       	mov    eax,ds:0xc003090c
c00178e4:	8d 50 01             	lea    edx,[eax+0x1]
c00178e7:	89 15 0c 09 03 c0    	mov    DWORD PTR ds:0xc003090c,edx
c00178ed:	89 ca                	mov    edx,ecx
c00178ef:	89 14 c5 24 09 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf6dc],edx
c00178f6:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00178fa:	eb b5                	jmp    c00178b1 <loadACPITables(unsigned char*)+0xba>
c00178fc:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0017904:	a1 0c 09 03 c0       	mov    eax,ds:0xc003090c
c0017909:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c001790d:	0f 8d 05 01 00 00    	jge    c0017a18 <loadACPITables(unsigned char*)+0x221>
c0017913:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017917:	8b 04 c5 24 09 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf6dc]
c001791e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017926:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001792a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001792e:	25 ff 0f 00 00       	and    eax,0xfff
c0017933:	89 c6                	mov    esi,eax
c0017935:	e8 a8 a4 ff ff       	call   c0011de2 <Virt::getAKernelVAS()>
c001793a:	89 c3                	mov    ebx,eax
c001793c:	83 ec 0c             	sub    esp,0xc
c001793f:	6a 01                	push   0x1
c0017941:	e8 f5 a1 ff ff       	call   c0011b3b <Virt::allocateKernelVirtualPages(int)>
c0017946:	83 c4 10             	add    esp,0x10
c0017949:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001794d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017953:	83 ec 0c             	sub    esp,0xc
c0017956:	6a 01                	push   0x1
c0017958:	6a 01                	push   0x1
c001795a:	50                   	push   eax
c001795b:	52                   	push   edx
c001795c:	53                   	push   ebx
c001795d:	e8 96 ab ff ff       	call   c00124f8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017962:	83 c4 20             	add    esp,0x20
c0017965:	09 f0                	or     eax,esi
c0017967:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001796b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001796f:	c1 e0 03             	shl    eax,0x3
c0017972:	05 20 09 03 c0       	add    eax,0xc0030920
c0017977:	83 ec 04             	sub    esp,0x4
c001797a:	6a 04                	push   0x4
c001797c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017980:	50                   	push   eax
c0017981:	e8 be 8d fe ff       	call   c0000744 <memcpy>
c0017986:	83 c4 10             	add    esp,0x10
c0017989:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001798d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017990:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017994:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017998:	05 00 10 00 00       	add    eax,0x1000
c001799d:	c1 e8 0c             	shr    eax,0xc
c00179a0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00179a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179a8:	89 04 24             	mov    DWORD PTR [esp],eax
c00179ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179af:	25 ff 0f 00 00       	and    eax,0xfff
c00179b4:	89 c6                	mov    esi,eax
c00179b6:	e8 27 a4 ff ff       	call   c0011de2 <Virt::getAKernelVAS()>
c00179bb:	89 c3                	mov    ebx,eax
c00179bd:	83 ec 0c             	sub    esp,0xc
c00179c0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00179c4:	e8 72 a1 ff ff       	call   c0011b3b <Virt::allocateKernelVirtualPages(int)>
c00179c9:	83 c4 10             	add    esp,0x10
c00179cc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00179d0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00179d6:	83 ec 0c             	sub    esp,0xc
c00179d9:	6a 01                	push   0x1
c00179db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00179df:	50                   	push   eax
c00179e0:	52                   	push   edx
c00179e1:	53                   	push   ebx
c00179e2:	e8 11 ab ff ff       	call   c00124f8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00179e7:	83 c4 20             	add    esp,0x20
c00179ea:	09 f0                	or     eax,esi
c00179ec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00179f0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00179f3:	83 ec 0c             	sub    esp,0xc
c00179f6:	50                   	push   eax
c00179f7:	e8 a1 a4 ff ff       	call   c0011e9d <Virt::freeKernelVirtualPages(unsigned long)>
c00179fc:	83 c4 10             	add    esp,0x10
c00179ff:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017a03:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017a07:	89 14 c5 24 09 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf6dc],edx
c0017a0e:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0017a12:	e9 ed fe ff ff       	jmp    c0017904 <loadACPITables(unsigned char*)+0x10d>
c0017a17:	90                   	nop
c0017a18:	83 c4 44             	add    esp,0x44
c0017a1b:	5b                   	pop    ebx
c0017a1c:	5e                   	pop    esi
c0017a1d:	c3                   	ret    

c0017a1e <findRSDT(unsigned char*)>:
c0017a1e:	56                   	push   esi
c0017a1f:	53                   	push   ebx
c0017a20:	83 ec 44             	sub    esp,0x44
c0017a23:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c0017a28:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017a2e:	83 e0 04             	and    eax,0x4
c0017a31:	84 c0                	test   al,al
c0017a33:	75 0a                	jne    c0017a3f <findRSDT(unsigned char*)+0x21>
c0017a35:	b8 00 00 00 00       	mov    eax,0x0
c0017a3a:	e9 f7 00 00 00       	jmp    c0017b36 <findRSDT(unsigned char*)+0x118>
c0017a3f:	83 ec 04             	sub    esp,0x4
c0017a42:	6a 24                	push   0x24
c0017a44:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0017a48:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017a4c:	50                   	push   eax
c0017a4d:	e8 f2 8c fe ff       	call   c0000744 <memcpy>
c0017a52:	83 c4 10             	add    esp,0x10
c0017a55:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017a59:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0017a5d:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017a65:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017a69:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a6d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017a71:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017a75:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017a79:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017a7d:	25 ff 0f 00 00       	and    eax,0xfff
c0017a82:	89 c6                	mov    esi,eax
c0017a84:	e8 59 a3 ff ff       	call   c0011de2 <Virt::getAKernelVAS()>
c0017a89:	89 c3                	mov    ebx,eax
c0017a8b:	83 ec 0c             	sub    esp,0xc
c0017a8e:	6a 02                	push   0x2
c0017a90:	e8 a6 a0 ff ff       	call   c0011b3b <Virt::allocateKernelVirtualPages(int)>
c0017a95:	83 c4 10             	add    esp,0x10
c0017a98:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017a9c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017aa2:	83 ec 0c             	sub    esp,0xc
c0017aa5:	6a 01                	push   0x1
c0017aa7:	6a 02                	push   0x2
c0017aa9:	50                   	push   eax
c0017aaa:	52                   	push   edx
c0017aab:	53                   	push   ebx
c0017aac:	e8 47 aa ff ff       	call   c00124f8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017ab1:	83 c4 20             	add    esp,0x20
c0017ab4:	09 f0                	or     eax,esi
c0017ab6:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017aba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017abe:	25 ff 0f 00 00       	and    eax,0xfff
c0017ac3:	89 c6                	mov    esi,eax
c0017ac5:	e8 18 a3 ff ff       	call   c0011de2 <Virt::getAKernelVAS()>
c0017aca:	89 c3                	mov    ebx,eax
c0017acc:	83 ec 0c             	sub    esp,0xc
c0017acf:	6a 02                	push   0x2
c0017ad1:	e8 65 a0 ff ff       	call   c0011b3b <Virt::allocateKernelVirtualPages(int)>
c0017ad6:	83 c4 10             	add    esp,0x10
c0017ad9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017add:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017ae3:	83 ec 0c             	sub    esp,0xc
c0017ae6:	6a 01                	push   0x1
c0017ae8:	6a 02                	push   0x2
c0017aea:	50                   	push   eax
c0017aeb:	52                   	push   edx
c0017aec:	53                   	push   ebx
c0017aed:	e8 06 aa ff ff       	call   c00124f8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017af2:	83 c4 20             	add    esp,0x20
c0017af5:	09 f0                	or     eax,esi
c0017af7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017afb:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0017b00:	75 11                	jne    c0017b13 <findRSDT(unsigned char*)+0xf5>
c0017b02:	c6 05 20 0b 03 c0 00 	mov    BYTE PTR ds:0xc0030b20,0x0
c0017b09:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b0d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017b11:	eb 1f                	jmp    c0017b32 <findRSDT(unsigned char*)+0x114>
c0017b13:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0017b18:	75 11                	jne    c0017b2b <findRSDT(unsigned char*)+0x10d>
c0017b1a:	c6 05 20 0b 03 c0 01 	mov    BYTE PTR ds:0xc0030b20,0x1
c0017b21:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b25:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017b29:	eb 07                	jmp    c0017b32 <findRSDT(unsigned char*)+0x114>
c0017b2b:	b8 00 00 00 00       	mov    eax,0x0
c0017b30:	eb 04                	jmp    c0017b36 <findRSDT(unsigned char*)+0x118>
c0017b32:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017b36:	83 c4 44             	add    esp,0x44
c0017b39:	5b                   	pop    ebx
c0017b3a:	5e                   	pop    esi
c0017b3b:	c3                   	ret    

c0017b3c <findDataTable(unsigned char*, char*)>:
c0017b3c:	83 ec 1c             	sub    esp,0x1c
c0017b3f:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c0017b44:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017b4a:	83 e0 04             	and    eax,0x4
c0017b4d:	84 c0                	test   al,al
c0017b4f:	75 07                	jne    c0017b58 <findDataTable(unsigned char*, char*)+0x1c>
c0017b51:	b8 00 00 00 00       	mov    eax,0x0
c0017b56:	eb 7c                	jmp    c0017bd4 <findDataTable(unsigned char*, char*)+0x98>
c0017b58:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017b60:	a1 0c 09 03 c0       	mov    eax,ds:0xc003090c
c0017b65:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017b69:	7d 3a                	jge    c0017ba5 <findDataTable(unsigned char*, char*)+0x69>
c0017b6b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017b6f:	c1 e0 03             	shl    eax,0x3
c0017b72:	05 20 09 03 c0       	add    eax,0xc0030920
c0017b77:	83 ec 04             	sub    esp,0x4
c0017b7a:	6a 04                	push   0x4
c0017b7c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017b80:	50                   	push   eax
c0017b81:	e8 ba 8a fe ff       	call   c0000640 <memcmp>
c0017b86:	83 c4 10             	add    esp,0x10
c0017b89:	85 c0                	test   eax,eax
c0017b8b:	0f 94 c0             	sete   al
c0017b8e:	84 c0                	test   al,al
c0017b90:	74 0d                	je     c0017b9f <findDataTable(unsigned char*, char*)+0x63>
c0017b92:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017b96:	8b 04 c5 24 09 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf6dc]
c0017b9d:	eb 35                	jmp    c0017bd4 <findDataTable(unsigned char*, char*)+0x98>
c0017b9f:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017ba3:	eb bb                	jmp    c0017b60 <findDataTable(unsigned char*, char*)+0x24>
c0017ba5:	a0 20 0b 03 c0       	mov    al,ds:0xc0030b20
c0017baa:	84 c0                	test   al,al
c0017bac:	74 07                	je     c0017bb5 <findDataTable(unsigned char*, char*)+0x79>
c0017bae:	b8 58 00 00 00       	mov    eax,0x58
c0017bb3:	eb 05                	jmp    c0017bba <findDataTable(unsigned char*, char*)+0x7e>
c0017bb5:	b8 52 00 00 00       	mov    eax,0x52
c0017bba:	83 ec 04             	sub    esp,0x4
c0017bbd:	50                   	push   eax
c0017bbe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017bc2:	68 88 b3 02 c0       	push   0xc002b388
c0017bc7:	e8 cc b1 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0017bcc:	83 c4 10             	add    esp,0x10
c0017bcf:	b8 00 00 00 00       	mov    eax,0x0
c0017bd4:	83 c4 1c             	add    esp,0x1c
c0017bd7:	c3                   	ret    

c0017bd8 <scanMADT()>:
c0017bd8:	53                   	push   ebx
c0017bd9:	83 ec 38             	sub    esp,0x38
c0017bdc:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c0017be1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017be7:	83 e0 04             	and    eax,0x4
c0017bea:	84 c0                	test   al,al
c0017bec:	0f 84 63 04 00 00    	je     c0018055 <scanMADT()+0x47d>
c0017bf2:	e8 76 fb ff ff       	call   c001776d <findRSDP()>
c0017bf7:	a3 2c 0b 03 c0       	mov    ds:0xc0030b2c,eax
c0017bfc:	a1 2c 0b 03 c0       	mov    eax,ds:0xc0030b2c
c0017c01:	85 c0                	test   eax,eax
c0017c03:	75 19                	jne    c0017c1e <scanMADT()+0x46>
c0017c05:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c0017c0a:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017c10:	83 e2 fb             	and    edx,0xfffffffb
c0017c13:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017c19:	e9 3b 04 00 00       	jmp    c0018059 <scanMADT()+0x481>
c0017c1e:	a1 2c 0b 03 c0       	mov    eax,ds:0xc0030b2c
c0017c23:	83 ec 0c             	sub    esp,0xc
c0017c26:	50                   	push   eax
c0017c27:	e8 f2 fd ff ff       	call   c0017a1e <findRSDT(unsigned char*)>
c0017c2c:	83 c4 10             	add    esp,0x10
c0017c2f:	a3 28 0b 03 c0       	mov    ds:0xc0030b28,eax
c0017c34:	a1 28 0b 03 c0       	mov    eax,ds:0xc0030b28
c0017c39:	85 c0                	test   eax,eax
c0017c3b:	75 19                	jne    c0017c56 <scanMADT()+0x7e>
c0017c3d:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c0017c42:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017c48:	83 e2 fb             	and    edx,0xfffffffb
c0017c4b:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017c51:	e9 03 04 00 00       	jmp    c0018059 <scanMADT()+0x481>
c0017c56:	a1 28 0b 03 c0       	mov    eax,ds:0xc0030b28
c0017c5b:	83 ec 0c             	sub    esp,0xc
c0017c5e:	50                   	push   eax
c0017c5f:	e8 93 fb ff ff       	call   c00177f7 <loadACPITables(unsigned char*)>
c0017c64:	83 c4 10             	add    esp,0x10
c0017c67:	a1 28 0b 03 c0       	mov    eax,ds:0xc0030b28
c0017c6c:	83 ec 08             	sub    esp,0x8
c0017c6f:	68 56 b2 02 c0       	push   0xc002b256
c0017c74:	50                   	push   eax
c0017c75:	e8 c2 fe ff ff       	call   c0017b3c <findDataTable(unsigned char*, char*)>
c0017c7a:	83 c4 10             	add    esp,0x10
c0017c7d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017c81:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017c86:	75 19                	jne    c0017ca1 <scanMADT()+0xc9>
c0017c88:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c0017c8d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017c93:	83 e2 fe             	and    edx,0xfffffffe
c0017c96:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017c9c:	e9 b8 03 00 00       	jmp    c0018059 <scanMADT()+0x481>
c0017ca1:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017ca9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017cad:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017cb0:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017cb4:	0f 87 9f 03 00 00    	ja     c0018059 <scanMADT()+0x481>
c0017cba:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017cc2:	0f 87 91 03 00 00    	ja     c0018059 <scanMADT()+0x481>
c0017cc8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ccc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017cd0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017cd4:	8d 50 01             	lea    edx,[eax+0x1]
c0017cd7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017cdb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017cdf:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017ce3:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017ce7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ceb:	8d 50 01             	lea    edx,[eax+0x1]
c0017cee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017cf2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017cf6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017cfa:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017cfe:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017d03:	0f 86 4f 03 00 00    	jbe    c0018058 <scanMADT()+0x480>
c0017d09:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017d0e:	75 57                	jne    c0017d67 <scanMADT()+0x18f>
c0017d10:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d14:	8d 50 01             	lea    edx,[eax+0x1]
c0017d17:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017d1b:	8a 15 20 0d 03 c0    	mov    dl,BYTE PTR ds:0xc0030d20
c0017d21:	0f b6 d2             	movzx  edx,dl
c0017d24:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017d28:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017d2c:	88 82 60 0d 03 c0    	mov    BYTE PTR [edx-0x3ffcf2a0],al
c0017d32:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d36:	8d 50 01             	lea    edx,[eax+0x1]
c0017d39:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017d3d:	8a 15 20 0d 03 c0    	mov    dl,BYTE PTR ds:0xc0030d20
c0017d43:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017d46:	88 0d 20 0d 03 c0    	mov    BYTE PTR ds:0xc0030d20,cl
c0017d4c:	0f b6 d2             	movzx  edx,dl
c0017d4f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017d53:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017d57:	88 82 40 0d 03 c0    	mov    BYTE PTR [edx-0x3ffcf2c0],al
c0017d5d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017d62:	e9 da 02 00 00       	jmp    c0018041 <scanMADT()+0x469>
c0017d67:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017d6c:	0f 85 14 01 00 00    	jne    c0017e86 <scanMADT()+0x2ae>
c0017d72:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d76:	8d 50 01             	lea    edx,[eax+0x1]
c0017d79:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017d7d:	8a 15 e0 0b 03 c0    	mov    dl,BYTE PTR ds:0xc0030be0
c0017d83:	0f b6 d2             	movzx  edx,dl
c0017d86:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017d8a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017d8e:	88 82 00 0c 03 c0    	mov    BYTE PTR [edx-0x3ffcf400],al
c0017d94:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017d98:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017d9c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017da0:	01 d0                	add    eax,edx
c0017da2:	83 c0 2c             	add    eax,0x2c
c0017da5:	8a 00                	mov    al,BYTE PTR [eax]
c0017da7:	0f b6 d0             	movzx  edx,al
c0017daa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017dae:	8d 48 01             	lea    ecx,[eax+0x1]
c0017db1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017db5:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017db9:	0f b6 c0             	movzx  eax,al
c0017dbc:	c1 e0 08             	shl    eax,0x8
c0017dbf:	89 d1                	mov    ecx,edx
c0017dc1:	09 c1                	or     ecx,eax
c0017dc3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017dc7:	8d 50 02             	lea    edx,[eax+0x2]
c0017dca:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017dce:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017dd2:	0f b6 c0             	movzx  eax,al
c0017dd5:	c1 e0 10             	shl    eax,0x10
c0017dd8:	09 c1                	or     ecx,eax
c0017dda:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017dde:	8d 50 03             	lea    edx,[eax+0x3]
c0017de1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017de5:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017de9:	0f b6 c0             	movzx  eax,al
c0017dec:	c1 e0 18             	shl    eax,0x18
c0017def:	09 c1                	or     ecx,eax
c0017df1:	89 ca                	mov    edx,ecx
c0017df3:	a0 e0 0b 03 c0       	mov    al,ds:0xc0030be0
c0017df8:	0f b6 c0             	movzx  eax,al
c0017dfb:	89 14 85 20 0c 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf3e0],edx
c0017e02:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017e07:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e0b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e0f:	01 d0                	add    eax,edx
c0017e11:	83 c0 2c             	add    eax,0x2c
c0017e14:	8a 00                	mov    al,BYTE PTR [eax]
c0017e16:	0f b6 d0             	movzx  edx,al
c0017e19:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e1d:	8d 48 01             	lea    ecx,[eax+0x1]
c0017e20:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e24:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017e28:	0f b6 c0             	movzx  eax,al
c0017e2b:	c1 e0 08             	shl    eax,0x8
c0017e2e:	89 d1                	mov    ecx,edx
c0017e30:	09 c1                	or     ecx,eax
c0017e32:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e36:	8d 50 02             	lea    edx,[eax+0x2]
c0017e39:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e3d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017e41:	0f b6 c0             	movzx  eax,al
c0017e44:	c1 e0 10             	shl    eax,0x10
c0017e47:	09 c1                	or     ecx,eax
c0017e49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e4d:	8d 50 03             	lea    edx,[eax+0x3]
c0017e50:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e54:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017e58:	0f b6 c0             	movzx  eax,al
c0017e5b:	c1 e0 18             	shl    eax,0x18
c0017e5e:	09 c1                	or     ecx,eax
c0017e60:	89 ca                	mov    edx,ecx
c0017e62:	a0 e0 0b 03 c0       	mov    al,ds:0xc0030be0
c0017e67:	0f b6 c0             	movzx  eax,al
c0017e6a:	89 14 85 a0 0c 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf360],edx
c0017e71:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017e76:	a0 e0 0b 03 c0       	mov    al,ds:0xc0030be0
c0017e7b:	40                   	inc    eax
c0017e7c:	a2 e0 0b 03 c0       	mov    ds:0xc0030be0,al
c0017e81:	e9 bb 01 00 00       	jmp    c0018041 <scanMADT()+0x469>
c0017e86:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0017e8b:	0f 85 e9 00 00 00    	jne    c0017f7a <scanMADT()+0x3a2>
c0017e91:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e95:	8d 50 01             	lea    edx,[eax+0x1]
c0017e98:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017e9c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ea0:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017ea4:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0017ea8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017eac:	8d 50 01             	lea    edx,[eax+0x1]
c0017eaf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017eb3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017eb7:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017ebb:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017ebf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ec3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ec7:	01 d0                	add    eax,edx
c0017ec9:	83 c0 2c             	add    eax,0x2c
c0017ecc:	8a 00                	mov    al,BYTE PTR [eax]
c0017ece:	0f b6 d0             	movzx  edx,al
c0017ed1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ed5:	8d 48 01             	lea    ecx,[eax+0x1]
c0017ed8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017edc:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017ee0:	0f b6 c0             	movzx  eax,al
c0017ee3:	c1 e0 08             	shl    eax,0x8
c0017ee6:	89 d1                	mov    ecx,edx
c0017ee8:	09 c1                	or     ecx,eax
c0017eea:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017eee:	8d 50 02             	lea    edx,[eax+0x2]
c0017ef1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ef5:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017ef9:	0f b6 c0             	movzx  eax,al
c0017efc:	c1 e0 10             	shl    eax,0x10
c0017eff:	09 c1                	or     ecx,eax
c0017f01:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f05:	8d 50 03             	lea    edx,[eax+0x3]
c0017f08:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f0c:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017f10:	0f b6 c0             	movzx  eax,al
c0017f13:	c1 e0 18             	shl    eax,0x18
c0017f16:	09 c8                	or     eax,ecx
c0017f18:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017f1c:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017f21:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f25:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f29:	01 d0                	add    eax,edx
c0017f2b:	83 c0 2c             	add    eax,0x2c
c0017f2e:	8a 00                	mov    al,BYTE PTR [eax]
c0017f30:	0f b6 c0             	movzx  eax,al
c0017f33:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017f37:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017f3a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f3e:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0017f42:	0f b6 d2             	movzx  edx,dl
c0017f45:	c1 e2 08             	shl    edx,0x8
c0017f48:	09 d0                	or     eax,edx
c0017f4a:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0017f4f:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017f54:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0017f59:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017f5d:	88 90 a0 d4 02 c0    	mov    BYTE PTR [eax-0x3ffd2b60],dl
c0017f63:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0017f68:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0017f6d:	66 89 84 12 c0 0b 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffcf440],ax
c0017f75:	e9 c7 00 00 00       	jmp    c0018041 <scanMADT()+0x469>
c0017f7a:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0017f7f:	0f 85 b0 00 00 00    	jne    c0018035 <scanMADT()+0x45d>
c0017f85:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f89:	8d 50 01             	lea    edx,[eax+0x1]
c0017f8c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f90:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f94:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017f98:	0f b6 c0             	movzx  eax,al
c0017f9b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017f9f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017fa3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fa7:	01 d0                	add    eax,edx
c0017fa9:	83 c0 2c             	add    eax,0x2c
c0017fac:	8a 00                	mov    al,BYTE PTR [eax]
c0017fae:	0f b6 d0             	movzx  edx,al
c0017fb1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fb5:	8d 48 01             	lea    ecx,[eax+0x1]
c0017fb8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fbc:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017fc0:	0f b6 c0             	movzx  eax,al
c0017fc3:	c1 e0 08             	shl    eax,0x8
c0017fc6:	09 d0                	or     eax,edx
c0017fc8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017fcc:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017fd1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fd5:	8d 50 01             	lea    edx,[eax+0x1]
c0017fd8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017fdc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017fe0:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017fe4:	0f b6 c0             	movzx  eax,al
c0017fe7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017feb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017fef:	c1 e0 08             	shl    eax,0x8
c0017ff2:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0017ff6:	89 c1                	mov    ecx,eax
c0017ff8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017ffc:	c1 e0 18             	shl    eax,0x18
c0017fff:	89 c3                	mov    ebx,eax
c0018001:	a1 30 0b 03 c0       	mov    eax,ds:0xc0030b30
c0018006:	8d 50 01             	lea    edx,[eax+0x1]
c0018009:	89 15 30 0b 03 c0    	mov    DWORD PTR ds:0xc0030b30,edx
c001800f:	09 d9                	or     ecx,ebx
c0018011:	89 ca                	mov    edx,ecx
c0018013:	89 14 85 40 0b 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf4c0],edx
c001801a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001801e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018026:	68 b8 b3 02 c0       	push   0xc002b3b8
c001802b:	e8 68 ad ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0018030:	83 c4 10             	add    esp,0x10
c0018033:	eb 0c                	jmp    c0018041 <scanMADT()+0x469>
c0018035:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c001803a:	75 05                	jne    c0018041 <scanMADT()+0x469>
c001803c:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0018041:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0018046:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001804a:	01 d0                	add    eax,edx
c001804c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018050:	e9 54 fc ff ff       	jmp    c0017ca9 <scanMADT()+0xd1>
c0018055:	90                   	nop
c0018056:	eb 01                	jmp    c0018059 <scanMADT()+0x481>
c0018058:	90                   	nop
c0018059:	83 c4 38             	add    esp,0x38
c001805c:	5b                   	pop    ebx
c001805d:	c3                   	ret    

c001805e <ACPI::ACPI()>:
c001805e:	83 ec 0c             	sub    esp,0xc
c0018061:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018065:	83 ec 08             	sub    esp,0x8
c0018068:	68 5b b2 02 c0       	push   0xc002b25b
c001806d:	50                   	push   eax
c001806e:	e8 3b c3 ff ff       	call   c00143ae <Device::Device(char const*)>
c0018073:	83 c4 10             	add    esp,0x10
c0018076:	ba 2c b4 02 c0       	mov    edx,0xc002b42c
c001807b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001807f:	89 10                	mov    DWORD PTR [eax],edx
c0018081:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018085:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001808c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018090:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c001809a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001809e:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c00180a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180ac:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c00180b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180b7:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c00180be:	e8 15 fb ff ff       	call   c0017bd8 <scanMADT()>
c00180c3:	90                   	nop
c00180c4:	83 c4 0c             	add    esp,0xc
c00180c7:	c3                   	ret    

c00180c8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c00180c8:	83 ec 2c             	sub    esp,0x2c
c00180cb:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00180cf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00180d3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00180d7:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00180db:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00180e0:	88 d0                	mov    al,dl
c00180e2:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00180e6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00180eb:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00180f3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00180f7:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00180fd:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0018101:	0f 8d 97 00 00 00    	jge    c001819e <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0018107:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001810b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001810f:	83 c2 2a             	add    edx,0x2a
c0018112:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0018116:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c001811b:	75 78                	jne    c0018195 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c001811d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018121:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018125:	83 c2 2a             	add    edx,0x2a
c0018128:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c001812c:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0018130:	75 63                	jne    c0018195 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0018132:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0018137:	74 3a                	je     c0018173 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0018139:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001813d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018141:	83 c2 2a             	add    edx,0x2a
c0018144:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0018148:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001814c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001814f:	39 c2                	cmp    edx,eax
c0018151:	74 10                	je     c0018163 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0018153:	83 ec 0c             	sub    esp,0xc
c0018156:	68 f4 b3 02 c0       	push   0xc002b3f4
c001815b:	e8 13 23 00 00       	call   c001a473 <Krnl::panic(char const*)>
c0018160:	83 c4 10             	add    esp,0x10
c0018163:	83 ec 0c             	sub    esp,0xc
c0018166:	68 60 b2 02 c0       	push   0xc002b260
c001816b:	e8 03 23 00 00       	call   c001a473 <Krnl::panic(char const*)>
c0018170:	83 c4 10             	add    esp,0x10
c0018173:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0018177:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001817b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001817f:	83 c2 2a             	add    edx,0x2a
c0018182:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0018186:	8b 02                	mov    eax,DWORD PTR [edx]
c0018188:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001818b:	89 01                	mov    DWORD PTR [ecx],eax
c001818d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018190:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0018195:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0018199:	e9 55 ff ff ff       	jmp    c00180f3 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c001819e:	90                   	nop
c001819f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00181a3:	83 c4 2c             	add    esp,0x2c
c00181a6:	c2 04 00             	ret    0x4
c00181a9:	90                   	nop

c00181aa <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c00181aa:	83 ec 1c             	sub    esp,0x1c
c00181ad:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00181b1:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00181b5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00181b9:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00181be:	88 c8                	mov    al,cl
c00181c0:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00181c4:	88 d0                	mov    al,dl
c00181c6:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00181ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00181ce:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00181d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00181d8:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00181db:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c00181df:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c00181e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00181e7:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00181ed:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00181f1:	8d 48 2a             	lea    ecx,[eax+0x2a]
c00181f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00181f8:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c00181fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018201:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018207:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001820b:	8d 48 01             	lea    ecx,[eax+0x1]
c001820e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018212:	83 c2 2a             	add    edx,0x2a
c0018215:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0018219:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001821d:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018223:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018227:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001822a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001822e:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0018232:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018236:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001823c:	8d 50 01             	lea    edx,[eax+0x1]
c001823f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018243:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0018249:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001824d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018253:	3d 00 02 00 00       	cmp    eax,0x200
c0018258:	75 10                	jne    c001826a <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c001825a:	83 ec 0c             	sub    esp,0xc
c001825d:	68 6f b2 02 c0       	push   0xc002b26f
c0018262:	e8 0c 22 00 00       	call   c001a473 <Krnl::panic(char const*)>
c0018267:	83 c4 10             	add    esp,0x10
c001826a:	90                   	nop
c001826b:	83 c4 1c             	add    esp,0x1c
c001826e:	c3                   	ret    
c001826f:	90                   	nop

c0018270 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0018270:	b8 00 00 00 00       	mov    eax,0x0
c0018275:	c3                   	ret    

c0018276 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0018276:	83 ec 1c             	sub    esp,0x1c
c0018279:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001827d:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0018280:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018284:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c0018289:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001828e:	83 ec 08             	sub    esp,0x8
c0018291:	52                   	push   edx
c0018292:	50                   	push   eax
c0018293:	e8 c0 6b ff ff       	call   c000ee58 <Computer::readCMOS(unsigned char)>
c0018298:	83 c4 10             	add    esp,0x10
c001829b:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001829f:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c00182a4:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00182a9:	83 ec 04             	sub    esp,0x4
c00182ac:	6a 01                	push   0x1
c00182ae:	52                   	push   edx
c00182af:	50                   	push   eax
c00182b0:	e8 b9 6c ff ff       	call   c000ef6e <Computer::writeCMOS(unsigned char, unsigned char)>
c00182b5:	83 c4 10             	add    esp,0x10
c00182b8:	90                   	nop
c00182b9:	83 c4 1c             	add    esp,0x1c
c00182bc:	c3                   	ret    
c00182bd:	90                   	nop

c00182be <ACPI::open(int, int, void*)>:
c00182be:	53                   	push   ebx
c00182bf:	83 ec 28             	sub    esp,0x28
c00182c2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00182c6:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c00182cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00182d1:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c00182d8:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c00182dd:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00182e3:	83 e0 04             	and    eax,0x4
c00182e6:	84 c0                	test   al,al
c00182e8:	74 47                	je     c0018331 <ACPI::open(int, int, void*)+0x73>
c00182ea:	a1 28 0b 03 c0       	mov    eax,ds:0xc0030b28
c00182ef:	83 ec 08             	sub    esp,0x8
c00182f2:	68 8c b2 02 c0       	push   0xc002b28c
c00182f7:	50                   	push   eax
c00182f8:	e8 3f f8 ff ff       	call   c0017b3c <findDataTable(unsigned char*, char*)>
c00182fd:	83 c4 10             	add    esp,0x10
c0018300:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018304:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0018309:	74 26                	je     c0018331 <ACPI::open(int, int, void*)+0x73>
c001830b:	83 ec 0c             	sub    esp,0xc
c001830e:	68 91 b2 02 c0       	push   0xc002b291
c0018313:	e8 80 aa ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0018318:	83 c4 10             	add    esp,0x10
c001831b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001831f:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018326:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001832a:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0018331:	c7 44 24 18 5f 0c 00 00 	mov    DWORD PTR [esp+0x18],0xc5f
c0018339:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001833d:	8a 00                	mov    al,BYTE PTR [eax]
c001833f:	3c 01                	cmp    al,0x1
c0018341:	75 28                	jne    c001836b <ACPI::open(int, int, void*)+0xad>
c0018343:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018347:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001834e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018352:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0018359:	83 ec 0c             	sub    esp,0xc
c001835c:	68 a2 b2 02 c0       	push   0xc002b2a2
c0018361:	e8 32 aa ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0018366:	83 c4 10             	add    esp,0x10
c0018369:	eb 25                	jmp    c0018390 <ACPI::open(int, int, void*)+0xd2>
c001836b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001836f:	8a 00                	mov    al,BYTE PTR [eax]
c0018371:	3c 02                	cmp    al,0x2
c0018373:	75 1b                	jne    c0018390 <ACPI::open(int, int, void*)+0xd2>
c0018375:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018379:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018380:	83 ec 0c             	sub    esp,0xc
c0018383:	68 aa b2 02 c0       	push   0xc002b2aa
c0018388:	e8 0b aa ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001838d:	83 c4 10             	add    esp,0x10
c0018390:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018394:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c001839a:	83 f0 01             	xor    eax,0x1
c001839d:	84 c0                	test   al,al
c001839f:	74 6a                	je     c001840b <ACPI::open(int, int, void*)+0x14d>
c00183a1:	83 ec 0c             	sub    esp,0xc
c00183a4:	68 b2 b2 02 c0       	push   0xc002b2b2
c00183a9:	e8 ea a9 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c00183ae:	83 c4 10             	add    esp,0x10
c00183b1:	e8 9a 7d fe ff       	call   c0000150 <manualPCIProbe>
c00183b6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00183ba:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c00183bf:	75 28                	jne    c00183e9 <ACPI::open(int, int, void*)+0x12b>
c00183c1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183c5:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00183cc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183d0:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00183d7:	83 ec 0c             	sub    esp,0xc
c00183da:	68 c0 b2 02 c0       	push   0xc002b2c0
c00183df:	e8 b4 a9 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c00183e4:	83 c4 10             	add    esp,0x10
c00183e7:	eb 22                	jmp    c001840b <ACPI::open(int, int, void*)+0x14d>
c00183e9:	83 7c 24 14 02       	cmp    DWORD PTR [esp+0x14],0x2
c00183ee:	75 1b                	jne    c001840b <ACPI::open(int, int, void*)+0x14d>
c00183f0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183f4:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00183fb:	83 ec 0c             	sub    esp,0xc
c00183fe:	68 ca b2 02 c0       	push   0xc002b2ca
c0018403:	e8 90 a9 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0018408:	83 c4 10             	add    esp,0x10
c001840b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001840f:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018415:	84 c0                	test   al,al
c0018417:	74 13                	je     c001842c <ACPI::open(int, int, void*)+0x16e>
c0018419:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001841d:	8a 80 65 12 00 00    	mov    al,BYTE PTR [eax+0x1265]
c0018423:	83 f0 01             	xor    eax,0x1
c0018426:	0f b6 c0             	movzx  eax,al
c0018429:	40                   	inc    eax
c001842a:	eb 05                	jmp    c0018431 <ACPI::open(int, int, void*)+0x173>
c001842c:	b8 00 00 00 00       	mov    eax,0x0
c0018431:	83 ec 08             	sub    esp,0x8
c0018434:	50                   	push   eax
c0018435:	68 d4 b2 02 c0       	push   0xc002b2d4
c001843a:	e8 59 a9 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001843f:	83 c4 10             	add    esp,0x10
c0018442:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018446:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c001844c:	84 c0                	test   al,al
c001844e:	74 67                	je     c00184b7 <ACPI::open(int, int, void*)+0x1f9>
c0018450:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c0018458:	83 ec 0c             	sub    esp,0xc
c001845b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001845f:	e8 dc 73 ff ff       	call   c000f840 <malloc>
c0018464:	83 c4 10             	add    esp,0x10
c0018467:	89 c3                	mov    ebx,eax
c0018469:	83 ec 0c             	sub    esp,0xc
c001846c:	53                   	push   ebx
c001846d:	e8 2c a3 00 00       	call   c002279e <PCI::PCI()>
c0018472:	83 c4 10             	add    esp,0x10
c0018475:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018479:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001847d:	83 ec 08             	sub    esp,0x8
c0018480:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018484:	50                   	push   eax
c0018485:	e8 34 bd ff ff       	call   c00141be <Device::addChild(Device*)>
c001848a:	83 c4 10             	add    esp,0x10
c001848d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018491:	8b 00                	mov    eax,DWORD PTR [eax]
c0018493:	83 c0 08             	add    eax,0x8
c0018496:	8b 00                	mov    eax,DWORD PTR [eax]
c0018498:	6a 00                	push   0x0
c001849a:	6a 00                	push   0x0
c001849c:	6a 00                	push   0x0
c001849e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00184a2:	ff d0                	call   eax
c00184a4:	83 c4 10             	add    esp,0x10
c00184a7:	83 ec 0c             	sub    esp,0xc
c00184aa:	68 dd b2 02 c0       	push   0xc002b2dd
c00184af:	e8 e4 a8 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c00184b4:	83 c4 10             	add    esp,0x10
c00184b7:	e8 bd 98 ff ff       	call   c0011d79 <Virt::swappingSetup()>
c00184bc:	83 ec 0c             	sub    esp,0xc
c00184bf:	68 e8 b2 02 c0       	push   0xc002b2e8
c00184c4:	e8 80 46 00 00       	call   c001cb49 <Thr::loadKernelSymbolTable(char const*)>
c00184c9:	83 c4 10             	add    esp,0x10
c00184cc:	8b 1d 48 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e248
c00184d2:	83 ec 08             	sub    esp,0x8
c00184d5:	6a 01                	push   0x1
c00184d7:	68 06 b3 02 c0       	push   0xc002b306
c00184dc:	e8 c5 50 00 00       	call   c001d5a6 <Thr::loadDLL(char const*, bool)>
c00184e1:	83 c4 10             	add    esp,0x10
c00184e4:	83 ec 08             	sub    esp,0x8
c00184e7:	53                   	push   ebx
c00184e8:	50                   	push   eax
c00184e9:	e8 07 53 00 00       	call   c001d7f5 <Thr::executeDLL(unsigned long, void*)>
c00184ee:	83 c4 10             	add    esp,0x10
c00184f1:	8b 1d 48 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e248
c00184f7:	83 ec 08             	sub    esp,0x8
c00184fa:	6a 01                	push   0x1
c00184fc:	68 23 b3 02 c0       	push   0xc002b323
c0018501:	e8 a0 50 00 00       	call   c001d5a6 <Thr::loadDLL(char const*, bool)>
c0018506:	83 c4 10             	add    esp,0x10
c0018509:	83 ec 08             	sub    esp,0x8
c001850c:	53                   	push   ebx
c001850d:	50                   	push   eax
c001850e:	e8 e2 52 00 00       	call   c001d7f5 <Thr::executeDLL(unsigned long, void*)>
c0018513:	83 c4 10             	add    esp,0x10
c0018516:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c001851b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0018521:	83 e0 04             	and    eax,0x4
c0018524:	84 c0                	test   al,al
c0018526:	0f 84 d2 00 00 00    	je     c00185fe <ACPI::open(int, int, void*)+0x340>
c001852c:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0018533:	83 ec 0c             	sub    esp,0xc
c0018536:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001853a:	e8 01 73 ff ff       	call   c000f840 <malloc>
c001853f:	83 c4 10             	add    esp,0x10
c0018542:	89 c3                	mov    ebx,eax
c0018544:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c0018549:	83 ec 04             	sub    esp,0x4
c001854c:	50                   	push   eax
c001854d:	68 40 b3 02 c0       	push   0xc002b340
c0018552:	53                   	push   ebx
c0018553:	e8 98 ad ff ff       	call   c00132f0 <File::File(char const*, Process*)>
c0018558:	83 c4 10             	add    esp,0x10
c001855b:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001855f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018564:	74 17                	je     c001857d <ACPI::open(int, int, void*)+0x2bf>
c0018566:	83 ec 0c             	sub    esp,0xc
c0018569:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001856d:	e8 50 b0 ff ff       	call   c00135c2 <File::exists()>
c0018572:	83 c4 10             	add    esp,0x10
c0018575:	84 c0                	test   al,al
c0018577:	74 04                	je     c001857d <ACPI::open(int, int, void*)+0x2bf>
c0018579:	b0 01                	mov    al,0x1
c001857b:	eb 02                	jmp    c001857f <ACPI::open(int, int, void*)+0x2c1>
c001857d:	b0 00                	mov    al,0x0
c001857f:	84 c0                	test   al,al
c0018581:	74 22                	je     c00185a5 <ACPI::open(int, int, void*)+0x2e7>
c0018583:	83 ec 08             	sub    esp,0x8
c0018586:	6a 01                	push   0x1
c0018588:	68 40 b3 02 c0       	push   0xc002b340
c001858d:	e8 14 50 00 00       	call   c001d5a6 <Thr::loadDLL(char const*, bool)>
c0018592:	83 c4 10             	add    esp,0x10
c0018595:	83 ec 08             	sub    esp,0x8
c0018598:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001859c:	50                   	push   eax
c001859d:	e8 53 52 00 00       	call   c001d7f5 <Thr::executeDLL(unsigned long, void*)>
c00185a2:	83 c4 10             	add    esp,0x10
c00185a5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00185aa:	74 1e                	je     c00185ca <ACPI::open(int, int, void*)+0x30c>
c00185ac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00185b1:	74 17                	je     c00185ca <ACPI::open(int, int, void*)+0x30c>
c00185b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00185b7:	8b 00                	mov    eax,DWORD PTR [eax]
c00185b9:	83 c0 08             	add    eax,0x8
c00185bc:	8b 00                	mov    eax,DWORD PTR [eax]
c00185be:	83 ec 0c             	sub    esp,0xc
c00185c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00185c5:	ff d0                	call   eax
c00185c7:	83 c4 10             	add    esp,0x10
c00185ca:	a1 28 0b 03 c0       	mov    eax,ds:0xc0030b28
c00185cf:	83 ec 08             	sub    esp,0x8
c00185d2:	68 5d b3 02 c0       	push   0xc002b35d
c00185d7:	50                   	push   eax
c00185d8:	e8 5f f5 ff ff       	call   c0017b3c <findDataTable(unsigned char*, char*)>
c00185dd:	83 c4 10             	add    esp,0x10
c00185e0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00185e4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00185e9:	74 13                	je     c00185fe <ACPI::open(int, int, void*)+0x340>
c00185eb:	83 ec 08             	sub    esp,0x8
c00185ee:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00185f2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00185f6:	e8 7b fc ff ff       	call   c0018276 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c00185fb:	83 c4 10             	add    esp,0x10
c00185fe:	b8 00 00 00 00       	mov    eax,0x0
c0018603:	83 c4 28             	add    esp,0x28
c0018606:	5b                   	pop    ebx
c0018607:	c3                   	ret    

c0018608 <ACPI::sleep()>:
c0018608:	83 ec 0c             	sub    esp,0xc
c001860b:	a1 00 09 03 c0       	mov    eax,ds:0xc0030900
c0018610:	85 c0                	test   eax,eax
c0018612:	74 07                	je     c001861b <ACPI::sleep()+0x13>
c0018614:	a1 00 09 03 c0       	mov    eax,ds:0xc0030900
c0018619:	ff d0                	call   eax
c001861b:	90                   	nop
c001861c:	83 c4 0c             	add    esp,0xc
c001861f:	c3                   	ret    

c0018620 <CPU::close(int, int, void*)>:
c0018620:	31 c0                	xor    eax,eax
c0018622:	c3                   	ret    
c0018623:	90                   	nop

c0018624 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0018624:	55                   	push   ebp
c0018625:	57                   	push   edi
c0018626:	56                   	push   esi
c0018627:	53                   	push   ebx
c0018628:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001862c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018630:	89 ce                	mov    esi,ecx
c0018632:	89 d5                	mov    ebp,edx
c0018634:	80 f9 04             	cmp    cl,0x4
c0018637:	75 28                	jne    c0018661 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0018639:	8d 42 f9             	lea    eax,[edx-0x7]
c001863c:	3c 03                	cmp    al,0x3
c001863e:	0f 86 63 01 00 00    	jbe    c00187a7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018644:	80 fa 03             	cmp    dl,0x3
c0018647:	0f 84 5a 01 00 00    	je     c00187a7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c001864d:	8d 7a f2             	lea    edi,[edx-0xe]
c0018650:	b8 70 d6 02 c0       	mov    eax,0xc002d670
c0018655:	89 fb                	mov    ebx,edi
c0018657:	80 fb 01             	cmp    bl,0x1
c001865a:	77 4e                	ja     c00186aa <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c001865c:	e9 52 01 00 00       	jmp    c00187b3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018661:	80 f9 05             	cmp    cl,0x5
c0018664:	75 4d                	jne    c00186b3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0018666:	b8 80 d6 02 c0       	mov    eax,0xc002d680
c001866b:	80 fa 03             	cmp    dl,0x3
c001866e:	0f 86 3f 01 00 00    	jbe    c00187b3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018674:	8d 7a fa             	lea    edi,[edx-0x6]
c0018677:	b8 90 d6 02 c0       	mov    eax,0xc002d690
c001867c:	89 fb                	mov    ebx,edi
c001867e:	80 fb 01             	cmp    bl,0x1
c0018681:	0f 86 2c 01 00 00    	jbe    c00187b3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018687:	b8 a0 d6 02 c0       	mov    eax,0xc002d6a0
c001868c:	80 fa 08             	cmp    dl,0x8
c001868f:	0f 84 1e 01 00 00    	je     c00187b3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018695:	89 d7                	mov    edi,edx
c0018697:	b8 b0 d6 02 c0       	mov    eax,0xc002d6b0
c001869c:	83 e7 fb             	and    edi,0xfffffffb
c001869f:	89 fb                	mov    ebx,edi
c00186a1:	80 fb 09             	cmp    bl,0x9
c00186a4:	0f 84 09 01 00 00    	je     c00187b3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00186aa:	31 c0                	xor    eax,eax
c00186ac:	89 eb                	mov    ebx,ebp
c00186ae:	0f b6 fb             	movzx  edi,bl
c00186b1:	eb 30                	jmp    c00186e3 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c00186b3:	31 c0                	xor    eax,eax
c00186b5:	80 f9 06             	cmp    cl,0x6
c00186b8:	75 f2                	jne    c00186ac <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00186ba:	80 fa 0a             	cmp    dl,0xa
c00186bd:	77 ed                	ja     c00186ac <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00186bf:	bf de 05 00 00       	mov    edi,0x5de
c00186c4:	0f a3 d7             	bt     edi,edx
c00186c7:	73 e3                	jae    c00186ac <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00186c9:	b8 c0 d6 02 c0       	mov    eax,0xc002d6c0
c00186ce:	e9 e0 00 00 00       	jmp    c00187b3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00186d3:	39 c7                	cmp    edi,eax
c00186d5:	0f 84 d3 00 00 00    	je     c00187ae <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00186db:	40                   	inc    eax
c00186dc:	3d d0 00 00 00       	cmp    eax,0xd0
c00186e1:	74 09                	je     c00186ec <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c00186e3:	89 f3                	mov    ebx,esi
c00186e5:	80 fb 0f             	cmp    bl,0xf
c00186e8:	75 f1                	jne    c00186db <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c00186ea:	eb e7                	jmp    c00186d3 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c00186ec:	80 f9 10             	cmp    cl,0x10
c00186ef:	75 14                	jne    c0018705 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c00186f1:	8d 42 fc             	lea    eax,[edx-0x4]
c00186f4:	83 e0 fb             	and    eax,0xfffffffb
c00186f7:	3c 02                	cmp    al,0x2
c00186f9:	76 34                	jbe    c001872f <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c00186fb:	b8 42 b7 02 c0       	mov    eax,0xc002b742
c0018700:	80 fa 02             	cmp    dl,0x2
c0018703:	eb 24                	jmp    c0018729 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0018705:	80 f9 11             	cmp    cl,0x11
c0018708:	75 13                	jne    c001871d <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c001870a:	b8 42 b7 02 c0       	mov    eax,0xc002b742
c001870f:	80 fa 03             	cmp    dl,0x3
c0018712:	0f 85 9b 00 00 00    	jne    c00187b3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018718:	e9 91 00 00 00       	jmp    c00187ae <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c001871d:	80 f9 12             	cmp    cl,0x12
c0018720:	75 14                	jne    c0018736 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0018722:	b8 42 b7 02 c0       	mov    eax,0xc002b742
c0018727:	fe ca                	dec    dl
c0018729:	0f 85 84 00 00 00    	jne    c00187b3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001872f:	b8 e0 d6 02 c0       	mov    eax,0xc002d6e0
c0018734:	eb 7d                	jmp    c00187b3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018736:	80 f9 14             	cmp    cl,0x14
c0018739:	75 12                	jne    c001874d <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c001873b:	4a                   	dec    edx
c001873c:	b8 42 b7 02 c0       	mov    eax,0xc002b742
c0018741:	80 fa 01             	cmp    dl,0x1
c0018744:	77 6d                	ja     c00187b3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018746:	b8 f0 d6 02 c0       	mov    eax,0xc002d6f0
c001874b:	eb 66                	jmp    c00187b3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001874d:	80 f9 15             	cmp    cl,0x15
c0018750:	75 31                	jne    c0018783 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0018752:	b8 00 d7 02 c0       	mov    eax,0xc002d700
c0018757:	80 fa 01             	cmp    dl,0x1
c001875a:	74 57                	je     c00187b3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001875c:	b8 42 b7 02 c0       	mov    eax,0xc002b742
c0018761:	80 fa 13             	cmp    dl,0x13
c0018764:	76 0c                	jbe    c0018772 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0018766:	80 fa 30             	cmp    dl,0x30
c0018769:	75 48                	jne    c00187b3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001876b:	b8 20 d7 02 c0       	mov    eax,0xc002d720
c0018770:	eb 41                	jmp    c00187b3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018772:	b9 04 00 09 00       	mov    ecx,0x90004
c0018777:	0f a3 d1             	bt     ecx,edx
c001877a:	73 37                	jae    c00187b3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001877c:	b8 10 d7 02 c0       	mov    eax,0xc002d710
c0018781:	eb 30                	jmp    c00187b3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018783:	b8 42 b7 02 c0       	mov    eax,0xc002b742
c0018788:	80 f9 16             	cmp    cl,0x16
c001878b:	75 26                	jne    c00187b3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001878d:	b8 30 d7 02 c0       	mov    eax,0xc002d730
c0018792:	84 d2                	test   dl,dl
c0018794:	74 1d                	je     c00187b3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018796:	b8 42 b7 02 c0       	mov    eax,0xc002b742
c001879b:	80 fa 30             	cmp    dl,0x30
c001879e:	75 13                	jne    c00187b3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187a0:	b8 40 d7 02 c0       	mov    eax,0xc002d740
c00187a5:	eb 0c                	jmp    c00187b3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187a7:	b8 60 d6 02 c0       	mov    eax,0xc002d660
c00187ac:	eb 05                	jmp    c00187b3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187ae:	b8 d0 d6 02 c0       	mov    eax,0xc002d6d0
c00187b3:	5b                   	pop    ebx
c00187b4:	5e                   	pop    esi
c00187b5:	5f                   	pop    edi
c00187b6:	5d                   	pop    ebp
c00187b7:	c3                   	ret    

c00187b8 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c00187b8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00187bc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00187c0:	80 f9 04             	cmp    cl,0x4
c00187c3:	75 6b                	jne    c0018830 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c00187c5:	b8 c0 d4 02 c0       	mov    eax,0xc002d4c0
c00187ca:	80 fa 01             	cmp    dl,0x1
c00187cd:	0f 86 92 02 00 00    	jbe    c0018a65 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187d3:	b8 d0 d4 02 c0       	mov    eax,0xc002d4d0
c00187d8:	80 fa 02             	cmp    dl,0x2
c00187db:	0f 84 84 02 00 00    	je     c0018a65 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187e1:	b8 e0 d4 02 c0       	mov    eax,0xc002d4e0
c00187e6:	80 fa 03             	cmp    dl,0x3
c00187e9:	0f 84 76 02 00 00    	je     c0018a65 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187ef:	b8 f0 d4 02 c0       	mov    eax,0xc002d4f0
c00187f4:	80 fa 04             	cmp    dl,0x4
c00187f7:	0f 84 68 02 00 00    	je     c0018a65 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187fd:	b8 00 d5 02 c0       	mov    eax,0xc002d500
c0018802:	80 fa 05             	cmp    dl,0x5
c0018805:	0f 84 5a 02 00 00    	je     c0018a65 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001880b:	b8 e0 d4 02 c0       	mov    eax,0xc002d4e0
c0018810:	80 fa 07             	cmp    dl,0x7
c0018813:	0f 84 4c 02 00 00    	je     c0018a65 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018819:	83 ea 08             	sub    edx,0x8
c001881c:	b8 42 b7 02 c0       	mov    eax,0xc002b742
c0018821:	80 fa 01             	cmp    dl,0x1
c0018824:	0f 87 3b 02 00 00    	ja     c0018a65 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001882a:	b8 10 d5 02 c0       	mov    eax,0xc002d510
c001882f:	c3                   	ret    
c0018830:	80 f9 05             	cmp    cl,0x5
c0018833:	75 45                	jne    c001887a <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0018835:	8d 4a ff             	lea    ecx,[edx-0x1]
c0018838:	b8 20 d5 02 c0       	mov    eax,0xc002d520
c001883d:	80 f9 02             	cmp    cl,0x2
c0018840:	0f 86 1f 02 00 00    	jbe    c0018a65 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018846:	80 fa 04             	cmp    dl,0x4
c0018849:	0f 84 f3 01 00 00    	je     c0018a42 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c001884f:	80 fa 07             	cmp    dl,0x7
c0018852:	0f 84 0d 02 00 00    	je     c0018a65 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018858:	b8 30 d5 02 c0       	mov    eax,0xc002d530
c001885d:	80 fa 08             	cmp    dl,0x8
c0018860:	0f 84 ff 01 00 00    	je     c0018a65 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018866:	b8 42 b7 02 c0       	mov    eax,0xc002b742
c001886b:	80 fa 09             	cmp    dl,0x9
c001886e:	0f 85 f1 01 00 00    	jne    c0018a65 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018874:	b8 40 d5 02 c0       	mov    eax,0xc002d540
c0018879:	c3                   	ret    
c001887a:	80 f9 06             	cmp    cl,0x6
c001887d:	0f 85 85 01 00 00    	jne    c0018a08 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0018883:	b8 50 d5 02 c0       	mov    eax,0xc002d550
c0018888:	80 fa 01             	cmp    dl,0x1
c001888b:	0f 84 d4 01 00 00    	je     c0018a65 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018891:	8d 42 fb             	lea    eax,[edx-0x5]
c0018894:	3c 01                	cmp    al,0x1
c0018896:	0f 86 ac 01 00 00    	jbe    c0018a48 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c001889c:	80 fa 03             	cmp    dl,0x3
c001889f:	0f 84 a3 01 00 00    	je     c0018a48 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00188a5:	8d 4a f9             	lea    ecx,[edx-0x7]
c00188a8:	b8 70 d5 02 c0       	mov    eax,0xc002d570
c00188ad:	80 f9 01             	cmp    cl,0x1
c00188b0:	0f 86 af 01 00 00    	jbe    c0018a65 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188b6:	80 fa 09             	cmp    dl,0x9
c00188b9:	0f 84 8f 01 00 00    	je     c0018a4e <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c00188bf:	8d 4a f6             	lea    ecx,[edx-0xa]
c00188c2:	80 f9 01             	cmp    cl,0x1
c00188c5:	0f 86 9a 01 00 00    	jbe    c0018a65 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188cb:	b8 80 d5 02 c0       	mov    eax,0xc002d580
c00188d0:	80 fa 0d             	cmp    dl,0xd
c00188d3:	0f 84 8c 01 00 00    	je     c0018a65 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188d9:	b8 90 d5 02 c0       	mov    eax,0xc002d590
c00188de:	80 fa 0e             	cmp    dl,0xe
c00188e1:	0f 84 7e 01 00 00    	je     c0018a65 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188e7:	b8 a0 d5 02 c0       	mov    eax,0xc002d5a0
c00188ec:	80 fa 0f             	cmp    dl,0xf
c00188ef:	0f 84 70 01 00 00    	je     c0018a65 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188f5:	b8 80 d5 02 c0       	mov    eax,0xc002d580
c00188fa:	80 fa 15             	cmp    dl,0x15
c00188fd:	0f 84 62 01 00 00    	je     c0018a65 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018903:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018906:	b8 a0 d5 02 c0       	mov    eax,0xc002d5a0
c001890b:	80 f9 01             	cmp    cl,0x1
c001890e:	0f 86 51 01 00 00    	jbe    c0018a65 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018914:	80 fa 1a             	cmp    dl,0x1a
c0018917:	0f 84 37 01 00 00    	je     c0018a54 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c001891d:	80 fa 1c             	cmp    dl,0x1c
c0018920:	0f 84 34 01 00 00    	je     c0018a5a <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018926:	80 fa 1d             	cmp    dl,0x1d
c0018929:	0f 84 36 01 00 00    	je     c0018a65 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001892f:	b8 d0 d5 02 c0       	mov    eax,0xc002d5d0
c0018934:	80 fa 25             	cmp    dl,0x25
c0018937:	0f 84 28 01 00 00    	je     c0018a65 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001893d:	8d 4a da             	lea    ecx,[edx-0x26]
c0018940:	b8 c0 d5 02 c0       	mov    eax,0xc002d5c0
c0018945:	80 f9 01             	cmp    cl,0x1
c0018948:	0f 86 17 01 00 00    	jbe    c0018a65 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001894e:	b8 e0 d5 02 c0       	mov    eax,0xc002d5e0
c0018953:	80 fa 2a             	cmp    dl,0x2a
c0018956:	0f 84 09 01 00 00    	je     c0018a65 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001895c:	b8 d0 d5 02 c0       	mov    eax,0xc002d5d0
c0018961:	80 fa 2c             	cmp    dl,0x2c
c0018964:	0f 84 fb 00 00 00    	je     c0018a65 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001896a:	b8 e0 d5 02 c0       	mov    eax,0xc002d5e0
c001896f:	80 fa 2d             	cmp    dl,0x2d
c0018972:	0f 84 ed 00 00 00    	je     c0018a65 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018978:	b8 b0 d5 02 c0       	mov    eax,0xc002d5b0
c001897d:	80 fa 2e             	cmp    dl,0x2e
c0018980:	0f 84 df 00 00 00    	je     c0018a65 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018986:	b8 d0 d5 02 c0       	mov    eax,0xc002d5d0
c001898b:	80 fa 2f             	cmp    dl,0x2f
c001898e:	0f 84 d1 00 00 00    	je     c0018a65 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018994:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018997:	b8 c0 d5 02 c0       	mov    eax,0xc002d5c0
c001899c:	80 f9 01             	cmp    cl,0x1
c001899f:	0f 86 c0 00 00 00    	jbe    c0018a65 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189a5:	b8 f0 d5 02 c0       	mov    eax,0xc002d5f0
c00189aa:	80 fa 37             	cmp    dl,0x37
c00189ad:	0f 84 b2 00 00 00    	je     c0018a65 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189b3:	b8 00 d6 02 c0       	mov    eax,0xc002d600
c00189b8:	80 fa 3a             	cmp    dl,0x3a
c00189bb:	0f 84 a4 00 00 00    	je     c0018a65 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189c1:	b8 10 d6 02 c0       	mov    eax,0xc002d610
c00189c6:	80 fa 3c             	cmp    dl,0x3c
c00189c9:	0f 84 96 00 00 00    	je     c0018a65 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189cf:	b8 20 d6 02 c0       	mov    eax,0xc002d620
c00189d4:	80 fa 3d             	cmp    dl,0x3d
c00189d7:	0f 84 88 00 00 00    	je     c0018a65 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189dd:	b8 00 d6 02 c0       	mov    eax,0xc002d600
c00189e2:	80 fa 3e             	cmp    dl,0x3e
c00189e5:	74 7e                	je     c0018a65 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189e7:	8d 42 bb             	lea    eax,[edx-0x45]
c00189ea:	3c 01                	cmp    al,0x1
c00189ec:	76 72                	jbe    c0018a60 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c00189ee:	80 fa 3f             	cmp    dl,0x3f
c00189f1:	74 6d                	je     c0018a60 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c00189f3:	80 fa 4a             	cmp    dl,0x4a
c00189f6:	74 0a                	je     c0018a02 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c00189f8:	b8 42 b7 02 c0       	mov    eax,0xc002b742
c00189fd:	80 fa 4d             	cmp    dl,0x4d
c0018a00:	75 63                	jne    c0018a65 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a02:	b8 f0 d5 02 c0       	mov    eax,0xc002d5f0
c0018a07:	c3                   	ret    
c0018a08:	b8 42 b7 02 c0       	mov    eax,0xc002b742
c0018a0d:	80 f9 0b             	cmp    cl,0xb
c0018a10:	75 0a                	jne    c0018a1c <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018a12:	fe ca                	dec    dl
c0018a14:	75 4f                	jne    c0018a65 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a16:	b8 30 d6 02 c0       	mov    eax,0xc002d630
c0018a1b:	c3                   	ret    
c0018a1c:	80 f9 0f             	cmp    cl,0xf
c0018a1f:	75 44                	jne    c0018a65 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a21:	b8 40 d6 02 c0       	mov    eax,0xc002d640
c0018a26:	80 fa 02             	cmp    dl,0x2
c0018a29:	76 3a                	jbe    c0018a65 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a2b:	8d 42 fd             	lea    eax,[edx-0x3]
c0018a2e:	3c 01                	cmp    al,0x1
c0018a30:	76 0a                	jbe    c0018a3c <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018a32:	b8 42 b7 02 c0       	mov    eax,0xc002b742
c0018a37:	80 fa 06             	cmp    dl,0x6
c0018a3a:	75 29                	jne    c0018a65 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a3c:	b8 50 d6 02 c0       	mov    eax,0xc002d650
c0018a41:	c3                   	ret    
c0018a42:	b8 30 d5 02 c0       	mov    eax,0xc002d530
c0018a47:	c3                   	ret    
c0018a48:	b8 60 d5 02 c0       	mov    eax,0xc002d560
c0018a4d:	c3                   	ret    
c0018a4e:	b8 80 d5 02 c0       	mov    eax,0xc002d580
c0018a53:	c3                   	ret    
c0018a54:	b8 b0 d5 02 c0       	mov    eax,0xc002d5b0
c0018a59:	c3                   	ret    
c0018a5a:	b8 c0 d5 02 c0       	mov    eax,0xc002d5c0
c0018a5f:	c3                   	ret    
c0018a60:	b8 10 d6 02 c0       	mov    eax,0xc002d610
c0018a65:	c3                   	ret    

c0018a66 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018a66:	60                   	pusha  
c0018a67:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018a6b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018a6f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018a73:	9c                   	pushf  
c0018a74:	fa                   	cli    
c0018a75:	0f 09                	wbinvd 
c0018a77:	0f 30                	wrmsr  
c0018a79:	9d                   	popf   
c0018a7a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018a7e:	89 02                	mov    DWORD PTR [edx],eax
c0018a80:	61                   	popa   
c0018a81:	c3                   	ret    

c0018a82 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018a82:	60                   	pusha  
c0018a83:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018a87:	9c                   	pushf  
c0018a88:	fa                   	cli    
c0018a89:	0f 09                	wbinvd 
c0018a8b:	31 c0                	xor    eax,eax
c0018a8d:	31 d2                	xor    edx,edx
c0018a8f:	0f 32                	rdmsr  
c0018a91:	9d                   	popf   
c0018a92:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018a96:	89 02                	mov    DWORD PTR [edx],eax
c0018a98:	61                   	popa   
c0018a99:	c3                   	ret    

c0018a9a <CPU::AMD_K6_writeback(int, int, int)>:
c0018a9a:	56                   	push   esi
c0018a9b:	53                   	push   ebx
c0018a9c:	83 ec 10             	sub    esp,0x10
c0018a9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018aa3:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018aa8:	75 5d                	jne    c0018b07 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018aaa:	83 f8 08             	cmp    eax,0x8
c0018aad:	75 09                	jne    c0018ab8 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018aaf:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018ab4:	7e 13                	jle    c0018ac9 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018ab6:	eb 30                	jmp    c0018ae8 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018ab8:	83 f8 06             	cmp    eax,0x6
c0018abb:	7c 4a                	jl     c0018b07 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018abd:	83 f8 07             	cmp    eax,0x7
c0018ac0:	7e 07                	jle    c0018ac9 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018ac2:	83 f8 09             	cmp    eax,0x9
c0018ac5:	74 21                	je     c0018ae8 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018ac7:	eb 3e                	jmp    c0018b07 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018ac9:	89 e6                	mov    esi,esp
c0018acb:	8b 1d 88 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e288
c0018ad1:	56                   	push   esi
c0018ad2:	c1 eb 15             	shr    ebx,0x15
c0018ad5:	68 82 00 00 c0       	push   0xc0000082
c0018ada:	83 e3 7e             	and    ebx,0x7e
c0018add:	e8 a0 ff ff ff       	call   c0018a82 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018ae2:	56                   	push   esi
c0018ae3:	6a 00                	push   0x0
c0018ae5:	53                   	push   ebx
c0018ae6:	eb 12                	jmp    c0018afa <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018ae8:	89 e3                	mov    ebx,esp
c0018aea:	53                   	push   ebx
c0018aeb:	68 82 00 00 c0       	push   0xc0000082
c0018af0:	e8 8d ff ff ff       	call   c0018a82 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018af5:	53                   	push   ebx
c0018af6:	6a 00                	push   0x0
c0018af8:	6a 00                	push   0x0
c0018afa:	68 82 00 00 c0       	push   0xc0000082
c0018aff:	e8 62 ff ff ff       	call   c0018a66 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018b04:	83 c4 18             	add    esp,0x18
c0018b07:	83 c4 10             	add    esp,0x10
c0018b0a:	5b                   	pop    ebx
c0018b0b:	5e                   	pop    esi
c0018b0c:	c3                   	ret    
c0018b0d:	90                   	nop

c0018b0e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018b0e:	55                   	push   ebp
c0018b0f:	57                   	push   edi
c0018b10:	56                   	push   esi
c0018b11:	53                   	push   ebx
c0018b12:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018b16:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018b1a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018b1e:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018b22:	39 05 60 d7 02 c0    	cmp    DWORD PTR ds:0xc002d760,eax
c0018b28:	75 23                	jne    c0018b4d <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018b2a:	a1 8c 0d 03 c0       	mov    eax,ds:0xc0030d8c
c0018b2f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018b33:	89 06                	mov    DWORD PTR [esi],eax
c0018b35:	a1 88 0d 03 c0       	mov    eax,ds:0xc0030d88
c0018b3a:	89 07                	mov    DWORD PTR [edi],eax
c0018b3c:	a1 84 0d 03 c0       	mov    eax,ds:0xc0030d84
c0018b41:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018b44:	a1 80 0d 03 c0       	mov    eax,ds:0xc0030d80
c0018b49:	89 02                	mov    DWORD PTR [edx],eax
c0018b4b:	eb 3f                	jmp    c0018b8c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018b4d:	31 c9                	xor    ecx,ecx
c0018b4f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018b53:	0f a2                	cpuid  
c0018b55:	89 06                	mov    DWORD PTR [esi],eax
c0018b57:	89 1f                	mov    DWORD PTR [edi],ebx
c0018b59:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018b5d:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018b60:	89 10                	mov    DWORD PTR [eax],edx
c0018b62:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018b66:	a3 60 d7 02 c0       	mov    ds:0xc002d760,eax
c0018b6b:	8b 06                	mov    eax,DWORD PTR [esi]
c0018b6d:	a3 8c 0d 03 c0       	mov    ds:0xc0030d8c,eax
c0018b72:	8b 07                	mov    eax,DWORD PTR [edi]
c0018b74:	a3 88 0d 03 c0       	mov    ds:0xc0030d88,eax
c0018b79:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018b7c:	a3 84 0d 03 c0       	mov    ds:0xc0030d84,eax
c0018b81:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018b85:	8b 00                	mov    eax,DWORD PTR [eax]
c0018b87:	a3 80 0d 03 c0       	mov    ds:0xc0030d80,eax
c0018b8c:	5b                   	pop    ebx
c0018b8d:	5e                   	pop    esi
c0018b8e:	5f                   	pop    edi
c0018b8f:	5d                   	pop    ebp
c0018b90:	c3                   	ret    
c0018b91:	90                   	nop

c0018b92 <CPU::cpuidCheckEDX(unsigned int)>:
c0018b92:	83 ec 10             	sub    esp,0x10
c0018b95:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018b99:	50                   	push   eax
c0018b9a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018b9e:	50                   	push   eax
c0018b9f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018ba3:	50                   	push   eax
c0018ba4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018ba8:	50                   	push   eax
c0018ba9:	6a 01                	push   0x1
c0018bab:	e8 5e ff ff ff       	call   c0018b0e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018bb0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018bb4:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018bb8:	0f 95 c0             	setne  al
c0018bbb:	83 c4 24             	add    esp,0x24
c0018bbe:	c3                   	ret    
c0018bbf:	90                   	nop

c0018bc0 <CPU::cpuidCheckECX(unsigned int)>:
c0018bc0:	83 ec 10             	sub    esp,0x10
c0018bc3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018bc7:	50                   	push   eax
c0018bc8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018bcc:	50                   	push   eax
c0018bcd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018bd1:	50                   	push   eax
c0018bd2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018bd6:	50                   	push   eax
c0018bd7:	6a 01                	push   0x1
c0018bd9:	e8 30 ff ff ff       	call   c0018b0e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018bde:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018be2:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018be6:	0f 95 c0             	setne  al
c0018be9:	83 c4 24             	add    esp,0x24
c0018bec:	c3                   	ret    
c0018bed:	90                   	nop

c0018bee <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018bee:	83 ec 10             	sub    esp,0x10
c0018bf1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018bf5:	50                   	push   eax
c0018bf6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018bfa:	50                   	push   eax
c0018bfb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018bff:	50                   	push   eax
c0018c00:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c04:	50                   	push   eax
c0018c05:	6a 07                	push   0x7
c0018c07:	e8 02 ff ff ff       	call   c0018b0e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018c0c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018c10:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018c14:	0f 95 c0             	setne  al
c0018c17:	83 c4 24             	add    esp,0x24
c0018c1a:	c3                   	ret    
c0018c1b:	90                   	nop

c0018c1c <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018c1c:	83 ec 10             	sub    esp,0x10
c0018c1f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c23:	50                   	push   eax
c0018c24:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c28:	50                   	push   eax
c0018c29:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c2d:	50                   	push   eax
c0018c2e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c32:	50                   	push   eax
c0018c33:	6a 07                	push   0x7
c0018c35:	e8 d4 fe ff ff       	call   c0018b0e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018c3a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018c3e:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018c42:	0f 95 c0             	setne  al
c0018c45:	83 c4 24             	add    esp,0x24
c0018c48:	c3                   	ret    
c0018c49:	90                   	nop

c0018c4a <CPU::CPU()>:
c0018c4a:	83 ec 0c             	sub    esp,0xc
c0018c4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c51:	83 ec 08             	sub    esp,0x8
c0018c54:	68 42 b7 02 c0       	push   0xc002b742
c0018c59:	50                   	push   eax
c0018c5a:	e8 4f b7 ff ff       	call   c00143ae <Device::Device(char const*)>
c0018c5f:	83 c4 10             	add    esp,0x10
c0018c62:	ba 1c b8 02 c0       	mov    edx,0xc002b81c
c0018c67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c6b:	89 10                	mov    DWORD PTR [eax],edx
c0018c6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c71:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018c7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c7f:	05 78 01 00 00       	add    eax,0x178
c0018c84:	83 ec 0c             	sub    esp,0xc
c0018c87:	50                   	push   eax
c0018c88:	e8 cb 63 ff ff       	call   c000f058 <GDT::GDT()>
c0018c8d:	83 c4 10             	add    esp,0x10
c0018c90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c94:	05 7c 09 00 00       	add    eax,0x97c
c0018c99:	83 ec 0c             	sub    esp,0xc
c0018c9c:	50                   	push   eax
c0018c9d:	e8 18 66 ff ff       	call   c000f2ba <IDT::IDT()>
c0018ca2:	83 c4 10             	add    esp,0x10
c0018ca5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ca9:	05 7c 11 00 00       	add    eax,0x117c
c0018cae:	83 ec 0c             	sub    esp,0xc
c0018cb1:	50                   	push   eax
c0018cb2:	e8 b5 87 ff ff       	call   c001146c <TSS::TSS()>
c0018cb7:	83 c4 10             	add    esp,0x10
c0018cba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018cbe:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018cc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018cc9:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018cd3:	90                   	nop
c0018cd4:	83 c4 0c             	add    esp,0xc
c0018cd7:	c3                   	ret    

c0018cd8 <CPU::displayFeatures()>:
c0018cd8:	53                   	push   ebx
c0018cd9:	83 ec 10             	sub    esp,0x10
c0018cdc:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018ce0:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0018ce6:	68 50 b4 02 c0       	push   0xc002b450
c0018ceb:	e8 a8 a0 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0018cf0:	59                   	pop    ecx
c0018cf1:	58                   	pop    eax
c0018cf2:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0018cf8:	50                   	push   eax
c0018cf9:	68 61 b4 02 c0       	push   0xc002b461
c0018cfe:	e8 95 a0 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0018d03:	58                   	pop    eax
c0018d04:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018d0a:	5a                   	pop    edx
c0018d0b:	c1 e8 0e             	shr    eax,0xe
c0018d0e:	0f b6 c0             	movzx  eax,al
c0018d11:	50                   	push   eax
c0018d12:	68 72 b4 02 c0       	push   0xc002b472
c0018d17:	e8 7c a0 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0018d1c:	59                   	pop    ecx
c0018d1d:	58                   	pop    eax
c0018d1e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018d24:	66 c1 e8 06          	shr    ax,0x6
c0018d28:	0f b6 c0             	movzx  eax,al
c0018d2b:	50                   	push   eax
c0018d2c:	68 83 b4 02 c0       	push   0xc002b483
c0018d31:	e8 62 a0 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0018d36:	c7 04 24 30 b9 02 c0 	mov    DWORD PTR [esp],0xc002b930
c0018d3d:	e8 56 a0 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0018d42:	83 c4 10             	add    esp,0x10
c0018d45:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c0018d4a:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0018d51:	74 05                	je     c0018d58 <CPU::displayFeatures()+0x80>
c0018d53:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c0018d58:	52                   	push   edx
c0018d59:	52                   	push   edx
c0018d5a:	50                   	push   eax
c0018d5b:	68 94 b4 02 c0       	push   0xc002b494
c0018d60:	e8 33 a0 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0018d65:	83 c4 10             	add    esp,0x10
c0018d68:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c0018d6d:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0018d74:	78 05                	js     c0018d7b <CPU::displayFeatures()+0xa3>
c0018d76:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c0018d7b:	51                   	push   ecx
c0018d7c:	51                   	push   ecx
c0018d7d:	50                   	push   eax
c0018d7e:	68 ab b4 02 c0       	push   0xc002b4ab
c0018d83:	e8 10 a0 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0018d88:	83 c4 10             	add    esp,0x10
c0018d8b:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c0018d90:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0018d97:	75 05                	jne    c0018d9e <CPU::displayFeatures()+0xc6>
c0018d99:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c0018d9e:	52                   	push   edx
c0018d9f:	52                   	push   edx
c0018da0:	50                   	push   eax
c0018da1:	68 c2 b4 02 c0       	push   0xc002b4c2
c0018da6:	e8 ed 9f ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0018dab:	83 c4 10             	add    esp,0x10
c0018dae:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c0018db3:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0018dba:	75 05                	jne    c0018dc1 <CPU::displayFeatures()+0xe9>
c0018dbc:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c0018dc1:	51                   	push   ecx
c0018dc2:	51                   	push   ecx
c0018dc3:	50                   	push   eax
c0018dc4:	68 d9 b4 02 c0       	push   0xc002b4d9
c0018dc9:	e8 ca 9f ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0018dce:	83 c4 10             	add    esp,0x10
c0018dd1:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c0018dd6:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0018ddd:	75 05                	jne    c0018de4 <CPU::displayFeatures()+0x10c>
c0018ddf:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c0018de4:	52                   	push   edx
c0018de5:	52                   	push   edx
c0018de6:	50                   	push   eax
c0018de7:	68 f0 b4 02 c0       	push   0xc002b4f0
c0018dec:	e8 a7 9f ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0018df1:	83 c4 10             	add    esp,0x10
c0018df4:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c0018df9:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0018e00:	75 05                	jne    c0018e07 <CPU::displayFeatures()+0x12f>
c0018e02:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c0018e07:	51                   	push   ecx
c0018e08:	51                   	push   ecx
c0018e09:	50                   	push   eax
c0018e0a:	68 07 b5 02 c0       	push   0xc002b507
c0018e0f:	e8 84 9f ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0018e14:	83 c4 10             	add    esp,0x10
c0018e17:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c0018e1c:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0018e23:	75 05                	jne    c0018e2a <CPU::displayFeatures()+0x152>
c0018e25:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c0018e2a:	52                   	push   edx
c0018e2b:	52                   	push   edx
c0018e2c:	50                   	push   eax
c0018e2d:	68 1e b5 02 c0       	push   0xc002b51e
c0018e32:	e8 61 9f ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0018e37:	83 c4 10             	add    esp,0x10
c0018e3a:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c0018e3f:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0018e46:	75 05                	jne    c0018e4d <CPU::displayFeatures()+0x175>
c0018e48:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c0018e4d:	51                   	push   ecx
c0018e4e:	51                   	push   ecx
c0018e4f:	50                   	push   eax
c0018e50:	68 35 b5 02 c0       	push   0xc002b535
c0018e55:	e8 3e 9f ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0018e5a:	83 c4 10             	add    esp,0x10
c0018e5d:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c0018e62:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0018e69:	75 05                	jne    c0018e70 <CPU::displayFeatures()+0x198>
c0018e6b:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c0018e70:	52                   	push   edx
c0018e71:	52                   	push   edx
c0018e72:	50                   	push   eax
c0018e73:	68 4c b5 02 c0       	push   0xc002b54c
c0018e78:	e8 1b 9f ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0018e7d:	83 c4 10             	add    esp,0x10
c0018e80:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c0018e85:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0018e8c:	75 05                	jne    c0018e93 <CPU::displayFeatures()+0x1bb>
c0018e8e:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c0018e93:	51                   	push   ecx
c0018e94:	51                   	push   ecx
c0018e95:	50                   	push   eax
c0018e96:	68 63 b5 02 c0       	push   0xc002b563
c0018e9b:	e8 f8 9e ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0018ea0:	83 c4 10             	add    esp,0x10
c0018ea3:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c0018ea8:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0018eaf:	75 05                	jne    c0018eb6 <CPU::displayFeatures()+0x1de>
c0018eb1:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c0018eb6:	52                   	push   edx
c0018eb7:	52                   	push   edx
c0018eb8:	50                   	push   eax
c0018eb9:	68 7a b5 02 c0       	push   0xc002b57a
c0018ebe:	e8 d5 9e ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0018ec3:	83 c4 10             	add    esp,0x10
c0018ec6:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c0018ecb:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0018ed2:	75 05                	jne    c0018ed9 <CPU::displayFeatures()+0x201>
c0018ed4:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c0018ed9:	51                   	push   ecx
c0018eda:	51                   	push   ecx
c0018edb:	50                   	push   eax
c0018edc:	68 91 b5 02 c0       	push   0xc002b591
c0018ee1:	e8 b2 9e ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0018ee6:	83 c4 10             	add    esp,0x10
c0018ee9:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c0018eee:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0018ef5:	75 05                	jne    c0018efc <CPU::displayFeatures()+0x224>
c0018ef7:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c0018efc:	52                   	push   edx
c0018efd:	52                   	push   edx
c0018efe:	50                   	push   eax
c0018eff:	68 a8 b5 02 c0       	push   0xc002b5a8
c0018f04:	e8 8f 9e ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0018f09:	83 c4 10             	add    esp,0x10
c0018f0c:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c0018f11:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0018f18:	78 05                	js     c0018f1f <CPU::displayFeatures()+0x247>
c0018f1a:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c0018f1f:	51                   	push   ecx
c0018f20:	51                   	push   ecx
c0018f21:	50                   	push   eax
c0018f22:	68 bf b5 02 c0       	push   0xc002b5bf
c0018f27:	e8 6c 9e ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0018f2c:	83 c4 10             	add    esp,0x10
c0018f2f:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c0018f34:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0018f3b:	75 05                	jne    c0018f42 <CPU::displayFeatures()+0x26a>
c0018f3d:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c0018f42:	52                   	push   edx
c0018f43:	52                   	push   edx
c0018f44:	50                   	push   eax
c0018f45:	68 d6 b5 02 c0       	push   0xc002b5d6
c0018f4a:	e8 49 9e ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0018f4f:	83 c4 18             	add    esp,0x18
c0018f52:	5b                   	pop    ebx
c0018f53:	c3                   	ret    

c0018f54 <CPU::detectFeatures()>:
c0018f54:	55                   	push   ebp
c0018f55:	57                   	push   edi
c0018f56:	56                   	push   esi
c0018f57:	53                   	push   ebx
c0018f58:	83 ec 50             	sub    esp,0x50
c0018f5b:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0018f5f:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0018f69:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0018f70:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0018f76:	6a 0d                	push   0xd
c0018f78:	6a 00                	push   0x0
c0018f7a:	57                   	push   edi
c0018f7b:	e8 f8 77 fe ff       	call   c0000778 <memset>
c0018f80:	83 c4 10             	add    esp,0x10
c0018f83:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c0018f88:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0018f8f:	0f 84 20 09 00 00    	je     c00198b5 <CPU::detectFeatures()+0x961>
c0018f95:	83 ec 0c             	sub    esp,0xc
c0018f98:	6a 10                	push   0x10
c0018f9a:	e8 f3 fb ff ff       	call   c0018b92 <CPU::cpuidCheckEDX(unsigned int)>
c0018f9f:	83 e0 01             	and    eax,0x1
c0018fa2:	8d 14 00             	lea    edx,[eax+eax*1]
c0018fa5:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018fab:	83 e0 fd             	and    eax,0xfffffffd
c0018fae:	09 d0                	or     eax,edx
c0018fb0:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018fb6:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0018fbd:	e8 d0 fb ff ff       	call   c0018b92 <CPU::cpuidCheckEDX(unsigned int)>
c0018fc2:	83 e0 01             	and    eax,0x1
c0018fc5:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018fcc:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018fd2:	83 e0 fb             	and    eax,0xfffffffb
c0018fd5:	09 d0                	or     eax,edx
c0018fd7:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018fdd:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0018fe4:	e8 a9 fb ff ff       	call   c0018b92 <CPU::cpuidCheckEDX(unsigned int)>
c0018fe9:	83 e0 01             	and    eax,0x1
c0018fec:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018ff3:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018ff9:	83 e0 f7             	and    eax,0xfffffff7
c0018ffc:	09 d0                	or     eax,edx
c0018ffe:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019004:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c001900b:	e8 82 fb ff ff       	call   c0018b92 <CPU::cpuidCheckEDX(unsigned int)>
c0019010:	83 e0 01             	and    eax,0x1
c0019013:	c1 e0 04             	shl    eax,0x4
c0019016:	88 c2                	mov    dl,al
c0019018:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001901e:	83 e0 ef             	and    eax,0xffffffef
c0019021:	09 d0                	or     eax,edx
c0019023:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019029:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0019030:	e8 5d fb ff ff       	call   c0018b92 <CPU::cpuidCheckEDX(unsigned int)>
c0019035:	83 e0 01             	and    eax,0x1
c0019038:	c1 e0 05             	shl    eax,0x5
c001903b:	88 c2                	mov    dl,al
c001903d:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019043:	83 e0 df             	and    eax,0xffffffdf
c0019046:	09 d0                	or     eax,edx
c0019048:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001904e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0019055:	e8 38 fb ff ff       	call   c0018b92 <CPU::cpuidCheckEDX(unsigned int)>
c001905a:	83 e0 01             	and    eax,0x1
c001905d:	8d 14 00             	lea    edx,[eax+eax*1]
c0019060:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019066:	83 e0 fd             	and    eax,0xfffffffd
c0019069:	09 d0                	or     eax,edx
c001906b:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019071:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0019078:	e8 15 fb ff ff       	call   c0018b92 <CPU::cpuidCheckEDX(unsigned int)>
c001907d:	83 e0 01             	and    eax,0x1
c0019080:	c1 e0 06             	shl    eax,0x6
c0019083:	88 c2                	mov    dl,al
c0019085:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001908b:	83 e0 bf             	and    eax,0xffffffbf
c001908e:	09 d0                	or     eax,edx
c0019090:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019096:	58                   	pop    eax
c0019097:	8d 74 24 28          	lea    esi,[esp+0x28]
c001909b:	56                   	push   esi
c001909c:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00190a0:	55                   	push   ebp
c00190a1:	8d 44 24 28          	lea    eax,[esp+0x28]
c00190a5:	50                   	push   eax
c00190a6:	8d 54 24 28          	lea    edx,[esp+0x28]
c00190aa:	52                   	push   edx
c00190ab:	6a 00                	push   0x0
c00190ad:	e8 5c fa ff ff       	call   c0018b0e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00190b2:	83 c4 1c             	add    esp,0x1c
c00190b5:	6a 04                	push   0x4
c00190b7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00190bb:	50                   	push   eax
c00190bc:	57                   	push   edi
c00190bd:	e8 82 76 fe ff       	call   c0000744 <memcpy>
c00190c2:	83 c4 0c             	add    esp,0xc
c00190c5:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c00190cb:	6a 04                	push   0x4
c00190cd:	56                   	push   esi
c00190ce:	50                   	push   eax
c00190cf:	e8 70 76 fe ff       	call   c0000744 <memcpy>
c00190d4:	83 c4 0c             	add    esp,0xc
c00190d7:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c00190dd:	6a 04                	push   0x4
c00190df:	55                   	push   ebp
c00190e0:	50                   	push   eax
c00190e1:	e8 5e 76 fe ff       	call   c0000744 <memcpy>
c00190e6:	58                   	pop    eax
c00190e7:	5a                   	pop    edx
c00190e8:	68 ed b5 02 c0       	push   0xc002b5ed
c00190ed:	57                   	push   edi
c00190ee:	e8 cd 77 fe ff       	call   c00008c0 <strcmp>
c00190f3:	83 c4 10             	add    esp,0x10
c00190f6:	85 c0                	test   eax,eax
c00190f8:	75 0f                	jne    c0019109 <CPU::detectFeatures()+0x1b5>
c00190fa:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0019104:	e9 22 02 00 00       	jmp    c001932b <CPU::detectFeatures()+0x3d7>
c0019109:	50                   	push   eax
c001910a:	50                   	push   eax
c001910b:	68 fa b5 02 c0       	push   0xc002b5fa
c0019110:	57                   	push   edi
c0019111:	e8 aa 77 fe ff       	call   c00008c0 <strcmp>
c0019116:	83 c4 10             	add    esp,0x10
c0019119:	85 c0                	test   eax,eax
c001911b:	74 dd                	je     c00190fa <CPU::detectFeatures()+0x1a6>
c001911d:	51                   	push   ecx
c001911e:	51                   	push   ecx
c001911f:	68 07 b6 02 c0       	push   0xc002b607
c0019124:	57                   	push   edi
c0019125:	e8 96 77 fe ff       	call   c00008c0 <strcmp>
c001912a:	83 c4 10             	add    esp,0x10
c001912d:	85 c0                	test   eax,eax
c001912f:	74 2a                	je     c001915b <CPU::detectFeatures()+0x207>
c0019131:	52                   	push   edx
c0019132:	52                   	push   edx
c0019133:	68 14 b6 02 c0       	push   0xc002b614
c0019138:	57                   	push   edi
c0019139:	e8 82 77 fe ff       	call   c00008c0 <strcmp>
c001913e:	83 c4 10             	add    esp,0x10
c0019141:	85 c0                	test   eax,eax
c0019143:	74 16                	je     c001915b <CPU::detectFeatures()+0x207>
c0019145:	50                   	push   eax
c0019146:	50                   	push   eax
c0019147:	68 21 b6 02 c0       	push   0xc002b621
c001914c:	57                   	push   edi
c001914d:	e8 6e 77 fe ff       	call   c00008c0 <strcmp>
c0019152:	83 c4 10             	add    esp,0x10
c0019155:	85 c0                	test   eax,eax
c0019157:	74 48                	je     c00191a1 <CPU::detectFeatures()+0x24d>
c0019159:	eb 0f                	jmp    c001916a <CPU::detectFeatures()+0x216>
c001915b:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0019165:	e9 c1 01 00 00       	jmp    c001932b <CPU::detectFeatures()+0x3d7>
c001916a:	50                   	push   eax
c001916b:	50                   	push   eax
c001916c:	68 2e b6 02 c0       	push   0xc002b62e
c0019171:	57                   	push   edi
c0019172:	e8 49 77 fe ff       	call   c00008c0 <strcmp>
c0019177:	83 c4 10             	add    esp,0x10
c001917a:	85 c0                	test   eax,eax
c001917c:	74 23                	je     c00191a1 <CPU::detectFeatures()+0x24d>
c001917e:	50                   	push   eax
c001917f:	50                   	push   eax
c0019180:	68 3b b6 02 c0       	push   0xc002b63b
c0019185:	57                   	push   edi
c0019186:	e8 35 77 fe ff       	call   c00008c0 <strcmp>
c001918b:	83 c4 10             	add    esp,0x10
c001918e:	85 c0                	test   eax,eax
c0019190:	75 1e                	jne    c00191b0 <CPU::detectFeatures()+0x25c>
c0019192:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001919c:	e9 8a 01 00 00       	jmp    c001932b <CPU::detectFeatures()+0x3d7>
c00191a1:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c00191ab:	e9 7b 01 00 00       	jmp    c001932b <CPU::detectFeatures()+0x3d7>
c00191b0:	50                   	push   eax
c00191b1:	50                   	push   eax
c00191b2:	68 48 b6 02 c0       	push   0xc002b648
c00191b7:	57                   	push   edi
c00191b8:	e8 03 77 fe ff       	call   c00008c0 <strcmp>
c00191bd:	83 c4 10             	add    esp,0x10
c00191c0:	85 c0                	test   eax,eax
c00191c2:	75 0f                	jne    c00191d3 <CPU::detectFeatures()+0x27f>
c00191c4:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00191ce:	e9 58 01 00 00       	jmp    c001932b <CPU::detectFeatures()+0x3d7>
c00191d3:	50                   	push   eax
c00191d4:	50                   	push   eax
c00191d5:	68 07 b6 02 c0       	push   0xc002b607
c00191da:	57                   	push   edi
c00191db:	e8 e0 76 fe ff       	call   c00008c0 <strcmp>
c00191e0:	83 c4 10             	add    esp,0x10
c00191e3:	85 c0                	test   eax,eax
c00191e5:	75 0f                	jne    c00191f6 <CPU::detectFeatures()+0x2a2>
c00191e7:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00191f1:	e9 35 01 00 00       	jmp    c001932b <CPU::detectFeatures()+0x3d7>
c00191f6:	50                   	push   eax
c00191f7:	50                   	push   eax
c00191f8:	68 55 b6 02 c0       	push   0xc002b655
c00191fd:	57                   	push   edi
c00191fe:	e8 bd 76 fe ff       	call   c00008c0 <strcmp>
c0019203:	83 c4 10             	add    esp,0x10
c0019206:	85 c0                	test   eax,eax
c0019208:	75 0f                	jne    c0019219 <CPU::detectFeatures()+0x2c5>
c001920a:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0019214:	e9 12 01 00 00       	jmp    c001932b <CPU::detectFeatures()+0x3d7>
c0019219:	51                   	push   ecx
c001921a:	51                   	push   ecx
c001921b:	68 62 b6 02 c0       	push   0xc002b662
c0019220:	57                   	push   edi
c0019221:	e8 9a 76 fe ff       	call   c00008c0 <strcmp>
c0019226:	83 c4 10             	add    esp,0x10
c0019229:	85 c0                	test   eax,eax
c001922b:	75 0f                	jne    c001923c <CPU::detectFeatures()+0x2e8>
c001922d:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0019237:	e9 ef 00 00 00       	jmp    c001932b <CPU::detectFeatures()+0x3d7>
c001923c:	52                   	push   edx
c001923d:	52                   	push   edx
c001923e:	68 6f b6 02 c0       	push   0xc002b66f
c0019243:	57                   	push   edi
c0019244:	e8 77 76 fe ff       	call   c00008c0 <strcmp>
c0019249:	83 c4 10             	add    esp,0x10
c001924c:	85 c0                	test   eax,eax
c001924e:	75 0f                	jne    c001925f <CPU::detectFeatures()+0x30b>
c0019250:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c001925a:	e9 cc 00 00 00       	jmp    c001932b <CPU::detectFeatures()+0x3d7>
c001925f:	50                   	push   eax
c0019260:	50                   	push   eax
c0019261:	68 7c b6 02 c0       	push   0xc002b67c
c0019266:	57                   	push   edi
c0019267:	e8 54 76 fe ff       	call   c00008c0 <strcmp>
c001926c:	83 c4 10             	add    esp,0x10
c001926f:	85 c0                	test   eax,eax
c0019271:	75 0f                	jne    c0019282 <CPU::detectFeatures()+0x32e>
c0019273:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c001927d:	e9 a9 00 00 00       	jmp    c001932b <CPU::detectFeatures()+0x3d7>
c0019282:	50                   	push   eax
c0019283:	50                   	push   eax
c0019284:	68 89 b6 02 c0       	push   0xc002b689
c0019289:	57                   	push   edi
c001928a:	e8 31 76 fe ff       	call   c00008c0 <strcmp>
c001928f:	83 c4 10             	add    esp,0x10
c0019292:	85 c0                	test   eax,eax
c0019294:	75 0f                	jne    c00192a5 <CPU::detectFeatures()+0x351>
c0019296:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c00192a0:	e9 86 00 00 00       	jmp    c001932b <CPU::detectFeatures()+0x3d7>
c00192a5:	50                   	push   eax
c00192a6:	50                   	push   eax
c00192a7:	68 96 b6 02 c0       	push   0xc002b696
c00192ac:	57                   	push   edi
c00192ad:	e8 0e 76 fe ff       	call   c00008c0 <strcmp>
c00192b2:	83 c4 10             	add    esp,0x10
c00192b5:	85 c0                	test   eax,eax
c00192b7:	75 0c                	jne    c00192c5 <CPU::detectFeatures()+0x371>
c00192b9:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00192c3:	eb 66                	jmp    c001932b <CPU::detectFeatures()+0x3d7>
c00192c5:	50                   	push   eax
c00192c6:	50                   	push   eax
c00192c7:	68 a3 b6 02 c0       	push   0xc002b6a3
c00192cc:	57                   	push   edi
c00192cd:	e8 ee 75 fe ff       	call   c00008c0 <strcmp>
c00192d2:	83 c4 10             	add    esp,0x10
c00192d5:	85 c0                	test   eax,eax
c00192d7:	75 0c                	jne    c00192e5 <CPU::detectFeatures()+0x391>
c00192d9:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00192e3:	eb 46                	jmp    c001932b <CPU::detectFeatures()+0x3d7>
c00192e5:	50                   	push   eax
c00192e6:	50                   	push   eax
c00192e7:	68 b0 b6 02 c0       	push   0xc002b6b0
c00192ec:	57                   	push   edi
c00192ed:	e8 ce 75 fe ff       	call   c00008c0 <strcmp>
c00192f2:	83 c4 10             	add    esp,0x10
c00192f5:	85 c0                	test   eax,eax
c00192f7:	74 e0                	je     c00192d9 <CPU::detectFeatures()+0x385>
c00192f9:	50                   	push   eax
c00192fa:	50                   	push   eax
c00192fb:	68 bd b6 02 c0       	push   0xc002b6bd
c0019300:	57                   	push   edi
c0019301:	e8 ba 75 fe ff       	call   c00008c0 <strcmp>
c0019306:	83 c4 10             	add    esp,0x10
c0019309:	85 c0                	test   eax,eax
c001930b:	74 cc                	je     c00192d9 <CPU::detectFeatures()+0x385>
c001930d:	51                   	push   ecx
c001930e:	51                   	push   ecx
c001930f:	68 ca b6 02 c0       	push   0xc002b6ca
c0019314:	57                   	push   edi
c0019315:	e8 a6 75 fe ff       	call   c00008c0 <strcmp>
c001931a:	83 c4 10             	add    esp,0x10
c001931d:	85 c0                	test   eax,eax
c001931f:	74 b8                	je     c00192d9 <CPU::detectFeatures()+0x385>
c0019321:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c001932b:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0019330:	0f 86 be 00 00 00    	jbe    c00193f4 <CPU::detectFeatures()+0x4a0>
c0019336:	83 ec 0c             	sub    esp,0xc
c0019339:	68 80 00 00 00       	push   0x80
c001933e:	e8 ab f8 ff ff       	call   c0018bee <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019343:	83 e0 01             	and    eax,0x1
c0019346:	c1 e0 06             	shl    eax,0x6
c0019349:	88 c2                	mov    dl,al
c001934b:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019351:	83 e0 bf             	and    eax,0xffffffbf
c0019354:	09 d0                	or     eax,edx
c0019356:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001935c:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0019363:	e8 86 f8 ff ff       	call   c0018bee <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019368:	83 e0 01             	and    eax,0x1
c001936b:	c1 e0 04             	shl    eax,0x4
c001936e:	88 c2                	mov    dl,al
c0019370:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019376:	83 e0 ef             	and    eax,0xffffffef
c0019379:	09 d0                	or     eax,edx
c001937b:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019381:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0019388:	e8 61 f8 ff ff       	call   c0018bee <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001938d:	c1 e0 07             	shl    eax,0x7
c0019390:	88 c2                	mov    dl,al
c0019392:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019398:	83 e0 7f             	and    eax,0x7f
c001939b:	09 d0                	or     eax,edx
c001939d:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00193a3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00193aa:	e8 6d f8 ff ff       	call   c0018c1c <CPU::cpuidCheckExtendedECX(unsigned int)>
c00193af:	83 e0 01             	and    eax,0x1
c00193b2:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00193b9:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00193bf:	83 e0 f7             	and    eax,0xfffffff7
c00193c2:	09 d0                	or     eax,edx
c00193c4:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00193ca:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00193d1:	e8 46 f8 ff ff       	call   c0018c1c <CPU::cpuidCheckExtendedECX(unsigned int)>
c00193d6:	83 c4 10             	add    esp,0x10
c00193d9:	83 e0 01             	and    eax,0x1
c00193dc:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00193e3:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00193e9:	83 e0 fb             	and    eax,0xfffffffb
c00193ec:	09 d0                	or     eax,edx
c00193ee:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00193f4:	83 ec 0c             	sub    esp,0xc
c00193f7:	56                   	push   esi
c00193f8:	55                   	push   ebp
c00193f9:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00193fd:	57                   	push   edi
c00193fe:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019402:	50                   	push   eax
c0019403:	6a 01                	push   0x1
c0019405:	e8 04 f7 ff ff       	call   c0018b0e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001940a:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001940e:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019414:	88 ca                	mov    dl,cl
c0019416:	83 e0 f0             	and    eax,0xfffffff0
c0019419:	83 e2 0f             	and    edx,0xf
c001941c:	09 d0                	or     eax,edx
c001941e:	88 ca                	mov    dl,cl
c0019420:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0019426:	c0 ea 04             	shr    dl,0x4
c0019429:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c001942d:	0f b6 c2             	movzx  eax,dl
c0019430:	83 c4 20             	add    esp,0x20
c0019433:	c1 e0 06             	shl    eax,0x6
c0019436:	89 c5                	mov    ebp,eax
c0019438:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001943e:	66 25 3f c0          	and    ax,0xc03f
c0019442:	09 e8                	or     eax,ebp
c0019444:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001944b:	89 c8                	mov    eax,ecx
c001944d:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0019453:	c1 e8 08             	shr    eax,0x8
c0019456:	83 e2 3f             	and    edx,0x3f
c0019459:	83 e0 0f             	and    eax,0xf
c001945c:	89 c5                	mov    ebp,eax
c001945e:	c1 e5 06             	shl    ebp,0x6
c0019461:	09 d5                	or     ebp,edx
c0019463:	89 ea                	mov    edx,ebp
c0019465:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c001946b:	88 c2                	mov    dl,al
c001946d:	c0 ea 02             	shr    dl,0x2
c0019470:	89 d5                	mov    ebp,edx
c0019472:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0019478:	83 e2 c0             	and    edx,0xffffffc0
c001947b:	09 d5                	or     ebp,edx
c001947d:	89 ea                	mov    edx,ebp
c001947f:	89 cd                	mov    ebp,ecx
c0019481:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0019487:	c1 ed 0c             	shr    ebp,0xc
c001948a:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0019490:	83 e5 03             	and    ebp,0x3
c0019493:	83 e2 cf             	and    edx,0xffffffcf
c0019496:	c1 e5 04             	shl    ebp,0x4
c0019499:	09 d5                	or     ebp,edx
c001949b:	3c 06                	cmp    al,0x6
c001949d:	89 ea                	mov    edx,ebp
c001949f:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00194a5:	74 04                	je     c00194ab <CPU::detectFeatures()+0x557>
c00194a7:	3c 0f                	cmp    al,0xf
c00194a9:	75 5c                	jne    c0019507 <CPU::detectFeatures()+0x5b3>
c00194ab:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00194af:	89 cd                	mov    ebp,ecx
c00194b1:	c1 ed 10             	shr    ebp,0x10
c00194b4:	c1 e5 04             	shl    ebp,0x4
c00194b7:	09 ea                	or     edx,ebp
c00194b9:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00194bf:	0f b6 d2             	movzx  edx,dl
c00194c2:	66 81 e5 3f c0       	and    bp,0xc03f
c00194c7:	c1 e2 06             	shl    edx,0x6
c00194ca:	09 ea                	or     edx,ebp
c00194cc:	3c 0f                	cmp    al,0xf
c00194ce:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00194d5:	75 30                	jne    c0019507 <CPU::detectFeatures()+0x5b3>
c00194d7:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c00194dd:	c1 e9 14             	shr    ecx,0x14
c00194e0:	83 e0 3f             	and    eax,0x3f
c00194e3:	83 c1 0f             	add    ecx,0xf
c00194e6:	88 ca                	mov    dl,cl
c00194e8:	c0 e9 02             	shr    cl,0x2
c00194eb:	c1 e2 06             	shl    edx,0x6
c00194ee:	09 d0                	or     eax,edx
c00194f0:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c00194f6:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c00194fc:	83 e0 c0             	and    eax,0xffffffc0
c00194ff:	09 c1                	or     ecx,eax
c0019501:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0019507:	83 ec 0c             	sub    esp,0xc
c001950a:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019511:	56                   	push   esi
c0019512:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019516:	50                   	push   eax
c0019517:	57                   	push   edi
c0019518:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001951c:	55                   	push   ebp
c001951d:	68 00 00 00 80       	push   0x80000000
c0019522:	e8 e7 f5 ff ff       	call   c0018b0e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019527:	83 c4 20             	add    esp,0x20
c001952a:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0019532:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019536:	76 1e                	jbe    c0019556 <CPU::detectFeatures()+0x602>
c0019538:	83 ec 0c             	sub    esp,0xc
c001953b:	56                   	push   esi
c001953c:	50                   	push   eax
c001953d:	57                   	push   edi
c001953e:	55                   	push   ebp
c001953f:	68 01 00 00 80       	push   0x80000001
c0019544:	e8 c5 f5 ff ff       	call   c0018b0e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019549:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0019553:	83 c4 20             	add    esp,0x20
c0019556:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001955c:	83 f8 01             	cmp    eax,0x1
c001955f:	75 6f                	jne    c00195d0 <CPU::detectFeatures()+0x67c>
c0019561:	51                   	push   ecx
c0019562:	51                   	push   ecx
c0019563:	68 d6 b6 02 c0       	push   0xc002b6d6
c0019568:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001956c:	56                   	push   esi
c001956d:	e8 c2 72 fe ff       	call   c0000834 <strcpy>
c0019572:	5f                   	pop    edi
c0019573:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019579:	5d                   	pop    ebp
c001957a:	66 c1 e8 06          	shr    ax,0x6
c001957e:	0f b6 c0             	movzx  eax,al
c0019581:	50                   	push   eax
c0019582:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019588:	c1 e8 0e             	shr    eax,0xe
c001958b:	0f b6 c0             	movzx  eax,al
c001958e:	50                   	push   eax
c001958f:	e8 24 f2 ff ff       	call   c00187b8 <CPU::lookupIntelName(unsigned char, unsigned char)>
c0019594:	5a                   	pop    edx
c0019595:	59                   	pop    ecx
c0019596:	50                   	push   eax
c0019597:	56                   	push   esi
c0019598:	e8 d7 73 fe ff       	call   c0000974 <strcat>
c001959d:	5f                   	pop    edi
c001959e:	5d                   	pop    ebp
c001959f:	56                   	push   esi
c00195a0:	53                   	push   ebx
c00195a1:	e8 fa ad ff ff       	call   c00143a0 <Device::setName(char const*)>
c00195a6:	58                   	pop    eax
c00195a7:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00195ad:	5a                   	pop    edx
c00195ae:	68 dd b6 02 c0       	push   0xc002b6dd
c00195b3:	50                   	push   eax
c00195b4:	e8 07 73 fe ff       	call   c00008c0 <strcmp>
c00195b9:	83 c4 10             	add    esp,0x10
c00195bc:	85 c0                	test   eax,eax
c00195be:	0f 85 71 03 00 00    	jne    c0019935 <CPU::detectFeatures()+0x9e1>
c00195c4:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c00195cb:	e9 65 03 00 00       	jmp    c0019935 <CPU::detectFeatures()+0x9e1>
c00195d0:	83 f8 02             	cmp    eax,0x2
c00195d3:	0f 85 b5 00 00 00    	jne    c001968e <CPU::detectFeatures()+0x73a>
c00195d9:	57                   	push   edi
c00195da:	57                   	push   edi
c00195db:	68 ef b6 02 c0       	push   0xc002b6ef
c00195e0:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00195e4:	56                   	push   esi
c00195e5:	e8 4a 72 fe ff       	call   c0000834 <strcpy>
c00195ea:	5d                   	pop    ebp
c00195eb:	58                   	pop    eax
c00195ec:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00195f2:	66 c1 e8 06          	shr    ax,0x6
c00195f6:	0f b6 c0             	movzx  eax,al
c00195f9:	50                   	push   eax
c00195fa:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019600:	c1 e8 0e             	shr    eax,0xe
c0019603:	0f b6 c0             	movzx  eax,al
c0019606:	50                   	push   eax
c0019607:	e8 18 f0 ff ff       	call   c0018624 <CPU::lookupAMDName(unsigned char, unsigned char)>
c001960c:	5a                   	pop    edx
c001960d:	59                   	pop    ecx
c001960e:	50                   	push   eax
c001960f:	56                   	push   esi
c0019610:	e8 5f 73 fe ff       	call   c0000974 <strcat>
c0019615:	5f                   	pop    edi
c0019616:	5d                   	pop    ebp
c0019617:	56                   	push   esi
c0019618:	53                   	push   ebx
c0019619:	e8 82 ad ff ff       	call   c00143a0 <Device::setName(char const*)>
c001961e:	58                   	pop    eax
c001961f:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019625:	5a                   	pop    edx
c0019626:	68 f4 b6 02 c0       	push   0xc002b6f4
c001962b:	50                   	push   eax
c001962c:	e8 8f 72 fe ff       	call   c00008c0 <strcmp>
c0019631:	83 c4 10             	add    esp,0x10
c0019634:	85 c0                	test   eax,eax
c0019636:	75 20                	jne    c0019658 <CPU::detectFeatures()+0x704>
c0019638:	8b 15 48 e2 02 c0    	mov    edx,DWORD PTR ds:0xc002e248
c001963e:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0019644:	a8 01                	test   al,0x1
c0019646:	74 10                	je     c0019658 <CPU::detectFeatures()+0x704>
c0019648:	83 e0 fe             	and    eax,0xfffffffe
c001964b:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0019651:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0019658:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001965e:	c1 e8 0e             	shr    eax,0xe
c0019661:	3c 05                	cmp    al,0x5
c0019663:	0f 85 cc 02 00 00    	jne    c0019935 <CPU::detectFeatures()+0x9e1>
c0019669:	56                   	push   esi
c001966a:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019670:	83 e0 0f             	and    eax,0xf
c0019673:	50                   	push   eax
c0019674:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001967a:	66 c1 e8 06          	shr    ax,0x6
c001967e:	0f b6 c0             	movzx  eax,al
c0019681:	50                   	push   eax
c0019682:	6a 05                	push   0x5
c0019684:	e8 11 f4 ff ff       	call   c0018a9a <CPU::AMD_K6_writeback(int, int, int)>
c0019689:	e9 1f 02 00 00       	jmp    c00198ad <CPU::detectFeatures()+0x959>
c001968e:	8d 50 fd             	lea    edx,[eax-0x3]
c0019691:	83 fa 01             	cmp    edx,0x1
c0019694:	76 09                	jbe    c001969f <CPU::detectFeatures()+0x74b>
c0019696:	83 f8 06             	cmp    eax,0x6
c0019699:	0f 85 91 01 00 00    	jne    c0019830 <CPU::detectFeatures()+0x8dc>
c001969f:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00196a5:	c1 ea 0e             	shr    edx,0xe
c00196a8:	80 fa 05             	cmp    dl,0x5
c00196ab:	75 7b                	jne    c0019728 <CPU::detectFeatures()+0x7d4>
c00196ad:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00196b3:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00196b8:	66 81 fa 00 01       	cmp    dx,0x100
c00196bd:	75 0c                	jne    c00196cb <CPU::detectFeatures()+0x777>
c00196bf:	51                   	push   ecx
c00196c0:	51                   	push   ecx
c00196c1:	68 fb b6 02 c0       	push   0xc002b6fb
c00196c6:	e9 dc 01 00 00       	jmp    c00198a7 <CPU::detectFeatures()+0x953>
c00196cb:	66 81 fa 00 02       	cmp    dx,0x200
c00196d0:	75 0c                	jne    c00196de <CPU::detectFeatures()+0x78a>
c00196d2:	52                   	push   edx
c00196d3:	52                   	push   edx
c00196d4:	68 0e b7 02 c0       	push   0xc002b70e
c00196d9:	e9 c9 01 00 00       	jmp    c00198a7 <CPU::detectFeatures()+0x953>
c00196de:	66 81 fa 40 02       	cmp    dx,0x240
c00196e3:	75 0c                	jne    c00196f1 <CPU::detectFeatures()+0x79d>
c00196e5:	50                   	push   eax
c00196e6:	50                   	push   eax
c00196e7:	68 20 b7 02 c0       	push   0xc002b720
c00196ec:	e9 b6 01 00 00       	jmp    c00198a7 <CPU::detectFeatures()+0x953>
c00196f1:	83 f8 06             	cmp    eax,0x6
c00196f4:	75 0c                	jne    c0019702 <CPU::detectFeatures()+0x7ae>
c00196f6:	50                   	push   eax
c00196f7:	50                   	push   eax
c00196f8:	68 32 b7 02 c0       	push   0xc002b732
c00196fd:	e9 a5 01 00 00       	jmp    c00198a7 <CPU::detectFeatures()+0x953>
c0019702:	83 f8 04             	cmp    eax,0x4
c0019705:	75 0c                	jne    c0019713 <CPU::detectFeatures()+0x7bf>
c0019707:	50                   	push   eax
c0019708:	50                   	push   eax
c0019709:	68 3e b7 02 c0       	push   0xc002b73e
c001970e:	e9 94 01 00 00       	jmp    c00198a7 <CPU::detectFeatures()+0x953>
c0019713:	83 f8 03             	cmp    eax,0x3
c0019716:	0f 85 19 02 00 00    	jne    c0019935 <CPU::detectFeatures()+0x9e1>
c001971c:	50                   	push   eax
c001971d:	50                   	push   eax
c001971e:	68 46 b7 02 c0       	push   0xc002b746
c0019723:	e9 7f 01 00 00       	jmp    c00198a7 <CPU::detectFeatures()+0x953>
c0019728:	80 fa 06             	cmp    dl,0x6
c001972b:	0f 85 db 00 00 00    	jne    c001980c <CPU::detectFeatures()+0x8b8>
c0019731:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019737:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001973c:	66 81 fa 80 01       	cmp    dx,0x180
c0019741:	75 0c                	jne    c001974f <CPU::detectFeatures()+0x7fb>
c0019743:	50                   	push   eax
c0019744:	50                   	push   eax
c0019745:	68 51 b7 02 c0       	push   0xc002b751
c001974a:	e9 58 01 00 00       	jmp    c00198a7 <CPU::detectFeatures()+0x953>
c001974f:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0019755:	66 f7 c1 80 ff       	test   cx,0xff80
c001975a:	75 0c                	jne    c0019768 <CPU::detectFeatures()+0x814>
c001975c:	50                   	push   eax
c001975d:	50                   	push   eax
c001975e:	68 61 b7 02 c0       	push   0xc002b761
c0019763:	e9 3f 01 00 00       	jmp    c00198a7 <CPU::detectFeatures()+0x953>
c0019768:	66 81 fa 40 02       	cmp    dx,0x240
c001976d:	75 0c                	jne    c001977b <CPU::detectFeatures()+0x827>
c001976f:	55                   	push   ebp
c0019770:	55                   	push   ebp
c0019771:	68 68 b7 02 c0       	push   0xc002b768
c0019776:	e9 2c 01 00 00       	jmp    c00198a7 <CPU::detectFeatures()+0x953>
c001977b:	66 81 fa 80 02       	cmp    dx,0x280
c0019780:	75 0c                	jne    c001978e <CPU::detectFeatures()+0x83a>
c0019782:	57                   	push   edi
c0019783:	57                   	push   edi
c0019784:	68 71 b7 02 c0       	push   0xc002b771
c0019789:	e9 19 01 00 00       	jmp    c00198a7 <CPU::detectFeatures()+0x953>
c001978e:	66 81 fa 40 03       	cmp    dx,0x340
c0019793:	74 ed                	je     c0019782 <CPU::detectFeatures()+0x82e>
c0019795:	66 81 fa c0 03       	cmp    dx,0x3c0
c001979a:	75 0c                	jne    c00197a8 <CPU::detectFeatures()+0x854>
c001979c:	56                   	push   esi
c001979d:	56                   	push   esi
c001979e:	68 78 b7 02 c0       	push   0xc002b778
c00197a3:	e9 ff 00 00 00       	jmp    c00198a7 <CPU::detectFeatures()+0x953>
c00197a8:	83 f8 06             	cmp    eax,0x6
c00197ab:	0f 84 45 ff ff ff    	je     c00196f6 <CPU::detectFeatures()+0x7a2>
c00197b1:	83 f8 04             	cmp    eax,0x4
c00197b4:	0f 84 4d ff ff ff    	je     c0019707 <CPU::detectFeatures()+0x7b3>
c00197ba:	83 f8 03             	cmp    eax,0x3
c00197bd:	0f 85 72 01 00 00    	jne    c0019935 <CPU::detectFeatures()+0x9e1>
c00197c3:	51                   	push   ecx
c00197c4:	51                   	push   ecx
c00197c5:	68 81 b7 02 c0       	push   0xc002b781
c00197ca:	53                   	push   ebx
c00197cb:	e8 d0 ab ff ff       	call   c00143a0 <Device::setName(char const*)>
c00197d0:	b1 c1                	mov    cl,0xc1
c00197d2:	88 c8                	mov    al,cl
c00197d4:	e6 22                	out    0x22,al
c00197d6:	e4 23                	in     al,0x23
c00197d8:	88 c2                	mov    dl,al
c00197da:	88 c8                	mov    al,cl
c00197dc:	e6 22                	out    0x22,al
c00197de:	88 d0                	mov    al,dl
c00197e0:	83 c8 10             	or     eax,0x10
c00197e3:	e6 23                	out    0x23,al
c00197e5:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00197ec:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00197ef:	89 d0                	mov    eax,edx
c00197f1:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c00197f7:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c00197fb:	40                   	inc    eax
c00197fc:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019802:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019807:	e9 a1 00 00 00       	jmp    c00198ad <CPU::detectFeatures()+0x959>
c001980c:	83 f8 06             	cmp    eax,0x6
c001980f:	0f 84 e1 fe ff ff    	je     c00196f6 <CPU::detectFeatures()+0x7a2>
c0019815:	83 f8 04             	cmp    eax,0x4
c0019818:	0f 84 e9 fe ff ff    	je     c0019707 <CPU::detectFeatures()+0x7b3>
c001981e:	83 f8 03             	cmp    eax,0x3
c0019821:	0f 85 0e 01 00 00    	jne    c0019935 <CPU::detectFeatures()+0x9e1>
c0019827:	52                   	push   edx
c0019828:	52                   	push   edx
c0019829:	68 8c b7 02 c0       	push   0xc002b78c
c001982e:	eb 77                	jmp    c00198a7 <CPU::detectFeatures()+0x953>
c0019830:	83 f8 07             	cmp    eax,0x7
c0019833:	75 09                	jne    c001983e <CPU::detectFeatures()+0x8ea>
c0019835:	50                   	push   eax
c0019836:	50                   	push   eax
c0019837:	68 96 b7 02 c0       	push   0xc002b796
c001983c:	eb 69                	jmp    c00198a7 <CPU::detectFeatures()+0x953>
c001983e:	83 f8 0a             	cmp    eax,0xa
c0019841:	75 09                	jne    c001984c <CPU::detectFeatures()+0x8f8>
c0019843:	50                   	push   eax
c0019844:	50                   	push   eax
c0019845:	68 a1 b7 02 c0       	push   0xc002b7a1
c001984a:	eb 5b                	jmp    c00198a7 <CPU::detectFeatures()+0x953>
c001984c:	83 f8 0b             	cmp    eax,0xb
c001984f:	75 09                	jne    c001985a <CPU::detectFeatures()+0x906>
c0019851:	50                   	push   eax
c0019852:	50                   	push   eax
c0019853:	68 a9 b7 02 c0       	push   0xc002b7a9
c0019858:	eb 4d                	jmp    c00198a7 <CPU::detectFeatures()+0x953>
c001985a:	83 f8 08             	cmp    eax,0x8
c001985d:	75 09                	jne    c0019868 <CPU::detectFeatures()+0x914>
c001985f:	50                   	push   eax
c0019860:	50                   	push   eax
c0019861:	68 b2 b7 02 c0       	push   0xc002b7b2
c0019866:	eb 3f                	jmp    c00198a7 <CPU::detectFeatures()+0x953>
c0019868:	83 f8 09             	cmp    eax,0x9
c001986b:	75 09                	jne    c0019876 <CPU::detectFeatures()+0x922>
c001986d:	50                   	push   eax
c001986e:	50                   	push   eax
c001986f:	68 ba b7 02 c0       	push   0xc002b7ba
c0019874:	eb 31                	jmp    c00198a7 <CPU::detectFeatures()+0x953>
c0019876:	83 f8 05             	cmp    eax,0x5
c0019879:	75 09                	jne    c0019884 <CPU::detectFeatures()+0x930>
c001987b:	50                   	push   eax
c001987c:	50                   	push   eax
c001987d:	68 c2 b7 02 c0       	push   0xc002b7c2
c0019882:	eb 23                	jmp    c00198a7 <CPU::detectFeatures()+0x953>
c0019884:	83 f8 0c             	cmp    eax,0xc
c0019887:	75 09                	jne    c0019892 <CPU::detectFeatures()+0x93e>
c0019889:	55                   	push   ebp
c001988a:	55                   	push   ebp
c001988b:	68 d0 b7 02 c0       	push   0xc002b7d0
c0019890:	eb 15                	jmp    c00198a7 <CPU::detectFeatures()+0x953>
c0019892:	83 f8 0d             	cmp    eax,0xd
c0019895:	75 09                	jne    c00198a0 <CPU::detectFeatures()+0x94c>
c0019897:	57                   	push   edi
c0019898:	57                   	push   edi
c0019899:	68 db b7 02 c0       	push   0xc002b7db
c001989e:	eb 07                	jmp    c00198a7 <CPU::detectFeatures()+0x953>
c00198a0:	56                   	push   esi
c00198a1:	56                   	push   esi
c00198a2:	68 ef b7 02 c0       	push   0xc002b7ef
c00198a7:	53                   	push   ebx
c00198a8:	e8 f3 aa ff ff       	call   c00143a0 <Device::setName(char const*)>
c00198ad:	83 c4 10             	add    esp,0x10
c00198b0:	e9 80 00 00 00       	jmp    c0019935 <CPU::detectFeatures()+0x9e1>
c00198b5:	51                   	push   ecx
c00198b6:	51                   	push   ecx
c00198b7:	68 3b b6 02 c0       	push   0xc002b63b
c00198bc:	57                   	push   edi
c00198bd:	e8 72 6f fe ff       	call   c0000834 <strcpy>
c00198c2:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00198cc:	e8 dd 69 fe ff       	call   c00002ae <is486>
c00198d1:	83 c4 10             	add    esp,0x10
c00198d4:	85 c0                	test   eax,eax
c00198d6:	74 2b                	je     c0019903 <CPU::detectFeatures()+0x9af>
c00198d8:	52                   	push   edx
c00198d9:	52                   	push   edx
c00198da:	68 fb b7 02 c0       	push   0xc002b7fb
c00198df:	53                   	push   ebx
c00198e0:	e8 bb aa ff ff       	call   c00143a0 <Device::setName(char const*)>
c00198e5:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00198ec:	0f 20 c0             	mov    eax,cr0
c00198ef:	83 e0 14             	and    eax,0x14
c00198f2:	83 c4 10             	add    esp,0x10
c00198f5:	83 f8 04             	cmp    eax,0x4
c00198f8:	75 1f                	jne    c0019919 <CPU::detectFeatures()+0x9c5>
c00198fa:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019901:	eb 32                	jmp    c0019935 <CPU::detectFeatures()+0x9e1>
c0019903:	50                   	push   eax
c0019904:	50                   	push   eax
c0019905:	68 06 b8 02 c0       	push   0xc002b806
c001990a:	53                   	push   ebx
c001990b:	e8 90 aa ff ff       	call   c00143a0 <Device::setName(char const*)>
c0019910:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019917:	eb d3                	jmp    c00198ec <CPU::detectFeatures()+0x998>
c0019919:	e8 6b 69 fe ff       	call   c0000289 <hasLegacyFPU>
c001991e:	83 e0 01             	and    eax,0x1
c0019921:	8d 14 00             	lea    edx,[eax+eax*1]
c0019924:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001992a:	83 e0 fd             	and    eax,0xfffffffd
c001992d:	09 d0                	or     eax,edx
c001992f:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019935:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c001993c:	83 c4 4c             	add    esp,0x4c
c001993f:	5b                   	pop    ebx
c0019940:	5e                   	pop    esi
c0019941:	5f                   	pop    edi
c0019942:	5d                   	pop    ebp
c0019943:	c3                   	ret    

c0019944 <CPU::setupSMEP()>:
c0019944:	0f 20 e0             	mov    eax,cr4
c0019947:	0d 00 00 10 00       	or     eax,0x100000
c001994c:	0f 22 e0             	mov    cr4,eax
c001994f:	c3                   	ret    

c0019950 <CPU::setupUMIP()>:
c0019950:	0f 20 e0             	mov    eax,cr4
c0019953:	80 cc 08             	or     ah,0x8
c0019956:	0f 22 e0             	mov    cr4,eax
c0019959:	c3                   	ret    

c001995a <CPU::setupTSC()>:
c001995a:	0f 20 e0             	mov    eax,cr4
c001995d:	83 c8 04             	or     eax,0x4
c0019960:	0f 22 e0             	mov    cr4,eax
c0019963:	c3                   	ret    

c0019964 <CPU::setupLargePages()>:
c0019964:	0f 20 e0             	mov    eax,cr4
c0019967:	83 c8 10             	or     eax,0x10
c001996a:	0f 22 e0             	mov    cr4,eax
c001996d:	c3                   	ret    

c001996e <CPU::setupPAT()>:
c001996e:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c0019973:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c001997a:	74 2c                	je     c00199a8 <CPU::setupPAT()+0x3a>
c001997c:	53                   	push   ebx
c001997d:	83 ec 10             	sub    esp,0x10
c0019980:	68 77 02 00 00       	push   0x277
c0019985:	50                   	push   eax
c0019986:	e8 5d 54 ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c001998b:	83 e2 f8             	and    edx,0xfffffff8
c001998e:	83 ca 01             	or     edx,0x1
c0019991:	52                   	push   edx
c0019992:	50                   	push   eax
c0019993:	68 77 02 00 00       	push   0x277
c0019998:	ff 35 48 e2 02 c0    	push   DWORD PTR ds:0xc002e248
c001999e:	e8 71 54 ff ff       	call   c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>
c00199a3:	83 c4 28             	add    esp,0x28
c00199a6:	5b                   	pop    ebx
c00199a7:	c3                   	ret    
c00199a8:	c3                   	ret    
c00199a9:	90                   	nop

c00199aa <CPU::setupMTRR()>:
c00199aa:	c3                   	ret    
c00199ab:	90                   	nop

c00199ac <CPU::setupGlobalPages()>:
c00199ac:	0f 20 e0             	mov    eax,cr4
c00199af:	0c 80                	or     al,0x80
c00199b1:	0f 22 e0             	mov    cr4,eax
c00199b4:	c3                   	ret    
c00199b5:	90                   	nop

c00199b6 <CPU::allowUsermodeDataAccess()>:
c00199b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00199ba:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00199c1:	74 03                	je     c00199c6 <CPU::allowUsermodeDataAccess()+0x10>
c00199c3:	0f 01 cb             	stac   
c00199c6:	c3                   	ret    
c00199c7:	90                   	nop

c00199c8 <CPU::prohibitUsermodeDataAccess()>:
c00199c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00199cc:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00199d3:	74 03                	je     c00199d8 <CPU::prohibitUsermodeDataAccess()+0x10>
c00199d5:	0f 01 ca             	clac   
c00199d8:	c3                   	ret    
c00199d9:	90                   	nop

c00199da <CPU::setupSMAP()>:
c00199da:	0f 20 e0             	mov    eax,cr4
c00199dd:	0d 00 00 20 00       	or     eax,0x200000
c00199e2:	0f 22 e0             	mov    cr4,eax
c00199e5:	eb e1                	jmp    c00199c8 <CPU::prohibitUsermodeDataAccess()>
c00199e7:	90                   	nop

c00199e8 <CPU::setupFeatures()>:
c00199e8:	83 ec 0c             	sub    esp,0xc
c00199eb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00199ef:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c00199f6:	74 07                	je     c00199ff <CPU::setupFeatures()+0x17>
c00199f8:	52                   	push   edx
c00199f9:	e8 46 ff ff ff       	call   c0019944 <CPU::setupSMEP()>
c00199fe:	58                   	pop    eax
c00199ff:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019a06:	74 07                	je     c0019a0f <CPU::setupFeatures()+0x27>
c0019a08:	52                   	push   edx
c0019a09:	e8 cc ff ff ff       	call   c00199da <CPU::setupSMAP()>
c0019a0e:	58                   	pop    eax
c0019a0f:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019a16:	74 07                	je     c0019a1f <CPU::setupFeatures()+0x37>
c0019a18:	52                   	push   edx
c0019a19:	e8 32 ff ff ff       	call   c0019950 <CPU::setupUMIP()>
c0019a1e:	58                   	pop    eax
c0019a1f:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019a26:	74 07                	je     c0019a2f <CPU::setupFeatures()+0x47>
c0019a28:	52                   	push   edx
c0019a29:	e8 2c ff ff ff       	call   c001995a <CPU::setupTSC()>
c0019a2e:	58                   	pop    eax
c0019a2f:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019a36:	74 07                	je     c0019a3f <CPU::setupFeatures()+0x57>
c0019a38:	52                   	push   edx
c0019a39:	e8 26 ff ff ff       	call   c0019964 <CPU::setupLargePages()>
c0019a3e:	59                   	pop    ecx
c0019a3f:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019a46:	74 07                	je     c0019a4f <CPU::setupFeatures()+0x67>
c0019a48:	52                   	push   edx
c0019a49:	e8 5e ff ff ff       	call   c00199ac <CPU::setupGlobalPages()>
c0019a4e:	58                   	pop    eax
c0019a4f:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019a56:	74 0c                	je     c0019a64 <CPU::setupFeatures()+0x7c>
c0019a58:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019a5c:	83 c4 0c             	add    esp,0xc
c0019a5f:	e9 0a ff ff ff       	jmp    c001996e <CPU::setupPAT()>
c0019a64:	83 c4 0c             	add    esp,0xc
c0019a67:	c3                   	ret    

c0019a68 <CPU::open(int, int, void*)>:
c0019a68:	57                   	push   edi
c0019a69:	56                   	push   esi
c0019a6a:	53                   	push   ebx
c0019a6b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019a6f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019a73:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019a79:	83 ec 0c             	sub    esp,0xc
c0019a7c:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019a82:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019a88:	50                   	push   eax
c0019a89:	e8 46 56 ff ff       	call   c000f0d4 <GDT::setup()>
c0019a8e:	83 c4 0c             	add    esp,0xc
c0019a91:	6a 00                	push   0x0
c0019a93:	68 ef be ad de       	push   0xdeadbeef
c0019a98:	57                   	push   edi
c0019a99:	e8 0e 7a ff ff       	call   c00114ac <TSS::setup(unsigned long, unsigned long)>
c0019a9e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019aa1:	e8 e6 79 ff ff       	call   c001148c <TSS::flush()>
c0019aa6:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019aac:	89 04 24             	mov    DWORD PTR [esp],eax
c0019aaf:	e8 7c 58 ff ff       	call   c000f330 <IDT::setup()>
c0019ab4:	b8 00 04 00 00       	mov    eax,0x400
c0019ab9:	0f 23 f8             	mov    db7,eax
c0019abc:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019ac6:	e8 12 64 ff ff       	call   c000fedd <Phys::allocatePage()>
c0019acb:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019ad1:	89 30                	mov    DWORD PTR [eax],esi
c0019ad3:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019ad9:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019adc:	58                   	pop    eax
c0019add:	5a                   	pop    edx
c0019ade:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019ae4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019ae8:	e8 ef 89 ff ff       	call   c00124dc <VAS::setCPUSpecific(unsigned long)>
c0019aed:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019af0:	e8 5f f4 ff ff       	call   c0018f54 <CPU::detectFeatures()>
c0019af5:	e8 94 bc ff ff       	call   c001578e <setupInterruptController()>
c0019afa:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019b00:	a1 60 e2 02 c0       	mov    eax,ds:0xc002e260
c0019b05:	83 e0 10             	and    eax,0x10
c0019b08:	83 f8 01             	cmp    eax,0x1
c0019b0b:	19 c0                	sbb    eax,eax
c0019b0d:	83 e0 46             	and    eax,0x46
c0019b10:	83 c0 1e             	add    eax,0x1e
c0019b13:	89 04 24             	mov    DWORD PTR [esp],eax
c0019b16:	e8 b7 d1 ff ff       	call   c0016cd2 <setupTimer(int)>
c0019b1b:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019b21:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b24:	e8 bf fe ff ff       	call   c00199e8 <CPU::setupFeatures()>
c0019b29:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b2c:	e8 a7 f1 ff ff       	call   c0018cd8 <CPU::displayFeatures()>
c0019b31:	83 c4 10             	add    esp,0x10
c0019b34:	31 c0                	xor    eax,eax
c0019b36:	5b                   	pop    ebx
c0019b37:	5e                   	pop    esi
c0019b38:	5f                   	pop    edi
c0019b39:	c3                   	ret    

c0019b3a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019b3a:	57                   	push   edi
c0019b3b:	56                   	push   esi
c0019b3c:	53                   	push   ebx
c0019b3d:	51                   	push   ecx
c0019b3e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019b42:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019b45:	0f 02 c0             	lar    eax,ax
c0019b48:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019b4b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019b4f:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019b52:	88 ca                	mov    dl,cl
c0019b54:	c0 ea 06             	shr    dl,0x6
c0019b57:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019b5b:	89 ca                	mov    edx,ecx
c0019b5d:	66 c1 ea 03          	shr    dx,0x3
c0019b61:	83 e2 07             	and    edx,0x7
c0019b64:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019b69:	88 17                	mov    BYTE PTR [edi],dl
c0019b6b:	0f 84 a6 01 00 00    	je     c0019d17 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019b71:	83 e1 07             	and    ecx,0x7
c0019b74:	80 f9 04             	cmp    cl,0x4
c0019b77:	0f 84 98 00 00 00    	je     c0019c15 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019b7d:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019b82:	0f 95 c0             	setne  al
c0019b85:	80 f9 05             	cmp    cl,0x5
c0019b88:	0f 95 c2             	setne  dl
c0019b8b:	08 c2                	or     dl,al
c0019b8d:	74 79                	je     c0019c08 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019b8f:	84 c9                	test   cl,cl
c0019b91:	75 05                	jne    c0019b98 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019b93:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019b96:	eb 3c                	jmp    c0019bd4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019b98:	80 f9 01             	cmp    cl,0x1
c0019b9b:	75 05                	jne    c0019ba2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019b9d:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019ba0:	eb 32                	jmp    c0019bd4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019ba2:	80 f9 02             	cmp    cl,0x2
c0019ba5:	75 05                	jne    c0019bac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019ba7:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019baa:	eb 28                	jmp    c0019bd4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019bac:	31 c0                	xor    eax,eax
c0019bae:	80 f9 03             	cmp    cl,0x3
c0019bb1:	75 05                	jne    c0019bb8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019bb3:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019bb6:	eb 1c                	jmp    c0019bd4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019bb8:	80 f9 05             	cmp    cl,0x5
c0019bbb:	75 05                	jne    c0019bc2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019bbd:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019bc0:	eb 12                	jmp    c0019bd4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019bc2:	80 f9 06             	cmp    cl,0x6
c0019bc5:	75 05                	jne    c0019bcc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019bc7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019bca:	eb 08                	jmp    c0019bd4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019bcc:	80 f9 07             	cmp    cl,0x7
c0019bcf:	75 03                	jne    c0019bd4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019bd1:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019bd4:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019bd9:	75 10                	jne    c0019beb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019bdb:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019bdf:	b9 03 00 00 00       	mov    ecx,0x3
c0019be4:	01 d0                	add    eax,edx
c0019be6:	e9 37 01 00 00       	jmp    c0019d22 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019beb:	b9 02 00 00 00       	mov    ecx,0x2
c0019bf0:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019bf5:	0f 85 27 01 00 00    	jne    c0019d22 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019bfb:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019bfe:	b9 06 00 00 00       	mov    ecx,0x6
c0019c03:	e9 1a 01 00 00       	jmp    c0019d22 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019c08:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019c0b:	b9 06 00 00 00       	mov    ecx,0x6
c0019c10:	e9 0f 01 00 00       	jmp    c0019d24 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019c15:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019c18:	88 ca                	mov    dl,cl
c0019c1a:	c0 ea 06             	shr    dl,0x6
c0019c1d:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019c21:	89 ca                	mov    edx,ecx
c0019c23:	66 c1 ea 03          	shr    dx,0x3
c0019c27:	83 e2 07             	and    edx,0x7
c0019c2a:	80 e1 07             	and    cl,0x7
c0019c2d:	75 05                	jne    c0019c34 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019c2f:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019c32:	eb 4c                	jmp    c0019c80 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019c34:	80 f9 01             	cmp    cl,0x1
c0019c37:	75 05                	jne    c0019c3e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019c39:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019c3c:	eb 42                	jmp    c0019c80 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019c3e:	80 f9 02             	cmp    cl,0x2
c0019c41:	75 05                	jne    c0019c48 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019c43:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019c46:	eb 38                	jmp    c0019c80 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019c48:	80 f9 03             	cmp    cl,0x3
c0019c4b:	75 05                	jne    c0019c52 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019c4d:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019c50:	eb 2e                	jmp    c0019c80 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019c52:	80 f9 04             	cmp    cl,0x4
c0019c55:	75 12                	jne    c0019c69 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019c57:	f6 c4 60             	test   ah,0x60
c0019c5a:	75 08                	jne    c0019c64 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019c5c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019c5f:	8d 78 14             	lea    edi,[eax+0x14]
c0019c62:	eb 1c                	jmp    c0019c80 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019c64:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019c67:	eb 17                	jmp    c0019c80 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019c69:	80 f9 05             	cmp    cl,0x5
c0019c6c:	75 05                	jne    c0019c73 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019c6e:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019c71:	eb 0d                	jmp    c0019c80 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019c73:	80 f9 06             	cmp    cl,0x6
c0019c76:	75 05                	jne    c0019c7d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019c78:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019c7b:	eb 03                	jmp    c0019c80 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019c7d:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019c80:	84 d2                	test   dl,dl
c0019c82:	75 05                	jne    c0019c89 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019c84:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019c87:	eb 3c                	jmp    c0019cc5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019c89:	80 fa 01             	cmp    dl,0x1
c0019c8c:	75 05                	jne    c0019c93 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019c8e:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019c91:	eb 32                	jmp    c0019cc5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019c93:	80 fa 02             	cmp    dl,0x2
c0019c96:	75 05                	jne    c0019c9d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019c98:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019c9b:	eb 28                	jmp    c0019cc5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019c9d:	80 fa 03             	cmp    dl,0x3
c0019ca0:	75 05                	jne    c0019ca7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019ca2:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019ca5:	eb 1e                	jmp    c0019cc5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019ca7:	31 c0                	xor    eax,eax
c0019ca9:	80 fa 04             	cmp    dl,0x4
c0019cac:	74 17                	je     c0019cc5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019cae:	80 fa 05             	cmp    dl,0x5
c0019cb1:	75 05                	jne    c0019cb8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019cb3:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019cb6:	eb 0d                	jmp    c0019cc5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019cb8:	80 fa 06             	cmp    dl,0x6
c0019cbb:	75 05                	jne    c0019cc2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019cbd:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019cc0:	eb 03                	jmp    c0019cc5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019cc2:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019cc5:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019cca:	0f 94 c2             	sete   dl
c0019ccd:	80 f9 05             	cmp    cl,0x5
c0019cd0:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019cd4:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019cd9:	d3 e0                	shl    eax,cl
c0019cdb:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019cdf:	74 0a                	je     c0019ceb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019ce1:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019ce4:	b9 07 00 00 00       	mov    ecx,0x7
c0019ce9:	eb 37                	jmp    c0019d22 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019ceb:	01 f8                	add    eax,edi
c0019ced:	b9 03 00 00 00       	mov    ecx,0x3
c0019cf2:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019cf7:	74 2b                	je     c0019d24 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019cf9:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019cfe:	75 0d                	jne    c0019d0d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019d00:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019d04:	01 c8                	add    eax,ecx
c0019d06:	b9 04 00 00 00       	mov    ecx,0x4
c0019d0b:	eb 17                	jmp    c0019d24 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019d0d:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019d10:	b9 07 00 00 00       	mov    ecx,0x7
c0019d15:	eb 0d                	jmp    c0019d24 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019d17:	b9 02 00 00 00       	mov    ecx,0x2
c0019d1c:	b2 01                	mov    dl,0x1
c0019d1e:	31 c0                	xor    eax,eax
c0019d20:	eb 02                	jmp    c0019d24 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019d22:	31 d2                	xor    edx,edx
c0019d24:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019d28:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019d2a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019d2e:	88 11                	mov    BYTE PTR [ecx],dl
c0019d30:	5a                   	pop    edx
c0019d31:	5b                   	pop    ebx
c0019d32:	5e                   	pop    esi
c0019d33:	5f                   	pop    edi
c0019d34:	c3                   	ret    

c0019d35 <Krnl::smpEntry()>:
c0019d35:	eb fe                	jmp    c0019d35 <Krnl::smpEntry()>

c0019d37 <Krnl::startCPU(int)>:
c0019d37:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c0019d3c:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019d43:	0f 84 36 01 00 00    	je     c0019e7f <Krnl::startCPU(int)+0x148>
c0019d49:	53                   	push   ebx
c0019d4a:	83 ec 08             	sub    esp,0x8
c0019d4d:	e8 1b 3f 00 00       	call   c001dc6d <lockScheduler()>
c0019d52:	52                   	push   edx
c0019d53:	52                   	push   edx
c0019d54:	6a 1b                	push   0x1b
c0019d56:	ff 35 48 e2 02 c0    	push   DWORD PTR ds:0xc002e248
c0019d5c:	e8 87 50 ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0019d61:	59                   	pop    ecx
c0019d62:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019d67:	89 c3                	mov    ebx,eax
c0019d69:	58                   	pop    eax
c0019d6a:	53                   	push   ebx
c0019d6b:	68 40 b8 02 c0       	push   0xc002b840
c0019d70:	e8 23 90 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0019d75:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019d7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019d83:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019d8d:	c1 e0 18             	shl    eax,0x18
c0019d90:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0019d96:	83 c4 10             	add    esp,0x10
c0019d99:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0019d9f:	09 c2                	or     edx,eax
c0019da1:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0019da7:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0019dad:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019db3:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019db9:	80 cd c5             	or     ch,0xc5
c0019dbc:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019dc2:	f3 90                	pause  
c0019dc4:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019dc6:	0f ba e1 0c          	bt     ecx,0xc
c0019dca:	72 f6                	jb     c0019dc2 <Krnl::startCPU(int)+0x8b>
c0019dcc:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019dd2:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019dd8:	09 c1                	or     ecx,eax
c0019dda:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019de0:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019de6:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019dec:	80 cd 85             	or     ch,0x85
c0019def:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019df5:	f3 90                	pause  
c0019df7:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019df9:	0f ba e1 0c          	bt     ecx,0xc
c0019dfd:	72 f6                	jb     c0019df5 <Krnl::startCPU(int)+0xbe>
c0019dff:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019e09:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019e0f:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019e15:	09 c1                	or     ecx,eax
c0019e17:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019e1d:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019e23:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0019e29:	81 c9 02 06 00 00    	or     ecx,0x602
c0019e2f:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019e35:	f3 90                	pause  
c0019e37:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019e39:	0f ba e1 0c          	bt     ecx,0xc
c0019e3d:	72 f6                	jb     c0019e35 <Krnl::startCPU(int)+0xfe>
c0019e3f:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019e49:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019e4f:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019e55:	09 c8                	or     eax,ecx
c0019e57:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0019e5d:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0019e63:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0019e68:	0d 02 06 00 00       	or     eax,0x602
c0019e6d:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0019e73:	f3 90                	pause  
c0019e75:	8b 02                	mov    eax,DWORD PTR [edx]
c0019e77:	0f ba e0 0c          	bt     eax,0xc
c0019e7b:	72 f6                	jb     c0019e73 <Krnl::startCPU(int)+0x13c>
c0019e7d:	eb fe                	jmp    c0019e7d <Krnl::startCPU(int)+0x146>
c0019e7f:	c3                   	ret    

c0019e80 <Krnl::startCPUs()>:
c0019e80:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c0019e85:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0019e8b:	88 c2                	mov    dl,al
c0019e8d:	83 e2 0a             	and    edx,0xa
c0019e90:	80 fa 0a             	cmp    dl,0xa
c0019e93:	75 09                	jne    c0019e9e <Krnl::startCPUs()+0x1e>
c0019e95:	a8 01                	test   al,0x1
c0019e97:	74 05                	je     c0019e9e <Krnl::startCPUs()+0x1e>
c0019e99:	e9 fd 62 fe ff       	jmp    c000019b <prepareTramp>
c0019e9e:	c3                   	ret    
c0019e9f:	90                   	nop

c0019ea0 <EnvVarContainer::getEnv(char const*)>:
c0019ea0:	57                   	push   edi
c0019ea1:	56                   	push   esi
c0019ea2:	53                   	push   ebx
c0019ea3:	31 db                	xor    ebx,ebx
c0019ea5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019ea9:	39 1e                	cmp    DWORD PTR [esi],ebx
c0019eab:	7e 2b                	jle    c0019ed8 <EnvVarContainer::getEnv(char const*)+0x38>
c0019ead:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0019eb4:	50                   	push   eax
c0019eb5:	50                   	push   eax
c0019eb6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019eb9:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0019ebc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019ec0:	e8 fb 69 fe ff       	call   c00008c0 <strcmp>
c0019ec5:	83 c4 10             	add    esp,0x10
c0019ec8:	85 c0                	test   eax,eax
c0019eca:	75 09                	jne    c0019ed5 <EnvVarContainer::getEnv(char const*)+0x35>
c0019ecc:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019ecf:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0019ed3:	eb 05                	jmp    c0019eda <EnvVarContainer::getEnv(char const*)+0x3a>
c0019ed5:	43                   	inc    ebx
c0019ed6:	eb d1                	jmp    c0019ea9 <EnvVarContainer::getEnv(char const*)+0x9>
c0019ed8:	31 c0                	xor    eax,eax
c0019eda:	5b                   	pop    ebx
c0019edb:	5e                   	pop    esi
c0019edc:	5f                   	pop    edi
c0019edd:	c3                   	ret    

c0019ede <EnvVarContainer::setEnv(char const*, char const*)>:
c0019ede:	57                   	push   edi
c0019edf:	56                   	push   esi
c0019ee0:	53                   	push   ebx
c0019ee1:	83 ec 1c             	sub    esp,0x1c
c0019ee4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019ee8:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0019eec:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019ef0:	57                   	push   edi
c0019ef1:	e8 9e 68 fe ff       	call   c0000794 <strlen>
c0019ef6:	40                   	inc    eax
c0019ef7:	89 04 24             	mov    DWORD PTR [esp],eax
c0019efa:	e8 41 59 ff ff       	call   c000f840 <malloc>
c0019eff:	89 34 24             	mov    DWORD PTR [esp],esi
c0019f02:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019f06:	e8 89 68 fe ff       	call   c0000794 <strlen>
c0019f0b:	40                   	inc    eax
c0019f0c:	89 04 24             	mov    DWORD PTR [esp],eax
c0019f0f:	e8 2c 59 ff ff       	call   c000f840 <malloc>
c0019f14:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019f17:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019f1b:	e8 74 68 fe ff       	call   c0000794 <strlen>
c0019f20:	83 c4 0c             	add    esp,0xc
c0019f23:	40                   	inc    eax
c0019f24:	50                   	push   eax
c0019f25:	6a 00                	push   0x0
c0019f27:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019f2b:	e8 48 68 fe ff       	call   c0000778 <memset>
c0019f30:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019f33:	e8 5c 68 fe ff       	call   c0000794 <strlen>
c0019f38:	83 c4 0c             	add    esp,0xc
c0019f3b:	40                   	inc    eax
c0019f3c:	50                   	push   eax
c0019f3d:	57                   	push   edi
c0019f3e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019f42:	e8 fd 67 fe ff       	call   c0000744 <memcpy>
c0019f47:	89 34 24             	mov    DWORD PTR [esp],esi
c0019f4a:	e8 45 68 fe ff       	call   c0000794 <strlen>
c0019f4f:	83 c4 0c             	add    esp,0xc
c0019f52:	40                   	inc    eax
c0019f53:	50                   	push   eax
c0019f54:	6a 00                	push   0x0
c0019f56:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019f5a:	e8 19 68 fe ff       	call   c0000778 <memset>
c0019f5f:	89 34 24             	mov    DWORD PTR [esp],esi
c0019f62:	e8 2d 68 fe ff       	call   c0000794 <strlen>
c0019f67:	83 c4 0c             	add    esp,0xc
c0019f6a:	40                   	inc    eax
c0019f6b:	50                   	push   eax
c0019f6c:	56                   	push   esi
c0019f6d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019f71:	e8 ce 67 fe ff       	call   c0000744 <memcpy>
c0019f76:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019f78:	40                   	inc    eax
c0019f79:	89 03                	mov    DWORD PTR [ebx],eax
c0019f7b:	c1 e0 03             	shl    eax,0x3
c0019f7e:	5a                   	pop    edx
c0019f7f:	59                   	pop    ecx
c0019f80:	50                   	push   eax
c0019f81:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0019f84:	e8 a3 58 ff ff       	call   c000f82c <realloc>
c0019f89:	83 c4 0c             	add    esp,0xc
c0019f8c:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0019f8f:	6a 08                	push   0x8
c0019f91:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019f95:	52                   	push   edx
c0019f96:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019f98:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c0019f9c:	50                   	push   eax
c0019f9d:	e8 a2 67 fe ff       	call   c0000744 <memcpy>
c0019fa2:	83 c4 20             	add    esp,0x20
c0019fa5:	5b                   	pop    ebx
c0019fa6:	5e                   	pop    esi
c0019fa7:	5f                   	pop    edi
c0019fa8:	c3                   	ret    
c0019fa9:	90                   	nop

c0019faa <EnvVarContainer::deleteEnv(char const*)>:
c0019faa:	c3                   	ret    
c0019fab:	90                   	nop

c0019fac <EnvVarContainer::loadFrom(char const*, char const*)>:
c0019fac:	55                   	push   ebp
c0019fad:	57                   	push   edi
c0019fae:	56                   	push   esi
c0019faf:	53                   	push   ebx
c0019fb0:	81 ec 38 01 00 00    	sub    esp,0x138
c0019fb6:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c0019fbd:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c0019fc4:	68 14 01 00 00       	push   0x114
c0019fc9:	e8 72 58 ff ff       	call   c000f840 <malloc>
c0019fce:	83 c4 0c             	add    esp,0xc
c0019fd1:	89 c7                	mov    edi,eax
c0019fd3:	ff 76 08             	push   DWORD PTR [esi+0x8]
c0019fd6:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0019fdd:	50                   	push   eax
c0019fde:	e8 0d 93 ff ff       	call   c00132f0 <File::File(char const*, Process*)>
c0019fe3:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019fe6:	e8 d7 95 ff ff       	call   c00135c2 <File::exists()>
c0019feb:	83 c4 10             	add    esp,0x10
c0019fee:	84 c0                	test   al,al
c0019ff0:	75 31                	jne    c001a023 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0019ff2:	51                   	push   ecx
c0019ff3:	51                   	push   ecx
c0019ff4:	6a 12                	push   0x12
c0019ff6:	57                   	push   edi
c0019ff7:	e8 58 93 ff ff       	call   c0013354 <File::open(FileOpenMode)>
c0019ffc:	8b 07                	mov    eax,DWORD PTR [edi]
c0019ffe:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001a001:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a004:	e8 8b 67 fe ff       	call   c0000794 <strlen>
c001a009:	5a                   	pop    edx
c001a00a:	31 d2                	xor    edx,edx
c001a00c:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a010:	51                   	push   ecx
c001a011:	55                   	push   ebp
c001a012:	52                   	push   edx
c001a013:	50                   	push   eax
c001a014:	57                   	push   edi
c001a015:	ff d3                	call   ebx
c001a017:	83 c4 14             	add    esp,0x14
c001a01a:	57                   	push   edi
c001a01b:	e8 92 93 ff ff       	call   c00133b2 <File::close()>
c001a020:	83 c4 10             	add    esp,0x10
c001a023:	31 db                	xor    ebx,ebx
c001a025:	50                   	push   eax
c001a026:	31 ed                	xor    ebp,ebp
c001a028:	68 00 01 00 00       	push   0x100
c001a02d:	6a 00                	push   0x0
c001a02f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a033:	50                   	push   eax
c001a034:	e8 3f 67 fe ff       	call   c0000778 <memset>
c001a039:	58                   	pop    eax
c001a03a:	5a                   	pop    edx
c001a03b:	6a 01                	push   0x1
c001a03d:	57                   	push   edi
c001a03e:	e8 11 93 ff ff       	call   c0013354 <File::open(FileOpenMode)>
c001a043:	83 c4 10             	add    esp,0x10
c001a046:	83 ec 0c             	sub    esp,0xc
c001a049:	8b 07                	mov    eax,DWORD PTR [edi]
c001a04b:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a04f:	51                   	push   ecx
c001a050:	8d 54 24 23          	lea    edx,[esp+0x23]
c001a054:	52                   	push   edx
c001a055:	6a 00                	push   0x0
c001a057:	6a 01                	push   0x1
c001a059:	57                   	push   edi
c001a05a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a05d:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001a061:	83 c4 20             	add    esp,0x20
c001a064:	3c 0d                	cmp    al,0xd
c001a066:	0f 84 12 01 00 00    	je     c001a17e <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a06c:	85 db                	test   ebx,ebx
c001a06e:	0f 84 fd 00 00 00    	je     c001a171 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a074:	3c 0a                	cmp    al,0xa
c001a076:	74 13                	je     c001a08b <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a078:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a07d:	74 0c                	je     c001a08b <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a07f:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c001a085:	0f 8e e6 00 00 00    	jle    c001a171 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a08b:	83 ec 0c             	sub    esp,0xc
c001a08e:	8d 53 01             	lea    edx,[ebx+0x1]
c001a091:	29 dd                	sub    ebp,ebx
c001a093:	52                   	push   edx
c001a094:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a098:	e8 a3 57 ff ff       	call   c000f840 <malloc>
c001a09d:	8d 4d 04             	lea    ecx,[ebp+0x4]
c001a0a0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a0a4:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001a0a7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001a0ab:	e8 90 57 ff ff       	call   c000f840 <malloc>
c001a0b0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a0b4:	83 c4 0c             	add    esp,0xc
c001a0b7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a0bb:	52                   	push   edx
c001a0bc:	6a 00                	push   0x0
c001a0be:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a0c2:	e8 b1 66 fe ff       	call   c0000778 <memset>
c001a0c7:	83 c4 0c             	add    esp,0xc
c001a0ca:	53                   	push   ebx
c001a0cb:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001a0cf:	55                   	push   ebp
c001a0d0:	01 eb                	add    ebx,ebp
c001a0d2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a0d6:	e8 69 66 fe ff       	call   c0000744 <memcpy>
c001a0db:	83 c4 0c             	add    esp,0xc
c001a0de:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a0e2:	51                   	push   ecx
c001a0e3:	6a 00                	push   0x0
c001a0e5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a0e9:	e8 8a 66 fe ff       	call   c0000778 <memset>
c001a0ee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a0f1:	e8 9e 66 fe ff       	call   c0000794 <strlen>
c001a0f6:	83 c4 0c             	add    esp,0xc
c001a0f9:	50                   	push   eax
c001a0fa:	53                   	push   ebx
c001a0fb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a0ff:	e8 40 66 fe ff       	call   c0000744 <memcpy>
c001a104:	5b                   	pop    ebx
c001a105:	58                   	pop    eax
c001a106:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a10a:	68 51 b8 02 c0       	push   0xc002b851
c001a10f:	e8 84 8c ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001a114:	8b 06                	mov    eax,DWORD PTR [esi]
c001a116:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001a119:	40                   	inc    eax
c001a11a:	83 c4 10             	add    esp,0x10
c001a11d:	89 06                	mov    DWORD PTR [esi],eax
c001a11f:	85 d2                	test   edx,edx
c001a121:	75 0c                	jne    c001a12f <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c001a123:	83 ec 0c             	sub    esp,0xc
c001a126:	6a 08                	push   0x8
c001a128:	e8 13 57 ff ff       	call   c000f840 <malloc>
c001a12d:	eb 0c                	jmp    c001a13b <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c001a12f:	c1 e0 03             	shl    eax,0x3
c001a132:	51                   	push   ecx
c001a133:	51                   	push   ecx
c001a134:	50                   	push   eax
c001a135:	52                   	push   edx
c001a136:	e8 f1 56 ff ff       	call   c000f82c <realloc>
c001a13b:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c001a13e:	83 c4 10             	add    esp,0x10
c001a141:	31 db                	xor    ebx,ebx
c001a143:	52                   	push   edx
c001a144:	6a 08                	push   0x8
c001a146:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a14a:	50                   	push   eax
c001a14b:	8b 16                	mov    edx,DWORD PTR [esi]
c001a14d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a150:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a154:	50                   	push   eax
c001a155:	e8 ea 65 fe ff       	call   c0000744 <memcpy>
c001a15a:	83 c4 0c             	add    esp,0xc
c001a15d:	68 00 01 00 00       	push   0x100
c001a162:	6a 00                	push   0x0
c001a164:	55                   	push   ebp
c001a165:	31 ed                	xor    ebp,ebp
c001a167:	e8 0c 66 fe ff       	call   c0000778 <memset>
c001a16c:	83 c4 10             	add    esp,0x10
c001a16f:	eb 0d                	jmp    c001a17e <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a171:	3c 3d                	cmp    al,0x3d
c001a173:	74 07                	je     c001a17c <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c001a175:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c001a179:	45                   	inc    ebp
c001a17a:	eb 02                	jmp    c001a17e <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a17c:	89 eb                	mov    ebx,ebp
c001a17e:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a183:	0f 85 bd fe ff ff    	jne    c001a046 <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c001a189:	50                   	push   eax
c001a18a:	50                   	push   eax
c001a18b:	ff 36                	push   DWORD PTR [esi]
c001a18d:	68 5f b8 02 c0       	push   0xc002b85f
c001a192:	e8 01 8c ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001a197:	81 c4 3c 01 00 00    	add    esp,0x13c
c001a19d:	5b                   	pop    ebx
c001a19e:	5e                   	pop    esi
c001a19f:	5f                   	pop    edi
c001a1a0:	5d                   	pop    ebp
c001a1a1:	c3                   	ret    

c001a1a2 <EnvVarContainer::__loadSystem()>:
c001a1a2:	83 ec 10             	sub    esp,0x10
c001a1a5:	68 80 d7 02 c0       	push   0xc002d780
c001a1aa:	68 8a b8 02 c0       	push   0xc002b88a
c001a1af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a1b3:	e8 f4 fd ff ff       	call   c0019fac <EnvVarContainer::loadFrom(char const*, char const*)>
c001a1b8:	83 c4 1c             	add    esp,0x1c
c001a1bb:	c3                   	ret    

c001a1bc <EnvVarContainer::__loadUser()>:
c001a1bc:	c3                   	ret    
c001a1bd:	90                   	nop

c001a1be <EnvVarContainer::EnvVarContainer(Process*)>:
c001a1be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a1c2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a1c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a1cc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a1d0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a1d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a1d7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a1de:	90                   	nop
c001a1df:	c3                   	ret    

c001a1e0 <EnvVarContainer::~EnvVarContainer()>:
c001a1e0:	83 ec 0c             	sub    esp,0xc
c001a1e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a1e7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a1ea:	85 c0                	test   eax,eax
c001a1ec:	74 1d                	je     c001a20b <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a1ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a1f2:	8b 00                	mov    eax,DWORD PTR [eax]
c001a1f4:	85 c0                	test   eax,eax
c001a1f6:	74 13                	je     c001a20b <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a1f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a1fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a1ff:	83 ec 0c             	sub    esp,0xc
c001a202:	50                   	push   eax
c001a203:	e8 48 56 ff ff       	call   c000f850 <free>
c001a208:	83 c4 10             	add    esp,0x10
c001a20b:	90                   	nop
c001a20c:	83 c4 0c             	add    esp,0xc
c001a20f:	c3                   	ret    

c001a210 <Krnl::getEnv(Process*, char const*)>:
c001a210:	53                   	push   ebx
c001a211:	83 ec 08             	sub    esp,0x8
c001a214:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a218:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a21c:	39 05 b4 17 03 c0    	cmp    DWORD PTR ds:0xc00317b4,eax
c001a222:	74 04                	je     c001a228 <Krnl::getEnv(Process*, char const*)+0x18>
c001a224:	85 c0                	test   eax,eax
c001a226:	75 0b                	jne    c001a233 <Krnl::getEnv(Process*, char const*)+0x23>
c001a228:	a1 94 0d 03 c0       	mov    eax,ds:0xc0030d94
c001a22d:	85 c0                	test   eax,eax
c001a22f:	75 19                	jne    c001a24a <Krnl::getEnv(Process*, char const*)+0x3a>
c001a231:	eb 27                	jmp    c001a25a <Krnl::getEnv(Process*, char const*)+0x4a>
c001a233:	52                   	push   edx
c001a234:	52                   	push   edx
c001a235:	53                   	push   ebx
c001a236:	ff b0 3a 1b 00 00    	push   DWORD PTR [eax+0x1b3a]
c001a23c:	e8 5f fc ff ff       	call   c0019ea0 <EnvVarContainer::getEnv(char const*)>
c001a241:	83 c4 10             	add    esp,0x10
c001a244:	85 c0                	test   eax,eax
c001a246:	75 28                	jne    c001a270 <Krnl::getEnv(Process*, char const*)+0x60>
c001a248:	eb de                	jmp    c001a228 <Krnl::getEnv(Process*, char const*)+0x18>
c001a24a:	52                   	push   edx
c001a24b:	52                   	push   edx
c001a24c:	53                   	push   ebx
c001a24d:	50                   	push   eax
c001a24e:	e8 4d fc ff ff       	call   c0019ea0 <EnvVarContainer::getEnv(char const*)>
c001a253:	83 c4 10             	add    esp,0x10
c001a256:	85 c0                	test   eax,eax
c001a258:	75 16                	jne    c001a270 <Krnl::getEnv(Process*, char const*)+0x60>
c001a25a:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a25e:	a1 98 0d 03 c0       	mov    eax,ds:0xc0030d98
c001a263:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a267:	83 c4 08             	add    esp,0x8
c001a26a:	5b                   	pop    ebx
c001a26b:	e9 30 fc ff ff       	jmp    c0019ea0 <EnvVarContainer::getEnv(char const*)>
c001a270:	83 c4 08             	add    esp,0x8
c001a273:	5b                   	pop    ebx
c001a274:	c3                   	ret    

c001a275 <Krnl::setEnvSystem(char const*, char const*)>:
c001a275:	83 ec 10             	sub    esp,0x10
c001a278:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a27c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a280:	ff 35 98 0d 03 c0    	push   DWORD PTR ds:0xc0030d98
c001a286:	e8 53 fc ff ff       	call   c0019ede <EnvVarContainer::setEnv(char const*, char const*)>
c001a28b:	83 c4 1c             	add    esp,0x1c
c001a28e:	c3                   	ret    

c001a28f <Krnl::setEnvUser(char const*, char const*)>:
c001a28f:	a1 94 0d 03 c0       	mov    eax,ds:0xc0030d94
c001a294:	85 c0                	test   eax,eax
c001a296:	74 15                	je     c001a2ad <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a298:	83 ec 10             	sub    esp,0x10
c001a29b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a29f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a2a3:	50                   	push   eax
c001a2a4:	e8 35 fc ff ff       	call   c0019ede <EnvVarContainer::setEnv(char const*, char const*)>
c001a2a9:	83 c4 1c             	add    esp,0x1c
c001a2ac:	c3                   	ret    
c001a2ad:	c3                   	ret    

c001a2ae <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a2ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2b2:	8b 80 3a 1b 00 00    	mov    eax,DWORD PTR [eax+0x1b3a]
c001a2b8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a2bc:	e9 1d fc ff ff       	jmp    c0019ede <EnvVarContainer::setEnv(char const*, char const*)>

c001a2c1 <Krnl::deleteEnvSystem(char const*)>:
c001a2c1:	c3                   	ret    

c001a2c2 <Krnl::deleteEnvUser(char const*)>:
c001a2c2:	c3                   	ret    

c001a2c3 <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a2c3:	c3                   	ret    

c001a2c4 <Krnl::newProcessEnv(Process*)>:
c001a2c4:	83 ec 28             	sub    esp,0x28
c001a2c7:	6a 0c                	push   0xc
c001a2c9:	e8 72 55 ff ff       	call   c000f840 <malloc>
c001a2ce:	5a                   	pop    edx
c001a2cf:	59                   	pop    ecx
c001a2d0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a2d4:	50                   	push   eax
c001a2d5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a2d9:	e8 e0 fe ff ff       	call   c001a1be <EnvVarContainer::EnvVarContainer(Process*)>
c001a2de:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a2e2:	83 c4 2c             	add    esp,0x2c
c001a2e5:	c3                   	ret    

c001a2e6 <Krnl::copyProcessEnv(Process*, Process*)>:
c001a2e6:	56                   	push   esi
c001a2e7:	53                   	push   ebx
c001a2e8:	83 ec 10             	sub    esp,0x10
c001a2eb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a2ef:	8b b0 3a 1b 00 00    	mov    esi,DWORD PTR [eax+0x1b3a]
c001a2f5:	6a 0c                	push   0xc
c001a2f7:	e8 44 55 ff ff       	call   c000f840 <malloc>
c001a2fc:	89 c3                	mov    ebx,eax
c001a2fe:	58                   	pop    eax
c001a2ff:	5a                   	pop    edx
c001a300:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a304:	53                   	push   ebx
c001a305:	e8 b4 fe ff ff       	call   c001a1be <EnvVarContainer::EnvVarContainer(Process*)>
c001a30a:	8b 06                	mov    eax,DWORD PTR [esi]
c001a30c:	89 03                	mov    DWORD PTR [ebx],eax
c001a30e:	c1 e0 03             	shl    eax,0x3
c001a311:	89 04 24             	mov    DWORD PTR [esp],eax
c001a314:	e8 27 55 ff ff       	call   c000f840 <malloc>
c001a319:	83 c4 0c             	add    esp,0xc
c001a31c:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a31f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001a321:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c001a328:	52                   	push   edx
c001a329:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a32c:	50                   	push   eax
c001a32d:	e8 12 64 fe ff       	call   c0000744 <memcpy>
c001a332:	89 d8                	mov    eax,ebx
c001a334:	83 c4 14             	add    esp,0x14
c001a337:	5b                   	pop    ebx
c001a338:	5e                   	pop    esi
c001a339:	c3                   	ret    

c001a33a <Krnl::loadSystemEnv()>:
c001a33a:	53                   	push   ebx
c001a33b:	83 ec 14             	sub    esp,0x14
c001a33e:	6a 0c                	push   0xc
c001a340:	e8 fb 54 ff ff       	call   c000f840 <malloc>
c001a345:	89 c3                	mov    ebx,eax
c001a347:	58                   	pop    eax
c001a348:	5a                   	pop    edx
c001a349:	ff 35 b4 17 03 c0    	push   DWORD PTR ds:0xc00317b4
c001a34f:	53                   	push   ebx
c001a350:	e8 69 fe ff ff       	call   c001a1be <EnvVarContainer::EnvVarContainer(Process*)>
c001a355:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a358:	89 1d 98 0d 03 c0    	mov    DWORD PTR ds:0xc0030d98,ebx
c001a35e:	e8 3f fe ff ff       	call   c001a1a2 <EnvVarContainer::__loadSystem()>
c001a363:	83 c4 18             	add    esp,0x18
c001a366:	5b                   	pop    ebx
c001a367:	c3                   	ret    

c001a368 <Krnl::loadUserEnv()>:
c001a368:	53                   	push   ebx
c001a369:	83 ec 14             	sub    esp,0x14
c001a36c:	6a 0c                	push   0xc
c001a36e:	e8 cd 54 ff ff       	call   c000f840 <malloc>
c001a373:	89 c3                	mov    ebx,eax
c001a375:	58                   	pop    eax
c001a376:	5a                   	pop    edx
c001a377:	ff 35 b4 17 03 c0    	push   DWORD PTR ds:0xc00317b4
c001a37d:	53                   	push   ebx
c001a37e:	e8 3b fe ff ff       	call   c001a1be <EnvVarContainer::EnvVarContainer(Process*)>
c001a383:	89 1d 94 0d 03 c0    	mov    DWORD PTR ds:0xc0030d94,ebx
c001a389:	83 c4 18             	add    esp,0x18
c001a38c:	5b                   	pop    ebx
c001a38d:	c3                   	ret    

c001a38e <Krnl::flushEnv()>:
c001a38e:	c3                   	ret    

c001a38f <Krnl::getProcessTotalEnvCount(Process*)>:
c001a38f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a393:	8b 15 94 0d 03 c0    	mov    edx,DWORD PTR ds:0xc0030d94
c001a399:	8b 88 3a 1b 00 00    	mov    ecx,DWORD PTR [eax+0x1b3a]
c001a39f:	a1 98 0d 03 c0       	mov    eax,ds:0xc0030d98
c001a3a4:	8b 00                	mov    eax,DWORD PTR [eax]
c001a3a6:	03 01                	add    eax,DWORD PTR [ecx]
c001a3a8:	85 d2                	test   edx,edx
c001a3aa:	74 02                	je     c001a3ae <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a3ac:	03 02                	add    eax,DWORD PTR [edx]
c001a3ae:	c3                   	ret    

c001a3af <Krnl::getProcessEnvPair(Process*, int)>:
c001a3af:	57                   	push   edi
c001a3b0:	8b 0d 94 0d 03 c0    	mov    ecx,DWORD PTR ds:0xc0030d94
c001a3b6:	56                   	push   esi
c001a3b7:	85 c9                	test   ecx,ecx
c001a3b9:	53                   	push   ebx
c001a3ba:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a3be:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a3c2:	8b 97 3a 1b 00 00    	mov    edx,DWORD PTR [edi+0x1b3a]
c001a3c8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a3cc:	8b 02                	mov    eax,DWORD PTR [edx]
c001a3ce:	75 47                	jne    c001a417 <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001a3d0:	39 c3                	cmp    ebx,eax
c001a3d2:	7c 47                	jl     c001a41b <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001a3d4:	8b 15 98 0d 03 c0    	mov    edx,DWORD PTR ds:0xc0030d98
c001a3da:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a3dc:	01 c1                	add    ecx,eax
c001a3de:	39 d9                	cmp    ecx,ebx
c001a3e0:	7e 6c                	jle    c001a44e <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a3e2:	51                   	push   ecx
c001a3e3:	89 d9                	mov    ecx,ebx
c001a3e5:	29 c1                	sub    ecx,eax
c001a3e7:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a3ea:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001a3ee:	53                   	push   ebx
c001a3ef:	68 ac b8 02 c0       	push   0xc002b8ac
c001a3f4:	e8 9f 89 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001a3f9:	8b 87 3a 1b 00 00    	mov    eax,DWORD PTR [edi+0x1b3a]
c001a3ff:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a401:	a1 98 0d 03 c0       	mov    eax,ds:0xc0030d98
c001a406:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a409:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a40d:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a410:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a413:	89 06                	mov    DWORD PTR [esi],eax
c001a415:	eb 51                	jmp    c001a468 <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a417:	39 c3                	cmp    ebx,eax
c001a419:	7d 05                	jge    c001a420 <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a41b:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a41e:	eb 20                	jmp    c001a440 <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a420:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a422:	8d 14 07             	lea    edx,[edi+eax*1]
c001a425:	39 da                	cmp    edx,ebx
c001a427:	7e 04                	jle    c001a42d <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a429:	29 c3                	sub    ebx,eax
c001a42b:	eb 10                	jmp    c001a43d <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a42d:	8b 0d 98 0d 03 c0    	mov    ecx,DWORD PTR ds:0xc0030d98
c001a433:	03 11                	add    edx,DWORD PTR [ecx]
c001a435:	39 da                	cmp    edx,ebx
c001a437:	7e 15                	jle    c001a44e <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a439:	29 c3                	sub    ebx,eax
c001a43b:	29 fb                	sub    ebx,edi
c001a43d:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a440:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a444:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a447:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a44a:	89 06                	mov    DWORD PTR [esi],eax
c001a44c:	eb 1d                	jmp    c001a46b <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a44e:	83 ec 0c             	sub    esp,0xc
c001a451:	68 c0 b8 02 c0       	push   0xc002b8c0
c001a456:	e8 18 00 00 00       	call   c001a473 <Krnl::panic(char const*)>
c001a45b:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a461:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a468:	83 c4 10             	add    esp,0x10
c001a46b:	89 f0                	mov    eax,esi
c001a46d:	5b                   	pop    ebx
c001a46e:	5e                   	pop    esi
c001a46f:	5f                   	pop    edi
c001a470:	c2 04 00             	ret    0x4

c001a473 <Krnl::panic(char const*)>:
c001a473:	55                   	push   ebp
c001a474:	89 e5                	mov    ebp,esp
c001a476:	53                   	push   ebx
c001a477:	83 ec 0c             	sub    esp,0xc
c001a47a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a47d:	fa                   	cli    
c001a47e:	c6 05 a4 0d 03 c0 01 	mov    BYTE PTR ds:0xc0030da4,0x1
c001a485:	53                   	push   ebx
c001a486:	c6 05 84 d1 02 c0 00 	mov    BYTE PTR ds:0xc002d184,0x0
c001a48d:	68 da b8 02 c0       	push   0xc002b8da
c001a492:	e8 01 89 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001a497:	58                   	pop    eax
c001a498:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c001a49d:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a4a3:	e8 45 68 ff ff       	call   c0010ced <setActiveTerminal(VgaText*)>
c001a4a8:	83 c4 0c             	add    esp,0xc
c001a4ab:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c001a4b0:	6a 01                	push   0x1
c001a4b2:	6a 0f                	push   0xf
c001a4b4:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a4ba:	e8 5f 62 ff ff       	call   c001071e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a4bf:	58                   	pop    eax
c001a4c0:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c001a4c5:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a4cb:	e8 be 6a ff ff       	call   c0010f8e <VgaText::clearScreen()>
c001a4d0:	58                   	pop    eax
c001a4d1:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c001a4d6:	5a                   	pop    edx
c001a4d7:	68 f3 b8 02 c0       	push   0xc002b8f3
c001a4dc:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a4e2:	e8 25 6c ff ff       	call   c001110c <VgaText::puts(char const*)>
c001a4e7:	59                   	pop    ecx
c001a4e8:	58                   	pop    eax
c001a4e9:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c001a4ee:	68 98 b9 02 c0       	push   0xc002b998
c001a4f3:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a4f9:	e8 0e 6c ff ff       	call   c001110c <VgaText::puts(char const*)>
c001a4fe:	58                   	pop    eax
c001a4ff:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c001a504:	5a                   	pop    edx
c001a505:	68 0f b9 02 c0       	push   0xc002b90f
c001a50a:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a510:	e8 f7 6b ff ff       	call   c001110c <VgaText::puts(char const*)>
c001a515:	59                   	pop    ecx
c001a516:	58                   	pop    eax
c001a517:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c001a51c:	53                   	push   ebx
c001a51d:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a523:	e8 e4 6b ff ff       	call   c001110c <VgaText::puts(char const*)>
c001a528:	58                   	pop    eax
c001a529:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c001a52e:	5a                   	pop    edx
c001a52f:	68 2f b9 02 c0       	push   0xc002b92f
c001a534:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a53a:	e8 cd 6b ff ff       	call   c001110c <VgaText::puts(char const*)>
c001a53f:	a1 a0 0d 03 c0       	mov    eax,ds:0xc0030da0
c001a544:	83 c4 10             	add    esp,0x10
c001a547:	85 c0                	test   eax,eax
c001a549:	74 02                	je     c001a54d <Krnl::panic(char const*)+0xda>
c001a54b:	ff d0                	call   eax
c001a54d:	83 ec 0c             	sub    esp,0xc
c001a550:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a553:	e8 fd 2f 00 00       	call   c001d555 <Thr::getDriverNameFromAddress(unsigned long)>
c001a558:	83 c4 10             	add    esp,0x10
c001a55b:	89 c3                	mov    ebx,eax
c001a55d:	85 c0                	test   eax,eax
c001a55f:	0f 84 50 02 00 00    	je     c001a7b5 <Krnl::panic(char const*)+0x342>
c001a565:	83 ec 08             	sub    esp,0x8
c001a568:	8b 15 b4 17 03 c0    	mov    edx,DWORD PTR ds:0xc00317b4
c001a56e:	68 d4 b9 02 c0       	push   0xc002b9d4
c001a573:	ff b2 26 19 00 00    	push   DWORD PTR [edx+0x1926]
c001a579:	e8 8e 6b ff ff       	call   c001110c <VgaText::puts(char const*)>
c001a57e:	58                   	pop    eax
c001a57f:	5a                   	pop    edx
c001a580:	8b 15 b4 17 03 c0    	mov    edx,DWORD PTR ds:0xc00317b4
c001a586:	68 0f b9 02 c0       	push   0xc002b90f
c001a58b:	ff b2 26 19 00 00    	push   DWORD PTR [edx+0x1926]
c001a591:	e8 76 6b ff ff       	call   c001110c <VgaText::puts(char const*)>
c001a596:	59                   	pop    ecx
c001a597:	58                   	pop    eax
c001a598:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c001a59d:	53                   	push   ebx
c001a59e:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a5a4:	e8 63 6b ff ff       	call   c001110c <VgaText::puts(char const*)>
c001a5a9:	83 c4 10             	add    esp,0x10
c001a5ac:	83 ec 08             	sub    esp,0x8
c001a5af:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c001a5b4:	68 2e b9 02 c0       	push   0xc002b92e
c001a5b9:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a5bf:	e8 48 6b ff ff       	call   c001110c <VgaText::puts(char const*)>
c001a5c4:	58                   	pop    eax
c001a5c5:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c001a5ca:	5a                   	pop    edx
c001a5cb:	68 2c ba 02 c0       	push   0xc002ba2c
c001a5d0:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a5d6:	e8 31 6b ff ff       	call   c001110c <VgaText::puts(char const*)>
c001a5db:	59                   	pop    ecx
c001a5dc:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c001a5e1:	5b                   	pop    ebx
c001a5e2:	68 6c ba 02 c0       	push   0xc002ba6c
c001a5e7:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a5ed:	e8 1a 6b ff ff       	call   c001110c <VgaText::puts(char const*)>
c001a5f2:	58                   	pop    eax
c001a5f3:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c001a5f8:	5a                   	pop    edx
c001a5f9:	68 1a b9 02 c0       	push   0xc002b91a
c001a5fe:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a604:	e8 03 6b ff ff       	call   c001110c <VgaText::puts(char const*)>
c001a609:	59                   	pop    ecx
c001a60a:	5b                   	pop    ebx
c001a60b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a60e:	68 32 b9 02 c0       	push   0xc002b932
c001a613:	e8 80 87 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001a618:	58                   	pop    eax
c001a619:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a61c:	5a                   	pop    edx
c001a61d:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a620:	68 3b b9 02 c0       	push   0xc002b93b
c001a625:	e8 6e 87 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001a62a:	59                   	pop    ecx
c001a62b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a62e:	5b                   	pop    ebx
c001a62f:	8b 00                	mov    eax,DWORD PTR [eax]
c001a631:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a634:	68 44 b9 02 c0       	push   0xc002b944
c001a639:	e8 5a 87 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001a63e:	58                   	pop    eax
c001a63f:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c001a644:	5a                   	pop    edx
c001a645:	68 b0 ba 02 c0       	push   0xc002bab0
c001a64a:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a650:	e8 b7 6a ff ff       	call   c001110c <VgaText::puts(char const*)>
c001a655:	59                   	pop    ecx
c001a656:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c001a65b:	5b                   	pop    ebx
c001a65c:	68 4d b9 02 c0       	push   0xc002b94d
c001a661:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a667:	e8 a0 6a ff ff       	call   c001110c <VgaText::puts(char const*)>
c001a66c:	0f 20 c0             	mov    eax,cr0
c001a66f:	5a                   	pop    edx
c001a670:	59                   	pop    ecx
c001a671:	50                   	push   eax
c001a672:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c001a677:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a67d:	e8 b0 6a ff ff       	call   c0011132 <VgaText::putx(unsigned int)>
c001a682:	5b                   	pop    ebx
c001a683:	58                   	pop    eax
c001a684:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c001a689:	68 57 b9 02 c0       	push   0xc002b957
c001a68e:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a694:	e8 73 6a ff ff       	call   c001110c <VgaText::puts(char const*)>
c001a699:	0f 20 d0             	mov    eax,cr2
c001a69c:	5a                   	pop    edx
c001a69d:	59                   	pop    ecx
c001a69e:	50                   	push   eax
c001a69f:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c001a6a4:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a6aa:	e8 83 6a ff ff       	call   c0011132 <VgaText::putx(unsigned int)>
c001a6af:	5b                   	pop    ebx
c001a6b0:	58                   	pop    eax
c001a6b1:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c001a6b6:	68 61 b9 02 c0       	push   0xc002b961
c001a6bb:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a6c1:	e8 46 6a ff ff       	call   c001110c <VgaText::puts(char const*)>
c001a6c6:	0f 20 d8             	mov    eax,cr3
c001a6c9:	5a                   	pop    edx
c001a6ca:	59                   	pop    ecx
c001a6cb:	50                   	push   eax
c001a6cc:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c001a6d1:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a6d7:	e8 56 6a ff ff       	call   c0011132 <VgaText::putx(unsigned int)>
c001a6dc:	5b                   	pop    ebx
c001a6dd:	58                   	pop    eax
c001a6de:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c001a6e3:	68 74 b9 02 c0       	push   0xc002b974
c001a6e8:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a6ee:	e8 19 6a ff ff       	call   c001110c <VgaText::puts(char const*)>
c001a6f3:	0f 20 e0             	mov    eax,cr4
c001a6f6:	5a                   	pop    edx
c001a6f7:	59                   	pop    ecx
c001a6f8:	50                   	push   eax
c001a6f9:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c001a6fe:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a704:	e8 29 6a ff ff       	call   c0011132 <VgaText::putx(unsigned int)>
c001a709:	5b                   	pop    ebx
c001a70a:	58                   	pop    eax
c001a70b:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c001a710:	68 7e b9 02 c0       	push   0xc002b97e
c001a715:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a71b:	e8 ec 69 ff ff       	call   c001110c <VgaText::puts(char const*)>
c001a720:	5a                   	pop    edx
c001a721:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c001a726:	59                   	pop    ecx
c001a727:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c001a72d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a730:	50                   	push   eax
c001a731:	e8 fc 69 ff ff       	call   c0011132 <VgaText::putx(unsigned int)>
c001a736:	5b                   	pop    ebx
c001a737:	58                   	pop    eax
c001a738:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c001a73d:	68 95 b9 02 c0       	push   0xc002b995
c001a742:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a748:	e8 bf 69 ff ff       	call   c001110c <VgaText::puts(char const*)>
c001a74d:	5a                   	pop    edx
c001a74e:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c001a753:	59                   	pop    ecx
c001a754:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c001a75a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a75d:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a760:	50                   	push   eax
c001a761:	e8 cc 69 ff ff       	call   c0011132 <VgaText::putx(unsigned int)>
c001a766:	5b                   	pop    ebx
c001a767:	58                   	pop    eax
c001a768:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c001a76d:	68 95 b9 02 c0       	push   0xc002b995
c001a772:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a778:	e8 8f 69 ff ff       	call   c001110c <VgaText::puts(char const*)>
c001a77d:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c001a782:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a785:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c001a78b:	8b 12                	mov    edx,DWORD PTR [edx]
c001a78d:	59                   	pop    ecx
c001a78e:	5b                   	pop    ebx
c001a78f:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a792:	50                   	push   eax
c001a793:	e8 9a 69 ff ff       	call   c0011132 <VgaText::putx(unsigned int)>
c001a798:	83 c4 10             	add    esp,0x10
c001a79b:	b2 fe                	mov    dl,0xfe
c001a79d:	e4 60                	in     al,0x60
c001a79f:	3c 1c                	cmp    al,0x1c
c001a7a1:	74 04                	je     c001a7a7 <Krnl::panic(char const*)+0x334>
c001a7a3:	3c 5a                	cmp    al,0x5a
c001a7a5:	75 f6                	jne    c001a79d <Krnl::panic(char const*)+0x32a>
c001a7a7:	e4 64                	in     al,0x64
c001a7a9:	a8 02                	test   al,0x2
c001a7ab:	75 fa                	jne    c001a7a7 <Krnl::panic(char const*)+0x334>
c001a7ad:	88 d0                	mov    al,dl
c001a7af:	e6 64                	out    0x64,al
c001a7b1:	fa                   	cli    
c001a7b2:	f4                   	hlt    
c001a7b3:	eb e8                	jmp    c001a79d <Krnl::panic(char const*)+0x32a>
c001a7b5:	50                   	push   eax
c001a7b6:	50                   	push   eax
c001a7b7:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c001a7bc:	68 00 ba 02 c0       	push   0xc002ba00
c001a7c1:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a7c7:	e8 40 69 ff ff       	call   c001110c <VgaText::puts(char const*)>
c001a7cc:	58                   	pop    eax
c001a7cd:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c001a7d2:	5a                   	pop    edx
c001a7d3:	68 0f b9 02 c0       	push   0xc002b90f
c001a7d8:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a7de:	e8 29 69 ff ff       	call   c001110c <VgaText::puts(char const*)>
c001a7e3:	59                   	pop    ecx
c001a7e4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a7e9:	5b                   	pop    ebx
c001a7ea:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a7ed:	83 c0 0c             	add    eax,0xc
c001a7f0:	50                   	push   eax
c001a7f1:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c001a7f6:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a7fc:	e8 0b 69 ff ff       	call   c001110c <VgaText::puts(char const*)>
c001a801:	83 c4 10             	add    esp,0x10
c001a804:	e9 a3 fd ff ff       	jmp    c001a5ac <Krnl::panic(char const*)+0x139>

c001a809 <Net::switchEndian16(unsigned short)>:
c001a809:	83 ec 04             	sub    esp,0x4
c001a80c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a810:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a814:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a818:	c1 f8 08             	sar    eax,0x8
c001a81b:	89 c2                	mov    edx,eax
c001a81d:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a821:	c1 e0 08             	shl    eax,0x8
c001a824:	09 d0                	or     eax,edx
c001a826:	83 c4 04             	add    esp,0x4
c001a829:	c3                   	ret    

c001a82a <Net::switchEndian32(unsigned int)>:
c001a82a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a82e:	c1 e8 18             	shr    eax,0x18
c001a831:	89 c2                	mov    edx,eax
c001a833:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a837:	c1 e0 08             	shl    eax,0x8
c001a83a:	25 00 00 ff 00       	and    eax,0xff0000
c001a83f:	09 c2                	or     edx,eax
c001a841:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a845:	c1 e8 08             	shr    eax,0x8
c001a848:	25 00 ff 00 00       	and    eax,0xff00
c001a84d:	09 c2                	or     edx,eax
c001a84f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a853:	c1 e0 18             	shl    eax,0x18
c001a856:	09 d0                	or     eax,edx
c001a858:	c3                   	ret    

c001a859 <Net::crc32Calc(unsigned char*, int)>:
c001a859:	83 ec 10             	sub    esp,0x10
c001a85c:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a861:	75 07                	jne    c001a86a <Net::crc32Calc(unsigned char*, int)+0x11>
c001a863:	b8 00 00 00 00       	mov    eax,0x0
c001a868:	eb 7c                	jmp    c001a8e6 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a86a:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a86f:	7f 07                	jg     c001a878 <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a871:	b8 00 00 00 00       	mov    eax,0x0
c001a876:	eb 6e                	jmp    c001a8e6 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a878:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a880:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a888:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a88c:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a890:	7d 4e                	jge    c001a8e0 <Net::crc32Calc(unsigned char*, int)+0x87>
c001a892:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a896:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a89a:	01 d0                	add    eax,edx
c001a89c:	8a 00                	mov    al,BYTE PTR [eax]
c001a89e:	0f b6 c0             	movzx  eax,al
c001a8a1:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001a8a5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a8ad:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001a8b2:	7f 26                	jg     c001a8da <Net::crc32Calc(unsigned char*, int)+0x81>
c001a8b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8b8:	83 e0 01             	and    eax,0x1
c001a8bb:	74 0d                	je     c001a8ca <Net::crc32Calc(unsigned char*, int)+0x71>
c001a8bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8c1:	d1 e8                	shr    eax,1
c001a8c3:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001a8c8:	eb 06                	jmp    c001a8d0 <Net::crc32Calc(unsigned char*, int)+0x77>
c001a8ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8ce:	d1 e8                	shr    eax,1
c001a8d0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a8d4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a8d8:	eb d3                	jmp    c001a8ad <Net::crc32Calc(unsigned char*, int)+0x54>
c001a8da:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001a8de:	eb a8                	jmp    c001a888 <Net::crc32Calc(unsigned char*, int)+0x2f>
c001a8e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8e4:	f7 d0                	not    eax
c001a8e6:	83 c4 10             	add    esp,0x10
c001a8e9:	c3                   	ret    

c001a8ea <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001a8ea:	83 ec 1c             	sub    esp,0x1c
c001a8ed:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a8f1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a8f5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a8fd:	83 7c 24 0c 06       	cmp    DWORD PTR [esp+0xc],0x6
c001a902:	7f 14                	jg     c001a918 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c001a904:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a908:	8d 50 01             	lea    edx,[eax+0x1]
c001a90b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a90f:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001a912:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a916:	eb e5                	jmp    c001a8fd <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c001a918:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a91c:	8d 50 01             	lea    edx,[eax+0x1]
c001a91f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a923:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001a926:	83 ec 04             	sub    esp,0x4
c001a929:	6a 06                	push   0x6
c001a92b:	8d 44 24 36          	lea    eax,[esp+0x36]
c001a92f:	50                   	push   eax
c001a930:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001a934:	e8 0b 5e fe ff       	call   c0000744 <memcpy>
c001a939:	83 c4 10             	add    esp,0x10
c001a93c:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001a941:	83 ec 04             	sub    esp,0x4
c001a944:	6a 06                	push   0x6
c001a946:	8d 44 24 30          	lea    eax,[esp+0x30]
c001a94a:	50                   	push   eax
c001a94b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001a94f:	e8 f0 5d fe ff       	call   c0000744 <memcpy>
c001a954:	83 c4 10             	add    esp,0x10
c001a957:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001a95c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a960:	0f b7 c0             	movzx  eax,ax
c001a963:	c1 f8 08             	sar    eax,0x8
c001a966:	89 c1                	mov    ecx,eax
c001a968:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a96c:	8d 50 01             	lea    edx,[eax+0x1]
c001a96f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a973:	88 ca                	mov    dl,cl
c001a975:	88 10                	mov    BYTE PTR [eax],dl
c001a977:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a97b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a97f:	8d 48 01             	lea    ecx,[eax+0x1]
c001a982:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001a986:	88 10                	mov    BYTE PTR [eax],dl
c001a988:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001a98c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a990:	83 ec 04             	sub    esp,0x4
c001a993:	52                   	push   edx
c001a994:	50                   	push   eax
c001a995:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001a999:	e8 a6 5d fe ff       	call   c0000744 <memcpy>
c001a99e:	83 c4 10             	add    esp,0x10
c001a9a1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a9a5:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c001a9a9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a9ad:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c001a9b1:	83 ec 08             	sub    esp,0x8
c001a9b4:	50                   	push   eax
c001a9b5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a9b9:	e8 9b fe ff ff       	call   c001a859 <Net::crc32Calc(unsigned char*, int)>
c001a9be:	83 c4 10             	add    esp,0x10
c001a9c1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a9c5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9c9:	c1 e8 18             	shr    eax,0x18
c001a9cc:	89 c1                	mov    ecx,eax
c001a9ce:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a9d2:	8d 50 01             	lea    edx,[eax+0x1]
c001a9d5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a9d9:	88 ca                	mov    dl,cl
c001a9db:	88 10                	mov    BYTE PTR [eax],dl
c001a9dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9e1:	c1 e8 10             	shr    eax,0x10
c001a9e4:	89 c1                	mov    ecx,eax
c001a9e6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a9ea:	8d 50 01             	lea    edx,[eax+0x1]
c001a9ed:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a9f1:	88 ca                	mov    dl,cl
c001a9f3:	88 10                	mov    BYTE PTR [eax],dl
c001a9f5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9f9:	c1 e8 08             	shr    eax,0x8
c001a9fc:	89 c1                	mov    ecx,eax
c001a9fe:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa02:	8d 50 01             	lea    edx,[eax+0x1]
c001aa05:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aa09:	88 ca                	mov    dl,cl
c001aa0b:	88 10                	mov    BYTE PTR [eax],dl
c001aa0d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa11:	8d 50 01             	lea    edx,[eax+0x1]
c001aa14:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aa18:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001aa1c:	88 10                	mov    BYTE PTR [eax],dl
c001aa1e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001aa22:	83 c4 1c             	add    esp,0x1c
c001aa25:	c3                   	ret    

c001aa26 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001aa26:	83 ec 2c             	sub    esp,0x2c
c001aa29:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aa2d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001aa31:	83 44 24 34 08       	add    DWORD PTR [esp+0x34],0x8
c001aa36:	83 ec 04             	sub    esp,0x4
c001aa39:	6a 06                	push   0x6
c001aa3b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001aa3f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001aa43:	83 c0 0e             	add    eax,0xe
c001aa46:	50                   	push   eax
c001aa47:	e8 f8 5c fe ff       	call   c0000744 <memcpy>
c001aa4c:	83 c4 10             	add    esp,0x10
c001aa4f:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001aa54:	83 ec 04             	sub    esp,0x4
c001aa57:	6a 06                	push   0x6
c001aa59:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001aa5d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001aa61:	83 c0 08             	add    eax,0x8
c001aa64:	50                   	push   eax
c001aa65:	e8 da 5c fe ff       	call   c0000744 <memcpy>
c001aa6a:	83 c4 10             	add    esp,0x10
c001aa6d:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001aa72:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aa76:	8d 50 01             	lea    edx,[eax+0x1]
c001aa79:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001aa7d:	8a 00                	mov    al,BYTE PTR [eax]
c001aa7f:	0f b6 c0             	movzx  eax,al
c001aa82:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001aa87:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aa8b:	8d 50 01             	lea    edx,[eax+0x1]
c001aa8e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001aa92:	8a 00                	mov    al,BYTE PTR [eax]
c001aa94:	0f b6 c0             	movzx  eax,al
c001aa97:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c001aa9c:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c001aaa1:	c1 e0 08             	shl    eax,0x8
c001aaa4:	89 c2                	mov    edx,eax
c001aaa6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001aaaa:	09 d0                	or     eax,edx
c001aaac:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001aab0:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001aab4:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
c001aab9:	75 3a                	jne    c001aaf5 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001aabb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001aabf:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001aac2:	66 3d dc 05          	cmp    ax,0x5dc
c001aac6:	77 10                	ja     c001aad8 <Net::unwrapEthernetFrame(unsigned char*, int)+0xb2>
c001aac8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001aacc:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001aacf:	0f b7 c0             	movzx  eax,ax
c001aad2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001aad6:	eb 1d                	jmp    c001aaf5 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001aad8:	83 ec 0c             	sub    esp,0xc
c001aadb:	68 d8 ba 02 c0       	push   0xc002bad8
c001aae0:	e8 b3 82 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001aae5:	83 c4 10             	add    esp,0x10
c001aae8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001aaec:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001aaf0:	e9 c0 00 00 00       	jmp    c001abb5 <Net::unwrapEthernetFrame(unsigned char*, int)+0x18f>
c001aaf5:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001aaf9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001aafd:	8b 00                	mov    eax,DWORD PTR [eax]
c001aaff:	83 ec 04             	sub    esp,0x4
c001ab02:	52                   	push   edx
c001ab03:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ab07:	50                   	push   eax
c001ab08:	e8 37 5c fe ff       	call   c0000744 <memcpy>
c001ab0d:	83 c4 10             	add    esp,0x10
c001ab10:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab14:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001ab18:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ab1c:	8d 50 01             	lea    edx,[eax+0x1]
c001ab1f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ab23:	8a 00                	mov    al,BYTE PTR [eax]
c001ab25:	0f b6 c0             	movzx  eax,al
c001ab28:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ab2c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ab30:	8d 50 01             	lea    edx,[eax+0x1]
c001ab33:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ab37:	8a 00                	mov    al,BYTE PTR [eax]
c001ab39:	0f b6 c0             	movzx  eax,al
c001ab3c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ab40:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ab44:	8d 50 01             	lea    edx,[eax+0x1]
c001ab47:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ab4b:	8a 00                	mov    al,BYTE PTR [eax]
c001ab4d:	0f b6 c0             	movzx  eax,al
c001ab50:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ab54:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ab58:	8d 50 01             	lea    edx,[eax+0x1]
c001ab5b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ab5f:	8a 00                	mov    al,BYTE PTR [eax]
c001ab61:	0f b6 c0             	movzx  eax,al
c001ab64:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ab68:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ab6c:	c1 e0 18             	shl    eax,0x18
c001ab6f:	89 c2                	mov    edx,eax
c001ab71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab75:	c1 e0 10             	shl    eax,0x10
c001ab78:	09 c2                	or     edx,eax
c001ab7a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ab7e:	c1 e0 08             	shl    eax,0x8
c001ab81:	09 d0                	or     eax,edx
c001ab83:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c001ab87:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ab8b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ab8f:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c001ab93:	83 e8 04             	sub    eax,0x4
c001ab96:	83 ec 08             	sub    esp,0x8
c001ab99:	50                   	push   eax
c001ab9a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001ab9e:	e8 b6 fc ff ff       	call   c001a859 <Net::crc32Calc(unsigned char*, int)>
c001aba3:	83 c4 10             	add    esp,0x10
c001aba6:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001abaa:	0f 94 c2             	sete   dl
c001abad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001abb1:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001abb4:	90                   	nop
c001abb5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001abb9:	83 c4 2c             	add    esp,0x2c
c001abbc:	c2 04 00             	ret    0x4

c001abbf <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001abbf:	55                   	push   ebp
c001abc0:	57                   	push   edi
c001abc1:	56                   	push   esi
c001abc2:	53                   	push   ebx
c001abc3:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001abc9:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001abd0:	8a 1e                	mov    bl,BYTE PTR [esi]
c001abd2:	8d 6e 01             	lea    ebp,[esi+0x1]
c001abd5:	80 fb 40             	cmp    bl,0x40
c001abd8:	75 1b                	jne    c001abf5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001abda:	8a 16                	mov    dl,BYTE PTR [esi]
c001abdc:	84 d2                	test   dl,dl
c001abde:	0f 84 f1 00 00 00    	je     c001acd5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001abe4:	8d 46 01             	lea    eax,[esi+0x1]
c001abe7:	80 fa 3a             	cmp    dl,0x3a
c001abea:	74 04                	je     c001abf0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001abec:	89 c6                	mov    esi,eax
c001abee:	eb ea                	jmp    c001abda <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001abf0:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001abf3:	89 c6                	mov    esi,eax
c001abf5:	50                   	push   eax
c001abf6:	6a 40                	push   0x40
c001abf8:	6a 00                	push   0x0
c001abfa:	8d 44 24 24          	lea    eax,[esp+0x24]
c001abfe:	50                   	push   eax
c001abff:	e8 74 5b fe ff       	call   c0000778 <memset>
c001ac04:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001ac0b:	31 c0                	xor    eax,eax
c001ac0d:	83 c4 10             	add    esp,0x10
c001ac10:	8a 0f                	mov    cl,BYTE PTR [edi]
c001ac12:	84 c9                	test   cl,cl
c001ac14:	0f 84 bb 00 00 00    	je     c001acd5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ac1a:	3d c7 00 00 00       	cmp    eax,0xc7
c001ac1f:	0f 8f b0 00 00 00    	jg     c001acd5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ac25:	80 f9 0a             	cmp    cl,0xa
c001ac28:	0f 85 98 00 00 00    	jne    c001acc6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001ac2e:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001ac33:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001ac37:	a8 df                	test   al,0xdf
c001ac39:	0f 94 c1             	sete   cl
c001ac3c:	3c 23                	cmp    al,0x23
c001ac3e:	0f 94 c2             	sete   dl
c001ac41:	08 d1                	or     cl,dl
c001ac43:	75 4a                	jne    c001ac8f <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ac45:	8d 50 f7             	lea    edx,[eax-0x9]
c001ac48:	80 fa 01             	cmp    dl,0x1
c001ac4b:	76 42                	jbe    c001ac8f <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ac4d:	3c 5b                	cmp    al,0x5b
c001ac4f:	75 42                	jne    c001ac93 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001ac51:	80 fb 40             	cmp    bl,0x40
c001ac54:	75 39                	jne    c001ac8f <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ac56:	83 ec 0c             	sub    esp,0xc
c001ac59:	8d 54 24 65          	lea    edx,[esp+0x65]
c001ac5d:	52                   	push   edx
c001ac5e:	e8 31 5b fe ff       	call   c0000794 <strlen>
c001ac63:	83 c4 10             	add    esp,0x10
c001ac66:	83 f8 3f             	cmp    eax,0x3f
c001ac69:	77 6a                	ja     c001acd5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ac6b:	50                   	push   eax
c001ac6c:	50                   	push   eax
c001ac6d:	8d 54 24 61          	lea    edx,[esp+0x61]
c001ac71:	52                   	push   edx
c001ac72:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ac76:	52                   	push   edx
c001ac77:	e8 b8 5b fe ff       	call   c0000834 <strcpy>
c001ac7c:	58                   	pop    eax
c001ac7d:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ac81:	52                   	push   edx
c001ac82:	e8 0d 5b fe ff       	call   c0000794 <strlen>
c001ac87:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001ac8c:	83 c4 10             	add    esp,0x10
c001ac8f:	31 d2                	xor    edx,edx
c001ac91:	eb 3a                	jmp    c001accd <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001ac93:	80 fb 40             	cmp    bl,0x40
c001ac96:	74 06                	je     c001ac9e <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001ac98:	8d 44 24 58          	lea    eax,[esp+0x58]
c001ac9c:	eb 20                	jmp    c001acbe <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001ac9e:	50                   	push   eax
c001ac9f:	50                   	push   eax
c001aca0:	55                   	push   ebp
c001aca1:	8d 44 24 24          	lea    eax,[esp+0x24]
c001aca5:	50                   	push   eax
c001aca6:	e8 15 5c fe ff       	call   c00008c0 <strcmp>
c001acab:	83 c4 10             	add    esp,0x10
c001acae:	85 c0                	test   eax,eax
c001acb0:	75 dd                	jne    c001ac8f <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001acb2:	eb e4                	jmp    c001ac98 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001acb4:	8d 50 01             	lea    edx,[eax+0x1]
c001acb7:	80 f9 3d             	cmp    cl,0x3d
c001acba:	74 1d                	je     c001acd9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001acbc:	89 d0                	mov    eax,edx
c001acbe:	8a 08                	mov    cl,BYTE PTR [eax]
c001acc0:	84 c9                	test   cl,cl
c001acc2:	75 f0                	jne    c001acb4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001acc4:	eb 0f                	jmp    c001acd5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001acc6:	8d 50 01             	lea    edx,[eax+0x1]
c001acc9:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001accd:	47                   	inc    edi
c001acce:	89 d0                	mov    eax,edx
c001acd0:	e9 3b ff ff ff       	jmp    c001ac10 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001acd5:	31 c0                	xor    eax,eax
c001acd7:	eb 33                	jmp    c001ad0c <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001acd9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001acdd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001ace0:	50                   	push   eax
c001ace1:	50                   	push   eax
c001ace2:	8d 44 24 60          	lea    eax,[esp+0x60]
c001ace6:	50                   	push   eax
c001ace7:	56                   	push   esi
c001ace8:	e8 d3 5b fe ff       	call   c00008c0 <strcmp>
c001aced:	83 c4 10             	add    esp,0x10
c001acf0:	85 c0                	test   eax,eax
c001acf2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001acf6:	75 97                	jne    c001ac8f <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001acf8:	51                   	push   ecx
c001acf9:	51                   	push   ecx
c001acfa:	52                   	push   edx
c001acfb:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001ad02:	e8 2d 5b fe ff       	call   c0000834 <strcpy>
c001ad07:	83 c4 10             	add    esp,0x10
c001ad0a:	b0 01                	mov    al,0x1
c001ad0c:	81 c4 2c 01 00 00    	add    esp,0x12c
c001ad12:	5b                   	pop    ebx
c001ad13:	5e                   	pop    esi
c001ad14:	5f                   	pop    edi
c001ad15:	5d                   	pop    ebp
c001ad16:	c3                   	ret    

c001ad17 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001ad17:	57                   	push   edi
c001ad18:	56                   	push   esi
c001ad19:	53                   	push   ebx
c001ad1a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ad20:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001ad27:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001ad2e:	53                   	push   ebx
c001ad2f:	e8 60 5a fe ff       	call   c0000794 <strlen>
c001ad34:	89 34 24             	mov    DWORD PTR [esp],esi
c001ad37:	89 c7                	mov    edi,eax
c001ad39:	e8 56 5a fe ff       	call   c0000794 <strlen>
c001ad3e:	83 c4 10             	add    esp,0x10
c001ad41:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001ad45:	3d ff 00 00 00       	cmp    eax,0xff
c001ad4a:	0f 87 d3 00 00 00    	ja     c001ae23 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001ad50:	57                   	push   edi
c001ad51:	57                   	push   edi
c001ad52:	56                   	push   esi
c001ad53:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001ad57:	56                   	push   esi
c001ad58:	e8 d7 5a fe ff       	call   c0000834 <strcpy>
c001ad5d:	58                   	pop    eax
c001ad5e:	5a                   	pop    edx
c001ad5f:	68 38 c0 02 c0       	push   0xc002c038
c001ad64:	56                   	push   esi
c001ad65:	e8 0a 5c fe ff       	call   c0000974 <strcat>
c001ad6a:	59                   	pop    ecx
c001ad6b:	5f                   	pop    edi
c001ad6c:	53                   	push   ebx
c001ad6d:	56                   	push   esi
c001ad6e:	e8 01 5c fe ff       	call   c0000974 <strcat>
c001ad73:	58                   	pop    eax
c001ad74:	5a                   	pop    edx
c001ad75:	68 24 bb 02 c0       	push   0xc002bb24
c001ad7a:	56                   	push   esi
c001ad7b:	e8 f4 5b fe ff       	call   c0000974 <strcat>
c001ad80:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ad87:	e8 b4 4a ff ff       	call   c000f840 <malloc>
c001ad8c:	83 c4 0c             	add    esp,0xc
c001ad8f:	89 c3                	mov    ebx,eax
c001ad91:	ff 35 b4 17 03 c0    	push   DWORD PTR ds:0xc00317b4
c001ad97:	56                   	push   esi
c001ad98:	50                   	push   eax
c001ad99:	e8 52 85 ff ff       	call   c00132f0 <File::File(char const*, Process*)>
c001ad9e:	83 c4 10             	add    esp,0x10
c001ada1:	85 db                	test   ebx,ebx
c001ada3:	74 7e                	je     c001ae23 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001ada5:	51                   	push   ecx
c001ada6:	51                   	push   ecx
c001ada7:	6a 01                	push   0x1
c001ada9:	53                   	push   ebx
c001adaa:	e8 a5 85 ff ff       	call   c0013354 <File::open(FileOpenMode)>
c001adaf:	83 c4 10             	add    esp,0x10
c001adb2:	85 c0                	test   eax,eax
c001adb4:	74 08                	je     c001adbe <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001adb6:	83 ec 0c             	sub    esp,0xc
c001adb9:	8b 03                	mov    eax,DWORD PTR [ebx]
c001adbb:	53                   	push   ebx
c001adbc:	eb 5f                	jmp    c001ae1d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001adbe:	52                   	push   edx
c001adbf:	8d 44 24 17          	lea    eax,[esp+0x17]
c001adc3:	50                   	push   eax
c001adc4:	8d 44 24 20          	lea    eax,[esp+0x20]
c001adc8:	50                   	push   eax
c001adc9:	53                   	push   ebx
c001adca:	e8 31 88 ff ff       	call   c0013600 <File::stat(unsigned long long*, bool*)>
c001adcf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001add3:	83 c4 10             	add    esp,0x10
c001add6:	89 c1                	mov    ecx,eax
c001add8:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001addc:	74 31                	je     c001ae0f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001adde:	83 ec 0c             	sub    esp,0xc
c001ade1:	50                   	push   eax
c001ade2:	e8 59 4a ff ff       	call   c000f840 <malloc>
c001ade7:	89 c6                	mov    esi,eax
c001ade9:	58                   	pop    eax
c001adea:	8b 03                	mov    eax,DWORD PTR [ebx]
c001adec:	8d 54 24 20          	lea    edx,[esp+0x20]
c001adf0:	52                   	push   edx
c001adf1:	56                   	push   esi
c001adf2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001adf6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001adfa:	53                   	push   ebx
c001adfb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001adfe:	83 c4 20             	add    esp,0x20
c001ae01:	85 c0                	test   eax,eax
c001ae03:	75 0a                	jne    c001ae0f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001ae05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ae09:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001ae0d:	74 18                	je     c001ae27 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001ae0f:	83 ec 0c             	sub    esp,0xc
c001ae12:	53                   	push   ebx
c001ae13:	e8 9a 85 ff ff       	call   c00133b2 <File::close()>
c001ae18:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ae1a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ae1d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ae20:	83 c4 10             	add    esp,0x10
c001ae23:	31 c0                	xor    eax,eax
c001ae25:	eb 3b                	jmp    c001ae62 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001ae27:	83 ec 0c             	sub    esp,0xc
c001ae2a:	53                   	push   ebx
c001ae2b:	e8 82 85 ff ff       	call   c00133b2 <File::close()>
c001ae30:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ae32:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ae35:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ae38:	83 c4 0c             	add    esp,0xc
c001ae3b:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001ae42:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001ae49:	56                   	push   esi
c001ae4a:	e8 70 fd ff ff       	call   c001abbf <Reg::findLineFromLoadedData(char*, char*, char*)>
c001ae4f:	89 34 24             	mov    DWORD PTR [esp],esi
c001ae52:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001ae56:	e8 f5 49 ff ff       	call   c000f850 <free>
c001ae5b:	83 c4 10             	add    esp,0x10
c001ae5e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001ae62:	81 c4 20 01 00 00    	add    esp,0x120
c001ae68:	5b                   	pop    ebx
c001ae69:	5e                   	pop    esi
c001ae6a:	5f                   	pop    edi
c001ae6b:	c3                   	ret    

c001ae6c <Reg::getLine(char*, char*, char*)>:
c001ae6c:	57                   	push   edi
c001ae6d:	56                   	push   esi
c001ae6e:	53                   	push   ebx
c001ae6f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ae73:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001ae77:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001ae7b:	57                   	push   edi
c001ae7c:	56                   	push   esi
c001ae7d:	53                   	push   ebx
c001ae7e:	68 29 bb 02 c0       	push   0xc002bb29
c001ae83:	e8 8f fe ff ff       	call   c001ad17 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001ae88:	83 c4 10             	add    esp,0x10
c001ae8b:	84 c0                	test   al,al
c001ae8d:	75 10                	jne    c001ae9f <Reg::getLine(char*, char*, char*)+0x33>
c001ae8f:	57                   	push   edi
c001ae90:	56                   	push   esi
c001ae91:	53                   	push   ebx
c001ae92:	68 4e bb 02 c0       	push   0xc002bb4e
c001ae97:	e8 7b fe ff ff       	call   c001ad17 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001ae9c:	83 c4 10             	add    esp,0x10
c001ae9f:	5b                   	pop    ebx
c001aea0:	5e                   	pop    esi
c001aea1:	5f                   	pop    edi
c001aea2:	c3                   	ret    

c001aea3 <Reg::readInt(char*, char*, int*)>:
c001aea3:	55                   	push   ebp
c001aea4:	57                   	push   edi
c001aea5:	56                   	push   esi
c001aea6:	53                   	push   ebx
c001aea7:	81 ec f0 00 00 00    	sub    esp,0xf0
c001aead:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001aeb1:	57                   	push   edi
c001aeb2:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001aeb9:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001aec0:	e8 a7 ff ff ff       	call   c001ae6c <Reg::getLine(char*, char*, char*)>
c001aec5:	83 c4 10             	add    esp,0x10
c001aec8:	84 c0                	test   al,al
c001aeca:	0f 84 b3 00 00 00    	je     c001af83 <Reg::readInt(char*, char*, int*)+0xe0>
c001aed0:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001aed4:	80 fa 2b             	cmp    dl,0x2b
c001aed7:	74 0c                	je     c001aee5 <Reg::readInt(char*, char*, int*)+0x42>
c001aed9:	80 fa 2d             	cmp    dl,0x2d
c001aedc:	75 0e                	jne    c001aeec <Reg::readInt(char*, char*, int*)+0x49>
c001aede:	ba 01 00 00 00       	mov    edx,0x1
c001aee3:	eb 0b                	jmp    c001aef0 <Reg::readInt(char*, char*, int*)+0x4d>
c001aee5:	ba 01 00 00 00       	mov    edx,0x1
c001aeea:	eb 02                	jmp    c001aeee <Reg::readInt(char*, char*, int*)+0x4b>
c001aeec:	31 d2                	xor    edx,edx
c001aeee:	31 c0                	xor    eax,eax
c001aef0:	be 0a 00 00 00       	mov    esi,0xa
c001aef5:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001aefa:	75 20                	jne    c001af1c <Reg::readInt(char*, char*, int*)+0x79>
c001aefc:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001af00:	80 f9 78             	cmp    cl,0x78
c001af03:	75 0a                	jne    c001af0f <Reg::readInt(char*, char*, int*)+0x6c>
c001af05:	83 c2 02             	add    edx,0x2
c001af08:	be 10 00 00 00       	mov    esi,0x10
c001af0d:	eb 0d                	jmp    c001af1c <Reg::readInt(char*, char*, int*)+0x79>
c001af0f:	80 f9 62             	cmp    cl,0x62
c001af12:	75 08                	jne    c001af1c <Reg::readInt(char*, char*, int*)+0x79>
c001af14:	83 c2 02             	add    edx,0x2
c001af17:	be 02 00 00 00       	mov    esi,0x2
c001af1c:	01 d7                	add    edi,edx
c001af1e:	31 d2                	xor    edx,edx
c001af20:	8a 1f                	mov    bl,BYTE PTR [edi]
c001af22:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001af26:	80 fb 0d             	cmp    bl,0xd
c001af29:	0f 94 c3             	sete   bl
c001af2c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001af31:	0f 94 c1             	sete   cl
c001af34:	08 cb                	or     bl,cl
c001af36:	75 3a                	jne    c001af72 <Reg::readInt(char*, char*, int*)+0xcf>
c001af38:	0f af d6             	imul   edx,esi
c001af3b:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001af40:	83 fe 10             	cmp    esi,0x10
c001af43:	75 26                	jne    c001af6b <Reg::readInt(char*, char*, int*)+0xc8>
c001af45:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001af49:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001af4c:	89 e9                	mov    ecx,ebp
c001af4e:	80 f9 05             	cmp    cl,0x5
c001af51:	77 06                	ja     c001af59 <Reg::readInt(char*, char*, int*)+0xb6>
c001af53:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001af57:	eb 16                	jmp    c001af6f <Reg::readInt(char*, char*, int*)+0xcc>
c001af59:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001af5d:	83 e9 61             	sub    ecx,0x61
c001af60:	80 f9 05             	cmp    cl,0x5
c001af63:	77 06                	ja     c001af6b <Reg::readInt(char*, char*, int*)+0xc8>
c001af65:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001af69:	eb 04                	jmp    c001af6f <Reg::readInt(char*, char*, int*)+0xcc>
c001af6b:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001af6f:	47                   	inc    edi
c001af70:	eb ae                	jmp    c001af20 <Reg::readInt(char*, char*, int*)+0x7d>
c001af72:	84 c0                	test   al,al
c001af74:	74 02                	je     c001af78 <Reg::readInt(char*, char*, int*)+0xd5>
c001af76:	f7 da                	neg    edx
c001af78:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001af7f:	89 10                	mov    DWORD PTR [eax],edx
c001af81:	88 d8                	mov    al,bl
c001af83:	81 c4 ec 00 00 00    	add    esp,0xec
c001af89:	5b                   	pop    ebx
c001af8a:	5e                   	pop    esi
c001af8b:	5f                   	pop    edi
c001af8c:	5d                   	pop    ebp
c001af8d:	c3                   	ret    

c001af8e <Reg::readString(char*, char*, char*, int)>:
c001af8e:	57                   	push   edi
c001af8f:	56                   	push   esi
c001af90:	53                   	push   ebx
c001af91:	81 ec d4 00 00 00    	sub    esp,0xd4
c001af97:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001af9e:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001afa2:	57                   	push   edi
c001afa3:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001afaa:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001afb1:	e8 b6 fe ff ff       	call   c001ae6c <Reg::getLine(char*, char*, char*)>
c001afb6:	83 c4 10             	add    esp,0x10
c001afb9:	89 c6                	mov    esi,eax
c001afbb:	84 c0                	test   al,al
c001afbd:	74 44                	je     c001b003 <Reg::readString(char*, char*, char*, int)+0x75>
c001afbf:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001afc6:	31 c0                	xor    eax,eax
c001afc8:	4a                   	dec    edx
c001afc9:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001afcc:	84 c9                	test   cl,cl
c001afce:	74 0f                	je     c001afdf <Reg::readString(char*, char*, char*, int)+0x51>
c001afd0:	39 c2                	cmp    edx,eax
c001afd2:	7e 0b                	jle    c001afdf <Reg::readString(char*, char*, char*, int)+0x51>
c001afd4:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001afd7:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001afdc:	40                   	inc    eax
c001afdd:	eb ea                	jmp    c001afc9 <Reg::readString(char*, char*, char*, int)+0x3b>
c001afdf:	83 ec 0c             	sub    esp,0xc
c001afe2:	53                   	push   ebx
c001afe3:	e8 ac 57 fe ff       	call   c0000794 <strlen>
c001afe8:	83 c4 10             	add    esp,0x10
c001afeb:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001aff0:	75 11                	jne    c001b003 <Reg::readString(char*, char*, char*, int)+0x75>
c001aff2:	83 ec 0c             	sub    esp,0xc
c001aff5:	53                   	push   ebx
c001aff6:	e8 99 57 fe ff       	call   c0000794 <strlen>
c001affb:	83 c4 10             	add    esp,0x10
c001affe:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001b003:	81 c4 d0 00 00 00    	add    esp,0xd0
c001b009:	89 f0                	mov    eax,esi
c001b00b:	5b                   	pop    ebx
c001b00c:	5e                   	pop    esi
c001b00d:	5f                   	pop    edi
c001b00e:	c3                   	ret    

c001b00f <Reg::readBool(char*, char*, bool*)>:
c001b00f:	83 ec 20             	sub    esp,0x20
c001b012:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b016:	50                   	push   eax
c001b017:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b01b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b01f:	e8 7f fe ff ff       	call   c001aea3 <Reg::readInt(char*, char*, int*)>
c001b024:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b029:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b02d:	0f 95 02             	setne  BYTE PTR [edx]
c001b030:	83 c4 2c             	add    esp,0x2c
c001b033:	c3                   	ret    

c001b034 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001b034:	53                   	push   ebx
c001b035:	83 ec 1c             	sub    esp,0x1c
c001b038:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b03c:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b040:	50                   	push   eax
c001b041:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b045:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b049:	e8 c1 ff ff ff       	call   c001b00f <Reg::readBool(char*, char*, bool*)>
c001b04e:	83 c4 10             	add    esp,0x10
c001b051:	84 c0                	test   al,al
c001b053:	74 04                	je     c001b059 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001b055:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001b059:	88 d8                	mov    al,bl
c001b05b:	83 c4 18             	add    esp,0x18
c001b05e:	5b                   	pop    ebx
c001b05f:	c3                   	ret    

c001b060 <Reg::readIntWithDefault(char*, char*, int)>:
c001b060:	53                   	push   ebx
c001b061:	83 ec 1c             	sub    esp,0x1c
c001b064:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b068:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b06c:	50                   	push   eax
c001b06d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b071:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b075:	e8 29 fe ff ff       	call   c001aea3 <Reg::readInt(char*, char*, int*)>
c001b07a:	83 c4 10             	add    esp,0x10
c001b07d:	84 c0                	test   al,al
c001b07f:	74 04                	je     c001b085 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b081:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b085:	89 d8                	mov    eax,ebx
c001b087:	83 c4 18             	add    esp,0x18
c001b08a:	5b                   	pop    ebx
c001b08b:	c3                   	ret    

c001b08c <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b08c:	57                   	push   edi
c001b08d:	56                   	push   esi
c001b08e:	53                   	push   ebx
c001b08f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b093:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b097:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b09b:	56                   	push   esi
c001b09c:	53                   	push   ebx
c001b09d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b0a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b0a5:	e8 e4 fe ff ff       	call   c001af8e <Reg::readString(char*, char*, char*, int)>
c001b0aa:	83 c4 10             	add    esp,0x10
c001b0ad:	84 c0                	test   al,al
c001b0af:	75 1b                	jne    c001b0cc <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001b0b1:	50                   	push   eax
c001b0b2:	56                   	push   esi
c001b0b3:	4e                   	dec    esi
c001b0b4:	6a 00                	push   0x0
c001b0b6:	53                   	push   ebx
c001b0b7:	e8 bc 56 fe ff       	call   c0000778 <memset>
c001b0bc:	83 c4 0c             	add    esp,0xc
c001b0bf:	56                   	push   esi
c001b0c0:	57                   	push   edi
c001b0c1:	53                   	push   ebx
c001b0c2:	89 fb                	mov    ebx,edi
c001b0c4:	e8 7b 56 fe ff       	call   c0000744 <memcpy>
c001b0c9:	83 c4 10             	add    esp,0x10
c001b0cc:	89 d8                	mov    eax,ebx
c001b0ce:	5b                   	pop    ebx
c001b0cf:	5e                   	pop    esi
c001b0d0:	5f                   	pop    edi
c001b0d1:	c3                   	ret    

c001b0d2 <Sys::eject(regs*)>:
c001b0d2:	83 ec 0c             	sub    esp,0xc
c001b0d5:	83 ca ff             	or     edx,0xffffffff
c001b0d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b0dc:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b0df:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b0e4:	83 e9 41             	sub    ecx,0x41
c001b0e7:	83 f9 19             	cmp    ecx,0x19
c001b0ea:	77 18                	ja     c001b104 <Sys::eject(regs*)+0x32>
c001b0ec:	8b 0c 8d 60 e8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd17a0]
c001b0f3:	85 c9                	test   ecx,ecx
c001b0f5:	74 0d                	je     c001b104 <Sys::eject(regs*)+0x32>
c001b0f7:	83 ec 0c             	sub    esp,0xc
c001b0fa:	51                   	push   ecx
c001b0fb:	e8 74 b4 ff ff       	call   c0016574 <LogicalDisk::eject()>
c001b100:	83 c4 10             	add    esp,0x10
c001b103:	99                   	cdq    
c001b104:	83 c4 0c             	add    esp,0xc
c001b107:	c3                   	ret    

c001b108 <Sys::exit(regs*)>:
c001b108:	83 ec 18             	sub    esp,0x18
c001b10b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b10f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b112:	e8 99 35 00 00       	call   c001e6b0 <terminateTask(int)>
c001b117:	83 c8 ff             	or     eax,0xffffffff
c001b11a:	83 c4 1c             	add    esp,0x1c
c001b11d:	89 c2                	mov    edx,eax
c001b11f:	c3                   	ret    

c001b120 <Sys::getCwd(regs*)>:
c001b120:	83 ec 10             	sub    esp,0x10
c001b123:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b127:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b12a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b12d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b132:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b135:	e8 b8 7f ff ff       	call   c00130f2 <Fs::getcwd(Process*, char*, int)>
c001b13a:	83 c4 1c             	add    esp,0x1c
c001b13d:	99                   	cdq    
c001b13e:	c3                   	ret    

c001b13f <Sys::getPID(regs*)>:
c001b13f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b144:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b147:	8b 00                	mov    eax,DWORD PTR [eax]
c001b149:	99                   	cdq    
c001b14a:	c3                   	ret    

c001b14b <Sys::getRAMData(regs*)>:
c001b14b:	8b 0d 94 e2 02 c0    	mov    ecx,DWORD PTR ds:0xc002e294
c001b151:	6b 05 90 e2 02 c0 64 	imul   eax,DWORD PTR ds:0xc002e290,0x64
c001b158:	99                   	cdq    
c001b159:	f7 f9                	idiv   ecx
c001b15b:	c1 e0 18             	shl    eax,0x18
c001b15e:	09 c8                	or     eax,ecx
c001b160:	99                   	cdq    
c001b161:	c3                   	ret    

c001b162 <Sys::loadDLL(regs*)>:
c001b162:	56                   	push   esi
c001b163:	53                   	push   ebx
c001b164:	31 d2                	xor    edx,edx
c001b166:	51                   	push   ecx
c001b167:	b8 01 00 00 00       	mov    eax,0x1
c001b16c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b170:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b174:	0f 84 8c 00 00 00    	je     c001b206 <Sys::loadDLL(regs*)+0xa4>
c001b17a:	83 ec 0c             	sub    esp,0xc
c001b17d:	68 14 01 00 00       	push   0x114
c001b182:	e8 b9 46 ff ff       	call   c000f840 <malloc>
c001b187:	83 c4 0c             	add    esp,0xc
c001b18a:	89 c3                	mov    ebx,eax
c001b18c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b191:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b194:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b197:	53                   	push   ebx
c001b198:	e8 53 81 ff ff       	call   c00132f0 <File::File(char const*, Process*)>
c001b19d:	83 c4 10             	add    esp,0x10
c001b1a0:	31 d2                	xor    edx,edx
c001b1a2:	b8 02 00 00 00       	mov    eax,0x2
c001b1a7:	85 db                	test   ebx,ebx
c001b1a9:	74 5b                	je     c001b206 <Sys::loadDLL(regs*)+0xa4>
c001b1ab:	83 ec 0c             	sub    esp,0xc
c001b1ae:	53                   	push   ebx
c001b1af:	e8 0e 84 ff ff       	call   c00135c2 <File::exists()>
c001b1b4:	83 c4 10             	add    esp,0x10
c001b1b7:	84 c0                	test   al,al
c001b1b9:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b1bb:	75 11                	jne    c001b1ce <Sys::loadDLL(regs*)+0x6c>
c001b1bd:	83 ec 0c             	sub    esp,0xc
c001b1c0:	53                   	push   ebx
c001b1c1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b1c4:	83 c4 10             	add    esp,0x10
c001b1c7:	b8 03 00 00 00       	mov    eax,0x3
c001b1cc:	eb 36                	jmp    c001b204 <Sys::loadDLL(regs*)+0xa2>
c001b1ce:	83 ec 0c             	sub    esp,0xc
c001b1d1:	53                   	push   ebx
c001b1d2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b1d5:	58                   	pop    eax
c001b1d6:	5a                   	pop    edx
c001b1d7:	6a 00                	push   0x0
c001b1d9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b1dc:	e8 c5 23 00 00       	call   c001d5a6 <Thr::loadDLL(char const*, bool)>
c001b1e1:	83 c4 10             	add    esp,0x10
c001b1e4:	89 c1                	mov    ecx,eax
c001b1e6:	31 d2                	xor    edx,edx
c001b1e8:	b8 04 00 00 00       	mov    eax,0x4
c001b1ed:	85 c9                	test   ecx,ecx
c001b1ef:	74 15                	je     c001b206 <Sys::loadDLL(regs*)+0xa4>
c001b1f1:	53                   	push   ebx
c001b1f2:	53                   	push   ebx
c001b1f3:	ff 35 48 e2 02 c0    	push   DWORD PTR ds:0xc002e248
c001b1f9:	51                   	push   ecx
c001b1fa:	e8 f6 25 00 00       	call   c001d7f5 <Thr::executeDLL(unsigned long, void*)>
c001b1ff:	83 c4 10             	add    esp,0x10
c001b202:	31 c0                	xor    eax,eax
c001b204:	31 d2                	xor    edx,edx
c001b206:	59                   	pop    ecx
c001b207:	5b                   	pop    ebx
c001b208:	5e                   	pop    esi
c001b209:	c3                   	ret    

c001b20a <Sys::read(regs*)>:
c001b20a:	57                   	push   edi
c001b20b:	56                   	push   esi
c001b20c:	53                   	push   ebx
c001b20d:	83 ec 10             	sub    esp,0x10
c001b210:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b214:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b217:	83 f8 02             	cmp    eax,0x2
c001b21a:	77 10                	ja     c001b22c <Sys::read(regs*)+0x22>
c001b21c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b221:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b224:	8b 88 26 19 00 00    	mov    ecx,DWORD PTR [eax+0x1926]
c001b22a:	eb 0e                	jmp    c001b23a <Sys::read(regs*)+0x30>
c001b22c:	83 ec 0c             	sub    esp,0xc
c001b22f:	50                   	push   eax
c001b230:	e8 b0 67 ff ff       	call   c00119e5 <getFromFileDescriptor(int)>
c001b235:	83 c4 10             	add    esp,0x10
c001b238:	89 c1                	mov    ecx,eax
c001b23a:	83 c8 ff             	or     eax,0xffffffff
c001b23d:	85 c9                	test   ecx,ecx
c001b23f:	89 c2                	mov    edx,eax
c001b241:	74 28                	je     c001b26b <Sys::read(regs*)+0x61>
c001b243:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b24b:	31 ff                	xor    edi,edi
c001b24d:	83 ec 0c             	sub    esp,0xc
c001b250:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b252:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b256:	52                   	push   edx
c001b257:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b25a:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b25d:	57                   	push   edi
c001b25e:	56                   	push   esi
c001b25f:	51                   	push   ecx
c001b260:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b263:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b267:	83 c4 20             	add    esp,0x20
c001b26a:	99                   	cdq    
c001b26b:	83 c4 10             	add    esp,0x10
c001b26e:	5b                   	pop    ebx
c001b26f:	5e                   	pop    esi
c001b270:	5f                   	pop    edi
c001b271:	c3                   	ret    

c001b272 <Sys::sbrk(regs*)>:
c001b272:	56                   	push   esi
c001b273:	53                   	push   ebx
c001b274:	50                   	push   eax
c001b275:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b27a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b27e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b281:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001b284:	8b 88 32 19 00 00    	mov    ecx,DWORD PTR [eax+0x1932]
c001b28a:	85 db                	test   ebx,ebx
c001b28c:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001b28f:	74 02                	je     c001b293 <Sys::sbrk(regs*)+0x21>
c001b291:	79 06                	jns    c001b299 <Sys::sbrk(regs*)+0x27>
c001b293:	89 f0                	mov    eax,esi
c001b295:	31 d2                	xor    edx,edx
c001b297:	eb 2a                	jmp    c001b2c3 <Sys::sbrk(regs*)+0x51>
c001b299:	83 c8 ff             	or     eax,0xffffffff
c001b29c:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001b2a2:	89 c2                	mov    edx,eax
c001b2a4:	77 1d                	ja     c001b2c3 <Sys::sbrk(regs*)+0x51>
c001b2a6:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001b2ac:	50                   	push   eax
c001b2ad:	c1 ea 0c             	shr    edx,0xc
c001b2b0:	68 07 0c 00 00       	push   0xc07
c001b2b5:	52                   	push   edx
c001b2b6:	51                   	push   ecx
c001b2b7:	e8 48 70 ff ff       	call   c0012304 <VAS::allocatePages(int, int)>
c001b2bc:	89 f0                	mov    eax,esi
c001b2be:	31 d2                	xor    edx,edx
c001b2c0:	83 c4 10             	add    esp,0x10
c001b2c3:	59                   	pop    ecx
c001b2c4:	5b                   	pop    ebx
c001b2c5:	5e                   	pop    esi
c001b2c6:	c3                   	ret    

c001b2c7 <Sys::setCwd(regs*)>:
c001b2c7:	83 ec 14             	sub    esp,0x14
c001b2ca:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b2ce:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b2d1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b2d6:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b2d9:	e8 83 83 ff ff       	call   c0013661 <Fs::setcwd(Process*, char*)>
c001b2de:	83 c4 1c             	add    esp,0x1c
c001b2e1:	99                   	cdq    
c001b2e2:	c3                   	ret    

c001b2e3 <Sys::setTime(regs*)>:
c001b2e3:	55                   	push   ebp
c001b2e4:	31 d2                	xor    edx,edx
c001b2e6:	57                   	push   edi
c001b2e7:	bf 18 00 00 00       	mov    edi,0x18
c001b2ec:	56                   	push   esi
c001b2ed:	53                   	push   ebx
c001b2ee:	bb 3c 00 00 00       	mov    ebx,0x3c
c001b2f3:	83 ec 30             	sub    esp,0x30
c001b2f6:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001b2fa:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001b2fd:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b300:	f7 f3                	div    ebx
c001b302:	89 d6                	mov    esi,edx
c001b304:	31 d2                	xor    edx,edx
c001b306:	f7 f3                	div    ebx
c001b308:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b30b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b30f:	bb 10 0e 00 00       	mov    ebx,0xe10
c001b314:	31 d2                	xor    edx,edx
c001b316:	f7 f3                	div    ebx
c001b318:	31 d2                	xor    edx,edx
c001b31a:	bb 0c 00 00 00       	mov    ebx,0xc
c001b31f:	f7 f7                	div    edi
c001b321:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b324:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b328:	0f b7 cd             	movzx  ecx,bp
c001b32b:	56                   	push   esi
c001b32c:	89 c7                	mov    edi,eax
c001b32e:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001b332:	c1 e6 10             	shl    esi,0x10
c001b335:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b339:	83 e7 1f             	and    edi,0x1f
c001b33c:	51                   	push   ecx
c001b33d:	47                   	inc    edi
c001b33e:	c1 e8 05             	shr    eax,0x5
c001b341:	31 d2                	xor    edx,edx
c001b343:	f7 f3                	div    ebx
c001b345:	31 db                	xor    ebx,ebx
c001b347:	52                   	push   edx
c001b348:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001b34c:	57                   	push   edi
c001b34d:	68 69 bb 02 c0       	push   0xc002bb69
c001b352:	e8 41 7a ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001b357:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b35b:	89 f8                	mov    eax,edi
c001b35d:	31 c9                	xor    ecx,ecx
c001b35f:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b363:	88 c1                	mov    cl,al
c001b365:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001b36b:	88 d5                	mov    ch,dl
c001b36d:	c1 e0 10             	shl    eax,0x10
c001b370:	0f b7 d1             	movzx  edx,cx
c001b373:	09 c2                	or     edx,eax
c001b375:	89 d8                	mov    eax,ebx
c001b377:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001b37c:	09 f0                	or     eax,esi
c001b37e:	89 c3                	mov    ebx,eax
c001b380:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001b384:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b388:	83 c4 18             	add    esp,0x18
c001b38b:	53                   	push   ebx
c001b38c:	52                   	push   edx
c001b38d:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b391:	8d 74 24 28          	lea    esi,[esp+0x28]
c001b395:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b399:	e8 dd 89 ff ff       	call   c0013d7b <datetimeToSeconds(datetime_t)>
c001b39e:	83 c4 0c             	add    esp,0xc
c001b3a1:	52                   	push   edx
c001b3a2:	50                   	push   eax
c001b3a3:	56                   	push   esi
c001b3a4:	e8 59 8b ff ff       	call   c0013f02 <secondsToDatetime(unsigned long long)>
c001b3a9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b3ad:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b3b1:	51                   	push   ecx
c001b3b2:	89 d6                	mov    esi,edx
c001b3b4:	51                   	push   ecx
c001b3b5:	c1 ee 10             	shr    esi,0x10
c001b3b8:	89 f3                	mov    ebx,esi
c001b3ba:	0f b6 f3             	movzx  esi,bl
c001b3bd:	56                   	push   esi
c001b3be:	0f b6 f6             	movzx  esi,dh
c001b3c1:	0f b6 d2             	movzx  edx,dl
c001b3c4:	56                   	push   esi
c001b3c5:	52                   	push   edx
c001b3c6:	89 c2                	mov    edx,eax
c001b3c8:	c1 ea 10             	shr    edx,0x10
c001b3cb:	52                   	push   edx
c001b3cc:	0f b6 d4             	movzx  edx,ah
c001b3cf:	0f b6 c0             	movzx  eax,al
c001b3d2:	52                   	push   edx
c001b3d3:	50                   	push   eax
c001b3d4:	68 85 bb 02 c0       	push   0xc002bb85
c001b3d9:	e8 ba 79 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001b3de:	83 c4 2c             	add    esp,0x2c
c001b3e1:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c001b3e6:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b3ea:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b3ee:	53                   	push   ebx
c001b3ef:	51                   	push   ecx
c001b3f0:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b3f6:	e8 a7 8a ff ff       	call   c0013ea2 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b3fb:	83 f0 01             	xor    eax,0x1
c001b3fe:	31 d2                	xor    edx,edx
c001b400:	0f b6 c0             	movzx  eax,al
c001b403:	83 c4 3c             	add    esp,0x3c
c001b406:	5b                   	pop    ebx
c001b407:	5e                   	pop    esi
c001b408:	5f                   	pop    edi
c001b409:	5d                   	pop    ebp
c001b40a:	c3                   	ret    

c001b40b <Sys::timezone(regs*)>:
c001b40b:	53                   	push   ebx
c001b40c:	83 ec 08             	sub    esp,0x8
c001b40f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b413:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b417:	75 17                	jne    c001b430 <Sys::timezone(regs*)+0x25>
c001b419:	83 ec 0c             	sub    esp,0xc
c001b41c:	68 a1 bb 02 c0       	push   0xc002bba1
c001b421:	e8 72 79 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001b426:	83 c8 ff             	or     eax,0xffffffff
c001b429:	83 c4 10             	add    esp,0x10
c001b42c:	89 c2                	mov    edx,eax
c001b42e:	eb 20                	jmp    c001b450 <Sys::timezone(regs*)+0x45>
c001b430:	83 ec 0c             	sub    esp,0xc
c001b433:	68 d9 bb 02 c0       	push   0xc002bbd9
c001b438:	e8 5b 79 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001b43d:	58                   	pop    eax
c001b43e:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b441:	e8 be 87 ff ff       	call   c0013c04 <User::loadClockSettings(int)>
c001b446:	83 c4 10             	add    esp,0x10
c001b449:	b8 01 00 00 00       	mov    eax,0x1
c001b44e:	31 d2                	xor    edx,edx
c001b450:	83 c4 08             	add    esp,0x8
c001b453:	5b                   	pop    ebx
c001b454:	c3                   	ret    

c001b455 <Sys::write(regs*)>:
c001b455:	57                   	push   edi
c001b456:	56                   	push   esi
c001b457:	53                   	push   ebx
c001b458:	83 ec 10             	sub    esp,0x10
c001b45b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b45f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b462:	83 f8 02             	cmp    eax,0x2
c001b465:	77 10                	ja     c001b477 <Sys::write(regs*)+0x22>
c001b467:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b46c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b46f:	8b 88 26 19 00 00    	mov    ecx,DWORD PTR [eax+0x1926]
c001b475:	eb 0e                	jmp    c001b485 <Sys::write(regs*)+0x30>
c001b477:	83 ec 0c             	sub    esp,0xc
c001b47a:	50                   	push   eax
c001b47b:	e8 65 65 ff ff       	call   c00119e5 <getFromFileDescriptor(int)>
c001b480:	83 c4 10             	add    esp,0x10
c001b483:	89 c1                	mov    ecx,eax
c001b485:	83 c8 ff             	or     eax,0xffffffff
c001b488:	85 c9                	test   ecx,ecx
c001b48a:	89 c2                	mov    edx,eax
c001b48c:	74 28                	je     c001b4b6 <Sys::write(regs*)+0x61>
c001b48e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b496:	31 ff                	xor    edi,edi
c001b498:	83 ec 0c             	sub    esp,0xc
c001b49b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b49d:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b4a1:	52                   	push   edx
c001b4a2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b4a5:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b4a8:	57                   	push   edi
c001b4a9:	56                   	push   esi
c001b4aa:	51                   	push   ecx
c001b4ab:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b4ae:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b4b2:	83 c4 20             	add    esp,0x20
c001b4b5:	99                   	cdq    
c001b4b6:	83 c4 10             	add    esp,0x10
c001b4b9:	5b                   	pop    ebx
c001b4ba:	5e                   	pop    esi
c001b4bb:	5f                   	pop    edi
c001b4bc:	c3                   	ret    

c001b4bd <Sys::wsbe(regs*)>:
c001b4bd:	57                   	push   edi
c001b4be:	b9 0b 00 00 00       	mov    ecx,0xb
c001b4c3:	56                   	push   esi
c001b4c4:	be 18 bc 02 c0       	mov    esi,0xc002bc18
c001b4c9:	53                   	push   ebx
c001b4ca:	83 ec 30             	sub    esp,0x30
c001b4cd:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b4d1:	fc                   	cld    
c001b4d2:	83 ec 0c             	sub    esp,0xc
c001b4d5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b4d7:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b4db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b4e0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b4e3:	8b b0 26 19 00 00    	mov    esi,DWORD PTR [eax+0x1926]
c001b4e9:	8b 06                	mov    eax,DWORD PTR [esi]
c001b4eb:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b4ee:	57                   	push   edi
c001b4ef:	e8 a0 52 fe ff       	call   c0000794 <strlen>
c001b4f4:	5a                   	pop    edx
c001b4f5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b4f9:	52                   	push   edx
c001b4fa:	31 d2                	xor    edx,edx
c001b4fc:	57                   	push   edi
c001b4fd:	52                   	push   edx
c001b4fe:	50                   	push   eax
c001b4ff:	56                   	push   esi
c001b500:	ff d3                	call   ebx
c001b502:	83 c4 14             	add    esp,0x14
c001b505:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b509:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b50c:	e8 9f 31 00 00       	call   c001e6b0 <terminateTask(int)>
c001b511:	83 c4 40             	add    esp,0x40
c001b514:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b519:	5b                   	pop    ebx
c001b51a:	31 d2                	xor    edx,edx
c001b51c:	5e                   	pop    esi
c001b51d:	5f                   	pop    edi
c001b51e:	c3                   	ret    

c001b51f <Sys::yield(regs*)>:
c001b51f:	57                   	push   edi
c001b520:	56                   	push   esi
c001b521:	53                   	push   ebx
c001b522:	e8 46 27 00 00       	call   c001dc6d <lockScheduler()>
c001b527:	e8 7c 2a 00 00       	call   c001dfa8 <schedule()>
c001b52c:	e8 3e 27 00 00       	call   c001dc6f <unlockScheduler()>
c001b531:	8b 35 d0 e8 02 c0    	mov    esi,DWORD PTR ds:0xc002e8d0
c001b537:	8b 3d d4 e8 02 c0    	mov    edi,DWORD PTR ds:0xc002e8d4
c001b53d:	89 f0                	mov    eax,esi
c001b53f:	89 fb                	mov    ebx,edi
c001b541:	89 f1                	mov    ecx,esi
c001b543:	c1 e0 07             	shl    eax,0x7
c001b546:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b54a:	25 80 30 0f 00       	and    eax,0xf3080
c001b54f:	c1 eb 17             	shr    ebx,0x17
c001b552:	31 c8                	xor    eax,ecx
c001b554:	89 da                	mov    edx,ebx
c001b556:	5b                   	pop    ebx
c001b557:	5e                   	pop    esi
c001b558:	5f                   	pop    edi
c001b559:	c3                   	ret    

c001b55a <sysCallSeekDir(regs*)>:
c001b55a:	31 c0                	xor    eax,eax
c001b55c:	31 d2                	xor    edx,edx
c001b55e:	c3                   	ret    

c001b55f <sysCallTellDir(regs*)>:
c001b55f:	31 c0                	xor    eax,eax
c001b561:	31 d2                	xor    edx,edx
c001b563:	c3                   	ret    

c001b564 <sysCallVerify(regs*)>:
c001b564:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b568:	31 d2                	xor    edx,edx
c001b56a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b56d:	c3                   	ret    

c001b56e <sysFormatDisk(regs*)>:
c001b56e:	56                   	push   esi
c001b56f:	53                   	push   ebx
c001b570:	53                   	push   ebx
c001b571:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b575:	8b 1d d0 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e3d0
c001b57b:	eb 25                	jmp    c001b5a2 <sysFormatDisk(regs*)+0x34>
c001b57d:	83 ec 0c             	sub    esp,0xc
c001b580:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b583:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b585:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b588:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b58b:	50                   	push   eax
c001b58c:	ff 34 85 60 e8 02 c0 	push   DWORD PTR [eax*4-0x3ffd17a0]
c001b593:	53                   	push   ebx
c001b594:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b597:	83 c4 20             	add    esp,0x20
c001b59a:	83 f8 08             	cmp    eax,0x8
c001b59d:	75 12                	jne    c001b5b1 <sysFormatDisk(regs*)+0x43>
c001b59f:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b5a2:	85 db                	test   ebx,ebx
c001b5a4:	75 d7                	jne    c001b57d <sysFormatDisk(regs*)+0xf>
c001b5a6:	59                   	pop    ecx
c001b5a7:	b8 03 00 00 00       	mov    eax,0x3
c001b5ac:	31 d2                	xor    edx,edx
c001b5ae:	5b                   	pop    ebx
c001b5af:	5e                   	pop    esi
c001b5b0:	c3                   	ret    
c001b5b1:	85 c0                	test   eax,eax
c001b5b3:	74 1b                	je     c001b5d0 <sysFormatDisk(regs*)+0x62>
c001b5b5:	83 f8 09             	cmp    eax,0x9
c001b5b8:	74 0b                	je     c001b5c5 <sysFormatDisk(regs*)+0x57>
c001b5ba:	59                   	pop    ecx
c001b5bb:	b8 02 00 00 00       	mov    eax,0x2
c001b5c0:	31 d2                	xor    edx,edx
c001b5c2:	5b                   	pop    ebx
c001b5c3:	5e                   	pop    esi
c001b5c4:	c3                   	ret    
c001b5c5:	59                   	pop    ecx
c001b5c6:	b8 01 00 00 00       	mov    eax,0x1
c001b5cb:	31 d2                	xor    edx,edx
c001b5cd:	5b                   	pop    ebx
c001b5ce:	5e                   	pop    esi
c001b5cf:	c3                   	ret    
c001b5d0:	59                   	pop    ecx
c001b5d1:	31 c0                	xor    eax,eax
c001b5d3:	31 d2                	xor    edx,edx
c001b5d5:	5b                   	pop    ebx
c001b5d6:	5e                   	pop    esi
c001b5d7:	c3                   	ret    

c001b5d8 <sysSetDiskVolumeLabel(regs*)>:
c001b5d8:	56                   	push   esi
c001b5d9:	53                   	push   ebx
c001b5da:	53                   	push   ebx
c001b5db:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b5df:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b5e2:	83 f8 19             	cmp    eax,0x19
c001b5e5:	77 29                	ja     c001b610 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b5e7:	8b 0c 85 60 e8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd17a0]
c001b5ee:	85 c9                	test   ecx,ecx
c001b5f0:	74 1e                	je     c001b610 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b5f2:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b5f5:	85 d2                	test   edx,edx
c001b5f7:	74 17                	je     c001b610 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b5f9:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b5ff:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b601:	52                   	push   edx
c001b602:	50                   	push   eax
c001b603:	51                   	push   ecx
c001b604:	53                   	push   ebx
c001b605:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b608:	83 c4 10             	add    esp,0x10
c001b60b:	99                   	cdq    
c001b60c:	59                   	pop    ecx
c001b60d:	5b                   	pop    ebx
c001b60e:	5e                   	pop    esi
c001b60f:	c3                   	ret    
c001b610:	59                   	pop    ecx
c001b611:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b616:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b61b:	5b                   	pop    ebx
c001b61c:	5e                   	pop    esi
c001b61d:	c3                   	ret    

c001b61e <sysGetDiskVolumeLabel(regs*)>:
c001b61e:	57                   	push   edi
c001b61f:	56                   	push   esi
c001b620:	53                   	push   ebx
c001b621:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b625:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b628:	83 fa 19             	cmp    edx,0x19
c001b62b:	77 34                	ja     c001b661 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b62d:	8b 0c 95 60 e8 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd17a0]
c001b634:	85 c9                	test   ecx,ecx
c001b636:	74 29                	je     c001b661 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b638:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b63b:	85 db                	test   ebx,ebx
c001b63d:	74 22                	je     c001b661 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b63f:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b642:	85 c0                	test   eax,eax
c001b644:	74 1b                	je     c001b661 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b646:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b64c:	83 ec 0c             	sub    esp,0xc
c001b64f:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b651:	50                   	push   eax
c001b652:	53                   	push   ebx
c001b653:	52                   	push   edx
c001b654:	51                   	push   ecx
c001b655:	56                   	push   esi
c001b656:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b659:	83 c4 20             	add    esp,0x20
c001b65c:	99                   	cdq    
c001b65d:	5b                   	pop    ebx
c001b65e:	5e                   	pop    esi
c001b65f:	5f                   	pop    edi
c001b660:	c3                   	ret    
c001b661:	5b                   	pop    ebx
c001b662:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b667:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b66c:	5e                   	pop    esi
c001b66d:	5f                   	pop    edi
c001b66e:	c3                   	ret    

c001b66f <sysShutdown(regs*)>:
c001b66f:	83 ec 0c             	sub    esp,0xc
c001b672:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b676:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b679:	85 c0                	test   eax,eax
c001b67b:	74 18                	je     c001b695 <sysShutdown(regs*)+0x26>
c001b67d:	83 f8 01             	cmp    eax,0x1
c001b680:	74 38                	je     c001b6ba <sysShutdown(regs*)+0x4b>
c001b682:	83 f8 02             	cmp    eax,0x2
c001b685:	74 24                	je     c001b6ab <sysShutdown(regs*)+0x3c>
c001b687:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b68c:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b691:	83 c4 0c             	add    esp,0xc
c001b694:	c3                   	ret    
c001b695:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c001b69a:	8b 10                	mov    edx,DWORD PTR [eax]
c001b69c:	6a 00                	push   0x0
c001b69e:	6a 00                	push   0x0
c001b6a0:	6a 00                	push   0x0
c001b6a2:	50                   	push   eax
c001b6a3:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b6a6:	83 c4 10             	add    esp,0x10
c001b6a9:	eb dc                	jmp    c001b687 <sysShutdown(regs*)+0x18>
c001b6ab:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c001b6b0:	8b 10                	mov    edx,DWORD PTR [eax]
c001b6b2:	6a 00                	push   0x0
c001b6b4:	6a 00                	push   0x0
c001b6b6:	6a 01                	push   0x1
c001b6b8:	eb e8                	jmp    c001b6a2 <sysShutdown(regs*)+0x33>
c001b6ba:	a1 00 09 03 c0       	mov    eax,ds:0xc0030900
c001b6bf:	85 c0                	test   eax,eax
c001b6c1:	74 02                	je     c001b6c5 <sysShutdown(regs*)+0x56>
c001b6c3:	ff d0                	call   eax
c001b6c5:	31 c0                	xor    eax,eax
c001b6c7:	31 d2                	xor    edx,edx
c001b6c9:	83 c4 0c             	add    esp,0xc
c001b6cc:	c3                   	ret    

c001b6cd <sysCallRealpath(regs*)>:
c001b6cd:	83 ec 0c             	sub    esp,0xc
c001b6d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6d4:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b6d7:	85 d2                	test   edx,edx
c001b6d9:	74 07                	je     c001b6e2 <sysCallRealpath(regs*)+0x15>
c001b6db:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b6de:	85 c0                	test   eax,eax
c001b6e0:	75 0b                	jne    c001b6ed <sysCallRealpath(regs*)+0x20>
c001b6e2:	b8 01 00 00 00       	mov    eax,0x1
c001b6e7:	31 d2                	xor    edx,edx
c001b6e9:	83 c4 0c             	add    esp,0xc
c001b6ec:	c3                   	ret    
c001b6ed:	51                   	push   ecx
c001b6ee:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b6f4:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b6f7:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b6fd:	51                   	push   ecx
c001b6fe:	52                   	push   edx
c001b6ff:	50                   	push   eax
c001b700:	e8 41 7a ff ff       	call   c0013146 <Fs::standardiseFiles(char*, char const*, char const*)>
c001b705:	83 c4 10             	add    esp,0x10
c001b708:	31 c0                	xor    eax,eax
c001b70a:	31 d2                	xor    edx,edx
c001b70c:	83 c4 0c             	add    esp,0xc
c001b70f:	c3                   	ret    

c001b710 <sysCallGetArgc(regs*)>:
c001b710:	83 ec 14             	sub    esp,0x14
c001b713:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b718:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b71b:	ff b0 36 19 00 00    	push   DWORD PTR [eax+0x1936]
c001b721:	68 44 bc 02 c0       	push   0xc002bc44
c001b726:	e8 6d 76 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001b72b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b730:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b733:	8b 80 36 19 00 00    	mov    eax,DWORD PTR [eax+0x1936]
c001b739:	83 c4 1c             	add    esp,0x1c
c001b73c:	99                   	cdq    
c001b73d:	c3                   	ret    

c001b73e <sysCallReadDir(regs*)>:
c001b73e:	53                   	push   ebx
c001b73f:	83 ec 18             	sub    esp,0x18
c001b742:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b746:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b749:	83 f8 02             	cmp    eax,0x2
c001b74c:	76 53                	jbe    c001b7a1 <sysCallReadDir(regs*)+0x63>
c001b74e:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b751:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001b757:	77 4f                	ja     c001b7a8 <sysCallReadDir(regs*)+0x6a>
c001b759:	83 ec 0c             	sub    esp,0xc
c001b75c:	50                   	push   eax
c001b75d:	e8 83 62 ff ff       	call   c00119e5 <getFromFileDescriptor(int)>
c001b762:	83 c4 10             	add    esp,0x10
c001b765:	85 c0                	test   eax,eax
c001b767:	74 50                	je     c001b7b9 <sysCallReadDir(regs*)+0x7b>
c001b769:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b771:	83 ec 0c             	sub    esp,0xc
c001b774:	8b 10                	mov    edx,DWORD PTR [eax]
c001b776:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b77a:	51                   	push   ecx
c001b77b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b77e:	6a 00                	push   0x0
c001b780:	68 10 01 00 00       	push   0x110
c001b785:	50                   	push   eax
c001b786:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b789:	83 c4 20             	add    esp,0x20
c001b78c:	85 c0                	test   eax,eax
c001b78e:	74 38                	je     c001b7c8 <sysCallReadDir(regs*)+0x8a>
c001b790:	83 f8 07             	cmp    eax,0x7
c001b793:	74 0c                	je     c001b7a1 <sysCallReadDir(regs*)+0x63>
c001b795:	b8 02 00 00 00       	mov    eax,0x2
c001b79a:	31 d2                	xor    edx,edx
c001b79c:	83 c4 18             	add    esp,0x18
c001b79f:	5b                   	pop    ebx
c001b7a0:	c3                   	ret    
c001b7a1:	b8 01 00 00 00       	mov    eax,0x1
c001b7a6:	eb f2                	jmp    c001b79a <sysCallReadDir(regs*)+0x5c>
c001b7a8:	83 ec 08             	sub    esp,0x8
c001b7ab:	52                   	push   edx
c001b7ac:	68 5c bd 02 c0       	push   0xc002bd5c
c001b7b1:	e8 e2 75 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001b7b6:	83 c4 10             	add    esp,0x10
c001b7b9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b7be:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b7c3:	83 c4 18             	add    esp,0x18
c001b7c6:	5b                   	pop    ebx
c001b7c7:	c3                   	ret    
c001b7c8:	31 c0                	xor    eax,eax
c001b7ca:	eb ce                	jmp    c001b79a <sysCallReadDir(regs*)+0x5c>

c001b7cc <sysCallIsATTY(regs*)>:
c001b7cc:	83 ec 0c             	sub    esp,0xc
c001b7cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7d3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b7d6:	83 f8 02             	cmp    eax,0x2
c001b7d9:	76 07                	jbe    c001b7e2 <sysCallIsATTY(regs*)+0x16>
c001b7db:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b7e0:	75 26                	jne    c001b808 <sysCallIsATTY(regs*)+0x3c>
c001b7e2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b7e7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b7ea:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c001b7f0:	85 c0                	test   eax,eax
c001b7f2:	74 24                	je     c001b818 <sysCallIsATTY(regs*)+0x4c>
c001b7f4:	83 ec 0c             	sub    esp,0xc
c001b7f7:	8b 10                	mov    edx,DWORD PTR [eax]
c001b7f9:	50                   	push   eax
c001b7fa:	ff 12                	call   DWORD PTR [edx]
c001b7fc:	31 d2                	xor    edx,edx
c001b7fe:	0f b6 c0             	movzx  eax,al
c001b801:	83 c4 10             	add    esp,0x10
c001b804:	83 c4 0c             	add    esp,0xc
c001b807:	c3                   	ret    
c001b808:	83 ec 0c             	sub    esp,0xc
c001b80b:	50                   	push   eax
c001b80c:	e8 d4 61 ff ff       	call   c00119e5 <getFromFileDescriptor(int)>
c001b811:	83 c4 10             	add    esp,0x10
c001b814:	85 c0                	test   eax,eax
c001b816:	75 dc                	jne    c001b7f4 <sysCallIsATTY(regs*)+0x28>
c001b818:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b81d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b822:	83 c4 0c             	add    esp,0xc
c001b825:	c3                   	ret    

c001b826 <sysCallSeek(regs*)>:
c001b826:	53                   	push   ebx
c001b827:	83 ec 08             	sub    esp,0x8
c001b82a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b82e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b831:	83 f8 02             	cmp    eax,0x2
c001b834:	76 4a                	jbe    c001b880 <sysCallSeek(regs*)+0x5a>
c001b836:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b83b:	77 32                	ja     c001b86f <sysCallSeek(regs*)+0x49>
c001b83d:	83 ec 0c             	sub    esp,0xc
c001b840:	50                   	push   eax
c001b841:	e8 9f 61 ff ff       	call   c00119e5 <getFromFileDescriptor(int)>
c001b846:	83 c4 0c             	add    esp,0xc
c001b849:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b84c:	31 db                	xor    ebx,ebx
c001b84e:	53                   	push   ebx
c001b84f:	51                   	push   ecx
c001b850:	50                   	push   eax
c001b851:	e8 bc 7b ff ff       	call   c0013412 <File::seek(unsigned long long)>
c001b856:	83 c4 10             	add    esp,0x10
c001b859:	85 c0                	test   eax,eax
c001b85b:	0f 95 c0             	setne  al
c001b85e:	31 d2                	xor    edx,edx
c001b860:	0f b6 c0             	movzx  eax,al
c001b863:	f7 d8                	neg    eax
c001b865:	83 d2 00             	adc    edx,0x0
c001b868:	83 c4 08             	add    esp,0x8
c001b86b:	f7 da                	neg    edx
c001b86d:	5b                   	pop    ebx
c001b86e:	c3                   	ret    
c001b86f:	83 ec 08             	sub    esp,0x8
c001b872:	50                   	push   eax
c001b873:	68 4f bc 02 c0       	push   0xc002bc4f
c001b878:	e8 1b 75 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001b87d:	83 c4 10             	add    esp,0x10
c001b880:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b885:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b88a:	83 c4 08             	add    esp,0x8
c001b88d:	5b                   	pop    ebx
c001b88e:	c3                   	ret    

c001b88f <sysCallTell(regs*)>:
c001b88f:	53                   	push   ebx
c001b890:	83 ec 08             	sub    esp,0x8
c001b893:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b897:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b89a:	83 f8 02             	cmp    eax,0x2
c001b89d:	76 5e                	jbe    c001b8fd <sysCallTell(regs*)+0x6e>
c001b89f:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b8a4:	77 2d                	ja     c001b8d3 <sysCallTell(regs*)+0x44>
c001b8a6:	83 ec 0c             	sub    esp,0xc
c001b8a9:	50                   	push   eax
c001b8aa:	e8 36 61 ff ff       	call   c00119e5 <getFromFileDescriptor(int)>
c001b8af:	5a                   	pop    edx
c001b8b0:	59                   	pop    ecx
c001b8b1:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b8b4:	50                   	push   eax
c001b8b5:	e8 ae 7b ff ff       	call   c0013468 <File::tell(unsigned long long*)>
c001b8ba:	83 c4 10             	add    esp,0x10
c001b8bd:	85 c0                	test   eax,eax
c001b8bf:	0f 95 c0             	setne  al
c001b8c2:	31 d2                	xor    edx,edx
c001b8c4:	0f b6 c0             	movzx  eax,al
c001b8c7:	f7 d8                	neg    eax
c001b8c9:	83 d2 00             	adc    edx,0x0
c001b8cc:	83 c4 08             	add    esp,0x8
c001b8cf:	f7 da                	neg    edx
c001b8d1:	5b                   	pop    ebx
c001b8d2:	c3                   	ret    
c001b8d3:	83 ec 08             	sub    esp,0x8
c001b8d6:	50                   	push   eax
c001b8d7:	68 69 bc 02 c0       	push   0xc002bc69
c001b8dc:	e8 b7 74 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001b8e1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b8e4:	83 c4 10             	add    esp,0x10
c001b8e7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b8ed:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b8f4:	31 d2                	xor    edx,edx
c001b8f6:	31 c0                	xor    eax,eax
c001b8f8:	83 c4 08             	add    esp,0x8
c001b8fb:	5b                   	pop    ebx
c001b8fc:	c3                   	ret    
c001b8fd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b902:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b907:	83 c4 08             	add    esp,0x8
c001b90a:	5b                   	pop    ebx
c001b90b:	c3                   	ret    

c001b90c <sysCallSize(regs*)>:
c001b90c:	53                   	push   ebx
c001b90d:	83 ec 18             	sub    esp,0x18
c001b910:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b914:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b917:	83 f8 02             	cmp    eax,0x2
c001b91a:	76 64                	jbe    c001b980 <sysCallSize(regs*)+0x74>
c001b91c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b921:	77 33                	ja     c001b956 <sysCallSize(regs*)+0x4a>
c001b923:	83 ec 0c             	sub    esp,0xc
c001b926:	50                   	push   eax
c001b927:	e8 b9 60 ff ff       	call   c00119e5 <getFromFileDescriptor(int)>
c001b92c:	83 c4 0c             	add    esp,0xc
c001b92f:	8d 54 24 13          	lea    edx,[esp+0x13]
c001b933:	52                   	push   edx
c001b934:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b937:	50                   	push   eax
c001b938:	e8 c3 7c ff ff       	call   c0013600 <File::stat(unsigned long long*, bool*)>
c001b93d:	83 c4 10             	add    esp,0x10
c001b940:	85 c0                	test   eax,eax
c001b942:	0f 95 c0             	setne  al
c001b945:	31 d2                	xor    edx,edx
c001b947:	0f b6 c0             	movzx  eax,al
c001b94a:	f7 d8                	neg    eax
c001b94c:	83 d2 00             	adc    edx,0x0
c001b94f:	83 c4 18             	add    esp,0x18
c001b952:	f7 da                	neg    edx
c001b954:	5b                   	pop    ebx
c001b955:	c3                   	ret    
c001b956:	83 ec 08             	sub    esp,0x8
c001b959:	50                   	push   eax
c001b95a:	68 83 bc 02 c0       	push   0xc002bc83
c001b95f:	e8 34 74 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001b964:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b967:	83 c4 10             	add    esp,0x10
c001b96a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b970:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b977:	31 d2                	xor    edx,edx
c001b979:	31 c0                	xor    eax,eax
c001b97b:	83 c4 18             	add    esp,0x18
c001b97e:	5b                   	pop    ebx
c001b97f:	c3                   	ret    
c001b980:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b985:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b98a:	83 c4 18             	add    esp,0x18
c001b98d:	5b                   	pop    ebx
c001b98e:	c3                   	ret    

c001b98f <sysCallSizeFromFilename(regs*)>:
c001b98f:	57                   	push   edi
c001b990:	56                   	push   esi
c001b991:	53                   	push   ebx
c001b992:	83 ec 20             	sub    esp,0x20
c001b995:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b999:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001b99c:	83 fb 02             	cmp    ebx,0x2
c001b99f:	0f 86 99 00 00 00    	jbe    c001ba3e <sysCallSizeFromFilename(regs*)+0xaf>
c001b9a5:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001b9ab:	77 65                	ja     c001ba12 <sysCallSizeFromFilename(regs*)+0x83>
c001b9ad:	83 ec 0c             	sub    esp,0xc
c001b9b0:	68 14 01 00 00       	push   0x114
c001b9b5:	e8 86 3e ff ff       	call   c000f840 <malloc>
c001b9ba:	83 c4 0c             	add    esp,0xc
c001b9bd:	89 c6                	mov    esi,eax
c001b9bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b9c4:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b9c7:	53                   	push   ebx
c001b9c8:	56                   	push   esi
c001b9c9:	e8 22 79 ff ff       	call   c00132f0 <File::File(char const*, Process*)>
c001b9ce:	83 c4 0c             	add    esp,0xc
c001b9d1:	8d 44 24 23          	lea    eax,[esp+0x23]
c001b9d5:	50                   	push   eax
c001b9d6:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001b9d9:	56                   	push   esi
c001b9da:	e8 21 7c ff ff       	call   c0013600 <File::stat(unsigned long long*, bool*)>
c001b9df:	83 c4 10             	add    esp,0x10
c001b9e2:	85 f6                	test   esi,esi
c001b9e4:	74 14                	je     c001b9fa <sysCallSizeFromFilename(regs*)+0x6b>
c001b9e6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b9ea:	8b 16                	mov    edx,DWORD PTR [esi]
c001b9ec:	83 ec 0c             	sub    esp,0xc
c001b9ef:	56                   	push   esi
c001b9f0:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b9f3:	83 c4 10             	add    esp,0x10
c001b9f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b9fa:	85 c0                	test   eax,eax
c001b9fc:	0f 95 c0             	setne  al
c001b9ff:	31 d2                	xor    edx,edx
c001ba01:	0f b6 c0             	movzx  eax,al
c001ba04:	f7 d8                	neg    eax
c001ba06:	83 d2 00             	adc    edx,0x0
c001ba09:	83 c4 20             	add    esp,0x20
c001ba0c:	f7 da                	neg    edx
c001ba0e:	5b                   	pop    ebx
c001ba0f:	5e                   	pop    esi
c001ba10:	5f                   	pop    edi
c001ba11:	c3                   	ret    
c001ba12:	83 ec 08             	sub    esp,0x8
c001ba15:	53                   	push   ebx
c001ba16:	68 83 bc 02 c0       	push   0xc002bc83
c001ba1b:	e8 78 73 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001ba20:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001ba23:	83 c4 10             	add    esp,0x10
c001ba26:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ba2c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ba33:	31 d2                	xor    edx,edx
c001ba35:	83 c4 20             	add    esp,0x20
c001ba38:	31 c0                	xor    eax,eax
c001ba3a:	5b                   	pop    ebx
c001ba3b:	5e                   	pop    esi
c001ba3c:	5f                   	pop    edi
c001ba3d:	c3                   	ret    
c001ba3e:	83 c4 20             	add    esp,0x20
c001ba41:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba46:	5b                   	pop    ebx
c001ba47:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba4c:	5e                   	pop    esi
c001ba4d:	5f                   	pop    edi
c001ba4e:	c3                   	ret    

c001ba4f <sysCallClose(regs*)>:
c001ba4f:	53                   	push   ebx
c001ba50:	83 ec 08             	sub    esp,0x8
c001ba53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba57:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ba5a:	83 f8 02             	cmp    eax,0x2
c001ba5d:	76 50                	jbe    c001baaf <sysCallClose(regs*)+0x60>
c001ba5f:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001ba64:	74 58                	je     c001babe <sysCallClose(regs*)+0x6f>
c001ba66:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001ba6b:	74 60                	je     c001bacd <sysCallClose(regs*)+0x7e>
c001ba6d:	77 2f                	ja     c001ba9e <sysCallClose(regs*)+0x4f>
c001ba6f:	83 ec 0c             	sub    esp,0xc
c001ba72:	50                   	push   eax
c001ba73:	e8 6d 5f ff ff       	call   c00119e5 <getFromFileDescriptor(int)>
c001ba78:	89 c3                	mov    ebx,eax
c001ba7a:	89 04 24             	mov    DWORD PTR [esp],eax
c001ba7d:	e8 30 79 ff ff       	call   c00133b2 <File::close()>
c001ba82:	83 c4 10             	add    esp,0x10
c001ba85:	85 db                	test   ebx,ebx
c001ba87:	74 0c                	je     c001ba95 <sysCallClose(regs*)+0x46>
c001ba89:	83 ec 0c             	sub    esp,0xc
c001ba8c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ba8e:	53                   	push   ebx
c001ba8f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ba92:	83 c4 10             	add    esp,0x10
c001ba95:	31 c0                	xor    eax,eax
c001ba97:	31 d2                	xor    edx,edx
c001ba99:	83 c4 08             	add    esp,0x8
c001ba9c:	5b                   	pop    ebx
c001ba9d:	c3                   	ret    
c001ba9e:	83 ec 08             	sub    esp,0x8
c001baa1:	50                   	push   eax
c001baa2:	68 80 bd 02 c0       	push   0xc002bd80
c001baa7:	e8 ec 72 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001baac:	83 c4 10             	add    esp,0x10
c001baaf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bab4:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bab9:	83 c4 08             	add    esp,0x8
c001babc:	5b                   	pop    ebx
c001babd:	c3                   	ret    
c001babe:	83 ec 0c             	sub    esp,0xc
c001bac1:	68 9e bc 02 c0       	push   0xc002bc9e
c001bac6:	e8 cd 72 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001bacb:	eb c5                	jmp    c001ba92 <sysCallClose(regs*)+0x43>
c001bacd:	83 ec 0c             	sub    esp,0xc
c001bad0:	68 ac bc 02 c0       	push   0xc002bcac
c001bad5:	eb ef                	jmp    c001bac6 <sysCallClose(regs*)+0x77>

c001bad7 <sysCallOpenDir(regs*)>:
c001bad7:	56                   	push   esi
c001bad8:	53                   	push   ebx
c001bad9:	53                   	push   ebx
c001bada:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bade:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001bae1:	85 f6                	test   esi,esi
c001bae3:	74 59                	je     c001bb3e <sysCallOpenDir(regs*)+0x67>
c001bae5:	83 ec 0c             	sub    esp,0xc
c001bae8:	68 14 01 00 00       	push   0x114
c001baed:	e8 4e 3d ff ff       	call   c000f840 <malloc>
c001baf2:	83 c4 0c             	add    esp,0xc
c001baf5:	89 c6                	mov    esi,eax
c001baf7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bafc:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001baff:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bb02:	56                   	push   esi
c001bb03:	e8 94 7c ff ff       	call   c001379c <Directory::Directory(char const*, Process*)>
c001bb08:	83 c4 10             	add    esp,0x10
c001bb0b:	85 f6                	test   esi,esi
c001bb0d:	74 2f                	je     c001bb3e <sysCallOpenDir(regs*)+0x67>
c001bb0f:	83 ec 0c             	sub    esp,0xc
c001bb12:	56                   	push   esi
c001bb13:	e8 e8 7c ff ff       	call   c0013800 <Directory::open()>
c001bb18:	83 c4 10             	add    esp,0x10
c001bb1b:	85 c0                	test   eax,eax
c001bb1d:	75 1f                	jne    c001bb3e <sysCallOpenDir(regs*)+0x67>
c001bb1f:	83 ec 0c             	sub    esp,0xc
c001bb22:	56                   	push   esi
c001bb23:	e8 c8 5b ff ff       	call   c00116f0 <UnixFile::getFileDescriptor()>
c001bb28:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bb2b:	83 c4 10             	add    esp,0x10
c001bb2e:	89 02                	mov    DWORD PTR [edx],eax
c001bb30:	c1 f8 1f             	sar    eax,0x1f
c001bb33:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bb36:	31 c0                	xor    eax,eax
c001bb38:	59                   	pop    ecx
c001bb39:	31 d2                	xor    edx,edx
c001bb3b:	5b                   	pop    ebx
c001bb3c:	5e                   	pop    esi
c001bb3d:	c3                   	ret    
c001bb3e:	59                   	pop    ecx
c001bb3f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb44:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb49:	5b                   	pop    ebx
c001bb4a:	5e                   	pop    esi
c001bb4b:	c3                   	ret    

c001bb4c <sysCallCloseDir(regs*)>:
c001bb4c:	53                   	push   ebx
c001bb4d:	83 ec 08             	sub    esp,0x8
c001bb50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb54:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bb57:	83 f8 02             	cmp    eax,0x2
c001bb5a:	76 47                	jbe    c001bba3 <sysCallCloseDir(regs*)+0x57>
c001bb5c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bb61:	77 2f                	ja     c001bb92 <sysCallCloseDir(regs*)+0x46>
c001bb63:	83 ec 0c             	sub    esp,0xc
c001bb66:	50                   	push   eax
c001bb67:	e8 79 5e ff ff       	call   c00119e5 <getFromFileDescriptor(int)>
c001bb6c:	89 c3                	mov    ebx,eax
c001bb6e:	89 04 24             	mov    DWORD PTR [esp],eax
c001bb71:	e8 e6 7c ff ff       	call   c001385c <Directory::close()>
c001bb76:	83 c4 10             	add    esp,0x10
c001bb79:	85 db                	test   ebx,ebx
c001bb7b:	74 0c                	je     c001bb89 <sysCallCloseDir(regs*)+0x3d>
c001bb7d:	83 ec 0c             	sub    esp,0xc
c001bb80:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bb82:	53                   	push   ebx
c001bb83:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bb86:	83 c4 10             	add    esp,0x10
c001bb89:	31 c0                	xor    eax,eax
c001bb8b:	31 d2                	xor    edx,edx
c001bb8d:	83 c4 08             	add    esp,0x8
c001bb90:	5b                   	pop    ebx
c001bb91:	c3                   	ret    
c001bb92:	83 ec 08             	sub    esp,0x8
c001bb95:	50                   	push   eax
c001bb96:	68 a8 bd 02 c0       	push   0xc002bda8
c001bb9b:	e8 f8 71 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001bba0:	83 c4 10             	add    esp,0x10
c001bba3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bba8:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bbad:	83 c4 08             	add    esp,0x8
c001bbb0:	5b                   	pop    ebx
c001bbb1:	c3                   	ret    

c001bbb2 <sysCallMakeDir(regs*)>:
c001bbb2:	56                   	push   esi
c001bbb3:	53                   	push   ebx
c001bbb4:	83 ec 10             	sub    esp,0x10
c001bbb7:	68 14 01 00 00       	push   0x114
c001bbbc:	e8 7f 3c ff ff       	call   c000f840 <malloc>
c001bbc1:	83 c4 0c             	add    esp,0xc
c001bbc4:	89 c3                	mov    ebx,eax
c001bbc6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bbcb:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bbce:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bbd2:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bbd5:	53                   	push   ebx
c001bbd6:	e8 c1 7b ff ff       	call   c001379c <Directory::Directory(char const*, Process*)>
c001bbdb:	83 c4 10             	add    esp,0x10
c001bbde:	85 db                	test   ebx,ebx
c001bbe0:	74 32                	je     c001bc14 <sysCallMakeDir(regs*)+0x62>
c001bbe2:	83 ec 0c             	sub    esp,0xc
c001bbe5:	53                   	push   ebx
c001bbe6:	e8 f5 7d ff ff       	call   c00139e0 <Directory::create()>
c001bbeb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bbee:	89 c6                	mov    esi,eax
c001bbf0:	e8 67 7c ff ff       	call   c001385c <Directory::close()>
c001bbf5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bbf7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bbfa:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bbfd:	83 c4 10             	add    esp,0x10
c001bc00:	31 c0                	xor    eax,eax
c001bc02:	59                   	pop    ecx
c001bc03:	85 f6                	test   esi,esi
c001bc05:	5b                   	pop    ebx
c001bc06:	0f 95 c0             	setne  al
c001bc09:	5e                   	pop    esi
c001bc0a:	31 d2                	xor    edx,edx
c001bc0c:	f7 d8                	neg    eax
c001bc0e:	83 d2 00             	adc    edx,0x0
c001bc11:	f7 da                	neg    edx
c001bc13:	c3                   	ret    
c001bc14:	59                   	pop    ecx
c001bc15:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc1a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc1f:	5b                   	pop    ebx
c001bc20:	5e                   	pop    esi
c001bc21:	c3                   	ret    

c001bc22 <sysCallWait(regs*)>:
c001bc22:	83 ec 10             	sub    esp,0x10
c001bc25:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bc29:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001bc2c:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bc2f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001bc32:	e8 ec 24 00 00       	call   c001e123 <waitTask(int, int*, int)>
c001bc37:	83 c4 1c             	add    esp,0x1c
c001bc3a:	99                   	cdq    
c001bc3b:	c3                   	ret    

c001bc3c <sysCallNotImpl(regs*)>:
c001bc3c:	83 ec 18             	sub    esp,0x18
c001bc3f:	68 ba bc 02 c0       	push   0xc002bcba
c001bc44:	e8 2a e8 ff ff       	call   c001a473 <Krnl::panic(char const*)>
c001bc49:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc4e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc53:	83 c4 1c             	add    esp,0x1c
c001bc56:	c3                   	ret    

c001bc57 <sysPanic(regs*)>:
c001bc57:	83 ec 18             	sub    esp,0x18
c001bc5a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bc5e:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bc61:	e8 0d e8 ff ff       	call   c001a473 <Krnl::panic(char const*)>
c001bc66:	c7 04 24 d4 bc 02 c0 	mov    DWORD PTR [esp],0xc002bcd4
c001bc6d:	e8 01 e8 ff ff       	call   c001a473 <Krnl::panic(char const*)>
c001bc72:	b8 01 00 00 00       	mov    eax,0x1
c001bc77:	31 d2                	xor    edx,edx
c001bc79:	83 c4 1c             	add    esp,0x1c
c001bc7c:	c3                   	ret    

c001bc7d <sysCallRmdir(regs*)>:
c001bc7d:	56                   	push   esi
c001bc7e:	53                   	push   ebx
c001bc7f:	83 ec 20             	sub    esp,0x20
c001bc82:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bc86:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bc89:	68 14 01 00 00       	push   0x114
c001bc8e:	e8 ad 3b ff ff       	call   c000f840 <malloc>
c001bc93:	83 c4 0c             	add    esp,0xc
c001bc96:	89 c3                	mov    ebx,eax
c001bc98:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc9d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bca0:	56                   	push   esi
c001bca1:	53                   	push   ebx
c001bca2:	e8 49 76 ff ff       	call   c00132f0 <File::File(char const*, Process*)>
c001bca7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bcaa:	e8 1d 78 ff ff       	call   c00134cc <File::unlink()>
c001bcaf:	83 c4 10             	add    esp,0x10
c001bcb2:	85 db                	test   ebx,ebx
c001bcb4:	74 14                	je     c001bcca <sysCallRmdir(regs*)+0x4d>
c001bcb6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bcba:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bcbc:	83 ec 0c             	sub    esp,0xc
c001bcbf:	53                   	push   ebx
c001bcc0:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bcc3:	83 c4 10             	add    esp,0x10
c001bcc6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bcca:	85 c0                	test   eax,eax
c001bccc:	0f 95 c0             	setne  al
c001bccf:	31 d2                	xor    edx,edx
c001bcd1:	0f b6 c0             	movzx  eax,al
c001bcd4:	f7 d8                	neg    eax
c001bcd6:	83 d2 00             	adc    edx,0x0
c001bcd9:	83 c4 14             	add    esp,0x14
c001bcdc:	f7 da                	neg    edx
c001bcde:	5b                   	pop    ebx
c001bcdf:	5e                   	pop    esi
c001bce0:	c3                   	ret    

c001bce1 <sysCallUnlink(regs*)>:
c001bce1:	56                   	push   esi
c001bce2:	53                   	push   ebx
c001bce3:	83 ec 20             	sub    esp,0x20
c001bce6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bcea:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bced:	68 14 01 00 00       	push   0x114
c001bcf2:	e8 49 3b ff ff       	call   c000f840 <malloc>
c001bcf7:	83 c4 0c             	add    esp,0xc
c001bcfa:	89 c3                	mov    ebx,eax
c001bcfc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd01:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bd04:	56                   	push   esi
c001bd05:	53                   	push   ebx
c001bd06:	e8 e5 75 ff ff       	call   c00132f0 <File::File(char const*, Process*)>
c001bd0b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bd0e:	e8 b9 77 ff ff       	call   c00134cc <File::unlink()>
c001bd13:	83 c4 10             	add    esp,0x10
c001bd16:	85 db                	test   ebx,ebx
c001bd18:	74 14                	je     c001bd2e <sysCallUnlink(regs*)+0x4d>
c001bd1a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bd1e:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bd20:	83 ec 0c             	sub    esp,0xc
c001bd23:	53                   	push   ebx
c001bd24:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bd27:	83 c4 10             	add    esp,0x10
c001bd2a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bd2e:	85 c0                	test   eax,eax
c001bd30:	0f 95 c0             	setne  al
c001bd33:	31 d2                	xor    edx,edx
c001bd35:	0f b6 c0             	movzx  eax,al
c001bd38:	f7 d8                	neg    eax
c001bd3a:	83 d2 00             	adc    edx,0x0
c001bd3d:	83 c4 14             	add    esp,0x14
c001bd40:	f7 da                	neg    edx
c001bd42:	5b                   	pop    ebx
c001bd43:	5e                   	pop    esi
c001bd44:	c3                   	ret    

c001bd45 <sysCallGetArgv(regs*)>:
c001bd45:	83 ec 0c             	sub    esp,0xc
c001bd48:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bd4c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001bd4f:	85 c0                	test   eax,eax
c001bd51:	78 2b                	js     c001bd7e <sysCallGetArgv(regs*)+0x39>
c001bd53:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001bd59:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001bd5c:	3b 81 36 19 00 00    	cmp    eax,DWORD PTR [ecx+0x1936]
c001bd62:	7d 1a                	jge    c001bd7e <sysCallGetArgv(regs*)+0x39>
c001bd64:	8b 84 81 3a 19 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x193a]
c001bd6b:	85 c0                	test   eax,eax
c001bd6d:	74 17                	je     c001bd86 <sysCallGetArgv(regs*)+0x41>
c001bd6f:	83 ec 08             	sub    esp,0x8
c001bd72:	50                   	push   eax
c001bd73:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001bd76:	e8 b9 4a fe ff       	call   c0000834 <strcpy>
c001bd7b:	83 c4 10             	add    esp,0x10
c001bd7e:	31 c0                	xor    eax,eax
c001bd80:	31 d2                	xor    edx,edx
c001bd82:	83 c4 0c             	add    esp,0xc
c001bd85:	c3                   	ret    
c001bd86:	b8 01 00 00 00       	mov    eax,0x1
c001bd8b:	31 d2                	xor    edx,edx
c001bd8d:	83 c4 0c             	add    esp,0xc
c001bd90:	c3                   	ret    

c001bd91 <sysCallTTYName(regs*)>:
c001bd91:	56                   	push   esi
c001bd92:	53                   	push   ebx
c001bd93:	53                   	push   ebx
c001bd94:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bd98:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001bd9b:	85 c0                	test   eax,eax
c001bd9d:	74 5f                	je     c001bdfe <sysCallTTYName(regs*)+0x6d>
c001bd9f:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001bda2:	83 f8 02             	cmp    eax,0x2
c001bda5:	77 3e                	ja     c001bde5 <sysCallTTYName(regs*)+0x54>
c001bda7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bdac:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bdaf:	8b 98 26 19 00 00    	mov    ebx,DWORD PTR [eax+0x1926]
c001bdb5:	85 db                	test   ebx,ebx
c001bdb7:	74 45                	je     c001bdfe <sysCallTTYName(regs*)+0x6d>
c001bdb9:	83 ec 0c             	sub    esp,0xc
c001bdbc:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bdbe:	53                   	push   ebx
c001bdbf:	ff 10                	call   DWORD PTR [eax]
c001bdc1:	83 c4 10             	add    esp,0x10
c001bdc4:	84 c0                	test   al,al
c001bdc6:	74 41                	je     c001be09 <sysCallTTYName(regs*)+0x78>
c001bdc8:	83 ec 08             	sub    esp,0x8
c001bdcb:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001bdd1:	53                   	push   ebx
c001bdd2:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001bdd5:	e8 5a 4a fe ff       	call   c0000834 <strcpy>
c001bdda:	83 c4 10             	add    esp,0x10
c001bddd:	31 c0                	xor    eax,eax
c001bddf:	59                   	pop    ecx
c001bde0:	31 d2                	xor    edx,edx
c001bde2:	5b                   	pop    ebx
c001bde3:	5e                   	pop    esi
c001bde4:	c3                   	ret    
c001bde5:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bdea:	74 bb                	je     c001bda7 <sysCallTTYName(regs*)+0x16>
c001bdec:	83 ec 0c             	sub    esp,0xc
c001bdef:	50                   	push   eax
c001bdf0:	e8 f0 5b ff ff       	call   c00119e5 <getFromFileDescriptor(int)>
c001bdf5:	83 c4 10             	add    esp,0x10
c001bdf8:	89 c3                	mov    ebx,eax
c001bdfa:	85 db                	test   ebx,ebx
c001bdfc:	75 bb                	jne    c001bdb9 <sysCallTTYName(regs*)+0x28>
c001bdfe:	59                   	pop    ecx
c001bdff:	b8 01 00 00 00       	mov    eax,0x1
c001be04:	31 d2                	xor    edx,edx
c001be06:	5b                   	pop    ebx
c001be07:	5e                   	pop    esi
c001be08:	c3                   	ret    
c001be09:	59                   	pop    ecx
c001be0a:	b8 02 00 00 00       	mov    eax,0x2
c001be0f:	31 d2                	xor    edx,edx
c001be11:	5b                   	pop    ebx
c001be12:	5e                   	pop    esi
c001be13:	c3                   	ret    

c001be14 <sysCallUSleep(regs*)>:
c001be14:	83 ec 14             	sub    esp,0x14
c001be17:	b8 e8 03 00 00       	mov    eax,0x3e8
c001be1c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001be20:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001be27:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001be2a:	01 ca                	add    edx,ecx
c001be2c:	52                   	push   edx
c001be2d:	50                   	push   eax
c001be2e:	e8 89 23 00 00       	call   c001e1bc <nanoSleep(unsigned long long)>
c001be33:	31 c0                	xor    eax,eax
c001be35:	31 d2                	xor    edx,edx
c001be37:	83 c4 1c             	add    esp,0x1c
c001be3a:	c3                   	ret    

c001be3b <sysCallSpawn(regs*)>:
c001be3b:	56                   	push   esi
c001be3c:	53                   	push   ebx
c001be3d:	53                   	push   ebx
c001be3e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001be42:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001be45:	85 f6                	test   esi,esi
c001be47:	75 08                	jne    c001be51 <sysCallSpawn(regs*)+0x16>
c001be49:	59                   	pop    ecx
c001be4a:	31 c0                	xor    eax,eax
c001be4c:	31 d2                	xor    edx,edx
c001be4e:	5b                   	pop    ebx
c001be4f:	5e                   	pop    esi
c001be50:	c3                   	ret    
c001be51:	83 ec 0c             	sub    esp,0xc
c001be54:	68 3f 1b 00 00       	push   0x1b3f
c001be59:	e8 e2 39 ff ff       	call   c000f840 <malloc>
c001be5e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001be61:	89 c6                	mov    esi,eax
c001be63:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be68:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001be6b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001be6e:	56                   	push   esi
c001be6f:	e8 44 1a 00 00       	call   c001d8b8 <Process::Process(char const*, Process*, char**)>
c001be74:	83 c4 20             	add    esp,0x20
c001be77:	80 be 3e 1b 00 00 00 	cmp    BYTE PTR [esi+0x1b3e],0x0
c001be7e:	75 c9                	jne    c001be49 <sysCallSpawn(regs*)+0xe>
c001be80:	83 ec 0c             	sub    esp,0xc
c001be83:	56                   	push   esi
c001be84:	e8 f9 1f 00 00       	call   c001de82 <Process::createUserThread()>
c001be89:	8b 06                	mov    eax,DWORD PTR [esi]
c001be8b:	83 c4 10             	add    esp,0x10
c001be8e:	99                   	cdq    
c001be8f:	59                   	pop    ecx
c001be90:	5b                   	pop    ebx
c001be91:	5e                   	pop    esi
c001be92:	c3                   	ret    

c001be93 <sysCallGetEnv(regs*)>:
c001be93:	55                   	push   ebp
c001be94:	57                   	push   edi
c001be95:	56                   	push   esi
c001be96:	53                   	push   ebx
c001be97:	83 ec 28             	sub    esp,0x28
c001be9a:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001be9e:	68 e3 bc 02 c0       	push   0xc002bce3
c001bea3:	e8 f0 6e ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001bea8:	5f                   	pop    edi
c001bea9:	8b 5e 24             	mov    ebx,DWORD PTR [esi+0x24]
c001beac:	5d                   	pop    ebp
c001bead:	53                   	push   ebx
c001beae:	68 29 c0 02 c0       	push   0xc002c029
c001beb3:	e8 e0 6e ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001beb8:	58                   	pop    eax
c001beb9:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001bebc:	5a                   	pop    edx
c001bebd:	57                   	push   edi
c001bebe:	68 ec bc 02 c0       	push   0xc002bcec
c001bec3:	e8 d0 6e ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001bec8:	59                   	pop    ecx
c001bec9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bece:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bed1:	e8 b9 e4 ff ff       	call   c001a38f <Krnl::getProcessTotalEnvCount(Process*)>
c001bed6:	5a                   	pop    edx
c001bed7:	89 c5                	mov    ebp,eax
c001bed9:	59                   	pop    ecx
c001beda:	50                   	push   eax
c001bedb:	68 f6 bc 02 c0       	push   0xc002bcf6
c001bee0:	e8 b3 6e ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001bee5:	83 c4 10             	add    esp,0x10
c001bee8:	39 ef                	cmp    edi,ebp
c001beea:	7c 15                	jl     c001bf01 <sysCallGetEnv(regs*)+0x6e>
c001beec:	85 db                	test   ebx,ebx
c001beee:	75 0c                	jne    c001befc <sysCallGetEnv(regs*)+0x69>
c001bef0:	83 c4 1c             	add    esp,0x1c
c001bef3:	31 c0                	xor    eax,eax
c001bef5:	5b                   	pop    ebx
c001bef6:	31 d2                	xor    edx,edx
c001bef8:	5e                   	pop    esi
c001bef9:	5f                   	pop    edi
c001befa:	5d                   	pop    ebp
c001befb:	c3                   	ret    
c001befc:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001beff:	eb ef                	jmp    c001bef0 <sysCallGetEnv(regs*)+0x5d>
c001bf01:	83 ec 0c             	sub    esp,0xc
c001bf04:	68 02 bd 02 c0       	push   0xc002bd02
c001bf09:	e8 8a 6e ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001bf0e:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bf12:	83 c4 0c             	add    esp,0xc
c001bf15:	57                   	push   edi
c001bf16:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001bf1c:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001bf1f:	50                   	push   eax
c001bf20:	e8 8a e4 ff ff       	call   c001a3af <Krnl::getProcessEnvPair(Process*, int)>
c001bf25:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001bf29:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001bf2d:	68 a8 c0 02 c0       	push   0xc002c0a8
c001bf32:	e8 61 6e ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001bf37:	83 c4 10             	add    esp,0x10
c001bf3a:	8b 76 28             	mov    esi,DWORD PTR [esi+0x28]
c001bf3d:	85 f6                	test   esi,esi
c001bf3f:	75 47                	jne    c001bf88 <sysCallGetEnv(regs*)+0xf5>
c001bf41:	83 ec 0c             	sub    esp,0xc
c001bf44:	55                   	push   ebp
c001bf45:	e8 4a 48 fe ff       	call   c0000794 <strlen>
c001bf4a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bf4d:	89 c3                	mov    ebx,eax
c001bf4f:	e8 40 48 fe ff       	call   c0000794 <strlen>
c001bf54:	5a                   	pop    edx
c001bf55:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001bf59:	59                   	pop    ecx
c001bf5a:	50                   	push   eax
c001bf5b:	68 05 bd 02 c0       	push   0xc002bd05
c001bf60:	e8 33 6e ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001bf65:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001bf68:	e8 27 48 fe ff       	call   c0000794 <strlen>
c001bf6d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bf70:	89 c3                	mov    ebx,eax
c001bf72:	e8 1d 48 fe ff       	call   c0000794 <strlen>
c001bf77:	83 c4 10             	add    esp,0x10
c001bf7a:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001bf7e:	83 c4 1c             	add    esp,0x1c
c001bf81:	31 d2                	xor    edx,edx
c001bf83:	5b                   	pop    ebx
c001bf84:	5e                   	pop    esi
c001bf85:	5f                   	pop    edi
c001bf86:	5d                   	pop    ebp
c001bf87:	c3                   	ret    
c001bf88:	83 ec 0c             	sub    esp,0xc
c001bf8b:	68 c2 c0 02 c0       	push   0xc002c0c2
c001bf90:	e8 03 6e ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001bf95:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001bf98:	58                   	pop    eax
c001bf99:	5a                   	pop    edx
c001bf9a:	55                   	push   ebp
c001bf9b:	53                   	push   ebx
c001bf9c:	e8 93 48 fe ff       	call   c0000834 <strcpy>
c001bfa1:	59                   	pop    ecx
c001bfa2:	5e                   	pop    esi
c001bfa3:	68 0f bd 02 c0       	push   0xc002bd0f
c001bfa8:	53                   	push   ebx
c001bfa9:	e8 c6 49 fe ff       	call   c0000974 <strcat>
c001bfae:	5d                   	pop    ebp
c001bfaf:	58                   	pop    eax
c001bfb0:	57                   	push   edi
c001bfb1:	53                   	push   ebx
c001bfb2:	e8 bd 49 fe ff       	call   c0000974 <strcat>
c001bfb7:	c7 04 24 dc c0 02 c0 	mov    DWORD PTR [esp],0xc002c0dc
c001bfbe:	e8 d5 6d ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001bfc3:	83 c4 10             	add    esp,0x10
c001bfc6:	e9 25 ff ff ff       	jmp    c001bef0 <sysCallGetEnv(regs*)+0x5d>

c001bfcb <sysAppSettings(regs*)>:
c001bfcb:	53                   	push   ebx
c001bfcc:	83 ec 08             	sub    esp,0x8
c001bfcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfd3:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001bfd6:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001bfdc:	25 e0 1f 00 00       	and    eax,0x1fe0
c001bfe1:	66 3d c0 09          	cmp    ax,0x9c0
c001bfe5:	75 2f                	jne    c001c016 <sysAppSettings(regs*)+0x4b>
c001bfe7:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001bfed:	83 e0 1f             	and    eax,0x1f
c001bff0:	3c 01                	cmp    al,0x1
c001bff2:	74 2e                	je     c001c022 <sysAppSettings(regs*)+0x57>
c001bff4:	3c 07                	cmp    al,0x7
c001bff6:	0f 84 bd 00 00 00    	je     c001c0b9 <sysAppSettings(regs*)+0xee>
c001bffc:	84 c0                	test   al,al
c001bffe:	0f 84 dc 00 00 00    	je     c001c0e0 <sysAppSettings(regs*)+0x115>
c001c004:	3c 08                	cmp    al,0x8
c001c006:	74 6d                	je     c001c075 <sysAppSettings(regs*)+0xaa>
c001c008:	0f b6 c0             	movzx  eax,al
c001c00b:	83 c4 08             	add    esp,0x8
c001c00e:	05 e8 03 00 00       	add    eax,0x3e8
c001c013:	5b                   	pop    ebx
c001c014:	99                   	cdq    
c001c015:	c3                   	ret    
c001c016:	b8 01 00 00 00       	mov    eax,0x1
c001c01b:	31 d2                	xor    edx,edx
c001c01d:	83 c4 08             	add    esp,0x8
c001c020:	5b                   	pop    ebx
c001c021:	c3                   	ret    
c001c022:	51                   	push   ecx
c001c023:	68 00 01 00 00       	push   0x100
c001c028:	6a 00                	push   0x0
c001c02a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c02f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c032:	83 c0 0c             	add    eax,0xc
c001c035:	50                   	push   eax
c001c036:	e8 3d 47 fe ff       	call   c0000778 <memset>
c001c03b:	83 c4 0c             	add    esp,0xc
c001c03e:	68 ff 00 00 00       	push   0xff
c001c043:	53                   	push   ebx
c001c044:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c049:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c04c:	83 c0 0c             	add    eax,0xc
c001c04f:	50                   	push   eax
c001c050:	e8 ef 46 fe ff       	call   c0000744 <memcpy>
c001c055:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c05a:	5b                   	pop    ebx
c001c05b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c05e:	5a                   	pop    edx
c001c05f:	8d 50 0c             	lea    edx,[eax+0xc]
c001c062:	52                   	push   edx
c001c063:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001c069:	e8 f2 4a ff ff       	call   c0010b60 <VgaText::setTitle(char*)>
c001c06e:	83 c4 10             	add    esp,0x10
c001c071:	31 c0                	xor    eax,eax
c001c073:	eb a6                	jmp    c001c01b <sysAppSettings(regs*)+0x50>
c001c075:	83 ec 08             	sub    esp,0x8
c001c078:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c07e:	83 e0 0f             	and    eax,0xf
c001c081:	50                   	push   eax
c001c082:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c087:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c08a:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001c090:	e8 bb 4a ff ff       	call   c0010b50 <VgaText::setTitleColour(VgaColour)>
c001c095:	58                   	pop    eax
c001c096:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c09c:	5a                   	pop    edx
c001c09d:	c1 e8 04             	shr    eax,0x4
c001c0a0:	83 e0 0f             	and    eax,0xf
c001c0a3:	50                   	push   eax
c001c0a4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c0a9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c0ac:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001c0b2:	e8 89 4a ff ff       	call   c0010b40 <VgaText::setTitleTextColour(VgaColour)>
c001c0b7:	eb b5                	jmp    c001c06e <sysAppSettings(regs*)+0xa3>
c001c0b9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c0be:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c0c1:	8b 90 26 19 00 00    	mov    edx,DWORD PTR [eax+0x1926]
c001c0c7:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001c0cd:	c0 e8 06             	shr    al,0x6
c001c0d0:	83 e0 01             	and    eax,0x1
c001c0d3:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001c0d9:	31 c0                	xor    eax,eax
c001c0db:	e9 3b ff ff ff       	jmp    c001c01b <sysAppSettings(regs*)+0x50>
c001c0e0:	b8 02 00 00 00       	mov    eax,0x2
c001c0e5:	e9 31 ff ff ff       	jmp    c001c01b <sysAppSettings(regs*)+0x50>

c001c0ea <sysSetFatAttrib(regs*)>:
c001c0ea:	57                   	push   edi
c001c0eb:	56                   	push   esi
c001c0ec:	53                   	push   ebx
c001c0ed:	83 ec 1c             	sub    esp,0x1c
c001c0f0:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c0f4:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001c0f7:	68 14 01 00 00       	push   0x114
c001c0fc:	e8 3f 37 ff ff       	call   c000f840 <malloc>
c001c101:	83 c4 0c             	add    esp,0xc
c001c104:	89 c3                	mov    ebx,eax
c001c106:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c10b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c10e:	57                   	push   edi
c001c10f:	53                   	push   ebx
c001c110:	e8 db 71 ff ff       	call   c00132f0 <File::File(char const*, Process*)>
c001c115:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001c118:	83 c4 0c             	add    esp,0xc
c001c11b:	0f b6 d4             	movzx  edx,ah
c001c11e:	0f b6 c0             	movzx  eax,al
c001c121:	52                   	push   edx
c001c122:	50                   	push   eax
c001c123:	53                   	push   ebx
c001c124:	e8 3d 74 ff ff       	call   c0013566 <File::chfatattr(unsigned char, unsigned char)>
c001c129:	83 c4 10             	add    esp,0x10
c001c12c:	85 db                	test   ebx,ebx
c001c12e:	74 14                	je     c001c144 <sysSetFatAttrib(regs*)+0x5a>
c001c130:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c134:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c136:	83 ec 0c             	sub    esp,0xc
c001c139:	53                   	push   ebx
c001c13a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c13d:	83 c4 10             	add    esp,0x10
c001c140:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c144:	85 c0                	test   eax,eax
c001c146:	0f 95 c0             	setne  al
c001c149:	31 d2                	xor    edx,edx
c001c14b:	0f b6 c0             	movzx  eax,al
c001c14e:	f7 d8                	neg    eax
c001c150:	83 d2 00             	adc    edx,0x0
c001c153:	83 c4 10             	add    esp,0x10
c001c156:	f7 da                	neg    edx
c001c158:	5b                   	pop    ebx
c001c159:	5e                   	pop    esi
c001c15a:	5f                   	pop    edi
c001c15b:	c3                   	ret    

c001c15c <sysPipe(regs*)>:
c001c15c:	57                   	push   edi
c001c15d:	56                   	push   esi
c001c15e:	53                   	push   ebx
c001c15f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c163:	83 ec 0c             	sub    esp,0xc
c001c166:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001c169:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001c16c:	6a 20                	push   0x20
c001c16e:	e8 cd 36 ff ff       	call   c000f840 <malloc>
c001c173:	89 c3                	mov    ebx,eax
c001c175:	58                   	pop    eax
c001c176:	5a                   	pop    edx
c001c177:	68 00 50 00 00       	push   0x5000
c001c17c:	53                   	push   ebx
c001c17d:	e8 0e 43 ff ff       	call   c0010490 <Pipe::Pipe(int)>
c001c182:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c185:	e8 66 55 ff ff       	call   c00116f0 <UnixFile::getFileDescriptor()>
c001c18a:	89 07                	mov    DWORD PTR [edi],eax
c001c18c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c18f:	e8 5c 55 ff ff       	call   c00116f0 <UnixFile::getFileDescriptor()>
c001c194:	83 c4 10             	add    esp,0x10
c001c197:	89 06                	mov    DWORD PTR [esi],eax
c001c199:	31 d2                	xor    edx,edx
c001c19b:	5b                   	pop    ebx
c001c19c:	31 c0                	xor    eax,eax
c001c19e:	5e                   	pop    esi
c001c19f:	5f                   	pop    edi
c001c1a0:	c3                   	ret    

c001c1a1 <sysGetUnixTime(regs*)>:
c001c1a1:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c001c1a6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c1ac:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c1b0:	e9 25 7b ff ff       	jmp    c0013cda <Clock::timeInSecondsLocal()>

c001c1b5 <string_ends_with(char const*, char const*)>:
c001c1b5:	57                   	push   edi
c001c1b6:	56                   	push   esi
c001c1b7:	53                   	push   ebx
c001c1b8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c1bc:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c1c0:	83 ec 0c             	sub    esp,0xc
c001c1c3:	53                   	push   ebx
c001c1c4:	e8 cb 45 fe ff       	call   c0000794 <strlen>
c001c1c9:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c1cc:	89 c6                	mov    esi,eax
c001c1ce:	e8 c1 45 fe ff       	call   c0000794 <strlen>
c001c1d3:	83 c4 10             	add    esp,0x10
c001c1d6:	39 c6                	cmp    esi,eax
c001c1d8:	7d 06                	jge    c001c1e0 <string_ends_with(char const*, char const*)+0x2b>
c001c1da:	5b                   	pop    ebx
c001c1db:	31 c0                	xor    eax,eax
c001c1dd:	5e                   	pop    esi
c001c1de:	5f                   	pop    edi
c001c1df:	c3                   	ret    
c001c1e0:	83 ec 08             	sub    esp,0x8
c001c1e3:	29 c6                	sub    esi,eax
c001c1e5:	57                   	push   edi
c001c1e6:	01 f3                	add    ebx,esi
c001c1e8:	53                   	push   ebx
c001c1e9:	e8 d2 46 fe ff       	call   c00008c0 <strcmp>
c001c1ee:	83 c4 10             	add    esp,0x10
c001c1f1:	85 c0                	test   eax,eax
c001c1f3:	5b                   	pop    ebx
c001c1f4:	0f 94 c0             	sete   al
c001c1f7:	5e                   	pop    esi
c001c1f8:	0f b6 c0             	movzx  eax,al
c001c1fb:	5f                   	pop    edi
c001c1fc:	c3                   	ret    

c001c1fd <sysCallOpen(regs*)>:
c001c1fd:	56                   	push   esi
c001c1fe:	53                   	push   ebx
c001c1ff:	81 ec 04 01 00 00    	sub    esp,0x104
c001c205:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c20c:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c20f:	85 c9                	test   ecx,ecx
c001c211:	0f 84 b3 00 00 00    	je     c001c2ca <sysCallOpen(regs*)+0xcd>
c001c217:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c21a:	85 c0                	test   eax,eax
c001c21c:	0f 84 a8 00 00 00    	je     c001c2ca <sysCallOpen(regs*)+0xcd>
c001c222:	52                   	push   edx
c001c223:	68 11 bd 02 c0       	push   0xc002bd11
c001c228:	50                   	push   eax
c001c229:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c22d:	56                   	push   esi
c001c22e:	e8 13 6f ff ff       	call   c0013146 <Fs::standardiseFiles(char*, char const*, char const*)>
c001c233:	89 34 24             	mov    DWORD PTR [esp],esi
c001c236:	e8 59 45 fe ff       	call   c0000794 <strlen>
c001c23b:	83 c4 10             	add    esp,0x10
c001c23e:	48                   	dec    eax
c001c23f:	74 1d                	je     c001c25e <sysCallOpen(regs*)+0x61>
c001c241:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c244:	eb 0f                	jmp    c001c255 <sysCallOpen(regs*)+0x58>
c001c246:	80 fa 3a             	cmp    dl,0x3a
c001c249:	74 0f                	je     c001c25a <sysCallOpen(regs*)+0x5d>
c001c24b:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c24f:	48                   	dec    eax
c001c250:	74 0c                	je     c001c25e <sysCallOpen(regs*)+0x61>
c001c252:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c255:	80 fa 2e             	cmp    dl,0x2e
c001c258:	75 ec                	jne    c001c246 <sysCallOpen(regs*)+0x49>
c001c25a:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c25e:	83 ec 08             	sub    esp,0x8
c001c261:	68 15 bd 02 c0       	push   0xc002bd15
c001c266:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c269:	e8 47 ff ff ff       	call   c001c1b5 <string_ends_with(char const*, char const*)>
c001c26e:	83 c4 10             	add    esp,0x10
c001c271:	85 c0                	test   eax,eax
c001c273:	75 17                	jne    c001c28c <sysCallOpen(regs*)+0x8f>
c001c275:	83 ec 08             	sub    esp,0x8
c001c278:	68 36 bd 02 c0       	push   0xc002bd36
c001c27d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c280:	e8 30 ff ff ff       	call   c001c1b5 <string_ends_with(char const*, char const*)>
c001c285:	83 c4 10             	add    esp,0x10
c001c288:	85 c0                	test   eax,eax
c001c28a:	74 51                	je     c001c2dd <sysCallOpen(regs*)+0xe0>
c001c28c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c28f:	83 ec 08             	sub    esp,0x8
c001c292:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c298:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c29f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c2a2:	ff 30                	push   DWORD PTR [eax]
c001c2a4:	68 1a bd 02 c0       	push   0xc002bd1a
c001c2a9:	e8 ea 6a ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001c2ae:	c7 04 24 29 bd 02 c0 	mov    DWORD PTR [esp],0xc002bd29
c001c2b5:	e8 de 6a ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001c2ba:	83 c4 10             	add    esp,0x10
c001c2bd:	81 c4 04 01 00 00    	add    esp,0x104
c001c2c3:	31 c0                	xor    eax,eax
c001c2c5:	31 d2                	xor    edx,edx
c001c2c7:	5b                   	pop    ebx
c001c2c8:	5e                   	pop    esi
c001c2c9:	c3                   	ret    
c001c2ca:	81 c4 04 01 00 00    	add    esp,0x104
c001c2d0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c2d5:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c2da:	5b                   	pop    ebx
c001c2db:	5e                   	pop    esi
c001c2dc:	c3                   	ret    
c001c2dd:	83 ec 08             	sub    esp,0x8
c001c2e0:	68 16 bd 02 c0       	push   0xc002bd16
c001c2e5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c2e8:	e8 d3 45 fe ff       	call   c00008c0 <strcmp>
c001c2ed:	83 c4 10             	add    esp,0x10
c001c2f0:	85 c0                	test   eax,eax
c001c2f2:	74 98                	je     c001c28c <sysCallOpen(regs*)+0x8f>
c001c2f4:	83 ec 08             	sub    esp,0x8
c001c2f7:	68 15 bd 02 c0       	push   0xc002bd15
c001c2fc:	56                   	push   esi
c001c2fd:	e8 b3 fe ff ff       	call   c001c1b5 <string_ends_with(char const*, char const*)>
c001c302:	83 c4 10             	add    esp,0x10
c001c305:	85 c0                	test   eax,eax
c001c307:	75 83                	jne    c001c28c <sysCallOpen(regs*)+0x8f>
c001c309:	83 ec 08             	sub    esp,0x8
c001c30c:	68 3b bd 02 c0       	push   0xc002bd3b
c001c311:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c314:	e8 9c fe ff ff       	call   c001c1b5 <string_ends_with(char const*, char const*)>
c001c319:	83 c4 10             	add    esp,0x10
c001c31c:	85 c0                	test   eax,eax
c001c31e:	0f 85 d9 00 00 00    	jne    c001c3fd <sysCallOpen(regs*)+0x200>
c001c324:	83 ec 08             	sub    esp,0x8
c001c327:	68 40 bd 02 c0       	push   0xc002bd40
c001c32c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c32f:	e8 81 fe ff ff       	call   c001c1b5 <string_ends_with(char const*, char const*)>
c001c334:	83 c4 10             	add    esp,0x10
c001c337:	85 c0                	test   eax,eax
c001c339:	0f 85 be 00 00 00    	jne    c001c3fd <sysCallOpen(regs*)+0x200>
c001c33f:	83 ec 08             	sub    esp,0x8
c001c342:	68 3c bd 02 c0       	push   0xc002bd3c
c001c347:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c34a:	e8 71 45 fe ff       	call   c00008c0 <strcmp>
c001c34f:	83 c4 10             	add    esp,0x10
c001c352:	85 c0                	test   eax,eax
c001c354:	0f 84 a3 00 00 00    	je     c001c3fd <sysCallOpen(regs*)+0x200>
c001c35a:	83 ec 08             	sub    esp,0x8
c001c35d:	68 3b bd 02 c0       	push   0xc002bd3b
c001c362:	56                   	push   esi
c001c363:	e8 4d fe ff ff       	call   c001c1b5 <string_ends_with(char const*, char const*)>
c001c368:	83 c4 10             	add    esp,0x10
c001c36b:	85 c0                	test   eax,eax
c001c36d:	0f 85 8a 00 00 00    	jne    c001c3fd <sysCallOpen(regs*)+0x200>
c001c373:	83 ec 0c             	sub    esp,0xc
c001c376:	68 14 01 00 00       	push   0x114
c001c37b:	e8 c0 34 ff ff       	call   c000f840 <malloc>
c001c380:	83 c4 0c             	add    esp,0xc
c001c383:	89 c6                	mov    esi,eax
c001c385:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c38a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c38d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c390:	56                   	push   esi
c001c391:	e8 5a 6f ff ff       	call   c00132f0 <File::File(char const*, Process*)>
c001c396:	83 c4 10             	add    esp,0x10
c001c399:	85 f6                	test   esi,esi
c001c39b:	0f 84 29 ff ff ff    	je     c001c2ca <sysCallOpen(regs*)+0xcd>
c001c3a1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c3a4:	0f b6 c2             	movzx  eax,dl
c001c3a7:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001c3aa:	89 d0                	mov    eax,edx
c001c3ac:	83 e0 01             	and    eax,0x1
c001c3af:	f6 c2 02             	test   dl,0x2
c001c3b2:	74 03                	je     c001c3b7 <sysCallOpen(regs*)+0x1ba>
c001c3b4:	83 c8 02             	or     eax,0x2
c001c3b7:	f6 c2 04             	test   dl,0x4
c001c3ba:	74 03                	je     c001c3bf <sysCallOpen(regs*)+0x1c2>
c001c3bc:	83 c8 04             	or     eax,0x4
c001c3bf:	f6 c2 08             	test   dl,0x8
c001c3c2:	74 03                	je     c001c3c7 <sysCallOpen(regs*)+0x1ca>
c001c3c4:	83 c8 0a             	or     eax,0xa
c001c3c7:	83 e2 10             	and    edx,0x10
c001c3ca:	74 03                	je     c001c3cf <sysCallOpen(regs*)+0x1d2>
c001c3cc:	83 c8 12             	or     eax,0x12
c001c3cf:	83 ec 08             	sub    esp,0x8
c001c3d2:	50                   	push   eax
c001c3d3:	56                   	push   esi
c001c3d4:	e8 7b 6f ff ff       	call   c0013354 <File::open(FileOpenMode)>
c001c3d9:	83 c4 10             	add    esp,0x10
c001c3dc:	85 c0                	test   eax,eax
c001c3de:	0f 85 e6 fe ff ff    	jne    c001c2ca <sysCallOpen(regs*)+0xcd>
c001c3e4:	83 ec 0c             	sub    esp,0xc
c001c3e7:	56                   	push   esi
c001c3e8:	e8 03 53 ff ff       	call   c00116f0 <UnixFile::getFileDescriptor()>
c001c3ed:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c3f0:	89 02                	mov    DWORD PTR [edx],eax
c001c3f2:	c1 f8 1f             	sar    eax,0x1f
c001c3f5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c3f8:	e9 bd fe ff ff       	jmp    c001c2ba <sysCallOpen(regs*)+0xbd>
c001c3fd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c400:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c406:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c40d:	e9 ab fe ff ff       	jmp    c001c2bd <sysCallOpen(regs*)+0xc0>

c001c412 <Sys::loadSyscalls()>:
c001c412:	c7 05 c0 0d 03 c0 1f b5 01 c0 	mov    DWORD PTR ds:0xc0030dc0,0xc001b51f
c001c41c:	c7 05 c4 0d 03 c0 08 b1 01 c0 	mov    DWORD PTR ds:0xc0030dc4,0xc001b108
c001c426:	c7 05 c8 0d 03 c0 72 b2 01 c0 	mov    DWORD PTR ds:0xc0030dc8,0xc001b272
c001c430:	c7 05 cc 0d 03 c0 55 b4 01 c0 	mov    DWORD PTR ds:0xc0030dcc,0xc001b455
c001c43a:	c7 05 d0 0d 03 c0 0a b2 01 c0 	mov    DWORD PTR ds:0xc0030dd0,0xc001b20a
c001c444:	c7 05 d4 0d 03 c0 3f b1 01 c0 	mov    DWORD PTR ds:0xc0030dd4,0xc001b13f
c001c44e:	c7 05 d8 0d 03 c0 20 b1 01 c0 	mov    DWORD PTR ds:0xc0030dd8,0xc001b120
c001c458:	c7 05 dc 0d 03 c0 c7 b2 01 c0 	mov    DWORD PTR ds:0xc0030ddc,0xc001b2c7
c001c462:	c7 05 e4 0d 03 c0 4f ba 01 c0 	mov    DWORD PTR ds:0xc0030de4,0xc001ba4f
c001c46c:	c7 05 e0 0d 03 c0 fd c1 01 c0 	mov    DWORD PTR ds:0xc0030de0,0xc001c1fd
c001c476:	c7 05 e8 0d 03 c0 d7 ba 01 c0 	mov    DWORD PTR ds:0xc0030de8,0xc001bad7
c001c480:	c7 05 ec 0d 03 c0 3e b7 01 c0 	mov    DWORD PTR ds:0xc0030dec,0xc001b73e
c001c48a:	c7 05 f0 0d 03 c0 5a b5 01 c0 	mov    DWORD PTR ds:0xc0030df0,0xc001b55a
c001c494:	c7 05 f4 0d 03 c0 5f b5 01 c0 	mov    DWORD PTR ds:0xc0030df4,0xc001b55f
c001c49e:	c7 05 f8 0d 03 c0 b2 bb 01 c0 	mov    DWORD PTR ds:0xc0030df8,0xc001bbb2
c001c4a8:	c7 05 fc 0d 03 c0 4c bb 01 c0 	mov    DWORD PTR ds:0xc0030dfc,0xc001bb4c
c001c4b2:	c7 05 00 0e 03 c0 26 b8 01 c0 	mov    DWORD PTR ds:0xc0030e00,0xc001b826
c001c4bc:	c7 05 04 0e 03 c0 8f b8 01 c0 	mov    DWORD PTR ds:0xc0030e04,0xc001b88f
c001c4c6:	c7 05 08 0e 03 c0 0c b9 01 c0 	mov    DWORD PTR ds:0xc0030e08,0xc001b90c
c001c4d0:	c7 05 0c 0e 03 c0 64 b5 01 c0 	mov    DWORD PTR ds:0xc0030e0c,0xc001b564
c001c4da:	c7 05 10 0e 03 c0 22 bc 01 c0 	mov    DWORD PTR ds:0xc0030e10,0xc001bc22
c001c4e4:	c7 05 14 0e 03 c0 3c bc 01 c0 	mov    DWORD PTR ds:0xc0030e14,0xc001bc3c
c001c4ee:	c7 05 18 0e 03 c0 3c bc 01 c0 	mov    DWORD PTR ds:0xc0030e18,0xc001bc3c
c001c4f8:	c7 05 1c 0e 03 c0 7d bc 01 c0 	mov    DWORD PTR ds:0xc0030e1c,0xc001bc7d
c001c502:	c7 05 20 0e 03 c0 e1 bc 01 c0 	mov    DWORD PTR ds:0xc0030e20,0xc001bce1
c001c50c:	c7 05 24 0e 03 c0 10 b7 01 c0 	mov    DWORD PTR ds:0xc0030e24,0xc001b710
c001c516:	c7 05 28 0e 03 c0 45 bd 01 c0 	mov    DWORD PTR ds:0xc0030e28,0xc001bd45
c001c520:	c7 05 2c 0e 03 c0 cd b6 01 c0 	mov    DWORD PTR ds:0xc0030e2c,0xc001b6cd
c001c52a:	c7 05 30 0e 03 c0 91 bd 01 c0 	mov    DWORD PTR ds:0xc0030e30,0xc001bd91
c001c534:	c7 05 34 0e 03 c0 cc b7 01 c0 	mov    DWORD PTR ds:0xc0030e34,0xc001b7cc
c001c53e:	c7 05 38 0e 03 c0 14 be 01 c0 	mov    DWORD PTR ds:0xc0030e38,0xc001be14
c001c548:	c7 05 3c 0e 03 c0 8f b9 01 c0 	mov    DWORD PTR ds:0xc0030e3c,0xc001b98f
c001c552:	c7 05 40 0e 03 c0 3b be 01 c0 	mov    DWORD PTR ds:0xc0030e40,0xc001be3b
c001c55c:	c7 05 44 0e 03 c0 93 be 01 c0 	mov    DWORD PTR ds:0xc0030e44,0xc001be93
c001c566:	c7 05 48 0e 03 c0 cb bf 01 c0 	mov    DWORD PTR ds:0xc0030e48,0xc001bfcb
c001c570:	c7 05 4c 0e 03 c0 6e b5 01 c0 	mov    DWORD PTR ds:0xc0030e4c,0xc001b56e
c001c57a:	c7 05 50 0e 03 c0 d8 b5 01 c0 	mov    DWORD PTR ds:0xc0030e50,0xc001b5d8
c001c584:	c7 05 54 0e 03 c0 1e b6 01 c0 	mov    DWORD PTR ds:0xc0030e54,0xc001b61e
c001c58e:	c7 05 58 0e 03 c0 ea c0 01 c0 	mov    DWORD PTR ds:0xc0030e58,0xc001c0ea
c001c598:	c7 05 5c 0e 03 c0 57 bc 01 c0 	mov    DWORD PTR ds:0xc0030e5c,0xc001bc57
c001c5a2:	c7 05 60 0e 03 c0 6f b6 01 c0 	mov    DWORD PTR ds:0xc0030e60,0xc001b66f
c001c5ac:	c7 05 64 0e 03 c0 5c c1 01 c0 	mov    DWORD PTR ds:0xc0030e64,0xc001c15c
c001c5b6:	c7 05 68 0e 03 c0 a1 c1 01 c0 	mov    DWORD PTR ds:0xc0030e68,0xc001c1a1
c001c5c0:	c7 05 6c 0e 03 c0 62 b1 01 c0 	mov    DWORD PTR ds:0xc0030e6c,0xc001b162
c001c5ca:	c7 05 70 0e 03 c0 e3 b2 01 c0 	mov    DWORD PTR ds:0xc0030e70,0xc001b2e3
c001c5d4:	c7 05 74 0e 03 c0 0b b4 01 c0 	mov    DWORD PTR ds:0xc0030e74,0xc001b40b
c001c5de:	c7 05 78 0e 03 c0 d2 b0 01 c0 	mov    DWORD PTR ds:0xc0030e78,0xc001b0d2
c001c5e8:	c7 05 7c 0e 03 c0 bd b4 01 c0 	mov    DWORD PTR ds:0xc0030e7c,0xc001b4bd
c001c5f2:	c7 05 80 0e 03 c0 4b b1 01 c0 	mov    DWORD PTR ds:0xc0030e80,0xc001b14b
c001c5fc:	c3                   	ret    

c001c5fd <Sys::systemCall(regs*, void*)>:
c001c5fd:	53                   	push   ebx
c001c5fe:	83 ec 08             	sub    esp,0x8
c001c601:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c605:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c608:	83 f8 7f             	cmp    eax,0x7f
c001c60b:	77 16                	ja     c001c623 <Sys::systemCall(regs*, void*)+0x26>
c001c60d:	8b 14 85 c0 0d 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf240]
c001c614:	85 d2                	test   edx,edx
c001c616:	74 0b                	je     c001c623 <Sys::systemCall(regs*, void*)+0x26>
c001c618:	83 ec 0c             	sub    esp,0xc
c001c61b:	53                   	push   ebx
c001c61c:	ff d2                	call   edx
c001c61e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c621:	eb 0d                	jmp    c001c630 <Sys::systemCall(regs*, void*)+0x33>
c001c623:	52                   	push   edx
c001c624:	52                   	push   edx
c001c625:	50                   	push   eax
c001c626:	68 45 bd 02 c0       	push   0xc002bd45
c001c62b:	e8 68 67 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001c630:	83 c4 10             	add    esp,0x10
c001c633:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c638:	31 d2                	xor    edx,edx
c001c63a:	83 c4 08             	add    esp,0x8
c001c63d:	5b                   	pop    ebx
c001c63e:	c3                   	ret    

c001c63f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c63f:	55                   	push   ebp
c001c640:	57                   	push   edi
c001c641:	56                   	push   esi
c001c642:	53                   	push   ebx
c001c643:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c649:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c650:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c657:	85 c0                	test   eax,eax
c001c659:	0f 95 c1             	setne  cl
c001c65c:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c664:	0f 94 c2             	sete   dl
c001c667:	84 d1                	test   cl,dl
c001c669:	74 23                	je     c001c68e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c66b:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c671:	74 1b                	je     c001c68e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c673:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c679:	89 da                	mov    edx,ebx
c001c67b:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c681:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c687:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c68e:	8b 8c 24 48 10 00 00 	mov    ecx,DWORD PTR [esp+0x1048]
c001c695:	05 ff 0f 00 00       	add    eax,0xfff
c001c69a:	83 ec 0c             	sub    esp,0xc
c001c69d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c6a1:	8d a9 ff 0f 00 00    	lea    ebp,[ecx+0xfff]
c001c6a7:	c1 e8 0c             	shr    eax,0xc
c001c6aa:	89 ef                	mov    edi,ebp
c001c6ac:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c6b0:	c1 ef 0c             	shr    edi,0xc
c001c6b3:	6a 01                	push   0x1
c001c6b5:	e8 81 54 ff ff       	call   c0011b3b <Virt::allocateKernelVirtualPages(int)>
c001c6ba:	89 c6                	mov    esi,eax
c001c6bc:	58                   	pop    eax
c001c6bd:	5a                   	pop    edx
c001c6be:	57                   	push   edi
c001c6bf:	68 cb bd 02 c0       	push   0xc002bdcb
c001c6c4:	e8 cf 66 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001c6c9:	59                   	pop    ecx
c001c6ca:	58                   	pop    eax
c001c6cb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c6cf:	68 dd bd 02 c0       	push   0xc002bddd
c001c6d4:	e8 bf 66 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001c6d9:	83 c4 10             	add    esp,0x10
c001c6dc:	81 fd ff 0f 00 00    	cmp    ebp,0xfff
c001c6e2:	0f 86 24 01 00 00    	jbe    c001c80c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cd>
c001c6e8:	c1 e7 0c             	shl    edi,0xc
c001c6eb:	8d 04 1f             	lea    eax,[edi+ebx*1]
c001c6ee:	89 df                	mov    edi,ebx
c001c6f0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c6f4:	8b ac 24 48 10 00 00 	mov    ebp,DWORD PTR [esp+0x1048]
c001c6fb:	01 dd                	add    ebp,ebx
c001c6fd:	29 fd                	sub    ebp,edi
c001c6ff:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c001c703:	0f 84 01 01 00 00    	je     c001c80a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c709:	81 fd 00 10 00 00    	cmp    ebp,0x1000
c001c70f:	76 05                	jbe    c001c716 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xd7>
c001c711:	bd 00 10 00 00       	mov    ebp,0x1000
c001c716:	83 ec 0c             	sub    esp,0xc
c001c719:	31 d2                	xor    edx,edx
c001c71b:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c722:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c724:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c728:	50                   	push   eax
c001c729:	8d 44 24 30          	lea    eax,[esp+0x30]
c001c72d:	50                   	push   eax
c001c72e:	52                   	push   edx
c001c72f:	55                   	push   ebp
c001c730:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c737:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c73a:	83 c4 20             	add    esp,0x20
c001c73d:	85 c0                	test   eax,eax
c001c73f:	74 0a                	je     c001c74b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x10c>
c001c741:	53                   	push   ebx
c001c742:	53                   	push   ebx
c001c743:	50                   	push   eax
c001c744:	68 ef bd 02 c0       	push   0xc002bdef
c001c749:	eb 0f                	jmp    c001c75a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x11b>
c001c74b:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c001c74f:	74 20                	je     c001c771 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x132>
c001c751:	51                   	push   ecx
c001c752:	51                   	push   ecx
c001c753:	6a 00                	push   0x0
c001c755:	68 1a be 02 c0       	push   0xc002be1a
c001c75a:	e8 39 66 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001c75f:	89 34 24             	mov    DWORD PTR [esp],esi
c001c762:	e8 36 57 ff ff       	call   c0011e9d <Virt::freeKernelVirtualPages(unsigned long)>
c001c767:	83 c4 10             	add    esp,0x10
c001c76a:	31 c0                	xor    eax,eax
c001c76c:	e9 55 01 00 00       	jmp    c001c8c6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x287>
c001c771:	e8 f7 14 00 00       	call   c001dc6d <lockScheduler()>
c001c776:	e8 62 37 ff ff       	call   c000fedd <Phys::allocatePage()>
c001c77b:	6a 07                	push   0x7
c001c77d:	89 c5                	mov    ebp,eax
c001c77f:	56                   	push   esi
c001c780:	50                   	push   eax
c001c781:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c786:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c789:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c78f:	e8 70 5a ff ff       	call   c0012204 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c794:	83 c4 0c             	add    esp,0xc
c001c797:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c79e:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c7a4:	6a 00                	push   0x0
c001c7a6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c7ab:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c7ae:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c7b4:	e8 b5 58 ff ff       	call   c001206e <VAS::mapOtherVASIn(bool, VAS*)>
c001c7b9:	58                   	pop    eax
c001c7ba:	5a                   	pop    edx
c001c7bb:	68 07 0c 00 00       	push   0xc07
c001c7c0:	57                   	push   edi
c001c7c1:	81 c7 00 10 00 00    	add    edi,0x1000
c001c7c7:	55                   	push   ebp
c001c7c8:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c7cf:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c7d5:	6a 00                	push   0x0
c001c7d7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c7dc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c7df:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c7e5:	e8 d4 5d ff ff       	call   c00125be <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c7ea:	83 c4 1c             	add    esp,0x1c
c001c7ed:	68 00 10 00 00       	push   0x1000
c001c7f2:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c7f6:	50                   	push   eax
c001c7f7:	56                   	push   esi
c001c7f8:	e8 47 3f fe ff       	call   c0000744 <memcpy>
c001c7fd:	e8 6d 14 00 00       	call   c001dc6f <unlockScheduler()>
c001c802:	83 c4 10             	add    esp,0x10
c001c805:	e9 ea fe ff ff       	jmp    c001c6f4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb5>
c001c80a:	89 fb                	mov    ebx,edi
c001c80c:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001c814:	0f 86 9e 00 00 00    	jbe    c001c8b8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c001c81a:	e8 4e 14 00 00       	call   c001dc6d <lockScheduler()>
c001c81f:	51                   	push   ecx
c001c820:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c827:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c82d:	6a 00                	push   0x0
c001c82f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c834:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c837:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c83d:	e8 2c 58 ff ff       	call   c001206e <VAS::mapOtherVASIn(bool, VAS*)>
c001c842:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c846:	c1 e7 0c             	shl    edi,0xc
c001c849:	01 df                	add    edi,ebx
c001c84b:	83 c4 10             	add    esp,0x10
c001c84e:	39 fb                	cmp    ebx,edi
c001c850:	74 61                	je     c001c8b3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x274>
c001c852:	e8 86 36 ff ff       	call   c000fedd <Phys::allocatePage()>
c001c857:	6a 07                	push   0x7
c001c859:	89 c5                	mov    ebp,eax
c001c85b:	56                   	push   esi
c001c85c:	50                   	push   eax
c001c85d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c862:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c865:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c86b:	e8 94 59 ff ff       	call   c0012204 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c870:	58                   	pop    eax
c001c871:	5a                   	pop    edx
c001c872:	68 07 0c 00 00       	push   0xc07
c001c877:	53                   	push   ebx
c001c878:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c87e:	55                   	push   ebp
c001c87f:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c886:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c88c:	6a 00                	push   0x0
c001c88e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c893:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c896:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c89c:	e8 1d 5d ff ff       	call   c00125be <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c8a1:	83 c4 1c             	add    esp,0x1c
c001c8a4:	68 00 10 00 00       	push   0x1000
c001c8a9:	6a 00                	push   0x0
c001c8ab:	56                   	push   esi
c001c8ac:	e8 c7 3e fe ff       	call   c0000778 <memset>
c001c8b1:	eb 98                	jmp    c001c84b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x20c>
c001c8b3:	e8 b7 13 00 00       	call   c001dc6f <unlockScheduler()>
c001c8b8:	83 ec 0c             	sub    esp,0xc
c001c8bb:	56                   	push   esi
c001c8bc:	e8 dc 55 ff ff       	call   c0011e9d <Virt::freeKernelVirtualPages(unsigned long)>
c001c8c1:	83 c4 10             	add    esp,0x10
c001c8c4:	b0 01                	mov    al,0x1
c001c8c6:	81 c4 2c 10 00 00    	add    esp,0x102c
c001c8cc:	5b                   	pop    ebx
c001c8cd:	5e                   	pop    esi
c001c8ce:	5f                   	pop    edi
c001c8cf:	5d                   	pop    ebp
c001c8d0:	c3                   	ret    

c001c8d1 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001c8d1:	55                   	push   ebp
c001c8d2:	57                   	push   edi
c001c8d3:	56                   	push   esi
c001c8d4:	53                   	push   ebx
c001c8d5:	83 ec 48             	sub    esp,0x48
c001c8d8:	68 14 01 00 00       	push   0x114
c001c8dd:	e8 5e 2f ff ff       	call   c000f840 <malloc>
c001c8e2:	83 c4 0c             	add    esp,0xc
c001c8e5:	89 c6                	mov    esi,eax
c001c8e7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001c8eb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001c8ef:	50                   	push   eax
c001c8f0:	e8 fb 69 ff ff       	call   c00132f0 <File::File(char const*, Process*)>
c001c8f5:	58                   	pop    eax
c001c8f6:	5a                   	pop    edx
c001c8f7:	6a 01                	push   0x1
c001c8f9:	56                   	push   esi
c001c8fa:	e8 55 6a ff ff       	call   c0013354 <File::open(FileOpenMode)>
c001c8ff:	83 c4 10             	add    esp,0x10
c001c902:	85 c0                	test   eax,eax
c001c904:	0f 85 47 01 00 00    	jne    c001ca51 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c90a:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001c912:	83 ec 0c             	sub    esp,0xc
c001c915:	6a 34                	push   0x34
c001c917:	e8 24 2f ff ff       	call   c000f840 <malloc>
c001c91c:	89 c3                	mov    ebx,eax
c001c91e:	58                   	pop    eax
c001c91f:	8b 06                	mov    eax,DWORD PTR [esi]
c001c921:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001c925:	57                   	push   edi
c001c926:	53                   	push   ebx
c001c927:	6a 00                	push   0x0
c001c929:	6a 34                	push   0x34
c001c92b:	56                   	push   esi
c001c92c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c92f:	83 c4 20             	add    esp,0x20
c001c932:	85 c0                	test   eax,eax
c001c934:	0f 85 17 01 00 00    	jne    c001ca51 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c93a:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001c940:	0f 85 0b 01 00 00    	jne    c001ca51 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c946:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c949:	85 c0                	test   eax,eax
c001c94b:	0f 84 00 01 00 00    	je     c001ca51 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c951:	31 d2                	xor    edx,edx
c001c953:	55                   	push   ebp
c001c954:	52                   	push   edx
c001c955:	50                   	push   eax
c001c956:	56                   	push   esi
c001c957:	e8 b6 6a ff ff       	call   c0013412 <File::seek(unsigned long long)>
c001c95c:	83 c4 10             	add    esp,0x10
c001c95f:	85 c0                	test   eax,eax
c001c961:	0f 85 ea 00 00 00    	jne    c001ca51 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c967:	83 ec 0c             	sub    esp,0xc
c001c96a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001c96d:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c971:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c975:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c979:	0f af c2             	imul   eax,edx
c001c97c:	50                   	push   eax
c001c97d:	e8 be 2e ff ff       	call   c000f840 <malloc>
c001c982:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c984:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c988:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c98b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c98f:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c993:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c997:	0f af c2             	imul   eax,edx
c001c99a:	99                   	cdq    
c001c99b:	52                   	push   edx
c001c99c:	50                   	push   eax
c001c99d:	56                   	push   esi
c001c99e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c9a1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001c9a4:	83 c4 20             	add    esp,0x20
c001c9a7:	85 c0                	test   eax,eax
c001c9a9:	0f 84 a2 00 00 00    	je     c001ca51 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c9af:	31 d2                	xor    edx,edx
c001c9b1:	51                   	push   ecx
c001c9b2:	52                   	push   edx
c001c9b3:	50                   	push   eax
c001c9b4:	56                   	push   esi
c001c9b5:	e8 58 6a ff ff       	call   c0013412 <File::seek(unsigned long long)>
c001c9ba:	83 c4 10             	add    esp,0x10
c001c9bd:	85 c0                	test   eax,eax
c001c9bf:	0f 85 8c 00 00 00    	jne    c001ca51 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c9c5:	83 ec 0c             	sub    esp,0xc
c001c9c8:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c9cc:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c9d0:	31 ed                	xor    ebp,ebp
c001c9d2:	0f af c2             	imul   eax,edx
c001c9d5:	50                   	push   eax
c001c9d6:	e8 65 2e ff ff       	call   c000f840 <malloc>
c001c9db:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c9dd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c9e1:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c9e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c9e8:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c9ec:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c9f0:	0f af c2             	imul   eax,edx
c001c9f3:	99                   	cdq    
c001c9f4:	52                   	push   edx
c001c9f5:	50                   	push   eax
c001c9f6:	56                   	push   esi
c001c9f7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c9fa:	83 c4 20             	add    esp,0x20
c001c9fd:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001ca05:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001ca09:	0f 86 80 00 00 00    	jbe    c001ca8f <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001ca0f:	0f b7 fd             	movzx  edi,bp
c001ca12:	c1 e7 05             	shl    edi,0x5
c001ca15:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001ca19:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001ca1c:	75 6b                	jne    c001ca89 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001ca1e:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001ca21:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ca25:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001ca28:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ca2c:	52                   	push   edx
c001ca2d:	31 d2                	xor    edx,edx
c001ca2f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001ca32:	52                   	push   edx
c001ca33:	50                   	push   eax
c001ca34:	56                   	push   esi
c001ca35:	e8 d8 69 ff ff       	call   c0013412 <File::seek(unsigned long long)>
c001ca3a:	83 c4 10             	add    esp,0x10
c001ca3d:	85 c0                	test   eax,eax
c001ca3f:	74 17                	je     c001ca58 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001ca41:	83 ec 0c             	sub    esp,0xc
c001ca44:	68 46 be 02 c0       	push   0xc002be46
c001ca49:	e8 4a 63 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001ca4e:	83 c4 10             	add    esp,0x10
c001ca51:	31 c0                	xor    eax,eax
c001ca53:	e9 87 00 00 00       	jmp    c001cadf <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001ca58:	83 ec 0c             	sub    esp,0xc
c001ca5b:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001ca5e:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001ca61:	50                   	push   eax
c001ca62:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001ca66:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ca6a:	56                   	push   esi
c001ca6b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001ca6f:	e8 cb fb ff ff       	call   c001c63f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001ca74:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ca78:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001ca7c:	83 c4 20             	add    esp,0x20
c001ca7f:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001ca83:	73 04                	jae    c001ca89 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001ca85:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ca89:	45                   	inc    ebp
c001ca8a:	e9 76 ff ff ff       	jmp    c001ca05 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001ca8f:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001ca93:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ca97:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ca9b:	89 91 2e 19 00 00    	mov    DWORD PTR [ecx+0x192e],edx
c001caa1:	83 ec 0c             	sub    esp,0xc
c001caa4:	8b 91 32 19 00 00    	mov    edx,DWORD PTR [ecx+0x1932]
c001caaa:	25 00 f0 ff ff       	and    eax,0xfffff000
c001caaf:	05 00 10 00 00       	add    eax,0x1000
c001cab4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001cab7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cabb:	e8 90 2d ff ff       	call   c000f850 <free>
c001cac0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cac3:	e8 88 2d ff ff       	call   c000f850 <free>
c001cac8:	58                   	pop    eax
c001cac9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cacd:	e8 7e 2d ff ff       	call   c000f850 <free>
c001cad2:	89 34 24             	mov    DWORD PTR [esp],esi
c001cad5:	e8 d8 68 ff ff       	call   c00133b2 <File::close()>
c001cada:	83 c4 10             	add    esp,0x10
c001cadd:	b0 01                	mov    al,0x1
c001cadf:	83 c4 3c             	add    esp,0x3c
c001cae2:	5b                   	pop    ebx
c001cae3:	5e                   	pop    esi
c001cae4:	5f                   	pop    edi
c001cae5:	5d                   	pop    ebp
c001cae6:	c3                   	ret    

c001cae7 <Thr::runtimeReferenceHelper()>:
c001cae7:	83 ec 18             	sub    esp,0x18
c001caea:	68 4e be 02 c0       	push   0xc002be4e
c001caef:	e8 a4 62 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001caf4:	fa                   	cli    
c001caf5:	83 c4 10             	add    esp,0x10
c001caf8:	eb fe                	jmp    c001caf8 <Thr::runtimeReferenceHelper()+0x11>

c001cafa <Thr::getAddressOfKernelSymbol(char const*)>:
c001cafa:	57                   	push   edi
c001cafb:	56                   	push   esi
c001cafc:	53                   	push   ebx
c001cafd:	31 db                	xor    ebx,ebx
c001caff:	39 1d 60 17 03 c0    	cmp    DWORD PTR ds:0xc0031760,ebx
c001cb05:	7e 3c                	jle    c001cb43 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001cb07:	8b 34 9d e0 16 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffce920]
c001cb0e:	31 ff                	xor    edi,edi
c001cb10:	39 3c 9d e0 15 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffcea20],edi
c001cb17:	7e 27                	jle    c001cb40 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001cb19:	50                   	push   eax
c001cb1a:	50                   	push   eax
c001cb1b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cb1f:	8b 06                	mov    eax,DWORD PTR [esi]
c001cb21:	03 04 9d 60 16 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffce9a0]
c001cb28:	50                   	push   eax
c001cb29:	e8 92 3d fe ff       	call   c00008c0 <strcmp>
c001cb2e:	83 c4 10             	add    esp,0x10
c001cb31:	85 c0                	test   eax,eax
c001cb33:	75 05                	jne    c001cb3a <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001cb35:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001cb38:	eb 0b                	jmp    c001cb45 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001cb3a:	83 c6 10             	add    esi,0x10
c001cb3d:	47                   	inc    edi
c001cb3e:	eb d0                	jmp    c001cb10 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001cb40:	43                   	inc    ebx
c001cb41:	eb bc                	jmp    c001caff <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001cb43:	31 c0                	xor    eax,eax
c001cb45:	5b                   	pop    ebx
c001cb46:	5e                   	pop    esi
c001cb47:	5f                   	pop    edi
c001cb48:	c3                   	ret    

c001cb49 <Thr::loadKernelSymbolTable(char const*)>:
c001cb49:	55                   	push   ebp
c001cb4a:	57                   	push   edi
c001cb4b:	56                   	push   esi
c001cb4c:	53                   	push   ebx
c001cb4d:	83 ec 68             	sub    esp,0x68
c001cb50:	8b 35 b4 17 03 c0    	mov    esi,DWORD PTR ds:0xc00317b4
c001cb56:	68 14 01 00 00       	push   0x114
c001cb5b:	e8 e0 2c ff ff       	call   c000f840 <malloc>
c001cb60:	83 c4 0c             	add    esp,0xc
c001cb63:	89 c3                	mov    ebx,eax
c001cb65:	56                   	push   esi
c001cb66:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001cb6a:	50                   	push   eax
c001cb6b:	e8 80 67 ff ff       	call   c00132f0 <File::File(char const*, Process*)>
c001cb70:	5e                   	pop    esi
c001cb71:	5f                   	pop    edi
c001cb72:	6a 01                	push   0x1
c001cb74:	53                   	push   ebx
c001cb75:	e8 da 67 ff ff       	call   c0013354 <File::open(FileOpenMode)>
c001cb7a:	83 c4 10             	add    esp,0x10
c001cb7d:	85 c0                	test   eax,eax
c001cb7f:	74 0a                	je     c001cb8b <Thr::loadKernelSymbolTable(char const*)+0x42>
c001cb81:	83 ec 0c             	sub    esp,0xc
c001cb84:	68 70 be 02 c0       	push   0xc002be70
c001cb89:	eb 34                	jmp    c001cbbf <Thr::loadKernelSymbolTable(char const*)+0x76>
c001cb8b:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001cb93:	83 ec 0c             	sub    esp,0xc
c001cb96:	6a 34                	push   0x34
c001cb98:	e8 a3 2c ff ff       	call   c000f840 <malloc>
c001cb9d:	59                   	pop    ecx
c001cb9e:	89 c7                	mov    edi,eax
c001cba0:	8d 74 24 34          	lea    esi,[esp+0x34]
c001cba4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cba6:	56                   	push   esi
c001cba7:	57                   	push   edi
c001cba8:	6a 00                	push   0x0
c001cbaa:	6a 34                	push   0x34
c001cbac:	53                   	push   ebx
c001cbad:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cbb0:	83 c4 20             	add    esp,0x20
c001cbb3:	85 c0                	test   eax,eax
c001cbb5:	74 17                	je     c001cbce <Thr::loadKernelSymbolTable(char const*)+0x85>
c001cbb7:	83 ec 0c             	sub    esp,0xc
c001cbba:	68 87 be 02 c0       	push   0xc002be87
c001cbbf:	e8 af d8 ff ff       	call   c001a473 <Krnl::panic(char const*)>
c001cbc4:	83 c4 10             	add    esp,0x10
c001cbc7:	31 c0                	xor    eax,eax
c001cbc9:	e9 31 02 00 00       	jmp    c001cdff <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001cbce:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001cbd4:	75 e1                	jne    c001cbb7 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cbd6:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001cbd9:	85 c0                	test   eax,eax
c001cbdb:	74 da                	je     c001cbb7 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cbdd:	52                   	push   edx
c001cbde:	31 d2                	xor    edx,edx
c001cbe0:	52                   	push   edx
c001cbe1:	50                   	push   eax
c001cbe2:	53                   	push   ebx
c001cbe3:	e8 2a 68 ff ff       	call   c0013412 <File::seek(unsigned long long)>
c001cbe8:	83 c4 10             	add    esp,0x10
c001cbeb:	85 c0                	test   eax,eax
c001cbed:	75 c8                	jne    c001cbb7 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cbef:	83 ec 0c             	sub    esp,0xc
c001cbf2:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cbf6:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cbfa:	31 ed                	xor    ebp,ebp
c001cbfc:	0f af c2             	imul   eax,edx
c001cbff:	50                   	push   eax
c001cc00:	e8 3b 2c ff ff       	call   c000f840 <malloc>
c001cc05:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cc07:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cc0b:	89 34 24             	mov    DWORD PTR [esp],esi
c001cc0e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cc12:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cc16:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cc1a:	0f af c2             	imul   eax,edx
c001cc1d:	99                   	cdq    
c001cc1e:	52                   	push   edx
c001cc1f:	50                   	push   eax
c001cc20:	53                   	push   ebx
c001cc21:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cc24:	83 c4 20             	add    esp,0x20
c001cc27:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cc2f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001cc37:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001cc3f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001cc47:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001cc4b:	0f 86 aa 00 00 00    	jbe    c001ccfb <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001cc51:	0f b7 f5             	movzx  esi,bp
c001cc54:	6b f6 28             	imul   esi,esi,0x28
c001cc57:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001cc5b:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001cc5e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cc62:	50                   	push   eax
c001cc63:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cc67:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001cc6b:	8b 16                	mov    edx,DWORD PTR [esi]
c001cc6d:	6b c0 28             	imul   eax,eax,0x28
c001cc70:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001cc74:	89 d0                	mov    eax,edx
c001cc76:	31 d2                	xor    edx,edx
c001cc78:	52                   	push   edx
c001cc79:	50                   	push   eax
c001cc7a:	53                   	push   ebx
c001cc7b:	e8 92 67 ff ff       	call   c0013412 <File::seek(unsigned long long)>
c001cc80:	83 c4 0c             	add    esp,0xc
c001cc83:	6a 20                	push   0x20
c001cc85:	6a 00                	push   0x0
c001cc87:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001cc8b:	52                   	push   edx
c001cc8c:	e8 e7 3a fe ff       	call   c0000778 <memset>
c001cc91:	58                   	pop    eax
c001cc92:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cc94:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001cc98:	51                   	push   ecx
c001cc99:	8d 54 24 40          	lea    edx,[esp+0x40]
c001cc9d:	52                   	push   edx
c001cc9e:	6a 00                	push   0x0
c001cca0:	6a 1f                	push   0x1f
c001cca2:	53                   	push   ebx
c001cca3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cca6:	83 c4 18             	add    esp,0x18
c001cca9:	68 9e be 02 c0       	push   0xc002be9e
c001ccae:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001ccb2:	52                   	push   edx
c001ccb3:	e8 08 3c fe ff       	call   c00008c0 <strcmp>
c001ccb8:	83 c4 10             	add    esp,0x10
c001ccbb:	85 c0                	test   eax,eax
c001ccbd:	75 0f                	jne    c001ccce <Thr::loadKernelSymbolTable(char const*)+0x185>
c001ccbf:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ccc2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ccc6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ccca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ccce:	50                   	push   eax
c001cccf:	50                   	push   eax
c001ccd0:	68 a6 be 02 c0       	push   0xc002bea6
c001ccd5:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001ccd9:	50                   	push   eax
c001ccda:	e8 e1 3b fe ff       	call   c00008c0 <strcmp>
c001ccdf:	83 c4 10             	add    esp,0x10
c001cce2:	85 c0                	test   eax,eax
c001cce4:	75 0f                	jne    c001ccf5 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001cce6:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cce9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cced:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ccf1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ccf5:	45                   	inc    ebp
c001ccf6:	e9 4c ff ff ff       	jmp    c001cc47 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001ccfb:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001cd00:	75 10                	jne    c001cd12 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001cd02:	83 ec 0c             	sub    esp,0xc
c001cd05:	68 ae be 02 c0       	push   0xc002beae
c001cd0a:	e8 64 d7 ff ff       	call   c001a473 <Krnl::panic(char const*)>
c001cd0f:	83 c4 10             	add    esp,0x10
c001cd12:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001cd17:	75 10                	jne    c001cd29 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001cd19:	83 ec 0c             	sub    esp,0xc
c001cd1c:	68 ae be 02 c0       	push   0xc002beae
c001cd21:	e8 4d d7 ff ff       	call   c001a473 <Krnl::panic(char const*)>
c001cd26:	83 c4 10             	add    esp,0x10
c001cd29:	31 d2                	xor    edx,edx
c001cd2b:	50                   	push   eax
c001cd2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd30:	52                   	push   edx
c001cd31:	50                   	push   eax
c001cd32:	53                   	push   ebx
c001cd33:	e8 da 66 ff ff       	call   c0013412 <File::seek(unsigned long long)>
c001cd38:	5a                   	pop    edx
c001cd39:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cd3d:	e8 fe 2a ff ff       	call   c000f840 <malloc>
c001cd42:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cd46:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cd4a:	31 c9                	xor    ecx,ecx
c001cd4c:	5e                   	pop    esi
c001cd4d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cd4f:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001cd53:	55                   	push   ebp
c001cd54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd58:	51                   	push   ecx
c001cd59:	52                   	push   edx
c001cd5a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001cd5e:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001cd62:	53                   	push   ebx
c001cd63:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cd66:	83 c4 14             	add    esp,0x14
c001cd69:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cd6d:	e8 ce 2a ff ff       	call   c000f840 <malloc>
c001cd72:	89 c6                	mov    esi,eax
c001cd74:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cd76:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cd79:	56                   	push   esi
c001cd7a:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cd7e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001cd82:	51                   	push   ecx
c001cd83:	52                   	push   edx
c001cd84:	53                   	push   ebx
c001cd85:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cd88:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cd8c:	8b 15 60 17 03 c0    	mov    edx,DWORD PTR ds:0xc0031760
c001cd92:	83 c4 1c             	add    esp,0x1c
c001cd95:	c1 e8 04             	shr    eax,0x4
c001cd98:	89 04 95 e0 15 03 c0 	mov    DWORD PTR [edx*4-0x3ffcea20],eax
c001cd9f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cda3:	31 d2                	xor    edx,edx
c001cda5:	52                   	push   edx
c001cda6:	50                   	push   eax
c001cda7:	53                   	push   ebx
c001cda8:	e8 65 66 ff ff       	call   c0013412 <File::seek(unsigned long long)>
c001cdad:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cdaf:	31 d2                	xor    edx,edx
c001cdb1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cdb4:	56                   	push   esi
c001cdb5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cdb9:	52                   	push   edx
c001cdba:	50                   	push   eax
c001cdbb:	53                   	push   ebx
c001cdbc:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cdbf:	83 c4 14             	add    esp,0x14
c001cdc2:	53                   	push   ebx
c001cdc3:	e8 ea 65 ff ff       	call   c00133b2 <File::close()>
c001cdc8:	5d                   	pop    ebp
c001cdc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cdcd:	e8 7e 2a ff ff       	call   c000f850 <free>
c001cdd2:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cdd5:	e8 76 2a ff ff       	call   c000f850 <free>
c001cdda:	a1 60 17 03 c0       	mov    eax,ds:0xc0031760
c001cddf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cde3:	8d 50 01             	lea    edx,[eax+0x1]
c001cde6:	89 0c 85 e0 16 03 c0 	mov    DWORD PTR [eax*4-0x3ffce920],ecx
c001cded:	89 34 85 60 16 03 c0 	mov    DWORD PTR [eax*4-0x3ffce9a0],esi
c001cdf4:	89 15 60 17 03 c0    	mov    DWORD PTR ds:0xc0031760,edx
c001cdfa:	83 c4 10             	add    esp,0x10
c001cdfd:	b0 01                	mov    al,0x1
c001cdff:	83 c4 5c             	add    esp,0x5c
c001ce02:	5b                   	pop    ebx
c001ce03:	5e                   	pop    esi
c001ce04:	5f                   	pop    edi
c001ce05:	5d                   	pop    ebp
c001ce06:	c3                   	ret    

c001ce07 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001ce07:	55                   	push   ebp
c001ce08:	57                   	push   edi
c001ce09:	56                   	push   esi
c001ce0a:	53                   	push   ebx
c001ce0b:	81 ec 68 03 00 00    	sub    esp,0x368
c001ce11:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001ce18:	8b 1d b4 17 03 c0    	mov    ebx,DWORD PTR ds:0xc00317b4
c001ce1e:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001ce22:	68 14 01 00 00       	push   0x114
c001ce27:	e8 14 2a ff ff       	call   c000f840 <malloc>
c001ce2c:	83 c4 0c             	add    esp,0xc
c001ce2f:	89 c5                	mov    ebp,eax
c001ce31:	53                   	push   ebx
c001ce32:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001ce39:	50                   	push   eax
c001ce3a:	e8 b1 64 ff ff       	call   c00132f0 <File::File(char const*, Process*)>
c001ce3f:	5e                   	pop    esi
c001ce40:	5f                   	pop    edi
c001ce41:	6a 01                	push   0x1
c001ce43:	55                   	push   ebp
c001ce44:	e8 0b 65 ff ff       	call   c0013354 <File::open(FileOpenMode)>
c001ce49:	83 c4 10             	add    esp,0x10
c001ce4c:	85 c0                	test   eax,eax
c001ce4e:	0f 85 8d 06 00 00    	jne    c001d4e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001ce54:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001ce5c:	83 ec 0c             	sub    esp,0xc
c001ce5f:	6a 34                	push   0x34
c001ce61:	e8 da 29 ff ff       	call   c000f840 <malloc>
c001ce66:	5b                   	pop    ebx
c001ce67:	89 c7                	mov    edi,eax
c001ce69:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001ce6d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ce70:	53                   	push   ebx
c001ce71:	57                   	push   edi
c001ce72:	6a 00                	push   0x0
c001ce74:	6a 34                	push   0x34
c001ce76:	55                   	push   ebp
c001ce77:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ce7a:	83 c4 20             	add    esp,0x20
c001ce7d:	85 c0                	test   eax,eax
c001ce7f:	0f 85 5c 06 00 00    	jne    c001d4e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001ce85:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001ce8b:	0f 85 50 06 00 00    	jne    c001d4e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001ce91:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001ce94:	85 c0                	test   eax,eax
c001ce96:	0f 84 45 06 00 00    	je     c001d4e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001ce9c:	31 d2                	xor    edx,edx
c001ce9e:	51                   	push   ecx
c001ce9f:	52                   	push   edx
c001cea0:	50                   	push   eax
c001cea1:	55                   	push   ebp
c001cea2:	e8 6b 65 ff ff       	call   c0013412 <File::seek(unsigned long long)>
c001cea7:	83 c4 10             	add    esp,0x10
c001ceaa:	85 c0                	test   eax,eax
c001ceac:	0f 85 2f 06 00 00    	jne    c001d4e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001ceb2:	83 ec 0c             	sub    esp,0xc
c001ceb5:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001ceb8:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cebc:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001cec0:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cec4:	0f af c2             	imul   eax,edx
c001cec7:	50                   	push   eax
c001cec8:	e8 73 29 ff ff       	call   c000f840 <malloc>
c001cecd:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001ced0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ced4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ced7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cedb:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cedf:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cee3:	0f af c2             	imul   eax,edx
c001cee6:	99                   	cdq    
c001cee7:	52                   	push   edx
c001cee8:	50                   	push   eax
c001cee9:	55                   	push   ebp
c001ceea:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ceed:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001cef0:	83 c4 20             	add    esp,0x20
c001cef3:	85 c0                	test   eax,eax
c001cef5:	0f 84 e6 05 00 00    	je     c001d4e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cefb:	52                   	push   edx
c001cefc:	31 d2                	xor    edx,edx
c001cefe:	52                   	push   edx
c001ceff:	50                   	push   eax
c001cf00:	55                   	push   ebp
c001cf01:	e8 0c 65 ff ff       	call   c0013412 <File::seek(unsigned long long)>
c001cf06:	83 c4 10             	add    esp,0x10
c001cf09:	85 c0                	test   eax,eax
c001cf0b:	0f 85 d0 05 00 00    	jne    c001d4e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cf11:	83 ec 0c             	sub    esp,0xc
c001cf14:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001cf18:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001cf1c:	31 f6                	xor    esi,esi
c001cf1e:	0f af c2             	imul   eax,edx
c001cf21:	50                   	push   eax
c001cf22:	e8 19 29 ff ff       	call   c000f840 <malloc>
c001cf27:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cf2a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cf2e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cf31:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cf35:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001cf39:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001cf3d:	0f af c2             	imul   eax,edx
c001cf40:	99                   	cdq    
c001cf41:	52                   	push   edx
c001cf42:	50                   	push   eax
c001cf43:	55                   	push   ebp
c001cf44:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cf47:	83 c4 20             	add    esp,0x20
c001cf4a:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001cf4e:	0f 86 8a 00 00 00    	jbe    c001cfde <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001cf54:	0f b7 de             	movzx  ebx,si
c001cf57:	c1 e3 05             	shl    ebx,0x5
c001cf5a:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001cf5e:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001cf61:	75 75                	jne    c001cfd8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001cf63:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001cf66:	31 d2                	xor    edx,edx
c001cf68:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cf6c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001cf6f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cf73:	50                   	push   eax
c001cf74:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001cf77:	52                   	push   edx
c001cf78:	50                   	push   eax
c001cf79:	55                   	push   ebp
c001cf7a:	e8 93 64 ff ff       	call   c0013412 <File::seek(unsigned long long)>
c001cf7f:	83 c4 10             	add    esp,0x10
c001cf82:	85 c0                	test   eax,eax
c001cf84:	0f 85 57 05 00 00    	jne    c001d4e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cf8a:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001cf91:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cf94:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001cf98:	31 d2                	xor    edx,edx
c001cf9a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001cf9e:	83 ec 0c             	sub    esp,0xc
c001cfa1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cfa5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cfac:	50                   	push   eax
c001cfad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cfb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cfb5:	52                   	push   edx
c001cfb6:	50                   	push   eax
c001cfb7:	55                   	push   ebp
c001cfb8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cfbb:	83 c4 1c             	add    esp,0x1c
c001cfbe:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001cfc1:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001cfc4:	50                   	push   eax
c001cfc5:	6a 00                	push   0x0
c001cfc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfcb:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001cfcf:	50                   	push   eax
c001cfd0:	e8 a3 37 fe ff       	call   c0000778 <memset>
c001cfd5:	83 c4 10             	add    esp,0x10
c001cfd8:	46                   	inc    esi
c001cfd9:	e9 6c ff ff ff       	jmp    c001cf4a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001cfde:	53                   	push   ebx
c001cfdf:	31 db                	xor    ebx,ebx
c001cfe1:	68 00 01 00 00       	push   0x100
c001cfe6:	6a 00                	push   0x0
c001cfe8:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001cfec:	50                   	push   eax
c001cfed:	e8 86 37 fe ff       	call   c0000778 <memset>
c001cff2:	83 c4 0c             	add    esp,0xc
c001cff5:	68 00 01 00 00       	push   0x100
c001cffa:	6a 00                	push   0x0
c001cffc:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001d003:	50                   	push   eax
c001d004:	e8 6f 37 fe ff       	call   c0000778 <memset>
c001d009:	83 c4 10             	add    esp,0x10
c001d00c:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d014:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d01c:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001d024:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d02c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d034:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001d038:	0f 86 30 01 00 00    	jbe    c001d16e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001d03e:	0f b7 f3             	movzx  esi,bx
c001d041:	6b f6 28             	imul   esi,esi,0x28
c001d044:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d048:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d04b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d04f:	52                   	push   edx
c001d050:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d054:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001d058:	8b 06                	mov    eax,DWORD PTR [esi]
c001d05a:	6b d2 28             	imul   edx,edx,0x28
c001d05d:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001d061:	31 d2                	xor    edx,edx
c001d063:	52                   	push   edx
c001d064:	50                   	push   eax
c001d065:	55                   	push   ebp
c001d066:	e8 a7 63 ff ff       	call   c0013412 <File::seek(unsigned long long)>
c001d06b:	83 c4 0c             	add    esp,0xc
c001d06e:	6a 20                	push   0x20
c001d070:	6a 00                	push   0x0
c001d072:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d079:	51                   	push   ecx
c001d07a:	e8 f9 36 fe ff       	call   c0000778 <memset>
c001d07f:	59                   	pop    ecx
c001d080:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d083:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d087:	52                   	push   edx
c001d088:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001d08f:	51                   	push   ecx
c001d090:	6a 00                	push   0x0
c001d092:	6a 1f                	push   0x1f
c001d094:	55                   	push   ebp
c001d095:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d098:	83 c4 1c             	add    esp,0x1c
c001d09b:	6a 09                	push   0x9
c001d09d:	68 c8 be 02 c0       	push   0xc002bec8
c001d0a2:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d0a9:	51                   	push   ecx
c001d0aa:	e8 91 35 fe ff       	call   c0000640 <memcmp>
c001d0af:	83 c4 10             	add    esp,0x10
c001d0b2:	85 c0                	test   eax,eax
c001d0b4:	75 21                	jne    c001d0d7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001d0b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d0ba:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d0be:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d0c2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d0c6:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d0c9:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d0d0:	89 d0                	mov    eax,edx
c001d0d2:	40                   	inc    eax
c001d0d3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d0d7:	50                   	push   eax
c001d0d8:	6a 09                	push   0x9
c001d0da:	68 d2 be 02 c0       	push   0xc002bed2
c001d0df:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d0e6:	50                   	push   eax
c001d0e7:	e8 54 35 fe ff       	call   c0000640 <memcmp>
c001d0ec:	83 c4 10             	add    esp,0x10
c001d0ef:	85 c0                	test   eax,eax
c001d0f1:	75 21                	jne    c001d114 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001d0f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d0f7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d0fb:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d0ff:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d103:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d106:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d10d:	89 d0                	mov    eax,edx
c001d10f:	40                   	inc    eax
c001d110:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d114:	50                   	push   eax
c001d115:	50                   	push   eax
c001d116:	68 9e be 02 c0       	push   0xc002be9e
c001d11b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d122:	50                   	push   eax
c001d123:	e8 98 37 fe ff       	call   c00008c0 <strcmp>
c001d128:	83 c4 10             	add    esp,0x10
c001d12b:	85 c0                	test   eax,eax
c001d12d:	75 0f                	jne    c001d13e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001d12f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d132:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d136:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d13a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d13e:	50                   	push   eax
c001d13f:	50                   	push   eax
c001d140:	68 a6 be 02 c0       	push   0xc002bea6
c001d145:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d14c:	50                   	push   eax
c001d14d:	e8 6e 37 fe ff       	call   c00008c0 <strcmp>
c001d152:	83 c4 10             	add    esp,0x10
c001d155:	85 c0                	test   eax,eax
c001d157:	75 0f                	jne    c001d168 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001d159:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d15c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d160:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d164:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d168:	43                   	inc    ebx
c001d169:	e9 c6 fe ff ff       	jmp    c001d034 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d16e:	31 d2                	xor    edx,edx
c001d170:	50                   	push   eax
c001d171:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d175:	52                   	push   edx
c001d176:	50                   	push   eax
c001d177:	55                   	push   ebp
c001d178:	e8 95 62 ff ff       	call   c0013412 <File::seek(unsigned long long)>
c001d17d:	58                   	pop    eax
c001d17e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d182:	e8 b9 26 ff ff       	call   c000f840 <malloc>
c001d187:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d18a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d18e:	31 d2                	xor    edx,edx
c001d190:	58                   	pop    eax
c001d191:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d195:	53                   	push   ebx
c001d196:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d19a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d19e:	52                   	push   edx
c001d19f:	50                   	push   eax
c001d1a0:	55                   	push   ebp
c001d1a1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d1a4:	83 c4 14             	add    esp,0x14
c001d1a7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d1ab:	e8 90 26 ff ff       	call   c000f840 <malloc>
c001d1b0:	31 d2                	xor    edx,edx
c001d1b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d1b6:	83 c4 0c             	add    esp,0xc
c001d1b9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d1bd:	52                   	push   edx
c001d1be:	50                   	push   eax
c001d1bf:	55                   	push   ebp
c001d1c0:	e8 4d 62 ff ff       	call   c0013412 <File::seek(unsigned long long)>
c001d1c5:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d1c8:	31 d2                	xor    edx,edx
c001d1ca:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d1cd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d1d1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d1d5:	52                   	push   edx
c001d1d6:	50                   	push   eax
c001d1d7:	55                   	push   ebp
c001d1d8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d1db:	83 c4 20             	add    esp,0x20
c001d1de:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d1e6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d1ea:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d1ee:	0f 84 f1 02 00 00    	je     c001d4e5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6de>
c001d1f4:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d1fb:	31 d2                	xor    edx,edx
c001d1fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d201:	c1 e8 03             	shr    eax,0x3
c001d204:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d208:	51                   	push   ecx
c001d209:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d20d:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d211:	52                   	push   edx
c001d212:	50                   	push   eax
c001d213:	55                   	push   ebp
c001d214:	e8 f9 61 ff ff       	call   c0013412 <File::seek(unsigned long long)>
c001d219:	5b                   	pop    ebx
c001d21a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d21e:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d225:	e8 16 26 ff ff       	call   c000f840 <malloc>
c001d22a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d22d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d231:	31 d2                	xor    edx,edx
c001d233:	5e                   	pop    esi
c001d234:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d238:	50                   	push   eax
c001d239:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d23d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d241:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d248:	52                   	push   edx
c001d249:	50                   	push   eax
c001d24a:	55                   	push   ebp
c001d24b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d24e:	83 c4 20             	add    esp,0x20
c001d251:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d259:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d25d:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d261:	0f 8d 62 02 00 00    	jge    c001d4c9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c2>
c001d267:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d26b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d26f:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d274:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d277:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d27b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d27f:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d283:	89 d8                	mov    eax,ebx
c001d285:	c1 e8 08             	shr    eax,0x8
c001d288:	89 c6                	mov    esi,eax
c001d28a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d28e:	c1 e6 04             	shl    esi,0x4
c001d291:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d295:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d298:	85 d2                	test   edx,edx
c001d29a:	0f 85 bf 00 00 00    	jne    c001d35f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d2a0:	83 ec 0c             	sub    esp,0xc
c001d2a3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d2a7:	03 06                	add    eax,DWORD PTR [esi]
c001d2a9:	50                   	push   eax
c001d2aa:	e8 4b f8 ff ff       	call   c001cafa <Thr::getAddressOfKernelSymbol(char const*)>
c001d2af:	83 c4 10             	add    esp,0x10
c001d2b2:	89 c2                	mov    edx,eax
c001d2b4:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d2b9:	85 c0                	test   eax,eax
c001d2bb:	0f 85 9e 00 00 00    	jne    c001d35f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d2c1:	83 ec 0c             	sub    esp,0xc
c001d2c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d2c8:	03 06                	add    eax,DWORD PTR [esi]
c001d2ca:	50                   	push   eax
c001d2cb:	e8 25 12 ff ff       	call   c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>
c001d2d0:	83 c4 10             	add    esp,0x10
c001d2d3:	89 c2                	mov    edx,eax
c001d2d5:	85 c0                	test   eax,eax
c001d2d7:	0f 85 82 00 00 00    	jne    c001d35f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d2dd:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d2e1:	50                   	push   eax
c001d2e2:	50                   	push   eax
c001d2e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2e7:	03 06                	add    eax,DWORD PTR [esi]
c001d2e9:	50                   	push   eax
c001d2ea:	68 dc be 02 c0       	push   0xc002bedc
c001d2ef:	e8 a4 5a ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001d2f4:	58                   	pop    eax
c001d2f5:	5a                   	pop    edx
c001d2f6:	68 f6 be 02 c0       	push   0xc002bef6
c001d2fb:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d302:	50                   	push   eax
c001d303:	e8 2c 35 fe ff       	call   c0000834 <strcpy>
c001d308:	59                   	pop    ecx
c001d309:	58                   	pop    eax
c001d30a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d30e:	03 06                	add    eax,DWORD PTR [esi]
c001d310:	50                   	push   eax
c001d311:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d318:	50                   	push   eax
c001d319:	e8 56 36 fe ff       	call   c0000974 <strcat>
c001d31e:	58                   	pop    eax
c001d31f:	5a                   	pop    edx
c001d320:	68 8c bf 02 c0       	push   0xc002bf8c
c001d325:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d32c:	50                   	push   eax
c001d32d:	e8 42 36 fe ff       	call   c0000974 <strcat>
c001d332:	83 c4 10             	add    esp,0x10
c001d335:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d33a:	0f 84 43 01 00 00    	je     c001d483 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d340:	83 ec 0c             	sub    esp,0xc
c001d343:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d34a:	50                   	push   eax
c001d34b:	e8 23 d1 ff ff       	call   c001a473 <Krnl::panic(char const*)>
c001d350:	83 c4 10             	add    esp,0x10
c001d353:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d357:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d35b:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d35f:	80 fb 01             	cmp    bl,0x1
c001d362:	75 7d                	jne    c001d3e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5da>
c001d364:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001d36b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d36f:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001d373:	01 ce                	add    esi,ecx
c001d375:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d37b:	0f 94 c0             	sete   al
c001d37e:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d384:	0f 94 c3             	sete   bl
c001d387:	09 c3                	or     ebx,eax
c001d389:	8b 06                	mov    eax,DWORD PTR [esi]
c001d38b:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d390:	74 36                	je     c001d3c8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c1>
c001d392:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001d395:	84 db                	test   bl,bl
c001d397:	75 0a                	jne    c001d3a3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x59c>
c001d399:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d39d:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d3a1:	76 37                	jbe    c001d3da <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d3a3:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001d3a7:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d3ac:	0f 84 d1 00 00 00    	je     c001d483 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d3b2:	83 ec 0c             	sub    esp,0xc
c001d3b5:	68 0d bf 02 c0       	push   0xc002bf0d
c001d3ba:	e8 b4 d0 ff ff       	call   c001a473 <Krnl::panic(char const*)>
c001d3bf:	83 c4 10             	add    esp,0x10
c001d3c2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d3c6:	eb 12                	jmp    c001d3da <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d3c8:	01 c1                	add    ecx,eax
c001d3ca:	84 db                	test   bl,bl
c001d3cc:	75 0c                	jne    c001d3da <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d3ce:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d3d2:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d3d6:	77 02                	ja     c001d3da <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d3d8:	01 d1                	add    ecx,edx
c001d3da:	89 0e                	mov    DWORD PTR [esi],ecx
c001d3dc:	e9 df 00 00 00       	jmp    c001d4c0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d3e1:	80 fb 02             	cmp    bl,0x2
c001d3e4:	75 71                	jne    c001d457 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x650>
c001d3e6:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d3ed:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d3f1:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001d3f5:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d3fb:	74 15                	je     c001d412 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d3fd:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d403:	74 0d                	je     c001d412 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d405:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d409:	83 e8 04             	sub    eax,0x4
c001d40c:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d410:	76 1f                	jbe    c001d431 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62a>
c001d412:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d416:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d41b:	74 66                	je     c001d483 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d41d:	83 ec 0c             	sub    esp,0xc
c001d420:	68 29 bf 02 c0       	push   0xc002bf29
c001d425:	e8 49 d0 ff ff       	call   c001a473 <Krnl::panic(char const*)>
c001d42a:	83 c4 10             	add    esp,0x10
c001d42d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d431:	8b 06                	mov    eax,DWORD PTR [esi]
c001d433:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d438:	74 13                	je     c001d44d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x646>
c001d43a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d43e:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d445:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d449:	01 c8                	add    eax,ecx
c001d44b:	eb 04                	jmp    c001d451 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c001d44d:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d451:	01 c2                	add    edx,eax
c001d453:	89 16                	mov    DWORD PTR [esi],edx
c001d455:	eb 69                	jmp    c001d4c0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d457:	0f b6 db             	movzx  ebx,bl
c001d45a:	50                   	push   eax
c001d45b:	50                   	push   eax
c001d45c:	53                   	push   ebx
c001d45d:	68 45 bf 02 c0       	push   0xc002bf45
c001d462:	e8 31 59 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001d467:	83 c4 10             	add    esp,0x10
c001d46a:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d46f:	74 12                	je     c001d483 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d471:	83 ec 0c             	sub    esp,0xc
c001d474:	68 50 bf 02 c0       	push   0xc002bf50
c001d479:	e8 f5 cf ff ff       	call   c001a473 <Krnl::panic(char const*)>
c001d47e:	83 c4 10             	add    esp,0x10
c001d481:	eb 3d                	jmp    c001d4c0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d483:	83 ec 0c             	sub    esp,0xc
c001d486:	55                   	push   ebp
c001d487:	e8 26 5f ff ff       	call   c00133b2 <File::close()>
c001d48c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d48f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d492:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d495:	59                   	pop    ecx
c001d496:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d49a:	e8 b1 23 ff ff       	call   c000f850 <free>
c001d49f:	5b                   	pop    ebx
c001d4a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d4a4:	e8 a7 23 ff ff       	call   c000f850 <free>
c001d4a9:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d4ac:	e8 9f 23 ff ff       	call   c000f850 <free>
c001d4b1:	5e                   	pop    esi
c001d4b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d4b6:	e8 95 23 ff ff       	call   c000f850 <free>
c001d4bb:	83 c4 10             	add    esp,0x10
c001d4be:	eb 21                	jmp    c001d4e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d4c0:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d4c4:	e9 90 fd ff ff       	jmp    c001d259 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d4c9:	83 ec 0c             	sub    esp,0xc
c001d4cc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d4d0:	e8 7b 23 ff ff       	call   c000f850 <free>
c001d4d5:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d4d9:	83 c4 10             	add    esp,0x10
c001d4dc:	e9 05 fd ff ff       	jmp    c001d1e6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d4e1:	31 c0                	xor    eax,eax
c001d4e3:	eb 33                	jmp    c001d518 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x711>
c001d4e5:	83 ec 0c             	sub    esp,0xc
c001d4e8:	55                   	push   ebp
c001d4e9:	e8 c4 5e ff ff       	call   c00133b2 <File::close()>
c001d4ee:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d4f1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d4f4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d4f7:	58                   	pop    eax
c001d4f8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d4fc:	e8 4f 23 ff ff       	call   c000f850 <free>
c001d501:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d504:	e8 47 23 ff ff       	call   c000f850 <free>
c001d509:	5a                   	pop    edx
c001d50a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d50e:	e8 3d 23 ff ff       	call   c000f850 <free>
c001d513:	83 c4 10             	add    esp,0x10
c001d516:	b0 01                	mov    al,0x1
c001d518:	81 c4 5c 03 00 00    	add    esp,0x35c
c001d51e:	5b                   	pop    ebx
c001d51f:	5e                   	pop    esi
c001d520:	5f                   	pop    edi
c001d521:	5d                   	pop    ebp
c001d522:	c3                   	ret    

c001d523 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001d523:	56                   	push   esi
c001d524:	31 d2                	xor    edx,edx
c001d526:	53                   	push   ebx
c001d527:	8b 1d c0 0f 03 c0    	mov    ebx,DWORD PTR ds:0xc0030fc0
c001d52d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d531:	39 d3                	cmp    ebx,edx
c001d533:	7e 1b                	jle    c001d550 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001d535:	8b 04 95 e0 11 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffcee20]
c001d53c:	39 c8                	cmp    eax,ecx
c001d53e:	77 0d                	ja     c001d54d <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001d540:	8b 34 95 e0 0f 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffcf020]
c001d547:	01 c6                	add    esi,eax
c001d549:	39 ce                	cmp    esi,ecx
c001d54b:	77 05                	ja     c001d552 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001d54d:	42                   	inc    edx
c001d54e:	eb e1                	jmp    c001d531 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001d550:	31 c0                	xor    eax,eax
c001d552:	5b                   	pop    ebx
c001d553:	5e                   	pop    esi
c001d554:	c3                   	ret    

c001d555 <Thr::getDriverNameFromAddress(unsigned long)>:
c001d555:	53                   	push   ebx
c001d556:	31 c0                	xor    eax,eax
c001d558:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d55c:	8b 1d c0 0f 03 c0    	mov    ebx,DWORD PTR ds:0xc0030fc0
c001d562:	39 c3                	cmp    ebx,eax
c001d564:	7e 22                	jle    c001d588 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001d566:	8b 14 85 e0 11 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcee20]
c001d56d:	39 ca                	cmp    edx,ecx
c001d56f:	77 14                	ja     c001d585 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d571:	03 14 85 e0 0f 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffcf020]
c001d578:	39 ca                	cmp    edx,ecx
c001d57a:	76 09                	jbe    c001d585 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d57c:	8b 04 85 e0 13 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcec20]
c001d583:	eb 05                	jmp    c001d58a <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d585:	40                   	inc    eax
c001d586:	eb da                	jmp    c001d562 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001d588:	31 c0                	xor    eax,eax
c001d58a:	5b                   	pop    ebx
c001d58b:	c3                   	ret    

c001d58c <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001d58c:	53                   	push   ebx
c001d58d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d591:	53                   	push   ebx
c001d592:	e8 8c ff ff ff       	call   c001d523 <Thr::getDriverBaseFromAddress(unsigned long)>
c001d597:	5a                   	pop    edx
c001d598:	31 d2                	xor    edx,edx
c001d59a:	85 c0                	test   eax,eax
c001d59c:	74 04                	je     c001d5a2 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d59e:	89 da                	mov    edx,ebx
c001d5a0:	29 c2                	sub    edx,eax
c001d5a2:	89 d0                	mov    eax,edx
c001d5a4:	5b                   	pop    ebx
c001d5a5:	c3                   	ret    

c001d5a6 <Thr::loadDLL(char const*, bool)>:
c001d5a6:	55                   	push   ebp
c001d5a7:	57                   	push   edi
c001d5a8:	56                   	push   esi
c001d5a9:	53                   	push   ebx
c001d5aa:	81 ec 34 01 00 00    	sub    esp,0x134
c001d5b0:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d5b7:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001d5be:	56                   	push   esi
c001d5bf:	68 68 bf 02 c0       	push   0xc002bf68
c001d5c4:	e8 cf 57 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001d5c9:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d5d0:	e8 6b 22 ff ff       	call   c000f840 <malloc>
c001d5d5:	83 c4 0c             	add    esp,0xc
c001d5d8:	89 c3                	mov    ebx,eax
c001d5da:	ff 35 b4 17 03 c0    	push   DWORD PTR ds:0xc00317b4
c001d5e0:	56                   	push   esi
c001d5e1:	50                   	push   eax
c001d5e2:	e8 09 5d ff ff       	call   c00132f0 <File::File(char const*, Process*)>
c001d5e7:	83 c4 10             	add    esp,0x10
c001d5ea:	85 db                	test   ebx,ebx
c001d5ec:	75 3c                	jne    c001d62a <Thr::loadDLL(char const*, bool)+0x84>
c001d5ee:	89 e8                	mov    eax,ebp
c001d5f0:	84 c0                	test   al,al
c001d5f2:	0f 84 f0 01 00 00    	je     c001d7e8 <Thr::loadDLL(char const*, bool)+0x242>
c001d5f8:	50                   	push   eax
c001d5f9:	50                   	push   eax
c001d5fa:	68 79 bf 02 c0       	push   0xc002bf79
c001d5ff:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001d603:	57                   	push   edi
c001d604:	e8 2b 32 fe ff       	call   c0000834 <strcpy>
c001d609:	58                   	pop    eax
c001d60a:	5a                   	pop    edx
c001d60b:	56                   	push   esi
c001d60c:	57                   	push   edi
c001d60d:	e8 62 33 fe ff       	call   c0000974 <strcat>
c001d612:	59                   	pop    ecx
c001d613:	58                   	pop    eax
c001d614:	68 8c bf 02 c0       	push   0xc002bf8c
c001d619:	57                   	push   edi
c001d61a:	e8 55 33 fe ff       	call   c0000974 <strcat>
c001d61f:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d622:	e8 4c ce ff ff       	call   c001a473 <Krnl::panic(char const*)>
c001d627:	83 c4 10             	add    esp,0x10
c001d62a:	50                   	push   eax
c001d62b:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d62f:	50                   	push   eax
c001d630:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d634:	50                   	push   eax
c001d635:	53                   	push   ebx
c001d636:	e8 c5 5f ff ff       	call   c0013600 <File::stat(unsigned long long*, bool*)>
c001d63b:	83 c4 10             	add    esp,0x10
c001d63e:	85 db                	test   ebx,ebx
c001d640:	74 0c                	je     c001d64e <Thr::loadDLL(char const*, bool)+0xa8>
c001d642:	83 ec 0c             	sub    esp,0xc
c001d645:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d647:	53                   	push   ebx
c001d648:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d64b:	83 c4 10             	add    esp,0x10
c001d64e:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d653:	75 0a                	jne    c001d65f <Thr::loadDLL(char const*, bool)+0xb9>
c001d655:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d659:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d65d:	75 3c                	jne    c001d69b <Thr::loadDLL(char const*, bool)+0xf5>
c001d65f:	89 e8                	mov    eax,ebp
c001d661:	84 c0                	test   al,al
c001d663:	0f 84 67 01 00 00    	je     c001d7d0 <Thr::loadDLL(char const*, bool)+0x22a>
c001d669:	50                   	push   eax
c001d66a:	50                   	push   eax
c001d66b:	68 79 bf 02 c0       	push   0xc002bf79
c001d670:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d674:	53                   	push   ebx
c001d675:	e8 ba 31 fe ff       	call   c0000834 <strcpy>
c001d67a:	58                   	pop    eax
c001d67b:	5a                   	pop    edx
c001d67c:	56                   	push   esi
c001d67d:	53                   	push   ebx
c001d67e:	e8 f1 32 fe ff       	call   c0000974 <strcat>
c001d683:	59                   	pop    ecx
c001d684:	5f                   	pop    edi
c001d685:	68 8c bf 02 c0       	push   0xc002bf8c
c001d68a:	53                   	push   ebx
c001d68b:	e8 e4 32 fe ff       	call   c0000974 <strcat>
c001d690:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d693:	e8 db cd ff ff       	call   c001a473 <Krnl::panic(char const*)>
c001d698:	83 c4 10             	add    esp,0x10
c001d69b:	e8 42 47 ff ff       	call   c0011de2 <Virt::getAKernelVAS()>
c001d6a0:	51                   	push   ecx
c001d6a1:	68 03 08 00 00       	push   0x803
c001d6a6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001d6aa:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d6ae:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001d6b4:	83 d3 00             	adc    ebx,0x0
c001d6b7:	89 ca                	mov    edx,ecx
c001d6b9:	89 d1                	mov    ecx,edx
c001d6bb:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001d6bf:	51                   	push   ecx
c001d6c0:	50                   	push   eax
c001d6c1:	e8 3e 4c ff ff       	call   c0012304 <VAS::allocatePages(int, int)>
c001d6c6:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001d6ca:	89 c3                	mov    ebx,eax
c001d6cc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d6d0:	05 ff 0f 00 00       	add    eax,0xfff
c001d6d5:	83 d2 00             	adc    edx,0x0
c001d6d8:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d6dc:	c1 ea 0c             	shr    edx,0xc
c001d6df:	52                   	push   edx
c001d6e0:	50                   	push   eax
c001d6e1:	53                   	push   ebx
c001d6e2:	68 8e bf 02 c0       	push   0xc002bf8e
c001d6e7:	e8 ac 56 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001d6ec:	83 c4 14             	add    esp,0x14
c001d6ef:	56                   	push   esi
c001d6f0:	e8 9f 30 fe ff       	call   c0000794 <strlen>
c001d6f5:	8b 3d c0 0f 03 c0    	mov    edi,DWORD PTR ds:0xc0030fc0
c001d6fb:	40                   	inc    eax
c001d6fc:	89 04 24             	mov    DWORD PTR [esp],eax
c001d6ff:	e8 3c 21 ff ff       	call   c000f840 <malloc>
c001d704:	89 04 bd e0 13 03 c0 	mov    DWORD PTR [edi*4-0x3ffcec20],eax
c001d70b:	5f                   	pop    edi
c001d70c:	58                   	pop    eax
c001d70d:	a1 c0 0f 03 c0       	mov    eax,ds:0xc0030fc0
c001d712:	56                   	push   esi
c001d713:	ff 34 85 e0 13 03 c0 	push   DWORD PTR [eax*4-0x3ffcec20]
c001d71a:	e8 15 31 fe ff       	call   c0000834 <strcpy>
c001d71f:	a1 c0 0f 03 c0       	mov    eax,ds:0xc0030fc0
c001d724:	8d 50 01             	lea    edx,[eax+0x1]
c001d727:	89 1c 85 e0 11 03 c0 	mov    DWORD PTR [eax*4-0x3ffcee20],ebx
c001d72e:	89 15 c0 0f 03 c0    	mov    DWORD PTR ds:0xc0030fc0,edx
c001d734:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d738:	83 c4 0c             	add    esp,0xc
c001d73b:	89 14 85 e0 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf020],edx
c001d742:	6a 01                	push   0x1
c001d744:	53                   	push   ebx
c001d745:	56                   	push   esi
c001d746:	e8 bc f6 ff ff       	call   c001ce07 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d74b:	83 c4 10             	add    esp,0x10
c001d74e:	89 c7                	mov    edi,eax
c001d750:	84 c0                	test   al,al
c001d752:	0f 85 8c 00 00 00    	jne    c001d7e4 <Thr::loadDLL(char const*, bool)+0x23e>
c001d758:	89 e8                	mov    eax,ebp
c001d75a:	84 c0                	test   al,al
c001d75c:	74 76                	je     c001d7d4 <Thr::loadDLL(char const*, bool)+0x22e>
c001d75e:	83 ec 0c             	sub    esp,0xc
c001d761:	68 b2 bf 02 c0       	push   0xc002bfb2
c001d766:	e8 08 cd ff ff       	call   c001a473 <Krnl::panic(char const*)>
c001d76b:	83 c4 10             	add    esp,0x10
c001d76e:	eb 64                	jmp    c001d7d4 <Thr::loadDLL(char const*, bool)+0x22e>
c001d770:	e8 6d 46 ff ff       	call   c0011de2 <Virt::getAKernelVAS()>
c001d775:	89 f5                	mov    ebp,esi
c001d777:	c1 e5 0c             	shl    ebp,0xc
c001d77a:	52                   	push   edx
c001d77b:	01 dd                	add    ebp,ebx
c001d77d:	52                   	push   edx
c001d77e:	55                   	push   ebp
c001d77f:	50                   	push   eax
c001d780:	e8 f9 46 ff ff       	call   c0011e7e <VAS::getPageTableEntry(unsigned long)>
c001d785:	83 c4 10             	add    esp,0x10
c001d788:	f6 00 60             	test   BYTE PTR [eax],0x60
c001d78b:	75 0c                	jne    c001d799 <Thr::loadDLL(char const*, bool)+0x1f3>
c001d78d:	83 ec 0c             	sub    esp,0xc
c001d790:	55                   	push   ebp
c001d791:	e8 bd 26 ff ff       	call   c000fe53 <Phys::freePage(unsigned long)>
c001d796:	83 c4 10             	add    esp,0x10
c001d799:	46                   	inc    esi
c001d79a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d79e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d7a2:	05 ff 0f 00 00       	add    eax,0xfff
c001d7a7:	83 d2 00             	adc    edx,0x0
c001d7aa:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d7ae:	c1 ea 0c             	shr    edx,0xc
c001d7b1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d7b5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d7b9:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001d7bd:	ba 00 00 00 00       	mov    edx,0x0
c001d7c2:	89 d0                	mov    eax,edx
c001d7c4:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001d7c8:	72 a6                	jb     c001d770 <Thr::loadDLL(char const*, bool)+0x1ca>
c001d7ca:	89 f8                	mov    eax,edi
c001d7cc:	84 c0                	test   al,al
c001d7ce:	75 18                	jne    c001d7e8 <Thr::loadDLL(char const*, bool)+0x242>
c001d7d0:	31 db                	xor    ebx,ebx
c001d7d2:	eb 14                	jmp    c001d7e8 <Thr::loadDLL(char const*, bool)+0x242>
c001d7d4:	83 ec 0c             	sub    esp,0xc
c001d7d7:	68 d1 bf 02 c0       	push   0xc002bfd1
c001d7dc:	e8 92 cc ff ff       	call   c001a473 <Krnl::panic(char const*)>
c001d7e1:	83 c4 10             	add    esp,0x10
c001d7e4:	31 f6                	xor    esi,esi
c001d7e6:	eb b2                	jmp    c001d79a <Thr::loadDLL(char const*, bool)+0x1f4>
c001d7e8:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d7ee:	89 d8                	mov    eax,ebx
c001d7f0:	5b                   	pop    ebx
c001d7f1:	5e                   	pop    esi
c001d7f2:	5f                   	pop    edi
c001d7f3:	5d                   	pop    ebp
c001d7f4:	c3                   	ret    

c001d7f5 <Thr::executeDLL(unsigned long, void*)>:
c001d7f5:	56                   	push   esi
c001d7f6:	53                   	push   ebx
c001d7f7:	52                   	push   edx
c001d7f8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d7fc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d800:	85 db                	test   ebx,ebx
c001d802:	75 10                	jne    c001d814 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d804:	83 ec 0c             	sub    esp,0xc
c001d807:	68 ed bf 02 c0       	push   0xc002bfed
c001d80c:	e8 62 cc ff ff       	call   c001a473 <Krnl::panic(char const*)>
c001d811:	83 c4 10             	add    esp,0x10
c001d814:	50                   	push   eax
c001d815:	50                   	push   eax
c001d816:	53                   	push   ebx
c001d817:	68 17 c0 02 c0       	push   0xc002c017
c001d81c:	e8 77 55 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001d821:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d825:	89 d8                	mov    eax,ebx
c001d827:	83 c4 14             	add    esp,0x14
c001d82a:	5b                   	pop    ebx
c001d82b:	5e                   	pop    esi
c001d82c:	ff e0                	jmp    eax

c001d82e <changeTSS>:
c001d82e:	83 ec 14             	sub    esp,0x14
c001d831:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d836:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d839:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d83e:	c1 e2 15             	shl    edx,0x15
c001d841:	29 d0                	sub    eax,edx
c001d843:	50                   	push   eax
c001d844:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c001d849:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d84f:	05 7c 11 00 00       	add    eax,0x117c
c001d854:	50                   	push   eax
c001d855:	e8 20 3c ff ff       	call   c001147a <TSS::setESP(unsigned long)>
c001d85a:	83 c4 1c             	add    esp,0x1c
c001d85d:	c3                   	ret    

c001d85e <Process::addArgs(char**)>:
c001d85e:	57                   	push   edi
c001d85f:	56                   	push   esi
c001d860:	53                   	push   ebx
c001d861:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d865:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d869:	c7 86 36 19 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1936],0x0
c001d873:	85 ff                	test   edi,edi
c001d875:	74 3d                	je     c001d8b4 <Process::addArgs(char**)+0x56>
c001d877:	8b 07                	mov    eax,DWORD PTR [edi]
c001d879:	85 c0                	test   eax,eax
c001d87b:	74 37                	je     c001d8b4 <Process::addArgs(char**)+0x56>
c001d87d:	31 db                	xor    ebx,ebx
c001d87f:	83 ec 0c             	sub    esp,0xc
c001d882:	50                   	push   eax
c001d883:	e8 0c 2f fe ff       	call   c0000794 <strlen>
c001d888:	40                   	inc    eax
c001d889:	89 04 24             	mov    DWORD PTR [esp],eax
c001d88c:	e8 af 1f ff ff       	call   c000f840 <malloc>
c001d891:	89 84 9e 3a 19 00 00 	mov    DWORD PTR [esi+ebx*4+0x193a],eax
c001d898:	5a                   	pop    edx
c001d899:	59                   	pop    ecx
c001d89a:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001d89d:	43                   	inc    ebx
c001d89e:	50                   	push   eax
c001d89f:	e8 90 2f fe ff       	call   c0000834 <strcpy>
c001d8a4:	ff 86 36 19 00 00    	inc    DWORD PTR [esi+0x1936]
c001d8aa:	83 c4 10             	add    esp,0x10
c001d8ad:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d8b0:	85 c0                	test   eax,eax
c001d8b2:	75 cb                	jne    c001d87f <Process::addArgs(char**)+0x21>
c001d8b4:	5b                   	pop    ebx
c001d8b5:	5e                   	pop    esi
c001d8b6:	5f                   	pop    edi
c001d8b7:	c3                   	ret    

c001d8b8 <Process::Process(char const*, Process*, char**)>:
c001d8b8:	56                   	push   esi
c001d8b9:	53                   	push   ebx
c001d8ba:	83 ec 14             	sub    esp,0x14
c001d8bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d8c1:	05 0c 02 00 00       	add    eax,0x20c
c001d8c6:	bb 07 00 00 00       	mov    ebx,0x7
c001d8cb:	89 c6                	mov    esi,eax
c001d8cd:	85 db                	test   ebx,ebx
c001d8cf:	78 15                	js     c001d8e6 <Process::Process(char const*, Process*, char**)+0x2e>
c001d8d1:	83 ec 0c             	sub    esp,0xc
c001d8d4:	56                   	push   esi
c001d8d5:	e8 58 b2 00 00       	call   c0028b32 <ThreadControlBlock::ThreadControlBlock()>
c001d8da:	83 c4 10             	add    esp,0x10
c001d8dd:	81 c6 e3 02 00 00    	add    esi,0x2e3
c001d8e3:	4b                   	dec    ebx
c001d8e4:	eb e7                	jmp    c001d8cd <Process::Process(char const*, Process*, char**)+0x15>
c001d8e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d8ea:	c6 80 3e 1b 00 00 00 	mov    BYTE PTR [eax+0x1b3e],0x0
c001d8f1:	83 ec 0c             	sub    esp,0xc
c001d8f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d8f8:	e8 c7 c9 ff ff       	call   c001a2c4 <Krnl::newProcessEnv(Process*)>
c001d8fd:	83 c4 10             	add    esp,0x10
c001d900:	89 c2                	mov    edx,eax
c001d902:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d906:	89 90 3a 1b 00 00    	mov    DWORD PTR [eax+0x1b3a],edx
c001d90c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d910:	66 c7 80 24 19 00 00 00 00 	mov    WORD PTR [eax+0x1924],0x0
c001d919:	a1 d0 d7 02 c0       	mov    eax,ds:0xc002d7d0
c001d91e:	8d 50 01             	lea    edx,[eax+0x1]
c001d921:	89 15 d0 d7 02 c0    	mov    DWORD PTR ds:0xc002d7d0,edx
c001d927:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d92b:	89 02                	mov    DWORD PTR [edx],eax
c001d92d:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001d935:	83 ec 0c             	sub    esp,0xc
c001d938:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d93c:	e8 ff 1e ff ff       	call   c000f840 <malloc>
c001d941:	83 c4 10             	add    esp,0x10
c001d944:	89 c3                	mov    ebx,eax
c001d946:	83 ec 08             	sub    esp,0x8
c001d949:	6a 00                	push   0x0
c001d94b:	53                   	push   ebx
c001d94c:	e8 5b 4d ff ff       	call   c00126ac <VAS::VAS(bool)>
c001d951:	83 c4 10             	add    esp,0x10
c001d954:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d958:	89 98 32 19 00 00    	mov    DWORD PTR [eax+0x1932],ebx
c001d95e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d962:	c7 80 36 19 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1936],0x0
c001d96c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d970:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d974:	89 90 2a 19 00 00    	mov    DWORD PTR [eax+0x192a],edx
c001d97a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d97e:	8b 80 2a 19 00 00    	mov    eax,DWORD PTR [eax+0x192a]
c001d984:	85 c0                	test   eax,eax
c001d986:	74 42                	je     c001d9ca <Process::Process(char const*, Process*, char**)+0x112>
c001d988:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d98c:	8b 80 2a 19 00 00    	mov    eax,DWORD PTR [eax+0x192a]
c001d992:	8b 90 26 19 00 00    	mov    edx,DWORD PTR [eax+0x1926]
c001d998:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d99c:	89 90 26 19 00 00    	mov    DWORD PTR [eax+0x1926],edx
c001d9a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9a6:	8b 80 2a 19 00 00    	mov    eax,DWORD PTR [eax+0x192a]
c001d9ac:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d9b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9b6:	05 0c 01 00 00       	add    eax,0x10c
c001d9bb:	83 ec 08             	sub    esp,0x8
c001d9be:	52                   	push   edx
c001d9bf:	50                   	push   eax
c001d9c0:	e8 6f 2e fe ff       	call   c0000834 <strcpy>
c001d9c5:	83 c4 10             	add    esp,0x10
c001d9c8:	eb 63                	jmp    c001da2d <Process::Process(char const*, Process*, char**)+0x175>
c001d9ca:	c7 44 24 04 60 12 00 00 	mov    DWORD PTR [esp+0x4],0x1260
c001d9d2:	83 ec 0c             	sub    esp,0xc
c001d9d5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d9d9:	e8 62 1e ff ff       	call   c000f840 <malloc>
c001d9de:	83 c4 10             	add    esp,0x10
c001d9e1:	89 c3                	mov    ebx,eax
c001d9e3:	83 ec 08             	sub    esp,0x8
c001d9e6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d9ea:	53                   	push   ebx
c001d9eb:	e8 88 37 ff ff       	call   c0011178 <VgaText::VgaText(char const*)>
c001d9f0:	83 c4 10             	add    esp,0x10
c001d9f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9f7:	89 98 26 19 00 00    	mov    DWORD PTR [eax+0x1926],ebx
c001d9fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da01:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c001da07:	83 ec 0c             	sub    esp,0xc
c001da0a:	50                   	push   eax
c001da0b:	e8 5b 2b ff ff       	call   c001056b <addToTerminalCycle(VgaText*)>
c001da10:	83 c4 10             	add    esp,0x10
c001da13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da17:	05 0c 01 00 00       	add    eax,0x10c
c001da1c:	83 ec 08             	sub    esp,0x8
c001da1f:	68 36 c0 02 c0       	push   0xc002c036
c001da24:	50                   	push   eax
c001da25:	e8 0a 2e fe ff       	call   c0000834 <strcpy>
c001da2a:	83 c4 10             	add    esp,0x10
c001da2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da31:	83 c0 0c             	add    eax,0xc
c001da34:	83 ec 08             	sub    esp,0x8
c001da37:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001da3b:	50                   	push   eax
c001da3c:	e8 f3 2d fe ff       	call   c0000834 <strcpy>
c001da41:	83 c4 10             	add    esp,0x10
c001da44:	83 ec 08             	sub    esp,0x8
c001da47:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001da4b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001da4f:	e8 0a fe ff ff       	call   c001d85e <Process::addArgs(char**)>
c001da54:	83 c4 10             	add    esp,0x10
c001da57:	83 ec 08             	sub    esp,0x8
c001da5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001da5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001da62:	e8 6a ee ff ff       	call   c001c8d1 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001da67:	83 c4 10             	add    esp,0x10
c001da6a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001da6e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001da72:	83 f0 01             	xor    eax,0x1
c001da75:	88 c2                	mov    dl,al
c001da77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da7b:	88 90 3e 1b 00 00    	mov    BYTE PTR [eax+0x1b3e],dl
c001da81:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001da86:	83 ec 08             	sub    esp,0x8
c001da89:	50                   	push   eax
c001da8a:	68 34 c1 02 c0       	push   0xc002c134
c001da8f:	e8 04 53 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001da94:	83 c4 10             	add    esp,0x10
c001da97:	90                   	nop
c001da98:	83 c4 14             	add    esp,0x14
c001da9b:	5b                   	pop    ebx
c001da9c:	5e                   	pop    esi
c001da9d:	c3                   	ret    

c001da9e <Process::Process(bool, char const*, Process*, char**)>:
c001da9e:	56                   	push   esi
c001da9f:	53                   	push   ebx
c001daa0:	83 ec 24             	sub    esp,0x24
c001daa3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001daa7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001daab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001daaf:	05 0c 02 00 00       	add    eax,0x20c
c001dab4:	bb 07 00 00 00       	mov    ebx,0x7
c001dab9:	89 c6                	mov    esi,eax
c001dabb:	85 db                	test   ebx,ebx
c001dabd:	78 15                	js     c001dad4 <Process::Process(bool, char const*, Process*, char**)+0x36>
c001dabf:	83 ec 0c             	sub    esp,0xc
c001dac2:	56                   	push   esi
c001dac3:	e8 6a b0 00 00       	call   c0028b32 <ThreadControlBlock::ThreadControlBlock()>
c001dac8:	83 c4 10             	add    esp,0x10
c001dacb:	81 c6 e3 02 00 00    	add    esi,0x2e3
c001dad1:	4b                   	dec    ebx
c001dad2:	eb e7                	jmp    c001dabb <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001dad4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dad8:	c6 80 3e 1b 00 00 00 	mov    BYTE PTR [eax+0x1b3e],0x0
c001dadf:	83 ec 0c             	sub    esp,0xc
c001dae2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dae6:	e8 d9 c7 ff ff       	call   c001a2c4 <Krnl::newProcessEnv(Process*)>
c001daeb:	83 c4 10             	add    esp,0x10
c001daee:	89 c2                	mov    edx,eax
c001daf0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001daf4:	89 90 3a 1b 00 00    	mov    DWORD PTR [eax+0x1b3a],edx
c001dafa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dafe:	66 c7 80 24 19 00 00 00 00 	mov    WORD PTR [eax+0x1924],0x0
c001db07:	a1 d0 d7 02 c0       	mov    eax,ds:0xc002d7d0
c001db0c:	8d 50 01             	lea    edx,[eax+0x1]
c001db0f:	89 15 d0 d7 02 c0    	mov    DWORD PTR ds:0xc002d7d0,edx
c001db15:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001db19:	89 02                	mov    DWORD PTR [edx],eax
c001db1b:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001db23:	83 ec 0c             	sub    esp,0xc
c001db26:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001db2a:	e8 11 1d ff ff       	call   c000f840 <malloc>
c001db2f:	83 c4 10             	add    esp,0x10
c001db32:	89 c3                	mov    ebx,eax
c001db34:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001db39:	83 ec 08             	sub    esp,0x8
c001db3c:	50                   	push   eax
c001db3d:	53                   	push   ebx
c001db3e:	e8 69 4b ff ff       	call   c00126ac <VAS::VAS(bool)>
c001db43:	83 c4 10             	add    esp,0x10
c001db46:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db4a:	89 98 32 19 00 00    	mov    DWORD PTR [eax+0x1932],ebx
c001db50:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db54:	c7 80 36 19 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1936],0x0
c001db5e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db62:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001db66:	89 90 2a 19 00 00    	mov    DWORD PTR [eax+0x192a],edx
c001db6c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db70:	8b 80 2a 19 00 00    	mov    eax,DWORD PTR [eax+0x192a]
c001db76:	85 c0                	test   eax,eax
c001db78:	74 42                	je     c001dbbc <Process::Process(bool, char const*, Process*, char**)+0x11e>
c001db7a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db7e:	8b 80 2a 19 00 00    	mov    eax,DWORD PTR [eax+0x192a]
c001db84:	8b 90 26 19 00 00    	mov    edx,DWORD PTR [eax+0x1926]
c001db8a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db8e:	89 90 26 19 00 00    	mov    DWORD PTR [eax+0x1926],edx
c001db94:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db98:	8b 80 2a 19 00 00    	mov    eax,DWORD PTR [eax+0x192a]
c001db9e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001dba4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dba8:	05 0c 01 00 00       	add    eax,0x10c
c001dbad:	83 ec 08             	sub    esp,0x8
c001dbb0:	52                   	push   edx
c001dbb1:	50                   	push   eax
c001dbb2:	e8 7d 2c fe ff       	call   c0000834 <strcpy>
c001dbb7:	83 c4 10             	add    esp,0x10
c001dbba:	eb 63                	jmp    c001dc1f <Process::Process(bool, char const*, Process*, char**)+0x181>
c001dbbc:	c7 44 24 18 60 12 00 00 	mov    DWORD PTR [esp+0x18],0x1260
c001dbc4:	83 ec 0c             	sub    esp,0xc
c001dbc7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001dbcb:	e8 70 1c ff ff       	call   c000f840 <malloc>
c001dbd0:	83 c4 10             	add    esp,0x10
c001dbd3:	89 c3                	mov    ebx,eax
c001dbd5:	83 ec 08             	sub    esp,0x8
c001dbd8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001dbdc:	53                   	push   ebx
c001dbdd:	e8 96 35 ff ff       	call   c0011178 <VgaText::VgaText(char const*)>
c001dbe2:	83 c4 10             	add    esp,0x10
c001dbe5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dbe9:	89 98 26 19 00 00    	mov    DWORD PTR [eax+0x1926],ebx
c001dbef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dbf3:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c001dbf9:	83 ec 0c             	sub    esp,0xc
c001dbfc:	50                   	push   eax
c001dbfd:	e8 69 29 ff ff       	call   c001056b <addToTerminalCycle(VgaText*)>
c001dc02:	83 c4 10             	add    esp,0x10
c001dc05:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc09:	05 0c 01 00 00       	add    eax,0x10c
c001dc0e:	83 ec 08             	sub    esp,0x8
c001dc11:	68 36 c0 02 c0       	push   0xc002c036
c001dc16:	50                   	push   eax
c001dc17:	e8 18 2c fe ff       	call   c0000834 <strcpy>
c001dc1c:	83 c4 10             	add    esp,0x10
c001dc1f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc23:	83 c0 0c             	add    eax,0xc
c001dc26:	83 ec 08             	sub    esp,0x8
c001dc29:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001dc2d:	50                   	push   eax
c001dc2e:	e8 01 2c fe ff       	call   c0000834 <strcpy>
c001dc33:	83 c4 10             	add    esp,0x10
c001dc36:	83 ec 08             	sub    esp,0x8
c001dc39:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001dc3d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dc41:	e8 18 fc ff ff       	call   c001d85e <Process::addArgs(char**)>
c001dc46:	83 c4 10             	add    esp,0x10
c001dc49:	90                   	nop
c001dc4a:	83 c4 24             	add    esp,0x24
c001dc4d:	5b                   	pop    ebx
c001dc4e:	5e                   	pop    esi
c001dc4f:	c3                   	ret    

c001dc50 <disableIRQs()>:
c001dc50:	fa                   	cli    
c001dc51:	ff 05 8c 17 03 c0    	inc    DWORD PTR ds:0xc003178c
c001dc57:	c3                   	ret    

c001dc58 <getIRQNestingLevel()>:
c001dc58:	a1 8c 17 03 c0       	mov    eax,ds:0xc003178c
c001dc5d:	c3                   	ret    

c001dc5e <enableIRQs()>:
c001dc5e:	a1 8c 17 03 c0       	mov    eax,ds:0xc003178c
c001dc63:	48                   	dec    eax
c001dc64:	a3 8c 17 03 c0       	mov    ds:0xc003178c,eax
c001dc69:	75 01                	jne    c001dc6c <enableIRQs()+0xe>
c001dc6b:	fb                   	sti    
c001dc6c:	c3                   	ret    

c001dc6d <lockScheduler()>:
c001dc6d:	eb e1                	jmp    c001dc50 <disableIRQs()>

c001dc6f <unlockScheduler()>:
c001dc6f:	eb ed                	jmp    c001dc5e <enableIRQs()>

c001dc71 <userModeEntryPoint(void*)>:
c001dc71:	83 ec 0c             	sub    esp,0xc
c001dc74:	e8 f6 ff ff ff       	call   c001dc6f <unlockScheduler()>
c001dc79:	fb                   	sti    
c001dc7a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dc7f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001dc82:	8b 80 2e 19 00 00    	mov    eax,DWORD PTR [eax+0x192e]
c001dc88:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001dc8c:	83 c4 0c             	add    esp,0xc
c001dc8f:	e9 96 26 fe ff       	jmp    c000032a <goToUsermode>

c001dc94 <lockStuff()>:
c001dc94:	e8 b7 ff ff ff       	call   c001dc50 <disableIRQs()>
c001dc99:	ff 05 88 17 03 c0    	inc    DWORD PTR ds:0xc0031788
c001dc9f:	c3                   	ret    

c001dca0 <taskStartupFunction>:
c001dca0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dca5:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001dca8:	c3                   	ret    

c001dca9 <updateTimeUsed()>:
c001dca9:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c001dcae:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001dcb4:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001dcbb:	74 50                	je     c001dd0d <updateTimeUsed()+0x64>
c001dcbd:	57                   	push   edi
c001dcbe:	56                   	push   esi
c001dcbf:	53                   	push   ebx
c001dcc0:	0f 31                	rdtsc  
c001dcc2:	89 c1                	mov    ecx,eax
c001dcc4:	a3 c8 17 03 c0       	mov    ds:0xc00317c8,eax
c001dcc9:	2b 0d b8 17 03 c0    	sub    ecx,DWORD PTR ds:0xc00317b8
c001dccf:	89 d3                	mov    ebx,edx
c001dcd1:	89 0d c0 17 03 c0    	mov    DWORD PTR ds:0xc00317c0,ecx
c001dcd7:	1b 1d bc 17 03 c0    	sbb    ebx,DWORD PTR ds:0xc00317bc
c001dcdd:	a3 b8 17 03 c0       	mov    ds:0xc00317b8,eax
c001dce2:	89 1d c4 17 03 c0    	mov    DWORD PTR ds:0xc00317c4,ebx
c001dce8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dced:	89 15 cc 17 03 c0    	mov    DWORD PTR ds:0xc00317cc,edx
c001dcf3:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001dcf6:	89 15 bc 17 03 c0    	mov    DWORD PTR ds:0xc00317bc,edx
c001dcfc:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001dcff:	01 f1                	add    ecx,esi
c001dd01:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001dd04:	11 fb                	adc    ebx,edi
c001dd06:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001dd09:	5b                   	pop    ebx
c001dd0a:	5e                   	pop    esi
c001dd0b:	5f                   	pop    edi
c001dd0c:	c3                   	ret    
c001dd0d:	c3                   	ret    

c001dd0e <switchToThread(ThreadControlBlock*)>:
c001dd0e:	53                   	push   ebx
c001dd0f:	83 ec 08             	sub    esp,0x8
c001dd12:	a1 88 17 03 c0       	mov    eax,ds:0xc0031788
c001dd17:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dd1b:	85 c0                	test   eax,eax
c001dd1d:	75 30                	jne    c001dd4f <switchToThread(ThreadControlBlock*)+0x41>
c001dd1f:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001dd22:	3c ff                	cmp    al,0xff
c001dd24:	74 25                	je     c001dd4b <switchToThread(ThreadControlBlock*)+0x3d>
c001dd26:	0f b6 d0             	movzx  edx,al
c001dd29:	b8 84 03 00 00       	mov    eax,0x384
c001dd2e:	29 d0                	sub    eax,edx
c001dd30:	c1 e0 10             	shl    eax,0x10
c001dd33:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001dd36:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001dd39:	e8 6b ff ff ff       	call   c001dca9 <updateTimeUsed()>
c001dd3e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001dd42:	83 c4 08             	add    esp,0x8
c001dd45:	5b                   	pop    ebx
c001dd46:	e9 17 26 fe ff       	jmp    c0000362 <switchToThreadASM>
c001dd4b:	31 c0                	xor    eax,eax
c001dd4d:	eb e7                	jmp    c001dd36 <switchToThread(ThreadControlBlock*)+0x28>
c001dd4f:	c7 05 84 17 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031784,0x1
c001dd59:	83 c4 08             	add    esp,0x8
c001dd5c:	5b                   	pop    ebx
c001dd5d:	c3                   	ret    

c001dd5e <Semaphore::Semaphore(int)>:
c001dd5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dd62:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dd66:	89 10                	mov    DWORD PTR [eax],edx
c001dd68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dd6c:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001dd73:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dd77:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001dd7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dd82:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001dd89:	90                   	nop
c001dd8a:	c3                   	ret    
c001dd8b:	90                   	nop

c001dd8c <Mutex::Mutex()>:
c001dd8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dd90:	6a 01                	push   0x1
c001dd92:	50                   	push   eax
c001dd93:	e8 c6 ff ff ff       	call   c001dd5e <Semaphore::Semaphore(int)>
c001dd98:	83 c4 08             	add    esp,0x8
c001dd9b:	90                   	nop
c001dd9c:	c3                   	ret    
c001dd9d:	90                   	nop

c001dd9e <Process::createThread(void (*)(void*), void*, int)>:
c001dd9e:	55                   	push   ebp
c001dd9f:	31 c9                	xor    ecx,ecx
c001dda1:	57                   	push   edi
c001dda2:	56                   	push   esi
c001dda3:	53                   	push   ebx
c001dda4:	83 ec 1c             	sub    esp,0x1c
c001dda7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ddab:	66 8b b3 24 19 00 00 	mov    si,WORD PTR [ebx+0x1924]
c001ddb2:	89 f2                	mov    edx,esi
c001ddb4:	0f b7 c2             	movzx  eax,dx
c001ddb7:	83 e2 01             	and    edx,0x1
c001ddba:	74 14                	je     c001ddd0 <Process::createThread(void (*)(void*), void*, int)+0x32>
c001ddbc:	d1 f8                	sar    eax,1
c001ddbe:	41                   	inc    ecx
c001ddbf:	89 c2                	mov    edx,eax
c001ddc1:	83 f9 10             	cmp    ecx,0x10
c001ddc4:	75 ee                	jne    c001ddb4 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001ddc6:	83 c4 1c             	add    esp,0x1c
c001ddc9:	31 c0                	xor    eax,eax
c001ddcb:	5b                   	pop    ebx
c001ddcc:	5e                   	pop    esi
c001ddcd:	5f                   	pop    edi
c001ddce:	5d                   	pop    ebp
c001ddcf:	c3                   	ret    
c001ddd0:	83 ec 08             	sub    esp,0x8
c001ddd3:	b8 01 00 00 00       	mov    eax,0x1
c001ddd8:	d3 e0                	shl    eax,cl
c001ddda:	09 c6                	or     esi,eax
c001dddc:	8b 83 32 19 00 00    	mov    eax,DWORD PTR [ebx+0x1932]
c001dde2:	66 89 b3 24 19 00 00 	mov    WORD PTR [ebx+0x1924],si
c001dde9:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001ddec:	8d 04 89             	lea    eax,[ecx+ecx*4]
c001ddef:	8d 04 c1             	lea    eax,[ecx+eax*8]
c001ddf2:	8d 34 c0             	lea    esi,[eax+eax*8]
c001ddf5:	01 f6                	add    esi,esi
c001ddf7:	01 ce                	add    esi,ecx
c001ddf9:	8d 04 33             	lea    eax,[ebx+esi*1]
c001ddfc:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001de02:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001de08:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001de0c:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001de12:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001de18:	89 ca                	mov    edx,ecx
c001de1a:	f7 da                	neg    edx
c001de1c:	c1 e2 15             	shl    edx,0x15
c001de1f:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001de25:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001de2b:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001de2f:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001de39:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001de3f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001de43:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001de49:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001de53:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001de5d:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001de64:	50                   	push   eax
c001de65:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001de69:	68 a8 17 03 c0       	push   0xc00317a8
c001de6e:	e8 4d ab 00 00       	call   c00289c0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001de73:	83 c4 10             	add    esp,0x10
c001de76:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001de7a:	83 c4 1c             	add    esp,0x1c
c001de7d:	5b                   	pop    ebx
c001de7e:	5e                   	pop    esi
c001de7f:	5f                   	pop    edi
c001de80:	5d                   	pop    ebp
c001de81:	c3                   	ret    

c001de82 <Process::createUserThread()>:
c001de82:	83 ec 0c             	sub    esp,0xc
c001de85:	68 80 00 00 00       	push   0x80
c001de8a:	6a 00                	push   0x0
c001de8c:	68 71 dc 01 c0       	push   0xc001dc71
c001de91:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001de95:	e8 04 ff ff ff       	call   c001dd9e <Process::createThread(void (*)(void*), void*, int)>
c001de9a:	83 c4 1c             	add    esp,0x1c
c001de9d:	c3                   	ret    

c001de9e <setupMultitasking(void (*)())>:
c001de9e:	56                   	push   esi
c001de9f:	53                   	push   ebx
c001dea0:	53                   	push   ebx
c001dea1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001dea5:	eb 10                	jmp    c001deb7 <setupMultitasking(void (*)())+0x19>
c001dea7:	83 ec 0c             	sub    esp,0xc
c001deaa:	68 a8 17 03 c0       	push   0xc00317a8
c001deaf:	e8 5e aa 00 00       	call   c0028912 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001deb4:	83 c4 10             	add    esp,0x10
c001deb7:	83 ec 0c             	sub    esp,0xc
c001deba:	68 a8 17 03 c0       	push   0xc00317a8
c001debf:	e8 32 aa 00 00       	call   c00288f6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001dec4:	83 c4 10             	add    esp,0x10
c001dec7:	84 c0                	test   al,al
c001dec9:	74 dc                	je     c001dea7 <setupMultitasking(void (*)())+0x9>
c001decb:	83 ec 0c             	sub    esp,0xc
c001dece:	68 3f 1b 00 00       	push   0x1b3f
c001ded3:	e8 68 19 ff ff       	call   c000f840 <malloc>
c001ded8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001dedf:	89 c3                	mov    ebx,eax
c001dee1:	6a 00                	push   0x0
c001dee3:	68 3a c0 02 c0       	push   0xc002c03a
c001dee8:	6a 01                	push   0x1
c001deea:	50                   	push   eax
c001deeb:	e8 ae fb ff ff       	call   c001da9e <Process::Process(bool, char const*, Process*, char**)>
c001def0:	83 c4 18             	add    esp,0x18
c001def3:	89 1d b4 17 03 c0    	mov    DWORD PTR ds:0xc00317b4,ebx
c001def9:	ff b3 26 19 00 00    	push   DWORD PTR [ebx+0x1926]
c001deff:	68 5c c1 02 c0       	push   0xc002c15c
c001df04:	e8 8f 4e ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001df09:	58                   	pop    eax
c001df0a:	ff b3 26 19 00 00    	push   DWORD PTR [ebx+0x1926]
c001df10:	e8 d8 2d ff ff       	call   c0010ced <setActiveTerminal(VgaText*)>
c001df15:	66 83 8b 24 19 00 00 01 	or     WORD PTR [ebx+0x1924],0x1
c001df1d:	8b 83 32 19 00 00    	mov    eax,DWORD PTR [ebx+0x1932]
c001df23:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001df26:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001df30:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001df36:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001df3c:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001df46:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001df50:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001df5a:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001df60:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001df66:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001df70:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001df76:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001df80:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001df86:	5a                   	pop    edx
c001df87:	59                   	pop    ecx
c001df88:	68 36 c0 02 c0       	push   0xc002c036
c001df8d:	50                   	push   eax
c001df8e:	e8 a1 28 fe ff       	call   c0000834 <strcpy>
c001df93:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001df9a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001df9e:	83 c4 14             	add    esp,0x14
c001dfa1:	5b                   	pop    ebx
c001dfa2:	5e                   	pop    esi
c001dfa3:	e9 ac 23 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001dfa8 <schedule()>:
c001dfa8:	a1 88 17 03 c0       	mov    eax,ds:0xc0031788
c001dfad:	85 c0                	test   eax,eax
c001dfaf:	74 0b                	je     c001dfbc <schedule()+0x14>
c001dfb1:	c7 05 84 17 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031784,0x1
c001dfbb:	c3                   	ret    
c001dfbc:	53                   	push   ebx
c001dfbd:	83 ec 14             	sub    esp,0x14
c001dfc0:	68 a8 17 03 c0       	push   0xc00317a8
c001dfc5:	e8 2c a9 00 00       	call   c00288f6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001dfca:	83 c4 10             	add    esp,0x10
c001dfcd:	84 c0                	test   al,al
c001dfcf:	75 38                	jne    c001e009 <schedule()+0x61>
c001dfd1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dfd6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001dfd9:	4a                   	dec    edx
c001dfda:	74 32                	je     c001e00e <schedule()+0x66>
c001dfdc:	83 ec 0c             	sub    esp,0xc
c001dfdf:	68 a8 17 03 c0       	push   0xc00317a8
c001dfe4:	e8 05 a9 00 00       	call   c00288ee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dfe9:	c7 04 24 a8 17 03 c0 	mov    DWORD PTR [esp],0xc00317a8
c001dff0:	89 c3                	mov    ebx,eax
c001dff2:	e8 1b a9 00 00       	call   c0028912 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001dff7:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001dffe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e001:	e8 08 fd ff ff       	call   c001dd0e <switchToThread(ThreadControlBlock*)>
c001e006:	83 c4 10             	add    esp,0x10
c001e009:	83 c4 08             	add    esp,0x8
c001e00c:	5b                   	pop    ebx
c001e00d:	c3                   	ret    
c001e00e:	83 ec 08             	sub    esp,0x8
c001e011:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001e018:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e01e:	68 a8 17 03 c0       	push   0xc00317a8
c001e023:	e8 98 a9 00 00       	call   c00289c0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e028:	83 c4 10             	add    esp,0x10
c001e02b:	eb af                	jmp    c001dfdc <schedule()+0x34>

c001e02d <unlockStuff()>:
c001e02d:	a1 88 17 03 c0       	mov    eax,ds:0xc0031788
c001e032:	48                   	dec    eax
c001e033:	a3 88 17 03 c0       	mov    ds:0xc0031788,eax
c001e038:	75 09                	jne    c001e043 <unlockStuff()+0x16>
c001e03a:	a1 84 17 03 c0       	mov    eax,ds:0xc0031784
c001e03f:	85 c0                	test   eax,eax
c001e041:	75 05                	jne    c001e048 <unlockStuff()+0x1b>
c001e043:	e9 16 fc ff ff       	jmp    c001dc5e <enableIRQs()>
c001e048:	83 ec 0c             	sub    esp,0xc
c001e04b:	c7 05 84 17 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031784,0x0
c001e055:	e8 4e ff ff ff       	call   c001dfa8 <schedule()>
c001e05a:	83 c4 0c             	add    esp,0xc
c001e05d:	e9 fc fb ff ff       	jmp    c001dc5e <enableIRQs()>

c001e062 <Semaphore::tryAcquire()>:
c001e062:	83 ec 0c             	sub    esp,0xc
c001e065:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e069:	e8 26 fc ff ff       	call   c001dc94 <lockStuff()>
c001e06e:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e071:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e073:	7c 0b                	jl     c001e080 <Semaphore::tryAcquire()+0x1e>
c001e075:	e8 b3 ff ff ff       	call   c001e02d <unlockStuff()>
c001e07a:	31 c0                	xor    eax,eax
c001e07c:	83 c4 0c             	add    esp,0xc
c001e07f:	c3                   	ret    
c001e080:	42                   	inc    edx
c001e081:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e084:	e8 a4 ff ff ff       	call   c001e02d <unlockStuff()>
c001e089:	b0 01                	mov    al,0x1
c001e08b:	83 c4 0c             	add    esp,0xc
c001e08e:	c3                   	ret    
c001e08f:	90                   	nop

c001e090 <Semaphore::assertLocked(char const*)>:
c001e090:	83 ec 0c             	sub    esp,0xc
c001e093:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e097:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e09b:	e8 f4 fb ff ff       	call   c001dc94 <lockStuff()>
c001e0a0:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e0a2:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001e0a5:	7c 05                	jl     c001e0ac <Semaphore::assertLocked(char const*)+0x1c>
c001e0a7:	83 c4 0c             	add    esp,0xc
c001e0aa:	eb 81                	jmp    c001e02d <unlockStuff()>
c001e0ac:	83 ec 0c             	sub    esp,0xc
c001e0af:	52                   	push   edx
c001e0b0:	e8 be c3 ff ff       	call   c001a473 <Krnl::panic(char const*)>
c001e0b5:	83 c4 10             	add    esp,0x10
c001e0b8:	83 c4 0c             	add    esp,0xc
c001e0bb:	e9 6d ff ff ff       	jmp    c001e02d <unlockStuff()>

c001e0c0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001e0c0:	83 ec 0c             	sub    esp,0xc
c001e0c3:	e8 90 fb ff ff       	call   c001dc58 <getIRQNestingLevel()>
c001e0c8:	83 ec 08             	sub    esp,0x8
c001e0cb:	50                   	push   eax
c001e0cc:	68 90 c1 02 c0       	push   0xc002c190
c001e0d1:	e8 c2 4c ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001e0d6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e0da:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e0df:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e0e2:	e8 c1 fe ff ff       	call   c001dfa8 <schedule()>
c001e0e7:	e8 83 fb ff ff       	call   c001dc6f <unlockScheduler()>
c001e0ec:	e8 67 fb ff ff       	call   c001dc58 <getIRQNestingLevel()>
c001e0f1:	5a                   	pop    edx
c001e0f2:	59                   	pop    ecx
c001e0f3:	50                   	push   eax
c001e0f4:	68 c4 c1 02 c0       	push   0xc002c1c4
c001e0f9:	e8 9a 4c ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001e0fe:	83 c4 1c             	add    esp,0x1c
c001e101:	c3                   	ret    

c001e102 <blockTask(TaskState)>:
c001e102:	83 ec 0c             	sub    esp,0xc
c001e105:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e109:	e8 5f fb ff ff       	call   c001dc6d <lockScheduler()>
c001e10e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e113:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e116:	e8 8d fe ff ff       	call   c001dfa8 <schedule()>
c001e11b:	83 c4 0c             	add    esp,0xc
c001e11e:	e9 4c fb ff ff       	jmp    c001dc6f <unlockScheduler()>

c001e123 <waitTask(int, int*, int)>:
c001e123:	83 ec 18             	sub    esp,0x18
c001e126:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e12b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e12f:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e132:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e136:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e13b:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e13e:	6a 07                	push   0x7
c001e140:	e8 bd ff ff ff       	call   c001e102 <blockTask(TaskState)>
c001e145:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e14a:	83 c4 10             	add    esp,0x10
c001e14d:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e150:	85 d2                	test   edx,edx
c001e152:	74 0a                	je     c001e15e <waitTask(int, int*, int)+0x3b>
c001e154:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e157:	89 02                	mov    DWORD PTR [edx],eax
c001e159:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e15e:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e161:	83 c4 0c             	add    esp,0xc
c001e164:	c3                   	ret    

c001e165 <nanoSleepUntil(unsigned long long)>:
c001e165:	83 ec 0c             	sub    esp,0xc
c001e168:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e16c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e170:	3b 05 d0 e8 02 c0    	cmp    eax,DWORD PTR ds:0xc002e8d0
c001e176:	89 d1                	mov    ecx,edx
c001e178:	1b 0d d4 e8 02 c0    	sbb    ecx,DWORD PTR ds:0xc002e8d4
c001e17e:	73 04                	jae    c001e184 <nanoSleepUntil(unsigned long long)+0x1f>
c001e180:	83 c4 0c             	add    esp,0xc
c001e183:	c3                   	ret    
c001e184:	e8 0b fb ff ff       	call   c001dc94 <lockStuff()>
c001e189:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e18f:	83 ec 08             	sub    esp,0x8
c001e192:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e195:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e198:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e19e:	68 9c 17 03 c0       	push   0xc003179c
c001e1a3:	e8 18 a8 00 00       	call   c00289c0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e1a8:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e1af:	e8 4e ff ff ff       	call   c001e102 <blockTask(TaskState)>
c001e1b4:	83 c4 1c             	add    esp,0x1c
c001e1b7:	e9 71 fe ff ff       	jmp    c001e02d <unlockStuff()>

c001e1bc <nanoSleep(unsigned long long)>:
c001e1bc:	a1 d0 e8 02 c0       	mov    eax,ds:0xc002e8d0
c001e1c1:	8b 15 d4 e8 02 c0    	mov    edx,DWORD PTR ds:0xc002e8d4
c001e1c7:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e1cb:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e1cf:	eb 94                	jmp    c001e165 <nanoSleepUntil(unsigned long long)>

c001e1d1 <sleep(unsigned long long)>:
c001e1d1:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001e1d9:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001e1de:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001e1e2:	01 ca                	add    edx,ecx
c001e1e4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e1e8:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e1ec:	eb ce                	jmp    c001e1bc <nanoSleep(unsigned long long)>

c001e1ee <Semaphore::acquire()>:
c001e1ee:	83 ec 0c             	sub    esp,0xc
c001e1f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1f5:	e8 9a fa ff ff       	call   c001dc94 <lockStuff()>
c001e1fa:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e1fd:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e1ff:	7d 0c                	jge    c001e20d <Semaphore::acquire()+0x1f>
c001e201:	42                   	inc    edx
c001e202:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e205:	83 c4 0c             	add    esp,0xc
c001e208:	e9 20 fe ff ff       	jmp    c001e02d <unlockStuff()>
c001e20d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e213:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001e21a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e21d:	85 d2                	test   edx,edx
c001e21f:	74 2a                	je     c001e24b <Semaphore::acquire()+0x5d>
c001e221:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001e224:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e22a:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001e22d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e233:	83 ec 0c             	sub    esp,0xc
c001e236:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e239:	6a 05                	push   0x5
c001e23b:	e8 c2 fe ff ff       	call   c001e102 <blockTask(TaskState)>
c001e240:	83 c4 10             	add    esp,0x10
c001e243:	83 c4 0c             	add    esp,0xc
c001e246:	e9 e2 fd ff ff       	jmp    c001e02d <unlockStuff()>
c001e24b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e251:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e254:	eb d7                	jmp    c001e22d <Semaphore::acquire()+0x3f>

c001e256 <taskReturned>:
c001e256:	83 ec 18             	sub    esp,0x18
c001e259:	68 f8 c1 02 c0       	push   0xc002c1f8
c001e25e:	e8 10 c2 ff ff       	call   c001a473 <Krnl::panic(char const*)>
c001e263:	83 c4 10             	add    esp,0x10
c001e266:	83 ec 0c             	sub    esp,0xc
c001e269:	6a 02                	push   0x2
c001e26b:	e8 92 fe ff ff       	call   c001e102 <blockTask(TaskState)>
c001e270:	e8 f8 f9 ff ff       	call   c001dc6d <lockScheduler()>
c001e275:	e8 2e fd ff ff       	call   c001dfa8 <schedule()>
c001e27a:	e8 f0 f9 ff ff       	call   c001dc6f <unlockScheduler()>
c001e27f:	83 c4 10             	add    esp,0x10
c001e282:	eb e2                	jmp    c001e266 <taskReturned+0x10>

c001e284 <unblockTask(ThreadControlBlock*)>:
c001e284:	53                   	push   ebx
c001e285:	83 ec 08             	sub    esp,0x8
c001e288:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e28c:	e8 dc f9 ff ff       	call   c001dc6d <lockScheduler()>
c001e291:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e294:	85 c0                	test   eax,eax
c001e296:	74 5c                	je     c001e2f4 <unblockTask(ThreadControlBlock*)+0x70>
c001e298:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e29b:	48                   	dec    eax
c001e29c:	74 31                	je     c001e2cf <unblockTask(ThreadControlBlock*)+0x4b>
c001e29e:	83 ec 0c             	sub    esp,0xc
c001e2a1:	68 a8 17 03 c0       	push   0xc00317a8
c001e2a6:	e8 43 a6 00 00       	call   c00288ee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e2ab:	83 c4 10             	add    esp,0x10
c001e2ae:	85 c0                	test   eax,eax
c001e2b0:	75 17                	jne    c001e2c9 <unblockTask(ThreadControlBlock*)+0x45>
c001e2b2:	eb 65                	jmp    c001e319 <unblockTask(ThreadControlBlock*)+0x95>
c001e2b4:	83 ec 08             	sub    esp,0x8
c001e2b7:	50                   	push   eax
c001e2b8:	68 a8 17 03 c0       	push   0xc00317a8
c001e2bd:	e8 06 a9 00 00       	call   c0028bc8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001e2c2:	83 c4 10             	add    esp,0x10
c001e2c5:	85 c0                	test   eax,eax
c001e2c7:	74 50                	je     c001e319 <unblockTask(ThreadControlBlock*)+0x95>
c001e2c9:	39 c3                	cmp    ebx,eax
c001e2cb:	75 e7                	jne    c001e2b4 <unblockTask(ThreadControlBlock*)+0x30>
c001e2cd:	eb 1c                	jmp    c001e2eb <unblockTask(ThreadControlBlock*)+0x67>
c001e2cf:	83 ec 0c             	sub    esp,0xc
c001e2d2:	68 e8 c2 02 c0       	push   0xc002c2e8
c001e2d7:	e8 bc 4a ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001e2dc:	c7 04 24 74 c2 02 c0 	mov    DWORD PTR [esp],0xc002c274
c001e2e3:	e8 b0 4a ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001e2e8:	83 c4 10             	add    esp,0x10
c001e2eb:	83 c4 08             	add    esp,0x8
c001e2ee:	5b                   	pop    ebx
c001e2ef:	e9 7b f9 ff ff       	jmp    c001dc6f <unlockScheduler()>
c001e2f4:	83 ec 0c             	sub    esp,0xc
c001e2f7:	68 2c c2 02 c0       	push   0xc002c22c
c001e2fc:	e8 97 4a ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001e301:	c7 04 24 74 c2 02 c0 	mov    DWORD PTR [esp],0xc002c274
c001e308:	e8 8b 4a ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001e30d:	83 c4 10             	add    esp,0x10
c001e310:	83 c4 08             	add    esp,0x8
c001e313:	5b                   	pop    ebx
c001e314:	e9 56 f9 ff ff       	jmp    c001dc6f <unlockScheduler()>
c001e319:	83 ec 08             	sub    esp,0x8
c001e31c:	53                   	push   ebx
c001e31d:	68 a8 17 03 c0       	push   0xc00317a8
c001e322:	e8 99 a6 00 00       	call   c00289c0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e327:	83 c4 10             	add    esp,0x10
c001e32a:	83 c4 08             	add    esp,0x8
c001e32d:	5b                   	pop    ebx
c001e32e:	e9 3c f9 ff ff       	jmp    c001dc6f <unlockScheduler()>

c001e333 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001e333:	55                   	push   ebp
c001e334:	57                   	push   edi
c001e335:	56                   	push   esi
c001e336:	53                   	push   ebx
c001e337:	83 ec 1c             	sub    esp,0x1c
c001e33a:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e33e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e341:	8b b8 36 19 00 00    	mov    edi,DWORD PTR [eax+0x1936]
c001e347:	85 ff                	test   edi,edi
c001e349:	7e 20                	jle    c001e36b <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001e34b:	31 f6                	xor    esi,esi
c001e34d:	83 ec 0c             	sub    esp,0xc
c001e350:	ff b4 b0 3a 19 00 00 	push   DWORD PTR [eax+esi*4+0x193a]
c001e357:	46                   	inc    esi
c001e358:	e8 f3 14 ff ff       	call   c000f850 <free>
c001e35d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e360:	83 c4 10             	add    esp,0x10
c001e363:	39 b0 36 19 00 00    	cmp    DWORD PTR [eax+0x1936],esi
c001e369:	7f e2                	jg     c001e34d <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001e36b:	c7 80 36 19 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1936],0x0
c001e375:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001e37a:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001e37d:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e380:	d3 c0                	rol    eax,cl
c001e382:	66 21 82 24 19 00 00 	and    WORD PTR [edx+0x1924],ax
c001e389:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e38c:	89 f7                	mov    edi,esi
c001e38e:	66 83 be 24 19 00 00 00 	cmp    WORD PTR [esi+0x1924],0x0
c001e396:	0f 85 75 01 00 00    	jne    c001e511 <cleanupTerminatedTask(ThreadControlBlock*)+0x1de>
c001e39c:	8b ae 3a 1b 00 00    	mov    ebp,DWORD PTR [esi+0x1b3a]
c001e3a2:	85 ed                	test   ebp,ebp
c001e3a4:	74 1b                	je     c001e3c1 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001e3a6:	83 ec 0c             	sub    esp,0xc
c001e3a9:	55                   	push   ebp
c001e3aa:	e8 31 be ff ff       	call   c001a1e0 <EnvVarContainer::~EnvVarContainer()>
c001e3af:	59                   	pop    ecx
c001e3b0:	5e                   	pop    esi
c001e3b1:	6a 0c                	push   0xc
c001e3b3:	55                   	push   ebp
c001e3b4:	e8 ff 48 ff ff       	call   c0012cb8 <operator delete(void*, unsigned long)>
c001e3b9:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e3bc:	83 c4 10             	add    esp,0x10
c001e3bf:	89 f7                	mov    edi,esi
c001e3c1:	8b 86 2a 19 00 00    	mov    eax,DWORD PTR [esi+0x192a]
c001e3c7:	85 c0                	test   eax,eax
c001e3c9:	0f 84 ab 00 00 00    	je     c001e47a <cleanupTerminatedTask(ThreadControlBlock*)+0x147>
c001e3cf:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001e3d2:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e3d6:	31 c9                	xor    ecx,ecx
c001e3d8:	eb 10                	jmp    c001e3ea <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001e3da:	41                   	inc    ecx
c001e3db:	83 f9 10             	cmp    ecx,0x10
c001e3de:	0f 84 96 00 00 00    	je     c001e47a <cleanupTerminatedTask(ThreadControlBlock*)+0x147>
c001e3e4:	8b 86 2a 19 00 00    	mov    eax,DWORD PTR [esi+0x192a]
c001e3ea:	0f b7 90 24 19 00 00 	movzx  edx,WORD PTR [eax+0x1924]
c001e3f1:	d3 fa                	sar    edx,cl
c001e3f3:	83 e2 01             	and    edx,0x1
c001e3f6:	74 e2                	je     c001e3da <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e3f8:	8d 14 89             	lea    edx,[ecx+ecx*4]
c001e3fb:	8d 14 d1             	lea    edx,[ecx+edx*8]
c001e3fe:	8d 14 d2             	lea    edx,[edx+edx*8]
c001e401:	01 d2                	add    edx,edx
c001e403:	01 ca                	add    edx,ecx
c001e405:	01 d0                	add    eax,edx
c001e407:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001e40d:	83 fd 07             	cmp    ebp,0x7
c001e410:	75 c8                	jne    c001e3da <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e412:	05 40 02 00 00       	add    eax,0x240
c001e417:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001e41a:	83 fd ff             	cmp    ebp,0xffffffff
c001e41d:	0f 8c 08 01 00 00    	jl     c001e52b <cleanupTerminatedTask(ThreadControlBlock*)+0x1f8>
c001e423:	0f 84 b9 01 00 00    	je     c001e5e2 <cleanupTerminatedTask(ThreadControlBlock*)+0x2af>
c001e429:	85 ed                	test   ebp,ebp
c001e42b:	0f 84 a0 01 00 00    	je     c001e5d1 <cleanupTerminatedTask(ThreadControlBlock*)+0x29e>
c001e431:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001e433:	75 a5                	jne    c001e3da <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e435:	8b 86 2a 19 00 00    	mov    eax,DWORD PTR [esi+0x192a]
c001e43b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e43f:	01 d0                	add    eax,edx
c001e441:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001e445:	83 ec 0c             	sub    esp,0xc
c001e448:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001e44e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e451:	8b 80 2a 19 00 00    	mov    eax,DWORD PTR [eax+0x192a]
c001e457:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e45e:	50                   	push   eax
c001e45f:	e8 20 fe ff ff       	call   c001e284 <unblockTask(ThreadControlBlock*)>
c001e464:	83 c4 10             	add    esp,0x10
c001e467:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e46a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e46e:	89 f7                	mov    edi,esi
c001e470:	41                   	inc    ecx
c001e471:	83 f9 10             	cmp    ecx,0x10
c001e474:	0f 85 6a ff ff ff    	jne    c001e3e4 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e47a:	8b 86 26 19 00 00    	mov    eax,DWORD PTR [esi+0x1926]
c001e480:	85 c0                	test   eax,eax
c001e482:	74 5d                	je     c001e4e1 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ae>
c001e484:	8b 96 2a 19 00 00    	mov    edx,DWORD PTR [esi+0x192a]
c001e48a:	3b 82 26 19 00 00    	cmp    eax,DWORD PTR [edx+0x1926]
c001e490:	74 4f                	je     c001e4e1 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ae>
c001e492:	83 ec 0c             	sub    esp,0xc
c001e495:	68 a8 17 03 c0       	push   0xc00317a8
c001e49a:	e8 4f a4 00 00       	call   c00288ee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e49f:	c7 04 24 a8 17 03 c0 	mov    DWORD PTR [esp],0xc00317a8
c001e4a6:	89 c7                	mov    edi,eax
c001e4a8:	e8 49 a4 00 00       	call   c00288f6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e4ad:	83 c4 10             	add    esp,0x10
c001e4b0:	84 c0                	test   al,al
c001e4b2:	0f 84 e4 00 00 00    	je     c001e59c <cleanupTerminatedTask(ThreadControlBlock*)+0x269>
c001e4b8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e4bb:	8b 90 26 19 00 00    	mov    edx,DWORD PTR [eax+0x1926]
c001e4c1:	85 d2                	test   edx,edx
c001e4c3:	74 0f                	je     c001e4d4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a1>
c001e4c5:	83 ec 0c             	sub    esp,0xc
c001e4c8:	8b 02                	mov    eax,DWORD PTR [edx]
c001e4ca:	52                   	push   edx
c001e4cb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e4ce:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e4d1:	83 c4 10             	add    esp,0x10
c001e4d4:	c7 80 26 19 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1926],0x0
c001e4de:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e4e1:	8b 9f 32 19 00 00    	mov    ebx,DWORD PTR [edi+0x1932]
c001e4e7:	85 db                	test   ebx,ebx
c001e4e9:	74 16                	je     c001e501 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ce>
c001e4eb:	83 ec 0c             	sub    esp,0xc
c001e4ee:	53                   	push   ebx
c001e4ef:	e8 a4 3b ff ff       	call   c0012098 <VAS::~VAS()>
c001e4f4:	58                   	pop    eax
c001e4f5:	5a                   	pop    edx
c001e4f6:	6a 14                	push   0x14
c001e4f8:	53                   	push   ebx
c001e4f9:	e8 ba 47 ff ff       	call   c0012cb8 <operator delete(void*, unsigned long)>
c001e4fe:	83 c4 10             	add    esp,0x10
c001e501:	83 ec 0c             	sub    esp,0xc
c001e504:	68 41 c0 02 c0       	push   0xc002c041
c001e509:	e8 8a 48 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001e50e:	83 c4 10             	add    esp,0x10
c001e511:	83 ec 08             	sub    esp,0x8
c001e514:	68 3f 1b 00 00       	push   0x1b3f
c001e519:	68 4f c0 02 c0       	push   0xc002c04f
c001e51e:	e8 75 48 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001e523:	83 c4 2c             	add    esp,0x2c
c001e526:	5b                   	pop    ebx
c001e527:	5e                   	pop    esi
c001e528:	5f                   	pop    edi
c001e529:	5d                   	pop    ebp
c001e52a:	c3                   	ret    
c001e52b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e52f:	83 ec 0c             	sub    esp,0xc
c001e532:	68 2c c3 02 c0       	push   0xc002c32c
c001e537:	e8 37 bf ff ff       	call   c001a473 <Krnl::panic(char const*)>
c001e53c:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e53f:	83 c4 10             	add    esp,0x10
c001e542:	89 f7                	mov    edi,esi
c001e544:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e548:	e9 8d fe ff ff       	jmp    c001e3da <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e54d:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c001e553:	39 82 26 19 00 00    	cmp    DWORD PTR [edx+0x1926],eax
c001e559:	75 1c                	jne    c001e577 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001e55b:	83 ec 0c             	sub    esp,0xc
c001e55e:	68 94 c3 02 c0       	push   0xc002c394
c001e563:	e8 30 48 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001e568:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e56f:	e8 8e fb ff ff       	call   c001e102 <blockTask(TaskState)>
c001e574:	83 c4 10             	add    esp,0x10
c001e577:	83 ec 08             	sub    esp,0x8
c001e57a:	56                   	push   esi
c001e57b:	68 a8 17 03 c0       	push   0xc00317a8
c001e580:	e8 3b a4 00 00       	call   c00289c0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e585:	c7 04 24 a8 17 03 c0 	mov    DWORD PTR [esp],0xc00317a8
c001e58c:	e8 5d a3 00 00       	call   c00288ee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e591:	83 c4 10             	add    esp,0x10
c001e594:	39 f8                	cmp    eax,edi
c001e596:	0f 84 1c ff ff ff    	je     c001e4b8 <cleanupTerminatedTask(ThreadControlBlock*)+0x185>
c001e59c:	83 ec 0c             	sub    esp,0xc
c001e59f:	68 a8 17 03 c0       	push   0xc00317a8
c001e5a4:	e8 45 a3 00 00       	call   c00288ee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e5a9:	c7 04 24 a8 17 03 c0 	mov    DWORD PTR [esp],0xc00317a8
c001e5b0:	89 c6                	mov    esi,eax
c001e5b2:	e8 5b a3 00 00       	call   c0028912 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e5b7:	83 c4 10             	add    esp,0x10
c001e5ba:	39 f3                	cmp    ebx,esi
c001e5bc:	74 b9                	je     c001e577 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001e5be:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e5c1:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e5c4:	39 82 2a 19 00 00    	cmp    DWORD PTR [edx+0x192a],eax
c001e5ca:	75 ab                	jne    c001e577 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001e5cc:	e9 7c ff ff ff       	jmp    c001e54d <cleanupTerminatedTask(ThreadControlBlock*)+0x21a>
c001e5d1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e5d5:	83 ec 0c             	sub    esp,0xc
c001e5d8:	68 60 c3 02 c0       	push   0xc002c360
c001e5dd:	e9 55 ff ff ff       	jmp    c001e537 <cleanupTerminatedTask(ThreadControlBlock*)+0x204>
c001e5e2:	8b 36                	mov    esi,DWORD PTR [esi]
c001e5e4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e5e8:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e5eb:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e5ee:	8b b8 2a 19 00 00    	mov    edi,DWORD PTR [eax+0x192a]
c001e5f4:	01 d7                	add    edi,edx
c001e5f6:	89 f8                	mov    eax,edi
c001e5f8:	e9 44 fe ff ff       	jmp    c001e441 <cleanupTerminatedTask(ThreadControlBlock*)+0x10e>

c001e5fd <cleanerTaskFunction(void*)>:
c001e5fd:	53                   	push   ebx
c001e5fe:	83 ec 08             	sub    esp,0x8
c001e601:	e8 69 f6 ff ff       	call   c001dc6f <unlockScheduler()>
c001e606:	e8 62 f6 ff ff       	call   c001dc6d <lockScheduler()>
c001e60b:	80 3d 6c 17 03 c0 00 	cmp    BYTE PTR ds:0xc003176c,0x0
c001e612:	0f 85 8e 00 00 00    	jne    c001e6a6 <cleanerTaskFunction(void*)+0xa9>
c001e618:	83 ec 0c             	sub    esp,0xc
c001e61b:	6a 02                	push   0x2
c001e61d:	e8 9e fa ff ff       	call   c001e0c0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e622:	83 c4 10             	add    esp,0x10
c001e625:	c6 05 6c 17 03 c0 00 	mov    BYTE PTR ds:0xc003176c,0x0
c001e62c:	e8 63 f6 ff ff       	call   c001dc94 <lockStuff()>
c001e631:	e8 37 f6 ff ff       	call   c001dc6d <lockScheduler()>
c001e636:	83 ec 0c             	sub    esp,0xc
c001e639:	68 90 17 03 c0       	push   0xc0031790
c001e63e:	e8 b3 a2 00 00       	call   c00288f6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e643:	83 c4 10             	add    esp,0x10
c001e646:	84 c0                	test   al,al
c001e648:	75 40                	jne    c001e68a <cleanerTaskFunction(void*)+0x8d>
c001e64a:	83 ec 0c             	sub    esp,0xc
c001e64d:	68 90 17 03 c0       	push   0xc0031790
c001e652:	e8 97 a2 00 00       	call   c00288ee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e657:	c7 04 24 90 17 03 c0 	mov    DWORD PTR [esp],0xc0031790
c001e65e:	89 c3                	mov    ebx,eax
c001e660:	e8 ad a2 00 00       	call   c0028912 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e665:	c7 04 24 65 c0 02 c0 	mov    DWORD PTR [esp],0xc002c065
c001e66c:	e8 27 47 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001e671:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e674:	e8 ba fc ff ff       	call   c001e333 <cleanupTerminatedTask(ThreadControlBlock*)>
c001e679:	c7 04 24 7e c0 02 c0 	mov    DWORD PTR [esp],0xc002c07e
c001e680:	e8 13 47 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001e685:	83 c4 10             	add    esp,0x10
c001e688:	eb ac                	jmp    c001e636 <cleanerTaskFunction(void*)+0x39>
c001e68a:	e8 e0 f5 ff ff       	call   c001dc6f <unlockScheduler()>
c001e68f:	e8 99 f9 ff ff       	call   c001e02d <unlockStuff()>
c001e694:	e8 d4 f5 ff ff       	call   c001dc6d <lockScheduler()>
c001e699:	80 3d 6c 17 03 c0 00 	cmp    BYTE PTR ds:0xc003176c,0x0
c001e6a0:	0f 84 72 ff ff ff    	je     c001e618 <cleanerTaskFunction(void*)+0x1b>
c001e6a6:	e8 c4 f5 ff ff       	call   c001dc6f <unlockScheduler()>
c001e6ab:	e9 75 ff ff ff       	jmp    c001e625 <cleanerTaskFunction(void*)+0x28>

c001e6b0 <terminateTask(int)>:
c001e6b0:	83 ec 14             	sub    esp,0x14
c001e6b3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e6b8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001e6bb:	83 c0 0c             	add    eax,0xc
c001e6be:	50                   	push   eax
c001e6bf:	68 bc c3 02 c0       	push   0xc002c3bc
c001e6c4:	e8 cf 46 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001e6c9:	e8 c6 f5 ff ff       	call   c001dc94 <lockStuff()>
c001e6ce:	e8 9a f5 ff ff       	call   c001dc6d <lockScheduler()>
c001e6d3:	c7 04 24 91 c0 02 c0 	mov    DWORD PTR [esp],0xc002c091
c001e6da:	e8 b9 46 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001e6df:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e6e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e6e8:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e6eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e6f0:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e6f3:	5a                   	pop    edx
c001e6f4:	59                   	pop    ecx
c001e6f5:	50                   	push   eax
c001e6f6:	68 90 17 03 c0       	push   0xc0031790
c001e6fb:	e8 c0 a2 00 00       	call   c00289c0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e700:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e705:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e70c:	c7 04 24 ab c0 02 c0 	mov    DWORD PTR [esp],0xc002c0ab
c001e713:	e8 80 46 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001e718:	83 c4 10             	add    esp,0x10
c001e71b:	a1 68 17 03 c0       	mov    eax,ds:0xc0031768
c001e720:	85 c0                	test   eax,eax
c001e722:	74 5a                	je     c001e77e <terminateTask(int)+0xce>
c001e724:	83 ec 0c             	sub    esp,0xc
c001e727:	68 c5 c0 02 c0       	push   0xc002c0c5
c001e72c:	e8 67 46 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001e731:	58                   	pop    eax
c001e732:	c6 05 6c 17 03 c0 01 	mov    BYTE PTR ds:0xc003176c,0x1
c001e739:	ff 35 68 17 03 c0    	push   DWORD PTR ds:0xc0031768
c001e73f:	e8 40 fb ff ff       	call   c001e284 <unblockTask(ThreadControlBlock*)>
c001e744:	c7 04 24 df c0 02 c0 	mov    DWORD PTR [esp],0xc002c0df
c001e74b:	e8 48 46 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001e750:	83 c4 10             	add    esp,0x10
c001e753:	e8 17 f5 ff ff       	call   c001dc6f <unlockScheduler()>
c001e758:	e8 d0 f8 ff ff       	call   c001e02d <unlockStuff()>
c001e75d:	83 ec 0c             	sub    esp,0xc
c001e760:	68 17 c1 02 c0       	push   0xc002c117
c001e765:	e8 2e 46 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001e76a:	83 c4 10             	add    esp,0x10
c001e76d:	e8 fb f4 ff ff       	call   c001dc6d <lockScheduler()>
c001e772:	e8 31 f8 ff ff       	call   c001dfa8 <schedule()>
c001e777:	e8 f3 f4 ff ff       	call   c001dc6f <unlockScheduler()>
c001e77c:	eb ef                	jmp    c001e76d <terminateTask(int)+0xbd>
c001e77e:	83 ec 0c             	sub    esp,0xc
c001e781:	68 f9 c0 02 c0       	push   0xc002c0f9
c001e786:	e8 0d 46 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001e78b:	83 c4 10             	add    esp,0x10
c001e78e:	eb c3                	jmp    c001e753 <terminateTask(int)+0xa3>

c001e790 <Thr::terminateFromIRQ(int)>:
c001e790:	83 ec 18             	sub    esp,0x18
c001e793:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e797:	e8 14 ff ff ff       	call   c001e6b0 <terminateTask(int)>

c001e79c <Semaphore::release()>:
c001e79c:	83 ec 0c             	sub    esp,0xc
c001e79f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7a3:	e8 ec f4 ff ff       	call   c001dc94 <lockStuff()>
c001e7a8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e7ab:	85 d2                	test   edx,edx
c001e7ad:	74 1a                	je     c001e7c9 <Semaphore::release()+0x2d>
c001e7af:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001e7b2:	83 ec 0c             	sub    esp,0xc
c001e7b5:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001e7b8:	52                   	push   edx
c001e7b9:	e8 c6 fa ff ff       	call   c001e284 <unblockTask(ThreadControlBlock*)>
c001e7be:	83 c4 10             	add    esp,0x10
c001e7c1:	83 c4 0c             	add    esp,0xc
c001e7c4:	e9 64 f8 ff ff       	jmp    c001e02d <unlockStuff()>
c001e7c9:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001e7cc:	83 c4 0c             	add    esp,0xc
c001e7cf:	e9 59 f8 ff ff       	jmp    c001e02d <unlockStuff()>

c001e7d4 <__static_initialization_and_destruction_0(int, int)>:
c001e7d4:	83 ec 0c             	sub    esp,0xc
c001e7d7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e7dc:	0f 85 88 00 00 00    	jne    c001e86a <__static_initialization_and_destruction_0(int, int)+0x96>
c001e7e2:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e7ea:	75 7e                	jne    c001e86a <__static_initialization_and_destruction_0(int, int)+0x96>
c001e7ec:	83 ec 0c             	sub    esp,0xc
c001e7ef:	68 a8 17 03 c0       	push   0xc00317a8
c001e7f4:	e8 77 a3 00 00       	call   c0028b70 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e7f9:	83 c4 10             	add    esp,0x10
c001e7fc:	83 ec 04             	sub    esp,0x4
c001e7ff:	68 74 d1 02 c0       	push   0xc002d174
c001e804:	68 a8 17 03 c0       	push   0xc00317a8
c001e809:	68 30 8b 02 c0       	push   0xc0028b30
c001e80e:	e8 1f 44 ff ff       	call   c0012c32 <__cxa_atexit>
c001e813:	83 c4 10             	add    esp,0x10
c001e816:	83 ec 0c             	sub    esp,0xc
c001e819:	68 9c 17 03 c0       	push   0xc003179c
c001e81e:	e8 4d a3 00 00       	call   c0028b70 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e823:	83 c4 10             	add    esp,0x10
c001e826:	83 ec 04             	sub    esp,0x4
c001e829:	68 74 d1 02 c0       	push   0xc002d174
c001e82e:	68 9c 17 03 c0       	push   0xc003179c
c001e833:	68 30 8b 02 c0       	push   0xc0028b30
c001e838:	e8 f5 43 ff ff       	call   c0012c32 <__cxa_atexit>
c001e83d:	83 c4 10             	add    esp,0x10
c001e840:	83 ec 0c             	sub    esp,0xc
c001e843:	68 90 17 03 c0       	push   0xc0031790
c001e848:	e8 23 a3 00 00       	call   c0028b70 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e84d:	83 c4 10             	add    esp,0x10
c001e850:	83 ec 04             	sub    esp,0x4
c001e853:	68 74 d1 02 c0       	push   0xc002d174
c001e858:	68 90 17 03 c0       	push   0xc0031790
c001e85d:	68 30 8b 02 c0       	push   0xc0028b30
c001e862:	e8 cb 43 ff ff       	call   c0012c32 <__cxa_atexit>
c001e867:	83 c4 10             	add    esp,0x10
c001e86a:	90                   	nop
c001e86b:	83 c4 0c             	add    esp,0xc
c001e86e:	c3                   	ret    

c001e86f <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001e86f:	83 ec 0c             	sub    esp,0xc
c001e872:	83 ec 08             	sub    esp,0x8
c001e875:	68 ff ff 00 00       	push   0xffff
c001e87a:	6a 01                	push   0x1
c001e87c:	e8 53 ff ff ff       	call   c001e7d4 <__static_initialization_and_destruction_0(int, int)>
c001e881:	83 c4 10             	add    esp,0x10
c001e884:	83 c4 0c             	add    esp,0xc
c001e887:	c3                   	ret    

c001e888 <Vm::inbv(unsigned short)>:
c001e888:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e88c:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e891:	75 06                	jne    c001e899 <Vm::inbv(unsigned short)+0x11>
c001e893:	a0 ec 17 03 c0       	mov    al,ds:0xc00317ec
c001e898:	c3                   	ret    
c001e899:	ec                   	in     al,dx
c001e89a:	c3                   	ret    

c001e89b <Vm::outbv(unsigned short, unsigned char)>:
c001e89b:	53                   	push   ebx
c001e89c:	83 ec 08             	sub    esp,0x8
c001e89f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e8a3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e8a7:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e8ac:	75 38                	jne    c001e8e6 <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001e8ae:	0f b6 c3             	movzx  eax,bl
c001e8b1:	51                   	push   ecx
c001e8b2:	51                   	push   ecx
c001e8b3:	50                   	push   eax
c001e8b4:	68 db c3 02 c0       	push   0xc002c3db
c001e8b9:	e8 da 44 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001e8be:	8b 15 ec 17 03 c0    	mov    edx,DWORD PTR ds:0xc00317ec
c001e8c4:	83 c4 10             	add    esp,0x10
c001e8c7:	8d 42 01             	lea    eax,[edx+0x1]
c001e8ca:	88 9a 00 18 03 c0    	mov    BYTE PTR [edx-0x3ffce800],bl
c001e8d0:	a3 ec 17 03 c0       	mov    ds:0xc00317ec,eax
c001e8d5:	83 f8 20             	cmp    eax,0x20
c001e8d8:	75 0f                	jne    c001e8e9 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001e8da:	c7 05 ec 17 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00317ec,0x1f
c001e8e4:	eb 03                	jmp    c001e8e9 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001e8e6:	88 d8                	mov    al,bl
c001e8e8:	ee                   	out    dx,al
c001e8e9:	83 c4 08             	add    esp,0x8
c001e8ec:	5b                   	pop    ebx
c001e8ed:	c3                   	ret    

c001e8ee <Vm::realToLinear(unsigned short, unsigned short)>:
c001e8ee:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e8f3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e8f8:	c1 e0 04             	shl    eax,0x4
c001e8fb:	01 d0                	add    eax,edx
c001e8fd:	c3                   	ret    

c001e8fe <Vm::getSegment(unsigned int)>:
c001e8fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e902:	c1 e8 10             	shr    eax,0x10
c001e905:	c3                   	ret    

c001e906 <Vm::getOffset(unsigned int)>:
c001e906:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e90a:	c3                   	ret    

c001e90b <Vm::mainloop2()>:
c001e90b:	83 ec 0c             	sub    esp,0xc
c001e90e:	e8 5a f3 ff ff       	call   c001dc6d <lockScheduler()>
c001e913:	83 ec 0c             	sub    esp,0xc
c001e916:	c6 05 e5 17 03 c0 01 	mov    BYTE PTR ds:0xc00317e5,0x1
c001e91d:	6a 02                	push   0x2
c001e91f:	e8 9c f7 ff ff       	call   c001e0c0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e924:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e929:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001e92d:	52                   	push   edx
c001e92e:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001e932:	52                   	push   edx
c001e933:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001e937:	52                   	push   edx
c001e938:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001e93c:	50                   	push   eax
c001e93d:	e8 b8 19 fe ff       	call   c00002fa <goToVM86>
c001e942:	83 c4 2c             	add    esp,0x2c
c001e945:	c3                   	ret    

c001e946 <Vm::mainVm8086Loop(void*)>:
c001e946:	83 ec 0c             	sub    esp,0xc
c001e949:	e8 21 f3 ff ff       	call   c001dc6f <unlockScheduler()>
c001e94e:	83 c4 0c             	add    esp,0xc
c001e951:	eb b8                	jmp    c001e90b <Vm::mainloop2()>

c001e953 <Vm::mainloop3(unsigned long)>:
c001e953:	53                   	push   ebx
c001e954:	83 ec 08             	sub    esp,0x8
c001e957:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e95b:	e8 0d f3 ff ff       	call   c001dc6d <lockScheduler()>
c001e960:	83 ec 0c             	sub    esp,0xc
c001e963:	89 1d e0 17 03 c0    	mov    DWORD PTR ds:0xc00317e0,ebx
c001e969:	6a 02                	push   0x2
c001e96b:	c6 05 e4 17 03 c0 01 	mov    BYTE PTR ds:0xc00317e4,0x1
c001e972:	e8 49 f7 ff ff       	call   c001e0c0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e977:	83 c4 18             	add    esp,0x18
c001e97a:	5b                   	pop    ebx
c001e97b:	eb 8e                	jmp    c001e90b <Vm::mainloop2()>

c001e97d <Vm::initialise8086()>:
c001e97d:	83 ec 0c             	sub    esp,0xc
c001e980:	68 80 00 00 00       	push   0x80
c001e985:	6a 00                	push   0x0
c001e987:	68 46 e9 01 c0       	push   0xc001e946
c001e98c:	ff 35 b4 17 03 c0    	push   DWORD PTR ds:0xc00317b4
c001e992:	e8 07 f4 ff ff       	call   c001dd9e <Process::createThread(void (*)(void*), void*, int)>
c001e997:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001e99e:	a3 e8 17 03 c0       	mov    ds:0xc00317e8,eax
c001e9a3:	68 00 01 00 00       	push   0x100
c001e9a8:	a1 b4 17 03 c0       	mov    eax,ds:0xc00317b4
c001e9ad:	6a 00                	push   0x0
c001e9af:	6a 00                	push   0x0
c001e9b1:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001e9b7:	e8 3c 3b ff ff       	call   c00124f8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e9bc:	83 c4 2c             	add    esp,0x2c
c001e9bf:	c3                   	ret    

c001e9c0 <Vm::finish8086()>:
c001e9c0:	53                   	push   ebx
c001e9c1:	83 ec 08             	sub    esp,0x8
c001e9c4:	e8 a4 f2 ff ff       	call   c001dc6d <lockScheduler()>
c001e9c9:	80 3d e4 17 03 c0 00 	cmp    BYTE PTR ds:0xc00317e4,0x0
c001e9d0:	75 0c                	jne    c001e9de <Vm::finish8086()+0x1e>
c001e9d2:	e8 d1 f5 ff ff       	call   c001dfa8 <schedule()>
c001e9d7:	e8 93 f2 ff ff       	call   c001dc6f <unlockScheduler()>
c001e9dc:	eb e6                	jmp    c001e9c4 <Vm::finish8086()+0x4>
c001e9de:	83 ec 0c             	sub    esp,0xc
c001e9e1:	8b 1d e0 17 03 c0    	mov    ebx,DWORD PTR ds:0xc00317e0
c001e9e7:	ff 35 e8 17 03 c0    	push   DWORD PTR ds:0xc00317e8
c001e9ed:	c6 05 e4 17 03 c0 00 	mov    BYTE PTR ds:0xc00317e4,0x0
c001e9f4:	e8 8b f8 ff ff       	call   c001e284 <unblockTask(ThreadControlBlock*)>
c001e9f9:	e8 71 f2 ff ff       	call   c001dc6f <unlockScheduler()>
c001e9fe:	89 d8                	mov    eax,ebx
c001ea00:	83 c4 18             	add    esp,0x18
c001ea03:	5b                   	pop    ebx
c001ea04:	c3                   	ret    

c001ea05 <Vm::getOutput8086(unsigned char*)>:
c001ea05:	83 ec 10             	sub    esp,0x10
c001ea08:	ff 35 ec 17 03 c0    	push   DWORD PTR ds:0xc00317ec
c001ea0e:	68 00 18 03 c0       	push   0xc0031800
c001ea13:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea17:	e8 28 1d fe ff       	call   c0000744 <memcpy>
c001ea1c:	a1 ec 17 03 c0       	mov    eax,ds:0xc00317ec
c001ea21:	c7 05 ec 17 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00317ec,0x0
c001ea2b:	83 c4 1c             	add    esp,0x1c
c001ea2e:	c3                   	ret    

c001ea2f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001ea2f:	55                   	push   ebp
c001ea30:	57                   	push   edi
c001ea31:	56                   	push   esi
c001ea32:	53                   	push   ebx
c001ea33:	83 ec 2c             	sub    esp,0x2c
c001ea36:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001ea3a:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001ea3e:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001ea42:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001ea46:	e8 22 f2 ff ff       	call   c001dc6d <lockScheduler()>
c001ea4b:	a0 e5 17 03 c0       	mov    al,ds:0xc00317e5
c001ea50:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ea54:	84 c0                	test   al,al
c001ea56:	75 0c                	jne    c001ea64 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x35>
c001ea58:	e8 4b f5 ff ff       	call   c001dfa8 <schedule()>
c001ea5d:	e8 0d f2 ff ff       	call   c001dc6f <unlockScheduler()>
c001ea62:	eb e2                	jmp    c001ea46 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001ea64:	a1 e8 17 03 c0       	mov    eax,ds:0xc00317e8
c001ea69:	c7 05 ec 17 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00317ec,0x0
c001ea73:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001ea77:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001ea7b:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001ea7f:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001ea83:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001ea87:	50                   	push   eax
c001ea88:	6a 20                	push   0x20
c001ea8a:	6a 00                	push   0x0
c001ea8c:	68 00 18 03 c0       	push   0xc0031800
c001ea91:	e8 e2 1c fe ff       	call   c0000778 <memset>
c001ea96:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ea9d:	e8 9e 0d ff ff       	call   c000f840 <malloc>
c001eaa2:	83 c4 0c             	add    esp,0xc
c001eaa5:	89 c7                	mov    edi,eax
c001eaa7:	ff 35 b4 17 03 c0    	push   DWORD PTR ds:0xc00317b4
c001eaad:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001eab1:	50                   	push   eax
c001eab2:	e8 39 48 ff ff       	call   c00132f0 <File::File(char const*, Process*)>
c001eab7:	83 c4 10             	add    esp,0x10
c001eaba:	85 ff                	test   edi,edi
c001eabc:	75 0a                	jne    c001eac8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x99>
c001eabe:	83 ec 0c             	sub    esp,0xc
c001eac1:	68 f7 c3 02 c0       	push   0xc002c3f7
c001eac6:	eb 27                	jmp    c001eaef <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c001eac8:	50                   	push   eax
c001eac9:	8d 44 24 17          	lea    eax,[esp+0x17]
c001eacd:	50                   	push   eax
c001eace:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ead2:	50                   	push   eax
c001ead3:	57                   	push   edi
c001ead4:	e8 27 4b ff ff       	call   c0013600 <File::stat(unsigned long long*, bool*)>
c001ead9:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001eade:	83 c4 10             	add    esp,0x10
c001eae1:	89 e8                	mov    eax,ebp
c001eae3:	84 c0                	test   al,al
c001eae5:	74 19                	je     c001eb00 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001eae7:	83 ec 0c             	sub    esp,0xc
c001eaea:	68 0b c4 02 c0       	push   0xc002c40b
c001eaef:	e8 7f b9 ff ff       	call   c001a473 <Krnl::panic(char const*)>
c001eaf4:	31 ed                	xor    ebp,ebp
c001eaf6:	e8 74 f1 ff ff       	call   c001dc6f <unlockScheduler()>
c001eafb:	83 c4 10             	add    esp,0x10
c001eafe:	eb 75                	jmp    c001eb75 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001eb00:	50                   	push   eax
c001eb01:	50                   	push   eax
c001eb02:	6a 01                	push   0x1
c001eb04:	57                   	push   edi
c001eb05:	e8 4a 48 ff ff       	call   c0013354 <File::open(FileOpenMode)>
c001eb0a:	83 c4 10             	add    esp,0x10
c001eb0d:	85 c0                	test   eax,eax
c001eb0f:	74 17                	je     c001eb28 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf9>
c001eb11:	83 ec 0c             	sub    esp,0xc
c001eb14:	68 24 c4 02 c0       	push   0xc002c424
c001eb19:	e8 55 b9 ff ff       	call   c001a473 <Krnl::panic(char const*)>
c001eb1e:	e8 4c f1 ff ff       	call   c001dc6f <unlockScheduler()>
c001eb23:	83 c4 10             	add    esp,0x10
c001eb26:	eb 4d                	jmp    c001eb75 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001eb28:	0f b7 f6             	movzx  esi,si
c001eb2b:	50                   	push   eax
c001eb2c:	0f b7 db             	movzx  ebx,bx
c001eb2f:	50                   	push   eax
c001eb30:	56                   	push   esi
c001eb31:	53                   	push   ebx
c001eb32:	e8 b7 fd ff ff       	call   c001e8ee <Vm::realToLinear(unsigned short, unsigned short)>
c001eb37:	5a                   	pop    edx
c001eb38:	8b 17                	mov    edx,DWORD PTR [edi]
c001eb3a:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001eb3e:	51                   	push   ecx
c001eb3f:	50                   	push   eax
c001eb40:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001eb44:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001eb48:	57                   	push   edi
c001eb49:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001eb4c:	83 c4 14             	add    esp,0x14
c001eb4f:	57                   	push   edi
c001eb50:	e8 5d 48 ff ff       	call   c00133b2 <File::close()>
c001eb55:	c6 05 e5 17 03 c0 00 	mov    BYTE PTR ds:0xc00317e5,0x0
c001eb5c:	e8 0e f1 ff ff       	call   c001dc6f <unlockScheduler()>
c001eb61:	59                   	pop    ecx
c001eb62:	ff 35 e8 17 03 c0    	push   DWORD PTR ds:0xc00317e8
c001eb68:	e8 17 f7 ff ff       	call   c001e284 <unblockTask(ThreadControlBlock*)>
c001eb6d:	83 c4 10             	add    esp,0x10
c001eb70:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001eb75:	83 c4 2c             	add    esp,0x2c
c001eb78:	89 e8                	mov    eax,ebp
c001eb7a:	5b                   	pop    ebx
c001eb7b:	5e                   	pop    esi
c001eb7c:	5f                   	pop    edi
c001eb7d:	5d                   	pop    ebp
c001eb7e:	c3                   	ret    

c001eb7f <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001eb7f:	57                   	push   edi
c001eb80:	56                   	push   esi
c001eb81:	53                   	push   ebx
c001eb82:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001eb86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eb8a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001eb8e:	83 e8 06             	sub    eax,0x6
c001eb91:	0f b7 c0             	movzx  eax,ax
c001eb94:	50                   	push   eax
c001eb95:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001eb9a:	50                   	push   eax
c001eb9b:	e8 4e fd ff ff       	call   c001e8ee <Vm::realToLinear(unsigned short, unsigned short)>
c001eba0:	5a                   	pop    edx
c001eba1:	5e                   	pop    esi
c001eba2:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001eba5:	8d 56 fa             	lea    edx,[esi-0x6]
c001eba8:	81 e2 ff ff 00 00    	and    edx,0xffff
c001ebae:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001ebb1:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001ebb4:	83 c2 02             	add    edx,0x2
c001ebb7:	66 89 10             	mov    WORD PTR [eax],dx
c001ebba:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001ebbd:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001ebc1:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001ebc4:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001ebc8:	89 d6                	mov    esi,edx
c001ebca:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001ebd0:	66 81 e6 ff fd       	and    si,0xfdff
c001ebd5:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001ebd9:	74 07                	je     c001ebe2 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001ebdb:	89 d6                	mov    esi,edx
c001ebdd:	66 81 ce 00 02       	or     si,0x200
c001ebe2:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001ebe6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ebeb:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001ebef:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001ebf7:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001ebfa:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001ec02:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001ec05:	5b                   	pop    ebx
c001ec06:	5e                   	pop    esi
c001ec07:	5f                   	pop    edi
c001ec08:	c3                   	ret    

c001ec09 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001ec09:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ec0e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ec13:	c1 e0 04             	shl    eax,0x4
c001ec16:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001ec19:	c3                   	ret    

c001ec1a <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001ec1a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ec1f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ec24:	c1 e0 04             	shl    eax,0x4
c001ec27:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001ec2b:	c3                   	ret    

c001ec2c <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001ec2c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ec31:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ec36:	c1 e0 04             	shl    eax,0x4
c001ec39:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001ec3c:	c3                   	ret    

c001ec3d <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001ec3d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ec42:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ec47:	c1 e0 04             	shl    eax,0x4
c001ec4a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ec4e:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001ec51:	c3                   	ret    

c001ec52 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001ec52:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ec57:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ec5c:	c1 e0 04             	shl    eax,0x4
c001ec5f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ec63:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001ec67:	c3                   	ret    

c001ec68 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001ec68:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ec6d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ec72:	c1 e0 04             	shl    eax,0x4
c001ec75:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ec79:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001ec7c:	c3                   	ret    

c001ec7d <Vm::faultHandler(regs*)>:
c001ec7d:	55                   	push   ebp
c001ec7e:	57                   	push   edi
c001ec7f:	56                   	push   esi
c001ec80:	53                   	push   ebx
c001ec81:	83 ec 1c             	sub    esp,0x1c
c001ec84:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ec88:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001ec8b:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001ec8e:	0f b7 c1             	movzx  eax,cx
c001ec91:	50                   	push   eax
c001ec92:	0f b7 c3             	movzx  eax,bx
c001ec95:	c1 e3 04             	shl    ebx,0x4
c001ec98:	50                   	push   eax
c001ec99:	e8 50 fc ff ff       	call   c001e8ee <Vm::realToLinear(unsigned short, unsigned short)>
c001ec9e:	5a                   	pop    edx
c001ec9f:	89 c5                	mov    ebp,eax
c001eca1:	5e                   	pop    esi
c001eca2:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001eca6:	50                   	push   eax
c001eca7:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001ecab:	50                   	push   eax
c001ecac:	e8 3d fc ff ff       	call   c001e8ee <Vm::realToLinear(unsigned short, unsigned short)>
c001ecb1:	01 cb                	add    ebx,ecx
c001ecb3:	89 c6                	mov    esi,eax
c001ecb5:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001ecb9:	50                   	push   eax
c001ecba:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ecbe:	50                   	push   eax
c001ecbf:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001ecc3:	50                   	push   eax
c001ecc4:	55                   	push   ebp
c001ecc5:	53                   	push   ebx
c001ecc6:	b3 06                	mov    bl,0x6
c001ecc8:	68 3d c4 02 c0       	push   0xc002c43d
c001eccd:	e8 c6 40 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001ecd2:	83 c4 20             	add    esp,0x20
c001ecd5:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001ecda:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001ecdf:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001ece3:	3c 9d                	cmp    al,0x9d
c001ece5:	0f 84 d7 02 00 00    	je     c001efc2 <Vm::faultHandler(regs*)+0x345>
c001eceb:	0f 87 a3 00 00 00    	ja     c001ed94 <Vm::faultHandler(regs*)+0x117>
c001ecf1:	3c 66                	cmp    al,0x66
c001ecf3:	0f 84 15 02 00 00    	je     c001ef0e <Vm::faultHandler(regs*)+0x291>
c001ecf9:	77 5f                	ja     c001ed5a <Vm::faultHandler(regs*)+0xdd>
c001ecfb:	3c 36                	cmp    al,0x36
c001ecfd:	0f 84 f1 01 00 00    	je     c001eef4 <Vm::faultHandler(regs*)+0x277>
c001ed03:	77 28                	ja     c001ed2d <Vm::faultHandler(regs*)+0xb0>
c001ed05:	3c 26                	cmp    al,0x26
c001ed07:	0f 84 99 01 00 00    	je     c001eea6 <Vm::faultHandler(regs*)+0x229>
c001ed0d:	3c 2e                	cmp    al,0x2e
c001ed0f:	0f 85 3b 07 00 00    	jne    c001f450 <Vm::faultHandler(regs*)+0x7d3>
c001ed15:	83 ec 0c             	sub    esp,0xc
c001ed18:	31 db                	xor    ebx,ebx
c001ed1a:	68 52 c4 02 c0       	push   0xc002c452
c001ed1f:	e8 74 40 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001ed24:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ed27:	83 c4 10             	add    esp,0x10
c001ed2a:	45                   	inc    ebp
c001ed2b:	eb b2                	jmp    c001ecdf <Vm::faultHandler(regs*)+0x62>
c001ed2d:	3c 64                	cmp    al,0x64
c001ed2f:	0f 84 8b 01 00 00    	je     c001eec0 <Vm::faultHandler(regs*)+0x243>
c001ed35:	0f 87 9f 01 00 00    	ja     c001eeda <Vm::faultHandler(regs*)+0x25d>
c001ed3b:	3c 3e                	cmp    al,0x3e
c001ed3d:	0f 85 0d 07 00 00    	jne    c001f450 <Vm::faultHandler(regs*)+0x7d3>
c001ed43:	83 ec 0c             	sub    esp,0xc
c001ed46:	b3 01                	mov    bl,0x1
c001ed48:	68 56 c4 02 c0       	push   0xc002c456
c001ed4d:	e8 46 40 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001ed52:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ed55:	83 c4 10             	add    esp,0x10
c001ed58:	eb d0                	jmp    c001ed2a <Vm::faultHandler(regs*)+0xad>
c001ed5a:	3c 6d                	cmp    al,0x6d
c001ed5c:	0f 84 af 03 00 00    	je     c001f111 <Vm::faultHandler(regs*)+0x494>
c001ed62:	77 15                	ja     c001ed79 <Vm::faultHandler(regs*)+0xfc>
c001ed64:	3c 67                	cmp    al,0x67
c001ed66:	0f 84 bf 01 00 00    	je     c001ef2b <Vm::faultHandler(regs*)+0x2ae>
c001ed6c:	3c 6c                	cmp    al,0x6c
c001ed6e:	0f 84 3f 03 00 00    	je     c001f0b3 <Vm::faultHandler(regs*)+0x436>
c001ed74:	e9 d7 06 00 00       	jmp    c001f450 <Vm::faultHandler(regs*)+0x7d3>
c001ed79:	3c 6f                	cmp    al,0x6f
c001ed7b:	0f 84 a4 04 00 00    	je     c001f225 <Vm::faultHandler(regs*)+0x5a8>
c001ed81:	0f 82 11 04 00 00    	jb     c001f198 <Vm::faultHandler(regs*)+0x51b>
c001ed87:	3c 9c                	cmp    al,0x9c
c001ed89:	0f 84 ba 01 00 00    	je     c001ef49 <Vm::faultHandler(regs*)+0x2cc>
c001ed8f:	e9 bc 06 00 00       	jmp    c001f450 <Vm::faultHandler(regs*)+0x7d3>
c001ed94:	3c ec                	cmp    al,0xec
c001ed96:	0f 84 24 06 00 00    	je     c001f3c0 <Vm::faultHandler(regs*)+0x743>
c001ed9c:	0f 87 93 00 00 00    	ja     c001ee35 <Vm::faultHandler(regs*)+0x1b8>
c001eda2:	3c e4                	cmp    al,0xe4
c001eda4:	0f 84 5c 05 00 00    	je     c001f306 <Vm::faultHandler(regs*)+0x689>
c001edaa:	77 6a                	ja     c001ee16 <Vm::faultHandler(regs*)+0x199>
c001edac:	3c cd                	cmp    al,0xcd
c001edae:	0f 84 7e 02 00 00    	je     c001f032 <Vm::faultHandler(regs*)+0x3b5>
c001edb4:	3c cf                	cmp    al,0xcf
c001edb6:	0f 85 94 06 00 00    	jne    c001f450 <Vm::faultHandler(regs*)+0x7d3>
c001edbc:	83 ec 0c             	sub    esp,0xc
c001edbf:	68 9a c4 02 c0       	push   0xc002c49a
c001edc4:	e8 cf 3f ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001edc9:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001edcc:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001edcf:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001edd3:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001edd6:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001edda:	0d 00 02 02 00       	or     eax,0x20200
c001eddf:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001ede2:	56                   	push   esi
c001ede3:	53                   	push   ebx
c001ede4:	52                   	push   edx
c001ede5:	68 a0 c4 02 c0       	push   0xc002c4a0
c001edea:	e8 a9 3f ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001edef:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001edf3:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001edf9:	66 c1 e8 09          	shr    ax,0x9
c001edfd:	83 e0 01             	and    eax,0x1
c001ee00:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ee03:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001ee06:	83 c0 06             	add    eax,0x6
c001ee09:	25 ff ff 00 00       	and    eax,0xffff
c001ee0e:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001ee11:	e9 95 02 00 00       	jmp    c001f0ab <Vm::faultHandler(regs*)+0x42e>
c001ee16:	3c e6                	cmp    al,0xe6
c001ee18:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001ee1c:	0f 84 4e 05 00 00    	je     c001f370 <Vm::faultHandler(regs*)+0x6f3>
c001ee22:	0f 82 0a 05 00 00    	jb     c001f332 <Vm::faultHandler(regs*)+0x6b5>
c001ee28:	3c e7                	cmp    al,0xe7
c001ee2a:	0f 84 69 05 00 00    	je     c001f399 <Vm::faultHandler(regs*)+0x71c>
c001ee30:	e9 1b 06 00 00       	jmp    c001f450 <Vm::faultHandler(regs*)+0x7d3>
c001ee35:	3c ef                	cmp    al,0xef
c001ee37:	0f 84 e6 05 00 00    	je     c001f423 <Vm::faultHandler(regs*)+0x7a6>
c001ee3d:	77 37                	ja     c001ee76 <Vm::faultHandler(regs*)+0x1f9>
c001ee3f:	3c ed                	cmp    al,0xed
c001ee41:	0f 84 a3 05 00 00    	je     c001f3ea <Vm::faultHandler(regs*)+0x76d>
c001ee47:	3c ee                	cmp    al,0xee
c001ee49:	0f 85 01 06 00 00    	jne    c001f450 <Vm::faultHandler(regs*)+0x7d3>
c001ee4f:	52                   	push   edx
c001ee50:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001ee53:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001ee56:	68 3b c5 02 c0       	push   0xc002c53b
c001ee5b:	e8 38 3f ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001ee60:	59                   	pop    ecx
c001ee61:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001ee65:	5b                   	pop    ebx
c001ee66:	50                   	push   eax
c001ee67:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001ee6b:	50                   	push   eax
c001ee6c:	e8 2a fa ff ff       	call   c001e89b <Vm::outbv(unsigned short, unsigned char)>
c001ee71:	e9 a5 05 00 00       	jmp    c001f41b <Vm::faultHandler(regs*)+0x79e>
c001ee76:	3c fa                	cmp    al,0xfa
c001ee78:	0f 84 f7 01 00 00    	je     c001f075 <Vm::faultHandler(regs*)+0x3f8>
c001ee7e:	3c fb                	cmp    al,0xfb
c001ee80:	0f 84 0a 02 00 00    	je     c001f090 <Vm::faultHandler(regs*)+0x413>
c001ee86:	3c f3                	cmp    al,0xf3
c001ee88:	0f 85 c2 05 00 00    	jne    c001f450 <Vm::faultHandler(regs*)+0x7d3>
c001ee8e:	83 ec 0c             	sub    esp,0xc
c001ee91:	68 73 c4 02 c0       	push   0xc002c473
c001ee96:	e8 fd 3e ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001ee9b:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ee9e:	83 c4 10             	add    esp,0x10
c001eea1:	e9 84 fe ff ff       	jmp    c001ed2a <Vm::faultHandler(regs*)+0xad>
c001eea6:	83 ec 0c             	sub    esp,0xc
c001eea9:	b3 02                	mov    bl,0x2
c001eeab:	68 4e c4 02 c0       	push   0xc002c44e
c001eeb0:	e8 e3 3e ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001eeb5:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001eeb8:	83 c4 10             	add    esp,0x10
c001eebb:	e9 6a fe ff ff       	jmp    c001ed2a <Vm::faultHandler(regs*)+0xad>
c001eec0:	83 ec 0c             	sub    esp,0xc
c001eec3:	b3 03                	mov    bl,0x3
c001eec5:	68 5a c4 02 c0       	push   0xc002c45a
c001eeca:	e8 c9 3e ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001eecf:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001eed2:	83 c4 10             	add    esp,0x10
c001eed5:	e9 50 fe ff ff       	jmp    c001ed2a <Vm::faultHandler(regs*)+0xad>
c001eeda:	83 ec 0c             	sub    esp,0xc
c001eedd:	b3 04                	mov    bl,0x4
c001eedf:	68 5e c4 02 c0       	push   0xc002c45e
c001eee4:	e8 af 3e ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001eee9:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001eeec:	83 c4 10             	add    esp,0x10
c001eeef:	e9 36 fe ff ff       	jmp    c001ed2a <Vm::faultHandler(regs*)+0xad>
c001eef4:	83 ec 0c             	sub    esp,0xc
c001eef7:	b3 05                	mov    bl,0x5
c001eef9:	68 62 c4 02 c0       	push   0xc002c462
c001eefe:	e8 95 3e ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001ef03:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ef06:	83 c4 10             	add    esp,0x10
c001ef09:	e9 1c fe ff ff       	jmp    c001ed2a <Vm::faultHandler(regs*)+0xad>
c001ef0e:	83 ec 0c             	sub    esp,0xc
c001ef11:	68 66 c4 02 c0       	push   0xc002c466
c001ef16:	e8 7d 3e ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001ef1b:	83 c4 10             	add    esp,0x10
c001ef1e:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ef21:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001ef26:	e9 ff fd ff ff       	jmp    c001ed2a <Vm::faultHandler(regs*)+0xad>
c001ef2b:	50                   	push   eax
c001ef2c:	50                   	push   eax
c001ef2d:	6a 01                	push   0x1
c001ef2f:	68 6b c4 02 c0       	push   0xc002c46b
c001ef34:	e8 5f 3e ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001ef39:	83 c4 10             	add    esp,0x10
c001ef3c:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ef3f:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001ef44:	e9 e1 fd ff ff       	jmp    c001ed2a <Vm::faultHandler(regs*)+0xad>
c001ef49:	83 ec 0c             	sub    esp,0xc
c001ef4c:	68 79 c4 02 c0       	push   0xc002c479
c001ef51:	e8 42 3e ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001ef56:	83 c4 10             	add    esp,0x10
c001ef59:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001ef5c:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001ef61:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001ef64:	74 2f                	je     c001ef95 <Vm::faultHandler(regs*)+0x318>
c001ef66:	83 ea 04             	sub    edx,0x4
c001ef69:	25 ff 0d 00 00       	and    eax,0xdff
c001ef6e:	81 e2 ff ff 00 00    	and    edx,0xffff
c001ef74:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001ef77:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001ef7a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ef80:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001ef84:	0f 84 bf 04 00 00    	je     c001f449 <Vm::faultHandler(regs*)+0x7cc>
c001ef8a:	80 cc 02             	or     ah,0x2
c001ef8d:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001ef90:	e9 b4 04 00 00       	jmp    c001f449 <Vm::faultHandler(regs*)+0x7cc>
c001ef95:	83 ea 02             	sub    edx,0x2
c001ef98:	81 e2 ff ff 00 00    	and    edx,0xffff
c001ef9e:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001efa1:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001efa5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001efab:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001efaf:	74 05                	je     c001efb6 <Vm::faultHandler(regs*)+0x339>
c001efb1:	80 cc 02             	or     ah,0x2
c001efb4:	eb 03                	jmp    c001efb9 <Vm::faultHandler(regs*)+0x33c>
c001efb6:	80 e4 fd             	and    ah,0xfd
c001efb9:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001efbd:	e9 87 04 00 00       	jmp    c001f449 <Vm::faultHandler(regs*)+0x7cc>
c001efc2:	83 ec 0c             	sub    esp,0xc
c001efc5:	68 80 c4 02 c0       	push   0xc002c480
c001efca:	e8 c9 3d ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001efcf:	83 c4 10             	add    esp,0x10
c001efd2:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001efd7:	74 28                	je     c001f001 <Vm::faultHandler(regs*)+0x384>
c001efd9:	8b 06                	mov    eax,DWORD PTR [esi]
c001efdb:	25 ff 0d 00 00       	and    eax,0xdff
c001efe0:	0d 00 02 02 00       	or     eax,0x20200
c001efe5:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001efe8:	8b 06                	mov    eax,DWORD PTR [esi]
c001efea:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001eff0:	c1 e8 09             	shr    eax,0x9
c001eff3:	83 e0 01             	and    eax,0x1
c001eff6:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001eff9:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001effc:	83 c0 04             	add    eax,0x4
c001efff:	eb 24                	jmp    c001f025 <Vm::faultHandler(regs*)+0x3a8>
c001f001:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001f004:	0d 00 02 02 00       	or     eax,0x20200
c001f009:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f00c:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f00f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f015:	66 c1 e8 09          	shr    ax,0x9
c001f019:	83 e0 01             	and    eax,0x1
c001f01c:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f01f:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f022:	83 c0 02             	add    eax,0x2
c001f025:	25 ff ff 00 00       	and    eax,0xffff
c001f02a:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f02d:	e9 17 04 00 00       	jmp    c001f449 <Vm::faultHandler(regs*)+0x7cc>
c001f032:	53                   	push   ebx
c001f033:	53                   	push   ebx
c001f034:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f038:	50                   	push   eax
c001f039:	68 86 c4 02 c0       	push   0xc002c486
c001f03e:	e8 55 3d ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001f043:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f047:	83 c4 10             	add    esp,0x10
c001f04a:	3c ee                	cmp    al,0xee
c001f04c:	75 10                	jne    c001f05e <Vm::faultHandler(regs*)+0x3e1>
c001f04e:	83 ec 0c             	sub    esp,0xc
c001f051:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f054:	e8 fa f8 ff ff       	call   c001e953 <Vm::mainloop3(unsigned long)>
c001f059:	e9 c0 03 00 00       	jmp    c001f41e <Vm::faultHandler(regs*)+0x7a1>
c001f05e:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001f062:	83 ec 0c             	sub    esp,0xc
c001f065:	53                   	push   ebx
c001f066:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001f06a:	53                   	push   ebx
c001f06b:	55                   	push   ebp
c001f06c:	50                   	push   eax
c001f06d:	57                   	push   edi
c001f06e:	e8 0c fb ff ff       	call   c001eb7f <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001f073:	eb 36                	jmp    c001f0ab <Vm::faultHandler(regs*)+0x42e>
c001f075:	83 ec 0c             	sub    esp,0xc
c001f078:	68 90 c4 02 c0       	push   0xc002c490
c001f07d:	e8 16 3d ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001f082:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f087:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f08b:	e9 8b 03 00 00       	jmp    c001f41b <Vm::faultHandler(regs*)+0x79e>
c001f090:	83 ec 0c             	sub    esp,0xc
c001f093:	68 95 c4 02 c0       	push   0xc002c495
c001f098:	e8 fb 3c ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001f09d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f0a2:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001f0a6:	e9 70 03 00 00       	jmp    c001f41b <Vm::faultHandler(regs*)+0x79e>
c001f0ab:	83 c4 20             	add    esp,0x20
c001f0ae:	e9 99 03 00 00       	jmp    c001f44c <Vm::faultHandler(regs*)+0x7cf>
c001f0b3:	83 ec 0c             	sub    esp,0xc
c001f0b6:	68 d3 c4 02 c0       	push   0xc002c4d3
c001f0bb:	e8 d8 3c ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001f0c0:	83 c4 10             	add    esp,0x10
c001f0c3:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f0c6:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f0cb:	74 0d                	je     c001f0da <Vm::faultHandler(regs*)+0x45d>
c001f0cd:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f0d4:	0f 87 9e 01 00 00    	ja     c001f278 <Vm::faultHandler(regs*)+0x5fb>
c001f0da:	83 ec 0c             	sub    esp,0xc
c001f0dd:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f0e1:	0f b7 db             	movzx  ebx,bx
c001f0e4:	50                   	push   eax
c001f0e5:	e8 9e f7 ff ff       	call   c001e888 <Vm::inbv(unsigned short)>
c001f0ea:	83 c4 0c             	add    esp,0xc
c001f0ed:	0f b6 c0             	movzx  eax,al
c001f0f0:	50                   	push   eax
c001f0f1:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001f0f5:	50                   	push   eax
c001f0f6:	53                   	push   ebx
c001f0f7:	e8 41 fb ff ff       	call   c001ec3d <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001f0fc:	83 c4 10             	add    esp,0x10
c001f0ff:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f102:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f106:	74 03                	je     c001f10b <Vm::faultHandler(regs*)+0x48e>
c001f108:	48                   	dec    eax
c001f109:	eb 01                	jmp    c001f10c <Vm::faultHandler(regs*)+0x48f>
c001f10b:	40                   	inc    eax
c001f10c:	0f b7 c0             	movzx  eax,ax
c001f10f:	eb 7f                	jmp    c001f190 <Vm::faultHandler(regs*)+0x513>
c001f111:	83 ec 0c             	sub    esp,0xc
c001f114:	68 05 c5 02 c0       	push   0xc002c505
c001f119:	e8 7a 3c ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001f11e:	83 c4 10             	add    esp,0x10
c001f121:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f124:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f129:	74 0d                	je     c001f138 <Vm::faultHandler(regs*)+0x4bb>
c001f12b:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f132:	0f 87 40 01 00 00    	ja     c001f278 <Vm::faultHandler(regs*)+0x5fb>
c001f138:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f13b:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001f13f:	0f b7 db             	movzx  ebx,bx
c001f142:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f147:	74 20                	je     c001f169 <Vm::faultHandler(regs*)+0x4ec>
c001f149:	ed                   	in     eax,dx
c001f14a:	51                   	push   ecx
c001f14b:	50                   	push   eax
c001f14c:	56                   	push   esi
c001f14d:	53                   	push   ebx
c001f14e:	e8 15 fb ff ff       	call   c001ec68 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001f153:	83 c4 10             	add    esp,0x10
c001f156:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f159:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f15d:	74 05                	je     c001f164 <Vm::faultHandler(regs*)+0x4e7>
c001f15f:	83 e8 04             	sub    eax,0x4
c001f162:	eb 27                	jmp    c001f18b <Vm::faultHandler(regs*)+0x50e>
c001f164:	83 c0 04             	add    eax,0x4
c001f167:	eb 22                	jmp    c001f18b <Vm::faultHandler(regs*)+0x50e>
c001f169:	66 ed                	in     ax,dx
c001f16b:	0f b7 c0             	movzx  eax,ax
c001f16e:	52                   	push   edx
c001f16f:	50                   	push   eax
c001f170:	56                   	push   esi
c001f171:	53                   	push   ebx
c001f172:	e8 db fa ff ff       	call   c001ec52 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001f177:	83 c4 10             	add    esp,0x10
c001f17a:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f17d:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f181:	74 05                	je     c001f188 <Vm::faultHandler(regs*)+0x50b>
c001f183:	83 e8 02             	sub    eax,0x2
c001f186:	eb 03                	jmp    c001f18b <Vm::faultHandler(regs*)+0x50e>
c001f188:	83 c0 02             	add    eax,0x2
c001f18b:	25 ff ff 00 00       	and    eax,0xffff
c001f190:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001f193:	e9 b1 02 00 00       	jmp    c001f449 <Vm::faultHandler(regs*)+0x7cc>
c001f198:	83 ec 0c             	sub    esp,0xc
c001f19b:	4b                   	dec    ebx
c001f19c:	68 0b c5 02 c0       	push   0xc002c50b
c001f1a1:	e8 f2 3b ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001f1a6:	83 c4 10             	add    esp,0x10
c001f1a9:	80 fb 05             	cmp    bl,0x5
c001f1ac:	77 0a                	ja     c001f1b8 <Vm::faultHandler(regs*)+0x53b>
c001f1ae:	0f b6 db             	movzx  ebx,bl
c001f1b1:	ff 24 9d 7c c5 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd3a84]
c001f1b8:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f1bc:	eb 1b                	jmp    c001f1d9 <Vm::faultHandler(regs*)+0x55c>
c001f1be:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f1c2:	eb 15                	jmp    c001f1d9 <Vm::faultHandler(regs*)+0x55c>
c001f1c4:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f1c8:	eb 0f                	jmp    c001f1d9 <Vm::faultHandler(regs*)+0x55c>
c001f1ca:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f1ce:	eb 09                	jmp    c001f1d9 <Vm::faultHandler(regs*)+0x55c>
c001f1d0:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f1d3:	eb 04                	jmp    c001f1d9 <Vm::faultHandler(regs*)+0x55c>
c001f1d5:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f1d9:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f1de:	74 0d                	je     c001f1ed <Vm::faultHandler(regs*)+0x570>
c001f1e0:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001f1e7:	0f 87 8b 00 00 00    	ja     c001f278 <Vm::faultHandler(regs*)+0x5fb>
c001f1ed:	53                   	push   ebx
c001f1ee:	53                   	push   ebx
c001f1ef:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001f1f3:	52                   	push   edx
c001f1f4:	50                   	push   eax
c001f1f5:	e8 0f fa ff ff       	call   c001ec09 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001f1fa:	5e                   	pop    esi
c001f1fb:	0f b6 c0             	movzx  eax,al
c001f1fe:	5d                   	pop    ebp
c001f1ff:	50                   	push   eax
c001f200:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f204:	50                   	push   eax
c001f205:	e8 91 f6 ff ff       	call   c001e89b <Vm::outbv(unsigned short, unsigned char)>
c001f20a:	83 c4 10             	add    esp,0x10
c001f20d:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001f210:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f214:	74 03                	je     c001f219 <Vm::faultHandler(regs*)+0x59c>
c001f216:	48                   	dec    eax
c001f217:	eb 01                	jmp    c001f21a <Vm::faultHandler(regs*)+0x59d>
c001f219:	40                   	inc    eax
c001f21a:	0f b7 c0             	movzx  eax,ax
c001f21d:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001f220:	e9 24 02 00 00       	jmp    c001f449 <Vm::faultHandler(regs*)+0x7cc>
c001f225:	83 ec 0c             	sub    esp,0xc
c001f228:	4b                   	dec    ebx
c001f229:	68 0b c5 02 c0       	push   0xc002c50b
c001f22e:	e8 65 3b ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001f233:	83 c4 10             	add    esp,0x10
c001f236:	80 fb 05             	cmp    bl,0x5
c001f239:	77 0a                	ja     c001f245 <Vm::faultHandler(regs*)+0x5c8>
c001f23b:	0f b6 db             	movzx  ebx,bl
c001f23e:	ff 24 9d 94 c5 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd3a6c]
c001f245:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f249:	eb 1b                	jmp    c001f266 <Vm::faultHandler(regs*)+0x5e9>
c001f24b:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f24f:	eb 15                	jmp    c001f266 <Vm::faultHandler(regs*)+0x5e9>
c001f251:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f255:	eb 0f                	jmp    c001f266 <Vm::faultHandler(regs*)+0x5e9>
c001f257:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f25b:	eb 09                	jmp    c001f266 <Vm::faultHandler(regs*)+0x5e9>
c001f25d:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f260:	eb 04                	jmp    c001f266 <Vm::faultHandler(regs*)+0x5e9>
c001f262:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f266:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001f269:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f26e:	74 39                	je     c001f2a9 <Vm::faultHandler(regs*)+0x62c>
c001f270:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001f276:	76 31                	jbe    c001f2a9 <Vm::faultHandler(regs*)+0x62c>
c001f278:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f27c:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f280:	51                   	push   ecx
c001f281:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f285:	51                   	push   ecx
c001f286:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f28a:	51                   	push   ecx
c001f28b:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f28f:	51                   	push   ecx
c001f290:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f294:	52                   	push   edx
c001f295:	50                   	push   eax
c001f296:	50                   	push   eax
c001f297:	68 d8 c4 02 c0       	push   0xc002c4d8
c001f29c:	e8 f7 3a ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001f2a1:	83 c4 20             	add    esp,0x20
c001f2a4:	e9 fb 01 00 00       	jmp    c001f4a4 <Vm::faultHandler(regs*)+0x827>
c001f2a9:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001f2ac:	0f b7 d3             	movzx  edx,bx
c001f2af:	81 e6 00 04 00 00    	and    esi,0x400
c001f2b5:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001f2b8:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f2bd:	74 1d                	je     c001f2dc <Vm::faultHandler(regs*)+0x65f>
c001f2bf:	51                   	push   ecx
c001f2c0:	51                   	push   ecx
c001f2c1:	52                   	push   edx
c001f2c2:	50                   	push   eax
c001f2c3:	e8 64 f9 ff ff       	call   c001ec2c <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001f2c8:	83 c4 10             	add    esp,0x10
c001f2cb:	89 ea                	mov    edx,ebp
c001f2cd:	ef                   	out    dx,eax
c001f2ce:	85 f6                	test   esi,esi
c001f2d0:	74 05                	je     c001f2d7 <Vm::faultHandler(regs*)+0x65a>
c001f2d2:	83 eb 04             	sub    ebx,0x4
c001f2d5:	eb 21                	jmp    c001f2f8 <Vm::faultHandler(regs*)+0x67b>
c001f2d7:	83 c3 04             	add    ebx,0x4
c001f2da:	eb 1c                	jmp    c001f2f8 <Vm::faultHandler(regs*)+0x67b>
c001f2dc:	51                   	push   ecx
c001f2dd:	51                   	push   ecx
c001f2de:	52                   	push   edx
c001f2df:	50                   	push   eax
c001f2e0:	e8 35 f9 ff ff       	call   c001ec1a <Vm::readWordFromReal(unsigned short, unsigned short)>
c001f2e5:	83 c4 10             	add    esp,0x10
c001f2e8:	89 ea                	mov    edx,ebp
c001f2ea:	66 ef                	out    dx,ax
c001f2ec:	85 f6                	test   esi,esi
c001f2ee:	74 05                	je     c001f2f5 <Vm::faultHandler(regs*)+0x678>
c001f2f0:	83 eb 02             	sub    ebx,0x2
c001f2f3:	eb 03                	jmp    c001f2f8 <Vm::faultHandler(regs*)+0x67b>
c001f2f5:	83 c3 02             	add    ebx,0x2
c001f2f8:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001f2fe:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001f301:	e9 43 01 00 00       	jmp    c001f449 <Vm::faultHandler(regs*)+0x7cc>
c001f306:	53                   	push   ebx
c001f307:	53                   	push   ebx
c001f308:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f30c:	50                   	push   eax
c001f30d:	68 11 c5 02 c0       	push   0xc002c511
c001f312:	e8 81 3a ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001f317:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f31e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f322:	89 04 24             	mov    DWORD PTR [esp],eax
c001f325:	e8 5e f5 ff ff       	call   c001e888 <Vm::inbv(unsigned short)>
c001f32a:	0f b6 c0             	movzx  eax,al
c001f32d:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f330:	eb 5e                	jmp    c001f390 <Vm::faultHandler(regs*)+0x713>
c001f332:	51                   	push   ecx
c001f333:	51                   	push   ecx
c001f334:	53                   	push   ebx
c001f335:	68 17 c5 02 c0       	push   0xc002c517
c001f33a:	e8 59 3a ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001f33f:	83 c4 10             	add    esp,0x10
c001f342:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f347:	74 07                	je     c001f350 <Vm::faultHandler(regs*)+0x6d3>
c001f349:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f34d:	ed                   	in     eax,dx
c001f34e:	eb 14                	jmp    c001f364 <Vm::faultHandler(regs*)+0x6e7>
c001f350:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001f353:	66 31 db             	xor    bx,bx
c001f356:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001f359:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f35d:	66 ed                	in     ax,dx
c001f35f:	0f b7 c0             	movzx  eax,ax
c001f362:	09 d8                	or     eax,ebx
c001f364:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f367:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f36b:	e9 dc 00 00 00       	jmp    c001f44c <Vm::faultHandler(regs*)+0x7cf>
c001f370:	50                   	push   eax
c001f371:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f374:	53                   	push   ebx
c001f375:	68 1d c5 02 c0       	push   0xc002c51d
c001f37a:	e8 19 3a ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001f37f:	58                   	pop    eax
c001f380:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f384:	5a                   	pop    edx
c001f385:	50                   	push   eax
c001f386:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f38a:	50                   	push   eax
c001f38b:	e8 0b f5 ff ff       	call   c001e89b <Vm::outbv(unsigned short, unsigned char)>
c001f390:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f394:	e9 85 00 00 00       	jmp    c001f41e <Vm::faultHandler(regs*)+0x7a1>
c001f399:	50                   	push   eax
c001f39a:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f39d:	53                   	push   ebx
c001f39e:	68 26 c5 02 c0       	push   0xc002c526
c001f3a3:	e8 f0 39 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001f3a8:	83 c4 10             	add    esp,0x10
c001f3ab:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f3af:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f3b4:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f3b7:	74 03                	je     c001f3bc <Vm::faultHandler(regs*)+0x73f>
c001f3b9:	ef                   	out    dx,eax
c001f3ba:	eb ab                	jmp    c001f367 <Vm::faultHandler(regs*)+0x6ea>
c001f3bc:	66 ef                	out    dx,ax
c001f3be:	eb a7                	jmp    c001f367 <Vm::faultHandler(regs*)+0x6ea>
c001f3c0:	55                   	push   ebp
c001f3c1:	55                   	push   ebp
c001f3c2:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f3c5:	68 2f c5 02 c0       	push   0xc002c52f
c001f3ca:	e8 c9 39 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001f3cf:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f3d6:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f3da:	89 04 24             	mov    DWORD PTR [esp],eax
c001f3dd:	e8 a6 f4 ff ff       	call   c001e888 <Vm::inbv(unsigned short)>
c001f3e2:	0f b6 c0             	movzx  eax,al
c001f3e5:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f3e8:	eb 31                	jmp    c001f41b <Vm::faultHandler(regs*)+0x79e>
c001f3ea:	56                   	push   esi
c001f3eb:	56                   	push   esi
c001f3ec:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f3ef:	68 35 c5 02 c0       	push   0xc002c535
c001f3f4:	e8 9f 39 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001f3f9:	83 c4 10             	add    esp,0x10
c001f3fc:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f3ff:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f404:	74 03                	je     c001f409 <Vm::faultHandler(regs*)+0x78c>
c001f406:	ed                   	in     eax,dx
c001f407:	eb 0d                	jmp    c001f416 <Vm::faultHandler(regs*)+0x799>
c001f409:	66 ed                	in     ax,dx
c001f40b:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001f40e:	0f b7 c0             	movzx  eax,ax
c001f411:	66 31 d2             	xor    dx,dx
c001f414:	09 d0                	or     eax,edx
c001f416:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f419:	eb 2e                	jmp    c001f449 <Vm::faultHandler(regs*)+0x7cc>
c001f41b:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f41e:	83 c4 10             	add    esp,0x10
c001f421:	eb 29                	jmp    c001f44c <Vm::faultHandler(regs*)+0x7cf>
c001f423:	50                   	push   eax
c001f424:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f427:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f42a:	68 44 c5 02 c0       	push   0xc002c544
c001f42f:	e8 64 39 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001f434:	83 c4 10             	add    esp,0x10
c001f437:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f43a:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f43f:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f442:	74 03                	je     c001f447 <Vm::faultHandler(regs*)+0x7ca>
c001f444:	ef                   	out    dx,eax
c001f445:	eb 02                	jmp    c001f449 <Vm::faultHandler(regs*)+0x7cc>
c001f447:	66 ef                	out    dx,ax
c001f449:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f44c:	b0 01                	mov    al,0x1
c001f44e:	eb 56                	jmp    c001f4a6 <Vm::faultHandler(regs*)+0x829>
c001f450:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f454:	51                   	push   ecx
c001f455:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f459:	51                   	push   ecx
c001f45a:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f45e:	51                   	push   ecx
c001f45f:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f463:	51                   	push   ecx
c001f464:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f468:	52                   	push   edx
c001f469:	50                   	push   eax
c001f46a:	50                   	push   eax
c001f46b:	68 4d c5 02 c0       	push   0xc002c54d
c001f470:	e8 23 39 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c001f475:	83 c4 20             	add    esp,0x20
c001f478:	83 ec 0c             	sub    esp,0xc
c001f47b:	6a 60                	push   0x60
c001f47d:	e8 06 f4 ff ff       	call   c001e888 <Vm::inbv(unsigned short)>
c001f482:	83 c4 10             	add    esp,0x10
c001f485:	3c 1c                	cmp    al,0x1c
c001f487:	74 04                	je     c001f48d <Vm::faultHandler(regs*)+0x810>
c001f489:	3c 5a                	cmp    al,0x5a
c001f48b:	75 eb                	jne    c001f478 <Vm::faultHandler(regs*)+0x7fb>
c001f48d:	3c 1c                	cmp    al,0x1c
c001f48f:	74 04                	je     c001f495 <Vm::faultHandler(regs*)+0x818>
c001f491:	3c 5a                	cmp    al,0x5a
c001f493:	75 0f                	jne    c001f4a4 <Vm::faultHandler(regs*)+0x827>
c001f495:	83 ec 0c             	sub    esp,0xc
c001f498:	6a 60                	push   0x60
c001f49a:	e8 e9 f3 ff ff       	call   c001e888 <Vm::inbv(unsigned short)>
c001f49f:	83 c4 10             	add    esp,0x10
c001f4a2:	eb e9                	jmp    c001f48d <Vm::faultHandler(regs*)+0x810>
c001f4a4:	31 c0                	xor    eax,eax
c001f4a6:	83 c4 1c             	add    esp,0x1c
c001f4a9:	5b                   	pop    ebx
c001f4aa:	5e                   	pop    esi
c001f4ab:	5f                   	pop    edi
c001f4ac:	5d                   	pop    ebp
c001f4ad:	c3                   	ret    

c001f4ae <Vm::x87Save(void*)>:
c001f4ae:	83 ec 10             	sub    esp,0x10
c001f4b1:	6a 48                	push   0x48
c001f4b3:	68 20 18 03 c0       	push   0xc0031820
c001f4b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f4bc:	e8 83 12 fe ff       	call   c0000744 <memcpy>
c001f4c1:	83 c4 1c             	add    esp,0x1c
c001f4c4:	c3                   	ret    

c001f4c5 <Vm::x87Load(void*)>:
c001f4c5:	83 ec 10             	sub    esp,0x10
c001f4c8:	6a 48                	push   0x48
c001f4ca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001f4ce:	68 20 18 03 c0       	push   0xc0031820
c001f4d3:	e8 6c 12 fe ff       	call   c0000744 <memcpy>
c001f4d8:	83 c4 1c             	add    esp,0x1c
c001f4db:	c3                   	ret    

c001f4dc <Vm::fpuInternalTo32(unsigned long long)>:
c001f4dc:	57                   	push   edi
c001f4dd:	56                   	push   esi
c001f4de:	53                   	push   ebx
c001f4df:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f4e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4e7:	89 d6                	mov    esi,edx
c001f4e9:	89 d7                	mov    edi,edx
c001f4eb:	89 c1                	mov    ecx,eax
c001f4ed:	c1 ef 14             	shr    edi,0x14
c001f4f0:	89 d3                	mov    ebx,edx
c001f4f2:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f4f8:	31 d2                	xor    edx,edx
c001f4fa:	89 f8                	mov    eax,edi
c001f4fc:	81 e6 00 00 00 80    	and    esi,0x80000000
c001f502:	bf ff 00 00 00       	mov    edi,0xff
c001f507:	05 80 fc ff ff       	add    eax,0xfffffc80
c001f50c:	83 d2 ff             	adc    edx,0xffffffff
c001f50f:	39 c7                	cmp    edi,eax
c001f511:	bf 00 00 00 00       	mov    edi,0x0
c001f516:	19 d7                	sbb    edi,edx
c001f518:	72 15                	jb     c001f52f <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001f51a:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001f51e:	c1 e0 17             	shl    eax,0x17
c001f521:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001f527:	09 f1                	or     ecx,esi
c001f529:	09 c1                	or     ecx,eax
c001f52b:	89 cf                	mov    edi,ecx
c001f52d:	eb 02                	jmp    c001f531 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001f52f:	31 ff                	xor    edi,edi
c001f531:	89 f8                	mov    eax,edi
c001f533:	5b                   	pop    ebx
c001f534:	5e                   	pop    esi
c001f535:	5f                   	pop    edi
c001f536:	c3                   	ret    

c001f537 <Vm::fpuInternalTo64(unsigned long long)>:
c001f537:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f53b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f53f:	c3                   	ret    

c001f540 <Vm::fpu32ToInternal(unsigned int)>:
c001f540:	57                   	push   edi
c001f541:	31 ff                	xor    edi,edi
c001f543:	56                   	push   esi
c001f544:	53                   	push   ebx
c001f545:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f549:	89 cb                	mov    ebx,ecx
c001f54b:	89 ce                	mov    esi,ecx
c001f54d:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001f553:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001f559:	c1 e9 17             	shr    ecx,0x17
c001f55c:	89 f0                	mov    eax,esi
c001f55e:	0f b6 d1             	movzx  edx,cl
c001f561:	81 c2 80 03 00 00    	add    edx,0x380
c001f567:	89 d1                	mov    ecx,edx
c001f569:	89 fa                	mov    edx,edi
c001f56b:	c1 e1 14             	shl    ecx,0x14
c001f56e:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001f572:	c1 e0 1d             	shl    eax,0x1d
c001f575:	89 d7                	mov    edi,edx
c001f577:	89 c6                	mov    esi,eax
c001f579:	89 ca                	mov    edx,ecx
c001f57b:	89 f0                	mov    eax,esi
c001f57d:	09 fa                	or     edx,edi
c001f57f:	09 da                	or     edx,ebx
c001f581:	5b                   	pop    ebx
c001f582:	5e                   	pop    esi
c001f583:	5f                   	pop    edi
c001f584:	c3                   	ret    

c001f585 <Vm::fpu64ToInternal(unsigned long long)>:
c001f585:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f589:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f58d:	c3                   	ret    

c001f58e <Vm::fpuFloatToLong(unsigned long long)>:
c001f58e:	57                   	push   edi
c001f58f:	31 c0                	xor    eax,eax
c001f591:	56                   	push   esi
c001f592:	31 d2                	xor    edx,edx
c001f594:	53                   	push   ebx
c001f595:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f599:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f59d:	89 d9                	mov    ecx,ebx
c001f59f:	c1 e9 14             	shr    ecx,0x14
c001f5a2:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f5a8:	89 cf                	mov    edi,ecx
c001f5aa:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f5b0:	78 33                	js     c001f5e5 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f5b2:	89 d9                	mov    ecx,ebx
c001f5b4:	89 f0                	mov    eax,esi
c001f5b6:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f5bc:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f5c2:	89 ca                	mov    edx,ecx
c001f5c4:	b9 34 00 00 00       	mov    ecx,0x34
c001f5c9:	29 f9                	sub    ecx,edi
c001f5cb:	0f ad d0             	shrd   eax,edx,cl
c001f5ce:	d3 fa                	sar    edx,cl
c001f5d0:	f6 c1 20             	test   cl,0x20
c001f5d3:	74 05                	je     c001f5da <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f5d5:	89 d0                	mov    eax,edx
c001f5d7:	c1 fa 1f             	sar    edx,0x1f
c001f5da:	85 db                	test   ebx,ebx
c001f5dc:	79 07                	jns    c001f5e5 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f5de:	f7 d8                	neg    eax
c001f5e0:	83 d2 00             	adc    edx,0x0
c001f5e3:	f7 da                	neg    edx
c001f5e5:	5b                   	pop    ebx
c001f5e6:	5e                   	pop    esi
c001f5e7:	5f                   	pop    edi
c001f5e8:	c3                   	ret    

c001f5e9 <Vm::fpuULongToFloat(unsigned long long)>:
c001f5e9:	57                   	push   edi
c001f5ea:	31 c9                	xor    ecx,ecx
c001f5ec:	56                   	push   esi
c001f5ed:	53                   	push   ebx
c001f5ee:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f5f2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f5f6:	0f ba e7 14          	bt     edi,0x14
c001f5fa:	72 07                	jb     c001f603 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f5fc:	01 f6                	add    esi,esi
c001f5fe:	11 ff                	adc    edi,edi
c001f600:	41                   	inc    ecx
c001f601:	eb f3                	jmp    c001f5f6 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f603:	89 fa                	mov    edx,edi
c001f605:	89 f0                	mov    eax,esi
c001f607:	bb 33 04 00 00       	mov    ebx,0x433
c001f60c:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f612:	29 cb                	sub    ebx,ecx
c001f614:	89 d9                	mov    ecx,ebx
c001f616:	5b                   	pop    ebx
c001f617:	c1 e1 14             	shl    ecx,0x14
c001f61a:	5e                   	pop    esi
c001f61b:	09 ca                	or     edx,ecx
c001f61d:	5f                   	pop    edi
c001f61e:	c3                   	ret    

c001f61f <Vm::fpuLongToFloat(long long)>:
c001f61f:	56                   	push   esi
c001f620:	31 c0                	xor    eax,eax
c001f622:	53                   	push   ebx
c001f623:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f627:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f62b:	39 c8                	cmp    eax,ecx
c001f62d:	19 d8                	sbb    eax,ebx
c001f62f:	7d 04                	jge    c001f635 <Vm::fpuLongToFloat(long long)+0x16>
c001f631:	31 f6                	xor    esi,esi
c001f633:	eb 0c                	jmp    c001f641 <Vm::fpuLongToFloat(long long)+0x22>
c001f635:	f7 d9                	neg    ecx
c001f637:	be 01 00 00 00       	mov    esi,0x1
c001f63c:	83 d3 00             	adc    ebx,0x0
c001f63f:	f7 db                	neg    ebx
c001f641:	31 c0                	xor    eax,eax
c001f643:	0f ba e3 14          	bt     ebx,0x14
c001f647:	72 07                	jb     c001f650 <Vm::fpuLongToFloat(long long)+0x31>
c001f649:	01 c9                	add    ecx,ecx
c001f64b:	11 db                	adc    ebx,ebx
c001f64d:	40                   	inc    eax
c001f64e:	eb f3                	jmp    c001f643 <Vm::fpuLongToFloat(long long)+0x24>
c001f650:	ba 33 04 00 00       	mov    edx,0x433
c001f655:	29 c2                	sub    edx,eax
c001f657:	89 c8                	mov    eax,ecx
c001f659:	c1 e2 14             	shl    edx,0x14
c001f65c:	89 d9                	mov    ecx,ebx
c001f65e:	89 f3                	mov    ebx,esi
c001f660:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f666:	09 ca                	or     edx,ecx
c001f668:	84 db                	test   bl,bl
c001f66a:	74 06                	je     c001f672 <Vm::fpuLongToFloat(long long)+0x53>
c001f66c:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f672:	5b                   	pop    ebx
c001f673:	5e                   	pop    esi
c001f674:	c3                   	ret    

c001f675 <Vm::fpuGet0()>:
c001f675:	31 c0                	xor    eax,eax
c001f677:	31 d2                	xor    edx,edx
c001f679:	c3                   	ret    

c001f67a <Vm::fpuGet1()>:
c001f67a:	b8 01 00 00 00       	mov    eax,0x1
c001f67f:	31 d2                	xor    edx,edx
c001f681:	c3                   	ret    

c001f682 <Vm::fpuGetPi()>:
c001f682:	b8 03 00 00 00       	mov    eax,0x3
c001f687:	31 d2                	xor    edx,edx
c001f689:	c3                   	ret    

c001f68a <Vm::fpuGetLog2E()>:
c001f68a:	83 ec 18             	sub    esp,0x18
c001f68d:	68 ac c5 02 c0       	push   0xc002c5ac
c001f692:	e8 dc ad ff ff       	call   c001a473 <Krnl::panic(char const*)>
c001f697:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f69c:	31 d2                	xor    edx,edx
c001f69e:	83 c4 1c             	add    esp,0x1c
c001f6a1:	c3                   	ret    

c001f6a2 <Vm::fpuGetLogE2()>:
c001f6a2:	83 ec 18             	sub    esp,0x18
c001f6a5:	68 b8 c5 02 c0       	push   0xc002c5b8
c001f6aa:	e8 c4 ad ff ff       	call   c001a473 <Krnl::panic(char const*)>
c001f6af:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f6b4:	31 d2                	xor    edx,edx
c001f6b6:	83 c4 1c             	add    esp,0x1c
c001f6b9:	c3                   	ret    

c001f6ba <Vm::fpuGetLog210()>:
c001f6ba:	83 ec 18             	sub    esp,0x18
c001f6bd:	68 c4 c5 02 c0       	push   0xc002c5c4
c001f6c2:	e8 ac ad ff ff       	call   c001a473 <Krnl::panic(char const*)>
c001f6c7:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f6cc:	31 d2                	xor    edx,edx
c001f6ce:	83 c4 1c             	add    esp,0x1c
c001f6d1:	c3                   	ret    

c001f6d2 <Vm::fpuGetLog102()>:
c001f6d2:	83 ec 18             	sub    esp,0x18
c001f6d5:	68 d1 c5 02 c0       	push   0xc002c5d1
c001f6da:	e8 94 ad ff ff       	call   c001a473 <Krnl::panic(char const*)>
c001f6df:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f6e4:	31 d2                	xor    edx,edx
c001f6e6:	83 c4 1c             	add    esp,0x1c
c001f6e9:	c3                   	ret    

c001f6ea <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f6ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f6ee:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f6f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f6f6:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f6fa:	0f 92 c0             	setb   al
c001f6fd:	c3                   	ret    

c001f6fe <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f6fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f702:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f706:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f70a:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f70e:	09 c2                	or     edx,eax
c001f710:	0f 94 c0             	sete   al
c001f713:	c3                   	ret    

c001f714 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f714:	57                   	push   edi
c001f715:	56                   	push   esi
c001f716:	53                   	push   ebx
c001f717:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f71b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f71f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f723:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f727:	57                   	push   edi
c001f728:	56                   	push   esi
c001f729:	53                   	push   ebx
c001f72a:	51                   	push   ecx
c001f72b:	e8 ce ff ff ff       	call   c001f6fe <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f730:	83 c4 10             	add    esp,0x10
c001f733:	88 c2                	mov    dl,al
c001f735:	31 c0                	xor    eax,eax
c001f737:	84 d2                	test   dl,dl
c001f739:	75 0c                	jne    c001f747 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f73b:	57                   	push   edi
c001f73c:	56                   	push   esi
c001f73d:	53                   	push   ebx
c001f73e:	51                   	push   ecx
c001f73f:	e8 a6 ff ff ff       	call   c001f6ea <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f744:	83 c4 10             	add    esp,0x10
c001f747:	83 e0 01             	and    eax,0x1
c001f74a:	5b                   	pop    ebx
c001f74b:	88 c1                	mov    cl,al
c001f74d:	83 e2 01             	and    edx,0x1
c001f750:	a0 21 18 03 c0       	mov    al,ds:0xc0031821
c001f755:	c1 e2 06             	shl    edx,0x6
c001f758:	83 e0 ba             	and    eax,0xffffffba
c001f75b:	5e                   	pop    esi
c001f75c:	09 c8                	or     eax,ecx
c001f75e:	5f                   	pop    edi
c001f75f:	09 d0                	or     eax,edx
c001f761:	a2 21 18 03 c0       	mov    ds:0xc0031821,al
c001f766:	c3                   	ret    

c001f767 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f767:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f76b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f76f:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f773:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f777:	c3                   	ret    

c001f778 <Vm::fpuAbs(unsigned long long)>:
c001f778:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f77c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f780:	c3                   	ret    

c001f781 <Vm::fpuChs(unsigned long long)>:
c001f781:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f785:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f789:	f7 d8                	neg    eax
c001f78b:	83 d2 00             	adc    edx,0x0
c001f78e:	f7 da                	neg    edx
c001f790:	c3                   	ret    

c001f791 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f791:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f795:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f79a:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f79e:	eb c7                	jmp    c001f767 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f7a0 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f7a0:	53                   	push   ebx
c001f7a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f7a5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f7a9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f7ad:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f7b1:	0f af ca             	imul   ecx,edx
c001f7b4:	0f af d8             	imul   ebx,eax
c001f7b7:	f7 e2                	mul    edx
c001f7b9:	01 d9                	add    ecx,ebx
c001f7bb:	5b                   	pop    ebx
c001f7bc:	01 ca                	add    edx,ecx
c001f7be:	c3                   	ret    

c001f7bf <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f7bf:	83 ec 0c             	sub    esp,0xc
c001f7c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f7c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f7ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f7ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f7d2:	e8 a5 70 00 00       	call   c002687c <__udivdi3>
c001f7d7:	83 c4 1c             	add    esp,0x1c
c001f7da:	c3                   	ret    

c001f7db <Vm::fpuSquare(unsigned long long)>:
c001f7db:	50                   	push   eax
c001f7dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f7e0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f7e4:	52                   	push   edx
c001f7e5:	50                   	push   eax
c001f7e6:	52                   	push   edx
c001f7e7:	50                   	push   eax
c001f7e8:	e8 b3 ff ff ff       	call   c001f7a0 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f7ed:	83 c4 14             	add    esp,0x14
c001f7f0:	c3                   	ret    

c001f7f1 <Vm::fpuGetReg(int)>:
c001f7f1:	83 ec 0c             	sub    esp,0xc
c001f7f4:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f7f9:	76 10                	jbe    c001f80b <Vm::fpuGetReg(int)+0x1a>
c001f7fb:	83 ec 0c             	sub    esp,0xc
c001f7fe:	68 de c5 02 c0       	push   0xc002c5de
c001f803:	e8 6b ac ff ff       	call   c001a473 <Krnl::panic(char const*)>
c001f808:	83 c4 10             	add    esp,0x10
c001f80b:	a0 21 18 03 c0       	mov    al,ds:0xc0031821
c001f810:	b9 08 00 00 00       	mov    ecx,0x8
c001f815:	c0 e8 03             	shr    al,0x3
c001f818:	83 e0 07             	and    eax,0x7
c001f81b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f81f:	99                   	cdq    
c001f820:	f7 f9                	idiv   ecx
c001f822:	8b 04 d5 24 18 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffce7dc]
c001f829:	8b 14 d5 28 18 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffce7d8]
c001f830:	83 c4 0c             	add    esp,0xc
c001f833:	c3                   	ret    

c001f834 <Vm::fpuSetReg(int, unsigned long long)>:
c001f834:	57                   	push   edi
c001f835:	56                   	push   esi
c001f836:	52                   	push   edx
c001f837:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f83b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f83f:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f844:	76 10                	jbe    c001f856 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001f846:	83 ec 0c             	sub    esp,0xc
c001f849:	68 f1 c5 02 c0       	push   0xc002c5f1
c001f84e:	e8 20 ac ff ff       	call   c001a473 <Krnl::panic(char const*)>
c001f853:	83 c4 10             	add    esp,0x10
c001f856:	a0 21 18 03 c0       	mov    al,ds:0xc0031821
c001f85b:	b9 08 00 00 00       	mov    ecx,0x8
c001f860:	c0 e8 03             	shr    al,0x3
c001f863:	83 e0 07             	and    eax,0x7
c001f866:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f86a:	99                   	cdq    
c001f86b:	f7 f9                	idiv   ecx
c001f86d:	89 34 d5 24 18 03 c0 	mov    DWORD PTR [edx*8-0x3ffce7dc],esi
c001f874:	89 3c d5 28 18 03 c0 	mov    DWORD PTR [edx*8-0x3ffce7d8],edi
c001f87b:	58                   	pop    eax
c001f87c:	5e                   	pop    esi
c001f87d:	5f                   	pop    edi
c001f87e:	c3                   	ret    

c001f87f <Vm::fpuPush(unsigned long long)>:
c001f87f:	a0 21 18 03 c0       	mov    al,ds:0xc0031821
c001f884:	c0 e8 03             	shr    al,0x3
c001f887:	83 e0 07             	and    eax,0x7
c001f88a:	83 c0 07             	add    eax,0x7
c001f88d:	88 c2                	mov    dl,al
c001f88f:	83 e0 07             	and    eax,0x7
c001f892:	83 e2 07             	and    edx,0x7
c001f895:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001f89c:	8a 15 21 18 03 c0    	mov    dl,BYTE PTR ds:0xc0031821
c001f8a2:	83 e2 c7             	and    edx,0xffffffc7
c001f8a5:	09 ca                	or     edx,ecx
c001f8a7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f8ab:	88 15 21 18 03 c0    	mov    BYTE PTR ds:0xc0031821,dl
c001f8b1:	89 0c c5 28 18 03 c0 	mov    DWORD PTR [eax*8-0x3ffce7d8],ecx
c001f8b8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f8bc:	89 14 c5 24 18 03 c0 	mov    DWORD PTR [eax*8-0x3ffce7dc],edx
c001f8c3:	a1 64 18 03 c0       	mov    eax,ds:0xc0031864
c001f8c8:	83 f8 08             	cmp    eax,0x8
c001f8cb:	75 08                	jne    c001f8d5 <Vm::fpuPush(unsigned long long)+0x56>
c001f8cd:	80 0d 20 18 03 c0 40 	or     BYTE PTR ds:0xc0031820,0x40
c001f8d4:	c3                   	ret    
c001f8d5:	40                   	inc    eax
c001f8d6:	a3 64 18 03 c0       	mov    ds:0xc0031864,eax
c001f8db:	c3                   	ret    

c001f8dc <Vm::fpuPop()>:
c001f8dc:	8a 0d 21 18 03 c0    	mov    cl,BYTE PTR ds:0xc0031821
c001f8e2:	53                   	push   ebx
c001f8e3:	c0 e9 03             	shr    cl,0x3
c001f8e6:	8a 1d 21 18 03 c0    	mov    bl,BYTE PTR ds:0xc0031821
c001f8ec:	83 e1 07             	and    ecx,0x7
c001f8ef:	83 e3 c7             	and    ebx,0xffffffc7
c001f8f2:	8b 04 cd 24 18 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffce7dc]
c001f8f9:	8b 14 cd 28 18 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffce7d8]
c001f900:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001f907:	83 e1 38             	and    ecx,0x38
c001f90a:	09 d9                	or     ecx,ebx
c001f90c:	88 0d 21 18 03 c0    	mov    BYTE PTR ds:0xc0031821,cl
c001f912:	8b 0d 64 18 03 c0    	mov    ecx,DWORD PTR ds:0xc0031864
c001f918:	85 c9                	test   ecx,ecx
c001f91a:	74 09                	je     c001f925 <Vm::fpuPop()+0x49>
c001f91c:	49                   	dec    ecx
c001f91d:	89 0d 64 18 03 c0    	mov    DWORD PTR ds:0xc0031864,ecx
c001f923:	eb 07                	jmp    c001f92c <Vm::fpuPop()+0x50>
c001f925:	80 0d 20 18 03 c0 40 	or     BYTE PTR ds:0xc0031820,0x40
c001f92c:	5b                   	pop    ebx
c001f92d:	c3                   	ret    

c001f92e <Vm::x87Handler(regs*)>:
c001f92e:	55                   	push   ebp
c001f92f:	57                   	push   edi
c001f930:	56                   	push   esi
c001f931:	53                   	push   ebx
c001f932:	83 ec 1c             	sub    esp,0x1c
c001f935:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001f939:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001f93e:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001f941:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001f949:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001f94d:	50                   	push   eax
c001f94e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001f952:	50                   	push   eax
c001f953:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f957:	50                   	push   eax
c001f958:	53                   	push   ebx
c001f959:	e8 dc a1 ff ff       	call   c0019b3a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001f95e:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001f961:	83 c4 10             	add    esp,0x10
c001f964:	89 c6                	mov    esi,eax
c001f966:	80 fa d9             	cmp    dl,0xd9
c001f969:	0f 85 52 01 00 00    	jne    c001fac1 <Vm::x87Handler(regs*)+0x193>
c001f96f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f973:	8d 50 20             	lea    edx,[eax+0x20]
c001f976:	80 fa 0e             	cmp    dl,0xe
c001f979:	0f 87 86 00 00 00    	ja     c001fa05 <Vm::x87Handler(regs*)+0xd7>
c001f97f:	0f b6 d2             	movzx  edx,dl
c001f982:	ff 24 95 04 c6 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd39fc]
c001f989:	e8 e7 fc ff ff       	call   c001f675 <Vm::fpuGet0()>
c001f98e:	eb 05                	jmp    c001f995 <Vm::x87Handler(regs*)+0x67>
c001f990:	e8 e5 fc ff ff       	call   c001f67a <Vm::fpuGet1()>
c001f995:	57                   	push   edi
c001f996:	57                   	push   edi
c001f997:	52                   	push   edx
c001f998:	50                   	push   eax
c001f999:	e8 e1 fe ff ff       	call   c001f87f <Vm::fpuPush(unsigned long long)>
c001f99e:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f9a2:	83 c4 10             	add    esp,0x10
c001f9a5:	b0 01                	mov    al,0x1
c001f9a7:	e9 e3 09 00 00       	jmp    c002038f <Vm::x87Handler(regs*)+0xa61>
c001f9ac:	83 ec 0c             	sub    esp,0xc
c001f9af:	6a 00                	push   0x0
c001f9b1:	e8 3b fe ff ff       	call   c001f7f1 <Vm::fpuGetReg(int)>
c001f9b6:	59                   	pop    ecx
c001f9b7:	5e                   	pop    esi
c001f9b8:	52                   	push   edx
c001f9b9:	50                   	push   eax
c001f9ba:	e8 c2 fd ff ff       	call   c001f781 <Vm::fpuChs(unsigned long long)>
c001f9bf:	eb 13                	jmp    c001f9d4 <Vm::x87Handler(regs*)+0xa6>
c001f9c1:	83 ec 0c             	sub    esp,0xc
c001f9c4:	6a 00                	push   0x0
c001f9c6:	e8 26 fe ff ff       	call   c001f7f1 <Vm::fpuGetReg(int)>
c001f9cb:	5f                   	pop    edi
c001f9cc:	5d                   	pop    ebp
c001f9cd:	52                   	push   edx
c001f9ce:	50                   	push   eax
c001f9cf:	e8 a4 fd ff ff       	call   c001f778 <Vm::fpuAbs(unsigned long long)>
c001f9d4:	83 c4 0c             	add    esp,0xc
c001f9d7:	52                   	push   edx
c001f9d8:	50                   	push   eax
c001f9d9:	6a 00                	push   0x0
c001f9db:	e8 54 fe ff ff       	call   c001f834 <Vm::fpuSetReg(int, unsigned long long)>
c001f9e0:	eb bc                	jmp    c001f99e <Vm::x87Handler(regs*)+0x70>
c001f9e2:	e8 d3 fc ff ff       	call   c001f6ba <Vm::fpuGetLog210()>
c001f9e7:	eb ac                	jmp    c001f995 <Vm::x87Handler(regs*)+0x67>
c001f9e9:	e8 9c fc ff ff       	call   c001f68a <Vm::fpuGetLog2E()>
c001f9ee:	eb a5                	jmp    c001f995 <Vm::x87Handler(regs*)+0x67>
c001f9f0:	e8 8d fc ff ff       	call   c001f682 <Vm::fpuGetPi()>
c001f9f5:	eb 9e                	jmp    c001f995 <Vm::x87Handler(regs*)+0x67>
c001f9f7:	e8 d6 fc ff ff       	call   c001f6d2 <Vm::fpuGetLog102()>
c001f9fc:	eb 97                	jmp    c001f995 <Vm::x87Handler(regs*)+0x67>
c001f9fe:	e8 9f fc ff ff       	call   c001f6a2 <Vm::fpuGetLogE2()>
c001fa03:	eb 90                	jmp    c001f995 <Vm::x87Handler(regs*)+0x67>
c001fa05:	8d 50 40             	lea    edx,[eax+0x40]
c001fa08:	80 fa 07             	cmp    dl,0x7
c001fa0b:	77 15                	ja     c001fa22 <Vm::x87Handler(regs*)+0xf4>
c001fa0d:	83 ec 0c             	sub    esp,0xc
c001fa10:	2d c0 00 00 00       	sub    eax,0xc0
c001fa15:	50                   	push   eax
c001fa16:	e8 d6 fd ff ff       	call   c001f7f1 <Vm::fpuGetReg(int)>
c001fa1b:	59                   	pop    ecx
c001fa1c:	5e                   	pop    esi
c001fa1d:	e9 75 ff ff ff       	jmp    c001f997 <Vm::x87Handler(regs*)+0x69>
c001fa22:	8d 50 38             	lea    edx,[eax+0x38]
c001fa25:	80 fa 07             	cmp    dl,0x7
c001fa28:	77 3c                	ja     c001fa66 <Vm::x87Handler(regs*)+0x138>
c001fa2a:	83 ec 0c             	sub    esp,0xc
c001fa2d:	2d c8 00 00 00       	sub    eax,0xc8
c001fa32:	50                   	push   eax
c001fa33:	e8 b9 fd ff ff       	call   c001f7f1 <Vm::fpuGetReg(int)>
c001fa38:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fa3f:	89 c6                	mov    esi,eax
c001fa41:	89 d7                	mov    edi,edx
c001fa43:	e8 a9 fd ff ff       	call   c001f7f1 <Vm::fpuGetReg(int)>
c001fa48:	83 c4 0c             	add    esp,0xc
c001fa4b:	52                   	push   edx
c001fa4c:	50                   	push   eax
c001fa4d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fa51:	2d c8 00 00 00       	sub    eax,0xc8
c001fa56:	50                   	push   eax
c001fa57:	e8 d8 fd ff ff       	call   c001f834 <Vm::fpuSetReg(int, unsigned long long)>
c001fa5c:	83 c4 0c             	add    esp,0xc
c001fa5f:	57                   	push   edi
c001fa60:	56                   	push   esi
c001fa61:	e9 73 ff ff ff       	jmp    c001f9d9 <Vm::x87Handler(regs*)+0xab>
c001fa66:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fa6a:	84 d2                	test   dl,dl
c001fa6c:	75 0f                	jne    c001fa7d <Vm::x87Handler(regs*)+0x14f>
c001fa6e:	83 ec 0c             	sub    esp,0xc
c001fa71:	ff 36                	push   DWORD PTR [esi]
c001fa73:	e8 c8 fa ff ff       	call   c001f540 <Vm::fpu32ToInternal(unsigned int)>
c001fa78:	e9 bf 00 00 00       	jmp    c001fb3c <Vm::x87Handler(regs*)+0x20e>
c001fa7d:	80 fa 03             	cmp    dl,0x3
c001fa80:	75 13                	jne    c001fa95 <Vm::x87Handler(regs*)+0x167>
c001fa82:	e8 55 fe ff ff       	call   c001f8dc <Vm::fpuPop()>
c001fa87:	55                   	push   ebp
c001fa88:	55                   	push   ebp
c001fa89:	52                   	push   edx
c001fa8a:	50                   	push   eax
c001fa8b:	e8 4c fa ff ff       	call   c001f4dc <Vm::fpuInternalTo32(unsigned long long)>
c001fa90:	e9 88 00 00 00       	jmp    c001fb1d <Vm::x87Handler(regs*)+0x1ef>
c001fa95:	80 fa 05             	cmp    dl,0x5
c001fa98:	75 0e                	jne    c001faa8 <Vm::x87Handler(regs*)+0x17a>
c001fa9a:	66 8b 06             	mov    ax,WORD PTR [esi]
c001fa9d:	66 a3 22 18 03 c0    	mov    ds:0xc0031822,ax
c001faa3:	e9 df 00 00 00       	jmp    c001fb87 <Vm::x87Handler(regs*)+0x259>
c001faa8:	31 c0                	xor    eax,eax
c001faaa:	80 fa 07             	cmp    dl,0x7
c001faad:	0f 85 dc 08 00 00    	jne    c002038f <Vm::x87Handler(regs*)+0xa61>
c001fab3:	66 a1 22 18 03 c0    	mov    ax,ds:0xc0031822
c001fab9:	66 89 06             	mov    WORD PTR [esi],ax
c001fabc:	e9 c6 00 00 00       	jmp    c001fb87 <Vm::x87Handler(regs*)+0x259>
c001fac1:	80 fa d8             	cmp    dl,0xd8
c001fac4:	0f 84 c9 00 00 00    	je     c001fb93 <Vm::x87Handler(regs*)+0x265>
c001faca:	80 fa dc             	cmp    dl,0xdc
c001facd:	0f 84 0d 02 00 00    	je     c001fce0 <Vm::x87Handler(regs*)+0x3b2>
c001fad3:	80 fa de             	cmp    dl,0xde
c001fad6:	0f 84 cd 02 00 00    	je     c001fda9 <Vm::x87Handler(regs*)+0x47b>
c001fadc:	80 fa dd             	cmp    dl,0xdd
c001fadf:	0f 84 5f 04 00 00    	je     c001ff44 <Vm::x87Handler(regs*)+0x616>
c001fae5:	80 fa da             	cmp    dl,0xda
c001fae8:	0f 84 24 05 00 00    	je     c0020012 <Vm::x87Handler(regs*)+0x6e4>
c001faee:	80 fa df             	cmp    dl,0xdf
c001faf1:	0f 84 68 05 00 00    	je     c002005f <Vm::x87Handler(regs*)+0x731>
c001faf7:	31 c0                	xor    eax,eax
c001faf9:	80 fa db             	cmp    dl,0xdb
c001fafc:	0f 85 8d 08 00 00    	jne    c002038f <Vm::x87Handler(regs*)+0xa61>
c001fb02:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fb06:	80 fa 03             	cmp    dl,0x3
c001fb09:	0f 85 70 06 00 00    	jne    c002017f <Vm::x87Handler(regs*)+0x851>
c001fb0f:	e8 c8 fd ff ff       	call   c001f8dc <Vm::fpuPop()>
c001fb14:	55                   	push   ebp
c001fb15:	55                   	push   ebp
c001fb16:	52                   	push   edx
c001fb17:	50                   	push   eax
c001fb18:	e8 71 fa ff ff       	call   c001f58e <Vm::fpuFloatToLong(unsigned long long)>
c001fb1d:	83 c4 10             	add    esp,0x10
c001fb20:	89 06                	mov    DWORD PTR [esi],eax
c001fb22:	eb 63                	jmp    c001fb87 <Vm::x87Handler(regs*)+0x259>
c001fb24:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fb28:	84 d2                	test   dl,dl
c001fb2a:	0f 85 e6 05 00 00    	jne    c0020116 <Vm::x87Handler(regs*)+0x7e8>
c001fb30:	57                   	push   edi
c001fb31:	57                   	push   edi
c001fb32:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fb35:	ff 36                	push   DWORD PTR [esi]
c001fb37:	e8 49 fa ff ff       	call   c001f585 <Vm::fpu64ToInternal(unsigned long long)>
c001fb3c:	5e                   	pop    esi
c001fb3d:	5f                   	pop    edi
c001fb3e:	52                   	push   edx
c001fb3f:	50                   	push   eax
c001fb40:	e8 3a fd ff ff       	call   c001f87f <Vm::fpuPush(unsigned long long)>
c001fb45:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fb49:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fb4c:	e9 51 fe ff ff       	jmp    c001f9a2 <Vm::x87Handler(regs*)+0x74>
c001fb51:	80 fa 03             	cmp    dl,0x3
c001fb54:	0f 85 d7 06 00 00    	jne    c0020231 <Vm::x87Handler(regs*)+0x903>
c001fb5a:	57                   	push   edi
c001fb5b:	57                   	push   edi
c001fb5c:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fb5f:	ff 36                	push   DWORD PTR [esi]
c001fb61:	e8 1f fa ff ff       	call   c001f585 <Vm::fpu64ToInternal(unsigned long long)>
c001fb66:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fb6d:	89 c6                	mov    esi,eax
c001fb6f:	89 d7                	mov    edi,edx
c001fb71:	e8 7b fc ff ff       	call   c001f7f1 <Vm::fpuGetReg(int)>
c001fb76:	57                   	push   edi
c001fb77:	56                   	push   esi
c001fb78:	52                   	push   edx
c001fb79:	50                   	push   eax
c001fb7a:	e8 95 fb ff ff       	call   c001f714 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fb7f:	83 c4 20             	add    esp,0x20
c001fb82:	e8 55 fd ff ff       	call   c001f8dc <Vm::fpuPop()>
c001fb87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fb8b:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fb8e:	e9 12 fe ff ff       	jmp    c001f9a5 <Vm::x87Handler(regs*)+0x77>
c001fb93:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb97:	8d 50 40             	lea    edx,[eax+0x40]
c001fb9a:	80 fa 07             	cmp    dl,0x7
c001fb9d:	77 29                	ja     c001fbc8 <Vm::x87Handler(regs*)+0x29a>
c001fb9f:	83 ec 0c             	sub    esp,0xc
c001fba2:	2d c0 00 00 00       	sub    eax,0xc0
c001fba7:	50                   	push   eax
c001fba8:	e8 44 fc ff ff       	call   c001f7f1 <Vm::fpuGetReg(int)>
c001fbad:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fbb4:	89 c6                	mov    esi,eax
c001fbb6:	89 d7                	mov    edi,edx
c001fbb8:	e8 34 fc ff ff       	call   c001f7f1 <Vm::fpuGetReg(int)>
c001fbbd:	57                   	push   edi
c001fbbe:	56                   	push   esi
c001fbbf:	52                   	push   edx
c001fbc0:	50                   	push   eax
c001fbc1:	e8 a1 fb ff ff       	call   c001f767 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fbc6:	eb 2f                	jmp    c001fbf7 <Vm::x87Handler(regs*)+0x2c9>
c001fbc8:	8d 50 38             	lea    edx,[eax+0x38]
c001fbcb:	80 fa 07             	cmp    dl,0x7
c001fbce:	77 2f                	ja     c001fbff <Vm::x87Handler(regs*)+0x2d1>
c001fbd0:	83 ec 0c             	sub    esp,0xc
c001fbd3:	2d c8 00 00 00       	sub    eax,0xc8
c001fbd8:	50                   	push   eax
c001fbd9:	e8 13 fc ff ff       	call   c001f7f1 <Vm::fpuGetReg(int)>
c001fbde:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fbe5:	89 c6                	mov    esi,eax
c001fbe7:	89 d7                	mov    edi,edx
c001fbe9:	e8 03 fc ff ff       	call   c001f7f1 <Vm::fpuGetReg(int)>
c001fbee:	57                   	push   edi
c001fbef:	56                   	push   esi
c001fbf0:	52                   	push   edx
c001fbf1:	50                   	push   eax
c001fbf2:	e8 a9 fb ff ff       	call   c001f7a0 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fbf7:	83 c4 1c             	add    esp,0x1c
c001fbfa:	e9 d8 fd ff ff       	jmp    c001f9d7 <Vm::x87Handler(regs*)+0xa9>
c001fbff:	8d 50 30             	lea    edx,[eax+0x30]
c001fc02:	80 fa 07             	cmp    dl,0x7
c001fc05:	77 0d                	ja     c001fc14 <Vm::x87Handler(regs*)+0x2e6>
c001fc07:	83 ec 0c             	sub    esp,0xc
c001fc0a:	2d d0 00 00 00       	sub    eax,0xd0
c001fc0f:	e9 99 03 00 00       	jmp    c001ffad <Vm::x87Handler(regs*)+0x67f>
c001fc14:	8d 50 28             	lea    edx,[eax+0x28]
c001fc17:	80 fa 07             	cmp    dl,0x7
c001fc1a:	77 0d                	ja     c001fc29 <Vm::x87Handler(regs*)+0x2fb>
c001fc1c:	83 ec 0c             	sub    esp,0xc
c001fc1f:	2d d8 00 00 00       	sub    eax,0xd8
c001fc24:	e9 c0 03 00 00       	jmp    c001ffe9 <Vm::x87Handler(regs*)+0x6bb>
c001fc29:	8d 50 20             	lea    edx,[eax+0x20]
c001fc2c:	80 fa 07             	cmp    dl,0x7
c001fc2f:	77 1b                	ja     c001fc4c <Vm::x87Handler(regs*)+0x31e>
c001fc31:	83 ec 0c             	sub    esp,0xc
c001fc34:	2d e0 00 00 00       	sub    eax,0xe0
c001fc39:	50                   	push   eax
c001fc3a:	e8 b2 fb ff ff       	call   c001f7f1 <Vm::fpuGetReg(int)>
c001fc3f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc46:	89 c6                	mov    esi,eax
c001fc48:	89 d7                	mov    edi,edx
c001fc4a:	eb 22                	jmp    c001fc6e <Vm::x87Handler(regs*)+0x340>
c001fc4c:	8d 50 18             	lea    edx,[eax+0x18]
c001fc4f:	80 fa 07             	cmp    dl,0x7
c001fc52:	77 2d                	ja     c001fc81 <Vm::x87Handler(regs*)+0x353>
c001fc54:	83 ec 0c             	sub    esp,0xc
c001fc57:	6a 00                	push   0x0
c001fc59:	e8 93 fb ff ff       	call   c001f7f1 <Vm::fpuGetReg(int)>
c001fc5e:	89 c6                	mov    esi,eax
c001fc60:	89 d7                	mov    edi,edx
c001fc62:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fc66:	2d e8 00 00 00       	sub    eax,0xe8
c001fc6b:	89 04 24             	mov    DWORD PTR [esp],eax
c001fc6e:	e8 7e fb ff ff       	call   c001f7f1 <Vm::fpuGetReg(int)>
c001fc73:	57                   	push   edi
c001fc74:	56                   	push   esi
c001fc75:	52                   	push   edx
c001fc76:	50                   	push   eax
c001fc77:	e8 15 fb ff ff       	call   c001f791 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fc7c:	e9 76 ff ff ff       	jmp    c001fbf7 <Vm::x87Handler(regs*)+0x2c9>
c001fc81:	8d 50 10             	lea    edx,[eax+0x10]
c001fc84:	80 fa 07             	cmp    dl,0x7
c001fc87:	77 1b                	ja     c001fca4 <Vm::x87Handler(regs*)+0x376>
c001fc89:	83 ec 0c             	sub    esp,0xc
c001fc8c:	2d f0 00 00 00       	sub    eax,0xf0
c001fc91:	50                   	push   eax
c001fc92:	e8 5a fb ff ff       	call   c001f7f1 <Vm::fpuGetReg(int)>
c001fc97:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc9e:	89 c6                	mov    esi,eax
c001fca0:	89 d7                	mov    edi,edx
c001fca2:	eb 22                	jmp    c001fcc6 <Vm::x87Handler(regs*)+0x398>
c001fca4:	3c f7                	cmp    al,0xf7
c001fca6:	0f 86 d1 03 00 00    	jbe    c002007d <Vm::x87Handler(regs*)+0x74f>
c001fcac:	83 ec 0c             	sub    esp,0xc
c001fcaf:	6a 00                	push   0x0
c001fcb1:	e8 3b fb ff ff       	call   c001f7f1 <Vm::fpuGetReg(int)>
c001fcb6:	89 c6                	mov    esi,eax
c001fcb8:	89 d7                	mov    edi,edx
c001fcba:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fcbe:	2d f8 00 00 00       	sub    eax,0xf8
c001fcc3:	89 04 24             	mov    DWORD PTR [esp],eax
c001fcc6:	e8 26 fb ff ff       	call   c001f7f1 <Vm::fpuGetReg(int)>
c001fccb:	57                   	push   edi
c001fccc:	56                   	push   esi
c001fccd:	52                   	push   edx
c001fcce:	50                   	push   eax
c001fccf:	e8 eb fa ff ff       	call   c001f7bf <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fcd4:	83 c4 1c             	add    esp,0x1c
c001fcd7:	52                   	push   edx
c001fcd8:	50                   	push   eax
c001fcd9:	6a 00                	push   0x0
c001fcdb:	e9 51 02 00 00       	jmp    c001ff31 <Vm::x87Handler(regs*)+0x603>
c001fce0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fce4:	8d 50 40             	lea    edx,[eax+0x40]
c001fce7:	80 fa 07             	cmp    dl,0x7
c001fcea:	77 37                	ja     c001fd23 <Vm::x87Handler(regs*)+0x3f5>
c001fcec:	83 ec 0c             	sub    esp,0xc
c001fcef:	2d c0 00 00 00       	sub    eax,0xc0
c001fcf4:	50                   	push   eax
c001fcf5:	e8 f7 fa ff ff       	call   c001f7f1 <Vm::fpuGetReg(int)>
c001fcfa:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd01:	89 c6                	mov    esi,eax
c001fd03:	89 d7                	mov    edi,edx
c001fd05:	e8 e7 fa ff ff       	call   c001f7f1 <Vm::fpuGetReg(int)>
c001fd0a:	57                   	push   edi
c001fd0b:	56                   	push   esi
c001fd0c:	52                   	push   edx
c001fd0d:	50                   	push   eax
c001fd0e:	e8 54 fa ff ff       	call   c001f767 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fd13:	83 c4 1c             	add    esp,0x1c
c001fd16:	52                   	push   edx
c001fd17:	50                   	push   eax
c001fd18:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd1c:	2d c0 00 00 00       	sub    eax,0xc0
c001fd21:	eb 3d                	jmp    c001fd60 <Vm::x87Handler(regs*)+0x432>
c001fd23:	8d 50 38             	lea    edx,[eax+0x38]
c001fd26:	80 fa 07             	cmp    dl,0x7
c001fd29:	77 3b                	ja     c001fd66 <Vm::x87Handler(regs*)+0x438>
c001fd2b:	83 ec 0c             	sub    esp,0xc
c001fd2e:	2d c8 00 00 00       	sub    eax,0xc8
c001fd33:	50                   	push   eax
c001fd34:	e8 b8 fa ff ff       	call   c001f7f1 <Vm::fpuGetReg(int)>
c001fd39:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd40:	89 c6                	mov    esi,eax
c001fd42:	89 d7                	mov    edi,edx
c001fd44:	e8 a8 fa ff ff       	call   c001f7f1 <Vm::fpuGetReg(int)>
c001fd49:	57                   	push   edi
c001fd4a:	56                   	push   esi
c001fd4b:	52                   	push   edx
c001fd4c:	50                   	push   eax
c001fd4d:	e8 4e fa ff ff       	call   c001f7a0 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fd52:	83 c4 1c             	add    esp,0x1c
c001fd55:	52                   	push   edx
c001fd56:	50                   	push   eax
c001fd57:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd5b:	2d c8 00 00 00       	sub    eax,0xc8
c001fd60:	50                   	push   eax
c001fd61:	e9 75 fc ff ff       	jmp    c001f9db <Vm::x87Handler(regs*)+0xad>
c001fd66:	83 c0 18             	add    eax,0x18
c001fd69:	3c 07                	cmp    al,0x7
c001fd6b:	0f 87 3b 04 00 00    	ja     c00201ac <Vm::x87Handler(regs*)+0x87e>
c001fd71:	83 ec 0c             	sub    esp,0xc
c001fd74:	6a 00                	push   0x0
c001fd76:	e8 76 fa ff ff       	call   c001f7f1 <Vm::fpuGetReg(int)>
c001fd7b:	89 c6                	mov    esi,eax
c001fd7d:	89 d7                	mov    edi,edx
c001fd7f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd83:	2d e8 00 00 00       	sub    eax,0xe8
c001fd88:	89 04 24             	mov    DWORD PTR [esp],eax
c001fd8b:	e8 61 fa ff ff       	call   c001f7f1 <Vm::fpuGetReg(int)>
c001fd90:	57                   	push   edi
c001fd91:	56                   	push   esi
c001fd92:	52                   	push   edx
c001fd93:	50                   	push   eax
c001fd94:	e8 f8 f9 ff ff       	call   c001f791 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fd99:	83 c4 1c             	add    esp,0x1c
c001fd9c:	52                   	push   edx
c001fd9d:	50                   	push   eax
c001fd9e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fda2:	2d e8 00 00 00       	sub    eax,0xe8
c001fda7:	eb b7                	jmp    c001fd60 <Vm::x87Handler(regs*)+0x432>
c001fda9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fdad:	8d 50 40             	lea    edx,[eax+0x40]
c001fdb0:	80 fa 07             	cmp    dl,0x7
c001fdb3:	77 3a                	ja     c001fdef <Vm::x87Handler(regs*)+0x4c1>
c001fdb5:	83 ec 0c             	sub    esp,0xc
c001fdb8:	2d c0 00 00 00       	sub    eax,0xc0
c001fdbd:	50                   	push   eax
c001fdbe:	e8 2e fa ff ff       	call   c001f7f1 <Vm::fpuGetReg(int)>
c001fdc3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fdca:	89 c6                	mov    esi,eax
c001fdcc:	89 d7                	mov    edi,edx
c001fdce:	e8 1e fa ff ff       	call   c001f7f1 <Vm::fpuGetReg(int)>
c001fdd3:	57                   	push   edi
c001fdd4:	56                   	push   esi
c001fdd5:	52                   	push   edx
c001fdd6:	50                   	push   eax
c001fdd7:	e8 8b f9 ff ff       	call   c001f767 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fddc:	83 c4 1c             	add    esp,0x1c
c001fddf:	52                   	push   edx
c001fde0:	50                   	push   eax
c001fde1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fde5:	2d c0 00 00 00       	sub    eax,0xc0
c001fdea:	e9 9e 01 00 00       	jmp    c001ff8d <Vm::x87Handler(regs*)+0x65f>
c001fdef:	8d 50 20             	lea    edx,[eax+0x20]
c001fdf2:	80 fa 07             	cmp    dl,0x7
c001fdf5:	77 3a                	ja     c001fe31 <Vm::x87Handler(regs*)+0x503>
c001fdf7:	83 ec 0c             	sub    esp,0xc
c001fdfa:	2d e0 00 00 00       	sub    eax,0xe0
c001fdff:	50                   	push   eax
c001fe00:	e8 ec f9 ff ff       	call   c001f7f1 <Vm::fpuGetReg(int)>
c001fe05:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe0c:	89 c6                	mov    esi,eax
c001fe0e:	89 d7                	mov    edi,edx
c001fe10:	e8 dc f9 ff ff       	call   c001f7f1 <Vm::fpuGetReg(int)>
c001fe15:	57                   	push   edi
c001fe16:	56                   	push   esi
c001fe17:	52                   	push   edx
c001fe18:	50                   	push   eax
c001fe19:	e8 73 f9 ff ff       	call   c001f791 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fe1e:	83 c4 1c             	add    esp,0x1c
c001fe21:	52                   	push   edx
c001fe22:	50                   	push   eax
c001fe23:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe27:	2d e0 00 00 00       	sub    eax,0xe0
c001fe2c:	e9 5c 01 00 00       	jmp    c001ff8d <Vm::x87Handler(regs*)+0x65f>
c001fe31:	8d 50 18             	lea    edx,[eax+0x18]
c001fe34:	80 fa 07             	cmp    dl,0x7
c001fe37:	77 3b                	ja     c001fe74 <Vm::x87Handler(regs*)+0x546>
c001fe39:	83 ec 0c             	sub    esp,0xc
c001fe3c:	6a 00                	push   0x0
c001fe3e:	e8 ae f9 ff ff       	call   c001f7f1 <Vm::fpuGetReg(int)>
c001fe43:	89 c6                	mov    esi,eax
c001fe45:	89 d7                	mov    edi,edx
c001fe47:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe4b:	2d e8 00 00 00       	sub    eax,0xe8
c001fe50:	89 04 24             	mov    DWORD PTR [esp],eax
c001fe53:	e8 99 f9 ff ff       	call   c001f7f1 <Vm::fpuGetReg(int)>
c001fe58:	57                   	push   edi
c001fe59:	56                   	push   esi
c001fe5a:	52                   	push   edx
c001fe5b:	50                   	push   eax
c001fe5c:	e8 30 f9 ff ff       	call   c001f791 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fe61:	83 c4 1c             	add    esp,0x1c
c001fe64:	52                   	push   edx
c001fe65:	50                   	push   eax
c001fe66:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe6a:	2d e8 00 00 00       	sub    eax,0xe8
c001fe6f:	e9 19 01 00 00       	jmp    c001ff8d <Vm::x87Handler(regs*)+0x65f>
c001fe74:	8d 50 38             	lea    edx,[eax+0x38]
c001fe77:	80 fa 07             	cmp    dl,0x7
c001fe7a:	77 37                	ja     c001feb3 <Vm::x87Handler(regs*)+0x585>
c001fe7c:	83 ec 0c             	sub    esp,0xc
c001fe7f:	2d c8 00 00 00       	sub    eax,0xc8
c001fe84:	50                   	push   eax
c001fe85:	e8 67 f9 ff ff       	call   c001f7f1 <Vm::fpuGetReg(int)>
c001fe8a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe91:	89 c6                	mov    esi,eax
c001fe93:	89 d7                	mov    edi,edx
c001fe95:	e8 57 f9 ff ff       	call   c001f7f1 <Vm::fpuGetReg(int)>
c001fe9a:	57                   	push   edi
c001fe9b:	56                   	push   esi
c001fe9c:	52                   	push   edx
c001fe9d:	50                   	push   eax
c001fe9e:	e8 fd f8 ff ff       	call   c001f7a0 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fea3:	83 c4 1c             	add    esp,0x1c
c001fea6:	52                   	push   edx
c001fea7:	50                   	push   eax
c001fea8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001feac:	2d c8 00 00 00       	sub    eax,0xc8
c001feb1:	eb 7d                	jmp    c001ff30 <Vm::x87Handler(regs*)+0x602>
c001feb3:	3c f7                	cmp    al,0xf7
c001feb5:	76 38                	jbe    c001feef <Vm::x87Handler(regs*)+0x5c1>
c001feb7:	83 ec 0c             	sub    esp,0xc
c001feba:	6a 00                	push   0x0
c001febc:	e8 30 f9 ff ff       	call   c001f7f1 <Vm::fpuGetReg(int)>
c001fec1:	89 c6                	mov    esi,eax
c001fec3:	89 d7                	mov    edi,edx
c001fec5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fec9:	2d f8 00 00 00       	sub    eax,0xf8
c001fece:	89 04 24             	mov    DWORD PTR [esp],eax
c001fed1:	e8 1b f9 ff ff       	call   c001f7f1 <Vm::fpuGetReg(int)>
c001fed6:	57                   	push   edi
c001fed7:	56                   	push   esi
c001fed8:	52                   	push   edx
c001fed9:	50                   	push   eax
c001feda:	e8 e0 f8 ff ff       	call   c001f7bf <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fedf:	83 c4 1c             	add    esp,0x1c
c001fee2:	52                   	push   edx
c001fee3:	50                   	push   eax
c001fee4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fee8:	2d f8 00 00 00       	sub    eax,0xf8
c001feed:	eb 41                	jmp    c001ff30 <Vm::x87Handler(regs*)+0x602>
c001feef:	8d 50 10             	lea    edx,[eax+0x10]
c001fef2:	80 fa 07             	cmp    dl,0x7
c001fef5:	0f 87 5a 01 00 00    	ja     c0020055 <Vm::x87Handler(regs*)+0x727>
c001fefb:	83 ec 0c             	sub    esp,0xc
c001fefe:	2d f0 00 00 00       	sub    eax,0xf0
c001ff03:	50                   	push   eax
c001ff04:	e8 e8 f8 ff ff       	call   c001f7f1 <Vm::fpuGetReg(int)>
c001ff09:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff10:	89 c6                	mov    esi,eax
c001ff12:	89 d7                	mov    edi,edx
c001ff14:	e8 d8 f8 ff ff       	call   c001f7f1 <Vm::fpuGetReg(int)>
c001ff19:	57                   	push   edi
c001ff1a:	56                   	push   esi
c001ff1b:	52                   	push   edx
c001ff1c:	50                   	push   eax
c001ff1d:	e8 9d f8 ff ff       	call   c001f7bf <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001ff22:	83 c4 1c             	add    esp,0x1c
c001ff25:	52                   	push   edx
c001ff26:	50                   	push   eax
c001ff27:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff2b:	2d f0 00 00 00       	sub    eax,0xf0
c001ff30:	50                   	push   eax
c001ff31:	e8 fe f8 ff ff       	call   c001f834 <Vm::fpuSetReg(int, unsigned long long)>
c001ff36:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ff3a:	e8 9d f9 ff ff       	call   c001f8dc <Vm::fpuPop()>
c001ff3f:	e9 5e fa ff ff       	jmp    c001f9a2 <Vm::x87Handler(regs*)+0x74>
c001ff44:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff48:	8d 50 30             	lea    edx,[eax+0x30]
c001ff4b:	80 fa 07             	cmp    dl,0x7
c001ff4e:	77 1d                	ja     c001ff6d <Vm::x87Handler(regs*)+0x63f>
c001ff50:	83 ec 0c             	sub    esp,0xc
c001ff53:	6a 00                	push   0x0
c001ff55:	e8 97 f8 ff ff       	call   c001f7f1 <Vm::fpuGetReg(int)>
c001ff5a:	83 c4 0c             	add    esp,0xc
c001ff5d:	52                   	push   edx
c001ff5e:	50                   	push   eax
c001ff5f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff63:	2d d0 00 00 00       	sub    eax,0xd0
c001ff68:	e9 f3 fd ff ff       	jmp    c001fd60 <Vm::x87Handler(regs*)+0x432>
c001ff6d:	8d 50 28             	lea    edx,[eax+0x28]
c001ff70:	80 fa 07             	cmp    dl,0x7
c001ff73:	77 28                	ja     c001ff9d <Vm::x87Handler(regs*)+0x66f>
c001ff75:	83 ec 0c             	sub    esp,0xc
c001ff78:	6a 00                	push   0x0
c001ff7a:	e8 72 f8 ff ff       	call   c001f7f1 <Vm::fpuGetReg(int)>
c001ff7f:	83 c4 0c             	add    esp,0xc
c001ff82:	52                   	push   edx
c001ff83:	50                   	push   eax
c001ff84:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff88:	2d d8 00 00 00       	sub    eax,0xd8
c001ff8d:	50                   	push   eax
c001ff8e:	e8 a1 f8 ff ff       	call   c001f834 <Vm::fpuSetReg(int, unsigned long long)>
c001ff93:	e8 44 f9 ff ff       	call   c001f8dc <Vm::fpuPop()>
c001ff98:	e9 01 fa ff ff       	jmp    c001f99e <Vm::x87Handler(regs*)+0x70>
c001ff9d:	8d 50 20             	lea    edx,[eax+0x20]
c001ffa0:	80 fa 07             	cmp    dl,0x7
c001ffa3:	77 30                	ja     c001ffd5 <Vm::x87Handler(regs*)+0x6a7>
c001ffa5:	83 ec 0c             	sub    esp,0xc
c001ffa8:	2d e0 00 00 00       	sub    eax,0xe0
c001ffad:	50                   	push   eax
c001ffae:	e8 3e f8 ff ff       	call   c001f7f1 <Vm::fpuGetReg(int)>
c001ffb3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ffba:	89 c6                	mov    esi,eax
c001ffbc:	89 d7                	mov    edi,edx
c001ffbe:	e8 2e f8 ff ff       	call   c001f7f1 <Vm::fpuGetReg(int)>
c001ffc3:	57                   	push   edi
c001ffc4:	56                   	push   esi
c001ffc5:	52                   	push   edx
c001ffc6:	50                   	push   eax
c001ffc7:	e8 48 f7 ff ff       	call   c001f714 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001ffcc:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ffd0:	e9 54 02 00 00       	jmp    c0020229 <Vm::x87Handler(regs*)+0x8fb>
c001ffd5:	8d 50 18             	lea    edx,[eax+0x18]
c001ffd8:	80 fa 07             	cmp    dl,0x7
c001ffdb:	0f 87 43 fb ff ff    	ja     c001fb24 <Vm::x87Handler(regs*)+0x1f6>
c001ffe1:	83 ec 0c             	sub    esp,0xc
c001ffe4:	2d e8 00 00 00       	sub    eax,0xe8
c001ffe9:	50                   	push   eax
c001ffea:	e8 02 f8 ff ff       	call   c001f7f1 <Vm::fpuGetReg(int)>
c001ffef:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fff6:	89 c6                	mov    esi,eax
c001fff8:	89 d7                	mov    edi,edx
c001fffa:	e8 f2 f7 ff ff       	call   c001f7f1 <Vm::fpuGetReg(int)>
c001ffff:	57                   	push   edi
c0020000:	56                   	push   esi
c0020001:	52                   	push   edx
c0020002:	50                   	push   eax
c0020003:	e8 0c f7 ff ff       	call   c001f714 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020008:	83 c4 20             	add    esp,0x20
c002000b:	e8 cc f8 ff ff       	call   c001f8dc <Vm::fpuPop()>
c0020010:	eb 62                	jmp    c0020074 <Vm::x87Handler(regs*)+0x746>
c0020012:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c0020016:	0f 85 0f 01 00 00    	jne    c002012b <Vm::x87Handler(regs*)+0x7fd>
c002001c:	83 ec 0c             	sub    esp,0xc
c002001f:	6a 01                	push   0x1
c0020021:	e8 cb f7 ff ff       	call   c001f7f1 <Vm::fpuGetReg(int)>
c0020026:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002002d:	89 c6                	mov    esi,eax
c002002f:	89 d7                	mov    edi,edx
c0020031:	e8 bb f7 ff ff       	call   c001f7f1 <Vm::fpuGetReg(int)>
c0020036:	57                   	push   edi
c0020037:	56                   	push   esi
c0020038:	52                   	push   edx
c0020039:	50                   	push   eax
c002003a:	e8 d5 f6 ff ff       	call   c001f714 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002003f:	83 c4 20             	add    esp,0x20
c0020042:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020046:	e8 91 f8 ff ff       	call   c001f8dc <Vm::fpuPop()>
c002004b:	e8 8c f8 ff ff       	call   c001f8dc <Vm::fpuPop()>
c0020050:	e9 50 f9 ff ff       	jmp    c001f9a5 <Vm::x87Handler(regs*)+0x77>
c0020055:	3c d9                	cmp    al,0xd9
c0020057:	0f 85 b5 02 00 00    	jne    c0020312 <Vm::x87Handler(regs*)+0x9e4>
c002005d:	eb bd                	jmp    c002001c <Vm::x87Handler(regs*)+0x6ee>
c002005f:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c0020063:	0f 85 ea 02 00 00    	jne    c0020353 <Vm::x87Handler(regs*)+0xa25>
c0020069:	0f b7 05 20 18 03 c0 	movzx  eax,WORD PTR ds:0xc0031820
c0020070:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c0020074:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020078:	e9 28 f9 ff ff       	jmp    c001f9a5 <Vm::x87Handler(regs*)+0x77>
c002007d:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020081:	84 d2                	test   dl,dl
c0020083:	75 0f                	jne    c0020094 <Vm::x87Handler(regs*)+0x766>
c0020085:	83 ec 0c             	sub    esp,0xc
c0020088:	ff 36                	push   DWORD PTR [esi]
c002008a:	e8 b1 f4 ff ff       	call   c001f540 <Vm::fpu32ToInternal(unsigned int)>
c002008f:	e9 2c 01 00 00       	jmp    c00201c0 <Vm::x87Handler(regs*)+0x892>
c0020094:	80 fa 01             	cmp    dl,0x1
c0020097:	75 0f                	jne    c00200a8 <Vm::x87Handler(regs*)+0x77a>
c0020099:	83 ec 0c             	sub    esp,0xc
c002009c:	ff 36                	push   DWORD PTR [esi]
c002009e:	e8 9d f4 ff ff       	call   c001f540 <Vm::fpu32ToInternal(unsigned int)>
c00200a3:	e9 81 02 00 00       	jmp    c0020329 <Vm::x87Handler(regs*)+0x9fb>
c00200a8:	80 fa 04             	cmp    dl,0x4
c00200ab:	75 0f                	jne    c00200bc <Vm::x87Handler(regs*)+0x78e>
c00200ad:	83 ec 0c             	sub    esp,0xc
c00200b0:	ff 36                	push   DWORD PTR [esi]
c00200b2:	e8 89 f4 ff ff       	call   c001f540 <Vm::fpu32ToInternal(unsigned int)>
c00200b7:	e9 86 01 00 00       	jmp    c0020242 <Vm::x87Handler(regs*)+0x914>
c00200bc:	80 fa 05             	cmp    dl,0x5
c00200bf:	75 1b                	jne    c00200dc <Vm::x87Handler(regs*)+0x7ae>
c00200c1:	83 ec 0c             	sub    esp,0xc
c00200c4:	6a 00                	push   0x0
c00200c6:	e8 26 f7 ff ff       	call   c001f7f1 <Vm::fpuGetReg(int)>
c00200cb:	89 c7                	mov    edi,eax
c00200cd:	89 d5                	mov    ebp,edx
c00200cf:	58                   	pop    eax
c00200d0:	ff 36                	push   DWORD PTR [esi]
c00200d2:	e8 69 f4 ff ff       	call   c001f540 <Vm::fpu32ToInternal(unsigned int)>
c00200d7:	e9 a3 01 00 00       	jmp    c002027f <Vm::x87Handler(regs*)+0x951>
c00200dc:	80 fa 06             	cmp    dl,0x6
c00200df:	75 0f                	jne    c00200f0 <Vm::x87Handler(regs*)+0x7c2>
c00200e1:	83 ec 0c             	sub    esp,0xc
c00200e4:	ff 36                	push   DWORD PTR [esi]
c00200e6:	e8 55 f4 ff ff       	call   c001f540 <Vm::fpu32ToInternal(unsigned int)>
c00200eb:	e9 ae 01 00 00       	jmp    c002029e <Vm::x87Handler(regs*)+0x970>
c00200f0:	31 c0                	xor    eax,eax
c00200f2:	80 fa 07             	cmp    dl,0x7
c00200f5:	0f 85 94 02 00 00    	jne    c002038f <Vm::x87Handler(regs*)+0xa61>
c00200fb:	83 ec 0c             	sub    esp,0xc
c00200fe:	6a 00                	push   0x0
c0020100:	e8 ec f6 ff ff       	call   c001f7f1 <Vm::fpuGetReg(int)>
c0020105:	89 c7                	mov    edi,eax
c0020107:	89 d5                	mov    ebp,edx
c0020109:	58                   	pop    eax
c002010a:	ff 36                	push   DWORD PTR [esi]
c002010c:	e8 2f f4 ff ff       	call   c001f540 <Vm::fpu32ToInternal(unsigned int)>
c0020111:	e9 cb 01 00 00       	jmp    c00202e1 <Vm::x87Handler(regs*)+0x9b3>
c0020116:	80 fa 03             	cmp    dl,0x3
c0020119:	0f 85 d3 01 00 00    	jne    c00202f2 <Vm::x87Handler(regs*)+0x9c4>
c002011f:	e8 b8 f7 ff ff       	call   c001f8dc <Vm::fpuPop()>
c0020124:	51                   	push   ecx
c0020125:	51                   	push   ecx
c0020126:	e9 de 01 00 00       	jmp    c0020309 <Vm::x87Handler(regs*)+0x9db>
c002012b:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002012f:	80 fa 01             	cmp    dl,0x1
c0020132:	75 09                	jne    c002013d <Vm::x87Handler(regs*)+0x80f>
c0020134:	57                   	push   edi
c0020135:	57                   	push   edi
c0020136:	8b 06                	mov    eax,DWORD PTR [esi]
c0020138:	e9 e3 01 00 00       	jmp    c0020320 <Vm::x87Handler(regs*)+0x9f2>
c002013d:	80 fa 04             	cmp    dl,0x4
c0020140:	75 12                	jne    c0020154 <Vm::x87Handler(regs*)+0x826>
c0020142:	31 d2                	xor    edx,edx
c0020144:	51                   	push   ecx
c0020145:	51                   	push   ecx
c0020146:	8b 06                	mov    eax,DWORD PTR [esi]
c0020148:	52                   	push   edx
c0020149:	50                   	push   eax
c002014a:	e8 d0 f4 ff ff       	call   c001f61f <Vm::fpuLongToFloat(long long)>
c002014f:	e9 ee 00 00 00       	jmp    c0020242 <Vm::x87Handler(regs*)+0x914>
c0020154:	31 c0                	xor    eax,eax
c0020156:	80 fa 07             	cmp    dl,0x7
c0020159:	0f 85 30 02 00 00    	jne    c002038f <Vm::x87Handler(regs*)+0xa61>
c002015f:	83 ec 0c             	sub    esp,0xc
c0020162:	6a 00                	push   0x0
c0020164:	e8 88 f6 ff ff       	call   c001f7f1 <Vm::fpuGetReg(int)>
c0020169:	89 c7                	mov    edi,eax
c002016b:	89 d5                	mov    ebp,edx
c002016d:	58                   	pop    eax
c002016e:	8b 06                	mov    eax,DWORD PTR [esi]
c0020170:	5a                   	pop    edx
c0020171:	31 d2                	xor    edx,edx
c0020173:	52                   	push   edx
c0020174:	50                   	push   eax
c0020175:	e8 a5 f4 ff ff       	call   c001f61f <Vm::fpuLongToFloat(long long)>
c002017a:	e9 62 01 00 00       	jmp    c00202e1 <Vm::x87Handler(regs*)+0x9b3>
c002017f:	84 d2                	test   dl,dl
c0020181:	75 0d                	jne    c0020190 <Vm::x87Handler(regs*)+0x862>
c0020183:	31 d2                	xor    edx,edx
c0020185:	55                   	push   ebp
c0020186:	55                   	push   ebp
c0020187:	8b 06                	mov    eax,DWORD PTR [esi]
c0020189:	52                   	push   edx
c002018a:	50                   	push   eax
c002018b:	e9 d3 01 00 00       	jmp    c0020363 <Vm::x87Handler(regs*)+0xa35>
c0020190:	31 c0                	xor    eax,eax
c0020192:	80 fa 02             	cmp    dl,0x2
c0020195:	0f 85 f4 01 00 00    	jne    c002038f <Vm::x87Handler(regs*)+0xa61>
c002019b:	83 ec 0c             	sub    esp,0xc
c002019e:	6a 00                	push   0x0
c00201a0:	e8 4c f6 ff ff       	call   c001f7f1 <Vm::fpuGetReg(int)>
c00201a5:	59                   	pop    ecx
c00201a6:	5f                   	pop    edi
c00201a7:	e9 6a f9 ff ff       	jmp    c001fb16 <Vm::x87Handler(regs*)+0x1e8>
c00201ac:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00201b0:	84 d2                	test   dl,dl
c00201b2:	75 2a                	jne    c00201de <Vm::x87Handler(regs*)+0x8b0>
c00201b4:	50                   	push   eax
c00201b5:	50                   	push   eax
c00201b6:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00201b9:	ff 36                	push   DWORD PTR [esi]
c00201bb:	e8 c5 f3 ff ff       	call   c001f585 <Vm::fpu64ToInternal(unsigned long long)>
c00201c0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00201c7:	89 c6                	mov    esi,eax
c00201c9:	89 d7                	mov    edi,edx
c00201cb:	e8 21 f6 ff ff       	call   c001f7f1 <Vm::fpuGetReg(int)>
c00201d0:	57                   	push   edi
c00201d1:	56                   	push   esi
c00201d2:	52                   	push   edx
c00201d3:	50                   	push   eax
c00201d4:	e8 8e f5 ff ff       	call   c001f767 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c00201d9:	e9 64 01 00 00       	jmp    c0020342 <Vm::x87Handler(regs*)+0xa14>
c00201de:	80 fa 01             	cmp    dl,0x1
c00201e1:	75 11                	jne    c00201f4 <Vm::x87Handler(regs*)+0x8c6>
c00201e3:	50                   	push   eax
c00201e4:	50                   	push   eax
c00201e5:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00201e8:	ff 36                	push   DWORD PTR [esi]
c00201ea:	e8 96 f3 ff ff       	call   c001f585 <Vm::fpu64ToInternal(unsigned long long)>
c00201ef:	e9 35 01 00 00       	jmp    c0020329 <Vm::x87Handler(regs*)+0x9fb>
c00201f4:	80 fa 02             	cmp    dl,0x2
c00201f7:	0f 85 54 f9 ff ff    	jne    c001fb51 <Vm::x87Handler(regs*)+0x223>
c00201fd:	55                   	push   ebp
c00201fe:	55                   	push   ebp
c00201ff:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020202:	ff 36                	push   DWORD PTR [esi]
c0020204:	e8 7c f3 ff ff       	call   c001f585 <Vm::fpu64ToInternal(unsigned long long)>
c0020209:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020210:	89 c6                	mov    esi,eax
c0020212:	89 d7                	mov    edi,edx
c0020214:	e8 d8 f5 ff ff       	call   c001f7f1 <Vm::fpuGetReg(int)>
c0020219:	57                   	push   edi
c002021a:	56                   	push   esi
c002021b:	52                   	push   edx
c002021c:	50                   	push   eax
c002021d:	e8 f2 f4 ff ff       	call   c001f714 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020222:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020226:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0020229:	83 c4 20             	add    esp,0x20
c002022c:	e9 74 f7 ff ff       	jmp    c001f9a5 <Vm::x87Handler(regs*)+0x77>
c0020231:	80 fa 04             	cmp    dl,0x4
c0020234:	75 2a                	jne    c0020260 <Vm::x87Handler(regs*)+0x932>
c0020236:	51                   	push   ecx
c0020237:	51                   	push   ecx
c0020238:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002023b:	ff 36                	push   DWORD PTR [esi]
c002023d:	e8 43 f3 ff ff       	call   c001f585 <Vm::fpu64ToInternal(unsigned long long)>
c0020242:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020249:	89 c6                	mov    esi,eax
c002024b:	89 d7                	mov    edi,edx
c002024d:	e8 9f f5 ff ff       	call   c001f7f1 <Vm::fpuGetReg(int)>
c0020252:	57                   	push   edi
c0020253:	56                   	push   esi
c0020254:	52                   	push   edx
c0020255:	50                   	push   eax
c0020256:	e8 36 f5 ff ff       	call   c001f791 <Vm::fpuSub(unsigned long long, unsigned long long)>
c002025b:	e9 e2 00 00 00       	jmp    c0020342 <Vm::x87Handler(regs*)+0xa14>
c0020260:	80 fa 05             	cmp    dl,0x5
c0020263:	75 28                	jne    c002028d <Vm::x87Handler(regs*)+0x95f>
c0020265:	83 ec 0c             	sub    esp,0xc
c0020268:	6a 00                	push   0x0
c002026a:	e8 82 f5 ff ff       	call   c001f7f1 <Vm::fpuGetReg(int)>
c002026f:	89 c7                	mov    edi,eax
c0020271:	89 d5                	mov    ebp,edx
c0020273:	58                   	pop    eax
c0020274:	5a                   	pop    edx
c0020275:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020278:	ff 36                	push   DWORD PTR [esi]
c002027a:	e8 06 f3 ff ff       	call   c001f585 <Vm::fpu64ToInternal(unsigned long long)>
c002027f:	83 c4 10             	add    esp,0x10
c0020282:	55                   	push   ebp
c0020283:	57                   	push   edi
c0020284:	52                   	push   edx
c0020285:	50                   	push   eax
c0020286:	e8 06 f5 ff ff       	call   c001f791 <Vm::fpuSub(unsigned long long, unsigned long long)>
c002028b:	eb 60                	jmp    c00202ed <Vm::x87Handler(regs*)+0x9bf>
c002028d:	80 fa 06             	cmp    dl,0x6
c0020290:	75 2a                	jne    c00202bc <Vm::x87Handler(regs*)+0x98e>
c0020292:	51                   	push   ecx
c0020293:	51                   	push   ecx
c0020294:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020297:	ff 36                	push   DWORD PTR [esi]
c0020299:	e8 e7 f2 ff ff       	call   c001f585 <Vm::fpu64ToInternal(unsigned long long)>
c002029e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00202a5:	89 c6                	mov    esi,eax
c00202a7:	89 d7                	mov    edi,edx
c00202a9:	e8 43 f5 ff ff       	call   c001f7f1 <Vm::fpuGetReg(int)>
c00202ae:	57                   	push   edi
c00202af:	56                   	push   esi
c00202b0:	52                   	push   edx
c00202b1:	50                   	push   eax
c00202b2:	e8 08 f5 ff ff       	call   c001f7bf <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00202b7:	e9 86 00 00 00       	jmp    c0020342 <Vm::x87Handler(regs*)+0xa14>
c00202bc:	31 c0                	xor    eax,eax
c00202be:	80 fa 07             	cmp    dl,0x7
c00202c1:	0f 85 c8 00 00 00    	jne    c002038f <Vm::x87Handler(regs*)+0xa61>
c00202c7:	83 ec 0c             	sub    esp,0xc
c00202ca:	6a 00                	push   0x0
c00202cc:	e8 20 f5 ff ff       	call   c001f7f1 <Vm::fpuGetReg(int)>
c00202d1:	89 c7                	mov    edi,eax
c00202d3:	89 d5                	mov    ebp,edx
c00202d5:	58                   	pop    eax
c00202d6:	5a                   	pop    edx
c00202d7:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00202da:	ff 36                	push   DWORD PTR [esi]
c00202dc:	e8 a4 f2 ff ff       	call   c001f585 <Vm::fpu64ToInternal(unsigned long long)>
c00202e1:	83 c4 10             	add    esp,0x10
c00202e4:	55                   	push   ebp
c00202e5:	57                   	push   edi
c00202e6:	52                   	push   edx
c00202e7:	50                   	push   eax
c00202e8:	e8 d2 f4 ff ff       	call   c001f7bf <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00202ed:	83 c4 0c             	add    esp,0xc
c00202f0:	eb 53                	jmp    c0020345 <Vm::x87Handler(regs*)+0xa17>
c00202f2:	31 c0                	xor    eax,eax
c00202f4:	80 fa 02             	cmp    dl,0x2
c00202f7:	0f 85 92 00 00 00    	jne    c002038f <Vm::x87Handler(regs*)+0xa61>
c00202fd:	83 ec 0c             	sub    esp,0xc
c0020300:	6a 00                	push   0x0
c0020302:	e8 ea f4 ff ff       	call   c001f7f1 <Vm::fpuGetReg(int)>
c0020307:	59                   	pop    ecx
c0020308:	5f                   	pop    edi
c0020309:	52                   	push   edx
c002030a:	50                   	push   eax
c002030b:	e8 27 f2 ff ff       	call   c001f537 <Vm::fpuInternalTo64(unsigned long long)>
c0020310:	eb 70                	jmp    c0020382 <Vm::x87Handler(regs*)+0xa54>
c0020312:	31 c0                	xor    eax,eax
c0020314:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c0020319:	75 74                	jne    c002038f <Vm::x87Handler(regs*)+0xa61>
c002031b:	50                   	push   eax
c002031c:	50                   	push   eax
c002031d:	0f b7 06             	movzx  eax,WORD PTR [esi]
c0020320:	31 d2                	xor    edx,edx
c0020322:	52                   	push   edx
c0020323:	50                   	push   eax
c0020324:	e8 f6 f2 ff ff       	call   c001f61f <Vm::fpuLongToFloat(long long)>
c0020329:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020330:	89 c6                	mov    esi,eax
c0020332:	89 d7                	mov    edi,edx
c0020334:	e8 b8 f4 ff ff       	call   c001f7f1 <Vm::fpuGetReg(int)>
c0020339:	57                   	push   edi
c002033a:	56                   	push   esi
c002033b:	52                   	push   edx
c002033c:	50                   	push   eax
c002033d:	e8 5e f4 ff ff       	call   c001f7a0 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020342:	83 c4 1c             	add    esp,0x1c
c0020345:	52                   	push   edx
c0020346:	50                   	push   eax
c0020347:	6a 00                	push   0x0
c0020349:	e8 e6 f4 ff ff       	call   c001f834 <Vm::fpuSetReg(int, unsigned long long)>
c002034e:	e9 f2 f7 ff ff       	jmp    c001fb45 <Vm::x87Handler(regs*)+0x217>
c0020353:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020357:	80 fa 05             	cmp    dl,0x5
c002035a:	75 11                	jne    c002036d <Vm::x87Handler(regs*)+0xa3f>
c002035c:	55                   	push   ebp
c002035d:	55                   	push   ebp
c002035e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020361:	ff 36                	push   DWORD PTR [esi]
c0020363:	e8 81 f2 ff ff       	call   c001f5e9 <Vm::fpuULongToFloat(unsigned long long)>
c0020368:	e9 cf f7 ff ff       	jmp    c001fb3c <Vm::x87Handler(regs*)+0x20e>
c002036d:	31 c0                	xor    eax,eax
c002036f:	80 fa 07             	cmp    dl,0x7
c0020372:	75 1b                	jne    c002038f <Vm::x87Handler(regs*)+0xa61>
c0020374:	e8 63 f5 ff ff       	call   c001f8dc <Vm::fpuPop()>
c0020379:	51                   	push   ecx
c002037a:	51                   	push   ecx
c002037b:	52                   	push   edx
c002037c:	50                   	push   eax
c002037d:	e8 0c f2 ff ff       	call   c001f58e <Vm::fpuFloatToLong(unsigned long long)>
c0020382:	83 c4 10             	add    esp,0x10
c0020385:	89 06                	mov    DWORD PTR [esi],eax
c0020387:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c002038a:	e9 f8 f7 ff ff       	jmp    c001fb87 <Vm::x87Handler(regs*)+0x259>
c002038f:	83 c4 1c             	add    esp,0x1c
c0020392:	5b                   	pop    ebx
c0020393:	5e                   	pop    esi
c0020394:	5f                   	pop    edi
c0020395:	5d                   	pop    ebp
c0020396:	c3                   	ret    

c0020397 <__static_initialization_and_destruction_0(int, int)>:
c0020397:	83 ec 0c             	sub    esp,0xc
c002039a:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c002039f:	75 1a                	jne    c00203bb <__static_initialization_and_destruction_0(int, int)+0x24>
c00203a1:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00203a9:	75 10                	jne    c00203bb <__static_initialization_and_destruction_0(int, int)+0x24>
c00203ab:	83 ec 0c             	sub    esp,0xc
c00203ae:	68 20 18 03 c0       	push   0xc0031820
c00203b3:	e8 18 88 00 00       	call   c0028bd0 <Vm::_FPUState::_FPUState()>
c00203b8:	83 c4 10             	add    esp,0x10
c00203bb:	90                   	nop
c00203bc:	83 c4 0c             	add    esp,0xc
c00203bf:	c3                   	ret    

c00203c0 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c00203c0:	83 ec 0c             	sub    esp,0xc
c00203c3:	83 ec 08             	sub    esp,0x8
c00203c6:	68 ff ff 00 00       	push   0xffff
c00203cb:	6a 01                	push   0x1
c00203cd:	e8 c5 ff ff ff       	call   c0020397 <__static_initialization_and_destruction_0(int, int)>
c00203d2:	83 c4 10             	add    esp,0x10
c00203d5:	83 c4 0c             	add    esp,0xc
c00203d8:	c3                   	ret    
c00203d9:	90                   	nop

c00203da <FAT::getName()>:
c00203da:	b8 40 c6 02 c0       	mov    eax,0xc002c640
c00203df:	c3                   	ret    

c00203e0 <FAT::tell(void*, unsigned long long*)>:
c00203e0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00203e5:	75 06                	jne    c00203ed <FAT::tell(void*, unsigned long long*)+0xd>
c00203e7:	b8 04 00 00 00       	mov    eax,0x4
c00203ec:	c3                   	ret    
c00203ed:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00203f2:	75 06                	jne    c00203fa <FAT::tell(void*, unsigned long long*)+0x1a>
c00203f4:	b8 04 00 00 00       	mov    eax,0x4
c00203f9:	c3                   	ret    
c00203fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00203fe:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0020401:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0020404:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020408:	89 01                	mov    DWORD PTR [ecx],eax
c002040a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002040d:	b8 00 00 00 00       	mov    eax,0x0
c0020412:	c3                   	ret    
c0020413:	90                   	nop

c0020414 <FAT::stat(void*, unsigned long long*)>:
c0020414:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020419:	75 06                	jne    c0020421 <FAT::stat(void*, unsigned long long*)+0xd>
c002041b:	b8 04 00 00 00       	mov    eax,0x4
c0020420:	c3                   	ret    
c0020421:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020426:	75 06                	jne    c002042e <FAT::stat(void*, unsigned long long*)+0x1a>
c0020428:	b8 04 00 00 00       	mov    eax,0x4
c002042d:	c3                   	ret    
c002042e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020432:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0020435:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020438:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002043c:	89 01                	mov    DWORD PTR [ecx],eax
c002043e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020441:	b8 00 00 00 00       	mov    eax,0x0
c0020446:	c3                   	ret    
c0020447:	90                   	nop

c0020448 <FAT::~FAT()>:
c0020448:	83 ec 0c             	sub    esp,0xc
c002044b:	ba c4 c6 02 c0       	mov    edx,0xc002c6c4
c0020450:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020454:	89 10                	mov    DWORD PTR [eax],edx
c0020456:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002045a:	83 ec 0c             	sub    esp,0xc
c002045d:	50                   	push   eax
c002045e:	e8 5d 2c ff ff       	call   c00130c0 <Filesystem::~Filesystem()>
c0020463:	83 c4 10             	add    esp,0x10
c0020466:	90                   	nop
c0020467:	83 c4 0c             	add    esp,0xc
c002046a:	c3                   	ret    
c002046b:	90                   	nop

c002046c <FAT::~FAT()>:
c002046c:	83 ec 0c             	sub    esp,0xc
c002046f:	83 ec 0c             	sub    esp,0xc
c0020472:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020476:	e8 cd ff ff ff       	call   c0020448 <FAT::~FAT()>
c002047b:	83 c4 10             	add    esp,0x10
c002047e:	83 ec 08             	sub    esp,0x8
c0020481:	6a 08                	push   0x8
c0020483:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020487:	e8 2c 28 ff ff       	call   c0012cb8 <operator delete(void*, unsigned long)>
c002048c:	83 c4 10             	add    esp,0x10
c002048f:	83 c4 0c             	add    esp,0xc
c0020492:	c3                   	ret    
c0020493:	90                   	nop

c0020494 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0020494:	83 ec 1c             	sub    esp,0x1c
c0020497:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c002049e:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c00204a3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00204a7:	8b 04 85 a0 18 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce760]
c00204ae:	83 f8 ff             	cmp    eax,0xffffffff
c00204b1:	75 34                	jne    c00204e7 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c00204b3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00204b7:	88 c2                	mov    dl,al
c00204b9:	a1 80 18 03 c0       	mov    eax,ds:0xc0031880
c00204be:	01 d0                	add    eax,edx
c00204c0:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00204c4:	8b 15 80 18 03 c0    	mov    edx,DWORD PTR ds:0xc0031880
c00204ca:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00204ce:	89 14 85 a0 18 03 c0 	mov    DWORD PTR [eax*4-0x3ffce760],edx
c00204d5:	a1 80 18 03 c0       	mov    eax,ds:0xc0031880
c00204da:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00204de:	89 14 85 20 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce6e0],edx
c00204e5:	eb 17                	jmp    c00204fe <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c00204e7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00204eb:	88 c2                	mov    dl,al
c00204ed:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00204f1:	8b 04 85 a0 18 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce760]
c00204f8:	01 d0                	add    eax,edx
c00204fa:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00204fe:	83 ec 04             	sub    esp,0x4
c0020501:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020505:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020509:	8d 44 24 15          	lea    eax,[esp+0x15]
c002050d:	50                   	push   eax
c002050e:	e8 25 68 fe ff       	call   c0006d38 <f_getlabel>
c0020513:	83 c4 10             	add    esp,0x10
c0020516:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002051a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002051f:	75 07                	jne    c0020528 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c0020521:	b8 00 00 00 00       	mov    eax,0x0
c0020526:	eb 05                	jmp    c002052d <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0020528:	b8 01 00 00 00       	mov    eax,0x1
c002052d:	83 c4 1c             	add    esp,0x1c
c0020530:	c3                   	ret    
c0020531:	90                   	nop

c0020532 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0020532:	57                   	push   edi
c0020533:	83 ec 58             	sub    esp,0x58
c0020536:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c002053e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020542:	b9 0f 00 00 00       	mov    ecx,0xf
c0020547:	b8 00 00 00 00       	mov    eax,0x0
c002054c:	fc                   	cld    
c002054d:	89 d7                	mov    edi,edx
c002054f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020551:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020555:	8b 04 85 a0 18 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce760]
c002055c:	83 f8 ff             	cmp    eax,0xffffffff
c002055f:	75 34                	jne    c0020595 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c0020561:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020565:	88 c2                	mov    dl,al
c0020567:	a1 80 18 03 c0       	mov    eax,ds:0xc0031880
c002056c:	01 d0                	add    eax,edx
c002056e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020572:	8b 15 80 18 03 c0    	mov    edx,DWORD PTR ds:0xc0031880
c0020578:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002057c:	89 14 85 a0 18 03 c0 	mov    DWORD PTR [eax*4-0x3ffce760],edx
c0020583:	a1 80 18 03 c0       	mov    eax,ds:0xc0031880
c0020588:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c002058c:	89 14 85 20 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce6e0],edx
c0020593:	eb 17                	jmp    c00205ac <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c0020595:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020599:	88 c2                	mov    dl,al
c002059b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002059f:	8b 04 85 a0 18 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce760]
c00205a6:	01 d0                	add    eax,edx
c00205a8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00205ac:	83 ec 08             	sub    esp,0x8
c00205af:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00205b3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00205b7:	50                   	push   eax
c00205b8:	e8 b7 03 fe ff       	call   c0000974 <strcat>
c00205bd:	83 c4 10             	add    esp,0x10
c00205c0:	83 ec 0c             	sub    esp,0xc
c00205c3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00205c7:	50                   	push   eax
c00205c8:	e8 59 69 fe ff       	call   c0006f26 <f_setlabel>
c00205cd:	83 c4 10             	add    esp,0x10
c00205d0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00205d4:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c00205d9:	75 07                	jne    c00205e2 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c00205db:	b8 00 00 00 00       	mov    eax,0x0
c00205e0:	eb 05                	jmp    c00205e7 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c00205e2:	b8 01 00 00 00       	mov    eax,0x1
c00205e7:	83 c4 58             	add    esp,0x58
c00205ea:	5f                   	pop    edi
c00205eb:	c3                   	ret    

c00205ec <FAT::format(LogicalDisk*, int, char const*, int)>:
c00205ec:	83 ec 2c             	sub    esp,0x2c
c00205ef:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00205f7:	83 ec 08             	sub    esp,0x8
c00205fa:	68 64 c6 02 c0       	push   0xc002c664
c00205ff:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020603:	e8 b8 02 fe ff       	call   c00008c0 <strcmp>
c0020608:	83 c4 10             	add    esp,0x10
c002060b:	85 c0                	test   eax,eax
c002060d:	0f 94 c0             	sete   al
c0020610:	84 c0                	test   al,al
c0020612:	74 0d                	je     c0020621 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0020614:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c002061c:	e9 a6 00 00 00       	jmp    c00206c7 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020621:	83 ec 08             	sub    esp,0x8
c0020624:	68 56 c6 02 c0       	push   0xc002c656
c0020629:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002062d:	e8 8e 02 fe ff       	call   c00008c0 <strcmp>
c0020632:	83 c4 10             	add    esp,0x10
c0020635:	85 c0                	test   eax,eax
c0020637:	0f 94 c0             	sete   al
c002063a:	84 c0                	test   al,al
c002063c:	74 0a                	je     c0020648 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c002063e:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020646:	eb 7f                	jmp    c00206c7 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020648:	83 ec 08             	sub    esp,0x8
c002064b:	68 5c c6 02 c0       	push   0xc002c65c
c0020650:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020654:	e8 67 02 fe ff       	call   c00008c0 <strcmp>
c0020659:	83 c4 10             	add    esp,0x10
c002065c:	85 c0                	test   eax,eax
c002065e:	0f 94 c0             	sete   al
c0020661:	84 c0                	test   al,al
c0020663:	74 0a                	je     c002066f <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c0020665:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c002066d:	eb 58                	jmp    c00206c7 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002066f:	83 ec 08             	sub    esp,0x8
c0020672:	68 2c 93 02 c0       	push   0xc002932c
c0020677:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002067b:	e8 40 02 fe ff       	call   c00008c0 <strcmp>
c0020680:	83 c4 10             	add    esp,0x10
c0020683:	85 c0                	test   eax,eax
c0020685:	0f 94 c0             	sete   al
c0020688:	84 c0                	test   al,al
c002068a:	74 0a                	je     c0020696 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c002068c:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0020694:	eb 31                	jmp    c00206c7 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020696:	83 ec 08             	sub    esp,0x8
c0020699:	68 62 c6 02 c0       	push   0xc002c662
c002069e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00206a2:	e8 19 02 fe ff       	call   c00008c0 <strcmp>
c00206a7:	83 c4 10             	add    esp,0x10
c00206aa:	85 c0                	test   eax,eax
c00206ac:	0f 94 c0             	sete   al
c00206af:	84 c0                	test   al,al
c00206b1:	74 0a                	je     c00206bd <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c00206b3:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00206bb:	eb 0a                	jmp    c00206c7 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00206bd:	b8 08 00 00 00       	mov    eax,0x8
c00206c2:	e9 04 01 00 00       	jmp    c00207cb <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00206c7:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00206ce:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00206d3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00206d7:	8b 04 85 a0 18 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce760]
c00206de:	83 f8 ff             	cmp    eax,0xffffffff
c00206e1:	75 34                	jne    c0020717 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c00206e3:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00206e7:	88 c2                	mov    dl,al
c00206e9:	a1 80 18 03 c0       	mov    eax,ds:0xc0031880
c00206ee:	01 d0                	add    eax,edx
c00206f0:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00206f4:	8b 15 80 18 03 c0    	mov    edx,DWORD PTR ds:0xc0031880
c00206fa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00206fe:	89 14 85 a0 18 03 c0 	mov    DWORD PTR [eax*4-0x3ffce760],edx
c0020705:	a1 80 18 03 c0       	mov    eax,ds:0xc0031880
c002070a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c002070e:	89 14 85 20 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce6e0],edx
c0020715:	eb 17                	jmp    c002072e <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0020717:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c002071b:	88 c2                	mov    dl,al
c002071d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020721:	8b 04 85 a0 18 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce760]
c0020728:	01 d0                	add    eax,edx
c002072a:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c002072e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020732:	88 04 24             	mov    BYTE PTR [esp],al
c0020735:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0020739:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002073d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0020745:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c002074a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0020752:	83 ec 0c             	sub    esp,0xc
c0020755:	68 00 20 00 00       	push   0x2000
c002075a:	e8 e1 f0 fe ff       	call   c000f840 <malloc>
c002075f:	83 c4 10             	add    esp,0x10
c0020762:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020766:	68 00 20 00 00       	push   0x2000
c002076b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002076f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020773:	50                   	push   eax
c0020774:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0020778:	50                   	push   eax
c0020779:	e8 f3 6b fe ff       	call   c0007371 <f_mkfs>
c002077e:	83 c4 10             	add    esp,0x10
c0020781:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020785:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002078a:	75 07                	jne    c0020793 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c002078c:	b8 00 00 00 00       	mov    eax,0x0
c0020791:	eb 38                	jmp    c00207cb <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020793:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0020798:	75 17                	jne    c00207b1 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c002079a:	83 ec 0c             	sub    esp,0xc
c002079d:	68 94 c6 02 c0       	push   0xc002c694
c00207a2:	e8 f1 25 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c00207a7:	83 c4 10             	add    esp,0x10
c00207aa:	b8 09 00 00 00       	mov    eax,0x9
c00207af:	eb 1a                	jmp    c00207cb <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00207b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00207b5:	83 ec 08             	sub    esp,0x8
c00207b8:	50                   	push   eax
c00207b9:	68 68 c6 02 c0       	push   0xc002c668
c00207be:	e8 d5 25 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c00207c3:	83 c4 10             	add    esp,0x10
c00207c6:	b8 01 00 00 00       	mov    eax,0x1
c00207cb:	83 c4 2c             	add    esp,0x2c
c00207ce:	c3                   	ret    
c00207cf:	90                   	nop

c00207d0 <FAT::tryMount(LogicalDisk*, int)>:
c00207d0:	81 ec 6c 03 00 00    	sub    esp,0x36c
c00207d6:	a1 80 18 03 c0       	mov    eax,ds:0xc0031880
c00207db:	83 f8 14             	cmp    eax,0x14
c00207de:	75 17                	jne    c00207f7 <FAT::tryMount(LogicalDisk*, int)+0x27>
c00207e0:	83 ec 0c             	sub    esp,0xc
c00207e3:	68 7a c6 02 c0       	push   0xc002c67a
c00207e8:	e8 86 9c ff ff       	call   c001a473 <Krnl::panic(char const*)>
c00207ed:	83 c4 10             	add    esp,0x10
c00207f0:	b0 00                	mov    al,0x0
c00207f2:	e9 d7 01 00 00       	jmp    c00209ce <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00207f7:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00207fe:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020804:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002080a:	3d 00 02 00 00       	cmp    eax,0x200
c002080f:	74 07                	je     c0020818 <FAT::tryMount(LogicalDisk*, int)+0x48>
c0020811:	b0 00                	mov    al,0x0
c0020813:	e9 b6 01 00 00       	jmp    c00209ce <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020818:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0020820:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020827:	8b 04 85 a0 18 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce760]
c002082e:	83 f8 ff             	cmp    eax,0xffffffff
c0020831:	74 07                	je     c002083a <FAT::tryMount(LogicalDisk*, int)+0x6a>
c0020833:	b0 01                	mov    al,0x1
c0020835:	e9 94 01 00 00       	jmp    c00209ce <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002083a:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0020844:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c002084c:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0020853:	88 c2                	mov    dl,al
c0020855:	a1 80 18 03 c0       	mov    eax,ds:0xc0031880
c002085a:	01 d0                	add    eax,edx
c002085c:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c0020863:	8b 15 80 18 03 c0    	mov    edx,DWORD PTR ds:0xc0031880
c0020869:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020870:	89 14 85 a0 18 03 c0 	mov    DWORD PTR [eax*4-0x3ffce760],edx
c0020877:	a1 80 18 03 c0       	mov    eax,ds:0xc0031880
c002087c:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c0020883:	89 14 85 20 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce6e0],edx
c002088a:	83 ec 0c             	sub    esp,0xc
c002088d:	68 54 02 00 00       	push   0x254
c0020892:	e8 a9 ef fe ff       	call   c000f840 <malloc>
c0020897:	83 c4 10             	add    esp,0x10
c002089a:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c00208a1:	83 ec 04             	sub    esp,0x4
c00208a4:	6a 00                	push   0x0
c00208a6:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00208ad:	50                   	push   eax
c00208ae:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00208b5:	e8 75 46 fe ff       	call   c0004f2f <f_mount>
c00208ba:	83 c4 10             	add    esp,0x10
c00208bd:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c00208c4:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c00208cc:	74 19                	je     c00208e7 <FAT::tryMount(LogicalDisk*, int)+0x117>
c00208ce:	83 ec 0c             	sub    esp,0xc
c00208d1:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00208d8:	e8 83 ef fe ff       	call   c000f860 <rfree>
c00208dd:	83 c4 10             	add    esp,0x10
c00208e0:	b0 00                	mov    al,0x0
c00208e2:	e9 e7 00 00 00       	jmp    c00209ce <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00208e7:	83 ec 04             	sub    esp,0x4
c00208ea:	68 00 01 00 00       	push   0x100
c00208ef:	6a 00                	push   0x0
c00208f1:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00208f8:	50                   	push   eax
c00208f9:	e8 7a fe fd ff       	call   c0000778 <memset>
c00208fe:	83 c4 10             	add    esp,0x10
c0020901:	83 ec 08             	sub    esp,0x8
c0020904:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c002090b:	50                   	push   eax
c002090c:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020913:	50                   	push   eax
c0020914:	e8 5b 00 fe ff       	call   c0000974 <strcat>
c0020919:	83 c4 10             	add    esp,0x10
c002091c:	83 ec 08             	sub    esp,0x8
c002091f:	68 88 c6 02 c0       	push   0xc002c688
c0020924:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c002092b:	50                   	push   eax
c002092c:	e8 43 00 fe ff       	call   c0000974 <strcat>
c0020931:	83 c4 10             	add    esp,0x10
c0020934:	83 ec 04             	sub    esp,0x4
c0020937:	6a 01                	push   0x1
c0020939:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0020940:	50                   	push   eax
c0020941:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020945:	50                   	push   eax
c0020946:	e8 46 46 fe ff       	call   c0004f91 <f_open>
c002094b:	83 c4 10             	add    esp,0x10
c002094e:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020955:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c002095c:	85 c0                	test   eax,eax
c002095e:	74 0a                	je     c002096a <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0020960:	78 2d                	js     c002098f <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020962:	83 e8 04             	sub    eax,0x4
c0020965:	83 f8 01             	cmp    eax,0x1
c0020968:	77 25                	ja     c002098f <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c002096a:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0020972:	83 ec 0c             	sub    esp,0xc
c0020975:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020979:	50                   	push   eax
c002097a:	e8 64 51 fe ff       	call   c0005ae3 <f_close>
c002097f:	83 c4 10             	add    esp,0x10
c0020982:	90                   	nop
c0020983:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c002098b:	74 3a                	je     c00209c7 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c002098d:	eb 2d                	jmp    c00209bc <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c002098f:	83 ec 0c             	sub    esp,0xc
c0020992:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020999:	e8 c2 ee fe ff       	call   c000f860 <rfree>
c002099e:	83 c4 10             	add    esp,0x10
c00209a1:	83 ec 04             	sub    esp,0x4
c00209a4:	6a 00                	push   0x0
c00209a6:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00209ad:	50                   	push   eax
c00209ae:	6a 00                	push   0x0
c00209b0:	e8 7a 45 fe ff       	call   c0004f2f <f_mount>
c00209b5:	83 c4 10             	add    esp,0x10
c00209b8:	b0 00                	mov    al,0x0
c00209ba:	eb 12                	jmp    c00209ce <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00209bc:	a1 80 18 03 c0       	mov    eax,ds:0xc0031880
c00209c1:	40                   	inc    eax
c00209c2:	a3 80 18 03 c0       	mov    ds:0xc0031880,eax
c00209c7:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c00209ce:	81 c4 6c 03 00 00    	add    esp,0x36c
c00209d4:	c3                   	ret    
c00209d5:	90                   	nop

c00209d6 <FAT::readDir(void*, unsigned long, void*, int*)>:
c00209d6:	81 ec 3c 02 00 00    	sub    esp,0x23c
c00209dc:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c00209e4:	74 0a                	je     c00209f0 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c00209e6:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c00209ee:	75 0a                	jne    c00209fa <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c00209f0:	b8 04 00 00 00       	mov    eax,0x4
c00209f5:	e9 db 00 00 00       	jmp    c0020ad5 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c00209fa:	83 ec 08             	sub    esp,0x8
c00209fd:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020a04:	50                   	push   eax
c0020a05:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c0020a0c:	e8 dc 56 fe ff       	call   c00060ed <f_readdir>
c0020a11:	83 c4 10             	add    esp,0x10
c0020a14:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c0020a1b:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0020a21:	83 ec 0c             	sub    esp,0xc
c0020a24:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020a2b:	83 c0 1a             	add    eax,0x1a
c0020a2e:	50                   	push   eax
c0020a2f:	e8 60 fd fd ff       	call   c0000794 <strlen>
c0020a34:	83 c4 10             	add    esp,0x10
c0020a37:	ba 00 00 00 00       	mov    edx,0x0
c0020a3c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020a40:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0020a44:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c0020a4b:	0f b6 c0             	movzx  eax,al
c0020a4e:	83 e0 10             	and    eax,0x10
c0020a51:	74 07                	je     c0020a5a <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c0020a53:	b8 02 00 00 00       	mov    eax,0x2
c0020a58:	eb 05                	jmp    c0020a5f <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c0020a5a:	b8 01 00 00 00       	mov    eax,0x1
c0020a5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020a63:	83 ec 08             	sub    esp,0x8
c0020a66:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020a6d:	83 c0 1a             	add    eax,0x1a
c0020a70:	50                   	push   eax
c0020a71:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020a75:	83 c0 10             	add    eax,0x10
c0020a78:	50                   	push   eax
c0020a79:	e8 b6 fd fd ff       	call   c0000834 <strcpy>
c0020a7e:	83 c4 10             	add    esp,0x10
c0020a81:	83 ec 04             	sub    esp,0x4
c0020a84:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c0020a8b:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020a8f:	50                   	push   eax
c0020a90:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c0020a97:	e8 a8 fc fd ff       	call   c0000744 <memcpy>
c0020a9c:	83 c4 10             	add    esp,0x10
c0020a9f:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c0020aa6:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020aac:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c0020ab3:	84 c0                	test   al,al
c0020ab5:	75 07                	jne    c0020abe <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c0020ab7:	b8 07 00 00 00       	mov    eax,0x7
c0020abc:	eb 17                	jmp    c0020ad5 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020abe:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c0020ac5:	85 c0                	test   eax,eax
c0020ac7:	75 07                	jne    c0020ad0 <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c0020ac9:	b8 00 00 00 00       	mov    eax,0x0
c0020ace:	eb 05                	jmp    c0020ad5 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020ad0:	b8 01 00 00 00       	mov    eax,0x1
c0020ad5:	81 c4 3c 02 00 00    	add    esp,0x23c
c0020adb:	c3                   	ret    

c0020adc <FAT::read(void*, unsigned long, void*, int*)>:
c0020adc:	83 ec 1c             	sub    esp,0x1c
c0020adf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020ae4:	74 07                	je     c0020aed <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0020ae6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020aeb:	75 07                	jne    c0020af4 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020aed:	b8 04 00 00 00       	mov    eax,0x4
c0020af2:	eb 3d                	jmp    c0020b31 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020af4:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020af8:	50                   	push   eax
c0020af9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020afd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020b01:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020b05:	e8 c3 48 fe ff       	call   c00053cd <f_read>
c0020b0a:	83 c4 10             	add    esp,0x10
c0020b0d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020b11:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020b15:	89 c2                	mov    edx,eax
c0020b17:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020b1b:	89 10                	mov    DWORD PTR [eax],edx
c0020b1d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020b21:	85 c0                	test   eax,eax
c0020b23:	75 07                	jne    c0020b2c <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0020b25:	b8 00 00 00 00       	mov    eax,0x0
c0020b2a:	eb 05                	jmp    c0020b31 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020b2c:	b8 01 00 00 00       	mov    eax,0x1
c0020b31:	83 c4 1c             	add    esp,0x1c
c0020b34:	c3                   	ret    
c0020b35:	90                   	nop

c0020b36 <FAT::write(void*, unsigned long, void*, int*)>:
c0020b36:	83 ec 1c             	sub    esp,0x1c
c0020b39:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020b3e:	74 07                	je     c0020b47 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020b40:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020b45:	75 07                	jne    c0020b4e <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020b47:	b8 04 00 00 00       	mov    eax,0x4
c0020b4c:	eb 3d                	jmp    c0020b8b <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020b4e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020b52:	50                   	push   eax
c0020b53:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020b57:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020b5b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020b5f:	e8 e9 4a fe ff       	call   c000564d <f_write>
c0020b64:	83 c4 10             	add    esp,0x10
c0020b67:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020b6b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020b6f:	89 c2                	mov    edx,eax
c0020b71:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020b75:	89 10                	mov    DWORD PTR [eax],edx
c0020b77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020b7b:	85 c0                	test   eax,eax
c0020b7d:	75 07                	jne    c0020b86 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0020b7f:	b8 00 00 00 00       	mov    eax,0x0
c0020b84:	eb 05                	jmp    c0020b8b <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020b86:	b8 01 00 00 00       	mov    eax,0x1
c0020b8b:	83 c4 1c             	add    esp,0x1c
c0020b8e:	c3                   	ret    
c0020b8f:	90                   	nop

c0020b90 <FAT::close(void*)>:
c0020b90:	83 ec 1c             	sub    esp,0x1c
c0020b93:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020b98:	75 07                	jne    c0020ba1 <FAT::close(void*)+0x11>
c0020b9a:	b8 04 00 00 00       	mov    eax,0x4
c0020b9f:	eb 36                	jmp    c0020bd7 <FAT::close(void*)+0x47>
c0020ba1:	83 ec 0c             	sub    esp,0xc
c0020ba4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020ba8:	e8 36 4f fe ff       	call   c0005ae3 <f_close>
c0020bad:	83 c4 10             	add    esp,0x10
c0020bb0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020bb4:	83 ec 0c             	sub    esp,0xc
c0020bb7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020bbb:	e8 90 ec fe ff       	call   c000f850 <free>
c0020bc0:	83 c4 10             	add    esp,0x10
c0020bc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020bc7:	85 c0                	test   eax,eax
c0020bc9:	75 07                	jne    c0020bd2 <FAT::close(void*)+0x42>
c0020bcb:	b8 00 00 00 00       	mov    eax,0x0
c0020bd0:	eb 05                	jmp    c0020bd7 <FAT::close(void*)+0x47>
c0020bd2:	b8 01 00 00 00       	mov    eax,0x1
c0020bd7:	83 c4 1c             	add    esp,0x1c
c0020bda:	c3                   	ret    
c0020bdb:	90                   	nop

c0020bdc <FAT::closeDir(void*)>:
c0020bdc:	83 ec 1c             	sub    esp,0x1c
c0020bdf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020be4:	75 07                	jne    c0020bed <FAT::closeDir(void*)+0x11>
c0020be6:	b8 04 00 00 00       	mov    eax,0x4
c0020beb:	eb 36                	jmp    c0020c23 <FAT::closeDir(void*)+0x47>
c0020bed:	83 ec 0c             	sub    esp,0xc
c0020bf0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020bf4:	e8 d2 54 fe ff       	call   c00060cb <f_closedir>
c0020bf9:	83 c4 10             	add    esp,0x10
c0020bfc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020c00:	83 ec 0c             	sub    esp,0xc
c0020c03:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020c07:	e8 44 ec fe ff       	call   c000f850 <free>
c0020c0c:	83 c4 10             	add    esp,0x10
c0020c0f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020c13:	85 c0                	test   eax,eax
c0020c15:	75 07                	jne    c0020c1e <FAT::closeDir(void*)+0x42>
c0020c17:	b8 00 00 00 00       	mov    eax,0x0
c0020c1c:	eb 05                	jmp    c0020c23 <FAT::closeDir(void*)+0x47>
c0020c1e:	b8 01 00 00 00       	mov    eax,0x1
c0020c23:	83 c4 1c             	add    esp,0x1c
c0020c26:	c3                   	ret    
c0020c27:	90                   	nop

c0020c28 <FAT::seek(void*, unsigned long long)>:
c0020c28:	83 ec 2c             	sub    esp,0x2c
c0020c2b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020c2f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020c33:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020c37:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020c3b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020c40:	75 07                	jne    c0020c49 <FAT::seek(void*, unsigned long long)+0x21>
c0020c42:	b8 04 00 00 00       	mov    eax,0x4
c0020c47:	eb 2f                	jmp    c0020c78 <FAT::seek(void*, unsigned long long)+0x50>
c0020c49:	83 ec 04             	sub    esp,0x4
c0020c4c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020c50:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020c54:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020c58:	e8 b5 4e fe ff       	call   c0005b12 <f_lseek>
c0020c5d:	83 c4 10             	add    esp,0x10
c0020c60:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020c64:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020c68:	85 c0                	test   eax,eax
c0020c6a:	75 07                	jne    c0020c73 <FAT::seek(void*, unsigned long long)+0x4b>
c0020c6c:	b8 00 00 00 00       	mov    eax,0x0
c0020c71:	eb 05                	jmp    c0020c78 <FAT::seek(void*, unsigned long long)+0x50>
c0020c73:	b8 01 00 00 00       	mov    eax,0x1
c0020c78:	83 c4 2c             	add    esp,0x2c
c0020c7b:	c3                   	ret    

c0020c7c <fatWrapperReadDisk>:
c0020c7c:	83 ec 1c             	sub    esp,0x1c
c0020c7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020c83:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020c87:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020c8b:	89 04 24             	mov    DWORD PTR [esp],eax
c0020c8e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020c92:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020c96:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020c9b:	8b 04 85 60 e8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd17a0]
c0020ca2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020ca6:	83 ec 0c             	sub    esp,0xc
c0020ca9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020cad:	52                   	push   edx
c0020cae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020cb2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020cb6:	50                   	push   eax
c0020cb7:	e8 22 59 ff ff       	call   c00165de <LogicalDisk::read(unsigned long long, int, void*)>
c0020cbc:	83 c4 20             	add    esp,0x20
c0020cbf:	83 c4 1c             	add    esp,0x1c
c0020cc2:	c3                   	ret    

c0020cc3 <fatWrapperWriteDisk>:
c0020cc3:	83 ec 1c             	sub    esp,0x1c
c0020cc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020cca:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020cce:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020cd2:	89 04 24             	mov    DWORD PTR [esp],eax
c0020cd5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020cd9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020cdd:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020ce2:	8b 04 85 60 e8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd17a0]
c0020ce9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020ced:	83 ec 0c             	sub    esp,0xc
c0020cf0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020cf4:	52                   	push   edx
c0020cf5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020cf9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020cfd:	50                   	push   eax
c0020cfe:	e8 47 59 ff ff       	call   c001664a <LogicalDisk::write(unsigned long long, int, void*)>
c0020d03:	83 c4 20             	add    esp,0x20
c0020d06:	83 c4 1c             	add    esp,0x1c
c0020d09:	c3                   	ret    

c0020d0a <fatWrapperIoctl>:
c0020d0a:	53                   	push   ebx
c0020d0b:	83 ec 28             	sub    esp,0x28
c0020d0e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020d12:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0020d16:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020d1a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020d1e:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0020d23:	75 31                	jne    c0020d56 <fatWrapperIoctl+0x4c>
c0020d25:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020d29:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020d2d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020d32:	8b 04 85 60 e8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd17a0]
c0020d39:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020d3f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020d45:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020d49:	66 89 02             	mov    WORD PTR [edx],ax
c0020d4c:	b8 00 00 00 00       	mov    eax,0x0
c0020d51:	e9 b2 00 00 00       	jmp    c0020e08 <fatWrapperIoctl+0xfe>
c0020d56:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0020d5b:	75 6a                	jne    c0020dc7 <fatWrapperIoctl+0xbd>
c0020d5d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020d61:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020d65:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020d6a:	8b 04 85 60 e8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd17a0]
c0020d71:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020d77:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0020d7d:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0020d83:	89 c8                	mov    eax,ecx
c0020d85:	89 da                	mov    edx,ebx
c0020d87:	0f a4 c2 0a          	shld   edx,eax,0xa
c0020d8b:	c1 e0 0a             	shl    eax,0xa
c0020d8e:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0020d93:	8b 0c 8d 60 e8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd17a0]
c0020d9a:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0020da0:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0020da6:	89 cb                	mov    ebx,ecx
c0020da8:	c1 fb 1f             	sar    ebx,0x1f
c0020dab:	53                   	push   ebx
c0020dac:	51                   	push   ecx
c0020dad:	52                   	push   edx
c0020dae:	50                   	push   eax
c0020daf:	e8 c8 5a 00 00       	call   c002687c <__udivdi3>
c0020db4:	83 c4 10             	add    esp,0x10
c0020db7:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020dbb:	89 01                	mov    DWORD PTR [ecx],eax
c0020dbd:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020dc0:	b8 00 00 00 00       	mov    eax,0x0
c0020dc5:	eb 41                	jmp    c0020e08 <fatWrapperIoctl+0xfe>
c0020dc7:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020dcc:	75 07                	jne    c0020dd5 <fatWrapperIoctl+0xcb>
c0020dce:	b8 00 00 00 00       	mov    eax,0x0
c0020dd3:	eb 33                	jmp    c0020e08 <fatWrapperIoctl+0xfe>
c0020dd5:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0020dda:	75 19                	jne    c0020df5 <fatWrapperIoctl+0xeb>
c0020ddc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020de0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020de4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020de8:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0020dee:	b8 00 00 00 00       	mov    eax,0x0
c0020df3:	eb 13                	jmp    c0020e08 <fatWrapperIoctl+0xfe>
c0020df5:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0020dfa:	75 07                	jne    c0020e03 <fatWrapperIoctl+0xf9>
c0020dfc:	b8 00 00 00 00       	mov    eax,0x0
c0020e01:	eb 05                	jmp    c0020e08 <fatWrapperIoctl+0xfe>
c0020e03:	b8 04 00 00 00       	mov    eax,0x4
c0020e08:	83 c4 28             	add    esp,0x28
c0020e0b:	5b                   	pop    ebx
c0020e0c:	c3                   	ret    
c0020e0d:	90                   	nop

c0020e0e <FAT::FAT()>:
c0020e0e:	83 ec 1c             	sub    esp,0x1c
c0020e11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020e15:	83 ec 0c             	sub    esp,0xc
c0020e18:	50                   	push   eax
c0020e19:	e8 7e 22 ff ff       	call   c001309c <Filesystem::Filesystem()>
c0020e1e:	83 c4 10             	add    esp,0x10
c0020e21:	ba c4 c6 02 c0       	mov    edx,0xc002c6c4
c0020e26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020e2a:	89 10                	mov    DWORD PTR [eax],edx
c0020e2c:	c7 05 80 18 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031880,0x0
c0020e36:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020e3e:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0020e43:	7f 15                	jg     c0020e5a <FAT::FAT()+0x4c>
c0020e45:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020e49:	c7 04 85 a0 18 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffce760],0xffffffff
c0020e54:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0020e58:	eb e4                	jmp    c0020e3e <FAT::FAT()+0x30>
c0020e5a:	90                   	nop
c0020e5b:	83 c4 1c             	add    esp,0x1c
c0020e5e:	c3                   	ret    
c0020e5f:	90                   	nop

c0020e60 <FAT::fixFilepath(char*)>:
c0020e60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020e64:	8a 00                	mov    al,BYTE PTR [eax]
c0020e66:	3c 40                	cmp    al,0x40
c0020e68:	7e 2c                	jle    c0020e96 <FAT::fixFilepath(char*)+0x36>
c0020e6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020e6e:	8a 00                	mov    al,BYTE PTR [eax]
c0020e70:	83 e8 41             	sub    eax,0x41
c0020e73:	88 c2                	mov    dl,al
c0020e75:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020e79:	88 10                	mov    BYTE PTR [eax],dl
c0020e7b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020e7f:	8a 00                	mov    al,BYTE PTR [eax]
c0020e81:	0f be c0             	movsx  eax,al
c0020e84:	8b 04 85 a0 18 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce760]
c0020e8b:	83 c0 30             	add    eax,0x30
c0020e8e:	88 c2                	mov    dl,al
c0020e90:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020e94:	88 10                	mov    BYTE PTR [eax],dl
c0020e96:	90                   	nop
c0020e97:	c3                   	ret    

c0020e98 <FAT::open(char const*, void**, FileOpenMode)>:
c0020e98:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020e9e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020ea6:	74 0a                	je     c0020eb2 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0020ea8:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020eb0:	75 0a                	jne    c0020ebc <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0020eb2:	b8 04 00 00 00       	mov    eax,0x4
c0020eb7:	e9 fd 00 00 00       	jmp    c0020fb9 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020ebc:	83 ec 08             	sub    esp,0x8
c0020ebf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020ec6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020eca:	50                   	push   eax
c0020ecb:	e8 64 f9 fd ff       	call   c0000834 <strcpy>
c0020ed0:	83 c4 10             	add    esp,0x10
c0020ed3:	83 ec 08             	sub    esp,0x8
c0020ed6:	8d 44 24 10          	lea    eax,[esp+0x10]
c0020eda:	50                   	push   eax
c0020edb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020ee2:	e8 79 ff ff ff       	call   c0020e60 <FAT::fixFilepath(char*)>
c0020ee7:	83 c4 10             	add    esp,0x10
c0020eea:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0020ef2:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020ef9:	83 e0 01             	and    eax,0x1
c0020efc:	74 08                	je     c0020f06 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0020efe:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0020f06:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020f0d:	83 e0 04             	and    eax,0x4
c0020f10:	74 10                	je     c0020f22 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0020f12:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0020f1a:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020f22:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020f29:	83 e0 02             	and    eax,0x2
c0020f2c:	74 08                	je     c0020f36 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0020f2e:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020f36:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020f3d:	83 e0 08             	and    eax,0x8
c0020f40:	74 08                	je     c0020f4a <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0020f42:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0020f4a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020f51:	83 e0 10             	and    eax,0x10
c0020f54:	74 08                	je     c0020f5e <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0020f56:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0020f5e:	83 ec 0c             	sub    esp,0xc
c0020f61:	68 50 02 00 00       	push   0x250
c0020f66:	e8 d5 e8 fe ff       	call   c000f840 <malloc>
c0020f6b:	83 c4 10             	add    esp,0x10
c0020f6e:	89 c2                	mov    edx,eax
c0020f70:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020f77:	89 10                	mov    DWORD PTR [eax],edx
c0020f79:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0020f81:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020f88:	8b 00                	mov    eax,DWORD PTR [eax]
c0020f8a:	83 ec 04             	sub    esp,0x4
c0020f8d:	52                   	push   edx
c0020f8e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020f92:	52                   	push   edx
c0020f93:	50                   	push   eax
c0020f94:	e8 f8 3f fe ff       	call   c0004f91 <f_open>
c0020f99:	83 c4 10             	add    esp,0x10
c0020f9c:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0020fa3:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0020fab:	74 07                	je     c0020fb4 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0020fad:	b8 01 00 00 00       	mov    eax,0x1
c0020fb2:	eb 05                	jmp    c0020fb9 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020fb4:	b8 00 00 00 00       	mov    eax,0x0
c0020fb9:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020fbf:	c3                   	ret    

c0020fc0 <FAT::openDir(char const*, void**)>:
c0020fc0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020fc6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020fce:	74 0a                	je     c0020fda <FAT::openDir(char const*, void**)+0x1a>
c0020fd0:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020fd8:	75 07                	jne    c0020fe1 <FAT::openDir(char const*, void**)+0x21>
c0020fda:	b8 04 00 00 00       	mov    eax,0x4
c0020fdf:	eb 7d                	jmp    c002105e <FAT::openDir(char const*, void**)+0x9e>
c0020fe1:	83 ec 08             	sub    esp,0x8
c0020fe4:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020feb:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020fef:	50                   	push   eax
c0020ff0:	e8 3f f8 fd ff       	call   c0000834 <strcpy>
c0020ff5:	83 c4 10             	add    esp,0x10
c0020ff8:	83 ec 08             	sub    esp,0x8
c0020ffb:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020fff:	50                   	push   eax
c0021000:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021007:	e8 54 fe ff ff       	call   c0020e60 <FAT::fixFilepath(char*)>
c002100c:	83 c4 10             	add    esp,0x10
c002100f:	83 ec 0c             	sub    esp,0xc
c0021012:	6a 4c                	push   0x4c
c0021014:	e8 27 e8 fe ff       	call   c000f840 <malloc>
c0021019:	83 c4 10             	add    esp,0x10
c002101c:	89 c2                	mov    edx,eax
c002101e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021025:	89 10                	mov    DWORD PTR [eax],edx
c0021027:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002102e:	8b 00                	mov    eax,DWORD PTR [eax]
c0021030:	83 ec 08             	sub    esp,0x8
c0021033:	8d 54 24 14          	lea    edx,[esp+0x14]
c0021037:	52                   	push   edx
c0021038:	50                   	push   eax
c0021039:	e8 8b 4f fe ff       	call   c0005fc9 <f_opendir>
c002103e:	83 c4 10             	add    esp,0x10
c0021041:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021048:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0021050:	74 07                	je     c0021059 <FAT::openDir(char const*, void**)+0x99>
c0021052:	b8 01 00 00 00       	mov    eax,0x1
c0021057:	eb 05                	jmp    c002105e <FAT::openDir(char const*, void**)+0x9e>
c0021059:	b8 00 00 00 00       	mov    eax,0x0
c002105e:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021064:	c3                   	ret    
c0021065:	90                   	nop

c0021066 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0021066:	81 ec 2c 02 00 00    	sub    esp,0x22c
c002106c:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0021074:	75 0a                	jne    c0021080 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0021076:	b8 04 00 00 00       	mov    eax,0x4
c002107b:	e9 c9 00 00 00       	jmp    c0021149 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021080:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0021088:	75 0a                	jne    c0021094 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c002108a:	b8 04 00 00 00       	mov    eax,0x4
c002108f:	e9 b5 00 00 00       	jmp    c0021149 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021094:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c002109c:	75 0a                	jne    c00210a8 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c002109e:	b8 04 00 00 00       	mov    eax,0x4
c00210a3:	e9 a1 00 00 00       	jmp    c0021149 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00210a8:	83 ec 08             	sub    esp,0x8
c00210ab:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00210b2:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00210b9:	50                   	push   eax
c00210ba:	e8 75 f7 fd ff       	call   c0000834 <strcpy>
c00210bf:	83 c4 10             	add    esp,0x10
c00210c2:	83 ec 08             	sub    esp,0x8
c00210c5:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00210cc:	50                   	push   eax
c00210cd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00210d4:	e8 87 fd ff ff       	call   c0020e60 <FAT::fixFilepath(char*)>
c00210d9:	83 c4 10             	add    esp,0x10
c00210dc:	83 ec 08             	sub    esp,0x8
c00210df:	8d 44 24 08          	lea    eax,[esp+0x8]
c00210e3:	50                   	push   eax
c00210e4:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00210eb:	50                   	push   eax
c00210ec:	e8 97 50 fe ff       	call   c0006188 <f_stat>
c00210f1:	83 c4 10             	add    esp,0x10
c00210f4:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00210fb:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021102:	85 c0                	test   eax,eax
c0021104:	74 07                	je     c002110d <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0021106:	83 f8 04             	cmp    eax,0x4
c0021109:	74 32                	je     c002113d <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c002110b:	eb 37                	jmp    c0021144 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c002110d:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0021111:	0f b6 c0             	movzx  eax,al
c0021114:	83 e0 10             	and    eax,0x10
c0021117:	0f 95 c2             	setne  dl
c002111a:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0021121:	88 10                	mov    BYTE PTR [eax],dl
c0021123:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021126:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002112a:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0021131:	89 01                	mov    DWORD PTR [ecx],eax
c0021133:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0021136:	b8 00 00 00 00       	mov    eax,0x0
c002113b:	eb 0c                	jmp    c0021149 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002113d:	b8 02 00 00 00       	mov    eax,0x2
c0021142:	eb 05                	jmp    c0021149 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021144:	b8 01 00 00 00       	mov    eax,0x1
c0021149:	81 c4 2c 02 00 00    	add    esp,0x22c
c002114f:	c3                   	ret    

c0021150 <FAT::unlink(char const*)>:
c0021150:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021156:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002115e:	75 07                	jne    c0021167 <FAT::unlink(char const*)+0x17>
c0021160:	b8 04 00 00 00       	mov    eax,0x4
c0021165:	eb 5c                	jmp    c00211c3 <FAT::unlink(char const*)+0x73>
c0021167:	83 ec 08             	sub    esp,0x8
c002116a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021171:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021175:	50                   	push   eax
c0021176:	e8 b9 f6 fd ff       	call   c0000834 <strcpy>
c002117b:	83 c4 10             	add    esp,0x10
c002117e:	83 ec 08             	sub    esp,0x8
c0021181:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021185:	50                   	push   eax
c0021186:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002118d:	e8 ce fc ff ff       	call   c0020e60 <FAT::fixFilepath(char*)>
c0021192:	83 c4 10             	add    esp,0x10
c0021195:	83 ec 0c             	sub    esp,0xc
c0021198:	8d 44 24 18          	lea    eax,[esp+0x18]
c002119c:	50                   	push   eax
c002119d:	e8 38 53 fe ff       	call   c00064da <f_unlink>
c00211a2:	83 c4 10             	add    esp,0x10
c00211a5:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00211ac:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00211b3:	85 c0                	test   eax,eax
c00211b5:	75 07                	jne    c00211be <FAT::unlink(char const*)+0x6e>
c00211b7:	b8 00 00 00 00       	mov    eax,0x0
c00211bc:	eb 05                	jmp    c00211c3 <FAT::unlink(char const*)+0x73>
c00211be:	b8 01 00 00 00       	mov    eax,0x1
c00211c3:	81 c4 1c 01 00 00    	add    esp,0x11c
c00211c9:	c3                   	ret    

c00211ca <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c00211ca:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00211d0:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c00211d7:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c00211de:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00211e2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00211e6:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c00211ee:	75 0a                	jne    c00211fa <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c00211f0:	b8 04 00 00 00       	mov    eax,0x4
c00211f5:	e9 1c 01 00 00       	jmp    c0021316 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c00211fa:	83 ec 08             	sub    esp,0x8
c00211fd:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021204:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021208:	50                   	push   eax
c0021209:	e8 26 f6 fd ff       	call   c0000834 <strcpy>
c002120e:	83 c4 10             	add    esp,0x10
c0021211:	83 ec 08             	sub    esp,0x8
c0021214:	8d 44 24 20          	lea    eax,[esp+0x20]
c0021218:	50                   	push   eax
c0021219:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021220:	e8 3b fc ff ff       	call   c0020e60 <FAT::fixFilepath(char*)>
c0021225:	83 c4 10             	add    esp,0x10
c0021228:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0021230:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0021238:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002123d:	83 e0 01             	and    eax,0x1
c0021240:	74 08                	je     c002124a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0021242:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c002124a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002124f:	83 e0 02             	and    eax,0x2
c0021252:	74 08                	je     c002125c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0021254:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c002125c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021261:	83 e0 04             	and    eax,0x4
c0021264:	74 08                	je     c002126e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0021266:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c002126e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021273:	83 e0 08             	and    eax,0x8
c0021276:	74 08                	je     c0021280 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0021278:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0021280:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021285:	83 e0 01             	and    eax,0x1
c0021288:	74 08                	je     c0021292 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c002128a:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0021292:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021297:	83 e0 02             	and    eax,0x2
c002129a:	74 08                	je     c00212a4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c002129c:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c00212a4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00212a9:	83 e0 04             	and    eax,0x4
c00212ac:	74 08                	je     c00212b6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c00212ae:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c00212b6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00212bb:	83 e0 08             	and    eax,0x8
c00212be:	74 08                	je     c00212c8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c00212c0:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c00212c8:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00212cf:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c00212d6:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c00212de:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c00212e6:	83 ec 04             	sub    esp,0x4
c00212e9:	52                   	push   edx
c00212ea:	50                   	push   eax
c00212eb:	8d 44 24 24          	lea    eax,[esp+0x24]
c00212ef:	50                   	push   eax
c00212f0:	e8 87 58 fe ff       	call   c0006b7c <f_chmod>
c00212f5:	83 c4 10             	add    esp,0x10
c00212f8:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c00212ff:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0021306:	85 c0                	test   eax,eax
c0021308:	75 07                	jne    c0021311 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c002130a:	b8 00 00 00 00       	mov    eax,0x0
c002130f:	eb 05                	jmp    c0021316 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021311:	b8 01 00 00 00       	mov    eax,0x1
c0021316:	81 c4 2c 01 00 00    	add    esp,0x12c
c002131c:	c3                   	ret    
c002131d:	90                   	nop

c002131e <FAT::rename(char const*, char const*)>:
c002131e:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0021324:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c002132c:	74 0a                	je     c0021338 <FAT::rename(char const*, char const*)+0x1a>
c002132e:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0021336:	75 0a                	jne    c0021342 <FAT::rename(char const*, char const*)+0x24>
c0021338:	b8 04 00 00 00       	mov    eax,0x4
c002133d:	e9 98 00 00 00       	jmp    c00213da <FAT::rename(char const*, char const*)+0xbc>
c0021342:	83 ec 08             	sub    esp,0x8
c0021345:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c002134c:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021353:	50                   	push   eax
c0021354:	e8 db f4 fd ff       	call   c0000834 <strcpy>
c0021359:	83 c4 10             	add    esp,0x10
c002135c:	83 ec 08             	sub    esp,0x8
c002135f:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0021366:	50                   	push   eax
c0021367:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c002136e:	e8 ed fa ff ff       	call   c0020e60 <FAT::fixFilepath(char*)>
c0021373:	83 c4 10             	add    esp,0x10
c0021376:	83 ec 08             	sub    esp,0x8
c0021379:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0021380:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021384:	50                   	push   eax
c0021385:	e8 aa f4 fd ff       	call   c0000834 <strcpy>
c002138a:	83 c4 10             	add    esp,0x10
c002138d:	83 ec 08             	sub    esp,0x8
c0021390:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021394:	50                   	push   eax
c0021395:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c002139c:	e8 bf fa ff ff       	call   c0020e60 <FAT::fixFilepath(char*)>
c00213a1:	83 c4 10             	add    esp,0x10
c00213a4:	83 ec 08             	sub    esp,0x8
c00213a7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00213ab:	50                   	push   eax
c00213ac:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00213b3:	50                   	push   eax
c00213b4:	e8 d0 54 fe ff       	call   c0006889 <f_rename>
c00213b9:	83 c4 10             	add    esp,0x10
c00213bc:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c00213c3:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c00213ca:	85 c0                	test   eax,eax
c00213cc:	75 07                	jne    c00213d5 <FAT::rename(char const*, char const*)+0xb7>
c00213ce:	b8 00 00 00 00       	mov    eax,0x0
c00213d3:	eb 05                	jmp    c00213da <FAT::rename(char const*, char const*)+0xbc>
c00213d5:	b8 01 00 00 00       	mov    eax,0x1
c00213da:	81 c4 1c 02 00 00    	add    esp,0x21c
c00213e0:	c3                   	ret    
c00213e1:	90                   	nop

c00213e2 <FAT::mkdir(char const*)>:
c00213e2:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00213e8:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00213f0:	75 07                	jne    c00213f9 <FAT::mkdir(char const*)+0x17>
c00213f2:	b8 04 00 00 00       	mov    eax,0x4
c00213f7:	eb 5c                	jmp    c0021455 <FAT::mkdir(char const*)+0x73>
c00213f9:	83 ec 08             	sub    esp,0x8
c00213fc:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021403:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021407:	50                   	push   eax
c0021408:	e8 27 f4 fd ff       	call   c0000834 <strcpy>
c002140d:	83 c4 10             	add    esp,0x10
c0021410:	83 ec 08             	sub    esp,0x8
c0021413:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021417:	50                   	push   eax
c0021418:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002141f:	e8 3c fa ff ff       	call   c0020e60 <FAT::fixFilepath(char*)>
c0021424:	83 c4 10             	add    esp,0x10
c0021427:	83 ec 0c             	sub    esp,0xc
c002142a:	8d 44 24 18          	lea    eax,[esp+0x18]
c002142e:	50                   	push   eax
c002142f:	e8 29 52 fe ff       	call   c000665d <f_mkdir>
c0021434:	83 c4 10             	add    esp,0x10
c0021437:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c002143e:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021445:	85 c0                	test   eax,eax
c0021447:	75 07                	jne    c0021450 <FAT::mkdir(char const*)+0x6e>
c0021449:	b8 00 00 00 00       	mov    eax,0x0
c002144e:	eb 05                	jmp    c0021455 <FAT::mkdir(char const*)+0x73>
c0021450:	b8 01 00 00 00       	mov    eax,0x1
c0021455:	81 c4 1c 01 00 00    	add    esp,0x11c
c002145b:	c3                   	ret    

c002145c <FAT::exists(char const*)>:
c002145c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021462:	83 ec 08             	sub    esp,0x8
c0021465:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002146c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021470:	50                   	push   eax
c0021471:	e8 be f3 fd ff       	call   c0000834 <strcpy>
c0021476:	83 c4 10             	add    esp,0x10
c0021479:	83 ec 08             	sub    esp,0x8
c002147c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021480:	50                   	push   eax
c0021481:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021488:	e8 d3 f9 ff ff       	call   c0020e60 <FAT::fixFilepath(char*)>
c002148d:	83 c4 10             	add    esp,0x10
c0021490:	83 ec 08             	sub    esp,0x8
c0021493:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c002149a:	50                   	push   eax
c002149b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002149f:	50                   	push   eax
c00214a0:	e8 e3 4c fe ff       	call   c0006188 <f_stat>
c00214a5:	83 c4 10             	add    esp,0x10
c00214a8:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00214af:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00214b6:	85 c0                	test   eax,eax
c00214b8:	75 04                	jne    c00214be <FAT::exists(char const*)+0x62>
c00214ba:	b0 01                	mov    al,0x1
c00214bc:	eb 02                	jmp    c00214c0 <FAT::exists(char const*)+0x64>
c00214be:	b0 00                	mov    al,0x0
c00214c0:	81 c4 2c 02 00 00    	add    esp,0x22c
c00214c6:	c3                   	ret    
c00214c7:	90                   	nop

c00214c8 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c00214c8:	b8 08 00 00 00       	mov    eax,0x8
c00214cd:	c3                   	ret    

c00214ce <ISO9660::seek(void*, unsigned long long)>:
c00214ce:	53                   	push   ebx
c00214cf:	b8 04 00 00 00       	mov    eax,0x4
c00214d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00214d8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00214dc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00214e0:	85 d2                	test   edx,edx
c00214e2:	74 17                	je     c00214fb <ISO9660::seek(void*, unsigned long long)+0x2d>
c00214e4:	89 c8                	mov    eax,ecx
c00214e6:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c00214e9:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c00214ec:	b8 01 00 00 00       	mov    eax,0x1
c00214f1:	73 08                	jae    c00214fb <ISO9660::seek(void*, unsigned long long)+0x2d>
c00214f3:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c00214f6:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c00214f9:	31 c0                	xor    eax,eax
c00214fb:	5b                   	pop    ebx
c00214fc:	c3                   	ret    
c00214fd:	90                   	nop

c00214fe <ISO9660::tell(void*, unsigned long long*)>:
c00214fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021502:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021506:	85 d2                	test   edx,edx
c0021508:	74 12                	je     c002151c <ISO9660::tell(void*, unsigned long long*)+0x1e>
c002150a:	85 c0                	test   eax,eax
c002150c:	74 0e                	je     c002151c <ISO9660::tell(void*, unsigned long long*)+0x1e>
c002150e:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0021511:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0021514:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021517:	89 10                	mov    DWORD PTR [eax],edx
c0021519:	31 c0                	xor    eax,eax
c002151b:	c3                   	ret    
c002151c:	b8 04 00 00 00       	mov    eax,0x4
c0021521:	c3                   	ret    

c0021522 <ISO9660::getName()>:
c0021522:	b8 20 c7 02 c0       	mov    eax,0xc002c720
c0021527:	c3                   	ret    

c0021528 <ISO9660::stat(void*, unsigned long long*)>:
c0021528:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002152c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021530:	85 d2                	test   edx,edx
c0021532:	74 12                	je     c0021546 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021534:	85 c0                	test   eax,eax
c0021536:	74 0e                	je     c0021546 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021538:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c002153b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c002153e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021541:	89 10                	mov    DWORD PTR [eax],edx
c0021543:	31 c0                	xor    eax,eax
c0021545:	c3                   	ret    
c0021546:	b8 04 00 00 00       	mov    eax,0x4
c002154b:	c3                   	ret    

c002154c <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c002154c:	b8 01 00 00 00       	mov    eax,0x1
c0021551:	c3                   	ret    

c0021552 <ISO9660::unlink(char const*)>:
c0021552:	b8 01 00 00 00       	mov    eax,0x1
c0021557:	c3                   	ret    

c0021558 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0021558:	b8 01 00 00 00       	mov    eax,0x1
c002155d:	c3                   	ret    

c002155e <ISO9660::rename(char const*, char const*)>:
c002155e:	b8 01 00 00 00       	mov    eax,0x1
c0021563:	c3                   	ret    

c0021564 <ISO9660::mkdir(char const*)>:
c0021564:	b8 01 00 00 00       	mov    eax,0x1
c0021569:	c3                   	ret    

c002156a <ISO9660::close(void*)>:
c002156a:	83 ec 0c             	sub    esp,0xc
c002156d:	b8 04 00 00 00       	mov    eax,0x4
c0021572:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021576:	85 d2                	test   edx,edx
c0021578:	74 0e                	je     c0021588 <ISO9660::close(void*)+0x1e>
c002157a:	83 ec 0c             	sub    esp,0xc
c002157d:	52                   	push   edx
c002157e:	e8 cd e2 fe ff       	call   c000f850 <free>
c0021583:	83 c4 10             	add    esp,0x10
c0021586:	31 c0                	xor    eax,eax
c0021588:	83 c4 0c             	add    esp,0xc
c002158b:	c3                   	ret    

c002158c <ISO9660::closeDir(void*)>:
c002158c:	83 ec 0c             	sub    esp,0xc
c002158f:	b8 04 00 00 00       	mov    eax,0x4
c0021594:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021598:	85 d2                	test   edx,edx
c002159a:	74 0e                	je     c00215aa <ISO9660::closeDir(void*)+0x1e>
c002159c:	83 ec 0c             	sub    esp,0xc
c002159f:	52                   	push   edx
c00215a0:	e8 ab e2 fe ff       	call   c000f850 <free>
c00215a5:	83 c4 10             	add    esp,0x10
c00215a8:	31 c0                	xor    eax,eax
c00215aa:	83 c4 0c             	add    esp,0xc
c00215ad:	c3                   	ret    

c00215ae <ISO9660::~ISO9660()>:
c00215ae:	83 ec 0c             	sub    esp,0xc
c00215b1:	ba 84 c7 02 c0       	mov    edx,0xc002c784
c00215b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215ba:	89 10                	mov    DWORD PTR [eax],edx
c00215bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215c0:	83 ec 0c             	sub    esp,0xc
c00215c3:	50                   	push   eax
c00215c4:	e8 f7 1a ff ff       	call   c00130c0 <Filesystem::~Filesystem()>
c00215c9:	83 c4 10             	add    esp,0x10
c00215cc:	90                   	nop
c00215cd:	83 c4 0c             	add    esp,0xc
c00215d0:	c3                   	ret    
c00215d1:	90                   	nop

c00215d2 <ISO9660::~ISO9660()>:
c00215d2:	83 ec 0c             	sub    esp,0xc
c00215d5:	83 ec 0c             	sub    esp,0xc
c00215d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00215dc:	e8 cd ff ff ff       	call   c00215ae <ISO9660::~ISO9660()>
c00215e1:	83 c4 10             	add    esp,0x10
c00215e4:	83 ec 08             	sub    esp,0x8
c00215e7:	6a 08                	push   0x8
c00215e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00215ed:	e8 c6 16 ff ff       	call   c0012cb8 <operator delete(void*, unsigned long)>
c00215f2:	83 c4 10             	add    esp,0x10
c00215f5:	83 c4 0c             	add    esp,0xc
c00215f8:	c3                   	ret    

c00215f9 <__memmem(unsigned char*, int, unsigned char*, int)>:
c00215f9:	55                   	push   ebp
c00215fa:	31 c9                	xor    ecx,ecx
c00215fc:	57                   	push   edi
c00215fd:	56                   	push   esi
c00215fe:	53                   	push   ebx
c00215ff:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0021603:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0021607:	89 eb                	mov    ebx,ebp
c0021609:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c002160d:	39 ce                	cmp    esi,ecx
c002160f:	7e 17                	jle    c0021628 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0021611:	31 d2                	xor    edx,edx
c0021613:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0021617:	7d 13                	jge    c002162c <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0021619:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002161d:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021620:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0021623:	75 0d                	jne    c0021632 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0021625:	42                   	inc    edx
c0021626:	eb eb                	jmp    c0021613 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0021628:	31 c0                	xor    eax,eax
c002162a:	eb 0a                	jmp    c0021636 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c002162c:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0021630:	eb 04                	jmp    c0021636 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021632:	41                   	inc    ecx
c0021633:	43                   	inc    ebx
c0021634:	eb d7                	jmp    c002160d <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0021636:	5b                   	pop    ebx
c0021637:	5e                   	pop    esi
c0021638:	5f                   	pop    edi
c0021639:	5d                   	pop    ebp
c002163a:	c3                   	ret    

c002163b <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c002163b:	56                   	push   esi
c002163c:	53                   	push   ebx
c002163d:	52                   	push   edx
c002163e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021642:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0021646:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002164a:	39 0d 80 19 03 c0    	cmp    DWORD PTR ds:0xc0031980,ecx
c0021650:	75 08                	jne    c002165a <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0021652:	38 05 d4 d7 02 c0    	cmp    BYTE PTR ds:0xc002d7d4,al
c0021658:	74 2b                	je     c0021685 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c002165a:	83 ec 0c             	sub    esp,0xc
c002165d:	a2 d4 d7 02 c0       	mov    ds:0xc002d7d4,al
c0021662:	68 a0 19 03 c0       	push   0xc00319a0
c0021667:	0f be c0             	movsx  eax,al
c002166a:	6a 01                	push   0x1
c002166c:	89 0d 80 19 03 c0    	mov    DWORD PTR ds:0xc0031980,ecx
c0021672:	31 db                	xor    ebx,ebx
c0021674:	53                   	push   ebx
c0021675:	51                   	push   ecx
c0021676:	ff 34 85 5c e7 02 c0 	push   DWORD PTR [eax*4-0x3ffd18a4]
c002167d:	e8 5c 4f ff ff       	call   c00165de <LogicalDisk::read(unsigned long long, int, void*)>
c0021682:	83 c4 20             	add    esp,0x20
c0021685:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c002168d:	c7 44 24 14 a0 19 03 c0 	mov    DWORD PTR [esp+0x14],0xc00319a0
c0021695:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0021699:	58                   	pop    eax
c002169a:	5b                   	pop    ebx
c002169b:	5e                   	pop    esi
c002169c:	e9 a3 f0 fd ff       	jmp    c0000744 <memcpy>
c00216a1:	90                   	nop

c00216a2 <ISO9660::tryMount(LogicalDisk*, int)>:
c00216a2:	81 ec 10 08 00 00    	sub    esp,0x810
c00216a8:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c00216af:	83 c0 41             	add    eax,0x41
c00216b2:	0f be c0             	movsx  eax,al
c00216b5:	50                   	push   eax
c00216b6:	8d 44 24 08          	lea    eax,[esp+0x8]
c00216ba:	50                   	push   eax
c00216bb:	6a 10                	push   0x10
c00216bd:	e8 79 ff ff ff       	call   c002163b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00216c2:	83 c4 10             	add    esp,0x10
c00216c5:	31 c0                	xor    eax,eax
c00216c7:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c00216cc:	75 1d                	jne    c00216eb <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00216ce:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c00216d3:	75 16                	jne    c00216eb <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00216d5:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c00216da:	75 0f                	jne    c00216eb <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00216dc:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c00216e1:	75 08                	jne    c00216eb <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00216e3:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c00216e8:	0f 94 c0             	sete   al
c00216eb:	81 c4 0c 08 00 00    	add    esp,0x80c
c00216f1:	c3                   	ret    

c00216f2 <ISO9660::read(void*, unsigned long, void*, int*)>:
c00216f2:	55                   	push   ebp
c00216f3:	57                   	push   edi
c00216f4:	56                   	push   esi
c00216f5:	53                   	push   ebx
c00216f6:	81 ec 2c 08 00 00    	sub    esp,0x82c
c00216fc:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c0021703:	85 ed                	test   ebp,ebp
c0021705:	0f 84 d6 01 00 00    	je     c00218e1 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c002170b:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0021713:	0f 84 c8 01 00 00    	je     c00218e1 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021719:	b8 01 00 00 00       	mov    eax,0x1
c002171e:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c0021722:	0f 85 be 01 00 00    	jne    c00218e6 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0021728:	31 d2                	xor    edx,edx
c002172a:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0021731:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021734:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0021737:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002173b:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
c002173e:	89 04 24             	mov    DWORD PTR [esp],eax
c0021741:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021745:	01 f0                	add    eax,esi
c0021747:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c002174a:	11 fa                	adc    edx,edi
c002174c:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0021750:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0021754:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0021758:	19 d1                	sbb    ecx,edx
c002175a:	72 0a                	jb     c0021766 <ISO9660::read(void*, unsigned long, void*, int*)+0x74>
c002175c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021760:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021764:	eb 13                	jmp    c0021779 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0021766:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002176a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002176e:	29 f0                	sub    eax,esi
c0021770:	19 fa                	sbb    edx,edi
c0021772:	89 04 24             	mov    DWORD PTR [esp],eax
c0021775:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021779:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002177c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c002177f:	0f a4 c2 0b          	shld   edx,eax,0xb
c0021783:	51                   	push   ecx
c0021784:	c1 e0 0b             	shl    eax,0xb
c0021787:	01 c6                	add    esi,eax
c0021789:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c002178d:	11 d7                	adc    edi,edx
c002178f:	50                   	push   eax
c0021790:	89 fa                	mov    edx,edi
c0021792:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c0021796:	89 f0                	mov    eax,esi
c0021798:	53                   	push   ebx
c0021799:	0f ac d0 0b          	shrd   eax,edx,0xb
c002179d:	50                   	push   eax
c002179e:	e8 98 fe ff ff       	call   c002163b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00217a3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00217a7:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00217aa:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00217ae:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00217b4:	83 c4 10             	add    esp,0x10
c00217b7:	b8 00 08 00 00       	mov    eax,0x800
c00217bc:	29 d0                	sub    eax,edx
c00217be:	39 c1                	cmp    ecx,eax
c00217c0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00217c4:	83 d9 00             	sbb    ecx,0x0
c00217c7:	7d 1c                	jge    c00217e5 <ISO9660::read(void*, unsigned long, void*, int*)+0xf3>
c00217c9:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00217ce:	75 12                	jne    c00217e2 <ISO9660::read(void*, unsigned long, void*, int*)+0xf0>
c00217d0:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00217d7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00217dd:	e9 fb 00 00 00       	jmp    c00218dd <ISO9660::read(void*, unsigned long, void*, int*)+0x1eb>
c00217e2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00217e5:	8d 0c 13             	lea    ecx,[ebx+edx*1]
c00217e8:	31 d2                	xor    edx,edx
c00217ea:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00217ee:	39 c2                	cmp    edx,eax
c00217f0:	7d 14                	jge    c0021806 <ISO9660::read(void*, unsigned long, void*, int*)+0x114>
c00217f2:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c00217f9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00217fd:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0021800:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0021803:	42                   	inc    edx
c0021804:	eb e8                	jmp    c00217ee <ISO9660::read(void*, unsigned long, void*, int*)+0xfc>
c0021806:	89 c3                	mov    ebx,eax
c0021808:	85 c0                	test   eax,eax
c002180a:	79 02                	jns    c002180e <ISO9660::read(void*, unsigned long, void*, int*)+0x11c>
c002180c:	31 db                	xor    ebx,ebx
c002180e:	99                   	cdq    
c002180f:	01 c3                	add    ebx,eax
c0021811:	03 9c 24 4c 08 00 00 	add    ebx,DWORD PTR [esp+0x84c]
c0021818:	01 c6                	add    esi,eax
c002181a:	11 d7                	adc    edi,edx
c002181c:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0021820:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0021824:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0021827:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c002182b:	29 c6                	sub    esi,eax
c002182d:	19 d7                	sbb    edi,edx
c002182f:	89 34 24             	mov    DWORD PTR [esp],esi
c0021832:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0021836:	b8 ff 07 00 00       	mov    eax,0x7ff
c002183b:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c002183e:	b8 00 00 00 00       	mov    eax,0x0
c0021843:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021847:	7d 3e                	jge    c0021887 <ISO9660::read(void*, unsigned long, void*, int*)+0x195>
c0021849:	52                   	push   edx
c002184a:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c002184e:	50                   	push   eax
c002184f:	53                   	push   ebx
c0021850:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021854:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021858:	0f ac d0 0b          	shrd   eax,edx,0xb
c002185c:	50                   	push   eax
c002185d:	e8 d9 fd ff ff       	call   c002163b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021862:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c002186a:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c002186f:	81 c3 00 08 00 00    	add    ebx,0x800
c0021875:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c002187d:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0021882:	83 c4 10             	add    esp,0x10
c0021885:	eb af                	jmp    c0021836 <ISO9660::read(void*, unsigned long, void*, int*)+0x144>
c0021887:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002188b:	0b 04 24             	or     eax,DWORD PTR [esp]
c002188e:	74 32                	je     c00218c2 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c0021890:	50                   	push   eax
c0021891:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021895:	50                   	push   eax
c0021896:	8d 44 24 28          	lea    eax,[esp+0x28]
c002189a:	50                   	push   eax
c002189b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c002189f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00218a3:	0f ac fe 0b          	shrd   esi,edi,0xb
c00218a7:	56                   	push   esi
c00218a8:	e8 8e fd ff ff       	call   c002163b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00218ad:	83 c4 0c             	add    esp,0xc
c00218b0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00218b4:	8d 44 24 28          	lea    eax,[esp+0x28]
c00218b8:	50                   	push   eax
c00218b9:	53                   	push   ebx
c00218ba:	e8 85 ee fd ff       	call   c0000744 <memcpy>
c00218bf:	83 c4 10             	add    esp,0x10
c00218c2:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00218c9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00218cd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00218d1:	89 38                	mov    DWORD PTR [eax],edi
c00218d3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00218d7:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00218da:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00218dd:	31 c0                	xor    eax,eax
c00218df:	eb 05                	jmp    c00218e6 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c00218e1:	b8 04 00 00 00       	mov    eax,0x4
c00218e6:	81 c4 2c 08 00 00    	add    esp,0x82c
c00218ec:	5b                   	pop    ebx
c00218ed:	5e                   	pop    esi
c00218ee:	5f                   	pop    edi
c00218ef:	5d                   	pop    ebp
c00218f0:	c3                   	ret    
c00218f1:	90                   	nop

c00218f2 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c00218f2:	55                   	push   ebp
c00218f3:	57                   	push   edi
c00218f4:	56                   	push   esi
c00218f5:	53                   	push   ebx
c00218f6:	81 ec 5c 09 00 00    	sub    esp,0x95c
c00218fc:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c0021903:	85 f6                	test   esi,esi
c0021905:	0f 84 64 02 00 00    	je     c0021b6f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c002190b:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0021913:	0f 84 56 02 00 00    	je     c0021b6f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021919:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c002191c:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c002191f:	75 0a                	jne    c002192b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0021921:	b8 07 00 00 00       	mov    eax,0x7
c0021926:	e9 49 02 00 00       	jmp    c0021b74 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c002192b:	50                   	push   eax
c002192c:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021930:	50                   	push   eax
c0021931:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021938:	53                   	push   ebx
c0021939:	8b 06                	mov    eax,DWORD PTR [esi]
c002193b:	c1 e0 0b             	shl    eax,0xb
c002193e:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0021941:	c1 e8 0b             	shr    eax,0xb
c0021944:	50                   	push   eax
c0021945:	e8 f1 fc ff ff       	call   c002163b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002194a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c002194d:	83 c4 10             	add    esp,0x10
c0021950:	89 c1                	mov    ecx,eax
c0021952:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c0021955:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c002195b:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c002195e:	84 db                	test   bl,bl
c0021960:	0f 85 90 00 00 00    	jne    c00219f6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c0021966:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c002196c:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021972:	29 c7                	sub    edi,eax
c0021974:	89 fb                	mov    ebx,edi
c0021976:	c1 fb 1f             	sar    ebx,0x1f
c0021979:	01 f8                	add    eax,edi
c002197b:	11 da                	adc    edx,ebx
c002197d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021981:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021985:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0021988:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c002198b:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c002198e:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021991:	89 04 24             	mov    DWORD PTR [esp],eax
c0021994:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021998:	89 d8                	mov    eax,ebx
c002199a:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c002199d:	ba 00 00 00 00       	mov    edx,0x0
c00219a2:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00219a6:	b8 00 00 00 00       	mov    eax,0x0
c00219ab:	73 0b                	jae    c00219b8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c00219ad:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00219b0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00219b4:	29 f8                	sub    eax,edi
c00219b6:	19 da                	sbb    edx,ebx
c00219b8:	89 d3                	mov    ebx,edx
c00219ba:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c00219bd:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c00219c0:	09 c3                	or     ebx,eax
c00219c2:	0f 84 59 ff ff ff    	je     c0021921 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c00219c8:	55                   	push   ebp
c00219c9:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c00219cd:	50                   	push   eax
c00219ce:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c00219d5:	53                   	push   ebx
c00219d6:	8b 06                	mov    eax,DWORD PTR [esi]
c00219d8:	c1 e0 0b             	shl    eax,0xb
c00219db:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c00219df:	c1 e8 0b             	shr    eax,0xb
c00219e2:	50                   	push   eax
c00219e3:	e8 53 fc ff ff       	call   c002163b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00219e8:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00219eb:	83 c4 10             	add    esp,0x10
c00219ee:	25 ff 07 00 00       	and    eax,0x7ff
c00219f3:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c00219f6:	57                   	push   edi
c00219f7:	6a 28                	push   0x28
c00219f9:	6a 00                	push   0x0
c00219fb:	8d 44 24 24          	lea    eax,[esp+0x24]
c00219ff:	50                   	push   eax
c0021a00:	e8 73 ed fd ff       	call   c0000778 <memset>
c0021a05:	31 d2                	xor    edx,edx
c0021a07:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0021a0a:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021a10:	89 f8                	mov    eax,edi
c0021a12:	83 c0 21             	add    eax,0x21
c0021a15:	83 d2 00             	adc    edx,0x0
c0021a18:	89 c7                	mov    edi,eax
c0021a1a:	89 d5                	mov    ebp,edx
c0021a1c:	83 c4 10             	add    esp,0x10
c0021a1f:	31 c9                	xor    ecx,ecx
c0021a21:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c0021a28:	83 f9 28             	cmp    ecx,0x28
c0021a2b:	88 04 24             	mov    BYTE PTR [esp],al
c0021a2e:	0f 94 c2             	sete   dl
c0021a31:	88 d0                	mov    al,dl
c0021a33:	ba ff 07 00 00       	mov    edx,0x7ff
c0021a38:	39 fa                	cmp    edx,edi
c0021a3a:	ba 00 00 00 00       	mov    edx,0x0
c0021a3f:	19 ea                	sbb    edx,ebp
c0021a41:	0f 92 c2             	setb   dl
c0021a44:	09 c2                	or     edx,eax
c0021a46:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0021a4a:	0f 94 c0             	sete   al
c0021a4d:	08 d0                	or     al,dl
c0021a4f:	75 16                	jne    c0021a67 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021a51:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021a55:	74 10                	je     c0021a67 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021a57:	8a 04 24             	mov    al,BYTE PTR [esp]
c0021a5a:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0021a5e:	41                   	inc    ecx
c0021a5f:	83 c7 01             	add    edi,0x1
c0021a62:	83 d5 00             	adc    ebp,0x0
c0021a65:	eb ba                	jmp    c0021a21 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c0021a67:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0021a6e:	83 ec 0c             	sub    esp,0xc
c0021a71:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0021a75:	57                   	push   edi
c0021a76:	e8 19 ed fd ff       	call   c0000794 <strlen>
c0021a7b:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0021a83:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021a87:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c0021a8e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021a91:	5a                   	pop    edx
c0021a92:	25 ff 07 00 00       	and    eax,0x7ff
c0021a97:	01 c8                	add    eax,ecx
c0021a99:	59                   	pop    ecx
c0021a9a:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0021aa0:	83 e0 02             	and    eax,0x2
c0021aa3:	3c 01                	cmp    al,0x1
c0021aa5:	19 c0                	sbb    eax,eax
c0021aa7:	83 c0 02             	add    eax,0x2
c0021aaa:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021aae:	57                   	push   edi
c0021aaf:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0021ab3:	50                   	push   eax
c0021ab4:	e8 7b ed fd ff       	call   c0000834 <strcpy>
c0021ab9:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0021abd:	83 c4 10             	add    esp,0x10
c0021ac0:	84 c0                	test   al,al
c0021ac2:	75 21                	jne    c0021ae5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c0021ac4:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0021acc:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021ad4:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021adc:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021ae3:	eb 28                	jmp    c0021b0d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021ae5:	fe c8                	dec    al
c0021ae7:	75 24                	jne    c0021b0d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021ae9:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021af1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021af9:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021b01:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0021b08:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0021b0d:	0f b6 fb             	movzx  edi,bl
c0021b10:	31 db                	xor    ebx,ebx
c0021b12:	50                   	push   eax
c0021b13:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c0021b1a:	8d 44 24 48          	lea    eax,[esp+0x48]
c0021b1e:	50                   	push   eax
c0021b1f:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c0021b26:	e8 19 ec fd ff       	call   c0000744 <memcpy>
c0021b2b:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c0021b32:	89 f9                	mov    ecx,edi
c0021b34:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021b3a:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c0021b3d:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021b40:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c0021b43:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021b46:	83 c4 10             	add    esp,0x10
c0021b49:	39 c7                	cmp    edi,eax
c0021b4b:	89 df                	mov    edi,ebx
c0021b4d:	19 d7                	sbb    edi,edx
c0021b4f:	72 10                	jb     c0021b61 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021b51:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0021b58:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0021b5f:	eb 0a                	jmp    c0021b6b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c0021b61:	29 c8                	sub    eax,ecx
c0021b63:	19 da                	sbb    edx,ebx
c0021b65:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021b68:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021b6b:	31 c0                	xor    eax,eax
c0021b6d:	eb 05                	jmp    c0021b74 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021b6f:	b8 04 00 00 00       	mov    eax,0x4
c0021b74:	81 c4 5c 09 00 00    	add    esp,0x95c
c0021b7a:	5b                   	pop    ebx
c0021b7b:	5e                   	pop    esi
c0021b7c:	5f                   	pop    edi
c0021b7d:	5d                   	pop    ebp
c0021b7e:	c3                   	ret    

c0021b7f <readRoot(unsigned int*, unsigned int*, char)>:
c0021b7f:	81 ec 40 08 00 00    	sub    esp,0x840
c0021b85:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0021b8d:	50                   	push   eax
c0021b8e:	8d 44 24 38          	lea    eax,[esp+0x38]
c0021b92:	50                   	push   eax
c0021b93:	6a 10                	push   0x10
c0021b95:	e8 a1 fa ff ff       	call   c002163b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021b9a:	83 c4 0c             	add    esp,0xc
c0021b9d:	6a 22                	push   0x22
c0021b9f:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c0021ba6:	50                   	push   eax
c0021ba7:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0021bab:	50                   	push   eax
c0021bac:	e8 93 eb fd ff       	call   c0000744 <memcpy>
c0021bb1:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021bb8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021bbc:	89 10                	mov    DWORD PTR [eax],edx
c0021bbe:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0021bc5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021bc9:	89 10                	mov    DWORD PTR [eax],edx
c0021bcb:	b0 01                	mov    al,0x1
c0021bcd:	81 c4 4c 08 00 00    	add    esp,0x84c
c0021bd3:	c3                   	ret    

c0021bd4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021bd4:	55                   	push   ebp
c0021bd5:	57                   	push   edi
c0021bd6:	56                   	push   esi
c0021bd7:	53                   	push   ebx
c0021bd8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021bde:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0021be5:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021bec:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021bf0:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021bf4:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021bf8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021bfc:	75 03                	jne    c0021c01 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021bfe:	83 c3 02             	add    ebx,0x2
c0021c01:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0021c04:	75 03                	jne    c0021c09 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0021c06:	43                   	inc    ebx
c0021c07:	eb f8                	jmp    c0021c01 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021c09:	51                   	push   ecx
c0021c0a:	68 00 01 00 00       	push   0x100
c0021c0f:	6a 00                	push   0x0
c0021c11:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021c15:	50                   	push   eax
c0021c16:	e8 5d eb fd ff       	call   c0000778 <memset>
c0021c1b:	83 c4 10             	add    esp,0x10
c0021c1e:	31 d2                	xor    edx,edx
c0021c20:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021c23:	84 c0                	test   al,al
c0021c25:	74 21                	je     c0021c48 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0021c27:	3c 2f                	cmp    al,0x2f
c0021c29:	75 0b                	jne    c0021c36 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0021c2b:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021c2f:	bd 01 00 00 00       	mov    ebp,0x1
c0021c34:	eb 14                	jmp    c0021c4a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0021c36:	8d 48 9f             	lea    ecx,[eax-0x61]
c0021c39:	80 f9 19             	cmp    cl,0x19
c0021c3c:	77 03                	ja     c0021c41 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021c3e:	83 e8 20             	sub    eax,0x20
c0021c41:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0021c45:	42                   	inc    edx
c0021c46:	eb d8                	jmp    c0021c20 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021c48:	31 ed                	xor    ebp,ebp
c0021c4a:	83 ec 0c             	sub    esp,0xc
c0021c4d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0021c54:	e8 e7 db fe ff       	call   c000f840 <malloc>
c0021c59:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0021c60:	89 c6                	mov    esi,eax
c0021c62:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021c68:	c1 ef 0b             	shr    edi,0xb
c0021c6b:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0021c72:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0021c76:	83 c4 10             	add    esp,0x10
c0021c79:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0021c7e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021c82:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0021c89:	74 28                	je     c0021cb3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0021c8b:	52                   	push   edx
c0021c8c:	57                   	push   edi
c0021c8d:	50                   	push   eax
c0021c8e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021c92:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0021c99:	e8 9d f9 ff ff       	call   c002163b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021c9e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021ca2:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0021ca9:	05 00 08 00 00       	add    eax,0x800
c0021cae:	83 c4 10             	add    esp,0x10
c0021cb1:	eb cb                	jmp    c0021c7e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0021cb3:	83 ec 0c             	sub    esp,0xc
c0021cb6:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0021cba:	57                   	push   edi
c0021cbb:	e8 d4 ea fd ff       	call   c0000794 <strlen>
c0021cc0:	50                   	push   eax
c0021cc1:	57                   	push   edi
c0021cc2:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0021cc9:	56                   	push   esi
c0021cca:	e8 2a f9 ff ff       	call   c00215f9 <__memmem(unsigned char*, int, unsigned char*, int)>
c0021ccf:	83 c4 20             	add    esp,0x20
c0021cd2:	85 c0                	test   eax,eax
c0021cd4:	75 13                	jne    c0021ce9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0021cd6:	83 ec 0c             	sub    esp,0xc
c0021cd9:	56                   	push   esi
c0021cda:	e8 71 db fe ff       	call   c000f850 <free>
c0021cdf:	83 c4 10             	add    esp,0x10
c0021ce2:	31 c0                	xor    eax,eax
c0021ce4:	e9 b3 00 00 00       	jmp    c0021d9c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021ce9:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0021ced:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0021cf1:	c1 e7 08             	shl    edi,0x8
c0021cf4:	c1 e2 10             	shl    edx,0x10
c0021cf7:	09 d7                	or     edi,edx
c0021cf9:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0021cfd:	09 d7                	or     edi,edx
c0021cff:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0021d03:	c1 e2 18             	shl    edx,0x18
c0021d06:	09 d7                	or     edi,edx
c0021d08:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0021d0c:	89 d1                	mov    ecx,edx
c0021d0e:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0021d12:	c1 e1 08             	shl    ecx,0x8
c0021d15:	c1 e2 10             	shl    edx,0x10
c0021d18:	09 ca                	or     edx,ecx
c0021d1a:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0021d1e:	09 ca                	or     edx,ecx
c0021d20:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0021d24:	c1 e1 18             	shl    ecx,0x18
c0021d27:	09 ca                	or     edx,ecx
c0021d29:	89 e9                	mov    ecx,ebp
c0021d2b:	84 c9                	test   cl,cl
c0021d2d:	74 3c                	je     c0021d6b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0021d2f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021d33:	83 ec 0c             	sub    esp,0xc
c0021d36:	56                   	push   esi
c0021d37:	e8 14 db fe ff       	call   c000f850 <free>
c0021d3c:	83 c4 0c             	add    esp,0xc
c0021d3f:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021d46:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0021d4b:	50                   	push   eax
c0021d4c:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021d53:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021d5a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021d5e:	52                   	push   edx
c0021d5f:	57                   	push   edi
c0021d60:	53                   	push   ebx
c0021d61:	e8 6e fe ff ff       	call   c0021bd4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021d66:	83 c4 20             	add    esp,0x20
c0021d69:	eb 31                	jmp    c0021d9c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021d6b:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0021d6e:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0021d75:	d0 e8                	shr    al,1
c0021d77:	89 3b                	mov    DWORD PTR [ebx],edi
c0021d79:	83 e0 01             	and    eax,0x1
c0021d7c:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0021d83:	83 ec 0c             	sub    esp,0xc
c0021d86:	89 13                	mov    DWORD PTR [ebx],edx
c0021d88:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0021d8f:	89 03                	mov    DWORD PTR [ebx],eax
c0021d91:	56                   	push   esi
c0021d92:	e8 b9 da fe ff       	call   c000f850 <free>
c0021d97:	83 c4 10             	add    esp,0x10
c0021d9a:	b0 01                	mov    al,0x1
c0021d9c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021da2:	5b                   	pop    ebx
c0021da3:	5e                   	pop    esi
c0021da4:	5f                   	pop    edi
c0021da5:	5d                   	pop    ebp
c0021da6:	c3                   	ret    

c0021da7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0021da7:	55                   	push   ebp
c0021da8:	57                   	push   edi
c0021da9:	56                   	push   esi
c0021daa:	53                   	push   ebx
c0021dab:	83 ec 20             	sub    esp,0x20
c0021dae:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021db2:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0021db6:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0021dba:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021dc2:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021dca:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0021dcf:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0021dd5:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0021ddb:	57                   	push   edi
c0021ddc:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021de0:	50                   	push   eax
c0021de1:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021de5:	50                   	push   eax
c0021de6:	e8 94 fd ff ff       	call   c0021b7f <readRoot(unsigned int*, unsigned int*, char)>
c0021deb:	5a                   	pop    edx
c0021dec:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021df0:	e8 9f e9 fd ff       	call   c0000794 <strlen>
c0021df5:	83 c4 10             	add    esp,0x10
c0021df8:	83 f8 03             	cmp    eax,0x3
c0021dfb:	77 17                	ja     c0021e14 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021dfd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021e01:	89 03                	mov    DWORD PTR [ebx],eax
c0021e03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021e07:	89 06                	mov    DWORD PTR [esi],eax
c0021e09:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0021e10:	b0 01                	mov    al,0x1
c0021e12:	eb 19                	jmp    c0021e2d <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0021e14:	50                   	push   eax
c0021e15:	55                   	push   ebp
c0021e16:	57                   	push   edi
c0021e17:	56                   	push   esi
c0021e18:	53                   	push   ebx
c0021e19:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021e1d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021e21:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021e25:	e8 aa fd ff ff       	call   c0021bd4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021e2a:	83 c4 20             	add    esp,0x20
c0021e2d:	83 c4 1c             	add    esp,0x1c
c0021e30:	5b                   	pop    ebx
c0021e31:	5e                   	pop    esi
c0021e32:	5f                   	pop    edi
c0021e33:	5d                   	pop    ebp
c0021e34:	c3                   	ret    
c0021e35:	90                   	nop

c0021e36 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0021e36:	57                   	push   edi
c0021e37:	56                   	push   esi
c0021e38:	53                   	push   ebx
c0021e39:	83 ec 10             	sub    esp,0x10
c0021e3c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021e40:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021e44:	85 ff                	test   edi,edi
c0021e46:	0f 84 9d 00 00 00    	je     c0021ee9 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021e4c:	85 f6                	test   esi,esi
c0021e4e:	0f 84 95 00 00 00    	je     c0021ee9 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021e54:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0021e59:	74 17                	je     c0021e72 <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c0021e5b:	83 ec 0c             	sub    esp,0xc
c0021e5e:	68 3b c7 02 c0       	push   0xc002c73b
c0021e63:	e8 30 0f ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0021e68:	83 c4 10             	add    esp,0x10
c0021e6b:	b8 03 00 00 00       	mov    eax,0x3
c0021e70:	eb 7c                	jmp    c0021eee <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021e72:	83 ec 0c             	sub    esp,0xc
c0021e75:	6a 1c                	push   0x1c
c0021e77:	e8 c4 d9 fe ff       	call   c000f840 <malloc>
c0021e7c:	89 07                	mov    DWORD PTR [edi],eax
c0021e7e:	89 c3                	mov    ebx,eax
c0021e80:	58                   	pop    eax
c0021e81:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021e85:	50                   	push   eax
c0021e86:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021e89:	50                   	push   eax
c0021e8a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021e8e:	50                   	push   eax
c0021e8f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021e93:	50                   	push   eax
c0021e94:	56                   	push   esi
c0021e95:	e8 0d ff ff ff       	call   c0021da7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021e9a:	83 c4 20             	add    esp,0x20
c0021e9d:	84 c0                	test   al,al
c0021e9f:	74 07                	je     c0021ea8 <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c0021ea1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021ea6:	74 0b                	je     c0021eb3 <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c0021ea8:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021eac:	b8 01 00 00 00       	mov    eax,0x1
c0021eb1:	eb 3b                	jmp    c0021eee <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021eb3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021eb7:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021ebb:	89 03                	mov    DWORD PTR [ebx],eax
c0021ebd:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021ec4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021ec8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021ecf:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021ed6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021ed9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021ee0:	8a 06                	mov    al,BYTE PTR [esi]
c0021ee2:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021ee5:	31 c0                	xor    eax,eax
c0021ee7:	eb 05                	jmp    c0021eee <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021ee9:	b8 04 00 00 00       	mov    eax,0x4
c0021eee:	83 c4 10             	add    esp,0x10
c0021ef1:	5b                   	pop    ebx
c0021ef2:	5e                   	pop    esi
c0021ef3:	5f                   	pop    edi
c0021ef4:	c3                   	ret    
c0021ef5:	90                   	nop

c0021ef6 <ISO9660::exists(char const*)>:
c0021ef6:	83 ec 28             	sub    esp,0x28
c0021ef9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021efd:	8d 54 24 18          	lea    edx,[esp+0x18]
c0021f01:	52                   	push   edx
c0021f02:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0021f05:	52                   	push   edx
c0021f06:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021f0a:	52                   	push   edx
c0021f0b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021f0f:	52                   	push   edx
c0021f10:	50                   	push   eax
c0021f11:	e8 91 fe ff ff       	call   c0021da7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021f16:	83 c4 3c             	add    esp,0x3c
c0021f19:	c3                   	ret    

c0021f1a <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0021f1a:	56                   	push   esi
c0021f1b:	53                   	push   ebx
c0021f1c:	83 ec 14             	sub    esp,0x14
c0021f1f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0021f23:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0021f27:	85 db                	test   ebx,ebx
c0021f29:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0021f2d:	0f 94 c2             	sete   dl
c0021f30:	85 f6                	test   esi,esi
c0021f32:	0f 94 c0             	sete   al
c0021f35:	08 c2                	or     dl,al
c0021f37:	75 68                	jne    c0021fa1 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021f39:	85 c9                	test   ecx,ecx
c0021f3b:	74 64                	je     c0021fa1 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021f3d:	83 ec 0c             	sub    esp,0xc
c0021f40:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0021f43:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021f47:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021f4d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021f54:	50                   	push   eax
c0021f55:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0021f58:	50                   	push   eax
c0021f59:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021f5d:	50                   	push   eax
c0021f5e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021f62:	50                   	push   eax
c0021f63:	51                   	push   ecx
c0021f64:	e8 3e fe ff ff       	call   c0021da7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021f69:	83 c4 20             	add    esp,0x20
c0021f6c:	ba 01 00 00 00       	mov    edx,0x1
c0021f71:	84 c0                	test   al,al
c0021f73:	74 31                	je     c0021fa6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021f75:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021f79:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021f80:	89 03                	mov    DWORD PTR [ebx],eax
c0021f82:	ba 00 00 00 00       	mov    edx,0x0
c0021f87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021f8b:	85 c0                	test   eax,eax
c0021f8d:	0f 95 06             	setne  BYTE PTR [esi]
c0021f90:	74 14                	je     c0021fa6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021f92:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021f98:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021f9f:	eb 05                	jmp    c0021fa6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021fa1:	ba 04 00 00 00       	mov    edx,0x4
c0021fa6:	83 c4 14             	add    esp,0x14
c0021fa9:	89 d0                	mov    eax,edx
c0021fab:	5b                   	pop    ebx
c0021fac:	5e                   	pop    esi
c0021fad:	c3                   	ret    

c0021fae <ISO9660::openDir(char const*, void**)>:
c0021fae:	57                   	push   edi
c0021faf:	56                   	push   esi
c0021fb0:	53                   	push   ebx
c0021fb1:	83 ec 10             	sub    esp,0x10
c0021fb4:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021fb8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021fbc:	85 ff                	test   edi,edi
c0021fbe:	0f 84 95 00 00 00    	je     c0022059 <ISO9660::openDir(char const*, void**)+0xab>
c0021fc4:	85 f6                	test   esi,esi
c0021fc6:	0f 84 8d 00 00 00    	je     c0022059 <ISO9660::openDir(char const*, void**)+0xab>
c0021fcc:	83 ec 0c             	sub    esp,0xc
c0021fcf:	6a 1c                	push   0x1c
c0021fd1:	e8 6a d8 fe ff       	call   c000f840 <malloc>
c0021fd6:	89 07                	mov    DWORD PTR [edi],eax
c0021fd8:	89 c3                	mov    ebx,eax
c0021fda:	59                   	pop    ecx
c0021fdb:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021fdf:	50                   	push   eax
c0021fe0:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021fe3:	50                   	push   eax
c0021fe4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021fe8:	50                   	push   eax
c0021fe9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021fed:	50                   	push   eax
c0021fee:	56                   	push   esi
c0021fef:	e8 b3 fd ff ff       	call   c0021da7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021ff4:	83 c4 20             	add    esp,0x20
c0021ff7:	84 c0                	test   al,al
c0021ff9:	74 07                	je     c0022002 <ISO9660::openDir(char const*, void**)+0x54>
c0021ffb:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0022000:	75 21                	jne    c0022023 <ISO9660::openDir(char const*, void**)+0x75>
c0022002:	0f b6 c0             	movzx  eax,al
c0022005:	52                   	push   edx
c0022006:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002200a:	50                   	push   eax
c002200b:	68 61 c7 02 c0       	push   0xc002c761
c0022010:	e8 83 0d ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0022015:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0022019:	83 c4 10             	add    esp,0x10
c002201c:	b8 01 00 00 00       	mov    eax,0x1
c0022021:	eb 3b                	jmp    c002205e <ISO9660::openDir(char const*, void**)+0xb0>
c0022023:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022027:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c002202b:	89 03                	mov    DWORD PTR [ebx],eax
c002202d:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0022034:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022038:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c002203f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022046:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022049:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0022050:	8a 06                	mov    al,BYTE PTR [esi]
c0022052:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0022055:	31 c0                	xor    eax,eax
c0022057:	eb 05                	jmp    c002205e <ISO9660::openDir(char const*, void**)+0xb0>
c0022059:	b8 04 00 00 00       	mov    eax,0x4
c002205e:	83 c4 10             	add    esp,0x10
c0022061:	5b                   	pop    ebx
c0022062:	5e                   	pop    esi
c0022063:	5f                   	pop    edi
c0022064:	c3                   	ret    
c0022065:	90                   	nop

c0022066 <ISO9660::ISO9660()>:
c0022066:	83 ec 0c             	sub    esp,0xc
c0022069:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002206d:	83 ec 0c             	sub    esp,0xc
c0022070:	50                   	push   eax
c0022071:	e8 26 10 ff ff       	call   c001309c <Filesystem::Filesystem()>
c0022076:	83 c4 10             	add    esp,0x10
c0022079:	ba 84 c7 02 c0       	mov    edx,0xc002c784
c002207e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022082:	89 10                	mov    DWORD PTR [eax],edx
c0022084:	90                   	nop
c0022085:	83 c4 0c             	add    esp,0xc
c0022088:	c3                   	ret    
c0022089:	90                   	nop

c002208a <SoundChannel::~SoundChannel()>:
c002208a:	83 ec 0c             	sub    esp,0xc
c002208d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022091:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0022094:	83 ec 0c             	sub    esp,0xc
c0022097:	50                   	push   eax
c0022098:	e8 b3 d7 fe ff       	call   c000f850 <free>
c002209d:	83 c4 10             	add    esp,0x10
c00220a0:	90                   	nop
c00220a1:	83 c4 0c             	add    esp,0xc
c00220a4:	c3                   	ret    
c00220a5:	90                   	nop

c00220a6 <SoundChannel::setSpeed(float)>:
c00220a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00220ae:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00220b1:	c3                   	ret    

c00220b2 <SoundChannel::getSpeed()>:
c00220b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220b6:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00220b9:	c3                   	ret    

c00220ba <SoundChannel::setVolume(int)>:
c00220ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00220be:	83 f8 64             	cmp    eax,0x64
c00220c1:	7e 05                	jle    c00220c8 <SoundChannel::setVolume(int)+0xe>
c00220c3:	b8 64 00 00 00       	mov    eax,0x64
c00220c8:	85 c0                	test   eax,eax
c00220ca:	79 02                	jns    c00220ce <SoundChannel::setVolume(int)+0x14>
c00220cc:	31 c0                	xor    eax,eax
c00220ce:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00220d2:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c00220d5:	c3                   	ret    

c00220d6 <SoundChannel::getVolume()>:
c00220d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220da:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00220dd:	c3                   	ret    

c00220de <SoundChannel::pause()>:
c00220de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220e2:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c00220e6:	c3                   	ret    
c00220e7:	90                   	nop

c00220e8 <SoundChannel::SoundChannel(int, int, int, int)>:
c00220e8:	83 ec 1c             	sub    esp,0x1c
c00220eb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00220ef:	e8 ea ff ff ff       	call   c00220de <SoundChannel::pause()>
c00220f4:	83 c4 04             	add    esp,0x4
c00220f7:	6a 50                	push   0x50
c00220f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00220fd:	e8 b8 ff ff ff       	call   c00220ba <SoundChannel::setVolume(int)>
c0022102:	83 c4 08             	add    esp,0x8
c0022105:	a1 fc c7 02 c0       	mov    eax,ds:0xc002c7fc
c002210a:	50                   	push   eax
c002210b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c002210f:	e8 92 ff ff ff       	call   c00220a6 <SoundChannel::setSpeed(float)>
c0022114:	83 c4 08             	add    esp,0x8
c0022117:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002211b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002211f:	89 10                	mov    DWORD PTR [eax],edx
c0022121:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022125:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022129:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002212c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022130:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022134:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022137:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c002213c:	75 23                	jne    c0022161 <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c002213e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022142:	8b 10                	mov    edx,DWORD PTR [eax]
c0022144:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022148:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002214b:	0f af c2             	imul   eax,edx
c002214e:	85 c0                	test   eax,eax
c0022150:	79 03                	jns    c0022155 <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c0022152:	83 c0 03             	add    eax,0x3
c0022155:	c1 f8 02             	sar    eax,0x2
c0022158:	05 a0 0f 00 00       	add    eax,0xfa0
c002215d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022161:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022165:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0022169:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c002216c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022170:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0022177:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002217b:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0022182:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022186:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022189:	c1 e0 02             	shl    eax,0x2
c002218c:	83 ec 0c             	sub    esp,0xc
c002218f:	50                   	push   eax
c0022190:	e8 ab d6 fe ff       	call   c000f840 <malloc>
c0022195:	83 c4 10             	add    esp,0x10
c0022198:	89 c2                	mov    edx,eax
c002219a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002219e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00221a1:	83 ec 04             	sub    esp,0x4
c00221a4:	8d 44 24 08          	lea    eax,[esp+0x8]
c00221a8:	50                   	push   eax
c00221a9:	6a 01                	push   0x1
c00221ab:	6a 04                	push   0x4
c00221ad:	e8 ed 69 fe ff       	call   c0008b9f <src_new>
c00221b2:	83 c4 10             	add    esp,0x10
c00221b5:	89 c2                	mov    edx,eax
c00221b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00221bb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00221be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221c2:	85 c0                	test   eax,eax
c00221c4:	74 10                	je     c00221d6 <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c00221c6:	83 ec 0c             	sub    esp,0xc
c00221c9:	68 e0 c7 02 c0       	push   0xc002c7e0
c00221ce:	e8 a0 82 ff ff       	call   c001a473 <Krnl::panic(char const*)>
c00221d3:	83 c4 10             	add    esp,0x10
c00221d6:	a0 a0 25 03 c0       	mov    al,ds:0xc00325a0
c00221db:	83 f0 01             	xor    eax,0x1
c00221de:	84 c0                	test   al,al
c00221e0:	74 57                	je     c0022239 <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c00221e2:	a1 00 c8 02 c0       	mov    eax,ds:0xc002c800
c00221e7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00221eb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00221f3:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00221fb:	7f 35                	jg     c0022232 <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c00221fd:	83 ec 0c             	sub    esp,0xc
c0022200:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0022204:	e8 9e 4f 00 00       	call   c00271a7 <__floatsisf>
c0022209:	83 c4 10             	add    esp,0x10
c002220c:	8b 15 00 c8 02 c0    	mov    edx,DWORD PTR ds:0xc002c800
c0022212:	83 ec 08             	sub    esp,0x8
c0022215:	52                   	push   edx
c0022216:	50                   	push   eax
c0022217:	e8 9d 4b 00 00       	call   c0026db9 <__mulsf3>
c002221c:	83 c4 10             	add    esp,0x10
c002221f:	89 c2                	mov    edx,eax
c0022221:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022225:	89 14 85 a0 21 03 c0 	mov    DWORD PTR [eax*4-0x3ffcde60],edx
c002222c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022230:	eb c1                	jmp    c00221f3 <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c0022232:	c6 05 a0 25 03 c0 01 	mov    BYTE PTR ds:0xc00325a0,0x1
c0022239:	90                   	nop
c002223a:	83 c4 1c             	add    esp,0x1c
c002223d:	c3                   	ret    

c002223e <SoundChannel::play()>:
c002223e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022242:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c0022246:	c3                   	ret    
c0022247:	90                   	nop

c0022248 <SoundChannel::paused()>:
c0022248:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002224c:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c002224f:	c3                   	ret    

c0022250 <SoundChannel::getSampleRate()>:
c0022250:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022254:	8b 00                	mov    eax,DWORD PTR [eax]
c0022256:	c3                   	ret    
c0022257:	90                   	nop

c0022258 <SoundChannel::getBits()>:
c0022258:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002225c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002225f:	c3                   	ret    

c0022260 <SoundChannel::getBufferUsed()>:
c0022260:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022264:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0022267:	c3                   	ret    

c0022268 <SoundChannel::getBufferSize()>:
c0022268:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002226c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c002226f:	c3                   	ret    

c0022270 <SoundChannel::unbuffer(float*, int, int)>:
c0022270:	56                   	push   esi
c0022271:	53                   	push   ebx
c0022272:	83 ec 40             	sub    esp,0x40
c0022275:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0022279:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c002227c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022280:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0022283:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0022287:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002228b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c002228f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0022293:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022297:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c002229b:	e8 07 4f 00 00       	call   c00271a7 <__floatsisf>
c00222a0:	5a                   	pop    edx
c00222a1:	89 c6                	mov    esi,eax
c00222a3:	ff 33                	push   DWORD PTR [ebx]
c00222a5:	e8 fd 4e 00 00       	call   c00271a7 <__floatsisf>
c00222aa:	59                   	pop    ecx
c00222ab:	5a                   	pop    edx
c00222ac:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00222af:	50                   	push   eax
c00222b0:	e8 04 4b 00 00       	call   c0026db9 <__mulsf3>
c00222b5:	59                   	pop    ecx
c00222b6:	5a                   	pop    edx
c00222b7:	50                   	push   eax
c00222b8:	56                   	push   esi
c00222b9:	e8 be 4c 00 00       	call   c0026f7c <__divsf3>
c00222be:	89 04 24             	mov    DWORD PTR [esp],eax
c00222c1:	e8 b1 61 00 00       	call   c0028477 <__extendsfdf2>
c00222c6:	59                   	pop    ecx
c00222c7:	5e                   	pop    esi
c00222c8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00222cc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00222d0:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00222d8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00222dc:	50                   	push   eax
c00222dd:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c00222e0:	e8 af 64 fe ff       	call   c0008794 <src_process>
c00222e5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00222e9:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00222ec:	83 c4 0c             	add    esp,0xc
c00222ef:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00222f2:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c00222f5:	29 d0                	sub    eax,edx
c00222f7:	c1 e0 02             	shl    eax,0x2
c00222fa:	50                   	push   eax
c00222fb:	8d 04 91             	lea    eax,[ecx+edx*4]
c00222fe:	50                   	push   eax
c00222ff:	51                   	push   ecx
c0022300:	e8 77 e3 fd ff       	call   c000067c <memmove>
c0022305:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022309:	83 c4 44             	add    esp,0x44
c002230c:	5b                   	pop    ebx
c002230d:	5e                   	pop    esi
c002230e:	c3                   	ret    
c002230f:	90                   	nop

c0022310 <SoundChannel::buffer8(unsigned char*, int)>:
c0022310:	55                   	push   ebp
c0022311:	57                   	push   edi
c0022312:	56                   	push   esi
c0022313:	53                   	push   ebx
c0022314:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022318:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c002231c:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c002231f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0022323:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022326:	74 7a                	je     c00223a2 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022328:	85 ff                	test   edi,edi
c002232a:	7e 76                	jle    c00223a2 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c002232c:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0022330:	8d 70 01             	lea    esi,[eax+0x1]
c0022333:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022336:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022339:	8b 1c 9d a0 21 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcde60]
c0022340:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022343:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022346:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022349:	74 5e                	je     c00223a9 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c002234b:	83 ff 01             	cmp    edi,0x1
c002234e:	74 4b                	je     c002239b <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0022350:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0022354:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022357:	8d 70 01             	lea    esi,[eax+0x1]
c002235a:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c002235d:	8b 1c 9d a0 21 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcde60]
c0022364:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022367:	b8 02 00 00 00       	mov    eax,0x2
c002236c:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c002236f:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022372:	75 23                	jne    c0022397 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0022374:	eb 27                	jmp    c002239d <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022376:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c002237b:	8d 71 01             	lea    esi,[ecx+0x1]
c002237e:	40                   	inc    eax
c002237f:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022382:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0022385:	8b 1c 9d a0 21 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcde60]
c002238c:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c002238f:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022392:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022395:	74 06                	je     c002239d <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022397:	39 c7                	cmp    edi,eax
c0022399:	75 db                	jne    c0022376 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c002239b:	89 f8                	mov    eax,edi
c002239d:	5b                   	pop    ebx
c002239e:	5e                   	pop    esi
c002239f:	5f                   	pop    edi
c00223a0:	5d                   	pop    ebp
c00223a1:	c3                   	ret    
c00223a2:	5b                   	pop    ebx
c00223a3:	31 c0                	xor    eax,eax
c00223a5:	5e                   	pop    esi
c00223a6:	5f                   	pop    edi
c00223a7:	5d                   	pop    ebp
c00223a8:	c3                   	ret    
c00223a9:	b8 01 00 00 00       	mov    eax,0x1
c00223ae:	eb ed                	jmp    c002239d <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c00223b0 <SoundDevice::SoundDevice(char const*)>:
c00223b0:	83 ec 1c             	sub    esp,0x1c
c00223b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223b7:	83 ec 08             	sub    esp,0x8
c00223ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00223be:	50                   	push   eax
c00223bf:	e8 ea 1f ff ff       	call   c00143ae <Device::Device(char const*)>
c00223c4:	83 c4 10             	add    esp,0x10
c00223c7:	ba 0c c8 02 c0       	mov    edx,0xc002c80c
c00223cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223d0:	89 10                	mov    DWORD PTR [eax],edx
c00223d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223d6:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c00223e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223e4:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00223ee:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00223f6:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00223fb:	7f 19                	jg     c0022416 <SoundDevice::SoundDevice(char const*)+0x66>
c00223fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022401:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022405:	83 c2 54             	add    edx,0x54
c0022408:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0022410:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022414:	eb e0                	jmp    c00223f6 <SoundDevice::SoundDevice(char const*)+0x46>
c0022416:	90                   	nop
c0022417:	83 c4 1c             	add    esp,0x1c
c002241a:	c3                   	ret    
c002241b:	90                   	nop

c002241c <SoundDevice::~SoundDevice()>:
c002241c:	53                   	push   ebx
c002241d:	83 ec 18             	sub    esp,0x18
c0022420:	ba 0c c8 02 c0       	mov    edx,0xc002c80c
c0022425:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022429:	89 10                	mov    DWORD PTR [eax],edx
c002242b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022433:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022438:	7f 46                	jg     c0022480 <SoundDevice::~SoundDevice()+0x64>
c002243a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002243e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022442:	83 c2 54             	add    edx,0x54
c0022445:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0022449:	85 c0                	test   eax,eax
c002244b:	74 2d                	je     c002247a <SoundDevice::~SoundDevice()+0x5e>
c002244d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022451:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022455:	83 c2 54             	add    edx,0x54
c0022458:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c002245c:	85 db                	test   ebx,ebx
c002245e:	74 1a                	je     c002247a <SoundDevice::~SoundDevice()+0x5e>
c0022460:	83 ec 0c             	sub    esp,0xc
c0022463:	53                   	push   ebx
c0022464:	e8 21 fc ff ff       	call   c002208a <SoundChannel::~SoundChannel()>
c0022469:	83 c4 10             	add    esp,0x10
c002246c:	83 ec 08             	sub    esp,0x8
c002246f:	6a 2c                	push   0x2c
c0022471:	53                   	push   ebx
c0022472:	e8 41 08 ff ff       	call   c0012cb8 <operator delete(void*, unsigned long)>
c0022477:	83 c4 10             	add    esp,0x10
c002247a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002247e:	eb b3                	jmp    c0022433 <SoundDevice::~SoundDevice()+0x17>
c0022480:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022484:	83 ec 0c             	sub    esp,0xc
c0022487:	50                   	push   eax
c0022488:	e8 03 1c ff ff       	call   c0014090 <Device::~Device()>
c002248d:	83 c4 10             	add    esp,0x10
c0022490:	90                   	nop
c0022491:	83 c4 18             	add    esp,0x18
c0022494:	5b                   	pop    ebx
c0022495:	c3                   	ret    

c0022496 <SoundDevice::~SoundDevice()>:
c0022496:	83 ec 0c             	sub    esp,0xc
c0022499:	83 ec 0c             	sub    esp,0xc
c002249c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00224a0:	e8 77 ff ff ff       	call   c002241c <SoundDevice::~SoundDevice()>
c00224a5:	83 c4 10             	add    esp,0x10
c00224a8:	83 ec 08             	sub    esp,0x8
c00224ab:	68 e4 01 00 00       	push   0x1e4
c00224b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00224b4:	e8 ff 07 ff ff       	call   c0012cb8 <operator delete(void*, unsigned long)>
c00224b9:	83 c4 10             	add    esp,0x10
c00224bc:	83 c4 0c             	add    esp,0xc
c00224bf:	c3                   	ret    

c00224c0 <SoundDevice::getFreeChannelNum()>:
c00224c0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00224c4:	31 c0                	xor    eax,eax
c00224c6:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c00224ce:	74 09                	je     c00224d9 <SoundDevice::getFreeChannelNum()+0x19>
c00224d0:	40                   	inc    eax
c00224d1:	83 f8 20             	cmp    eax,0x20
c00224d4:	75 f0                	jne    c00224c6 <SoundDevice::getFreeChannelNum()+0x6>
c00224d6:	83 c8 ff             	or     eax,0xffffffff
c00224d9:	c3                   	ret    

c00224da <SoundDevice::addChannel(SoundChannel*)>:
c00224da:	56                   	push   esi
c00224db:	53                   	push   ebx
c00224dc:	51                   	push   ecx
c00224dd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00224e1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00224e5:	53                   	push   ebx
c00224e6:	e8 d5 ff ff ff       	call   c00224c0 <SoundDevice::getFreeChannelNum()>
c00224eb:	5a                   	pop    edx
c00224ec:	83 f8 ff             	cmp    eax,0xffffffff
c00224ef:	74 51                	je     c0022542 <SoundDevice::addChannel(SoundChannel*)+0x68>
c00224f1:	85 f6                	test   esi,esi
c00224f3:	74 4d                	je     c0022542 <SoundDevice::addChannel(SoundChannel*)+0x68>
c00224f5:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c00224fc:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0022503:	75 30                	jne    c0022535 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c0022505:	83 ec 0c             	sub    esp,0xc
c0022508:	56                   	push   esi
c0022509:	e8 42 fd ff ff       	call   c0022250 <SoundChannel::getSampleRate()>
c002250e:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c0022514:	89 34 24             	mov    DWORD PTR [esp],esi
c0022517:	e8 3c fd ff ff       	call   c0022258 <SoundChannel::getBits()>
c002251c:	83 c4 0c             	add    esp,0xc
c002251f:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0022525:	8b 13                	mov    edx,DWORD PTR [ebx]
c0022527:	50                   	push   eax
c0022528:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c002252e:	53                   	push   ebx
c002252f:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0022532:	83 c4 10             	add    esp,0x10
c0022535:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c002253b:	b8 01 00 00 00       	mov    eax,0x1
c0022540:	eb 03                	jmp    c0022545 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0022542:	83 c8 ff             	or     eax,0xffffffff
c0022545:	5a                   	pop    edx
c0022546:	5b                   	pop    ebx
c0022547:	5e                   	pop    esi
c0022548:	c3                   	ret    
c0022549:	90                   	nop

c002254a <SoundDevice::removeChannel(int)>:
c002254a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002254e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022552:	83 fa 1f             	cmp    edx,0x1f
c0022555:	77 23                	ja     c002257a <SoundDevice::removeChannel(int)+0x30>
c0022557:	8d 14 90             	lea    edx,[eax+edx*4]
c002255a:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c0022561:	74 17                	je     c002257a <SoundDevice::removeChannel(int)+0x30>
c0022563:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c002256d:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c0022573:	75 05                	jne    c002257a <SoundDevice::removeChannel(int)+0x30>
c0022575:	8b 00                	mov    eax,DWORD PTR [eax]
c0022577:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c002257a:	c3                   	ret    
c002257b:	90                   	nop

c002257c <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c002257c:	57                   	push   edi
c002257d:	56                   	push   esi
c002257e:	53                   	push   ebx
c002257f:	31 db                	xor    ebx,ebx
c0022581:	83 ec 10             	sub    esp,0x10
c0022584:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0022588:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c002258c:	0f 8d cb 00 00 00    	jge    c002265d <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c0022592:	83 ec 0c             	sub    esp,0xc
c0022595:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022599:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c002259c:	e8 d6 5e 00 00       	call   c0028477 <__extendsfdf2>
c00225a1:	83 c4 10             	add    esp,0x10
c00225a4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00225a8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00225ac:	68 00 00 f0 3f       	push   0x3ff00000
c00225b1:	6a 00                	push   0x0
c00225b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00225b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00225bb:	e8 43 4e 00 00       	call   c0027403 <__adddf3>
c00225c0:	83 c4 10             	add    esp,0x10
c00225c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00225c7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00225cb:	68 00 00 e0 3f       	push   0x3fe00000
c00225d0:	6a 00                	push   0x0
c00225d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00225d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00225da:	e8 a1 54 00 00       	call   c0027a80 <__muldf3>
c00225df:	83 c4 10             	add    esp,0x10
c00225e2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00225e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00225ea:	68 00 00 60 40       	push   0x40600000
c00225ef:	6a 00                	push   0x0
c00225f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00225f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00225f9:	e8 82 54 00 00       	call   c0027a80 <__muldf3>
c00225fe:	59                   	pop    ecx
c00225ff:	5f                   	pop    edi
c0022600:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022604:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022608:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002260c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022610:	e8 3e 5d 00 00       	call   c0028353 <__truncdfsf2>
c0022615:	5a                   	pop    edx
c0022616:	89 c7                	mov    edi,eax
c0022618:	59                   	pop    ecx
c0022619:	68 00 00 fe 42       	push   0x42fe0000
c002261e:	50                   	push   eax
c002261f:	e8 d9 4d 00 00       	call   c00273fd <__gesf2>
c0022624:	83 c4 10             	add    esp,0x10
c0022627:	85 c0                	test   eax,eax
c0022629:	78 06                	js     c0022631 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c002262b:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c002262f:	eb 26                	jmp    c0022657 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022631:	50                   	push   eax
c0022632:	50                   	push   eax
c0022633:	6a 00                	push   0x0
c0022635:	57                   	push   edi
c0022636:	e8 c6 4d 00 00       	call   c0027401 <__lesf2>
c002263b:	83 c4 10             	add    esp,0x10
c002263e:	85 c0                	test   eax,eax
c0022640:	7f 06                	jg     c0022648 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c0022642:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0022646:	eb 0f                	jmp    c0022657 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022648:	83 ec 0c             	sub    esp,0xc
c002264b:	57                   	push   edi
c002264c:	e8 bb 5e 00 00       	call   c002850c <lrintf>
c0022651:	83 c4 10             	add    esp,0x10
c0022654:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0022657:	43                   	inc    ebx
c0022658:	e9 2b ff ff ff       	jmp    c0022588 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c002265d:	83 c4 10             	add    esp,0x10
c0022660:	5b                   	pop    ebx
c0022661:	5e                   	pop    esi
c0022662:	5f                   	pop    edi
c0022663:	c3                   	ret    

c0022664 <SoundDevice::getAudio(int, float*, float*)>:
c0022664:	55                   	push   ebp
c0022665:	57                   	push   edi
c0022666:	56                   	push   esi
c0022667:	53                   	push   ebx
c0022668:	31 db                	xor    ebx,ebx
c002266a:	83 ec 20             	sub    esp,0x20
c002266d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0022671:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0022675:	c1 e0 02             	shl    eax,0x2
c0022678:	50                   	push   eax
c0022679:	6a 00                	push   0x0
c002267b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002267f:	e8 f4 e0 fd ff       	call   c0000778 <memset>
c0022684:	83 c4 10             	add    esp,0x10
c0022687:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c002268b:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c0022692:	85 c0                	test   eax,eax
c0022694:	0f 84 d7 00 00 00    	je     c0022771 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c002269a:	83 ec 0c             	sub    esp,0xc
c002269d:	50                   	push   eax
c002269e:	e8 a5 fb ff ff       	call   c0022248 <SoundChannel::paused()>
c00226a3:	83 c4 10             	add    esp,0x10
c00226a6:	84 c0                	test   al,al
c00226a8:	0f 85 c3 00 00 00    	jne    c0022771 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00226ae:	83 ec 0c             	sub    esp,0xc
c00226b1:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00226b8:	e8 19 fa ff ff       	call   c00220d6 <SoundChannel::getVolume()>
c00226bd:	83 c4 10             	add    esp,0x10
c00226c0:	85 c0                	test   eax,eax
c00226c2:	0f 84 a9 00 00 00    	je     c0022771 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00226c8:	83 ec 0c             	sub    esp,0xc
c00226cb:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00226d2:	e8 ff f9 ff ff       	call   c00220d6 <SoundChannel::getVolume()>
c00226d7:	83 ec 0c             	sub    esp,0xc
c00226da:	50                   	push   eax
c00226db:	e8 c7 4a 00 00       	call   c00271a7 <__floatsisf>
c00226e0:	59                   	pop    ecx
c00226e1:	5d                   	pop    ebp
c00226e2:	31 ed                	xor    ebp,ebp
c00226e4:	68 00 00 c8 42       	push   0x42c80000
c00226e9:	50                   	push   eax
c00226ea:	e8 8d 48 00 00       	call   c0026f7c <__divsf3>
c00226ef:	83 c4 10             	add    esp,0x10
c00226f2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00226f6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00226fa:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c0022700:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0022704:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c002270b:	e8 60 fb ff ff       	call   c0022270 <SoundChannel::unbuffer(float*, int, int)>
c0022710:	83 c4 20             	add    esp,0x20
c0022713:	89 c1                	mov    ecx,eax
c0022715:	39 cd                	cmp    ebp,ecx
c0022717:	7d 52                	jge    c002276b <SoundDevice::getAudio(int, float*, float*)+0x107>
c0022719:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002271d:	50                   	push   eax
c002271e:	50                   	push   eax
c002271f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0022723:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0022726:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002272a:	e8 8a 46 00 00       	call   c0026db9 <__mulsf3>
c002272f:	5a                   	pop    edx
c0022730:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022734:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c002273a:	e8 68 4a 00 00       	call   c00271a7 <__floatsisf>
c002273f:	59                   	pop    ecx
c0022740:	5a                   	pop    edx
c0022741:	50                   	push   eax
c0022742:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022746:	e8 31 48 00 00       	call   c0026f7c <__divsf3>
c002274b:	59                   	pop    ecx
c002274c:	5a                   	pop    edx
c002274d:	50                   	push   eax
c002274e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0022752:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0022755:	e8 3c 43 00 00       	call   c0026a96 <__addsf3>
c002275a:	83 c4 10             	add    esp,0x10
c002275d:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022761:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0022765:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c0022768:	45                   	inc    ebp
c0022769:	eb aa                	jmp    c0022715 <SoundDevice::getAudio(int, float*, float*)+0xb1>
c002276b:	39 cf                	cmp    edi,ecx
c002276d:	7e 02                	jle    c0022771 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c002276f:	89 cf                	mov    edi,ecx
c0022771:	43                   	inc    ebx
c0022772:	83 fb 20             	cmp    ebx,0x20
c0022775:	0f 85 10 ff ff ff    	jne    c002268b <SoundDevice::getAudio(int, float*, float*)+0x27>
c002277b:	83 c4 1c             	add    esp,0x1c
c002277e:	89 f8                	mov    eax,edi
c0022780:	5b                   	pop    ebx
c0022781:	5e                   	pop    esi
c0022782:	5f                   	pop    edi
c0022783:	5d                   	pop    ebp
c0022784:	c3                   	ret    
c0022785:	90                   	nop

c0022786 <PCI::open(int, int, void*)>:
c0022786:	83 ec 18             	sub    esp,0x18
c0022789:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002278d:	8b 10                	mov    edx,DWORD PTR [eax]
c002278f:	50                   	push   eax
c0022790:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0022793:	31 c0                	xor    eax,eax
c0022795:	83 c4 1c             	add    esp,0x1c
c0022798:	c3                   	ret    
c0022799:	90                   	nop

c002279a <PCI::close(int, int, void*)>:
c002279a:	31 c0                	xor    eax,eax
c002279c:	c3                   	ret    
c002279d:	90                   	nop

c002279e <PCI::PCI()>:
c002279e:	83 ec 0c             	sub    esp,0xc
c00227a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227a5:	83 ec 08             	sub    esp,0x8
c00227a8:	68 3c c8 02 c0       	push   0xc002c83c
c00227ad:	50                   	push   eax
c00227ae:	e8 7f 12 ff ff       	call   c0013a32 <Bus::Bus(char const*)>
c00227b3:	83 c4 10             	add    esp,0x10
c00227b6:	ba a8 c8 02 c0       	mov    edx,0xc002c8a8
c00227bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227bf:	89 10                	mov    DWORD PTR [eax],edx
c00227c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227c5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00227cb:	0f b6 d0             	movzx  edx,al
c00227ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227d2:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c00227d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227dd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00227e3:	0f b6 d0             	movzx  edx,al
c00227e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227ea:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c00227ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227f3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00227f9:	8d 50 01             	lea    edx,[eax+0x1]
c00227fc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022800:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022806:	0f b6 d0             	movzx  edx,al
c0022809:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002280d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022811:	83 c9 c0             	or     ecx,0xffffffc0
c0022814:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022818:	90                   	nop
c0022819:	83 c4 0c             	add    esp,0xc
c002281c:	c3                   	ret    
c002281d:	90                   	nop

c002281e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002281e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0022822:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022827:	89 ca                	mov    edx,ecx
c0022829:	c1 e0 10             	shl    eax,0x10
c002282c:	81 e2 fc 00 00 00    	and    edx,0xfc
c0022832:	09 d0                	or     eax,edx
c0022834:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0022839:	c1 e2 08             	shl    edx,0x8
c002283c:	09 d0                	or     eax,edx
c002283e:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c0022843:	c1 e2 0b             	shl    edx,0xb
c0022846:	09 d0                	or     eax,edx
c0022848:	ba f8 0c 00 00       	mov    edx,0xcf8
c002284d:	0d 00 00 00 80       	or     eax,0x80000000
c0022852:	ef                   	out    dx,eax
c0022853:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022858:	ed                   	in     eax,dx
c0022859:	83 e1 02             	and    ecx,0x2
c002285c:	0f b6 c9             	movzx  ecx,cl
c002285f:	c1 e1 03             	shl    ecx,0x3
c0022862:	d3 e8                	shr    eax,cl
c0022864:	c3                   	ret    
c0022865:	90                   	nop

c0022866 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0022866:	6a 00                	push   0x0
c0022868:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002286d:	50                   	push   eax
c002286e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022873:	50                   	push   eax
c0022874:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022879:	50                   	push   eax
c002287a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002287e:	e8 9b ff ff ff       	call   c002281e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022883:	83 c4 14             	add    esp,0x14
c0022886:	c3                   	ret    
c0022887:	90                   	nop

c0022888 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0022888:	6a 0e                	push   0xe
c002288a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002288f:	50                   	push   eax
c0022890:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022895:	50                   	push   eax
c0022896:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002289b:	50                   	push   eax
c002289c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00228a0:	e8 79 ff ff ff       	call   c002281e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00228a5:	83 c4 14             	add    esp,0x14
c00228a8:	0f b6 c0             	movzx  eax,al
c00228ab:	c3                   	ret    

c00228ac <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c00228ac:	55                   	push   ebp
c00228ad:	57                   	push   edi
c00228ae:	56                   	push   esi
c00228af:	53                   	push   ebx
c00228b0:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c00228b5:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c00228ba:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c00228bf:	6a 0a                	push   0xa
c00228c1:	56                   	push   esi
c00228c2:	55                   	push   ebp
c00228c3:	57                   	push   edi
c00228c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00228c8:	e8 51 ff ff ff       	call   c002281e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00228cd:	6a 0a                	push   0xa
c00228cf:	89 c3                	mov    ebx,eax
c00228d1:	56                   	push   esi
c00228d2:	0f b6 db             	movzx  ebx,bl
c00228d5:	55                   	push   ebp
c00228d6:	57                   	push   edi
c00228d7:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00228db:	e8 3e ff ff ff       	call   c002281e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00228e0:	83 c4 28             	add    esp,0x28
c00228e3:	25 00 ff 00 00       	and    eax,0xff00
c00228e8:	09 d8                	or     eax,ebx
c00228ea:	5b                   	pop    ebx
c00228eb:	5e                   	pop    esi
c00228ec:	5f                   	pop    edi
c00228ed:	5d                   	pop    ebp
c00228ee:	c3                   	ret    
c00228ef:	90                   	nop

c00228f0 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c00228f0:	6a 08                	push   0x8
c00228f2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00228f7:	50                   	push   eax
c00228f8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00228fd:	50                   	push   eax
c00228fe:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022903:	50                   	push   eax
c0022904:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022908:	e8 11 ff ff ff       	call   c002281e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002290d:	83 c4 14             	add    esp,0x14
c0022910:	0f b6 c4             	movzx  eax,ah
c0022913:	c3                   	ret    

c0022914 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0022914:	6a 08                	push   0x8
c0022916:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002291b:	50                   	push   eax
c002291c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022921:	50                   	push   eax
c0022922:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022927:	50                   	push   eax
c0022928:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002292c:	e8 ed fe ff ff       	call   c002281e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022931:	83 c4 14             	add    esp,0x14
c0022934:	c3                   	ret    
c0022935:	90                   	nop

c0022936 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0022936:	6a 3c                	push   0x3c
c0022938:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002293d:	50                   	push   eax
c002293e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022943:	50                   	push   eax
c0022944:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022949:	50                   	push   eax
c002294a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002294e:	e8 cb fe ff ff       	call   c002281e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022953:	83 c4 14             	add    esp,0x14
c0022956:	c3                   	ret    
c0022957:	90                   	nop

c0022958 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0022958:	6a 18                	push   0x18
c002295a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002295f:	50                   	push   eax
c0022960:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022965:	50                   	push   eax
c0022966:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002296b:	50                   	push   eax
c002296c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022970:	e8 a9 fe ff ff       	call   c002281e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022975:	83 c4 14             	add    esp,0x14
c0022978:	0f b6 c4             	movzx  eax,ah
c002297b:	c3                   	ret    

c002297c <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002297c:	55                   	push   ebp
c002297d:	57                   	push   edi
c002297e:	56                   	push   esi
c002297f:	53                   	push   ebx
c0022980:	50                   	push   eax
c0022981:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0022985:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c002298a:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c002298f:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c0022994:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c002299b:	8d 43 12             	lea    eax,[ebx+0x12]
c002299e:	83 c3 10             	add    ebx,0x10
c00229a1:	0f b6 c0             	movzx  eax,al
c00229a4:	0f b6 db             	movzx  ebx,bl
c00229a7:	50                   	push   eax
c00229a8:	51                   	push   ecx
c00229a9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00229ad:	57                   	push   edi
c00229ae:	55                   	push   ebp
c00229af:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00229b3:	e8 66 fe ff ff       	call   c002281e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00229b8:	53                   	push   ebx
c00229b9:	89 c6                	mov    esi,eax
c00229bb:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00229bf:	c1 e6 10             	shl    esi,0x10
c00229c2:	51                   	push   ecx
c00229c3:	57                   	push   edi
c00229c4:	55                   	push   ebp
c00229c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00229c9:	e8 50 fe ff ff       	call   c002281e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00229ce:	83 c4 2c             	add    esp,0x2c
c00229d1:	0f b7 c0             	movzx  eax,ax
c00229d4:	5b                   	pop    ebx
c00229d5:	09 f0                	or     eax,esi
c00229d7:	5e                   	pop    esi
c00229d8:	5f                   	pop    edi
c00229d9:	5d                   	pop    ebp
c00229da:	c3                   	ret    
c00229db:	90                   	nop

c00229dc <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c00229dc:	53                   	push   ebx
c00229dd:	ba f8 0c 00 00       	mov    edx,0xcf8
c00229e2:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00229e7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00229eb:	c1 e1 10             	shl    ecx,0x10
c00229ee:	25 fc 00 00 00       	and    eax,0xfc
c00229f3:	09 c1                	or     ecx,eax
c00229f5:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229fa:	c1 e0 08             	shl    eax,0x8
c00229fd:	09 c1                	or     ecx,eax
c00229ff:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0022a04:	c1 e0 0b             	shl    eax,0xb
c0022a07:	09 c1                	or     ecx,eax
c0022a09:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0022a0f:	89 c8                	mov    eax,ecx
c0022a11:	ef                   	out    dx,eax
c0022a12:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022a17:	ed                   	in     eax,dx
c0022a18:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0022a1d:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0022a22:	74 0a                	je     c0022a2e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0022a24:	0f b7 d8             	movzx  ebx,ax
c0022a27:	89 d0                	mov    eax,edx
c0022a29:	c1 e0 10             	shl    eax,0x10
c0022a2c:	eb 05                	jmp    c0022a33 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0022a2e:	66 31 c0             	xor    ax,ax
c0022a31:	89 d3                	mov    ebx,edx
c0022a33:	09 c3                	or     ebx,eax
c0022a35:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022a3a:	89 c8                	mov    eax,ecx
c0022a3c:	ef                   	out    dx,eax
c0022a3d:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022a42:	89 d8                	mov    eax,ebx
c0022a44:	ef                   	out    dx,eax
c0022a45:	5b                   	pop    ebx
c0022a46:	c3                   	ret    
c0022a47:	90                   	nop

c0022a48 <PCI::checkBus(unsigned char)>:
c0022a48:	56                   	push   esi
c0022a49:	53                   	push   ebx
c0022a4a:	31 db                	xor    ebx,ebx
c0022a4c:	51                   	push   ecx
c0022a4d:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022a52:	52                   	push   edx
c0022a53:	53                   	push   ebx
c0022a54:	43                   	inc    ebx
c0022a55:	56                   	push   esi
c0022a56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022a5a:	e8 2b 03 00 00       	call   c0022d8a <PCI::checkDevice(unsigned char, unsigned char)>
c0022a5f:	83 c4 10             	add    esp,0x10
c0022a62:	83 fb 20             	cmp    ebx,0x20
c0022a65:	75 eb                	jne    c0022a52 <PCI::checkBus(unsigned char)+0xa>
c0022a67:	58                   	pop    eax
c0022a68:	5b                   	pop    ebx
c0022a69:	5e                   	pop    esi
c0022a6a:	c3                   	ret    
c0022a6b:	90                   	nop

c0022a6c <PCI::foundDevice(PCIDeviceInfo)>:
c0022a6c:	55                   	push   ebp
c0022a6d:	57                   	push   edi
c0022a6e:	56                   	push   esi
c0022a6f:	53                   	push   ebx
c0022a70:	83 ec 1c             	sub    esp,0x1c
c0022a73:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022a77:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0022a7d:	0f 84 52 01 00 00    	je     c0022bd5 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022a83:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0022a87:	66 81 f9 06 04       	cmp    cx,0x406
c0022a8c:	75 2c                	jne    c0022aba <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0022a8e:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0022a93:	50                   	push   eax
c0022a94:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0022a99:	50                   	push   eax
c0022a9a:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0022a9f:	50                   	push   eax
c0022aa0:	56                   	push   esi
c0022aa1:	e8 b2 fe ff ff       	call   c0022958 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0022aa6:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022aaa:	0f b6 c0             	movzx  eax,al
c0022aad:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0022ab1:	83 c4 2c             	add    esp,0x2c
c0022ab4:	5b                   	pop    ebx
c0022ab5:	5e                   	pop    esi
c0022ab6:	5f                   	pop    edi
c0022ab7:	5d                   	pop    ebp
c0022ab8:	eb 8e                	jmp    c0022a48 <PCI::checkBus(unsigned char)>
c0022aba:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022abe:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0022ac4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022ac8:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0022acc:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0022ad0:	88 d3                	mov    bl,dl
c0022ad2:	85 c0                	test   eax,eax
c0022ad4:	74 33                	je     c0022b09 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0022ad6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0022ad9:	85 d2                	test   edx,edx
c0022adb:	74 28                	je     c0022b05 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022add:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0022ae3:	31 ef                	xor    edi,ebp
c0022ae5:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0022aeb:	75 18                	jne    c0022b05 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022aed:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022af1:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0022af7:	75 0c                	jne    c0022b05 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022af9:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0022aff:	0f 84 d0 00 00 00    	je     c0022bd5 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022b05:	8b 00                	mov    eax,DWORD PTR [eax]
c0022b07:	eb c9                	jmp    c0022ad2 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0022b09:	66 81 f9 01 06       	cmp    cx,0x601
c0022b0e:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0022b12:	75 19                	jne    c0022b2d <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0022b14:	83 ec 0c             	sub    esp,0xc
c0022b17:	68 64 01 00 00       	push   0x164
c0022b1c:	e8 1f cd fe ff       	call   c000f840 <malloc>
c0022b21:	89 c5                	mov    ebp,eax
c0022b23:	89 04 24             	mov    DWORD PTR [esp],eax
c0022b26:	e8 95 0f 00 00       	call   c0023ac0 <SATABus::SATABus()>
c0022b2b:	eb 1e                	jmp    c0022b4b <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0022b2d:	66 81 f9 01 01       	cmp    cx,0x101
c0022b32:	75 60                	jne    c0022b94 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0022b34:	83 ec 0c             	sub    esp,0xc
c0022b37:	68 70 02 00 00       	push   0x270
c0022b3c:	e8 ff cc fe ff       	call   c000f840 <malloc>
c0022b41:	89 c5                	mov    ebp,eax
c0022b43:	89 04 24             	mov    DWORD PTR [esp],eax
c0022b46:	e8 03 03 00 00       	call   c0022e4e <IDE::IDE()>
c0022b4b:	58                   	pop    eax
c0022b4c:	5a                   	pop    edx
c0022b4d:	55                   	push   ebp
c0022b4e:	56                   	push   esi
c0022b4f:	e8 6a 16 ff ff       	call   c00141be <Device::addChild(Device*)>
c0022b54:	83 ec 1c             	sub    esp,0x1c
c0022b57:	b9 09 00 00 00       	mov    ecx,0x9
c0022b5c:	fc                   	cld    
c0022b5d:	89 e7                	mov    edi,esp
c0022b5f:	89 de                	mov    esi,ebx
c0022b61:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022b63:	55                   	push   ebp
c0022b64:	e8 5f 15 ff ff       	call   c00140c8 <Device::preOpenPCI(PCIDeviceInfo)>
c0022b69:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022b6c:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0022b70:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0022b78:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0022b80:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0022b88:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022b8b:	83 c4 4c             	add    esp,0x4c
c0022b8e:	5b                   	pop    ebx
c0022b8f:	5e                   	pop    esi
c0022b90:	5f                   	pop    edi
c0022b91:	5d                   	pop    ebp
c0022b92:	ff e0                	jmp    eax
c0022b94:	83 ec 0c             	sub    esp,0xc
c0022b97:	68 58 01 00 00       	push   0x158
c0022b9c:	e8 9f cc fe ff       	call   c000f840 <malloc>
c0022ba1:	89 c5                	mov    ebp,eax
c0022ba3:	58                   	pop    eax
c0022ba4:	5a                   	pop    edx
c0022ba5:	68 44 c8 02 c0       	push   0xc002c844
c0022baa:	55                   	push   ebp
c0022bab:	e8 04 19 ff ff       	call   c00144b4 <DriverlessDevice::DriverlessDevice(char const*)>
c0022bb0:	59                   	pop    ecx
c0022bb1:	5f                   	pop    edi
c0022bb2:	55                   	push   ebp
c0022bb3:	56                   	push   esi
c0022bb4:	e8 05 16 ff ff       	call   c00141be <Device::addChild(Device*)>
c0022bb9:	b9 09 00 00 00       	mov    ecx,0x9
c0022bbe:	fc                   	cld    
c0022bbf:	89 df                	mov    edi,ebx
c0022bc1:	89 de                	mov    esi,ebx
c0022bc3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022bc5:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0022bc9:	83 c4 2c             	add    esp,0x2c
c0022bcc:	5b                   	pop    ebx
c0022bcd:	5e                   	pop    esi
c0022bce:	5f                   	pop    edi
c0022bcf:	5d                   	pop    ebp
c0022bd0:	e9 f3 14 ff ff       	jmp    c00140c8 <Device::preOpenPCI(PCIDeviceInfo)>
c0022bd5:	83 c4 1c             	add    esp,0x1c
c0022bd8:	5b                   	pop    ebx
c0022bd9:	5e                   	pop    esi
c0022bda:	5f                   	pop    edi
c0022bdb:	5d                   	pop    ebp
c0022bdc:	c3                   	ret    
c0022bdd:	90                   	nop

c0022bde <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0022bde:	55                   	push   ebp
c0022bdf:	57                   	push   edi
c0022be0:	56                   	push   esi
c0022be1:	53                   	push   ebx
c0022be2:	83 ec 5c             	sub    esp,0x5c
c0022be5:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0022be9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022bed:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0022bf1:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0022bf6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022bfa:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0022bfe:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0022c03:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022c07:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0022c0c:	6a 0c                	push   0xc
c0022c0e:	55                   	push   ebp
c0022c0f:	53                   	push   ebx
c0022c10:	57                   	push   edi
c0022c11:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0022c18:	e8 01 fc ff ff       	call   c002281e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022c1d:	55                   	push   ebp
c0022c1e:	53                   	push   ebx
c0022c1f:	57                   	push   edi
c0022c20:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022c27:	e8 80 fc ff ff       	call   c00228ac <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0022c2c:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0022c31:	83 c4 24             	add    esp,0x24
c0022c34:	55                   	push   ebp
c0022c35:	53                   	push   ebx
c0022c36:	57                   	push   edi
c0022c37:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022c3b:	e8 f6 fc ff ff       	call   c0022936 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0022c40:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0022c44:	6a 3c                	push   0x3c
c0022c46:	55                   	push   ebp
c0022c47:	53                   	push   ebx
c0022c48:	57                   	push   edi
c0022c49:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022c50:	e8 c9 fb ff ff       	call   c002281e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022c55:	0f b6 c4             	movzx  eax,ah
c0022c58:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022c5c:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0022c60:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0022c64:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c0022c69:	83 c4 24             	add    esp,0x24
c0022c6c:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022c72:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0022c79:	74 6c                	je     c0022ce7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022c7b:	31 f6                	xor    esi,esi
c0022c7d:	8b 15 48 e2 02 c0    	mov    edx,DWORD PTR ds:0xc002e248
c0022c83:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022c89:	39 b2 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],esi
c0022c8f:	7e 56                	jle    c0022ce7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022c91:	8d 14 f2             	lea    edx,[edx+esi*8]
c0022c94:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0022c9b:	39 cb                	cmp    ebx,ecx
c0022c9d:	75 45                	jne    c0022ce4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022c9f:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0022ca6:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0022caa:	75 38                	jne    c0022ce4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022cac:	83 ec 0c             	sub    esp,0xc
c0022caf:	68 5e c8 02 c0       	push   0xc002c85e
c0022cb4:	e8 df 00 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0022cb9:	8b 15 48 e2 02 c0    	mov    edx,DWORD PTR ds:0xc002e248
c0022cbf:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022cc5:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c0022ccd:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0022cd1:	52                   	push   edx
c0022cd2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022cd6:	53                   	push   ebx
c0022cd7:	68 83 c8 02 c0       	push   0xc002c883
c0022cdc:	e8 b7 00 ff ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0022ce1:	83 c4 20             	add    esp,0x20
c0022ce4:	46                   	inc    esi
c0022ce5:	eb 96                	jmp    c0022c7d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0022ce7:	31 d2                	xor    edx,edx
c0022ce9:	83 ec 0c             	sub    esp,0xc
c0022cec:	55                   	push   ebp
c0022ced:	53                   	push   ebx
c0022cee:	57                   	push   edi
c0022cef:	52                   	push   edx
c0022cf0:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0022cf4:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022cfb:	e8 7c fc ff ff       	call   c002297c <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022d00:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0022d04:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022d08:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0022d0c:	42                   	inc    edx
c0022d0d:	83 c4 20             	add    esp,0x20
c0022d10:	83 fa 06             	cmp    edx,0x6
c0022d13:	75 d4                	jne    c0022ce9 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0022d15:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0022d19:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0022d1d:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0022d21:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0022d25:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0022d29:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0022d2d:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0022d32:	86 e0                	xchg   al,ah
c0022d34:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0022d39:	55                   	push   ebp
c0022d3a:	53                   	push   ebx
c0022d3b:	57                   	push   edi
c0022d3c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022d40:	e8 ab fb ff ff       	call   c00228f0 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0022d45:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0022d49:	55                   	push   ebp
c0022d4a:	53                   	push   ebx
c0022d4b:	57                   	push   edi
c0022d4c:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022d53:	e8 0e fb ff ff       	call   c0022866 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022d58:	83 ec 0c             	sub    esp,0xc
c0022d5b:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0022d60:	b9 09 00 00 00       	mov    ecx,0x9
c0022d65:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0022d69:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0022d6d:	fc                   	cld    
c0022d6e:	89 e7                	mov    edi,esp
c0022d70:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022d72:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022d79:	e8 ee fc ff ff       	call   c0022a6c <PCI::foundDevice(PCIDeviceInfo)>
c0022d7e:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022d84:	5b                   	pop    ebx
c0022d85:	5e                   	pop    esi
c0022d86:	5f                   	pop    edi
c0022d87:	5d                   	pop    ebp
c0022d88:	c3                   	ret    
c0022d89:	90                   	nop

c0022d8a <PCI::checkDevice(unsigned char, unsigned char)>:
c0022d8a:	55                   	push   ebp
c0022d8b:	57                   	push   edi
c0022d8c:	56                   	push   esi
c0022d8d:	53                   	push   ebx
c0022d8e:	83 ec 0c             	sub    esp,0xc
c0022d91:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0022d95:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0022d9a:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022d9f:	6a 00                	push   0x0
c0022da1:	56                   	push   esi
c0022da2:	57                   	push   edi
c0022da3:	55                   	push   ebp
c0022da4:	e8 bd fa ff ff       	call   c0022866 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022da9:	6a 00                	push   0x0
c0022dab:	56                   	push   esi
c0022dac:	57                   	push   edi
c0022dad:	55                   	push   ebp
c0022dae:	e8 2b fe ff ff       	call   c0022bde <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022db3:	83 c4 20             	add    esp,0x20
c0022db6:	6a 00                	push   0x0
c0022db8:	56                   	push   esi
c0022db9:	57                   	push   edi
c0022dba:	55                   	push   ebp
c0022dbb:	e8 c8 fa ff ff       	call   c0022888 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022dc0:	83 c4 10             	add    esp,0x10
c0022dc3:	84 c0                	test   al,al
c0022dc5:	79 27                	jns    c0022dee <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0022dc7:	bb 01 00 00 00       	mov    ebx,0x1
c0022dcc:	53                   	push   ebx
c0022dcd:	56                   	push   esi
c0022dce:	57                   	push   edi
c0022dcf:	55                   	push   ebp
c0022dd0:	e8 91 fa ff ff       	call   c0022866 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022dd5:	83 c4 10             	add    esp,0x10
c0022dd8:	66 40                	inc    ax
c0022dda:	74 0c                	je     c0022de8 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0022ddc:	53                   	push   ebx
c0022ddd:	56                   	push   esi
c0022dde:	57                   	push   edi
c0022ddf:	55                   	push   ebp
c0022de0:	e8 f9 fd ff ff       	call   c0022bde <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022de5:	83 c4 10             	add    esp,0x10
c0022de8:	43                   	inc    ebx
c0022de9:	83 fb 08             	cmp    ebx,0x8
c0022dec:	75 de                	jne    c0022dcc <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0022dee:	83 c4 0c             	add    esp,0xc
c0022df1:	5b                   	pop    ebx
c0022df2:	5e                   	pop    esi
c0022df3:	5f                   	pop    edi
c0022df4:	5d                   	pop    ebp
c0022df5:	c3                   	ret    

c0022df6 <PCI::detect()>:
c0022df6:	56                   	push   esi
c0022df7:	53                   	push   ebx
c0022df8:	53                   	push   ebx
c0022df9:	31 db                	xor    ebx,ebx
c0022dfb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022dff:	6a 00                	push   0x0
c0022e01:	6a 00                	push   0x0
c0022e03:	6a 00                	push   0x0
c0022e05:	56                   	push   esi
c0022e06:	e8 7d fa ff ff       	call   c0022888 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022e0b:	83 c4 10             	add    esp,0x10
c0022e0e:	a8 80                	test   al,0x80
c0022e10:	75 21                	jne    c0022e33 <PCI::detect()+0x3d>
c0022e12:	51                   	push   ecx
c0022e13:	51                   	push   ecx
c0022e14:	6a 00                	push   0x0
c0022e16:	56                   	push   esi
c0022e17:	e8 2c fc ff ff       	call   c0022a48 <PCI::checkBus(unsigned char)>
c0022e1c:	83 c4 10             	add    esp,0x10
c0022e1f:	eb 24                	jmp    c0022e45 <PCI::detect()+0x4f>
c0022e21:	52                   	push   edx
c0022e22:	52                   	push   edx
c0022e23:	53                   	push   ebx
c0022e24:	43                   	inc    ebx
c0022e25:	56                   	push   esi
c0022e26:	e8 1d fc ff ff       	call   c0022a48 <PCI::checkBus(unsigned char)>
c0022e2b:	83 c4 10             	add    esp,0x10
c0022e2e:	83 fb 08             	cmp    ebx,0x8
c0022e31:	74 12                	je     c0022e45 <PCI::detect()+0x4f>
c0022e33:	53                   	push   ebx
c0022e34:	6a 00                	push   0x0
c0022e36:	6a 00                	push   0x0
c0022e38:	56                   	push   esi
c0022e39:	e8 28 fa ff ff       	call   c0022866 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022e3e:	83 c4 10             	add    esp,0x10
c0022e41:	66 40                	inc    ax
c0022e43:	74 dc                	je     c0022e21 <PCI::detect()+0x2b>
c0022e45:	58                   	pop    eax
c0022e46:	5b                   	pop    ebx
c0022e47:	5e                   	pop    esi
c0022e48:	c3                   	ret    
c0022e49:	90                   	nop

c0022e4a <IDE::close(int, int, void*)>:
c0022e4a:	83 c8 ff             	or     eax,0xffffffff
c0022e4d:	c3                   	ret    

c0022e4e <IDE::IDE()>:
c0022e4e:	83 ec 0c             	sub    esp,0xc
c0022e51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e55:	83 ec 08             	sub    esp,0x8
c0022e58:	68 cc c8 02 c0       	push   0xc002c8cc
c0022e5d:	50                   	push   eax
c0022e5e:	e8 e7 16 ff ff       	call   c001454a <HardDiskController::HardDiskController(char const*)>
c0022e63:	83 c4 10             	add    esp,0x10
c0022e66:	ba 0c cb 02 c0       	mov    edx,0xc002cb0c
c0022e6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e6f:	89 10                	mov    DWORD PTR [eax],edx
c0022e71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e75:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0022e7c:	90                   	nop
c0022e7d:	83 c4 0c             	add    esp,0xc
c0022e80:	c3                   	ret    
c0022e81:	90                   	nop

c0022e82 <IDE::prepareInterrupt(unsigned char)>:
c0022e82:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022e87:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022e8b:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0022e93:	c3                   	ret    

c0022e94 <selectDrive(unsigned char, unsigned char)>:
c0022e94:	c3                   	ret    
c0022e95:	90                   	nop

c0022e96 <IDE::getBase(unsigned char)>:
c0022e96:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0022e9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022e9f:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0022ea7:	c3                   	ret    

c0022ea8 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0022ea8:	55                   	push   ebp
c0022ea9:	57                   	push   edi
c0022eaa:	56                   	push   esi
c0022eab:	53                   	push   ebx
c0022eac:	83 ec 1c             	sub    esp,0x1c
c0022eaf:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022eb3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022eb7:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0022eba:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022ebe:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022ec2:	80 f9 03             	cmp    cl,0x3
c0022ec5:	77 51                	ja     c0022f18 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0022ec7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022ecb:	0f b6 f2             	movzx  esi,dl
c0022ece:	0f b6 db             	movzx  ebx,bl
c0022ed1:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0022ed4:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0022ed8:	83 ca 80             	or     edx,0xffffff80
c0022edb:	0f b6 d2             	movzx  edx,dl
c0022ede:	52                   	push   edx
c0022edf:	6a 0c                	push   0xc
c0022ee1:	56                   	push   esi
c0022ee2:	57                   	push   edi
c0022ee3:	e8 c0 ff ff ff       	call   c0022ea8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022ee8:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0022eed:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022ef1:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0022ef5:	ee                   	out    dx,al
c0022ef6:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0022efb:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0022eff:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0022f03:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0022f07:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0022f0f:	83 c4 2c             	add    esp,0x2c
c0022f12:	5b                   	pop    ebx
c0022f13:	5e                   	pop    esi
c0022f14:	5f                   	pop    edi
c0022f15:	5d                   	pop    ebp
c0022f16:	eb 90                	jmp    c0022ea8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022f18:	80 fb 07             	cmp    bl,0x7
c0022f1b:	77 12                	ja     c0022f2f <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0022f1d:	0f b6 d2             	movzx  edx,dl
c0022f20:	0f b6 db             	movzx  ebx,bl
c0022f23:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0022f2b:	89 da                	mov    edx,ebx
c0022f2d:	eb 2f                	jmp    c0022f5e <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0022f2f:	80 fb 0d             	cmp    bl,0xd
c0022f32:	77 13                	ja     c0022f47 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0022f34:	0f b6 d2             	movzx  edx,dl
c0022f37:	0f b6 db             	movzx  ebx,bl
c0022f3a:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0022f41:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0022f45:	eb 17                	jmp    c0022f5e <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0022f47:	80 fb 15             	cmp    bl,0x15
c0022f4a:	77 13                	ja     c0022f5f <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0022f4c:	0f b6 d2             	movzx  edx,dl
c0022f4f:	0f b6 db             	movzx  ebx,bl
c0022f52:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0022f5a:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0022f5e:	ee                   	out    dx,al
c0022f5f:	83 c4 1c             	add    esp,0x1c
c0022f62:	5b                   	pop    ebx
c0022f63:	5e                   	pop    esi
c0022f64:	5f                   	pop    edi
c0022f65:	5d                   	pop    ebp
c0022f66:	c3                   	ret    
c0022f67:	90                   	nop

c0022f68 <IDE::read(unsigned char, unsigned char)>:
c0022f68:	55                   	push   ebp
c0022f69:	57                   	push   edi
c0022f6a:	56                   	push   esi
c0022f6b:	53                   	push   ebx
c0022f6c:	83 ec 1c             	sub    esp,0x1c
c0022f6f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022f73:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022f77:	8d 43 f8             	lea    eax,[ebx-0x8]
c0022f7a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022f7e:	3c 03                	cmp    al,0x3
c0022f80:	77 43                	ja     c0022fc5 <IDE::read(unsigned char, unsigned char)+0x5d>
c0022f82:	0f b6 f2             	movzx  esi,dl
c0022f85:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0022f88:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0022f8c:	83 c8 80             	or     eax,0xffffff80
c0022f8f:	0f b6 c0             	movzx  eax,al
c0022f92:	50                   	push   eax
c0022f93:	6a 0c                	push   0xc
c0022f95:	56                   	push   esi
c0022f96:	57                   	push   edi
c0022f97:	e8 0c ff ff ff       	call   c0022ea8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022f9c:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0022fa1:	0f b6 c3             	movzx  eax,bl
c0022fa4:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0022fa8:	ec                   	in     al,dx
c0022fa9:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0022fad:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0022fb2:	52                   	push   edx
c0022fb3:	6a 0c                	push   0xc
c0022fb5:	56                   	push   esi
c0022fb6:	57                   	push   edi
c0022fb7:	e8 ec fe ff ff       	call   c0022ea8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022fbc:	83 c4 20             	add    esp,0x20
c0022fbf:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0022fc3:	eb 49                	jmp    c002300e <IDE::read(unsigned char, unsigned char)+0xa6>
c0022fc5:	80 fb 07             	cmp    bl,0x7
c0022fc8:	77 12                	ja     c0022fdc <IDE::read(unsigned char, unsigned char)+0x74>
c0022fca:	0f b6 d2             	movzx  edx,dl
c0022fcd:	0f b6 c3             	movzx  eax,bl
c0022fd0:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0022fd8:	89 c2                	mov    edx,eax
c0022fda:	eb 31                	jmp    c002300d <IDE::read(unsigned char, unsigned char)+0xa5>
c0022fdc:	80 fb 0d             	cmp    bl,0xd
c0022fdf:	77 13                	ja     c0022ff4 <IDE::read(unsigned char, unsigned char)+0x8c>
c0022fe1:	0f b6 d2             	movzx  edx,dl
c0022fe4:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0022feb:	0f b6 d3             	movzx  edx,bl
c0022fee:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0022ff2:	eb 19                	jmp    c002300d <IDE::read(unsigned char, unsigned char)+0xa5>
c0022ff4:	31 c0                	xor    eax,eax
c0022ff6:	80 fb 15             	cmp    bl,0x15
c0022ff9:	77 13                	ja     c002300e <IDE::read(unsigned char, unsigned char)+0xa6>
c0022ffb:	0f b6 d2             	movzx  edx,dl
c0022ffe:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0023006:	0f b6 d3             	movzx  edx,bl
c0023009:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c002300d:	ec                   	in     al,dx
c002300e:	83 c4 1c             	add    esp,0x1c
c0023011:	5b                   	pop    ebx
c0023012:	5e                   	pop    esi
c0023013:	5f                   	pop    edi
c0023014:	5d                   	pop    ebp
c0023015:	c3                   	ret    

c0023016 <IDE::waitInterrupt(unsigned char)>:
c0023016:	55                   	push   ebp
c0023017:	57                   	push   edi
c0023018:	56                   	push   esi
c0023019:	53                   	push   ebx
c002301a:	31 db                	xor    ebx,ebx
c002301c:	83 ec 0c             	sub    esp,0xc
c002301f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0023023:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0023028:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0023030:	89 e8                	mov    eax,ebp
c0023032:	84 c0                	test   al,al
c0023034:	75 34                	jne    c002306a <IDE::waitInterrupt(unsigned char)+0x54>
c0023036:	52                   	push   edx
c0023037:	6a 0c                	push   0xc
c0023039:	56                   	push   esi
c002303a:	57                   	push   edi
c002303b:	e8 28 ff ff ff       	call   c0022f68 <IDE::read(unsigned char, unsigned char)>
c0023040:	83 c4 10             	add    esp,0x10
c0023043:	a8 01                	test   al,0x1
c0023045:	75 2b                	jne    c0023072 <IDE::waitInterrupt(unsigned char)+0x5c>
c0023047:	f6 c3 04             	test   bl,0x4
c002304a:	75 16                	jne    c0023062 <IDE::waitInterrupt(unsigned char)+0x4c>
c002304c:	83 fb 32             	cmp    ebx,0x32
c002304f:	7e 11                	jle    c0023062 <IDE::waitInterrupt(unsigned char)+0x4c>
c0023051:	50                   	push   eax
c0023052:	50                   	push   eax
c0023053:	6a 00                	push   0x0
c0023055:	68 80 96 98 00       	push   0x989680
c002305a:	e8 5d b1 ff ff       	call   c001e1bc <nanoSleep(unsigned long long)>
c002305f:	83 c4 10             	add    esp,0x10
c0023062:	83 fb 3c             	cmp    ebx,0x3c
c0023065:	74 0b                	je     c0023072 <IDE::waitInterrupt(unsigned char)+0x5c>
c0023067:	43                   	inc    ebx
c0023068:	eb be                	jmp    c0023028 <IDE::waitInterrupt(unsigned char)+0x12>
c002306a:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0023072:	83 c4 0c             	add    esp,0xc
c0023075:	89 e8                	mov    eax,ebp
c0023077:	5b                   	pop    ebx
c0023078:	5e                   	pop    esi
c0023079:	5f                   	pop    edi
c002307a:	5d                   	pop    ebp
c002307b:	c3                   	ret    

c002307c <ideChannel0IRQHandler(regs*, void*)>:
c002307c:	83 ec 10             	sub    esp,0x10
c002307f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023083:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c002308a:	6a 07                	push   0x7
c002308c:	6a 00                	push   0x0
c002308e:	50                   	push   eax
c002308f:	e8 d4 fe ff ff       	call   c0022f68 <IDE::read(unsigned char, unsigned char)>
c0023094:	83 c4 1c             	add    esp,0x1c
c0023097:	c3                   	ret    

c0023098 <ideChannel1IRQHandler(regs*, void*)>:
c0023098:	83 ec 10             	sub    esp,0x10
c002309b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002309f:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c00230a6:	6a 07                	push   0x7
c00230a8:	6a 01                	push   0x1
c00230aa:	50                   	push   eax
c00230ab:	e8 b8 fe ff ff       	call   c0022f68 <IDE::read(unsigned char, unsigned char)>
c00230b0:	83 c4 1c             	add    esp,0x1c
c00230b3:	c3                   	ret    

c00230b4 <IDE::enableIRQs(unsigned char, bool)>:
c00230b4:	57                   	push   edi
c00230b5:	56                   	push   esi
c00230b6:	be 04 00 00 00       	mov    esi,0x4
c00230bb:	53                   	push   ebx
c00230bc:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00230c1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00230c5:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c00230ca:	0f 94 c0             	sete   al
c00230cd:	d1 e0                	shl    eax,1
c00230cf:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c00230d6:	0f b6 c0             	movzx  eax,al
c00230d9:	50                   	push   eax
c00230da:	6a 0c                	push   0xc
c00230dc:	57                   	push   edi
c00230dd:	53                   	push   ebx
c00230de:	e8 c5 fd ff ff       	call   c0022ea8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00230e3:	83 c4 10             	add    esp,0x10
c00230e6:	50                   	push   eax
c00230e7:	6a 0c                	push   0xc
c00230e9:	57                   	push   edi
c00230ea:	53                   	push   ebx
c00230eb:	e8 78 fe ff ff       	call   c0022f68 <IDE::read(unsigned char, unsigned char)>
c00230f0:	83 c4 10             	add    esp,0x10
c00230f3:	4e                   	dec    esi
c00230f4:	75 f0                	jne    c00230e6 <IDE::enableIRQs(unsigned char, bool)+0x32>
c00230f6:	5b                   	pop    ebx
c00230f7:	5e                   	pop    esi
c00230f8:	5f                   	pop    edi
c00230f9:	c3                   	ret    

c00230fa <IDE::open(int, int, void*)>:
c00230fa:	55                   	push   ebp
c00230fb:	57                   	push   edi
c00230fc:	56                   	push   esi
c00230fd:	53                   	push   ebx
c00230fe:	83 ec 1c             	sub    esp,0x1c
c0023101:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0023105:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c002310e:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0023117:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c002311e:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0023125:	0f 85 b0 02 00 00    	jne    c00233db <IDE::open(int, int, void*)+0x2e1>
c002312b:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0023131:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0023135:	83 e0 7f             	and    eax,0x7f
c0023138:	3c 05                	cmp    al,0x5
c002313a:	74 04                	je     c0023140 <IDE::open(int, int, void*)+0x46>
c002313c:	3c 0f                	cmp    al,0xf
c002313e:	75 32                	jne    c0023172 <IDE::open(int, int, void*)+0x78>
c0023140:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0023146:	83 e0 fc             	and    eax,0xfffffffc
c0023149:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0023150:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0023156:	83 e0 fc             	and    eax,0xfffffffc
c0023159:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0023160:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0023166:	83 e0 fc             	and    eax,0xfffffffc
c0023169:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023170:	eb 14                	jmp    c0023186 <IDE::open(int, int, void*)+0x8c>
c0023172:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c002317c:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023186:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c002318d:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0023194:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023198:	89 c6                	mov    esi,eax
c002319a:	bf f8 0c 00 00       	mov    edi,0xcf8
c002319f:	c1 e6 10             	shl    esi,0x10
c00231a2:	89 e8                	mov    eax,ebp
c00231a4:	89 fa                	mov    edx,edi
c00231a6:	c1 e0 0b             	shl    eax,0xb
c00231a9:	09 f0                	or     eax,esi
c00231ab:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c00231b2:	c1 e6 08             	shl    esi,0x8
c00231b5:	09 c6                	or     esi,eax
c00231b7:	89 f0                	mov    eax,esi
c00231b9:	0d 08 00 00 80       	or     eax,0x80000008
c00231be:	ef                   	out    dx,eax
c00231bf:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c00231c4:	89 ca                	mov    edx,ecx
c00231c6:	ed                   	in     eax,dx
c00231c7:	c1 e8 10             	shr    eax,0x10
c00231ca:	3d ff ff 00 00       	cmp    eax,0xffff
c00231cf:	0f 84 f5 00 00 00    	je     c00232ca <IDE::open(int, int, void*)+0x1d0>
c00231d5:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c00231db:	89 fa                	mov    edx,edi
c00231dd:	89 f0                	mov    eax,esi
c00231df:	ef                   	out    dx,eax
c00231e0:	b0 fe                	mov    al,0xfe
c00231e2:	89 ca                	mov    edx,ecx
c00231e4:	ee                   	out    dx,al
c00231e5:	89 f0                	mov    eax,esi
c00231e7:	89 fa                	mov    edx,edi
c00231e9:	ef                   	out    dx,eax
c00231ea:	89 ca                	mov    edx,ecx
c00231ec:	ed                   	in     eax,dx
c00231ed:	3c fe                	cmp    al,0xfe
c00231ef:	0f 85 a9 00 00 00    	jne    c002329e <IDE::open(int, int, void*)+0x1a4>
c00231f5:	8b 15 48 e2 02 c0    	mov    edx,DWORD PTR ds:0xc002e248
c00231fb:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0023202:	74 33                	je     c0023237 <IDE::open(int, int, void*)+0x13d>
c0023204:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c002320a:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c002320e:	40                   	inc    eax
c002320f:	83 ec 0c             	sub    esp,0xc
c0023212:	0f b6 c0             	movzx  eax,al
c0023215:	50                   	push   eax
c0023216:	55                   	push   ebp
c0023217:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002321b:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0023221:	51                   	push   ecx
c0023222:	e8 a1 4e ff ff       	call   c00180c8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0023227:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c002322c:	83 c4 1c             	add    esp,0x1c
c002322f:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023235:	eb 0a                	jmp    c0023241 <IDE::open(int, int, void*)+0x147>
c0023237:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0023241:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0023248:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c002324f:	c1 e1 10             	shl    ecx,0x10
c0023252:	c1 e0 08             	shl    eax,0x8
c0023255:	bf f8 0c 00 00       	mov    edi,0xcf8
c002325a:	09 c1                	or     ecx,eax
c002325c:	89 fa                	mov    edx,edi
c002325e:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0023265:	c1 e0 0b             	shl    eax,0xb
c0023268:	09 c1                	or     ecx,eax
c002326a:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0023270:	89 c8                	mov    eax,ecx
c0023272:	ef                   	out    dx,eax
c0023273:	be fc 0c 00 00       	mov    esi,0xcfc
c0023278:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c002327e:	89 f2                	mov    edx,esi
c0023280:	ee                   	out    dx,al
c0023281:	89 c8                	mov    eax,ecx
c0023283:	89 fa                	mov    edx,edi
c0023285:	ef                   	out    dx,eax
c0023286:	89 f2                	mov    edx,esi
c0023288:	ed                   	in     eax,dx
c0023289:	0f b6 c0             	movzx  eax,al
c002328c:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0023292:	74 46                	je     c00232da <IDE::open(int, int, void*)+0x1e0>
c0023294:	83 ec 0c             	sub    esp,0xc
c0023297:	68 e4 c8 02 c0       	push   0xc002c8e4
c002329c:	eb 34                	jmp    c00232d2 <IDE::open(int, int, void*)+0x1d8>
c002329e:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c00232a7:	75 17                	jne    c00232c0 <IDE::open(int, int, void*)+0x1c6>
c00232a9:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c00232ae:	74 07                	je     c00232b7 <IDE::open(int, int, void*)+0x1bd>
c00232b0:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c00232b5:	75 09                	jne    c00232c0 <IDE::open(int, int, void*)+0x1c6>
c00232b7:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00232be:	eb 1a                	jmp    c00232da <IDE::open(int, int, void*)+0x1e0>
c00232c0:	83 ec 0c             	sub    esp,0xc
c00232c3:	68 ec c8 02 c0       	push   0xc002c8ec
c00232c8:	eb 08                	jmp    c00232d2 <IDE::open(int, int, void*)+0x1d8>
c00232ca:	83 ec 0c             	sub    esp,0xc
c00232cd:	68 1d c9 02 c0       	push   0xc002c91d
c00232d2:	e8 9c 71 ff ff       	call   c001a473 <Krnl::panic(char const*)>
c00232d7:	83 c4 10             	add    esp,0x10
c00232da:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c00232e1:	79 1a                	jns    c00232fd <IDE::open(int, int, void*)+0x203>
c00232e3:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c00232e9:	83 e0 fc             	and    eax,0xfffffffc
c00232ec:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c00232f3:	83 c0 08             	add    eax,0x8
c00232f6:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c00232fd:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0023303:	89 c2                	mov    edx,eax
c0023305:	83 e2 0f             	and    edx,0xf
c0023308:	66 83 fa 08          	cmp    dx,0x8
c002330c:	75 0a                	jne    c0023318 <IDE::open(int, int, void*)+0x21e>
c002330e:	83 e8 02             	sub    eax,0x2
c0023311:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023318:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c002331e:	89 c2                	mov    edx,eax
c0023320:	83 e2 0f             	and    edx,0xf
c0023323:	66 83 fa 08          	cmp    dx,0x8
c0023327:	75 0a                	jne    c0023333 <IDE::open(int, int, void*)+0x239>
c0023329:	83 e8 02             	sub    eax,0x2
c002332c:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0023333:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c002333a:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0023341:	89 d0                	mov    eax,edx
c0023343:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023346:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002334a:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c002334e:	8d 4a 01             	lea    ecx,[edx+0x1]
c0023351:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023356:	0f b6 c9             	movzx  ecx,cl
c0023359:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0023360:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023363:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023367:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c002336b:	8d 50 02             	lea    edx,[eax+0x2]
c002336e:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023373:	0f b6 d2             	movzx  edx,dl
c0023376:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c002337c:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002337f:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023383:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0023387:	8d 48 03             	lea    ecx,[eax+0x3]
c002338a:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c002338f:	0f b6 c9             	movzx  ecx,cl
c0023392:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0023398:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002339b:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002339f:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c00233a3:	8d 50 04             	lea    edx,[eax+0x4]
c00233a6:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c00233ac:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00233b1:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c00233b8:	66 85 f6             	test   si,si
c00233bb:	74 3e                	je     c00233fb <IDE::open(int, int, void*)+0x301>
c00233bd:	0f b6 d2             	movzx  edx,dl
c00233c0:	83 c0 05             	add    eax,0x5
c00233c3:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00233c6:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00233ca:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c00233ce:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00233d4:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00233d9:	eb 20                	jmp    c00233fb <IDE::open(int, int, void*)+0x301>
c00233db:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00233e5:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00233ef:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00233f6:	e9 02 ff ff ff       	jmp    c00232fd <IDE::open(int, int, void*)+0x203>
c00233fb:	52                   	push   edx
c00233fc:	52                   	push   edx
c00233fd:	6a 00                	push   0x0
c00233ff:	53                   	push   ebx
c0023400:	e8 7d fa ff ff       	call   c0022e82 <IDE::prepareInterrupt(unsigned char)>
c0023405:	59                   	pop    ecx
c0023406:	5e                   	pop    esi
c0023407:	6a 01                	push   0x1
c0023409:	53                   	push   ebx
c002340a:	e8 73 fa ff ff       	call   c0022e82 <IDE::prepareInterrupt(unsigned char)>
c002340f:	83 c4 0c             	add    esp,0xc
c0023412:	6a 00                	push   0x0
c0023414:	6a 00                	push   0x0
c0023416:	53                   	push   ebx
c0023417:	e8 98 fc ff ff       	call   c00230b4 <IDE::enableIRQs(unsigned char, bool)>
c002341c:	83 c4 0c             	add    esp,0xc
c002341f:	6a 00                	push   0x0
c0023421:	6a 01                	push   0x1
c0023423:	53                   	push   ebx
c0023424:	e8 8b fc ff ff       	call   c00230b4 <IDE::enableIRQs(unsigned char, bool)>
c0023429:	83 c4 10             	add    esp,0x10
c002342c:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0023433:	74 40                	je     c0023475 <IDE::open(int, int, void*)+0x37b>
c0023435:	83 ec 0c             	sub    esp,0xc
c0023438:	68 47 c9 02 c0       	push   0xc002c947
c002343d:	e8 56 f9 fe ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0023442:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023445:	6a 01                	push   0x1
c0023447:	68 7c 30 02 c0       	push   0xc002307c
c002344c:	6a 0e                	push   0xe
c002344e:	53                   	push   ebx
c002344f:	e8 ee 0c ff ff       	call   c0014142 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023454:	83 c4 14             	add    esp,0x14
c0023457:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002345d:	53                   	push   ebx
c002345e:	6a 01                	push   0x1
c0023460:	68 98 30 02 c0       	push   0xc0023098
c0023465:	6a 0f                	push   0xf
c0023467:	53                   	push   ebx
c0023468:	e8 d5 0c ff ff       	call   c0014142 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002346d:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0023473:	eb 4a                	jmp    c00234bf <IDE::open(int, int, void*)+0x3c5>
c0023475:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c002347f:	50                   	push   eax
c0023480:	6a 0f                	push   0xf
c0023482:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023488:	68 63 c9 02 c0       	push   0xc002c963
c002348d:	e8 06 f9 fe ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0023492:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023495:	6a 00                	push   0x0
c0023497:	68 7c 30 02 c0       	push   0xc002307c
c002349c:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00234a2:	53                   	push   ebx
c00234a3:	e8 9a 0c ff ff       	call   c0014142 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00234a8:	83 c4 14             	add    esp,0x14
c00234ab:	53                   	push   ebx
c00234ac:	6a 00                	push   0x0
c00234ae:	68 98 30 02 c0       	push   0xc0023098
c00234b3:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c00234b9:	53                   	push   ebx
c00234ba:	e8 83 0c ff ff       	call   c0014142 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00234bf:	8b 03                	mov    eax,DWORD PTR [ebx]
c00234c1:	83 c4 20             	add    esp,0x20
c00234c4:	83 ec 0c             	sub    esp,0xc
c00234c7:	53                   	push   ebx
c00234c8:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00234cb:	83 c4 0c             	add    esp,0xc
c00234ce:	6a 07                	push   0x7
c00234d0:	6a 00                	push   0x0
c00234d2:	53                   	push   ebx
c00234d3:	e8 90 fa ff ff       	call   c0022f68 <IDE::read(unsigned char, unsigned char)>
c00234d8:	83 c4 0c             	add    esp,0xc
c00234db:	6a 07                	push   0x7
c00234dd:	6a 01                	push   0x1
c00234df:	53                   	push   ebx
c00234e0:	e8 83 fa ff ff       	call   c0022f68 <IDE::read(unsigned char, unsigned char)>
c00234e5:	83 c4 0c             	add    esp,0xc
c00234e8:	6a 01                	push   0x1
c00234ea:	6a 00                	push   0x0
c00234ec:	53                   	push   ebx
c00234ed:	e8 c2 fb ff ff       	call   c00230b4 <IDE::enableIRQs(unsigned char, bool)>
c00234f2:	83 c4 0c             	add    esp,0xc
c00234f5:	6a 01                	push   0x1
c00234f7:	6a 01                	push   0x1
c00234f9:	53                   	push   ebx
c00234fa:	e8 b5 fb ff ff       	call   c00230b4 <IDE::enableIRQs(unsigned char, bool)>
c00234ff:	83 c4 2c             	add    esp,0x2c
c0023502:	31 c0                	xor    eax,eax
c0023504:	5b                   	pop    ebx
c0023505:	5e                   	pop    esi
c0023506:	5f                   	pop    edi
c0023507:	5d                   	pop    ebp
c0023508:	c3                   	ret    
c0023509:	90                   	nop

c002350a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c002350a:	55                   	push   ebp
c002350b:	57                   	push   edi
c002350c:	56                   	push   esi
c002350d:	53                   	push   ebx
c002350e:	83 ec 1c             	sub    esp,0x1c
c0023511:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0023515:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023519:	8d 50 f8             	lea    edx,[eax-0x8]
c002351c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023520:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0023524:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0023528:	80 fa 03             	cmp    dl,0x3
c002352b:	77 5d                	ja     c002358a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c002352d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0023531:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023535:	0f b6 db             	movzx  ebx,bl
c0023538:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c002353b:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c002353f:	83 ca 80             	or     edx,0xffffff80
c0023542:	0f b6 d2             	movzx  edx,dl
c0023545:	52                   	push   edx
c0023546:	6a 0c                	push   0xc
c0023548:	53                   	push   ebx
c0023549:	56                   	push   esi
c002354a:	e8 59 f9 ff ff       	call   c0022ea8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002354f:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0023554:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023558:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002355c:	0f b6 c0             	movzx  eax,al
c002355f:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0023563:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023565:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c002356a:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c002356e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0023572:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023576:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002357e:	83 c4 2c             	add    esp,0x2c
c0023581:	5b                   	pop    ebx
c0023582:	5e                   	pop    esi
c0023583:	5f                   	pop    edi
c0023584:	5d                   	pop    ebp
c0023585:	e9 1e f9 ff ff       	jmp    c0022ea8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002358a:	3c 07                	cmp    al,0x7
c002358c:	77 10                	ja     c002359e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c002358e:	0f b6 db             	movzx  ebx,bl
c0023591:	0f b6 d0             	movzx  edx,al
c0023594:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c002359c:	eb 2d                	jmp    c00235cb <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c002359e:	3c 0d                	cmp    al,0xd
c00235a0:	77 13                	ja     c00235b5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c00235a2:	0f b6 db             	movzx  ebx,bl
c00235a5:	0f b6 c0             	movzx  eax,al
c00235a8:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c00235af:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c00235b3:	eb 16                	jmp    c00235cb <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00235b5:	3c 15                	cmp    al,0x15
c00235b7:	77 14                	ja     c00235cd <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c00235b9:	0f b6 db             	movzx  ebx,bl
c00235bc:	0f b6 c0             	movzx  eax,al
c00235bf:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c00235c7:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c00235cb:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00235cd:	83 c4 1c             	add    esp,0x1c
c00235d0:	5b                   	pop    ebx
c00235d1:	5e                   	pop    esi
c00235d2:	5f                   	pop    edi
c00235d3:	5d                   	pop    ebp
c00235d4:	c3                   	ret    
c00235d5:	90                   	nop

c00235d6 <IDE::detect()>:
c00235d6:	55                   	push   ebp
c00235d7:	57                   	push   edi
c00235d8:	56                   	push   esi
c00235d9:	53                   	push   ebx
c00235da:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00235e0:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c00235e7:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00235ee:	0f 85 be 02 00 00    	jne    c00238b2 <IDE::detect()+0x2dc>
c00235f4:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c00235fb:	31 f6                	xor    esi,esi
c00235fd:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0023605:	31 ed                	xor    ebp,ebp
c0023607:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002360b:	c1 e0 06             	shl    eax,0x6
c002360e:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0023616:	89 e8                	mov    eax,ebp
c0023618:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002361c:	c1 e0 04             	shl    eax,0x4
c002361f:	83 c8 a0             	or     eax,0xffffffa0
c0023622:	0f b6 c0             	movzx  eax,al
c0023625:	50                   	push   eax
c0023626:	6a 06                	push   0x6
c0023628:	56                   	push   esi
c0023629:	53                   	push   ebx
c002362a:	e8 79 f8 ff ff       	call   c0022ea8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002362f:	83 c4 0c             	add    esp,0xc
c0023632:	6a 0c                	push   0xc
c0023634:	56                   	push   esi
c0023635:	53                   	push   ebx
c0023636:	e8 2d f9 ff ff       	call   c0022f68 <IDE::read(unsigned char, unsigned char)>
c002363b:	83 c4 0c             	add    esp,0xc
c002363e:	6a 0c                	push   0xc
c0023640:	56                   	push   esi
c0023641:	53                   	push   ebx
c0023642:	e8 21 f9 ff ff       	call   c0022f68 <IDE::read(unsigned char, unsigned char)>
c0023647:	83 c4 0c             	add    esp,0xc
c002364a:	6a 0c                	push   0xc
c002364c:	56                   	push   esi
c002364d:	53                   	push   ebx
c002364e:	e8 15 f9 ff ff       	call   c0022f68 <IDE::read(unsigned char, unsigned char)>
c0023653:	83 c4 0c             	add    esp,0xc
c0023656:	6a 0c                	push   0xc
c0023658:	56                   	push   esi
c0023659:	53                   	push   ebx
c002365a:	e8 09 f9 ff ff       	call   c0022f68 <IDE::read(unsigned char, unsigned char)>
c002365f:	68 ec 00 00 00       	push   0xec
c0023664:	6a 07                	push   0x7
c0023666:	56                   	push   esi
c0023667:	53                   	push   ebx
c0023668:	e8 3b f8 ff ff       	call   c0022ea8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002366d:	83 c4 1c             	add    esp,0x1c
c0023670:	6a 0c                	push   0xc
c0023672:	56                   	push   esi
c0023673:	53                   	push   ebx
c0023674:	e8 ef f8 ff ff       	call   c0022f68 <IDE::read(unsigned char, unsigned char)>
c0023679:	83 c4 0c             	add    esp,0xc
c002367c:	6a 0c                	push   0xc
c002367e:	56                   	push   esi
c002367f:	53                   	push   ebx
c0023680:	e8 e3 f8 ff ff       	call   c0022f68 <IDE::read(unsigned char, unsigned char)>
c0023685:	83 c4 0c             	add    esp,0xc
c0023688:	6a 0c                	push   0xc
c002368a:	56                   	push   esi
c002368b:	53                   	push   ebx
c002368c:	e8 d7 f8 ff ff       	call   c0022f68 <IDE::read(unsigned char, unsigned char)>
c0023691:	83 c4 0c             	add    esp,0xc
c0023694:	6a 0c                	push   0xc
c0023696:	56                   	push   esi
c0023697:	53                   	push   ebx
c0023698:	e8 cb f8 ff ff       	call   c0022f68 <IDE::read(unsigned char, unsigned char)>
c002369d:	83 c4 0c             	add    esp,0xc
c00236a0:	6a 0c                	push   0xc
c00236a2:	56                   	push   esi
c00236a3:	53                   	push   ebx
c00236a4:	e8 bf f8 ff ff       	call   c0022f68 <IDE::read(unsigned char, unsigned char)>
c00236a9:	83 c4 10             	add    esp,0x10
c00236ac:	84 c0                	test   al,al
c00236ae:	0f 84 8b 01 00 00    	je     c002383f <IDE::detect()+0x269>
c00236b4:	31 ff                	xor    edi,edi
c00236b6:	50                   	push   eax
c00236b7:	6a 0c                	push   0xc
c00236b9:	56                   	push   esi
c00236ba:	53                   	push   ebx
c00236bb:	e8 a8 f8 ff ff       	call   c0022f68 <IDE::read(unsigned char, unsigned char)>
c00236c0:	83 c4 10             	add    esp,0x10
c00236c3:	a8 01                	test   al,0x1
c00236c5:	0f 85 8e 01 00 00    	jne    c0023859 <IDE::detect()+0x283>
c00236cb:	84 c0                	test   al,al
c00236cd:	78 04                	js     c00236d3 <IDE::detect()+0xfd>
c00236cf:	a8 08                	test   al,0x8
c00236d1:	75 27                	jne    c00236fa <IDE::detect()+0x124>
c00236d3:	47                   	inc    edi
c00236d4:	81 ff 17 01 00 00    	cmp    edi,0x117
c00236da:	7e da                	jle    c00236b6 <IDE::detect()+0xe0>
c00236dc:	50                   	push   eax
c00236dd:	50                   	push   eax
c00236de:	6a 00                	push   0x0
c00236e0:	68 40 4b 4c 00       	push   0x4c4b40
c00236e5:	e8 d2 aa ff ff       	call   c001e1bc <nanoSleep(unsigned long long)>
c00236ea:	83 c4 10             	add    esp,0x10
c00236ed:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c00236f3:	75 c1                	jne    c00236b6 <IDE::detect()+0xe0>
c00236f5:	e9 5f 01 00 00       	jmp    c0023859 <IDE::detect()+0x283>
c00236fa:	31 c9                	xor    ecx,ecx
c00236fc:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0023700:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0023704:	83 ec 0c             	sub    esp,0xc
c0023707:	68 80 00 00 00       	push   0x80
c002370c:	57                   	push   edi
c002370d:	6a 00                	push   0x0
c002370f:	56                   	push   esi
c0023710:	53                   	push   ebx
c0023711:	e8 f4 fd ff ff       	call   c002350a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0023716:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c002371b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002371f:	89 d1                	mov    ecx,edx
c0023721:	c1 e0 06             	shl    eax,0x6
c0023724:	01 d8                	add    eax,ebx
c0023726:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c002372d:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0023734:	89 f2                	mov    edx,esi
c0023736:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c002373c:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0023740:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0023746:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002374a:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0023751:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0023759:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0023760:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0023768:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c002376e:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0023775:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c002377b:	8d 54 24 58          	lea    edx,[esp+0x58]
c002377f:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0023783:	83 c4 20             	add    esp,0x20
c0023786:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0023789:	83 c0 02             	add    eax,0x2
c002378c:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0023792:	83 c7 02             	add    edi,0x2
c0023795:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0023798:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c002379e:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00237a2:	75 e2                	jne    c0023786 <IDE::detect()+0x1b0>
c00237a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00237a8:	c1 e0 06             	shl    eax,0x6
c00237ab:	01 d8                	add    eax,ebx
c00237ad:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c00237b3:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c00237ba:	66 c1 ea 09          	shr    dx,0x9
c00237be:	83 e2 01             	and    edx,0x1
c00237c1:	84 c9                	test   cl,cl
c00237c3:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c00237c9:	75 2f                	jne    c00237fa <IDE::detect()+0x224>
c00237cb:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c00237d1:	85 c0                	test   eax,eax
c00237d3:	74 66                	je     c002383b <IDE::detect()+0x265>
c00237d5:	50                   	push   eax
c00237d6:	55                   	push   ebp
c00237d7:	56                   	push   esi
c00237d8:	68 7f c9 02 c0       	push   0xc002c97f
c00237dd:	e8 b6 f5 fe ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c00237e2:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c00237e9:	e8 52 c0 fe ff       	call   c000f840 <malloc>
c00237ee:	89 c7                	mov    edi,eax
c00237f0:	89 04 24             	mov    DWORD PTR [esp],eax
c00237f3:	e8 78 06 00 00       	call   c0023e70 <ATA::ATA()>
c00237f8:	eb 28                	jmp    c0023822 <IDE::detect()+0x24c>
c00237fa:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c0023800:	55                   	push   ebp
c0023801:	56                   	push   esi
c0023802:	68 ae c9 02 c0       	push   0xc002c9ae
c0023807:	e8 8c f5 fe ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c002380c:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023813:	e8 28 c0 fe ff       	call   c000f840 <malloc>
c0023818:	89 c7                	mov    edi,eax
c002381a:	89 04 24             	mov    DWORD PTR [esp],eax
c002381d:	e8 8e 0c 00 00       	call   c00244b0 <ATAPI::ATAPI()>
c0023822:	5a                   	pop    edx
c0023823:	59                   	pop    ecx
c0023824:	57                   	push   edi
c0023825:	53                   	push   ebx
c0023826:	e8 93 09 ff ff       	call   c00141be <Device::addChild(Device*)>
c002382b:	8b 07                	mov    eax,DWORD PTR [edi]
c002382d:	53                   	push   ebx
c002382e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023832:	6a 00                	push   0x0
c0023834:	57                   	push   edi
c0023835:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023838:	83 c4 20             	add    esp,0x20
c002383b:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c002383f:	4d                   	dec    ebp
c0023840:	74 0a                	je     c002384c <IDE::detect()+0x276>
c0023842:	bd 01 00 00 00       	mov    ebp,0x1
c0023847:	e9 bb fd ff ff       	jmp    c0023607 <IDE::detect()+0x31>
c002384c:	4e                   	dec    esi
c002384d:	74 63                	je     c00238b2 <IDE::detect()+0x2dc>
c002384f:	be 01 00 00 00       	mov    esi,0x1
c0023854:	e9 ac fd ff ff       	jmp    c0023605 <IDE::detect()+0x2f>
c0023859:	50                   	push   eax
c002385a:	6a 04                	push   0x4
c002385c:	56                   	push   esi
c002385d:	53                   	push   ebx
c002385e:	e8 05 f7 ff ff       	call   c0022f68 <IDE::read(unsigned char, unsigned char)>
c0023863:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023867:	83 c4 0c             	add    esp,0xc
c002386a:	6a 05                	push   0x5
c002386c:	56                   	push   esi
c002386d:	53                   	push   ebx
c002386e:	e8 f5 f6 ff ff       	call   c0022f68 <IDE::read(unsigned char, unsigned char)>
c0023873:	83 c4 10             	add    esp,0x10
c0023876:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c002387a:	80 fa 14             	cmp    dl,0x14
c002387d:	75 04                	jne    c0023883 <IDE::detect()+0x2ad>
c002387f:	3c eb                	cmp    al,0xeb
c0023881:	eb 07                	jmp    c002388a <IDE::detect()+0x2b4>
c0023883:	3c 96                	cmp    al,0x96
c0023885:	75 b8                	jne    c002383f <IDE::detect()+0x269>
c0023887:	80 fa 69             	cmp    dl,0x69
c002388a:	75 b3                	jne    c002383f <IDE::detect()+0x269>
c002388c:	68 a1 00 00 00       	push   0xa1
c0023891:	6a 07                	push   0x7
c0023893:	56                   	push   esi
c0023894:	53                   	push   ebx
c0023895:	e8 0e f6 ff ff       	call   c0022ea8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002389a:	5f                   	pop    edi
c002389b:	58                   	pop    eax
c002389c:	6a 00                	push   0x0
c002389e:	68 40 42 0f 00       	push   0xf4240
c00238a3:	e8 14 a9 ff ff       	call   c001e1bc <nanoSleep(unsigned long long)>
c00238a8:	83 c4 10             	add    esp,0x10
c00238ab:	b1 01                	mov    cl,0x1
c00238ad:	e9 4a fe ff ff       	jmp    c00236fc <IDE::detect()+0x126>
c00238b2:	81 c4 1c 02 00 00    	add    esp,0x21c
c00238b8:	5b                   	pop    ebx
c00238b9:	5e                   	pop    esi
c00238ba:	5f                   	pop    edi
c00238bb:	5d                   	pop    ebp
c00238bc:	c3                   	ret    
c00238bd:	90                   	nop

c00238be <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c00238be:	55                   	push   ebp
c00238bf:	57                   	push   edi
c00238c0:	56                   	push   esi
c00238c1:	53                   	push   ebx
c00238c2:	83 ec 1c             	sub    esp,0x1c
c00238c5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00238c9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00238cd:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00238d1:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00238d5:	88 c3                	mov    bl,al
c00238d7:	84 c0                	test   al,al
c00238d9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00238dd:	0f 84 67 01 00 00    	je     c0023a4a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c00238e3:	83 ec 0c             	sub    esp,0xc
c00238e6:	68 df c9 02 c0       	push   0xc002c9df
c00238eb:	e8 a8 f4 fe ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c00238f0:	83 c4 10             	add    esp,0x10
c00238f3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00238f7:	3c 01                	cmp    al,0x1
c00238f9:	75 17                	jne    c0023912 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c00238fb:	83 ec 0c             	sub    esp,0xc
c00238fe:	b3 13                	mov    bl,0x13
c0023900:	68 eb c9 02 c0       	push   0xc002c9eb
c0023905:	e8 8e f4 fe ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c002390a:	83 c4 10             	add    esp,0x10
c002390d:	e9 25 01 00 00       	jmp    c0023a37 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023912:	3c 02                	cmp    al,0x2
c0023914:	0f 85 ef 00 00 00    	jne    c0023a09 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c002391a:	d1 e6                	shl    esi,1
c002391c:	09 ee                	or     esi,ebp
c002391e:	52                   	push   edx
c002391f:	89 f0                	mov    eax,esi
c0023921:	6a 01                	push   0x1
c0023923:	0f b6 f0             	movzx  esi,al
c0023926:	c1 e6 06             	shl    esi,0x6
c0023929:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0023931:	50                   	push   eax
c0023932:	57                   	push   edi
c0023933:	e8 30 f6 ff ff       	call   c0022f68 <IDE::read(unsigned char, unsigned char)>
c0023938:	83 c4 10             	add    esp,0x10
c002393b:	89 c6                	mov    esi,eax
c002393d:	a8 01                	test   al,0x1
c002393f:	74 12                	je     c0023953 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0023941:	83 ec 0c             	sub    esp,0xc
c0023944:	b3 07                	mov    bl,0x7
c0023946:	68 00 ca 02 c0       	push   0xc002ca00
c002394b:	e8 48 f4 fe ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0023950:	83 c4 10             	add    esp,0x10
c0023953:	f7 c6 02 00 00 00    	test   esi,0x2
c0023959:	74 12                	je     c002396d <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c002395b:	83 ec 0c             	sub    esp,0xc
c002395e:	b3 03                	mov    bl,0x3
c0023960:	68 1e ca 02 c0       	push   0xc002ca1e
c0023965:	e8 2e f4 fe ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c002396a:	83 c4 10             	add    esp,0x10
c002396d:	f7 c6 04 00 00 00    	test   esi,0x4
c0023973:	74 12                	je     c0023987 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0023975:	83 ec 0c             	sub    esp,0xc
c0023978:	b3 14                	mov    bl,0x14
c002397a:	68 3e ca 02 c0       	push   0xc002ca3e
c002397f:	e8 14 f4 fe ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0023984:	83 c4 10             	add    esp,0x10
c0023987:	f7 c6 08 00 00 00    	test   esi,0x8
c002398d:	74 12                	je     c00239a1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c002398f:	83 ec 0c             	sub    esp,0xc
c0023992:	b3 03                	mov    bl,0x3
c0023994:	68 1e ca 02 c0       	push   0xc002ca1e
c0023999:	e8 fa f3 fe ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c002399e:	83 c4 10             	add    esp,0x10
c00239a1:	f7 c6 10 00 00 00    	test   esi,0x10
c00239a7:	74 12                	je     c00239bb <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c00239a9:	83 ec 0c             	sub    esp,0xc
c00239ac:	b3 15                	mov    bl,0x15
c00239ae:	68 56 ca 02 c0       	push   0xc002ca56
c00239b3:	e8 e0 f3 fe ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c00239b8:	83 c4 10             	add    esp,0x10
c00239bb:	f7 c6 20 00 00 00    	test   esi,0x20
c00239c1:	74 12                	je     c00239d5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c00239c3:	83 ec 0c             	sub    esp,0xc
c00239c6:	b3 03                	mov    bl,0x3
c00239c8:	68 1e ca 02 c0       	push   0xc002ca1e
c00239cd:	e8 c6 f3 fe ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c00239d2:	83 c4 10             	add    esp,0x10
c00239d5:	f7 c6 40 00 00 00    	test   esi,0x40
c00239db:	74 12                	je     c00239ef <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c00239dd:	83 ec 0c             	sub    esp,0xc
c00239e0:	b3 16                	mov    bl,0x16
c00239e2:	68 70 ca 02 c0       	push   0xc002ca70
c00239e7:	e8 ac f3 fe ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c00239ec:	83 c4 10             	add    esp,0x10
c00239ef:	89 f0                	mov    eax,esi
c00239f1:	84 c0                	test   al,al
c00239f3:	79 42                	jns    c0023a37 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00239f5:	83 ec 0c             	sub    esp,0xc
c00239f8:	b3 0d                	mov    bl,0xd
c00239fa:	68 91 ca 02 c0       	push   0xc002ca91
c00239ff:	e8 94 f3 fe ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0023a04:	83 c4 10             	add    esp,0x10
c0023a07:	eb 2e                	jmp    c0023a37 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023a09:	3c 03                	cmp    al,0x3
c0023a0b:	75 14                	jne    c0023a21 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0023a0d:	83 ec 0c             	sub    esp,0xc
c0023a10:	b3 17                	mov    bl,0x17
c0023a12:	68 a5 ca 02 c0       	push   0xc002caa5
c0023a17:	e8 7c f3 fe ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0023a1c:	83 c4 10             	add    esp,0x10
c0023a1f:	eb 16                	jmp    c0023a37 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023a21:	3c 04                	cmp    al,0x4
c0023a23:	75 12                	jne    c0023a37 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023a25:	83 ec 0c             	sub    esp,0xc
c0023a28:	b3 08                	mov    bl,0x8
c0023a2a:	68 bb ca 02 c0       	push   0xc002cabb
c0023a2f:	e8 64 f3 fe ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0023a34:	83 c4 10             	add    esp,0x10
c0023a37:	50                   	push   eax
c0023a38:	50                   	push   eax
c0023a39:	0f b6 c3             	movzx  eax,bl
c0023a3c:	50                   	push   eax
c0023a3d:	68 d3 ca 02 c0       	push   0xc002cad3
c0023a42:	e8 51 f3 fe ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0023a47:	83 c4 10             	add    esp,0x10
c0023a4a:	83 c4 1c             	add    esp,0x1c
c0023a4d:	88 d8                	mov    al,bl
c0023a4f:	5b                   	pop    ebx
c0023a50:	5e                   	pop    esi
c0023a51:	5f                   	pop    edi
c0023a52:	5d                   	pop    ebp
c0023a53:	c3                   	ret    

c0023a54 <IDE::polling(unsigned char, unsigned int)>:
c0023a54:	57                   	push   edi
c0023a55:	56                   	push   esi
c0023a56:	53                   	push   ebx
c0023a57:	bb 04 00 00 00       	mov    ebx,0x4
c0023a5c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0023a60:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023a65:	52                   	push   edx
c0023a66:	6a 0c                	push   0xc
c0023a68:	56                   	push   esi
c0023a69:	57                   	push   edi
c0023a6a:	e8 f9 f4 ff ff       	call   c0022f68 <IDE::read(unsigned char, unsigned char)>
c0023a6f:	83 c4 10             	add    esp,0x10
c0023a72:	4b                   	dec    ebx
c0023a73:	75 f0                	jne    c0023a65 <IDE::polling(unsigned char, unsigned int)+0x11>
c0023a75:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023a7a:	50                   	push   eax
c0023a7b:	6a 0c                	push   0xc
c0023a7d:	56                   	push   esi
c0023a7e:	57                   	push   edi
c0023a7f:	e8 e4 f4 ff ff       	call   c0022f68 <IDE::read(unsigned char, unsigned char)>
c0023a84:	83 c4 10             	add    esp,0x10
c0023a87:	a8 01                	test   al,0x1
c0023a89:	74 12                	je     c0023a9d <IDE::polling(unsigned char, unsigned int)+0x49>
c0023a8b:	83 ec 0c             	sub    esp,0xc
c0023a8e:	68 ed ca 02 c0       	push   0xc002caed
c0023a93:	e8 00 f3 fe ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0023a98:	83 c4 10             	add    esp,0x10
c0023a9b:	eb 17                	jmp    c0023ab4 <IDE::polling(unsigned char, unsigned int)+0x60>
c0023a9d:	a8 20                	test   al,0x20
c0023a9f:	75 0f                	jne    c0023ab0 <IDE::polling(unsigned char, unsigned int)+0x5c>
c0023aa1:	4b                   	dec    ebx
c0023aa2:	74 10                	je     c0023ab4 <IDE::polling(unsigned char, unsigned int)+0x60>
c0023aa4:	84 c0                	test   al,al
c0023aa6:	78 d2                	js     c0023a7a <IDE::polling(unsigned char, unsigned int)+0x26>
c0023aa8:	a8 08                	test   al,0x8
c0023aaa:	74 ce                	je     c0023a7a <IDE::polling(unsigned char, unsigned int)+0x26>
c0023aac:	31 c0                	xor    eax,eax
c0023aae:	eb 06                	jmp    c0023ab6 <IDE::polling(unsigned char, unsigned int)+0x62>
c0023ab0:	b0 01                	mov    al,0x1
c0023ab2:	eb 02                	jmp    c0023ab6 <IDE::polling(unsigned char, unsigned int)+0x62>
c0023ab4:	b0 02                	mov    al,0x2
c0023ab6:	5b                   	pop    ebx
c0023ab7:	5e                   	pop    esi
c0023ab8:	5f                   	pop    edi
c0023ab9:	c3                   	ret    

c0023aba <SATABus::close(int, int, void*)>:
c0023aba:	31 c0                	xor    eax,eax
c0023abc:	c3                   	ret    
c0023abd:	90                   	nop

c0023abe <SATABus::detect()>:
c0023abe:	c3                   	ret    
c0023abf:	90                   	nop

c0023ac0 <SATABus::SATABus()>:
c0023ac0:	83 ec 0c             	sub    esp,0xc
c0023ac3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ac7:	83 ec 08             	sub    esp,0x8
c0023aca:	68 30 cb 02 c0       	push   0xc002cb30
c0023acf:	50                   	push   eax
c0023ad0:	e8 75 0a ff ff       	call   c001454a <HardDiskController::HardDiskController(char const*)>
c0023ad5:	83 c4 10             	add    esp,0x10
c0023ad8:	ba ec cb 02 c0       	mov    edx,0xc002cbec
c0023add:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ae1:	89 10                	mov    DWORD PTR [eax],edx
c0023ae3:	83 ec 0c             	sub    esp,0xc
c0023ae6:	6a 50                	push   0x50
c0023ae8:	e8 d5 c4 fe ff       	call   c000ffc2 <Phys::allocateContiguousPages(int)>
c0023aed:	83 c4 10             	add    esp,0x10
c0023af0:	89 c2                	mov    edx,eax
c0023af2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023af6:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023afc:	83 ec 0c             	sub    esp,0xc
c0023aff:	6a 50                	push   0x50
c0023b01:	e8 35 e0 fe ff       	call   c0011b3b <Virt::allocateKernelVirtualPages(int)>
c0023b06:	83 c4 10             	add    esp,0x10
c0023b09:	89 c2                	mov    edx,eax
c0023b0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b0f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023b15:	e8 c8 e2 fe ff       	call   c0011de2 <Virt::getAKernelVAS()>
c0023b1a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023b1e:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0023b24:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023b28:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0023b2e:	83 ec 0c             	sub    esp,0xc
c0023b31:	6a 03                	push   0x3
c0023b33:	6a 50                	push   0x50
c0023b35:	51                   	push   ecx
c0023b36:	52                   	push   edx
c0023b37:	50                   	push   eax
c0023b38:	e8 bb e9 fe ff       	call   c00124f8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0023b3d:	83 c4 20             	add    esp,0x20
c0023b40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b44:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0023b4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b4e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0023b54:	83 ec 04             	sub    esp,0x4
c0023b57:	52                   	push   edx
c0023b58:	50                   	push   eax
c0023b59:	68 54 cb 02 c0       	push   0xc002cb54
c0023b5e:	e8 35 f2 fe ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0023b63:	83 c4 10             	add    esp,0x10
c0023b66:	90                   	nop
c0023b67:	83 c4 0c             	add    esp,0xc
c0023b6a:	c3                   	ret    
c0023b6b:	90                   	nop

c0023b6c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0023b6c:	83 ec 0c             	sub    esp,0xc
c0023b6f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023b73:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0023b76:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0023b79:	09 c2                	or     edx,eax
c0023b7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b7f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023b85:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023b87:	31 c0                	xor    eax,eax
c0023b89:	c1 e9 08             	shr    ecx,0x8
c0023b8c:	83 e1 0f             	and    ecx,0xf
c0023b8f:	39 c8                	cmp    eax,ecx
c0023b91:	74 0a                	je     c0023b9d <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0023b93:	f6 c2 01             	test   dl,0x1
c0023b96:	74 18                	je     c0023bb0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0023b98:	d1 ea                	shr    edx,1
c0023b9a:	40                   	inc    eax
c0023b9b:	eb f2                	jmp    c0023b8f <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0023b9d:	83 ec 0c             	sub    esp,0xc
c0023ba0:	68 78 cb 02 c0       	push   0xc002cb78
c0023ba5:	e8 c9 68 ff ff       	call   c001a473 <Krnl::panic(char const*)>
c0023baa:	83 c4 10             	add    esp,0x10
c0023bad:	83 c8 ff             	or     eax,0xffffffff
c0023bb0:	83 c4 0c             	add    esp,0xc
c0023bb3:	c3                   	ret    

c0023bb4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0023bb4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023bb8:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0023bbb:	89 c2                	mov    edx,eax
c0023bbd:	c1 ea 08             	shr    edx,0x8
c0023bc0:	83 e2 0f             	and    edx,0xf
c0023bc3:	fe ca                	dec    dl
c0023bc5:	75 31                	jne    c0023bf8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023bc7:	83 e0 0f             	and    eax,0xf
c0023bca:	3c 03                	cmp    al,0x3
c0023bcc:	75 2a                	jne    c0023bf8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023bce:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0023bd1:	b8 02 00 00 00       	mov    eax,0x2
c0023bd6:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0023bdc:	74 1c                	je     c0023bfa <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023bde:	b8 04 00 00 00       	mov    eax,0x4
c0023be3:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0023be9:	74 0f                	je     c0023bfa <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023beb:	31 c0                	xor    eax,eax
c0023bed:	83 fa 03             	cmp    edx,0x3
c0023bf0:	0f 94 c0             	sete   al
c0023bf3:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0023bf7:	c3                   	ret    
c0023bf8:	31 c0                	xor    eax,eax
c0023bfa:	c3                   	ret    
c0023bfb:	90                   	nop

c0023bfc <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0023bfc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023c00:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023c03:	0f ba e2 0f          	bt     edx,0xf
c0023c07:	72 f7                	jb     c0023c00 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0023c09:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023c0c:	83 ca 10             	or     edx,0x10
c0023c0f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023c12:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023c15:	83 ca 01             	or     edx,0x1
c0023c18:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023c1b:	c3                   	ret    

c0023c1c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0023c1c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023c20:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023c23:	83 e2 fe             	and    edx,0xfffffffe
c0023c26:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023c29:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023c2c:	83 e2 ef             	and    edx,0xffffffef
c0023c2f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023c32:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023c35:	0f ba e2 0e          	bt     edx,0xe
c0023c39:	72 f7                	jb     c0023c32 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023c3b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023c3e:	0f ba e2 0f          	bt     edx,0xf
c0023c42:	72 ee                	jb     c0023c32 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023c44:	c3                   	ret    
c0023c45:	90                   	nop

c0023c46 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0023c46:	55                   	push   ebp
c0023c47:	57                   	push   edi
c0023c48:	56                   	push   esi
c0023c49:	53                   	push   ebx
c0023c4a:	83 ec 1c             	sub    esp,0x1c
c0023c4d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023c51:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023c55:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023c59:	53                   	push   ebx
c0023c5a:	89 fd                	mov    ebp,edi
c0023c5c:	56                   	push   esi
c0023c5d:	c1 e5 0a             	shl    ebp,0xa
c0023c60:	e8 b7 ff ff ff       	call   c0023c1c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0023c65:	83 ec 0c             	sub    esp,0xc
c0023c68:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0023c6e:	01 e8                	add    eax,ebp
c0023c70:	89 03                	mov    DWORD PTR [ebx],eax
c0023c72:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023c74:	68 00 04 00 00       	push   0x400
c0023c79:	6a 00                	push   0x0
c0023c7b:	50                   	push   eax
c0023c7c:	e8 f7 ca fd ff       	call   c0000778 <memset>
c0023c81:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0023c87:	89 fa                	mov    edx,edi
c0023c89:	01 e8                	add    eax,ebp
c0023c8b:	c1 e7 0d             	shl    edi,0xd
c0023c8e:	89 03                	mov    DWORD PTR [ebx],eax
c0023c90:	c1 e2 08             	shl    edx,0x8
c0023c93:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0023c9a:	81 c2 00 80 00 00    	add    edx,0x8000
c0023ca0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0023ca4:	89 d0                	mov    eax,edx
c0023ca6:	83 c4 1c             	add    esp,0x1c
c0023ca9:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023caf:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0023cb2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023cb5:	68 00 01 00 00       	push   0x100
c0023cba:	6a 00                	push   0x0
c0023cbc:	50                   	push   eax
c0023cbd:	e8 b6 ca fd ff       	call   c0000778 <memset>
c0023cc2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023cc6:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023ccc:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0023cd2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023cd6:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0023cd9:	83 c4 10             	add    esp,0x10
c0023cdc:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023ce3:	31 ff                	xor    edi,edi
c0023ce5:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0023ceb:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0023cf1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023cf5:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023cfb:	83 c5 20             	add    ebp,0x20
c0023cfe:	01 f8                	add    eax,edi
c0023d00:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023d03:	52                   	push   edx
c0023d04:	68 00 01 00 00       	push   0x100
c0023d09:	6a 00                	push   0x0
c0023d0b:	50                   	push   eax
c0023d0c:	e8 67 ca fd ff       	call   c0000778 <memset>
c0023d11:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023d15:	83 c4 10             	add    esp,0x10
c0023d18:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0023d1e:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0023d25:	01 f8                	add    eax,edi
c0023d27:	81 c7 00 01 00 00    	add    edi,0x100
c0023d2d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023d30:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0023d36:	75 b3                	jne    c0023ceb <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0023d38:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0023d3c:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023d40:	83 c4 1c             	add    esp,0x1c
c0023d43:	5b                   	pop    ebx
c0023d44:	5e                   	pop    esi
c0023d45:	5f                   	pop    edi
c0023d46:	5d                   	pop    ebp
c0023d47:	e9 b0 fe ff ff       	jmp    c0023bfc <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0023d4c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023d4c:	55                   	push   ebp
c0023d4d:	57                   	push   edi
c0023d4e:	56                   	push   esi
c0023d4f:	53                   	push   ebx
c0023d50:	31 db                	xor    ebx,ebx
c0023d52:	83 ec 0c             	sub    esp,0xc
c0023d55:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023d59:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023d5d:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0023d60:	f7 c7 01 00 00 00    	test   edi,0x1
c0023d66:	0f 84 aa 00 00 00    	je     c0023e16 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023d6c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023d70:	89 d8                	mov    eax,ebx
c0023d72:	c1 e0 07             	shl    eax,0x7
c0023d75:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0023d7c:	55                   	push   ebp
c0023d7d:	56                   	push   esi
c0023d7e:	e8 31 fe ff ff       	call   c0023bb4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0023d83:	5a                   	pop    edx
c0023d84:	83 f8 01             	cmp    eax,0x1
c0023d87:	59                   	pop    ecx
c0023d88:	75 30                	jne    c0023dba <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c0023d8a:	50                   	push   eax
c0023d8b:	50                   	push   eax
c0023d8c:	53                   	push   ebx
c0023d8d:	68 9d cb 02 c0       	push   0xc002cb9d
c0023d92:	e8 01 f0 fe ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0023d97:	83 c4 0c             	add    esp,0xc
c0023d9a:	53                   	push   ebx
c0023d9b:	55                   	push   ebp
c0023d9c:	56                   	push   esi
c0023d9d:	e8 a4 fe ff ff       	call   c0023c46 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023da2:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023da9:	e8 92 ba fe ff       	call   c000f840 <malloc>
c0023dae:	89 c5                	mov    ebp,eax
c0023db0:	89 04 24             	mov    DWORD PTR [esp],eax
c0023db3:	e8 60 0d 00 00       	call   c0024b18 <SATA::SATA()>
c0023db8:	eb 33                	jmp    c0023ded <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c0023dba:	83 f8 04             	cmp    eax,0x4
c0023dbd:	75 47                	jne    c0023e06 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c0023dbf:	50                   	push   eax
c0023dc0:	50                   	push   eax
c0023dc1:	53                   	push   ebx
c0023dc2:	68 b4 cb 02 c0       	push   0xc002cbb4
c0023dc7:	e8 cc ef fe ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0023dcc:	83 c4 0c             	add    esp,0xc
c0023dcf:	53                   	push   ebx
c0023dd0:	55                   	push   ebp
c0023dd1:	56                   	push   esi
c0023dd2:	e8 6f fe ff ff       	call   c0023c46 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023dd7:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023dde:	e8 5d ba fe ff       	call   c000f840 <malloc>
c0023de3:	89 c5                	mov    ebp,eax
c0023de5:	89 04 24             	mov    DWORD PTR [esp],eax
c0023de8:	e8 d7 10 00 00       	call   c0024ec4 <SATAPI::SATAPI()>
c0023ded:	5a                   	pop    edx
c0023dee:	59                   	pop    ecx
c0023def:	55                   	push   ebp
c0023df0:	56                   	push   esi
c0023df1:	e8 c8 03 ff ff       	call   c00141be <Device::addChild(Device*)>
c0023df6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0023df9:	56                   	push   esi
c0023dfa:	6a 00                	push   0x0
c0023dfc:	53                   	push   ebx
c0023dfd:	55                   	push   ebp
c0023dfe:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023e01:	83 c4 20             	add    esp,0x20
c0023e04:	eb 10                	jmp    c0023e16 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023e06:	50                   	push   eax
c0023e07:	50                   	push   eax
c0023e08:	53                   	push   ebx
c0023e09:	68 cd cb 02 c0       	push   0xc002cbcd
c0023e0e:	e8 85 ef fe ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0023e13:	83 c4 10             	add    esp,0x10
c0023e16:	d1 ef                	shr    edi,1
c0023e18:	43                   	inc    ebx
c0023e19:	83 fb 20             	cmp    ebx,0x20
c0023e1c:	0f 85 3e ff ff ff    	jne    c0023d60 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0023e22:	83 c4 0c             	add    esp,0xc
c0023e25:	5b                   	pop    ebx
c0023e26:	5e                   	pop    esi
c0023e27:	5f                   	pop    edi
c0023e28:	5d                   	pop    ebp
c0023e29:	c3                   	ret    

c0023e2a <SATABus::open(int, int, void*)>:
c0023e2a:	83 ec 14             	sub    esp,0x14
c0023e2d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023e31:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0023e37:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0023e3d:	52                   	push   edx
c0023e3e:	50                   	push   eax
c0023e3f:	e8 08 ff ff ff       	call   c0023d4c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0023e44:	31 c0                	xor    eax,eax
c0023e46:	83 c4 1c             	add    esp,0x1c
c0023e49:	c3                   	ret    

c0023e4a <ATA::close(int, int, void*)>:
c0023e4a:	83 ec 0c             	sub    esp,0xc
c0023e4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023e51:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023e57:	85 c0                	test   eax,eax
c0023e59:	74 0c                	je     c0023e67 <ATA::close(int, int, void*)+0x1d>
c0023e5b:	83 ec 0c             	sub    esp,0xc
c0023e5e:	8b 10                	mov    edx,DWORD PTR [eax]
c0023e60:	50                   	push   eax
c0023e61:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023e64:	83 c4 10             	add    esp,0x10
c0023e67:	31 c0                	xor    eax,eax
c0023e69:	83 c4 0c             	add    esp,0xc
c0023e6c:	c3                   	ret    
c0023e6d:	90                   	nop

c0023e6e <ATA::powerSaving(PowerSavingLevel)>:
c0023e6e:	c3                   	ret    
c0023e6f:	90                   	nop

c0023e70 <ATA::ATA()>:
c0023e70:	83 ec 0c             	sub    esp,0xc
c0023e73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023e77:	83 ec 04             	sub    esp,0x4
c0023e7a:	68 00 02 00 00       	push   0x200
c0023e7f:	68 b5 cc 02 c0       	push   0xc002ccb5
c0023e84:	50                   	push   eax
c0023e85:	e8 58 07 ff ff       	call   c00145e2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023e8a:	83 c4 10             	add    esp,0x10
c0023e8d:	ba 38 cc 02 c0       	mov    edx,0xc002cc38
c0023e92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023e96:	89 10                	mov    DWORD PTR [eax],edx
c0023e98:	90                   	nop
c0023e99:	83 c4 0c             	add    esp,0xc
c0023e9c:	c3                   	ret    
c0023e9d:	90                   	nop

c0023e9e <ATA::flush(bool)>:
c0023e9e:	53                   	push   ebx
c0023e9f:	83 ec 08             	sub    esp,0x8
c0023ea2:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0023ea7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023eab:	19 c0                	sbb    eax,eax
c0023ead:	83 e0 fd             	and    eax,0xfffffffd
c0023eb0:	05 ea 00 00 00       	add    eax,0xea
c0023eb5:	50                   	push   eax
c0023eb6:	6a 07                	push   0x7
c0023eb8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023ebf:	50                   	push   eax
c0023ec0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023ec6:	e8 dd ef ff ff       	call   c0022ea8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023ecb:	83 c4 0c             	add    esp,0xc
c0023ece:	6a 00                	push   0x0
c0023ed0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023ed7:	50                   	push   eax
c0023ed8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023ede:	e8 71 fb ff ff       	call   c0023a54 <IDE::polling(unsigned char, unsigned int)>
c0023ee3:	83 c4 18             	add    esp,0x18
c0023ee6:	5b                   	pop    ebx
c0023ee7:	c3                   	ret    

c0023ee8 <ATA::readyForCommand()>:
c0023ee8:	56                   	push   esi
c0023ee9:	53                   	push   ebx
c0023eea:	31 db                	xor    ebx,ebx
c0023eec:	50                   	push   eax
c0023eed:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023ef1:	50                   	push   eax
c0023ef2:	6a 0c                	push   0xc
c0023ef4:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0023efb:	50                   	push   eax
c0023efc:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0023f02:	e8 61 f0 ff ff       	call   c0022f68 <IDE::read(unsigned char, unsigned char)>
c0023f07:	83 c4 10             	add    esp,0x10
c0023f0a:	a8 88                	test   al,0x88
c0023f0c:	74 23                	je     c0023f31 <ATA::readyForCommand()+0x49>
c0023f0e:	43                   	inc    ebx
c0023f0f:	83 fb 63             	cmp    ebx,0x63
c0023f12:	7e dd                	jle    c0023ef1 <ATA::readyForCommand()+0x9>
c0023f14:	51                   	push   ecx
c0023f15:	51                   	push   ecx
c0023f16:	6a 00                	push   0x0
c0023f18:	68 40 42 0f 00       	push   0xf4240
c0023f1d:	e8 9a a2 ff ff       	call   c001e1bc <nanoSleep(unsigned long long)>
c0023f22:	83 c4 10             	add    esp,0x10
c0023f25:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0023f2b:	75 c4                	jne    c0023ef1 <ATA::readyForCommand()+0x9>
c0023f2d:	31 c0                	xor    eax,eax
c0023f2f:	eb 02                	jmp    c0023f33 <ATA::readyForCommand()+0x4b>
c0023f31:	b0 01                	mov    al,0x1
c0023f33:	5a                   	pop    edx
c0023f34:	5b                   	pop    ebx
c0023f35:	5e                   	pop    esi
c0023f36:	c3                   	ret    
c0023f37:	90                   	nop

c0023f38 <ATA::access(unsigned long long, int, void*, bool)>:
c0023f38:	55                   	push   ebp
c0023f39:	57                   	push   edi
c0023f3a:	56                   	push   esi
c0023f3b:	53                   	push   ebx
c0023f3c:	83 ec 2c             	sub    esp,0x2c
c0023f3f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0023f43:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0023f47:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0023f4b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023f4f:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0023f53:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0023f57:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0023f5b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0023f61:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023f65:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0023f6b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023f6f:	c1 e0 06             	shl    eax,0x6
c0023f72:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0023f7a:	74 5d                	je     c0023fd9 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0023f7c:	89 fa                	mov    edx,edi
c0023f7e:	89 f0                	mov    eax,esi
c0023f80:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0023f84:	c1 ea 1c             	shr    edx,0x1c
c0023f87:	89 d1                	mov    ecx,edx
c0023f89:	09 c1                	or     ecx,eax
c0023f8b:	74 25                	je     c0023fb2 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0023f8d:	31 ed                	xor    ebp,ebp
c0023f8f:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0023f96:	89 fa                	mov    edx,edi
c0023f98:	89 f0                	mov    eax,esi
c0023f9a:	0f ad d0             	shrd   eax,edx,cl
c0023f9d:	d3 ea                	shr    edx,cl
c0023f9f:	f6 c1 20             	test   cl,0x20
c0023fa2:	74 02                	je     c0023fa6 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0023fa4:	89 d0                	mov    eax,edx
c0023fa6:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0023faa:	45                   	inc    ebp
c0023fab:	83 fd 06             	cmp    ebp,0x6
c0023fae:	75 df                	jne    c0023f8f <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0023fb0:	eb 76                	jmp    c0024028 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0023fb2:	89 f0                	mov    eax,esi
c0023fb4:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0023fb9:	89 fa                	mov    edx,edi
c0023fbb:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0023fc2:	0f ac d0 10          	shrd   eax,edx,0x10
c0023fc6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0023fcb:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0023fcf:	c1 ee 18             	shr    esi,0x18
c0023fd2:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0023fd7:	eb 56                	jmp    c002402f <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0023fd9:	6a 00                	push   0x0
c0023fdb:	6a 3f                	push   0x3f
c0023fdd:	57                   	push   edi
c0023fde:	56                   	push   esi
c0023fdf:	e8 98 29 00 00       	call   c002697c <__umoddi3>
c0023fe4:	83 c4 10             	add    esp,0x10
c0023fe7:	40                   	inc    eax
c0023fe8:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0023fec:	6a 00                	push   0x0
c0023fee:	68 f0 03 00 00       	push   0x3f0
c0023ff3:	57                   	push   edi
c0023ff4:	56                   	push   esi
c0023ff5:	e8 82 28 00 00       	call   c002687c <__udivdi3>
c0023ffa:	83 c4 10             	add    esp,0x10
c0023ffd:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0024002:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024009:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002400e:	6a 00                	push   0x0
c0024010:	6a 3f                	push   0x3f
c0024012:	57                   	push   edi
c0024013:	56                   	push   esi
c0024014:	e8 63 28 00 00       	call   c002687c <__udivdi3>
c0024019:	83 c4 10             	add    esp,0x10
c002401c:	89 c6                	mov    esi,eax
c002401e:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0024023:	83 e6 0f             	and    esi,0xf
c0024026:	eb 07                	jmp    c002402f <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024028:	31 f6                	xor    esi,esi
c002402a:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c002402f:	bf 01 00 00 00       	mov    edi,0x1
c0024034:	50                   	push   eax
c0024035:	6a 00                	push   0x0
c0024037:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002403e:	50                   	push   eax
c002403f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024043:	e8 6c f0 ff ff       	call   c00230b4 <IDE::enableIRQs(unsigned char, bool)>
c0024048:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002404b:	e8 98 fe ff ff       	call   c0023ee8 <ATA::readyForCommand()>
c0024050:	83 c4 10             	add    esp,0x10
c0024053:	84 c0                	test   al,al
c0024055:	0f 84 5a 02 00 00    	je     c00242b5 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c002405b:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0024061:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024067:	c1 e0 04             	shl    eax,0x4
c002406a:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0024071:	09 c6                	or     esi,eax
c0024073:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0024078:	75 05                	jne    c002407f <ATA::access(unsigned long long, int, void*, bool)+0x147>
c002407a:	83 ce a0             	or     esi,0xffffffa0
c002407d:	eb 03                	jmp    c0024082 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c002407f:	83 ce e0             	or     esi,0xffffffe0
c0024082:	89 f0                	mov    eax,esi
c0024084:	0f b6 f0             	movzx  esi,al
c0024087:	56                   	push   esi
c0024088:	6a 06                	push   0x6
c002408a:	51                   	push   ecx
c002408b:	52                   	push   edx
c002408c:	e8 17 ee ff ff       	call   c0022ea8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024091:	83 c4 10             	add    esp,0x10
c0024094:	6a 00                	push   0x0
c0024096:	6a 01                	push   0x1
c0024098:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002409f:	50                   	push   eax
c00240a0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00240a6:	e8 fd ed ff ff       	call   c0022ea8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00240ab:	83 c4 10             	add    esp,0x10
c00240ae:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00240b3:	75 6e                	jne    c0024123 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c00240b5:	6a 00                	push   0x0
c00240b7:	6a 08                	push   0x8
c00240b9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00240c0:	50                   	push   eax
c00240c1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00240c7:	e8 dc ed ff ff       	call   c0022ea8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00240cc:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00240d1:	50                   	push   eax
c00240d2:	6a 09                	push   0x9
c00240d4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00240db:	50                   	push   eax
c00240dc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00240e2:	e8 c1 ed ff ff       	call   c0022ea8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00240e7:	83 c4 20             	add    esp,0x20
c00240ea:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c00240ef:	50                   	push   eax
c00240f0:	6a 0a                	push   0xa
c00240f2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00240f9:	50                   	push   eax
c00240fa:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024100:	e8 a3 ed ff ff       	call   c0022ea8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024105:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c002410a:	50                   	push   eax
c002410b:	6a 0b                	push   0xb
c002410d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024114:	50                   	push   eax
c0024115:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002411b:	e8 88 ed ff ff       	call   c0022ea8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024120:	83 c4 20             	add    esp,0x20
c0024123:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0024128:	50                   	push   eax
c0024129:	6a 02                	push   0x2
c002412b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024132:	50                   	push   eax
c0024133:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024139:	e8 6a ed ff ff       	call   c0022ea8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002413e:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0024143:	50                   	push   eax
c0024144:	6a 03                	push   0x3
c0024146:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002414d:	50                   	push   eax
c002414e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024154:	e8 4f ed ff ff       	call   c0022ea8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024159:	83 c4 20             	add    esp,0x20
c002415c:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0024161:	50                   	push   eax
c0024162:	6a 04                	push   0x4
c0024164:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002416b:	50                   	push   eax
c002416c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024172:	e8 31 ed ff ff       	call   c0022ea8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024177:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002417c:	50                   	push   eax
c002417d:	6a 05                	push   0x5
c002417f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024186:	50                   	push   eax
c0024187:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002418d:	e8 16 ed ff ff       	call   c0022ea8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024192:	83 c4 20             	add    esp,0x20
c0024195:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c002419a:	0f 94 c0             	sete   al
c002419d:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00241a2:	74 09                	je     c00241ad <ATA::access(unsigned long long, int, void*, bool)+0x275>
c00241a4:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c00241ab:	eb 07                	jmp    c00241b4 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c00241ad:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c00241b4:	0f b6 c0             	movzx  eax,al
c00241b7:	50                   	push   eax
c00241b8:	6a 07                	push   0x7
c00241ba:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241c1:	50                   	push   eax
c00241c2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00241c8:	e8 db ec ff ff       	call   c0022ea8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00241cd:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c00241d1:	83 c4 10             	add    esp,0x10
c00241d4:	85 f6                	test   esi,esi
c00241d6:	0f 84 ba 00 00 00    	je     c0024296 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c00241dc:	50                   	push   eax
c00241dd:	6a 01                	push   0x1
c00241df:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241e6:	50                   	push   eax
c00241e7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00241ed:	e8 62 f8 ff ff       	call   c0023a54 <IDE::polling(unsigned char, unsigned int)>
c00241f2:	83 c4 10             	add    esp,0x10
c00241f5:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c00241fb:	84 c0                	test   al,al
c00241fd:	74 2c                	je     c002422b <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c00241ff:	0f b6 f8             	movzx  edi,al
c0024202:	0f b6 d2             	movzx  edx,dl
c0024205:	57                   	push   edi
c0024206:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c002420d:	50                   	push   eax
c002420e:	52                   	push   edx
c002420f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024215:	e8 a4 f6 ff ff       	call   c00238be <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002421a:	c7 04 24 10 cc 02 c0 	mov    DWORD PTR [esp],0xc002cc10
c0024221:	e8 72 eb fe ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0024226:	e9 87 00 00 00       	jmp    c00242b2 <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c002422b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0024230:	74 33                	je     c0024265 <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c0024232:	31 ed                	xor    ebp,ebp
c0024234:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024238:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c002423c:	50                   	push   eax
c002423d:	50                   	push   eax
c002423e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024245:	50                   	push   eax
c0024246:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002424c:	e8 45 ec ff ff       	call   c0022e96 <IDE::getBase(unsigned char)>
c0024251:	89 c2                	mov    edx,eax
c0024253:	89 f8                	mov    eax,edi
c0024255:	66 ef                	out    dx,ax
c0024257:	45                   	inc    ebp
c0024258:	83 c4 10             	add    esp,0x10
c002425b:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0024261:	75 d1                	jne    c0024234 <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c0024263:	eb 23                	jmp    c0024288 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c0024265:	0f b6 d2             	movzx  edx,dl
c0024268:	51                   	push   ecx
c0024269:	51                   	push   ecx
c002426a:	52                   	push   edx
c002426b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024271:	e8 20 ec ff ff       	call   c0022e96 <IDE::getBase(unsigned char)>
c0024276:	b9 00 01 00 00       	mov    ecx,0x100
c002427b:	89 c2                	mov    edx,eax
c002427d:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0024281:	fc                   	cld    
c0024282:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0024285:	83 c4 10             	add    esp,0x10
c0024288:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0024290:	4e                   	dec    esi
c0024291:	e9 3e ff ff ff       	jmp    c00241d4 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c0024296:	31 ff                	xor    edi,edi
c0024298:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002429d:	74 16                	je     c00242b5 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c002429f:	50                   	push   eax
c00242a0:	50                   	push   eax
c00242a1:	31 c0                	xor    eax,eax
c00242a3:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c00242a8:	0f 94 c0             	sete   al
c00242ab:	50                   	push   eax
c00242ac:	53                   	push   ebx
c00242ad:	e8 ec fb ff ff       	call   c0023e9e <ATA::flush(bool)>
c00242b2:	83 c4 10             	add    esp,0x10
c00242b5:	83 c4 2c             	add    esp,0x2c
c00242b8:	89 f8                	mov    eax,edi
c00242ba:	5b                   	pop    ebx
c00242bb:	5e                   	pop    esi
c00242bc:	5f                   	pop    edi
c00242bd:	5d                   	pop    ebp
c00242be:	c3                   	ret    
c00242bf:	90                   	nop

c00242c0 <ATA::read(unsigned long long, int, void*)>:
c00242c0:	57                   	push   edi
c00242c1:	b8 04 00 00 00       	mov    eax,0x4
c00242c6:	56                   	push   esi
c00242c7:	53                   	push   ebx
c00242c8:	83 ec 10             	sub    esp,0x10
c00242cb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00242cf:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00242d3:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00242d6:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00242da:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00242de:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00242e4:	77 3b                	ja     c0024321 <ATA::read(unsigned long long, int, void*)+0x61>
c00242e6:	b8 06 00 00 00       	mov    eax,0x6
c00242eb:	85 d2                	test   edx,edx
c00242ed:	74 32                	je     c0024321 <ATA::read(unsigned long long, int, void*)+0x61>
c00242ef:	50                   	push   eax
c00242f0:	50                   	push   eax
c00242f1:	6a 00                	push   0x0
c00242f3:	52                   	push   edx
c00242f4:	53                   	push   ebx
c00242f5:	57                   	push   edi
c00242f6:	56                   	push   esi
c00242f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00242fb:	e8 38 fc ff ff       	call   c0023f38 <ATA::access(unsigned long long, int, void*, bool)>
c0024300:	83 c4 20             	add    esp,0x20
c0024303:	85 c0                	test   eax,eax
c0024305:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024309:	75 11                	jne    c002431c <ATA::read(unsigned long long, int, void*)+0x5c>
c002430b:	01 1d a8 25 03 c0    	add    DWORD PTR ds:0xc00325a8,ebx
c0024311:	e8 7a c6 fe ff       	call   c0010990 <VgaText::updateDiskUsage()>
c0024316:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002431a:	eb 05                	jmp    c0024321 <ATA::read(unsigned long long, int, void*)+0x61>
c002431c:	b8 01 00 00 00       	mov    eax,0x1
c0024321:	83 c4 10             	add    esp,0x10
c0024324:	5b                   	pop    ebx
c0024325:	5e                   	pop    esi
c0024326:	5f                   	pop    edi
c0024327:	c3                   	ret    

c0024328 <ATA::write(unsigned long long, int, void*)>:
c0024328:	57                   	push   edi
c0024329:	b8 04 00 00 00       	mov    eax,0x4
c002432e:	56                   	push   esi
c002432f:	53                   	push   ebx
c0024330:	83 ec 10             	sub    esp,0x10
c0024333:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024337:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002433b:	8d 4b ff             	lea    ecx,[ebx-0x1]
c002433e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024342:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024346:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c002434c:	77 3b                	ja     c0024389 <ATA::write(unsigned long long, int, void*)+0x61>
c002434e:	b8 06 00 00 00       	mov    eax,0x6
c0024353:	85 d2                	test   edx,edx
c0024355:	74 32                	je     c0024389 <ATA::write(unsigned long long, int, void*)+0x61>
c0024357:	50                   	push   eax
c0024358:	50                   	push   eax
c0024359:	6a 01                	push   0x1
c002435b:	52                   	push   edx
c002435c:	53                   	push   ebx
c002435d:	57                   	push   edi
c002435e:	56                   	push   esi
c002435f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024363:	e8 d0 fb ff ff       	call   c0023f38 <ATA::access(unsigned long long, int, void*, bool)>
c0024368:	83 c4 20             	add    esp,0x20
c002436b:	85 c0                	test   eax,eax
c002436d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024371:	75 11                	jne    c0024384 <ATA::write(unsigned long long, int, void*)+0x5c>
c0024373:	01 1d a4 25 03 c0    	add    DWORD PTR ds:0xc00325a4,ebx
c0024379:	e8 12 c6 fe ff       	call   c0010990 <VgaText::updateDiskUsage()>
c002437e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024382:	eb 05                	jmp    c0024389 <ATA::write(unsigned long long, int, void*)+0x61>
c0024384:	b8 01 00 00 00       	mov    eax,0x1
c0024389:	83 c4 10             	add    esp,0x10
c002438c:	5b                   	pop    ebx
c002438d:	5e                   	pop    esi
c002438e:	5f                   	pop    edi
c002438f:	c3                   	ret    

c0024390 <ATA::detectCHS()>:
c0024390:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0024394:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c002439a:	c1 e0 06             	shl    eax,0x6
c002439d:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c00243a3:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c00243ad:	c7 44 24 04 1b cc 02 c0 	mov    DWORD PTR [esp+0x4],0xc002cc1b
c00243b5:	e9 b9 60 ff ff       	jmp    c001a473 <Krnl::panic(char const*)>

c00243ba <ATA::open(int, int, void*)>:
c00243ba:	53                   	push   ebx
c00243bb:	83 ec 08             	sub    esp,0x8
c00243be:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00243c2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00243c6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00243ca:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00243d0:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00243d6:	c1 e0 06             	shl    eax,0x6
c00243d9:	01 d0                	add    eax,edx
c00243db:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c00243e2:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c00243e8:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c00243ef:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00243f9:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c00243ff:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024406:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c002440d:	75 0c                	jne    c002441b <ATA::open(int, int, void*)+0x61>
c002440f:	83 ec 0c             	sub    esp,0xc
c0024412:	53                   	push   ebx
c0024413:	e8 78 ff ff ff       	call   c0024390 <ATA::detectCHS()>
c0024418:	83 c4 10             	add    esp,0x10
c002441b:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024421:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024427:	c1 e0 06             	shl    eax,0x6
c002442a:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0024431:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002443b:	d1 e8                	shr    eax,1
c002443d:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0024443:	6a 04                	push   0x4
c0024445:	6a 0c                	push   0xc
c0024447:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002444e:	50                   	push   eax
c002444f:	52                   	push   edx
c0024450:	e8 53 ea ff ff       	call   c0022ea8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024455:	90                   	nop
c0024456:	90                   	nop
c0024457:	6a 00                	push   0x0
c0024459:	6a 0c                	push   0xc
c002445b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024462:	50                   	push   eax
c0024463:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024469:	e8 3a ea ff ff       	call   c0022ea8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002446e:	83 c4 14             	add    esp,0x14
c0024471:	53                   	push   ebx
c0024472:	e8 d3 01 ff ff       	call   c001464a <PhysicalDisk::startCache()>
c0024477:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002447a:	e8 77 23 ff ff       	call   c00167f6 <createPartitionsForDisk(PhysicalDisk*)>
c002447f:	31 c0                	xor    eax,eax
c0024481:	83 c4 18             	add    esp,0x18
c0024484:	5b                   	pop    ebx
c0024485:	c3                   	ret    

c0024486 <ATAPI::write(unsigned long long, int, void*)>:
c0024486:	b8 03 00 00 00       	mov    eax,0x3
c002448b:	c3                   	ret    

c002448c <ATAPI::close(int, int, void*)>:
c002448c:	83 ec 0c             	sub    esp,0xc
c002448f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024493:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024499:	85 c0                	test   eax,eax
c002449b:	74 0c                	je     c00244a9 <ATAPI::close(int, int, void*)+0x1d>
c002449d:	83 ec 0c             	sub    esp,0xc
c00244a0:	8b 10                	mov    edx,DWORD PTR [eax]
c00244a2:	50                   	push   eax
c00244a3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00244a6:	83 c4 10             	add    esp,0x10
c00244a9:	31 c0                	xor    eax,eax
c00244ab:	83 c4 0c             	add    esp,0xc
c00244ae:	c3                   	ret    
c00244af:	90                   	nop

c00244b0 <ATAPI::ATAPI()>:
c00244b0:	83 ec 0c             	sub    esp,0xc
c00244b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00244b7:	83 ec 04             	sub    esp,0x4
c00244ba:	68 00 08 00 00       	push   0x800
c00244bf:	68 55 cd 02 c0       	push   0xc002cd55
c00244c4:	50                   	push   eax
c00244c5:	e8 18 01 ff ff       	call   c00145e2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00244ca:	83 c4 10             	add    esp,0x10
c00244cd:	ba 70 cc 02 c0       	mov    edx,0xc002cc70
c00244d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00244d6:	89 10                	mov    DWORD PTR [eax],edx
c00244d8:	90                   	nop
c00244d9:	83 c4 0c             	add    esp,0xc
c00244dc:	c3                   	ret    
c00244dd:	90                   	nop

c00244de <ATAPI::readyForCommand()>:
c00244de:	56                   	push   esi
c00244df:	53                   	push   ebx
c00244e0:	31 db                	xor    ebx,ebx
c00244e2:	50                   	push   eax
c00244e3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00244e7:	50                   	push   eax
c00244e8:	6a 0c                	push   0xc
c00244ea:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00244f1:	50                   	push   eax
c00244f2:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00244f8:	e8 6b ea ff ff       	call   c0022f68 <IDE::read(unsigned char, unsigned char)>
c00244fd:	83 c4 10             	add    esp,0x10
c0024500:	a8 88                	test   al,0x88
c0024502:	74 23                	je     c0024527 <ATAPI::readyForCommand()+0x49>
c0024504:	43                   	inc    ebx
c0024505:	83 fb 63             	cmp    ebx,0x63
c0024508:	7e dd                	jle    c00244e7 <ATAPI::readyForCommand()+0x9>
c002450a:	51                   	push   ecx
c002450b:	51                   	push   ecx
c002450c:	6a 00                	push   0x0
c002450e:	68 40 42 0f 00       	push   0xf4240
c0024513:	e8 a4 9c ff ff       	call   c001e1bc <nanoSleep(unsigned long long)>
c0024518:	83 c4 10             	add    esp,0x10
c002451b:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024521:	75 c4                	jne    c00244e7 <ATAPI::readyForCommand()+0x9>
c0024523:	31 c0                	xor    eax,eax
c0024525:	eb 02                	jmp    c0024529 <ATAPI::readyForCommand()+0x4b>
c0024527:	b0 01                	mov    al,0x1
c0024529:	5a                   	pop    edx
c002452a:	5b                   	pop    ebx
c002452b:	5e                   	pop    esi
c002452c:	c3                   	ret    
c002452d:	90                   	nop

c002452e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c002452e:	55                   	push   ebp
c002452f:	57                   	push   edi
c0024530:	56                   	push   esi
c0024531:	53                   	push   ebx
c0024532:	83 ec 20             	sub    esp,0x20
c0024535:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0024539:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c002453d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0024541:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024545:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024549:	6a 01                	push   0x1
c002454b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024552:	50                   	push   eax
c0024553:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024559:	e8 56 eb ff ff       	call   c00230b4 <IDE::enableIRQs(unsigned char, bool)>
c002455e:	5e                   	pop    esi
c002455f:	58                   	pop    eax
c0024560:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024567:	50                   	push   eax
c0024568:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002456e:	e8 0f e9 ff ff       	call   c0022e82 <IDE::prepareInterrupt(unsigned char)>
c0024573:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024576:	e8 63 ff ff ff       	call   c00244de <ATAPI::readyForCommand()>
c002457b:	83 c4 10             	add    esp,0x10
c002457e:	84 c0                	test   al,al
c0024580:	75 0a                	jne    c002458c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0024582:	bb 01 00 00 00       	mov    ebx,0x1
c0024587:	e9 57 02 00 00       	jmp    c00247e3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002458c:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0024592:	c1 e0 04             	shl    eax,0x4
c0024595:	0f b6 c0             	movzx  eax,al
c0024598:	50                   	push   eax
c0024599:	6a 06                	push   0x6
c002459b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00245a2:	50                   	push   eax
c00245a3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00245a9:	e8 fa e8 ff ff       	call   c0022ea8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00245ae:	6a 00                	push   0x0
c00245b0:	6a 01                	push   0x1
c00245b2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00245b9:	50                   	push   eax
c00245ba:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00245c0:	e8 e3 e8 ff ff       	call   c0022ea8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00245c5:	83 c4 20             	add    esp,0x20
c00245c8:	0f b6 c3             	movzx  eax,bl
c00245cb:	0f b6 df             	movzx  ebx,bh
c00245ce:	50                   	push   eax
c00245cf:	6a 04                	push   0x4
c00245d1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00245d8:	50                   	push   eax
c00245d9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00245df:	e8 c4 e8 ff ff       	call   c0022ea8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00245e4:	53                   	push   ebx
c00245e5:	6a 05                	push   0x5
c00245e7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00245ee:	50                   	push   eax
c00245ef:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00245f5:	e8 ae e8 ff ff       	call   c0022ea8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00245fa:	83 c4 20             	add    esp,0x20
c00245fd:	68 a0 00 00 00       	push   0xa0
c0024602:	6a 07                	push   0x7
c0024604:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002460b:	50                   	push   eax
c002460c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024612:	e8 91 e8 ff ff       	call   c0022ea8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024617:	83 c4 0c             	add    esp,0xc
c002461a:	6a 01                	push   0x1
c002461c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024623:	50                   	push   eax
c0024624:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002462a:	e8 25 f4 ff ff       	call   c0023a54 <IDE::polling(unsigned char, unsigned int)>
c002462f:	83 c4 10             	add    esp,0x10
c0024632:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0024638:	84 c0                	test   al,al
c002463a:	74 23                	je     c002465f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c002463c:	0f b6 d8             	movzx  ebx,al
c002463f:	0f b6 d2             	movzx  edx,dl
c0024642:	53                   	push   ebx
c0024643:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c002464a:	50                   	push   eax
c002464b:	52                   	push   edx
c002464c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024652:	e8 67 f2 ff ff       	call   c00238be <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024657:	83 c4 10             	add    esp,0x10
c002465a:	e9 84 01 00 00       	jmp    c00247e3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002465f:	0f b6 d2             	movzx  edx,dl
c0024662:	53                   	push   ebx
c0024663:	53                   	push   ebx
c0024664:	52                   	push   edx
c0024665:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002466b:	e8 26 e8 ff ff       	call   c0022e96 <IDE::getBase(unsigned char)>
c0024670:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024674:	b9 06 00 00 00       	mov    ecx,0x6
c0024679:	89 c2                	mov    edx,eax
c002467b:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c002467e:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0024682:	83 c4 10             	add    esp,0x10
c0024685:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002468b:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024692:	85 db                	test   ebx,ebx
c0024694:	0f 84 ec 00 00 00    	je     c0024786 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c002469a:	51                   	push   ecx
c002469b:	51                   	push   ecx
c002469c:	52                   	push   edx
c002469d:	50                   	push   eax
c002469e:	e8 73 e9 ff ff       	call   c0023016 <IDE::waitInterrupt(unsigned char)>
c00246a3:	83 c4 10             	add    esp,0x10
c00246a6:	84 c0                	test   al,al
c00246a8:	0f 84 d4 fe ff ff    	je     c0024582 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00246ae:	56                   	push   esi
c00246af:	56                   	push   esi
c00246b0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246b7:	50                   	push   eax
c00246b8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246be:	e8 bf e7 ff ff       	call   c0022e82 <IDE::prepareInterrupt(unsigned char)>
c00246c3:	83 c4 0c             	add    esp,0xc
c00246c6:	6a 04                	push   0x4
c00246c8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246cf:	50                   	push   eax
c00246d0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246d6:	e8 8d e8 ff ff       	call   c0022f68 <IDE::read(unsigned char, unsigned char)>
c00246db:	83 c4 0c             	add    esp,0xc
c00246de:	89 c6                	mov    esi,eax
c00246e0:	6a 05                	push   0x5
c00246e2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246e9:	50                   	push   eax
c00246ea:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246f0:	e8 73 e8 ff ff       	call   c0022f68 <IDE::read(unsigned char, unsigned char)>
c00246f5:	89 f1                	mov    ecx,esi
c00246f7:	0f b6 c0             	movzx  eax,al
c00246fa:	0f b6 f1             	movzx  esi,cl
c00246fd:	c1 e0 08             	shl    eax,0x8
c0024700:	09 c6                	or     esi,eax
c0024702:	d1 fe                	sar    esi,1
c0024704:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0024708:	83 c4 10             	add    esp,0x10
c002470b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0024710:	74 41                	je     c0024753 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0024712:	31 c9                	xor    ecx,ecx
c0024714:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002471a:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024721:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0024725:	75 0a                	jne    c0024731 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0024727:	01 c9                	add    ecx,ecx
c0024729:	01 cd                	add    ebp,ecx
c002472b:	4b                   	dec    ebx
c002472c:	e9 54 ff ff ff       	jmp    c0024685 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0024731:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0024736:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002473a:	51                   	push   ecx
c002473b:	51                   	push   ecx
c002473c:	52                   	push   edx
c002473d:	50                   	push   eax
c002473e:	e8 53 e7 ff ff       	call   c0022e96 <IDE::getBase(unsigned char)>
c0024743:	89 c2                	mov    edx,eax
c0024745:	89 f0                	mov    eax,esi
c0024747:	66 ef                	out    dx,ax
c0024749:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002474d:	83 c4 10             	add    esp,0x10
c0024750:	41                   	inc    ecx
c0024751:	eb c1                	jmp    c0024714 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0024753:	31 f6                	xor    esi,esi
c0024755:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002475b:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024762:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0024766:	75 06                	jne    c002476e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0024768:	01 f6                	add    esi,esi
c002476a:	01 f5                	add    ebp,esi
c002476c:	eb bd                	jmp    c002472b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c002476e:	51                   	push   ecx
c002476f:	51                   	push   ecx
c0024770:	52                   	push   edx
c0024771:	50                   	push   eax
c0024772:	e8 1f e7 ff ff       	call   c0022e96 <IDE::getBase(unsigned char)>
c0024777:	89 c2                	mov    edx,eax
c0024779:	66 ed                	in     ax,dx
c002477b:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0024780:	83 c4 10             	add    esp,0x10
c0024783:	46                   	inc    esi
c0024784:	eb cf                	jmp    c0024755 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0024786:	51                   	push   ecx
c0024787:	51                   	push   ecx
c0024788:	52                   	push   edx
c0024789:	50                   	push   eax
c002478a:	e8 87 e8 ff ff       	call   c0023016 <IDE::waitInterrupt(unsigned char)>
c002478f:	83 c4 10             	add    esp,0x10
c0024792:	84 c0                	test   al,al
c0024794:	0f 84 e8 fd ff ff    	je     c0024582 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002479a:	bb a0 86 01 00       	mov    ebx,0x186a0
c002479f:	52                   	push   edx
c00247a0:	52                   	push   edx
c00247a1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247a8:	50                   	push   eax
c00247a9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247af:	e8 ce e6 ff ff       	call   c0022e82 <IDE::prepareInterrupt(unsigned char)>
c00247b4:	83 c4 10             	add    esp,0x10
c00247b7:	50                   	push   eax
c00247b8:	50                   	push   eax
c00247b9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247c0:	50                   	push   eax
c00247c1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247c7:	e8 ca e6 ff ff       	call   c0022e96 <IDE::getBase(unsigned char)>
c00247cc:	8d 50 07             	lea    edx,[eax+0x7]
c00247cf:	ec                   	in     al,dx
c00247d0:	83 c4 10             	add    esp,0x10
c00247d3:	a8 88                	test   al,0x88
c00247d5:	74 0a                	je     c00247e1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c00247d7:	4b                   	dec    ebx
c00247d8:	75 dd                	jne    c00247b7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c00247da:	bb 02 00 00 00       	mov    ebx,0x2
c00247df:	eb 02                	jmp    c00247e3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00247e1:	31 db                	xor    ebx,ebx
c00247e3:	83 c4 1c             	add    esp,0x1c
c00247e6:	89 d8                	mov    eax,ebx
c00247e8:	5b                   	pop    ebx
c00247e9:	5e                   	pop    esi
c00247ea:	5f                   	pop    edi
c00247eb:	5d                   	pop    ebp
c00247ec:	c3                   	ret    
c00247ed:	90                   	nop

c00247ee <ATAPI::diskRemoved()>:
c00247ee:	83 ec 18             	sub    esp,0x18
c00247f1:	68 61 cd 02 c0       	push   0xc002cd61
c00247f6:	e8 9d e5 fe ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c00247fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00247ff:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0024806:	83 c4 1c             	add    esp,0x1c
c0024809:	c3                   	ret    

c002480a <ATAPI::eject()>:
c002480a:	57                   	push   edi
c002480b:	b9 03 00 00 00       	mov    ecx,0x3
c0024810:	53                   	push   ebx
c0024811:	83 ec 14             	sub    esp,0x14
c0024814:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0024818:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002481c:	fc                   	cld    
c002481d:	31 c0                	xor    eax,eax
c002481f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024821:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0024826:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002482b:	50                   	push   eax
c002482c:	50                   	push   eax
c002482d:	6a 00                	push   0x0
c002482f:	6a 00                	push   0x0
c0024831:	6a 00                	push   0x0
c0024833:	6a 02                	push   0x2
c0024835:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024839:	50                   	push   eax
c002483a:	53                   	push   ebx
c002483b:	e8 ee fc ff ff       	call   c002452e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024840:	83 c4 14             	add    esp,0x14
c0024843:	53                   	push   ebx
c0024844:	e8 a5 ff ff ff       	call   c00247ee <ATAPI::diskRemoved()>
c0024849:	83 c4 24             	add    esp,0x24
c002484c:	31 c0                	xor    eax,eax
c002484e:	5b                   	pop    ebx
c002484f:	5f                   	pop    edi
c0024850:	c3                   	ret    
c0024851:	90                   	nop

c0024852 <ATAPI::diskInserted()>:
c0024852:	53                   	push   ebx
c0024853:	83 ec 14             	sub    esp,0x14
c0024856:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002485a:	68 78 cd 02 c0       	push   0xc002cd78
c002485f:	e8 34 e5 fe ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0024864:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c002486b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002486e:	e8 d7 fd fe ff       	call   c001464a <PhysicalDisk::startCache()>
c0024873:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024877:	83 c4 18             	add    esp,0x18
c002487a:	5b                   	pop    ebx
c002487b:	e9 76 1f ff ff       	jmp    c00167f6 <createPartitionsForDisk(PhysicalDisk*)>

c0024880 <ATAPI::detectMedia()>:
c0024880:	56                   	push   esi
c0024881:	53                   	push   ebx
c0024882:	83 ec 28             	sub    esp,0x28
c0024885:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024889:	6a 0c                	push   0xc
c002488b:	6a 00                	push   0x0
c002488d:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0024891:	56                   	push   esi
c0024892:	e8 e1 be fd ff       	call   c0000778 <memset>
c0024897:	58                   	pop    eax
c0024898:	5a                   	pop    edx
c0024899:	6a 00                	push   0x0
c002489b:	6a 00                	push   0x0
c002489d:	6a 00                	push   0x0
c002489f:	6a 00                	push   0x0
c00248a1:	56                   	push   esi
c00248a2:	53                   	push   ebx
c00248a3:	e8 86 fc ff ff       	call   c002452e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00248a8:	83 c4 1c             	add    esp,0x1c
c00248ab:	6a 0c                	push   0xc
c00248ad:	6a 00                	push   0x0
c00248af:	56                   	push   esi
c00248b0:	e8 c3 be fd ff       	call   c0000778 <memset>
c00248b5:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00248ba:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00248bf:	59                   	pop    ecx
c00248c0:	58                   	pop    eax
c00248c1:	6a 01                	push   0x1
c00248c3:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c00248c7:	50                   	push   eax
c00248c8:	6a 00                	push   0x0
c00248ca:	6a 12                	push   0x12
c00248cc:	56                   	push   esi
c00248cd:	53                   	push   ebx
c00248ce:	e8 5b fc ff ff       	call   c002452e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00248d3:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00248d7:	83 c4 20             	add    esp,0x20
c00248da:	83 e0 7f             	and    eax,0x7f
c00248dd:	3c 70                	cmp    al,0x70
c00248df:	74 15                	je     c00248f6 <ATAPI::detectMedia()+0x76>
c00248e1:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00248e8:	75 0c                	jne    c00248f6 <ATAPI::detectMedia()+0x76>
c00248ea:	83 ec 0c             	sub    esp,0xc
c00248ed:	53                   	push   ebx
c00248ee:	e8 5f ff ff ff       	call   c0024852 <ATAPI::diskInserted()>
c00248f3:	83 c4 10             	add    esp,0x10
c00248f6:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00248fa:	83 e0 0f             	and    eax,0xf
c00248fd:	3c 02                	cmp    al,0x2
c00248ff:	75 1b                	jne    c002491c <ATAPI::detectMedia()+0x9c>
c0024901:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0024906:	75 2d                	jne    c0024935 <ATAPI::detectMedia()+0xb5>
c0024908:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002490f:	74 24                	je     c0024935 <ATAPI::detectMedia()+0xb5>
c0024911:	83 ec 0c             	sub    esp,0xc
c0024914:	53                   	push   ebx
c0024915:	e8 d4 fe ff ff       	call   c00247ee <ATAPI::diskRemoved()>
c002491a:	eb 16                	jmp    c0024932 <ATAPI::detectMedia()+0xb2>
c002491c:	84 c0                	test   al,al
c002491e:	75 15                	jne    c0024935 <ATAPI::detectMedia()+0xb5>
c0024920:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024927:	75 0c                	jne    c0024935 <ATAPI::detectMedia()+0xb5>
c0024929:	83 ec 0c             	sub    esp,0xc
c002492c:	53                   	push   ebx
c002492d:	e8 20 ff ff ff       	call   c0024852 <ATAPI::diskInserted()>
c0024932:	83 c4 10             	add    esp,0x10
c0024935:	83 c4 24             	add    esp,0x24
c0024938:	5b                   	pop    ebx
c0024939:	5e                   	pop    esi
c002493a:	c3                   	ret    
c002493b:	90                   	nop

c002493c <ATAPI::open(int, int, void*)>:
c002493c:	53                   	push   ebx
c002493d:	83 ec 08             	sub    esp,0x8
c0024940:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024944:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024948:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002494c:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024952:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024958:	c1 e0 06             	shl    eax,0x6
c002495b:	01 d0                	add    eax,edx
c002495d:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0024964:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c002496a:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0024971:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002497b:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024981:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024988:	6a 04                	push   0x4
c002498a:	6a 0c                	push   0xc
c002498c:	51                   	push   ecx
c002498d:	52                   	push   edx
c002498e:	e8 15 e5 ff ff       	call   c0022ea8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024993:	90                   	nop
c0024994:	90                   	nop
c0024995:	6a 00                	push   0x0
c0024997:	6a 0c                	push   0xc
c0024999:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00249a0:	50                   	push   eax
c00249a1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00249a7:	e8 fc e4 ff ff       	call   c0022ea8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00249ac:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c00249b3:	83 c4 14             	add    esp,0x14
c00249b6:	53                   	push   ebx
c00249b7:	e8 c4 fe ff ff       	call   c0024880 <ATAPI::detectMedia()>
c00249bc:	31 c0                	xor    eax,eax
c00249be:	83 c4 18             	add    esp,0x18
c00249c1:	5b                   	pop    ebx
c00249c2:	c3                   	ret    
c00249c3:	90                   	nop

c00249c4 <ATAPI::read(unsigned long long, int, void*)>:
c00249c4:	55                   	push   ebp
c00249c5:	57                   	push   edi
c00249c6:	56                   	push   esi
c00249c7:	53                   	push   ebx
c00249c8:	83 ec 1c             	sub    esp,0x1c
c00249cb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00249cf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00249d3:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00249d7:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00249de:	74 41                	je     c0024a21 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c00249e0:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00249e4:	b9 03 00 00 00       	mov    ecx,0x3
c00249e9:	fc                   	cld    
c00249ea:	31 c0                	xor    eax,eax
c00249ec:	86 fb                	xchg   bl,bh
c00249ee:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00249f0:	c1 c3 10             	rol    ebx,0x10
c00249f3:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00249f8:	89 e8                	mov    eax,ebp
c00249fa:	86 fb                	xchg   bl,bh
c00249fc:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0024a00:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0024a04:	50                   	push   eax
c0024a05:	50                   	push   eax
c0024a06:	55                   	push   ebp
c0024a07:	c1 e5 0b             	shl    ebp,0xb
c0024a0a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024a0e:	6a 00                	push   0x0
c0024a10:	55                   	push   ebp
c0024a11:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024a15:	50                   	push   eax
c0024a16:	56                   	push   esi
c0024a17:	e8 12 fb ff ff       	call   c002452e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024a1c:	83 c4 20             	add    esp,0x20
c0024a1f:	eb 1a                	jmp    c0024a3b <ATAPI::read(unsigned long long, int, void*)+0x77>
c0024a21:	83 ec 0c             	sub    esp,0xc
c0024a24:	56                   	push   esi
c0024a25:	e8 56 fe ff ff       	call   c0024880 <ATAPI::detectMedia()>
c0024a2a:	83 c4 10             	add    esp,0x10
c0024a2d:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024a34:	75 aa                	jne    c00249e0 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0024a36:	b8 02 00 00 00       	mov    eax,0x2
c0024a3b:	83 c4 1c             	add    esp,0x1c
c0024a3e:	5b                   	pop    ebx
c0024a3f:	5e                   	pop    esi
c0024a40:	5f                   	pop    edi
c0024a41:	5d                   	pop    ebp
c0024a42:	c3                   	ret    
c0024a43:	90                   	nop

c0024a44 <SATA::close(int, int, void*)>:
c0024a44:	83 ec 0c             	sub    esp,0xc
c0024a47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024a4b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024a51:	85 c0                	test   eax,eax
c0024a53:	74 0c                	je     c0024a61 <SATA::close(int, int, void*)+0x1d>
c0024a55:	83 ec 0c             	sub    esp,0xc
c0024a58:	8b 10                	mov    edx,DWORD PTR [eax]
c0024a5a:	50                   	push   eax
c0024a5b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024a5e:	83 c4 10             	add    esp,0x10
c0024a61:	31 c0                	xor    eax,eax
c0024a63:	83 c4 0c             	add    esp,0xc
c0024a66:	c3                   	ret    
c0024a67:	90                   	nop

c0024a68 <SATA::powerSaving(PowerSavingLevel)>:
c0024a68:	c3                   	ret    
c0024a69:	90                   	nop

c0024a6a <SATA::open(int, int, void*)>:
c0024a6a:	56                   	push   esi
c0024a6b:	53                   	push   ebx
c0024a6c:	50                   	push   eax
c0024a6d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024a71:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024a75:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024a7f:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024a85:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024a8f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024a93:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024a9d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024aa3:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024aaa:	e8 2e b4 fe ff       	call   c000fedd <Phys::allocatePage()>
c0024aaf:	89 c6                	mov    esi,eax
c0024ab1:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024ab7:	81 c6 00 10 00 00    	add    esi,0x1000
c0024abd:	e8 1b b4 fe ff       	call   c000fedd <Phys::allocatePage()>
c0024ac2:	39 c6                	cmp    esi,eax
c0024ac4:	74 10                	je     c0024ad6 <SATA::open(int, int, void*)+0x6c>
c0024ac6:	83 ec 0c             	sub    esp,0xc
c0024ac9:	68 a0 cc 02 c0       	push   0xc002cca0
c0024ace:	e8 a0 59 ff ff       	call   c001a473 <Krnl::panic(char const*)>
c0024ad3:	83 c4 10             	add    esp,0x10
c0024ad6:	83 ec 0c             	sub    esp,0xc
c0024ad9:	6a 02                	push   0x2
c0024adb:	e8 5b d0 fe ff       	call   c0011b3b <Virt::allocateKernelVirtualPages(int)>
c0024ae0:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024ae6:	e8 f7 d2 fe ff       	call   c0011de2 <Virt::getAKernelVAS()>
c0024aeb:	6a 03                	push   0x3
c0024aed:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0024af3:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0024af9:	50                   	push   eax
c0024afa:	e8 05 d7 fe ff       	call   c0012204 <VAS::mapPage(unsigned long, unsigned long, int)>
c0024aff:	83 c4 14             	add    esp,0x14
c0024b02:	53                   	push   ebx
c0024b03:	e8 42 fb fe ff       	call   c001464a <PhysicalDisk::startCache()>
c0024b08:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024b0b:	e8 e6 1c ff ff       	call   c00167f6 <createPartitionsForDisk(PhysicalDisk*)>
c0024b10:	83 c4 14             	add    esp,0x14
c0024b13:	31 c0                	xor    eax,eax
c0024b15:	5b                   	pop    ebx
c0024b16:	5e                   	pop    esi
c0024b17:	c3                   	ret    

c0024b18 <SATA::SATA()>:
c0024b18:	83 ec 0c             	sub    esp,0xc
c0024b1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024b1f:	83 ec 04             	sub    esp,0x4
c0024b22:	68 00 02 00 00       	push   0x200
c0024b27:	68 b4 cc 02 c0       	push   0xc002ccb4
c0024b2c:	50                   	push   eax
c0024b2d:	e8 b0 fa fe ff       	call   c00145e2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024b32:	83 c4 10             	add    esp,0x10
c0024b35:	ba 24 cd 02 c0       	mov    edx,0xc002cd24
c0024b3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024b3e:	89 10                	mov    DWORD PTR [eax],edx
c0024b40:	90                   	nop
c0024b41:	83 c4 0c             	add    esp,0xc
c0024b44:	c3                   	ret    
c0024b45:	90                   	nop

c0024b46 <SATA::access(unsigned long long, int, void*, bool)>:
c0024b46:	55                   	push   ebp
c0024b47:	57                   	push   edi
c0024b48:	56                   	push   esi
c0024b49:	53                   	push   ebx
c0024b4a:	83 ec 2c             	sub    esp,0x2c
c0024b4d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024b51:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0024b55:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024b59:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0024b5d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024b61:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0024b66:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024b6a:	7e 10                	jle    c0024b7c <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0024b6c:	83 ec 0c             	sub    esp,0xc
c0024b6f:	68 c4 cc 02 c0       	push   0xc002ccc4
c0024b74:	e8 fa 58 ff ff       	call   c001a473 <Krnl::panic(char const*)>
c0024b79:	83 c4 10             	add    esp,0x10
c0024b7c:	8b b5 6c 01 00 00    	mov    esi,DWORD PTR [ebp+0x16c]
c0024b82:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0024b88:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024b8e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024b92:	89 f0                	mov    eax,esi
c0024b94:	c1 e0 07             	shl    eax,0x7
c0024b97:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024b9b:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024ba5:	53                   	push   ebx
c0024ba6:	8d 46 02             	lea    eax,[esi+0x2]
c0024ba9:	53                   	push   ebx
c0024baa:	c1 e0 07             	shl    eax,0x7
c0024bad:	bb 01 00 00 00       	mov    ebx,0x1
c0024bb2:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0024bb6:	50                   	push   eax
c0024bb7:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0024bbd:	e8 aa ef ff ff       	call   c0023b6c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024bc2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0024bc6:	83 c4 10             	add    esp,0x10
c0024bc9:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
c0024bce:	0f 84 ce 01 00 00    	je     c0024da2 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024bd4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024bd8:	c1 e0 09             	shl    eax,0x9
c0024bdb:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024be0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024be4:	74 17                	je     c0024bfd <SATA::access(unsigned long long, int, void*, bool)+0xb7>
c0024be6:	51                   	push   ecx
c0024be7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024beb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0024bef:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024bf5:	e8 4a bb fd ff       	call   c0000744 <memcpy>
c0024bfa:	83 c4 10             	add    esp,0x10
c0024bfd:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024c03:	8d 46 02             	lea    eax,[esi+0x2]
c0024c06:	c1 e0 07             	shl    eax,0x7
c0024c09:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024c0d:	8b 00                	mov    eax,DWORD PTR [eax]
c0024c0f:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024c15:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024c1b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024c1f:	c1 e1 05             	shl    ecx,0x5
c0024c22:	01 c8                	add    eax,ecx
c0024c24:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024c28:	8a 18                	mov    bl,BYTE PTR [eax]
c0024c2a:	83 e1 01             	and    ecx,0x1
c0024c2d:	83 e3 bf             	and    ebx,0xffffffbf
c0024c30:	c1 e1 06             	shl    ecx,0x6
c0024c33:	09 d9                	or     ecx,ebx
c0024c35:	88 08                	mov    BYTE PTR [eax],cl
c0024c37:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024c39:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0024c3f:	81 c9 05 00 01 00    	or     ecx,0x10005
c0024c45:	89 08                	mov    DWORD PTR [eax],ecx
c0024c47:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024c4d:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024c53:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024c59:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024c5c:	52                   	push   edx
c0024c5d:	68 90 00 00 00       	push   0x90
c0024c62:	6a 00                	push   0x0
c0024c64:	53                   	push   ebx
c0024c65:	e8 0e bb fd ff       	call   c0000778 <memset>
c0024c6a:	8b 85 74 01 00 00    	mov    eax,DWORD PTR [ebp+0x174]
c0024c70:	66 89 7b 04          	mov    WORD PTR [ebx+0x4],di
c0024c74:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0024c7a:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024c7e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024c82:	83 c4 10             	add    esp,0x10
c0024c85:	8d 48 ff             	lea    ecx,[eax-0x1]
c0024c88:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024c8e:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0024c94:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024c99:	09 c8                	or     eax,ecx
c0024c9b:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024ca1:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024ca4:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024cab:	66 25 00 7f          	and    ax,0x7f00
c0024caf:	66 0d 27 80          	or     ax,0x8027
c0024cb3:	80 7c 24 10 01       	cmp    BYTE PTR [esp+0x10],0x1
c0024cb8:	66 89 03             	mov    WORD PTR [ebx],ax
c0024cbb:	19 c0                	sbb    eax,eax
c0024cbd:	83 e0 f0             	and    eax,0xfffffff0
c0024cc0:	83 c0 35             	add    eax,0x35
c0024cc3:	88 43 02             	mov    BYTE PTR [ebx+0x2],al
c0024cc6:	89 f8                	mov    eax,edi
c0024cc8:	c1 e8 10             	shr    eax,0x10
c0024ccb:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024cce:	89 f8                	mov    eax,edi
c0024cd0:	c1 e8 18             	shr    eax,0x18
c0024cd3:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0024cd6:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0024cda:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024cdd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024ce1:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024ce4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024ce8:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024cec:	89 f3                	mov    ebx,esi
c0024cee:	31 c0                	xor    eax,eax
c0024cf0:	c1 e3 07             	shl    ebx,0x7
c0024cf3:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c0024cf7:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c0024cfd:	80 e1 88             	and    cl,0x88
c0024d00:	74 0a                	je     c0024d0c <SATA::access(unsigned long long, int, void*, bool)+0x1c6>
c0024d02:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024d07:	74 0a                	je     c0024d13 <SATA::access(unsigned long long, int, void*, bool)+0x1cd>
c0024d09:	40                   	inc    eax
c0024d0a:	eb eb                	jmp    c0024cf7 <SATA::access(unsigned long long, int, void*, bool)+0x1b1>
c0024d0c:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024d11:	75 0a                	jne    c0024d1d <SATA::access(unsigned long long, int, void*, bool)+0x1d7>
c0024d13:	83 ec 0c             	sub    esp,0xc
c0024d16:	68 fd cc 02 c0       	push   0xc002ccfd
c0024d1b:	eb 56                	jmp    c0024d73 <SATA::access(unsigned long long, int, void*, bool)+0x22d>
c0024d1d:	b8 01 00 00 00       	mov    eax,0x1
c0024d22:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
c0024d26:	c1 e6 07             	shl    esi,0x7
c0024d29:	d3 e0                	shl    eax,cl
c0024d2b:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0024d2f:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c0024d35:	8b 8e 38 01 00 00    	mov    ecx,DWORD PTR [esi+0x138]
c0024d3b:	85 c8                	test   eax,ecx
c0024d3d:	74 20                	je     c0024d5f <SATA::access(unsigned long long, int, void*, bool)+0x219>
c0024d3f:	8b 8e 10 01 00 00    	mov    ecx,DWORD PTR [esi+0x110]
c0024d45:	0f ba e1 1e          	bt     ecx,0x1e
c0024d49:	73 ea                	jae    c0024d35 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c0024d4b:	83 ec 0c             	sub    esp,0xc
c0024d4e:	31 db                	xor    ebx,ebx
c0024d50:	68 0b cd 02 c0       	push   0xc002cd0b
c0024d55:	e8 19 57 ff ff       	call   c001a473 <Krnl::panic(char const*)>
c0024d5a:	83 c4 10             	add    esp,0x10
c0024d5d:	eb 43                	jmp    c0024da2 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024d5f:	8b 86 10 01 00 00    	mov    eax,DWORD PTR [esi+0x110]
c0024d65:	0f ba e0 1e          	bt     eax,0x1e
c0024d69:	73 17                	jae    c0024d82 <SATA::access(unsigned long long, int, void*, bool)+0x23c>
c0024d6b:	83 ec 0c             	sub    esp,0xc
c0024d6e:	68 0b cd 02 c0       	push   0xc002cd0b
c0024d73:	e8 fb 56 ff ff       	call   c001a473 <Krnl::panic(char const*)>
c0024d78:	bb 01 00 00 00       	mov    ebx,0x1
c0024d7d:	83 c4 10             	add    esp,0x10
c0024d80:	eb 20                	jmp    c0024da2 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024d82:	31 db                	xor    ebx,ebx
c0024d84:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024d89:	75 17                	jne    c0024da2 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024d8b:	50                   	push   eax
c0024d8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024d90:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024d96:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0024d9a:	e8 a5 b9 fd ff       	call   c0000744 <memcpy>
c0024d9f:	83 c4 10             	add    esp,0x10
c0024da2:	83 c4 2c             	add    esp,0x2c
c0024da5:	89 d8                	mov    eax,ebx
c0024da7:	5b                   	pop    ebx
c0024da8:	5e                   	pop    esi
c0024da9:	5f                   	pop    edi
c0024daa:	5d                   	pop    ebp
c0024dab:	c3                   	ret    

c0024dac <SATA::read(unsigned long long, int, void*)>:
c0024dac:	57                   	push   edi
c0024dad:	b8 04 00 00 00       	mov    eax,0x4
c0024db2:	56                   	push   esi
c0024db3:	53                   	push   ebx
c0024db4:	83 ec 10             	sub    esp,0x10
c0024db7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024dbb:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024dbf:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024dc2:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024dc6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024dca:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024dd0:	77 3b                	ja     c0024e0d <SATA::read(unsigned long long, int, void*)+0x61>
c0024dd2:	b8 06 00 00 00       	mov    eax,0x6
c0024dd7:	85 d2                	test   edx,edx
c0024dd9:	74 32                	je     c0024e0d <SATA::read(unsigned long long, int, void*)+0x61>
c0024ddb:	50                   	push   eax
c0024ddc:	50                   	push   eax
c0024ddd:	6a 00                	push   0x0
c0024ddf:	52                   	push   edx
c0024de0:	53                   	push   ebx
c0024de1:	57                   	push   edi
c0024de2:	56                   	push   esi
c0024de3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024de7:	e8 5a fd ff ff       	call   c0024b46 <SATA::access(unsigned long long, int, void*, bool)>
c0024dec:	83 c4 20             	add    esp,0x20
c0024def:	85 c0                	test   eax,eax
c0024df1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024df5:	75 11                	jne    c0024e08 <SATA::read(unsigned long long, int, void*)+0x5c>
c0024df7:	01 1d a8 25 03 c0    	add    DWORD PTR ds:0xc00325a8,ebx
c0024dfd:	e8 8e bb fe ff       	call   c0010990 <VgaText::updateDiskUsage()>
c0024e02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024e06:	eb 05                	jmp    c0024e0d <SATA::read(unsigned long long, int, void*)+0x61>
c0024e08:	b8 01 00 00 00       	mov    eax,0x1
c0024e0d:	83 c4 10             	add    esp,0x10
c0024e10:	5b                   	pop    ebx
c0024e11:	5e                   	pop    esi
c0024e12:	5f                   	pop    edi
c0024e13:	c3                   	ret    

c0024e14 <SATA::write(unsigned long long, int, void*)>:
c0024e14:	55                   	push   ebp
c0024e15:	b8 04 00 00 00       	mov    eax,0x4
c0024e1a:	57                   	push   edi
c0024e1b:	56                   	push   esi
c0024e1c:	53                   	push   ebx
c0024e1d:	83 ec 1c             	sub    esp,0x1c
c0024e20:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024e24:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0024e28:	8d 75 ff             	lea    esi,[ebp-0x1]
c0024e2b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0024e2f:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0024e33:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0024e39:	77 56                	ja     c0024e91 <SATA::write(unsigned long long, int, void*)+0x7d>
c0024e3b:	b8 06 00 00 00       	mov    eax,0x6
c0024e40:	85 ff                	test   edi,edi
c0024e42:	74 4d                	je     c0024e91 <SATA::write(unsigned long long, int, void*)+0x7d>
c0024e44:	89 ee                	mov    esi,ebp
c0024e46:	c1 e6 09             	shl    esi,0x9
c0024e49:	01 fe                	add    esi,edi
c0024e4b:	89 c8                	mov    eax,ecx
c0024e4d:	89 da                	mov    edx,ebx
c0024e4f:	83 c0 01             	add    eax,0x1
c0024e52:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024e56:	83 d2 00             	adc    edx,0x0
c0024e59:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0024e5d:	50                   	push   eax
c0024e5e:	50                   	push   eax
c0024e5f:	6a 01                	push   0x1
c0024e61:	57                   	push   edi
c0024e62:	81 c7 00 02 00 00    	add    edi,0x200
c0024e68:	6a 01                	push   0x1
c0024e6a:	53                   	push   ebx
c0024e6b:	51                   	push   ecx
c0024e6c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024e70:	e8 d1 fc ff ff       	call   c0024b46 <SATA::access(unsigned long long, int, void*, bool)>
c0024e75:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0024e79:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024e7d:	83 c4 20             	add    esp,0x20
c0024e80:	39 f7                	cmp    edi,esi
c0024e82:	75 c7                	jne    c0024e4b <SATA::write(unsigned long long, int, void*)+0x37>
c0024e84:	01 2d a4 25 03 c0    	add    DWORD PTR ds:0xc00325a4,ebp
c0024e8a:	e8 01 bb fe ff       	call   c0010990 <VgaText::updateDiskUsage()>
c0024e8f:	31 c0                	xor    eax,eax
c0024e91:	83 c4 1c             	add    esp,0x1c
c0024e94:	5b                   	pop    ebx
c0024e95:	5e                   	pop    esi
c0024e96:	5f                   	pop    edi
c0024e97:	5d                   	pop    ebp
c0024e98:	c3                   	ret    
c0024e99:	90                   	nop

c0024e9a <SATAPI::write(unsigned long long, int, void*)>:
c0024e9a:	b8 03 00 00 00       	mov    eax,0x3
c0024e9f:	c3                   	ret    

c0024ea0 <SATAPI::close(int, int, void*)>:
c0024ea0:	83 ec 0c             	sub    esp,0xc
c0024ea3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024ea7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024ead:	85 c0                	test   eax,eax
c0024eaf:	74 0c                	je     c0024ebd <SATAPI::close(int, int, void*)+0x1d>
c0024eb1:	83 ec 0c             	sub    esp,0xc
c0024eb4:	8b 10                	mov    edx,DWORD PTR [eax]
c0024eb6:	50                   	push   eax
c0024eb7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024eba:	83 c4 10             	add    esp,0x10
c0024ebd:	31 c0                	xor    eax,eax
c0024ebf:	83 c4 0c             	add    esp,0xc
c0024ec2:	c3                   	ret    
c0024ec3:	90                   	nop

c0024ec4 <SATAPI::SATAPI()>:
c0024ec4:	83 ec 0c             	sub    esp,0xc
c0024ec7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024ecb:	83 ec 04             	sub    esp,0x4
c0024ece:	68 00 08 00 00       	push   0x800
c0024ed3:	68 54 cd 02 c0       	push   0xc002cd54
c0024ed8:	50                   	push   eax
c0024ed9:	e8 04 f7 fe ff       	call   c00145e2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024ede:	83 c4 10             	add    esp,0x10
c0024ee1:	ba 00 ce 02 c0       	mov    edx,0xc002ce00
c0024ee6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024eea:	89 10                	mov    DWORD PTR [eax],edx
c0024eec:	90                   	nop
c0024eed:	83 c4 0c             	add    esp,0xc
c0024ef0:	c3                   	ret    
c0024ef1:	90                   	nop

c0024ef2 <SATAPI::diskRemoved()>:
c0024ef2:	83 ec 18             	sub    esp,0x18
c0024ef5:	68 60 cd 02 c0       	push   0xc002cd60
c0024efa:	e8 99 de fe ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0024eff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024f03:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0024f0a:	83 c4 1c             	add    esp,0x1c
c0024f0d:	c3                   	ret    

c0024f0e <SATAPI::diskInserted()>:
c0024f0e:	53                   	push   ebx
c0024f0f:	83 ec 14             	sub    esp,0x14
c0024f12:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024f16:	68 77 cd 02 c0       	push   0xc002cd77
c0024f1b:	e8 78 de fe ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0024f20:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0024f27:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024f2a:	e8 1b f7 fe ff       	call   c001464a <PhysicalDisk::startCache()>
c0024f2f:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024f33:	83 c4 18             	add    esp,0x18
c0024f36:	5b                   	pop    ebx
c0024f37:	e9 ba 18 ff ff       	jmp    c00167f6 <createPartitionsForDisk(PhysicalDisk*)>

c0024f3c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0024f3c:	55                   	push   ebp
c0024f3d:	57                   	push   edi
c0024f3e:	56                   	push   esi
c0024f3f:	53                   	push   ebx
c0024f40:	83 ec 24             	sub    esp,0x24
c0024f43:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0024f47:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024f4b:	8b be 6c 01 00 00    	mov    edi,DWORD PTR [esi+0x16c]
c0024f51:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024f55:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024f59:	8b 86 70 01 00 00    	mov    eax,DWORD PTR [esi+0x170]
c0024f5f:	8d 5f 02             	lea    ebx,[edi+0x2]
c0024f62:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024f68:	c1 e3 07             	shl    ebx,0x7
c0024f6b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024f6f:	89 f8                	mov    eax,edi
c0024f71:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0024f75:	c1 e0 07             	shl    eax,0x7
c0024f78:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024f7c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024f80:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024f8a:	53                   	push   ebx
c0024f8b:	ff b6 70 01 00 00    	push   DWORD PTR [esi+0x170]
c0024f91:	e8 d6 eb ff ff       	call   c0023b6c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024f96:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024f9a:	83 c4 10             	add    esp,0x10
c0024f9d:	b8 01 00 00 00       	mov    eax,0x1
c0024fa2:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0024fa7:	0f 84 8a 01 00 00    	je     c0025137 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c0024fad:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c0024fb3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024fb5:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024fbb:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024fc1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0024fc5:	c1 e1 05             	shl    ecx,0x5
c0024fc8:	01 c8                	add    eax,ecx
c0024fca:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024fcc:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0024fd2:	81 c9 25 00 01 00    	or     ecx,0x10025
c0024fd8:	89 08                	mov    DWORD PTR [eax],ecx
c0024fda:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c0024fe0:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024fe6:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024fec:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024fef:	52                   	push   edx
c0024ff0:	68 90 00 00 00       	push   0x90
c0024ff5:	6a 00                	push   0x0
c0024ff7:	53                   	push   ebx
c0024ff8:	e8 7b b7 fd ff       	call   c0000778 <memset>
c0024ffd:	83 c4 0c             	add    esp,0xc
c0025000:	8d 43 40             	lea    eax,[ebx+0x40]
c0025003:	6a 0c                	push   0xc
c0025005:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025009:	50                   	push   eax
c002500a:	e8 35 b7 fd ff       	call   c0000744 <memcpy>
c002500f:	8b 86 78 01 00 00    	mov    eax,DWORD PTR [esi+0x178]
c0025015:	89 ea                	mov    edx,ebp
c0025017:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c002501d:	c1 ea 18             	shr    edx,0x18
c0025020:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0025024:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0025027:	8d 48 ff             	lea    ecx,[eax-0x1]
c002502a:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c002502e:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0025034:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c002503a:	25 00 00 c0 ff       	and    eax,0xffc00000
c002503f:	66 89 6b 04          	mov    WORD PTR [ebx+0x4],bp
c0025043:	09 c8                	or     eax,ecx
c0025045:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0025049:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c002504f:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0025052:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0025059:	66 25 00 7f          	and    ax,0x7f00
c002505d:	66 0d 27 80          	or     ax,0x8027
c0025061:	66 89 03             	mov    WORD PTR [ebx],ax
c0025064:	89 e8                	mov    eax,ebp
c0025066:	c1 e8 10             	shr    eax,0x10
c0025069:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c002506c:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0025070:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0025073:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025077:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c002507a:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002507e:	83 c4 10             	add    esp,0x10
c0025081:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0025085:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0025089:	31 c0                	xor    eax,eax
c002508b:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c0025091:	80 e1 88             	and    cl,0x88
c0025094:	74 0a                	je     c00250a0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x164>
c0025096:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002509b:	74 0a                	je     c00250a7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c002509d:	40                   	inc    eax
c002509e:	eb eb                	jmp    c002508b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x14f>
c00250a0:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00250a5:	75 0f                	jne    c00250b6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17a>
c00250a7:	83 ec 0c             	sub    esp,0xc
c00250aa:	68 fd cc 02 c0       	push   0xc002ccfd
c00250af:	e8 bf 53 ff ff       	call   c001a473 <Krnl::panic(char const*)>
c00250b4:	eb 3a                	jmp    c00250f0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b4>
c00250b6:	b8 01 00 00 00       	mov    eax,0x1
c00250bb:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00250bf:	c1 e7 07             	shl    edi,0x7
c00250c2:	d3 e0                	shl    eax,cl
c00250c4:	03 3c 24             	add    edi,DWORD PTR [esp]
c00250c7:	89 82 38 01 00 00    	mov    DWORD PTR [edx+0x138],eax
c00250cd:	8b 97 38 01 00 00    	mov    edx,DWORD PTR [edi+0x138]
c00250d3:	85 d0                	test   eax,edx
c00250d5:	74 23                	je     c00250fa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1be>
c00250d7:	8b 97 10 01 00 00    	mov    edx,DWORD PTR [edi+0x110]
c00250dd:	0f ba e2 1e          	bt     edx,0x1e
c00250e1:	73 ea                	jae    c00250cd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x191>
c00250e3:	83 ec 0c             	sub    esp,0xc
c00250e6:	68 8f cd 02 c0       	push   0xc002cd8f
c00250eb:	e8 a8 dc fe ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c00250f0:	83 c4 10             	add    esp,0x10
c00250f3:	b8 01 00 00 00       	mov    eax,0x1
c00250f8:	eb 3d                	jmp    c0025137 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c00250fa:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c0025100:	0f ba e0 1e          	bt     eax,0x1e
c0025104:	73 0a                	jae    c0025110 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d4>
c0025106:	83 ec 0c             	sub    esp,0xc
c0025109:	68 a2 cd 02 c0       	push   0xc002cda2
c002510e:	eb db                	jmp    c00250eb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1af>
c0025110:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0025115:	74 1e                	je     c0025135 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c0025117:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c002511c:	74 17                	je     c0025135 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c002511e:	50                   	push   eax
c002511f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025123:	ff b6 7c 01 00 00    	push   DWORD PTR [esi+0x17c]
c0025129:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c002512d:	e8 12 b6 fd ff       	call   c0000744 <memcpy>
c0025132:	83 c4 10             	add    esp,0x10
c0025135:	31 c0                	xor    eax,eax
c0025137:	83 c4 1c             	add    esp,0x1c
c002513a:	5b                   	pop    ebx
c002513b:	5e                   	pop    esi
c002513c:	5f                   	pop    edi
c002513d:	5d                   	pop    ebp
c002513e:	c3                   	ret    
c002513f:	90                   	nop

c0025140 <SATAPI::eject()>:
c0025140:	57                   	push   edi
c0025141:	b9 03 00 00 00       	mov    ecx,0x3
c0025146:	53                   	push   ebx
c0025147:	83 ec 14             	sub    esp,0x14
c002514a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002514e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025152:	fc                   	cld    
c0025153:	31 c0                	xor    eax,eax
c0025155:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025157:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002515c:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0025161:	50                   	push   eax
c0025162:	6a 00                	push   0x0
c0025164:	6a 00                	push   0x0
c0025166:	6a 00                	push   0x0
c0025168:	6a 00                	push   0x0
c002516a:	6a 02                	push   0x2
c002516c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025170:	50                   	push   eax
c0025171:	53                   	push   ebx
c0025172:	e8 c5 fd ff ff       	call   c0024f3c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025177:	83 c4 14             	add    esp,0x14
c002517a:	53                   	push   ebx
c002517b:	e8 72 fd ff ff       	call   c0024ef2 <SATAPI::diskRemoved()>
c0025180:	83 c4 24             	add    esp,0x24
c0025183:	31 c0                	xor    eax,eax
c0025185:	5b                   	pop    ebx
c0025186:	5f                   	pop    edi
c0025187:	c3                   	ret    

c0025188 <SATAPI::detectMedia()>:
c0025188:	56                   	push   esi
c0025189:	53                   	push   ebx
c002518a:	83 ec 28             	sub    esp,0x28
c002518d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025191:	6a 0c                	push   0xc
c0025193:	6a 00                	push   0x0
c0025195:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0025199:	56                   	push   esi
c002519a:	e8 d9 b5 fd ff       	call   c0000778 <memset>
c002519f:	83 c4 0c             	add    esp,0xc
c00251a2:	6a 00                	push   0x0
c00251a4:	6a 00                	push   0x0
c00251a6:	6a 00                	push   0x0
c00251a8:	6a 00                	push   0x0
c00251aa:	6a 00                	push   0x0
c00251ac:	56                   	push   esi
c00251ad:	53                   	push   ebx
c00251ae:	e8 89 fd ff ff       	call   c0024f3c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00251b3:	83 c4 1c             	add    esp,0x1c
c00251b6:	6a 0c                	push   0xc
c00251b8:	6a 00                	push   0x0
c00251ba:	56                   	push   esi
c00251bb:	e8 b8 b5 fd ff       	call   c0000778 <memset>
c00251c0:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00251c5:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00251ca:	83 c4 0c             	add    esp,0xc
c00251cd:	6a 01                	push   0x1
c00251cf:	8d 44 24 16          	lea    eax,[esp+0x16]
c00251d3:	50                   	push   eax
c00251d4:	6a 00                	push   0x0
c00251d6:	6a 00                	push   0x0
c00251d8:	6a 12                	push   0x12
c00251da:	56                   	push   esi
c00251db:	53                   	push   ebx
c00251dc:	e8 5b fd ff ff       	call   c0024f3c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00251e1:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00251e5:	83 c4 20             	add    esp,0x20
c00251e8:	83 e0 7f             	and    eax,0x7f
c00251eb:	3c 70                	cmp    al,0x70
c00251ed:	74 15                	je     c0025204 <SATAPI::detectMedia()+0x7c>
c00251ef:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00251f6:	75 0c                	jne    c0025204 <SATAPI::detectMedia()+0x7c>
c00251f8:	83 ec 0c             	sub    esp,0xc
c00251fb:	53                   	push   ebx
c00251fc:	e8 0d fd ff ff       	call   c0024f0e <SATAPI::diskInserted()>
c0025201:	83 c4 10             	add    esp,0x10
c0025204:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0025208:	83 e0 0f             	and    eax,0xf
c002520b:	3c 02                	cmp    al,0x2
c002520d:	75 1b                	jne    c002522a <SATAPI::detectMedia()+0xa2>
c002520f:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0025214:	75 2d                	jne    c0025243 <SATAPI::detectMedia()+0xbb>
c0025216:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c002521d:	74 24                	je     c0025243 <SATAPI::detectMedia()+0xbb>
c002521f:	83 ec 0c             	sub    esp,0xc
c0025222:	53                   	push   ebx
c0025223:	e8 ca fc ff ff       	call   c0024ef2 <SATAPI::diskRemoved()>
c0025228:	eb 16                	jmp    c0025240 <SATAPI::detectMedia()+0xb8>
c002522a:	84 c0                	test   al,al
c002522c:	75 15                	jne    c0025243 <SATAPI::detectMedia()+0xbb>
c002522e:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025235:	75 0c                	jne    c0025243 <SATAPI::detectMedia()+0xbb>
c0025237:	83 ec 0c             	sub    esp,0xc
c002523a:	53                   	push   ebx
c002523b:	e8 ce fc ff ff       	call   c0024f0e <SATAPI::diskInserted()>
c0025240:	83 c4 10             	add    esp,0x10
c0025243:	83 c4 24             	add    esp,0x24
c0025246:	5b                   	pop    ebx
c0025247:	5e                   	pop    esi
c0025248:	c3                   	ret    
c0025249:	90                   	nop

c002524a <SATAPI::open(int, int, void*)>:
c002524a:	56                   	push   esi
c002524b:	53                   	push   ebx
c002524c:	50                   	push   eax
c002524d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025251:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025255:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002525f:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0025265:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002526f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025273:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002527d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0025283:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002528a:	e8 4e ac fe ff       	call   c000fedd <Phys::allocatePage()>
c002528f:	89 c6                	mov    esi,eax
c0025291:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025297:	81 c6 00 10 00 00    	add    esi,0x1000
c002529d:	e8 3b ac fe ff       	call   c000fedd <Phys::allocatePage()>
c00252a2:	39 c6                	cmp    esi,eax
c00252a4:	74 10                	je     c00252b6 <SATAPI::open(int, int, void*)+0x6c>
c00252a6:	83 ec 0c             	sub    esp,0xc
c00252a9:	68 b7 cd 02 c0       	push   0xc002cdb7
c00252ae:	e8 c0 51 ff ff       	call   c001a473 <Krnl::panic(char const*)>
c00252b3:	83 c4 10             	add    esp,0x10
c00252b6:	83 ec 0c             	sub    esp,0xc
c00252b9:	6a 02                	push   0x2
c00252bb:	e8 7b c8 fe ff       	call   c0011b3b <Virt::allocateKernelVirtualPages(int)>
c00252c0:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c00252c6:	e8 17 cb fe ff       	call   c0011de2 <Virt::getAKernelVAS()>
c00252cb:	6a 03                	push   0x3
c00252cd:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c00252d3:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c00252d9:	50                   	push   eax
c00252da:	e8 25 cf fe ff       	call   c0012204 <VAS::mapPage(unsigned long, unsigned long, int)>
c00252df:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c00252e6:	83 c4 14             	add    esp,0x14
c00252e9:	53                   	push   ebx
c00252ea:	e8 99 fe ff ff       	call   c0025188 <SATAPI::detectMedia()>
c00252ef:	83 c4 14             	add    esp,0x14
c00252f2:	31 c0                	xor    eax,eax
c00252f4:	5b                   	pop    ebx
c00252f5:	5e                   	pop    esi
c00252f6:	c3                   	ret    
c00252f7:	90                   	nop

c00252f8 <SATAPI::read(unsigned long long, int, void*)>:
c00252f8:	55                   	push   ebp
c00252f9:	57                   	push   edi
c00252fa:	56                   	push   esi
c00252fb:	53                   	push   ebx
c00252fc:	83 ec 1c             	sub    esp,0x1c
c00252ff:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025303:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025307:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c002530b:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025312:	74 19                	je     c002532d <SATAPI::read(unsigned long long, int, void*)+0x35>
c0025314:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c0025319:	7e 2e                	jle    c0025349 <SATAPI::read(unsigned long long, int, void*)+0x51>
c002531b:	83 ec 0c             	sub    esp,0xc
c002531e:	68 cd cd 02 c0       	push   0xc002cdcd
c0025323:	e8 4b 51 ff ff       	call   c001a473 <Krnl::panic(char const*)>
c0025328:	83 c4 10             	add    esp,0x10
c002532b:	eb 1c                	jmp    c0025349 <SATAPI::read(unsigned long long, int, void*)+0x51>
c002532d:	83 ec 0c             	sub    esp,0xc
c0025330:	55                   	push   ebp
c0025331:	e8 52 fe ff ff       	call   c0025188 <SATAPI::detectMedia()>
c0025336:	83 c4 10             	add    esp,0x10
c0025339:	b8 02 00 00 00       	mov    eax,0x2
c002533e:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025345:	75 cd                	jne    c0025314 <SATAPI::read(unsigned long long, int, void*)+0x1c>
c0025347:	eb 49                	jmp    c0025392 <SATAPI::read(unsigned long long, int, void*)+0x9a>
c0025349:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002534d:	b9 03 00 00 00       	mov    ecx,0x3
c0025352:	fc                   	cld    
c0025353:	31 c0                	xor    eax,eax
c0025355:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025357:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c002535c:	89 d8                	mov    eax,ebx
c002535e:	86 e0                	xchg   al,ah
c0025360:	c1 c0 10             	rol    eax,0x10
c0025363:	86 e0                	xchg   al,ah
c0025365:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c0025369:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c002536d:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0025371:	50                   	push   eax
c0025372:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0025376:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002537a:	56                   	push   esi
c002537b:	53                   	push   ebx
c002537c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0025380:	c1 e0 0b             	shl    eax,0xb
c0025383:	50                   	push   eax
c0025384:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025388:	50                   	push   eax
c0025389:	55                   	push   ebp
c002538a:	e8 ad fb ff ff       	call   c0024f3c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002538f:	83 c4 20             	add    esp,0x20
c0025392:	83 c4 1c             	add    esp,0x1c
c0025395:	5b                   	pop    ebx
c0025396:	5e                   	pop    esi
c0025397:	5f                   	pop    edi
c0025398:	5d                   	pop    ebp
c0025399:	c3                   	ret    

c002539a <AVX::open(int, int, void*)>:
c002539a:	83 ec 0c             	sub    esp,0xc
c002539d:	e8 46 11 00 00       	call   c00264e8 <avxInit>
c00253a2:	b8 00 00 00 00       	mov    eax,0x0
c00253a7:	83 c4 0c             	add    esp,0xc
c00253aa:	c3                   	ret    
c00253ab:	90                   	nop

c00253ac <AVX::close(int, int, void*)>:
c00253ac:	83 ec 0c             	sub    esp,0xc
c00253af:	e8 35 11 00 00       	call   c00264e9 <avxClose>
c00253b4:	b8 00 00 00 00       	mov    eax,0x0
c00253b9:	83 c4 0c             	add    esp,0xc
c00253bc:	c3                   	ret    
c00253bd:	90                   	nop

c00253be <AVX::available()>:
c00253be:	83 ec 0c             	sub    esp,0xc
c00253c1:	e8 1a 11 00 00       	call   c00264e0 <avxDetect>
c00253c6:	85 c0                	test   eax,eax
c00253c8:	0f 95 c0             	setne  al
c00253cb:	83 c4 0c             	add    esp,0xc
c00253ce:	c3                   	ret    
c00253cf:	90                   	nop

c00253d0 <AVX::save(void*)>:
c00253d0:	83 ec 0c             	sub    esp,0xc
c00253d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00253d7:	83 ec 0c             	sub    esp,0xc
c00253da:	50                   	push   eax
c00253db:	e8 06 11 00 00       	call   c00264e6 <avxSave>
c00253e0:	83 c4 10             	add    esp,0x10
c00253e3:	90                   	nop
c00253e4:	83 c4 0c             	add    esp,0xc
c00253e7:	c3                   	ret    

c00253e8 <AVX::load(void*)>:
c00253e8:	83 ec 0c             	sub    esp,0xc
c00253eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00253ef:	83 ec 0c             	sub    esp,0xc
c00253f2:	50                   	push   eax
c00253f3:	e8 ef 10 00 00       	call   c00264e7 <avxLoad>
c00253f8:	83 c4 10             	add    esp,0x10
c00253fb:	90                   	nop
c00253fc:	83 c4 0c             	add    esp,0xc
c00253ff:	c3                   	ret    

c0025400 <AVX::AVX()>:
c0025400:	83 ec 0c             	sub    esp,0xc
c0025403:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025407:	83 ec 08             	sub    esp,0x8
c002540a:	68 30 ce 02 c0       	push   0xc002ce30
c002540f:	50                   	push   eax
c0025410:	e8 ab f2 fe ff       	call   c00146c0 <FPU::FPU(char const*)>
c0025415:	83 c4 10             	add    esp,0x10
c0025418:	ba 40 ce 02 c0       	mov    edx,0xc002ce40
c002541d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025421:	89 10                	mov    DWORD PTR [eax],edx
c0025423:	90                   	nop
c0025424:	83 c4 0c             	add    esp,0xc
c0025427:	c3                   	ret    

c0025428 <MMX::available()>:
c0025428:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c002542d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025433:	83 e0 20             	and    eax,0x20
c0025436:	84 c0                	test   al,al
c0025438:	0f 95 c0             	setne  al
c002543b:	c3                   	ret    

c002543c <MMX::open(int, int, void*)>:
c002543c:	83 ec 0c             	sub    esp,0xc
c002543f:	e8 28 11 00 00       	call   c002656c <x87Init>
c0025444:	b8 00 00 00 00       	mov    eax,0x0
c0025449:	83 c4 0c             	add    esp,0xc
c002544c:	c3                   	ret    
c002544d:	90                   	nop

c002544e <MMX::close(int, int, void*)>:
c002544e:	83 ec 0c             	sub    esp,0xc
c0025451:	e8 30 11 00 00       	call   c0026586 <x87Close>
c0025456:	b8 00 00 00 00       	mov    eax,0x0
c002545b:	83 c4 0c             	add    esp,0xc
c002545e:	c3                   	ret    
c002545f:	90                   	nop

c0025460 <MMX::save(void*)>:
c0025460:	83 ec 0c             	sub    esp,0xc
c0025463:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025467:	83 ec 0c             	sub    esp,0xc
c002546a:	50                   	push   eax
c002546b:	e8 f1 10 00 00       	call   c0026561 <x87Save>
c0025470:	83 c4 10             	add    esp,0x10
c0025473:	90                   	nop
c0025474:	83 c4 0c             	add    esp,0xc
c0025477:	c3                   	ret    

c0025478 <MMX::load(void*)>:
c0025478:	83 ec 0c             	sub    esp,0xc
c002547b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002547f:	83 ec 0c             	sub    esp,0xc
c0025482:	50                   	push   eax
c0025483:	e8 df 10 00 00       	call   c0026567 <x87Load>
c0025488:	83 c4 10             	add    esp,0x10
c002548b:	90                   	nop
c002548c:	83 c4 0c             	add    esp,0xc
c002548f:	c3                   	ret    

c0025490 <MMX::MMX()>:
c0025490:	83 ec 0c             	sub    esp,0xc
c0025493:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025497:	83 ec 08             	sub    esp,0x8
c002549a:	68 70 ce 02 c0       	push   0xc002ce70
c002549f:	50                   	push   eax
c00254a0:	e8 1b f2 fe ff       	call   c00146c0 <FPU::FPU(char const*)>
c00254a5:	83 c4 10             	add    esp,0x10
c00254a8:	ba 80 ce 02 c0       	mov    edx,0xc002ce80
c00254ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254b1:	89 10                	mov    DWORD PTR [eax],edx
c00254b3:	90                   	nop
c00254b4:	83 c4 0c             	add    esp,0xc
c00254b7:	c3                   	ret    

c00254b8 <SSE::open(int, int, void*)>:
c00254b8:	83 ec 0c             	sub    esp,0xc
c00254bb:	e8 64 10 00 00       	call   c0026524 <sseInit>
c00254c0:	b8 00 00 00 00       	mov    eax,0x0
c00254c5:	83 c4 0c             	add    esp,0xc
c00254c8:	c3                   	ret    
c00254c9:	90                   	nop

c00254ca <SSE::close(int, int, void*)>:
c00254ca:	83 ec 0c             	sub    esp,0xc
c00254cd:	e8 62 10 00 00       	call   c0026534 <sseClose>
c00254d2:	b8 00 00 00 00       	mov    eax,0x0
c00254d7:	83 c4 0c             	add    esp,0xc
c00254da:	c3                   	ret    
c00254db:	90                   	nop

c00254dc <SSE::available()>:
c00254dc:	83 ec 1c             	sub    esp,0x1c
c00254df:	e8 1c 10 00 00       	call   c0026500 <absolutelyNoChanceInHell>
c00254e4:	85 c0                	test   eax,eax
c00254e6:	0f 95 c0             	setne  al
c00254e9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00254ed:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00254f1:	83 c4 1c             	add    esp,0x1c
c00254f4:	c3                   	ret    
c00254f5:	90                   	nop

c00254f6 <SSE::save(void*)>:
c00254f6:	83 ec 0c             	sub    esp,0xc
c00254f9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00254fd:	83 ec 0c             	sub    esp,0xc
c0025500:	50                   	push   eax
c0025501:	e8 12 10 00 00       	call   c0026518 <sseSave>
c0025506:	83 c4 10             	add    esp,0x10
c0025509:	90                   	nop
c002550a:	83 c4 0c             	add    esp,0xc
c002550d:	c3                   	ret    

c002550e <SSE::load(void*)>:
c002550e:	83 ec 0c             	sub    esp,0xc
c0025511:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025515:	83 ec 0c             	sub    esp,0xc
c0025518:	50                   	push   eax
c0025519:	e8 00 10 00 00       	call   c002651e <sseLoad>
c002551e:	83 c4 10             	add    esp,0x10
c0025521:	90                   	nop
c0025522:	83 c4 0c             	add    esp,0xc
c0025525:	c3                   	ret    

c0025526 <SSE::SSE()>:
c0025526:	83 ec 0c             	sub    esp,0xc
c0025529:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002552d:	83 ec 08             	sub    esp,0x8
c0025530:	68 b0 ce 02 c0       	push   0xc002ceb0
c0025535:	50                   	push   eax
c0025536:	e8 85 f1 fe ff       	call   c00146c0 <FPU::FPU(char const*)>
c002553b:	83 c4 10             	add    esp,0x10
c002553e:	ba c0 ce 02 c0       	mov    edx,0xc002cec0
c0025543:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025547:	89 10                	mov    DWORD PTR [eax],edx
c0025549:	90                   	nop
c002554a:	83 c4 0c             	add    esp,0xc
c002554d:	c3                   	ret    

c002554e <x87::open(int, int, void*)>:
c002554e:	83 ec 0c             	sub    esp,0xc
c0025551:	e8 16 10 00 00       	call   c002656c <x87Init>
c0025556:	b8 00 00 00 00       	mov    eax,0x0
c002555b:	83 c4 0c             	add    esp,0xc
c002555e:	c3                   	ret    
c002555f:	90                   	nop

c0025560 <x87::close(int, int, void*)>:
c0025560:	83 ec 0c             	sub    esp,0xc
c0025563:	e8 1e 10 00 00       	call   c0026586 <x87Close>
c0025568:	b8 00 00 00 00       	mov    eax,0x0
c002556d:	83 c4 0c             	add    esp,0xc
c0025570:	c3                   	ret    
c0025571:	90                   	nop

c0025572 <x87::available()>:
c0025572:	83 ec 0c             	sub    esp,0xc
c0025575:	e8 cc 0f 00 00       	call   c0026546 <x87Detect>
c002557a:	85 c0                	test   eax,eax
c002557c:	0f 95 c0             	setne  al
c002557f:	83 c4 0c             	add    esp,0xc
c0025582:	c3                   	ret    
c0025583:	90                   	nop

c0025584 <x87::save(void*)>:
c0025584:	83 ec 0c             	sub    esp,0xc
c0025587:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002558b:	83 ec 0c             	sub    esp,0xc
c002558e:	50                   	push   eax
c002558f:	e8 cd 0f 00 00       	call   c0026561 <x87Save>
c0025594:	83 c4 10             	add    esp,0x10
c0025597:	90                   	nop
c0025598:	83 c4 0c             	add    esp,0xc
c002559b:	c3                   	ret    

c002559c <x87::load(void*)>:
c002559c:	83 ec 0c             	sub    esp,0xc
c002559f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00255a3:	83 ec 0c             	sub    esp,0xc
c00255a6:	50                   	push   eax
c00255a7:	e8 bb 0f 00 00       	call   c0026567 <x87Load>
c00255ac:	83 c4 10             	add    esp,0x10
c00255af:	90                   	nop
c00255b0:	83 c4 0c             	add    esp,0xc
c00255b3:	c3                   	ret    

c00255b4 <x87::x87()>:
c00255b4:	83 ec 0c             	sub    esp,0xc
c00255b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255bb:	83 ec 08             	sub    esp,0x8
c00255be:	68 f0 ce 02 c0       	push   0xc002cef0
c00255c3:	50                   	push   eax
c00255c4:	e8 f7 f0 fe ff       	call   c00146c0 <FPU::FPU(char const*)>
c00255c9:	83 c4 10             	add    esp,0x10
c00255cc:	ba 00 cf 02 c0       	mov    edx,0xc002cf00
c00255d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255d5:	89 10                	mov    DWORD PTR [eax],edx
c00255d7:	90                   	nop
c00255d8:	83 c4 0c             	add    esp,0xc
c00255db:	c3                   	ret    

c00255dc <APIC::disable()>:
c00255dc:	90                   	nop
c00255dd:	c3                   	ret    

c00255de <APIC::close(int, int, void*)>:
c00255de:	55                   	push   ebp
c00255df:	89 e5                	mov    ebp,esp
c00255e1:	83 ec 08             	sub    esp,0x8
c00255e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00255e7:	8b 00                	mov    eax,DWORD PTR [eax]
c00255e9:	83 c0 3c             	add    eax,0x3c
c00255ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00255ee:	83 ec 0c             	sub    esp,0xc
c00255f1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00255f4:	ff d0                	call   eax
c00255f6:	83 c4 10             	add    esp,0x10
c00255f9:	b8 00 00 00 00       	mov    eax,0x0
c00255fe:	c9                   	leave  
c00255ff:	c3                   	ret    

c0025600 <IOAPIC::close(int, int, void*)>:
c0025600:	b8 00 00 00 00       	mov    eax,0x0
c0025605:	c3                   	ret    

c0025606 <APIC::io_wait()>:
c0025606:	eb 00                	jmp    c0025608 <APIC::io_wait()+0x2>
c0025608:	eb 00                	jmp    c002560a <APIC::io_wait()+0x4>
c002560a:	90                   	nop
c002560b:	c3                   	ret    

c002560c <APIC::getBase()>:
c002560c:	55                   	push   ebp
c002560d:	89 e5                	mov    ebp,esp
c002560f:	83 ec 18             	sub    esp,0x18
c0025612:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c0025617:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c002561d:	83 e0 08             	and    eax,0x8
c0025620:	84 c0                	test   al,al
c0025622:	75 07                	jne    c002562b <APIC::getBase()+0x1f>
c0025624:	b8 00 00 00 00       	mov    eax,0x0
c0025629:	eb 21                	jmp    c002564c <APIC::getBase()+0x40>
c002562b:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c0025630:	83 ec 08             	sub    esp,0x8
c0025633:	6a 1b                	push   0x1b
c0025635:	50                   	push   eax
c0025636:	e8 ad 97 fe ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c002563b:	83 c4 10             	add    esp,0x10
c002563e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025641:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025644:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025647:	25 00 f0 ff ff       	and    eax,0xfffff000
c002564c:	c9                   	leave  
c002564d:	c3                   	ret    

c002564e <APIC::eoi(unsigned char)>:
c002564e:	55                   	push   ebp
c002564f:	89 e5                	mov    ebp,esp
c0025651:	83 ec 28             	sub    esp,0x28
c0025654:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025657:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c002565a:	83 ec 0c             	sub    esp,0xc
c002565d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025660:	e8 a7 ff ff ff       	call   c002560c <APIC::getBase()>
c0025665:	83 c4 10             	add    esp,0x10
c0025668:	05 b0 00 00 00       	add    eax,0xb0
c002566d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025670:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025673:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0025679:	90                   	nop
c002567a:	c9                   	leave  
c002567b:	c3                   	ret    

c002567c <APIC::open(int, int, void*)>:
c002567c:	55                   	push   ebp
c002567d:	89 e5                	mov    ebp,esp
c002567f:	57                   	push   edi
c0025680:	56                   	push   esi
c0025681:	53                   	push   ebx
c0025682:	83 ec 2c             	sub    esp,0x2c
c0025685:	83 ec 0c             	sub    esp,0xc
c0025688:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002568b:	e8 7c ff ff ff       	call   c002560c <APIC::getBase()>
c0025690:	83 c4 10             	add    esp,0x10
c0025693:	89 c2                	mov    edx,eax
c0025695:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025698:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002569e:	0f b6 f8             	movzx  edi,al
c00256a1:	89 d0                	mov    eax,edx
c00256a3:	ba 00 00 00 00       	mov    edx,0x0
c00256a8:	89 c1                	mov    ecx,eax
c00256aa:	80 e5 ff             	and    ch,0xff
c00256ad:	89 cb                	mov    ebx,ecx
c00256af:	0f b6 f2             	movzx  esi,dl
c00256b2:	89 d8                	mov    eax,ebx
c00256b4:	89 f2                	mov    edx,esi
c00256b6:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00256b9:	8d 5f 08             	lea    ebx,[edi+0x8]
c00256bc:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00256c0:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00256c4:	83 e0 00             	and    eax,0x0
c00256c7:	09 d0                	or     eax,edx
c00256c9:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00256cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00256d0:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00256d6:	8d 50 01             	lea    edx,[eax+0x1]
c00256d9:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00256dc:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00256e2:	0f b6 d0             	movzx  edx,al
c00256e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00256e8:	83 c2 08             	add    edx,0x8
c00256eb:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00256ef:	0f b6 c9             	movzx  ecx,cl
c00256f2:	81 c9 00 00 01 00    	or     ecx,0x10000
c00256f8:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00256fc:	83 ec 0c             	sub    esp,0xc
c00256ff:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025702:	e8 05 ff ff ff       	call   c002560c <APIC::getBase()>
c0025707:	83 c4 10             	add    esp,0x10
c002570a:	05 f0 00 00 00       	add    eax,0xf0
c002570f:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0025712:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025715:	8b 00                	mov    eax,DWORD PTR [eax]
c0025717:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002571a:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0025721:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0025728:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002572b:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002572e:	89 10                	mov    DWORD PTR [eax],edx
c0025730:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0025737:	a1 30 0b 03 c0       	mov    eax,ds:0xc0030b30
c002573c:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c002573f:	7d 7c                	jge    c00257bd <APIC::open(int, int, void*)+0x141>
c0025741:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025744:	8b 04 85 40 0b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf4c0]
c002574b:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c002574e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025751:	8b 04 85 40 0b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf4c0]
c0025758:	c1 e8 08             	shr    eax,0x8
c002575b:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c002575f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025762:	8b 04 85 40 0b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf4c0]
c0025769:	c1 e8 18             	shr    eax,0x18
c002576c:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c002576f:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c0025773:	75 40                	jne    c00257b5 <APIC::open(int, int, void*)+0x139>
c0025775:	83 ec 0c             	sub    esp,0xc
c0025778:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002577b:	e8 8c fe ff ff       	call   c002560c <APIC::getBase()>
c0025780:	83 c4 10             	add    esp,0x10
c0025783:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0025787:	75 07                	jne    c0025790 <APIC::open(int, int, void*)+0x114>
c0025789:	ba 60 03 00 00       	mov    edx,0x360
c002578e:	eb 05                	jmp    c0025795 <APIC::open(int, int, void*)+0x119>
c0025790:	ba 50 03 00 00       	mov    edx,0x350
c0025795:	01 d0                	add    eax,edx
c0025797:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002579a:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002579d:	8b 00                	mov    eax,DWORD PTR [eax]
c002579f:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00257a2:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c00257a9:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c00257ad:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00257b0:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00257b3:	89 10                	mov    DWORD PTR [eax],edx
c00257b5:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c00257b8:	e9 7a ff ff ff       	jmp    c0025737 <APIC::open(int, int, void*)+0xbb>
c00257bd:	b8 00 00 00 00       	mov    eax,0x0
c00257c2:	8d 65 f4             	lea    esp,[ebp-0xc]
c00257c5:	5b                   	pop    ebx
c00257c6:	5e                   	pop    esi
c00257c7:	5f                   	pop    edi
c00257c8:	5d                   	pop    ebp
c00257c9:	c3                   	ret    

c00257ca <IOAPIC::IOAPIC()>:
c00257ca:	83 ec 0c             	sub    esp,0xc
c00257cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257d1:	83 ec 08             	sub    esp,0x8
c00257d4:	68 30 cf 02 c0       	push   0xc002cf30
c00257d9:	50                   	push   eax
c00257da:	e8 cf eb fe ff       	call   c00143ae <Device::Device(char const*)>
c00257df:	83 c4 10             	add    esp,0x10
c00257e2:	ba 58 d0 02 c0       	mov    edx,0xc002d058
c00257e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257eb:	89 10                	mov    DWORD PTR [eax],edx
c00257ed:	90                   	nop
c00257ee:	83 c4 0c             	add    esp,0xc
c00257f1:	c3                   	ret    

c00257f2 <APIC::APIC()>:
c00257f2:	53                   	push   ebx
c00257f3:	83 ec 18             	sub    esp,0x18
c00257f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00257fa:	83 ec 08             	sub    esp,0x8
c00257fd:	68 38 cf 02 c0       	push   0xc002cf38
c0025802:	50                   	push   eax
c0025803:	e8 12 f3 fe ff       	call   c0014b1a <InterruptController::InterruptController(char const*)>
c0025808:	83 c4 10             	add    esp,0x10
c002580b:	ba 10 d0 02 c0       	mov    edx,0xc002d010
c0025810:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025814:	89 10                	mov    DWORD PTR [eax],edx
c0025816:	a0 00 26 03 c0       	mov    al,ds:0xc0032600
c002581b:	83 f0 01             	xor    eax,0x1
c002581e:	84 c0                	test   al,al
c0025820:	0f 84 a1 00 00 00    	je     c00258c7 <APIC::APIC()+0xd5>
c0025826:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c002582b:	a0 e0 0b 03 c0       	mov    al,ds:0xc0030be0
c0025830:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0025834:	0f 83 86 00 00 00    	jae    c00258c0 <APIC::APIC()+0xce>
c002583a:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0025842:	83 ec 0c             	sub    esp,0xc
c0025845:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025849:	e8 f2 9f fe ff       	call   c000f840 <malloc>
c002584e:	83 c4 10             	add    esp,0x10
c0025851:	89 c3                	mov    ebx,eax
c0025853:	83 ec 0c             	sub    esp,0xc
c0025856:	53                   	push   ebx
c0025857:	e8 6e ff ff ff       	call   c00257ca <IOAPIC::IOAPIC()>
c002585c:	83 c4 10             	add    esp,0x10
c002585f:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0025863:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0025868:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002586c:	89 14 85 e0 25 03 c0 	mov    DWORD PTR [eax*4-0x3ffcda20],edx
c0025873:	a1 c0 25 03 c0       	mov    eax,ds:0xc00325c0
c0025878:	40                   	inc    eax
c0025879:	a3 c0 25 03 c0       	mov    ds:0xc00325c0,eax
c002587e:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c0025883:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0025889:	83 ec 08             	sub    esp,0x8
c002588c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025890:	50                   	push   eax
c0025891:	e8 28 e9 fe ff       	call   c00141be <Device::addChild(Device*)>
c0025896:	83 c4 10             	add    esp,0x10
c0025899:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002589d:	8b 00                	mov    eax,DWORD PTR [eax]
c002589f:	83 c0 08             	add    eax,0x8
c00258a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00258a4:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00258a9:	6a 00                	push   0x0
c00258ab:	6a 00                	push   0x0
c00258ad:	52                   	push   edx
c00258ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00258b2:	ff d0                	call   eax
c00258b4:	83 c4 10             	add    esp,0x10
c00258b7:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c00258bb:	e9 6b ff ff ff       	jmp    c002582b <APIC::APIC()+0x39>
c00258c0:	c6 05 00 26 03 c0 01 	mov    BYTE PTR ds:0xc0032600,0x1
c00258c7:	90                   	nop
c00258c8:	83 c4 18             	add    esp,0x18
c00258cb:	5b                   	pop    ebx
c00258cc:	c3                   	ret    
c00258cd:	90                   	nop

c00258ce <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c00258ce:	55                   	push   ebp
c00258cf:	89 e5                	mov    ebp,esp
c00258d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00258d4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00258da:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00258dd:	72 1d                	jb     c00258fc <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00258df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00258e2:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c00258e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00258eb:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c00258f1:	01 d0                	add    eax,edx
c00258f3:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00258f6:	73 04                	jae    c00258fc <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00258f8:	b0 01                	mov    al,0x1
c00258fa:	eb 02                	jmp    c00258fe <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c00258fc:	b0 00                	mov    al,0x0
c00258fe:	5d                   	pop    ebp
c00258ff:	c3                   	ret    

c0025900 <IOAPIC::read(int)>:
c0025900:	55                   	push   ebp
c0025901:	89 e5                	mov    ebp,esp
c0025903:	83 ec 10             	sub    esp,0x10
c0025906:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025909:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002590f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025912:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025915:	0f b6 d0             	movzx  edx,al
c0025918:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002591b:	89 10                	mov    DWORD PTR [eax],edx
c002591d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025920:	83 c0 10             	add    eax,0x10
c0025923:	8b 00                	mov    eax,DWORD PTR [eax]
c0025925:	c9                   	leave  
c0025926:	c3                   	ret    
c0025927:	90                   	nop

c0025928 <IOAPIC::open(int, int, void*)>:
c0025928:	55                   	push   ebp
c0025929:	89 e5                	mov    ebp,esp
c002592b:	57                   	push   edi
c002592c:	56                   	push   esi
c002592d:	53                   	push   ebx
c002592e:	83 ec 0c             	sub    esp,0xc
c0025931:	83 ec 0c             	sub    esp,0xc
c0025934:	68 63 cf 02 c0       	push   0xc002cf63
c0025939:	e8 5a d4 fe ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c002593e:	83 c4 10             	add    esp,0x10
c0025941:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025944:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025947:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002594d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025950:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025956:	8b 14 85 20 0c 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf3e0]
c002595d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025960:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025966:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025969:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002596f:	8b 14 85 a0 0c 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf360]
c0025976:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025979:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c002597f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025982:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0025988:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002598b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025991:	0f b6 f8             	movzx  edi,al
c0025994:	89 d0                	mov    eax,edx
c0025996:	ba 00 00 00 00       	mov    edx,0x0
c002599b:	89 c1                	mov    ecx,eax
c002599d:	80 e5 ff             	and    ch,0xff
c00259a0:	89 cb                	mov    ebx,ecx
c00259a2:	0f b6 f2             	movzx  esi,dl
c00259a5:	89 d8                	mov    eax,ebx
c00259a7:	89 f2                	mov    edx,esi
c00259a9:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00259ac:	8d 5f 08             	lea    ebx,[edi+0x8]
c00259af:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00259b3:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00259b7:	83 e0 00             	and    eax,0x0
c00259ba:	09 d0                	or     eax,edx
c00259bc:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00259c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00259c3:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00259c9:	8d 50 01             	lea    edx,[eax+0x1]
c00259cc:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00259cf:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00259d5:	0f b6 d0             	movzx  edx,al
c00259d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00259db:	83 c2 08             	add    edx,0x8
c00259de:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00259e2:	0f b6 c9             	movzx  ecx,cl
c00259e5:	81 c9 00 ad de 00    	or     ecx,0xdead00
c00259eb:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00259ef:	83 ec 08             	sub    esp,0x8
c00259f2:	6a 01                	push   0x1
c00259f4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00259f7:	e8 04 ff ff ff       	call   c0025900 <IOAPIC::read(int)>
c00259fc:	83 c4 10             	add    esp,0x10
c00259ff:	c1 f8 10             	sar    eax,0x10
c0025a02:	0f b6 c0             	movzx  eax,al
c0025a05:	8d 50 01             	lea    edx,[eax+0x1]
c0025a08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a0b:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0025a11:	b8 00 00 00 00       	mov    eax,0x0
c0025a16:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025a19:	5b                   	pop    ebx
c0025a1a:	5e                   	pop    esi
c0025a1b:	5f                   	pop    edi
c0025a1c:	5d                   	pop    ebp
c0025a1d:	c3                   	ret    

c0025a1e <IOAPIC::write(int, int)>:
c0025a1e:	55                   	push   ebp
c0025a1f:	89 e5                	mov    ebp,esp
c0025a21:	83 ec 10             	sub    esp,0x10
c0025a24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a27:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025a2d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025a30:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025a33:	0f b6 d0             	movzx  edx,al
c0025a36:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025a39:	89 10                	mov    DWORD PTR [eax],edx
c0025a3b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025a3e:	8d 50 10             	lea    edx,[eax+0x10]
c0025a41:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025a44:	89 02                	mov    DWORD PTR [edx],eax
c0025a46:	90                   	nop
c0025a47:	c9                   	leave  
c0025a48:	c3                   	ret    
c0025a49:	90                   	nop

c0025a4a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0025a4a:	55                   	push   ebp
c0025a4b:	89 e5                	mov    ebp,esp
c0025a4d:	53                   	push   ebx
c0025a4e:	83 ec 2c             	sub    esp,0x2c
c0025a51:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025a54:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0025a57:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0025a5a:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0025a5d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025a60:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025a63:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025a66:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025a69:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025a6c:	88 d8                	mov    al,bl
c0025a6e:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0025a71:	88 c8                	mov    al,cl
c0025a73:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025a76:	88 d0                	mov    al,dl
c0025a78:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0025a7b:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025a7f:	83 c0 08             	add    eax,0x8
c0025a82:	01 c0                	add    eax,eax
c0025a84:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025a87:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025a8b:	83 c0 08             	add    eax,0x8
c0025a8e:	01 c0                	add    eax,eax
c0025a90:	40                   	inc    eax
c0025a91:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025a94:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025a97:	50                   	push   eax
c0025a98:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025a9b:	e8 60 fe ff ff       	call   c0025900 <IOAPIC::read(int)>
c0025aa0:	83 c4 08             	add    esp,0x8
c0025aa3:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0025aa6:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0025aad:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0025ab0:	c1 e0 18             	shl    eax,0x18
c0025ab3:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0025ab6:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025ab9:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025abc:	52                   	push   edx
c0025abd:	50                   	push   eax
c0025abe:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ac1:	e8 58 ff ff ff       	call   c0025a1e <IOAPIC::write(int, int)>
c0025ac6:	83 c4 0c             	add    esp,0xc
c0025ac9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025acc:	50                   	push   eax
c0025acd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ad0:	e8 2b fe ff ff       	call   c0025900 <IOAPIC::read(int)>
c0025ad5:	83 c4 08             	add    esp,0x8
c0025ad8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025adb:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0025ae2:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0025ae9:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0025af0:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025af4:	74 09                	je     c0025aff <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0025af6:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0025afd:	eb 07                	jmp    c0025b06 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0025aff:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0025b06:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0025b0a:	74 09                	je     c0025b15 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0025b0c:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0025b13:	eb 07                	jmp    c0025b1c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0025b15:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0025b1c:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0025b23:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0025b27:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0025b2a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0025b2d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025b30:	52                   	push   edx
c0025b31:	50                   	push   eax
c0025b32:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025b35:	e8 e4 fe ff ff       	call   c0025a1e <IOAPIC::write(int, int)>
c0025b3a:	83 c4 0c             	add    esp,0xc
c0025b3d:	90                   	nop
c0025b3e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0025b41:	c9                   	leave  
c0025b42:	c3                   	ret    
c0025b43:	90                   	nop

c0025b44 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0025b44:	55                   	push   ebp
c0025b45:	89 e5                	mov    ebp,esp
c0025b47:	57                   	push   edi
c0025b48:	56                   	push   esi
c0025b49:	53                   	push   ebx
c0025b4a:	83 ec 2c             	sub    esp,0x2c
c0025b4d:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025b50:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025b53:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025b57:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0025b5b:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025b5f:	74 5a                	je     c0025bbb <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025b61:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0025b65:	7f 44                	jg     c0025bab <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0025b67:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b6a:	05 a0 d4 02 c0       	add    eax,0xc002d4a0
c0025b6f:	8a 00                	mov    al,BYTE PTR [eax]
c0025b71:	0f b6 c0             	movzx  eax,al
c0025b74:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025b77:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b7a:	66 8b 84 00 c0 0b 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf440]
c0025b82:	0f b7 c0             	movzx  eax,ax
c0025b85:	83 e0 02             	and    eax,0x2
c0025b88:	85 c0                	test   eax,eax
c0025b8a:	74 04                	je     c0025b90 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0025b8c:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0025b90:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b93:	66 8b 84 00 c0 0b 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf440]
c0025b9b:	0f b7 c0             	movzx  eax,ax
c0025b9e:	83 e0 08             	and    eax,0x8
c0025ba1:	85 c0                	test   eax,eax
c0025ba3:	74 16                	je     c0025bbb <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025ba5:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025ba9:	eb 10                	jmp    c0025bbb <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025bab:	83 ec 0c             	sub    esp,0xc
c0025bae:	68 74 cf 02 c0       	push   0xc002cf74
c0025bb3:	e8 bb 48 ff ff       	call   c001a473 <Krnl::panic(char const*)>
c0025bb8:	83 c4 10             	add    esp,0x10
c0025bbb:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0025bbf:	a1 c0 25 03 c0       	mov    eax,ds:0xc00325c0
c0025bc4:	83 ec 08             	sub    esp,0x8
c0025bc7:	50                   	push   eax
c0025bc8:	68 ac cf 02 c0       	push   0xc002cfac
c0025bcd:	e8 c6 d1 fe ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0025bd2:	83 c4 10             	add    esp,0x10
c0025bd5:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0025bdc:	a1 c0 25 03 c0       	mov    eax,ds:0xc00325c0
c0025be1:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0025be4:	7d 67                	jge    c0025c4d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025be6:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025be9:	8b 04 85 e0 25 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcda20]
c0025bf0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025bf3:	83 ec 08             	sub    esp,0x8
c0025bf6:	52                   	push   edx
c0025bf7:	50                   	push   eax
c0025bf8:	e8 d1 fc ff ff       	call   c00258ce <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0025bfd:	83 c4 10             	add    esp,0x10
c0025c00:	84 c0                	test   al,al
c0025c02:	74 44                	je     c0025c48 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0025c04:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025c07:	8b 1c 85 e0 25 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffcda20]
c0025c0e:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0025c12:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025c15:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0025c19:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025c1c:	83 c0 20             	add    eax,0x20
c0025c1f:	0f b6 f0             	movzx  esi,al
c0025c22:	b8 00 00 00 00       	mov    eax,0x0
c0025c27:	99                   	cdq    
c0025c28:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025c2b:	0f b6 c9             	movzx  ecx,cl
c0025c2e:	83 ec 04             	sub    esp,0x4
c0025c31:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0025c34:	57                   	push   edi
c0025c35:	56                   	push   esi
c0025c36:	52                   	push   edx
c0025c37:	50                   	push   eax
c0025c38:	51                   	push   ecx
c0025c39:	53                   	push   ebx
c0025c3a:	e8 0b fe ff ff       	call   c0025a4a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0025c3f:	83 c4 20             	add    esp,0x20
c0025c42:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0025c46:	eb 05                	jmp    c0025c4d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025c48:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0025c4b:	eb 8f                	jmp    c0025bdc <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0025c4d:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0025c50:	83 f0 01             	xor    eax,0x1
c0025c53:	84 c0                	test   al,al
c0025c55:	74 10                	je     c0025c67 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0025c57:	83 ec 0c             	sub    esp,0xc
c0025c5a:	68 c3 cf 02 c0       	push   0xc002cfc3
c0025c5f:	e8 0f 48 ff ff       	call   c001a473 <Krnl::panic(char const*)>
c0025c64:	83 c4 10             	add    esp,0x10
c0025c67:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0025c6b:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0025c72:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0025c76:	7f 65                	jg     c0025cdd <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0025c78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c7b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025c7e:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025c85:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025c88:	01 ca                	add    edx,ecx
c0025c8a:	83 c2 54             	add    edx,0x54
c0025c8d:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0025c91:	85 c0                	test   eax,eax
c0025c93:	75 43                	jne    c0025cd8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0025c95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c98:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025c9b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025ca2:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025ca5:	01 ca                	add    edx,ecx
c0025ca7:	8d 4a 54             	lea    ecx,[edx+0x54]
c0025caa:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0025cad:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025cb1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025cb4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025cb7:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025cbe:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025cc1:	01 ca                	add    edx,ecx
c0025cc3:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0025cc9:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0025ccc:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025cd0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025cd3:	83 e8 20             	sub    eax,0x20
c0025cd6:	eb 1a                	jmp    c0025cf2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0025cd8:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0025cdb:	eb 95                	jmp    c0025c72 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0025cdd:	83 ec 0c             	sub    esp,0xc
c0025ce0:	68 d0 cf 02 c0       	push   0xc002cfd0
c0025ce5:	e8 89 47 ff ff       	call   c001a473 <Krnl::panic(char const*)>
c0025cea:	83 c4 10             	add    esp,0x10
c0025ced:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025cf2:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025cf5:	5b                   	pop    ebx
c0025cf6:	5e                   	pop    esi
c0025cf7:	5f                   	pop    edi
c0025cf8:	5d                   	pop    ebp
c0025cf9:	c3                   	ret    

c0025cfa <PIC::disable()>:
c0025cfa:	55                   	push   ebp
c0025cfb:	89 e5                	mov    ebp,esp
c0025cfd:	83 ec 10             	sub    esp,0x10
c0025d00:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0025d06:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0025d0a:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025d0d:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025d11:	ee                   	out    dx,al
c0025d12:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0025d18:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0025d1c:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025d1f:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0025d23:	ee                   	out    dx,al
c0025d24:	90                   	nop
c0025d25:	c9                   	leave  
c0025d26:	c3                   	ret    
c0025d27:	90                   	nop

c0025d28 <PIC::close(int, int, void*)>:
c0025d28:	55                   	push   ebp
c0025d29:	89 e5                	mov    ebp,esp
c0025d2b:	83 ec 08             	sub    esp,0x8
c0025d2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025d31:	8b 00                	mov    eax,DWORD PTR [eax]
c0025d33:	83 c0 3c             	add    eax,0x3c
c0025d36:	8b 00                	mov    eax,DWORD PTR [eax]
c0025d38:	83 ec 0c             	sub    esp,0xc
c0025d3b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d3e:	ff d0                	call   eax
c0025d40:	83 c4 10             	add    esp,0x10
c0025d43:	b8 00 00 00 00       	mov    eax,0x0
c0025d48:	c9                   	leave  
c0025d49:	c3                   	ret    

c0025d4a <PIC::PIC()>:
c0025d4a:	83 ec 0c             	sub    esp,0xc
c0025d4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d51:	83 ec 08             	sub    esp,0x8
c0025d54:	68 7c d0 02 c0       	push   0xc002d07c
c0025d59:	50                   	push   eax
c0025d5a:	e8 bb ed fe ff       	call   c0014b1a <InterruptController::InterruptController(char const*)>
c0025d5f:	83 c4 10             	add    esp,0x10
c0025d62:	ba a8 d0 02 c0       	mov    edx,0xc002d0a8
c0025d67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d6b:	89 10                	mov    DWORD PTR [eax],edx
c0025d6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d71:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025d77:	0f b6 d0             	movzx  edx,al
c0025d7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d7e:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0025d85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d89:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025d8f:	0f b6 d0             	movzx  edx,al
c0025d92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d96:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025d9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d9f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025da5:	8d 50 01             	lea    edx,[eax+0x1]
c0025da8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025dac:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025db2:	0f b6 d0             	movzx  edx,al
c0025db5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025db9:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025dbd:	83 e1 3f             	and    ecx,0x3f
c0025dc0:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025dc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025dc8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025dce:	0f b6 d0             	movzx  edx,al
c0025dd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025dd5:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0025ddc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025de0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025de6:	0f b6 d0             	movzx  edx,al
c0025de9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ded:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025df2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025df6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025dfc:	8d 50 01             	lea    edx,[eax+0x1]
c0025dff:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025e03:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025e09:	0f b6 d0             	movzx  edx,al
c0025e0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e10:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025e14:	83 e1 3f             	and    ecx,0x3f
c0025e17:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025e1b:	90                   	nop
c0025e1c:	83 c4 0c             	add    esp,0xc
c0025e1f:	c3                   	ret    

c0025e20 <PIC::ioWait()>:
c0025e20:	eb 00                	jmp    c0025e22 <PIC::ioWait()+0x2>
c0025e22:	eb 00                	jmp    c0025e24 <PIC::ioWait()+0x4>
c0025e24:	90                   	nop
c0025e25:	c3                   	ret    

c0025e26 <PIC::getIRQReg(int)>:
c0025e26:	55                   	push   ebp
c0025e27:	89 e5                	mov    ebp,esp
c0025e29:	83 ec 10             	sub    esp,0x10
c0025e2c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025e2f:	0f b6 c0             	movzx  eax,al
c0025e32:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025e38:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0025e3b:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025e3e:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025e42:	ee                   	out    dx,al
c0025e43:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025e46:	0f b6 c0             	movzx  eax,al
c0025e49:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025e4f:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0025e52:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025e55:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025e59:	ee                   	out    dx,al
c0025e5a:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0025e60:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0025e64:	89 c2                	mov    edx,eax
c0025e66:	ec                   	in     al,dx
c0025e67:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0025e6a:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025e6d:	0f b6 c0             	movzx  eax,al
c0025e70:	c1 e0 08             	shl    eax,0x8
c0025e73:	89 c1                	mov    ecx,eax
c0025e75:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0025e7b:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0025e7f:	89 c2                	mov    edx,eax
c0025e81:	ec                   	in     al,dx
c0025e82:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0025e85:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025e88:	0f b6 c0             	movzx  eax,al
c0025e8b:	09 c8                	or     eax,ecx
c0025e8d:	c9                   	leave  
c0025e8e:	c3                   	ret    
c0025e8f:	90                   	nop

c0025e90 <PIC::eoi(unsigned char)>:
c0025e90:	55                   	push   ebp
c0025e91:	89 e5                	mov    ebp,esp
c0025e93:	83 ec 14             	sub    esp,0x14
c0025e96:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025e99:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0025e9c:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025ea0:	75 1e                	jne    c0025ec0 <PIC::eoi(unsigned char)+0x30>
c0025ea2:	6a 0b                	push   0xb
c0025ea4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ea7:	e8 7a ff ff ff       	call   c0025e26 <PIC::getIRQReg(int)>
c0025eac:	83 c4 08             	add    esp,0x8
c0025eaf:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0025eb3:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0025eb7:	25 80 00 00 00       	and    eax,0x80
c0025ebc:	85 c0                	test   eax,eax
c0025ebe:	74 5f                	je     c0025f1f <PIC::eoi(unsigned char)+0x8f>
c0025ec0:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0025ec4:	75 2d                	jne    c0025ef3 <PIC::eoi(unsigned char)+0x63>
c0025ec6:	6a 0b                	push   0xb
c0025ec8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ecb:	e8 56 ff ff ff       	call   c0025e26 <PIC::getIRQReg(int)>
c0025ed0:	83 c4 08             	add    esp,0x8
c0025ed3:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0025ed7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025eda:	66 85 c0             	test   ax,ax
c0025edd:	78 14                	js     c0025ef3 <PIC::eoi(unsigned char)+0x63>
c0025edf:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0025ee5:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0025ee9:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025eec:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025ef0:	ee                   	out    dx,al
c0025ef1:	eb 2d                	jmp    c0025f20 <PIC::eoi(unsigned char)+0x90>
c0025ef3:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025ef7:	76 12                	jbe    c0025f0b <PIC::eoi(unsigned char)+0x7b>
c0025ef9:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025eff:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0025f03:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025f06:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025f0a:	ee                   	out    dx,al
c0025f0b:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025f11:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0025f15:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025f18:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025f1c:	ee                   	out    dx,al
c0025f1d:	eb 01                	jmp    c0025f20 <PIC::eoi(unsigned char)+0x90>
c0025f1f:	90                   	nop
c0025f20:	c9                   	leave  
c0025f21:	c3                   	ret    

c0025f22 <PIC::remap()>:
c0025f22:	55                   	push   ebp
c0025f23:	89 e5                	mov    ebp,esp
c0025f25:	83 ec 48             	sub    esp,0x48
c0025f28:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0025f2f:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0025f36:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0025f3c:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0025f3f:	89 c2                	mov    edx,eax
c0025f41:	ec                   	in     al,dx
c0025f42:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0025f45:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0025f48:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0025f4b:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0025f51:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0025f54:	89 c2                	mov    edx,eax
c0025f56:	ec                   	in     al,dx
c0025f57:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0025f5a:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0025f5d:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0025f60:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0025f66:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0025f6a:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0025f6d:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0025f70:	ee                   	out    dx,al
c0025f71:	83 ec 0c             	sub    esp,0xc
c0025f74:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f77:	e8 a4 fe ff ff       	call   c0025e20 <PIC::ioWait()>
c0025f7c:	83 c4 10             	add    esp,0x10
c0025f7f:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0025f85:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0025f89:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0025f8c:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0025f8f:	ee                   	out    dx,al
c0025f90:	83 ec 0c             	sub    esp,0xc
c0025f93:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f96:	e8 85 fe ff ff       	call   c0025e20 <PIC::ioWait()>
c0025f9b:	83 c4 10             	add    esp,0x10
c0025f9e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025fa1:	0f b6 c0             	movzx  eax,al
c0025fa4:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0025faa:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0025fad:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0025fb0:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0025fb3:	ee                   	out    dx,al
c0025fb4:	83 ec 0c             	sub    esp,0xc
c0025fb7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025fba:	e8 61 fe ff ff       	call   c0025e20 <PIC::ioWait()>
c0025fbf:	83 c4 10             	add    esp,0x10
c0025fc2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025fc5:	0f b6 c0             	movzx  eax,al
c0025fc8:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0025fce:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0025fd1:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0025fd4:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0025fd7:	ee                   	out    dx,al
c0025fd8:	83 ec 0c             	sub    esp,0xc
c0025fdb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025fde:	e8 3d fe ff ff       	call   c0025e20 <PIC::ioWait()>
c0025fe3:	83 c4 10             	add    esp,0x10
c0025fe6:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0025fec:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0025ff0:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0025ff3:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0025ff6:	ee                   	out    dx,al
c0025ff7:	83 ec 0c             	sub    esp,0xc
c0025ffa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ffd:	e8 1e fe ff ff       	call   c0025e20 <PIC::ioWait()>
c0026002:	83 c4 10             	add    esp,0x10
c0026005:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c002600b:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c002600f:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0026012:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026015:	ee                   	out    dx,al
c0026016:	83 ec 0c             	sub    esp,0xc
c0026019:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002601c:	e8 ff fd ff ff       	call   c0025e20 <PIC::ioWait()>
c0026021:	83 c4 10             	add    esp,0x10
c0026024:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c002602a:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c002602e:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0026031:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0026034:	ee                   	out    dx,al
c0026035:	83 ec 0c             	sub    esp,0xc
c0026038:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002603b:	e8 e0 fd ff ff       	call   c0025e20 <PIC::ioWait()>
c0026040:	83 c4 10             	add    esp,0x10
c0026043:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0026049:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c002604d:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0026050:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026053:	ee                   	out    dx,al
c0026054:	83 ec 0c             	sub    esp,0xc
c0026057:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002605a:	e8 c1 fd ff ff       	call   c0025e20 <PIC::ioWait()>
c002605f:	83 c4 10             	add    esp,0x10
c0026062:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0026066:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c002606c:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c002606f:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0026072:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0026075:	ee                   	out    dx,al
c0026076:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c002607a:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0026080:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0026083:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0026086:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0026089:	ee                   	out    dx,al
c002608a:	90                   	nop
c002608b:	c9                   	leave  
c002608c:	c3                   	ret    
c002608d:	90                   	nop

c002608e <PIC::open(int, int, void*)>:
c002608e:	55                   	push   ebp
c002608f:	89 e5                	mov    ebp,esp
c0026091:	83 ec 18             	sub    esp,0x18
c0026094:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c002609a:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c002609e:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00260a1:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00260a5:	ee                   	out    dx,al
c00260a6:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c00260ac:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c00260b0:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00260b3:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00260b7:	ee                   	out    dx,al
c00260b8:	83 ec 0c             	sub    esp,0xc
c00260bb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260be:	e8 5f fe ff ff       	call   c0025f22 <PIC::remap()>
c00260c3:	83 c4 10             	add    esp,0x10
c00260c6:	b8 00 00 00 00       	mov    eax,0x0
c00260cb:	c9                   	leave  
c00260cc:	c3                   	ret    
c00260cd:	90                   	nop

c00260ce <APICTimer::close(int, int, void*)>:
c00260ce:	b8 00 00 00 00       	mov    eax,0x0
c00260d3:	c3                   	ret    

c00260d4 <apicTimerHandler(regs*, void*)>:
c00260d4:	83 ec 0c             	sub    esp,0xc
c00260d7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00260db:	8b 00                	mov    eax,DWORD PTR [eax]
c00260dd:	99                   	cdq    
c00260de:	52                   	push   edx
c00260df:	50                   	push   eax
c00260e0:	6a 00                	push   0x0
c00260e2:	68 00 ca 9a 3b       	push   0x3b9aca00
c00260e7:	e8 90 07 00 00       	call   c002687c <__udivdi3>
c00260ec:	83 c4 10             	add    esp,0x10
c00260ef:	83 ec 08             	sub    esp,0x8
c00260f2:	52                   	push   edx
c00260f3:	50                   	push   eax
c00260f4:	e8 a2 0a ff ff       	call   c0016b9b <timerHandler(unsigned long long)>
c00260f9:	83 c4 10             	add    esp,0x10
c00260fc:	90                   	nop
c00260fd:	83 c4 0c             	add    esp,0xc
c0026100:	c3                   	ret    
c0026101:	90                   	nop

c0026102 <APICTimer::write(int)>:
c0026102:	53                   	push   ebx
c0026103:	83 ec 28             	sub    esp,0x28
c0026106:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002610a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002610e:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026114:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c0026119:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002611f:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026125:	83 ec 0c             	sub    esp,0xc
c0026128:	50                   	push   eax
c0026129:	e8 de f4 ff ff       	call   c002560c <APIC::getBase()>
c002612e:	83 c4 10             	add    esp,0x10
c0026131:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0026135:	a1 d0 e8 02 c0       	mov    eax,ds:0xc002e8d0
c002613a:	8b 15 d4 e8 02 c0    	mov    edx,DWORD PTR ds:0xc002e8d4
c0026140:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0026144:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0026148:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002614c:	05 e0 03 00 00       	add    eax,0x3e0
c0026151:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026157:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002615b:	05 80 03 00 00       	add    eax,0x380
c0026160:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0026166:	fb                   	sti    
c0026167:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002616b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002616f:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0026174:	83 d2 00             	adc    edx,0x0
c0026177:	89 c1                	mov    ecx,eax
c0026179:	89 d3                	mov    ebx,edx
c002617b:	a1 d0 e8 02 c0       	mov    eax,ds:0xc002e8d0
c0026180:	8b 15 d4 e8 02 c0    	mov    edx,DWORD PTR ds:0xc002e8d4
c0026186:	39 c8                	cmp    eax,ecx
c0026188:	89 d0                	mov    eax,edx
c002618a:	19 d8                	sbb    eax,ebx
c002618c:	73 02                	jae    c0026190 <APICTimer::write(int)+0x8e>
c002618e:	eb d7                	jmp    c0026167 <APICTimer::write(int)+0x65>
c0026190:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026194:	05 20 03 00 00       	add    eax,0x320
c0026199:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c002619f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00261a3:	05 90 03 00 00       	add    eax,0x390
c00261a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00261aa:	f7 d0                	not    eax
c00261ac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00261b0:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00261b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00261b8:	ba 00 00 00 00       	mov    edx,0x0
c00261bd:	f7 f3                	div    ebx
c00261bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00261c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00261c7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00261cd:	0d 00 00 02 00       	or     eax,0x20000
c00261d2:	89 c2                	mov    edx,eax
c00261d4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00261d8:	05 20 03 00 00       	add    eax,0x320
c00261dd:	89 10                	mov    DWORD PTR [eax],edx
c00261df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00261e3:	05 e0 03 00 00       	add    eax,0x3e0
c00261e8:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c00261ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00261f2:	05 80 03 00 00       	add    eax,0x380
c00261f7:	89 c2                	mov    edx,eax
c00261f9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00261fd:	89 02                	mov    DWORD PTR [edx],eax
c00261ff:	90                   	nop
c0026200:	83 c4 28             	add    esp,0x28
c0026203:	5b                   	pop    ebx
c0026204:	c3                   	ret    
c0026205:	90                   	nop

c0026206 <APICTimer::open(int, int, void*)>:
c0026206:	57                   	push   edi
c0026207:	56                   	push   esi
c0026208:	53                   	push   ebx
c0026209:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002620d:	8b 00                	mov    eax,DWORD PTR [eax]
c002620f:	83 c0 24             	add    eax,0x24
c0026212:	8b 00                	mov    eax,DWORD PTR [eax]
c0026214:	83 ec 08             	sub    esp,0x8
c0026217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002621b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002621f:	ff d0                	call   eax
c0026221:	83 c4 10             	add    esp,0x10
c0026224:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c0026229:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002622f:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026235:	83 ec 0c             	sub    esp,0xc
c0026238:	50                   	push   eax
c0026239:	e8 ce f3 ff ff       	call   c002560c <APIC::getBase()>
c002623e:	83 c4 10             	add    esp,0x10
c0026241:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0026247:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002624b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026251:	0f b6 f8             	movzx  edi,al
c0026254:	89 d0                	mov    eax,edx
c0026256:	ba 00 00 00 00       	mov    edx,0x0
c002625b:	89 c1                	mov    ecx,eax
c002625d:	80 e5 ff             	and    ch,0xff
c0026260:	89 cb                	mov    ebx,ecx
c0026262:	0f b6 f2             	movzx  esi,dl
c0026265:	89 d8                	mov    eax,ebx
c0026267:	89 f2                	mov    edx,esi
c0026269:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002626d:	8d 5f 08             	lea    ebx,[edi+0x8]
c0026270:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0026274:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0026278:	83 e0 00             	and    eax,0x0
c002627b:	09 d0                	or     eax,edx
c002627d:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0026281:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026285:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002628b:	8d 50 01             	lea    edx,[eax+0x1]
c002628e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026292:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0026298:	0f b6 d0             	movzx  edx,al
c002629b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002629f:	83 c2 08             	add    edx,0x8
c00262a2:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00262a6:	0f b6 c9             	movzx  ecx,cl
c00262a9:	81 c9 00 00 01 00    	or     ecx,0x10000
c00262af:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00262b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262b7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00262bb:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00262c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262c5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00262c9:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c00262cf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00262d3:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00262d9:	83 ec 0c             	sub    esp,0xc
c00262dc:	51                   	push   ecx
c00262dd:	6a 01                	push   0x1
c00262df:	68 d4 60 02 c0       	push   0xc00260d4
c00262e4:	52                   	push   edx
c00262e5:	50                   	push   eax
c00262e6:	e8 57 de fe ff       	call   c0014142 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00262eb:	83 c4 20             	add    esp,0x20
c00262ee:	89 c2                	mov    edx,eax
c00262f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262f4:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00262fa:	b8 00 00 00 00       	mov    eax,0x0
c00262ff:	5b                   	pop    ebx
c0026300:	5e                   	pop    esi
c0026301:	5f                   	pop    edi
c0026302:	c3                   	ret    
c0026303:	90                   	nop

c0026304 <APICTimer::APICTimer()>:
c0026304:	83 ec 0c             	sub    esp,0xc
c0026307:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002630b:	83 ec 08             	sub    esp,0x8
c002630e:	68 e8 d0 02 c0       	push   0xc002d0e8
c0026313:	50                   	push   eax
c0026314:	e8 f3 07 ff ff       	call   c0016b0c <Timer::Timer(char const*)>
c0026319:	83 c4 10             	add    esp,0x10
c002631c:	ba fc d0 02 c0       	mov    edx,0xc002d0fc
c0026321:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026325:	89 10                	mov    DWORD PTR [eax],edx
c0026327:	90                   	nop
c0026328:	83 c4 0c             	add    esp,0xc
c002632b:	c3                   	ret    

c002632c <PIT::write(int)>:
c002632c:	83 ec 10             	sub    esp,0x10
c002632f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026333:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026337:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002633d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0026341:	a3 04 26 03 c0       	mov    ds:0xc0032604,eax
c0026346:	b8 dc 34 12 00       	mov    eax,0x1234dc
c002634b:	99                   	cdq    
c002634c:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0026350:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026354:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c002635b:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0026360:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0026364:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0026369:	ee                   	out    dx,al
c002636a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002636e:	0f b6 c0             	movzx  eax,al
c0026371:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0026378:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c002637c:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0026380:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0026385:	ee                   	out    dx,al
c0026386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002638a:	c1 f8 08             	sar    eax,0x8
c002638d:	0f b6 c0             	movzx  eax,al
c0026390:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0026397:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002639b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002639f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00263a4:	ee                   	out    dx,al
c00263a5:	90                   	nop
c00263a6:	83 c4 10             	add    esp,0x10
c00263a9:	c3                   	ret    

c00263aa <pitHandler(regs*, void*)>:
c00263aa:	83 ec 0c             	sub    esp,0xc
c00263ad:	a1 04 26 03 c0       	mov    eax,ds:0xc0032604
c00263b2:	99                   	cdq    
c00263b3:	52                   	push   edx
c00263b4:	50                   	push   eax
c00263b5:	6a 00                	push   0x0
c00263b7:	68 00 ca 9a 3b       	push   0x3b9aca00
c00263bc:	e8 bb 04 00 00       	call   c002687c <__udivdi3>
c00263c1:	83 c4 10             	add    esp,0x10
c00263c4:	83 ec 08             	sub    esp,0x8
c00263c7:	52                   	push   edx
c00263c8:	50                   	push   eax
c00263c9:	e8 cd 07 ff ff       	call   c0016b9b <timerHandler(unsigned long long)>
c00263ce:	83 c4 10             	add    esp,0x10
c00263d1:	90                   	nop
c00263d2:	83 c4 0c             	add    esp,0xc
c00263d5:	c3                   	ret    

c00263d6 <PIT::open(int, int, void*)>:
c00263d6:	83 ec 0c             	sub    esp,0xc
c00263d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263dd:	8b 00                	mov    eax,DWORD PTR [eax]
c00263df:	83 c0 24             	add    eax,0x24
c00263e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00263e4:	83 ec 08             	sub    esp,0x8
c00263e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00263eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00263ef:	ff d0                	call   eax
c00263f1:	83 c4 10             	add    esp,0x10
c00263f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263f8:	83 ec 0c             	sub    esp,0xc
c00263fb:	6a 00                	push   0x0
c00263fd:	6a 01                	push   0x1
c00263ff:	68 aa 63 02 c0       	push   0xc00263aa
c0026404:	6a 00                	push   0x0
c0026406:	50                   	push   eax
c0026407:	e8 36 dd fe ff       	call   c0014142 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002640c:	83 c4 20             	add    esp,0x20
c002640f:	89 c2                	mov    edx,eax
c0026411:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026415:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002641b:	b8 00 00 00 00       	mov    eax,0x0
c0026420:	83 c4 0c             	add    esp,0xc
c0026423:	c3                   	ret    

c0026424 <PIT::close(int, int, void*)>:
c0026424:	83 ec 0c             	sub    esp,0xc
c0026427:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002642b:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0026435:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026439:	6a 01                	push   0x1
c002643b:	68 aa 63 02 c0       	push   0xc00263aa
c0026440:	6a 00                	push   0x0
c0026442:	50                   	push   eax
c0026443:	e8 38 dd fe ff       	call   c0014180 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0026448:	83 c4 10             	add    esp,0x10
c002644b:	b8 00 00 00 00       	mov    eax,0x0
c0026450:	83 c4 0c             	add    esp,0xc
c0026453:	c3                   	ret    

c0026454 <PIT::PIT()>:
c0026454:	83 ec 0c             	sub    esp,0xc
c0026457:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002645b:	83 ec 08             	sub    esp,0x8
c002645e:	68 24 d1 02 c0       	push   0xc002d124
c0026463:	50                   	push   eax
c0026464:	e8 a3 06 ff ff       	call   c0016b0c <Timer::Timer(char const*)>
c0026469:	83 c4 10             	add    esp,0x10
c002646c:	ba 4c d1 02 c0       	mov    edx,0xc002d14c
c0026471:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026475:	89 10                	mov    DWORD PTR [eax],edx
c0026477:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002647b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026481:	0f b6 d0             	movzx  edx,al
c0026484:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026488:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c002648f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026493:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026499:	0f b6 d0             	movzx  edx,al
c002649c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264a0:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c00264a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264a9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00264af:	8d 50 01             	lea    edx,[eax+0x1]
c00264b2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00264b6:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00264bc:	0f b6 d0             	movzx  edx,al
c00264bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264c3:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00264c7:	83 e1 3f             	and    ecx,0x3f
c00264ca:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00264ce:	90                   	nop
c00264cf:	83 c4 0c             	add    esp,0xc
c00264d2:	c3                   	ret    
c00264d3:	66 90                	xchg   ax,ax
c00264d5:	66 90                	xchg   ax,ax
c00264d7:	66 90                	xchg   ax,ax
c00264d9:	66 90                	xchg   ax,ax
c00264db:	66 90                	xchg   ax,ax
c00264dd:	66 90                	xchg   ax,ax
c00264df:	90                   	nop

c00264e0 <avxDetect>:
c00264e0:	b8 00 00 00 00       	mov    eax,0x0
c00264e5:	c3                   	ret    

c00264e6 <avxSave>:
c00264e6:	c3                   	ret    

c00264e7 <avxLoad>:
c00264e7:	c3                   	ret    

c00264e8 <avxInit>:
c00264e8:	c3                   	ret    

c00264e9 <avxClose>:
c00264e9:	c3                   	ret    

c00264ea <wouldSheSayYes>:
c00264ea:	c3                   	ret    
c00264eb:	49                   	dec    ecx
c00264ec:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c00264f0:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c00264f4:	75 20                	jne    c0026516 <sseDetect.noSSE+0x1>
c00264f6:	4e                   	dec    esi
c00264f7:	79 61                	jns    c002655a <x87Detect+0x14>
c00264f9:	68 2e 2e 2e 00       	push   0x2e2e2e
c00264fe:	66 90                	xchg   ax,ax

c0026500 <absolutelyNoChanceInHell>:
c0026500:	b8 01 00 00 00       	mov    eax,0x1
c0026505:	0f a2                	cpuid  
c0026507:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002650d:	74 06                	je     c0026515 <sseDetect.noSSE>
c002650f:	b8 01 00 00 00       	mov    eax,0x1
c0026514:	c3                   	ret    

c0026515 <sseDetect.noSSE>:
c0026515:	31 c0                	xor    eax,eax
c0026517:	c3                   	ret    

c0026518 <sseSave>:
c0026518:	0f ae 44 24 08       	fxsave [esp+0x8]
c002651d:	c3                   	ret    

c002651e <sseLoad>:
c002651e:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c0026523:	c3                   	ret    

c0026524 <sseInit>:
c0026524:	e8 43 00 00 00       	call   c002656c <x87Init>
c0026529:	0f 20 e0             	mov    eax,cr4
c002652c:	66 0d 00 06          	or     ax,0x600
c0026530:	0f 22 e0             	mov    cr4,eax
c0026533:	c3                   	ret    

c0026534 <sseClose>:
c0026534:	c3                   	ret    
c0026535:	66 90                	xchg   ax,ax
c0026537:	66 90                	xchg   ax,ax
c0026539:	66 90                	xchg   ax,ax
c002653b:	66 90                	xchg   ax,ax
c002653d:	66 90                	xchg   ax,ax
c002653f:	90                   	nop

c0026540 <value_37F>:
c0026540:	7f 03                	jg     c0026545 <value_37A+0x1>

c0026542 <value_37E>:
c0026542:	7e 03                	jle    c0026547 <x87Detect+0x1>

c0026544 <value_37A>:
c0026544:	7a 03                	jp     c0026549 <x87Detect+0x3>

c0026546 <x87Detect>:
c0026546:	b8 01 00 00 00       	mov    eax,0x1
c002654b:	0f a2                	cpuid  
c002654d:	f7 c2 01 00 00 00    	test   edx,0x1
c0026553:	74 06                	je     c002655b <x87Detect.nox87>
c0026555:	b8 01 00 00 00       	mov    eax,0x1
c002655a:	c3                   	ret    

c002655b <x87Detect.nox87>:
c002655b:	b8 00 00 00 00       	mov    eax,0x0
c0026560:	c3                   	ret    

c0026561 <x87Save>:
c0026561:	9b dd 74 24 08       	fsave  [esp+0x8]
c0026566:	c3                   	ret    

c0026567 <x87Load>:
c0026567:	dd 64 24 08          	frstor [esp+0x8]
c002656b:	c3                   	ret    

c002656c <x87Init>:
c002656c:	9b db e3             	finit  
c002656f:	0f 20 c0             	mov    eax,cr0
c0026572:	66 25 fb ff          	and    ax,0xfffb
c0026576:	66 0d 22 00          	or     ax,0x22
c002657a:	0f 22 c0             	mov    cr0,eax
c002657d:	0f 06                	clts   
c002657f:	d9 2d 44 65 02 c0    	fldcw  WORD PTR ds:0xc0026544
c0026585:	c3                   	ret    

c0026586 <x87Close>:
c0026586:	c3                   	ret    
c0026587:	90                   	nop

c0026588 <__do_global_ctors_aux>:
c0026588:	a1 cc 90 02 c0       	mov    eax,ds:0xc00290cc
c002658d:	83 f8 ff             	cmp    eax,0xffffffff
c0026590:	74 1a                	je     c00265ac <__do_global_ctors_aux+0x24>
c0026592:	55                   	push   ebp
c0026593:	89 e5                	mov    ebp,esp
c0026595:	53                   	push   ebx
c0026596:	52                   	push   edx
c0026597:	bb cc 90 02 c0       	mov    ebx,0xc00290cc
c002659c:	ff d0                	call   eax
c002659e:	83 eb 04             	sub    ebx,0x4
c00265a1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00265a3:	83 f8 ff             	cmp    eax,0xffffffff
c00265a6:	75 f4                	jne    c002659c <__do_global_ctors_aux+0x14>
c00265a8:	58                   	pop    eax
c00265a9:	5b                   	pop    ebx
c00265aa:	5d                   	pop    ebp
c00265ab:	c3                   	ret    
c00265ac:	c3                   	ret    
c00265ad:	66 90                	xchg   ax,ax
c00265af:	90                   	nop

c00265b0 <__divdi3>:
c00265b0:	55                   	push   ebp
c00265b1:	57                   	push   edi
c00265b2:	56                   	push   esi
c00265b3:	53                   	push   ebx
c00265b4:	83 ec 1c             	sub    esp,0x1c
c00265b7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00265bb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00265bf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00265c2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00265c6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00265ca:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00265ce:	85 db                	test   ebx,ebx
c00265d0:	0f 88 8e 00 00 00    	js     c0026664 <__divdi3+0xb4>
c00265d6:	89 dd                	mov    ebp,ebx
c00265d8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00265e0:	89 d3                	mov    ebx,edx
c00265e2:	85 d2                	test   edx,edx
c00265e4:	79 0d                	jns    c00265f3 <__divdi3+0x43>
c00265e6:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c00265ea:	f7 d8                	neg    eax
c00265ec:	83 d2 00             	adc    edx,0x0
c00265ef:	f7 da                	neg    edx
c00265f1:	89 d3                	mov    ebx,edx
c00265f3:	89 c7                	mov    edi,eax
c00265f5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00265f8:	85 db                	test   ebx,ebx
c00265fa:	75 48                	jne    c0026644 <__divdi3+0x94>
c00265fc:	39 ef                	cmp    edi,ebp
c00265fe:	76 24                	jbe    c0026624 <__divdi3+0x74>
c0026600:	89 ea                	mov    edx,ebp
c0026602:	f7 f7                	div    edi
c0026604:	89 c1                	mov    ecx,eax
c0026606:	31 f6                	xor    esi,esi
c0026608:	89 c8                	mov    eax,ecx
c002660a:	89 f2                	mov    edx,esi
c002660c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026610:	85 c9                	test   ecx,ecx
c0026612:	74 07                	je     c002661b <__divdi3+0x6b>
c0026614:	f7 d8                	neg    eax
c0026616:	83 d2 00             	adc    edx,0x0
c0026619:	f7 da                	neg    edx
c002661b:	83 c4 1c             	add    esp,0x1c
c002661e:	5b                   	pop    ebx
c002661f:	5e                   	pop    esi
c0026620:	5f                   	pop    edi
c0026621:	5d                   	pop    ebp
c0026622:	c3                   	ret    
c0026623:	90                   	nop
c0026624:	85 ff                	test   edi,edi
c0026626:	75 0b                	jne    c0026633 <__divdi3+0x83>
c0026628:	b8 01 00 00 00       	mov    eax,0x1
c002662d:	31 d2                	xor    edx,edx
c002662f:	f7 f3                	div    ebx
c0026631:	89 c7                	mov    edi,eax
c0026633:	31 d2                	xor    edx,edx
c0026635:	89 e8                	mov    eax,ebp
c0026637:	f7 f7                	div    edi
c0026639:	89 c6                	mov    esi,eax
c002663b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002663e:	f7 f7                	div    edi
c0026640:	89 c1                	mov    ecx,eax
c0026642:	eb c4                	jmp    c0026608 <__divdi3+0x58>
c0026644:	39 eb                	cmp    ebx,ebp
c0026646:	77 3c                	ja     c0026684 <__divdi3+0xd4>
c0026648:	0f bd f3             	bsr    esi,ebx
c002664b:	83 f6 1f             	xor    esi,0x1f
c002664e:	75 40                	jne    c0026690 <__divdi3+0xe0>
c0026650:	39 eb                	cmp    ebx,ebp
c0026652:	72 09                	jb     c002665d <__divdi3+0xad>
c0026654:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0026657:	0f 87 97 00 00 00    	ja     c00266f4 <__divdi3+0x144>
c002665d:	b9 01 00 00 00       	mov    ecx,0x1
c0026662:	eb a4                	jmp    c0026608 <__divdi3+0x58>
c0026664:	f7 d9                	neg    ecx
c0026666:	83 d3 00             	adc    ebx,0x0
c0026669:	f7 db                	neg    ebx
c002666b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002666e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026672:	89 dd                	mov    ebp,ebx
c0026674:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c002667c:	e9 5f ff ff ff       	jmp    c00265e0 <__divdi3+0x30>
c0026681:	8d 76 00             	lea    esi,[esi+0x0]
c0026684:	31 f6                	xor    esi,esi
c0026686:	31 c9                	xor    ecx,ecx
c0026688:	e9 7b ff ff ff       	jmp    c0026608 <__divdi3+0x58>
c002668d:	8d 76 00             	lea    esi,[esi+0x0]
c0026690:	b8 20 00 00 00       	mov    eax,0x20
c0026695:	29 f0                	sub    eax,esi
c0026697:	89 f1                	mov    ecx,esi
c0026699:	d3 e3                	shl    ebx,cl
c002669b:	89 fa                	mov    edx,edi
c002669d:	88 c1                	mov    cl,al
c002669f:	d3 ea                	shr    edx,cl
c00266a1:	09 da                	or     edx,ebx
c00266a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00266a7:	89 f1                	mov    ecx,esi
c00266a9:	d3 e7                	shl    edi,cl
c00266ab:	89 eb                	mov    ebx,ebp
c00266ad:	88 c1                	mov    cl,al
c00266af:	d3 eb                	shr    ebx,cl
c00266b1:	89 f1                	mov    ecx,esi
c00266b3:	d3 e5                	shl    ebp,cl
c00266b5:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00266b8:	88 c1                	mov    cl,al
c00266ba:	d3 ea                	shr    edx,cl
c00266bc:	09 d5                	or     ebp,edx
c00266be:	89 e8                	mov    eax,ebp
c00266c0:	89 da                	mov    edx,ebx
c00266c2:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c00266c6:	89 d3                	mov    ebx,edx
c00266c8:	89 c5                	mov    ebp,eax
c00266ca:	f7 e7                	mul    edi
c00266cc:	39 d3                	cmp    ebx,edx
c00266ce:	72 18                	jb     c00266e8 <__divdi3+0x138>
c00266d0:	74 0a                	je     c00266dc <__divdi3+0x12c>
c00266d2:	89 e9                	mov    ecx,ebp
c00266d4:	31 f6                	xor    esi,esi
c00266d6:	e9 2d ff ff ff       	jmp    c0026608 <__divdi3+0x58>
c00266db:	90                   	nop
c00266dc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00266df:	89 f1                	mov    ecx,esi
c00266e1:	d3 e7                	shl    edi,cl
c00266e3:	39 c7                	cmp    edi,eax
c00266e5:	73 eb                	jae    c00266d2 <__divdi3+0x122>
c00266e7:	90                   	nop
c00266e8:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00266eb:	31 f6                	xor    esi,esi
c00266ed:	e9 16 ff ff ff       	jmp    c0026608 <__divdi3+0x58>
c00266f2:	66 90                	xchg   ax,ax
c00266f4:	31 c9                	xor    ecx,ecx
c00266f6:	e9 0d ff ff ff       	jmp    c0026608 <__divdi3+0x58>
c00266fb:	90                   	nop

c00266fc <__moddi3>:
c00266fc:	55                   	push   ebp
c00266fd:	57                   	push   edi
c00266fe:	56                   	push   esi
c00266ff:	53                   	push   ebx
c0026700:	83 ec 2c             	sub    esp,0x2c
c0026703:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0026707:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c002670b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002670f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0026713:	85 db                	test   ebx,ebx
c0026715:	0f 88 85 00 00 00    	js     c00267a0 <__moddi3+0xa4>
c002671b:	89 de                	mov    esi,ebx
c002671d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0026725:	89 d7                	mov    edi,edx
c0026727:	85 d2                	test   edx,edx
c0026729:	79 09                	jns    c0026734 <__moddi3+0x38>
c002672b:	f7 d8                	neg    eax
c002672d:	83 d2 00             	adc    edx,0x0
c0026730:	f7 da                	neg    edx
c0026732:	89 d7                	mov    edi,edx
c0026734:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026738:	89 cd                	mov    ebp,ecx
c002673a:	85 ff                	test   edi,edi
c002673c:	75 52                	jne    c0026790 <__moddi3+0x94>
c002673e:	89 c3                	mov    ebx,eax
c0026740:	39 f0                	cmp    eax,esi
c0026742:	76 24                	jbe    c0026768 <__moddi3+0x6c>
c0026744:	89 c8                	mov    eax,ecx
c0026746:	89 f2                	mov    edx,esi
c0026748:	f7 f3                	div    ebx
c002674a:	89 d6                	mov    esi,edx
c002674c:	89 f0                	mov    eax,esi
c002674e:	31 d2                	xor    edx,edx
c0026750:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026754:	85 c9                	test   ecx,ecx
c0026756:	74 07                	je     c002675f <__moddi3+0x63>
c0026758:	f7 d8                	neg    eax
c002675a:	83 d2 00             	adc    edx,0x0
c002675d:	f7 da                	neg    edx
c002675f:	83 c4 2c             	add    esp,0x2c
c0026762:	5b                   	pop    ebx
c0026763:	5e                   	pop    esi
c0026764:	5f                   	pop    edi
c0026765:	5d                   	pop    ebp
c0026766:	c3                   	ret    
c0026767:	90                   	nop
c0026768:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002676c:	85 db                	test   ebx,ebx
c002676e:	75 0d                	jne    c002677d <__moddi3+0x81>
c0026770:	b8 01 00 00 00       	mov    eax,0x1
c0026775:	31 d2                	xor    edx,edx
c0026777:	f7 f7                	div    edi
c0026779:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002677d:	89 f0                	mov    eax,esi
c002677f:	31 d2                	xor    edx,edx
c0026781:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026785:	f7 f7                	div    edi
c0026787:	89 e8                	mov    eax,ebp
c0026789:	f7 f7                	div    edi
c002678b:	89 d6                	mov    esi,edx
c002678d:	eb bd                	jmp    c002674c <__moddi3+0x50>
c002678f:	90                   	nop
c0026790:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026794:	39 f7                	cmp    edi,esi
c0026796:	76 20                	jbe    c00267b8 <__moddi3+0xbc>
c0026798:	89 c8                	mov    eax,ecx
c002679a:	89 f2                	mov    edx,esi
c002679c:	eb b2                	jmp    c0026750 <__moddi3+0x54>
c002679e:	66 90                	xchg   ax,ax
c00267a0:	f7 d9                	neg    ecx
c00267a2:	83 d3 00             	adc    ebx,0x0
c00267a5:	f7 db                	neg    ebx
c00267a7:	89 de                	mov    esi,ebx
c00267a9:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c00267b1:	e9 6f ff ff ff       	jmp    c0026725 <__moddi3+0x29>
c00267b6:	66 90                	xchg   ax,ax
c00267b8:	0f bd c7             	bsr    eax,edi
c00267bb:	83 f0 1f             	xor    eax,0x1f
c00267be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00267c2:	75 24                	jne    c00267e8 <__moddi3+0xec>
c00267c4:	39 f7                	cmp    edi,esi
c00267c6:	72 06                	jb     c00267ce <__moddi3+0xd2>
c00267c8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00267cc:	77 0c                	ja     c00267da <__moddi3+0xde>
c00267ce:	89 e9                	mov    ecx,ebp
c00267d0:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00267d4:	19 fe                	sbb    esi,edi
c00267d6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00267da:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00267de:	89 f2                	mov    edx,esi
c00267e0:	e9 6b ff ff ff       	jmp    c0026750 <__moddi3+0x54>
c00267e5:	8d 76 00             	lea    esi,[esi+0x0]
c00267e8:	b8 20 00 00 00       	mov    eax,0x20
c00267ed:	89 c2                	mov    edx,eax
c00267ef:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00267f3:	29 da                	sub    edx,ebx
c00267f5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00267f9:	88 d9                	mov    cl,bl
c00267fb:	d3 e7                	shl    edi,cl
c00267fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026801:	88 d1                	mov    cl,dl
c0026803:	d3 e8                	shr    eax,cl
c0026805:	09 c7                	or     edi,eax
c0026807:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c002680b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002680f:	89 d8                	mov    eax,ebx
c0026811:	88 d9                	mov    cl,bl
c0026813:	d3 e7                	shl    edi,cl
c0026815:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026819:	89 f3                	mov    ebx,esi
c002681b:	88 d1                	mov    cl,dl
c002681d:	d3 eb                	shr    ebx,cl
c002681f:	89 c7                	mov    edi,eax
c0026821:	88 c1                	mov    cl,al
c0026823:	d3 e6                	shl    esi,cl
c0026825:	89 e8                	mov    eax,ebp
c0026827:	88 d1                	mov    cl,dl
c0026829:	d3 e8                	shr    eax,cl
c002682b:	09 f0                	or     eax,esi
c002682d:	89 f9                	mov    ecx,edi
c002682f:	d3 e5                	shl    ebp,cl
c0026831:	89 da                	mov    edx,ebx
c0026833:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0026837:	89 d3                	mov    ebx,edx
c0026839:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002683d:	89 c6                	mov    esi,eax
c002683f:	89 d1                	mov    ecx,edx
c0026841:	39 d3                	cmp    ebx,edx
c0026843:	72 27                	jb     c002686c <__moddi3+0x170>
c0026845:	74 21                	je     c0026868 <__moddi3+0x16c>
c0026847:	29 f5                	sub    ebp,esi
c0026849:	19 cb                	sbb    ebx,ecx
c002684b:	89 de                	mov    esi,ebx
c002684d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0026851:	d3 e6                	shl    esi,cl
c0026853:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0026857:	89 f9                	mov    ecx,edi
c0026859:	d3 ed                	shr    ebp,cl
c002685b:	09 ee                	or     esi,ebp
c002685d:	89 f0                	mov    eax,esi
c002685f:	d3 eb                	shr    ebx,cl
c0026861:	89 da                	mov    edx,ebx
c0026863:	e9 e8 fe ff ff       	jmp    c0026750 <__moddi3+0x54>
c0026868:	39 c5                	cmp    ebp,eax
c002686a:	73 db                	jae    c0026847 <__moddi3+0x14b>
c002686c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026870:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0026874:	89 d1                	mov    ecx,edx
c0026876:	89 c6                	mov    esi,eax
c0026878:	eb cd                	jmp    c0026847 <__moddi3+0x14b>
c002687a:	66 90                	xchg   ax,ax

c002687c <__udivdi3>:
c002687c:	55                   	push   ebp
c002687d:	57                   	push   edi
c002687e:	56                   	push   esi
c002687f:	53                   	push   ebx
c0026880:	83 ec 1c             	sub    esp,0x1c
c0026883:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0026887:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002688b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002688f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026893:	85 d2                	test   edx,edx
c0026895:	75 41                	jne    c00268d8 <__udivdi3+0x5c>
c0026897:	39 f7                	cmp    edi,esi
c0026899:	76 15                	jbe    c00268b0 <__udivdi3+0x34>
c002689b:	89 e8                	mov    eax,ebp
c002689d:	89 f2                	mov    edx,esi
c002689f:	f7 f7                	div    edi
c00268a1:	31 db                	xor    ebx,ebx
c00268a3:	89 da                	mov    edx,ebx
c00268a5:	83 c4 1c             	add    esp,0x1c
c00268a8:	5b                   	pop    ebx
c00268a9:	5e                   	pop    esi
c00268aa:	5f                   	pop    edi
c00268ab:	5d                   	pop    ebp
c00268ac:	c3                   	ret    
c00268ad:	8d 76 00             	lea    esi,[esi+0x0]
c00268b0:	89 f9                	mov    ecx,edi
c00268b2:	85 ff                	test   edi,edi
c00268b4:	75 0b                	jne    c00268c1 <__udivdi3+0x45>
c00268b6:	b8 01 00 00 00       	mov    eax,0x1
c00268bb:	31 d2                	xor    edx,edx
c00268bd:	f7 f7                	div    edi
c00268bf:	89 c1                	mov    ecx,eax
c00268c1:	31 d2                	xor    edx,edx
c00268c3:	89 f0                	mov    eax,esi
c00268c5:	f7 f1                	div    ecx
c00268c7:	89 c3                	mov    ebx,eax
c00268c9:	89 e8                	mov    eax,ebp
c00268cb:	f7 f1                	div    ecx
c00268cd:	89 da                	mov    edx,ebx
c00268cf:	83 c4 1c             	add    esp,0x1c
c00268d2:	5b                   	pop    ebx
c00268d3:	5e                   	pop    esi
c00268d4:	5f                   	pop    edi
c00268d5:	5d                   	pop    ebp
c00268d6:	c3                   	ret    
c00268d7:	90                   	nop
c00268d8:	39 f2                	cmp    edx,esi
c00268da:	77 1c                	ja     c00268f8 <__udivdi3+0x7c>
c00268dc:	0f bd da             	bsr    ebx,edx
c00268df:	83 f3 1f             	xor    ebx,0x1f
c00268e2:	75 24                	jne    c0026908 <__udivdi3+0x8c>
c00268e4:	39 f2                	cmp    edx,esi
c00268e6:	72 08                	jb     c00268f0 <__udivdi3+0x74>
c00268e8:	39 ef                	cmp    edi,ebp
c00268ea:	0f 87 84 00 00 00    	ja     c0026974 <__udivdi3+0xf8>
c00268f0:	b8 01 00 00 00       	mov    eax,0x1
c00268f5:	eb ac                	jmp    c00268a3 <__udivdi3+0x27>
c00268f7:	90                   	nop
c00268f8:	31 db                	xor    ebx,ebx
c00268fa:	31 c0                	xor    eax,eax
c00268fc:	89 da                	mov    edx,ebx
c00268fe:	83 c4 1c             	add    esp,0x1c
c0026901:	5b                   	pop    ebx
c0026902:	5e                   	pop    esi
c0026903:	5f                   	pop    edi
c0026904:	5d                   	pop    ebp
c0026905:	c3                   	ret    
c0026906:	66 90                	xchg   ax,ax
c0026908:	b8 20 00 00 00       	mov    eax,0x20
c002690d:	29 d8                	sub    eax,ebx
c002690f:	88 d9                	mov    cl,bl
c0026911:	d3 e2                	shl    edx,cl
c0026913:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0026917:	89 fa                	mov    edx,edi
c0026919:	88 c1                	mov    cl,al
c002691b:	d3 ea                	shr    edx,cl
c002691d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026921:	09 d1                	or     ecx,edx
c0026923:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026927:	88 d9                	mov    cl,bl
c0026929:	d3 e7                	shl    edi,cl
c002692b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002692f:	89 f7                	mov    edi,esi
c0026931:	88 c1                	mov    cl,al
c0026933:	d3 ef                	shr    edi,cl
c0026935:	88 d9                	mov    cl,bl
c0026937:	d3 e6                	shl    esi,cl
c0026939:	89 ea                	mov    edx,ebp
c002693b:	88 c1                	mov    cl,al
c002693d:	d3 ea                	shr    edx,cl
c002693f:	09 d6                	or     esi,edx
c0026941:	89 f0                	mov    eax,esi
c0026943:	89 fa                	mov    edx,edi
c0026945:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026949:	89 d7                	mov    edi,edx
c002694b:	89 c6                	mov    esi,eax
c002694d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026951:	39 d7                	cmp    edi,edx
c0026953:	72 13                	jb     c0026968 <__udivdi3+0xec>
c0026955:	74 09                	je     c0026960 <__udivdi3+0xe4>
c0026957:	89 f0                	mov    eax,esi
c0026959:	31 db                	xor    ebx,ebx
c002695b:	e9 43 ff ff ff       	jmp    c00268a3 <__udivdi3+0x27>
c0026960:	88 d9                	mov    cl,bl
c0026962:	d3 e5                	shl    ebp,cl
c0026964:	39 c5                	cmp    ebp,eax
c0026966:	73 ef                	jae    c0026957 <__udivdi3+0xdb>
c0026968:	8d 46 ff             	lea    eax,[esi-0x1]
c002696b:	31 db                	xor    ebx,ebx
c002696d:	e9 31 ff ff ff       	jmp    c00268a3 <__udivdi3+0x27>
c0026972:	66 90                	xchg   ax,ax
c0026974:	31 c0                	xor    eax,eax
c0026976:	e9 28 ff ff ff       	jmp    c00268a3 <__udivdi3+0x27>
c002697b:	90                   	nop

c002697c <__umoddi3>:
c002697c:	55                   	push   ebp
c002697d:	57                   	push   edi
c002697e:	56                   	push   esi
c002697f:	53                   	push   ebx
c0026980:	83 ec 1c             	sub    esp,0x1c
c0026983:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0026987:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002698b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002698f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0026993:	89 da                	mov    edx,ebx
c0026995:	85 c0                	test   eax,eax
c0026997:	75 37                	jne    c00269d0 <__umoddi3+0x54>
c0026999:	39 df                	cmp    edi,ebx
c002699b:	76 13                	jbe    c00269b0 <__umoddi3+0x34>
c002699d:	89 f0                	mov    eax,esi
c002699f:	f7 f7                	div    edi
c00269a1:	89 d0                	mov    eax,edx
c00269a3:	31 d2                	xor    edx,edx
c00269a5:	83 c4 1c             	add    esp,0x1c
c00269a8:	5b                   	pop    ebx
c00269a9:	5e                   	pop    esi
c00269aa:	5f                   	pop    edi
c00269ab:	5d                   	pop    ebp
c00269ac:	c3                   	ret    
c00269ad:	8d 76 00             	lea    esi,[esi+0x0]
c00269b0:	89 fd                	mov    ebp,edi
c00269b2:	85 ff                	test   edi,edi
c00269b4:	75 0b                	jne    c00269c1 <__umoddi3+0x45>
c00269b6:	b8 01 00 00 00       	mov    eax,0x1
c00269bb:	31 d2                	xor    edx,edx
c00269bd:	f7 f7                	div    edi
c00269bf:	89 c5                	mov    ebp,eax
c00269c1:	89 d8                	mov    eax,ebx
c00269c3:	31 d2                	xor    edx,edx
c00269c5:	f7 f5                	div    ebp
c00269c7:	89 f0                	mov    eax,esi
c00269c9:	f7 f5                	div    ebp
c00269cb:	89 d0                	mov    eax,edx
c00269cd:	eb d4                	jmp    c00269a3 <__umoddi3+0x27>
c00269cf:	90                   	nop
c00269d0:	89 f1                	mov    ecx,esi
c00269d2:	39 d8                	cmp    eax,ebx
c00269d4:	76 0a                	jbe    c00269e0 <__umoddi3+0x64>
c00269d6:	89 f0                	mov    eax,esi
c00269d8:	83 c4 1c             	add    esp,0x1c
c00269db:	5b                   	pop    ebx
c00269dc:	5e                   	pop    esi
c00269dd:	5f                   	pop    edi
c00269de:	5d                   	pop    ebp
c00269df:	c3                   	ret    
c00269e0:	0f bd e8             	bsr    ebp,eax
c00269e3:	83 f5 1f             	xor    ebp,0x1f
c00269e6:	75 1c                	jne    c0026a04 <__umoddi3+0x88>
c00269e8:	39 d8                	cmp    eax,ebx
c00269ea:	72 04                	jb     c00269f0 <__umoddi3+0x74>
c00269ec:	39 f7                	cmp    edi,esi
c00269ee:	77 08                	ja     c00269f8 <__umoddi3+0x7c>
c00269f0:	89 da                	mov    edx,ebx
c00269f2:	29 fe                	sub    esi,edi
c00269f4:	19 c2                	sbb    edx,eax
c00269f6:	89 f1                	mov    ecx,esi
c00269f8:	89 c8                	mov    eax,ecx
c00269fa:	83 c4 1c             	add    esp,0x1c
c00269fd:	5b                   	pop    ebx
c00269fe:	5e                   	pop    esi
c00269ff:	5f                   	pop    edi
c0026a00:	5d                   	pop    ebp
c0026a01:	c3                   	ret    
c0026a02:	66 90                	xchg   ax,ax
c0026a04:	ba 20 00 00 00       	mov    edx,0x20
c0026a09:	29 ea                	sub    edx,ebp
c0026a0b:	89 e9                	mov    ecx,ebp
c0026a0d:	d3 e0                	shl    eax,cl
c0026a0f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026a13:	89 f8                	mov    eax,edi
c0026a15:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0026a19:	88 d1                	mov    cl,dl
c0026a1b:	d3 e8                	shr    eax,cl
c0026a1d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026a21:	09 c1                	or     ecx,eax
c0026a23:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026a27:	89 e9                	mov    ecx,ebp
c0026a29:	d3 e7                	shl    edi,cl
c0026a2b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026a2f:	89 d8                	mov    eax,ebx
c0026a31:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0026a35:	88 d1                	mov    cl,dl
c0026a37:	d3 e8                	shr    eax,cl
c0026a39:	89 c7                	mov    edi,eax
c0026a3b:	89 e9                	mov    ecx,ebp
c0026a3d:	d3 e3                	shl    ebx,cl
c0026a3f:	89 f0                	mov    eax,esi
c0026a41:	88 d1                	mov    cl,dl
c0026a43:	d3 e8                	shr    eax,cl
c0026a45:	09 d8                	or     eax,ebx
c0026a47:	89 e9                	mov    ecx,ebp
c0026a49:	d3 e6                	shl    esi,cl
c0026a4b:	89 f3                	mov    ebx,esi
c0026a4d:	89 fa                	mov    edx,edi
c0026a4f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026a53:	89 d1                	mov    ecx,edx
c0026a55:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026a59:	89 c6                	mov    esi,eax
c0026a5b:	89 d7                	mov    edi,edx
c0026a5d:	39 d1                	cmp    ecx,edx
c0026a5f:	72 27                	jb     c0026a88 <__umoddi3+0x10c>
c0026a61:	74 21                	je     c0026a84 <__umoddi3+0x108>
c0026a63:	89 ca                	mov    edx,ecx
c0026a65:	29 f3                	sub    ebx,esi
c0026a67:	19 fa                	sbb    edx,edi
c0026a69:	89 d0                	mov    eax,edx
c0026a6b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0026a6f:	d3 e0                	shl    eax,cl
c0026a71:	89 e9                	mov    ecx,ebp
c0026a73:	d3 eb                	shr    ebx,cl
c0026a75:	09 d8                	or     eax,ebx
c0026a77:	d3 ea                	shr    edx,cl
c0026a79:	83 c4 1c             	add    esp,0x1c
c0026a7c:	5b                   	pop    ebx
c0026a7d:	5e                   	pop    esi
c0026a7e:	5f                   	pop    edi
c0026a7f:	5d                   	pop    ebp
c0026a80:	c3                   	ret    
c0026a81:	8d 76 00             	lea    esi,[esi+0x0]
c0026a84:	39 c3                	cmp    ebx,eax
c0026a86:	73 db                	jae    c0026a63 <__umoddi3+0xe7>
c0026a88:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026a8c:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026a90:	89 d7                	mov    edi,edx
c0026a92:	89 c6                	mov    esi,eax
c0026a94:	eb cd                	jmp    c0026a63 <__umoddi3+0xe7>

c0026a96 <__addsf3>:
c0026a96:	55                   	push   ebp
c0026a97:	89 e5                	mov    ebp,esp
c0026a99:	57                   	push   edi
c0026a9a:	56                   	push   esi
c0026a9b:	53                   	push   ebx
c0026a9c:	83 ec 08             	sub    esp,0x8
c0026a9f:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026aa2:	89 fa                	mov    edx,edi
c0026aa4:	89 f8                	mov    eax,edi
c0026aa6:	c1 f8 17             	sar    eax,0x17
c0026aa9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026aac:	c1 e2 08             	shl    edx,0x8
c0026aaf:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026ab5:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026ab8:	89 de                	mov    esi,ebx
c0026aba:	c1 fe 17             	sar    esi,0x17
c0026abd:	c1 e3 08             	shl    ebx,0x8
c0026ac0:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026ac6:	31 f0                	xor    eax,esi
c0026ac8:	0f 88 3b 01 00 00    	js     c0026c09 <__addsf3+0x173>
c0026ace:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0026ad1:	29 f1                	sub    ecx,esi
c0026ad3:	85 c9                	test   ecx,ecx
c0026ad5:	7e 54                	jle    c0026b2b <__addsf3+0x95>
c0026ad7:	89 f0                	mov    eax,esi
c0026ad9:	84 c0                	test   al,al
c0026adb:	75 10                	jne    c0026aed <__addsf3+0x57>
c0026add:	85 db                	test   ebx,ebx
c0026adf:	0f 84 aa 02 00 00    	je     c0026d8f <__addsf3+0x2f9>
c0026ae5:	49                   	dec    ecx
c0026ae6:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026ae9:	74 38                	je     c0026b23 <__addsf3+0x8d>
c0026aeb:	eb 13                	jmp    c0026b00 <__addsf3+0x6a>
c0026aed:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026af0:	f7 d0                	not    eax
c0026af2:	84 c0                	test   al,al
c0026af4:	0f 84 95 02 00 00    	je     c0026d8f <__addsf3+0x2f9>
c0026afa:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026b00:	83 f9 1f             	cmp    ecx,0x1f
c0026b03:	0f 8f 86 02 00 00    	jg     c0026d8f <__addsf3+0x2f9>
c0026b09:	89 de                	mov    esi,ebx
c0026b0b:	d3 ee                	shr    esi,cl
c0026b0d:	b8 20 00 00 00       	mov    eax,0x20
c0026b12:	29 c8                	sub    eax,ecx
c0026b14:	89 c1                	mov    ecx,eax
c0026b16:	d3 e3                	shl    ebx,cl
c0026b18:	31 c0                	xor    eax,eax
c0026b1a:	85 db                	test   ebx,ebx
c0026b1c:	0f 95 c0             	setne  al
c0026b1f:	09 f0                	or     eax,esi
c0026b21:	01 d0                	add    eax,edx
c0026b23:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026b26:	e9 b6 00 00 00       	jmp    c0026be1 <__addsf3+0x14b>
c0026b2b:	74 5c                	je     c0026b89 <__addsf3+0xf3>
c0026b2d:	89 f1                	mov    ecx,esi
c0026b2f:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0026b32:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026b35:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026b39:	75 14                	jne    c0026b4f <__addsf3+0xb9>
c0026b3b:	85 d2                	test   edx,edx
c0026b3d:	0f 84 4c 02 00 00    	je     c0026d8f <__addsf3+0x2f9>
c0026b43:	49                   	dec    ecx
c0026b44:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026b47:	0f 84 94 00 00 00    	je     c0026be1 <__addsf3+0x14b>
c0026b4d:	eb 12                	jmp    c0026b61 <__addsf3+0xcb>
c0026b4f:	89 f0                	mov    eax,esi
c0026b51:	f7 d0                	not    eax
c0026b53:	84 c0                	test   al,al
c0026b55:	0f 84 34 02 00 00    	je     c0026d8f <__addsf3+0x2f9>
c0026b5b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026b61:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026b64:	83 f9 1f             	cmp    ecx,0x1f
c0026b67:	0f 8f 22 02 00 00    	jg     c0026d8f <__addsf3+0x2f9>
c0026b6d:	89 d7                	mov    edi,edx
c0026b6f:	d3 ef                	shr    edi,cl
c0026b71:	b8 20 00 00 00       	mov    eax,0x20
c0026b76:	29 c8                	sub    eax,ecx
c0026b78:	89 c1                	mov    ecx,eax
c0026b7a:	d3 e2                	shl    edx,cl
c0026b7c:	31 c0                	xor    eax,eax
c0026b7e:	85 d2                	test   edx,edx
c0026b80:	0f 95 c0             	setne  al
c0026b83:	09 f8                	or     eax,edi
c0026b85:	01 d8                	add    eax,ebx
c0026b87:	eb 58                	jmp    c0026be1 <__addsf3+0x14b>
c0026b89:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026b8c:	8d 70 01             	lea    esi,[eax+0x1]
c0026b8f:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0026b95:	75 32                	jne    c0026bc9 <__addsf3+0x133>
c0026b97:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026b9b:	75 1f                	jne    c0026bbc <__addsf3+0x126>
c0026b9d:	85 d2                	test   edx,edx
c0026b9f:	0f 84 e0 01 00 00    	je     c0026d85 <__addsf3+0x2ef>
c0026ba5:	85 db                	test   ebx,ebx
c0026ba7:	0f 84 e2 01 00 00    	je     c0026d8f <__addsf3+0x2f9>
c0026bad:	89 d0                	mov    eax,edx
c0026baf:	01 d8                	add    eax,ebx
c0026bb1:	0f 89 a9 01 00 00    	jns    c0026d60 <__addsf3+0x2ca>
c0026bb7:	e9 9d 01 00 00       	jmp    c0026d59 <__addsf3+0x2c3>
c0026bbc:	85 d2                	test   edx,edx
c0026bbe:	0f 85 cb 01 00 00    	jne    c0026d8f <__addsf3+0x2f9>
c0026bc4:	e9 bc 01 00 00       	jmp    c0026d85 <__addsf3+0x2ef>
c0026bc9:	31 c0                	xor    eax,eax
c0026bcb:	89 f1                	mov    ecx,esi
c0026bcd:	f7 d1                	not    ecx
c0026bcf:	84 c9                	test   cl,cl
c0026bd1:	0f 84 90 01 00 00    	je     c0026d67 <__addsf3+0x2d1>
c0026bd7:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026bda:	d1 e8                	shr    eax,1
c0026bdc:	e9 86 01 00 00       	jmp    c0026d67 <__addsf3+0x2d1>
c0026be1:	85 c0                	test   eax,eax
c0026be3:	0f 89 7e 01 00 00    	jns    c0026d67 <__addsf3+0x2d1>
c0026be9:	46                   	inc    esi
c0026bea:	89 f2                	mov    edx,esi
c0026bec:	f7 d2                	not    edx
c0026bee:	84 d2                	test   dl,dl
c0026bf0:	0f 84 6f 01 00 00    	je     c0026d65 <__addsf3+0x2cf>
c0026bf6:	89 c2                	mov    edx,eax
c0026bf8:	83 e2 01             	and    edx,0x1
c0026bfb:	d1 e8                	shr    eax,1
c0026bfd:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0026c02:	09 d0                	or     eax,edx
c0026c04:	e9 5e 01 00 00       	jmp    c0026d67 <__addsf3+0x2d1>
c0026c09:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0026c0d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026c10:	89 f0                	mov    eax,esi
c0026c12:	0f b6 c0             	movzx  eax,al
c0026c15:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026c18:	29 c1                	sub    ecx,eax
c0026c1a:	85 c9                	test   ecx,ecx
c0026c1c:	7e 55                	jle    c0026c73 <__addsf3+0x1dd>
c0026c1e:	85 c0                	test   eax,eax
c0026c20:	75 11                	jne    c0026c33 <__addsf3+0x19d>
c0026c22:	85 db                	test   ebx,ebx
c0026c24:	0f 84 65 01 00 00    	je     c0026d8f <__addsf3+0x2f9>
c0026c2a:	49                   	dec    ecx
c0026c2b:	75 19                	jne    c0026c46 <__addsf3+0x1b0>
c0026c2d:	89 d0                	mov    eax,edx
c0026c2f:	29 d8                	sub    eax,ebx
c0026c31:	eb 38                	jmp    c0026c6b <__addsf3+0x1d5>
c0026c33:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026c36:	f7 d0                	not    eax
c0026c38:	84 c0                	test   al,al
c0026c3a:	0f 84 4f 01 00 00    	je     c0026d8f <__addsf3+0x2f9>
c0026c40:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026c46:	83 f9 1f             	cmp    ecx,0x1f
c0026c49:	0f 8f 40 01 00 00    	jg     c0026d8f <__addsf3+0x2f9>
c0026c4f:	89 de                	mov    esi,ebx
c0026c51:	d3 ee                	shr    esi,cl
c0026c53:	b8 20 00 00 00       	mov    eax,0x20
c0026c58:	29 c8                	sub    eax,ecx
c0026c5a:	89 c1                	mov    ecx,eax
c0026c5c:	d3 e3                	shl    ebx,cl
c0026c5e:	31 c0                	xor    eax,eax
c0026c60:	85 db                	test   ebx,ebx
c0026c62:	0f 95 c0             	setne  al
c0026c65:	09 f0                	or     eax,esi
c0026c67:	29 c2                	sub    edx,eax
c0026c69:	89 d0                	mov    eax,edx
c0026c6b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026c6e:	e9 af 00 00 00       	jmp    c0026d22 <__addsf3+0x28c>
c0026c73:	74 5c                	je     c0026cd1 <__addsf3+0x23b>
c0026c75:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026c78:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026c7b:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026c7f:	75 14                	jne    c0026c95 <__addsf3+0x1ff>
c0026c81:	85 d2                	test   edx,edx
c0026c83:	0f 84 06 01 00 00    	je     c0026d8f <__addsf3+0x2f9>
c0026c89:	48                   	dec    eax
c0026c8a:	75 1b                	jne    c0026ca7 <__addsf3+0x211>
c0026c8c:	89 d8                	mov    eax,ebx
c0026c8e:	29 d0                	sub    eax,edx
c0026c90:	e9 8d 00 00 00       	jmp    c0026d22 <__addsf3+0x28c>
c0026c95:	89 f1                	mov    ecx,esi
c0026c97:	f7 d1                	not    ecx
c0026c99:	84 c9                	test   cl,cl
c0026c9b:	0f 84 ee 00 00 00    	je     c0026d8f <__addsf3+0x2f9>
c0026ca1:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026ca7:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026caa:	83 f8 1f             	cmp    eax,0x1f
c0026cad:	0f 8f dc 00 00 00    	jg     c0026d8f <__addsf3+0x2f9>
c0026cb3:	89 d7                	mov    edi,edx
c0026cb5:	88 c1                	mov    cl,al
c0026cb7:	d3 ef                	shr    edi,cl
c0026cb9:	b9 20 00 00 00       	mov    ecx,0x20
c0026cbe:	29 c1                	sub    ecx,eax
c0026cc0:	d3 e2                	shl    edx,cl
c0026cc2:	31 c0                	xor    eax,eax
c0026cc4:	85 d2                	test   edx,edx
c0026cc6:	0f 95 c0             	setne  al
c0026cc9:	09 f8                	or     eax,edi
c0026ccb:	29 c3                	sub    ebx,eax
c0026ccd:	89 d8                	mov    eax,ebx
c0026ccf:	eb 51                	jmp    c0026d22 <__addsf3+0x28c>
c0026cd1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026cd4:	40                   	inc    eax
c0026cd5:	a8 fe                	test   al,0xfe
c0026cd7:	75 3d                	jne    c0026d16 <__addsf3+0x280>
c0026cd9:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026cdd:	0f 85 a7 00 00 00    	jne    c0026d8a <__addsf3+0x2f4>
c0026ce3:	85 d2                	test   edx,edx
c0026ce5:	75 12                	jne    c0026cf9 <__addsf3+0x263>
c0026ce7:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026cea:	85 db                	test   ebx,ebx
c0026cec:	0f 85 9d 00 00 00    	jne    c0026d8f <__addsf3+0x2f9>
c0026cf2:	31 ff                	xor    edi,edi
c0026cf4:	e9 96 00 00 00       	jmp    c0026d8f <__addsf3+0x2f9>
c0026cf9:	85 db                	test   ebx,ebx
c0026cfb:	0f 84 8e 00 00 00    	je     c0026d8f <__addsf3+0x2f9>
c0026d01:	89 d0                	mov    eax,edx
c0026d03:	29 d8                	sub    eax,ebx
c0026d05:	79 06                	jns    c0026d0d <__addsf3+0x277>
c0026d07:	89 d8                	mov    eax,ebx
c0026d09:	29 d0                	sub    eax,edx
c0026d0b:	eb 5a                	jmp    c0026d67 <__addsf3+0x2d1>
c0026d0d:	bf 00 00 00 00       	mov    edi,0x0
c0026d12:	74 7b                	je     c0026d8f <__addsf3+0x2f9>
c0026d14:	eb 4a                	jmp    c0026d60 <__addsf3+0x2ca>
c0026d16:	89 d0                	mov    eax,edx
c0026d18:	29 d8                	sub    eax,ebx
c0026d1a:	79 12                	jns    c0026d2e <__addsf3+0x298>
c0026d1c:	89 d8                	mov    eax,ebx
c0026d1e:	29 d0                	sub    eax,edx
c0026d20:	eb 09                	jmp    c0026d2b <__addsf3+0x295>
c0026d22:	85 c0                	test   eax,eax
c0026d24:	79 41                	jns    c0026d67 <__addsf3+0x2d1>
c0026d26:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026d2b:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0026d2e:	31 f6                	xor    esi,esi
c0026d30:	85 c0                	test   eax,eax
c0026d32:	74 33                	je     c0026d67 <__addsf3+0x2d1>
c0026d34:	0f bd c8             	bsr    ecx,eax
c0026d37:	83 f1 1f             	xor    ecx,0x1f
c0026d3a:	d3 e0                	shl    eax,cl
c0026d3c:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0026d40:	39 ca                	cmp    edx,ecx
c0026d42:	7f 10                	jg     c0026d54 <__addsf3+0x2be>
c0026d44:	29 d1                	sub    ecx,edx
c0026d46:	41                   	inc    ecx
c0026d47:	d3 e8                	shr    eax,cl
c0026d49:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026d4c:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0026d52:	eb 13                	jmp    c0026d67 <__addsf3+0x2d1>
c0026d54:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026d57:	29 ce                	sub    esi,ecx
c0026d59:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026d5e:	eb 07                	jmp    c0026d67 <__addsf3+0x2d1>
c0026d60:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026d63:	eb 02                	jmp    c0026d67 <__addsf3+0x2d1>
c0026d65:	31 c0                	xor    eax,eax
c0026d67:	89 c2                	mov    edx,eax
c0026d69:	c1 ea 08             	shr    edx,0x8
c0026d6c:	a8 7f                	test   al,0x7f
c0026d6e:	0f 95 c1             	setne  cl
c0026d71:	09 d1                	or     ecx,edx
c0026d73:	83 e1 01             	and    ecx,0x1
c0026d76:	c1 e8 07             	shr    eax,0x7
c0026d79:	21 c8                	and    eax,ecx
c0026d7b:	c1 e6 17             	shl    esi,0x17
c0026d7e:	09 d6                	or     esi,edx
c0026d80:	8d 3c 30             	lea    edi,[eax+esi*1]
c0026d83:	eb 0a                	jmp    c0026d8f <__addsf3+0x2f9>
c0026d85:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026d88:	eb 05                	jmp    c0026d8f <__addsf3+0x2f9>
c0026d8a:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0026d8f:	89 f8                	mov    eax,edi
c0026d91:	5a                   	pop    edx
c0026d92:	59                   	pop    ecx
c0026d93:	5b                   	pop    ebx
c0026d94:	5e                   	pop    esi
c0026d95:	5f                   	pop    edi
c0026d96:	5d                   	pop    ebp
c0026d97:	c3                   	ret    

c0026d98 <__subsf3>:
c0026d98:	55                   	push   ebp
c0026d99:	89 e5                	mov    ebp,esp
c0026d9b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026d9e:	05 00 00 00 80       	add    eax,0x80000000
c0026da3:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026da6:	5d                   	pop    ebp
c0026da7:	e9 ea fc ff ff       	jmp    c0026a96 <__addsf3>

c0026dac <__negsf2>:
c0026dac:	55                   	push   ebp
c0026dad:	89 e5                	mov    ebp,esp
c0026daf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026db2:	05 00 00 00 80       	add    eax,0x80000000
c0026db7:	5d                   	pop    ebp
c0026db8:	c3                   	ret    

c0026db9 <__mulsf3>:
c0026db9:	55                   	push   ebp
c0026dba:	89 e5                	mov    ebp,esp
c0026dbc:	57                   	push   edi
c0026dbd:	56                   	push   esi
c0026dbe:	53                   	push   ebx
c0026dbf:	83 ec 1c             	sub    esp,0x1c
c0026dc2:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0026dc5:	89 f0                	mov    eax,esi
c0026dc7:	89 f1                	mov    ecx,esi
c0026dc9:	c1 f9 17             	sar    ecx,0x17
c0026dcc:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026dcf:	c1 e0 08             	shl    eax,0x8
c0026dd2:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026dd7:	89 c1                	mov    ecx,eax
c0026dd9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026ddc:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026ddf:	89 c7                	mov    edi,eax
c0026de1:	c1 ff 17             	sar    edi,0x17
c0026de4:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026de8:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026deb:	89 f8                	mov    eax,edi
c0026ded:	0f b6 c0             	movzx  eax,al
c0026df0:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026df3:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0026df7:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026dfa:	42                   	inc    edx
c0026dfb:	80 e2 fe             	and    dl,0xfe
c0026dfe:	75 7b                	jne    c0026e7b <__mulsf3+0xc2>
c0026e00:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026e04:	74 54                	je     c0026e5a <__mulsf3+0xa1>
c0026e06:	85 c9                	test   ecx,ecx
c0026e08:	0f 85 64 01 00 00    	jne    c0026f72 <__mulsf3+0x1b9>
c0026e0e:	8d 57 01             	lea    edx,[edi+0x1]
c0026e11:	80 e2 fe             	and    dl,0xfe
c0026e14:	75 1f                	jne    c0026e35 <__mulsf3+0x7c>
c0026e16:	85 c0                	test   eax,eax
c0026e18:	b8 00 00 00 00       	mov    eax,0x0
c0026e1d:	74 29                	je     c0026e48 <__mulsf3+0x8f>
c0026e1f:	53                   	push   ebx
c0026e20:	53                   	push   ebx
c0026e21:	50                   	push   eax
c0026e22:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026e25:	e8 96 05 00 00       	call   c00273c0 <__nesf2>
c0026e2a:	83 c4 10             	add    esp,0x10
c0026e2d:	85 c0                	test   eax,eax
c0026e2f:	0f 85 3a 01 00 00    	jne    c0026f6f <__mulsf3+0x1b6>
c0026e35:	85 ff                	test   edi,edi
c0026e37:	0f 89 35 01 00 00    	jns    c0026f72 <__mulsf3+0x1b9>
c0026e3d:	81 c6 00 00 00 80    	add    esi,0x80000000
c0026e43:	e9 2a 01 00 00       	jmp    c0026f72 <__mulsf3+0x1b9>
c0026e48:	51                   	push   ecx
c0026e49:	51                   	push   ecx
c0026e4a:	50                   	push   eax
c0026e4b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026e4e:	e8 6d 05 00 00       	call   c00273c0 <__nesf2>
c0026e53:	83 c4 10             	add    esp,0x10
c0026e56:	85 c0                	test   eax,eax
c0026e58:	eb 15                	jmp    c0026e6f <__mulsf3+0xb6>
c0026e5a:	85 c9                	test   ecx,ecx
c0026e5c:	74 0b                	je     c0026e69 <__mulsf3+0xb0>
c0026e5e:	8d 53 ff             	lea    edx,[ebx-0x1]
c0026e61:	01 c9                	add    ecx,ecx
c0026e63:	78 16                	js     c0026e7b <__mulsf3+0xc2>
c0026e65:	89 d3                	mov    ebx,edx
c0026e67:	eb f5                	jmp    c0026e5e <__mulsf3+0xa5>
c0026e69:	89 f8                	mov    eax,edi
c0026e6b:	f7 d0                	not    eax
c0026e6d:	84 c0                	test   al,al
c0026e6f:	75 c4                	jne    c0026e35 <__mulsf3+0x7c>
c0026e71:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0026e76:	e9 f7 00 00 00       	jmp    c0026f72 <__mulsf3+0x1b9>
c0026e7b:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0026e7e:	c1 e6 08             	shl    esi,0x8
c0026e81:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0026e87:	8d 57 01             	lea    edx,[edi+0x1]
c0026e8a:	80 e2 fe             	and    dl,0xfe
c0026e8d:	75 63                	jne    c0026ef2 <__mulsf3+0x139>
c0026e8f:	85 c0                	test   eax,eax
c0026e91:	74 2f                	je     c0026ec2 <__mulsf3+0x109>
c0026e93:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026e97:	0f 89 d2 00 00 00    	jns    c0026f6f <__mulsf3+0x1b6>
c0026e9d:	52                   	push   edx
c0026e9e:	52                   	push   edx
c0026e9f:	6a 00                	push   0x0
c0026ea1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026ea4:	e8 dc 04 00 00       	call   c0027385 <__eqsf2>
c0026ea9:	83 c4 10             	add    esp,0x10
c0026eac:	85 c0                	test   eax,eax
c0026eae:	0f 85 bb 00 00 00    	jne    c0026f6f <__mulsf3+0x1b6>
c0026eb4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026eb7:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0026ebd:	e9 b0 00 00 00       	jmp    c0026f72 <__mulsf3+0x1b9>
c0026ec2:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026ec5:	50                   	push   eax
c0026ec6:	50                   	push   eax
c0026ec7:	6a 00                	push   0x0
c0026ec9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026ecc:	e8 b4 04 00 00       	call   c0027385 <__eqsf2>
c0026ed1:	83 c4 10             	add    esp,0x10
c0026ed4:	85 c0                	test   eax,eax
c0026ed6:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026ed9:	75 0c                	jne    c0026ee7 <__mulsf3+0x12e>
c0026edb:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026edf:	0f 89 8a 00 00 00    	jns    c0026f6f <__mulsf3+0x1b6>
c0026ee5:	eb cd                	jmp    c0026eb4 <__mulsf3+0xfb>
c0026ee7:	8d 43 ff             	lea    eax,[ebx-0x1]
c0026eea:	01 f6                	add    esi,esi
c0026eec:	78 04                	js     c0026ef2 <__mulsf3+0x139>
c0026eee:	89 c3                	mov    ebx,eax
c0026ef0:	eb f5                	jmp    c0026ee7 <__mulsf3+0x12e>
c0026ef2:	89 c8                	mov    eax,ecx
c0026ef4:	0d 00 00 00 80       	or     eax,0x80000000
c0026ef9:	81 ce 00 00 00 80    	or     esi,0x80000000
c0026eff:	f7 e6                	mul    esi
c0026f01:	85 c0                	test   eax,eax
c0026f03:	0f 95 c0             	setne  al
c0026f06:	0f b6 c0             	movzx  eax,al
c0026f09:	09 c2                	or     edx,eax
c0026f0b:	78 03                	js     c0026f10 <__mulsf3+0x157>
c0026f0d:	01 d2                	add    edx,edx
c0026f0f:	4b                   	dec    ebx
c0026f10:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0026f16:	7f 22                	jg     c0026f3a <__mulsf3+0x181>
c0026f18:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026f1e:	85 db                	test   ebx,ebx
c0026f20:	7f 23                	jg     c0026f45 <__mulsf3+0x18c>
c0026f22:	83 fb e9             	cmp    ebx,0xffffffe9
c0026f25:	7c 1a                	jl     c0026f41 <__mulsf3+0x188>
c0026f27:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026f2d:	b9 01 00 00 00       	mov    ecx,0x1
c0026f32:	29 d9                	sub    ecx,ebx
c0026f34:	d3 ea                	shr    edx,cl
c0026f36:	31 db                	xor    ebx,ebx
c0026f38:	eb 0b                	jmp    c0026f45 <__mulsf3+0x18c>
c0026f3a:	bb ff 00 00 00       	mov    ebx,0xff
c0026f3f:	eb 02                	jmp    c0026f43 <__mulsf3+0x18a>
c0026f41:	31 db                	xor    ebx,ebx
c0026f43:	31 d2                	xor    edx,edx
c0026f45:	89 d0                	mov    eax,edx
c0026f47:	c1 e8 08             	shr    eax,0x8
c0026f4a:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0026f4d:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0026f53:	09 fb                	or     ebx,edi
c0026f55:	c1 e3 17             	shl    ebx,0x17
c0026f58:	09 c3                	or     ebx,eax
c0026f5a:	f6 c2 7f             	test   dl,0x7f
c0026f5d:	0f 95 c1             	setne  cl
c0026f60:	09 c8                	or     eax,ecx
c0026f62:	83 e0 01             	and    eax,0x1
c0026f65:	c1 ea 07             	shr    edx,0x7
c0026f68:	21 c2                	and    edx,eax
c0026f6a:	8d 34 13             	lea    esi,[ebx+edx*1]
c0026f6d:	eb 03                	jmp    c0026f72 <__mulsf3+0x1b9>
c0026f6f:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0026f72:	89 f0                	mov    eax,esi
c0026f74:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026f77:	5b                   	pop    ebx
c0026f78:	5e                   	pop    esi
c0026f79:	5f                   	pop    edi
c0026f7a:	5d                   	pop    ebp
c0026f7b:	c3                   	ret    

c0026f7c <__divsf3>:
c0026f7c:	55                   	push   ebp
c0026f7d:	89 e5                	mov    ebp,esp
c0026f7f:	57                   	push   edi
c0026f80:	56                   	push   esi
c0026f81:	53                   	push   ebx
c0026f82:	83 ec 1c             	sub    esp,0x1c
c0026f85:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026f88:	89 d8                	mov    eax,ebx
c0026f8a:	89 d9                	mov    ecx,ebx
c0026f8c:	c1 f9 17             	sar    ecx,0x17
c0026f8f:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026f92:	c1 e0 08             	shl    eax,0x8
c0026f95:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026f9a:	89 c1                	mov    ecx,eax
c0026f9c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026f9f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026fa2:	89 c7                	mov    edi,eax
c0026fa4:	c1 ff 17             	sar    edi,0x17
c0026fa7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026fab:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026fae:	89 f8                	mov    eax,edi
c0026fb0:	0f b6 c0             	movzx  eax,al
c0026fb3:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026fb6:	29 c6                	sub    esi,eax
c0026fb8:	83 c6 7f             	add    esi,0x7f
c0026fbb:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026fbe:	42                   	inc    edx
c0026fbf:	80 e2 fe             	and    dl,0xfe
c0026fc2:	0f 85 9c 00 00 00    	jne    c0027064 <__divsf3+0xe8>
c0026fc8:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026fcc:	74 33                	je     c0027001 <__divsf3+0x85>
c0026fce:	85 c9                	test   ecx,ecx
c0026fd0:	0f 85 c7 01 00 00    	jne    c002719d <__divsf3+0x221>
c0026fd6:	8d 57 01             	lea    edx,[edi+0x1]
c0026fd9:	80 e2 fe             	and    dl,0xfe
c0026fdc:	75 2f                	jne    c002700d <__divsf3+0x91>
c0026fde:	85 c0                	test   eax,eax
c0026fe0:	74 2b                	je     c002700d <__divsf3+0x91>
c0026fe2:	51                   	push   ecx
c0026fe3:	51                   	push   ecx
c0026fe4:	6a 00                	push   0x0
c0026fe6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026fe9:	e8 d2 03 00 00       	call   c00273c0 <__nesf2>
c0026fee:	83 c4 10             	add    esp,0x10
c0026ff1:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026ff4:	85 c0                	test   eax,eax
c0026ff6:	0f 85 a1 01 00 00    	jne    c002719d <__divsf3+0x221>
c0026ffc:	e9 92 01 00 00       	jmp    c0027193 <__divsf3+0x217>
c0027001:	85 c9                	test   ecx,ecx
c0027003:	75 1b                	jne    c0027020 <__divsf3+0xa4>
c0027005:	8d 57 01             	lea    edx,[edi+0x1]
c0027008:	80 e2 fe             	and    dl,0xfe
c002700b:	74 1e                	je     c002702b <__divsf3+0xaf>
c002700d:	85 ff                	test   edi,edi
c002700f:	0f 89 88 01 00 00    	jns    c002719d <__divsf3+0x221>
c0027015:	81 c3 00 00 00 80    	add    ebx,0x80000000
c002701b:	e9 7d 01 00 00       	jmp    c002719d <__divsf3+0x221>
c0027020:	8d 56 ff             	lea    edx,[esi-0x1]
c0027023:	01 c9                	add    ecx,ecx
c0027025:	78 3d                	js     c0027064 <__divsf3+0xe8>
c0027027:	89 d6                	mov    esi,edx
c0027029:	eb f5                	jmp    c0027020 <__divsf3+0xa4>
c002702b:	85 c0                	test   eax,eax
c002702d:	b8 00 00 00 00       	mov    eax,0x0
c0027032:	74 18                	je     c002704c <__divsf3+0xd0>
c0027034:	52                   	push   edx
c0027035:	52                   	push   edx
c0027036:	50                   	push   eax
c0027037:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002703a:	e8 81 03 00 00       	call   c00273c0 <__nesf2>
c002703f:	83 c4 10             	add    esp,0x10
c0027042:	85 c0                	test   eax,eax
c0027044:	0f 85 50 01 00 00    	jne    c002719a <__divsf3+0x21e>
c002704a:	eb c1                	jmp    c002700d <__divsf3+0x91>
c002704c:	56                   	push   esi
c002704d:	56                   	push   esi
c002704e:	50                   	push   eax
c002704f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027052:	e8 69 03 00 00       	call   c00273c0 <__nesf2>
c0027057:	83 c4 10             	add    esp,0x10
c002705a:	85 c0                	test   eax,eax
c002705c:	0f 84 31 01 00 00    	je     c0027193 <__divsf3+0x217>
c0027062:	eb a9                	jmp    c002700d <__divsf3+0x91>
c0027064:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0027067:	c1 e3 08             	shl    ebx,0x8
c002706a:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027070:	8d 57 01             	lea    edx,[edi+0x1]
c0027073:	80 e2 fe             	and    dl,0xfe
c0027076:	75 71                	jne    c00270e9 <__divsf3+0x16d>
c0027078:	85 c0                	test   eax,eax
c002707a:	ba 00 00 00 00       	mov    edx,0x0
c002707f:	74 2f                	je     c00270b0 <__divsf3+0x134>
c0027081:	51                   	push   ecx
c0027082:	51                   	push   ecx
c0027083:	52                   	push   edx
c0027084:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027087:	e8 f9 02 00 00       	call   c0027385 <__eqsf2>
c002708c:	83 c4 10             	add    esp,0x10
c002708f:	85 c0                	test   eax,eax
c0027091:	0f 85 03 01 00 00    	jne    c002719a <__divsf3+0x21e>
c0027097:	31 d2                	xor    edx,edx
c0027099:	89 d3                	mov    ebx,edx
c002709b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002709e:	31 f8                	xor    eax,edi
c00270a0:	0f 89 f7 00 00 00    	jns    c002719d <__divsf3+0x221>
c00270a6:	bb 00 00 00 80       	mov    ebx,0x80000000
c00270ab:	e9 ed 00 00 00       	jmp    c002719d <__divsf3+0x221>
c00270b0:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00270b3:	50                   	push   eax
c00270b4:	50                   	push   eax
c00270b5:	52                   	push   edx
c00270b6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00270b9:	e8 c7 02 00 00       	call   c0027385 <__eqsf2>
c00270be:	83 c4 10             	add    esp,0x10
c00270c1:	85 c0                	test   eax,eax
c00270c3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00270c6:	75 16                	jne    c00270de <__divsf3+0x162>
c00270c8:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00270cb:	31 fb                	xor    ebx,edi
c00270cd:	81 e3 00 00 00 80    	and    ebx,0x80000000
c00270d3:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c00270d9:	e9 bf 00 00 00       	jmp    c002719d <__divsf3+0x221>
c00270de:	8d 46 01             	lea    eax,[esi+0x1]
c00270e1:	01 db                	add    ebx,ebx
c00270e3:	78 04                	js     c00270e9 <__divsf3+0x16d>
c00270e5:	89 c6                	mov    esi,eax
c00270e7:	eb f5                	jmp    c00270de <__divsf3+0x162>
c00270e9:	89 c8                	mov    eax,ecx
c00270eb:	0d 00 00 00 80       	or     eax,0x80000000
c00270f0:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00270f6:	31 d2                	xor    edx,edx
c00270f8:	39 d8                	cmp    eax,ebx
c00270fa:	72 07                	jb     c0027103 <__divsf3+0x187>
c00270fc:	29 d8                	sub    eax,ebx
c00270fe:	ba 01 00 00 00       	mov    edx,0x1
c0027103:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c002710a:	01 d2                	add    edx,edx
c002710c:	89 c1                	mov    ecx,eax
c002710e:	01 c0                	add    eax,eax
c0027110:	85 c9                	test   ecx,ecx
c0027112:	78 04                	js     c0027118 <__divsf3+0x19c>
c0027114:	39 c3                	cmp    ebx,eax
c0027116:	77 05                	ja     c002711d <__divsf3+0x1a1>
c0027118:	29 d8                	sub    eax,ebx
c002711a:	83 ca 01             	or     edx,0x1
c002711d:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0027120:	75 e8                	jne    c002710a <__divsf3+0x18e>
c0027122:	85 c0                	test   eax,eax
c0027124:	0f 95 c0             	setne  al
c0027127:	0f b6 c0             	movzx  eax,al
c002712a:	c1 e2 06             	shl    edx,0x6
c002712d:	09 c2                	or     edx,eax
c002712f:	78 03                	js     c0027134 <__divsf3+0x1b8>
c0027131:	01 d2                	add    edx,edx
c0027133:	4e                   	dec    esi
c0027134:	81 fe fe 00 00 00    	cmp    esi,0xfe
c002713a:	7f 22                	jg     c002715e <__divsf3+0x1e2>
c002713c:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027142:	85 f6                	test   esi,esi
c0027144:	7f 23                	jg     c0027169 <__divsf3+0x1ed>
c0027146:	83 fe e9             	cmp    esi,0xffffffe9
c0027149:	7c 1a                	jl     c0027165 <__divsf3+0x1e9>
c002714b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027151:	b9 01 00 00 00       	mov    ecx,0x1
c0027156:	29 f1                	sub    ecx,esi
c0027158:	d3 ea                	shr    edx,cl
c002715a:	31 f6                	xor    esi,esi
c002715c:	eb 0b                	jmp    c0027169 <__divsf3+0x1ed>
c002715e:	be ff 00 00 00       	mov    esi,0xff
c0027163:	eb 02                	jmp    c0027167 <__divsf3+0x1eb>
c0027165:	31 f6                	xor    esi,esi
c0027167:	31 d2                	xor    edx,edx
c0027169:	89 d0                	mov    eax,edx
c002716b:	c1 e8 08             	shr    eax,0x8
c002716e:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027171:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027177:	09 fe                	or     esi,edi
c0027179:	c1 e6 17             	shl    esi,0x17
c002717c:	09 c6                	or     esi,eax
c002717e:	f6 c2 7f             	test   dl,0x7f
c0027181:	0f 95 c1             	setne  cl
c0027184:	09 c8                	or     eax,ecx
c0027186:	83 e0 01             	and    eax,0x1
c0027189:	c1 ea 07             	shr    edx,0x7
c002718c:	21 c2                	and    edx,eax
c002718e:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0027191:	eb 0a                	jmp    c002719d <__divsf3+0x221>
c0027193:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0027198:	eb 03                	jmp    c002719d <__divsf3+0x221>
c002719a:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c002719d:	89 d8                	mov    eax,ebx
c002719f:	8d 65 f4             	lea    esp,[ebp-0xc]
c00271a2:	5b                   	pop    ebx
c00271a3:	5e                   	pop    esi
c00271a4:	5f                   	pop    edi
c00271a5:	5d                   	pop    ebp
c00271a6:	c3                   	ret    

c00271a7 <__floatsisf>:
c00271a7:	55                   	push   ebp
c00271a8:	89 e5                	mov    ebp,esp
c00271aa:	53                   	push   ebx
c00271ab:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00271ae:	85 d2                	test   edx,edx
c00271b0:	7e 2b                	jle    c00271dd <__floatsisf+0x36>
c00271b2:	0f bd ca             	bsr    ecx,edx
c00271b5:	83 f1 1f             	xor    ecx,0x1f
c00271b8:	d3 e2                	shl    edx,cl
c00271ba:	89 d0                	mov    eax,edx
c00271bc:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00271c1:	89 c3                	mov    ebx,eax
c00271c3:	c1 eb 08             	shr    ebx,0x8
c00271c6:	80 e2 7f             	and    dl,0x7f
c00271c9:	0f 95 c2             	setne  dl
c00271cc:	09 da                	or     edx,ebx
c00271ce:	83 e2 01             	and    edx,0x1
c00271d1:	c1 e8 07             	shr    eax,0x7
c00271d4:	21 c2                	and    edx,eax
c00271d6:	b8 9e 00 00 00       	mov    eax,0x9e
c00271db:	eb 32                	jmp    c002720f <__floatsisf+0x68>
c00271dd:	b8 00 00 00 00       	mov    eax,0x0
c00271e2:	74 34                	je     c0027218 <__floatsisf+0x71>
c00271e4:	f7 da                	neg    edx
c00271e6:	0f bd ca             	bsr    ecx,edx
c00271e9:	83 f1 1f             	xor    ecx,0x1f
c00271ec:	d3 e2                	shl    edx,cl
c00271ee:	89 d0                	mov    eax,edx
c00271f0:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00271f5:	89 c3                	mov    ebx,eax
c00271f7:	c1 eb 08             	shr    ebx,0x8
c00271fa:	80 e2 7f             	and    dl,0x7f
c00271fd:	0f 95 c2             	setne  dl
c0027200:	09 da                	or     edx,ebx
c0027202:	83 e2 01             	and    edx,0x1
c0027205:	c1 e8 07             	shr    eax,0x7
c0027208:	21 c2                	and    edx,eax
c002720a:	b8 9e 01 00 00       	mov    eax,0x19e
c002720f:	29 c8                	sub    eax,ecx
c0027211:	c1 e0 17             	shl    eax,0x17
c0027214:	09 d8                	or     eax,ebx
c0027216:	01 d0                	add    eax,edx
c0027218:	5b                   	pop    ebx
c0027219:	5d                   	pop    ebp
c002721a:	c3                   	ret    

c002721b <__floatunsisf>:
c002721b:	55                   	push   ebp
c002721c:	89 e5                	mov    ebp,esp
c002721e:	53                   	push   ebx
c002721f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027222:	31 c0                	xor    eax,eax
c0027224:	85 d2                	test   edx,edx
c0027226:	74 32                	je     c002725a <__floatunsisf+0x3f>
c0027228:	0f bd ca             	bsr    ecx,edx
c002722b:	83 f1 1f             	xor    ecx,0x1f
c002722e:	d3 e2                	shl    edx,cl
c0027230:	89 d0                	mov    eax,edx
c0027232:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027237:	89 c3                	mov    ebx,eax
c0027239:	c1 eb 08             	shr    ebx,0x8
c002723c:	80 e2 7f             	and    dl,0x7f
c002723f:	0f 95 c2             	setne  dl
c0027242:	09 da                	or     edx,ebx
c0027244:	83 e2 01             	and    edx,0x1
c0027247:	c1 e8 07             	shr    eax,0x7
c002724a:	21 c2                	and    edx,eax
c002724c:	b8 9e 00 00 00       	mov    eax,0x9e
c0027251:	29 c8                	sub    eax,ecx
c0027253:	c1 e0 17             	shl    eax,0x17
c0027256:	09 d8                	or     eax,ebx
c0027258:	01 d0                	add    eax,edx
c002725a:	5b                   	pop    ebx
c002725b:	5d                   	pop    ebp
c002725c:	c3                   	ret    

c002725d <__fixsfsi>:
c002725d:	55                   	push   ebp
c002725e:	89 e5                	mov    ebp,esp
c0027260:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027263:	89 d1                	mov    ecx,edx
c0027265:	c1 e1 08             	shl    ecx,0x8
c0027268:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c002726e:	c1 fa 17             	sar    edx,0x17
c0027271:	78 1c                	js     c002728f <__fixsfsi+0x32>
c0027273:	83 ea 7f             	sub    edx,0x7f
c0027276:	31 c0                	xor    eax,eax
c0027278:	83 fa 1e             	cmp    edx,0x1e
c002727b:	77 40                	ja     c00272bd <__fixsfsi+0x60>
c002727d:	89 c8                	mov    eax,ecx
c002727f:	0d 00 00 00 80       	or     eax,0x80000000
c0027284:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027289:	29 d1                	sub    ecx,edx
c002728b:	d3 e8                	shr    eax,cl
c002728d:	eb 2e                	jmp    c00272bd <__fixsfsi+0x60>
c002728f:	31 c0                	xor    eax,eax
c0027291:	81 c2 81 00 00 00    	add    edx,0x81
c0027297:	78 24                	js     c00272bd <__fixsfsi+0x60>
c0027299:	83 fa 1e             	cmp    edx,0x1e
c002729c:	7e 09                	jle    c00272a7 <__fixsfsi+0x4a>
c002729e:	83 fa 1f             	cmp    edx,0x1f
c00272a1:	75 18                	jne    c00272bb <__fixsfsi+0x5e>
c00272a3:	85 c9                	test   ecx,ecx
c00272a5:	75 14                	jne    c00272bb <__fixsfsi+0x5e>
c00272a7:	89 c8                	mov    eax,ecx
c00272a9:	0d 00 00 00 80       	or     eax,0x80000000
c00272ae:	b9 1f 00 00 00       	mov    ecx,0x1f
c00272b3:	29 d1                	sub    ecx,edx
c00272b5:	d3 e8                	shr    eax,cl
c00272b7:	f7 d8                	neg    eax
c00272b9:	eb 02                	jmp    c00272bd <__fixsfsi+0x60>
c00272bb:	31 c0                	xor    eax,eax
c00272bd:	5d                   	pop    ebp
c00272be:	c3                   	ret    

c00272bf <__fixunssfsi>:
c00272bf:	55                   	push   ebp
c00272c0:	89 e5                	mov    ebp,esp
c00272c2:	53                   	push   ebx
c00272c3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00272c6:	89 d3                	mov    ebx,edx
c00272c8:	c1 fb 17             	sar    ebx,0x17
c00272cb:	83 eb 7f             	sub    ebx,0x7f
c00272ce:	31 c0                	xor    eax,eax
c00272d0:	83 fb 1f             	cmp    ebx,0x1f
c00272d3:	77 18                	ja     c00272ed <__fixunssfsi+0x2e>
c00272d5:	89 d0                	mov    eax,edx
c00272d7:	c1 e0 08             	shl    eax,0x8
c00272da:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00272df:	0d 00 00 00 80       	or     eax,0x80000000
c00272e4:	b9 1f 00 00 00       	mov    ecx,0x1f
c00272e9:	29 d9                	sub    ecx,ebx
c00272eb:	d3 e8                	shr    eax,cl
c00272ed:	5b                   	pop    ebx
c00272ee:	5d                   	pop    ebp
c00272ef:	c3                   	ret    

c00272f0 <__cmpsf2>:
c00272f0:	55                   	push   ebp
c00272f1:	89 e5                	mov    ebp,esp
c00272f3:	57                   	push   edi
c00272f4:	56                   	push   esi
c00272f5:	53                   	push   ebx
c00272f6:	83 ec 24             	sub    esp,0x24
c00272f9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00272fc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00272ff:	e8 4f 10 00 00       	call   c0028353 <__truncdfsf2>
c0027304:	5a                   	pop    edx
c0027305:	59                   	pop    ecx
c0027306:	89 c3                	mov    ebx,eax
c0027308:	c1 e8 17             	shr    eax,0x17
c002730b:	0f b6 f0             	movzx  esi,al
c002730e:	89 d8                	mov    eax,ebx
c0027310:	c1 e8 1f             	shr    eax,0x1f
c0027313:	31 c6                	xor    esi,eax
c0027315:	c1 e3 08             	shl    ebx,0x8
c0027318:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002731b:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002731e:	e8 30 10 00 00       	call   c0028353 <__truncdfsf2>
c0027323:	83 c4 10             	add    esp,0x10
c0027326:	89 c1                	mov    ecx,eax
c0027328:	c1 e9 17             	shr    ecx,0x17
c002732b:	0f b6 c9             	movzx  ecx,cl
c002732e:	89 c7                	mov    edi,eax
c0027330:	c1 ef 1f             	shr    edi,0x1f
c0027333:	89 ca                	mov    edx,ecx
c0027335:	31 fa                	xor    edx,edi
c0027337:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c002733a:	c1 e0 08             	shl    eax,0x8
c002733d:	89 c2                	mov    edx,eax
c002733f:	89 d8                	mov    eax,ebx
c0027341:	09 d0                	or     eax,edx
c0027343:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027348:	09 f0                	or     eax,esi
c002734a:	75 08                	jne    c0027354 <__cmpsf2+0x64>
c002734c:	31 c0                	xor    eax,eax
c002734e:	39 f9                	cmp    ecx,edi
c0027350:	75 0c                	jne    c002735e <__cmpsf2+0x6e>
c0027352:	eb 29                	jmp    c002737d <__cmpsf2+0x8d>
c0027354:	b8 01 00 00 00       	mov    eax,0x1
c0027359:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c002735c:	7f 1f                	jg     c002737d <__cmpsf2+0x8d>
c002735e:	83 c8 ff             	or     eax,0xffffffff
c0027361:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027364:	7c 17                	jl     c002737d <__cmpsf2+0x8d>
c0027366:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c002736c:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0027372:	b8 01 00 00 00       	mov    eax,0x1
c0027377:	39 d3                	cmp    ebx,edx
c0027379:	77 02                	ja     c002737d <__cmpsf2+0x8d>
c002737b:	19 c0                	sbb    eax,eax
c002737d:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027380:	5b                   	pop    ebx
c0027381:	5e                   	pop    esi
c0027382:	5f                   	pop    edi
c0027383:	5d                   	pop    ebp
c0027384:	c3                   	ret    

c0027385 <__eqsf2>:
c0027385:	55                   	push   ebp
c0027386:	89 e5                	mov    ebp,esp
c0027388:	83 ec 24             	sub    esp,0x24
c002738b:	6a 01                	push   0x1
c002738d:	83 ec 0c             	sub    esp,0xc
c0027390:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027393:	e8 df 10 00 00       	call   c0028477 <__extendsfdf2>
c0027398:	83 c4 10             	add    esp,0x10
c002739b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002739e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00273a1:	52                   	push   edx
c00273a2:	50                   	push   eax
c00273a3:	50                   	push   eax
c00273a4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00273a7:	e8 cb 10 00 00       	call   c0028477 <__extendsfdf2>
c00273ac:	59                   	pop    ecx
c00273ad:	59                   	pop    ecx
c00273ae:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00273b1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00273b4:	52                   	push   edx
c00273b5:	50                   	push   eax
c00273b6:	e8 35 ff ff ff       	call   c00272f0 <__cmpsf2>
c00273bb:	83 c4 20             	add    esp,0x20
c00273be:	c9                   	leave  
c00273bf:	c3                   	ret    

c00273c0 <__nesf2>:
c00273c0:	eb c3                	jmp    c0027385 <__eqsf2>

c00273c2 <__gtsf2>:
c00273c2:	55                   	push   ebp
c00273c3:	89 e5                	mov    ebp,esp
c00273c5:	83 ec 24             	sub    esp,0x24
c00273c8:	6a ff                	push   0xffffffff
c00273ca:	83 ec 0c             	sub    esp,0xc
c00273cd:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00273d0:	e8 a2 10 00 00       	call   c0028477 <__extendsfdf2>
c00273d5:	83 c4 10             	add    esp,0x10
c00273d8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00273db:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00273de:	52                   	push   edx
c00273df:	50                   	push   eax
c00273e0:	50                   	push   eax
c00273e1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00273e4:	e8 8e 10 00 00       	call   c0028477 <__extendsfdf2>
c00273e9:	59                   	pop    ecx
c00273ea:	59                   	pop    ecx
c00273eb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00273ee:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00273f1:	52                   	push   edx
c00273f2:	50                   	push   eax
c00273f3:	e8 f8 fe ff ff       	call   c00272f0 <__cmpsf2>
c00273f8:	83 c4 20             	add    esp,0x20
c00273fb:	c9                   	leave  
c00273fc:	c3                   	ret    

c00273fd <__gesf2>:
c00273fd:	eb c3                	jmp    c00273c2 <__gtsf2>

c00273ff <__ltsf2>:
c00273ff:	eb 84                	jmp    c0027385 <__eqsf2>

c0027401 <__lesf2>:
c0027401:	eb 82                	jmp    c0027385 <__eqsf2>

c0027403 <__adddf3>:
c0027403:	55                   	push   ebp
c0027404:	89 e5                	mov    ebp,esp
c0027406:	57                   	push   edi
c0027407:	56                   	push   esi
c0027408:	53                   	push   ebx
c0027409:	83 ec 24             	sub    esp,0x24
c002740c:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002740f:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027412:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027415:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027418:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002741b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002741e:	89 c8                	mov    eax,ecx
c0027420:	89 ce                	mov    esi,ecx
c0027422:	c1 fe 14             	sar    esi,0x14
c0027425:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0027428:	89 fb                	mov    ebx,edi
c002742a:	89 fa                	mov    edx,edi
c002742c:	c1 e2 0b             	shl    edx,0xb
c002742f:	c1 e0 0b             	shl    eax,0xb
c0027432:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027437:	c1 eb 15             	shr    ebx,0x15
c002743a:	09 d8                	or     eax,ebx
c002743c:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c002743f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027442:	c1 fe 14             	sar    esi,0x14
c0027445:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027448:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002744b:	89 f3                	mov    ebx,esi
c002744d:	c1 e3 0b             	shl    ebx,0xb
c0027450:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027453:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027456:	c1 e3 0b             	shl    ebx,0xb
c0027459:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c002745f:	c1 ee 15             	shr    esi,0x15
c0027462:	09 f3                	or     ebx,esi
c0027464:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0027467:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002746a:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c002746d:	0f 88 5f 02 00 00    	js     c00276d2 <__adddf3+0x2cf>
c0027473:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027476:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0027479:	85 db                	test   ebx,ebx
c002747b:	0f 8e c7 00 00 00    	jle    c0027548 <__adddf3+0x145>
c0027481:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0027488:	75 1a                	jne    c00274a4 <__adddf3+0xa1>
c002748a:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002748d:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027490:	0f 84 b2 05 00 00    	je     c0027a48 <__adddf3+0x645>
c0027496:	4b                   	dec    ebx
c0027497:	75 23                	jne    c00274bc <__adddf3+0xb9>
c0027499:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002749c:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c002749f:	e9 99 00 00 00       	jmp    c002753d <__adddf3+0x13a>
c00274a4:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00274a7:	f7 d6                	not    esi
c00274a9:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00274af:	0f 84 93 05 00 00    	je     c0027a48 <__adddf3+0x645>
c00274b5:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00274bc:	83 fb 1f             	cmp    ebx,0x1f
c00274bf:	7e 42                	jle    c0027503 <__adddf3+0x100>
c00274c1:	83 fb 3f             	cmp    ebx,0x3f
c00274c4:	0f 8f 7e 05 00 00    	jg     c0027a48 <__adddf3+0x645>
c00274ca:	83 e3 1f             	and    ebx,0x1f
c00274cd:	89 d9                	mov    ecx,ebx
c00274cf:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00274d2:	d3 ef                	shr    edi,cl
c00274d4:	31 db                	xor    ebx,ebx
c00274d6:	85 c9                	test   ecx,ecx
c00274d8:	74 15                	je     c00274ef <__adddf3+0xec>
c00274da:	be 20 00 00 00       	mov    esi,0x20
c00274df:	29 ce                	sub    esi,ecx
c00274e1:	89 f1                	mov    ecx,esi
c00274e3:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00274e6:	d3 e6                	shl    esi,cl
c00274e8:	31 db                	xor    ebx,ebx
c00274ea:	85 f6                	test   esi,esi
c00274ec:	0f 95 c3             	setne  bl
c00274ef:	31 c9                	xor    ecx,ecx
c00274f1:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00274f5:	0f 95 c1             	setne  cl
c00274f8:	09 cf                	or     edi,ecx
c00274fa:	09 fb                	or     ebx,edi
c00274fc:	01 da                	add    edx,ebx
c00274fe:	83 d0 00             	adc    eax,0x0
c0027501:	eb 3a                	jmp    c002753d <__adddf3+0x13a>
c0027503:	bf 20 00 00 00       	mov    edi,0x20
c0027508:	29 df                	sub    edi,ebx
c002750a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002750d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027510:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027513:	d3 e6                	shl    esi,cl
c0027515:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027518:	88 d9                	mov    cl,bl
c002751a:	d3 ef                	shr    edi,cl
c002751c:	09 fe                	or     esi,edi
c002751e:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027521:	88 d9                	mov    cl,bl
c0027523:	d3 ef                	shr    edi,cl
c0027525:	89 fb                	mov    ebx,edi
c0027527:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002752a:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002752d:	d3 e7                	shl    edi,cl
c002752f:	85 ff                	test   edi,edi
c0027531:	0f 95 c1             	setne  cl
c0027534:	0f b6 c9             	movzx  ecx,cl
c0027537:	09 ce                	or     esi,ecx
c0027539:	01 f2                	add    edx,esi
c002753b:	11 d8                	adc    eax,ebx
c002753d:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027540:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027543:	e9 52 01 00 00       	jmp    c002769a <__adddf3+0x297>
c0027548:	0f 84 d5 00 00 00    	je     c0027623 <__adddf3+0x220>
c002754e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027551:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0027554:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027557:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002755a:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027561:	75 20                	jne    c0027583 <__adddf3+0x180>
c0027563:	89 d6                	mov    esi,edx
c0027565:	09 c6                	or     esi,eax
c0027567:	0f 84 db 04 00 00    	je     c0027a48 <__adddf3+0x645>
c002756d:	4b                   	dec    ebx
c002756e:	75 29                	jne    c0027599 <__adddf3+0x196>
c0027570:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027573:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027576:	01 d1                	add    ecx,edx
c0027578:	11 c6                	adc    esi,eax
c002757a:	89 f0                	mov    eax,esi
c002757c:	89 ca                	mov    edx,ecx
c002757e:	e9 17 01 00 00       	jmp    c002769a <__adddf3+0x297>
c0027583:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027586:	f7 d6                	not    esi
c0027588:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002758e:	0f 84 b4 04 00 00    	je     c0027a48 <__adddf3+0x645>
c0027594:	0d 00 00 00 80       	or     eax,0x80000000
c0027599:	83 fb 1f             	cmp    ebx,0x1f
c002759c:	7e 48                	jle    c00275e6 <__adddf3+0x1e3>
c002759e:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00275a1:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00275a4:	83 fb 3f             	cmp    ebx,0x3f
c00275a7:	0f 8f 9b 04 00 00    	jg     c0027a48 <__adddf3+0x645>
c00275ad:	83 e3 1f             	and    ebx,0x1f
c00275b0:	89 d9                	mov    ecx,ebx
c00275b2:	89 c7                	mov    edi,eax
c00275b4:	d3 ef                	shr    edi,cl
c00275b6:	31 db                	xor    ebx,ebx
c00275b8:	85 c9                	test   ecx,ecx
c00275ba:	74 12                	je     c00275ce <__adddf3+0x1cb>
c00275bc:	be 20 00 00 00       	mov    esi,0x20
c00275c1:	29 ce                	sub    esi,ecx
c00275c3:	89 f1                	mov    ecx,esi
c00275c5:	d3 e0                	shl    eax,cl
c00275c7:	31 db                	xor    ebx,ebx
c00275c9:	85 c0                	test   eax,eax
c00275cb:	0f 95 c3             	setne  bl
c00275ce:	31 c0                	xor    eax,eax
c00275d0:	85 d2                	test   edx,edx
c00275d2:	0f 95 c0             	setne  al
c00275d5:	09 c7                	or     edi,eax
c00275d7:	09 fb                	or     ebx,edi
c00275d9:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00275dc:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00275df:	01 da                	add    edx,ebx
c00275e1:	83 d6 00             	adc    esi,0x0
c00275e4:	eb 39                	jmp    c002761f <__adddf3+0x21c>
c00275e6:	be 20 00 00 00       	mov    esi,0x20
c00275eb:	29 de                	sub    esi,ebx
c00275ed:	89 c7                	mov    edi,eax
c00275ef:	89 f1                	mov    ecx,esi
c00275f1:	d3 e7                	shl    edi,cl
c00275f3:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00275f6:	89 d7                	mov    edi,edx
c00275f8:	88 d9                	mov    cl,bl
c00275fa:	d3 ef                	shr    edi,cl
c00275fc:	89 f9                	mov    ecx,edi
c00275fe:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027601:	09 cf                	or     edi,ecx
c0027603:	88 d9                	mov    cl,bl
c0027605:	d3 e8                	shr    eax,cl
c0027607:	89 f1                	mov    ecx,esi
c0027609:	d3 e2                	shl    edx,cl
c002760b:	85 d2                	test   edx,edx
c002760d:	0f 95 c2             	setne  dl
c0027610:	0f b6 d2             	movzx  edx,dl
c0027613:	09 d7                	or     edi,edx
c0027615:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027618:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002761b:	01 fa                	add    edx,edi
c002761d:	11 c6                	adc    esi,eax
c002761f:	89 f0                	mov    eax,esi
c0027621:	eb 77                	jmp    c002769a <__adddf3+0x297>
c0027623:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027626:	46                   	inc    esi
c0027627:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c002762a:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027630:	75 41                	jne    c0027673 <__adddf3+0x270>
c0027632:	89 d3                	mov    ebx,edx
c0027634:	09 c3                	or     ebx,eax
c0027636:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c002763d:	75 27                	jne    c0027666 <__adddf3+0x263>
c002763f:	85 db                	test   ebx,ebx
c0027641:	0f 84 fb 03 00 00    	je     c0027a42 <__adddf3+0x63f>
c0027647:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002764a:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c002764d:	0f 84 f5 03 00 00    	je     c0027a48 <__adddf3+0x645>
c0027653:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027656:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027659:	85 c0                	test   eax,eax
c002765b:	0f 89 91 03 00 00    	jns    c00279f2 <__adddf3+0x5ef>
c0027661:	e9 85 03 00 00       	jmp    c00279eb <__adddf3+0x5e8>
c0027666:	85 db                	test   ebx,ebx
c0027668:	0f 85 da 03 00 00    	jne    c0027a48 <__adddf3+0x645>
c002766e:	e9 cf 03 00 00       	jmp    c0027a42 <__adddf3+0x63f>
c0027673:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027676:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027679:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002767c:	f7 d1                	not    ecx
c002767e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027684:	0f 84 70 03 00 00    	je     c00279fa <__adddf3+0x5f7>
c002768a:	d1 ea                	shr    edx,1
c002768c:	89 c1                	mov    ecx,eax
c002768e:	c1 e1 1f             	shl    ecx,0x1f
c0027691:	09 ca                	or     edx,ecx
c0027693:	d1 e8                	shr    eax,1
c0027695:	e9 6f 03 00 00       	jmp    c0027a09 <__adddf3+0x606>
c002769a:	85 c0                	test   eax,eax
c002769c:	0f 89 67 03 00 00    	jns    c0027a09 <__adddf3+0x606>
c00276a2:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c00276a5:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00276a8:	f7 d1                	not    ecx
c00276aa:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00276b0:	0f 84 44 03 00 00    	je     c00279fa <__adddf3+0x5f7>
c00276b6:	89 d1                	mov    ecx,edx
c00276b8:	d1 e9                	shr    ecx,1
c00276ba:	83 e2 01             	and    edx,0x1
c00276bd:	09 ca                	or     edx,ecx
c00276bf:	89 c1                	mov    ecx,eax
c00276c1:	c1 e1 1f             	shl    ecx,0x1f
c00276c4:	09 ca                	or     edx,ecx
c00276c6:	d1 e8                	shr    eax,1
c00276c8:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00276cd:	e9 37 03 00 00       	jmp    c0027a09 <__adddf3+0x606>
c00276d2:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00276d5:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00276db:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c00276de:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00276e1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00276e7:	29 de                	sub    esi,ebx
c00276e9:	85 f6                	test   esi,esi
c00276eb:	0f 8e bd 00 00 00    	jle    c00277ae <__adddf3+0x3ab>
c00276f1:	85 db                	test   ebx,ebx
c00276f3:	75 17                	jne    c002770c <__adddf3+0x309>
c00276f5:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00276f8:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00276fb:	0f 84 47 03 00 00    	je     c0027a48 <__adddf3+0x645>
c0027701:	4e                   	dec    esi
c0027702:	75 20                	jne    c0027724 <__adddf3+0x321>
c0027704:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027707:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002770a:	eb 5b                	jmp    c0027767 <__adddf3+0x364>
c002770c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002770f:	f7 d3                	not    ebx
c0027711:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027717:	0f 84 2b 03 00 00    	je     c0027a48 <__adddf3+0x645>
c002771d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027724:	83 fe 1f             	cmp    esi,0x1f
c0027727:	7e 49                	jle    c0027772 <__adddf3+0x36f>
c0027729:	83 fe 3f             	cmp    esi,0x3f
c002772c:	0f 8f 16 03 00 00    	jg     c0027a48 <__adddf3+0x645>
c0027732:	83 e6 1f             	and    esi,0x1f
c0027735:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027738:	89 f1                	mov    ecx,esi
c002773a:	d3 ef                	shr    edi,cl
c002773c:	31 db                	xor    ebx,ebx
c002773e:	85 f6                	test   esi,esi
c0027740:	74 13                	je     c0027755 <__adddf3+0x352>
c0027742:	b9 20 00 00 00       	mov    ecx,0x20
c0027747:	29 f1                	sub    ecx,esi
c0027749:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002774c:	d3 e6                	shl    esi,cl
c002774e:	31 db                	xor    ebx,ebx
c0027750:	85 f6                	test   esi,esi
c0027752:	0f 95 c3             	setne  bl
c0027755:	31 c9                	xor    ecx,ecx
c0027757:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002775b:	0f 95 c1             	setne  cl
c002775e:	09 cf                	or     edi,ecx
c0027760:	09 fb                	or     ebx,edi
c0027762:	29 da                	sub    edx,ebx
c0027764:	83 d8 00             	sbb    eax,0x0
c0027767:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002776a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002776d:	e9 aa 01 00 00       	jmp    c002791c <__adddf3+0x519>
c0027772:	bf 20 00 00 00       	mov    edi,0x20
c0027777:	29 f7                	sub    edi,esi
c0027779:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002777c:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002777f:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027782:	d3 e3                	shl    ebx,cl
c0027784:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027787:	89 f1                	mov    ecx,esi
c0027789:	d3 ef                	shr    edi,cl
c002778b:	09 fb                	or     ebx,edi
c002778d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027790:	89 f1                	mov    ecx,esi
c0027792:	d3 ef                	shr    edi,cl
c0027794:	89 fe                	mov    esi,edi
c0027796:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027799:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002779c:	d3 e7                	shl    edi,cl
c002779e:	85 ff                	test   edi,edi
c00277a0:	0f 95 c1             	setne  cl
c00277a3:	0f b6 c9             	movzx  ecx,cl
c00277a6:	09 cb                	or     ebx,ecx
c00277a8:	29 da                	sub    edx,ebx
c00277aa:	19 f0                	sbb    eax,esi
c00277ac:	eb b9                	jmp    c0027767 <__adddf3+0x364>
c00277ae:	0f 84 cd 00 00 00    	je     c0027881 <__adddf3+0x47e>
c00277b4:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c00277b7:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00277ba:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00277bd:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00277c1:	75 1b                	jne    c00277de <__adddf3+0x3db>
c00277c3:	89 d6                	mov    esi,edx
c00277c5:	09 c6                	or     esi,eax
c00277c7:	0f 84 7b 02 00 00    	je     c0027a48 <__adddf3+0x645>
c00277cd:	4b                   	dec    ebx
c00277ce:	75 24                	jne    c00277f4 <__adddf3+0x3f1>
c00277d0:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00277d3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00277d6:	29 d1                	sub    ecx,edx
c00277d8:	19 c6                	sbb    esi,eax
c00277da:	89 ca                	mov    edx,ecx
c00277dc:	eb 61                	jmp    c002783f <__adddf3+0x43c>
c00277de:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00277e1:	f7 d6                	not    esi
c00277e3:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00277e9:	0f 84 59 02 00 00    	je     c0027a48 <__adddf3+0x645>
c00277ef:	0d 00 00 00 80       	or     eax,0x80000000
c00277f4:	83 fb 1f             	cmp    ebx,0x1f
c00277f7:	7e 4d                	jle    c0027846 <__adddf3+0x443>
c00277f9:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00277fc:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00277ff:	83 fb 3f             	cmp    ebx,0x3f
c0027802:	0f 8f 40 02 00 00    	jg     c0027a48 <__adddf3+0x645>
c0027808:	83 e3 1f             	and    ebx,0x1f
c002780b:	89 d9                	mov    ecx,ebx
c002780d:	89 c7                	mov    edi,eax
c002780f:	d3 ef                	shr    edi,cl
c0027811:	31 db                	xor    ebx,ebx
c0027813:	85 c9                	test   ecx,ecx
c0027815:	74 12                	je     c0027829 <__adddf3+0x426>
c0027817:	be 20 00 00 00       	mov    esi,0x20
c002781c:	29 ce                	sub    esi,ecx
c002781e:	89 f1                	mov    ecx,esi
c0027820:	d3 e0                	shl    eax,cl
c0027822:	31 db                	xor    ebx,ebx
c0027824:	85 c0                	test   eax,eax
c0027826:	0f 95 c3             	setne  bl
c0027829:	31 c0                	xor    eax,eax
c002782b:	85 d2                	test   edx,edx
c002782d:	0f 95 c0             	setne  al
c0027830:	09 c7                	or     edi,eax
c0027832:	09 fb                	or     ebx,edi
c0027834:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027837:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002783a:	29 da                	sub    edx,ebx
c002783c:	83 de 00             	sbb    esi,0x0
c002783f:	89 f0                	mov    eax,esi
c0027841:	e9 d6 00 00 00       	jmp    c002791c <__adddf3+0x519>
c0027846:	be 20 00 00 00       	mov    esi,0x20
c002784b:	29 de                	sub    esi,ebx
c002784d:	89 c7                	mov    edi,eax
c002784f:	89 f1                	mov    ecx,esi
c0027851:	d3 e7                	shl    edi,cl
c0027853:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027856:	89 d7                	mov    edi,edx
c0027858:	88 d9                	mov    cl,bl
c002785a:	d3 ef                	shr    edi,cl
c002785c:	89 f9                	mov    ecx,edi
c002785e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027861:	09 cf                	or     edi,ecx
c0027863:	88 d9                	mov    cl,bl
c0027865:	d3 e8                	shr    eax,cl
c0027867:	89 f1                	mov    ecx,esi
c0027869:	d3 e2                	shl    edx,cl
c002786b:	85 d2                	test   edx,edx
c002786d:	0f 95 c2             	setne  dl
c0027870:	0f b6 d2             	movzx  edx,dl
c0027873:	09 d7                	or     edi,edx
c0027875:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027878:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002787b:	29 fa                	sub    edx,edi
c002787d:	19 c6                	sbb    esi,eax
c002787f:	eb be                	jmp    c002783f <__adddf3+0x43c>
c0027881:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027884:	8d 5e 01             	lea    ebx,[esi+0x1]
c0027887:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c002788d:	75 6a                	jne    c00278f9 <__adddf3+0x4f6>
c002788f:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027893:	75 58                	jne    c00278ed <__adddf3+0x4ea>
c0027895:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027898:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002789b:	89 d6                	mov    esi,edx
c002789d:	09 c6                	or     esi,eax
c002789f:	75 17                	jne    c00278b8 <__adddf3+0x4b5>
c00278a1:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00278a4:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00278a7:	85 db                	test   ebx,ebx
c00278a9:	0f 85 99 01 00 00    	jne    c0027a48 <__adddf3+0x645>
c00278af:	31 ff                	xor    edi,edi
c00278b1:	31 c9                	xor    ecx,ecx
c00278b3:	e9 90 01 00 00       	jmp    c0027a48 <__adddf3+0x645>
c00278b8:	85 db                	test   ebx,ebx
c00278ba:	0f 84 88 01 00 00    	je     c0027a48 <__adddf3+0x645>
c00278c0:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00278c3:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00278c6:	85 c0                	test   eax,eax
c00278c8:	79 10                	jns    c00278da <__adddf3+0x4d7>
c00278ca:	31 c9                	xor    ecx,ecx
c00278cc:	f7 da                	neg    edx
c00278ce:	0f 95 c1             	setne  cl
c00278d1:	01 c8                	add    eax,ecx
c00278d3:	f7 d8                	neg    eax
c00278d5:	e9 2f 01 00 00       	jmp    c0027a09 <__adddf3+0x606>
c00278da:	31 ff                	xor    edi,edi
c00278dc:	31 c9                	xor    ecx,ecx
c00278de:	89 c3                	mov    ebx,eax
c00278e0:	09 d3                	or     ebx,edx
c00278e2:	0f 84 60 01 00 00    	je     c0027a48 <__adddf3+0x645>
c00278e8:	e9 05 01 00 00       	jmp    c00279f2 <__adddf3+0x5ef>
c00278ed:	31 ff                	xor    edi,edi
c00278ef:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c00278f4:	e9 4f 01 00 00       	jmp    c0027a48 <__adddf3+0x645>
c00278f9:	89 c1                	mov    ecx,eax
c00278fb:	89 d0                	mov    eax,edx
c00278fd:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0027900:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0027903:	89 ca                	mov    edx,ecx
c0027905:	85 c9                	test   ecx,ecx
c0027907:	79 2c                	jns    c0027935 <__adddf3+0x532>
c0027909:	31 c9                	xor    ecx,ecx
c002790b:	f7 d8                	neg    eax
c002790d:	0f 95 c1             	setne  cl
c0027910:	01 ca                	add    edx,ecx
c0027912:	f7 da                	neg    edx
c0027914:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027917:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002791a:	eb 19                	jmp    c0027935 <__adddf3+0x532>
c002791c:	85 c0                	test   eax,eax
c002791e:	0f 89 e5 00 00 00    	jns    c0027a09 <__adddf3+0x606>
c0027924:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027929:	89 c1                	mov    ecx,eax
c002792b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002792e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027931:	89 d0                	mov    eax,edx
c0027933:	89 ca                	mov    edx,ecx
c0027935:	85 d2                	test   edx,edx
c0027937:	74 59                	je     c0027992 <__adddf3+0x58f>
c0027939:	0f bd da             	bsr    ebx,edx
c002793c:	83 f3 1f             	xor    ebx,0x1f
c002793f:	88 d9                	mov    cl,bl
c0027941:	d3 e2                	shl    edx,cl
c0027943:	bf 20 00 00 00       	mov    edi,0x20
c0027948:	89 f9                	mov    ecx,edi
c002794a:	29 d9                	sub    ecx,ebx
c002794c:	89 c6                	mov    esi,eax
c002794e:	d3 ee                	shr    esi,cl
c0027950:	09 d6                	or     esi,edx
c0027952:	88 d9                	mov    cl,bl
c0027954:	d3 e0                	shl    eax,cl
c0027956:	89 c2                	mov    edx,eax
c0027958:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002795b:	25 ff 07 00 00       	and    eax,0x7ff
c0027960:	39 d8                	cmp    eax,ebx
c0027962:	7f 22                	jg     c0027986 <__adddf3+0x583>
c0027964:	29 c3                	sub    ebx,eax
c0027966:	43                   	inc    ebx
c0027967:	88 d9                	mov    cl,bl
c0027969:	d3 ea                	shr    edx,cl
c002796b:	29 df                	sub    edi,ebx
c002796d:	89 f9                	mov    ecx,edi
c002796f:	89 f0                	mov    eax,esi
c0027971:	d3 e0                	shl    eax,cl
c0027973:	09 c2                	or     edx,eax
c0027975:	89 f0                	mov    eax,esi
c0027977:	88 d9                	mov    cl,bl
c0027979:	d3 e8                	shr    eax,cl
c002797b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002797e:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0027984:	eb 6f                	jmp    c00279f5 <__adddf3+0x5f2>
c0027986:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027989:	29 d8                	sub    eax,ebx
c002798b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002798e:	89 f0                	mov    eax,esi
c0027990:	eb 59                	jmp    c00279eb <__adddf3+0x5e8>
c0027992:	85 c0                	test   eax,eax
c0027994:	74 6a                	je     c0027a00 <__adddf3+0x5fd>
c0027996:	0f bd c8             	bsr    ecx,eax
c0027999:	83 f1 1f             	xor    ecx,0x1f
c002799c:	d3 e0                	shl    eax,cl
c002799e:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00279a1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00279a7:	83 c1 20             	add    ecx,0x20
c00279aa:	39 cb                	cmp    ebx,ecx
c00279ac:	7f 35                	jg     c00279e3 <__adddf3+0x5e0>
c00279ae:	29 d9                	sub    ecx,ebx
c00279b0:	8d 71 01             	lea    esi,[ecx+0x1]
c00279b3:	83 fe 1f             	cmp    esi,0x1f
c00279b6:	7e 09                	jle    c00279c1 <__adddf3+0x5be>
c00279b8:	83 e9 1f             	sub    ecx,0x1f
c00279bb:	d3 e8                	shr    eax,cl
c00279bd:	89 c3                	mov    ebx,eax
c00279bf:	eb 11                	jmp    c00279d2 <__adddf3+0x5cf>
c00279c1:	b9 20 00 00 00       	mov    ecx,0x20
c00279c6:	29 f1                	sub    ecx,esi
c00279c8:	89 c3                	mov    ebx,eax
c00279ca:	d3 e3                	shl    ebx,cl
c00279cc:	89 f1                	mov    ecx,esi
c00279ce:	d3 e8                	shr    eax,cl
c00279d0:	89 c2                	mov    edx,eax
c00279d2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00279d5:	25 00 f8 ff ff       	and    eax,0xfffff800
c00279da:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00279dd:	89 d0                	mov    eax,edx
c00279df:	89 da                	mov    edx,ebx
c00279e1:	eb 26                	jmp    c0027a09 <__adddf3+0x606>
c00279e3:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00279e6:	29 cf                	sub    edi,ecx
c00279e8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00279eb:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00279f0:	eb 17                	jmp    c0027a09 <__adddf3+0x606>
c00279f2:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00279f5:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00279f8:	eb 0f                	jmp    c0027a09 <__adddf3+0x606>
c00279fa:	31 d2                	xor    edx,edx
c00279fc:	31 c0                	xor    eax,eax
c00279fe:	eb 09                	jmp    c0027a09 <__adddf3+0x606>
c0027a00:	89 c2                	mov    edx,eax
c0027a02:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0027a09:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027a0c:	c1 e1 14             	shl    ecx,0x14
c0027a0f:	89 c3                	mov    ebx,eax
c0027a11:	c1 eb 0b             	shr    ebx,0xb
c0027a14:	09 d9                	or     ecx,ebx
c0027a16:	89 d3                	mov    ebx,edx
c0027a18:	c1 eb 0b             	shr    ebx,0xb
c0027a1b:	c1 e0 15             	shl    eax,0x15
c0027a1e:	09 d8                	or     eax,ebx
c0027a20:	89 c7                	mov    edi,eax
c0027a22:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0027a28:	0f 95 c0             	setne  al
c0027a2b:	89 c6                	mov    esi,eax
c0027a2d:	09 f3                	or     ebx,esi
c0027a2f:	83 e3 01             	and    ebx,0x1
c0027a32:	c1 ea 0a             	shr    edx,0xa
c0027a35:	21 da                	and    edx,ebx
c0027a37:	89 f8                	mov    eax,edi
c0027a39:	01 d0                	add    eax,edx
c0027a3b:	83 d1 00             	adc    ecx,0x0
c0027a3e:	89 c7                	mov    edi,eax
c0027a40:	eb 06                	jmp    c0027a48 <__adddf3+0x645>
c0027a42:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027a45:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027a48:	89 f8                	mov    eax,edi
c0027a4a:	89 ca                	mov    edx,ecx
c0027a4c:	83 c4 24             	add    esp,0x24
c0027a4f:	5b                   	pop    ebx
c0027a50:	5e                   	pop    esi
c0027a51:	5f                   	pop    edi
c0027a52:	5d                   	pop    ebp
c0027a53:	c3                   	ret    

c0027a54 <__subdf3>:
c0027a54:	55                   	push   ebp
c0027a55:	89 e5                	mov    ebp,esp
c0027a57:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027a5a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027a5d:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027a63:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0027a66:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027a69:	5d                   	pop    ebp
c0027a6a:	e9 94 f9 ff ff       	jmp    c0027403 <__adddf3>

c0027a6f <__negdf2>:
c0027a6f:	55                   	push   ebp
c0027a70:	89 e5                	mov    ebp,esp
c0027a72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027a75:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027a78:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027a7e:	5d                   	pop    ebp
c0027a7f:	c3                   	ret    

c0027a80 <__muldf3>:
c0027a80:	55                   	push   ebp
c0027a81:	89 e5                	mov    ebp,esp
c0027a83:	57                   	push   edi
c0027a84:	56                   	push   esi
c0027a85:	53                   	push   ebx
c0027a86:	83 ec 24             	sub    esp,0x24
c0027a89:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027a8c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027a8f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027a92:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027a95:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027a98:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0027a9b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027a9e:	89 c8                	mov    eax,ecx
c0027aa0:	c1 f8 14             	sar    eax,0x14
c0027aa3:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027aa6:	89 f8                	mov    eax,edi
c0027aa8:	89 fb                	mov    ebx,edi
c0027aaa:	c1 e3 0b             	shl    ebx,0xb
c0027aad:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027ab0:	c1 e1 0b             	shl    ecx,0xb
c0027ab3:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027ab9:	c1 e8 15             	shr    eax,0x15
c0027abc:	09 c1                	or     ecx,eax
c0027abe:	89 d6                	mov    esi,edx
c0027ac0:	89 d0                	mov    eax,edx
c0027ac2:	c1 f8 14             	sar    eax,0x14
c0027ac5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027ac8:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0027acb:	89 c3                	mov    ebx,eax
c0027acd:	c1 e3 0b             	shl    ebx,0xb
c0027ad0:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027ad3:	c1 e6 0b             	shl    esi,0xb
c0027ad6:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027adc:	c1 e8 15             	shr    eax,0x15
c0027adf:	09 c6                	or     esi,eax
c0027ae1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027ae4:	25 ff 07 00 00       	and    eax,0x7ff
c0027ae9:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027aec:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027aef:	25 ff 07 00 00       	and    eax,0x7ff
c0027af4:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027af7:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027afa:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027afd:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0027b04:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027b07:	40                   	inc    eax
c0027b08:	a9 fe 07 00 00       	test   eax,0x7fe
c0027b0d:	0f 85 8d 00 00 00    	jne    c0027ba0 <__muldf3+0x120>
c0027b13:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027b16:	09 c8                	or     eax,ecx
c0027b18:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0027b1c:	74 44                	je     c0027b62 <__muldf3+0xe2>
c0027b1e:	85 c0                	test   eax,eax
c0027b20:	0f 85 31 02 00 00    	jne    c0027d57 <__muldf3+0x2d7>
c0027b26:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027b29:	40                   	inc    eax
c0027b2a:	a9 fe 07 00 00       	test   eax,0x7fe
c0027b2f:	75 13                	jne    c0027b44 <__muldf3+0xc4>
c0027b31:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027b34:	09 f1                	or     ecx,esi
c0027b36:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027b3a:	74 22                	je     c0027b5e <__muldf3+0xde>
c0027b3c:	85 c9                	test   ecx,ecx
c0027b3e:	0f 85 0d 02 00 00    	jne    c0027d51 <__muldf3+0x2d1>
c0027b44:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0027b48:	0f 89 09 02 00 00    	jns    c0027d57 <__muldf3+0x2d7>
c0027b4e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027b51:	05 00 00 00 80       	add    eax,0x80000000
c0027b56:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027b59:	e9 f9 01 00 00       	jmp    c0027d57 <__muldf3+0x2d7>
c0027b5e:	85 c9                	test   ecx,ecx
c0027b60:	eb 2e                	jmp    c0027b90 <__muldf3+0x110>
c0027b62:	85 c0                	test   eax,eax
c0027b64:	74 20                	je     c0027b86 <__muldf3+0x106>
c0027b66:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0027b69:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027b6c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027b6f:	c1 ef 1f             	shr    edi,0x1f
c0027b72:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0027b75:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027b78:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027b7b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027b7e:	09 f9                	or     ecx,edi
c0027b80:	78 1e                	js     c0027ba0 <__muldf3+0x120>
c0027b82:	89 c3                	mov    ebx,eax
c0027b84:	eb e0                	jmp    c0027b66 <__muldf3+0xe6>
c0027b86:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027b89:	f7 d0                	not    eax
c0027b8b:	a9 ff 07 00 00       	test   eax,0x7ff
c0027b90:	75 b2                	jne    c0027b44 <__muldf3+0xc4>
c0027b92:	31 ff                	xor    edi,edi
c0027b94:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0027b9b:	e9 b7 01 00 00       	jmp    c0027d57 <__muldf3+0x2d7>
c0027ba0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027ba3:	40                   	inc    eax
c0027ba4:	a9 fe 07 00 00       	test   eax,0x7fe
c0027ba9:	75 57                	jne    c0027c02 <__muldf3+0x182>
c0027bab:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0027bae:	09 f0                	or     eax,esi
c0027bb0:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027bb4:	74 23                	je     c0027bd9 <__muldf3+0x159>
c0027bb6:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027bba:	0f 89 91 01 00 00    	jns    c0027d51 <__muldf3+0x2d1>
c0027bc0:	85 c0                	test   eax,eax
c0027bc2:	0f 85 89 01 00 00    	jne    c0027d51 <__muldf3+0x2d1>
c0027bc8:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027bcb:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0027bd1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027bd4:	e9 7e 01 00 00       	jmp    c0027d57 <__muldf3+0x2d7>
c0027bd9:	85 c0                	test   eax,eax
c0027bdb:	75 0c                	jne    c0027be9 <__muldf3+0x169>
c0027bdd:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027be1:	0f 89 6a 01 00 00    	jns    c0027d51 <__muldf3+0x2d1>
c0027be7:	eb df                	jmp    c0027bc8 <__muldf3+0x148>
c0027be9:	01 f6                	add    esi,esi
c0027beb:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027bee:	c1 ea 1f             	shr    edx,0x1f
c0027bf1:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027bf4:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0027bf7:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027bfa:	09 d6                	or     esi,edx
c0027bfc:	78 04                	js     c0027c02 <__muldf3+0x182>
c0027bfe:	89 c3                	mov    ebx,eax
c0027c00:	eb e7                	jmp    c0027be9 <__muldf3+0x169>
c0027c02:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0027c08:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027c0e:	89 c8                	mov    eax,ecx
c0027c10:	f7 e6                	mul    esi
c0027c12:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0027c15:	89 c7                	mov    edi,eax
c0027c17:	89 c8                	mov    eax,ecx
c0027c19:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027c1c:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0027c1f:	89 c1                	mov    ecx,eax
c0027c21:	89 f0                	mov    eax,esi
c0027c23:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0027c26:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0027c29:	89 c6                	mov    esi,eax
c0027c2b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027c2e:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027c31:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027c34:	31 c0                	xor    eax,eax
c0027c36:	01 f1                	add    ecx,esi
c0027c38:	0f 92 c0             	setb   al
c0027c3b:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0027c3e:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027c41:	83 d6 00             	adc    esi,0x0
c0027c44:	01 c7                	add    edi,eax
c0027c46:	83 d6 00             	adc    esi,0x0
c0027c49:	01 ca                	add    edx,ecx
c0027c4b:	0f 92 c1             	setb   cl
c0027c4e:	0f b6 c9             	movzx  ecx,cl
c0027c51:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0027c54:	83 d6 00             	adc    esi,0x0
c0027c57:	01 cf                	add    edi,ecx
c0027c59:	83 d6 00             	adc    esi,0x0
c0027c5c:	31 c9                	xor    ecx,ecx
c0027c5e:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0027c61:	0f 95 c1             	setne  cl
c0027c64:	09 cf                	or     edi,ecx
c0027c66:	85 f6                	test   esi,esi
c0027c68:	78 0c                	js     c0027c76 <__muldf3+0x1f6>
c0027c6a:	01 f6                	add    esi,esi
c0027c6c:	89 f8                	mov    eax,edi
c0027c6e:	c1 e8 1f             	shr    eax,0x1f
c0027c71:	09 c6                	or     esi,eax
c0027c73:	01 ff                	add    edi,edi
c0027c75:	4b                   	dec    ebx
c0027c76:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0027c7c:	0f 8f 85 00 00 00    	jg     c0027d07 <__muldf3+0x287>
c0027c82:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027c88:	85 db                	test   ebx,ebx
c0027c8a:	0f 8f 84 00 00 00    	jg     c0027d14 <__muldf3+0x294>
c0027c90:	83 fb cc             	cmp    ebx,0xffffffcc
c0027c93:	7c 79                	jl     c0027d0e <__muldf3+0x28e>
c0027c95:	ba 01 00 00 00       	mov    edx,0x1
c0027c9a:	29 da                	sub    edx,ebx
c0027c9c:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027ca2:	83 fa 1f             	cmp    edx,0x1f
c0027ca5:	7e 30                	jle    c0027cd7 <__muldf3+0x257>
c0027ca7:	83 fa 20             	cmp    edx,0x20
c0027caa:	75 0b                	jne    c0027cb7 <__muldf3+0x237>
c0027cac:	31 c0                	xor    eax,eax
c0027cae:	85 ff                	test   edi,edi
c0027cb0:	0f 95 c0             	setne  al
c0027cb3:	89 c7                	mov    edi,eax
c0027cb5:	eb 1a                	jmp    c0027cd1 <__muldf3+0x251>
c0027cb7:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0027cba:	89 f0                	mov    eax,esi
c0027cbc:	d3 e0                	shl    eax,cl
c0027cbe:	09 f8                	or     eax,edi
c0027cc0:	0f 95 c0             	setne  al
c0027cc3:	0f b6 c0             	movzx  eax,al
c0027cc6:	89 c7                	mov    edi,eax
c0027cc8:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027ccd:	29 d9                	sub    ecx,ebx
c0027ccf:	d3 ee                	shr    esi,cl
c0027cd1:	09 f7                	or     edi,esi
c0027cd3:	31 db                	xor    ebx,ebx
c0027cd5:	eb 3b                	jmp    c0027d12 <__muldf3+0x292>
c0027cd7:	83 c3 1f             	add    ebx,0x1f
c0027cda:	89 f0                	mov    eax,esi
c0027cdc:	88 d9                	mov    cl,bl
c0027cde:	d3 e0                	shl    eax,cl
c0027ce0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027ce3:	89 f8                	mov    eax,edi
c0027ce5:	88 d1                	mov    cl,dl
c0027ce7:	d3 e8                	shr    eax,cl
c0027ce9:	89 c1                	mov    ecx,eax
c0027ceb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027cee:	09 c8                	or     eax,ecx
c0027cf0:	88 d9                	mov    cl,bl
c0027cf2:	d3 e7                	shl    edi,cl
c0027cf4:	31 db                	xor    ebx,ebx
c0027cf6:	85 ff                	test   edi,edi
c0027cf8:	0f 95 c3             	setne  bl
c0027cfb:	89 df                	mov    edi,ebx
c0027cfd:	09 c7                	or     edi,eax
c0027cff:	88 d1                	mov    cl,dl
c0027d01:	d3 ee                	shr    esi,cl
c0027d03:	31 db                	xor    ebx,ebx
c0027d05:	eb 0d                	jmp    c0027d14 <__muldf3+0x294>
c0027d07:	bb ff 07 00 00       	mov    ebx,0x7ff
c0027d0c:	eb 02                	jmp    c0027d10 <__muldf3+0x290>
c0027d0e:	31 db                	xor    ebx,ebx
c0027d10:	31 ff                	xor    edi,edi
c0027d12:	31 f6                	xor    esi,esi
c0027d14:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027d17:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0027d1a:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027d1f:	09 c3                	or     ebx,eax
c0027d21:	c1 e3 14             	shl    ebx,0x14
c0027d24:	89 f0                	mov    eax,esi
c0027d26:	c1 e8 0b             	shr    eax,0xb
c0027d29:	09 c3                	or     ebx,eax
c0027d2b:	89 f8                	mov    eax,edi
c0027d2d:	c1 e8 0b             	shr    eax,0xb
c0027d30:	c1 e6 15             	shl    esi,0x15
c0027d33:	09 c6                	or     esi,eax
c0027d35:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0027d3b:	0f 95 c1             	setne  cl
c0027d3e:	09 c8                	or     eax,ecx
c0027d40:	83 e0 01             	and    eax,0x1
c0027d43:	c1 ef 0a             	shr    edi,0xa
c0027d46:	21 c7                	and    edi,eax
c0027d48:	01 f7                	add    edi,esi
c0027d4a:	83 d3 00             	adc    ebx,0x0
c0027d4d:	89 da                	mov    edx,ebx
c0027d4f:	eb 03                	jmp    c0027d54 <__muldf3+0x2d4>
c0027d51:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027d54:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027d57:	89 f8                	mov    eax,edi
c0027d59:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027d5c:	83 c4 24             	add    esp,0x24
c0027d5f:	5b                   	pop    ebx
c0027d60:	5e                   	pop    esi
c0027d61:	5f                   	pop    edi
c0027d62:	5d                   	pop    ebp
c0027d63:	c3                   	ret    

c0027d64 <__divdf3>:
c0027d64:	55                   	push   ebp
c0027d65:	89 e5                	mov    ebp,esp
c0027d67:	57                   	push   edi
c0027d68:	56                   	push   esi
c0027d69:	53                   	push   ebx
c0027d6a:	83 ec 2c             	sub    esp,0x2c
c0027d6d:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027d70:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027d73:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027d76:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027d79:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027d7c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027d7f:	89 ce                	mov    esi,ecx
c0027d81:	89 c8                	mov    eax,ecx
c0027d83:	c1 f8 14             	sar    eax,0x14
c0027d86:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027d89:	89 f8                	mov    eax,edi
c0027d8b:	89 fb                	mov    ebx,edi
c0027d8d:	c1 e3 0b             	shl    ebx,0xb
c0027d90:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0027d93:	c1 e6 0b             	shl    esi,0xb
c0027d96:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027d9c:	c1 e8 15             	shr    eax,0x15
c0027d9f:	09 c6                	or     esi,eax
c0027da1:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0027da4:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027da7:	89 c2                	mov    edx,eax
c0027da9:	c1 fa 14             	sar    edx,0x14
c0027dac:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027daf:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027db2:	89 de                	mov    esi,ebx
c0027db4:	c1 e6 0b             	shl    esi,0xb
c0027db7:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027dba:	c1 e0 0b             	shl    eax,0xb
c0027dbd:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027dc2:	c1 eb 15             	shr    ebx,0x15
c0027dc5:	09 d8                	or     eax,ebx
c0027dc7:	89 c2                	mov    edx,eax
c0027dc9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027dcc:	25 ff 07 00 00       	and    eax,0x7ff
c0027dd1:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0027dd4:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027dd7:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027ddd:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0027de0:	29 d8                	sub    eax,ebx
c0027de2:	05 ff 03 00 00       	add    eax,0x3ff
c0027de7:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027dea:	46                   	inc    esi
c0027deb:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027df1:	0f 85 a5 00 00 00    	jne    c0027e9c <__divdf3+0x138>
c0027df7:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027dfa:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0027dfd:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0027e01:	74 2a                	je     c0027e2d <__divdf3+0xc9>
c0027e03:	85 f6                	test   esi,esi
c0027e05:	0f 85 cc 02 00 00    	jne    c00280d7 <__divdf3+0x373>
c0027e0b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027e0e:	40                   	inc    eax
c0027e0f:	a9 fe 07 00 00       	test   eax,0x7fe
c0027e14:	75 26                	jne    c0027e3c <__divdf3+0xd8>
c0027e16:	85 db                	test   ebx,ebx
c0027e18:	74 22                	je     c0027e3c <__divdf3+0xd8>
c0027e1a:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027e1d:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027e20:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027e23:	09 d0                	or     eax,edx
c0027e25:	0f 85 ac 02 00 00    	jne    c00280d7 <__divdf3+0x373>
c0027e2b:	eb 63                	jmp    c0027e90 <__divdf3+0x12c>
c0027e2d:	85 f6                	test   esi,esi
c0027e2f:	75 22                	jne    c0027e53 <__divdf3+0xef>
c0027e31:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027e34:	40                   	inc    eax
c0027e35:	a9 fe 07 00 00       	test   eax,0x7fe
c0027e3a:	74 36                	je     c0027e72 <__divdf3+0x10e>
c0027e3c:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027e40:	0f 89 91 02 00 00    	jns    c00280d7 <__divdf3+0x373>
c0027e46:	89 f8                	mov    eax,edi
c0027e48:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027e4e:	e9 80 02 00 00       	jmp    c00280d3 <__divdf3+0x36f>
c0027e53:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027e56:	01 f6                	add    esi,esi
c0027e58:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027e5b:	c1 ef 1f             	shr    edi,0x1f
c0027e5e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027e61:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0027e64:	8d 48 ff             	lea    ecx,[eax-0x1]
c0027e67:	09 f7                	or     edi,esi
c0027e69:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0027e6c:	78 2e                	js     c0027e9c <__divdf3+0x138>
c0027e6e:	89 c8                	mov    eax,ecx
c0027e70:	eb e1                	jmp    c0027e53 <__divdf3+0xef>
c0027e72:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027e75:	09 d0                	or     eax,edx
c0027e77:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027e7b:	74 0f                	je     c0027e8c <__divdf3+0x128>
c0027e7d:	85 c0                	test   eax,eax
c0027e7f:	74 bb                	je     c0027e3c <__divdf3+0xd8>
c0027e81:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027e84:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027e87:	e9 4b 02 00 00       	jmp    c00280d7 <__divdf3+0x373>
c0027e8c:	85 c0                	test   eax,eax
c0027e8e:	75 ac                	jne    c0027e3c <__divdf3+0xd8>
c0027e90:	31 ff                	xor    edi,edi
c0027e92:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027e97:	e9 3b 02 00 00       	jmp    c00280d7 <__divdf3+0x373>
c0027e9c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027e9f:	8d 4f 01             	lea    ecx,[edi+0x1]
c0027ea2:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0027ea8:	75 6b                	jne    c0027f15 <__divdf3+0x1b1>
c0027eaa:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027ead:	09 d6                	or     esi,edx
c0027eaf:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027eb3:	74 28                	je     c0027edd <__divdf3+0x179>
c0027eb5:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027eb8:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027ebb:	85 f6                	test   esi,esi
c0027ebd:	0f 85 14 02 00 00    	jne    c00280d7 <__divdf3+0x373>
c0027ec3:	31 ff                	xor    edi,edi
c0027ec5:	31 c9                	xor    ecx,ecx
c0027ec7:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027eca:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027ecd:	0f 89 04 02 00 00    	jns    c00280d7 <__divdf3+0x373>
c0027ed3:	b9 00 00 00 80       	mov    ecx,0x80000000
c0027ed8:	e9 fa 01 00 00       	jmp    c00280d7 <__divdf3+0x373>
c0027edd:	85 f6                	test   esi,esi
c0027edf:	75 1b                	jne    c0027efc <__divdf3+0x198>
c0027ee1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027ee4:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027ee7:	25 00 00 00 80       	and    eax,0x80000000
c0027eec:	31 c9                	xor    ecx,ecx
c0027eee:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0027ef3:	89 cf                	mov    edi,ecx
c0027ef5:	89 c1                	mov    ecx,eax
c0027ef7:	e9 db 01 00 00       	jmp    c00280d7 <__divdf3+0x373>
c0027efc:	01 d2                	add    edx,edx
c0027efe:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027f01:	c1 eb 1f             	shr    ebx,0x1f
c0027f04:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027f07:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0027f0a:	8d 48 01             	lea    ecx,[eax+0x1]
c0027f0d:	09 da                	or     edx,ebx
c0027f0f:	78 04                	js     c0027f15 <__divdf3+0x1b1>
c0027f11:	89 c8                	mov    eax,ecx
c0027f13:	eb e7                	jmp    c0027efc <__divdf3+0x198>
c0027f15:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027f18:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027f1e:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027f24:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0027f27:	39 d6                	cmp    esi,edx
c0027f29:	77 0d                	ja     c0027f38 <__divdf3+0x1d4>
c0027f2b:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0027f2e:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0027f31:	72 1b                	jb     c0027f4e <__divdf3+0x1ea>
c0027f33:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0027f36:	75 16                	jne    c0027f4e <__divdf3+0x1ea>
c0027f38:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027f3b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027f3e:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0027f41:	83 de 00             	sbb    esi,0x0
c0027f44:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0027f47:	ba 01 00 00 00       	mov    edx,0x1
c0027f4c:	eb 02                	jmp    c0027f50 <__divdf3+0x1ec>
c0027f4e:	31 d2                	xor    edx,edx
c0027f50:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0027f57:	31 ff                	xor    edi,edi
c0027f59:	01 ff                	add    edi,edi
c0027f5b:	89 d1                	mov    ecx,edx
c0027f5d:	c1 e9 1f             	shr    ecx,0x1f
c0027f60:	09 cf                	or     edi,ecx
c0027f62:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0027f65:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0027f68:	89 da                	mov    edx,ebx
c0027f6a:	89 f3                	mov    ebx,esi
c0027f6c:	8d 34 36             	lea    esi,[esi+esi*1]
c0027f6f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027f72:	c1 e9 1f             	shr    ecx,0x1f
c0027f75:	09 ce                	or     esi,ecx
c0027f77:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027f7a:	01 c9                	add    ecx,ecx
c0027f7c:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0027f7f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0027f82:	85 db                	test   ebx,ebx
c0027f84:	78 29                	js     c0027faf <__divdf3+0x24b>
c0027f86:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0027f89:	72 07                	jb     c0027f92 <__divdf3+0x22e>
c0027f8b:	75 3c                	jne    c0027fc9 <__divdf3+0x265>
c0027f8d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027f90:	77 37                	ja     c0027fc9 <__divdf3+0x265>
c0027f92:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027f95:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0027f98:	31 d2                	xor    edx,edx
c0027f9a:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0027f9d:	0f 97 c2             	seta   dl
c0027fa0:	29 d6                	sub    esi,edx
c0027fa2:	89 d9                	mov    ecx,ebx
c0027fa4:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0027fa7:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0027faa:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0027fad:	eb 17                	jmp    c0027fc6 <__divdf3+0x262>
c0027faf:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027fb2:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027fb5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027fb8:	0f 97 c1             	seta   cl
c0027fbb:	0f b6 c9             	movzx  ecx,cl
c0027fbe:	29 ce                	sub    esi,ecx
c0027fc0:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0027fc3:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0027fc6:	83 ca 01             	or     edx,0x1
c0027fc9:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0027fcc:	75 8b                	jne    c0027f59 <__divdf3+0x1f5>
c0027fce:	c1 e7 09             	shl    edi,0x9
c0027fd1:	89 d1                	mov    ecx,edx
c0027fd3:	c1 e9 17             	shr    ecx,0x17
c0027fd6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027fd9:	09 f3                	or     ebx,esi
c0027fdb:	0f 95 c3             	setne  bl
c0027fde:	0f b6 db             	movzx  ebx,bl
c0027fe1:	c1 e2 09             	shl    edx,0x9
c0027fe4:	09 d3                	or     ebx,edx
c0027fe6:	89 ca                	mov    edx,ecx
c0027fe8:	09 fa                	or     edx,edi
c0027fea:	78 0c                	js     c0027ff8 <__divdf3+0x294>
c0027fec:	01 d2                	add    edx,edx
c0027fee:	89 d9                	mov    ecx,ebx
c0027ff0:	c1 e9 1f             	shr    ecx,0x1f
c0027ff3:	09 ca                	or     edx,ecx
c0027ff5:	01 db                	add    ebx,ebx
c0027ff7:	48                   	dec    eax
c0027ff8:	3d fe 07 00 00       	cmp    eax,0x7fe
c0027ffd:	0f 8f 83 00 00 00    	jg     c0028086 <__divdf3+0x322>
c0028003:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028009:	85 c0                	test   eax,eax
c002800b:	0f 8f 82 00 00 00    	jg     c0028093 <__divdf3+0x32f>
c0028011:	83 f8 cc             	cmp    eax,0xffffffcc
c0028014:	7c 77                	jl     c002808d <__divdf3+0x329>
c0028016:	be 01 00 00 00       	mov    esi,0x1
c002801b:	29 c6                	sub    esi,eax
c002801d:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028023:	83 fe 1f             	cmp    esi,0x1f
c0028026:	7e 2f                	jle    c0028057 <__divdf3+0x2f3>
c0028028:	83 fe 20             	cmp    esi,0x20
c002802b:	75 0a                	jne    c0028037 <__divdf3+0x2d3>
c002802d:	85 db                	test   ebx,ebx
c002802f:	0f 95 c3             	setne  bl
c0028032:	0f b6 db             	movzx  ebx,bl
c0028035:	eb 1a                	jmp    c0028051 <__divdf3+0x2ed>
c0028037:	8d 48 3f             	lea    ecx,[eax+0x3f]
c002803a:	89 d7                	mov    edi,edx
c002803c:	d3 e7                	shl    edi,cl
c002803e:	89 f9                	mov    ecx,edi
c0028040:	09 d9                	or     ecx,ebx
c0028042:	0f 95 c3             	setne  bl
c0028045:	0f b6 db             	movzx  ebx,bl
c0028048:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c002804d:	29 c1                	sub    ecx,eax
c002804f:	d3 ea                	shr    edx,cl
c0028051:	09 d3                	or     ebx,edx
c0028053:	31 c0                	xor    eax,eax
c0028055:	eb 3a                	jmp    c0028091 <__divdf3+0x32d>
c0028057:	83 c0 1f             	add    eax,0x1f
c002805a:	89 d7                	mov    edi,edx
c002805c:	88 c1                	mov    cl,al
c002805e:	d3 e7                	shl    edi,cl
c0028060:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028063:	89 df                	mov    edi,ebx
c0028065:	89 f1                	mov    ecx,esi
c0028067:	d3 ef                	shr    edi,cl
c0028069:	89 f9                	mov    ecx,edi
c002806b:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002806e:	09 cf                	or     edi,ecx
c0028070:	88 c1                	mov    cl,al
c0028072:	d3 e3                	shl    ebx,cl
c0028074:	85 db                	test   ebx,ebx
c0028076:	0f 95 c3             	setne  bl
c0028079:	0f b6 db             	movzx  ebx,bl
c002807c:	09 fb                	or     ebx,edi
c002807e:	89 f1                	mov    ecx,esi
c0028080:	d3 ea                	shr    edx,cl
c0028082:	31 c0                	xor    eax,eax
c0028084:	eb 0d                	jmp    c0028093 <__divdf3+0x32f>
c0028086:	b8 ff 07 00 00       	mov    eax,0x7ff
c002808b:	eb 02                	jmp    c002808f <__divdf3+0x32b>
c002808d:	31 c0                	xor    eax,eax
c002808f:	31 db                	xor    ebx,ebx
c0028091:	31 d2                	xor    edx,edx
c0028093:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0028096:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0028099:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c002809f:	09 c8                	or     eax,ecx
c00280a1:	c1 e0 14             	shl    eax,0x14
c00280a4:	89 d1                	mov    ecx,edx
c00280a6:	c1 e9 0b             	shr    ecx,0xb
c00280a9:	09 c8                	or     eax,ecx
c00280ab:	89 c6                	mov    esi,eax
c00280ad:	89 d9                	mov    ecx,ebx
c00280af:	c1 e9 0b             	shr    ecx,0xb
c00280b2:	c1 e2 15             	shl    edx,0x15
c00280b5:	09 ca                	or     edx,ecx
c00280b7:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c00280bd:	0f 95 c0             	setne  al
c00280c0:	09 c1                	or     ecx,eax
c00280c2:	83 e1 01             	and    ecx,0x1
c00280c5:	c1 eb 0a             	shr    ebx,0xa
c00280c8:	21 cb                	and    ebx,ecx
c00280ca:	01 d3                	add    ebx,edx
c00280cc:	89 d8                	mov    eax,ebx
c00280ce:	83 d6 00             	adc    esi,0x0
c00280d1:	89 f2                	mov    edx,esi
c00280d3:	89 c7                	mov    edi,eax
c00280d5:	89 d1                	mov    ecx,edx
c00280d7:	89 f8                	mov    eax,edi
c00280d9:	89 ca                	mov    edx,ecx
c00280db:	83 c4 2c             	add    esp,0x2c
c00280de:	5b                   	pop    ebx
c00280df:	5e                   	pop    esi
c00280e0:	5f                   	pop    edi
c00280e1:	5d                   	pop    ebp
c00280e2:	c3                   	ret    

c00280e3 <__floatsidf>:
c00280e3:	55                   	push   ebp
c00280e4:	89 e5                	mov    ebp,esp
c00280e6:	56                   	push   esi
c00280e7:	53                   	push   ebx
c00280e8:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00280eb:	85 db                	test   ebx,ebx
c00280ed:	7e 15                	jle    c0028104 <__floatsidf+0x21>
c00280ef:	0f bd cb             	bsr    ecx,ebx
c00280f2:	83 f1 1f             	xor    ecx,0x1f
c00280f5:	d3 e3                	shl    ebx,cl
c00280f7:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00280fd:	b8 1e 04 00 00       	mov    eax,0x41e
c0028102:	eb 21                	jmp    c0028125 <__floatsidf+0x42>
c0028104:	b8 00 00 00 00       	mov    eax,0x0
c0028109:	ba 00 00 00 00       	mov    edx,0x0
c002810e:	74 2a                	je     c002813a <__floatsidf+0x57>
c0028110:	f7 db                	neg    ebx
c0028112:	0f bd cb             	bsr    ecx,ebx
c0028115:	83 f1 1f             	xor    ecx,0x1f
c0028118:	d3 e3                	shl    ebx,cl
c002811a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028120:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0028125:	29 c8                	sub    eax,ecx
c0028127:	c1 e0 14             	shl    eax,0x14
c002812a:	89 c1                	mov    ecx,eax
c002812c:	89 de                	mov    esi,ebx
c002812e:	c1 ee 0b             	shr    esi,0xb
c0028131:	09 f1                	or     ecx,esi
c0028133:	89 ca                	mov    edx,ecx
c0028135:	c1 e3 15             	shl    ebx,0x15
c0028138:	89 d8                	mov    eax,ebx
c002813a:	5b                   	pop    ebx
c002813b:	5e                   	pop    esi
c002813c:	5d                   	pop    ebp
c002813d:	c3                   	ret    

c002813e <__floatunsidf>:
c002813e:	55                   	push   ebp
c002813f:	89 e5                	mov    ebp,esp
c0028141:	56                   	push   esi
c0028142:	53                   	push   ebx
c0028143:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028146:	85 db                	test   ebx,ebx
c0028148:	74 2a                	je     c0028174 <__floatunsidf+0x36>
c002814a:	0f bd cb             	bsr    ecx,ebx
c002814d:	83 f1 1f             	xor    ecx,0x1f
c0028150:	d3 e3                	shl    ebx,cl
c0028152:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028158:	b8 1e 04 00 00       	mov    eax,0x41e
c002815d:	29 c8                	sub    eax,ecx
c002815f:	c1 e0 14             	shl    eax,0x14
c0028162:	89 c1                	mov    ecx,eax
c0028164:	89 de                	mov    esi,ebx
c0028166:	c1 ee 0b             	shr    esi,0xb
c0028169:	09 f1                	or     ecx,esi
c002816b:	89 ca                	mov    edx,ecx
c002816d:	c1 e3 15             	shl    ebx,0x15
c0028170:	89 d8                	mov    eax,ebx
c0028172:	eb 04                	jmp    c0028178 <__floatunsidf+0x3a>
c0028174:	31 c0                	xor    eax,eax
c0028176:	31 d2                	xor    edx,edx
c0028178:	5b                   	pop    ebx
c0028179:	5e                   	pop    esi
c002817a:	5d                   	pop    ebp
c002817b:	c3                   	ret    

c002817c <__fixdfsi>:
c002817c:	55                   	push   ebp
c002817d:	89 e5                	mov    ebp,esp
c002817f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028182:	89 d1                	mov    ecx,edx
c0028184:	c1 e1 0b             	shl    ecx,0xb
c0028187:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c002818d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0028190:	c1 e8 15             	shr    eax,0x15
c0028193:	09 c1                	or     ecx,eax
c0028195:	c1 fa 14             	sar    edx,0x14
c0028198:	78 1f                	js     c00281b9 <__fixdfsi+0x3d>
c002819a:	81 ea ff 03 00 00    	sub    edx,0x3ff
c00281a0:	31 c0                	xor    eax,eax
c00281a2:	83 fa 1e             	cmp    edx,0x1e
c00281a5:	77 40                	ja     c00281e7 <__fixdfsi+0x6b>
c00281a7:	89 c8                	mov    eax,ecx
c00281a9:	0d 00 00 00 80       	or     eax,0x80000000
c00281ae:	b9 1f 00 00 00       	mov    ecx,0x1f
c00281b3:	29 d1                	sub    ecx,edx
c00281b5:	d3 e8                	shr    eax,cl
c00281b7:	eb 2e                	jmp    c00281e7 <__fixdfsi+0x6b>
c00281b9:	31 c0                	xor    eax,eax
c00281bb:	81 c2 01 04 00 00    	add    edx,0x401
c00281c1:	78 24                	js     c00281e7 <__fixdfsi+0x6b>
c00281c3:	83 fa 1e             	cmp    edx,0x1e
c00281c6:	7e 09                	jle    c00281d1 <__fixdfsi+0x55>
c00281c8:	83 fa 1f             	cmp    edx,0x1f
c00281cb:	75 18                	jne    c00281e5 <__fixdfsi+0x69>
c00281cd:	85 c9                	test   ecx,ecx
c00281cf:	75 14                	jne    c00281e5 <__fixdfsi+0x69>
c00281d1:	89 c8                	mov    eax,ecx
c00281d3:	0d 00 00 00 80       	or     eax,0x80000000
c00281d8:	b9 1f 00 00 00       	mov    ecx,0x1f
c00281dd:	29 d1                	sub    ecx,edx
c00281df:	d3 e8                	shr    eax,cl
c00281e1:	f7 d8                	neg    eax
c00281e3:	eb 02                	jmp    c00281e7 <__fixdfsi+0x6b>
c00281e5:	31 c0                	xor    eax,eax
c00281e7:	5d                   	pop    ebp
c00281e8:	c3                   	ret    

c00281e9 <__fixunsdfsi>:
c00281e9:	55                   	push   ebp
c00281ea:	89 e5                	mov    ebp,esp
c00281ec:	53                   	push   ebx
c00281ed:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00281f0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00281f3:	89 d3                	mov    ebx,edx
c00281f5:	c1 fb 14             	sar    ebx,0x14
c00281f8:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c00281fe:	31 c0                	xor    eax,eax
c0028200:	83 fb 1f             	cmp    ebx,0x1f
c0028203:	77 1d                	ja     c0028222 <__fixunsdfsi+0x39>
c0028205:	89 d0                	mov    eax,edx
c0028207:	c1 e0 0b             	shl    eax,0xb
c002820a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002820f:	c1 e9 15             	shr    ecx,0x15
c0028212:	09 c8                	or     eax,ecx
c0028214:	0d 00 00 00 80       	or     eax,0x80000000
c0028219:	b9 1f 00 00 00       	mov    ecx,0x1f
c002821e:	29 d9                	sub    ecx,ebx
c0028220:	d3 e8                	shr    eax,cl
c0028222:	5b                   	pop    ebx
c0028223:	5d                   	pop    ebp
c0028224:	c3                   	ret    

c0028225 <__cmpdf2>:
c0028225:	55                   	push   ebp
c0028226:	89 e5                	mov    ebp,esp
c0028228:	57                   	push   edi
c0028229:	56                   	push   esi
c002822a:	53                   	push   ebx
c002822b:	83 ec 0c             	sub    esp,0xc
c002822e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0028231:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0028234:	89 ca                	mov    edx,ecx
c0028236:	c1 ea 14             	shr    edx,0x14
c0028239:	81 e2 ff 07 00 00    	and    edx,0x7ff
c002823f:	89 cb                	mov    ebx,ecx
c0028241:	c1 fb 1f             	sar    ebx,0x1f
c0028244:	31 da                	xor    edx,ebx
c0028246:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028249:	89 df                	mov    edi,ebx
c002824b:	c1 e7 0b             	shl    edi,0xb
c002824e:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028251:	c1 e1 0b             	shl    ecx,0xb
c0028254:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c002825a:	c1 eb 15             	shr    ebx,0x15
c002825d:	09 d9                	or     ecx,ebx
c002825f:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0028262:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0028265:	89 ce                	mov    esi,ecx
c0028267:	c1 ee 14             	shr    esi,0x14
c002826a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028270:	89 cb                	mov    ebx,ecx
c0028272:	c1 fb 1f             	sar    ebx,0x1f
c0028275:	31 de                	xor    esi,ebx
c0028277:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c002827a:	89 df                	mov    edi,ebx
c002827c:	c1 e7 0b             	shl    edi,0xb
c002827f:	c1 e1 0b             	shl    ecx,0xb
c0028282:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028288:	c1 eb 15             	shr    ebx,0x15
c002828b:	09 d9                	or     ecx,ebx
c002828d:	89 d3                	mov    ebx,edx
c002828f:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028295:	43                   	inc    ebx
c0028296:	83 fb 01             	cmp    ebx,0x1
c0028299:	77 08                	ja     c00282a3 <__cmpdf2+0x7e>
c002829b:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c002829e:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00282a1:	75 68                	jne    c002830b <__cmpdf2+0xe6>
c00282a3:	89 f3                	mov    ebx,esi
c00282a5:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c00282ab:	43                   	inc    ebx
c00282ac:	83 fb 01             	cmp    ebx,0x1
c00282af:	77 06                	ja     c00282b7 <__cmpdf2+0x92>
c00282b1:	89 fb                	mov    ebx,edi
c00282b3:	09 cb                	or     ebx,ecx
c00282b5:	75 54                	jne    c002830b <__cmpdf2+0xe6>
c00282b7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00282ba:	09 f8                	or     eax,edi
c00282bc:	09 c8                	or     eax,ecx
c00282be:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c00282c1:	75 12                	jne    c00282d5 <__cmpdf2+0xb0>
c00282c3:	8d 42 01             	lea    eax,[edx+0x1]
c00282c6:	83 f8 01             	cmp    eax,0x1
c00282c9:	77 0a                	ja     c00282d5 <__cmpdf2+0xb0>
c00282cb:	8d 5e 01             	lea    ebx,[esi+0x1]
c00282ce:	31 c0                	xor    eax,eax
c00282d0:	83 fb 01             	cmp    ebx,0x1
c00282d3:	76 36                	jbe    c002830b <__cmpdf2+0xe6>
c00282d5:	b8 01 00 00 00       	mov    eax,0x1
c00282da:	39 f2                	cmp    edx,esi
c00282dc:	7f 2d                	jg     c002830b <__cmpdf2+0xe6>
c00282de:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00282e3:	7c 26                	jl     c002830b <__cmpdf2+0xe6>
c00282e5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00282e8:	77 07                	ja     c00282f1 <__cmpdf2+0xcc>
c00282ea:	72 16                	jb     c0028302 <__cmpdf2+0xdd>
c00282ec:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c00282ef:	76 0a                	jbe    c00282fb <__cmpdf2+0xd6>
c00282f1:	89 d0                	mov    eax,edx
c00282f3:	c1 f8 1f             	sar    eax,0x1f
c00282f6:	83 c8 01             	or     eax,0x1
c00282f9:	eb 10                	jmp    c002830b <__cmpdf2+0xe6>
c00282fb:	b8 00 00 00 00       	mov    eax,0x0
c0028300:	73 09                	jae    c002830b <__cmpdf2+0xe6>
c0028302:	89 d0                	mov    eax,edx
c0028304:	c1 f8 1f             	sar    eax,0x1f
c0028307:	83 e0 02             	and    eax,0x2
c002830a:	48                   	dec    eax
c002830b:	83 c4 0c             	add    esp,0xc
c002830e:	5b                   	pop    ebx
c002830f:	5e                   	pop    esi
c0028310:	5f                   	pop    edi
c0028311:	5d                   	pop    ebp
c0028312:	c3                   	ret    

c0028313 <__eqdf2>:
c0028313:	55                   	push   ebp
c0028314:	89 e5                	mov    ebp,esp
c0028316:	50                   	push   eax
c0028317:	6a 01                	push   0x1
c0028319:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002831c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002831f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028322:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028325:	e8 fb fe ff ff       	call   c0028225 <__cmpdf2>
c002832a:	83 c4 18             	add    esp,0x18
c002832d:	c9                   	leave  
c002832e:	c3                   	ret    

c002832f <__nedf2>:
c002832f:	eb e2                	jmp    c0028313 <__eqdf2>

c0028331 <__gtdf2>:
c0028331:	55                   	push   ebp
c0028332:	89 e5                	mov    ebp,esp
c0028334:	50                   	push   eax
c0028335:	6a ff                	push   0xffffffff
c0028337:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002833a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002833d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028340:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028343:	e8 dd fe ff ff       	call   c0028225 <__cmpdf2>
c0028348:	83 c4 18             	add    esp,0x18
c002834b:	c9                   	leave  
c002834c:	c3                   	ret    

c002834d <__gedf2>:
c002834d:	eb e2                	jmp    c0028331 <__gtdf2>

c002834f <__ltdf2>:
c002834f:	eb c2                	jmp    c0028313 <__eqdf2>

c0028351 <__ledf2>:
c0028351:	eb c0                	jmp    c0028313 <__eqdf2>

c0028353 <__truncdfsf2>:
c0028353:	55                   	push   ebp
c0028354:	89 e5                	mov    ebp,esp
c0028356:	57                   	push   edi
c0028357:	56                   	push   esi
c0028358:	53                   	push   ebx
c0028359:	83 ec 0c             	sub    esp,0xc
c002835c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002835f:	89 d1                	mov    ecx,edx
c0028361:	c1 f9 14             	sar    ecx,0x14
c0028364:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028367:	89 df                	mov    edi,ebx
c0028369:	c1 e7 0b             	shl    edi,0xb
c002836c:	89 d0                	mov    eax,edx
c002836e:	c1 e0 0b             	shl    eax,0xb
c0028371:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028376:	c1 eb 15             	shr    ebx,0x15
c0028379:	09 d8                	or     eax,ebx
c002837b:	89 cb                	mov    ebx,ecx
c002837d:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028383:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0028389:	81 fe fd 00 00 00    	cmp    esi,0xfd
c002838f:	0f 86 9e 00 00 00    	jbe    c0028433 <__truncdfsf2+0xe0>
c0028395:	85 db                	test   ebx,ebx
c0028397:	75 0a                	jne    c00283a3 <__truncdfsf2+0x50>
c0028399:	c1 fa 17             	sar    edx,0x17
c002839c:	30 d2                	xor    dl,dl
c002839e:	e9 84 00 00 00       	jmp    c0028427 <__truncdfsf2+0xd4>
c00283a3:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c00283a9:	83 fe 83             	cmp    esi,0xffffff83
c00283ac:	7d 4b                	jge    c00283f9 <__truncdfsf2+0xa6>
c00283ae:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c00283b3:	29 f1                	sub    ecx,esi
c00283b5:	83 f9 1f             	cmp    ecx,0x1f
c00283b8:	7f 6b                	jg     c0028425 <__truncdfsf2+0xd2>
c00283ba:	0d 00 00 00 80       	or     eax,0x80000000
c00283bf:	89 c3                	mov    ebx,eax
c00283c1:	d3 eb                	shr    ebx,cl
c00283c3:	be 01 00 00 00       	mov    esi,0x1
c00283c8:	d3 e6                	shl    esi,cl
c00283ca:	4e                   	dec    esi
c00283cb:	21 f0                	and    eax,esi
c00283cd:	09 f8                	or     eax,edi
c00283cf:	0f 95 c0             	setne  al
c00283d2:	0f b6 c0             	movzx  eax,al
c00283d5:	09 c3                	or     ebx,eax
c00283d7:	89 d9                	mov    ecx,ebx
c00283d9:	c1 e9 08             	shr    ecx,0x8
c00283dc:	f6 c3 7f             	test   bl,0x7f
c00283df:	0f 95 c0             	setne  al
c00283e2:	09 c8                	or     eax,ecx
c00283e4:	83 e0 01             	and    eax,0x1
c00283e7:	c1 eb 07             	shr    ebx,0x7
c00283ea:	21 c3                	and    ebx,eax
c00283ec:	81 e2 00 00 00 80    	and    edx,0x80000000
c00283f2:	09 d1                	or     ecx,edx
c00283f4:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c00283f7:	eb 76                	jmp    c002846f <__truncdfsf2+0x11c>
c00283f9:	83 c6 80             	add    esi,0xffffff80
c00283fc:	7e 1d                	jle    c002841b <__truncdfsf2+0xc8>
c00283fe:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0028404:	75 0b                	jne    c0028411 <__truncdfsf2+0xbe>
c0028406:	09 f8                	or     eax,edi
c0028408:	74 09                	je     c0028413 <__truncdfsf2+0xc0>
c002840a:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c002840f:	eb 02                	jmp    c0028413 <__truncdfsf2+0xc0>
c0028411:	31 c0                	xor    eax,eax
c0028413:	c1 fa 17             	sar    edx,0x17
c0028416:	80 ca ff             	or     dl,0xff
c0028419:	eb 0e                	jmp    c0028429 <__truncdfsf2+0xd6>
c002841b:	c1 fa 1f             	sar    edx,0x1f
c002841e:	c1 e2 08             	shl    edx,0x8
c0028421:	09 ca                	or     edx,ecx
c0028423:	eb 04                	jmp    c0028429 <__truncdfsf2+0xd6>
c0028425:	31 d2                	xor    edx,edx
c0028427:	31 c0                	xor    eax,eax
c0028429:	c1 e2 17             	shl    edx,0x17
c002842c:	c1 e8 08             	shr    eax,0x8
c002842f:	09 d0                	or     eax,edx
c0028431:	eb 3c                	jmp    c002846f <__truncdfsf2+0x11c>
c0028433:	81 e9 80 03 00 00    	sub    ecx,0x380
c0028439:	89 ca                	mov    edx,ecx
c002843b:	c1 fa 0b             	sar    edx,0xb
c002843e:	c1 e2 08             	shl    edx,0x8
c0028441:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0028444:	31 db                	xor    ebx,ebx
c0028446:	85 ff                	test   edi,edi
c0028448:	0f 95 c3             	setne  bl
c002844b:	09 d8                	or     eax,ebx
c002844d:	89 c3                	mov    ebx,eax
c002844f:	c1 eb 08             	shr    ebx,0x8
c0028452:	a8 7f                	test   al,0x7f
c0028454:	0f 95 c2             	setne  dl
c0028457:	89 d6                	mov    esi,edx
c0028459:	09 de                	or     esi,ebx
c002845b:	83 e6 01             	and    esi,0x1
c002845e:	c1 e8 07             	shr    eax,0x7
c0028461:	21 f0                	and    eax,esi
c0028463:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0028466:	09 ca                	or     edx,ecx
c0028468:	c1 e2 17             	shl    edx,0x17
c002846b:	09 da                	or     edx,ebx
c002846d:	01 d0                	add    eax,edx
c002846f:	83 c4 0c             	add    esp,0xc
c0028472:	5b                   	pop    ebx
c0028473:	5e                   	pop    esi
c0028474:	5f                   	pop    edi
c0028475:	5d                   	pop    ebp
c0028476:	c3                   	ret    

c0028477 <__extendsfdf2>:
c0028477:	55                   	push   ebp
c0028478:	89 e5                	mov    ebp,esp
c002847a:	57                   	push   edi
c002847b:	56                   	push   esi
c002847c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002847f:	89 d1                	mov    ecx,edx
c0028481:	c1 f9 17             	sar    ecx,0x17
c0028484:	c1 e2 08             	shl    edx,0x8
c0028487:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002848d:	89 c8                	mov    eax,ecx
c002848f:	80 e4 f8             	and    ah,0xf8
c0028492:	8d 71 01             	lea    esi,[ecx+0x1]
c0028495:	81 e6 fe 00 00 00    	and    esi,0xfe
c002849b:	75 27                	jne    c00284c4 <__extendsfdf2+0x4d>
c002849d:	81 e1 ff 00 00 00    	and    ecx,0xff
c00284a3:	75 18                	jne    c00284bd <__extendsfdf2+0x46>
c00284a5:	85 d2                	test   edx,edx
c00284a7:	74 20                	je     c00284c9 <__extendsfdf2+0x52>
c00284a9:	41                   	inc    ecx
c00284aa:	01 d2                	add    edx,edx
c00284ac:	79 fb                	jns    c00284a9 <__extendsfdf2+0x32>
c00284ae:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00284b4:	29 c8                	sub    eax,ecx
c00284b6:	05 81 03 00 00       	add    eax,0x381
c00284bb:	eb 0c                	jmp    c00284c9 <__extendsfdf2+0x52>
c00284bd:	05 00 07 00 00       	add    eax,0x700
c00284c2:	eb 05                	jmp    c00284c9 <__extendsfdf2+0x52>
c00284c4:	05 80 03 00 00       	add    eax,0x380
c00284c9:	c1 e0 14             	shl    eax,0x14
c00284cc:	89 c1                	mov    ecx,eax
c00284ce:	89 d0                	mov    eax,edx
c00284d0:	c1 e8 0b             	shr    eax,0xb
c00284d3:	09 c1                	or     ecx,eax
c00284d5:	c1 e2 15             	shl    edx,0x15
c00284d8:	89 d0                	mov    eax,edx
c00284da:	89 ca                	mov    edx,ecx
c00284dc:	5e                   	pop    esi
c00284dd:	5f                   	pop    edi
c00284de:	5d                   	pop    ebp
c00284df:	c3                   	ret    

c00284e0 <fabs>:
c00284e0:	83 ec 0c             	sub    esp,0xc
c00284e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284e7:	89 04 24             	mov    DWORD PTR [esp],eax
c00284ea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00284ee:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00284f3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00284f7:	dd 04 24             	fld    QWORD PTR [esp]
c00284fa:	83 c4 0c             	add    esp,0xc
c00284fd:	c3                   	ret    
c00284fe:	66 90                	xchg   ax,ax

c0028500 <lrint>:
c0028500:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0028504:	83 ec 04             	sub    esp,0x4
c0028507:	db 1c 24             	fistp  DWORD PTR [esp]
c002850a:	58                   	pop    eax
c002850b:	c3                   	ret    

c002850c <lrintf>:
c002850c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0028510:	83 ec 04             	sub    esp,0x4
c0028513:	db 1c 24             	fistp  DWORD PTR [esp]
c0028516:	58                   	pop    eax
c0028517:	c3                   	ret    

Disassembly of section .init:

c0028518 <_init>:
c0028518:	55                   	push   ebp
c0028519:	89 e5                	mov    ebp,esp
c002851b:	e8 f8 7b fd ff       	call   c0000118 <frame_dummy>
c0028520:	e8 63 e0 ff ff       	call   c0026588 <__do_global_ctors_aux>
c0028525:	5d                   	pop    ebp
c0028526:	c3                   	ret    

Disassembly of section .fini:

c0028527 <_fini>:
c0028527:	55                   	push   ebp
c0028528:	89 e5                	mov    ebp,esp
c002852a:	e8 79 7b fd ff       	call   c00000a8 <__do_global_dtors_aux>
c002852f:	5d                   	pop    ebp
c0028530:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0028532 <Computer::~Computer()>:
c0028532:	83 ec 0c             	sub    esp,0xc
c0028535:	ba 68 a0 02 c0       	mov    edx,0xc002a068
c002853a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002853e:	89 10                	mov    DWORD PTR [eax],edx
c0028540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028544:	83 ec 0c             	sub    esp,0xc
c0028547:	50                   	push   eax
c0028548:	e8 43 bb fe ff       	call   c0014090 <Device::~Device()>
c002854d:	83 c4 10             	add    esp,0x10
c0028550:	90                   	nop
c0028551:	83 c4 0c             	add    esp,0xc
c0028554:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0028556 <Computer::~Computer()>:
c0028556:	83 ec 0c             	sub    esp,0xc
c0028559:	83 ec 0c             	sub    esp,0xc
c002855c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028560:	e8 cd ff ff ff       	call   c0028532 <Computer::~Computer()>
c0028565:	83 c4 10             	add    esp,0x10
c0028568:	83 ec 08             	sub    esp,0x8
c002856b:	68 ec 01 00 00       	push   0x1ec
c0028570:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028574:	e8 3f a7 fe ff       	call   c0012cb8 <operator delete(void*, unsigned long)>
c0028579:	83 c4 10             	add    esp,0x10
c002857c:	83 c4 0c             	add    esp,0xc
c002857f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0028580 <idleCommon()>:
c0028580:	83 ec 0c             	sub    esp,0xc
c0028583:	e8 e5 56 ff ff       	call   c001dc6d <lockScheduler()>
c0028588:	e8 1b 5a ff ff       	call   c001dfa8 <schedule()>
c002858d:	83 c4 0c             	add    esp,0xc
c0028590:	e9 da 56 ff ff       	jmp    c001dc6f <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0028596 <LinkedList<UnixFile>::~LinkedList()>:
c0028596:	90                   	nop
c0028597:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0028598 <LinkedList<UnixFile>::LinkedList()>:
c0028598:	83 ec 0c             	sub    esp,0xc
c002859b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002859f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00285a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285a9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00285b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285b4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00285bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285bf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00285c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285c9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00285d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285d4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00285db:	83 ec 0c             	sub    esp,0xc
c00285de:	68 26 a3 02 c0       	push   0xc002a326
c00285e3:	e8 b0 a7 fe ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c00285e8:	83 c4 10             	add    esp,0x10
c00285eb:	90                   	nop
c00285ec:	83 c4 0c             	add    esp,0xc
c00285ef:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c00285f0 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c00285f0:	83 ec 0c             	sub    esp,0xc
c00285f3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00285f8:	75 10                	jne    c002860a <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c00285fa:	83 ec 0c             	sub    esp,0xc
c00285fd:	68 40 a3 02 c0       	push   0xc002a340
c0028602:	e8 6c 1e ff ff       	call   c001a473 <Krnl::panic(char const*)>
c0028607:	83 c4 10             	add    esp,0x10
c002860a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002860e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028610:	85 c0                	test   eax,eax
c0028612:	74 34                	je     c0028648 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028614:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028618:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002861b:	85 c0                	test   eax,eax
c002861d:	74 29                	je     c0028648 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002861f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028623:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028626:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002862a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002862d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028631:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028635:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028638:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002863c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002863f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028646:	eb 65                	jmp    c00286ad <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028648:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002864c:	8b 00                	mov    eax,DWORD PTR [eax]
c002864e:	85 c0                	test   eax,eax
c0028650:	75 4b                	jne    c002869d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028652:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028656:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028659:	85 c0                	test   eax,eax
c002865b:	75 40                	jne    c002869d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002865d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028661:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028665:	89 10                	mov    DWORD PTR [eax],edx
c0028667:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002866b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002866f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028672:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028676:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028679:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028680:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028684:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028687:	85 c0                	test   eax,eax
c0028689:	74 22                	je     c00286ad <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002868b:	83 ec 0c             	sub    esp,0xc
c002868e:	68 62 a3 02 c0       	push   0xc002a362
c0028693:	e8 db 1d ff ff       	call   c001a473 <Krnl::panic(char const*)>
c0028698:	83 c4 10             	add    esp,0x10
c002869b:	eb 10                	jmp    c00286ad <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002869d:	83 ec 0c             	sub    esp,0xc
c00286a0:	68 6c a3 02 c0       	push   0xc002a36c
c00286a5:	e8 c9 1d ff ff       	call   c001a473 <Krnl::panic(char const*)>
c00286aa:	83 c4 10             	add    esp,0x10
c00286ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286b1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00286b4:	8d 50 01             	lea    edx,[eax+0x1]
c00286b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286bb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00286be:	90                   	nop
c00286bf:	83 c4 0c             	add    esp,0xc
c00286c2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c00286c4 <LinkedList<UnixFile>::getFirstElement()>:
c00286c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00286c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00286ca:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c00286cc <LinkedList<UnixFile>::removeFirst()>:
c00286cc:	83 ec 0c             	sub    esp,0xc
c00286cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286d3:	8b 00                	mov    eax,DWORD PTR [eax]
c00286d5:	85 c0                	test   eax,eax
c00286d7:	75 12                	jne    c00286eb <LinkedList<UnixFile>::removeFirst()+0x1f>
c00286d9:	83 ec 0c             	sub    esp,0xc
c00286dc:	68 78 a3 02 c0       	push   0xc002a378
c00286e1:	e8 8d 1d ff ff       	call   c001a473 <Krnl::panic(char const*)>
c00286e6:	83 c4 10             	add    esp,0x10
c00286e9:	eb 7e                	jmp    c0028769 <LinkedList<UnixFile>::removeFirst()+0x9d>
c00286eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286ef:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00286f2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00286f5:	85 c0                	test   eax,eax
c00286f7:	74 10                	je     c0028709 <LinkedList<UnixFile>::removeFirst()+0x3d>
c00286f9:	83 ec 0c             	sub    esp,0xc
c00286fc:	68 c3 a3 02 c0       	push   0xc002a3c3
c0028701:	e8 6d 1d ff ff       	call   c001a473 <Krnl::panic(char const*)>
c0028706:	83 c4 10             	add    esp,0x10
c0028709:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002870d:	8b 00                	mov    eax,DWORD PTR [eax]
c002870f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028712:	85 c0                	test   eax,eax
c0028714:	75 33                	jne    c0028749 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0028716:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002871a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028720:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028724:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002872b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002872f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028732:	83 f8 01             	cmp    eax,0x1
c0028735:	74 21                	je     c0028758 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028737:	83 ec 0c             	sub    esp,0xc
c002873a:	68 9c a3 02 c0       	push   0xc002a39c
c002873f:	e8 2f 1d ff ff       	call   c001a473 <Krnl::panic(char const*)>
c0028744:	83 c4 10             	add    esp,0x10
c0028747:	eb 0f                	jmp    c0028758 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028749:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002874d:	8b 00                	mov    eax,DWORD PTR [eax]
c002874f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028752:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028756:	89 10                	mov    DWORD PTR [eax],edx
c0028758:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002875c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002875f:	8d 50 ff             	lea    edx,[eax-0x1]
c0028762:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028766:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028769:	83 c4 0c             	add    esp,0xc
c002876c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002876e <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002876e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028772:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028775:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0028776 <DriverlessDevice::~DriverlessDevice()>:
c0028776:	ba c4 aa 02 c0       	mov    edx,0xc002aac4
c002877b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002877f:	89 10                	mov    DWORD PTR [eax],edx
c0028781:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028785:	50                   	push   eax
c0028786:	e8 05 b9 fe ff       	call   c0014090 <Device::~Device()>
c002878b:	83 c4 04             	add    esp,0x4
c002878e:	90                   	nop
c002878f:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0028790 <DriverlessDevice::~DriverlessDevice()>:
c0028790:	83 ec 0c             	sub    esp,0xc
c0028793:	83 ec 0c             	sub    esp,0xc
c0028796:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002879a:	e8 d7 ff ff ff       	call   c0028776 <DriverlessDevice::~DriverlessDevice()>
c002879f:	83 c4 10             	add    esp,0x10
c00287a2:	83 ec 08             	sub    esp,0x8
c00287a5:	68 58 01 00 00       	push   0x158
c00287aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00287ae:	e8 05 a5 fe ff       	call   c0012cb8 <operator delete(void*, unsigned long)>
c00287b3:	83 c4 10             	add    esp,0x10
c00287b6:	83 c4 0c             	add    esp,0xc
c00287b9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c00287ba <LinkedList<Device>::addElement(Device*)>:
c00287ba:	83 ec 0c             	sub    esp,0xc
c00287bd:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00287c2:	75 10                	jne    c00287d4 <LinkedList<Device>::addElement(Device*)+0x1a>
c00287c4:	83 ec 0c             	sub    esp,0xc
c00287c7:	68 40 a3 02 c0       	push   0xc002a340
c00287cc:	e8 a2 1c ff ff       	call   c001a473 <Krnl::panic(char const*)>
c00287d1:	83 c4 10             	add    esp,0x10
c00287d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00287da:	85 c0                	test   eax,eax
c00287dc:	74 3a                	je     c0028818 <LinkedList<Device>::addElement(Device*)+0x5e>
c00287de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287e2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287e5:	85 c0                	test   eax,eax
c00287e7:	74 2f                	je     c0028818 <LinkedList<Device>::addElement(Device*)+0x5e>
c00287e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287ed:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287f0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00287f4:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c00287fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287fe:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028802:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028805:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028809:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002880c:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028816:	eb 68                	jmp    c0028880 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028818:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002881c:	8b 00                	mov    eax,DWORD PTR [eax]
c002881e:	85 c0                	test   eax,eax
c0028820:	75 4e                	jne    c0028870 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028822:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028826:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028829:	85 c0                	test   eax,eax
c002882b:	75 43                	jne    c0028870 <LinkedList<Device>::addElement(Device*)+0xb6>
c002882d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028831:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028835:	89 10                	mov    DWORD PTR [eax],edx
c0028837:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002883b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002883f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028842:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028846:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028849:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028853:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028857:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002885a:	85 c0                	test   eax,eax
c002885c:	74 22                	je     c0028880 <LinkedList<Device>::addElement(Device*)+0xc6>
c002885e:	83 ec 0c             	sub    esp,0xc
c0028861:	68 62 a3 02 c0       	push   0xc002a362
c0028866:	e8 08 1c ff ff       	call   c001a473 <Krnl::panic(char const*)>
c002886b:	83 c4 10             	add    esp,0x10
c002886e:	eb 10                	jmp    c0028880 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028870:	83 ec 0c             	sub    esp,0xc
c0028873:	68 6c a3 02 c0       	push   0xc002a36c
c0028878:	e8 f6 1b ff ff       	call   c001a473 <Krnl::panic(char const*)>
c002887d:	83 c4 10             	add    esp,0x10
c0028880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028884:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028887:	8d 50 01             	lea    edx,[eax+0x1]
c002888a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002888e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028891:	90                   	nop
c0028892:	83 c4 0c             	add    esp,0xc
c0028895:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0028896 <LinkedList<Device>::LinkedList()>:
c0028896:	83 ec 0c             	sub    esp,0xc
c0028899:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002889d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00288a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288a7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00288ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288b2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00288b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288bd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00288c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288c7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00288ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288d2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00288d9:	83 ec 0c             	sub    esp,0xc
c00288dc:	68 26 a3 02 c0       	push   0xc002a326
c00288e1:	e8 b2 a4 fe ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c00288e6:	83 c4 10             	add    esp,0x10
c00288e9:	90                   	nop
c00288ea:	83 c4 0c             	add    esp,0xc
c00288ed:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c00288ee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c00288ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288f2:	8b 00                	mov    eax,DWORD PTR [eax]
c00288f4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c00288f6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c00288f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288fa:	8b 00                	mov    eax,DWORD PTR [eax]
c00288fc:	85 c0                	test   eax,eax
c00288fe:	75 0e                	jne    c002890e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028900:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028904:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028907:	85 c0                	test   eax,eax
c0028909:	75 03                	jne    c002890e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002890b:	b0 01                	mov    al,0x1
c002890d:	c3                   	ret    
c002890e:	b0 00                	mov    al,0x0
c0028910:	90                   	nop
c0028911:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0028912 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0028912:	83 ec 0c             	sub    esp,0xc
c0028915:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028919:	8b 00                	mov    eax,DWORD PTR [eax]
c002891b:	85 c0                	test   eax,eax
c002891d:	75 15                	jne    c0028934 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c002891f:	83 ec 0c             	sub    esp,0xc
c0028922:	68 78 a3 02 c0       	push   0xc002a378
c0028927:	e8 47 1b ff ff       	call   c001a473 <Krnl::panic(char const*)>
c002892c:	83 c4 10             	add    esp,0x10
c002892f:	e9 88 00 00 00       	jmp    c00289bc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0028934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028938:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002893b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002893e:	85 c0                	test   eax,eax
c0028940:	0f 95 c0             	setne  al
c0028943:	84 c0                	test   al,al
c0028945:	74 10                	je     c0028957 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0028947:	83 ec 0c             	sub    esp,0xc
c002894a:	68 c3 a3 02 c0       	push   0xc002a3c3
c002894f:	e8 1f 1b ff ff       	call   c001a473 <Krnl::panic(char const*)>
c0028954:	83 c4 10             	add    esp,0x10
c0028957:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002895b:	8b 00                	mov    eax,DWORD PTR [eax]
c002895d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028960:	85 c0                	test   eax,eax
c0028962:	0f 94 c0             	sete   al
c0028965:	84 c0                	test   al,al
c0028967:	74 33                	je     c002899c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0028969:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002896d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028973:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028977:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002897e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028982:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028985:	83 f8 01             	cmp    eax,0x1
c0028988:	74 21                	je     c00289ab <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002898a:	83 ec 0c             	sub    esp,0xc
c002898d:	68 9c a3 02 c0       	push   0xc002a39c
c0028992:	e8 dc 1a ff ff       	call   c001a473 <Krnl::panic(char const*)>
c0028997:	83 c4 10             	add    esp,0x10
c002899a:	eb 0f                	jmp    c00289ab <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002899c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00289a2:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00289a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289a9:	89 10                	mov    DWORD PTR [eax],edx
c00289ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289af:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00289b2:	8d 50 ff             	lea    edx,[eax-0x1]
c00289b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289b9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00289bc:	83 c4 0c             	add    esp,0xc
c00289bf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c00289c0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c00289c0:	83 ec 0c             	sub    esp,0xc
c00289c3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00289c8:	75 10                	jne    c00289da <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c00289ca:	83 ec 0c             	sub    esp,0xc
c00289cd:	68 40 a3 02 c0       	push   0xc002a340
c00289d2:	e8 9c 1a ff ff       	call   c001a473 <Krnl::panic(char const*)>
c00289d7:	83 c4 10             	add    esp,0x10
c00289da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289de:	8b 00                	mov    eax,DWORD PTR [eax]
c00289e0:	85 c0                	test   eax,eax
c00289e2:	74 34                	je     c0028a18 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c00289e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289e8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00289eb:	85 c0                	test   eax,eax
c00289ed:	74 29                	je     c0028a18 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c00289ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289f3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00289f6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00289fa:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00289fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a01:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028a05:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028a08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a0c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a0f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028a16:	eb 65                	jmp    c0028a7d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028a18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a1c:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a1e:	85 c0                	test   eax,eax
c0028a20:	75 4b                	jne    c0028a6d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028a22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a26:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a29:	85 c0                	test   eax,eax
c0028a2b:	75 40                	jne    c0028a6d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028a2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a31:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028a35:	89 10                	mov    DWORD PTR [eax],edx
c0028a37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a3b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028a3f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028a42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a46:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a49:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028a50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a54:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a57:	85 c0                	test   eax,eax
c0028a59:	74 22                	je     c0028a7d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028a5b:	83 ec 0c             	sub    esp,0xc
c0028a5e:	68 62 a3 02 c0       	push   0xc002a362
c0028a63:	e8 0b 1a ff ff       	call   c001a473 <Krnl::panic(char const*)>
c0028a68:	83 c4 10             	add    esp,0x10
c0028a6b:	eb 10                	jmp    c0028a7d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028a6d:	83 ec 0c             	sub    esp,0xc
c0028a70:	68 6c a3 02 c0       	push   0xc002a36c
c0028a75:	e8 f9 19 ff ff       	call   c001a473 <Krnl::panic(char const*)>
c0028a7a:	83 c4 10             	add    esp,0x10
c0028a7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a81:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a84:	8d 50 01             	lea    edx,[eax+0x1]
c0028a87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a8b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028a8e:	90                   	nop
c0028a8f:	83 c4 0c             	add    esp,0xc
c0028a92:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028a94 <ACPI::~ACPI()>:
c0028a94:	83 ec 0c             	sub    esp,0xc
c0028a97:	ba 2c b4 02 c0       	mov    edx,0xc002b42c
c0028a9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aa0:	89 10                	mov    DWORD PTR [eax],edx
c0028aa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aa6:	83 ec 0c             	sub    esp,0xc
c0028aa9:	50                   	push   eax
c0028aaa:	e8 e1 b5 fe ff       	call   c0014090 <Device::~Device()>
c0028aaf:	83 c4 10             	add    esp,0x10
c0028ab2:	90                   	nop
c0028ab3:	83 c4 0c             	add    esp,0xc
c0028ab6:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028ab8 <ACPI::~ACPI()>:
c0028ab8:	83 ec 0c             	sub    esp,0xc
c0028abb:	83 ec 0c             	sub    esp,0xc
c0028abe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ac2:	e8 cd ff ff ff       	call   c0028a94 <ACPI::~ACPI()>
c0028ac7:	83 c4 10             	add    esp,0x10
c0028aca:	83 ec 08             	sub    esp,0x8
c0028acd:	68 68 12 00 00       	push   0x1268
c0028ad2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ad6:	e8 dd a1 fe ff       	call   c0012cb8 <operator delete(void*, unsigned long)>
c0028adb:	83 c4 10             	add    esp,0x10
c0028ade:	83 c4 0c             	add    esp,0xc
c0028ae1:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0028ae2 <CPU::~CPU()>:
c0028ae2:	83 ec 0c             	sub    esp,0xc
c0028ae5:	ba 1c b8 02 c0       	mov    edx,0xc002b81c
c0028aea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aee:	89 10                	mov    DWORD PTR [eax],edx
c0028af0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028af4:	83 ec 0c             	sub    esp,0xc
c0028af7:	50                   	push   eax
c0028af8:	e8 93 b5 fe ff       	call   c0014090 <Device::~Device()>
c0028afd:	83 c4 10             	add    esp,0x10
c0028b00:	90                   	nop
c0028b01:	83 c4 0c             	add    esp,0xc
c0028b04:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0028b06 <CPU::~CPU()>:
c0028b06:	83 ec 0c             	sub    esp,0xc
c0028b09:	83 ec 0c             	sub    esp,0xc
c0028b0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b10:	e8 cd ff ff ff       	call   c0028ae2 <CPU::~CPU()>
c0028b15:	83 c4 10             	add    esp,0x10
c0028b18:	83 ec 08             	sub    esp,0x8
c0028b1b:	68 98 11 00 00       	push   0x1198
c0028b20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b24:	e8 8f a1 fe ff       	call   c0012cb8 <operator delete(void*, unsigned long)>
c0028b29:	83 c4 10             	add    esp,0x10
c0028b2c:	83 c4 0c             	add    esp,0xc
c0028b2f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0028b30 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0028b30:	90                   	nop
c0028b31:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0028b32 <ThreadControlBlock::ThreadControlBlock()>:
c0028b32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b36:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028b3d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b41:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0028b48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b4c:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0028b53:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b57:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0028b5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b62:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0028b66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b6a:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0028b6e:	90                   	nop
c0028b6f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0028b70 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0028b70:	83 ec 0c             	sub    esp,0xc
c0028b73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b77:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028b7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b81:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028b88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b8c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028b93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b97:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028b9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ba1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028ba8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bac:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028bb3:	83 ec 0c             	sub    esp,0xc
c0028bb6:	68 26 a3 02 c0       	push   0xc002a326
c0028bbb:	e8 d8 a1 fe ff       	call   c0012d98 <Dbg::kprintf(char const*, ...)>
c0028bc0:	83 c4 10             	add    esp,0x10
c0028bc3:	90                   	nop
c0028bc4:	83 c4 0c             	add    esp,0xc
c0028bc7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028bc8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028bc8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028bcc:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028bcf:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0028bd0 <Vm::_FPUState::_FPUState()>:
c0028bd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028bd4:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0028bdb:	90                   	nop
c0028bdc:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0028bde <PCI::~PCI()>:
c0028bde:	83 ec 0c             	sub    esp,0xc
c0028be1:	ba a8 c8 02 c0       	mov    edx,0xc002c8a8
c0028be6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bea:	89 10                	mov    DWORD PTR [eax],edx
c0028bec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bf0:	83 ec 0c             	sub    esp,0xc
c0028bf3:	50                   	push   eax
c0028bf4:	e8 6f ae fe ff       	call   c0013a68 <Bus::~Bus()>
c0028bf9:	83 c4 10             	add    esp,0x10
c0028bfc:	90                   	nop
c0028bfd:	83 c4 0c             	add    esp,0xc
c0028c00:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0028c02 <PCI::~PCI()>:
c0028c02:	83 ec 0c             	sub    esp,0xc
c0028c05:	83 ec 0c             	sub    esp,0xc
c0028c08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c0c:	e8 cd ff ff ff       	call   c0028bde <PCI::~PCI()>
c0028c11:	83 c4 10             	add    esp,0x10
c0028c14:	83 ec 08             	sub    esp,0x8
c0028c17:	68 58 01 00 00       	push   0x158
c0028c1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c20:	e8 93 a0 fe ff       	call   c0012cb8 <operator delete(void*, unsigned long)>
c0028c25:	83 c4 10             	add    esp,0x10
c0028c28:	83 c4 0c             	add    esp,0xc
c0028c2b:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0028c2c <IDE::~IDE()>:
c0028c2c:	83 ec 0c             	sub    esp,0xc
c0028c2f:	ba 0c cb 02 c0       	mov    edx,0xc002cb0c
c0028c34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c38:	89 10                	mov    DWORD PTR [eax],edx
c0028c3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c3e:	83 ec 0c             	sub    esp,0xc
c0028c41:	50                   	push   eax
c0028c42:	e8 39 b9 fe ff       	call   c0014580 <HardDiskController::~HardDiskController()>
c0028c47:	83 c4 10             	add    esp,0x10
c0028c4a:	90                   	nop
c0028c4b:	83 c4 0c             	add    esp,0xc
c0028c4e:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0028c50 <IDE::~IDE()>:
c0028c50:	83 ec 0c             	sub    esp,0xc
c0028c53:	83 ec 0c             	sub    esp,0xc
c0028c56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c5a:	e8 cd ff ff ff       	call   c0028c2c <IDE::~IDE()>
c0028c5f:	83 c4 10             	add    esp,0x10
c0028c62:	83 ec 08             	sub    esp,0x8
c0028c65:	68 70 02 00 00       	push   0x270
c0028c6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c6e:	e8 45 a0 fe ff       	call   c0012cb8 <operator delete(void*, unsigned long)>
c0028c73:	83 c4 10             	add    esp,0x10
c0028c76:	83 c4 0c             	add    esp,0xc
c0028c79:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0028c7a <SATABus::~SATABus()>:
c0028c7a:	83 ec 0c             	sub    esp,0xc
c0028c7d:	ba ec cb 02 c0       	mov    edx,0xc002cbec
c0028c82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c86:	89 10                	mov    DWORD PTR [eax],edx
c0028c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c8c:	83 ec 0c             	sub    esp,0xc
c0028c8f:	50                   	push   eax
c0028c90:	e8 eb b8 fe ff       	call   c0014580 <HardDiskController::~HardDiskController()>
c0028c95:	83 c4 10             	add    esp,0x10
c0028c98:	90                   	nop
c0028c99:	83 c4 0c             	add    esp,0xc
c0028c9c:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0028c9e <SATABus::~SATABus()>:
c0028c9e:	83 ec 0c             	sub    esp,0xc
c0028ca1:	83 ec 0c             	sub    esp,0xc
c0028ca4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ca8:	e8 cd ff ff ff       	call   c0028c7a <SATABus::~SATABus()>
c0028cad:	83 c4 10             	add    esp,0x10
c0028cb0:	83 ec 08             	sub    esp,0x8
c0028cb3:	68 64 01 00 00       	push   0x164
c0028cb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cbc:	e8 f7 9f fe ff       	call   c0012cb8 <operator delete(void*, unsigned long)>
c0028cc1:	83 c4 10             	add    esp,0x10
c0028cc4:	83 c4 0c             	add    esp,0xc
c0028cc7:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028cc8 <ATA::~ATA()>:
c0028cc8:	83 ec 0c             	sub    esp,0xc
c0028ccb:	ba 38 cc 02 c0       	mov    edx,0xc002cc38
c0028cd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cd4:	89 10                	mov    DWORD PTR [eax],edx
c0028cd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cda:	83 ec 0c             	sub    esp,0xc
c0028cdd:	50                   	push   eax
c0028cde:	e8 8f b9 fe ff       	call   c0014672 <PhysicalDisk::~PhysicalDisk()>
c0028ce3:	83 c4 10             	add    esp,0x10
c0028ce6:	90                   	nop
c0028ce7:	83 c4 0c             	add    esp,0xc
c0028cea:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0028cec <ATA::~ATA()>:
c0028cec:	83 ec 0c             	sub    esp,0xc
c0028cef:	83 ec 0c             	sub    esp,0xc
c0028cf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cf6:	e8 cd ff ff ff       	call   c0028cc8 <ATA::~ATA()>
c0028cfb:	83 c4 10             	add    esp,0x10
c0028cfe:	83 ec 08             	sub    esp,0x8
c0028d01:	68 7c 01 00 00       	push   0x17c
c0028d06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d0a:	e8 a9 9f fe ff       	call   c0012cb8 <operator delete(void*, unsigned long)>
c0028d0f:	83 c4 10             	add    esp,0x10
c0028d12:	83 c4 0c             	add    esp,0xc
c0028d15:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0028d16 <ATAPI::~ATAPI()>:
c0028d16:	83 ec 0c             	sub    esp,0xc
c0028d19:	ba 70 cc 02 c0       	mov    edx,0xc002cc70
c0028d1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d22:	89 10                	mov    DWORD PTR [eax],edx
c0028d24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d28:	83 ec 0c             	sub    esp,0xc
c0028d2b:	50                   	push   eax
c0028d2c:	e8 41 b9 fe ff       	call   c0014672 <PhysicalDisk::~PhysicalDisk()>
c0028d31:	83 c4 10             	add    esp,0x10
c0028d34:	90                   	nop
c0028d35:	83 c4 0c             	add    esp,0xc
c0028d38:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0028d3a <ATAPI::~ATAPI()>:
c0028d3a:	83 ec 0c             	sub    esp,0xc
c0028d3d:	83 ec 0c             	sub    esp,0xc
c0028d40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d44:	e8 cd ff ff ff       	call   c0028d16 <ATAPI::~ATAPI()>
c0028d49:	83 c4 10             	add    esp,0x10
c0028d4c:	83 ec 08             	sub    esp,0x8
c0028d4f:	68 80 01 00 00       	push   0x180
c0028d54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d58:	e8 5b 9f fe ff       	call   c0012cb8 <operator delete(void*, unsigned long)>
c0028d5d:	83 c4 10             	add    esp,0x10
c0028d60:	83 c4 0c             	add    esp,0xc
c0028d63:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0028d64 <SATA::~SATA()>:
c0028d64:	83 ec 0c             	sub    esp,0xc
c0028d67:	ba 24 cd 02 c0       	mov    edx,0xc002cd24
c0028d6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d70:	89 10                	mov    DWORD PTR [eax],edx
c0028d72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d76:	83 ec 0c             	sub    esp,0xc
c0028d79:	50                   	push   eax
c0028d7a:	e8 f3 b8 fe ff       	call   c0014672 <PhysicalDisk::~PhysicalDisk()>
c0028d7f:	83 c4 10             	add    esp,0x10
c0028d82:	90                   	nop
c0028d83:	83 c4 0c             	add    esp,0xc
c0028d86:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0028d88 <SATA::~SATA()>:
c0028d88:	83 ec 0c             	sub    esp,0xc
c0028d8b:	83 ec 0c             	sub    esp,0xc
c0028d8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d92:	e8 cd ff ff ff       	call   c0028d64 <SATA::~SATA()>
c0028d97:	83 c4 10             	add    esp,0x10
c0028d9a:	83 ec 08             	sub    esp,0x8
c0028d9d:	68 7c 01 00 00       	push   0x17c
c0028da2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028da6:	e8 0d 9f fe ff       	call   c0012cb8 <operator delete(void*, unsigned long)>
c0028dab:	83 c4 10             	add    esp,0x10
c0028dae:	83 c4 0c             	add    esp,0xc
c0028db1:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0028db2 <SATAPI::~SATAPI()>:
c0028db2:	83 ec 0c             	sub    esp,0xc
c0028db5:	ba 00 ce 02 c0       	mov    edx,0xc002ce00
c0028dba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dbe:	89 10                	mov    DWORD PTR [eax],edx
c0028dc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dc4:	83 ec 0c             	sub    esp,0xc
c0028dc7:	50                   	push   eax
c0028dc8:	e8 a5 b8 fe ff       	call   c0014672 <PhysicalDisk::~PhysicalDisk()>
c0028dcd:	83 c4 10             	add    esp,0x10
c0028dd0:	90                   	nop
c0028dd1:	83 c4 0c             	add    esp,0xc
c0028dd4:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0028dd6 <SATAPI::~SATAPI()>:
c0028dd6:	83 ec 0c             	sub    esp,0xc
c0028dd9:	83 ec 0c             	sub    esp,0xc
c0028ddc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028de0:	e8 cd ff ff ff       	call   c0028db2 <SATAPI::~SATAPI()>
c0028de5:	83 c4 10             	add    esp,0x10
c0028de8:	83 ec 08             	sub    esp,0x8
c0028deb:	68 80 01 00 00       	push   0x180
c0028df0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028df4:	e8 bf 9e fe ff       	call   c0012cb8 <operator delete(void*, unsigned long)>
c0028df9:	83 c4 10             	add    esp,0x10
c0028dfc:	83 c4 0c             	add    esp,0xc
c0028dff:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0028e00 <AVX::~AVX()>:
c0028e00:	83 ec 0c             	sub    esp,0xc
c0028e03:	ba 40 ce 02 c0       	mov    edx,0xc002ce40
c0028e08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e0c:	89 10                	mov    DWORD PTR [eax],edx
c0028e0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e12:	83 ec 0c             	sub    esp,0xc
c0028e15:	50                   	push   eax
c0028e16:	e8 db b8 fe ff       	call   c00146f6 <FPU::~FPU()>
c0028e1b:	83 c4 10             	add    esp,0x10
c0028e1e:	90                   	nop
c0028e1f:	83 c4 0c             	add    esp,0xc
c0028e22:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0028e24 <AVX::~AVX()>:
c0028e24:	83 ec 0c             	sub    esp,0xc
c0028e27:	83 ec 0c             	sub    esp,0xc
c0028e2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e2e:	e8 cd ff ff ff       	call   c0028e00 <AVX::~AVX()>
c0028e33:	83 c4 10             	add    esp,0x10
c0028e36:	83 ec 08             	sub    esp,0x8
c0028e39:	68 58 01 00 00       	push   0x158
c0028e3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e42:	e8 71 9e fe ff       	call   c0012cb8 <operator delete(void*, unsigned long)>
c0028e47:	83 c4 10             	add    esp,0x10
c0028e4a:	83 c4 0c             	add    esp,0xc
c0028e4d:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0028e4e <MMX::~MMX()>:
c0028e4e:	83 ec 0c             	sub    esp,0xc
c0028e51:	ba 80 ce 02 c0       	mov    edx,0xc002ce80
c0028e56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e5a:	89 10                	mov    DWORD PTR [eax],edx
c0028e5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e60:	83 ec 0c             	sub    esp,0xc
c0028e63:	50                   	push   eax
c0028e64:	e8 8d b8 fe ff       	call   c00146f6 <FPU::~FPU()>
c0028e69:	83 c4 10             	add    esp,0x10
c0028e6c:	90                   	nop
c0028e6d:	83 c4 0c             	add    esp,0xc
c0028e70:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0028e72 <MMX::~MMX()>:
c0028e72:	83 ec 0c             	sub    esp,0xc
c0028e75:	83 ec 0c             	sub    esp,0xc
c0028e78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e7c:	e8 cd ff ff ff       	call   c0028e4e <MMX::~MMX()>
c0028e81:	83 c4 10             	add    esp,0x10
c0028e84:	83 ec 08             	sub    esp,0x8
c0028e87:	68 58 01 00 00       	push   0x158
c0028e8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e90:	e8 23 9e fe ff       	call   c0012cb8 <operator delete(void*, unsigned long)>
c0028e95:	83 c4 10             	add    esp,0x10
c0028e98:	83 c4 0c             	add    esp,0xc
c0028e9b:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0028e9c <SSE::~SSE()>:
c0028e9c:	83 ec 0c             	sub    esp,0xc
c0028e9f:	ba c0 ce 02 c0       	mov    edx,0xc002cec0
c0028ea4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ea8:	89 10                	mov    DWORD PTR [eax],edx
c0028eaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028eae:	83 ec 0c             	sub    esp,0xc
c0028eb1:	50                   	push   eax
c0028eb2:	e8 3f b8 fe ff       	call   c00146f6 <FPU::~FPU()>
c0028eb7:	83 c4 10             	add    esp,0x10
c0028eba:	90                   	nop
c0028ebb:	83 c4 0c             	add    esp,0xc
c0028ebe:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0028ec0 <SSE::~SSE()>:
c0028ec0:	83 ec 0c             	sub    esp,0xc
c0028ec3:	83 ec 0c             	sub    esp,0xc
c0028ec6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028eca:	e8 cd ff ff ff       	call   c0028e9c <SSE::~SSE()>
c0028ecf:	83 c4 10             	add    esp,0x10
c0028ed2:	83 ec 08             	sub    esp,0x8
c0028ed5:	68 58 01 00 00       	push   0x158
c0028eda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ede:	e8 d5 9d fe ff       	call   c0012cb8 <operator delete(void*, unsigned long)>
c0028ee3:	83 c4 10             	add    esp,0x10
c0028ee6:	83 c4 0c             	add    esp,0xc
c0028ee9:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0028eea <x87::~x87()>:
c0028eea:	83 ec 0c             	sub    esp,0xc
c0028eed:	ba 00 cf 02 c0       	mov    edx,0xc002cf00
c0028ef2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ef6:	89 10                	mov    DWORD PTR [eax],edx
c0028ef8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028efc:	83 ec 0c             	sub    esp,0xc
c0028eff:	50                   	push   eax
c0028f00:	e8 f1 b7 fe ff       	call   c00146f6 <FPU::~FPU()>
c0028f05:	83 c4 10             	add    esp,0x10
c0028f08:	90                   	nop
c0028f09:	83 c4 0c             	add    esp,0xc
c0028f0c:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0028f0e <x87::~x87()>:
c0028f0e:	83 ec 0c             	sub    esp,0xc
c0028f11:	83 ec 0c             	sub    esp,0xc
c0028f14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f18:	e8 cd ff ff ff       	call   c0028eea <x87::~x87()>
c0028f1d:	83 c4 10             	add    esp,0x10
c0028f20:	83 ec 08             	sub    esp,0x8
c0028f23:	68 58 01 00 00       	push   0x158
c0028f28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f2c:	e8 87 9d fe ff       	call   c0012cb8 <operator delete(void*, unsigned long)>
c0028f31:	83 c4 10             	add    esp,0x10
c0028f34:	83 c4 0c             	add    esp,0xc
c0028f37:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0028f38 <IOAPIC::~IOAPIC()>:
c0028f38:	83 ec 0c             	sub    esp,0xc
c0028f3b:	ba 58 d0 02 c0       	mov    edx,0xc002d058
c0028f40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f44:	89 10                	mov    DWORD PTR [eax],edx
c0028f46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f4a:	83 ec 0c             	sub    esp,0xc
c0028f4d:	50                   	push   eax
c0028f4e:	e8 3d b1 fe ff       	call   c0014090 <Device::~Device()>
c0028f53:	83 c4 10             	add    esp,0x10
c0028f56:	90                   	nop
c0028f57:	83 c4 0c             	add    esp,0xc
c0028f5a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0028f5c <IOAPIC::~IOAPIC()>:
c0028f5c:	83 ec 0c             	sub    esp,0xc
c0028f5f:	83 ec 0c             	sub    esp,0xc
c0028f62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f66:	e8 cd ff ff ff       	call   c0028f38 <IOAPIC::~IOAPIC()>
c0028f6b:	83 c4 10             	add    esp,0x10
c0028f6e:	83 ec 08             	sub    esp,0x8
c0028f71:	68 68 01 00 00       	push   0x168
c0028f76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f7a:	e8 39 9d fe ff       	call   c0012cb8 <operator delete(void*, unsigned long)>
c0028f7f:	83 c4 10             	add    esp,0x10
c0028f82:	83 c4 0c             	add    esp,0xc
c0028f85:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0028f86 <APIC::~APIC()>:
c0028f86:	83 ec 0c             	sub    esp,0xc
c0028f89:	ba 10 d0 02 c0       	mov    edx,0xc002d010
c0028f8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f92:	89 10                	mov    DWORD PTR [eax],edx
c0028f94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f98:	83 ec 0c             	sub    esp,0xc
c0028f9b:	50                   	push   eax
c0028f9c:	e8 1f bc fe ff       	call   c0014bc0 <InterruptController::~InterruptController()>
c0028fa1:	83 c4 10             	add    esp,0x10
c0028fa4:	90                   	nop
c0028fa5:	83 c4 0c             	add    esp,0xc
c0028fa8:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0028faa <APIC::~APIC()>:
c0028faa:	83 ec 0c             	sub    esp,0xc
c0028fad:	83 ec 0c             	sub    esp,0xc
c0028fb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fb4:	e8 cd ff ff ff       	call   c0028f86 <APIC::~APIC()>
c0028fb9:	83 c4 10             	add    esp,0x10
c0028fbc:	83 ec 08             	sub    esp,0x8
c0028fbf:	68 58 21 00 00       	push   0x2158
c0028fc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fc8:	e8 eb 9c fe ff       	call   c0012cb8 <operator delete(void*, unsigned long)>
c0028fcd:	83 c4 10             	add    esp,0x10
c0028fd0:	83 c4 0c             	add    esp,0xc
c0028fd3:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0028fd4 <PIC::~PIC()>:
c0028fd4:	83 ec 0c             	sub    esp,0xc
c0028fd7:	ba a8 d0 02 c0       	mov    edx,0xc002d0a8
c0028fdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fe0:	89 10                	mov    DWORD PTR [eax],edx
c0028fe2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fe6:	83 ec 0c             	sub    esp,0xc
c0028fe9:	50                   	push   eax
c0028fea:	e8 d1 bb fe ff       	call   c0014bc0 <InterruptController::~InterruptController()>
c0028fef:	83 c4 10             	add    esp,0x10
c0028ff2:	90                   	nop
c0028ff3:	83 c4 0c             	add    esp,0xc
c0028ff6:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0028ff8 <PIC::~PIC()>:
c0028ff8:	83 ec 0c             	sub    esp,0xc
c0028ffb:	83 ec 0c             	sub    esp,0xc
c0028ffe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029002:	e8 cd ff ff ff       	call   c0028fd4 <PIC::~PIC()>
c0029007:	83 c4 10             	add    esp,0x10
c002900a:	83 ec 08             	sub    esp,0x8
c002900d:	68 58 21 00 00       	push   0x2158
c0029012:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029016:	e8 9d 9c fe ff       	call   c0012cb8 <operator delete(void*, unsigned long)>
c002901b:	83 c4 10             	add    esp,0x10
c002901e:	83 c4 0c             	add    esp,0xc
c0029021:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0029022 <APICTimer::~APICTimer()>:
c0029022:	83 ec 0c             	sub    esp,0xc
c0029025:	ba fc d0 02 c0       	mov    edx,0xc002d0fc
c002902a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002902e:	89 10                	mov    DWORD PTR [eax],edx
c0029030:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029034:	83 ec 0c             	sub    esp,0xc
c0029037:	50                   	push   eax
c0029038:	e8 05 db fe ff       	call   c0016b42 <Timer::~Timer()>
c002903d:	83 c4 10             	add    esp,0x10
c0029040:	90                   	nop
c0029041:	83 c4 0c             	add    esp,0xc
c0029044:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0029046 <APICTimer::~APICTimer()>:
c0029046:	83 ec 0c             	sub    esp,0xc
c0029049:	83 ec 0c             	sub    esp,0xc
c002904c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029050:	e8 cd ff ff ff       	call   c0029022 <APICTimer::~APICTimer()>
c0029055:	83 c4 10             	add    esp,0x10
c0029058:	83 ec 08             	sub    esp,0x8
c002905b:	68 60 01 00 00       	push   0x160
c0029060:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029064:	e8 4f 9c fe ff       	call   c0012cb8 <operator delete(void*, unsigned long)>
c0029069:	83 c4 10             	add    esp,0x10
c002906c:	83 c4 0c             	add    esp,0xc
c002906f:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0029070 <PIT::~PIT()>:
c0029070:	83 ec 0c             	sub    esp,0xc
c0029073:	ba 4c d1 02 c0       	mov    edx,0xc002d14c
c0029078:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002907c:	89 10                	mov    DWORD PTR [eax],edx
c002907e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029082:	83 ec 0c             	sub    esp,0xc
c0029085:	50                   	push   eax
c0029086:	e8 b7 da fe ff       	call   c0016b42 <Timer::~Timer()>
c002908b:	83 c4 10             	add    esp,0x10
c002908e:	90                   	nop
c002908f:	83 c4 0c             	add    esp,0xc
c0029092:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0029094 <PIT::~PIT()>:
c0029094:	83 ec 0c             	sub    esp,0xc
c0029097:	83 ec 0c             	sub    esp,0xc
c002909a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002909e:	e8 cd ff ff ff       	call   c0029070 <PIT::~PIT()>
c00290a3:	83 c4 10             	add    esp,0x10
c00290a6:	83 ec 08             	sub    esp,0x8
c00290a9:	68 5c 01 00 00       	push   0x15c
c00290ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290b2:	e8 01 9c fe ff       	call   c0012cb8 <operator delete(void*, unsigned long)>
c00290b7:	83 c4 10             	add    esp,0x10
c00290ba:	83 c4 0c             	add    esp,0xc
c00290bd:	c3                   	ret    
