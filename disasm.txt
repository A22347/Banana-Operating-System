
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 d8 fb 00 00       	call   c000fbf8 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 e3 85 02 00       	call   c0028608 <_init>
c0000025:	c3                   	ret    
c0000026:	bb b2 91 02 c0       	mov    ebx,0xc00291b2
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb c0 91 02 c0    	cmp    ebx,0xc00291c0
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 18 d9 02 c0       	mov    eax,0xc002d918
c0000049:	3d 18 d9 02 c0       	cmp    eax,0xc002d918
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 18 d9 02 c0       	push   0xc002d918
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 18 d9 02 c0       	mov    eax,0xc002d918
c0000075:	2d 18 d9 02 c0       	sub    eax,0xc002d918
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 18 d9 02 c0       	push   0xc002d918
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 48 df 02 c0 00 	cmp    BYTE PTR ds:0xc002df48,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb c8 91 02 c0       	mov    ebx,0xc00291c8
c00000bb:	81 eb c4 91 02 c0    	sub    ebx,0xc00291c4
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be c4 91 02 c0       	mov    esi,0xc00291c4
c00000ca:	a1 4c df 02 c0       	mov    eax,ds:0xc002df4c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 4c df 02 c0       	mov    ds:0xc002df4c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 4c df 02 c0       	mov    eax,ds:0xc002df4c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 18 d9 02 c0       	push   0xc002d918
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 48 df 02 c0 01 	mov    BYTE PTR ds:0xc002df48,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 50 df 02 c0       	push   0xc002df50
c000012c:	68 18 d9 02 c0       	push   0xc002d918
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	85 d2                	test   edx,edx
c0000391:	75 11                	jne    c00003a4 <commonThreadSwitch.firstTime>
c0000393:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c0000396:	e8 8d d5 01 00       	call   c001d928 <changeTSS>
c000039b:	5d                   	pop    ebp
c000039c:	5f                   	pop    edi
c000039d:	5e                   	pop    esi
c000039e:	5a                   	pop    edx
c000039f:	59                   	pop    ecx
c00003a0:	5b                   	pop    ebx
c00003a1:	58                   	pop    eax
c00003a2:	9d                   	popf   
c00003a3:	c3                   	ret    

c00003a4 <commonThreadSwitch.firstTime>:
c00003a4:	fa                   	cli    
c00003a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003a8:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003ad:	60                   	pusha  
c00003ae:	e8 bd 28 01 00       	call   c0012c70 <mapVASFirstTime>
c00003b3:	61                   	popa   
c00003b4:	89 c4                	mov    esp,eax
c00003b6:	56                   	push   esi
c00003b7:	52                   	push   edx
c00003b8:	e8 6b d5 01 00       	call   c001d928 <changeTSS>
c00003bd:	5a                   	pop    edx
c00003be:	5e                   	pop    esi
c00003bf:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003c6:	5d                   	pop    ebp
c00003c7:	5f                   	pop    edi
c00003c8:	5e                   	pop    esi
c00003c9:	59                   	pop    ecx
c00003ca:	59                   	pop    ecx
c00003cb:	5b                   	pop    ebx
c00003cc:	58                   	pop    eax
c00003cd:	81 c4 04 00 00 00    	add    esp,0x4
c00003d3:	6a 02                	push   0x2
c00003d5:	9d                   	popf   
c00003d6:	52                   	push   edx
c00003d7:	e8 be d9 01 00       	call   c001dd9a <taskStartupFunction>
c00003dc:	5a                   	pop    edx
c00003dd:	50                   	push   eax
c00003de:	ff d2                	call   edx
c00003e0:	e8 6b df 01 00       	call   c001e350 <taskReturned>
c00003e5:	e9 fb ff ff ff       	jmp    c00003e5 <commonThreadSwitch.firstTime+0x41>

c00003ea <asmQuickAcquireLock>:
c00003ea:	55                   	push   ebp
c00003eb:	89 e5                	mov    ebp,esp
c00003ed:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f0 <asmQuickAcquireLock.retry>:
c00003f0:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003f5:	72 02                	jb     c00003f9 <asmQuickAcquireLock.spin_with_pause>
c00003f7:	fa                   	cli    
c00003f8:	c3                   	ret    

c00003f9 <asmQuickAcquireLock.spin_with_pause>:
c00003f9:	f3 90                	pause  
c00003fb:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000401:	75 f6                	jne    c00003f9 <asmQuickAcquireLock.spin_with_pause>
c0000403:	e9 e8 ff ff ff       	jmp    c00003f0 <asmQuickAcquireLock.retry>

c0000408 <asmQuickReleaseLock>:
c0000408:	55                   	push   ebp
c0000409:	89 e5                	mov    ebp,esp
c000040b:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000412:	5d                   	pop    ebp
c0000413:	c3                   	ret    

c0000414 <asmAcquireLock>:
c0000414:	55                   	push   ebp
c0000415:	89 e5                	mov    ebp,esp
c0000417:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000041a <asmAcquireLock.retry>:
c000041a:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000041f:	72 05                	jb     c0000426 <asmAcquireLock.spin_with_pause>
c0000421:	9c                   	pushf  
c0000422:	58                   	pop    eax
c0000423:	fa                   	cli    
c0000424:	5d                   	pop    ebp
c0000425:	c3                   	ret    

c0000426 <asmAcquireLock.spin_with_pause>:
c0000426:	f3 90                	pause  
c0000428:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000042e:	75 f6                	jne    c0000426 <asmAcquireLock.spin_with_pause>
c0000430:	e9 e5 ff ff ff       	jmp    c000041a <asmAcquireLock.retry>

c0000435 <asmReleaseLock>:
c0000435:	55                   	push   ebp
c0000436:	89 e5                	mov    ebp,esp
c0000438:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000043b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000043e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000444:	52                   	push   edx
c0000445:	9d                   	popf   
c0000446:	5d                   	pop    ebp
c0000447:	c3                   	ret    

c0000448 <loadGDT>:
c0000448:	0f 01 15 90 e3 02 c0 	lgdtd  ds:0xc002e390
c000044f:	66 b8 10 00          	mov    ax,0x10
c0000453:	66 8e d8             	mov    ds,ax
c0000456:	66 8e c0             	mov    es,ax
c0000459:	66 8e e0             	mov    fs,ax
c000045c:	66 8e e8             	mov    gs,ax
c000045f:	66 8e d0             	mov    ss,ax
c0000462:	e9 00 00 00 00       	jmp    c0000467 <flush2>

c0000467 <flush2>:
c0000467:	c3                   	ret    

c0000468 <isr0>:
c0000468:	fa                   	cli    
c0000469:	68 00 00 00 00       	push   0x0
c000046e:	68 00 00 00 00       	push   0x0
c0000473:	e9 44 01 00 00       	jmp    c00005bc <int_common_stub>

c0000478 <isr1>:
c0000478:	fa                   	cli    
c0000479:	6a 00                	push   0x0
c000047b:	6a 01                	push   0x1
c000047d:	e9 3a 01 00 00       	jmp    c00005bc <int_common_stub>

c0000482 <isr2>:
c0000482:	fa                   	cli    
c0000483:	6a 00                	push   0x0
c0000485:	6a 02                	push   0x2
c0000487:	e9 30 01 00 00       	jmp    c00005bc <int_common_stub>

c000048c <isr3>:
c000048c:	fa                   	cli    
c000048d:	6a 00                	push   0x0
c000048f:	6a 03                	push   0x3
c0000491:	e9 26 01 00 00       	jmp    c00005bc <int_common_stub>

c0000496 <isr4>:
c0000496:	fa                   	cli    
c0000497:	6a 00                	push   0x0
c0000499:	6a 04                	push   0x4
c000049b:	e9 1c 01 00 00       	jmp    c00005bc <int_common_stub>

c00004a0 <isr5>:
c00004a0:	fa                   	cli    
c00004a1:	6a 00                	push   0x0
c00004a3:	6a 05                	push   0x5
c00004a5:	e9 12 01 00 00       	jmp    c00005bc <int_common_stub>

c00004aa <isr6>:
c00004aa:	fa                   	cli    
c00004ab:	6a 00                	push   0x0
c00004ad:	6a 06                	push   0x6
c00004af:	e9 08 01 00 00       	jmp    c00005bc <int_common_stub>

c00004b4 <isr7>:
c00004b4:	fa                   	cli    
c00004b5:	6a 00                	push   0x0
c00004b7:	6a 07                	push   0x7
c00004b9:	e9 fe 00 00 00       	jmp    c00005bc <int_common_stub>

c00004be <isr8>:
c00004be:	fa                   	cli    
c00004bf:	6a 08                	push   0x8
c00004c1:	e9 f6 00 00 00       	jmp    c00005bc <int_common_stub>

c00004c6 <isr9>:
c00004c6:	fa                   	cli    
c00004c7:	6a 00                	push   0x0
c00004c9:	6a 09                	push   0x9
c00004cb:	e9 ec 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d0 <isr10>:
c00004d0:	fa                   	cli    
c00004d1:	6a 0a                	push   0xa
c00004d3:	e9 e4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d8 <isr11>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0b                	push   0xb
c00004db:	e9 dc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e0 <isr12>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0c                	push   0xc
c00004e3:	e9 d4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e8 <isr13>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0d                	push   0xd
c00004eb:	e9 cc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f0 <isr14>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0e                	push   0xe
c00004f3:	e9 c4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f8 <isr15>:
c00004f8:	fa                   	cli    
c00004f9:	6a 00                	push   0x0
c00004fb:	6a 0f                	push   0xf
c00004fd:	e9 ba 00 00 00       	jmp    c00005bc <int_common_stub>

c0000502 <isr16>:
c0000502:	fa                   	cli    
c0000503:	6a 00                	push   0x0
c0000505:	6a 10                	push   0x10
c0000507:	e9 b0 00 00 00       	jmp    c00005bc <int_common_stub>

c000050c <isr17>:
c000050c:	fa                   	cli    
c000050d:	6a 00                	push   0x0
c000050f:	6a 11                	push   0x11
c0000511:	e9 a6 00 00 00       	jmp    c00005bc <int_common_stub>

c0000516 <isr18>:
c0000516:	fa                   	cli    
c0000517:	6a 00                	push   0x0
c0000519:	6a 12                	push   0x12
c000051b:	e9 9c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000520 <irq3>:
c0000520:	fa                   	cli    
c0000521:	6a 00                	push   0x0
c0000523:	6a 23                	push   0x23
c0000525:	e9 92 00 00 00       	jmp    c00005bc <int_common_stub>

c000052a <irq4>:
c000052a:	fa                   	cli    
c000052b:	6a 00                	push   0x0
c000052d:	6a 24                	push   0x24
c000052f:	e9 88 00 00 00       	jmp    c00005bc <int_common_stub>

c0000534 <irq5>:
c0000534:	fa                   	cli    
c0000535:	6a 00                	push   0x0
c0000537:	6a 25                	push   0x25
c0000539:	e9 7e 00 00 00       	jmp    c00005bc <int_common_stub>

c000053e <irq6>:
c000053e:	fa                   	cli    
c000053f:	6a 00                	push   0x0
c0000541:	6a 26                	push   0x26
c0000543:	e9 74 00 00 00       	jmp    c00005bc <int_common_stub>

c0000548 <irq7>:
c0000548:	fa                   	cli    
c0000549:	6a 00                	push   0x0
c000054b:	6a 27                	push   0x27
c000054d:	e9 6a 00 00 00       	jmp    c00005bc <int_common_stub>

c0000552 <irq8>:
c0000552:	fa                   	cli    
c0000553:	6a 00                	push   0x0
c0000555:	6a 28                	push   0x28
c0000557:	e9 60 00 00 00       	jmp    c00005bc <int_common_stub>

c000055c <irq9>:
c000055c:	fa                   	cli    
c000055d:	6a 00                	push   0x0
c000055f:	6a 29                	push   0x29
c0000561:	e9 56 00 00 00       	jmp    c00005bc <int_common_stub>

c0000566 <irq10>:
c0000566:	fa                   	cli    
c0000567:	6a 00                	push   0x0
c0000569:	6a 2a                	push   0x2a
c000056b:	e9 4c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000570 <irq11>:
c0000570:	fa                   	cli    
c0000571:	6a 00                	push   0x0
c0000573:	6a 2b                	push   0x2b
c0000575:	e9 42 00 00 00       	jmp    c00005bc <int_common_stub>

c000057a <irq12>:
c000057a:	fa                   	cli    
c000057b:	6a 00                	push   0x0
c000057d:	6a 2c                	push   0x2c
c000057f:	e9 38 00 00 00       	jmp    c00005bc <int_common_stub>

c0000584 <irq13>:
c0000584:	fa                   	cli    
c0000585:	6a 00                	push   0x0
c0000587:	6a 2d                	push   0x2d
c0000589:	e9 2e 00 00 00       	jmp    c00005bc <int_common_stub>

c000058e <irq14>:
c000058e:	fa                   	cli    
c000058f:	6a 00                	push   0x0
c0000591:	6a 2e                	push   0x2e
c0000593:	e9 24 00 00 00       	jmp    c00005bc <int_common_stub>

c0000598 <irq15>:
c0000598:	fa                   	cli    
c0000599:	6a 00                	push   0x0
c000059b:	6a 2f                	push   0x2f
c000059d:	e9 1a 00 00 00       	jmp    c00005bc <int_common_stub>

c00005a2 <irq1>:
c00005a2:	fa                   	cli    
c00005a3:	6a 00                	push   0x0
c00005a5:	6a 21                	push   0x21
c00005a7:	eb 13                	jmp    c00005bc <int_common_stub>

c00005a9 <irq2>:
c00005a9:	fa                   	cli    
c00005aa:	6a 00                	push   0x0
c00005ac:	6a 22                	push   0x22
c00005ae:	eb 0c                	jmp    c00005bc <int_common_stub>

c00005b0 <isr96>:
c00005b0:	6a 00                	push   0x0
c00005b2:	6a 60                	push   0x60
c00005b4:	fb                   	sti    
c00005b5:	eb 05                	jmp    c00005bc <int_common_stub>

c00005b7 <irq0>:
c00005b7:	fa                   	cli    
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 20                	push   0x20

c00005bc <int_common_stub>:
c00005bc:	60                   	pusha  
c00005bd:	1e                   	push   ds
c00005be:	06                   	push   es
c00005bf:	0f a0                	push   fs
c00005c1:	0f a8                	push   gs
c00005c3:	66 b8 10 00          	mov    ax,0x10
c00005c7:	66 8e d8             	mov    ds,ax
c00005ca:	66 8e c0             	mov    es,ax
c00005cd:	66 8e e0             	mov    fs,ax
c00005d0:	66 8e e8             	mov    gs,ax
c00005d3:	54                   	push   esp
c00005d4:	e8 9a 45 01 00       	call   c0014b73 <int_handler>
c00005d9:	81 c4 04 00 00 00    	add    esp,0x4
c00005df:	0f a9                	pop    gs
c00005e1:	0f a1                	pop    fs
c00005e3:	07                   	pop    es
c00005e4:	1f                   	pop    ds
c00005e5:	61                   	popa   
c00005e6:	81 c4 08 00 00 00    	add    esp,0x8
c00005ec:	cf                   	iret   

c00005ed <irq16>:
c00005ed:	fa                   	cli    
c00005ee:	6a 00                	push   0x0
c00005f0:	6a 30                	push   0x30
c00005f2:	e9 c5 ff ff ff       	jmp    c00005bc <int_common_stub>

c00005f7 <irq17>:
c00005f7:	fa                   	cli    
c00005f8:	6a 00                	push   0x0
c00005fa:	6a 31                	push   0x31
c00005fc:	e9 bb ff ff ff       	jmp    c00005bc <int_common_stub>

c0000601 <irq18>:
c0000601:	fa                   	cli    
c0000602:	6a 00                	push   0x0
c0000604:	6a 32                	push   0x32
c0000606:	e9 b1 ff ff ff       	jmp    c00005bc <int_common_stub>

c000060b <irq19>:
c000060b:	fa                   	cli    
c000060c:	6a 00                	push   0x0
c000060e:	6a 33                	push   0x33
c0000610:	e9 a7 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000615 <irq20>:
c0000615:	fa                   	cli    
c0000616:	6a 00                	push   0x0
c0000618:	6a 34                	push   0x34
c000061a:	e9 9d ff ff ff       	jmp    c00005bc <int_common_stub>

c000061f <irq21>:
c000061f:	fa                   	cli    
c0000620:	6a 00                	push   0x0
c0000622:	6a 35                	push   0x35
c0000624:	e9 93 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000629 <irq22>:
c0000629:	fa                   	cli    
c000062a:	6a 00                	push   0x0
c000062c:	6a 36                	push   0x36
c000062e:	e9 89 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000633 <irq23>:
c0000633:	fa                   	cli    
c0000634:	6a 00                	push   0x0
c0000636:	6a 37                	push   0x37
c0000638:	e9 7f ff ff ff       	jmp    c00005bc <int_common_stub>
c000063d:	66 90                	xchg   ax,ax
c000063f:	90                   	nop

c0000640 <memcmp>:
c0000640:	56                   	push   esi
c0000641:	53                   	push   ebx
c0000642:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000646:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000064a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000064e:	85 f6                	test   esi,esi
c0000650:	74 1d                	je     c000066f <memcmp+0x2f>
c0000652:	8a 08                	mov    cl,BYTE PTR [eax]
c0000654:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000657:	38 cb                	cmp    bl,cl
c0000659:	75 19                	jne    c0000674 <memcmp+0x34>
c000065b:	01 c6                	add    esi,eax
c000065d:	eb 0a                	jmp    c0000669 <memcmp+0x29>
c000065f:	90                   	nop
c0000660:	8a 08                	mov    cl,BYTE PTR [eax]
c0000662:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000665:	38 d9                	cmp    cl,bl
c0000667:	75 0b                	jne    c0000674 <memcmp+0x34>
c0000669:	40                   	inc    eax
c000066a:	42                   	inc    edx
c000066b:	39 f0                	cmp    eax,esi
c000066d:	75 f1                	jne    c0000660 <memcmp+0x20>
c000066f:	31 c0                	xor    eax,eax
c0000671:	5b                   	pop    ebx
c0000672:	5e                   	pop    esi
c0000673:	c3                   	ret    
c0000674:	0f b6 c1             	movzx  eax,cl
c0000677:	29 d8                	sub    eax,ebx
c0000679:	5b                   	pop    ebx
c000067a:	5e                   	pop    esi
c000067b:	c3                   	ret    

c000067c <memmove>:
c000067c:	55                   	push   ebp
c000067d:	57                   	push   edi
c000067e:	56                   	push   esi
c000067f:	53                   	push   ebx
c0000680:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000684:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000688:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000068c:	39 dd                	cmp    ebp,ebx
c000068e:	0f 83 80 00 00 00    	jae    c0000714 <memmove+0x98>
c0000694:	85 d2                	test   edx,edx
c0000696:	74 74                	je     c000070c <memmove+0x90>
c0000698:	8d 4b 04             	lea    ecx,[ebx+0x4]
c000069b:	8d 75 04             	lea    esi,[ebp+0x4]
c000069e:	39 cd                	cmp    ebp,ecx
c00006a0:	0f 93 c1             	setae  cl
c00006a3:	39 f3                	cmp    ebx,esi
c00006a5:	0f 93 c0             	setae  al
c00006a8:	89 c6                	mov    esi,eax
c00006aa:	09 ce                	or     esi,ecx
c00006ac:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006af:	89 f0                	mov    eax,esi
c00006b1:	83 f9 0c             	cmp    ecx,0xc
c00006b4:	0f 97 c1             	seta   cl
c00006b7:	84 c8                	test   al,cl
c00006b9:	74 75                	je     c0000730 <memmove+0xb4>
c00006bb:	89 e9                	mov    ecx,ebp
c00006bd:	09 d9                	or     ecx,ebx
c00006bf:	83 e1 03             	and    ecx,0x3
c00006c2:	75 6c                	jne    c0000730 <memmove+0xb4>
c00006c4:	89 d7                	mov    edi,edx
c00006c6:	89 d9                	mov    ecx,ebx
c00006c8:	83 e7 fc             	and    edi,0xfffffffc
c00006cb:	89 ee                	mov    esi,ebp
c00006cd:	01 df                	add    edi,ebx
c00006cf:	90                   	nop
c00006d0:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006d2:	83 c6 04             	add    esi,0x4
c00006d5:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006d8:	83 c1 04             	add    ecx,0x4
c00006db:	39 f9                	cmp    ecx,edi
c00006dd:	75 f1                	jne    c00006d0 <memmove+0x54>
c00006df:	89 d1                	mov    ecx,edx
c00006e1:	89 d7                	mov    edi,edx
c00006e3:	83 e1 fc             	and    ecx,0xfffffffc
c00006e6:	29 cf                	sub    edi,ecx
c00006e8:	01 cb                	add    ebx,ecx
c00006ea:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006ee:	39 ca                	cmp    edx,ecx
c00006f0:	74 1a                	je     c000070c <memmove+0x90>
c00006f2:	8a 03                	mov    al,BYTE PTR [ebx]
c00006f4:	83 ff 01             	cmp    edi,0x1
c00006f7:	88 06                	mov    BYTE PTR [esi],al
c00006f9:	74 11                	je     c000070c <memmove+0x90>
c00006fb:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00006fe:	83 ff 02             	cmp    edi,0x2
c0000701:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000704:	74 06                	je     c000070c <memmove+0x90>
c0000706:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000709:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000070c:	5b                   	pop    ebx
c000070d:	89 e8                	mov    eax,ebp
c000070f:	5e                   	pop    esi
c0000710:	5f                   	pop    edi
c0000711:	5d                   	pop    ebp
c0000712:	c3                   	ret    
c0000713:	90                   	nop
c0000714:	76 f6                	jbe    c000070c <memmove+0x90>
c0000716:	85 d2                	test   edx,edx
c0000718:	74 f2                	je     c000070c <memmove+0x90>
c000071a:	4b                   	dec    ebx
c000071b:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000071e:	66 90                	xchg   ax,ax
c0000720:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000723:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000726:	4a                   	dec    edx
c0000727:	75 f7                	jne    c0000720 <memmove+0xa4>
c0000729:	5b                   	pop    ebx
c000072a:	89 e8                	mov    eax,ebp
c000072c:	5e                   	pop    esi
c000072d:	5f                   	pop    edi
c000072e:	5d                   	pop    ebp
c000072f:	c3                   	ret    
c0000730:	01 ea                	add    edx,ebp
c0000732:	89 e9                	mov    ecx,ebp
c0000734:	8a 03                	mov    al,BYTE PTR [ebx]
c0000736:	41                   	inc    ecx
c0000737:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000073a:	43                   	inc    ebx
c000073b:	39 d1                	cmp    ecx,edx
c000073d:	75 f5                	jne    c0000734 <memmove+0xb8>
c000073f:	eb cb                	jmp    c000070c <memmove+0x90>
c0000741:	8d 76 00             	lea    esi,[esi+0x0]

c0000744 <memcpy>:
c0000744:	57                   	push   edi
c0000745:	56                   	push   esi
c0000746:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000074a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000074e:	a8 03                	test   al,0x3
c0000750:	74 12                	je     c0000764 <memcpy+0x20>
c0000752:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000756:	89 c1                	mov    ecx,eax
c0000758:	fc                   	cld    
c0000759:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000075b:	29 c7                	sub    edi,eax
c000075d:	5e                   	pop    esi
c000075e:	89 f8                	mov    eax,edi
c0000760:	5f                   	pop    edi
c0000761:	c3                   	ret    
c0000762:	66 90                	xchg   ax,ax
c0000764:	89 c1                	mov    ecx,eax
c0000766:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000076a:	c1 e9 02             	shr    ecx,0x2
c000076d:	fc                   	cld    
c000076e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0000770:	29 c7                	sub    edi,eax
c0000772:	5e                   	pop    esi
c0000773:	89 f8                	mov    eax,edi
c0000775:	5f                   	pop    edi
c0000776:	c3                   	ret    
c0000777:	90                   	nop

c0000778 <memset>:
c0000778:	57                   	push   edi
c0000779:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000077d:	85 c9                	test   ecx,ecx
c000077f:	74 0b                	je     c000078c <memset+0x14>
c0000781:	fc                   	cld    
c0000782:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000786:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000078a:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000078c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000790:	5f                   	pop    edi
c0000791:	c3                   	ret    
c0000792:	66 90                	xchg   ax,ax

c0000794 <strlen>:
c0000794:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000798:	31 c0                	xor    eax,eax
c000079a:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c000079d:	74 09                	je     c00007a8 <strlen+0x14>
c000079f:	90                   	nop
c00007a0:	40                   	inc    eax
c00007a1:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00007a5:	75 f9                	jne    c00007a0 <strlen+0xc>
c00007a7:	c3                   	ret    
c00007a8:	c3                   	ret    
c00007a9:	8d 76 00             	lea    esi,[esi+0x0]

c00007ac <strpbrk>:
c00007ac:	57                   	push   edi
c00007ad:	56                   	push   esi
c00007ae:	53                   	push   ebx
c00007af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007b3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007b7:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b9:	84 db                	test   bl,bl
c00007bb:	74 21                	je     c00007de <strpbrk+0x32>
c00007bd:	8a 07                	mov    al,BYTE PTR [edi]
c00007bf:	84 c0                	test   al,al
c00007c1:	74 14                	je     c00007d7 <strpbrk+0x2b>
c00007c3:	38 d8                	cmp    al,bl
c00007c5:	74 19                	je     c00007e0 <strpbrk+0x34>
c00007c7:	89 fa                	mov    edx,edi
c00007c9:	eb 05                	jmp    c00007d0 <strpbrk+0x24>
c00007cb:	90                   	nop
c00007cc:	38 d9                	cmp    cl,bl
c00007ce:	74 10                	je     c00007e0 <strpbrk+0x34>
c00007d0:	42                   	inc    edx
c00007d1:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007d3:	84 c9                	test   cl,cl
c00007d5:	75 f5                	jne    c00007cc <strpbrk+0x20>
c00007d7:	46                   	inc    esi
c00007d8:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007da:	84 db                	test   bl,bl
c00007dc:	75 e1                	jne    c00007bf <strpbrk+0x13>
c00007de:	31 f6                	xor    esi,esi
c00007e0:	89 f0                	mov    eax,esi
c00007e2:	5b                   	pop    ebx
c00007e3:	5e                   	pop    esi
c00007e4:	5f                   	pop    edi
c00007e5:	c3                   	ret    
c00007e6:	66 90                	xchg   ax,ax

c00007e8 <strtok>:
c00007e8:	56                   	push   esi
c00007e9:	53                   	push   ebx
c00007ea:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007ee:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007f2:	85 db                	test   ebx,ebx
c00007f4:	75 07                	jne    c00007fd <strtok+0x15>
c00007f6:	eb 2c                	jmp    c0000824 <strtok+0x3c>
c00007f8:	43                   	inc    ebx
c00007f9:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007fd:	56                   	push   esi
c00007fe:	53                   	push   ebx
c00007ff:	e8 a8 ff ff ff       	call   c00007ac <strpbrk>
c0000804:	5a                   	pop    edx
c0000805:	a3 68 df 02 c0       	mov    ds:0xc002df68,eax
c000080a:	59                   	pop    ecx
c000080b:	39 d8                	cmp    eax,ebx
c000080d:	74 e9                	je     c00007f8 <strtok+0x10>
c000080f:	85 c0                	test   eax,eax
c0000811:	74 1b                	je     c000082e <strtok+0x46>
c0000813:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000816:	8d 50 01             	lea    edx,[eax+0x1]
c0000819:	89 d8                	mov    eax,ebx
c000081b:	89 15 68 df 02 c0    	mov    DWORD PTR ds:0xc002df68,edx
c0000821:	5b                   	pop    ebx
c0000822:	5e                   	pop    esi
c0000823:	c3                   	ret    
c0000824:	8b 1d 68 df 02 c0    	mov    ebx,DWORD PTR ds:0xc002df68
c000082a:	85 db                	test   ebx,ebx
c000082c:	75 cf                	jne    c00007fd <strtok+0x15>
c000082e:	31 c0                	xor    eax,eax
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    
c0000833:	90                   	nop

c0000834 <strcpy>:
c0000834:	53                   	push   ebx
c0000835:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000839:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000083d:	89 c3                	mov    ebx,eax
c000083f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000841:	84 d2                	test   dl,dl
c0000843:	74 0d                	je     c0000852 <strcpy+0x1e>
c0000845:	8d 76 00             	lea    esi,[esi+0x0]
c0000848:	88 13                	mov    BYTE PTR [ebx],dl
c000084a:	41                   	inc    ecx
c000084b:	43                   	inc    ebx
c000084c:	8a 11                	mov    dl,BYTE PTR [ecx]
c000084e:	84 d2                	test   dl,dl
c0000850:	75 f6                	jne    c0000848 <strcpy+0x14>
c0000852:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000855:	5b                   	pop    ebx
c0000856:	c3                   	ret    
c0000857:	90                   	nop

c0000858 <strncpy>:
c0000858:	55                   	push   ebp
c0000859:	57                   	push   edi
c000085a:	56                   	push   esi
c000085b:	53                   	push   ebx
c000085c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000860:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000864:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000868:	85 c0                	test   eax,eax
c000086a:	74 39                	je     c00008a5 <strncpy+0x4d>
c000086c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000086e:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000871:	8d 55 01             	lea    edx,[ebp+0x1]
c0000874:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0000877:	84 db                	test   bl,bl
c0000879:	74 31                	je     c00008ac <strncpy+0x54>
c000087b:	85 c9                	test   ecx,ecx
c000087d:	74 26                	je     c00008a5 <strncpy+0x4d>
c000087f:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000882:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000885:	8d 55 02             	lea    edx,[ebp+0x2]
c0000888:	8d 46 02             	lea    eax,[esi+0x2]
c000088b:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c000088e:	84 db                	test   bl,bl
c0000890:	75 0f                	jne    c00008a1 <strncpy+0x49>
c0000892:	eb 18                	jmp    c00008ac <strncpy+0x54>
c0000894:	40                   	inc    eax
c0000895:	42                   	inc    edx
c0000896:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000899:	49                   	dec    ecx
c000089a:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000089d:	84 db                	test   bl,bl
c000089f:	74 0b                	je     c00008ac <strncpy+0x54>
c00008a1:	85 c9                	test   ecx,ecx
c00008a3:	75 ef                	jne    c0000894 <strncpy+0x3c>
c00008a5:	5b                   	pop    ebx
c00008a6:	89 e8                	mov    eax,ebp
c00008a8:	5e                   	pop    esi
c00008a9:	5f                   	pop    edi
c00008aa:	5d                   	pop    ebp
c00008ab:	c3                   	ret    
c00008ac:	85 c9                	test   ecx,ecx
c00008ae:	74 f5                	je     c00008a5 <strncpy+0x4d>
c00008b0:	fc                   	cld    
c00008b1:	31 c0                	xor    eax,eax
c00008b3:	89 d7                	mov    edi,edx
c00008b5:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00008b7:	89 e8                	mov    eax,ebp
c00008b9:	5b                   	pop    ebx
c00008ba:	5e                   	pop    esi
c00008bb:	5f                   	pop    edi
c00008bc:	5d                   	pop    ebp
c00008bd:	c3                   	ret    
c00008be:	66 90                	xchg   ax,ax

c00008c0 <strcmp>:
c00008c0:	56                   	push   esi
c00008c1:	53                   	push   ebx
c00008c2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00008c6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008ca:	8a 16                	mov    dl,BYTE PTR [esi]
c00008cc:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008cf:	38 d1                	cmp    cl,dl
c00008d1:	75 1d                	jne    c00008f0 <strcmp+0x30>
c00008d3:	84 c9                	test   cl,cl
c00008d5:	74 21                	je     c00008f8 <strcmp+0x38>
c00008d7:	b8 01 00 00 00       	mov    eax,0x1
c00008dc:	eb 07                	jmp    c00008e5 <strcmp+0x25>
c00008de:	66 90                	xchg   ax,ax
c00008e0:	40                   	inc    eax
c00008e1:	84 d2                	test   dl,dl
c00008e3:	74 13                	je     c00008f8 <strcmp+0x38>
c00008e5:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008e8:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 f0                	je     c00008e0 <strcmp+0x20>
c00008f0:	0f b6 c2             	movzx  eax,dl
c00008f3:	5b                   	pop    ebx
c00008f4:	29 c8                	sub    eax,ecx
c00008f6:	5e                   	pop    esi
c00008f7:	c3                   	ret    
c00008f8:	31 c0                	xor    eax,eax
c00008fa:	5b                   	pop    ebx
c00008fb:	5e                   	pop    esi
c00008fc:	c3                   	ret    
c00008fd:	8d 76 00             	lea    esi,[esi+0x0]

c0000900 <strchr>:
c0000900:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000904:	8a 10                	mov    dl,BYTE PTR [eax]
c0000906:	84 d2                	test   dl,dl
c0000908:	74 15                	je     c000091f <strchr+0x1f>
c000090a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000090e:	38 ca                	cmp    dl,cl
c0000910:	75 06                	jne    c0000918 <strchr+0x18>
c0000912:	eb 0e                	jmp    c0000922 <strchr+0x22>
c0000914:	38 ca                	cmp    dl,cl
c0000916:	74 09                	je     c0000921 <strchr+0x21>
c0000918:	40                   	inc    eax
c0000919:	8a 10                	mov    dl,BYTE PTR [eax]
c000091b:	84 d2                	test   dl,dl
c000091d:	75 f5                	jne    c0000914 <strchr+0x14>
c000091f:	31 c0                	xor    eax,eax
c0000921:	c3                   	ret    
c0000922:	c3                   	ret    
c0000923:	90                   	nop

c0000924 <strncmp>:
c0000924:	57                   	push   edi
c0000925:	56                   	push   esi
c0000926:	53                   	push   ebx
c0000927:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000092b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000092f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000933:	85 ff                	test   edi,edi
c0000935:	74 28                	je     c000095f <strncmp+0x3b>
c0000937:	8a 16                	mov    dl,BYTE PTR [esi]
c0000939:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000093c:	38 d1                	cmp    cl,dl
c000093e:	75 28                	jne    c0000968 <strncmp+0x44>
c0000940:	8d 46 01             	lea    eax,[esi+0x1]
c0000943:	84 c9                	test   cl,cl
c0000945:	74 18                	je     c000095f <strncmp+0x3b>
c0000947:	01 fe                	add    esi,edi
c0000949:	eb 0f                	jmp    c000095a <strncmp+0x36>
c000094b:	90                   	nop
c000094c:	8a 10                	mov    dl,BYTE PTR [eax]
c000094e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000951:	38 ca                	cmp    dl,cl
c0000953:	75 13                	jne    c0000968 <strncmp+0x44>
c0000955:	40                   	inc    eax
c0000956:	84 d2                	test   dl,dl
c0000958:	74 05                	je     c000095f <strncmp+0x3b>
c000095a:	43                   	inc    ebx
c000095b:	39 c6                	cmp    esi,eax
c000095d:	75 ed                	jne    c000094c <strncmp+0x28>
c000095f:	5b                   	pop    ebx
c0000960:	31 c0                	xor    eax,eax
c0000962:	5e                   	pop    esi
c0000963:	5f                   	pop    edi
c0000964:	c3                   	ret    
c0000965:	8d 76 00             	lea    esi,[esi+0x0]
c0000968:	5b                   	pop    ebx
c0000969:	0f b6 c2             	movzx  eax,dl
c000096c:	5e                   	pop    esi
c000096d:	29 c8                	sub    eax,ecx
c000096f:	5f                   	pop    edi
c0000970:	c3                   	ret    
c0000971:	8d 76 00             	lea    esi,[esi+0x0]

c0000974 <strcat>:
c0000974:	56                   	push   esi
c0000975:	53                   	push   ebx
c0000976:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000097a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000097e:	89 c3                	mov    ebx,eax
c0000980:	eb 04                	jmp    c0000986 <strcat+0x12>
c0000982:	66 90                	xchg   ax,ax
c0000984:	89 d3                	mov    ebx,edx
c0000986:	8d 53 01             	lea    edx,[ebx+0x1]
c0000989:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c000098d:	75 f5                	jne    c0000984 <strcat+0x10>
c000098f:	31 d2                	xor    edx,edx
c0000991:	8d 76 00             	lea    esi,[esi+0x0]
c0000994:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000997:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c000099a:	42                   	inc    edx
c000099b:	84 c9                	test   cl,cl
c000099d:	75 f5                	jne    c0000994 <strcat+0x20>
c000099f:	5b                   	pop    ebx
c00009a0:	5e                   	pop    esi
c00009a1:	c3                   	ret    
c00009a2:	66 90                	xchg   ax,ax

c00009a4 <strncat>:
c00009a4:	56                   	push   esi
c00009a5:	53                   	push   ebx
c00009a6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00009aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00009ae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00009b2:	85 f6                	test   esi,esi
c00009b4:	74 1e                	je     c00009d4 <strncat+0x30>
c00009b6:	89 c2                	mov    edx,eax
c00009b8:	42                   	inc    edx
c00009b9:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00009bd:	75 f9                	jne    c00009b8 <strncat+0x14>
c00009bf:	01 ce                	add    esi,ecx
c00009c1:	eb 06                	jmp    c00009c9 <strncat+0x25>
c00009c3:	90                   	nop
c00009c4:	39 f1                	cmp    ecx,esi
c00009c6:	74 10                	je     c00009d8 <strncat+0x34>
c00009c8:	42                   	inc    edx
c00009c9:	41                   	inc    ecx
c00009ca:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009cd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009d0:	84 db                	test   bl,bl
c00009d2:	75 f0                	jne    c00009c4 <strncat+0x20>
c00009d4:	5b                   	pop    ebx
c00009d5:	5e                   	pop    esi
c00009d6:	c3                   	ret    
c00009d7:	90                   	nop
c00009d8:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009db:	5b                   	pop    ebx
c00009dc:	5e                   	pop    esi
c00009dd:	c3                   	ret    
c00009de:	66 90                	xchg   ax,ax

c00009e0 <strstr>:
c00009e0:	57                   	push   edi
c00009e1:	56                   	push   esi
c00009e2:	53                   	push   ebx
c00009e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009e7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009eb:	57                   	push   edi
c00009ec:	e8 a3 fd ff ff       	call   c0000794 <strlen>
c00009f1:	59                   	pop    ecx
c00009f2:	85 c0                	test   eax,eax
c00009f4:	74 2a                	je     c0000a20 <strstr+0x40>
c00009f6:	89 c6                	mov    esi,eax
c00009f8:	eb 12                	jmp    c0000a0c <strstr+0x2c>
c00009fa:	66 90                	xchg   ax,ax
c00009fc:	56                   	push   esi
c00009fd:	57                   	push   edi
c00009fe:	53                   	push   ebx
c00009ff:	e8 3c fc ff ff       	call   c0000640 <memcmp>
c0000a04:	83 c4 0c             	add    esp,0xc
c0000a07:	85 c0                	test   eax,eax
c0000a09:	74 15                	je     c0000a20 <strstr+0x40>
c0000a0b:	43                   	inc    ebx
c0000a0c:	53                   	push   ebx
c0000a0d:	e8 82 fd ff ff       	call   c0000794 <strlen>
c0000a12:	5a                   	pop    edx
c0000a13:	39 f0                	cmp    eax,esi
c0000a15:	73 e5                	jae    c00009fc <strstr+0x1c>
c0000a17:	5b                   	pop    ebx
c0000a18:	31 c0                	xor    eax,eax
c0000a1a:	5e                   	pop    esi
c0000a1b:	5f                   	pop    edi
c0000a1c:	c3                   	ret    
c0000a1d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a20:	89 d8                	mov    eax,ebx
c0000a22:	5b                   	pop    ebx
c0000a23:	5e                   	pop    esi
c0000a24:	5f                   	pop    edi
c0000a25:	c3                   	ret    
c0000a26:	66 90                	xchg   ax,ax

c0000a28 <toupper>:
c0000a28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a2c:	0f b6 d0             	movzx  edx,al
c0000a2f:	f6 82 e0 91 02 c0 02 	test   BYTE PTR [edx-0x3ffd6e20],0x2
c0000a36:	74 03                	je     c0000a3b <toupper+0x13>
c0000a38:	83 e8 20             	sub    eax,0x20
c0000a3b:	c3                   	ret    

c0000a3c <tolower>:
c0000a3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a40:	0f b6 d0             	movzx  edx,al
c0000a43:	f6 82 e0 91 02 c0 01 	test   BYTE PTR [edx-0x3ffd6e20],0x1
c0000a4a:	74 03                	je     c0000a4f <tolower+0x13>
c0000a4c:	83 c0 20             	add    eax,0x20
c0000a4f:	c3                   	ret    

c0000a50 <simple_strtoul>:
c0000a50:	55                   	push   ebp
c0000a51:	57                   	push   edi
c0000a52:	56                   	push   esi
c0000a53:	53                   	push   ebx
c0000a54:	83 ec 08             	sub    esp,0x8
c0000a57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a5b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a5f:	90                   	nop
c0000a60:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a63:	f6 82 e0 91 02 c0 08 	test   BYTE PTR [edx-0x3ffd6e20],0x8
c0000a6a:	75 05                	jne    c0000a71 <simple_strtoul+0x21>
c0000a6c:	80 fa 09             	cmp    dl,0x9
c0000a6f:	75 03                	jne    c0000a74 <simple_strtoul+0x24>
c0000a71:	41                   	inc    ecx
c0000a72:	eb ec                	jmp    c0000a60 <simple_strtoul+0x10>
c0000a74:	80 fa 2d             	cmp    dl,0x2d
c0000a77:	0f 84 1b 01 00 00    	je     c0000b98 <simple_strtoul+0x148>
c0000a7d:	80 fa 2b             	cmp    dl,0x2b
c0000a80:	0f 84 c2 00 00 00    	je     c0000b48 <simple_strtoul+0xf8>
c0000a86:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a8e:	85 f6                	test   esi,esi
c0000a90:	0f 85 c3 00 00 00    	jne    c0000b59 <simple_strtoul+0x109>
c0000a96:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a98:	80 fa 30             	cmp    dl,0x30
c0000a9b:	0f 84 47 01 00 00    	je     c0000be8 <simple_strtoul+0x198>
c0000aa1:	be 0a 00 00 00       	mov    esi,0xa
c0000aa6:	84 d2                	test   dl,dl
c0000aa8:	0f 84 6f 01 00 00    	je     c0000c1d <simple_strtoul+0x1cd>
c0000aae:	31 ed                	xor    ebp,ebp
c0000ab0:	31 ff                	xor    edi,edi
c0000ab2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000ab9:	eb 2b                	jmp    c0000ae6 <simple_strtoul+0x96>
c0000abb:	90                   	nop
c0000abc:	83 eb 30             	sub    ebx,0x30
c0000abf:	39 f3                	cmp    ebx,esi
c0000ac1:	73 4d                	jae    c0000b10 <simple_strtoul+0xc0>
c0000ac3:	31 d2                	xor    edx,edx
c0000ac5:	89 d8                	mov    eax,ebx
c0000ac7:	f7 d0                	not    eax
c0000ac9:	f7 f6                	div    esi
c0000acb:	39 f8                	cmp    eax,edi
c0000acd:	0f 82 b1 00 00 00    	jb     c0000b84 <simple_strtoul+0x134>
c0000ad3:	0f af fe             	imul   edi,esi
c0000ad6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000add:	01 df                	add    edi,ebx
c0000adf:	41                   	inc    ecx
c0000ae0:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000ae2:	84 d2                	test   dl,dl
c0000ae4:	74 2a                	je     c0000b10 <simple_strtoul+0xc0>
c0000ae6:	0f b6 da             	movzx  ebx,dl
c0000ae9:	f6 83 e0 91 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6e20],0x4
c0000af0:	75 ca                	jne    c0000abc <simple_strtoul+0x6c>
c0000af2:	0f be d2             	movsx  edx,dl
c0000af5:	52                   	push   edx
c0000af6:	e8 2d ff ff ff       	call   c0000a28 <toupper>
c0000afb:	5b                   	pop    ebx
c0000afc:	0f b6 d0             	movzx  edx,al
c0000aff:	f6 82 e0 91 02 c0 01 	test   BYTE PTR [edx-0x3ffd6e20],0x1
c0000b06:	74 08                	je     c0000b10 <simple_strtoul+0xc0>
c0000b08:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000b0b:	39 f3                	cmp    ebx,esi
c0000b0d:	72 b4                	jb     c0000ac3 <simple_strtoul+0x73>
c0000b0f:	90                   	nop
c0000b10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b14:	85 c0                	test   eax,eax
c0000b16:	74 14                	je     c0000b2c <simple_strtoul+0xdc>
c0000b18:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000b1b:	09 f8                	or     eax,edi
c0000b1d:	75 71                	jne    c0000b90 <simple_strtoul+0x140>
c0000b1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b23:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b27:	31 ff                	xor    edi,edi
c0000b29:	89 30                	mov    DWORD PTR [eax],esi
c0000b2b:	90                   	nop
c0000b2c:	4d                   	dec    ebp
c0000b2d:	75 05                	jne    c0000b34 <simple_strtoul+0xe4>
c0000b2f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b34:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b39:	75 02                	jne    c0000b3d <simple_strtoul+0xed>
c0000b3b:	f7 df                	neg    edi
c0000b3d:	83 c4 08             	add    esp,0x8
c0000b40:	89 f8                	mov    eax,edi
c0000b42:	5b                   	pop    ebx
c0000b43:	5e                   	pop    esi
c0000b44:	5f                   	pop    edi
c0000b45:	5d                   	pop    ebp
c0000b46:	c3                   	ret    
c0000b47:	90                   	nop
c0000b48:	41                   	inc    ecx
c0000b49:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b51:	85 f6                	test   esi,esi
c0000b53:	0f 84 3d ff ff ff    	je     c0000a96 <simple_strtoul+0x46>
c0000b59:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b5c:	83 f8 22             	cmp    eax,0x22
c0000b5f:	77 6a                	ja     c0000bcb <simple_strtoul+0x17b>
c0000b61:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b63:	83 fe 08             	cmp    esi,0x8
c0000b66:	0f 84 a2 00 00 00    	je     c0000c0e <simple_strtoul+0x1be>
c0000b6c:	83 fe 10             	cmp    esi,0x10
c0000b6f:	0f 85 31 ff ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000b75:	80 fa 30             	cmp    dl,0x30
c0000b78:	74 2c                	je     c0000ba6 <simple_strtoul+0x156>
c0000b7a:	be 10 00 00 00       	mov    esi,0x10
c0000b7f:	e9 22 ff ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000b84:	bd 01 00 00 00       	mov    ebp,0x1
c0000b89:	31 ff                	xor    edi,edi
c0000b8b:	e9 4f ff ff ff       	jmp    c0000adf <simple_strtoul+0x8f>
c0000b90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b94:	89 08                	mov    DWORD PTR [eax],ecx
c0000b96:	eb 94                	jmp    c0000b2c <simple_strtoul+0xdc>
c0000b98:	41                   	inc    ecx
c0000b99:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000ba1:	e9 e8 fe ff ff       	jmp    c0000a8e <simple_strtoul+0x3e>
c0000ba6:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000baa:	88 04 24             	mov    BYTE PTR [esp],al
c0000bad:	50                   	push   eax
c0000bae:	e8 89 fe ff ff       	call   c0000a3c <tolower>
c0000bb3:	5e                   	pop    esi
c0000bb4:	83 f8 78             	cmp    eax,0x78
c0000bb7:	0f 84 84 00 00 00    	je     c0000c41 <simple_strtoul+0x1f1>
c0000bbd:	41                   	inc    ecx
c0000bbe:	be 10 00 00 00       	mov    esi,0x10
c0000bc3:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bc6:	e9 db fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000bcb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000bcf:	85 ff                	test   edi,edi
c0000bd1:	74 5c                	je     c0000c2f <simple_strtoul+0x1df>
c0000bd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bd7:	85 c9                	test   ecx,ecx
c0000bd9:	75 4e                	jne    c0000c29 <simple_strtoul+0x1d9>
c0000bdb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000be1:	31 ff                	xor    edi,edi
c0000be3:	e9 4c ff ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000be8:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bec:	88 04 24             	mov    BYTE PTR [esp],al
c0000bef:	50                   	push   eax
c0000bf0:	e8 47 fe ff ff       	call   c0000a3c <tolower>
c0000bf5:	5d                   	pop    ebp
c0000bf6:	83 f8 78             	cmp    eax,0x78
c0000bf9:	74 3b                	je     c0000c36 <simple_strtoul+0x1e6>
c0000bfb:	41                   	inc    ecx
c0000bfc:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bff:	80 fa 30             	cmp    dl,0x30
c0000c02:	74 13                	je     c0000c17 <simple_strtoul+0x1c7>
c0000c04:	be 08 00 00 00       	mov    esi,0x8
c0000c09:	e9 98 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000c0e:	80 fa 30             	cmp    dl,0x30
c0000c11:	0f 85 8f fe ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000c17:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000c1a:	41                   	inc    ecx
c0000c1b:	eb e7                	jmp    c0000c04 <simple_strtoul+0x1b4>
c0000c1d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000c21:	85 d2                	test   edx,edx
c0000c23:	74 0a                	je     c0000c2f <simple_strtoul+0x1df>
c0000c25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c29:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c2d:	89 30                	mov    DWORD PTR [eax],esi
c0000c2f:	31 ff                	xor    edi,edi
c0000c31:	e9 fe fe ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000c36:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c39:	83 c1 02             	add    ecx,0x2
c0000c3c:	e9 34 ff ff ff       	jmp    c0000b75 <simple_strtoul+0x125>
c0000c41:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c44:	be 10 00 00 00       	mov    esi,0x10
c0000c49:	83 c1 02             	add    ecx,0x2
c0000c4c:	e9 55 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>

c0000c51 <largebin_index>:
c0000c51:	89 c2                	mov    edx,eax
c0000c53:	c1 ea 08             	shr    edx,0x8
c0000c56:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c5c:	77 10                	ja     c0000c6e <largebin_index+0x1d>
c0000c5e:	0f bd d2             	bsr    edx,edx
c0000c61:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c64:	d3 e8                	shr    eax,cl
c0000c66:	83 e0 03             	and    eax,0x3
c0000c69:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c6d:	c3                   	ret    
c0000c6e:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c73:	c3                   	ret    

c0000c74 <malloc_init_state>:
c0000c74:	53                   	push   ebx
c0000c75:	8d 50 34             	lea    edx,[eax+0x34]
c0000c78:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c7e:	89 d1                	mov    ecx,edx
c0000c80:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c83:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c86:	83 c2 08             	add    edx,0x8
c0000c89:	39 da                	cmp    edx,ebx
c0000c8b:	75 f3                	jne    c0000c80 <malloc_init_state+0xc>
c0000c8d:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c8f:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c99:	83 e2 03             	and    edx,0x3
c0000c9c:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000ca6:	83 ca 48             	or     edx,0x48
c0000ca9:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000cb3:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000cbd:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000cc4:	89 10                	mov    DWORD PTR [eax],edx
c0000cc6:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000cc9:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cd3:	5b                   	pop    ebx
c0000cd4:	c3                   	ret    

c0000cd5 <malloc_consolidate>:
c0000cd5:	8b 10                	mov    edx,DWORD PTR [eax]
c0000cd7:	85 d2                	test   edx,edx
c0000cd9:	0f 84 d8 00 00 00    	je     c0000db7 <malloc_consolidate+0xe2>
c0000cdf:	55                   	push   ebp
c0000ce0:	83 e2 fd             	and    edx,0xfffffffd
c0000ce3:	57                   	push   edi
c0000ce4:	89 c5                	mov    ebp,eax
c0000ce6:	56                   	push   esi
c0000ce7:	8d 78 34             	lea    edi,[eax+0x34]
c0000cea:	53                   	push   ebx
c0000ceb:	83 ec 10             	sub    esp,0x10
c0000cee:	89 10                	mov    DWORD PTR [eax],edx
c0000cf0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cf4:	c1 ea 03             	shr    edx,0x3
c0000cf7:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cfb:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cff:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000d02:	85 d2                	test   edx,edx
c0000d04:	0f 84 98 00 00 00    	je     c0000da2 <malloc_consolidate+0xcd>
c0000d0a:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000d11:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000d14:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000d17:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d1b:	89 f9                	mov    ecx,edi
c0000d1d:	83 e1 fe             	and    ecx,0xfffffffe
c0000d20:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000d23:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000d26:	83 e3 fc             	and    ebx,0xfffffffc
c0000d29:	83 e7 01             	and    edi,0x1
c0000d2c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d2f:	75 14                	jne    c0000d45 <malloc_consolidate+0x70>
c0000d31:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d33:	29 fa                	sub    edx,edi
c0000d35:	01 f9                	add    ecx,edi
c0000d37:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d3a:	89 fb                	mov    ebx,edi
c0000d3c:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d3f:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d42:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d45:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d48:	74 40                	je     c0000d8a <malloc_consolidate+0xb5>
c0000d4a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d4d:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d50:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d54:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d57:	83 e7 01             	and    edi,0x1
c0000d5a:	75 0e                	jne    c0000d6a <malloc_consolidate+0x95>
c0000d5c:	01 d9                	add    ecx,ebx
c0000d5e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d61:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d64:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d67:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d6a:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d6d:	89 ce                	mov    esi,ecx
c0000d6f:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d72:	83 ce 01             	or     esi,0x1
c0000d75:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d78:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d7b:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d7e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d82:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d85:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d88:	eb 0c                	jmp    c0000d96 <malloc_consolidate+0xc1>
c0000d8a:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d8d:	83 c9 01             	or     ecx,0x1
c0000d90:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d93:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d9a:	85 d2                	test   edx,edx
c0000d9c:	0f 85 6f ff ff ff    	jne    c0000d11 <malloc_consolidate+0x3c>
c0000da2:	83 c5 04             	add    ebp,0x4
c0000da5:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000da9:	0f 85 50 ff ff ff    	jne    c0000cff <malloc_consolidate+0x2a>
c0000daf:	83 c4 10             	add    esp,0x10
c0000db2:	5b                   	pop    ebx
c0000db3:	5e                   	pop    esi
c0000db4:	5f                   	pop    edi
c0000db5:	5d                   	pop    ebp
c0000db6:	c3                   	ret    
c0000db7:	e9 b8 fe ff ff       	jmp    c0000c74 <malloc_init_state>

c0000dbc <dlfree>:
c0000dbc:	57                   	push   edi
c0000dbd:	56                   	push   esi
c0000dbe:	53                   	push   ebx
c0000dbf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000dc3:	85 db                	test   ebx,ebx
c0000dc5:	0f 84 e2 00 00 00    	je     c0000ead <dlfree+0xf1>
c0000dcb:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000dce:	8b 0d 80 df 02 c0    	mov    ecx,DWORD PTR ds:0xc002df80
c0000dd4:	89 f0                	mov    eax,esi
c0000dd6:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000dd9:	83 e0 fc             	and    eax,0xfffffffc
c0000ddc:	39 c1                	cmp    ecx,eax
c0000dde:	72 24                	jb     c0000e04 <dlfree+0x48>
c0000de0:	83 c9 03             	or     ecx,0x3
c0000de3:	c1 e8 03             	shr    eax,0x3
c0000de6:	89 0d 80 df 02 c0    	mov    DWORD PTR ds:0xc002df80,ecx
c0000dec:	83 e8 02             	sub    eax,0x2
c0000def:	8b 0c 85 84 df 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd207c]
c0000df6:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000df8:	89 14 85 84 df 02 c0 	mov    DWORD PTR [eax*4-0x3ffd207c],edx
c0000dff:	e9 a9 00 00 00       	jmp    c0000ead <dlfree+0xf1>
c0000e04:	83 e6 02             	and    esi,0x2
c0000e07:	0f 85 a0 00 00 00    	jne    c0000ead <dlfree+0xf1>
c0000e0d:	83 c9 01             	or     ecx,0x1
c0000e10:	8d 34 02             	lea    esi,[edx+eax*1]
c0000e13:	89 0d 80 df 02 c0    	mov    DWORD PTR ds:0xc002df80,ecx
c0000e19:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000e1c:	83 e1 fc             	and    ecx,0xfffffffc
c0000e1f:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000e23:	75 13                	jne    c0000e38 <dlfree+0x7c>
c0000e25:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e28:	29 da                	sub    edx,ebx
c0000e2a:	01 d8                	add    eax,ebx
c0000e2c:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e2f:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e32:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e35:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e38:	39 35 ac df 02 c0    	cmp    DWORD PTR ds:0xc002dfac,esi
c0000e3e:	74 40                	je     c0000e80 <dlfree+0xc4>
c0000e40:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e44:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e47:	80 e3 01             	and    bl,0x1
c0000e4a:	75 0e                	jne    c0000e5a <dlfree+0x9e>
c0000e4c:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e4f:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e52:	01 c8                	add    eax,ecx
c0000e54:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e57:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e5a:	8b 0d bc df 02 c0    	mov    ecx,DWORD PTR ds:0xc002dfbc
c0000e60:	c7 42 0c b4 df 02 c0 	mov    DWORD PTR [edx+0xc],0xc002dfb4
c0000e67:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e6a:	89 15 bc df 02 c0    	mov    DWORD PTR ds:0xc002dfbc,edx
c0000e70:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e73:	89 c1                	mov    ecx,eax
c0000e75:	83 c9 01             	or     ecx,0x1
c0000e78:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e7b:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e7e:	eb 10                	jmp    c0000e90 <dlfree+0xd4>
c0000e80:	01 c8                	add    eax,ecx
c0000e82:	89 c1                	mov    ecx,eax
c0000e84:	83 c9 01             	or     ecx,0x1
c0000e87:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e8a:	89 15 ac df 02 c0    	mov    DWORD PTR ds:0xc002dfac,edx
c0000e90:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e95:	76 16                	jbe    c0000ead <dlfree+0xf1>
c0000e97:	f6 05 80 df 02 c0 02 	test   BYTE PTR ds:0xc002df80,0x2
c0000e9e:	74 0d                	je     c0000ead <dlfree+0xf1>
c0000ea0:	5b                   	pop    ebx
c0000ea1:	b8 80 df 02 c0       	mov    eax,0xc002df80
c0000ea6:	5e                   	pop    esi
c0000ea7:	5f                   	pop    edi
c0000ea8:	e9 28 fe ff ff       	jmp    c0000cd5 <malloc_consolidate>
c0000ead:	5b                   	pop    ebx
c0000eae:	5e                   	pop    esi
c0000eaf:	5f                   	pop    edi
c0000eb0:	c3                   	ret    

c0000eb1 <sYSMALLOc>:
c0000eb1:	55                   	push   ebp
c0000eb2:	57                   	push   edi
c0000eb3:	56                   	push   esi
c0000eb4:	53                   	push   ebx
c0000eb5:	89 d3                	mov    ebx,edx
c0000eb7:	83 ec 2c             	sub    esp,0x2c
c0000eba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000ebe:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000ec4:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000ec7:	8d 42 ff             	lea    eax,[edx-0x1]
c0000eca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ece:	74 1f                	je     c0000eef <sYSMALLOc+0x3e>
c0000ed0:	89 d8                	mov    eax,ebx
c0000ed2:	e8 fe fd ff ff       	call   c0000cd5 <malloc_consolidate>
c0000ed7:	83 ec 0c             	sub    esp,0xc
c0000eda:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ede:	83 e8 07             	sub    eax,0x7
c0000ee1:	50                   	push   eax
c0000ee2:	e8 30 02 00 00       	call   c0001117 <dlmalloc>
c0000ee7:	83 c4 10             	add    esp,0x10
c0000eea:	e9 20 02 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000eef:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000ef2:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ef8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000efb:	83 e0 fc             	and    eax,0xfffffffc
c0000efe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000f06:	83 c0 10             	add    eax,0x10
c0000f09:	01 c1                	add    ecx,eax
c0000f0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000f0f:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000f16:	74 04                	je     c0000f1c <sYSMALLOc+0x6b>
c0000f18:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000f1c:	f7 da                	neg    edx
c0000f1e:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000f22:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000f26:	21 d1                	and    ecx,edx
c0000f28:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f2c:	7f 07                	jg     c0000f35 <sYSMALLOc+0x84>
c0000f2e:	31 c0                	xor    eax,eax
c0000f30:	e9 da 01 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000f35:	83 ec 0c             	sub    esp,0xc
c0000f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f3c:	e8 56 e7 00 00       	call   c000f697 <sbrk>
c0000f41:	83 c4 10             	add    esp,0x10
c0000f44:	89 c6                	mov    esi,eax
c0000f46:	83 f8 ff             	cmp    eax,0xffffffff
c0000f49:	74 e3                	je     c0000f2e <sYSMALLOc+0x7d>
c0000f4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f4f:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f53:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f56:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f5c:	39 f1                	cmp    ecx,esi
c0000f5e:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f64:	75 13                	jne    c0000f79 <sYSMALLOc+0xc8>
c0000f66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f6a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f6e:	83 c8 01             	or     eax,0x1
c0000f71:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f74:	e9 3e 01 00 00       	jmp    c00010b7 <sYSMALLOc+0x206>
c0000f79:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f7f:	88 d0                	mov    al,dl
c0000f81:	83 e0 01             	and    eax,0x1
c0000f84:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f89:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f8d:	0f 95 c0             	setne  al
c0000f90:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f94:	39 f1                	cmp    ecx,esi
c0000f96:	76 12                	jbe    c0000faa <sYSMALLOc+0xf9>
c0000f98:	84 c0                	test   al,al
c0000f9a:	74 0e                	je     c0000faa <sYSMALLOc+0xf9>
c0000f9c:	83 e2 fe             	and    edx,0xfffffffe
c0000f9f:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000fa5:	e9 83 00 00 00       	jmp    c000102d <sYSMALLOc+0x17c>
c0000faa:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000faf:	74 7c                	je     c000102d <sYSMALLOc+0x17c>
c0000fb1:	84 c0                	test   al,al
c0000fb3:	74 0c                	je     c0000fc1 <sYSMALLOc+0x110>
c0000fb5:	89 f0                	mov    eax,esi
c0000fb7:	29 c8                	sub    eax,ecx
c0000fb9:	01 e8                	add    eax,ebp
c0000fbb:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000fc1:	89 f2                	mov    edx,esi
c0000fc3:	83 e2 07             	and    edx,0x7
c0000fc6:	74 0c                	je     c0000fd4 <sYSMALLOc+0x123>
c0000fc8:	b8 08 00 00 00       	mov    eax,0x8
c0000fcd:	29 d0                	sub    eax,edx
c0000fcf:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000fd2:	eb 04                	jmp    c0000fd8 <sYSMALLOc+0x127>
c0000fd4:	89 f5                	mov    ebp,esi
c0000fd6:	31 c0                	xor    eax,eax
c0000fd8:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fdc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fe0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe4:	01 c1                	add    ecx,eax
c0000fe6:	83 ec 0c             	sub    esp,0xc
c0000fe9:	01 f1                	add    ecx,esi
c0000feb:	01 ca                	add    edx,ecx
c0000fed:	29 c8                	sub    eax,ecx
c0000fef:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ff3:	01 c2                	add    edx,eax
c0000ff5:	52                   	push   edx
c0000ff6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ffa:	e8 98 e6 00 00       	call   c000f697 <sbrk>
c0000fff:	83 c4 10             	add    esp,0x10
c0001002:	83 f8 ff             	cmp    eax,0xffffffff
c0001005:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001009:	75 0f                	jne    c000101a <sYSMALLOc+0x169>
c000100b:	83 ec 0c             	sub    esp,0xc
c000100e:	6a 00                	push   0x0
c0001010:	e8 82 e6 00 00       	call   c000f697 <sbrk>
c0001015:	83 c4 10             	add    esp,0x10
c0001018:	eb 30                	jmp    c000104a <sYSMALLOc+0x199>
c000101a:	39 c6                	cmp    esi,eax
c000101c:	76 33                	jbe    c0001051 <sYSMALLOc+0x1a0>
c000101e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001022:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001029:	01 f0                	add    eax,esi
c000102b:	eb 1d                	jmp    c000104a <sYSMALLOc+0x199>
c000102d:	83 ec 0c             	sub    esp,0xc
c0001030:	89 f5                	mov    ebp,esi
c0001032:	6a 00                	push   0x0
c0001034:	e8 5e e6 00 00       	call   c000f697 <sbrk>
c0001039:	89 c2                	mov    edx,eax
c000103b:	29 f2                	sub    edx,esi
c000103d:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001041:	83 c4 10             	add    esp,0x10
c0001044:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000104a:	31 d2                	xor    edx,edx
c000104c:	83 f8 ff             	cmp    eax,0xffffffff
c000104f:	74 66                	je     c00010b7 <sYSMALLOc+0x206>
c0001051:	29 e8                	sub    eax,ebp
c0001053:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0001056:	01 d0                	add    eax,edx
c0001058:	83 c8 01             	or     eax,0x1
c000105b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000105e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001064:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001069:	74 4c                	je     c00010b7 <sYSMALLOc+0x206>
c000106b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000106f:	83 e8 0c             	sub    eax,0xc
c0001072:	83 e0 f8             	and    eax,0xfffffff8
c0001075:	89 c2                	mov    edx,eax
c0001077:	83 ca 01             	or     edx,0x1
c000107a:	83 f8 0f             	cmp    eax,0xf
c000107d:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001080:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001088:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001090:	76 25                	jbe    c00010b7 <sYSMALLOc+0x206>
c0001092:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001098:	83 ec 0c             	sub    esp,0xc
c000109b:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a5:	83 c7 08             	add    edi,0x8
c00010a8:	57                   	push   edi
c00010a9:	e8 0e fd ff ff       	call   c0000dbc <dlfree>
c00010ae:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b4:	83 c4 10             	add    esp,0x10
c00010b7:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c00010bd:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c00010c3:	73 06                	jae    c00010cb <sYSMALLOc+0x21a>
c00010c5:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010cb:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010d1:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010d7:	73 06                	jae    c00010df <sYSMALLOc+0x22e>
c00010d9:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010df:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010e2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010e5:	83 e2 fc             	and    edx,0xfffffffc
c00010e8:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010ec:	0f 82 3c fe ff ff    	jb     c0000f2e <sYSMALLOc+0x7d>
c00010f2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010f6:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010f9:	29 fa                	sub    edx,edi
c00010fb:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010fe:	83 ca 01             	or     edx,0x1
c0001101:	89 fb                	mov    ebx,edi
c0001103:	83 c0 08             	add    eax,0x8
c0001106:	83 cb 01             	or     ebx,0x1
c0001109:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000110c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000110f:	83 c4 2c             	add    esp,0x2c
c0001112:	5b                   	pop    ebx
c0001113:	5e                   	pop    esi
c0001114:	5f                   	pop    edi
c0001115:	5d                   	pop    ebp
c0001116:	c3                   	ret    

c0001117 <dlmalloc>:
c0001117:	55                   	push   ebp
c0001118:	57                   	push   edi
c0001119:	56                   	push   esi
c000111a:	53                   	push   ebx
c000111b:	83 ec 1c             	sub    esp,0x1c
c000111e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001122:	83 f8 df             	cmp    eax,0xffffffdf
c0001125:	0f 87 70 03 00 00    	ja     c000149b <dlmalloc+0x384>
c000112b:	83 c0 0b             	add    eax,0xb
c000112e:	be 10 00 00 00       	mov    esi,0x10
c0001133:	83 f8 0f             	cmp    eax,0xf
c0001136:	76 05                	jbe    c000113d <dlmalloc+0x26>
c0001138:	83 e0 f8             	and    eax,0xfffffff8
c000113b:	89 c6                	mov    esi,eax
c000113d:	8b 3d 80 df 02 c0    	mov    edi,DWORD PTR ds:0xc002df80
c0001143:	f7 c7 01 00 00 00    	test   edi,0x1
c0001149:	75 17                	jne    c0001162 <dlmalloc+0x4b>
c000114b:	85 ff                	test   edi,edi
c000114d:	0f 85 05 03 00 00    	jne    c0001458 <dlmalloc+0x341>
c0001153:	b8 80 df 02 c0       	mov    eax,0xc002df80
c0001158:	e8 78 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c000115d:	e9 f6 02 00 00       	jmp    c0001458 <dlmalloc+0x341>
c0001162:	39 f7                	cmp    edi,esi
c0001164:	72 1f                	jb     c0001185 <dlmalloc+0x6e>
c0001166:	89 f2                	mov    edx,esi
c0001168:	c1 ea 03             	shr    edx,0x3
c000116b:	83 ea 02             	sub    edx,0x2
c000116e:	8b 04 95 84 df 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd207c]
c0001175:	85 c0                	test   eax,eax
c0001177:	74 0c                	je     c0001185 <dlmalloc+0x6e>
c0001179:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000117c:	89 0c 95 84 df 02 c0 	mov    DWORD PTR [edx*4-0x3ffd207c],ecx
c0001183:	eb 30                	jmp    c00011b5 <dlmalloc+0x9e>
c0001185:	89 f0                	mov    eax,esi
c0001187:	81 fe ff 00 00 00    	cmp    esi,0xff
c000118d:	77 2e                	ja     c00011bd <dlmalloc+0xa6>
c000118f:	c1 e8 03             	shr    eax,0x3
c0001192:	8d 14 c5 b4 df 02 c0 	lea    edx,[eax*8-0x3ffd204c]
c0001199:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000119d:	8d 5a f8             	lea    ebx,[edx-0x8]
c00011a0:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00011a3:	39 c3                	cmp    ebx,eax
c00011a5:	74 2e                	je     c00011d5 <dlmalloc+0xbe>
c00011a7:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00011aa:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00011af:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00011b2:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00011b5:	83 c0 08             	add    eax,0x8
c00011b8:	e9 e0 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c00011bd:	e8 8f fa ff ff       	call   c0000c51 <largebin_index>
c00011c2:	83 e7 02             	and    edi,0x2
c00011c5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011c9:	74 0a                	je     c00011d5 <dlmalloc+0xbe>
c00011cb:	b8 80 df 02 c0       	mov    eax,0xc002df80
c00011d0:	e8 00 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c00011d5:	8d 46 10             	lea    eax,[esi+0x10]
c00011d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011dc:	8b 1d c0 df 02 c0    	mov    ebx,DWORD PTR ds:0xc002dfc0
c00011e2:	81 fb b4 df 02 c0    	cmp    ebx,0xc002dfb4
c00011e8:	0f 84 13 01 00 00    	je     c0001301 <dlmalloc+0x1ea>
c00011ee:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011f1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011f4:	83 e7 fc             	and    edi,0xfffffffc
c00011f7:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011fd:	77 4c                	ja     c000124b <dlmalloc+0x134>
c00011ff:	3d b4 df 02 c0       	cmp    eax,0xc002dfb4
c0001204:	75 45                	jne    c000124b <dlmalloc+0x134>
c0001206:	39 1d b0 df 02 c0    	cmp    DWORD PTR ds:0xc002dfb0,ebx
c000120c:	75 3d                	jne    c000124b <dlmalloc+0x134>
c000120e:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001212:	73 37                	jae    c000124b <dlmalloc+0x134>
c0001214:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001217:	89 fa                	mov    edx,edi
c0001219:	a3 bc df 02 c0       	mov    ds:0xc002dfbc,eax
c000121e:	a3 c0 df 02 c0       	mov    ds:0xc002dfc0,eax
c0001223:	a3 b0 df 02 c0       	mov    ds:0xc002dfb0,eax
c0001228:	29 f2                	sub    edx,esi
c000122a:	c7 40 08 b4 df 02 c0 	mov    DWORD PTR [eax+0x8],0xc002dfb4
c0001231:	c7 40 0c b4 df 02 c0 	mov    DWORD PTR [eax+0xc],0xc002dfb4
c0001238:	83 ce 01             	or     esi,0x1
c000123b:	89 d1                	mov    ecx,edx
c000123d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001240:	83 c9 01             	or     ecx,0x1
c0001243:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001246:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001249:	eb 15                	jmp    c0001260 <dlmalloc+0x149>
c000124b:	a3 c0 df 02 c0       	mov    ds:0xc002dfc0,eax
c0001250:	39 fe                	cmp    esi,edi
c0001252:	c7 40 08 b4 df 02 c0 	mov    DWORD PTR [eax+0x8],0xc002dfb4
c0001259:	75 0d                	jne    c0001268 <dlmalloc+0x151>
c000125b:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001260:	8d 43 08             	lea    eax,[ebx+0x8]
c0001263:	e9 35 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c0001268:	89 f8                	mov    eax,edi
c000126a:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001270:	77 19                	ja     c000128b <dlmalloc+0x174>
c0001272:	c1 e8 03             	shr    eax,0x3
c0001275:	8d 14 00             	lea    edx,[eax+eax*1]
c0001278:	83 c2 0d             	add    edx,0xd
c000127b:	8d 2c 95 78 df 02 c0 	lea    ebp,[edx*4-0x3ffd2088]
c0001282:	8b 14 95 80 df 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2080]
c0001289:	eb 46                	jmp    c00012d1 <dlmalloc+0x1ba>
c000128b:	e8 c1 f9 ff ff       	call   c0000c51 <largebin_index>
c0001290:	8d 14 00             	lea    edx,[eax+eax*1]
c0001293:	83 c2 0d             	add    edx,0xd
c0001296:	8d 0c 95 80 df 02 c0 	lea    ecx,[edx*4-0x3ffd2080]
c000129d:	8b 14 95 80 df 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2080]
c00012a4:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00012a7:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00012ab:	89 d5                	mov    ebp,edx
c00012ad:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00012b1:	74 1e                	je     c00012d1 <dlmalloc+0x1ba>
c00012b3:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00012b6:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00012b9:	77 12                	ja     c00012cd <dlmalloc+0x1b6>
c00012bb:	83 cf 01             	or     edi,0x1
c00012be:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00012c1:	76 05                	jbe    c00012c8 <dlmalloc+0x1b1>
c00012c3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00012c6:	eb f6                	jmp    c00012be <dlmalloc+0x1a7>
c00012c8:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012cb:	eb 04                	jmp    c00012d1 <dlmalloc+0x1ba>
c00012cd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012d1:	89 c7                	mov    edi,eax
c00012d3:	88 c1                	mov    cl,al
c00012d5:	c1 ff 05             	sar    edi,0x5
c00012d8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012dc:	bf 01 00 00 00       	mov    edi,0x1
c00012e1:	d3 e7                	shl    edi,cl
c00012e3:	89 f8                	mov    eax,edi
c00012e5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012e9:	09 04 bd b4 e2 02 c0 	or     DWORD PTR [edi*4-0x3ffd1d4c],eax
c00012f0:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012f3:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012f6:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012f9:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012fc:	e9 db fe ff ff       	jmp    c00011dc <dlmalloc+0xc5>
c0001301:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001307:	76 78                	jbe    c0001381 <dlmalloc+0x26a>
c0001309:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000130d:	8d 04 c5 b4 df 02 c0 	lea    eax,[eax*8-0x3ffd204c]
c0001314:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001317:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000131a:	39 ca                	cmp    edx,ecx
c000131c:	74 63                	je     c0001381 <dlmalloc+0x26a>
c000131e:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001321:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001324:	83 e3 fc             	and    ebx,0xfffffffc
c0001327:	39 de                	cmp    esi,ebx
c0001329:	77 52                	ja     c000137d <dlmalloc+0x266>
c000132b:	89 df                	mov    edi,ebx
c000132d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001330:	29 f7                	sub    edi,esi
c0001332:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001335:	01 d3                	add    ebx,edx
c0001337:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000133a:	83 ff 0f             	cmp    edi,0xf
c000133d:	8d 42 08             	lea    eax,[edx+0x8]
c0001340:	77 09                	ja     c000134b <dlmalloc+0x234>
c0001342:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001346:	e9 52 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000134b:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000134e:	83 ce 01             	or     esi,0x1
c0001351:	89 0d bc df 02 c0    	mov    DWORD PTR ds:0xc002dfbc,ecx
c0001357:	89 0d c0 df 02 c0    	mov    DWORD PTR ds:0xc002dfc0,ecx
c000135d:	c7 41 08 b4 df 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002dfb4
c0001364:	c7 41 0c b4 df 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002dfb4
c000136b:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000136e:	89 fa                	mov    edx,edi
c0001370:	83 ca 01             	or     edx,0x1
c0001373:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001376:	89 3b                	mov    DWORD PTR [ebx],edi
c0001378:	e9 20 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000137d:	89 c2                	mov    edx,eax
c000137f:	eb 99                	jmp    c000131a <dlmalloc+0x203>
c0001381:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001385:	b8 01 00 00 00       	mov    eax,0x1
c000138a:	41                   	inc    ecx
c000138b:	89 cb                	mov    ebx,ecx
c000138d:	8d 14 cd ac df 02 c0 	lea    edx,[ecx*8-0x3ffd2054]
c0001394:	c1 eb 05             	shr    ebx,0x5
c0001397:	d3 e0                	shl    eax,cl
c0001399:	8b 3c 9d b4 e2 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1d4c]
c00013a0:	39 f8                	cmp    eax,edi
c00013a2:	77 04                	ja     c00013a8 <dlmalloc+0x291>
c00013a4:	85 c0                	test   eax,eax
c00013a6:	75 26                	jne    c00013ce <dlmalloc+0x2b7>
c00013a8:	43                   	inc    ebx
c00013a9:	83 fb 02             	cmp    ebx,0x2
c00013ac:	0f 87 a6 00 00 00    	ja     c0001458 <dlmalloc+0x341>
c00013b2:	8b 3c 9d b4 e2 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1d4c]
c00013b9:	85 ff                	test   edi,edi
c00013bb:	74 eb                	je     c00013a8 <dlmalloc+0x291>
c00013bd:	89 d8                	mov    eax,ebx
c00013bf:	c1 e0 06             	shl    eax,0x6
c00013c2:	8d 14 85 ac df 02 c0 	lea    edx,[eax*4-0x3ffd2054]
c00013c9:	b8 01 00 00 00       	mov    eax,0x1
c00013ce:	85 f8                	test   eax,edi
c00013d0:	75 07                	jne    c00013d9 <dlmalloc+0x2c2>
c00013d2:	83 c2 08             	add    edx,0x8
c00013d5:	01 c0                	add    eax,eax
c00013d7:	eb f5                	jmp    c00013ce <dlmalloc+0x2b7>
c00013d9:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013dc:	39 ca                	cmp    edx,ecx
c00013de:	75 14                	jne    c00013f4 <dlmalloc+0x2dd>
c00013e0:	89 c1                	mov    ecx,eax
c00013e2:	83 c2 08             	add    edx,0x8
c00013e5:	f7 d1                	not    ecx
c00013e7:	01 c0                	add    eax,eax
c00013e9:	21 cf                	and    edi,ecx
c00013eb:	89 3c 9d b4 e2 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd1d4c],edi
c00013f2:	eb ac                	jmp    c00013a0 <dlmalloc+0x289>
c00013f4:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013f7:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013fa:	83 e0 fc             	and    eax,0xfffffffc
c00013fd:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001400:	89 c3                	mov    ebx,eax
c0001402:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001405:	29 f3                	sub    ebx,esi
c0001407:	8d 14 01             	lea    edx,[ecx+eax*1]
c000140a:	83 fb 0f             	cmp    ebx,0xf
c000140d:	8d 41 08             	lea    eax,[ecx+0x8]
c0001410:	77 09                	ja     c000141b <dlmalloc+0x304>
c0001412:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001416:	e9 82 00 00 00       	jmp    c000149d <dlmalloc+0x386>
c000141b:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000141e:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001424:	89 3d bc df 02 c0    	mov    DWORD PTR ds:0xc002dfbc,edi
c000142a:	89 3d c0 df 02 c0    	mov    DWORD PTR ds:0xc002dfc0,edi
c0001430:	c7 47 08 b4 df 02 c0 	mov    DWORD PTR [edi+0x8],0xc002dfb4
c0001437:	c7 47 0c b4 df 02 c0 	mov    DWORD PTR [edi+0xc],0xc002dfb4
c000143e:	77 06                	ja     c0001446 <dlmalloc+0x32f>
c0001440:	89 3d b0 df 02 c0    	mov    DWORD PTR ds:0xc002dfb0,edi
c0001446:	83 ce 01             	or     esi,0x1
c0001449:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000144c:	89 d9                	mov    ecx,ebx
c000144e:	83 c9 01             	or     ecx,0x1
c0001451:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001454:	89 1a                	mov    DWORD PTR [edx],ebx
c0001456:	eb 45                	jmp    c000149d <dlmalloc+0x386>
c0001458:	a1 ac df 02 c0       	mov    eax,ds:0xc002dfac
c000145d:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001460:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001463:	83 e2 fc             	and    edx,0xfffffffc
c0001466:	39 d1                	cmp    ecx,edx
c0001468:	77 1e                	ja     c0001488 <dlmalloc+0x371>
c000146a:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000146d:	89 f3                	mov    ebx,esi
c000146f:	89 0d ac df 02 c0    	mov    DWORD PTR ds:0xc002dfac,ecx
c0001475:	83 cb 01             	or     ebx,0x1
c0001478:	29 f2                	sub    edx,esi
c000147a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000147d:	83 ca 01             	or     edx,0x1
c0001480:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001483:	e9 2d fd ff ff       	jmp    c00011b5 <dlmalloc+0x9e>
c0001488:	83 c4 1c             	add    esp,0x1c
c000148b:	89 f0                	mov    eax,esi
c000148d:	5b                   	pop    ebx
c000148e:	ba 80 df 02 c0       	mov    edx,0xc002df80
c0001493:	5e                   	pop    esi
c0001494:	5f                   	pop    edi
c0001495:	5d                   	pop    ebp
c0001496:	e9 16 fa ff ff       	jmp    c0000eb1 <sYSMALLOc>
c000149b:	31 c0                	xor    eax,eax
c000149d:	83 c4 1c             	add    esp,0x1c
c00014a0:	5b                   	pop    ebx
c00014a1:	5e                   	pop    esi
c00014a2:	5f                   	pop    edi
c00014a3:	5d                   	pop    ebp
c00014a4:	c3                   	ret    

c00014a5 <iALLOc>:
c00014a5:	55                   	push   ebp
c00014a6:	89 c5                	mov    ebp,eax
c00014a8:	57                   	push   edi
c00014a9:	56                   	push   esi
c00014aa:	53                   	push   ebx
c00014ab:	83 ec 2c             	sub    esp,0x2c
c00014ae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00014b2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00014b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00014ba:	83 3d 80 df 02 c0 00 	cmp    DWORD PTR ds:0xc002df80,0x0
c00014c1:	75 12                	jne    c00014d5 <iALLOc+0x30>
c00014c3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00014c7:	b8 80 df 02 c0       	mov    eax,0xc002df80
c00014cc:	e8 04 f8 ff ff       	call   c0000cd5 <malloc_consolidate>
c00014d1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014d5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014da:	74 12                	je     c00014ee <iALLOc+0x49>
c00014dc:	85 ed                	test   ebp,ebp
c00014de:	0f 84 64 01 00 00    	je     c0001648 <iALLOc+0x1a3>
c00014e4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014ec:	eb 33                	jmp    c0001521 <iALLOc+0x7c>
c00014ee:	85 ed                	test   ebp,ebp
c00014f0:	75 14                	jne    c0001506 <iALLOc+0x61>
c00014f2:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014fa:	83 c4 2c             	add    esp,0x2c
c00014fd:	5b                   	pop    ebx
c00014fe:	5e                   	pop    esi
c00014ff:	5f                   	pop    edi
c0001500:	5d                   	pop    ebp
c0001501:	e9 11 fc ff ff       	jmp    c0001117 <dlmalloc>
c0001506:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000150d:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001515:	83 f8 0f             	cmp    eax,0xf
c0001518:	76 07                	jbe    c0001521 <iALLOc+0x7c>
c000151a:	83 e0 f8             	and    eax,0xfffffff8
c000151d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001521:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001526:	75 09                	jne    c0001531 <iALLOc+0x8c>
c0001528:	89 d0                	mov    eax,edx
c000152a:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000152d:	31 f6                	xor    esi,esi
c000152f:	eb 3b                	jmp    c000156c <iALLOc+0xc7>
c0001531:	8b 02                	mov    eax,DWORD PTR [edx]
c0001533:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000153b:	83 c0 0b             	add    eax,0xb
c000153e:	83 f8 0f             	cmp    eax,0xf
c0001541:	76 07                	jbe    c000154a <iALLOc+0xa5>
c0001543:	83 e0 f8             	and    eax,0xfffffff8
c0001546:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000154a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000154e:	0f af f5             	imul   esi,ebp
c0001551:	eb 25                	jmp    c0001578 <iALLOc+0xd3>
c0001553:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001555:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001558:	bb 10 00 00 00       	mov    ebx,0x10
c000155d:	83 f9 0f             	cmp    ecx,0xf
c0001560:	76 05                	jbe    c0001567 <iALLOc+0xc2>
c0001562:	83 e1 f8             	and    ecx,0xfffffff8
c0001565:	89 cb                	mov    ebx,ecx
c0001567:	01 de                	add    esi,ebx
c0001569:	83 c0 04             	add    eax,0x4
c000156c:	39 c7                	cmp    edi,eax
c000156e:	75 e3                	jne    c0001553 <iALLOc+0xae>
c0001570:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001578:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000157c:	8b 1d d4 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e2d4
c0001582:	83 ec 0c             	sub    esp,0xc
c0001585:	c7 05 d4 e2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e2d4,0x0
c000158f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001593:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001597:	50                   	push   eax
c0001598:	e8 7a fb ff ff       	call   c0001117 <dlmalloc>
c000159d:	83 c4 10             	add    esp,0x10
c00015a0:	89 1d d4 e2 02 c0    	mov    DWORD PTR ds:0xc002e2d4,ebx
c00015a6:	85 c0                	test   eax,eax
c00015a8:	0f 84 92 00 00 00    	je     c0001640 <iALLOc+0x19b>
c00015ae:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00015b1:	8d 78 f8             	lea    edi,[eax-0x8]
c00015b4:	83 e3 fc             	and    ebx,0xfffffffc
c00015b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00015bb:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00015c0:	74 1e                	je     c00015e0 <iALLOc+0x13b>
c00015c2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00015c6:	89 d9                	mov    ecx,ebx
c00015c8:	52                   	push   edx
c00015c9:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015cd:	83 e9 04             	sub    ecx,0x4
c00015d0:	51                   	push   ecx
c00015d1:	6a 00                	push   0x0
c00015d3:	50                   	push   eax
c00015d4:	e8 9f f1 ff ff       	call   c0000778 <memset>
c00015d9:	83 c4 10             	add    esp,0x10
c00015dc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015e5:	75 14                	jne    c00015fb <iALLOc+0x156>
c00015e7:	8d 04 37             	lea    eax,[edi+esi*1]
c00015ea:	29 f3                	sub    ebx,esi
c00015ec:	8d 48 08             	lea    ecx,[eax+0x8]
c00015ef:	83 cb 01             	or     ebx,0x1
c00015f2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015f6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015f9:	89 f3                	mov    ebx,esi
c00015fb:	31 c0                	xor    eax,eax
c00015fd:	4d                   	dec    ebp
c00015fe:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001601:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001605:	39 c5                	cmp    ebp,eax
c0001607:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000160a:	74 2c                	je     c0001638 <iALLOc+0x193>
c000160c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001610:	85 c9                	test   ecx,ecx
c0001612:	75 15                	jne    c0001629 <iALLOc+0x184>
c0001614:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001617:	8d 71 0b             	lea    esi,[ecx+0xb]
c000161a:	b9 10 00 00 00       	mov    ecx,0x10
c000161f:	83 fe 0f             	cmp    esi,0xf
c0001622:	76 05                	jbe    c0001629 <iALLOc+0x184>
c0001624:	83 e6 f8             	and    esi,0xfffffff8
c0001627:	89 f1                	mov    ecx,esi
c0001629:	89 ce                	mov    esi,ecx
c000162b:	29 cb                	sub    ebx,ecx
c000162d:	83 ce 01             	or     esi,0x1
c0001630:	40                   	inc    eax
c0001631:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001634:	01 cf                	add    edi,ecx
c0001636:	eb c6                	jmp    c00015fe <iALLOc+0x159>
c0001638:	83 cb 01             	or     ebx,0x1
c000163b:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000163e:	eb 08                	jmp    c0001648 <iALLOc+0x1a3>
c0001640:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001648:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000164c:	83 c4 2c             	add    esp,0x2c
c000164f:	5b                   	pop    ebx
c0001650:	5e                   	pop    esi
c0001651:	5f                   	pop    edi
c0001652:	5d                   	pop    ebp
c0001653:	c3                   	ret    

c0001654 <dlrealloc>:
c0001654:	55                   	push   ebp
c0001655:	57                   	push   edi
c0001656:	56                   	push   esi
c0001657:	53                   	push   ebx
c0001658:	83 ec 1c             	sub    esp,0x1c
c000165b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000165f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001663:	85 db                	test   ebx,ebx
c0001665:	75 10                	jne    c0001677 <dlrealloc+0x23>
c0001667:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000166b:	83 c4 1c             	add    esp,0x1c
c000166e:	5b                   	pop    ebx
c000166f:	5e                   	pop    esi
c0001670:	5f                   	pop    edi
c0001671:	5d                   	pop    ebp
c0001672:	e9 a0 fa ff ff       	jmp    c0001117 <dlmalloc>
c0001677:	83 f8 df             	cmp    eax,0xffffffdf
c000167a:	76 07                	jbe    c0001683 <dlrealloc+0x2f>
c000167c:	31 db                	xor    ebx,ebx
c000167e:	e9 7c 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c0001683:	83 c0 0b             	add    eax,0xb
c0001686:	bf 10 00 00 00       	mov    edi,0x10
c000168b:	83 f8 0f             	cmp    eax,0xf
c000168e:	76 05                	jbe    c0001695 <dlrealloc+0x41>
c0001690:	83 e0 f8             	and    eax,0xfffffff8
c0001693:	89 c7                	mov    edi,eax
c0001695:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001698:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000169b:	89 c6                	mov    esi,eax
c000169d:	83 e6 fc             	and    esi,0xfffffffc
c00016a0:	a8 02                	test   al,0x2
c00016a2:	75 d8                	jne    c000167c <dlrealloc+0x28>
c00016a4:	39 f7                	cmp    edi,esi
c00016a6:	0f 86 15 01 00 00    	jbe    c00017c1 <dlrealloc+0x16d>
c00016ac:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00016b0:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00016b3:	39 15 ac df 02 c0    	cmp    DWORD PTR ds:0xc002dfac,edx
c00016b9:	75 33                	jne    c00016ee <dlrealloc+0x9a>
c00016bb:	83 e1 fc             	and    ecx,0xfffffffc
c00016be:	01 f1                	add    ecx,esi
c00016c0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016c4:	8d 4f 10             	lea    ecx,[edi+0x10]
c00016c7:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016cb:	77 49                	ja     c0001716 <dlrealloc+0xc2>
c00016cd:	01 fd                	add    ebp,edi
c00016cf:	83 e0 01             	and    eax,0x1
c00016d2:	09 f8                	or     eax,edi
c00016d4:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016d7:	89 2d ac df 02 c0    	mov    DWORD PTR ds:0xc002dfac,ebp
c00016dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016e1:	29 f8                	sub    eax,edi
c00016e3:	83 c8 01             	or     eax,0x1
c00016e6:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00016e9:	e9 11 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c00016ee:	89 c8                	mov    eax,ecx
c00016f0:	83 e0 fe             	and    eax,0xfffffffe
c00016f3:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016f8:	75 1c                	jne    c0001716 <dlrealloc+0xc2>
c00016fa:	83 e1 fc             	and    ecx,0xfffffffc
c00016fd:	01 f1                	add    ecx,esi
c00016ff:	39 cf                	cmp    edi,ecx
c0001701:	77 13                	ja     c0001716 <dlrealloc+0xc2>
c0001703:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001706:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001709:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000170c:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000170f:	89 ce                	mov    esi,ecx
c0001711:	e9 ab 00 00 00       	jmp    c00017c1 <dlrealloc+0x16d>
c0001716:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000171a:	8d 47 f9             	lea    eax,[edi-0x7]
c000171d:	83 ec 0c             	sub    esp,0xc
c0001720:	50                   	push   eax
c0001721:	e8 f1 f9 ff ff       	call   c0001117 <dlmalloc>
c0001726:	83 c4 10             	add    esp,0x10
c0001729:	89 c1                	mov    ecx,eax
c000172b:	85 c0                	test   eax,eax
c000172d:	0f 84 49 ff ff ff    	je     c000167c <dlrealloc+0x28>
c0001733:	8d 40 f8             	lea    eax,[eax-0x8]
c0001736:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000173a:	39 c2                	cmp    edx,eax
c000173c:	75 0a                	jne    c0001748 <dlrealloc+0xf4>
c000173e:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001741:	83 e0 fc             	and    eax,0xfffffffc
c0001744:	01 c6                	add    esi,eax
c0001746:	eb 79                	jmp    c00017c1 <dlrealloc+0x16d>
c0001748:	83 ee 04             	sub    esi,0x4
c000174b:	83 fe 27             	cmp    esi,0x27
c000174e:	76 16                	jbe    c0001766 <dlrealloc+0x112>
c0001750:	50                   	push   eax
c0001751:	56                   	push   esi
c0001752:	53                   	push   ebx
c0001753:	51                   	push   ecx
c0001754:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001758:	e8 e7 ef ff ff       	call   c0000744 <memcpy>
c000175d:	83 c4 10             	add    esp,0x10
c0001760:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001764:	eb 43                	jmp    c00017a9 <dlrealloc+0x155>
c0001766:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001768:	83 fe 13             	cmp    esi,0x13
c000176b:	89 01                	mov    DWORD PTR [ecx],eax
c000176d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001770:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001773:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001776:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001779:	76 2e                	jbe    c00017a9 <dlrealloc+0x155>
c000177b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000177e:	83 fe 1b             	cmp    esi,0x1b
c0001781:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001784:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001787:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c000178a:	76 1d                	jbe    c00017a9 <dlrealloc+0x155>
c000178c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000178f:	83 fe 23             	cmp    esi,0x23
c0001792:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001795:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001798:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c000179b:	76 0c                	jbe    c00017a9 <dlrealloc+0x155>
c000179d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00017a0:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00017a3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00017a6:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00017a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017ad:	83 ec 0c             	sub    esp,0xc
c00017b0:	53                   	push   ebx
c00017b1:	e8 06 f6 ff ff       	call   c0000dbc <dlfree>
c00017b6:	83 c4 10             	add    esp,0x10
c00017b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00017bd:	89 cb                	mov    ebx,ecx
c00017bf:	eb 3e                	jmp    c00017ff <dlrealloc+0x1ab>
c00017c1:	89 f2                	mov    edx,esi
c00017c3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017c6:	29 fa                	sub    edx,edi
c00017c8:	83 e1 01             	and    ecx,0x1
c00017cb:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00017cf:	83 fa 0f             	cmp    edx,0xf
c00017d2:	77 0b                	ja     c00017df <dlrealloc+0x18b>
c00017d4:	09 ce                	or     esi,ecx
c00017d6:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00017d9:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017dd:	eb 20                	jmp    c00017ff <dlrealloc+0x1ab>
c00017df:	01 fd                	add    ebp,edi
c00017e1:	83 ec 0c             	sub    esp,0xc
c00017e4:	09 cf                	or     edi,ecx
c00017e6:	83 ca 01             	or     edx,0x1
c00017e9:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00017ec:	83 c5 08             	add    ebp,0x8
c00017ef:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00017f2:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017f6:	55                   	push   ebp
c00017f7:	e8 c0 f5 ff ff       	call   c0000dbc <dlfree>
c00017fc:	83 c4 10             	add    esp,0x10
c00017ff:	83 c4 1c             	add    esp,0x1c
c0001802:	89 d8                	mov    eax,ebx
c0001804:	5b                   	pop    ebx
c0001805:	5e                   	pop    esi
c0001806:	5f                   	pop    edi
c0001807:	5d                   	pop    ebp
c0001808:	c3                   	ret    

c0001809 <dlmemalign>:
c0001809:	55                   	push   ebp
c000180a:	57                   	push   edi
c000180b:	56                   	push   esi
c000180c:	53                   	push   ebx
c000180d:	83 ec 0c             	sub    esp,0xc
c0001810:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001814:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001818:	83 fa 08             	cmp    edx,0x8
c000181b:	77 10                	ja     c000182d <dlmemalign+0x24>
c000181d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001821:	83 c4 0c             	add    esp,0xc
c0001824:	5b                   	pop    ebx
c0001825:	5e                   	pop    esi
c0001826:	5f                   	pop    edi
c0001827:	5d                   	pop    ebp
c0001828:	e9 ea f8 ff ff       	jmp    c0001117 <dlmalloc>
c000182d:	bf 10 00 00 00       	mov    edi,0x10
c0001832:	83 fa 0f             	cmp    edx,0xf
c0001835:	76 13                	jbe    c000184a <dlmemalign+0x41>
c0001837:	8d 4a ff             	lea    ecx,[edx-0x1]
c000183a:	85 d1                	test   ecx,edx
c000183c:	75 04                	jne    c0001842 <dlmemalign+0x39>
c000183e:	89 d7                	mov    edi,edx
c0001840:	eb 08                	jmp    c000184a <dlmemalign+0x41>
c0001842:	39 d7                	cmp    edi,edx
c0001844:	73 04                	jae    c000184a <dlmemalign+0x41>
c0001846:	01 ff                	add    edi,edi
c0001848:	eb f8                	jmp    c0001842 <dlmemalign+0x39>
c000184a:	83 f8 df             	cmp    eax,0xffffffdf
c000184d:	76 07                	jbe    c0001856 <dlmemalign+0x4d>
c000184f:	31 c0                	xor    eax,eax
c0001851:	e9 ce 00 00 00       	jmp    c0001924 <dlmemalign+0x11b>
c0001856:	83 c0 0b             	add    eax,0xb
c0001859:	bd 10 00 00 00       	mov    ebp,0x10
c000185e:	83 f8 0f             	cmp    eax,0xf
c0001861:	76 05                	jbe    c0001868 <dlmemalign+0x5f>
c0001863:	83 e0 f8             	and    eax,0xfffffff8
c0001866:	89 c5                	mov    ebp,eax
c0001868:	83 ec 0c             	sub    esp,0xc
c000186b:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000186f:	50                   	push   eax
c0001870:	e8 a2 f8 ff ff       	call   c0001117 <dlmalloc>
c0001875:	83 c4 10             	add    esp,0x10
c0001878:	89 c1                	mov    ecx,eax
c000187a:	85 c0                	test   eax,eax
c000187c:	74 d1                	je     c000184f <dlmemalign+0x46>
c000187e:	31 d2                	xor    edx,edx
c0001880:	8d 70 f8             	lea    esi,[eax-0x8]
c0001883:	f7 f7                	div    edi
c0001885:	85 d2                	test   edx,edx
c0001887:	74 62                	je     c00018eb <dlmemalign+0xe2>
c0001889:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000188d:	89 f8                	mov    eax,edi
c000188f:	f7 d8                	neg    eax
c0001891:	21 c3                	and    ebx,eax
c0001893:	83 eb 08             	sub    ebx,0x8
c0001896:	89 d8                	mov    eax,ebx
c0001898:	29 f0                	sub    eax,esi
c000189a:	83 f8 0f             	cmp    eax,0xf
c000189d:	77 02                	ja     c00018a1 <dlmemalign+0x98>
c000189f:	01 fb                	add    ebx,edi
c00018a1:	89 d8                	mov    eax,ebx
c00018a3:	29 f0                	sub    eax,esi
c00018a5:	89 c6                	mov    esi,eax
c00018a7:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018aa:	89 c2                	mov    edx,eax
c00018ac:	83 e2 fc             	and    edx,0xfffffffc
c00018af:	29 f2                	sub    edx,esi
c00018b1:	a8 02                	test   al,0x2
c00018b3:	74 10                	je     c00018c5 <dlmemalign+0xbc>
c00018b5:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00018b8:	83 ca 02             	or     edx,0x2
c00018bb:	8d 43 08             	lea    eax,[ebx+0x8]
c00018be:	89 33                	mov    DWORD PTR [ebx],esi
c00018c0:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00018c3:	eb 5f                	jmp    c0001924 <dlmemalign+0x11b>
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	89 d0                	mov    eax,edx
c00018ca:	83 c8 01             	or     eax,0x1
c00018cd:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00018d0:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00018d5:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018d8:	83 e0 01             	and    eax,0x1
c00018db:	09 f0                	or     eax,esi
c00018dd:	89 de                	mov    esi,ebx
c00018df:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018e2:	51                   	push   ecx
c00018e3:	e8 d4 f4 ff ff       	call   c0000dbc <dlfree>
c00018e8:	83 c4 10             	add    esp,0x10
c00018eb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018ee:	a8 02                	test   al,0x2
c00018f0:	75 2f                	jne    c0001921 <dlmemalign+0x118>
c00018f2:	83 e0 fc             	and    eax,0xfffffffc
c00018f5:	8d 55 10             	lea    edx,[ebp+0x10]
c00018f8:	39 c2                	cmp    edx,eax
c00018fa:	73 25                	jae    c0001921 <dlmemalign+0x118>
c00018fc:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018ff:	83 ec 0c             	sub    esp,0xc
c0001902:	29 e8                	sub    eax,ebp
c0001904:	83 c2 08             	add    edx,0x8
c0001907:	83 c8 01             	or     eax,0x1
c000190a:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000190d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001910:	83 e0 01             	and    eax,0x1
c0001913:	09 c5                	or     ebp,eax
c0001915:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001918:	52                   	push   edx
c0001919:	e8 9e f4 ff ff       	call   c0000dbc <dlfree>
c000191e:	83 c4 10             	add    esp,0x10
c0001921:	8d 46 08             	lea    eax,[esi+0x8]
c0001924:	83 c4 0c             	add    esp,0xc
c0001927:	5b                   	pop    ebx
c0001928:	5e                   	pop    esi
c0001929:	5f                   	pop    edi
c000192a:	5d                   	pop    ebp
c000192b:	c3                   	ret    

c000192c <dlcalloc>:
c000192c:	53                   	push   ebx
c000192d:	83 ec 14             	sub    esp,0x14
c0001930:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001934:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001939:	50                   	push   eax
c000193a:	e8 d8 f7 ff ff       	call   c0001117 <dlmalloc>
c000193f:	83 c4 10             	add    esp,0x10
c0001942:	89 c3                	mov    ebx,eax
c0001944:	85 c0                	test   eax,eax
c0001946:	74 77                	je     c00019bf <dlcalloc+0x93>
c0001948:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000194b:	89 d0                	mov    eax,edx
c000194d:	83 e0 fc             	and    eax,0xfffffffc
c0001950:	80 e2 02             	and    dl,0x2
c0001953:	75 5a                	jne    c00019af <dlcalloc+0x83>
c0001955:	83 e8 04             	sub    eax,0x4
c0001958:	83 f8 27             	cmp    eax,0x27
c000195b:	76 03                	jbe    c0001960 <dlcalloc+0x34>
c000195d:	51                   	push   ecx
c000195e:	eb 53                	jmp    c00019b3 <dlcalloc+0x87>
c0001960:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001966:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000196d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001974:	83 f8 13             	cmp    eax,0x13
c0001977:	76 46                	jbe    c00019bf <dlcalloc+0x93>
c0001979:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001980:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001987:	83 f8 1b             	cmp    eax,0x1b
c000198a:	76 33                	jbe    c00019bf <dlcalloc+0x93>
c000198c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001993:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000199a:	83 f8 23             	cmp    eax,0x23
c000199d:	76 20                	jbe    c00019bf <dlcalloc+0x93>
c000199f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00019a6:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00019ad:	eb 10                	jmp    c00019bf <dlcalloc+0x93>
c00019af:	83 e8 08             	sub    eax,0x8
c00019b2:	52                   	push   edx
c00019b3:	50                   	push   eax
c00019b4:	6a 00                	push   0x0
c00019b6:	53                   	push   ebx
c00019b7:	e8 bc ed ff ff       	call   c0000778 <memset>
c00019bc:	83 c4 10             	add    esp,0x10
c00019bf:	89 d8                	mov    eax,ebx
c00019c1:	83 c4 08             	add    esp,0x8
c00019c4:	5b                   	pop    ebx
c00019c5:	c3                   	ret    

c00019c6 <dlcfree>:
c00019c6:	e9 f1 f3 ff ff       	jmp    c0000dbc <dlfree>

c00019cb <dlindependent_calloc>:
c00019cb:	83 ec 28             	sub    esp,0x28
c00019ce:	b9 03 00 00 00       	mov    ecx,0x3
c00019d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019df:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019e7:	e8 b9 fa ff ff       	call   c00014a5 <iALLOc>
c00019ec:	83 c4 2c             	add    esp,0x2c
c00019ef:	c3                   	ret    

c00019f0 <dlindependent_comalloc>:
c00019f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019f8:	31 c9                	xor    ecx,ecx
c00019fa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001a02:	e9 9e fa ff ff       	jmp    c00014a5 <iALLOc>

c0001a07 <dlvalloc>:
c0001a07:	83 ec 0c             	sub    esp,0xc
c0001a0a:	83 3d 80 df 02 c0 00 	cmp    DWORD PTR ds:0xc002df80,0x0
c0001a11:	75 0a                	jne    c0001a1d <dlvalloc+0x16>
c0001a13:	b8 80 df 02 c0       	mov    eax,0xc002df80
c0001a18:	e8 b8 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a1d:	50                   	push   eax
c0001a1e:	50                   	push   eax
c0001a1f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001a23:	ff 35 dc e2 02 c0    	push   DWORD PTR ds:0xc002e2dc
c0001a29:	e8 db fd ff ff       	call   c0001809 <dlmemalign>
c0001a2e:	83 c4 1c             	add    esp,0x1c
c0001a31:	c3                   	ret    

c0001a32 <dlpvalloc>:
c0001a32:	83 ec 0c             	sub    esp,0xc
c0001a35:	83 3d 80 df 02 c0 00 	cmp    DWORD PTR ds:0xc002df80,0x0
c0001a3c:	75 0a                	jne    c0001a48 <dlpvalloc+0x16>
c0001a3e:	b8 80 df 02 c0       	mov    eax,0xc002df80
c0001a43:	e8 8d f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a48:	a1 dc e2 02 c0       	mov    eax,ds:0xc002e2dc
c0001a4d:	89 c1                	mov    ecx,eax
c0001a4f:	52                   	push   edx
c0001a50:	f7 d9                	neg    ecx
c0001a52:	52                   	push   edx
c0001a53:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a57:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a5b:	21 ca                	and    edx,ecx
c0001a5d:	52                   	push   edx
c0001a5e:	50                   	push   eax
c0001a5f:	e8 a5 fd ff ff       	call   c0001809 <dlmemalign>
c0001a64:	83 c4 1c             	add    esp,0x1c
c0001a67:	c3                   	ret    

c0001a68 <dlmalloc_trim>:
c0001a68:	b8 80 df 02 c0       	mov    eax,0xc002df80
c0001a6d:	e8 63 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a72:	31 c0                	xor    eax,eax
c0001a74:	c3                   	ret    

c0001a75 <dlmalloc_usable_size>:
c0001a75:	53                   	push   ebx
c0001a76:	31 c0                	xor    eax,eax
c0001a78:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a7c:	85 c9                	test   ecx,ecx
c0001a7e:	74 24                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a80:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a83:	f6 c2 02             	test   dl,0x2
c0001a86:	74 08                	je     c0001a90 <dlmalloc_usable_size+0x1b>
c0001a88:	83 e2 fc             	and    edx,0xfffffffc
c0001a8b:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a8e:	eb 14                	jmp    c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a90:	89 d3                	mov    ebx,edx
c0001a92:	31 c0                	xor    eax,eax
c0001a94:	83 e3 fe             	and    ebx,0xfffffffe
c0001a97:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a9c:	74 06                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a9e:	83 e2 fc             	and    edx,0xfffffffc
c0001aa1:	8d 42 fc             	lea    eax,[edx-0x4]
c0001aa4:	5b                   	pop    ebx
c0001aa5:	c3                   	ret    

c0001aa6 <dlmallinfo>:
c0001aa6:	55                   	push   ebp
c0001aa7:	57                   	push   edi
c0001aa8:	56                   	push   esi
c0001aa9:	53                   	push   ebx
c0001aaa:	83 ec 08             	sub    esp,0x8
c0001aad:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001ab1:	83 3d ac df 02 c0 00 	cmp    DWORD PTR ds:0xc002dfac,0x0
c0001ab8:	75 0a                	jne    c0001ac4 <dlmallinfo+0x1e>
c0001aba:	b8 80 df 02 c0       	mov    eax,0xc002df80
c0001abf:	e8 11 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001ac4:	a1 ac df 02 c0       	mov    eax,ds:0xc002dfac
c0001ac9:	31 ed                	xor    ebp,ebp
c0001acb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001ace:	31 c9                	xor    ecx,ecx
c0001ad0:	83 e0 fc             	and    eax,0xfffffffc
c0001ad3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ad7:	31 c0                	xor    eax,eax
c0001ad9:	8b 14 85 84 df 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd207c]
c0001ae0:	85 d2                	test   edx,edx
c0001ae2:	74 0e                	je     c0001af2 <dlmallinfo+0x4c>
c0001ae4:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001ae7:	45                   	inc    ebp
c0001ae8:	83 e6 fc             	and    esi,0xfffffffc
c0001aeb:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aee:	01 f1                	add    ecx,esi
c0001af0:	eb ee                	jmp    c0001ae0 <dlmallinfo+0x3a>
c0001af2:	40                   	inc    eax
c0001af3:	83 f8 0a             	cmp    eax,0xa
c0001af6:	75 e1                	jne    c0001ad9 <dlmallinfo+0x33>
c0001af8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001afc:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001b03:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001b06:	b8 b4 df 02 c0       	mov    eax,0xc002dfb4
c0001b0b:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001b0e:	39 f0                	cmp    eax,esi
c0001b10:	74 10                	je     c0001b22 <dlmallinfo+0x7c>
c0001b12:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001b15:	ff 04 24             	inc    DWORD PTR [esp]
c0001b18:	83 e7 fc             	and    edi,0xfffffffc
c0001b1b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001b1e:	01 fa                	add    edx,edi
c0001b20:	eb ec                	jmp    c0001b0e <dlmallinfo+0x68>
c0001b22:	83 c0 08             	add    eax,0x8
c0001b25:	3d ac e2 02 c0       	cmp    eax,0xc002e2ac
c0001b2a:	75 df                	jne    c0001b0b <dlmallinfo+0x65>
c0001b2c:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001b2f:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001b32:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001b35:	a1 e8 e2 02 c0       	mov    eax,ds:0xc002e2e8
c0001b3a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b3d:	89 03                	mov    DWORD PTR [ebx],eax
c0001b3f:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b42:	8b 35 d0 e2 02 c0    	mov    esi,DWORD PTR ds:0xc002e2d0
c0001b48:	29 d0                	sub    eax,edx
c0001b4a:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b4d:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b50:	8b 35 e4 e2 02 c0    	mov    esi,DWORD PTR ds:0xc002e2e4
c0001b56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b5a:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b5d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b60:	8b 35 f4 e2 02 c0    	mov    esi,DWORD PTR ds:0xc002e2f4
c0001b66:	89 d8                	mov    eax,ebx
c0001b68:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b6b:	83 c4 08             	add    esp,0x8
c0001b6e:	5b                   	pop    ebx
c0001b6f:	5e                   	pop    esi
c0001b70:	5f                   	pop    edi
c0001b71:	5d                   	pop    ebp
c0001b72:	c2 04 00             	ret    0x4

c0001b75 <dlmalloc_stats>:
c0001b75:	83 ec 30             	sub    esp,0x30
c0001b78:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b7c:	50                   	push   eax
c0001b7d:	e8 24 ff ff ff       	call   c0001aa6 <dlmallinfo>
c0001b82:	83 c4 30             	add    esp,0x30
c0001b85:	c3                   	ret    

c0001b86 <dlmallopt>:
c0001b86:	56                   	push   esi
c0001b87:	b8 80 df 02 c0       	mov    eax,0xc002df80
c0001b8c:	53                   	push   ebx
c0001b8d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b95:	e8 3b f1 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001b9a:	8d 46 04             	lea    eax,[esi+0x4]
c0001b9d:	83 f8 05             	cmp    eax,0x5
c0001ba0:	77 67                	ja     c0001c09 <dlmallopt+0x83>
c0001ba2:	ff 24 85 e4 92 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6d1c]
c0001ba9:	83 fb 50             	cmp    ebx,0x50
c0001bac:	77 5b                	ja     c0001c09 <dlmallopt+0x83>
c0001bae:	ba 08 00 00 00       	mov    edx,0x8
c0001bb3:	85 db                	test   ebx,ebx
c0001bb5:	74 12                	je     c0001bc9 <dlmallopt+0x43>
c0001bb7:	83 c3 0b             	add    ebx,0xb
c0001bba:	ba 10 00 00 00       	mov    edx,0x10
c0001bbf:	83 fb 0f             	cmp    ebx,0xf
c0001bc2:	76 05                	jbe    c0001bc9 <dlmallopt+0x43>
c0001bc4:	89 da                	mov    edx,ebx
c0001bc6:	83 e2 f8             	and    edx,0xfffffff8
c0001bc9:	a1 80 df 02 c0       	mov    eax,ds:0xc002df80
c0001bce:	83 e0 03             	and    eax,0x3
c0001bd1:	09 d0                	or     eax,edx
c0001bd3:	a3 80 df 02 c0       	mov    ds:0xc002df80,eax
c0001bd8:	eb 31                	jmp    c0001c0b <dlmallopt+0x85>
c0001bda:	89 1d c4 e2 02 c0    	mov    DWORD PTR ds:0xc002e2c4,ebx
c0001be0:	eb 06                	jmp    c0001be8 <dlmallopt+0x62>
c0001be2:	89 1d c8 e2 02 c0    	mov    DWORD PTR ds:0xc002e2c8,ebx
c0001be8:	be 01 00 00 00       	mov    esi,0x1
c0001bed:	eb 1c                	jmp    c0001c0b <dlmallopt+0x85>
c0001bef:	89 1d cc e2 02 c0    	mov    DWORD PTR ds:0xc002e2cc,ebx
c0001bf5:	eb f1                	jmp    c0001be8 <dlmallopt+0x62>
c0001bf7:	31 f6                	xor    esi,esi
c0001bf9:	85 db                	test   ebx,ebx
c0001bfb:	75 0e                	jne    c0001c0b <dlmallopt+0x85>
c0001bfd:	c7 05 d4 e2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e2d4,0x0
c0001c07:	eb df                	jmp    c0001be8 <dlmallopt+0x62>
c0001c09:	31 f6                	xor    esi,esi
c0001c0b:	89 f0                	mov    eax,esi
c0001c0d:	5b                   	pop    ebx
c0001c0e:	5e                   	pop    esi
c0001c0f:	c3                   	ret    

c0001c10 <disk_status>:
c0001c10:	31 c0                	xor    eax,eax
c0001c12:	c3                   	ret    

c0001c13 <disk_initialize>:
c0001c13:	31 c0                	xor    eax,eax
c0001c15:	c3                   	ret    

c0001c16 <disk_read>:
c0001c16:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c1b:	0f b6 04 85 60 1a 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce5a0]
c0001c23:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c27:	e9 4a f1 01 00       	jmp    c0020d76 <fatWrapperReadDisk>

c0001c2c <disk_write>:
c0001c2c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c31:	0f b6 04 85 60 1a 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce5a0]
c0001c39:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c3d:	e9 7b f1 01 00       	jmp    c0020dbd <fatWrapperWriteDisk>

c0001c42 <disk_ioctl>:
c0001c42:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c4b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c50:	0f b6 04 85 60 1a 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce5a0]
c0001c58:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c5c:	e9 a3 f1 01 00       	jmp    c0020e04 <fatWrapperIoctl>

c0001c61 <ld_word>:
c0001c61:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c65:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c68:	c1 e2 08             	shl    edx,0x8
c0001c6b:	09 d0                	or     eax,edx
c0001c6d:	c3                   	ret    

c0001c6e <ld_dword>:
c0001c6e:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c72:	89 d1                	mov    ecx,edx
c0001c74:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c78:	c1 e1 08             	shl    ecx,0x8
c0001c7b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c7e:	09 ca                	or     edx,ecx
c0001c80:	c1 e2 08             	shl    edx,0x8
c0001c83:	09 d0                	or     eax,edx
c0001c85:	c3                   	ret    

c0001c86 <ld_qword>:
c0001c86:	57                   	push   edi
c0001c87:	56                   	push   esi
c0001c88:	53                   	push   ebx
c0001c89:	31 db                	xor    ebx,ebx
c0001c8b:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c8e:	89 df                	mov    edi,ebx
c0001c90:	89 ce                	mov    esi,ecx
c0001c92:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c96:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c9a:	c1 e6 08             	shl    esi,0x8
c0001c9d:	09 f2                	or     edx,esi
c0001c9f:	89 d6                	mov    esi,edx
c0001ca1:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001ca5:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ca9:	c1 e6 08             	shl    esi,0x8
c0001cac:	09 f2                	or     edx,esi
c0001cae:	89 d6                	mov    esi,edx
c0001cb0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001cb4:	0f a4 f7 08          	shld   edi,esi,0x8
c0001cb8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001cbb:	c1 e6 08             	shl    esi,0x8
c0001cbe:	89 fb                	mov    ebx,edi
c0001cc0:	09 f2                	or     edx,esi
c0001cc2:	89 d1                	mov    ecx,edx
c0001cc4:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001cc8:	c1 e1 08             	shl    ecx,0x8
c0001ccb:	89 da                	mov    edx,ebx
c0001ccd:	09 c8                	or     eax,ecx
c0001ccf:	5b                   	pop    ebx
c0001cd0:	5e                   	pop    esi
c0001cd1:	5f                   	pop    edi
c0001cd2:	c3                   	ret    

c0001cd3 <st_word>:
c0001cd3:	66 89 10             	mov    WORD PTR [eax],dx
c0001cd6:	c3                   	ret    

c0001cd7 <st_dword>:
c0001cd7:	89 10                	mov    DWORD PTR [eax],edx
c0001cd9:	c3                   	ret    

c0001cda <st_qword>:
c0001cda:	89 10                	mov    DWORD PTR [eax],edx
c0001cdc:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001cdf:	c3                   	ret    

c0001ce0 <mem_cpy>:
c0001ce0:	85 c9                	test   ecx,ecx
c0001ce2:	74 10                	je     c0001cf4 <mem_cpy+0x14>
c0001ce4:	57                   	push   edi
c0001ce5:	01 c1                	add    ecx,eax
c0001ce7:	56                   	push   esi
c0001ce8:	89 c7                	mov    edi,eax
c0001cea:	89 d6                	mov    esi,edx
c0001cec:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ced:	39 f9                	cmp    ecx,edi
c0001cef:	75 fb                	jne    c0001cec <mem_cpy+0xc>
c0001cf1:	5e                   	pop    esi
c0001cf2:	5f                   	pop    edi
c0001cf3:	c3                   	ret    
c0001cf4:	c3                   	ret    

c0001cf5 <mem_set>:
c0001cf5:	01 c1                	add    ecx,eax
c0001cf7:	40                   	inc    eax
c0001cf8:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cfb:	39 c8                	cmp    eax,ecx
c0001cfd:	75 f8                	jne    c0001cf7 <mem_set+0x2>
c0001cff:	c3                   	ret    

c0001d00 <mem_cmp>:
c0001d00:	57                   	push   edi
c0001d01:	56                   	push   esi
c0001d02:	89 c6                	mov    esi,eax
c0001d04:	53                   	push   ebx
c0001d05:	46                   	inc    esi
c0001d06:	42                   	inc    edx
c0001d07:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d0b:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d0f:	29 fb                	sub    ebx,edi
c0001d11:	89 cf                	mov    edi,ecx
c0001d13:	29 f7                	sub    edi,esi
c0001d15:	01 c7                	add    edi,eax
c0001d17:	74 04                	je     c0001d1d <mem_cmp+0x1d>
c0001d19:	85 db                	test   ebx,ebx
c0001d1b:	74 e8                	je     c0001d05 <mem_cmp+0x5>
c0001d1d:	89 d8                	mov    eax,ebx
c0001d1f:	5b                   	pop    ebx
c0001d20:	5e                   	pop    esi
c0001d21:	5f                   	pop    edi
c0001d22:	c3                   	ret    

c0001d23 <chk_chr>:
c0001d23:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d26:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d29:	74 07                	je     c0001d32 <chk_chr+0xf>
c0001d2b:	39 d1                	cmp    ecx,edx
c0001d2d:	74 03                	je     c0001d32 <chk_chr+0xf>
c0001d2f:	40                   	inc    eax
c0001d30:	eb f1                	jmp    c0001d23 <chk_chr>
c0001d32:	89 c8                	mov    eax,ecx
c0001d34:	c3                   	ret    

c0001d35 <dbc_1st>:
c0001d35:	31 c0                	xor    eax,eax
c0001d37:	c3                   	ret    

c0001d38 <dbc_2nd>:
c0001d38:	31 c0                	xor    eax,eax
c0001d3a:	c3                   	ret    

c0001d3b <tchar2uni>:
c0001d3b:	57                   	push   edi
c0001d3c:	89 c7                	mov    edi,eax
c0001d3e:	56                   	push   esi
c0001d3f:	53                   	push   ebx
c0001d40:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d42:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d44:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d47:	84 c9                	test   cl,cl
c0001d49:	78 0a                	js     c0001d55 <tchar2uni+0x1a>
c0001d4b:	0f b6 d1             	movzx  edx,cl
c0001d4e:	89 f3                	mov    ebx,esi
c0001d50:	e9 9f 00 00 00       	jmp    c0001df4 <tchar2uni+0xb9>
c0001d55:	88 ca                	mov    dl,cl
c0001d57:	83 e2 e0             	and    edx,0xffffffe0
c0001d5a:	80 fa c0             	cmp    dl,0xc0
c0001d5d:	75 0c                	jne    c0001d6b <tchar2uni+0x30>
c0001d5f:	89 ca                	mov    edx,ecx
c0001d61:	b9 01 00 00 00       	mov    ecx,0x1
c0001d66:	83 e2 1f             	and    edx,0x1f
c0001d69:	eb 2e                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d6b:	88 ca                	mov    dl,cl
c0001d6d:	83 e2 f0             	and    edx,0xfffffff0
c0001d70:	80 fa e0             	cmp    dl,0xe0
c0001d73:	75 0c                	jne    c0001d81 <tchar2uni+0x46>
c0001d75:	89 ca                	mov    edx,ecx
c0001d77:	b9 02 00 00 00       	mov    ecx,0x2
c0001d7c:	83 e2 0f             	and    edx,0xf
c0001d7f:	eb 18                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d81:	88 ca                	mov    dl,cl
c0001d83:	83 e2 f8             	and    edx,0xfffffff8
c0001d86:	88 d0                	mov    al,dl
c0001d88:	83 ca ff             	or     edx,0xffffffff
c0001d8b:	3c f0                	cmp    al,0xf0
c0001d8d:	75 6c                	jne    c0001dfb <tchar2uni+0xc0>
c0001d8f:	89 ca                	mov    edx,ecx
c0001d91:	b9 03 00 00 00       	mov    ecx,0x3
c0001d96:	83 e2 07             	and    edx,0x7
c0001d99:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d9d:	46                   	inc    esi
c0001d9e:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001da1:	88 c8                	mov    al,cl
c0001da3:	83 e0 c0             	and    eax,0xffffffc0
c0001da6:	3c 80                	cmp    al,0x80
c0001da8:	75 4e                	jne    c0001df8 <tchar2uni+0xbd>
c0001daa:	c1 e2 06             	shl    edx,0x6
c0001dad:	83 e1 3f             	and    ecx,0x3f
c0001db0:	09 ca                	or     edx,ecx
c0001db2:	39 de                	cmp    esi,ebx
c0001db4:	75 e7                	jne    c0001d9d <tchar2uni+0x62>
c0001db6:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001db9:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001dbf:	77 37                	ja     c0001df8 <tchar2uni+0xbd>
c0001dc1:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001dc7:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001dcd:	76 29                	jbe    c0001df8 <tchar2uni+0xbd>
c0001dcf:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001dd5:	76 1d                	jbe    c0001df4 <tchar2uni+0xb9>
c0001dd7:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001ddd:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001de3:	c1 e1 06             	shl    ecx,0x6
c0001de6:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001dec:	09 ca                	or     edx,ecx
c0001dee:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001df4:	89 1f                	mov    DWORD PTR [edi],ebx
c0001df6:	eb 03                	jmp    c0001dfb <tchar2uni+0xc0>
c0001df8:	83 ca ff             	or     edx,0xffffffff
c0001dfb:	5b                   	pop    ebx
c0001dfc:	89 d0                	mov    eax,edx
c0001dfe:	5e                   	pop    esi
c0001dff:	5f                   	pop    edi
c0001e00:	c3                   	ret    

c0001e01 <put_utf>:
c0001e01:	53                   	push   ebx
c0001e02:	83 f8 7f             	cmp    eax,0x7f
c0001e05:	89 c3                	mov    ebx,eax
c0001e07:	b0 00                	mov    al,0x0
c0001e09:	77 11                	ja     c0001e1c <put_utf+0x1b>
c0001e0b:	85 c9                	test   ecx,ecx
c0001e0d:	0f 84 e5 00 00 00    	je     c0001ef8 <put_utf+0xf7>
c0001e13:	88 1a                	mov    BYTE PTR [edx],bl
c0001e15:	b0 01                	mov    al,0x1
c0001e17:	e9 dc 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e1c:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e22:	77 23                	ja     c0001e47 <put_utf+0x46>
c0001e24:	83 f9 01             	cmp    ecx,0x1
c0001e27:	0f 86 cb 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e2d:	89 d8                	mov    eax,ebx
c0001e2f:	83 e3 3f             	and    ebx,0x3f
c0001e32:	c1 e8 06             	shr    eax,0x6
c0001e35:	83 cb 80             	or     ebx,0xffffff80
c0001e38:	83 c8 c0             	or     eax,0xffffffc0
c0001e3b:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e3e:	88 02                	mov    BYTE PTR [edx],al
c0001e40:	b0 02                	mov    al,0x2
c0001e42:	e9 b1 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e47:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e4d:	77 40                	ja     c0001e8f <put_utf+0x8e>
c0001e4f:	83 f9 02             	cmp    ecx,0x2
c0001e52:	0f 86 a0 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e58:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e5e:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e64:	0f 86 8e 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e6a:	89 d8                	mov    eax,ebx
c0001e6c:	c1 e8 0c             	shr    eax,0xc
c0001e6f:	83 c8 e0             	or     eax,0xffffffe0
c0001e72:	88 02                	mov    BYTE PTR [edx],al
c0001e74:	89 d8                	mov    eax,ebx
c0001e76:	83 e3 3f             	and    ebx,0x3f
c0001e79:	c1 e8 06             	shr    eax,0x6
c0001e7c:	83 cb 80             	or     ebx,0xffffff80
c0001e7f:	83 e0 3f             	and    eax,0x3f
c0001e82:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e85:	83 c8 80             	or     eax,0xffffff80
c0001e88:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e8b:	b0 03                	mov    al,0x3
c0001e8d:	eb 69                	jmp    c0001ef8 <put_utf+0xf7>
c0001e8f:	83 f9 03             	cmp    ecx,0x3
c0001e92:	76 64                	jbe    c0001ef8 <put_utf+0xf7>
c0001e94:	89 d9                	mov    ecx,ebx
c0001e96:	0f b7 c3             	movzx  eax,bx
c0001e99:	66 31 c9             	xor    cx,cx
c0001e9c:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001ea2:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001ea8:	c1 e9 06             	shr    ecx,0x6
c0001eab:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001eb1:	77 43                	ja     c0001ef6 <put_utf+0xf5>
c0001eb3:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001eb9:	77 3b                	ja     c0001ef6 <put_utf+0xf5>
c0001ebb:	09 cb                	or     ebx,ecx
c0001ebd:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ec3:	89 d8                	mov    eax,ebx
c0001ec5:	c1 e8 12             	shr    eax,0x12
c0001ec8:	83 c8 f0             	or     eax,0xfffffff0
c0001ecb:	88 02                	mov    BYTE PTR [edx],al
c0001ecd:	89 d8                	mov    eax,ebx
c0001ecf:	c1 e8 0c             	shr    eax,0xc
c0001ed2:	83 e0 3f             	and    eax,0x3f
c0001ed5:	83 c8 80             	or     eax,0xffffff80
c0001ed8:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001edb:	89 d8                	mov    eax,ebx
c0001edd:	83 e3 3f             	and    ebx,0x3f
c0001ee0:	c1 e8 06             	shr    eax,0x6
c0001ee3:	83 cb 80             	or     ebx,0xffffff80
c0001ee6:	83 e0 3f             	and    eax,0x3f
c0001ee9:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eec:	83 c8 80             	or     eax,0xffffff80
c0001eef:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001ef2:	b0 04                	mov    al,0x4
c0001ef4:	eb 02                	jmp    c0001ef8 <put_utf+0xf7>
c0001ef6:	31 c0                	xor    eax,eax
c0001ef8:	5b                   	pop    ebx
c0001ef9:	c3                   	ret    

c0001efa <clst2sect>:
c0001efa:	89 c1                	mov    ecx,eax
c0001efc:	83 ea 02             	sub    edx,0x2
c0001eff:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001f02:	83 e8 02             	sub    eax,0x2
c0001f05:	39 d0                	cmp    eax,edx
c0001f07:	76 0d                	jbe    c0001f16 <clst2sect+0x1c>
c0001f09:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001f0d:	f7 e2                	mul    edx
c0001f0f:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001f12:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001f15:	c3                   	ret    
c0001f16:	31 c0                	xor    eax,eax
c0001f18:	31 d2                	xor    edx,edx
c0001f1a:	c3                   	ret    

c0001f1b <clmt_clust>:
c0001f1b:	57                   	push   edi
c0001f1c:	89 cf                	mov    edi,ecx
c0001f1e:	56                   	push   esi
c0001f1f:	89 d6                	mov    esi,edx
c0001f21:	53                   	push   ebx
c0001f22:	0f ac fe 09          	shrd   esi,edi,0x9
c0001f26:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001f29:	89 f2                	mov    edx,esi
c0001f2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0001f2d:	c1 ef 09             	shr    edi,0x9
c0001f30:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001f34:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001f37:	89 f9                	mov    ecx,edi
c0001f39:	31 ff                	xor    edi,edi
c0001f3b:	57                   	push   edi
c0001f3c:	56                   	push   esi
c0001f3d:	51                   	push   ecx
c0001f3e:	52                   	push   edx
c0001f3f:	e8 28 4a 02 00       	call   c002696c <__udivdi3>
c0001f44:	83 c4 10             	add    esp,0x10
c0001f47:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f49:	85 d2                	test   edx,edx
c0001f4b:	74 10                	je     c0001f5d <clmt_clust+0x42>
c0001f4d:	39 d0                	cmp    eax,edx
c0001f4f:	72 07                	jb     c0001f58 <clmt_clust+0x3d>
c0001f51:	29 d0                	sub    eax,edx
c0001f53:	83 c3 08             	add    ebx,0x8
c0001f56:	eb ef                	jmp    c0001f47 <clmt_clust+0x2c>
c0001f58:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f5b:	89 c2                	mov    edx,eax
c0001f5d:	5b                   	pop    ebx
c0001f5e:	89 d0                	mov    eax,edx
c0001f60:	5e                   	pop    esi
c0001f61:	5f                   	pop    edi
c0001f62:	c3                   	ret    

c0001f63 <pick_lfn>:
c0001f63:	55                   	push   ebp
c0001f64:	57                   	push   edi
c0001f65:	56                   	push   esi
c0001f66:	89 d6                	mov    esi,edx
c0001f68:	53                   	push   ebx
c0001f69:	89 c3                	mov    ebx,eax
c0001f6b:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f6e:	e8 ee fc ff ff       	call   c0001c61 <ld_word>
c0001f73:	66 85 c0             	test   ax,ax
c0001f76:	74 04                	je     c0001f7c <pick_lfn+0x19>
c0001f78:	31 c0                	xor    eax,eax
c0001f7a:	eb 5c                	jmp    c0001fd8 <pick_lfn+0x75>
c0001f7c:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f7f:	bd 01 00 00 00       	mov    ebp,0x1
c0001f84:	83 e1 bf             	and    ecx,0xffffffbf
c0001f87:	31 ff                	xor    edi,edi
c0001f89:	49                   	dec    ecx
c0001f8a:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f8d:	0f b6 87 00 94 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6c00]
c0001f94:	01 f0                	add    eax,esi
c0001f96:	e8 c6 fc ff ff       	call   c0001c61 <ld_word>
c0001f9b:	66 85 ed             	test   bp,bp
c0001f9e:	74 11                	je     c0001fb1 <pick_lfn+0x4e>
c0001fa0:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fa6:	77 d0                	ja     c0001f78 <pick_lfn+0x15>
c0001fa8:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fac:	89 c5                	mov    ebp,eax
c0001fae:	41                   	inc    ecx
c0001faf:	eb 04                	jmp    c0001fb5 <pick_lfn+0x52>
c0001fb1:	66 40                	inc    ax
c0001fb3:	75 c3                	jne    c0001f78 <pick_lfn+0x15>
c0001fb5:	47                   	inc    edi
c0001fb6:	83 ff 0d             	cmp    edi,0xd
c0001fb9:	75 d2                	jne    c0001f8d <pick_lfn+0x2a>
c0001fbb:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fbe:	74 13                	je     c0001fd3 <pick_lfn+0x70>
c0001fc0:	66 85 ed             	test   bp,bp
c0001fc3:	74 0e                	je     c0001fd3 <pick_lfn+0x70>
c0001fc5:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fcb:	77 ab                	ja     c0001f78 <pick_lfn+0x15>
c0001fcd:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001fd3:	b8 01 00 00 00       	mov    eax,0x1
c0001fd8:	5b                   	pop    ebx
c0001fd9:	5e                   	pop    esi
c0001fda:	5f                   	pop    edi
c0001fdb:	5d                   	pop    ebp
c0001fdc:	c3                   	ret    

c0001fdd <put_lfn>:
c0001fdd:	55                   	push   ebp
c0001fde:	31 ed                	xor    ebp,ebp
c0001fe0:	57                   	push   edi
c0001fe1:	89 d7                	mov    edi,edx
c0001fe3:	56                   	push   esi
c0001fe4:	31 f6                	xor    esi,esi
c0001fe6:	53                   	push   ebx
c0001fe7:	83 ec 08             	sub    esp,0x8
c0001fea:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fed:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001ff1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001ff5:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001ffb:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ffe:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002001:	31 d2                	xor    edx,edx
c0002003:	e8 cb fc ff ff       	call   c0001cd3 <st_word>
c0002008:	0f b6 d9             	movzx  ebx,cl
c000200b:	4b                   	dec    ebx
c000200c:	6b db 0d             	imul   ebx,ebx,0xd
c000200f:	66 83 fe ff          	cmp    si,0xffff
c0002013:	74 08                	je     c000201d <put_lfn+0x40>
c0002015:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002018:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000201c:	43                   	inc    ebx
c000201d:	0f b6 85 00 94 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6c00]
c0002024:	0f b7 d6             	movzx  edx,si
c0002027:	01 f8                	add    eax,edi
c0002029:	e8 a5 fc ff ff       	call   c0001cd3 <st_word>
c000202e:	66 85 f6             	test   si,si
c0002031:	75 03                	jne    c0002036 <put_lfn+0x59>
c0002033:	83 ce ff             	or     esi,0xffffffff
c0002036:	45                   	inc    ebp
c0002037:	83 fd 0d             	cmp    ebp,0xd
c000203a:	75 d3                	jne    c000200f <put_lfn+0x32>
c000203c:	66 46                	inc    si
c000203e:	74 0a                	je     c000204a <put_lfn+0x6d>
c0002040:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002043:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002048:	75 09                	jne    c0002053 <put_lfn+0x76>
c000204a:	88 c8                	mov    al,cl
c000204c:	83 c8 40             	or     eax,0x40
c000204f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002053:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002057:	88 07                	mov    BYTE PTR [edi],al
c0002059:	83 c4 08             	add    esp,0x8
c000205c:	5b                   	pop    ebx
c000205d:	5e                   	pop    esi
c000205e:	5f                   	pop    edi
c000205f:	5d                   	pop    ebp
c0002060:	c3                   	ret    

c0002061 <gen_numname>:
c0002061:	57                   	push   edi
c0002062:	89 cf                	mov    edi,ecx
c0002064:	56                   	push   esi
c0002065:	b9 0b 00 00 00       	mov    ecx,0xb
c000206a:	53                   	push   ebx
c000206b:	89 c6                	mov    esi,eax
c000206d:	83 ec 10             	sub    esp,0x10
c0002070:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002074:	e8 67 fc ff ff       	call   c0001ce0 <mem_cpy>
c0002079:	83 fb 05             	cmp    ebx,0x5
c000207c:	76 2d                	jbe    c00020ab <gen_numname+0x4a>
c000207e:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002081:	66 85 c0             	test   ax,ax
c0002084:	74 25                	je     c00020ab <gen_numname+0x4a>
c0002086:	83 c7 02             	add    edi,0x2
c0002089:	ba 10 00 00 00       	mov    edx,0x10
c000208e:	01 db                	add    ebx,ebx
c0002090:	89 c1                	mov    ecx,eax
c0002092:	66 d1 e8             	shr    ax,1
c0002095:	83 e1 01             	and    ecx,0x1
c0002098:	01 cb                	add    ebx,ecx
c000209a:	0f ba e3 10          	bt     ebx,0x10
c000209e:	73 06                	jae    c00020a6 <gen_numname+0x45>
c00020a0:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020a6:	4a                   	dec    edx
c00020a7:	75 e5                	jne    c000208e <gen_numname+0x2d>
c00020a9:	eb d3                	jmp    c000207e <gen_numname+0x1d>
c00020ab:	b8 07 00 00 00       	mov    eax,0x7
c00020b0:	88 d9                	mov    cl,bl
c00020b2:	83 e1 0f             	and    ecx,0xf
c00020b5:	8d 51 30             	lea    edx,[ecx+0x30]
c00020b8:	80 fa 39             	cmp    dl,0x39
c00020bb:	76 03                	jbe    c00020c0 <gen_numname+0x5f>
c00020bd:	8d 51 37             	lea    edx,[ecx+0x37]
c00020c0:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020c3:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020c7:	89 da                	mov    edx,ebx
c00020c9:	c1 ea 04             	shr    edx,0x4
c00020cc:	83 fb 0f             	cmp    ebx,0xf
c00020cf:	76 06                	jbe    c00020d7 <gen_numname+0x76>
c00020d1:	89 c8                	mov    eax,ecx
c00020d3:	89 d3                	mov    ebx,edx
c00020d5:	eb d9                	jmp    c00020b0 <gen_numname+0x4f>
c00020d7:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020dc:	31 d2                	xor    edx,edx
c00020de:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020e1:	8d 04 16             	lea    eax,[esi+edx*1]
c00020e4:	39 ca                	cmp    edx,ecx
c00020e6:	73 18                	jae    c0002100 <gen_numname+0x9f>
c00020e8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020eb:	3c 20                	cmp    al,0x20
c00020ed:	74 11                	je     c0002100 <gen_numname+0x9f>
c00020ef:	e8 41 fc ff ff       	call   c0001d35 <dbc_1st>
c00020f4:	85 c0                	test   eax,eax
c00020f6:	74 05                	je     c00020fd <gen_numname+0x9c>
c00020f8:	39 d3                	cmp    ebx,edx
c00020fa:	74 04                	je     c0002100 <gen_numname+0x9f>
c00020fc:	42                   	inc    edx
c00020fd:	42                   	inc    edx
c00020fe:	eb e1                	jmp    c00020e1 <gen_numname+0x80>
c0002100:	b0 20                	mov    al,0x20
c0002102:	83 f9 07             	cmp    ecx,0x7
c0002105:	77 05                	ja     c000210c <gen_numname+0xab>
c0002107:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000210b:	41                   	inc    ecx
c000210c:	42                   	inc    edx
c000210d:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002111:	83 fa 07             	cmp    edx,0x7
c0002114:	76 ea                	jbe    c0002100 <gen_numname+0x9f>
c0002116:	83 c4 10             	add    esp,0x10
c0002119:	5b                   	pop    ebx
c000211a:	5e                   	pop    esi
c000211b:	5f                   	pop    edi
c000211c:	c3                   	ret    

c000211d <sum_sfn>:
c000211d:	31 c9                	xor    ecx,ecx
c000211f:	31 d2                	xor    edx,edx
c0002121:	d0 ca                	ror    dl,1
c0002123:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002126:	41                   	inc    ecx
c0002127:	83 f9 0b             	cmp    ecx,0xb
c000212a:	75 f5                	jne    c0002121 <sum_sfn+0x4>
c000212c:	88 d0                	mov    al,dl
c000212e:	c3                   	ret    

c000212f <xdir_sum>:
c000212f:	56                   	push   esi
c0002130:	31 c9                	xor    ecx,ecx
c0002132:	53                   	push   ebx
c0002133:	31 d2                	xor    edx,edx
c0002135:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002139:	43                   	inc    ebx
c000213a:	c1 e3 05             	shl    ebx,0x5
c000213d:	83 fa 02             	cmp    edx,0x2
c0002140:	74 0b                	je     c000214d <xdir_sum+0x1e>
c0002142:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002146:	66 d1 c9             	ror    cx,1
c0002149:	01 f1                	add    ecx,esi
c000214b:	eb 05                	jmp    c0002152 <xdir_sum+0x23>
c000214d:	ba 03 00 00 00       	mov    edx,0x3
c0002152:	42                   	inc    edx
c0002153:	39 d3                	cmp    ebx,edx
c0002155:	77 e6                	ja     c000213d <xdir_sum+0xe>
c0002157:	89 c8                	mov    eax,ecx
c0002159:	5b                   	pop    ebx
c000215a:	5e                   	pop    esi
c000215b:	c3                   	ret    

c000215c <xsum32>:
c000215c:	d1 ca                	ror    edx,1
c000215e:	0f b6 c0             	movzx  eax,al
c0002161:	01 d0                	add    eax,edx
c0002163:	c3                   	ret    

c0002164 <get_xfileinfo>:
c0002164:	55                   	push   ebp
c0002165:	31 c9                	xor    ecx,ecx
c0002167:	57                   	push   edi
c0002168:	bd 40 00 00 00       	mov    ebp,0x40
c000216d:	56                   	push   esi
c000216e:	31 ff                	xor    edi,edi
c0002170:	53                   	push   ebx
c0002171:	89 c6                	mov    esi,eax
c0002173:	83 ec 0c             	sub    esp,0xc
c0002176:	89 d3                	mov    ebx,edx
c0002178:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000217f:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002183:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002186:	76 6d                	jbe    c00021f5 <get_xfileinfo+0x91>
c0002188:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000218e:	76 0b                	jbe    c000219b <get_xfileinfo+0x37>
c0002190:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0002194:	bf 01 00 00 00       	mov    edi,0x1
c0002199:	eb 63                	jmp    c00021fe <get_xfileinfo+0x9a>
c000219b:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c00021a1:	75 03                	jne    c00021a6 <get_xfileinfo+0x42>
c00021a3:	83 c5 02             	add    ebp,0x2
c00021a6:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00021a9:	83 c5 02             	add    ebp,0x2
c00021ac:	e8 b0 fa ff ff       	call   c0001c61 <ld_word>
c00021b1:	ff 04 24             	inc    DWORD PTR [esp]
c00021b4:	66 85 c9             	test   cx,cx
c00021b7:	75 0d                	jne    c00021c6 <get_xfileinfo+0x62>
c00021b9:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00021bf:	66 81 fa ff 07       	cmp    dx,0x7ff
c00021c4:	76 2b                	jbe    c00021f1 <get_xfileinfo+0x8d>
c00021c6:	c1 e1 10             	shl    ecx,0x10
c00021c9:	ba ff 00 00 00       	mov    edx,0xff
c00021ce:	0f b7 c0             	movzx  eax,ax
c00021d1:	29 fa                	sub    edx,edi
c00021d3:	09 c8                	or     eax,ecx
c00021d5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00021d9:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021dd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021e1:	e8 1b fc ff ff       	call   c0001e01 <put_utf>
c00021e6:	84 c0                	test   al,al
c00021e8:	74 a6                	je     c0002190 <get_xfileinfo+0x2c>
c00021ea:	0f b6 c0             	movzx  eax,al
c00021ed:	01 c7                	add    edi,eax
c00021ef:	31 c0                	xor    eax,eax
c00021f1:	89 c1                	mov    ecx,eax
c00021f3:	eb 8a                	jmp    c000217f <get_xfileinfo+0x1b>
c00021f5:	85 ff                	test   edi,edi
c00021f7:	74 97                	je     c0002190 <get_xfileinfo+0x2c>
c00021f9:	66 85 c9             	test   cx,cx
c00021fc:	75 92                	jne    c0002190 <get_xfileinfo+0x2c>
c00021fe:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0002203:	31 c0                	xor    eax,eax
c0002205:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002209:	31 d2                	xor    edx,edx
c000220b:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c000220e:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0002211:	80 e1 10             	and    cl,0x10
c0002214:	75 08                	jne    c000221e <get_xfileinfo+0xba>
c0002216:	8d 46 38             	lea    eax,[esi+0x38]
c0002219:	e8 68 fa ff ff       	call   c0001c86 <ld_qword>
c000221e:	89 03                	mov    DWORD PTR [ebx],eax
c0002220:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002223:	8d 46 0c             	lea    eax,[esi+0xc]
c0002226:	e8 36 fa ff ff       	call   c0001c61 <ld_word>
c000222b:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c000222f:	8d 46 0e             	lea    eax,[esi+0xe]
c0002232:	e8 2a fa ff ff       	call   c0001c61 <ld_word>
c0002237:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c000223b:	83 c4 0c             	add    esp,0xc
c000223e:	5b                   	pop    ebx
c000223f:	5e                   	pop    esi
c0002240:	5f                   	pop    edi
c0002241:	5d                   	pop    ebp
c0002242:	c3                   	ret    

c0002243 <get_ldnumber>:
c0002243:	8b 10                	mov    edx,DWORD PTR [eax]
c0002245:	85 d2                	test   edx,edx
c0002247:	74 14                	je     c000225d <get_ldnumber+0x1a>
c0002249:	56                   	push   esi
c000224a:	53                   	push   ebx
c000224b:	89 d3                	mov    ebx,edx
c000224d:	43                   	inc    ebx
c000224e:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002251:	80 f9 1f             	cmp    cl,0x1f
c0002254:	76 0d                	jbe    c0002263 <get_ldnumber+0x20>
c0002256:	80 f9 3a             	cmp    cl,0x3a
c0002259:	75 f2                	jne    c000224d <get_ldnumber+0xa>
c000225b:	eb 0a                	jmp    c0002267 <get_ldnumber+0x24>
c000225d:	83 c9 ff             	or     ecx,0xffffffff
c0002260:	89 c8                	mov    eax,ecx
c0002262:	c3                   	ret    
c0002263:	31 c9                	xor    ecx,ecx
c0002265:	eb 24                	jmp    c000228b <get_ldnumber+0x48>
c0002267:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226a:	8d 4e d0             	lea    ecx,[esi-0x30]
c000226d:	80 f9 09             	cmp    cl,0x9
c0002270:	77 16                	ja     c0002288 <get_ldnumber+0x45>
c0002272:	83 c2 02             	add    edx,0x2
c0002275:	83 c9 ff             	or     ecx,0xffffffff
c0002278:	39 d3                	cmp    ebx,edx
c000227a:	75 0f                	jne    c000228b <get_ldnumber+0x48>
c000227c:	89 f2                	mov    edx,esi
c000227e:	89 18                	mov    DWORD PTR [eax],ebx
c0002280:	0f be ca             	movsx  ecx,dl
c0002283:	83 e9 30             	sub    ecx,0x30
c0002286:	eb 03                	jmp    c000228b <get_ldnumber+0x48>
c0002288:	83 c9 ff             	or     ecx,0xffffffff
c000228b:	89 c8                	mov    eax,ecx
c000228d:	5b                   	pop    ebx
c000228e:	5e                   	pop    esi
c000228f:	c3                   	ret    

c0002290 <crc32>:
c0002290:	56                   	push   esi
c0002291:	89 d6                	mov    esi,edx
c0002293:	53                   	push   ebx
c0002294:	b2 01                	mov    dl,0x1
c0002296:	bb 08 00 00 00       	mov    ebx,0x8
c000229b:	89 f1                	mov    ecx,esi
c000229d:	84 d1                	test   cl,dl
c000229f:	0f 95 c1             	setne  cl
c00022a2:	0f b6 c9             	movzx  ecx,cl
c00022a5:	31 c1                	xor    ecx,eax
c00022a7:	89 c8                	mov    eax,ecx
c00022a9:	d1 e8                	shr    eax,1
c00022ab:	80 e1 01             	and    cl,0x1
c00022ae:	74 05                	je     c00022b5 <crc32+0x25>
c00022b0:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00022b5:	d1 e2                	shl    edx,1
c00022b7:	4b                   	dec    ebx
c00022b8:	75 e1                	jne    c000229b <crc32+0xb>
c00022ba:	5b                   	pop    ebx
c00022bb:	5e                   	pop    esi
c00022bc:	c3                   	ret    

c00022bd <test_gpt_header>:
c00022bd:	55                   	push   ebp
c00022be:	b9 10 00 00 00       	mov    ecx,0x10
c00022c3:	57                   	push   edi
c00022c4:	ba 00 93 02 c0       	mov    edx,0xc0029300
c00022c9:	56                   	push   esi
c00022ca:	31 ff                	xor    edi,edi
c00022cc:	53                   	push   ebx
c00022cd:	89 c3                	mov    ebx,eax
c00022cf:	e8 2c fa ff ff       	call   c0001d00 <mem_cmp>
c00022d4:	85 c0                	test   eax,eax
c00022d6:	75 55                	jne    c000232d <test_gpt_header+0x70>
c00022d8:	89 c7                	mov    edi,eax
c00022da:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022df:	83 ce ff             	or     esi,0xffffffff
c00022e2:	31 d2                	xor    edx,edx
c00022e4:	83 fd 03             	cmp    ebp,0x3
c00022e7:	76 05                	jbe    c00022ee <test_gpt_header+0x31>
c00022e9:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022ee:	89 f0                	mov    eax,esi
c00022f0:	45                   	inc    ebp
c00022f1:	e8 9a ff ff ff       	call   c0002290 <crc32>
c00022f6:	83 fd 4c             	cmp    ebp,0x4c
c00022f9:	89 c6                	mov    esi,eax
c00022fb:	75 e5                	jne    c00022e2 <test_gpt_header+0x25>
c00022fd:	8d 43 10             	lea    eax,[ebx+0x10]
c0002300:	f7 d6                	not    esi
c0002302:	e8 67 f9 ff ff       	call   c0001c6e <ld_dword>
c0002307:	39 c6                	cmp    esi,eax
c0002309:	75 22                	jne    c000232d <test_gpt_header+0x70>
c000230b:	8d 43 54             	lea    eax,[ebx+0x54]
c000230e:	e8 5b f9 ff ff       	call   c0001c6e <ld_dword>
c0002313:	83 c0 80             	add    eax,0xffffff80
c0002316:	75 15                	jne    c000232d <test_gpt_header+0x70>
c0002318:	8d 43 50             	lea    eax,[ebx+0x50]
c000231b:	e8 4e f9 ff ff       	call   c0001c6e <ld_dword>
c0002320:	3d 80 00 00 00       	cmp    eax,0x80
c0002325:	0f 96 c0             	setbe  al
c0002328:	0f b6 c0             	movzx  eax,al
c000232b:	89 c7                	mov    edi,eax
c000232d:	5b                   	pop    ebx
c000232e:	89 f8                	mov    eax,edi
c0002330:	5e                   	pop    esi
c0002331:	5f                   	pop    edi
c0002332:	5d                   	pop    ebp
c0002333:	c3                   	ret    

c0002334 <make_rand>:
c0002334:	56                   	push   esi
c0002335:	85 c0                	test   eax,eax
c0002337:	53                   	push   ebx
c0002338:	75 05                	jne    c000233f <make_rand+0xb>
c000233a:	b8 01 00 00 00       	mov    eax,0x1
c000233f:	01 d1                	add    ecx,edx
c0002341:	bb 08 00 00 00       	mov    ebx,0x8
c0002346:	89 c6                	mov    esi,eax
c0002348:	d1 e8                	shr    eax,1
c000234a:	83 e6 01             	and    esi,0x1
c000234d:	85 f6                	test   esi,esi
c000234f:	74 05                	je     c0002356 <make_rand+0x22>
c0002351:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002356:	4b                   	dec    ebx
c0002357:	75 ed                	jne    c0002346 <make_rand+0x12>
c0002359:	42                   	inc    edx
c000235a:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000235d:	39 ca                	cmp    edx,ecx
c000235f:	75 e0                	jne    c0002341 <make_rand+0xd>
c0002361:	5b                   	pop    ebx
c0002362:	5e                   	pop    esi
c0002363:	c3                   	ret    

c0002364 <validate>:
c0002364:	56                   	push   esi
c0002365:	53                   	push   ebx
c0002366:	89 d6                	mov    esi,edx
c0002368:	51                   	push   ecx
c0002369:	85 c0                	test   eax,eax
c000236b:	75 09                	jne    c0002376 <validate+0x12>
c000236d:	b8 09 00 00 00       	mov    eax,0x9
c0002372:	31 c9                	xor    ecx,ecx
c0002374:	eb 2f                	jmp    c00023a5 <validate+0x41>
c0002376:	89 c3                	mov    ebx,eax
c0002378:	8b 00                	mov    eax,DWORD PTR [eax]
c000237a:	85 c0                	test   eax,eax
c000237c:	74 ef                	je     c000236d <validate+0x9>
c000237e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002381:	74 ea                	je     c000236d <validate+0x9>
c0002383:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002387:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000238b:	75 e0                	jne    c000236d <validate+0x9>
c000238d:	83 ec 0c             	sub    esp,0xc
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 76 f8 ff ff       	call   c0001c10 <disk_status>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	a8 01                	test   al,0x1
c000239f:	75 cc                	jne    c000236d <validate+0x9>
c00023a1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00023a3:	31 c0                	xor    eax,eax
c00023a5:	89 0e                	mov    DWORD PTR [esi],ecx
c00023a7:	5a                   	pop    edx
c00023a8:	5b                   	pop    ebx
c00023a9:	5e                   	pop    esi
c00023aa:	c3                   	ret    

c00023ab <sync_window>:
c00023ab:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00023af:	0f 84 85 00 00 00    	je     c000243a <sync_window+0x8f>
c00023b5:	55                   	push   ebp
c00023b6:	8d 68 54             	lea    ebp,[eax+0x54]
c00023b9:	57                   	push   edi
c00023ba:	56                   	push   esi
c00023bb:	53                   	push   ebx
c00023bc:	89 c3                	mov    ebx,eax
c00023be:	83 ec 28             	sub    esp,0x28
c00023c1:	6a 01                	push   0x1
c00023c3:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00023c6:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00023c9:	55                   	push   ebp
c00023ca:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023ce:	50                   	push   eax
c00023cf:	e8 58 f8 ff ff       	call   c0001c2c <disk_write>
c00023d4:	83 c4 20             	add    esp,0x20
c00023d7:	ba 01 00 00 00       	mov    edx,0x1
c00023dc:	85 c0                	test   eax,eax
c00023de:	75 50                	jne    c0002430 <sync_window+0x85>
c00023e0:	31 ff                	xor    edi,edi
c00023e2:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023e5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023e9:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023ed:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023f0:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023f3:	89 c6                	mov    esi,eax
c00023f5:	89 d7                	mov    edi,edx
c00023f7:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023fa:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023fe:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c0002401:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0002405:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002409:	73 23                	jae    c000242e <sync_window+0x83>
c000240b:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000240f:	75 1d                	jne    c000242e <sync_window+0x83>
c0002411:	83 ec 0c             	sub    esp,0xc
c0002414:	6a 01                	push   0x1
c0002416:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000241a:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000241e:	52                   	push   edx
c000241f:	50                   	push   eax
c0002420:	55                   	push   ebp
c0002421:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002425:	50                   	push   eax
c0002426:	e8 01 f8 ff ff       	call   c0001c2c <disk_write>
c000242b:	83 c4 20             	add    esp,0x20
c000242e:	31 d2                	xor    edx,edx
c0002430:	83 c4 1c             	add    esp,0x1c
c0002433:	89 d0                	mov    eax,edx
c0002435:	5b                   	pop    ebx
c0002436:	5e                   	pop    esi
c0002437:	5f                   	pop    edi
c0002438:	5d                   	pop    ebp
c0002439:	c3                   	ret    
c000243a:	31 d2                	xor    edx,edx
c000243c:	89 d0                	mov    eax,edx
c000243e:	c3                   	ret    

c000243f <move_window>:
c000243f:	56                   	push   esi
c0002440:	53                   	push   ebx
c0002441:	89 c3                	mov    ebx,eax
c0002443:	83 ec 14             	sub    esp,0x14
c0002446:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002449:	75 07                	jne    c0002452 <move_window+0x13>
c000244b:	31 f6                	xor    esi,esi
c000244d:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002450:	74 59                	je     c00024ab <move_window+0x6c>
c0002452:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002456:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000245a:	89 d8                	mov    eax,ebx
c000245c:	e8 4a ff ff ff       	call   c00023ab <sync_window>
c0002461:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002465:	89 c6                	mov    esi,eax
c0002467:	85 c0                	test   eax,eax
c0002469:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000246d:	75 3c                	jne    c00024ab <move_window+0x6c>
c000246f:	83 ec 0c             	sub    esp,0xc
c0002472:	8d 43 54             	lea    eax,[ebx+0x54]
c0002475:	6a 01                	push   0x1
c0002477:	51                   	push   ecx
c0002478:	52                   	push   edx
c0002479:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000247d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002481:	50                   	push   eax
c0002482:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002486:	50                   	push   eax
c0002487:	e8 8a f7 ff ff       	call   c0001c16 <disk_read>
c000248c:	83 c4 20             	add    esp,0x20
c000248f:	85 c0                	test   eax,eax
c0002491:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002495:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002499:	74 0a                	je     c00024a5 <move_window+0x66>
c000249b:	83 ca ff             	or     edx,0xffffffff
c000249e:	be 01 00 00 00       	mov    esi,0x1
c00024a3:	89 d1                	mov    ecx,edx
c00024a5:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00024a8:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00024ab:	89 f0                	mov    eax,esi
c00024ad:	83 c4 14             	add    esp,0x14
c00024b0:	5b                   	pop    ebx
c00024b1:	5e                   	pop    esi
c00024b2:	c3                   	ret    

c00024b3 <check_fs>:
c00024b3:	53                   	push   ebx
c00024b4:	89 c3                	mov    ebx,eax
c00024b6:	83 ec 08             	sub    esp,0x8
c00024b9:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00024bd:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00024c4:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00024cb:	e8 6f ff ff ff       	call   c000243f <move_window>
c00024d0:	ba 04 00 00 00       	mov    edx,0x4
c00024d5:	85 c0                	test   eax,eax
c00024d7:	0f 85 89 00 00 00    	jne    c0002566 <check_fs+0xb3>
c00024dd:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024e3:	e8 79 f7 ff ff       	call   c0001c61 <ld_word>
c00024e8:	ba 03 00 00 00       	mov    edx,0x3
c00024ed:	66 3d 55 aa          	cmp    ax,0xaa55
c00024f1:	75 73                	jne    c0002566 <check_fs+0xb3>
c00024f3:	ba 20 94 02 c0       	mov    edx,0xc0029420
c00024f8:	8d 43 54             	lea    eax,[ebx+0x54]
c00024fb:	b9 0b 00 00 00       	mov    ecx,0xb
c0002500:	e8 fb f7 ff ff       	call   c0001d00 <mem_cmp>
c0002505:	ba 01 00 00 00       	mov    edx,0x1
c000250a:	85 c0                	test   eax,eax
c000250c:	74 58                	je     c0002566 <check_fs+0xb3>
c000250e:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c0002511:	8d 50 18             	lea    edx,[eax+0x18]
c0002514:	80 fa 01             	cmp    dl,0x1
c0002517:	76 09                	jbe    c0002522 <check_fs+0x6f>
c0002519:	ba 02 00 00 00       	mov    edx,0x2
c000251e:	3c eb                	cmp    al,0xeb
c0002520:	75 44                	jne    c0002566 <check_fs+0xb3>
c0002522:	ba a4 c7 02 c0       	mov    edx,0xc002c7a4
c0002527:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000252d:	b9 03 00 00 00       	mov    ecx,0x3
c0002532:	e8 c9 f7 ff ff       	call   c0001d00 <mem_cmp>
c0002537:	31 d2                	xor    edx,edx
c0002539:	85 c0                	test   eax,eax
c000253b:	74 29                	je     c0002566 <check_fs+0xb3>
c000253d:	ba 2c 94 02 c0       	mov    edx,0xc002942c
c0002542:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002548:	b9 05 00 00 00       	mov    ecx,0x5
c000254d:	e8 ae f7 ff ff       	call   c0001d00 <mem_cmp>
c0002552:	31 d2                	xor    edx,edx
c0002554:	85 c0                	test   eax,eax
c0002556:	74 0e                	je     c0002566 <check_fs+0xb3>
c0002558:	31 d2                	xor    edx,edx
c000255a:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002561:	0f 95 c2             	setne  dl
c0002564:	01 d2                	add    edx,edx
c0002566:	89 d0                	mov    eax,edx
c0002568:	83 c4 08             	add    esp,0x8
c000256b:	5b                   	pop    ebx
c000256c:	c3                   	ret    

c000256d <find_volume>:
c000256d:	55                   	push   ebp
c000256e:	31 c9                	xor    ecx,ecx
c0002570:	57                   	push   edi
c0002571:	56                   	push   esi
c0002572:	89 d6                	mov    esi,edx
c0002574:	53                   	push   ebx
c0002575:	31 d2                	xor    edx,edx
c0002577:	83 ec 3c             	sub    esp,0x3c
c000257a:	89 c3                	mov    ebx,eax
c000257c:	e8 32 ff ff ff       	call   c00024b3 <check_fs>
c0002581:	83 f8 02             	cmp    eax,0x2
c0002584:	74 0e                	je     c0002594 <find_volume+0x27>
c0002586:	0f 87 5d 01 00 00    	ja     c00026e9 <find_volume+0x17c>
c000258c:	85 f6                	test   esi,esi
c000258e:	0f 84 55 01 00 00    	je     c00026e9 <find_volume+0x17c>
c0002594:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000259b:	0f 85 dd 00 00 00    	jne    c000267e <find_volume+0x111>
c00025a1:	31 c9                	xor    ecx,ecx
c00025a3:	ba 01 00 00 00       	mov    edx,0x1
c00025a8:	89 d8                	mov    eax,ebx
c00025aa:	e8 90 fe ff ff       	call   c000243f <move_window>
c00025af:	85 c0                	test   eax,eax
c00025b1:	74 0a                	je     c00025bd <find_volume+0x50>
c00025b3:	b8 04 00 00 00       	mov    eax,0x4
c00025b8:	e9 2c 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025bd:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00025c0:	89 e8                	mov    eax,ebp
c00025c2:	e8 f6 fc ff ff       	call   c00022bd <test_gpt_header>
c00025c7:	85 c0                	test   eax,eax
c00025c9:	75 0a                	jne    c00025d5 <find_volume+0x68>
c00025cb:	b8 03 00 00 00       	mov    eax,0x3
c00025d0:	e9 14 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025d5:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025db:	e8 8e f6 ff ff       	call   c0001c6e <ld_dword>
c00025e0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025e4:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025ea:	e8 97 f6 ff ff       	call   c0001c86 <ld_qword>
c00025ef:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025fb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025ff:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002607:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000260b:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000260f:	74 ba                	je     c00025cb <find_volume+0x5e>
c0002611:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002615:	31 c9                	xor    ecx,ecx
c0002617:	c1 e7 07             	shl    edi,0x7
c000261a:	89 d8                	mov    eax,ebx
c000261c:	89 fa                	mov    edx,edi
c000261e:	c1 ea 09             	shr    edx,0x9
c0002621:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002625:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002629:	e8 11 fe ff ff       	call   c000243f <move_window>
c000262e:	85 c0                	test   eax,eax
c0002630:	75 81                	jne    c00025b3 <find_volume+0x46>
c0002632:	81 e7 80 01 00 00    	and    edi,0x180
c0002638:	b9 10 00 00 00       	mov    ecx,0x10
c000263d:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002641:	ba 10 94 02 c0       	mov    edx,0xc0029410
c0002646:	e8 b5 f6 ff ff       	call   c0001d00 <mem_cmp>
c000264b:	85 c0                	test   eax,eax
c000264d:	75 29                	jne    c0002678 <find_volume+0x10b>
c000264f:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002653:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002657:	e8 2a f6 ff ff       	call   c0001c86 <ld_qword>
c000265c:	89 d1                	mov    ecx,edx
c000265e:	89 c2                	mov    edx,eax
c0002660:	89 d8                	mov    eax,ebx
c0002662:	e8 4c fe ff ff       	call   c00024b3 <check_fs>
c0002667:	85 f6                	test   esi,esi
c0002669:	75 07                	jne    c0002672 <find_volume+0x105>
c000266b:	83 f8 01             	cmp    eax,0x1
c000266e:	77 08                	ja     c0002678 <find_volume+0x10b>
c0002670:	eb 77                	jmp    c00026e9 <find_volume+0x17c>
c0002672:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002676:	74 71                	je     c00026e9 <find_volume+0x17c>
c0002678:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000267c:	eb 89                	jmp    c0002607 <find_volume+0x9a>
c000267e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002682:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002688:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c000268e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002692:	89 cd                	mov    ebp,ecx
c0002694:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002698:	89 f8                	mov    eax,edi
c000269a:	83 c7 10             	add    edi,0x10
c000269d:	e8 cc f5 ff ff       	call   c0001c6e <ld_dword>
c00026a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00026a6:	89 01                	mov    DWORD PTR [ecx],eax
c00026a8:	83 c1 04             	add    ecx,0x4
c00026ab:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00026af:	75 e3                	jne    c0002694 <find_volume+0x127>
c00026b1:	31 ff                	xor    edi,edi
c00026b3:	85 f6                	test   esi,esi
c00026b5:	74 03                	je     c00026ba <find_volume+0x14d>
c00026b7:	8d 7e ff             	lea    edi,[esi-0x1]
c00026ba:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00026be:	85 d2                	test   edx,edx
c00026c0:	74 14                	je     c00026d6 <find_volume+0x169>
c00026c2:	31 c9                	xor    ecx,ecx
c00026c4:	89 d8                	mov    eax,ebx
c00026c6:	e8 e8 fd ff ff       	call   c00024b3 <check_fs>
c00026cb:	83 f8 01             	cmp    eax,0x1
c00026ce:	76 19                	jbe    c00026e9 <find_volume+0x17c>
c00026d0:	85 f6                	test   esi,esi
c00026d2:	74 0f                	je     c00026e3 <find_volume+0x176>
c00026d4:	eb 13                	jmp    c00026e9 <find_volume+0x17c>
c00026d6:	85 f6                	test   esi,esi
c00026d8:	0f 85 ed fe ff ff    	jne    c00025cb <find_volume+0x5e>
c00026de:	b8 03 00 00 00       	mov    eax,0x3
c00026e3:	47                   	inc    edi
c00026e4:	83 ff 03             	cmp    edi,0x3
c00026e7:	76 d1                	jbe    c00026ba <find_volume+0x14d>
c00026e9:	83 c4 3c             	add    esp,0x3c
c00026ec:	5b                   	pop    ebx
c00026ed:	5e                   	pop    esi
c00026ee:	5f                   	pop    edi
c00026ef:	5d                   	pop    ebp
c00026f0:	c3                   	ret    

c00026f1 <mount_volume>:
c00026f1:	55                   	push   ebp
c00026f2:	57                   	push   edi
c00026f3:	89 cf                	mov    edi,ecx
c00026f5:	56                   	push   esi
c00026f6:	53                   	push   ebx
c00026f7:	bb 0b 00 00 00       	mov    ebx,0xb
c00026fc:	83 ec 3c             	sub    esp,0x3c
c00026ff:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002705:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002709:	e8 35 fb ff ff       	call   c0002243 <get_ldnumber>
c000270e:	85 c0                	test   eax,eax
c0002710:	0f 88 3a 05 00 00    	js     c0002c50 <mount_volume+0x55f>
c0002716:	8b 2c 85 20 e3 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd1ce0]
c000271d:	89 c6                	mov    esi,eax
c000271f:	bb 0c 00 00 00       	mov    ebx,0xc
c0002724:	85 ed                	test   ebp,ebp
c0002726:	0f 84 24 05 00 00    	je     c0002c50 <mount_volume+0x55f>
c000272c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002730:	83 e7 fe             	and    edi,0xfffffffe
c0002733:	89 2a                	mov    DWORD PTR [edx],ebp
c0002735:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002739:	74 32                	je     c000276d <mount_volume+0x7c>
c000273b:	83 ec 0c             	sub    esp,0xc
c000273e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002742:	50                   	push   eax
c0002743:	e8 c8 f4 ff ff       	call   c0001c10 <disk_status>
c0002748:	83 c4 10             	add    esp,0x10
c000274b:	a8 01                	test   al,0x1
c000274d:	75 1e                	jne    c000276d <mount_volume+0x7c>
c000274f:	31 db                	xor    ebx,ebx
c0002751:	89 f9                	mov    ecx,edi
c0002753:	84 c9                	test   cl,cl
c0002755:	0f 84 f5 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c000275b:	a8 04                	test   al,0x4
c000275d:	0f 84 ed 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c0002763:	bb 0a 00 00 00       	mov    ebx,0xa
c0002768:	e9 e3 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c000276d:	83 ec 0c             	sub    esp,0xc
c0002770:	89 f0                	mov    eax,esi
c0002772:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002776:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002779:	0f b6 f0             	movzx  esi,al
c000277c:	bb 03 00 00 00       	mov    ebx,0x3
c0002781:	56                   	push   esi
c0002782:	e8 8c f4 ff ff       	call   c0001c13 <disk_initialize>
c0002787:	83 c4 10             	add    esp,0x10
c000278a:	a8 01                	test   al,0x1
c000278c:	0f 85 be 04 00 00    	jne    c0002c50 <mount_volume+0x55f>
c0002792:	89 f9                	mov    ecx,edi
c0002794:	84 c9                	test   cl,cl
c0002796:	74 04                	je     c000279c <mount_volume+0xab>
c0002798:	a8 04                	test   al,0x4
c000279a:	75 c7                	jne    c0002763 <mount_volume+0x72>
c000279c:	31 d2                	xor    edx,edx
c000279e:	89 e8                	mov    eax,ebp
c00027a0:	e8 c8 fd ff ff       	call   c000256d <find_volume>
c00027a5:	83 f8 04             	cmp    eax,0x4
c00027a8:	75 0a                	jne    c00027b4 <mount_volume+0xc3>
c00027aa:	bb 01 00 00 00       	mov    ebx,0x1
c00027af:	e9 9c 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027b4:	83 f8 01             	cmp    eax,0x1
c00027b7:	76 0a                	jbe    c00027c3 <mount_volume+0xd2>
c00027b9:	bb 0d 00 00 00       	mov    ebx,0xd
c00027be:	e9 8d 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027c3:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00027c6:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00027c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027cd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027d1:	75 17                	jne    c00027ea <mount_volume+0xf9>
c00027d3:	b8 0b 00 00 00       	mov    eax,0xb
c00027d8:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027dd:	75 da                	jne    c00027b9 <mount_volume+0xc8>
c00027df:	40                   	inc    eax
c00027e0:	83 f8 40             	cmp    eax,0x40
c00027e3:	75 f3                	jne    c00027d8 <mount_volume+0xe7>
c00027e5:	e9 5a 02 00 00       	jmp    c0002a44 <mount_volume+0x353>
c00027ea:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027ed:	e8 6f f4 ff ff       	call   c0001c61 <ld_word>
c00027f2:	66 3d 00 02          	cmp    ax,0x200
c00027f6:	75 c1                	jne    c00027b9 <mount_volume+0xc8>
c00027f8:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027fb:	e8 61 f4 ff ff       	call   c0001c61 <ld_word>
c0002800:	0f b7 c0             	movzx  eax,ax
c0002803:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002807:	85 c0                	test   eax,eax
c0002809:	75 0c                	jne    c0002817 <mount_volume+0x126>
c000280b:	8d 45 78             	lea    eax,[ebp+0x78]
c000280e:	e8 5b f4 ff ff       	call   c0001c6e <ld_dword>
c0002813:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000281b:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000281e:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002821:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002825:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002828:	48                   	dec    eax
c0002829:	3c 01                	cmp    al,0x1
c000282b:	77 8c                	ja     c00027b9 <mount_volume+0xc8>
c000282d:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002831:	89 c3                	mov    ebx,eax
c0002833:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002837:	66 85 c0             	test   ax,ax
c000283a:	0f 84 79 ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002840:	8d 40 ff             	lea    eax,[eax-0x1]
c0002843:	85 d8                	test   eax,ebx
c0002845:	0f 85 6e ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000284b:	8d 45 65             	lea    eax,[ebp+0x65]
c000284e:	e8 0e f4 ff ff       	call   c0001c61 <ld_word>
c0002853:	89 c7                	mov    edi,eax
c0002855:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002859:	a8 0f                	test   al,0xf
c000285b:	0f 85 58 ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002861:	8d 45 67             	lea    eax,[ebp+0x67]
c0002864:	e8 f8 f3 ff ff       	call   c0001c61 <ld_word>
c0002869:	0f b7 f0             	movzx  esi,ax
c000286c:	85 f6                	test   esi,esi
c000286e:	75 0a                	jne    c000287a <mount_volume+0x189>
c0002870:	8d 45 74             	lea    eax,[ebp+0x74]
c0002873:	e8 f6 f3 ff ff       	call   c0001c6e <ld_dword>
c0002878:	89 c6                	mov    esi,eax
c000287a:	8d 45 62             	lea    eax,[ebp+0x62]
c000287d:	e8 df f3 ff ff       	call   c0001c61 <ld_word>
c0002882:	66 85 c0             	test   ax,ax
c0002885:	0f 84 2e ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c000288b:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002890:	0f b7 c8             	movzx  ecx,ax
c0002893:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002898:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000289c:	89 fa                	mov    edx,edi
c000289e:	66 c1 ea 04          	shr    dx,0x4
c00028a2:	0f b7 d2             	movzx  edx,dx
c00028a5:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00028a9:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00028ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00028b0:	39 c6                	cmp    esi,eax
c00028b2:	0f 82 01 ff ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028b8:	29 c6                	sub    esi,eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 f0                	mov    eax,esi
c00028be:	f7 f3                	div    ebx
c00028c0:	39 de                	cmp    esi,ebx
c00028c2:	0f 82 f1 fe ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028c8:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00028cd:	0f 87 e6 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c00028d3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00028d8:	0f 86 63 03 00 00    	jbe    c0002c41 <mount_volume+0x550>
c00028de:	bb 03 00 00 00       	mov    ebx,0x3
c00028e3:	8d 70 02             	lea    esi,[eax+0x2]
c00028e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028ee:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028f1:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028f4:	31 d2                	xor    edx,edx
c00028f6:	89 c8                	mov    eax,ecx
c00028f8:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028fb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028ff:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002903:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002907:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000290b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000290e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002911:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002915:	31 d2                	xor    edx,edx
c0002917:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000291b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000291f:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002922:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002925:	83 fb 03             	cmp    ebx,0x3
c0002928:	75 2b                	jne    c0002955 <mount_volume+0x264>
c000292a:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000292d:	e8 2f f3 ff ff       	call   c0001c61 <ld_word>
c0002932:	66 09 c7             	or     di,ax
c0002935:	0f 85 7e fe ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000293b:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002941:	c1 e6 02             	shl    esi,0x2
c0002944:	e8 25 f3 ff ff       	call   c0001c6e <ld_dword>
c0002949:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002950:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002953:	eb 30                	jmp    c0002985 <mount_volume+0x294>
c0002955:	66 85 ff             	test   di,di
c0002958:	0f 84 5b fe ff ff    	je     c00027b9 <mount_volume+0xc8>
c000295e:	31 d2                	xor    edx,edx
c0002960:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002964:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002968:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000296c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000296f:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002972:	83 fb 02             	cmp    ebx,0x2
c0002975:	75 04                	jne    c000297b <mount_volume+0x28a>
c0002977:	01 f6                	add    esi,esi
c0002979:	eb 0a                	jmp    c0002985 <mount_volume+0x294>
c000297b:	8d 04 76             	lea    eax,[esi+esi*2]
c000297e:	83 e6 01             	and    esi,0x1
c0002981:	d1 e8                	shr    eax,1
c0002983:	01 c6                	add    esi,eax
c0002985:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000298b:	c1 ee 09             	shr    esi,0x9
c000298e:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002992:	0f 87 21 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002998:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000299f:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029a6:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00029aa:	83 fb 03             	cmp    ebx,0x3
c00029ad:	75 7a                	jne    c0002a29 <mount_volume+0x338>
c00029af:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00029b5:	e8 a7 f2 ff ff       	call   c0001c61 <ld_word>
c00029ba:	66 48                	dec    ax
c00029bc:	75 6b                	jne    c0002a29 <mount_volume+0x338>
c00029be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00029c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029c6:	83 c2 01             	add    edx,0x1
c00029c9:	89 e8                	mov    eax,ebp
c00029cb:	83 d1 00             	adc    ecx,0x0
c00029ce:	e8 6c fa ff ff       	call   c000243f <move_window>
c00029d3:	85 c0                	test   eax,eax
c00029d5:	75 52                	jne    c0002a29 <mount_volume+0x338>
c00029d7:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029db:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029e1:	e8 7b f2 ff ff       	call   c0001c61 <ld_word>
c00029e6:	66 3d 55 aa          	cmp    ax,0xaa55
c00029ea:	75 3d                	jne    c0002a29 <mount_volume+0x338>
c00029ec:	8d 45 54             	lea    eax,[ebp+0x54]
c00029ef:	e8 7a f2 ff ff       	call   c0001c6e <ld_dword>
c00029f4:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029f9:	75 2e                	jne    c0002a29 <mount_volume+0x338>
c00029fb:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c0002a01:	e8 68 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a06:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002a0b:	75 1c                	jne    c0002a29 <mount_volume+0x338>
c0002a0d:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002a13:	e8 56 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a18:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002a1b:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002a21:	e8 48 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a26:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002a29:	66 a1 00 e3 02 c0    	mov    ax,ds:0xc002e300
c0002a2f:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002a32:	40                   	inc    eax
c0002a33:	31 db                	xor    ebx,ebx
c0002a35:	66 a3 00 e3 02 c0    	mov    ds:0xc002e300,ax
c0002a3b:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a3f:	e9 0c 02 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c0002a44:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a4a:	e8 12 f2 ff ff       	call   c0001c61 <ld_word>
c0002a4f:	66 3d 00 01          	cmp    ax,0x100
c0002a53:	0f 85 60 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a59:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a60:	0f 85 53 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a66:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a6c:	e8 15 f2 ff ff       	call   c0001c86 <ld_qword>
c0002a71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a79:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a7f:	e8 ea f1 ff ff       	call   c0001c6e <ld_dword>
c0002a84:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a87:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a8d:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a90:	fe c8                	dec    al
c0002a92:	0f 85 21 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a98:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a9f:	bb 01 00 00 00       	mov    ebx,0x1
c0002aa4:	d3 e3                	shl    ebx,cl
c0002aa6:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002aaa:	66 85 db             	test   bx,bx
c0002aad:	0f 84 06 fd ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002ab3:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002ab9:	e8 b0 f1 ff ff       	call   c0001c6e <ld_dword>
c0002abe:	89 c6                	mov    esi,eax
c0002ac0:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002ac5:	0f 87 ee fc ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002acb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002acf:	8d 40 02             	lea    eax,[eax+0x2]
c0002ad2:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002ad5:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002ad8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002adc:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002adf:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002ae5:	e8 84 f1 ff ff       	call   c0001c6e <ld_dword>
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002af0:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002af4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002af8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002afc:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002aff:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002b02:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002b08:	e8 61 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b0d:	31 d2                	xor    edx,edx
c0002b0f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b13:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b17:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002b1b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002b1e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002b21:	0f b7 c3             	movzx  eax,bx
c0002b24:	31 d2                	xor    edx,edx
c0002b26:	0f af f0             	imul   esi,eax
c0002b29:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002b2d:	89 f0                	mov    eax,esi
c0002b2f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002b33:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002b37:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b3b:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b3f:	39 c1                	cmp    ecx,eax
c0002b41:	89 df                	mov    edi,ebx
c0002b43:	19 d7                	sbb    edi,edx
c0002b45:	0f 82 6e fc ff ff    	jb     c00027b9 <mount_volume+0xc8>
c0002b4b:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b51:	31 db                	xor    ebx,ebx
c0002b53:	e8 16 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b58:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b5f:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b62:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b6a:	85 db                	test   ebx,ebx
c0002b6c:	75 39                	jne    c0002ba7 <mount_volume+0x4b6>
c0002b6e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b72:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b76:	0f 86 3d fc ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002b7c:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b7f:	31 ff                	xor    edi,edi
c0002b81:	89 e8                	mov    eax,ebp
c0002b83:	e8 72 f3 ff ff       	call   c0001efa <clst2sect>
c0002b88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b8c:	01 c6                	add    esi,eax
c0002b8e:	89 e8                	mov    eax,ebp
c0002b90:	11 d7                	adc    edi,edx
c0002b92:	89 f2                	mov    edx,esi
c0002b94:	89 f9                	mov    ecx,edi
c0002b96:	e8 a4 f8 ff ff       	call   c000243f <move_window>
c0002b9b:	85 c0                	test   eax,eax
c0002b9d:	0f 85 07 fc ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002ba3:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002ba7:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002bac:	74 0b                	je     c0002bb9 <mount_volume+0x4c8>
c0002bae:	83 c3 20             	add    ebx,0x20
c0002bb1:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002bb7:	eb b1                	jmp    c0002b6a <mount_volume+0x479>
c0002bb9:	8d 75 54             	lea    esi,[ebp+0x54]
c0002bbc:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002bc0:	e8 a9 f0 ff ff       	call   c0001c6e <ld_dword>
c0002bc5:	89 c3                	mov    ebx,eax
c0002bc7:	83 f8 01             	cmp    eax,0x1
c0002bca:	0f 86 e9 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd0:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002bd3:	0f 86 e0 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd9:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002bdc:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002be0:	0f af c2             	imul   eax,edx
c0002be3:	31 d2                	xor    edx,edx
c0002be5:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002be8:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002beb:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bee:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bf1:	31 c9                	xor    ecx,ecx
c0002bf3:	89 da                	mov    edx,ebx
c0002bf5:	89 e8                	mov    eax,ebp
c0002bf7:	c1 ea 07             	shr    edx,0x7
c0002bfa:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bfd:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002c00:	e8 3a f8 ff ff       	call   c000243f <move_window>
c0002c05:	85 c0                	test   eax,eax
c0002c07:	0f 85 9d fb ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002c0d:	89 d8                	mov    eax,ebx
c0002c0f:	83 e0 7f             	and    eax,0x7f
c0002c12:	8d 04 86             	lea    eax,[esi+eax*4]
c0002c15:	e8 54 f0 ff ff       	call   c0001c6e <ld_dword>
c0002c1a:	83 f8 ff             	cmp    eax,0xffffffff
c0002c1d:	74 0a                	je     c0002c29 <mount_volume+0x538>
c0002c1f:	43                   	inc    ebx
c0002c20:	39 d8                	cmp    eax,ebx
c0002c22:	74 cd                	je     c0002bf1 <mount_volume+0x500>
c0002c24:	e9 90 fb ff ff       	jmp    c00027b9 <mount_volume+0xc8>
c0002c29:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002c30:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002c37:	bb 04 00 00 00       	mov    ebx,0x4
c0002c3c:	e9 e8 fd ff ff       	jmp    c0002a29 <mount_volume+0x338>
c0002c41:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c46:	19 db                	sbb    ebx,ebx
c0002c48:	83 c3 02             	add    ebx,0x2
c0002c4b:	e9 93 fc ff ff       	jmp    c00028e3 <mount_volume+0x1f2>
c0002c50:	83 c4 3c             	add    esp,0x3c
c0002c53:	89 d8                	mov    eax,ebx
c0002c55:	5b                   	pop    ebx
c0002c56:	5e                   	pop    esi
c0002c57:	5f                   	pop    edi
c0002c58:	5d                   	pop    ebp
c0002c59:	c3                   	ret    

c0002c5a <find_bitmap>:
c0002c5a:	55                   	push   ebp
c0002c5b:	57                   	push   edi
c0002c5c:	89 c7                	mov    edi,eax
c0002c5e:	56                   	push   esi
c0002c5f:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c62:	53                   	push   ebx
c0002c63:	83 ec 1c             	sub    esp,0x1c
c0002c66:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c69:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c6d:	83 e8 02             	sub    eax,0x2
c0002c70:	39 f0                	cmp    eax,esi
c0002c72:	77 02                	ja     c0002c76 <find_bitmap+0x1c>
c0002c74:	31 f6                	xor    esi,esi
c0002c76:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c7a:	89 f3                	mov    ebx,esi
c0002c7c:	31 ed                	xor    ebp,ebp
c0002c7e:	31 c9                	xor    ecx,ecx
c0002c80:	89 da                	mov    edx,ebx
c0002c82:	89 f8                	mov    eax,edi
c0002c84:	c1 ea 0c             	shr    edx,0xc
c0002c87:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c8a:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c8d:	e8 ad f7 ff ff       	call   c000243f <move_window>
c0002c92:	85 c0                	test   eax,eax
c0002c94:	75 68                	jne    c0002cfe <find_bitmap+0xa4>
c0002c96:	89 da                	mov    edx,ebx
c0002c98:	89 d9                	mov    ecx,ebx
c0002c9a:	c1 ea 03             	shr    edx,0x3
c0002c9d:	83 e1 07             	and    ecx,0x7
c0002ca0:	b8 01 00 00 00       	mov    eax,0x1
c0002ca5:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002cab:	d3 e0                	shl    eax,cl
c0002cad:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002cb0:	83 e9 02             	sub    ecx,0x2
c0002cb3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002cb7:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002cbb:	43                   	inc    ebx
c0002cbc:	21 c1                	and    ecx,eax
c0002cbe:	d1 e0                	shl    eax,1
c0002cc0:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002cc4:	77 09                	ja     c0002ccf <find_bitmap+0x75>
c0002cc6:	31 db                	xor    ebx,ebx
c0002cc8:	ba 00 02 00 00       	mov    edx,0x200
c0002ccd:	31 c0                	xor    eax,eax
c0002ccf:	84 c9                	test   cl,cl
c0002cd1:	75 10                	jne    c0002ce3 <find_bitmap+0x89>
c0002cd3:	45                   	inc    ebp
c0002cd4:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002cd8:	75 0f                	jne    c0002ce9 <find_bitmap+0x8f>
c0002cda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002cde:	83 c0 02             	add    eax,0x2
c0002ce1:	eb 22                	jmp    c0002d05 <find_bitmap+0xab>
c0002ce3:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002ce7:	31 ed                	xor    ebp,ebp
c0002ce9:	39 de                	cmp    esi,ebx
c0002ceb:	74 16                	je     c0002d03 <find_bitmap+0xa9>
c0002ced:	84 c0                	test   al,al
c0002cef:	75 c6                	jne    c0002cb7 <find_bitmap+0x5d>
c0002cf1:	42                   	inc    edx
c0002cf2:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cf8:	77 84                	ja     c0002c7e <find_bitmap+0x24>
c0002cfa:	b0 01                	mov    al,0x1
c0002cfc:	eb b9                	jmp    c0002cb7 <find_bitmap+0x5d>
c0002cfe:	83 c8 ff             	or     eax,0xffffffff
c0002d01:	eb 02                	jmp    c0002d05 <find_bitmap+0xab>
c0002d03:	31 c0                	xor    eax,eax
c0002d05:	83 c4 1c             	add    esp,0x1c
c0002d08:	5b                   	pop    ebx
c0002d09:	5e                   	pop    esi
c0002d0a:	5f                   	pop    edi
c0002d0b:	5d                   	pop    ebp
c0002d0c:	c3                   	ret    

c0002d0d <change_bitmap>:
c0002d0d:	55                   	push   ebp
c0002d0e:	89 cd                	mov    ebp,ecx
c0002d10:	57                   	push   edi
c0002d11:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002d14:	56                   	push   esi
c0002d15:	89 c7                	mov    edi,eax
c0002d17:	53                   	push   ebx
c0002d18:	89 c8                	mov    eax,ecx
c0002d1a:	83 ec 1c             	sub    esp,0x1c
c0002d1d:	31 d2                	xor    edx,edx
c0002d1f:	89 ce                	mov    esi,ecx
c0002d21:	c1 e8 0c             	shr    eax,0xc
c0002d24:	bb 01 00 00 00       	mov    ebx,0x1
c0002d29:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002d2c:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002d2f:	c1 ee 03             	shr    esi,0x3
c0002d32:	83 e1 07             	and    ecx,0x7
c0002d35:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d3b:	d3 e3                	shl    ebx,cl
c0002d3d:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d41:	89 c1                	mov    ecx,eax
c0002d43:	89 d3                	mov    ebx,edx
c0002d45:	83 c1 01             	add    ecx,0x1
c0002d48:	83 d3 00             	adc    ebx,0x0
c0002d4b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d4f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d53:	89 d1                	mov    ecx,edx
c0002d55:	89 c2                	mov    edx,eax
c0002d57:	89 f8                	mov    eax,edi
c0002d59:	e8 e1 f6 ff ff       	call   c000243f <move_window>
c0002d5e:	89 c1                	mov    ecx,eax
c0002d60:	85 c0                	test   eax,eax
c0002d62:	75 48                	jne    c0002dac <change_bitmap+0x9f>
c0002d64:	31 d2                	xor    edx,edx
c0002d66:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d6a:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d6e:	0f 95 c2             	setne  dl
c0002d71:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d75:	74 3c                	je     c0002db3 <change_bitmap+0xa6>
c0002d77:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d7b:	4d                   	dec    ebp
c0002d7c:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d80:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d84:	74 32                	je     c0002db8 <change_bitmap+0xab>
c0002d86:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d8a:	75 d8                	jne    c0002d64 <change_bitmap+0x57>
c0002d8c:	8d 46 01             	lea    eax,[esi+0x1]
c0002d8f:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d94:	89 c3                	mov    ebx,eax
c0002d96:	31 f6                	xor    esi,esi
c0002d98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d9c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002da0:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002da6:	74 99                	je     c0002d41 <change_bitmap+0x34>
c0002da8:	89 de                	mov    esi,ebx
c0002daa:	eb b8                	jmp    c0002d64 <change_bitmap+0x57>
c0002dac:	b9 01 00 00 00       	mov    ecx,0x1
c0002db1:	eb 05                	jmp    c0002db8 <change_bitmap+0xab>
c0002db3:	b9 02 00 00 00       	mov    ecx,0x2
c0002db8:	83 c4 1c             	add    esp,0x1c
c0002dbb:	89 c8                	mov    eax,ecx
c0002dbd:	5b                   	pop    ebx
c0002dbe:	5e                   	pop    esi
c0002dbf:	5f                   	pop    edi
c0002dc0:	5d                   	pop    ebp
c0002dc1:	c3                   	ret    

c0002dc2 <put_fat>:
c0002dc2:	83 fa 01             	cmp    edx,0x1
c0002dc5:	0f 86 7b 01 00 00    	jbe    c0002f46 <put_fat+0x184>
c0002dcb:	55                   	push   ebp
c0002dcc:	57                   	push   edi
c0002dcd:	89 cf                	mov    edi,ecx
c0002dcf:	56                   	push   esi
c0002dd0:	b9 02 00 00 00       	mov    ecx,0x2
c0002dd5:	53                   	push   ebx
c0002dd6:	89 c6                	mov    esi,eax
c0002dd8:	83 ec 1c             	sub    esp,0x1c
c0002ddb:	89 d3                	mov    ebx,edx
c0002ddd:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002de0:	0f 86 68 01 00 00    	jbe    c0002f4e <put_fat+0x18c>
c0002de6:	8a 00                	mov    al,BYTE PTR [eax]
c0002de8:	3c 02                	cmp    al,0x2
c0002dea:	0f 84 c7 00 00 00    	je     c0002eb7 <put_fat+0xf5>
c0002df0:	77 09                	ja     c0002dfb <put_fat+0x39>
c0002df2:	fe c8                	dec    al
c0002df4:	74 17                	je     c0002e0d <put_fat+0x4b>
c0002df6:	e9 53 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002dfb:	b9 02 00 00 00       	mov    ecx,0x2
c0002e00:	3c 04                	cmp    al,0x4
c0002e02:	0f 86 e1 00 00 00    	jbe    c0002ee9 <put_fat+0x127>
c0002e08:	e9 41 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002e0d:	89 d5                	mov    ebp,edx
c0002e0f:	31 c9                	xor    ecx,ecx
c0002e11:	d1 ed                	shr    ebp,1
c0002e13:	89 f0                	mov    eax,esi
c0002e15:	01 d5                	add    ebp,edx
c0002e17:	89 ea                	mov    edx,ebp
c0002e19:	c1 ea 09             	shr    edx,0x9
c0002e1c:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e1f:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e22:	e8 18 f6 ff ff       	call   c000243f <move_window>
c0002e27:	89 c1                	mov    ecx,eax
c0002e29:	85 c0                	test   eax,eax
c0002e2b:	0f 85 1d 01 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e31:	8d 46 54             	lea    eax,[esi+0x54]
c0002e34:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e38:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e3b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e45:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e49:	89 f8                	mov    eax,edi
c0002e4b:	83 e3 01             	and    ebx,0x1
c0002e4e:	74 0d                	je     c0002e5d <put_fat+0x9b>
c0002e50:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e53:	89 fa                	mov    edx,edi
c0002e55:	83 e0 0f             	and    eax,0xf
c0002e58:	c1 e2 04             	shl    edx,0x4
c0002e5b:	09 d0                	or     eax,edx
c0002e5d:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e64:	31 c9                	xor    ecx,ecx
c0002e66:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e6a:	c1 ea 09             	shr    edx,0x9
c0002e6d:	89 f0                	mov    eax,esi
c0002e6f:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e72:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e75:	e8 c5 f5 ff ff       	call   c000243f <move_window>
c0002e7a:	89 c1                	mov    ecx,eax
c0002e7c:	85 c0                	test   eax,eax
c0002e7e:	0f 85 ca 00 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e84:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e88:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e8e:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e92:	85 db                	test   ebx,ebx
c0002e94:	74 07                	je     c0002e9d <put_fat+0xdb>
c0002e96:	c1 ef 04             	shr    edi,0x4
c0002e99:	89 fa                	mov    edx,edi
c0002e9b:	eb 0e                	jmp    c0002eab <put_fat+0xe9>
c0002e9d:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002ea0:	c1 ef 08             	shr    edi,0x8
c0002ea3:	83 e2 f0             	and    edx,0xfffffff0
c0002ea6:	83 e7 0f             	and    edi,0xf
c0002ea9:	09 fa                	or     edx,edi
c0002eab:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002eae:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002eb2:	e9 97 00 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002eb7:	31 c9                	xor    ecx,ecx
c0002eb9:	c1 ea 08             	shr    edx,0x8
c0002ebc:	89 f0                	mov    eax,esi
c0002ebe:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ec1:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ec4:	e8 76 f5 ff ff       	call   c000243f <move_window>
c0002ec9:	89 c1                	mov    ecx,eax
c0002ecb:	85 c0                	test   eax,eax
c0002ecd:	75 7f                	jne    c0002f4e <put_fat+0x18c>
c0002ecf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ed3:	01 db                	add    ebx,ebx
c0002ed5:	0f b7 d7             	movzx  edx,di
c0002ed8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ede:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ee2:	e8 ec ed ff ff       	call   c0001cd3 <st_word>
c0002ee7:	eb 53                	jmp    c0002f3c <put_fat+0x17a>
c0002ee9:	31 c9                	xor    ecx,ecx
c0002eeb:	c1 ea 07             	shr    edx,0x7
c0002eee:	89 f0                	mov    eax,esi
c0002ef0:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ef3:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ef6:	e8 44 f5 ff ff       	call   c000243f <move_window>
c0002efb:	89 c1                	mov    ecx,eax
c0002efd:	85 c0                	test   eax,eax
c0002eff:	75 4d                	jne    c0002f4e <put_fat+0x18c>
c0002f01:	c1 e3 02             	shl    ebx,0x2
c0002f04:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002f0a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002f0d:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002f11:	74 1c                	je     c0002f2f <put_fat+0x16d>
c0002f13:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002f17:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002f1d:	89 d8                	mov    eax,ebx
c0002f1f:	e8 4a ed ff ff       	call   c0001c6e <ld_dword>
c0002f24:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f28:	25 00 00 00 f0       	and    eax,0xf0000000
c0002f2d:	09 c7                	or     edi,eax
c0002f2f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f33:	89 fa                	mov    edx,edi
c0002f35:	89 d8                	mov    eax,ebx
c0002f37:	e8 9b ed ff ff       	call   c0001cd7 <st_dword>
c0002f3c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f40:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f44:	eb 08                	jmp    c0002f4e <put_fat+0x18c>
c0002f46:	b9 02 00 00 00       	mov    ecx,0x2
c0002f4b:	89 c8                	mov    eax,ecx
c0002f4d:	c3                   	ret    
c0002f4e:	83 c4 1c             	add    esp,0x1c
c0002f51:	89 c8                	mov    eax,ecx
c0002f53:	5b                   	pop    ebx
c0002f54:	5e                   	pop    esi
c0002f55:	5f                   	pop    edi
c0002f56:	5d                   	pop    ebp
c0002f57:	c3                   	ret    

c0002f58 <fill_last_frag>:
c0002f58:	57                   	push   edi
c0002f59:	89 cf                	mov    edi,ecx
c0002f5b:	56                   	push   esi
c0002f5c:	89 d6                	mov    esi,edx
c0002f5e:	53                   	push   ebx
c0002f5f:	89 c3                	mov    ebx,eax
c0002f61:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f64:	85 c0                	test   eax,eax
c0002f66:	74 21                	je     c0002f89 <fill_last_frag+0x31>
c0002f68:	89 f9                	mov    ecx,edi
c0002f6a:	83 f8 01             	cmp    eax,0x1
c0002f6d:	76 05                	jbe    c0002f74 <fill_last_frag+0x1c>
c0002f6f:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f72:	29 c1                	sub    ecx,eax
c0002f74:	8d 56 01             	lea    edx,[esi+0x1]
c0002f77:	29 c2                	sub    edx,eax
c0002f79:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f7b:	e8 42 fe ff ff       	call   c0002dc2 <put_fat>
c0002f80:	85 c0                	test   eax,eax
c0002f82:	75 05                	jne    c0002f89 <fill_last_frag+0x31>
c0002f84:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f87:	eb d8                	jmp    c0002f61 <fill_last_frag+0x9>
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <fill_first_frag>:
c0002f8d:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f91:	75 2d                	jne    c0002fc0 <fill_first_frag+0x33>
c0002f93:	57                   	push   edi
c0002f94:	56                   	push   esi
c0002f95:	53                   	push   ebx
c0002f96:	89 c3                	mov    ebx,eax
c0002f98:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f9b:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f9e:	01 d7                	add    edi,edx
c0002fa0:	39 fa                	cmp    edx,edi
c0002fa2:	74 14                	je     c0002fb8 <fill_first_frag+0x2b>
c0002fa4:	8d 72 01             	lea    esi,[edx+0x1]
c0002fa7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002fa9:	89 f1                	mov    ecx,esi
c0002fab:	e8 12 fe ff ff       	call   c0002dc2 <put_fat>
c0002fb0:	89 f2                	mov    edx,esi
c0002fb2:	85 c0                	test   eax,eax
c0002fb4:	74 ea                	je     c0002fa0 <fill_first_frag+0x13>
c0002fb6:	eb 0b                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fb8:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fbc:	31 c0                	xor    eax,eax
c0002fbe:	eb 03                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fc0:	31 c0                	xor    eax,eax
c0002fc2:	c3                   	ret    
c0002fc3:	5b                   	pop    ebx
c0002fc4:	5e                   	pop    esi
c0002fc5:	5f                   	pop    edi
c0002fc6:	c3                   	ret    

c0002fc7 <get_fat>:
c0002fc7:	83 fa 01             	cmp    edx,0x1
c0002fca:	0f 86 db 01 00 00    	jbe    c00031ab <get_fat+0x1e4>
c0002fd0:	55                   	push   ebp
c0002fd1:	b9 01 00 00 00       	mov    ecx,0x1
c0002fd6:	57                   	push   edi
c0002fd7:	56                   	push   esi
c0002fd8:	53                   	push   ebx
c0002fd9:	83 ec 1c             	sub    esp,0x1c
c0002fdc:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fde:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fe1:	0f 86 cc 01 00 00    	jbe    c00031b3 <get_fat+0x1ec>
c0002fe7:	89 c3                	mov    ebx,eax
c0002fe9:	89 d6                	mov    esi,edx
c0002feb:	8a 07                	mov    al,BYTE PTR [edi]
c0002fed:	3c 02                	cmp    al,0x2
c0002fef:	0f 84 99 00 00 00    	je     c000308e <get_fat+0xc7>
c0002ff5:	77 09                	ja     c0003000 <get_fat+0x39>
c0002ff7:	fe c8                	dec    al
c0002ff9:	74 1a                	je     c0003015 <get_fat+0x4e>
c0002ffb:	e9 b3 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003000:	3c 03                	cmp    al,0x3
c0003002:	0f 84 b5 00 00 00    	je     c00030bd <get_fat+0xf6>
c0003008:	3c 04                	cmp    al,0x4
c000300a:	0f 84 e3 00 00 00    	je     c00030f3 <get_fat+0x12c>
c0003010:	e9 9e 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003015:	89 d3                	mov    ebx,edx
c0003017:	31 c9                	xor    ecx,ecx
c0003019:	d1 eb                	shr    ebx,1
c000301b:	89 f8                	mov    eax,edi
c000301d:	01 d3                	add    ebx,edx
c000301f:	89 da                	mov    edx,ebx
c0003021:	c1 ea 09             	shr    edx,0x9
c0003024:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003027:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000302a:	e8 10 f4 ff ff       	call   c000243f <move_window>
c000302f:	85 c0                	test   eax,eax
c0003031:	74 08                	je     c000303b <get_fat+0x74>
c0003033:	83 c9 ff             	or     ecx,0xffffffff
c0003036:	e9 78 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000303b:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000303e:	31 c9                	xor    ecx,ecx
c0003040:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003046:	89 ea                	mov    edx,ebp
c0003048:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c000304c:	c1 ea 09             	shr    edx,0x9
c000304f:	89 f8                	mov    eax,edi
c0003051:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003054:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003057:	e8 e3 f3 ff ff       	call   c000243f <move_window>
c000305c:	85 c0                	test   eax,eax
c000305e:	75 d3                	jne    c0003033 <get_fat+0x6c>
c0003060:	0f b6 c3             	movzx  eax,bl
c0003063:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003069:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c000306e:	c1 e3 08             	shl    ebx,0x8
c0003071:	09 c3                	or     ebx,eax
c0003073:	89 d9                	mov    ecx,ebx
c0003075:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000307b:	83 e6 01             	and    esi,0x1
c000307e:	0f 84 2f 01 00 00    	je     c00031b3 <get_fat+0x1ec>
c0003084:	89 d9                	mov    ecx,ebx
c0003086:	c1 e9 04             	shr    ecx,0x4
c0003089:	e9 25 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000308e:	31 c9                	xor    ecx,ecx
c0003090:	c1 ea 08             	shr    edx,0x8
c0003093:	89 f8                	mov    eax,edi
c0003095:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003098:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000309b:	e8 9f f3 ff ff       	call   c000243f <move_window>
c00030a0:	85 c0                	test   eax,eax
c00030a2:	75 8f                	jne    c0003033 <get_fat+0x6c>
c00030a4:	01 f6                	add    esi,esi
c00030a6:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00030ac:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030b0:	e8 ac eb ff ff       	call   c0001c61 <ld_word>
c00030b5:	0f b7 c8             	movzx  ecx,ax
c00030b8:	e9 f6 00 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c00030bd:	31 c9                	xor    ecx,ecx
c00030bf:	c1 ea 07             	shr    edx,0x7
c00030c2:	89 f8                	mov    eax,edi
c00030c4:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030c7:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030ca:	e8 70 f3 ff ff       	call   c000243f <move_window>
c00030cf:	85 c0                	test   eax,eax
c00030d1:	0f 85 5c ff ff ff    	jne    c0003033 <get_fat+0x6c>
c00030d7:	c1 e6 02             	shl    esi,0x2
c00030da:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030e0:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030e4:	e8 85 eb ff ff       	call   c0001c6e <ld_dword>
c00030e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030ee:	e9 b4 00 00 00       	jmp    c00031a7 <get_fat+0x1e0>
c00030f3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030f6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030f9:	89 d1                	mov    ecx,edx
c00030fb:	09 c1                	or     ecx,eax
c00030fd:	74 06                	je     c0003105 <get_fat+0x13e>
c00030ff:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0003103:	75 0f                	jne    c0003114 <get_fat+0x14d>
c0003105:	b9 01 00 00 00       	mov    ecx,0x1
c000310a:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c000310e:	0f 85 9f 00 00 00    	jne    c00031b3 <get_fat+0x1ec>
c0003114:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003118:	89 f5                	mov    ebp,esi
c000311a:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c000311f:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0003122:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0003125:	80 f9 02             	cmp    cl,0x2
c0003128:	75 35                	jne    c000315f <get_fat+0x198>
c000312a:	83 c0 ff             	add    eax,0xffffffff
c000312d:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0003132:	83 d2 ff             	adc    edx,0xffffffff
c0003135:	31 db                	xor    ebx,ebx
c0003137:	0f ac d0 09          	shrd   eax,edx,0x9
c000313b:	53                   	push   ebx
c000313c:	c1 ea 09             	shr    edx,0x9
c000313f:	51                   	push   ecx
c0003140:	52                   	push   edx
c0003141:	50                   	push   eax
c0003142:	e8 25 38 02 00       	call   c002696c <__udivdi3>
c0003147:	83 c4 10             	add    esp,0x10
c000314a:	b9 01 00 00 00       	mov    ecx,0x1
c000314f:	39 c5                	cmp    ebp,eax
c0003151:	77 60                	ja     c00031b3 <get_fat+0x1ec>
c0003153:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003158:	74 59                	je     c00031b3 <get_fat+0x1ec>
c000315a:	8d 4e 01             	lea    ecx,[esi+0x1]
c000315d:	eb 54                	jmp    c00031b3 <get_fat+0x1ec>
c000315f:	80 f9 03             	cmp    cl,0x3
c0003162:	75 05                	jne    c0003169 <get_fat+0x1a2>
c0003164:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003167:	77 f1                	ja     c000315a <get_fat+0x193>
c0003169:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000316e:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003172:	75 3f                	jne    c00031b3 <get_fat+0x1ec>
c0003174:	31 c9                	xor    ecx,ecx
c0003176:	89 f2                	mov    edx,esi
c0003178:	89 f8                	mov    eax,edi
c000317a:	c1 ea 07             	shr    edx,0x7
c000317d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003180:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003183:	e8 b7 f2 ff ff       	call   c000243f <move_window>
c0003188:	85 c0                	test   eax,eax
c000318a:	0f 85 a3 fe ff ff    	jne    c0003033 <get_fat+0x6c>
c0003190:	c1 e6 02             	shl    esi,0x2
c0003193:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003199:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000319d:	e8 cc ea ff ff       	call   c0001c6e <ld_dword>
c00031a2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00031a7:	89 c1                	mov    ecx,eax
c00031a9:	eb 08                	jmp    c00031b3 <get_fat+0x1ec>
c00031ab:	b9 01 00 00 00       	mov    ecx,0x1
c00031b0:	89 c8                	mov    eax,ecx
c00031b2:	c3                   	ret    
c00031b3:	83 c4 1c             	add    esp,0x1c
c00031b6:	89 c8                	mov    eax,ecx
c00031b8:	5b                   	pop    ebx
c00031b9:	5e                   	pop    esi
c00031ba:	5f                   	pop    edi
c00031bb:	5d                   	pop    ebp
c00031bc:	c3                   	ret    

c00031bd <dir_sdi>:
c00031bd:	55                   	push   ebp
c00031be:	57                   	push   edi
c00031bf:	56                   	push   esi
c00031c0:	53                   	push   ebx
c00031c1:	89 c3                	mov    ebx,eax
c00031c3:	83 ec 1c             	sub    esp,0x1c
c00031c6:	8b 38                	mov    edi,DWORD PTR [eax]
c00031c8:	31 c0                	xor    eax,eax
c00031ca:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00031cd:	0f 94 c0             	sete   al
c00031d0:	48                   	dec    eax
c00031d1:	25 00 00 20 f0       	and    eax,0xf0200000
c00031d6:	05 00 00 00 10       	add    eax,0x10000000
c00031db:	39 d0                	cmp    eax,edx
c00031dd:	77 0a                	ja     c00031e9 <dir_sdi+0x2c>
c00031df:	b8 02 00 00 00       	mov    eax,0x2
c00031e4:	e9 c4 00 00 00       	jmp    c00032ad <dir_sdi+0xf0>
c00031e9:	89 d6                	mov    esi,edx
c00031eb:	f6 c2 1f             	test   dl,0x1f
c00031ee:	75 ef                	jne    c00031df <dir_sdi+0x22>
c00031f0:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031f3:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031f6:	85 c9                	test   ecx,ecx
c00031f8:	75 2d                	jne    c0003227 <dir_sdi+0x6a>
c00031fa:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031fd:	77 1b                	ja     c000321a <dir_sdi+0x5d>
c00031ff:	89 f2                	mov    edx,esi
c0003201:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003205:	c1 ea 05             	shr    edx,0x5
c0003208:	39 c2                	cmp    edx,eax
c000320a:	73 d3                	jae    c00031df <dir_sdi+0x22>
c000320c:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000320f:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0003212:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003215:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003218:	eb 4b                	jmp    c0003265 <dir_sdi+0xa8>
c000321a:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000321d:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003221:	85 c0                	test   eax,eax
c0003223:	74 da                	je     c00031ff <dir_sdi+0x42>
c0003225:	89 c1                	mov    ecx,eax
c0003227:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000322b:	c1 e5 09             	shl    ebp,0x9
c000322e:	89 ca                	mov    edx,ecx
c0003230:	39 ee                	cmp    esi,ebp
c0003232:	72 1c                	jb     c0003250 <dir_sdi+0x93>
c0003234:	89 d8                	mov    eax,ebx
c0003236:	e8 8c fd ff ff       	call   c0002fc7 <get_fat>
c000323b:	89 c1                	mov    ecx,eax
c000323d:	83 f8 ff             	cmp    eax,0xffffffff
c0003240:	74 66                	je     c00032a8 <dir_sdi+0xeb>
c0003242:	83 f8 01             	cmp    eax,0x1
c0003245:	76 98                	jbe    c00031df <dir_sdi+0x22>
c0003247:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c000324a:	76 93                	jbe    c00031df <dir_sdi+0x22>
c000324c:	29 ee                	sub    esi,ebp
c000324e:	eb de                	jmp    c000322e <dir_sdi+0x71>
c0003250:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003254:	89 f8                	mov    eax,edi
c0003256:	e8 9f ec ff ff       	call   c0001efa <clst2sect>
c000325b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000325f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003262:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003265:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003268:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000326b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000326e:	89 d1                	mov    ecx,edx
c0003270:	09 c1                	or     ecx,eax
c0003272:	0f 84 67 ff ff ff    	je     c00031df <dir_sdi+0x22>
c0003278:	89 f1                	mov    ecx,esi
c000327a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003282:	c1 e9 09             	shr    ecx,0x9
c0003285:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003289:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000328d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003291:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003294:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000329a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000329d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00032a1:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00032a4:	31 c0                	xor    eax,eax
c00032a6:	eb 05                	jmp    c00032ad <dir_sdi+0xf0>
c00032a8:	b8 01 00 00 00       	mov    eax,0x1
c00032ad:	83 c4 1c             	add    esp,0x1c
c00032b0:	5b                   	pop    ebx
c00032b1:	5e                   	pop    esi
c00032b2:	5f                   	pop    edi
c00032b3:	5d                   	pop    ebp
c00032b4:	c3                   	ret    

c00032b5 <create_chain>:
c00032b5:	55                   	push   ebp
c00032b6:	89 c5                	mov    ebp,eax
c00032b8:	57                   	push   edi
c00032b9:	56                   	push   esi
c00032ba:	53                   	push   ebx
c00032bb:	83 ec 1c             	sub    esp,0x1c
c00032be:	85 d2                	test   edx,edx
c00032c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00032c4:	8b 30                	mov    esi,DWORD PTR [eax]
c00032c6:	75 0e                	jne    c00032d6 <create_chain+0x21>
c00032c8:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00032cb:	85 ff                	test   edi,edi
c00032cd:	74 39                	je     c0003308 <create_chain+0x53>
c00032cf:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00032d2:	77 39                	ja     c000330d <create_chain+0x58>
c00032d4:	eb 32                	jmp    c0003308 <create_chain+0x53>
c00032d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032da:	e8 e8 fc ff ff       	call   c0002fc7 <get_fat>
c00032df:	89 c3                	mov    ebx,eax
c00032e1:	83 f8 01             	cmp    eax,0x1
c00032e4:	77 0a                	ja     c00032f0 <create_chain+0x3b>
c00032e6:	bb 01 00 00 00       	mov    ebx,0x1
c00032eb:	e9 ba 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c00032f0:	83 f8 ff             	cmp    eax,0xffffffff
c00032f3:	0f 84 62 01 00 00    	je     c000345b <create_chain+0x1a6>
c00032f9:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032fc:	0f 87 a8 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c0003302:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003306:	eb 05                	jmp    c000330d <create_chain+0x58>
c0003308:	bf 01 00 00 00       	mov    edi,0x1
c000330d:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c0003311:	75 07                	jne    c000331a <create_chain+0x65>
c0003313:	31 db                	xor    ebx,ebx
c0003315:	e9 90 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c000331a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000331d:	75 74                	jne    c0003393 <create_chain+0xde>
c000331f:	b9 01 00 00 00       	mov    ecx,0x1
c0003324:	89 fa                	mov    edx,edi
c0003326:	89 f0                	mov    eax,esi
c0003328:	e8 2d f9 ff ff       	call   c0002c5a <find_bitmap>
c000332d:	89 c3                	mov    ebx,eax
c000332f:	8d 40 ff             	lea    eax,[eax-0x1]
c0003332:	83 f8 fd             	cmp    eax,0xfffffffd
c0003335:	0f 87 6f 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c000333b:	83 ec 0c             	sub    esp,0xc
c000333e:	b9 01 00 00 00       	mov    ecx,0x1
c0003343:	6a 01                	push   0x1
c0003345:	89 da                	mov    edx,ebx
c0003347:	89 f0                	mov    eax,esi
c0003349:	e8 bf f9 ff ff       	call   c0002d0d <change_bitmap>
c000334e:	83 c4 10             	add    esp,0x10
c0003351:	83 f8 02             	cmp    eax,0x2
c0003354:	74 90                	je     c00032e6 <create_chain+0x31>
c0003356:	83 f8 01             	cmp    eax,0x1
c0003359:	0f 84 fc 00 00 00    	je     c000345b <create_chain+0x1a6>
c000335f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003364:	75 09                	jne    c000336f <create_chain+0xba>
c0003366:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000336a:	e9 0c 01 00 00       	jmp    c000347b <create_chain+0x1c6>
c000336f:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003373:	0f 85 e7 00 00 00    	jne    c0003460 <create_chain+0x1ab>
c0003379:	8d 57 01             	lea    edx,[edi+0x1]
c000337c:	39 da                	cmp    edx,ebx
c000337e:	0f 84 f7 00 00 00    	je     c000347b <create_chain+0x1c6>
c0003384:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003387:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000338b:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c000338e:	e9 cd 00 00 00       	jmp    c0003460 <create_chain+0x1ab>
c0003393:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003397:	75 41                	jne    c00033da <create_chain+0x125>
c0003399:	8d 5f 01             	lea    ebx,[edi+0x1]
c000339c:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000339f:	77 05                	ja     c00033a6 <create_chain+0xf1>
c00033a1:	bb 02 00 00 00       	mov    ebx,0x2
c00033a6:	89 da                	mov    edx,ebx
c00033a8:	89 e8                	mov    eax,ebp
c00033aa:	e8 18 fc ff ff       	call   c0002fc7 <get_fat>
c00033af:	83 f8 01             	cmp    eax,0x1
c00033b2:	0f 84 2e ff ff ff    	je     c00032e6 <create_chain+0x31>
c00033b8:	83 f8 ff             	cmp    eax,0xffffffff
c00033bb:	0f 84 9a 00 00 00    	je     c000345b <create_chain+0x1a6>
c00033c1:	85 c0                	test   eax,eax
c00033c3:	74 11                	je     c00033d6 <create_chain+0x121>
c00033c5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 0d                	jbe    c00033da <create_chain+0x125>
c00033cd:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00033d0:	76 08                	jbe    c00033da <create_chain+0x125>
c00033d2:	89 c7                	mov    edi,eax
c00033d4:	eb 04                	jmp    c00033da <create_chain+0x125>
c00033d6:	85 db                	test   ebx,ebx
c00033d8:	75 38                	jne    c0003412 <create_chain+0x15d>
c00033da:	89 fb                	mov    ebx,edi
c00033dc:	43                   	inc    ebx
c00033dd:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033e0:	77 0e                	ja     c00033f0 <create_chain+0x13b>
c00033e2:	83 ff 01             	cmp    edi,0x1
c00033e5:	0f 86 28 ff ff ff    	jbe    c0003313 <create_chain+0x5e>
c00033eb:	bb 02 00 00 00       	mov    ebx,0x2
c00033f0:	89 da                	mov    edx,ebx
c00033f2:	89 e8                	mov    eax,ebp
c00033f4:	e8 ce fb ff ff       	call   c0002fc7 <get_fat>
c00033f9:	85 c0                	test   eax,eax
c00033fb:	74 15                	je     c0003412 <create_chain+0x15d>
c00033fd:	83 f8 01             	cmp    eax,0x1
c0003400:	0f 84 e0 fe ff ff    	je     c00032e6 <create_chain+0x31>
c0003406:	40                   	inc    eax
c0003407:	74 52                	je     c000345b <create_chain+0x1a6>
c0003409:	39 fb                	cmp    ebx,edi
c000340b:	75 cf                	jne    c00033dc <create_chain+0x127>
c000340d:	e9 01 ff ff ff       	jmp    c0003313 <create_chain+0x5e>
c0003412:	83 c9 ff             	or     ecx,0xffffffff
c0003415:	89 da                	mov    edx,ebx
c0003417:	89 f0                	mov    eax,esi
c0003419:	e8 a4 f9 ff ff       	call   c0002dc2 <put_fat>
c000341e:	85 c0                	test   eax,eax
c0003420:	75 32                	jne    c0003454 <create_chain+0x19f>
c0003422:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003427:	74 11                	je     c000343a <create_chain+0x185>
c0003429:	89 d9                	mov    ecx,ebx
c000342b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000342f:	89 f0                	mov    eax,esi
c0003431:	e8 8c f9 ff ff       	call   c0002dc2 <put_fat>
c0003436:	85 c0                	test   eax,eax
c0003438:	75 1a                	jne    c0003454 <create_chain+0x19f>
c000343a:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000343d:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003440:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003443:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003446:	39 d0                	cmp    eax,edx
c0003448:	77 04                	ja     c000344e <create_chain+0x199>
c000344a:	48                   	dec    eax
c000344b:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000344e:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003452:	eb 56                	jmp    c00034aa <create_chain+0x1f5>
c0003454:	48                   	dec    eax
c0003455:	0f 85 8b fe ff ff    	jne    c00032e6 <create_chain+0x31>
c000345b:	83 cb ff             	or     ebx,0xffffffff
c000345e:	eb 4a                	jmp    c00034aa <create_chain+0x1f5>
c0003460:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003464:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003467:	41                   	inc    ecx
c0003468:	39 d9                	cmp    ecx,ebx
c000346a:	75 19                	jne    c0003485 <create_chain+0x1d0>
c000346c:	b9 02 00 00 00       	mov    ecx,0x2
c0003471:	85 d2                	test   edx,edx
c0003473:	74 03                	je     c0003478 <create_chain+0x1c3>
c0003475:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003478:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000347b:	85 c0                	test   eax,eax
c000347d:	0f 85 63 fe ff ff    	jne    c00032e6 <create_chain+0x31>
c0003483:	eb b5                	jmp    c000343a <create_chain+0x185>
c0003485:	85 d2                	test   edx,edx
c0003487:	75 07                	jne    c0003490 <create_chain+0x1db>
c0003489:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003490:	89 d9                	mov    ecx,ebx
c0003492:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003496:	89 e8                	mov    eax,ebp
c0003498:	e8 bb fa ff ff       	call   c0002f58 <fill_last_frag>
c000349d:	85 c0                	test   eax,eax
c000349f:	75 b3                	jne    c0003454 <create_chain+0x19f>
c00034a1:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00034a8:	eb 90                	jmp    c000343a <create_chain+0x185>
c00034aa:	83 c4 1c             	add    esp,0x1c
c00034ad:	89 d8                	mov    eax,ebx
c00034af:	5b                   	pop    ebx
c00034b0:	5e                   	pop    esi
c00034b1:	5f                   	pop    edi
c00034b2:	5d                   	pop    ebp
c00034b3:	c3                   	ret    

c00034b4 <remove_chain>:
c00034b4:	55                   	push   ebp
c00034b5:	57                   	push   edi
c00034b6:	56                   	push   esi
c00034b7:	53                   	push   ebx
c00034b8:	83 ec 1c             	sub    esp,0x1c
c00034bb:	83 fa 01             	cmp    edx,0x1
c00034be:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00034c2:	8b 18                	mov    ebx,DWORD PTR [eax]
c00034c4:	77 0a                	ja     c00034d0 <remove_chain+0x1c>
c00034c6:	b8 02 00 00 00       	mov    eax,0x2
c00034cb:	e9 24 01 00 00       	jmp    c00035f4 <remove_chain+0x140>
c00034d0:	89 d6                	mov    esi,edx
c00034d2:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00034d5:	76 ef                	jbe    c00034c6 <remove_chain+0x12>
c00034d7:	89 c7                	mov    edi,eax
c00034d9:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034de:	75 06                	jne    c00034e6 <remove_chain+0x32>
c00034e0:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034e4:	eb 54                	jmp    c000353a <remove_chain+0x86>
c00034e6:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034e9:	75 06                	jne    c00034f1 <remove_chain+0x3d>
c00034eb:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034ef:	74 ef                	je     c00034e0 <remove_chain+0x2c>
c00034f1:	83 c9 ff             	or     ecx,0xffffffff
c00034f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034f8:	89 d8                	mov    eax,ebx
c00034fa:	e8 c3 f8 ff ff       	call   c0002dc2 <put_fat>
c00034ff:	85 c0                	test   eax,eax
c0003501:	74 dd                	je     c00034e0 <remove_chain+0x2c>
c0003503:	e9 ec 00 00 00       	jmp    c00035f4 <remove_chain+0x140>
c0003508:	83 f8 01             	cmp    eax,0x1
c000350b:	74 b9                	je     c00034c6 <remove_chain+0x12>
c000350d:	83 f8 ff             	cmp    eax,0xffffffff
c0003510:	74 6d                	je     c000357f <remove_chain+0xcb>
c0003512:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003515:	75 6f                	jne    c0003586 <remove_chain+0xd2>
c0003517:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000351a:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c000351d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003520:	39 d0                	cmp    eax,edx
c0003522:	73 08                	jae    c000352c <remove_chain+0x78>
c0003524:	40                   	inc    eax
c0003525:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003529:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000352c:	8d 4e 01             	lea    ecx,[esi+0x1]
c000352f:	39 e9                	cmp    ecx,ebp
c0003531:	75 64                	jne    c0003597 <remove_chain+0xe3>
c0003533:	89 ee                	mov    esi,ebp
c0003535:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003538:	76 0f                	jbe    c0003549 <remove_chain+0x95>
c000353a:	89 f2                	mov    edx,esi
c000353c:	89 f8                	mov    eax,edi
c000353e:	e8 84 fa ff ff       	call   c0002fc7 <get_fat>
c0003543:	89 c5                	mov    ebp,eax
c0003545:	85 c0                	test   eax,eax
c0003547:	75 bf                	jne    c0003508 <remove_chain+0x54>
c0003549:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000354c:	0f 85 a0 00 00 00    	jne    c00035f2 <remove_chain+0x13e>
c0003552:	eb 6c                	jmp    c00035c0 <remove_chain+0x10c>
c0003554:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003557:	84 c0                	test   al,al
c0003559:	75 7d                	jne    c00035d8 <remove_chain+0x124>
c000355b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000355e:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003562:	0f 84 86 00 00 00    	je     c00035ee <remove_chain+0x13a>
c0003568:	89 da                	mov    edx,ebx
c000356a:	89 f8                	mov    eax,edi
c000356c:	e8 56 fa ff ff       	call   c0002fc7 <get_fat>
c0003571:	83 f8 01             	cmp    eax,0x1
c0003574:	0f 86 4c ff ff ff    	jbe    c00034c6 <remove_chain+0x12>
c000357a:	83 f8 ff             	cmp    eax,0xffffffff
c000357d:	75 4e                	jne    c00035cd <remove_chain+0x119>
c000357f:	b8 01 00 00 00       	mov    eax,0x1
c0003584:	eb 6e                	jmp    c00035f4 <remove_chain+0x140>
c0003586:	31 c9                	xor    ecx,ecx
c0003588:	89 f2                	mov    edx,esi
c000358a:	89 d8                	mov    eax,ebx
c000358c:	e8 31 f8 ff ff       	call   c0002dc2 <put_fat>
c0003591:	85 c0                	test   eax,eax
c0003593:	74 82                	je     c0003517 <remove_chain+0x63>
c0003595:	eb 5d                	jmp    c00035f4 <remove_chain+0x140>
c0003597:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000359a:	75 1b                	jne    c00035b7 <remove_chain+0x103>
c000359c:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00035a0:	89 d8                	mov    eax,ebx
c00035a2:	83 ec 0c             	sub    esp,0xc
c00035a5:	6a 00                	push   0x0
c00035a7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00035ab:	e8 5d f7 ff ff       	call   c0002d0d <change_bitmap>
c00035b0:	83 c4 10             	add    esp,0x10
c00035b3:	85 c0                	test   eax,eax
c00035b5:	75 3d                	jne    c00035f4 <remove_chain+0x140>
c00035b7:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00035bb:	e9 73 ff ff ff       	jmp    c0003533 <remove_chain+0x7f>
c00035c0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00035c5:	75 8d                	jne    c0003554 <remove_chain+0xa0>
c00035c7:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00035cb:	eb 25                	jmp    c00035f2 <remove_chain+0x13e>
c00035cd:	8d 53 01             	lea    edx,[ebx+0x1]
c00035d0:	89 c3                	mov    ebx,eax
c00035d2:	39 c2                	cmp    edx,eax
c00035d4:	74 88                	je     c000355e <remove_chain+0xaa>
c00035d6:	eb 1a                	jmp    c00035f2 <remove_chain+0x13e>
c00035d8:	3c 03                	cmp    al,0x3
c00035da:	75 16                	jne    c00035f2 <remove_chain+0x13e>
c00035dc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035df:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035e3:	77 0d                	ja     c00035f2 <remove_chain+0x13e>
c00035e5:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035e8:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035ec:	72 04                	jb     c00035f2 <remove_chain+0x13e>
c00035ee:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035f2:	31 c0                	xor    eax,eax
c00035f4:	83 c4 1c             	add    esp,0x1c
c00035f7:	5b                   	pop    ebx
c00035f8:	5e                   	pop    esi
c00035f9:	5f                   	pop    edi
c00035fa:	5d                   	pop    ebp
c00035fb:	c3                   	ret    

c00035fc <dir_clear>:
c00035fc:	55                   	push   ebp
c00035fd:	57                   	push   edi
c00035fe:	56                   	push   esi
c00035ff:	89 c6                	mov    esi,eax
c0003601:	53                   	push   ebx
c0003602:	83 ec 1c             	sub    esp,0x1c
c0003605:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003609:	e8 9d ed ff ff       	call   c00023ab <sync_window>
c000360e:	85 c0                	test   eax,eax
c0003610:	0f 85 de 00 00 00    	jne    c00036f4 <dir_clear+0xf8>
c0003616:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000361a:	89 f0                	mov    eax,esi
c000361c:	8d 6e 54             	lea    ebp,[esi+0x54]
c000361f:	e8 d6 e8 ff ff       	call   c0001efa <clst2sect>
c0003624:	b9 00 02 00 00       	mov    ecx,0x200
c0003629:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000362d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003631:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003634:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003637:	89 e8                	mov    eax,ebp
c0003639:	31 d2                	xor    edx,edx
c000363b:	e8 b5 e6 ff ff       	call   c0001cf5 <mem_set>
c0003640:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003644:	c1 e3 09             	shl    ebx,0x9
c0003647:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000364d:	76 1f                	jbe    c000366e <dir_clear+0x72>
c000364f:	bb 00 80 00 00       	mov    ebx,0x8000
c0003654:	eb 18                	jmp    c000366e <dir_clear+0x72>
c0003656:	83 ec 0c             	sub    esp,0xc
c0003659:	53                   	push   ebx
c000365a:	e8 35 4e 00 00       	call   c0008494 <ff_memalloc>
c000365f:	83 c4 10             	add    esp,0x10
c0003662:	89 c7                	mov    edi,eax
c0003664:	85 c0                	test   eax,eax
c0003666:	0f 85 8f 00 00 00    	jne    c00036fb <dir_clear+0xff>
c000366c:	d1 eb                	shr    ebx,1
c000366e:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003674:	77 e0                	ja     c0003656 <dir_clear+0x5a>
c0003676:	31 db                	xor    ebx,ebx
c0003678:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000367c:	39 d8                	cmp    eax,ebx
c000367e:	76 66                	jbe    c00036e6 <dir_clear+0xea>
c0003680:	83 ec 0c             	sub    esp,0xc
c0003683:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003687:	6a 01                	push   0x1
c0003689:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000368d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003691:	55                   	push   ebp
c0003692:	50                   	push   eax
c0003693:	e8 94 e5 ff ff       	call   c0001c2c <disk_write>
c0003698:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000369d:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00036a2:	83 c4 20             	add    esp,0x20
c00036a5:	85 c0                	test   eax,eax
c00036a7:	75 3d                	jne    c00036e6 <dir_clear+0xea>
c00036a9:	43                   	inc    ebx
c00036aa:	eb cc                	jmp    c0003678 <dir_clear+0x7c>
c00036ac:	83 ec 0c             	sub    esp,0xc
c00036af:	31 d2                	xor    edx,edx
c00036b1:	55                   	push   ebp
c00036b2:	89 d8                	mov    eax,ebx
c00036b4:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00036b8:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00036bc:	52                   	push   edx
c00036bd:	50                   	push   eax
c00036be:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00036c2:	57                   	push   edi
c00036c3:	50                   	push   eax
c00036c4:	e8 63 e5 ff ff       	call   c0001c2c <disk_write>
c00036c9:	83 c4 20             	add    esp,0x20
c00036cc:	85 c0                	test   eax,eax
c00036ce:	75 0a                	jne    c00036da <dir_clear+0xde>
c00036d0:	01 eb                	add    ebx,ebp
c00036d2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036d6:	39 d8                	cmp    eax,ebx
c00036d8:	77 d2                	ja     c00036ac <dir_clear+0xb0>
c00036da:	83 ec 0c             	sub    esp,0xc
c00036dd:	57                   	push   edi
c00036de:	e8 c7 4d 00 00       	call   c00084aa <ff_memfree>
c00036e3:	83 c4 10             	add    esp,0x10
c00036e6:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036ea:	39 d8                	cmp    eax,ebx
c00036ec:	0f 95 c0             	setne  al
c00036ef:	0f b6 c0             	movzx  eax,al
c00036f2:	eb 19                	jmp    c000370d <dir_clear+0x111>
c00036f4:	b8 01 00 00 00       	mov    eax,0x1
c00036f9:	eb 12                	jmp    c000370d <dir_clear+0x111>
c00036fb:	89 d9                	mov    ecx,ebx
c00036fd:	31 d2                	xor    edx,edx
c00036ff:	c1 eb 09             	shr    ebx,0x9
c0003702:	e8 ee e5 ff ff       	call   c0001cf5 <mem_set>
c0003707:	89 dd                	mov    ebp,ebx
c0003709:	31 db                	xor    ebx,ebx
c000370b:	eb c5                	jmp    c00036d2 <dir_clear+0xd6>
c000370d:	83 c4 1c             	add    esp,0x1c
c0003710:	5b                   	pop    ebx
c0003711:	5e                   	pop    esi
c0003712:	5f                   	pop    edi
c0003713:	5d                   	pop    ebp
c0003714:	c3                   	ret    

c0003715 <dir_next>:
c0003715:	55                   	push   ebp
c0003716:	57                   	push   edi
c0003717:	56                   	push   esi
c0003718:	53                   	push   ebx
c0003719:	89 c3                	mov    ebx,eax
c000371b:	83 ec 1c             	sub    esp,0x1c
c000371e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003720:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003724:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003727:	8d 78 20             	lea    edi,[eax+0x20]
c000372a:	31 c0                	xor    eax,eax
c000372c:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003730:	0f 94 c0             	sete   al
c0003733:	48                   	dec    eax
c0003734:	25 00 00 20 f0       	and    eax,0xf0200000
c0003739:	05 00 00 00 10       	add    eax,0x10000000
c000373e:	39 f8                	cmp    eax,edi
c0003740:	77 0e                	ja     c0003750 <dir_next+0x3b>
c0003742:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003749:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003750:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003753:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003756:	b8 04 00 00 00       	mov    eax,0x4
c000375b:	89 ce                	mov    esi,ecx
c000375d:	09 d6                	or     esi,edx
c000375f:	0f 84 da 00 00 00    	je     c000383f <dir_next+0x12a>
c0003765:	89 f8                	mov    eax,edi
c0003767:	25 ff 01 00 00       	and    eax,0x1ff
c000376c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003770:	0f 85 b9 00 00 00    	jne    c000382f <dir_next+0x11a>
c0003776:	83 c2 01             	add    edx,0x1
c0003779:	83 d1 00             	adc    ecx,0x0
c000377c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000377f:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003782:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003785:	85 d2                	test   edx,edx
c0003787:	75 29                	jne    c00037b2 <dir_next+0x9d>
c0003789:	89 fa                	mov    edx,edi
c000378b:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000378f:	c1 ea 05             	shr    edx,0x5
c0003792:	39 c2                	cmp    edx,eax
c0003794:	0f 82 95 00 00 00    	jb     c000382f <dir_next+0x11a>
c000379a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00037a1:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00037a8:	b8 04 00 00 00       	mov    eax,0x4
c00037ad:	e9 8d 00 00 00       	jmp    c000383f <dir_next+0x12a>
c00037b2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00037b6:	89 f9                	mov    ecx,edi
c00037b8:	48                   	dec    eax
c00037b9:	c1 e9 09             	shr    ecx,0x9
c00037bc:	85 c8                	test   eax,ecx
c00037be:	75 6f                	jne    c000382f <dir_next+0x11a>
c00037c0:	89 d8                	mov    eax,ebx
c00037c2:	e8 00 f8 ff ff       	call   c0002fc7 <get_fat>
c00037c7:	89 c6                	mov    esi,eax
c00037c9:	83 f8 01             	cmp    eax,0x1
c00037cc:	77 07                	ja     c00037d5 <dir_next+0xc0>
c00037ce:	b8 02 00 00 00       	mov    eax,0x2
c00037d3:	eb 6a                	jmp    c000383f <dir_next+0x12a>
c00037d5:	83 f8 ff             	cmp    eax,0xffffffff
c00037d8:	75 07                	jne    c00037e1 <dir_next+0xcc>
c00037da:	b8 01 00 00 00       	mov    eax,0x1
c00037df:	eb 5e                	jmp    c000383f <dir_next+0x12a>
c00037e1:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037e4:	77 37                	ja     c000381d <dir_next+0x108>
c00037e6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037eb:	74 ad                	je     c000379a <dir_next+0x85>
c00037ed:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037f0:	89 d8                	mov    eax,ebx
c00037f2:	e8 be fa ff ff       	call   c00032b5 <create_chain>
c00037f7:	89 c6                	mov    esi,eax
c00037f9:	b8 07 00 00 00       	mov    eax,0x7
c00037fe:	85 f6                	test   esi,esi
c0003800:	74 3d                	je     c000383f <dir_next+0x12a>
c0003802:	83 fe 01             	cmp    esi,0x1
c0003805:	74 c7                	je     c00037ce <dir_next+0xb9>
c0003807:	83 fe ff             	cmp    esi,0xffffffff
c000380a:	74 ce                	je     c00037da <dir_next+0xc5>
c000380c:	89 f2                	mov    edx,esi
c000380e:	89 e8                	mov    eax,ebp
c0003810:	e8 e7 fd ff ff       	call   c00035fc <dir_clear>
c0003815:	85 c0                	test   eax,eax
c0003817:	75 c1                	jne    c00037da <dir_next+0xc5>
c0003819:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c000381d:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003820:	89 f2                	mov    edx,esi
c0003822:	89 e8                	mov    eax,ebp
c0003824:	e8 d1 e6 ff ff       	call   c0001efa <clst2sect>
c0003829:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000382c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000382f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003833:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003836:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c000383a:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000383d:	31 c0                	xor    eax,eax
c000383f:	83 c4 1c             	add    esp,0x1c
c0003842:	5b                   	pop    ebx
c0003843:	5e                   	pop    esi
c0003844:	5f                   	pop    edi
c0003845:	5d                   	pop    ebp
c0003846:	c3                   	ret    

c0003847 <load_xdir>:
c0003847:	55                   	push   ebp
c0003848:	57                   	push   edi
c0003849:	56                   	push   esi
c000384a:	89 c6                	mov    esi,eax
c000384c:	53                   	push   ebx
c000384d:	83 ec 1c             	sub    esp,0x1c
c0003850:	8b 00                	mov    eax,DWORD PTR [eax]
c0003852:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003855:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003858:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000385b:	e8 df eb ff ff       	call   c000243f <move_window>
c0003860:	89 c3                	mov    ebx,eax
c0003862:	85 c0                	test   eax,eax
c0003864:	0f 85 0c 01 00 00    	jne    c0003976 <load_xdir+0x12f>
c000386a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000386d:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003870:	0f 85 fb 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c0003876:	89 f8                	mov    eax,edi
c0003878:	b9 20 00 00 00       	mov    ecx,0x20
c000387d:	e8 5e e4 ff ff       	call   c0001ce0 <mem_cpy>
c0003882:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003886:	40                   	inc    eax
c0003887:	c1 e0 05             	shl    eax,0x5
c000388a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000388e:	83 e8 60             	sub    eax,0x60
c0003891:	3d 00 02 00 00       	cmp    eax,0x200
c0003896:	0f 87 d5 00 00 00    	ja     c0003971 <load_xdir+0x12a>
c000389c:	31 d2                	xor    edx,edx
c000389e:	89 f0                	mov    eax,esi
c00038a0:	e8 70 fe ff ff       	call   c0003715 <dir_next>
c00038a5:	89 c3                	mov    ebx,eax
c00038a7:	83 f8 04             	cmp    eax,0x4
c00038aa:	0f 84 c1 00 00 00    	je     c0003971 <load_xdir+0x12a>
c00038b0:	85 c0                	test   eax,eax
c00038b2:	0f 85 be 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038b8:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038bb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038be:	8b 06                	mov    eax,DWORD PTR [esi]
c00038c0:	e8 7a eb ff ff       	call   c000243f <move_window>
c00038c5:	89 c3                	mov    ebx,eax
c00038c7:	85 c0                	test   eax,eax
c00038c9:	0f 85 a7 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038cf:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038d2:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00038d5:	0f 85 96 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c00038db:	8d 47 20             	lea    eax,[edi+0x20]
c00038de:	b9 20 00 00 00       	mov    ecx,0x20
c00038e3:	e8 f8 e3 ff ff       	call   c0001ce0 <mem_cpy>
c00038e8:	31 d2                	xor    edx,edx
c00038ea:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038ee:	b9 0f 00 00 00       	mov    ecx,0xf
c00038f3:	83 c0 2c             	add    eax,0x2c
c00038f6:	f7 f1                	div    ecx
c00038f8:	c1 e0 05             	shl    eax,0x5
c00038fb:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038ff:	77 70                	ja     c0003971 <load_xdir+0x12a>
c0003901:	bd 40 00 00 00       	mov    ebp,0x40
c0003906:	31 d2                	xor    edx,edx
c0003908:	89 f0                	mov    eax,esi
c000390a:	e8 06 fe ff ff       	call   c0003715 <dir_next>
c000390f:	89 c3                	mov    ebx,eax
c0003911:	83 f8 04             	cmp    eax,0x4
c0003914:	74 5b                	je     c0003971 <load_xdir+0x12a>
c0003916:	85 c0                	test   eax,eax
c0003918:	75 5c                	jne    c0003976 <load_xdir+0x12f>
c000391a:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000391d:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003920:	8b 06                	mov    eax,DWORD PTR [esi]
c0003922:	e8 18 eb ff ff       	call   c000243f <move_window>
c0003927:	89 c3                	mov    ebx,eax
c0003929:	85 c0                	test   eax,eax
c000392b:	75 49                	jne    c0003976 <load_xdir+0x12f>
c000392d:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003930:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003933:	75 3c                	jne    c0003971 <load_xdir+0x12a>
c0003935:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000393b:	77 0d                	ja     c000394a <load_xdir+0x103>
c000393d:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003940:	b9 20 00 00 00       	mov    ecx,0x20
c0003945:	e8 96 e3 ff ff       	call   c0001ce0 <mem_cpy>
c000394a:	83 c5 20             	add    ebp,0x20
c000394d:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003951:	77 b3                	ja     c0003906 <load_xdir+0xbf>
c0003953:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003959:	77 1b                	ja     c0003976 <load_xdir+0x12f>
c000395b:	89 f8                	mov    eax,edi
c000395d:	e8 cd e7 ff ff       	call   c000212f <xdir_sum>
c0003962:	89 c1                	mov    ecx,eax
c0003964:	8d 47 02             	lea    eax,[edi+0x2]
c0003967:	e8 f5 e2 ff ff       	call   c0001c61 <ld_word>
c000396c:	66 39 c1             	cmp    cx,ax
c000396f:	74 05                	je     c0003976 <load_xdir+0x12f>
c0003971:	bb 02 00 00 00       	mov    ebx,0x2
c0003976:	83 c4 1c             	add    esp,0x1c
c0003979:	89 d8                	mov    eax,ebx
c000397b:	5b                   	pop    ebx
c000397c:	5e                   	pop    esi
c000397d:	5f                   	pop    edi
c000397e:	5d                   	pop    ebp
c000397f:	c3                   	ret    

c0003980 <load_obj_xdir>:
c0003980:	53                   	push   ebx
c0003981:	89 c3                	mov    ebx,eax
c0003983:	83 ec 08             	sub    esp,0x8
c0003986:	8b 02                	mov    eax,DWORD PTR [edx]
c0003988:	89 03                	mov    DWORD PTR [ebx],eax
c000398a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000398d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003990:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003993:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003996:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003999:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00039a0:	30 c0                	xor    al,al
c00039a2:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00039a9:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00039ac:	89 d8                	mov    eax,ebx
c00039ae:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00039b1:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00039b4:	e8 04 f8 ff ff       	call   c00031bd <dir_sdi>
c00039b9:	85 c0                	test   eax,eax
c00039bb:	75 0b                	jne    c00039c8 <load_obj_xdir+0x48>
c00039bd:	89 d8                	mov    eax,ebx
c00039bf:	83 c4 08             	add    esp,0x8
c00039c2:	5b                   	pop    ebx
c00039c3:	e9 7f fe ff ff       	jmp    c0003847 <load_xdir>
c00039c8:	83 c4 08             	add    esp,0x8
c00039cb:	5b                   	pop    ebx
c00039cc:	c3                   	ret    

c00039cd <dir_read>:
c00039cd:	55                   	push   ebp
c00039ce:	bd 04 00 00 00       	mov    ebp,0x4
c00039d3:	57                   	push   edi
c00039d4:	56                   	push   esi
c00039d5:	be ff ff ff ff       	mov    esi,0xffffffff
c00039da:	53                   	push   ebx
c00039db:	89 c3                	mov    ebx,eax
c00039dd:	83 ec 1c             	sub    esp,0x1c
c00039e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e4:	8b 38                	mov    edi,DWORD PTR [eax]
c00039e6:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039eb:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039ee:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039f1:	89 c8                	mov    eax,ecx
c00039f3:	09 d0                	or     eax,edx
c00039f5:	0f 84 25 01 00 00    	je     c0003b20 <dir_read+0x153>
c00039fb:	89 f8                	mov    eax,edi
c00039fd:	e8 3d ea ff ff       	call   c000243f <move_window>
c0003a02:	89 c5                	mov    ebp,eax
c0003a04:	85 c0                	test   eax,eax
c0003a06:	0f 85 23 01 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a0c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a0f:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003a11:	84 c9                	test   cl,cl
c0003a13:	0f 84 11 01 00 00    	je     c0003b2a <dir_read+0x15d>
c0003a19:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a1c:	75 48                	jne    c0003a66 <dir_read+0x99>
c0003a1e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003a23:	74 10                	je     c0003a35 <dir_read+0x68>
c0003a25:	80 f9 83             	cmp    cl,0x83
c0003a28:	0f 85 dd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a2e:	31 ed                	xor    ebp,ebp
c0003a30:	e9 08 01 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a35:	80 f9 85             	cmp    cl,0x85
c0003a38:	0f 85 cd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a3e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a41:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a44:	89 d8                	mov    eax,ebx
c0003a46:	e8 fc fd ff ff       	call   c0003847 <load_xdir>
c0003a4b:	89 c5                	mov    ebp,eax
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	0f 85 da 00 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a55:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a58:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a5b:	83 e0 3f             	and    eax,0x3f
c0003a5e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a61:	e9 d7 00 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a66:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a69:	83 e0 3f             	and    eax,0x3f
c0003a6c:	80 f9 2e             	cmp    cl,0x2e
c0003a6f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a73:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a76:	0f 84 8a 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a7c:	80 f9 e5             	cmp    cl,0xe5
c0003a7f:	0f 84 81 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a89:	83 e0 1f             	and    eax,0x1f
c0003a8c:	83 f8 08             	cmp    eax,0x8
c0003a8f:	0f 94 c0             	sete   al
c0003a92:	0f b6 c0             	movzx  eax,al
c0003a95:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a99:	75 6b                	jne    c0003b06 <dir_read+0x139>
c0003a9b:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003aa0:	75 44                	jne    c0003ae6 <dir_read+0x119>
c0003aa2:	f6 c1 40             	test   cl,0x40
c0003aa5:	74 12                	je     c0003ab9 <dir_read+0xec>
c0003aa7:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003aaa:	83 e1 bf             	and    ecx,0xffffffbf
c0003aad:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003ab1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003ab4:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003ab7:	eb 06                	jmp    c0003abf <dir_read+0xf2>
c0003ab9:	89 f0                	mov    eax,esi
c0003abb:	38 c8                	cmp    al,cl
c0003abd:	75 47                	jne    c0003b06 <dir_read+0x139>
c0003abf:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003ac3:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ac8:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003acb:	75 3e                	jne    c0003b0b <dir_read+0x13e>
c0003acd:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003ad1:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003ad4:	e8 8a e4 ff ff       	call   c0001f63 <pick_lfn>
c0003ad9:	85 c0                	test   eax,eax
c0003adb:	74 2e                	je     c0003b0b <dir_read+0x13e>
c0003add:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003ae1:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003ae4:	eb 25                	jmp    c0003b0b <dir_read+0x13e>
c0003ae6:	89 f0                	mov    eax,esi
c0003ae8:	84 c0                	test   al,al
c0003aea:	75 11                	jne    c0003afd <dir_read+0x130>
c0003aec:	89 d0                	mov    eax,edx
c0003aee:	e8 2a e6 ff ff       	call   c000211d <sum_sfn>
c0003af3:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003af7:	0f 84 31 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003afd:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003b04:	eb 37                	jmp    c0003b3d <dir_read+0x170>
c0003b06:	be ff ff ff ff       	mov    esi,0xffffffff
c0003b0b:	31 d2                	xor    edx,edx
c0003b0d:	89 d8                	mov    eax,ebx
c0003b0f:	e8 01 fc ff ff       	call   c0003715 <dir_next>
c0003b14:	89 c5                	mov    ebp,eax
c0003b16:	85 c0                	test   eax,eax
c0003b18:	0f 84 cd fe ff ff    	je     c00039eb <dir_read+0x1e>
c0003b1e:	eb 0f                	jmp    c0003b2f <dir_read+0x162>
c0003b20:	85 ed                	test   ebp,ebp
c0003b22:	0f 84 06 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003b28:	eb 05                	jmp    c0003b2f <dir_read+0x162>
c0003b2a:	bd 04 00 00 00       	mov    ebp,0x4
c0003b2f:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003b36:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b3d:	83 c4 1c             	add    esp,0x1c
c0003b40:	89 e8                	mov    eax,ebp
c0003b42:	5b                   	pop    ebx
c0003b43:	5e                   	pop    esi
c0003b44:	5f                   	pop    edi
c0003b45:	5d                   	pop    ebp
c0003b46:	c3                   	ret    

c0003b47 <dir_alloc>:
c0003b47:	55                   	push   ebp
c0003b48:	89 d5                	mov    ebp,edx
c0003b4a:	57                   	push   edi
c0003b4b:	31 d2                	xor    edx,edx
c0003b4d:	56                   	push   esi
c0003b4e:	53                   	push   ebx
c0003b4f:	89 c3                	mov    ebx,eax
c0003b51:	83 ec 0c             	sub    esp,0xc
c0003b54:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b56:	e8 62 f6 ff ff       	call   c00031bd <dir_sdi>
c0003b5b:	85 c0                	test   eax,eax
c0003b5d:	75 4e                	jne    c0003bad <dir_alloc+0x66>
c0003b5f:	31 f6                	xor    esi,esi
c0003b61:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b64:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b67:	89 f8                	mov    eax,edi
c0003b69:	e8 d1 e8 ff ff       	call   c000243f <move_window>
c0003b6e:	85 c0                	test   eax,eax
c0003b70:	75 3b                	jne    c0003bad <dir_alloc+0x66>
c0003b72:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b75:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b78:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b7a:	75 07                	jne    c0003b83 <dir_alloc+0x3c>
c0003b7c:	f7 d2                	not    edx
c0003b7e:	c0 ea 07             	shr    dl,0x7
c0003b81:	eb 0d                	jmp    c0003b90 <dir_alloc+0x49>
c0003b83:	84 d2                	test   dl,dl
c0003b85:	0f 94 c1             	sete   cl
c0003b88:	80 fa e5             	cmp    dl,0xe5
c0003b8b:	0f 94 c2             	sete   dl
c0003b8e:	09 ca                	or     edx,ecx
c0003b90:	84 d2                	test   dl,dl
c0003b92:	74 07                	je     c0003b9b <dir_alloc+0x54>
c0003b94:	46                   	inc    esi
c0003b95:	39 ee                	cmp    esi,ebp
c0003b97:	75 04                	jne    c0003b9d <dir_alloc+0x56>
c0003b99:	eb 1c                	jmp    c0003bb7 <dir_alloc+0x70>
c0003b9b:	31 f6                	xor    esi,esi
c0003b9d:	ba 01 00 00 00       	mov    edx,0x1
c0003ba2:	89 d8                	mov    eax,ebx
c0003ba4:	e8 6c fb ff ff       	call   c0003715 <dir_next>
c0003ba9:	85 c0                	test   eax,eax
c0003bab:	74 b4                	je     c0003b61 <dir_alloc+0x1a>
c0003bad:	83 f8 04             	cmp    eax,0x4
c0003bb0:	75 05                	jne    c0003bb7 <dir_alloc+0x70>
c0003bb2:	b8 07 00 00 00       	mov    eax,0x7
c0003bb7:	83 c4 0c             	add    esp,0xc
c0003bba:	5b                   	pop    ebx
c0003bbb:	5e                   	pop    esi
c0003bbc:	5f                   	pop    edi
c0003bbd:	5d                   	pop    ebp
c0003bbe:	c3                   	ret    

c0003bbf <store_xdir>:
c0003bbf:	55                   	push   ebp
c0003bc0:	57                   	push   edi
c0003bc1:	89 c7                	mov    edi,eax
c0003bc3:	56                   	push   esi
c0003bc4:	53                   	push   ebx
c0003bc5:	83 ec 0c             	sub    esp,0xc
c0003bc8:	8b 00                	mov    eax,DWORD PTR [eax]
c0003bca:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003bcd:	89 e8                	mov    eax,ebp
c0003bcf:	e8 5b e5 ff ff       	call   c000212f <xdir_sum>
c0003bd4:	0f b7 d0             	movzx  edx,ax
c0003bd7:	8d 45 02             	lea    eax,[ebp+0x2]
c0003bda:	e8 f4 e0 ff ff       	call   c0001cd3 <st_word>
c0003bdf:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003be3:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003be6:	89 f8                	mov    eax,edi
c0003be8:	e8 d0 f5 ff ff       	call   c00031bd <dir_sdi>
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	85 f6                	test   esi,esi
c0003bf1:	75 3d                	jne    c0003c30 <store_xdir+0x71>
c0003bf3:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bf6:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bf9:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bfb:	e8 3f e8 ff ff       	call   c000243f <move_window>
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	85 c0                	test   eax,eax
c0003c04:	75 2a                	jne    c0003c30 <store_xdir+0x71>
c0003c06:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003c09:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0e:	89 ea                	mov    edx,ebp
c0003c10:	e8 cb e0 ff ff       	call   c0001ce0 <mem_cpy>
c0003c15:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c17:	85 db                	test   ebx,ebx
c0003c19:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c1d:	74 11                	je     c0003c30 <store_xdir+0x71>
c0003c1f:	31 d2                	xor    edx,edx
c0003c21:	89 f8                	mov    eax,edi
c0003c23:	83 c5 20             	add    ebp,0x20
c0003c26:	e8 ea fa ff ff       	call   c0003715 <dir_next>
c0003c2b:	4b                   	dec    ebx
c0003c2c:	89 c6                	mov    esi,eax
c0003c2e:	eb bf                	jmp    c0003bef <store_xdir+0x30>
c0003c30:	89 f0                	mov    eax,esi
c0003c32:	83 fe 02             	cmp    esi,0x2
c0003c35:	76 05                	jbe    c0003c3c <store_xdir+0x7d>
c0003c37:	b8 02 00 00 00       	mov    eax,0x2
c0003c3c:	83 c4 0c             	add    esp,0xc
c0003c3f:	5b                   	pop    ebx
c0003c40:	5e                   	pop    esi
c0003c41:	5f                   	pop    edi
c0003c42:	5d                   	pop    ebp
c0003c43:	c3                   	ret    

c0003c44 <dir_remove>:
c0003c44:	57                   	push   edi
c0003c45:	56                   	push   esi
c0003c46:	53                   	push   ebx
c0003c47:	89 c3                	mov    ebx,eax
c0003c49:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c4c:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c4e:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c51:	83 fa ff             	cmp    edx,0xffffffff
c0003c54:	74 09                	je     c0003c5f <dir_remove+0x1b>
c0003c56:	e8 62 f5 ff ff       	call   c00031bd <dir_sdi>
c0003c5b:	85 c0                	test   eax,eax
c0003c5d:	75 41                	jne    c0003ca0 <dir_remove+0x5c>
c0003c5f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c62:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c65:	89 f0                	mov    eax,esi
c0003c67:	e8 d3 e7 ff ff       	call   c000243f <move_window>
c0003c6c:	85 c0                	test   eax,eax
c0003c6e:	75 26                	jne    c0003c96 <dir_remove+0x52>
c0003c70:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c73:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c76:	75 05                	jne    c0003c7d <dir_remove+0x39>
c0003c78:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c7b:	eb 03                	jmp    c0003c80 <dir_remove+0x3c>
c0003c7d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c80:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c84:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c87:	73 17                	jae    c0003ca0 <dir_remove+0x5c>
c0003c89:	31 d2                	xor    edx,edx
c0003c8b:	89 d8                	mov    eax,ebx
c0003c8d:	e8 83 fa ff ff       	call   c0003715 <dir_next>
c0003c92:	85 c0                	test   eax,eax
c0003c94:	74 c9                	je     c0003c5f <dir_remove+0x1b>
c0003c96:	83 f8 04             	cmp    eax,0x4
c0003c99:	75 05                	jne    c0003ca0 <dir_remove+0x5c>
c0003c9b:	b8 02 00 00 00       	mov    eax,0x2
c0003ca0:	5b                   	pop    ebx
c0003ca1:	5e                   	pop    esi
c0003ca2:	5f                   	pop    edi
c0003ca3:	c3                   	ret    

c0003ca4 <create_name>:
c0003ca4:	55                   	push   ebp
c0003ca5:	89 d5                	mov    ebp,edx
c0003ca7:	57                   	push   edi
c0003ca8:	89 c7                	mov    edi,eax
c0003caa:	56                   	push   esi
c0003cab:	31 f6                	xor    esi,esi
c0003cad:	53                   	push   ebx
c0003cae:	83 ec 3c             	sub    esp,0x3c
c0003cb1:	8b 02                	mov    eax,DWORD PTR [edx]
c0003cb3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cb7:	8b 07                	mov    eax,DWORD PTR [edi]
c0003cb9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003cbc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003cc0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003cc4:	e8 72 e0 ff ff       	call   c0001d3b <tchar2uni>
c0003cc9:	89 c3                	mov    ebx,eax
c0003ccb:	83 f8 ff             	cmp    eax,0xffffffff
c0003cce:	75 0a                	jne    c0003cda <create_name+0x36>
c0003cd0:	b8 06 00 00 00       	mov    eax,0x6
c0003cd5:	e9 9e 02 00 00       	jmp    c0003f78 <create_name+0x2d4>
c0003cda:	3d ff ff 00 00       	cmp    eax,0xffff
c0003cdf:	76 0c                	jbe    c0003ced <create_name+0x49>
c0003ce1:	c1 e8 10             	shr    eax,0x10
c0003ce4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003ce8:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cec:	46                   	inc    esi
c0003ced:	66 83 fb 1f          	cmp    bx,0x1f
c0003cf1:	76 4f                	jbe    c0003d42 <create_name+0x9e>
c0003cf3:	66 83 fb 5c          	cmp    bx,0x5c
c0003cf7:	74 35                	je     c0003d2e <create_name+0x8a>
c0003cf9:	66 83 fb 2f          	cmp    bx,0x2f
c0003cfd:	74 2f                	je     c0003d2e <create_name+0x8a>
c0003cff:	66 83 fb 7f          	cmp    bx,0x7f
c0003d03:	77 11                	ja     c0003d16 <create_name+0x72>
c0003d05:	0f b7 d3             	movzx  edx,bx
c0003d08:	b8 32 94 02 c0       	mov    eax,0xc0029432
c0003d0d:	e8 11 e0 ff ff       	call   c0001d23 <chk_chr>
c0003d12:	85 c0                	test   eax,eax
c0003d14:	75 ba                	jne    c0003cd0 <create_name+0x2c>
c0003d16:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003d1c:	77 b2                	ja     c0003cd0 <create_name+0x2c>
c0003d1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d22:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003d26:	46                   	inc    esi
c0003d27:	eb 97                	jmp    c0003cc0 <create_name+0x1c>
c0003d29:	40                   	inc    eax
c0003d2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003d2e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d32:	8a 10                	mov    dl,BYTE PTR [eax]
c0003d34:	80 fa 2f             	cmp    dl,0x2f
c0003d37:	74 f0                	je     c0003d29 <create_name+0x85>
c0003d39:	80 fa 5c             	cmp    dl,0x5c
c0003d3c:	74 eb                	je     c0003d29 <create_name+0x85>
c0003d3e:	31 db                	xor    ebx,ebx
c0003d40:	eb 02                	jmp    c0003d44 <create_name+0xa0>
c0003d42:	b3 04                	mov    bl,0x4
c0003d44:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d48:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d4b:	85 f6                	test   esi,esi
c0003d4d:	74 18                	je     c0003d67 <create_name+0xc3>
c0003d4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d53:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d58:	66 83 f8 20          	cmp    ax,0x20
c0003d5c:	74 06                	je     c0003d64 <create_name+0xc0>
c0003d5e:	66 83 f8 2e          	cmp    ax,0x2e
c0003d62:	75 03                	jne    c0003d67 <create_name+0xc3>
c0003d64:	4e                   	dec    esi
c0003d65:	eb e4                	jmp    c0003d4b <create_name+0xa7>
c0003d67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6b:	31 ed                	xor    ebp,ebp
c0003d6d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d73:	85 f6                	test   esi,esi
c0003d75:	0f 84 55 ff ff ff    	je     c0003cd0 <create_name+0x2c>
c0003d7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d7f:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d82:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d86:	66 83 f8 20          	cmp    ax,0x20
c0003d8a:	75 04                	jne    c0003d90 <create_name+0xec>
c0003d8c:	89 d5                	mov    ebp,edx
c0003d8e:	eb eb                	jmp    c0003d7b <create_name+0xd7>
c0003d90:	85 ed                	test   ebp,ebp
c0003d92:	75 06                	jne    c0003d9a <create_name+0xf6>
c0003d94:	66 83 f8 2e          	cmp    ax,0x2e
c0003d98:	75 08                	jne    c0003da2 <create_name+0xfe>
c0003d9a:	83 cb 03             	or     ebx,0x3
c0003d9d:	eb 03                	jmp    c0003da2 <create_name+0xfe>
c0003d9f:	4e                   	dec    esi
c0003da0:	74 0c                	je     c0003dae <create_name+0x10a>
c0003da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da6:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003dac:	75 f1                	jne    c0003d9f <create_name+0xfb>
c0003dae:	b9 0b 00 00 00       	mov    ecx,0xb
c0003db3:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003db6:	ba 20 00 00 00       	mov    edx,0x20
c0003dbb:	e8 35 df ff ff       	call   c0001cf5 <mem_set>
c0003dc0:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003dc8:	31 c9                	xor    ecx,ecx
c0003dca:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003dcf:	8d 45 01             	lea    eax,[ebp+0x1]
c0003dd2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003dd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003dda:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003dde:	66 85 ed             	test   bp,bp
c0003de1:	0f 84 30 01 00 00    	je     c0003f17 <create_name+0x273>
c0003de7:	66 83 fd 20          	cmp    bp,0x20
c0003deb:	74 10                	je     c0003dfd <create_name+0x159>
c0003ded:	66 83 fd 2e          	cmp    bp,0x2e
c0003df1:	75 13                	jne    c0003e06 <create_name+0x162>
c0003df3:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df7:	0f 84 6b 01 00 00    	je     c0003f68 <create_name+0x2c4>
c0003dfd:	83 cb 03             	or     ebx,0x3
c0003e00:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003e04:	eb c9                	jmp    c0003dcf <create_name+0x12b>
c0003e06:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003e0a:	73 0b                	jae    c0003e17 <create_name+0x173>
c0003e0c:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e10:	75 47                	jne    c0003e59 <create_name+0x1b5>
c0003e12:	e9 51 01 00 00       	jmp    c0003f68 <create_name+0x2c4>
c0003e17:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e1c:	75 10                	jne    c0003e2e <create_name+0x18a>
c0003e1e:	83 cb 03             	or     ebx,0x3
c0003e21:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e29:	e9 e9 00 00 00       	jmp    c0003f17 <create_name+0x273>
c0003e2e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e32:	74 0d                	je     c0003e41 <create_name+0x19d>
c0003e34:	83 cb 03             	or     ebx,0x3
c0003e37:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e3b:	0f 87 d6 00 00 00    	ja     c0003f17 <create_name+0x273>
c0003e41:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e46:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e4a:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e52:	b9 08 00 00 00       	mov    ecx,0x8
c0003e57:	eb a7                	jmp    c0003e00 <create_name+0x15c>
c0003e59:	66 83 fd 7f          	cmp    bp,0x7f
c0003e5d:	76 68                	jbe    c0003ec7 <create_name+0x223>
c0003e5f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e63:	88 da                	mov    dl,bl
c0003e65:	83 ca 02             	or     edx,0x2
c0003e68:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e6c:	50                   	push   eax
c0003e6d:	50                   	push   eax
c0003e6e:	68 b5 01 00 00       	push   0x1b5
c0003e73:	55                   	push   ebp
c0003e74:	e8 48 46 00 00       	call   c00084c1 <ff_uni2oem>
c0003e79:	83 c4 10             	add    esp,0x10
c0003e7c:	89 c5                	mov    ebp,eax
c0003e7e:	a8 80                	test   al,0x80
c0003e80:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e84:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e88:	74 0c                	je     c0003e96 <create_name+0x1f2>
c0003e8a:	83 e5 7f             	and    ebp,0x7f
c0003e8d:	0f b6 ad 80 93 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6c80]
c0003e94:	eb 2a                	jmp    c0003ec0 <create_name+0x21c>
c0003e96:	66 3d ff 00          	cmp    ax,0xff
c0003e9a:	76 24                	jbe    c0003ec0 <create_name+0x21c>
c0003e9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ea0:	48                   	dec    eax
c0003ea1:	39 c8                	cmp    eax,ecx
c0003ea3:	77 0c                	ja     c0003eb1 <create_name+0x20d>
c0003ea5:	83 cb 03             	or     ebx,0x3
c0003ea8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003eac:	e9 4f ff ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003eb1:	89 e8                	mov    eax,ebp
c0003eb3:	88 d3                	mov    bl,dl
c0003eb5:	66 c1 e8 08          	shr    ax,0x8
c0003eb9:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ebd:	41                   	inc    ecx
c0003ebe:	eb 4b                	jmp    c0003f0b <create_name+0x267>
c0003ec0:	88 d3                	mov    bl,dl
c0003ec2:	66 85 ed             	test   bp,bp
c0003ec5:	74 19                	je     c0003ee0 <create_name+0x23c>
c0003ec7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003ecb:	0f b7 d5             	movzx  edx,bp
c0003ece:	b8 3b 94 02 c0       	mov    eax,0xc002943b
c0003ed3:	e8 4b de ff ff       	call   c0001d23 <chk_chr>
c0003ed8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003edc:	85 c0                	test   eax,eax
c0003ede:	74 0a                	je     c0003eea <create_name+0x246>
c0003ee0:	83 cb 03             	or     ebx,0x3
c0003ee3:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003ee8:	eb 21                	jmp    c0003f0b <create_name+0x267>
c0003eea:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eed:	66 83 f8 19          	cmp    ax,0x19
c0003ef1:	77 07                	ja     c0003efa <create_name+0x256>
c0003ef3:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ef8:	eb 11                	jmp    c0003f0b <create_name+0x267>
c0003efa:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003efd:	66 83 f8 19          	cmp    ax,0x19
c0003f01:	77 08                	ja     c0003f0b <create_name+0x267>
c0003f03:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003f08:	83 ed 20             	sub    ebp,0x20
c0003f0b:	89 e8                	mov    eax,ebp
c0003f0d:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003f11:	41                   	inc    ecx
c0003f12:	e9 e9 fe ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003f17:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003f1b:	75 04                	jne    c0003f21 <create_name+0x27d>
c0003f1d:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003f21:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003f26:	75 05                	jne    c0003f2d <create_name+0x289>
c0003f28:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003f2d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f31:	83 e0 0c             	and    eax,0xc
c0003f34:	3c 0c                	cmp    al,0xc
c0003f36:	74 0b                	je     c0003f43 <create_name+0x29f>
c0003f38:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f3c:	83 e0 03             	and    eax,0x3
c0003f3f:	3c 03                	cmp    al,0x3
c0003f41:	75 05                	jne    c0003f48 <create_name+0x2a4>
c0003f43:	83 cb 02             	or     ebx,0x2
c0003f46:	eb 19                	jmp    c0003f61 <create_name+0x2bd>
c0003f48:	f6 c3 02             	test   bl,0x2
c0003f4b:	75 14                	jne    c0003f61 <create_name+0x2bd>
c0003f4d:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f52:	74 03                	je     c0003f57 <create_name+0x2b3>
c0003f54:	83 cb 10             	or     ebx,0x10
c0003f57:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f5c:	74 03                	je     c0003f61 <create_name+0x2bd>
c0003f5e:	83 cb 08             	or     ebx,0x8
c0003f61:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f64:	31 c0                	xor    eax,eax
c0003f66:	eb 10                	jmp    c0003f78 <create_name+0x2d4>
c0003f68:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f6d:	0f 85 ce fe ff ff    	jne    c0003e41 <create_name+0x19d>
c0003f73:	e9 a6 fe ff ff       	jmp    c0003e1e <create_name+0x17a>
c0003f78:	83 c4 3c             	add    esp,0x3c
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	5f                   	pop    edi
c0003f7e:	5d                   	pop    ebp
c0003f7f:	c3                   	ret    

c0003f80 <xname_sum>:
c0003f80:	56                   	push   esi
c0003f81:	53                   	push   ebx
c0003f82:	89 c6                	mov    esi,eax
c0003f84:	51                   	push   ecx
c0003f85:	31 db                	xor    ebx,ebx
c0003f87:	83 c6 02             	add    esi,0x2
c0003f8a:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f8e:	66 85 c0             	test   ax,ax
c0003f91:	74 1f                	je     c0003fb2 <xname_sum+0x32>
c0003f93:	83 ec 0c             	sub    esp,0xc
c0003f96:	66 d1 cb             	ror    bx,1
c0003f99:	50                   	push   eax
c0003f9a:	e8 1e 46 00 00       	call   c00085bd <ff_wtoupper>
c0003f9f:	83 c4 10             	add    esp,0x10
c0003fa2:	0f b6 d0             	movzx  edx,al
c0003fa5:	66 c1 e8 08          	shr    ax,0x8
c0003fa9:	01 d3                	add    ebx,edx
c0003fab:	66 d1 cb             	ror    bx,1
c0003fae:	01 c3                	add    ebx,eax
c0003fb0:	eb d5                	jmp    c0003f87 <xname_sum+0x7>
c0003fb2:	89 d8                	mov    eax,ebx
c0003fb4:	5a                   	pop    edx
c0003fb5:	5b                   	pop    ebx
c0003fb6:	5e                   	pop    esi
c0003fb7:	c3                   	ret    

c0003fb8 <create_xdir>:
c0003fb8:	55                   	push   ebp
c0003fb9:	b9 40 00 00 00       	mov    ecx,0x40
c0003fbe:	57                   	push   edi
c0003fbf:	bd 01 00 00 00       	mov    ebp,0x1
c0003fc4:	56                   	push   esi
c0003fc5:	31 ff                	xor    edi,edi
c0003fc7:	53                   	push   ebx
c0003fc8:	be 40 00 00 00       	mov    esi,0x40
c0003fcd:	89 c3                	mov    ebx,eax
c0003fcf:	83 ec 1c             	sub    esp,0x1c
c0003fd2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003fd6:	31 d2                	xor    edx,edx
c0003fd8:	e8 18 dd ff ff       	call   c0001cf5 <mem_set>
c0003fdd:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fe0:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003fe4:	31 c9                	xor    ecx,ecx
c0003fe6:	8d 46 01             	lea    eax,[esi+0x1]
c0003fe9:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fed:	83 c6 02             	add    esi,0x2
c0003ff0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003ff4:	66 85 ed             	test   bp,bp
c0003ff7:	74 12                	je     c000400b <create_xdir+0x53>
c0003ff9:	0f b6 c1             	movzx  eax,cl
c0003ffc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004000:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0004004:	66 83 fd 01          	cmp    bp,0x1
c0004008:	80 d9 ff             	sbb    cl,0xff
c000400b:	8d 04 33             	lea    eax,[ebx+esi*1]
c000400e:	0f b7 d5             	movzx  edx,bp
c0004011:	83 c6 02             	add    esi,0x2
c0004014:	e8 ba dc ff ff       	call   c0001cd3 <st_word>
c0004019:	f7 c6 1f 00 00 00    	test   esi,0x1f
c000401f:	75 d3                	jne    c0003ff4 <create_xdir+0x3c>
c0004021:	8d 47 01             	lea    eax,[edi+0x1]
c0004024:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004028:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000402c:	0f b6 c1             	movzx  eax,cl
c000402f:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0004034:	74 07                	je     c000403d <create_xdir+0x85>
c0004036:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c000403b:	eb a9                	jmp    c0003fe6 <create_xdir+0x2e>
c000403d:	8d 47 02             	lea    eax,[edi+0x2]
c0004040:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004043:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0004046:	89 d0                	mov    eax,edx
c0004048:	e8 33 ff ff ff       	call   c0003f80 <xname_sum>
c000404d:	83 c4 1c             	add    esp,0x1c
c0004050:	0f b7 d0             	movzx  edx,ax
c0004053:	8d 43 24             	lea    eax,[ebx+0x24]
c0004056:	5b                   	pop    ebx
c0004057:	5e                   	pop    esi
c0004058:	5f                   	pop    edi
c0004059:	5d                   	pop    ebp
c000405a:	e9 74 dc ff ff       	jmp    c0001cd3 <st_word>

c000405f <cmp_lfn>:
c000405f:	55                   	push   ebp
c0004060:	57                   	push   edi
c0004061:	89 d7                	mov    edi,edx
c0004063:	56                   	push   esi
c0004064:	53                   	push   ebx
c0004065:	83 ec 1c             	sub    esp,0x1c
c0004068:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000406c:	8d 42 1a             	lea    eax,[edx+0x1a]
c000406f:	e8 ed db ff ff       	call   c0001c61 <ld_word>
c0004074:	66 85 c0             	test   ax,ax
c0004077:	74 07                	je     c0004080 <cmp_lfn+0x21>
c0004079:	31 c0                	xor    eax,eax
c000407b:	e9 9a 00 00 00       	jmp    c000411a <cmp_lfn+0xbb>
c0004080:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004082:	bd 01 00 00 00       	mov    ebp,0x1
c0004087:	83 e3 3f             	and    ebx,0x3f
c000408a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004092:	4b                   	dec    ebx
c0004093:	6b db 0d             	imul   ebx,ebx,0xd
c0004096:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000409a:	0f b6 80 00 94 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6c00]
c00040a1:	01 f8                	add    eax,edi
c00040a3:	e8 b9 db ff ff       	call   c0001c61 <ld_word>
c00040a8:	66 85 ed             	test   bp,bp
c00040ab:	89 c6                	mov    esi,eax
c00040ad:	74 3c                	je     c00040eb <cmp_lfn+0x8c>
c00040af:	81 fb ff 00 00 00    	cmp    ebx,0xff
c00040b5:	77 c2                	ja     c0004079 <cmp_lfn+0x1a>
c00040b7:	83 ec 0c             	sub    esp,0xc
c00040ba:	0f b7 c0             	movzx  eax,ax
c00040bd:	50                   	push   eax
c00040be:	e8 fa 44 00 00       	call   c00085bd <ff_wtoupper>
c00040c3:	89 c5                	mov    ebp,eax
c00040c5:	8d 43 01             	lea    eax,[ebx+0x1]
c00040c8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00040cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00040d0:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c00040d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00040d7:	e8 e1 44 00 00       	call   c00085bd <ff_wtoupper>
c00040dc:	83 c4 10             	add    esp,0x10
c00040df:	39 c5                	cmp    ebp,eax
c00040e1:	75 96                	jne    c0004079 <cmp_lfn+0x1a>
c00040e3:	89 f5                	mov    ebp,esi
c00040e5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040e9:	eb 04                	jmp    c00040ef <cmp_lfn+0x90>
c00040eb:	66 46                	inc    si
c00040ed:	75 8a                	jne    c0004079 <cmp_lfn+0x1a>
c00040ef:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040f3:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040f8:	75 9c                	jne    c0004096 <cmp_lfn+0x37>
c00040fa:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040fd:	74 16                	je     c0004115 <cmp_lfn+0xb6>
c00040ff:	66 85 ed             	test   bp,bp
c0004102:	74 11                	je     c0004115 <cmp_lfn+0xb6>
c0004104:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004108:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000410d:	0f 94 c0             	sete   al
c0004110:	0f b6 c0             	movzx  eax,al
c0004113:	eb 05                	jmp    c000411a <cmp_lfn+0xbb>
c0004115:	b8 01 00 00 00       	mov    eax,0x1
c000411a:	83 c4 1c             	add    esp,0x1c
c000411d:	5b                   	pop    ebx
c000411e:	5e                   	pop    esi
c000411f:	5f                   	pop    edi
c0004120:	5d                   	pop    ebp
c0004121:	c3                   	ret    

c0004122 <dir_find>:
c0004122:	55                   	push   ebp
c0004123:	31 d2                	xor    edx,edx
c0004125:	57                   	push   edi
c0004126:	56                   	push   esi
c0004127:	53                   	push   ebx
c0004128:	89 c3                	mov    ebx,eax
c000412a:	83 ec 1c             	sub    esp,0x1c
c000412d:	8b 30                	mov    esi,DWORD PTR [eax]
c000412f:	e8 89 f0 ff ff       	call   c00031bd <dir_sdi>
c0004134:	89 04 24             	mov    DWORD PTR [esp],eax
c0004137:	85 c0                	test   eax,eax
c0004139:	0f 85 9e 01 00 00    	jne    c00042dd <dir_find+0x1bb>
c000413f:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004142:	0f 85 8d 00 00 00    	jne    c00041d5 <dir_find+0xb3>
c0004148:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000414b:	e8 30 fe ff ff       	call   c0003f80 <xname_sum>
c0004150:	89 c7                	mov    edi,eax
c0004152:	31 d2                	xor    edx,edx
c0004154:	89 d8                	mov    eax,ebx
c0004156:	e8 72 f8 ff ff       	call   c00039cd <dir_read>
c000415b:	85 c0                	test   eax,eax
c000415d:	0f 85 5e 01 00 00    	jne    c00042c1 <dir_find+0x19f>
c0004163:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004166:	8d 41 24             	lea    eax,[ecx+0x24]
c0004169:	e8 f3 da ff ff       	call   c0001c61 <ld_word>
c000416e:	66 39 f8             	cmp    ax,di
c0004171:	75 df                	jne    c0004152 <dir_find+0x30>
c0004173:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004176:	31 ed                	xor    ebp,ebp
c0004178:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000417c:	ba 40 00 00 00       	mov    edx,0x40
c0004181:	89 e9                	mov    ecx,ebp
c0004183:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004187:	0f 84 42 01 00 00    	je     c00042cf <dir_find+0x1ad>
c000418d:	f6 c2 1f             	test   dl,0x1f
c0004190:	75 03                	jne    c0004195 <dir_find+0x73>
c0004192:	83 c2 02             	add    edx,0x2
c0004195:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004199:	89 d0                	mov    eax,edx
c000419b:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c000419e:	e8 be da ff ff       	call   c0001c61 <ld_word>
c00041a3:	83 ec 0c             	sub    esp,0xc
c00041a6:	0f b7 c0             	movzx  eax,ax
c00041a9:	50                   	push   eax
c00041aa:	e8 0e 44 00 00       	call   c00085bd <ff_wtoupper>
c00041af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00041b3:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041b6:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00041ba:	89 04 24             	mov    DWORD PTR [esp],eax
c00041bd:	e8 fb 43 00 00       	call   c00085bd <ff_wtoupper>
c00041c2:	83 c4 10             	add    esp,0x10
c00041c5:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00041c9:	75 87                	jne    c0004152 <dir_find+0x30>
c00041cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00041cf:	45                   	inc    ebp
c00041d0:	83 c2 02             	add    edx,0x2
c00041d3:	eb ac                	jmp    c0004181 <dir_find+0x5f>
c00041d5:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041dc:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041e1:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041e6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041e9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041ec:	89 f0                	mov    eax,esi
c00041ee:	e8 4c e2 ff ff       	call   c000243f <move_window>
c00041f3:	85 c0                	test   eax,eax
c00041f5:	0f 85 c6 00 00 00    	jne    c00042c1 <dir_find+0x19f>
c00041fb:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041fe:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0004201:	84 c9                	test   cl,cl
c0004203:	0f 84 bd 00 00 00    	je     c00042c6 <dir_find+0x1a4>
c0004209:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c000420c:	88 d0                	mov    al,dl
c000420e:	83 e0 3f             	and    eax,0x3f
c0004211:	80 f9 e5             	cmp    cl,0xe5
c0004214:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004217:	0f 84 87 00 00 00    	je     c00042a4 <dir_find+0x182>
c000421d:	80 e2 08             	and    dl,0x8
c0004220:	74 06                	je     c0004228 <dir_find+0x106>
c0004222:	3c 0f                	cmp    al,0xf
c0004224:	75 7e                	jne    c00042a4 <dir_find+0x182>
c0004226:	eb 04                	jmp    c000422c <dir_find+0x10a>
c0004228:	3c 0f                	cmp    al,0xf
c000422a:	75 4c                	jne    c0004278 <dir_find+0x156>
c000422c:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004230:	75 7e                	jne    c00042b0 <dir_find+0x18e>
c0004232:	f6 c1 40             	test   cl,0x40
c0004235:	74 12                	je     c0004249 <dir_find+0x127>
c0004237:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000423a:	83 e1 bf             	and    ecx,0xffffffbf
c000423d:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004241:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004244:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004247:	eb 06                	jmp    c000424f <dir_find+0x12d>
c0004249:	89 f8                	mov    eax,edi
c000424b:	38 c8                	cmp    al,cl
c000424d:	75 5c                	jne    c00042ab <dir_find+0x189>
c000424f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004253:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004258:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000425b:	75 53                	jne    c00042b0 <dir_find+0x18e>
c000425d:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004261:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004264:	89 ea                	mov    edx,ebp
c0004266:	e8 f4 fd ff ff       	call   c000405f <cmp_lfn>
c000426b:	85 c0                	test   eax,eax
c000426d:	74 41                	je     c00042b0 <dir_find+0x18e>
c000426f:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004273:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004276:	eb 38                	jmp    c00042b0 <dir_find+0x18e>
c0004278:	89 f8                	mov    eax,edi
c000427a:	84 c0                	test   al,al
c000427c:	75 0d                	jne    c000428b <dir_find+0x169>
c000427e:	89 e8                	mov    eax,ebp
c0004280:	e8 98 de ff ff       	call   c000211d <sum_sfn>
c0004285:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004289:	74 52                	je     c00042dd <dir_find+0x1bb>
c000428b:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c000428f:	75 13                	jne    c00042a4 <dir_find+0x182>
c0004291:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004294:	b9 0b 00 00 00       	mov    ecx,0xb
c0004299:	89 e8                	mov    eax,ebp
c000429b:	e8 60 da ff ff       	call   c0001d00 <mem_cmp>
c00042a0:	85 c0                	test   eax,eax
c00042a2:	74 39                	je     c00042dd <dir_find+0x1bb>
c00042a4:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00042ab:	bf ff ff ff ff       	mov    edi,0xffffffff
c00042b0:	31 d2                	xor    edx,edx
c00042b2:	89 d8                	mov    eax,ebx
c00042b4:	e8 5c f4 ff ff       	call   c0003715 <dir_next>
c00042b9:	85 c0                	test   eax,eax
c00042bb:	0f 84 25 ff ff ff    	je     c00041e6 <dir_find+0xc4>
c00042c1:	89 04 24             	mov    DWORD PTR [esp],eax
c00042c4:	eb 17                	jmp    c00042dd <dir_find+0x1bb>
c00042c6:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00042cd:	eb 0e                	jmp    c00042dd <dir_find+0x1bb>
c00042cf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00042d2:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00042d7:	0f 85 75 fe ff ff    	jne    c0004152 <dir_find+0x30>
c00042dd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042e0:	83 c4 1c             	add    esp,0x1c
c00042e3:	5b                   	pop    ebx
c00042e4:	5e                   	pop    esi
c00042e5:	5f                   	pop    edi
c00042e6:	5d                   	pop    ebp
c00042e7:	c3                   	ret    

c00042e8 <dir_register>:
c00042e8:	55                   	push   ebp
c00042e9:	57                   	push   edi
c00042ea:	56                   	push   esi
c00042eb:	be 06 00 00 00       	mov    esi,0x6
c00042f0:	53                   	push   ebx
c00042f1:	83 ec 6c             	sub    esp,0x6c
c00042f4:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042f8:	0f 85 62 02 00 00    	jne    c0004560 <dir_register+0x278>
c00042fe:	8b 28                	mov    ebp,DWORD PTR [eax]
c0004300:	31 ff                	xor    edi,edi
c0004302:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004305:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c000430a:	74 03                	je     c000430f <dir_register+0x27>
c000430c:	47                   	inc    edi
c000430d:	eb f6                	jmp    c0004305 <dir_register+0x1d>
c000430f:	89 c3                	mov    ebx,eax
c0004311:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004315:	0f 85 e1 00 00 00    	jne    c00043fc <dir_register+0x114>
c000431b:	83 c7 0e             	add    edi,0xe
c000431e:	b9 0f 00 00 00       	mov    ecx,0xf
c0004323:	89 f8                	mov    eax,edi
c0004325:	31 d2                	xor    edx,edx
c0004327:	f7 f1                	div    ecx
c0004329:	8d 50 02             	lea    edx,[eax+0x2]
c000432c:	89 c7                	mov    edi,eax
c000432e:	89 d8                	mov    eax,ebx
c0004330:	e8 12 f8 ff ff       	call   c0003b47 <dir_alloc>
c0004335:	89 c6                	mov    esi,eax
c0004337:	85 c0                	test   eax,eax
c0004339:	0f 85 21 02 00 00    	jne    c0004560 <dir_register+0x278>
c000433f:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004345:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004348:	c1 e7 05             	shl    edi,0x5
c000434b:	29 f8                	sub    eax,edi
c000434d:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004350:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004353:	a8 04                	test   al,0x4
c0004355:	0f 84 91 00 00 00    	je     c00043ec <dir_register+0x104>
c000435b:	83 e0 fb             	and    eax,0xfffffffb
c000435e:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004361:	89 d8                	mov    eax,ebx
c0004363:	e8 25 ec ff ff       	call   c0002f8d <fill_first_frag>
c0004368:	85 c0                	test   eax,eax
c000436a:	0f 85 ee 01 00 00    	jne    c000455e <dir_register+0x276>
c0004370:	83 c9 ff             	or     ecx,0xffffffff
c0004373:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004376:	89 d8                	mov    eax,ebx
c0004378:	e8 db eb ff ff       	call   c0002f58 <fill_last_frag>
c000437d:	85 c0                	test   eax,eax
c000437f:	0f 85 d9 01 00 00    	jne    c000455e <dir_register+0x276>
c0004385:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004389:	74 61                	je     c00043ec <dir_register+0x104>
c000438b:	89 da                	mov    edx,ebx
c000438d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004391:	e8 ea f5 ff ff       	call   c0003980 <load_obj_xdir>
c0004396:	85 c0                	test   eax,eax
c0004398:	0f 85 c0 01 00 00    	jne    c000455e <dir_register+0x276>
c000439e:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00043a2:	31 c9                	xor    ecx,ecx
c00043a4:	c1 e2 09             	shl    edx,0x9
c00043a7:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00043aa:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00043ad:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00043b0:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00043b3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b6:	83 c0 38             	add    eax,0x38
c00043b9:	e8 1c d9 ff ff       	call   c0001cda <st_qword>
c00043be:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043c1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043c4:	83 c0 28             	add    eax,0x28
c00043c7:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00043ca:	e8 0b d9 ff ff       	call   c0001cda <st_qword>
c00043cf:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00043d2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00043d5:	83 c8 01             	or     eax,0x1
c00043d8:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043db:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043df:	e8 db f7 ff ff       	call   c0003bbf <store_xdir>
c00043e4:	85 c0                	test   eax,eax
c00043e6:	0f 85 72 01 00 00    	jne    c000455e <dir_register+0x276>
c00043ec:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043ef:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043f2:	e8 c1 fb ff ff       	call   c0003fb8 <create_xdir>
c00043f7:	e9 64 01 00 00       	jmp    c0004560 <dir_register+0x278>
c00043fc:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043ff:	b9 0c 00 00 00       	mov    ecx,0xc
c0004404:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004408:	89 c2                	mov    edx,eax
c000440a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000440e:	e8 cd d8 ff ff       	call   c0001ce0 <mem_cpy>
c0004413:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004418:	74 58                	je     c0004472 <dir_register+0x18a>
c000441a:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c000441e:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004426:	83 ec 0c             	sub    esp,0xc
c0004429:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000442c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004430:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004434:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004438:	e8 24 dc ff ff       	call   c0002061 <gen_numname>
c000443d:	89 d8                	mov    eax,ebx
c000443f:	e8 de fc ff ff       	call   c0004122 <dir_find>
c0004444:	83 c4 10             	add    esp,0x10
c0004447:	89 c6                	mov    esi,eax
c0004449:	85 c0                	test   eax,eax
c000444b:	75 15                	jne    c0004462 <dir_register+0x17a>
c000444d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004451:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004456:	75 ce                	jne    c0004426 <dir_register+0x13e>
c0004458:	be 07 00 00 00       	mov    esi,0x7
c000445d:	e9 fe 00 00 00       	jmp    c0004560 <dir_register+0x278>
c0004462:	83 f8 04             	cmp    eax,0x4
c0004465:	0f 85 f5 00 00 00    	jne    c0004560 <dir_register+0x278>
c000446b:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000446f:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004472:	b9 01 00 00 00       	mov    ecx,0x1
c0004477:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000447c:	74 0f                	je     c000448d <dir_register+0x1a5>
c000447e:	b9 0d 00 00 00       	mov    ecx,0xd
c0004483:	8d 47 0c             	lea    eax,[edi+0xc]
c0004486:	31 d2                	xor    edx,edx
c0004488:	f7 f1                	div    ecx
c000448a:	8d 48 01             	lea    ecx,[eax+0x1]
c000448d:	89 ca                	mov    edx,ecx
c000448f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004493:	89 d8                	mov    eax,ebx
c0004495:	e8 ad f6 ff ff       	call   c0003b47 <dir_alloc>
c000449a:	89 c6                	mov    esi,eax
c000449c:	85 c0                	test   eax,eax
c000449e:	0f 85 bc 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044a4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00044a8:	49                   	dec    ecx
c00044a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00044ad:	74 6a                	je     c0004519 <dir_register+0x231>
c00044af:	89 c8                	mov    eax,ecx
c00044b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044b4:	c1 e0 05             	shl    eax,0x5
c00044b7:	29 c2                	sub    edx,eax
c00044b9:	89 d8                	mov    eax,ebx
c00044bb:	e8 fd ec ff ff       	call   c00031bd <dir_sdi>
c00044c0:	89 c6                	mov    esi,eax
c00044c2:	85 c0                	test   eax,eax
c00044c4:	0f 85 96 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00044ce:	e8 4a dc ff ff       	call   c000211d <sum_sfn>
c00044d3:	0f b6 f8             	movzx  edi,al
c00044d6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044d9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044dc:	89 e8                	mov    eax,ebp
c00044de:	e8 5c df ff ff       	call   c000243f <move_window>
c00044e3:	89 c6                	mov    esi,eax
c00044e5:	85 c0                	test   eax,eax
c00044e7:	75 77                	jne    c0004560 <dir_register+0x278>
c00044e9:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044ee:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044f1:	83 ec 0c             	sub    esp,0xc
c00044f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044f7:	57                   	push   edi
c00044f8:	e8 e0 da ff ff       	call   c0001fdd <put_lfn>
c00044fd:	31 d2                	xor    edx,edx
c00044ff:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004503:	89 d8                	mov    eax,ebx
c0004505:	e8 0b f2 ff ff       	call   c0003715 <dir_next>
c000450a:	83 c4 10             	add    esp,0x10
c000450d:	89 c6                	mov    esi,eax
c000450f:	85 c0                	test   eax,eax
c0004511:	75 4d                	jne    c0004560 <dir_register+0x278>
c0004513:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004517:	75 bd                	jne    c00044d6 <dir_register+0x1ee>
c0004519:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000451c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000451f:	89 e8                	mov    eax,ebp
c0004521:	e8 19 df ff ff       	call   c000243f <move_window>
c0004526:	89 c6                	mov    esi,eax
c0004528:	85 c0                	test   eax,eax
c000452a:	75 34                	jne    c0004560 <dir_register+0x278>
c000452c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000452f:	b9 20 00 00 00       	mov    ecx,0x20
c0004534:	31 d2                	xor    edx,edx
c0004536:	e8 ba d7 ff ff       	call   c0001cf5 <mem_set>
c000453b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000453e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004542:	b9 0b 00 00 00       	mov    ecx,0xb
c0004547:	e8 94 d7 ff ff       	call   c0001ce0 <mem_cpy>
c000454c:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000454f:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004552:	83 e0 18             	and    eax,0x18
c0004555:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004558:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000455c:	eb 02                	jmp    c0004560 <dir_register+0x278>
c000455e:	89 c6                	mov    esi,eax
c0004560:	83 c4 6c             	add    esp,0x6c
c0004563:	89 f0                	mov    eax,esi
c0004565:	5b                   	pop    ebx
c0004566:	5e                   	pop    esi
c0004567:	5f                   	pop    edi
c0004568:	5d                   	pop    ebp
c0004569:	c3                   	ret    

c000456a <sync_fs>:
c000456a:	56                   	push   esi
c000456b:	53                   	push   ebx
c000456c:	53                   	push   ebx
c000456d:	89 c3                	mov    ebx,eax
c000456f:	e8 37 de ff ff       	call   c00023ab <sync_window>
c0004574:	85 c0                	test   eax,eax
c0004576:	0f 85 b1 00 00 00    	jne    c000462d <sync_fs+0xc3>
c000457c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000457f:	0f 85 8e 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c0004585:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004589:	0f 85 84 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c000458f:	b9 00 02 00 00       	mov    ecx,0x200
c0004594:	8d 73 54             	lea    esi,[ebx+0x54]
c0004597:	31 d2                	xor    edx,edx
c0004599:	89 f0                	mov    eax,esi
c000459b:	e8 55 d7 ff ff       	call   c0001cf5 <mem_set>
c00045a0:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00045a6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00045ab:	e8 23 d7 ff ff       	call   c0001cd3 <st_word>
c00045b0:	ba 52 52 61 41       	mov    edx,0x41615252
c00045b5:	89 f0                	mov    eax,esi
c00045b7:	e8 1b d7 ff ff       	call   c0001cd7 <st_dword>
c00045bc:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00045c2:	ba 72 72 41 61       	mov    edx,0x61417272
c00045c7:	e8 0b d7 ff ff       	call   c0001cd7 <st_dword>
c00045cc:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00045cf:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00045d5:	e8 fd d6 ff ff       	call   c0001cd7 <st_dword>
c00045da:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045dd:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045e3:	e8 ef d6 ff ff       	call   c0001cd7 <st_dword>
c00045e8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045eb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045ee:	83 c0 01             	add    eax,0x1
c00045f1:	83 d2 00             	adc    edx,0x0
c00045f4:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045f7:	83 ec 0c             	sub    esp,0xc
c00045fa:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045fd:	6a 01                	push   0x1
c00045ff:	52                   	push   edx
c0004600:	50                   	push   eax
c0004601:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004605:	56                   	push   esi
c0004606:	50                   	push   eax
c0004607:	e8 20 d6 ff ff       	call   c0001c2c <disk_write>
c000460c:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0004610:	83 c4 20             	add    esp,0x20
c0004613:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004617:	51                   	push   ecx
c0004618:	6a 00                	push   0x0
c000461a:	6a 00                	push   0x0
c000461c:	50                   	push   eax
c000461d:	e8 20 d6 ff ff       	call   c0001c42 <disk_ioctl>
c0004622:	83 c4 10             	add    esp,0x10
c0004625:	85 c0                	test   eax,eax
c0004627:	0f 95 c0             	setne  al
c000462a:	0f b6 c0             	movzx  eax,al
c000462d:	5a                   	pop    edx
c000462e:	5b                   	pop    ebx
c000462f:	5e                   	pop    esi
c0004630:	c3                   	ret    

c0004631 <create_partition>:
c0004631:	55                   	push   ebp
c0004632:	0f b6 c0             	movzx  eax,al
c0004635:	57                   	push   edi
c0004636:	56                   	push   esi
c0004637:	53                   	push   ebx
c0004638:	83 ec 60             	sub    esp,0x60
c000463b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000463f:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004643:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004647:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000464b:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000464f:	50                   	push   eax
c0004650:	6a 01                	push   0x1
c0004652:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004656:	e8 e7 d5 ff ff       	call   c0001c42 <disk_ioctl>
c000465b:	83 c4 10             	add    esp,0x10
c000465e:	85 c0                	test   eax,eax
c0004660:	74 0a                	je     c000466c <create_partition+0x3b>
c0004662:	b8 01 00 00 00       	mov    eax,0x1
c0004667:	e9 67 05 00 00       	jmp    c0004bd3 <create_partition+0x5a2>
c000466c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004670:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004674:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004678:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000467c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004681:	0f 86 ed 03 00 00    	jbe    c0004a74 <create_partition+0x443>
c0004687:	83 c0 df             	add    eax,0xffffffdf
c000468a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004692:	83 d2 ff             	adc    edx,0xffffffff
c0004695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000469d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00046a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00046a5:	83 c0 bd             	add    eax,0xffffffbd
c00046a8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00046af:	83 d2 ff             	adc    edx,0xffffffff
c00046b2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00046b6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00046ba:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046c2:	be 22 00 00 00       	mov    esi,0x22
c00046c7:	31 ff                	xor    edi,edi
c00046c9:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00046d1:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00046d9:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046e1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046e5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046eb:	75 0e                	jne    c00046fb <create_partition+0xca>
c00046ed:	b9 00 02 00 00       	mov    ecx,0x200
c00046f2:	31 d2                	xor    edx,edx
c00046f4:	89 d8                	mov    eax,ebx
c00046f6:	e8 fa d5 ff ff       	call   c0001cf5 <mem_set>
c00046fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046ff:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0004703:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004707:	0b 04 24             	or     eax,DWORD PTR [esp]
c000470a:	0f 84 23 01 00 00    	je     c0004833 <create_partition+0x202>
c0004710:	89 f0                	mov    eax,esi
c0004712:	89 fa                	mov    edx,edi
c0004714:	05 ff 07 00 00       	add    eax,0x7ff
c0004719:	83 d2 00             	adc    edx,0x0
c000471c:	89 c1                	mov    ecx,eax
c000471e:	89 d7                	mov    edi,edx
c0004720:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004726:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000472a:	89 ce                	mov    esi,ecx
c000472c:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004730:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004734:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004738:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c000473b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000473f:	89 04 24             	mov    DWORD PTR [esp],eax
c0004742:	b8 64 00 00 00       	mov    eax,0x64
c0004747:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000474a:	b8 00 00 00 00       	mov    eax,0x0
c000474f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004753:	72 41                	jb     c0004796 <create_partition+0x165>
c0004755:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004759:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000475d:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004761:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004766:	01 c1                	add    ecx,eax
c0004768:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000476c:	f7 24 24             	mul    DWORD PTR [esp]
c000476f:	6a 00                	push   0x0
c0004771:	01 ca                	add    edx,ecx
c0004773:	6a 64                	push   0x64
c0004775:	52                   	push   edx
c0004776:	50                   	push   eax
c0004777:	e8 f0 21 02 00       	call   c002696c <__udivdi3>
c000477c:	83 c4 10             	add    esp,0x10
c000477f:	05 ff 07 00 00       	add    eax,0x7ff
c0004784:	83 d2 00             	adc    edx,0x0
c0004787:	89 c1                	mov    ecx,eax
c0004789:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000478d:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004793:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004796:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004799:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000479d:	01 f0                	add    eax,esi
c000479f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047a3:	11 fa                	adc    edx,edi
c00047a5:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00047a9:	19 d1                	sbb    ecx,edx
c00047ab:	73 2e                	jae    c00047db <create_partition+0x1aa>
c00047ad:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00047b1:	89 f8                	mov    eax,edi
c00047b3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00047ba:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00047be:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00047c6:	73 6b                	jae    c0004833 <create_partition+0x202>
c00047c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00047cc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00047d0:	29 f0                	sub    eax,esi
c00047d2:	19 fa                	sbb    edx,edi
c00047d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00047d7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047df:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047e2:	74 4f                	je     c0004833 <create_partition+0x202>
c00047e4:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047e7:	b9 10 00 00 00       	mov    ecx,0x10
c00047ec:	ba 10 94 02 c0       	mov    edx,0xc0029410
c00047f1:	e8 ea d4 ff ff       	call   c0001ce0 <mem_cpy>
c00047f6:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047fa:	b9 10 00 00 00       	mov    ecx,0x10
c00047ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004803:	e8 2c db ff ff       	call   c0002334 <make_rand>
c0004808:	89 f2                	mov    edx,esi
c000480a:	89 f9                	mov    ecx,edi
c000480c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004810:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004814:	e8 c1 d4 ff ff       	call   c0001cda <st_qword>
c0004819:	03 34 24             	add    esi,DWORD PTR [esp]
c000481c:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004820:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004824:	89 f2                	mov    edx,esi
c0004826:	89 f9                	mov    ecx,edi
c0004828:	83 c2 ff             	add    edx,0xffffffff
c000482b:	83 d1 ff             	adc    ecx,0xffffffff
c000482e:	e8 a7 d4 ff ff       	call   c0001cda <st_qword>
c0004833:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004837:	83 e8 80             	sub    eax,0xffffff80
c000483a:	89 c5                	mov    ebp,eax
c000483c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004840:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004846:	75 6b                	jne    c00048b3 <create_partition+0x282>
c0004848:	45                   	inc    ebp
c0004849:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000484d:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004852:	e8 39 da ff ff       	call   c0002290 <crc32>
c0004857:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000485d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004861:	75 e5                	jne    c0004848 <create_partition+0x217>
c0004863:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004867:	31 d2                	xor    edx,edx
c0004869:	83 ec 0c             	sub    esp,0xc
c000486c:	c1 ed 09             	shr    ebp,0x9
c000486f:	6a 01                	push   0x1
c0004871:	8d 45 02             	lea    eax,[ebp+0x2]
c0004874:	52                   	push   edx
c0004875:	50                   	push   eax
c0004876:	53                   	push   ebx
c0004877:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000487b:	e8 ac d3 ff ff       	call   c0001c2c <disk_write>
c0004880:	83 c4 20             	add    esp,0x20
c0004883:	85 c0                	test   eax,eax
c0004885:	0f 85 d7 fd ff ff    	jne    c0004662 <create_partition+0x31>
c000488b:	83 ec 0c             	sub    esp,0xc
c000488e:	31 d2                	xor    edx,edx
c0004890:	6a 01                	push   0x1
c0004892:	89 e8                	mov    eax,ebp
c0004894:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004898:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000489c:	52                   	push   edx
c000489d:	50                   	push   eax
c000489e:	53                   	push   ebx
c000489f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048a3:	e8 84 d3 ff ff       	call   c0001c2c <disk_write>
c00048a8:	83 c4 20             	add    esp,0x20
c00048ab:	85 c0                	test   eax,eax
c00048ad:	0f 85 af fd ff ff    	jne    c0004662 <create_partition+0x31>
c00048b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00048b7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00048bb:	3d 00 40 00 00       	cmp    eax,0x4000
c00048c0:	74 0d                	je     c00048cf <create_partition+0x29e>
c00048c2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00048c6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048ca:	e9 12 fe ff ff       	jmp    c00046e1 <create_partition+0xb0>
c00048cf:	31 d2                	xor    edx,edx
c00048d1:	b9 00 02 00 00       	mov    ecx,0x200
c00048d6:	89 d8                	mov    eax,ebx
c00048d8:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048db:	e8 15 d4 ff ff       	call   c0001cf5 <mem_set>
c00048e0:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048e3:	b9 10 00 00 00       	mov    ecx,0x10
c00048e8:	ba 00 93 02 c0       	mov    edx,0xc0029300
c00048ed:	89 d8                	mov    eax,ebx
c00048ef:	e8 ec d3 ff ff       	call   c0001ce0 <mem_cpy>
c00048f4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048f8:	8d 43 58             	lea    eax,[ebx+0x58]
c00048fb:	f7 d2                	not    edx
c00048fd:	e8 d5 d3 ff ff       	call   c0001cd7 <st_dword>
c0004902:	8d 43 18             	lea    eax,[ebx+0x18]
c0004905:	31 c9                	xor    ecx,ecx
c0004907:	89 04 24             	mov    DWORD PTR [esp],eax
c000490a:	ba 01 00 00 00       	mov    edx,0x1
c000490f:	e8 c6 d3 ff ff       	call   c0001cda <st_qword>
c0004914:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004918:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000491c:	83 c2 ff             	add    edx,0xffffffff
c000491f:	89 e8                	mov    eax,ebp
c0004921:	83 d1 ff             	adc    ecx,0xffffffff
c0004924:	e8 b1 d3 ff ff       	call   c0001cda <st_qword>
c0004929:	31 c9                	xor    ecx,ecx
c000492b:	8d 43 28             	lea    eax,[ebx+0x28]
c000492e:	ba 22 00 00 00       	mov    edx,0x22
c0004933:	e8 a2 d3 ff ff       	call   c0001cda <st_qword>
c0004938:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000493c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004940:	83 c2 de             	add    edx,0xffffffde
c0004943:	8d 43 30             	lea    eax,[ebx+0x30]
c0004946:	83 d1 ff             	adc    ecx,0xffffffff
c0004949:	31 f6                	xor    esi,esi
c000494b:	e8 8a d3 ff ff       	call   c0001cda <st_qword>
c0004950:	8d 43 54             	lea    eax,[ebx+0x54]
c0004953:	ba 80 00 00 00       	mov    edx,0x80
c0004958:	e8 7a d3 ff ff       	call   c0001cd7 <st_dword>
c000495d:	8d 43 50             	lea    eax,[ebx+0x50]
c0004960:	ba 80 00 00 00       	mov    edx,0x80
c0004965:	e8 6d d3 ff ff       	call   c0001cd7 <st_dword>
c000496a:	ba 02 00 00 00       	mov    edx,0x2
c000496f:	89 f8                	mov    eax,edi
c0004971:	e8 61 d3 ff ff       	call   c0001cd7 <st_dword>
c0004976:	8d 53 38             	lea    edx,[ebx+0x38]
c0004979:	b9 10 00 00 00       	mov    ecx,0x10
c000497e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004982:	e8 ad d9 ff ff       	call   c0002334 <make_rand>
c0004987:	83 c8 ff             	or     eax,0xffffffff
c000498a:	46                   	inc    esi
c000498b:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004990:	e8 fb d8 ff ff       	call   c0002290 <crc32>
c0004995:	83 fe 5c             	cmp    esi,0x5c
c0004998:	75 f0                	jne    c000498a <create_partition+0x359>
c000499a:	f7 d0                	not    eax
c000499c:	8d 73 10             	lea    esi,[ebx+0x10]
c000499f:	89 c2                	mov    edx,eax
c00049a1:	89 f0                	mov    eax,esi
c00049a3:	e8 2f d3 ff ff       	call   c0001cd7 <st_dword>
c00049a8:	83 ec 0c             	sub    esp,0xc
c00049ab:	6a 01                	push   0x1
c00049ad:	6a 00                	push   0x0
c00049af:	6a 01                	push   0x1
c00049b1:	53                   	push   ebx
c00049b2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00049b6:	e8 71 d2 ff ff       	call   c0001c2c <disk_write>
c00049bb:	83 c4 20             	add    esp,0x20
c00049be:	85 c0                	test   eax,eax
c00049c0:	0f 85 9c fc ff ff    	jne    c0004662 <create_partition+0x31>
c00049c6:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00049ca:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00049ce:	83 c2 ff             	add    edx,0xffffffff
c00049d1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049d4:	83 d1 ff             	adc    ecx,0xffffffff
c00049d7:	e8 fe d2 ff ff       	call   c0001cda <st_qword>
c00049dc:	ba 01 00 00 00       	mov    edx,0x1
c00049e1:	31 c9                	xor    ecx,ecx
c00049e3:	89 e8                	mov    eax,ebp
c00049e5:	e8 f0 d2 ff ff       	call   c0001cda <st_qword>
c00049ea:	89 f8                	mov    eax,edi
c00049ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049f0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049f4:	31 ff                	xor    edi,edi
c00049f6:	e8 df d2 ff ff       	call   c0001cda <st_qword>
c00049fb:	89 f0                	mov    eax,esi
c00049fd:	31 d2                	xor    edx,edx
c00049ff:	e8 d3 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a04:	83 c8 ff             	or     eax,0xffffffff
c0004a07:	47                   	inc    edi
c0004a08:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004a0d:	e8 7e d8 ff ff       	call   c0002290 <crc32>
c0004a12:	83 ff 5c             	cmp    edi,0x5c
c0004a15:	75 f0                	jne    c0004a07 <create_partition+0x3d6>
c0004a17:	f7 d0                	not    eax
c0004a19:	89 c2                	mov    edx,eax
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	e8 b5 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a22:	83 ec 0c             	sub    esp,0xc
c0004a25:	6a 01                	push   0x1
c0004a27:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004a2b:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004a2f:	83 c0 ff             	add    eax,0xffffffff
c0004a32:	83 d2 ff             	adc    edx,0xffffffff
c0004a35:	52                   	push   edx
c0004a36:	50                   	push   eax
c0004a37:	53                   	push   ebx
c0004a38:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a3c:	e8 eb d1 ff ff       	call   c0001c2c <disk_write>
c0004a41:	83 c4 20             	add    esp,0x20
c0004a44:	85 c0                	test   eax,eax
c0004a46:	0f 85 16 fc ff ff    	jne    c0004662 <create_partition+0x31>
c0004a4c:	31 d2                	xor    edx,edx
c0004a4e:	89 d8                	mov    eax,ebx
c0004a50:	b9 00 02 00 00       	mov    ecx,0x200
c0004a55:	e8 9b d2 ff ff       	call   c0001cf5 <mem_set>
c0004a5a:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a60:	b9 10 00 00 00       	mov    ecx,0x10
c0004a65:	ba 10 93 02 c0       	mov    edx,0xc0029310
c0004a6a:	e8 71 d2 ff ff       	call   c0001ce0 <mem_cpy>
c0004a6f:	e9 21 01 00 00       	jmp    c0004b95 <create_partition+0x564>
c0004a74:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a78:	b9 05 00 00 00       	mov    ecx,0x5
c0004a7d:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a80:	bf 08 00 00 00       	mov    edi,0x8
c0004a85:	89 f8                	mov    eax,edi
c0004a87:	31 d2                	xor    edx,edx
c0004a89:	0f b6 f0             	movzx  esi,al
c0004a8c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a8f:	f7 f6                	div    esi
c0004a91:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a96:	76 0a                	jbe    c0004aa2 <create_partition+0x471>
c0004a98:	d1 e7                	shl    edi,1
c0004a9a:	49                   	dec    ecx
c0004a9b:	75 e8                	jne    c0004a85 <create_partition+0x454>
c0004a9d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004aa2:	b9 00 02 00 00       	mov    ecx,0x200
c0004aa7:	31 d2                	xor    edx,edx
c0004aa9:	89 d8                	mov    eax,ebx
c0004aab:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004ab1:	e8 3f d2 ff ff       	call   c0001cf5 <mem_set>
c0004ab6:	b9 64 00 00 00       	mov    ecx,0x64
c0004abb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004abe:	31 d2                	xor    edx,edx
c0004ac0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004ac8:	f7 f1                	div    ecx
c0004aca:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004acf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ad3:	89 f8                	mov    eax,edi
c0004ad5:	0f b6 c0             	movzx  eax,al
c0004ad8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004adc:	e9 80 00 00 00       	jmp    c0004b61 <create_partition+0x530>
c0004ae1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004ae4:	29 cf                	sub    edi,ecx
c0004ae6:	89 ca                	mov    edx,ecx
c0004ae8:	89 f0                	mov    eax,esi
c0004aea:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004aef:	e8 e3 d1 ff ff       	call   c0001cd7 <st_dword>
c0004af4:	8d 46 04             	lea    eax,[esi+0x4]
c0004af7:	89 fa                	mov    edx,edi
c0004af9:	83 c6 10             	add    esi,0x10
c0004afc:	e8 d6 d1 ff ff       	call   c0001cd7 <st_dword>
c0004b01:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004b05:	31 d2                	xor    edx,edx
c0004b07:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004b0a:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004b0e:	89 c8                	mov    eax,ecx
c0004b10:	01 f9                	add    ecx,edi
c0004b12:	f7 f5                	div    ebp
c0004b14:	89 d5                	mov    ebp,edx
c0004b16:	31 d2                	xor    edx,edx
c0004b18:	45                   	inc    ebp
c0004b19:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b1d:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004b20:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004b23:	89 c2                	mov    edx,eax
c0004b25:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004b28:	c1 ea 02             	shr    edx,0x2
c0004b2b:	83 e2 c0             	and    edx,0xffffffc0
c0004b2e:	09 ea                	or     edx,ebp
c0004b30:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b35:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004b38:	31 d2                	xor    edx,edx
c0004b3a:	f7 f5                	div    ebp
c0004b3c:	89 d7                	mov    edi,edx
c0004b3e:	31 d2                	xor    edx,edx
c0004b40:	47                   	inc    edi
c0004b41:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b45:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b48:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b4b:	89 c5                	mov    ebp,eax
c0004b4d:	c1 ed 02             	shr    ebp,0x2
c0004b50:	83 e5 c0             	and    ebp,0xffffffc0
c0004b53:	09 ef                	or     edi,ebp
c0004b55:	89 fa                	mov    edx,edi
c0004b57:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b5a:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b5f:	74 34                	je     c0004b95 <create_partition+0x564>
c0004b61:	85 c9                	test   ecx,ecx
c0004b63:	74 30                	je     c0004b95 <create_partition+0x564>
c0004b65:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b68:	76 2b                	jbe    c0004b95 <create_partition+0x564>
c0004b6a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b6e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b72:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b75:	83 ff 64             	cmp    edi,0x64
c0004b78:	76 4b                	jbe    c0004bc5 <create_partition+0x594>
c0004b7a:	89 f8                	mov    eax,edi
c0004b7c:	01 c8                	add    eax,ecx
c0004b7e:	0f 82 5d ff ff ff    	jb     c0004ae1 <create_partition+0x4b0>
c0004b84:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b87:	0f 87 54 ff ff ff    	ja     c0004ae1 <create_partition+0x4b0>
c0004b8d:	85 ff                	test   edi,edi
c0004b8f:	0f 85 51 ff ff ff    	jne    c0004ae6 <create_partition+0x4b5>
c0004b95:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b9b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004ba0:	e8 2e d1 ff ff       	call   c0001cd3 <st_word>
c0004ba5:	83 ec 0c             	sub    esp,0xc
c0004ba8:	6a 01                	push   0x1
c0004baa:	6a 00                	push   0x0
c0004bac:	6a 00                	push   0x0
c0004bae:	53                   	push   ebx
c0004baf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004bb3:	e8 74 d0 ff ff       	call   c0001c2c <disk_write>
c0004bb8:	83 c4 20             	add    esp,0x20
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	0f 95 c0             	setne  al
c0004bc0:	0f b6 c0             	movzx  eax,al
c0004bc3:	eb 0e                	jmp    c0004bd3 <create_partition+0x5a2>
c0004bc5:	74 07                	je     c0004bce <create_partition+0x59d>
c0004bc7:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004bcc:	eb ac                	jmp    c0004b7a <create_partition+0x549>
c0004bce:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004bd1:	eb a7                	jmp    c0004b7a <create_partition+0x549>
c0004bd3:	83 c4 5c             	add    esp,0x5c
c0004bd6:	5b                   	pop    ebx
c0004bd7:	5e                   	pop    esi
c0004bd8:	5f                   	pop    edi
c0004bd9:	5d                   	pop    ebp
c0004bda:	c3                   	ret    

c0004bdb <get_fileinfo>:
c0004bdb:	55                   	push   ebp
c0004bdc:	57                   	push   edi
c0004bdd:	56                   	push   esi
c0004bde:	53                   	push   ebx
c0004bdf:	83 ec 1c             	sub    esp,0x1c
c0004be2:	8b 30                	mov    esi,DWORD PTR [eax]
c0004be4:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004be8:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bec:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bef:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bf2:	0f 84 dc 01 00 00    	je     c0004dd4 <get_fileinfo+0x1f9>
c0004bf8:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bfb:	75 0f                	jne    c0004c0c <get_fileinfo+0x31>
c0004bfd:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004c00:	83 c4 1c             	add    esp,0x1c
c0004c03:	5b                   	pop    ebx
c0004c04:	5e                   	pop    esi
c0004c05:	5f                   	pop    edi
c0004c06:	5d                   	pop    ebp
c0004c07:	e9 58 d5 ff ff       	jmp    c0002164 <get_xfileinfo>
c0004c0c:	89 d3                	mov    ebx,edx
c0004c0e:	89 c6                	mov    esi,eax
c0004c10:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004c14:	74 6a                	je     c0004c80 <get_fileinfo+0xa5>
c0004c16:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004c1e:	31 ed                	xor    ebp,ebp
c0004c20:	31 ff                	xor    edi,edi
c0004c22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004c26:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004c2a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004c2d:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004c31:	66 85 d2             	test   dx,dx
c0004c34:	74 3e                	je     c0004c74 <get_fileinfo+0x99>
c0004c36:	66 85 ed             	test   bp,bp
c0004c39:	75 0c                	jne    c0004c47 <get_fileinfo+0x6c>
c0004c3b:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c41:	66 3d ff 07          	cmp    ax,0x7ff
c0004c45:	76 22                	jbe    c0004c69 <get_fileinfo+0x8e>
c0004c47:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c4c:	89 e8                	mov    eax,ebp
c0004c4e:	29 f9                	sub    ecx,edi
c0004c50:	c1 e0 10             	shl    eax,0x10
c0004c53:	09 d0                	or     eax,edx
c0004c55:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c59:	e8 a3 d1 ff ff       	call   c0001e01 <put_utf>
c0004c5e:	84 c0                	test   al,al
c0004c60:	74 10                	je     c0004c72 <get_fileinfo+0x97>
c0004c62:	0f b6 c0             	movzx  eax,al
c0004c65:	31 d2                	xor    edx,edx
c0004c67:	01 c7                	add    edi,eax
c0004c69:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c6e:	89 d5                	mov    ebp,edx
c0004c70:	eb b0                	jmp    c0004c22 <get_fileinfo+0x47>
c0004c72:	31 ff                	xor    edi,edi
c0004c74:	66 85 ed             	test   bp,bp
c0004c77:	74 02                	je     c0004c7b <get_fileinfo+0xa0>
c0004c79:	31 ff                	xor    edi,edi
c0004c7b:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c80:	31 ff                	xor    edi,edi
c0004c82:	31 c9                	xor    ecx,ecx
c0004c84:	83 f9 0a             	cmp    ecx,0xa
c0004c87:	0f 87 ad 00 00 00    	ja     c0004d3a <get_fileinfo+0x15f>
c0004c8d:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c90:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c93:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c97:	66 83 fa 20          	cmp    dx,0x20
c0004c9b:	0f 84 92 00 00 00    	je     c0004d33 <get_fileinfo+0x158>
c0004ca1:	66 83 fa 05          	cmp    dx,0x5
c0004ca5:	75 05                	jne    c0004cac <get_fileinfo+0xd1>
c0004ca7:	ba e5 00 00 00       	mov    edx,0xe5
c0004cac:	83 ff 0b             	cmp    edi,0xb
c0004caf:	77 0b                	ja     c0004cbc <get_fileinfo+0xe1>
c0004cb1:	83 fd 09             	cmp    ebp,0x9
c0004cb4:	75 06                	jne    c0004cbc <get_fileinfo+0xe1>
c0004cb6:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004cbb:	47                   	inc    edi
c0004cbc:	0f b7 c2             	movzx  eax,dx
c0004cbf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cc3:	e8 6d d0 ff ff       	call   c0001d35 <dbc_1st>
c0004cc8:	85 c0                	test   eax,eax
c0004cca:	74 2f                	je     c0004cfb <get_fileinfo+0x120>
c0004ccc:	83 fd 08             	cmp    ebp,0x8
c0004ccf:	74 2a                	je     c0004cfb <get_fileinfo+0x120>
c0004cd1:	83 fd 0b             	cmp    ebp,0xb
c0004cd4:	74 25                	je     c0004cfb <get_fileinfo+0x120>
c0004cd6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cd9:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004cdd:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ce1:	e8 52 d0 ff ff       	call   c0001d38 <dbc_2nd>
c0004ce6:	85 c0                	test   eax,eax
c0004ce8:	74 11                	je     c0004cfb <get_fileinfo+0x120>
c0004cea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cee:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cf3:	c1 e2 08             	shl    edx,0x8
c0004cf6:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cf9:	09 c2                	or     edx,eax
c0004cfb:	0f b7 d2             	movzx  edx,dx
c0004cfe:	50                   	push   eax
c0004cff:	50                   	push   eax
c0004d00:	68 b5 01 00 00       	push   0x1b5
c0004d05:	52                   	push   edx
c0004d06:	e8 46 38 00 00       	call   c0008551 <ff_oem2uni>
c0004d0b:	83 c4 10             	add    esp,0x10
c0004d0e:	66 85 c0             	test   ax,ax
c0004d11:	75 04                	jne    c0004d17 <get_fileinfo+0x13c>
c0004d13:	31 ff                	xor    edi,edi
c0004d15:	eb 23                	jmp    c0004d3a <get_fileinfo+0x15f>
c0004d17:	b9 0c 00 00 00       	mov    ecx,0xc
c0004d1c:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004d20:	29 f9                	sub    ecx,edi
c0004d22:	0f b7 c0             	movzx  eax,ax
c0004d25:	e8 d7 d0 ff ff       	call   c0001e01 <put_utf>
c0004d2a:	84 c0                	test   al,al
c0004d2c:	74 e5                	je     c0004d13 <get_fileinfo+0x138>
c0004d2e:	0f b6 c0             	movzx  eax,al
c0004d31:	01 c7                	add    edi,eax
c0004d33:	89 e9                	mov    ecx,ebp
c0004d35:	e9 4a ff ff ff       	jmp    c0004c84 <get_fileinfo+0xa9>
c0004d3a:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d3f:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d43:	75 54                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d45:	85 ff                	test   edi,edi
c0004d47:	75 0b                	jne    c0004d54 <get_fileinfo+0x179>
c0004d49:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d4d:	ba 01 00 00 00       	mov    edx,0x1
c0004d52:	eb 33                	jmp    c0004d87 <get_fileinfo+0x1ac>
c0004d54:	b1 08                	mov    cl,0x8
c0004d56:	31 d2                	xor    edx,edx
c0004d58:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d5e:	84 c0                	test   al,al
c0004d60:	74 25                	je     c0004d87 <get_fileinfo+0x1ac>
c0004d62:	66 83 f8 2e          	cmp    ax,0x2e
c0004d66:	74 16                	je     c0004d7e <get_fileinfo+0x1a3>
c0004d68:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d6b:	66 83 ff 19          	cmp    di,0x19
c0004d6f:	77 0f                	ja     c0004d80 <get_fileinfo+0x1a5>
c0004d71:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d74:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d77:	74 07                	je     c0004d80 <get_fileinfo+0x1a5>
c0004d79:	83 c0 20             	add    eax,0x20
c0004d7c:	eb 02                	jmp    c0004d80 <get_fileinfo+0x1a5>
c0004d7e:	b1 10                	mov    cl,0x10
c0004d80:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d84:	42                   	inc    edx
c0004d85:	eb d1                	jmp    c0004d58 <get_fileinfo+0x17d>
c0004d87:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d8c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8f:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d93:	75 04                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d95:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d99:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d9c:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d9f:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004da2:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004da5:	83 c0 1c             	add    eax,0x1c
c0004da8:	e8 c1 ce ff ff       	call   c0001c6e <ld_dword>
c0004dad:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004db4:	89 03                	mov    DWORD PTR [ebx],eax
c0004db6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004db9:	83 c0 16             	add    eax,0x16
c0004dbc:	e8 a0 ce ff ff       	call   c0001c61 <ld_word>
c0004dc1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004dc5:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dc8:	83 c0 18             	add    eax,0x18
c0004dcb:	e8 91 ce ff ff       	call   c0001c61 <ld_word>
c0004dd0:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004dd4:	83 c4 1c             	add    esp,0x1c
c0004dd7:	5b                   	pop    ebx
c0004dd8:	5e                   	pop    esi
c0004dd9:	5f                   	pop    edi
c0004dda:	5d                   	pop    ebp
c0004ddb:	c3                   	ret    

c0004ddc <ld_clust.isra.0>:
c0004ddc:	56                   	push   esi
c0004ddd:	89 c6                	mov    esi,eax
c0004ddf:	53                   	push   ebx
c0004de0:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004de3:	89 d3                	mov    ebx,edx
c0004de5:	e8 77 ce ff ff       	call   c0001c61 <ld_word>
c0004dea:	0f b7 c8             	movzx  ecx,ax
c0004ded:	89 f0                	mov    eax,esi
c0004def:	3c 03                	cmp    al,0x3
c0004df1:	75 0d                	jne    c0004e00 <ld_clust.isra.0+0x24>
c0004df3:	8d 43 14             	lea    eax,[ebx+0x14]
c0004df6:	e8 66 ce ff ff       	call   c0001c61 <ld_word>
c0004dfb:	c1 e0 10             	shl    eax,0x10
c0004dfe:	09 c1                	or     ecx,eax
c0004e00:	89 c8                	mov    eax,ecx
c0004e02:	5b                   	pop    ebx
c0004e03:	5e                   	pop    esi
c0004e04:	c3                   	ret    

c0004e05 <st_clust.isra.1>:
c0004e05:	56                   	push   esi
c0004e06:	89 c6                	mov    esi,eax
c0004e08:	53                   	push   ebx
c0004e09:	89 d3                	mov    ebx,edx
c0004e0b:	0f b7 d1             	movzx  edx,cx
c0004e0e:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004e11:	e8 bd ce ff ff       	call   c0001cd3 <st_word>
c0004e16:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004e19:	75 0f                	jne    c0004e2a <st_clust.isra.1+0x25>
c0004e1b:	c1 e9 10             	shr    ecx,0x10
c0004e1e:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e21:	89 ca                	mov    edx,ecx
c0004e23:	5b                   	pop    ebx
c0004e24:	5e                   	pop    esi
c0004e25:	e9 a9 ce ff ff       	jmp    c0001cd3 <st_word>
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <init_alloc_info.isra.2>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c6                	mov    esi,eax
c0004e31:	89 d3                	mov    ebx,edx
c0004e33:	51                   	push   ecx
c0004e34:	8b 00                	mov    eax,DWORD PTR [eax]
c0004e36:	83 c0 34             	add    eax,0x34
c0004e39:	e8 30 ce ff ff       	call   c0001c6e <ld_dword>
c0004e3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e41:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e43:	83 c0 38             	add    eax,0x38
c0004e46:	e8 3b ce ff ff       	call   c0001c86 <ld_qword>
c0004e4b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e4e:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e51:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e53:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e56:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5d:	83 e0 02             	and    eax,0x2
c0004e60:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e63:	5b                   	pop    ebx
c0004e64:	5b                   	pop    ebx
c0004e65:	5e                   	pop    esi
c0004e66:	c3                   	ret    

c0004e67 <follow_path>:
c0004e67:	56                   	push   esi
c0004e68:	53                   	push   ebx
c0004e69:	89 c3                	mov    ebx,eax
c0004e6b:	83 ec 14             	sub    esp,0x14
c0004e6e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e72:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e78:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e7a:	80 fa 5c             	cmp    dl,0x5c
c0004e7d:	75 07                	jne    c0004e86 <follow_path+0x1f>
c0004e7f:	40                   	inc    eax
c0004e80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e84:	eb ee                	jmp    c0004e74 <follow_path+0xd>
c0004e86:	80 fa 2f             	cmp    dl,0x2f
c0004e89:	74 f4                	je     c0004e7f <follow_path+0x18>
c0004e8b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e92:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e99:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e9c:	77 52                	ja     c0004ef0 <follow_path+0x89>
c0004e9e:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004ea2:	31 d2                	xor    edx,edx
c0004ea4:	89 d8                	mov    eax,ebx
c0004ea6:	e8 12 e3 ff ff       	call   c00031bd <dir_sdi>
c0004eab:	eb 7c                	jmp    c0004f29 <follow_path+0xc2>
c0004ead:	89 d8                	mov    eax,ebx
c0004eaf:	e8 6e f2 ff ff       	call   c0004122 <dir_find>
c0004eb4:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004eb7:	85 c0                	test   eax,eax
c0004eb9:	75 46                	jne    c0004f01 <follow_path+0x9a>
c0004ebb:	80 e2 04             	and    dl,0x4
c0004ebe:	75 69                	jne    c0004f29 <follow_path+0xc2>
c0004ec0:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004ec4:	74 5e                	je     c0004f24 <follow_path+0xbd>
c0004ec6:	8a 06                	mov    al,BYTE PTR [esi]
c0004ec8:	3c 04                	cmp    al,0x4
c0004eca:	75 41                	jne    c0004f0d <follow_path+0xa6>
c0004ecc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004ecf:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004ed3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004ed6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004ed9:	30 c0                	xor    al,al
c0004edb:	09 d0                	or     eax,edx
c0004edd:	89 da                	mov    edx,ebx
c0004edf:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ee2:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ee5:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004ee8:	8d 46 10             	lea    eax,[esi+0x10]
c0004eeb:	e8 3d ff ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0004ef0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004ef4:	89 d8                	mov    eax,ebx
c0004ef6:	e8 a9 ed ff ff       	call   c0003ca4 <create_name>
c0004efb:	85 c0                	test   eax,eax
c0004efd:	74 ae                	je     c0004ead <follow_path+0x46>
c0004eff:	eb 28                	jmp    c0004f29 <follow_path+0xc2>
c0004f01:	83 f8 04             	cmp    eax,0x4
c0004f04:	75 23                	jne    c0004f29 <follow_path+0xc2>
c0004f06:	80 e2 04             	and    dl,0x4
c0004f09:	74 19                	je     c0004f24 <follow_path+0xbd>
c0004f0b:	eb 1c                	jmp    c0004f29 <follow_path+0xc2>
c0004f0d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004f10:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004f16:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004f1a:	e8 bd fe ff ff       	call   c0004ddc <ld_clust.isra.0>
c0004f1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f22:	eb cc                	jmp    c0004ef0 <follow_path+0x89>
c0004f24:	b8 05 00 00 00       	mov    eax,0x5
c0004f29:	83 c4 14             	add    esp,0x14
c0004f2c:	5b                   	pop    ebx
c0004f2d:	5e                   	pop    esi
c0004f2e:	c3                   	ret    

c0004f2f <f_mount>:
c0004f2f:	53                   	push   ebx
c0004f30:	83 ec 18             	sub    esp,0x18
c0004f33:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004f37:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f3f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f43:	e8 fb d2 ff ff       	call   c0002243 <get_ldnumber>
c0004f48:	89 c2                	mov    edx,eax
c0004f4a:	b8 0b 00 00 00       	mov    eax,0xb
c0004f4f:	85 d2                	test   edx,edx
c0004f51:	78 39                	js     c0004f8c <f_mount+0x5d>
c0004f53:	8b 04 95 20 e3 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1ce0]
c0004f5a:	85 c0                	test   eax,eax
c0004f5c:	74 03                	je     c0004f61 <f_mount+0x32>
c0004f5e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f65:	85 c0                	test   eax,eax
c0004f67:	74 03                	je     c0004f6c <f_mount+0x3d>
c0004f69:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f70:	89 04 95 20 e3 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1ce0],eax
c0004f77:	31 c0                	xor    eax,eax
c0004f79:	84 db                	test   bl,bl
c0004f7b:	74 0f                	je     c0004f8c <f_mount+0x5d>
c0004f7d:	31 c9                	xor    ecx,ecx
c0004f7f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f83:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f87:	e8 65 d7 ff ff       	call   c00026f1 <mount_volume>
c0004f8c:	83 c4 18             	add    esp,0x18
c0004f8f:	5b                   	pop    ebx
c0004f90:	c3                   	ret    

c0004f91 <f_open>:
c0004f91:	55                   	push   ebp
c0004f92:	bd 09 00 00 00       	mov    ebp,0x9
c0004f97:	57                   	push   edi
c0004f98:	56                   	push   esi
c0004f99:	53                   	push   ebx
c0004f9a:	83 ec 7c             	sub    esp,0x7c
c0004f9d:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004fa4:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004fab:	85 db                	test   ebx,ebx
c0004fad:	0f 84 10 04 00 00    	je     c00053c3 <f_open+0x432>
c0004fb3:	89 fe                	mov    esi,edi
c0004fb5:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004fb9:	83 e6 3f             	and    esi,0x3f
c0004fbc:	89 f0                	mov    eax,esi
c0004fbe:	0f b6 c8             	movzx  ecx,al
c0004fc1:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004fc8:	e8 24 d7 ff ff       	call   c00026f1 <mount_volume>
c0004fcd:	89 c5                	mov    ebp,eax
c0004fcf:	85 c0                	test   eax,eax
c0004fd1:	0f 85 e6 03 00 00    	jne    c00053bd <f_open+0x42c>
c0004fd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fdb:	bd 11 00 00 00       	mov    ebp,0x11
c0004fe0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fe4:	83 ec 0c             	sub    esp,0xc
c0004fe7:	68 60 04 00 00       	push   0x460
c0004fec:	e8 a3 34 00 00       	call   c0008494 <ff_memalloc>
c0004ff1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ff5:	83 c4 10             	add    esp,0x10
c0004ff8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004ffd:	0f 84 c0 03 00 00    	je     c00053c3 <f_open+0x432>
c0005003:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005007:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000500b:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0005011:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0005014:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005017:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c000501e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005022:	e8 40 fe ff ff       	call   c0004e67 <follow_path>
c0005027:	89 c5                	mov    ebp,eax
c0005029:	85 c0                	test   eax,eax
c000502b:	75 0c                	jne    c0005039 <f_open+0xa8>
c000502d:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0005032:	79 05                	jns    c0005039 <f_open+0xa8>
c0005034:	bd 06 00 00 00       	mov    ebp,0x6
c0005039:	f7 c7 1c 00 00 00    	test   edi,0x1c
c000503f:	0f 84 84 01 00 00    	je     c00051c9 <f_open+0x238>
c0005045:	85 ed                	test   ebp,ebp
c0005047:	74 20                	je     c0005069 <f_open+0xd8>
c0005049:	83 fd 04             	cmp    ebp,0x4
c000504c:	0f 85 58 03 00 00    	jne    c00053aa <f_open+0x419>
c0005052:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005056:	83 ce 08             	or     esi,0x8
c0005059:	e8 8a f2 ff ff       	call   c00042e8 <dir_register>
c000505e:	89 c5                	mov    ebp,eax
c0005060:	85 c0                	test   eax,eax
c0005062:	74 2f                	je     c0005093 <f_open+0x102>
c0005064:	e9 41 03 00 00       	jmp    c00053aa <f_open+0x419>
c0005069:	bd 07 00 00 00       	mov    ebp,0x7
c000506e:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005073:	0f 85 31 03 00 00    	jne    c00053aa <f_open+0x419>
c0005079:	bd 08 00 00 00       	mov    ebp,0x8
c000507e:	f7 c7 04 00 00 00    	test   edi,0x4
c0005084:	0f 85 20 03 00 00    	jne    c00053aa <f_open+0x419>
c000508a:	83 e7 08             	and    edi,0x8
c000508d:	0f 84 65 01 00 00    	je     c00051f8 <f_open+0x267>
c0005093:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005097:	8a 02                	mov    al,BYTE PTR [edx]
c0005099:	3c 04                	cmp    al,0x4
c000509b:	0f 85 97 00 00 00    	jne    c0005138 <f_open+0x1a7>
c00050a1:	8d 42 10             	lea    eax,[edx+0x10]
c00050a4:	89 13                	mov    DWORD PTR [ebx],edx
c00050a6:	89 da                	mov    edx,ebx
c00050a8:	e8 80 fd ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c00050ad:	31 d2                	xor    edx,edx
c00050af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b3:	b9 1e 00 00 00       	mov    ecx,0x1e
c00050b8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050bb:	83 c0 02             	add    eax,0x2
c00050be:	e8 32 cc ff ff       	call   c0001cf5 <mem_set>
c00050c3:	b9 1a 00 00 00       	mov    ecx,0x1a
c00050c8:	31 d2                	xor    edx,edx
c00050ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050ce:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050d1:	83 c0 26             	add    eax,0x26
c00050d4:	e8 1c cc ff ff       	call   c0001cf5 <mem_set>
c00050d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050e0:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050e4:	ba 00 00 21 50       	mov    edx,0x50210000
c00050e9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050ec:	83 c0 08             	add    eax,0x8
c00050ef:	e8 e3 cb ff ff       	call   c0001cd7 <st_dword>
c00050f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050fb:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050ff:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005103:	e8 b7 ea ff ff       	call   c0003bbf <store_xdir>
c0005108:	89 c5                	mov    ebp,eax
c000510a:	85 c0                	test   eax,eax
c000510c:	0f 85 98 02 00 00    	jne    c00053aa <f_open+0x419>
c0005112:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005115:	85 d2                	test   edx,edx
c0005117:	0f 84 db 00 00 00    	je     c00051f8 <f_open+0x267>
c000511d:	31 c9                	xor    ecx,ecx
c000511f:	89 d8                	mov    eax,ebx
c0005121:	e8 8e e3 ff ff       	call   c00034b4 <remove_chain>
c0005126:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000512a:	89 c5                	mov    ebp,eax
c000512c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000512f:	48                   	dec    eax
c0005130:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005133:	e9 b8 00 00 00       	jmp    c00051f0 <f_open+0x25f>
c0005138:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000513c:	89 ea                	mov    edx,ebp
c000513e:	e8 99 fc ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005143:	ba 00 00 21 50       	mov    edx,0x50210000
c0005148:	89 c7                	mov    edi,eax
c000514a:	8d 45 0e             	lea    eax,[ebp+0xe]
c000514d:	e8 85 cb ff ff       	call   c0001cd7 <st_dword>
c0005152:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005156:	31 c9                	xor    ecx,ecx
c0005158:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c000515c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005160:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0005164:	e8 9c fc ff ff       	call   c0004e05 <st_clust.isra.1>
c0005169:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000516d:	31 d2                	xor    edx,edx
c000516f:	83 c0 1c             	add    eax,0x1c
c0005172:	e8 60 cb ff ff       	call   c0001cd7 <st_dword>
c0005177:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517b:	85 ff                	test   edi,edi
c000517d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005181:	74 75                	je     c00051f8 <f_open+0x267>
c0005183:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005187:	31 c9                	xor    ecx,ecx
c0005189:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c000518c:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000518f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005193:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005197:	89 fa                	mov    edx,edi
c0005199:	8d 44 24 24          	lea    eax,[esp+0x24]
c000519d:	e8 12 e3 ff ff       	call   c00034b4 <remove_chain>
c00051a2:	89 c5                	mov    ebp,eax
c00051a4:	85 c0                	test   eax,eax
c00051a6:	0f 85 fe 01 00 00    	jne    c00053aa <f_open+0x419>
c00051ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00051b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051b8:	4f                   	dec    edi
c00051b9:	e8 81 d2 ff ff       	call   c000243f <move_window>
c00051be:	89 c5                	mov    ebp,eax
c00051c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051c4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00051c7:	eb 27                	jmp    c00051f0 <f_open+0x25f>
c00051c9:	85 ed                	test   ebp,ebp
c00051cb:	0f 85 d9 01 00 00    	jne    c00053aa <f_open+0x419>
c00051d1:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00051d5:	bd 04 00 00 00       	mov    ebp,0x4
c00051da:	a8 10                	test   al,0x10
c00051dc:	0f 85 c8 01 00 00    	jne    c00053aa <f_open+0x419>
c00051e2:	83 e7 02             	and    edi,0x2
c00051e5:	74 11                	je     c00051f8 <f_open+0x267>
c00051e7:	bd 07 00 00 00       	mov    ebp,0x7
c00051ec:	a8 01                	test   al,0x1
c00051ee:	eb 02                	jmp    c00051f2 <f_open+0x261>
c00051f0:	85 ed                	test   ebp,ebp
c00051f2:	0f 85 b2 01 00 00    	jne    c00053aa <f_open+0x419>
c00051f8:	f7 c6 08 00 00 00    	test   esi,0x8
c00051fe:	74 03                	je     c0005203 <f_open+0x272>
c0005200:	83 ce 40             	or     esi,0x40
c0005203:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005207:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c000520a:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c000520d:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0005210:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0005213:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005217:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c000521a:	8a 02                	mov    al,BYTE PTR [edx]
c000521c:	3c 04                	cmp    al,0x4
c000521e:	75 2a                	jne    c000524a <f_open+0x2b9>
c0005220:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005224:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005229:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000522c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005230:	30 c0                	xor    al,al
c0005232:	09 c8                	or     eax,ecx
c0005234:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005237:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000523b:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000523e:	8d 42 10             	lea    eax,[edx+0x10]
c0005241:	89 da                	mov    edx,ebx
c0005243:	e8 e5 fb ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0005248:	eb 1c                	jmp    c0005266 <f_open+0x2d5>
c000524a:	89 fa                	mov    edx,edi
c000524c:	e8 8b fb ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005251:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005254:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005257:	e8 12 ca ff ff       	call   c0001c6e <ld_dword>
c000525c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005263:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005266:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000526a:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005271:	89 03                	mov    DWORD PTR [ebx],eax
c0005273:	31 d2                	xor    edx,edx
c0005275:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005279:	b9 00 02 00 00       	mov    ecx,0x200
c000527e:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005282:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005286:	89 f0                	mov    eax,esi
c0005288:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000528f:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005292:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005299:	8d 43 50             	lea    eax,[ebx+0x50]
c000529c:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c00052a3:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00052aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00052ae:	e8 42 ca ff ff       	call   c0001cf5 <mem_set>
c00052b3:	83 e6 20             	and    esi,0x20
c00052b6:	75 07                	jne    c00052bf <f_open+0x32e>
c00052b8:	31 ed                	xor    ebp,ebp
c00052ba:	e9 eb 00 00 00       	jmp    c00053aa <f_open+0x419>
c00052bf:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00052c2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00052c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00052cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00052d1:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00052d5:	74 e1                	je     c00052b8 <f_open+0x327>
c00052d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052df:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052e2:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052e9:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052ec:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052f0:	31 ff                	xor    edi,edi
c00052f2:	c1 e5 09             	shl    ebp,0x9
c00052f5:	89 ee                	mov    esi,ebp
c00052f7:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052fb:	89 f8                	mov    eax,edi
c00052fd:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005301:	73 22                	jae    c0005325 <f_open+0x394>
c0005303:	89 d8                	mov    eax,ebx
c0005305:	e8 bd dc ff ff       	call   c0002fc7 <get_fat>
c000530a:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000530e:	89 c2                	mov    edx,eax
c0005310:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005314:	83 f8 01             	cmp    eax,0x1
c0005317:	76 10                	jbe    c0005329 <f_open+0x398>
c0005319:	83 f8 ff             	cmp    eax,0xffffffff
c000531c:	75 d9                	jne    c00052f7 <f_open+0x366>
c000531e:	bd 01 00 00 00       	mov    ebp,0x1
c0005323:	eb 09                	jmp    c000532e <f_open+0x39d>
c0005325:	31 ed                	xor    ebp,ebp
c0005327:	eb 05                	jmp    c000532e <f_open+0x39d>
c0005329:	bd 02 00 00 00       	mov    ebp,0x2
c000532e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005331:	85 ed                	test   ebp,ebp
c0005333:	75 75                	jne    c00053aa <f_open+0x419>
c0005335:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005339:	25 ff 01 00 00       	and    eax,0x1ff
c000533e:	0f 84 74 ff ff ff    	je     c00052b8 <f_open+0x327>
c0005344:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005348:	bd 02 00 00 00       	mov    ebp,0x2
c000534d:	89 c8                	mov    eax,ecx
c000534f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005353:	e8 a2 cb ff ff       	call   c0001efa <clst2sect>
c0005358:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000535c:	89 d7                	mov    edi,edx
c000535e:	09 c7                	or     edi,eax
c0005360:	74 48                	je     c00053aa <f_open+0x419>
c0005362:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005366:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000536a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005372:	0f ac fe 09          	shrd   esi,edi,0x9
c0005376:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000537a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000537e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005381:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005385:	83 ec 0c             	sub    esp,0xc
c0005388:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000538b:	6a 01                	push   0x1
c000538d:	52                   	push   edx
c000538e:	50                   	push   eax
c000538f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005393:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005397:	50                   	push   eax
c0005398:	e8 79 c8 ff ff       	call   c0001c16 <disk_read>
c000539d:	83 c4 20             	add    esp,0x20
c00053a0:	85 c0                	test   eax,eax
c00053a2:	0f 95 c0             	setne  al
c00053a5:	0f b6 c0             	movzx  eax,al
c00053a8:	89 c5                	mov    ebp,eax
c00053aa:	83 ec 0c             	sub    esp,0xc
c00053ad:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00053b1:	e8 f4 30 00 00       	call   c00084aa <ff_memfree>
c00053b6:	83 c4 10             	add    esp,0x10
c00053b9:	85 ed                	test   ebp,ebp
c00053bb:	74 06                	je     c00053c3 <f_open+0x432>
c00053bd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00053c3:	83 c4 7c             	add    esp,0x7c
c00053c6:	89 e8                	mov    eax,ebp
c00053c8:	5b                   	pop    ebx
c00053c9:	5e                   	pop    esi
c00053ca:	5f                   	pop    edi
c00053cb:	5d                   	pop    ebp
c00053cc:	c3                   	ret    

c00053cd <f_read>:
c00053cd:	55                   	push   ebp
c00053ce:	57                   	push   edi
c00053cf:	56                   	push   esi
c00053d0:	53                   	push   ebx
c00053d1:	83 ec 2c             	sub    esp,0x2c
c00053d4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053d8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053dc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053e6:	89 d8                	mov    eax,ebx
c00053e8:	e8 77 cf ff ff       	call   c0002364 <validate>
c00053ed:	89 c5                	mov    ebp,eax
c00053ef:	85 c0                	test   eax,eax
c00053f1:	0f 85 4c 02 00 00    	jne    c0005643 <f_read+0x276>
c00053f7:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053fb:	85 ed                	test   ebp,ebp
c00053fd:	0f 85 40 02 00 00    	jne    c0005643 <f_read+0x276>
c0005403:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005407:	0f 84 31 02 00 00    	je     c000563e <f_read+0x271>
c000540d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005410:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005413:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005416:	bf 00 00 00 00       	mov    edi,0x0
c000541b:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000541e:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0005422:	89 d1                	mov    ecx,edx
c0005424:	19 f9                	sbb    ecx,edi
c0005426:	0f 83 cf 00 00 00    	jae    c00054fb <f_read+0x12e>
c000542c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005430:	e9 c6 00 00 00       	jmp    c00054fb <f_read+0x12e>
c0005435:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005438:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000543b:	89 d0                	mov    eax,edx
c000543d:	25 ff 01 00 00       	and    eax,0x1ff
c0005442:	0f 85 c9 01 00 00    	jne    c0005611 <f_read+0x244>
c0005448:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000544c:	89 d6                	mov    esi,edx
c000544e:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005452:	89 cf                	mov    edi,ecx
c0005454:	48                   	dec    eax
c0005455:	0f ac fe 09          	shrd   esi,edi,0x9
c0005459:	21 f0                	and    eax,esi
c000545b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000545f:	0f 84 a6 00 00 00    	je     c000550b <f_read+0x13e>
c0005465:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005469:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000546c:	89 c8                	mov    eax,ecx
c000546e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005471:	e8 84 ca ff ff       	call   c0001efa <clst2sect>
c0005476:	89 d7                	mov    edi,edx
c0005478:	09 c7                	or     edi,eax
c000547a:	0f 84 b4 00 00 00    	je     c0005534 <f_read+0x167>
c0005480:	31 ff                	xor    edi,edi
c0005482:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005486:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005489:	01 c6                	add    esi,eax
c000548b:	11 d7                	adc    edi,edx
c000548d:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005495:	0f 86 fd 00 00 00    	jbe    c0005598 <f_read+0x1cb>
c000549b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000549f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054a3:	c1 e8 09             	shr    eax,0x9
c00054a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00054a9:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054ad:	03 14 24             	add    edx,DWORD PTR [esp]
c00054b0:	39 c2                	cmp    edx,eax
c00054b2:	76 07                	jbe    c00054bb <f_read+0xee>
c00054b4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054b8:	89 04 24             	mov    DWORD PTR [esp],eax
c00054bb:	83 ec 0c             	sub    esp,0xc
c00054be:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00054c2:	57                   	push   edi
c00054c3:	56                   	push   esi
c00054c4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00054c8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054cc:	50                   	push   eax
c00054cd:	e8 44 c7 ff ff       	call   c0001c16 <disk_read>
c00054d2:	83 c4 20             	add    esp,0x20
c00054d5:	85 c0                	test   eax,eax
c00054d7:	75 6e                	jne    c0005547 <f_read+0x17a>
c00054d9:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054dd:	78 7e                	js     c000555d <f_read+0x190>
c00054df:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054e2:	c1 e6 09             	shl    esi,0x9
c00054e5:	31 ff                	xor    edi,edi
c00054e7:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054eb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054ef:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054f3:	01 30                	add    DWORD PTR [eax],esi
c00054f5:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054f8:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054fb:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005500:	0f 85 2f ff ff ff    	jne    c0005435 <f_read+0x68>
c0005506:	e9 38 01 00 00       	jmp    c0005643 <f_read+0x276>
c000550b:	89 c8                	mov    eax,ecx
c000550d:	09 d0                	or     eax,edx
c000550f:	75 05                	jne    c0005516 <f_read+0x149>
c0005511:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005514:	eb 19                	jmp    c000552f <f_read+0x162>
c0005516:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000551a:	74 09                	je     c0005525 <f_read+0x158>
c000551c:	89 d8                	mov    eax,ebx
c000551e:	e8 f8 c9 ff ff       	call   c0001f1b <clmt_clust>
c0005523:	eb 0a                	jmp    c000552f <f_read+0x162>
c0005525:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005528:	89 d8                	mov    eax,ebx
c000552a:	e8 98 da ff ff       	call   c0002fc7 <get_fat>
c000552f:	83 f8 01             	cmp    eax,0x1
c0005532:	77 0e                	ja     c0005542 <f_read+0x175>
c0005534:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005538:	bd 02 00 00 00       	mov    ebp,0x2
c000553d:	e9 01 01 00 00       	jmp    c0005643 <f_read+0x276>
c0005542:	83 f8 ff             	cmp    eax,0xffffffff
c0005545:	75 0e                	jne    c0005555 <f_read+0x188>
c0005547:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000554b:	bd 01 00 00 00       	mov    ebp,0x1
c0005550:	e9 ee 00 00 00       	jmp    c0005643 <f_read+0x276>
c0005555:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005558:	e9 08 ff ff ff       	jmp    c0005465 <f_read+0x98>
c000555d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005560:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005563:	29 f0                	sub    eax,esi
c0005565:	19 fa                	sbb    edx,edi
c0005567:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000556a:	89 d7                	mov    edi,edx
c000556c:	ba 00 00 00 00       	mov    edx,0x0
c0005571:	89 f9                	mov    ecx,edi
c0005573:	19 d1                	sbb    ecx,edx
c0005575:	0f 83 64 ff ff ff    	jae    c00054df <f_read+0x112>
c000557b:	89 c7                	mov    edi,eax
c000557d:	8d 53 50             	lea    edx,[ebx+0x50]
c0005580:	c1 e7 09             	shl    edi,0x9
c0005583:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005587:	b9 00 02 00 00       	mov    ecx,0x200
c000558c:	01 f8                	add    eax,edi
c000558e:	e8 4d c7 ff ff       	call   c0001ce0 <mem_cpy>
c0005593:	e9 47 ff ff ff       	jmp    c00054df <f_read+0x112>
c0005598:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000559b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000559e:	89 04 24             	mov    DWORD PTR [esp],eax
c00055a1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00055a5:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00055a9:	75 05                	jne    c00055b0 <f_read+0x1e3>
c00055ab:	39 34 24             	cmp    DWORD PTR [esp],esi
c00055ae:	74 5b                	je     c000560b <f_read+0x23e>
c00055b0:	8d 43 50             	lea    eax,[ebx+0x50]
c00055b3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055bb:	79 2a                	jns    c00055e7 <f_read+0x21a>
c00055bd:	83 ec 0c             	sub    esp,0xc
c00055c0:	6a 01                	push   0x1
c00055c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055ce:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055d2:	50                   	push   eax
c00055d3:	e8 54 c6 ff ff       	call   c0001c2c <disk_write>
c00055d8:	83 c4 20             	add    esp,0x20
c00055db:	85 c0                	test   eax,eax
c00055dd:	0f 85 64 ff ff ff    	jne    c0005547 <f_read+0x17a>
c00055e3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055e7:	83 ec 0c             	sub    esp,0xc
c00055ea:	6a 01                	push   0x1
c00055ec:	57                   	push   edi
c00055ed:	56                   	push   esi
c00055ee:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055f2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055fa:	50                   	push   eax
c00055fb:	e8 16 c6 ff ff       	call   c0001c16 <disk_read>
c0005600:	83 c4 20             	add    esp,0x20
c0005603:	85 c0                	test   eax,eax
c0005605:	0f 85 3c ff ff ff    	jne    c0005547 <f_read+0x17a>
c000560b:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000560e:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005611:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005614:	ba 00 02 00 00       	mov    edx,0x200
c0005619:	25 ff 01 00 00       	and    eax,0x1ff
c000561e:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005622:	29 c2                	sub    edx,eax
c0005624:	39 d6                	cmp    esi,edx
c0005626:	76 02                	jbe    c000562a <f_read+0x25d>
c0005628:	89 d6                	mov    esi,edx
c000562a:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c000562e:	89 f1                	mov    ecx,esi
c0005630:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005634:	e8 a7 c6 ff ff       	call   c0001ce0 <mem_cpy>
c0005639:	e9 a7 fe ff ff       	jmp    c00054e5 <f_read+0x118>
c000563e:	bd 07 00 00 00       	mov    ebp,0x7
c0005643:	83 c4 2c             	add    esp,0x2c
c0005646:	89 e8                	mov    eax,ebp
c0005648:	5b                   	pop    ebx
c0005649:	5e                   	pop    esi
c000564a:	5f                   	pop    edi
c000564b:	5d                   	pop    ebp
c000564c:	c3                   	ret    

c000564d <f_write>:
c000564d:	55                   	push   ebp
c000564e:	57                   	push   edi
c000564f:	56                   	push   esi
c0005650:	53                   	push   ebx
c0005651:	83 ec 2c             	sub    esp,0x2c
c0005654:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005658:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000565c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005662:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005666:	89 d8                	mov    eax,ebx
c0005668:	e8 f7 cc ff ff       	call   c0002364 <validate>
c000566d:	89 c5                	mov    ebp,eax
c000566f:	85 c0                	test   eax,eax
c0005671:	0f 85 86 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005677:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000567b:	85 ed                	test   ebp,ebp
c000567d:	0f 85 7a 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005683:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005687:	0f 84 6b 02 00 00    	je     c00058f8 <f_write+0x2ab>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005694:	0f 84 43 01 00 00    	je     c00057dd <f_write+0x190>
c000569a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000569d:	89 c1                	mov    ecx,eax
c000569f:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00056a3:	0f 83 34 01 00 00    	jae    c00057dd <f_write+0x190>
c00056a9:	f7 d0                	not    eax
c00056ab:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00056af:	e9 29 01 00 00       	jmp    c00057dd <f_write+0x190>
c00056b4:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00056b7:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00056ba:	89 d0                	mov    eax,edx
c00056bc:	25 ff 01 00 00       	and    eax,0x1ff
c00056c1:	0f 85 00 02 00 00    	jne    c00058c7 <f_write+0x27a>
c00056c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056cb:	89 d6                	mov    esi,edx
c00056cd:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00056d1:	89 cf                	mov    edi,ecx
c00056d3:	48                   	dec    eax
c00056d4:	0f ac fe 09          	shrd   esi,edi,0x9
c00056d8:	21 f0                	and    eax,esi
c00056da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056de:	0f 84 06 01 00 00    	je     c00057ea <f_write+0x19d>
c00056e4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056e8:	0f 88 6e 01 00 00    	js     c000585c <f_write+0x20f>
c00056ee:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056f2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056f5:	89 c8                	mov    eax,ecx
c00056f7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056fb:	e8 fa c7 ff ff       	call   c0001efa <clst2sect>
c0005700:	89 d1                	mov    ecx,edx
c0005702:	09 c1                	or     ecx,eax
c0005704:	0f 84 1c 01 00 00    	je     c0005826 <f_write+0x1d9>
c000570a:	31 ff                	xor    edi,edi
c000570c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005710:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005714:	01 c6                	add    esi,eax
c0005716:	11 d7                	adc    edi,edx
c0005718:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005720:	0f 86 63 01 00 00    	jbe    c0005889 <f_write+0x23c>
c0005726:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000572a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000572e:	c1 e8 09             	shr    eax,0x9
c0005731:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005735:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005739:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000573d:	39 c2                	cmp    edx,eax
c000573f:	76 08                	jbe    c0005749 <f_write+0xfc>
c0005741:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005745:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005749:	83 ec 0c             	sub    esp,0xc
c000574c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005750:	57                   	push   edi
c0005751:	56                   	push   esi
c0005752:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005756:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000575a:	50                   	push   eax
c000575b:	e8 cc c4 ff ff       	call   c0001c2c <disk_write>
c0005760:	83 c4 20             	add    esp,0x20
c0005763:	85 c0                	test   eax,eax
c0005765:	0f 85 ce 00 00 00    	jne    c0005839 <f_write+0x1ec>
c000576b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000576e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005771:	29 f0                	sub    eax,esi
c0005773:	19 fa                	sbb    edx,edi
c0005775:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005779:	89 d7                	mov    edi,edx
c000577b:	ba 00 00 00 00       	mov    edx,0x0
c0005780:	89 f9                	mov    ecx,edi
c0005782:	19 d1                	sbb    ecx,edx
c0005784:	73 1c                	jae    c00057a2 <f_write+0x155>
c0005786:	89 c7                	mov    edi,eax
c0005788:	b9 00 02 00 00       	mov    ecx,0x200
c000578d:	c1 e7 09             	shl    edi,0x9
c0005790:	8d 43 50             	lea    eax,[ebx+0x50]
c0005793:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005797:	89 fa                	mov    edx,edi
c0005799:	e8 42 c5 ff ff       	call   c0001ce0 <mem_cpy>
c000579e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00057a2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00057a6:	c1 e6 09             	shl    esi,0x9
c00057a9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00057ad:	31 ff                	xor    edi,edi
c00057af:	01 30                	add    DWORD PTR [eax],esi
c00057b1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00057b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00057b9:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057bc:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00057bf:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00057c2:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00057c5:	89 c1                	mov    ecx,eax
c00057c7:	39 f2                	cmp    edx,esi
c00057c9:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00057cc:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00057cf:	19 f9                	sbb    ecx,edi
c00057d1:	73 04                	jae    c00057d7 <f_write+0x18a>
c00057d3:	89 f2                	mov    edx,esi
c00057d5:	89 f8                	mov    eax,edi
c00057d7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057da:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057dd:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057e2:	0f 85 cc fe ff ff    	jne    c00056b4 <f_write+0x67>
c00057e8:	eb 2e                	jmp    c0005818 <f_write+0x1cb>
c00057ea:	89 c8                	mov    eax,ecx
c00057ec:	09 d0                	or     eax,edx
c00057ee:	75 0b                	jne    c00057fb <f_write+0x1ae>
c00057f0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057f3:	31 d2                	xor    edx,edx
c00057f5:	85 c0                	test   eax,eax
c00057f7:	75 28                	jne    c0005821 <f_write+0x1d4>
c00057f9:	eb 12                	jmp    c000580d <f_write+0x1c0>
c00057fb:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057ff:	74 09                	je     c000580a <f_write+0x1bd>
c0005801:	89 d8                	mov    eax,ebx
c0005803:	e8 13 c7 ff ff       	call   c0001f1b <clmt_clust>
c0005808:	eb 0a                	jmp    c0005814 <f_write+0x1c7>
c000580a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000580d:	89 d8                	mov    eax,ebx
c000580f:	e8 a1 da ff ff       	call   c00032b5 <create_chain>
c0005814:	85 c0                	test   eax,eax
c0005816:	75 09                	jne    c0005821 <f_write+0x1d4>
c0005818:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000581c:	e9 dc 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005821:	83 f8 01             	cmp    eax,0x1
c0005824:	75 0e                	jne    c0005834 <f_write+0x1e7>
c0005826:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000582a:	bd 02 00 00 00       	mov    ebp,0x2
c000582f:	e9 c9 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005834:	83 f8 ff             	cmp    eax,0xffffffff
c0005837:	75 0e                	jne    c0005847 <f_write+0x1fa>
c0005839:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000583d:	bd 01 00 00 00       	mov    ebp,0x1
c0005842:	e9 b6 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005847:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000584a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000584e:	0f 85 90 fe ff ff    	jne    c00056e4 <f_write+0x97>
c0005854:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005857:	e9 88 fe ff ff       	jmp    c00056e4 <f_write+0x97>
c000585c:	83 ec 0c             	sub    esp,0xc
c000585f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005862:	6a 01                	push   0x1
c0005864:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005867:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000586a:	50                   	push   eax
c000586b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000586f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005873:	50                   	push   eax
c0005874:	e8 b3 c3 ff ff       	call   c0001c2c <disk_write>
c0005879:	83 c4 20             	add    esp,0x20
c000587c:	85 c0                	test   eax,eax
c000587e:	75 b9                	jne    c0005839 <f_write+0x1ec>
c0005880:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005884:	e9 65 fe ff ff       	jmp    c00056ee <f_write+0xa1>
c0005889:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000588c:	75 05                	jne    c0005893 <f_write+0x246>
c000588e:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005891:	74 2e                	je     c00058c1 <f_write+0x274>
c0005893:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005896:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005899:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000589c:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c000589f:	73 20                	jae    c00058c1 <f_write+0x274>
c00058a1:	83 ec 0c             	sub    esp,0xc
c00058a4:	8d 43 50             	lea    eax,[ebx+0x50]
c00058a7:	6a 01                	push   0x1
c00058a9:	57                   	push   edi
c00058aa:	56                   	push   esi
c00058ab:	50                   	push   eax
c00058ac:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00058b0:	50                   	push   eax
c00058b1:	e8 60 c3 ff ff       	call   c0001c16 <disk_read>
c00058b6:	83 c4 20             	add    esp,0x20
c00058b9:	85 c0                	test   eax,eax
c00058bb:	0f 85 78 ff ff ff    	jne    c0005839 <f_write+0x1ec>
c00058c1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00058c4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00058c7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00058ca:	ba 00 02 00 00       	mov    edx,0x200
c00058cf:	25 ff 01 00 00       	and    eax,0x1ff
c00058d4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00058d8:	29 c2                	sub    edx,eax
c00058da:	39 d6                	cmp    esi,edx
c00058dc:	76 02                	jbe    c00058e0 <f_write+0x293>
c00058de:	89 d6                	mov    esi,edx
c00058e0:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058e4:	89 f1                	mov    ecx,esi
c00058e6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058ea:	e8 f1 c3 ff ff       	call   c0001ce0 <mem_cpy>
c00058ef:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058f3:	e9 b1 fe ff ff       	jmp    c00057a9 <f_write+0x15c>
c00058f8:	bd 07 00 00 00       	mov    ebp,0x7
c00058fd:	83 c4 2c             	add    esp,0x2c
c0005900:	89 e8                	mov    eax,ebp
c0005902:	5b                   	pop    ebx
c0005903:	5e                   	pop    esi
c0005904:	5f                   	pop    edi
c0005905:	5d                   	pop    ebp
c0005906:	c3                   	ret    

c0005907 <f_sync>:
c0005907:	56                   	push   esi
c0005908:	53                   	push   ebx
c0005909:	83 ec 64             	sub    esp,0x64
c000590c:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0005910:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005914:	89 d8                	mov    eax,ebx
c0005916:	e8 49 ca ff ff       	call   c0002364 <validate>
c000591b:	85 c0                	test   eax,eax
c000591d:	0f 85 ba 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005923:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005926:	f6 c2 40             	test   dl,0x40
c0005929:	0f 84 ae 01 00 00    	je     c0005add <f_sync+0x1d6>
c000592f:	84 d2                	test   dl,dl
c0005931:	79 33                	jns    c0005966 <f_sync+0x5f>
c0005933:	83 ec 0c             	sub    esp,0xc
c0005936:	8d 43 50             	lea    eax,[ebx+0x50]
c0005939:	6a 01                	push   0x1
c000593b:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000593e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005941:	50                   	push   eax
c0005942:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005946:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000594a:	50                   	push   eax
c000594b:	e8 dc c2 ff ff       	call   c0001c2c <disk_write>
c0005950:	83 c4 20             	add    esp,0x20
c0005953:	89 c2                	mov    edx,eax
c0005955:	b8 01 00 00 00       	mov    eax,0x1
c000595a:	85 d2                	test   edx,edx
c000595c:	0f 85 7b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005962:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005966:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000596a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000596d:	0f 85 11 01 00 00    	jne    c0005a84 <f_sync+0x17d>
c0005973:	89 d8                	mov    eax,ebx
c0005975:	e8 13 d6 ff ff       	call   c0002f8d <fill_first_frag>
c000597a:	85 c0                	test   eax,eax
c000597c:	0f 85 5b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005982:	83 c9 ff             	or     ecx,0xffffffff
c0005985:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005988:	89 d8                	mov    eax,ebx
c000598a:	e8 c9 d5 ff ff       	call   c0002f58 <fill_last_frag>
c000598f:	85 c0                	test   eax,eax
c0005991:	0f 85 46 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005997:	83 ec 0c             	sub    esp,0xc
c000599a:	68 60 04 00 00       	push   0x460
c000599f:	e8 f0 2a 00 00       	call   c0008494 <ff_memalloc>
c00059a4:	83 c4 10             	add    esp,0x10
c00059a7:	89 c6                	mov    esi,eax
c00059a9:	b8 11 00 00 00       	mov    eax,0x11
c00059ae:	85 f6                	test   esi,esi
c00059b0:	0f 84 27 01 00 00    	je     c0005add <f_sync+0x1d6>
c00059b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059ba:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00059c0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00059c3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00059c6:	89 da                	mov    edx,ebx
c00059c8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00059cc:	e8 af df ff ff       	call   c0003980 <load_obj_xdir>
c00059d1:	85 c0                	test   eax,eax
c00059d3:	0f 85 95 00 00 00    	jne    c0005a6e <f_sync+0x167>
c00059d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059e0:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059e4:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059e7:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059ea:	83 ca 01             	or     edx,0x1
c00059ed:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059f0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059f3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059f6:	83 c0 34             	add    eax,0x34
c00059f9:	e8 d9 c2 ff ff       	call   c0001cd7 <st_dword>
c00059fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a05:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a08:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a0b:	83 c0 38             	add    eax,0x38
c0005a0e:	e8 c7 c2 ff ff       	call   c0001cda <st_qword>
c0005a13:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a1a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a1d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a20:	83 c0 28             	add    eax,0x28
c0005a23:	e8 b2 c2 ff ff       	call   c0001cda <st_qword>
c0005a28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a31:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a34:	83 c0 0c             	add    eax,0xc
c0005a37:	e8 9b c2 ff ff       	call   c0001cd7 <st_dword>
c0005a3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a40:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a43:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a47:	31 d2                	xor    edx,edx
c0005a49:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a4c:	83 c0 10             	add    eax,0x10
c0005a4f:	e8 83 c2 ff ff       	call   c0001cd7 <st_dword>
c0005a54:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a58:	e8 62 e1 ff ff       	call   c0003bbf <store_xdir>
c0005a5d:	85 c0                	test   eax,eax
c0005a5f:	75 0d                	jne    c0005a6e <f_sync+0x167>
c0005a61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a65:	e8 00 eb ff ff       	call   c000456a <sync_fs>
c0005a6a:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a72:	83 ec 0c             	sub    esp,0xc
c0005a75:	56                   	push   esi
c0005a76:	e8 2f 2a 00 00       	call   c00084aa <ff_memfree>
c0005a7b:	83 c4 10             	add    esp,0x10
c0005a7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a82:	eb 59                	jmp    c0005add <f_sync+0x1d6>
c0005a84:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a87:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a8a:	e8 b0 c9 ff ff       	call   c000243f <move_window>
c0005a8f:	85 c0                	test   eax,eax
c0005a91:	75 4a                	jne    c0005add <f_sync+0x1d6>
c0005a93:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a96:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a9a:	89 f2                	mov    edx,esi
c0005a9c:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a9f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005aa1:	e8 5f f3 ff ff       	call   c0004e05 <st_clust.isra.1>
c0005aa6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005aa9:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005aac:	e8 26 c2 ff ff       	call   c0001cd7 <st_dword>
c0005ab1:	8d 46 16             	lea    eax,[esi+0x16]
c0005ab4:	ba 00 00 21 50       	mov    edx,0x50210000
c0005ab9:	e8 19 c2 ff ff       	call   c0001cd7 <st_dword>
c0005abe:	8d 46 12             	lea    eax,[esi+0x12]
c0005ac1:	31 d2                	xor    edx,edx
c0005ac3:	e8 0b c2 ff ff       	call   c0001cd3 <st_word>
c0005ac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005acc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005ad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ad4:	e8 91 ea ff ff       	call   c000456a <sync_fs>
c0005ad9:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005add:	83 c4 64             	add    esp,0x64
c0005ae0:	5b                   	pop    ebx
c0005ae1:	5e                   	pop    esi
c0005ae2:	c3                   	ret    

c0005ae3 <f_close>:
c0005ae3:	53                   	push   ebx
c0005ae4:	83 ec 24             	sub    esp,0x24
c0005ae7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005aeb:	53                   	push   ebx
c0005aec:	e8 16 fe ff ff       	call   c0005907 <f_sync>
c0005af1:	83 c4 10             	add    esp,0x10
c0005af4:	85 c0                	test   eax,eax
c0005af6:	75 15                	jne    c0005b0d <f_close+0x2a>
c0005af8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005afc:	89 d8                	mov    eax,ebx
c0005afe:	e8 61 c8 ff ff       	call   c0002364 <validate>
c0005b03:	85 c0                	test   eax,eax
c0005b05:	75 06                	jne    c0005b0d <f_close+0x2a>
c0005b07:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005b0d:	83 c4 18             	add    esp,0x18
c0005b10:	5b                   	pop    ebx
c0005b11:	c3                   	ret    

c0005b12 <f_lseek>:
c0005b12:	55                   	push   ebp
c0005b13:	57                   	push   edi
c0005b14:	56                   	push   esi
c0005b15:	53                   	push   ebx
c0005b16:	83 ec 3c             	sub    esp,0x3c
c0005b19:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005b1d:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005b21:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005b25:	89 04 24             	mov    DWORD PTR [esp],eax
c0005b28:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005b2c:	89 d8                	mov    eax,ebx
c0005b2e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005b32:	e8 2d c8 ff ff       	call   c0002364 <validate>
c0005b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	0f 85 7a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b43:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b47:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b4b:	85 c0                	test   eax,eax
c0005b4d:	0f 85 6a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b53:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b57:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b5a:	74 0c                	je     c0005b68 <f_lseek+0x56>
c0005b5c:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b5f:	85 c0                	test   eax,eax
c0005b61:	75 1f                	jne    c0005b82 <f_lseek+0x70>
c0005b63:	e9 b5 01 00 00       	jmp    c0005d1d <f_lseek+0x20b>
c0005b68:	83 c9 ff             	or     ecx,0xffffffff
c0005b6b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b6e:	89 d8                	mov    eax,ebx
c0005b70:	e8 e3 d3 ff ff       	call   c0002f58 <fill_last_frag>
c0005b75:	85 c0                	test   eax,eax
c0005b77:	74 e3                	je     c0005b5c <f_lseek+0x4a>
c0005b79:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b7d:	e9 3b 04 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005b82:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b87:	0f 85 ac 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b8d:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b91:	0f 85 a2 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b97:	8d 78 04             	lea    edi,[eax+0x4]
c0005b9a:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b9f:	be 02 00 00 00       	mov    esi,0x2
c0005ba4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ba8:	85 ed                	test   ebp,ebp
c0005baa:	74 73                	je     c0005c1f <f_lseek+0x10d>
c0005bac:	89 e9                	mov    ecx,ebp
c0005bae:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005bb5:	ff 04 24             	inc    DWORD PTR [esp]
c0005bb8:	89 ca                	mov    edx,ecx
c0005bba:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005bbe:	89 d8                	mov    eax,ebx
c0005bc0:	e8 02 d4 ff ff       	call   c0002fc7 <get_fat>
c0005bc5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bc9:	83 f8 01             	cmp    eax,0x1
c0005bcc:	77 11                	ja     c0005bdf <f_lseek+0xcd>
c0005bce:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005bd2:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005bda:	e9 de 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bdf:	83 f8 ff             	cmp    eax,0xffffffff
c0005be2:	75 11                	jne    c0005bf5 <f_lseek+0xe3>
c0005be4:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005be8:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bf0:	e9 c8 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bf5:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bf8:	89 c1                	mov    ecx,eax
c0005bfa:	39 c2                	cmp    edx,eax
c0005bfc:	74 b7                	je     c0005bb5 <f_lseek+0xa3>
c0005bfe:	83 c6 02             	add    esi,0x2
c0005c01:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005c05:	72 0b                	jb     c0005c12 <f_lseek+0x100>
c0005c07:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005c0a:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005c0d:	89 0f                	mov    DWORD PTR [edi],ecx
c0005c0f:	83 c7 08             	add    edi,0x8
c0005c12:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c16:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c19:	76 04                	jbe    c0005c1f <f_lseek+0x10d>
c0005c1b:	89 c5                	mov    ebp,eax
c0005c1d:	eb 8d                	jmp    c0005bac <f_lseek+0x9a>
c0005c1f:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005c22:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005c26:	89 30                	mov    DWORD PTR [eax],esi
c0005c28:	0f 87 87 03 00 00    	ja     c0005fb5 <f_lseek+0x4a3>
c0005c2e:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005c34:	e9 84 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005c39:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c3c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c47:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c4b:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c52:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c56:	73 0f                	jae    c0005c67 <f_lseek+0x155>
c0005c58:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c5b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c6b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c6f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c72:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c79:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c7d:	0f 84 3a 03 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005c83:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c87:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c8b:	83 c6 ff             	add    esi,0xffffffff
c0005c8e:	89 d8                	mov    eax,ebx
c0005c90:	83 d7 ff             	adc    edi,0xffffffff
c0005c93:	89 f2                	mov    edx,esi
c0005c95:	89 f9                	mov    ecx,edi
c0005c97:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c9b:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c9e:	e8 78 c2 ff ff       	call   c0001f1b <clmt_clust>
c0005ca3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ca7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005caa:	89 c2                	mov    edx,eax
c0005cac:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005cb0:	89 c8                	mov    eax,ecx
c0005cb2:	e8 43 c2 ff ff       	call   c0001efa <clst2sect>
c0005cb7:	89 d7                	mov    edi,edx
c0005cb9:	09 c7                	or     edi,eax
c0005cbb:	0f 84 0d ff ff ff    	je     c0005bce <f_lseek+0xbc>
c0005cc1:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005cc5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005ccb:	0f 84 ec 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cd1:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cd5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005cd9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cdc:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ce0:	0f ac fe 09          	shrd   esi,edi,0x9
c0005ce4:	4d                   	dec    ebp
c0005ce5:	31 ff                	xor    edi,edi
c0005ce7:	21 ee                	and    esi,ebp
c0005ce9:	01 c6                	add    esi,eax
c0005ceb:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cee:	11 d7                	adc    edi,edx
c0005cf0:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cf3:	39 fa                	cmp    edx,edi
c0005cf5:	75 08                	jne    c0005cff <f_lseek+0x1ed>
c0005cf7:	39 f0                	cmp    eax,esi
c0005cf9:	0f 84 be 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cff:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d02:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d06:	0f 89 80 02 00 00    	jns    c0005f8c <f_lseek+0x47a>
c0005d0c:	83 ec 0c             	sub    esp,0xc
c0005d0f:	6a 01                	push   0x1
c0005d11:	52                   	push   edx
c0005d12:	50                   	push   eax
c0005d13:	55                   	push   ebp
c0005d14:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005d18:	e9 5a 02 00 00       	jmp    c0005f77 <f_lseek+0x465>
c0005d1d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005d21:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005d24:	74 16                	je     c0005d3c <f_lseek+0x22a>
c0005d26:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005d2b:	76 0f                	jbe    c0005d3c <f_lseek+0x22a>
c0005d2d:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005d34:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d3c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d3f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d42:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d45:	89 c7                	mov    edi,eax
c0005d47:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d4b:	73 0d                	jae    c0005d5a <f_lseek+0x248>
c0005d4d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d51:	75 07                	jne    c0005d5a <f_lseek+0x248>
c0005d53:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d56:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d5a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d5d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d60:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d64:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d6b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d72:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d75:	75 09                	jne    c0005d80 <f_lseek+0x26e>
c0005d77:	31 f6                	xor    esi,esi
c0005d79:	31 ff                	xor    edi,edi
c0005d7b:	e9 af 01 00 00       	jmp    c0005f2f <f_lseek+0x41d>
c0005d80:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d84:	89 d7                	mov    edi,edx
c0005d86:	c1 e1 09             	shl    ecx,0x9
c0005d89:	09 c7                	or     edi,eax
c0005d8b:	89 cd                	mov    ebp,ecx
c0005d8d:	74 6d                	je     c0005dfc <f_lseek+0x2ea>
c0005d8f:	83 c0 ff             	add    eax,0xffffffff
c0005d92:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d96:	83 d2 ff             	adc    edx,0xffffffff
c0005d99:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d9c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005da0:	83 c0 ff             	add    eax,0xffffffff
c0005da3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005da7:	83 d2 ff             	adc    edx,0xffffffff
c0005daa:	31 ff                	xor    edi,edi
c0005dac:	57                   	push   edi
c0005dad:	51                   	push   ecx
c0005dae:	52                   	push   edx
c0005daf:	50                   	push   eax
c0005db0:	e8 b7 0b 02 00       	call   c002696c <__udivdi3>
c0005db5:	83 c4 10             	add    esp,0x10
c0005db8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005dbc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005dc0:	57                   	push   edi
c0005dc1:	55                   	push   ebp
c0005dc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dc6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dca:	e8 9d 0b 02 00       	call   c002696c <__udivdi3>
c0005dcf:	83 c4 10             	add    esp,0x10
c0005dd2:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005dd6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dda:	19 d1                	sbb    ecx,edx
c0005ddc:	72 1e                	jb     c0005dfc <f_lseek+0x2ea>
c0005dde:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005de2:	89 e9                	mov    ecx,ebp
c0005de4:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005de7:	f7 d9                	neg    ecx
c0005de9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005dec:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005df0:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005df3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005df6:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dfa:	eb 28                	jmp    c0005e24 <f_lseek+0x312>
c0005dfc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dff:	85 c0                	test   eax,eax
c0005e01:	75 1e                	jne    c0005e21 <f_lseek+0x30f>
c0005e03:	31 d2                	xor    edx,edx
c0005e05:	89 d8                	mov    eax,ebx
c0005e07:	e8 a9 d4 ff ff       	call   c00032b5 <create_chain>
c0005e0c:	83 f8 01             	cmp    eax,0x1
c0005e0f:	0f 84 b9 fd ff ff    	je     c0005bce <f_lseek+0xbc>
c0005e15:	83 f8 ff             	cmp    eax,0xffffffff
c0005e18:	0f 84 c6 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005e1e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e21:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e24:	85 c0                	test   eax,eax
c0005e26:	0f 84 4b ff ff ff    	je     c0005d77 <f_lseek+0x265>
c0005e2c:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005e30:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005e38:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e3b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e3f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e42:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e45:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e49:	0f 83 9d 00 00 00    	jae    c0005eec <f_lseek+0x3da>
c0005e4f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e53:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e57:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e5a:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e5e:	01 f2                	add    edx,esi
c0005e60:	11 f9                	adc    ecx,edi
c0005e62:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e66:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e6a:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e6d:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e70:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e73:	f6 c1 02             	test   cl,0x2
c0005e76:	74 35                	je     c0005ead <f_lseek+0x39b>
c0005e78:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e7c:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e7f:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e82:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e86:	73 16                	jae    c0005e9e <f_lseek+0x38c>
c0005e88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e8c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e90:	88 ca                	mov    dl,cl
c0005e92:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e95:	83 ca 40             	or     edx,0x40
c0005e98:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e9b:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e9e:	89 c2                	mov    edx,eax
c0005ea0:	89 d8                	mov    eax,ebx
c0005ea2:	e8 0e d4 ff ff       	call   c00032b5 <create_chain>
c0005ea7:	85 c0                	test   eax,eax
c0005ea9:	75 0b                	jne    c0005eb6 <f_lseek+0x3a4>
c0005eab:	eb 30                	jmp    c0005edd <f_lseek+0x3cb>
c0005ead:	89 c2                	mov    edx,eax
c0005eaf:	89 d8                	mov    eax,ebx
c0005eb1:	e8 11 d1 ff ff       	call   c0002fc7 <get_fat>
c0005eb6:	83 f8 ff             	cmp    eax,0xffffffff
c0005eb9:	0f 84 25 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005ebf:	83 f8 01             	cmp    eax,0x1
c0005ec2:	0f 86 06 fd ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ec8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005ecc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005ecf:	0f 86 f9 fc ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ed5:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ed8:	e9 5b ff ff ff       	jmp    c0005e38 <f_lseek+0x326>
c0005edd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005ee4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eec:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eef:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ef3:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ef6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ef9:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005efc:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005f02:	0f 84 6f fe ff ff    	je     c0005d77 <f_lseek+0x265>
c0005f08:	89 c2                	mov    edx,eax
c0005f0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005f0e:	e8 e7 bf ff ff       	call   c0001efa <clst2sect>
c0005f13:	89 d7                	mov    edi,edx
c0005f15:	09 c7                	or     edi,eax
c0005f17:	0f 84 b1 fc ff ff    	je     c0005bce <f_lseek+0xbc>
c0005f1d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005f21:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005f24:	0f ac fe 09          	shrd   esi,edi,0x9
c0005f28:	c1 ef 09             	shr    edi,0x9
c0005f2b:	01 c6                	add    esi,eax
c0005f2d:	11 d7                	adc    edi,edx
c0005f2f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005f32:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005f35:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005f38:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f3b:	19 d1                	sbb    ecx,edx
c0005f3d:	73 0a                	jae    c0005f49 <f_lseek+0x437>
c0005f3f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f42:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f45:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f49:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f4e:	74 6d                	je     c0005fbd <f_lseek+0x4ab>
c0005f50:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f53:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f56:	39 fa                	cmp    edx,edi
c0005f58:	75 04                	jne    c0005f5e <f_lseek+0x44c>
c0005f5a:	39 f0                	cmp    eax,esi
c0005f5c:	74 5f                	je     c0005fbd <f_lseek+0x4ab>
c0005f5e:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f61:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f65:	79 25                	jns    c0005f8c <f_lseek+0x47a>
c0005f67:	83 ec 0c             	sub    esp,0xc
c0005f6a:	6a 01                	push   0x1
c0005f6c:	52                   	push   edx
c0005f6d:	50                   	push   eax
c0005f6e:	55                   	push   ebp
c0005f6f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f73:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f77:	50                   	push   eax
c0005f78:	e8 af bc ff ff       	call   c0001c2c <disk_write>
c0005f7d:	83 c4 20             	add    esp,0x20
c0005f80:	85 c0                	test   eax,eax
c0005f82:	0f 85 5c fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005f88:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f8c:	83 ec 0c             	sub    esp,0xc
c0005f8f:	6a 01                	push   0x1
c0005f91:	57                   	push   edi
c0005f92:	56                   	push   esi
c0005f93:	55                   	push   ebp
c0005f94:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f98:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f9c:	50                   	push   eax
c0005f9d:	e8 74 bc ff ff       	call   c0001c16 <disk_read>
c0005fa2:	83 c4 20             	add    esp,0x20
c0005fa5:	85 c0                	test   eax,eax
c0005fa7:	0f 85 37 fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005fad:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005fb0:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005fb3:	eb 08                	jmp    c0005fbd <f_lseek+0x4ab>
c0005fb5:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005fbd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005fc1:	83 c4 3c             	add    esp,0x3c
c0005fc4:	5b                   	pop    ebx
c0005fc5:	5e                   	pop    esi
c0005fc6:	5f                   	pop    edi
c0005fc7:	5d                   	pop    ebp
c0005fc8:	c3                   	ret    

c0005fc9 <f_opendir>:
c0005fc9:	56                   	push   esi
c0005fca:	b8 09 00 00 00       	mov    eax,0x9
c0005fcf:	53                   	push   ebx
c0005fd0:	83 ec 24             	sub    esp,0x24
c0005fd3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005fd7:	85 db                	test   ebx,ebx
c0005fd9:	0f 84 e6 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c0005fdf:	31 c9                	xor    ecx,ecx
c0005fe1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fe5:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005fe9:	e8 03 c7 ff ff       	call   c00026f1 <mount_volume>
c0005fee:	85 c0                	test   eax,eax
c0005ff0:	0f 85 c9 00 00 00    	jne    c00060bf <f_opendir+0xf6>
c0005ff6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ffa:	83 ec 0c             	sub    esp,0xc
c0005ffd:	89 03                	mov    DWORD PTR [ebx],eax
c0005fff:	68 60 04 00 00       	push   0x460
c0006004:	e8 8b 24 00 00       	call   c0008494 <ff_memalloc>
c0006009:	83 c4 10             	add    esp,0x10
c000600c:	89 c6                	mov    esi,eax
c000600e:	b8 11 00 00 00       	mov    eax,0x11
c0006013:	85 f6                	test   esi,esi
c0006015:	0f 84 aa 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c000601b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000601f:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006025:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006028:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000602b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000602f:	89 d8                	mov    eax,ebx
c0006031:	e8 31 ee ff ff       	call   c0004e67 <follow_path>
c0006036:	85 c0                	test   eax,eax
c0006038:	75 61                	jne    c000609b <f_opendir+0xd2>
c000603a:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c000603e:	78 46                	js     c0006086 <f_opendir+0xbd>
c0006040:	b8 05 00 00 00       	mov    eax,0x5
c0006045:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0006049:	74 50                	je     c000609b <f_opendir+0xd2>
c000604b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000604f:	8a 01                	mov    al,BYTE PTR [ecx]
c0006051:	3c 04                	cmp    al,0x4
c0006053:	75 26                	jne    c000607b <f_opendir+0xb2>
c0006055:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0006058:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000605b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000605e:	30 d2                	xor    dl,dl
c0006060:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0006064:	09 c2                	or     edx,eax
c0006066:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0006069:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000606c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000606f:	89 da                	mov    edx,ebx
c0006071:	8d 41 10             	lea    eax,[ecx+0x10]
c0006074:	e8 b4 ed ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0006079:	eb 0b                	jmp    c0006086 <f_opendir+0xbd>
c000607b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000607e:	e8 59 ed ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006083:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0006086:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000608a:	31 d2                	xor    edx,edx
c000608c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006090:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0006094:	89 d8                	mov    eax,ebx
c0006096:	e8 22 d1 ff ff       	call   c00031bd <dir_sdi>
c000609b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000609f:	83 ec 0c             	sub    esp,0xc
c00060a2:	56                   	push   esi
c00060a3:	e8 02 24 00 00       	call   c00084aa <ff_memfree>
c00060a8:	83 c4 10             	add    esp,0x10
c00060ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00060af:	83 f8 04             	cmp    eax,0x4
c00060b2:	74 06                	je     c00060ba <f_opendir+0xf1>
c00060b4:	85 c0                	test   eax,eax
c00060b6:	74 0d                	je     c00060c5 <f_opendir+0xfc>
c00060b8:	eb 05                	jmp    c00060bf <f_opendir+0xf6>
c00060ba:	b8 05 00 00 00       	mov    eax,0x5
c00060bf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060c5:	83 c4 24             	add    esp,0x24
c00060c8:	5b                   	pop    ebx
c00060c9:	5e                   	pop    esi
c00060ca:	c3                   	ret    

c00060cb <f_closedir>:
c00060cb:	53                   	push   ebx
c00060cc:	83 ec 18             	sub    esp,0x18
c00060cf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00060d3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00060d7:	89 d8                	mov    eax,ebx
c00060d9:	e8 86 c2 ff ff       	call   c0002364 <validate>
c00060de:	85 c0                	test   eax,eax
c00060e0:	75 06                	jne    c00060e8 <f_closedir+0x1d>
c00060e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060e8:	83 c4 18             	add    esp,0x18
c00060eb:	5b                   	pop    ebx
c00060ec:	c3                   	ret    

c00060ed <f_readdir>:
c00060ed:	57                   	push   edi
c00060ee:	56                   	push   esi
c00060ef:	53                   	push   ebx
c00060f0:	83 ec 20             	sub    esp,0x20
c00060f3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060f7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060fb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060ff:	89 d8                	mov    eax,ebx
c0006101:	e8 5e c2 ff ff       	call   c0002364 <validate>
c0006106:	85 c0                	test   eax,eax
c0006108:	75 77                	jne    c0006181 <f_readdir+0x94>
c000610a:	85 ff                	test   edi,edi
c000610c:	75 0b                	jne    c0006119 <f_readdir+0x2c>
c000610e:	31 d2                	xor    edx,edx
c0006110:	89 d8                	mov    eax,ebx
c0006112:	e8 a6 d0 ff ff       	call   c00031bd <dir_sdi>
c0006117:	eb 68                	jmp    c0006181 <f_readdir+0x94>
c0006119:	83 ec 0c             	sub    esp,0xc
c000611c:	68 60 04 00 00       	push   0x460
c0006121:	e8 6e 23 00 00       	call   c0008494 <ff_memalloc>
c0006126:	83 c4 10             	add    esp,0x10
c0006129:	89 c6                	mov    esi,eax
c000612b:	b8 11 00 00 00       	mov    eax,0x11
c0006130:	85 f6                	test   esi,esi
c0006132:	74 4d                	je     c0006181 <f_readdir+0x94>
c0006134:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006138:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000613e:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006141:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006144:	31 d2                	xor    edx,edx
c0006146:	89 d8                	mov    eax,ebx
c0006148:	e8 80 d8 ff ff       	call   c00039cd <dir_read>
c000614d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006152:	75 19                	jne    c000616d <f_readdir+0x80>
c0006154:	89 fa                	mov    edx,edi
c0006156:	89 d8                	mov    eax,ebx
c0006158:	e8 7e ea ff ff       	call   c0004bdb <get_fileinfo>
c000615d:	31 d2                	xor    edx,edx
c000615f:	89 d8                	mov    eax,ebx
c0006161:	e8 af d5 ff ff       	call   c0003715 <dir_next>
c0006166:	83 f8 04             	cmp    eax,0x4
c0006169:	75 02                	jne    c000616d <f_readdir+0x80>
c000616b:	31 c0                	xor    eax,eax
c000616d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006171:	83 ec 0c             	sub    esp,0xc
c0006174:	56                   	push   esi
c0006175:	e8 30 23 00 00       	call   c00084aa <ff_memfree>
c000617a:	83 c4 10             	add    esp,0x10
c000617d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006181:	83 c4 20             	add    esp,0x20
c0006184:	5b                   	pop    ebx
c0006185:	5e                   	pop    esi
c0006186:	5f                   	pop    edi
c0006187:	c3                   	ret    

c0006188 <f_stat>:
c0006188:	57                   	push   edi
c0006189:	31 c9                	xor    ecx,ecx
c000618b:	56                   	push   esi
c000618c:	53                   	push   ebx
c000618d:	83 ec 50             	sub    esp,0x50
c0006190:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0006194:	8d 54 24 04          	lea    edx,[esp+0x4]
c0006198:	8d 44 24 60          	lea    eax,[esp+0x60]
c000619c:	e8 50 c5 ff ff       	call   c00026f1 <mount_volume>
c00061a1:	89 c3                	mov    ebx,eax
c00061a3:	85 c0                	test   eax,eax
c00061a5:	75 67                	jne    c000620e <f_stat+0x86>
c00061a7:	83 ec 0c             	sub    esp,0xc
c00061aa:	bb 11 00 00 00       	mov    ebx,0x11
c00061af:	68 60 04 00 00       	push   0x460
c00061b4:	e8 db 22 00 00       	call   c0008494 <ff_memalloc>
c00061b9:	83 c4 10             	add    esp,0x10
c00061bc:	89 c6                	mov    esi,eax
c00061be:	85 c0                	test   eax,eax
c00061c0:	74 4c                	je     c000620e <f_stat+0x86>
c00061c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00061c6:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00061cc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00061cf:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00061d2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00061d6:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061da:	e8 88 ec ff ff       	call   c0004e67 <follow_path>
c00061df:	89 c3                	mov    ebx,eax
c00061e1:	85 c0                	test   eax,eax
c00061e3:	75 1d                	jne    c0006202 <f_stat+0x7a>
c00061e5:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061ea:	78 11                	js     c00061fd <f_stat+0x75>
c00061ec:	85 ff                	test   edi,edi
c00061ee:	74 12                	je     c0006202 <f_stat+0x7a>
c00061f0:	89 fa                	mov    edx,edi
c00061f2:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061f6:	e8 e0 e9 ff ff       	call   c0004bdb <get_fileinfo>
c00061fb:	eb 05                	jmp    c0006202 <f_stat+0x7a>
c00061fd:	bb 06 00 00 00       	mov    ebx,0x6
c0006202:	83 ec 0c             	sub    esp,0xc
c0006205:	56                   	push   esi
c0006206:	e8 9f 22 00 00       	call   c00084aa <ff_memfree>
c000620b:	83 c4 10             	add    esp,0x10
c000620e:	83 c4 50             	add    esp,0x50
c0006211:	89 d8                	mov    eax,ebx
c0006213:	5b                   	pop    ebx
c0006214:	5e                   	pop    esi
c0006215:	5f                   	pop    edi
c0006216:	c3                   	ret    

c0006217 <f_getfree>:
c0006217:	55                   	push   ebp
c0006218:	31 c9                	xor    ecx,ecx
c000621a:	57                   	push   edi
c000621b:	56                   	push   esi
c000621c:	53                   	push   ebx
c000621d:	83 ec 5c             	sub    esp,0x5c
c0006220:	8d 54 24 24          	lea    edx,[esp+0x24]
c0006224:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006228:	e8 c4 c4 ff ff       	call   c00026f1 <mount_volume>
c000622d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006231:	85 c0                	test   eax,eax
c0006233:	0f 85 9d 01 00 00    	jne    c00063d6 <f_getfree+0x1bf>
c0006239:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000623d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006241:	89 02                	mov    DWORD PTR [edx],eax
c0006243:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006246:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006249:	8d 71 fe             	lea    esi,[ecx-0x2]
c000624c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006250:	39 f2                	cmp    edx,esi
c0006252:	77 0b                	ja     c000625f <f_getfree+0x48>
c0006254:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006258:	89 10                	mov    DWORD PTR [eax],edx
c000625a:	e9 77 01 00 00       	jmp    c00063d6 <f_getfree+0x1bf>
c000625f:	8a 10                	mov    dl,BYTE PTR [eax]
c0006261:	80 fa 01             	cmp    dl,0x1
c0006264:	75 3a                	jne    c00062a0 <f_getfree+0x89>
c0006266:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000626a:	be 02 00 00 00       	mov    esi,0x2
c000626f:	31 db                	xor    ebx,ebx
c0006271:	89 f2                	mov    edx,esi
c0006273:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006277:	e8 4b cd ff ff       	call   c0002fc7 <get_fat>
c000627c:	83 f8 ff             	cmp    eax,0xffffffff
c000627f:	0f 84 28 01 00 00    	je     c00063ad <f_getfree+0x196>
c0006285:	83 f8 01             	cmp    eax,0x1
c0006288:	0f 84 29 01 00 00    	je     c00063b7 <f_getfree+0x1a0>
c000628e:	83 d3 00             	adc    ebx,0x0
c0006291:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006295:	46                   	inc    esi
c0006296:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006299:	77 d6                	ja     c0006271 <f_getfree+0x5a>
c000629b:	e9 25 01 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c00062a0:	80 fa 04             	cmp    dl,0x4
c00062a3:	0f 85 88 00 00 00    	jne    c0006331 <f_getfree+0x11a>
c00062a9:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00062ac:	31 ed                	xor    ebp,ebp
c00062ae:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00062b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062b5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062b9:	31 db                	xor    ebx,ebx
c00062bb:	85 ed                	test   ebp,ebp
c00062bd:	75 3f                	jne    c00062fe <f_getfree+0xe7>
c00062bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00062c7:	83 c0 01             	add    eax,0x1
c00062ca:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00062ce:	83 d2 00             	adc    edx,0x0
c00062d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00062d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00062d9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062e1:	e8 59 c1 ff ff       	call   c000243f <move_window>
c00062e6:	85 c0                	test   eax,eax
c00062e8:	0f 85 d3 00 00 00    	jne    c00063c1 <f_getfree+0x1aa>
c00062ee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062f2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062fa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062fe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006302:	8d 4e f8             	lea    ecx,[esi-0x8]
c0006305:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006309:	89 cf                	mov    edi,ecx
c000630b:	85 f6                	test   esi,esi
c000630d:	74 12                	je     c0006321 <f_getfree+0x10a>
c000630f:	88 c1                	mov    cl,al
c0006311:	83 e1 01             	and    ecx,0x1
c0006314:	80 f9 01             	cmp    cl,0x1
c0006317:	83 d3 00             	adc    ebx,0x0
c000631a:	d0 e8                	shr    al,1
c000631c:	4e                   	dec    esi
c000631d:	39 fe                	cmp    esi,edi
c000631f:	75 ea                	jne    c000630b <f_getfree+0xf4>
c0006321:	45                   	inc    ebp
c0006322:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006328:	85 f6                	test   esi,esi
c000632a:	75 8f                	jne    c00062bb <f_getfree+0xa4>
c000632c:	e9 94 00 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c0006331:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006334:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006337:	31 f6                	xor    esi,esi
c0006339:	31 db                	xor    ebx,ebx
c000633b:	85 f6                	test   esi,esi
c000633d:	75 1b                	jne    c000635a <f_getfree+0x143>
c000633f:	89 d7                	mov    edi,edx
c0006341:	89 cd                	mov    ebp,ecx
c0006343:	83 c7 01             	add    edi,0x1
c0006346:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000634a:	83 d5 00             	adc    ebp,0x0
c000634d:	e8 ed c0 ff ff       	call   c000243f <move_window>
c0006352:	85 c0                	test   eax,eax
c0006354:	75 6b                	jne    c00063c1 <f_getfree+0x1aa>
c0006356:	89 fa                	mov    edx,edi
c0006358:	89 e9                	mov    ecx,ebp
c000635a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000635e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006362:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006366:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006369:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000636d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006371:	75 11                	jne    c0006384 <f_getfree+0x16d>
c0006373:	e8 e9 b8 ff ff       	call   c0001c61 <ld_word>
c0006378:	66 83 f8 01          	cmp    ax,0x1
c000637c:	83 d3 00             	adc    ebx,0x0
c000637f:	83 c6 02             	add    esi,0x2
c0006382:	eb 13                	jmp    c0006397 <f_getfree+0x180>
c0006384:	e8 e5 b8 ff ff       	call   c0001c6e <ld_dword>
c0006389:	25 ff ff ff 0f       	and    eax,0xfffffff
c000638e:	83 f8 01             	cmp    eax,0x1
c0006391:	83 d3 00             	adc    ebx,0x0
c0006394:	83 c6 04             	add    esi,0x4
c0006397:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000639d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063a1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00063a5:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00063a9:	75 90                	jne    c000633b <f_getfree+0x124>
c00063ab:	eb 18                	jmp    c00063c5 <f_getfree+0x1ae>
c00063ad:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00063b5:	eb 0e                	jmp    c00063c5 <f_getfree+0x1ae>
c00063b7:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00063bf:	eb 04                	jmp    c00063c5 <f_getfree+0x1ae>
c00063c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063c5:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00063c9:	89 18                	mov    DWORD PTR [eax],ebx
c00063cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00063cf:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00063d2:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00063d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063da:	83 c4 5c             	add    esp,0x5c
c00063dd:	5b                   	pop    ebx
c00063de:	5e                   	pop    esi
c00063df:	5f                   	pop    edi
c00063e0:	5d                   	pop    ebp
c00063e1:	c3                   	ret    

c00063e2 <f_truncate>:
c00063e2:	56                   	push   esi
c00063e3:	53                   	push   ebx
c00063e4:	83 ec 14             	sub    esp,0x14
c00063e7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063eb:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063ef:	89 d8                	mov    eax,ebx
c00063f1:	e8 6e bf ff ff       	call   c0002364 <validate>
c00063f6:	89 c6                	mov    esi,eax
c00063f8:	85 c0                	test   eax,eax
c00063fa:	0f 85 d2 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c0006400:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c0006404:	85 f6                	test   esi,esi
c0006406:	0f 85 c6 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c000640c:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0006410:	0f 84 b7 00 00 00    	je     c00064cd <f_truncate+0xeb>
c0006416:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006419:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000641c:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000641f:	89 d1                	mov    ecx,edx
c0006421:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006424:	0f 83 a8 00 00 00    	jae    c00064d2 <f_truncate+0xf0>
c000642a:	09 c2                	or     edx,eax
c000642c:	75 15                	jne    c0006443 <f_truncate+0x61>
c000642e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006431:	31 c9                	xor    ecx,ecx
c0006433:	89 d8                	mov    eax,ebx
c0006435:	e8 7a d0 ff ff       	call   c00034b4 <remove_chain>
c000643a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006441:	eb 35                	jmp    c0006478 <f_truncate+0x96>
c0006443:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006446:	89 d8                	mov    eax,ebx
c0006448:	e8 7a cb ff ff       	call   c0002fc7 <get_fat>
c000644d:	89 c2                	mov    edx,eax
c000644f:	b8 01 00 00 00       	mov    eax,0x1
c0006454:	83 fa ff             	cmp    edx,0xffffffff
c0006457:	74 1f                	je     c0006478 <f_truncate+0x96>
c0006459:	b8 02 00 00 00       	mov    eax,0x2
c000645e:	83 fa 01             	cmp    edx,0x1
c0006461:	74 15                	je     c0006478 <f_truncate+0x96>
c0006463:	31 c0                	xor    eax,eax
c0006465:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006469:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000646c:	76 0a                	jbe    c0006478 <f_truncate+0x96>
c000646e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006471:	89 d8                	mov    eax,ebx
c0006473:	e8 3c d0 ff ff       	call   c00034b4 <remove_chain>
c0006478:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000647b:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000647e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006481:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006484:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006487:	83 ca 40             	or     edx,0x40
c000648a:	85 c0                	test   eax,eax
c000648c:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c000648f:	75 35                	jne    c00064c6 <f_truncate+0xe4>
c0006491:	84 d2                	test   dl,dl
c0006493:	79 3d                	jns    c00064d2 <f_truncate+0xf0>
c0006495:	83 ec 0c             	sub    esp,0xc
c0006498:	8d 43 50             	lea    eax,[ebx+0x50]
c000649b:	6a 01                	push   0x1
c000649d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00064a0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00064a3:	50                   	push   eax
c00064a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00064a8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00064ac:	50                   	push   eax
c00064ad:	e8 7a b7 ff ff       	call   c0001c2c <disk_write>
c00064b2:	83 c4 20             	add    esp,0x20
c00064b5:	85 c0                	test   eax,eax
c00064b7:	75 08                	jne    c00064c1 <f_truncate+0xdf>
c00064b9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00064bd:	31 f6                	xor    esi,esi
c00064bf:	eb 11                	jmp    c00064d2 <f_truncate+0xf0>
c00064c1:	b8 01 00 00 00       	mov    eax,0x1
c00064c6:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00064c9:	89 c6                	mov    esi,eax
c00064cb:	eb 05                	jmp    c00064d2 <f_truncate+0xf0>
c00064cd:	be 07 00 00 00       	mov    esi,0x7
c00064d2:	89 f0                	mov    eax,esi
c00064d4:	83 c4 14             	add    esp,0x14
c00064d7:	5b                   	pop    ebx
c00064d8:	5e                   	pop    esi
c00064d9:	c3                   	ret    

c00064da <f_unlink>:
c00064da:	56                   	push   esi
c00064db:	b9 02 00 00 00       	mov    ecx,0x2
c00064e0:	53                   	push   ebx
c00064e1:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064e7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064eb:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064f2:	e8 fa c1 ff ff       	call   c00026f1 <mount_volume>
c00064f7:	85 c0                	test   eax,eax
c00064f9:	0f 85 55 01 00 00    	jne    c0006654 <f_unlink+0x17a>
c00064ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006503:	83 ec 0c             	sub    esp,0xc
c0006506:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000650a:	68 60 04 00 00       	push   0x460
c000650f:	e8 80 1f 00 00       	call   c0008494 <ff_memalloc>
c0006514:	83 c4 10             	add    esp,0x10
c0006517:	89 c3                	mov    ebx,eax
c0006519:	b8 11 00 00 00       	mov    eax,0x11
c000651e:	85 db                	test   ebx,ebx
c0006520:	0f 84 2e 01 00 00    	je     c0006654 <f_unlink+0x17a>
c0006526:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000652a:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006530:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006533:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006536:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000653d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006541:	e8 21 e9 ff ff       	call   c0004e67 <follow_path>
c0006546:	85 c0                	test   eax,eax
c0006548:	0f 85 f2 00 00 00    	jne    c0006640 <f_unlink+0x166>
c000654e:	b8 06 00 00 00       	mov    eax,0x6
c0006553:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000655b:	0f 88 df 00 00 00    	js     c0006640 <f_unlink+0x166>
c0006561:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006566:	74 0a                	je     c0006572 <f_unlink+0x98>
c0006568:	b8 07 00 00 00       	mov    eax,0x7
c000656d:	e9 ce 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c0006572:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006576:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000657a:	8a 02                	mov    al,BYTE PTR [edx]
c000657c:	3c 04                	cmp    al,0x4
c000657e:	75 12                	jne    c0006592 <f_unlink+0xb8>
c0006580:	8d 42 10             	lea    eax,[edx+0x10]
c0006583:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006587:	e8 a1 e8 ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c000658c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006590:	eb 0e                	jmp    c00065a0 <f_unlink+0xc6>
c0006592:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006599:	e8 3e e8 ff ff       	call   c0004ddc <ld_clust.isra.0>
c000659e:	89 c6                	mov    esi,eax
c00065a0:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00065a5:	75 12                	jne    c00065b9 <f_unlink+0xdf>
c00065a7:	8d 44 24 48          	lea    eax,[esp+0x48]
c00065ab:	e8 94 d6 ff ff       	call   c0003c44 <dir_remove>
c00065b0:	85 c0                	test   eax,eax
c00065b2:	74 6c                	je     c0006620 <f_unlink+0x146>
c00065b4:	e9 87 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c00065b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065bd:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00065c4:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00065cb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065ce:	75 21                	jne    c00065f1 <f_unlink+0x117>
c00065d0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00065d4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00065d8:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065df:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065e6:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065ea:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065f1:	31 d2                	xor    edx,edx
c00065f3:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065fa:	e8 be cb ff ff       	call   c00031bd <dir_sdi>
c00065ff:	85 c0                	test   eax,eax
c0006601:	75 3d                	jne    c0006640 <f_unlink+0x166>
c0006603:	31 d2                	xor    edx,edx
c0006605:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c000660c:	e8 bc d3 ff ff       	call   c00039cd <dir_read>
c0006611:	85 c0                	test   eax,eax
c0006613:	0f 84 4f ff ff ff    	je     c0006568 <f_unlink+0x8e>
c0006619:	83 f8 04             	cmp    eax,0x4
c000661c:	75 22                	jne    c0006640 <f_unlink+0x166>
c000661e:	eb 87                	jmp    c00065a7 <f_unlink+0xcd>
c0006620:	85 f6                	test   esi,esi
c0006622:	75 0b                	jne    c000662f <f_unlink+0x155>
c0006624:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006628:	e8 3d df ff ff       	call   c000456a <sync_fs>
c000662d:	eb 11                	jmp    c0006640 <f_unlink+0x166>
c000662f:	31 c9                	xor    ecx,ecx
c0006631:	89 f2                	mov    edx,esi
c0006633:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006637:	e8 78 ce ff ff       	call   c00034b4 <remove_chain>
c000663c:	85 c0                	test   eax,eax
c000663e:	74 e4                	je     c0006624 <f_unlink+0x14a>
c0006640:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006644:	83 ec 0c             	sub    esp,0xc
c0006647:	53                   	push   ebx
c0006648:	e8 5d 1e 00 00       	call   c00084aa <ff_memfree>
c000664d:	83 c4 10             	add    esp,0x10
c0006650:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006654:	81 c4 e4 00 00 00    	add    esp,0xe4
c000665a:	5b                   	pop    ebx
c000665b:	5e                   	pop    esi
c000665c:	c3                   	ret    

c000665d <f_mkdir>:
c000665d:	57                   	push   edi
c000665e:	b9 02 00 00 00       	mov    ecx,0x2
c0006663:	56                   	push   esi
c0006664:	53                   	push   ebx
c0006665:	83 c4 80             	add    esp,0xffffff80
c0006668:	8d 54 24 08          	lea    edx,[esp+0x8]
c000666c:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006673:	e8 79 c0 ff ff       	call   c00026f1 <mount_volume>
c0006678:	89 c3                	mov    ebx,eax
c000667a:	85 c0                	test   eax,eax
c000667c:	0f 85 fe 01 00 00    	jne    c0006880 <f_mkdir+0x223>
c0006682:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006686:	bb 11 00 00 00       	mov    ebx,0x11
c000668b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000668f:	83 ec 0c             	sub    esp,0xc
c0006692:	68 60 04 00 00       	push   0x460
c0006697:	e8 f8 1d 00 00       	call   c0008494 <ff_memalloc>
c000669c:	83 c4 10             	add    esp,0x10
c000669f:	89 c7                	mov    edi,eax
c00066a1:	85 c0                	test   eax,eax
c00066a3:	0f 84 d7 01 00 00    	je     c0006880 <f_mkdir+0x223>
c00066a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066ad:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00066b3:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00066b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066b9:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00066c0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066c4:	e8 9e e7 ff ff       	call   c0004e67 <follow_path>
c00066c9:	89 c3                	mov    ebx,eax
c00066cb:	85 c0                	test   eax,eax
c00066cd:	74 3e                	je     c000670d <f_mkdir+0xb0>
c00066cf:	83 f8 04             	cmp    eax,0x4
c00066d2:	75 3e                	jne    c0006712 <f_mkdir+0xb5>
c00066d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066d8:	31 d2                	xor    edx,edx
c00066da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066de:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066e2:	e8 ce cb ff ff       	call   c00032b5 <create_chain>
c00066e7:	89 c6                	mov    esi,eax
c00066e9:	85 c0                	test   eax,eax
c00066eb:	74 0c                	je     c00066f9 <f_mkdir+0x9c>
c00066ed:	bb 02 00 00 00       	mov    ebx,0x2
c00066f2:	83 f8 01             	cmp    eax,0x1
c00066f5:	74 07                	je     c00066fe <f_mkdir+0xa1>
c00066f7:	eb 2a                	jmp    c0006723 <f_mkdir+0xc6>
c00066f9:	bb 07 00 00 00       	mov    ebx,0x7
c00066fe:	31 c9                	xor    ecx,ecx
c0006700:	89 f2                	mov    edx,esi
c0006702:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006706:	e8 a9 cd ff ff       	call   c00034b4 <remove_chain>
c000670b:	eb 05                	jmp    c0006712 <f_mkdir+0xb5>
c000670d:	bb 08 00 00 00       	mov    ebx,0x8
c0006712:	83 ec 0c             	sub    esp,0xc
c0006715:	57                   	push   edi
c0006716:	e8 8f 1d 00 00       	call   c00084aa <ff_memfree>
c000671b:	83 c4 10             	add    esp,0x10
c000671e:	e9 5d 01 00 00       	jmp    c0006880 <f_mkdir+0x223>
c0006723:	bb 01 00 00 00       	mov    ebx,0x1
c0006728:	83 f8 ff             	cmp    eax,0xffffffff
c000672b:	74 d1                	je     c00066fe <f_mkdir+0xa1>
c000672d:	89 f2                	mov    edx,esi
c000672f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006733:	e8 c4 ce ff ff       	call   c00035fc <dir_clear>
c0006738:	89 c3                	mov    ebx,eax
c000673a:	85 c0                	test   eax,eax
c000673c:	75 c0                	jne    c00066fe <f_mkdir+0xa1>
c000673e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006742:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006745:	74 69                	je     c00067b0 <f_mkdir+0x153>
c0006747:	b9 0b 00 00 00       	mov    ecx,0xb
c000674c:	83 c0 54             	add    eax,0x54
c000674f:	ba 20 00 00 00       	mov    edx,0x20
c0006754:	e8 9c b5 ff ff       	call   c0001cf5 <mem_set>
c0006759:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675d:	ba 00 00 21 50       	mov    edx,0x50210000
c0006762:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006766:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000676a:	83 c0 6a             	add    eax,0x6a
c000676d:	e8 65 b5 ff ff       	call   c0001cd7 <st_dword>
c0006772:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006776:	89 f1                	mov    ecx,esi
c0006778:	8d 50 54             	lea    edx,[eax+0x54]
c000677b:	e8 85 e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006780:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006784:	b9 20 00 00 00       	mov    ecx,0x20
c0006789:	8d 50 54             	lea    edx,[eax+0x54]
c000678c:	83 c0 74             	add    eax,0x74
c000678f:	e8 4c b5 ff ff       	call   c0001ce0 <mem_cpy>
c0006794:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006798:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000679c:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00067a0:	8d 50 74             	lea    edx,[eax+0x74]
c00067a3:	e8 5d e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c00067a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067ac:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00067b0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067b4:	e8 2f db ff ff       	call   c00042e8 <dir_register>
c00067b9:	89 c3                	mov    ebx,eax
c00067bb:	85 c0                	test   eax,eax
c00067bd:	0f 85 3b ff ff ff    	jne    c00066fe <f_mkdir+0xa1>
c00067c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067c7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00067ca:	75 74                	jne    c0006840 <f_mkdir+0x1e3>
c00067cc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067cf:	ba 00 00 21 50       	mov    edx,0x50210000
c00067d4:	83 c0 0c             	add    eax,0xc
c00067d7:	e8 fb b4 ff ff       	call   c0001cd7 <st_dword>
c00067dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e0:	89 f2                	mov    edx,esi
c00067e2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067e5:	83 c0 34             	add    eax,0x34
c00067e8:	e8 ea b4 ff ff       	call   c0001cd7 <st_dword>
c00067ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067f1:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067f5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067f8:	c1 e2 09             	shl    edx,0x9
c00067fb:	83 c0 38             	add    eax,0x38
c00067fe:	e8 d4 b4 ff ff       	call   c0001cd7 <st_dword>
c0006803:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006807:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000680b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000680e:	c1 e2 09             	shl    edx,0x9
c0006811:	83 c0 28             	add    eax,0x28
c0006814:	e8 be b4 ff ff       	call   c0001cd7 <st_dword>
c0006819:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006820:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006824:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006827:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c000682b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000682f:	e8 8b d3 ff ff       	call   c0003bbf <store_xdir>
c0006834:	89 c3                	mov    ebx,eax
c0006836:	85 c0                	test   eax,eax
c0006838:	0f 85 d4 fe ff ff    	jne    c0006712 <f_mkdir+0xb5>
c000683e:	eb 30                	jmp    c0006870 <f_mkdir+0x213>
c0006840:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006844:	ba 00 00 21 50       	mov    edx,0x50210000
c0006849:	83 c0 16             	add    eax,0x16
c000684c:	e8 86 b4 ff ff       	call   c0001cd7 <st_dword>
c0006851:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006855:	89 f1                	mov    ecx,esi
c0006857:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000685b:	e8 a5 e5 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006860:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006864:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006868:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000686c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006870:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006874:	e8 f1 dc ff ff       	call   c000456a <sync_fs>
c0006879:	89 c3                	mov    ebx,eax
c000687b:	e9 92 fe ff ff       	jmp    c0006712 <f_mkdir+0xb5>
c0006880:	83 ec 80             	sub    esp,0xffffff80
c0006883:	89 d8                	mov    eax,ebx
c0006885:	5b                   	pop    ebx
c0006886:	5e                   	pop    esi
c0006887:	5f                   	pop    edi
c0006888:	c3                   	ret    

c0006889 <f_rename>:
c0006889:	55                   	push   ebp
c000688a:	57                   	push   edi
c000688b:	56                   	push   esi
c000688c:	53                   	push   ebx
c000688d:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006893:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000689a:	e8 a4 b9 ff ff       	call   c0002243 <get_ldnumber>
c000689f:	b9 02 00 00 00       	mov    ecx,0x2
c00068a4:	8d 54 24 14          	lea    edx,[esp+0x14]
c00068a8:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00068af:	e8 3d be ff ff       	call   c00026f1 <mount_volume>
c00068b4:	85 c0                	test   eax,eax
c00068b6:	0f 85 b5 02 00 00    	jne    c0006b71 <f_rename+0x2e8>
c00068bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068c0:	83 ec 0c             	sub    esp,0xc
c00068c3:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00068c7:	68 60 04 00 00       	push   0x460
c00068cc:	e8 c3 1b 00 00       	call   c0008494 <ff_memalloc>
c00068d1:	83 c4 10             	add    esp,0x10
c00068d4:	89 c3                	mov    ebx,eax
c00068d6:	b8 11 00 00 00       	mov    eax,0x11
c00068db:	85 db                	test   ebx,ebx
c00068dd:	0f 84 8e 02 00 00    	je     c0006b71 <f_rename+0x2e8>
c00068e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e7:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068ed:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068f0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068f3:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068fa:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068fe:	e8 64 e5 ff ff       	call   c0004e67 <follow_path>
c0006903:	85 c0                	test   eax,eax
c0006905:	0f 85 52 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000690b:	b8 06 00 00 00       	mov    eax,0x6
c0006910:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006918:	0f 85 3f 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000691e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006922:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006925:	0f 85 05 01 00 00    	jne    c0006a30 <f_rename+0x1a7>
c000692b:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000692e:	b9 40 00 00 00       	mov    ecx,0x40
c0006933:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006937:	e8 a4 b3 ff ff       	call   c0001ce0 <mem_cpy>
c000693c:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006941:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006945:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000694c:	e8 8f b3 ff ff       	call   c0001ce0 <mem_cpy>
c0006951:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006958:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000695f:	e8 03 e5 ff ff       	call   c0004e67 <follow_path>
c0006964:	85 c0                	test   eax,eax
c0006966:	75 29                	jne    c0006991 <f_rename+0x108>
c0006968:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000696c:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006973:	74 0a                	je     c000697f <f_rename+0xf6>
c0006975:	b8 08 00 00 00       	mov    eax,0x8
c000697a:	e9 de 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c000697f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006986:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000698d:	75 e6                	jne    c0006975 <f_rename+0xec>
c000698f:	eb 09                	jmp    c000699a <f_rename+0x111>
c0006991:	83 f8 04             	cmp    eax,0x4
c0006994:	0f 85 c3 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000699a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a1:	e8 42 d9 ff ff       	call   c00042e8 <dir_register>
c00069a6:	85 c0                	test   eax,eax
c00069a8:	0f 85 af 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c00069ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b2:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00069b5:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00069b8:	89 c5                	mov    ebp,eax
c00069ba:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00069bd:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00069c1:	8d 46 24             	lea    eax,[esi+0x24]
c00069c4:	e8 98 b2 ff ff       	call   c0001c61 <ld_word>
c00069c9:	b9 40 00 00 00       	mov    ecx,0x40
c00069ce:	89 c7                	mov    edi,eax
c00069d0:	8d 54 24 18          	lea    edx,[esp+0x18]
c00069d4:	89 f0                	mov    eax,esi
c00069d6:	e8 05 b3 ff ff       	call   c0001ce0 <mem_cpy>
c00069db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069df:	89 e9                	mov    ecx,ebp
c00069e1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069e4:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069e7:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069ef:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069f2:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069f5:	0f b7 d7             	movzx  edx,di
c00069f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069fb:	83 c0 24             	add    eax,0x24
c00069fe:	e8 d0 b2 ff ff       	call   c0001cd3 <st_word>
c0006a03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a07:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006a0a:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006a0d:	a8 10                	test   al,0x10
c0006a0f:	75 06                	jne    c0006a17 <f_rename+0x18e>
c0006a11:	83 c8 20             	or     eax,0x20
c0006a14:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006a17:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1e:	e8 9c d1 ff ff       	call   c0003bbf <store_xdir>
c0006a23:	85 c0                	test   eax,eax
c0006a25:	0f 84 1c 01 00 00    	je     c0006b47 <f_rename+0x2be>
c0006a2b:	e9 2d 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c0006a30:	b9 20 00 00 00       	mov    ecx,0x20
c0006a35:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a3c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a40:	e8 9b b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a45:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a4a:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a4e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a55:	e8 86 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a5a:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a61:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a68:	e8 fa e3 ff ff       	call   c0004e67 <follow_path>
c0006a6d:	85 c0                	test   eax,eax
c0006a6f:	75 27                	jne    c0006a98 <f_rename+0x20f>
c0006a71:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a75:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a7c:	0f 85 f3 fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a82:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a89:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a90:	0f 85 df fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a96:	eb 09                	jmp    c0006aa1 <f_rename+0x218>
c0006a98:	83 f8 04             	cmp    eax,0x4
c0006a9b:	0f 85 bc 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006aa1:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006aa8:	e8 3b d8 ff ff       	call   c00042e8 <dir_register>
c0006aad:	85 c0                	test   eax,eax
c0006aaf:	0f 85 a8 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006ab5:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006abc:	b9 13 00 00 00       	mov    ecx,0x13
c0006ac1:	8d 46 0d             	lea    eax,[esi+0xd]
c0006ac4:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006ac8:	e8 13 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006acd:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006ad1:	a8 10                	test   al,0x10
c0006ad3:	75 03                	jne    c0006ad8 <f_rename+0x24f>
c0006ad5:	83 c8 20             	or     eax,0x20
c0006ad8:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006adb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006adf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ae3:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006ae7:	74 5e                	je     c0006b47 <f_rename+0x2be>
c0006ae9:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006af0:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006af4:	74 51                	je     c0006b47 <f_rename+0x2be>
c0006af6:	89 f2                	mov    edx,esi
c0006af8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006afc:	8a 07                	mov    al,BYTE PTR [edi]
c0006afe:	e8 d9 e2 ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006b03:	89 c2                	mov    edx,eax
c0006b05:	89 f8                	mov    eax,edi
c0006b07:	e8 ee b3 ff ff       	call   c0001efa <clst2sect>
c0006b0c:	89 c6                	mov    esi,eax
c0006b0e:	89 d1                	mov    ecx,edx
c0006b10:	b8 02 00 00 00       	mov    eax,0x2
c0006b15:	09 f2                	or     edx,esi
c0006b17:	74 44                	je     c0006b5d <f_rename+0x2d4>
c0006b19:	89 f2                	mov    edx,esi
c0006b1b:	89 f8                	mov    eax,edi
c0006b1d:	e8 1d b9 ff ff       	call   c000243f <move_window>
c0006b22:	85 c0                	test   eax,eax
c0006b24:	75 37                	jne    c0006b5d <f_rename+0x2d4>
c0006b26:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b2a:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006b2e:	75 17                	jne    c0006b47 <f_rename+0x2be>
c0006b30:	8d 50 74             	lea    edx,[eax+0x74]
c0006b33:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b3a:	e8 c6 e2 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006b3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b43:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b47:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b4b:	e8 f4 d0 ff ff       	call   c0003c44 <dir_remove>
c0006b50:	85 c0                	test   eax,eax
c0006b52:	75 09                	jne    c0006b5d <f_rename+0x2d4>
c0006b54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b58:	e8 0d da ff ff       	call   c000456a <sync_fs>
c0006b5d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b61:	83 ec 0c             	sub    esp,0xc
c0006b64:	53                   	push   ebx
c0006b65:	e8 40 19 00 00       	call   c00084aa <ff_memfree>
c0006b6a:	83 c4 10             	add    esp,0x10
c0006b6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b71:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b77:	5b                   	pop    ebx
c0006b78:	5e                   	pop    esi
c0006b79:	5f                   	pop    edi
c0006b7a:	5d                   	pop    ebp
c0006b7b:	c3                   	ret    

c0006b7c <f_chmod>:
c0006b7c:	57                   	push   edi
c0006b7d:	b9 02 00 00 00       	mov    ecx,0x2
c0006b82:	56                   	push   esi
c0006b83:	53                   	push   ebx
c0006b84:	83 ec 60             	sub    esp,0x60
c0006b87:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b8b:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b8f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b93:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b97:	e8 55 bb ff ff       	call   c00026f1 <mount_volume>
c0006b9c:	85 c0                	test   eax,eax
c0006b9e:	0f 85 af 00 00 00    	jne    c0006c53 <f_chmod+0xd7>
c0006ba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba8:	83 ec 0c             	sub    esp,0xc
c0006bab:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006baf:	68 60 04 00 00       	push   0x460
c0006bb4:	e8 db 18 00 00       	call   c0008494 <ff_memalloc>
c0006bb9:	83 c4 10             	add    esp,0x10
c0006bbc:	89 c6                	mov    esi,eax
c0006bbe:	b8 11 00 00 00       	mov    eax,0x11
c0006bc3:	85 f6                	test   esi,esi
c0006bc5:	0f 84 88 00 00 00    	je     c0006c53 <f_chmod+0xd7>
c0006bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bcf:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006bd5:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006bd8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bdb:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bdf:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006be3:	e8 7f e2 ff ff       	call   c0004e67 <follow_path>
c0006be8:	85 c0                	test   eax,eax
c0006bea:	75 53                	jne    c0006c3f <f_chmod+0xc3>
c0006bec:	b8 06 00 00 00       	mov    eax,0x6
c0006bf1:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bf6:	75 47                	jne    c0006c3f <f_chmod+0xc3>
c0006bf8:	89 f9                	mov    ecx,edi
c0006bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bfe:	83 e1 27             	and    ecx,0x27
c0006c01:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c04:	75 1d                	jne    c0006c23 <f_chmod+0xa7>
c0006c06:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006c09:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c0c:	21 cb                	and    ebx,ecx
c0006c0e:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c11:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006c14:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c18:	e8 a2 cf ff ff       	call   c0003bbf <store_xdir>
c0006c1d:	85 c0                	test   eax,eax
c0006c1f:	75 1e                	jne    c0006c3f <f_chmod+0xc3>
c0006c21:	eb 13                	jmp    c0006c36 <f_chmod+0xba>
c0006c23:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006c27:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2a:	21 cb                	and    ebx,ecx
c0006c2c:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2f:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006c32:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c3a:	e8 2b d9 ff ff       	call   c000456a <sync_fs>
c0006c3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	56                   	push   esi
c0006c47:	e8 5e 18 00 00       	call   c00084aa <ff_memfree>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c53:	83 c4 60             	add    esp,0x60
c0006c56:	5b                   	pop    ebx
c0006c57:	5e                   	pop    esi
c0006c58:	5f                   	pop    edi
c0006c59:	c3                   	ret    

c0006c5a <f_utime>:
c0006c5a:	56                   	push   esi
c0006c5b:	b9 02 00 00 00       	mov    ecx,0x2
c0006c60:	53                   	push   ebx
c0006c61:	83 ec 64             	sub    esp,0x64
c0006c64:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c68:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c70:	e8 7c ba ff ff       	call   c00026f1 <mount_volume>
c0006c75:	85 c0                	test   eax,eax
c0006c77:	0f 85 b5 00 00 00    	jne    c0006d32 <f_utime+0xd8>
c0006c7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c81:	83 ec 0c             	sub    esp,0xc
c0006c84:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c88:	68 60 04 00 00       	push   0x460
c0006c8d:	e8 02 18 00 00       	call   c0008494 <ff_memalloc>
c0006c92:	83 c4 10             	add    esp,0x10
c0006c95:	89 c3                	mov    ebx,eax
c0006c97:	b8 11 00 00 00       	mov    eax,0x11
c0006c9c:	85 db                	test   ebx,ebx
c0006c9e:	0f 84 8e 00 00 00    	je     c0006d32 <f_utime+0xd8>
c0006ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ca8:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006cae:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006cb1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006cb4:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 a6 e1 ff ff       	call   c0004e67 <follow_path>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 59                	jne    c0006d1e <f_utime+0xc4>
c0006cc5:	b8 06 00 00 00       	mov    eax,0x6
c0006cca:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006ccf:	75 4d                	jne    c0006d1e <f_utime+0xc4>
c0006cd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd5:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006cd9:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006cdd:	c1 e2 10             	shl    edx,0x10
c0006ce0:	09 ca                	or     edx,ecx
c0006ce2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ce5:	75 1a                	jne    c0006d01 <f_utime+0xa7>
c0006ce7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cea:	83 c0 0c             	add    eax,0xc
c0006ced:	e8 e5 af ff ff       	call   c0001cd7 <st_dword>
c0006cf2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cf6:	e8 c4 ce ff ff       	call   c0003bbf <store_xdir>
c0006cfb:	85 c0                	test   eax,eax
c0006cfd:	75 1f                	jne    c0006d1e <f_utime+0xc4>
c0006cff:	eb 14                	jmp    c0006d15 <f_utime+0xbb>
c0006d01:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d05:	83 c0 16             	add    eax,0x16
c0006d08:	e8 ca af ff ff       	call   c0001cd7 <st_dword>
c0006d0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d11:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d19:	e8 4c d8 ff ff       	call   c000456a <sync_fs>
c0006d1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d22:	83 ec 0c             	sub    esp,0xc
c0006d25:	53                   	push   ebx
c0006d26:	e8 7f 17 00 00       	call   c00084aa <ff_memfree>
c0006d2b:	83 c4 10             	add    esp,0x10
c0006d2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d32:	83 c4 64             	add    esp,0x64
c0006d35:	5b                   	pop    ebx
c0006d36:	5e                   	pop    esi
c0006d37:	c3                   	ret    

c0006d38 <f_getlabel>:
c0006d38:	55                   	push   ebp
c0006d39:	31 c9                	xor    ecx,ecx
c0006d3b:	57                   	push   edi
c0006d3c:	56                   	push   esi
c0006d3d:	53                   	push   ebx
c0006d3e:	83 ec 6c             	sub    esp,0x6c
c0006d41:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d45:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d4c:	e8 a0 b9 ff ff       	call   c00026f1 <mount_volume>
c0006d51:	89 c6                	mov    esi,eax
c0006d53:	85 c0                	test   eax,eax
c0006d55:	0f 85 c1 01 00 00    	jne    c0006f1c <f_getlabel+0x1e4>
c0006d5b:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d63:	0f 84 5f 01 00 00    	je     c0006ec8 <f_getlabel+0x190>
c0006d69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6d:	31 d2                	xor    edx,edx
c0006d6f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d73:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d7b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d7f:	e8 39 c4 ff ff       	call   c00031bd <dir_sdi>
c0006d84:	85 c0                	test   eax,eax
c0006d86:	0f 85 2d 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006d8c:	ba 01 00 00 00       	mov    edx,0x1
c0006d91:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d95:	e8 33 cc ff ff       	call   c00039cd <dir_read>
c0006d9a:	85 c0                	test   eax,eax
c0006d9c:	0f 85 17 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006da6:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006da9:	74 09                	je     c0006db4 <f_getlabel+0x7c>
c0006dab:	31 db                	xor    ebx,ebx
c0006dad:	31 c9                	xor    ecx,ecx
c0006daf:	e9 c8 00 00 00       	jmp    c0006e7c <f_getlabel+0x144>
c0006db4:	31 ed                	xor    ebp,ebp
c0006db6:	31 db                	xor    ebx,ebx
c0006db8:	31 ff                	xor    edi,edi
c0006dba:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006dbe:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006dc2:	39 fa                	cmp    edx,edi
c0006dc4:	76 4b                	jbe    c0006e11 <f_getlabel+0xd9>
c0006dc6:	47                   	inc    edi
c0006dc7:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006dca:	01 d0                	add    eax,edx
c0006dcc:	e8 90 ae ff ff       	call   c0001c61 <ld_word>
c0006dd1:	66 85 ed             	test   bp,bp
c0006dd4:	75 0d                	jne    c0006de3 <f_getlabel+0xab>
c0006dd6:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006ddc:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006de1:	76 28                	jbe    c0006e0b <f_getlabel+0xd3>
c0006de3:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006dea:	89 e9                	mov    ecx,ebp
c0006dec:	01 da                	add    edx,ebx
c0006dee:	c1 e1 10             	shl    ecx,0x10
c0006df1:	0f b7 c0             	movzx  eax,ax
c0006df4:	09 c8                	or     eax,ecx
c0006df6:	b9 04 00 00 00       	mov    ecx,0x4
c0006dfb:	e8 01 b0 ff ff       	call   c0001e01 <put_utf>
c0006e00:	84 c0                	test   al,al
c0006e02:	74 0b                	je     c0006e0f <f_getlabel+0xd7>
c0006e04:	0f b6 c0             	movzx  eax,al
c0006e07:	01 c3                	add    ebx,eax
c0006e09:	31 c0                	xor    eax,eax
c0006e0b:	89 c5                	mov    ebp,eax
c0006e0d:	eb ab                	jmp    c0006dba <f_getlabel+0x82>
c0006e0f:	31 db                	xor    ebx,ebx
c0006e11:	66 85 ed             	test   bp,bp
c0006e14:	74 02                	je     c0006e18 <f_getlabel+0xe0>
c0006e16:	31 db                	xor    ebx,ebx
c0006e18:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e1f:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006e23:	e9 a0 00 00 00       	jmp    c0006ec8 <f_getlabel+0x190>
c0006e28:	83 ff 0b             	cmp    edi,0xb
c0006e2b:	74 11                	je     c0006e3e <f_getlabel+0x106>
c0006e2d:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006e32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e36:	8d 79 02             	lea    edi,[ecx+0x2]
c0006e39:	c1 e0 08             	shl    eax,0x8
c0006e3c:	09 c2                	or     edx,eax
c0006e3e:	0f b7 d2             	movzx  edx,dx
c0006e41:	50                   	push   eax
c0006e42:	50                   	push   eax
c0006e43:	68 b5 01 00 00       	push   0x1b5
c0006e48:	52                   	push   edx
c0006e49:	e8 03 17 00 00       	call   c0008551 <ff_oem2uni>
c0006e4e:	83 c4 10             	add    esp,0x10
c0006e51:	66 85 c0             	test   ax,ax
c0006e54:	74 46                	je     c0006e9c <f_getlabel+0x164>
c0006e56:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e5d:	0f b7 c0             	movzx  eax,ax
c0006e60:	01 da                	add    edx,ebx
c0006e62:	b9 04 00 00 00       	mov    ecx,0x4
c0006e67:	e8 95 af ff ff       	call   c0001e01 <put_utf>
c0006e6c:	84 c0                	test   al,al
c0006e6e:	74 2c                	je     c0006e9c <f_getlabel+0x164>
c0006e70:	0f b6 c0             	movzx  eax,al
c0006e73:	01 c3                	add    ebx,eax
c0006e75:	83 ff 0b             	cmp    edi,0xb
c0006e78:	74 24                	je     c0006e9e <f_getlabel+0x166>
c0006e7a:	89 f9                	mov    ecx,edi
c0006e7c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e80:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e83:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e88:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e91:	e8 9f ae ff ff       	call   c0001d35 <dbc_1st>
c0006e96:	85 c0                	test   eax,eax
c0006e98:	74 a4                	je     c0006e3e <f_getlabel+0x106>
c0006e9a:	eb 8c                	jmp    c0006e28 <f_getlabel+0xf0>
c0006e9c:	31 db                	xor    ebx,ebx
c0006e9e:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006ea5:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006ea8:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006eaf:	74 17                	je     c0006ec8 <f_getlabel+0x190>
c0006eb1:	4b                   	dec    ebx
c0006eb2:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006eb5:	74 ee                	je     c0006ea5 <f_getlabel+0x16d>
c0006eb7:	eb 0f                	jmp    c0006ec8 <f_getlabel+0x190>
c0006eb9:	83 f8 04             	cmp    eax,0x4
c0006ebc:	75 5c                	jne    c0006f1a <f_getlabel+0x1e2>
c0006ebe:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006ec5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006ec8:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006ed0:	74 4a                	je     c0006f1c <f_getlabel+0x1e4>
c0006ed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ed6:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006ed9:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006edc:	e8 5e b5 ff ff       	call   c000243f <move_window>
c0006ee1:	89 c6                	mov    esi,eax
c0006ee3:	85 c0                	test   eax,eax
c0006ee5:	75 35                	jne    c0006f1c <f_getlabel+0x1e4>
c0006ee7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eeb:	b8 43 00 00 00       	mov    eax,0x43
c0006ef0:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006ef2:	80 f9 03             	cmp    cl,0x3
c0006ef5:	74 0f                	je     c0006f06 <f_getlabel+0x1ce>
c0006ef7:	31 c0                	xor    eax,eax
c0006ef9:	80 f9 04             	cmp    cl,0x4
c0006efc:	0f 94 c0             	sete   al
c0006eff:	48                   	dec    eax
c0006f00:	83 e0 c3             	and    eax,0xffffffc3
c0006f03:	83 c0 64             	add    eax,0x64
c0006f06:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006f0a:	e8 5f ad ff ff       	call   c0001c6e <ld_dword>
c0006f0f:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006f16:	89 07                	mov    DWORD PTR [edi],eax
c0006f18:	eb 02                	jmp    c0006f1c <f_getlabel+0x1e4>
c0006f1a:	89 c6                	mov    esi,eax
c0006f1c:	83 c4 6c             	add    esp,0x6c
c0006f1f:	89 f0                	mov    eax,esi
c0006f21:	5b                   	pop    ebx
c0006f22:	5e                   	pop    esi
c0006f23:	5f                   	pop    edi
c0006f24:	5d                   	pop    ebp
c0006f25:	c3                   	ret    

c0006f26 <f_setlabel>:
c0006f26:	56                   	push   esi
c0006f27:	b9 02 00 00 00       	mov    ecx,0x2
c0006f2c:	53                   	push   ebx
c0006f2d:	83 ec 74             	sub    esp,0x74
c0006f30:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006f34:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f3b:	e8 b1 b7 ff ff       	call   c00026f1 <mount_volume>
c0006f40:	89 c6                	mov    esi,eax
c0006f42:	85 c0                	test   eax,eax
c0006f44:	0f 85 41 02 00 00    	jne    c000718b <f_setlabel+0x265>
c0006f4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f4e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f51:	0f 85 8e 00 00 00    	jne    c0006fe5 <f_setlabel+0xbf>
c0006f57:	b9 16 00 00 00       	mov    ecx,0x16
c0006f5c:	31 d2                	xor    edx,edx
c0006f5e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f62:	31 db                	xor    ebx,ebx
c0006f64:	e8 8c ad ff ff       	call   c0001cf5 <mem_set>
c0006f69:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f70:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f73:	0f 86 0a 01 00 00    	jbe    c0007083 <f_setlabel+0x15d>
c0006f79:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f80:	e8 b6 ad ff ff       	call   c0001d3b <tchar2uni>
c0006f85:	89 c6                	mov    esi,eax
c0006f87:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f8c:	76 2a                	jbe    c0006fb8 <f_setlabel+0x92>
c0006f8e:	83 f8 ff             	cmp    eax,0xffffffff
c0006f91:	74 05                	je     c0006f98 <f_setlabel+0x72>
c0006f93:	83 fb 09             	cmp    ebx,0x9
c0006f96:	76 0a                	jbe    c0006fa2 <f_setlabel+0x7c>
c0006f98:	be 06 00 00 00       	mov    esi,0x6
c0006f9d:	e9 e9 01 00 00       	jmp    c000718b <f_setlabel+0x265>
c0006fa2:	89 c2                	mov    edx,eax
c0006fa4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fa8:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fab:	c1 ea 10             	shr    edx,0x10
c0006fae:	01 c8                	add    eax,ecx
c0006fb0:	43                   	inc    ebx
c0006fb1:	e8 1d ad ff ff       	call   c0001cd3 <st_word>
c0006fb6:	eb 04                	jmp    c0006fbc <f_setlabel+0x96>
c0006fb8:	85 c0                	test   eax,eax
c0006fba:	74 dc                	je     c0006f98 <f_setlabel+0x72>
c0006fbc:	89 f2                	mov    edx,esi
c0006fbe:	b8 57 93 02 c0       	mov    eax,0xc0029357
c0006fc3:	e8 5b ad ff ff       	call   c0001d23 <chk_chr>
c0006fc8:	85 c0                	test   eax,eax
c0006fca:	75 cc                	jne    c0006f98 <f_setlabel+0x72>
c0006fcc:	83 fb 0a             	cmp    ebx,0xa
c0006fcf:	77 c7                	ja     c0006f98 <f_setlabel+0x72>
c0006fd1:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fd4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fd8:	0f b7 d6             	movzx  edx,si
c0006fdb:	01 c8                	add    eax,ecx
c0006fdd:	43                   	inc    ebx
c0006fde:	e8 f0 ac ff ff       	call   c0001cd3 <st_word>
c0006fe3:	eb 84                	jmp    c0006f69 <f_setlabel+0x43>
c0006fe5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fea:	ba 20 00 00 00       	mov    edx,0x20
c0006fef:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006ff3:	31 db                	xor    ebx,ebx
c0006ff5:	e8 fb ac ff ff       	call   c0001cf5 <mem_set>
c0006ffa:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0007001:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0007004:	76 60                	jbe    c0007066 <f_setlabel+0x140>
c0007006:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c000700d:	e8 29 ad ff ff       	call   c0001d3b <tchar2uni>
c0007012:	3d ff ff 00 00       	cmp    eax,0xffff
c0007017:	0f 87 7b ff ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000701d:	83 ec 0c             	sub    esp,0xc
c0007020:	50                   	push   eax
c0007021:	e8 97 15 00 00       	call   c00085bd <ff_wtoupper>
c0007026:	5a                   	pop    edx
c0007027:	59                   	pop    ecx
c0007028:	68 b5 01 00 00       	push   0x1b5
c000702d:	50                   	push   eax
c000702e:	e8 8e 14 00 00       	call   c00084c1 <ff_uni2oem>
c0007033:	83 c4 10             	add    esp,0x10
c0007036:	89 c6                	mov    esi,eax
c0007038:	66 85 c0             	test   ax,ax
c000703b:	0f 84 57 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007041:	0f b7 d0             	movzx  edx,ax
c0007044:	b8 50 93 02 c0       	mov    eax,0xc0029350
c0007049:	e8 d5 ac ff ff       	call   c0001d23 <chk_chr>
c000704e:	85 c0                	test   eax,eax
c0007050:	0f 85 42 ff ff ff    	jne    c0006f98 <f_setlabel+0x72>
c0007056:	66 81 fe ff 00       	cmp    si,0xff
c000705b:	0f 87 14 01 00 00    	ja     c0007175 <f_setlabel+0x24f>
c0007061:	e9 fa 00 00 00       	jmp    c0007160 <f_setlabel+0x23a>
c0007066:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c000706b:	0f 84 27 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007071:	85 db                	test   ebx,ebx
c0007073:	74 0e                	je     c0007083 <f_setlabel+0x15d>
c0007075:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007078:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c000707d:	75 04                	jne    c0007083 <f_setlabel+0x15d>
c000707f:	89 c3                	mov    ebx,eax
c0007081:	eb ee                	jmp    c0007071 <f_setlabel+0x14b>
c0007083:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007087:	31 d2                	xor    edx,edx
c0007089:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000708d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007095:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007099:	e8 1f c1 ff ff       	call   c00031bd <dir_sdi>
c000709e:	89 c6                	mov    esi,eax
c00070a0:	85 c0                	test   eax,eax
c00070a2:	0f 85 e3 00 00 00    	jne    c000718b <f_setlabel+0x265>
c00070a8:	ba 01 00 00 00       	mov    edx,0x1
c00070ad:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b1:	e8 17 c9 ff ff       	call   c00039cd <dir_read>
c00070b6:	85 c0                	test   eax,eax
c00070b8:	75 21                	jne    c00070db <f_setlabel+0x1b5>
c00070ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00070be:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070c2:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c00070c5:	74 5d                	je     c0007124 <f_setlabel+0x1fe>
c00070c7:	85 db                	test   ebx,ebx
c00070c9:	74 0b                	je     c00070d6 <f_setlabel+0x1b0>
c00070cb:	b9 0b 00 00 00       	mov    ecx,0xb
c00070d0:	8d 54 24 0e          	lea    edx,[esp+0xe]
c00070d4:	eb 70                	jmp    c0007146 <f_setlabel+0x220>
c00070d6:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00070d9:	eb 70                	jmp    c000714b <f_setlabel+0x225>
c00070db:	83 f8 04             	cmp    eax,0x4
c00070de:	75 7c                	jne    c000715c <f_setlabel+0x236>
c00070e0:	85 db                	test   ebx,ebx
c00070e2:	0f 84 a3 00 00 00    	je     c000718b <f_setlabel+0x265>
c00070e8:	ba 01 00 00 00       	mov    edx,0x1
c00070ed:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070f1:	e8 51 ca ff ff       	call   c0003b47 <dir_alloc>
c00070f6:	89 c6                	mov    esi,eax
c00070f8:	85 c0                	test   eax,eax
c00070fa:	0f 85 8b 00 00 00    	jne    c000718b <f_setlabel+0x265>
c0007100:	31 d2                	xor    edx,edx
c0007102:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007106:	b9 20 00 00 00       	mov    ecx,0x20
c000710b:	e8 e5 ab ff ff       	call   c0001cf5 <mem_set>
c0007110:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007114:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007117:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000711b:	75 18                	jne    c0007135 <f_setlabel+0x20f>
c000711d:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0007120:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007124:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007127:	b9 16 00 00 00       	mov    ecx,0x16
c000712c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007130:	83 c0 02             	add    eax,0x2
c0007133:	eb 9b                	jmp    c00070d0 <f_setlabel+0x1aa>
c0007135:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007139:	b9 0b 00 00 00       	mov    ecx,0xb
c000713e:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007142:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007146:	e8 95 ab ff ff       	call   c0001ce0 <mem_cpy>
c000714b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000714f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007153:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007157:	e8 0e d4 ff ff       	call   c000456a <sync_fs>
c000715c:	89 c6                	mov    esi,eax
c000715e:	eb 2b                	jmp    c000718b <f_setlabel+0x265>
c0007160:	83 fb 0a             	cmp    ebx,0xa
c0007163:	0f 87 2f fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c0007169:	89 f0                	mov    eax,esi
c000716b:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000716f:	43                   	inc    ebx
c0007170:	e9 85 fe ff ff       	jmp    c0006ffa <f_setlabel+0xd4>
c0007175:	83 fb 09             	cmp    ebx,0x9
c0007178:	0f 87 1a fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000717e:	89 f0                	mov    eax,esi
c0007180:	66 c1 e8 08          	shr    ax,0x8
c0007184:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007188:	43                   	inc    ebx
c0007189:	eb de                	jmp    c0007169 <f_setlabel+0x243>
c000718b:	89 f0                	mov    eax,esi
c000718d:	83 c4 74             	add    esp,0x74
c0007190:	5b                   	pop    ebx
c0007191:	5e                   	pop    esi
c0007192:	c3                   	ret    

c0007193 <f_forward>:
c0007193:	55                   	push   ebp
c0007194:	57                   	push   edi
c0007195:	56                   	push   esi
c0007196:	53                   	push   ebx
c0007197:	83 ec 2c             	sub    esp,0x2c
c000719a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000719e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00071a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00071a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00071ac:	89 d8                	mov    eax,ebx
c00071ae:	e8 b1 b1 ff ff       	call   c0002364 <validate>
c00071b3:	89 c5                	mov    ebp,eax
c00071b5:	85 c0                	test   eax,eax
c00071b7:	0f 85 aa 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00071c1:	85 ed                	test   ebp,ebp
c00071c3:	0f 85 9e 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00071cd:	0f 84 8f 01 00 00    	je     c0007362 <f_forward+0x1cf>
c00071d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00071d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00071d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071dc:	bf 00 00 00 00       	mov    edi,0x0
c00071e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071e8:	89 d1                	mov    ecx,edx
c00071ea:	19 f9                	sbb    ecx,edi
c00071ec:	0f 83 cf 00 00 00    	jae    c00072c1 <f_forward+0x12e>
c00071f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071f6:	e9 c6 00 00 00       	jmp    c00072c1 <f_forward+0x12e>
c00071fb:	50                   	push   eax
c00071fc:	50                   	push   eax
c00071fd:	6a 00                	push   0x0
c00071ff:	6a 00                	push   0x0
c0007201:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007205:	83 c4 10             	add    esp,0x10
c0007208:	85 c0                	test   eax,eax
c000720a:	0f 84 57 01 00 00    	je     c0007367 <f_forward+0x1d4>
c0007210:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007213:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007217:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000721a:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000721e:	89 d7                	mov    edi,edx
c0007220:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007223:	89 c6                	mov    esi,eax
c0007225:	0f ac fe 09          	shrd   esi,edi,0x9
c0007229:	21 ce                	and    esi,ecx
c000722b:	89 c1                	mov    ecx,eax
c000722d:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007233:	0f 84 98 00 00 00    	je     c00072d1 <f_forward+0x13e>
c0007239:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000723d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007240:	89 c8                	mov    eax,ecx
c0007242:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007246:	e8 af ac ff ff       	call   c0001efa <clst2sect>
c000724b:	89 d7                	mov    edi,edx
c000724d:	09 c7                	or     edi,eax
c000724f:	0f 84 9e 00 00 00    	je     c00072f3 <f_forward+0x160>
c0007255:	31 ff                	xor    edi,edi
c0007257:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000725a:	01 c6                	add    esi,eax
c000725c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007260:	11 d7                	adc    edi,edx
c0007262:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007265:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007268:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000726c:	39 fa                	cmp    edx,edi
c000726e:	0f 85 a2 00 00 00    	jne    c0007316 <f_forward+0x183>
c0007274:	39 f0                	cmp    eax,esi
c0007276:	0f 85 9a 00 00 00    	jne    c0007316 <f_forward+0x183>
c000727c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000727f:	ba 00 02 00 00       	mov    edx,0x200
c0007284:	25 ff 01 00 00       	and    eax,0x1ff
c0007289:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000728d:	29 c2                	sub    edx,eax
c000728f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007292:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007295:	39 d1                	cmp    ecx,edx
c0007297:	76 02                	jbe    c000729b <f_forward+0x108>
c0007299:	89 d1                	mov    ecx,edx
c000729b:	8d 73 50             	lea    esi,[ebx+0x50]
c000729e:	52                   	push   edx
c000729f:	01 c6                	add    esi,eax
c00072a1:	52                   	push   edx
c00072a2:	51                   	push   ecx
c00072a3:	56                   	push   esi
c00072a4:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00072a8:	83 c4 10             	add    esp,0x10
c00072ab:	85 c0                	test   eax,eax
c00072ad:	74 44                	je     c00072f3 <f_forward+0x160>
c00072af:	31 ff                	xor    edi,edi
c00072b1:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00072b4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00072b7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00072bb:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00072bf:	01 07                	add    DWORD PTR [edi],eax
c00072c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00072c6:	0f 85 2f ff ff ff    	jne    c00071fb <f_forward+0x68>
c00072cc:	e9 96 00 00 00       	jmp    c0007367 <f_forward+0x1d4>
c00072d1:	85 f6                	test   esi,esi
c00072d3:	0f 85 60 ff ff ff    	jne    c0007239 <f_forward+0xa6>
c00072d9:	89 d7                	mov    edi,edx
c00072db:	09 c7                	or     edi,eax
c00072dd:	75 05                	jne    c00072e4 <f_forward+0x151>
c00072df:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072e2:	eb 0a                	jmp    c00072ee <f_forward+0x15b>
c00072e4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072e7:	89 d8                	mov    eax,ebx
c00072e9:	e8 d9 bc ff ff       	call   c0002fc7 <get_fat>
c00072ee:	83 f8 01             	cmp    eax,0x1
c00072f1:	77 0b                	ja     c00072fe <f_forward+0x16b>
c00072f3:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072f7:	bd 02 00 00 00       	mov    ebp,0x2
c00072fc:	eb 69                	jmp    c0007367 <f_forward+0x1d4>
c00072fe:	83 f8 ff             	cmp    eax,0xffffffff
c0007301:	75 0b                	jne    c000730e <f_forward+0x17b>
c0007303:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007307:	bd 01 00 00 00       	mov    ebp,0x1
c000730c:	eb 59                	jmp    c0007367 <f_forward+0x1d4>
c000730e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007311:	e9 23 ff ff ff       	jmp    c0007239 <f_forward+0xa6>
c0007316:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000731a:	79 20                	jns    c000733c <f_forward+0x1a9>
c000731c:	83 ec 0c             	sub    esp,0xc
c000731f:	6a 01                	push   0x1
c0007321:	52                   	push   edx
c0007322:	50                   	push   eax
c0007323:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007327:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000732b:	50                   	push   eax
c000732c:	e8 fb a8 ff ff       	call   c0001c2c <disk_write>
c0007331:	83 c4 20             	add    esp,0x20
c0007334:	85 c0                	test   eax,eax
c0007336:	75 cb                	jne    c0007303 <f_forward+0x170>
c0007338:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000733c:	83 ec 0c             	sub    esp,0xc
c000733f:	6a 01                	push   0x1
c0007341:	57                   	push   edi
c0007342:	56                   	push   esi
c0007343:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007347:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000734b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000734f:	50                   	push   eax
c0007350:	e8 c1 a8 ff ff       	call   c0001c16 <disk_read>
c0007355:	83 c4 20             	add    esp,0x20
c0007358:	85 c0                	test   eax,eax
c000735a:	0f 84 1c ff ff ff    	je     c000727c <f_forward+0xe9>
c0007360:	eb a1                	jmp    c0007303 <f_forward+0x170>
c0007362:	bd 07 00 00 00       	mov    ebp,0x7
c0007367:	83 c4 2c             	add    esp,0x2c
c000736a:	89 e8                	mov    eax,ebp
c000736c:	5b                   	pop    ebx
c000736d:	5e                   	pop    esi
c000736e:	5f                   	pop    edi
c000736f:	5d                   	pop    ebp
c0007370:	c3                   	ret    

c0007371 <f_mkfs>:
c0007371:	55                   	push   ebp
c0007372:	57                   	push   edi
c0007373:	56                   	push   esi
c0007374:	53                   	push   ebx
c0007375:	bb 0b 00 00 00       	mov    ebx,0xb
c000737a:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007380:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007387:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000738e:	e8 b0 ae ff ff       	call   c0002243 <get_ldnumber>
c0007393:	85 c0                	test   eax,eax
c0007395:	0f 88 ec 10 00 00    	js     c0008487 <f_mkfs+0x1116>
c000739b:	8b 14 85 20 e3 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1ce0]
c00073a2:	85 d2                	test   edx,edx
c00073a4:	74 03                	je     c00073a9 <f_mkfs+0x38>
c00073a6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00073a9:	85 f6                	test   esi,esi
c00073ab:	75 05                	jne    c00073b2 <f_mkfs+0x41>
c00073ad:	be 40 93 02 c0       	mov    esi,0xc0029340
c00073b2:	83 ec 0c             	sub    esp,0xc
c00073b5:	0f b6 c0             	movzx  eax,al
c00073b8:	bb 03 00 00 00       	mov    ebx,0x3
c00073bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00073c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073c5:	e8 49 a8 ff ff       	call   c0001c13 <disk_initialize>
c00073ca:	83 c4 10             	add    esp,0x10
c00073cd:	a8 01                	test   al,0x1
c00073cf:	0f 85 b2 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073d5:	bb 0a 00 00 00       	mov    ebx,0xa
c00073da:	a8 04                	test   al,0x4
c00073dc:	0f 85 a5 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073e5:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073e9:	85 c0                	test   eax,eax
c00073eb:	75 20                	jne    c000740d <f_mkfs+0x9c>
c00073ed:	51                   	push   ecx
c00073ee:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073f2:	50                   	push   eax
c00073f3:	6a 03                	push   0x3
c00073f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073f9:	e8 44 a8 ff ff       	call   c0001c42 <disk_ioctl>
c00073fe:	83 c4 10             	add    esp,0x10
c0007401:	85 c0                	test   eax,eax
c0007403:	74 08                	je     c000740d <f_mkfs+0x9c>
c0007405:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000740d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007411:	8d 42 ff             	lea    eax,[edx-0x1]
c0007414:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007419:	77 04                	ja     c000741f <f_mkfs+0xae>
c000741b:	85 c2                	test   edx,eax
c000741d:	74 08                	je     c0007427 <f_mkfs+0xb6>
c000741f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007427:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000742a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000742e:	48                   	dec    eax
c000742f:	3c 01                	cmp    al,0x1
c0007431:	76 05                	jbe    c0007438 <f_mkfs+0xc7>
c0007433:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007438:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000743b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000743f:	48                   	dec    eax
c0007440:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007445:	77 07                	ja     c000744e <f_mkfs+0xdd>
c0007447:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000744c:	74 08                	je     c0007456 <f_mkfs+0xe5>
c000744e:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007456:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007459:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000745f:	77 07                	ja     c0007468 <f_mkfs+0xf7>
c0007461:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007464:	85 d8                	test   eax,ebx
c0007466:	74 02                	je     c000746a <f_mkfs+0xf9>
c0007468:	31 db                	xor    ebx,ebx
c000746a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007475:	77 0a                	ja     c0007481 <f_mkfs+0x110>
c0007477:	bb 11 00 00 00       	mov    ebx,0x11
c000747c:	e9 06 10 00 00       	jmp    c0008487 <f_mkfs+0x1116>
c0007481:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007488:	8b 36                	mov    esi,DWORD PTR [esi]
c000748a:	85 ed                	test   ebp,ebp
c000748c:	75 1e                	jne    c00074ac <f_mkfs+0x13b>
c000748e:	83 ec 0c             	sub    esp,0xc
c0007491:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007498:	25 00 fe ff ff       	and    eax,0xfffffe00
c000749d:	50                   	push   eax
c000749e:	e8 f1 0f 00 00       	call   c0008494 <ff_memalloc>
c00074a3:	83 c4 10             	add    esp,0x10
c00074a6:	89 c5                	mov    ebp,eax
c00074a8:	85 c0                	test   eax,eax
c00074aa:	74 cb                	je     c0007477 <f_mkfs+0x106>
c00074ac:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00074b4:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00074bc:	52                   	push   edx
c00074bd:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00074c1:	50                   	push   eax
c00074c2:	6a 01                	push   0x1
c00074c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074c8:	e8 75 a7 ff ff       	call   c0001c42 <disk_ioctl>
c00074cd:	83 c4 10             	add    esp,0x10
c00074d0:	85 c0                	test   eax,eax
c00074d2:	0f 85 4a 0f 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00074d8:	89 f1                	mov    ecx,esi
c00074da:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074e2:	83 e1 0f             	and    ecx,0xf
c00074e5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074ed:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074f1:	83 e6 08             	and    esi,0x8
c00074f4:	75 56                	jne    c000754c <f_mkfs+0x1db>
c00074f6:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074fa:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074fe:	83 ff 00             	cmp    edi,0x0
c0007501:	76 20                	jbe    c0007523 <f_mkfs+0x1b2>
c0007503:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007508:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007510:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007516:	83 d7 ff             	adc    edi,0xffffffff
c0007519:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000751d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007521:	eb 21                	jmp    c0007544 <f_mkfs+0x1d3>
c0007523:	ba 3f 00 00 00       	mov    edx,0x3f
c0007528:	39 f2                	cmp    edx,esi
c000752a:	19 f8                	sbb    eax,edi
c000752c:	73 1e                	jae    c000754c <f_mkfs+0x1db>
c000752e:	83 c6 c1             	add    esi,0xffffffc1
c0007531:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007539:	83 d7 ff             	adc    edi,0xffffffff
c000753c:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007540:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007544:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000754c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007550:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007554:	89 04 24             	mov    DWORD PTR [esp],eax
c0007557:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000755b:	31 c0                	xor    eax,eax
c000755d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007562:	89 c7                	mov    edi,eax
c0007564:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007567:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000756b:	0f 83 c5 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c0007571:	89 df                	mov    edi,ebx
c0007573:	c1 ef 09             	shr    edi,0x9
c0007576:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000757a:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007581:	c1 ef 09             	shr    edi,0x9
c0007584:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007589:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000758d:	74 29                	je     c00075b8 <f_mkfs+0x247>
c000758f:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007595:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000759a:	0f 97 c2             	seta   dl
c000759d:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00075a0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075a4:	0f 92 c0             	setb   al
c00075a7:	08 c2                	or     dl,al
c00075a9:	75 5b                	jne    c0007606 <f_mkfs+0x295>
c00075ab:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075af:	83 e0 07             	and    eax,0x7
c00075b2:	3c 04                	cmp    al,0x4
c00075b4:	74 50                	je     c0007606 <f_mkfs+0x295>
c00075b6:	eb 1b                	jmp    c00075d3 <f_mkfs+0x262>
c00075b8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00075bd:	0f 87 73 0a 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c00075c3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00075c9:	76 08                	jbe    c00075d3 <f_mkfs+0x262>
c00075cb:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00075d3:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075d7:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075db:	83 e0 01             	and    eax,0x1
c00075de:	80 e1 02             	and    cl,0x2
c00075e1:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075e5:	74 0d                	je     c00075f4 <f_mkfs+0x283>
c00075e7:	84 c0                	test   al,al
c00075e9:	0f 84 53 09 00 00    	je     c0007f42 <f_mkfs+0xbd1>
c00075ef:	e9 12 08 00 00       	jmp    c0007e06 <f_mkfs+0xa95>
c00075f4:	bb 13 00 00 00       	mov    ebx,0x13
c00075f9:	84 c0                	test   al,al
c00075fb:	0f 85 05 08 00 00    	jne    c0007e06 <f_mkfs+0xa95>
c0007601:	e9 39 0e 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0007606:	31 c0                	xor    eax,eax
c0007608:	ba ff 0f 00 00       	mov    edx,0xfff
c000760d:	89 c7                	mov    edi,eax
c000760f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007612:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007616:	0f 83 1a 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c000761c:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007622:	77 39                	ja     c000765d <f_mkfs+0x2ec>
c0007624:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007629:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007631:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007634:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007638:	73 08                	jae    c0007642 <f_mkfs+0x2d1>
c000763a:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007642:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007647:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000764a:	b8 00 00 00 00       	mov    eax,0x0
c000764f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007653:	73 08                	jae    c000765d <f_mkfs+0x2ec>
c0007655:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000765d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007661:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007665:	83 c0 20             	add    eax,0x20
c0007668:	83 d2 00             	adc    edx,0x0
c000766b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000766f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007673:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007677:	31 d2                	xor    edx,edx
c0007679:	31 ff                	xor    edi,edi
c000767b:	52                   	push   edx
c000767c:	89 fb                	mov    ebx,edi
c000767e:	50                   	push   eax
c000767f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007683:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007687:	e8 e0 f2 01 00       	call   c002696c <__udivdi3>
c000768c:	83 c4 10             	add    esp,0x10
c000768f:	c1 e0 02             	shl    eax,0x2
c0007692:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007696:	05 07 02 00 00       	add    eax,0x207
c000769b:	89 f1                	mov    ecx,esi
c000769d:	c1 e8 09             	shr    eax,0x9
c00076a0:	83 c1 ff             	add    ecx,0xffffffff
c00076a3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00076a7:	83 d3 ff             	adc    ebx,0xffffffff
c00076aa:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00076ae:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00076b2:	31 d2                	xor    edx,edx
c00076b4:	01 c8                	add    eax,ecx
c00076b6:	11 da                	adc    edx,ebx
c00076b8:	89 c1                	mov    ecx,eax
c00076ba:	f7 de                	neg    esi
c00076bc:	89 d0                	mov    eax,edx
c00076be:	83 d7 00             	adc    edi,0x0
c00076c1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00076c5:	f7 df                	neg    edi
c00076c7:	21 f1                	and    ecx,esi
c00076c9:	21 f8                	and    eax,edi
c00076cb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00076cf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00076d3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00076d7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076db:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076df:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076e2:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076e6:	0f ac d0 01          	shrd   eax,edx,0x1
c00076ea:	89 df                	mov    edi,ebx
c00076ec:	d1 ea                	shr    edx,1
c00076ee:	39 c1                	cmp    ecx,eax
c00076f0:	19 d7                	sbb    edi,edx
c00076f2:	0f 83 3e 09 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c00076f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076fc:	31 d2                	xor    edx,edx
c00076fe:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007702:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007706:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000770a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000770d:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007711:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007715:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007719:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000771d:	83 f8 0f             	cmp    eax,0xf
c0007720:	0f 86 10 09 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007726:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000772e:	0f 87 02 09 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007734:	31 d2                	xor    edx,edx
c0007736:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000773a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007742:	83 c0 07             	add    eax,0x7
c0007745:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000774d:	c1 e8 03             	shr    eax,0x3
c0007750:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007757:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000775b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000775f:	c1 e0 09             	shl    eax,0x9
c0007762:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007766:	48                   	dec    eax
c0007767:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000776b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000776f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007773:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007777:	31 d2                	xor    edx,edx
c0007779:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000777d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007784:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007788:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000778d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007791:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007795:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007799:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000779d:	31 ff                	xor    edi,edi
c000779f:	31 f6                	xor    esi,esi
c00077a1:	31 db                	xor    ebx,ebx
c00077a3:	85 ff                	test   edi,edi
c00077a5:	74 05                	je     c00077ac <f_mkfs+0x43b>
c00077a7:	4f                   	dec    edi
c00077a8:	74 44                	je     c00077ee <f_mkfs+0x47d>
c00077aa:	eb 4f                	jmp    c00077fb <f_mkfs+0x48a>
c00077ac:	83 ec 0c             	sub    esp,0xc
c00077af:	0f b7 c3             	movzx  eax,bx
c00077b2:	50                   	push   eax
c00077b3:	e8 05 0e 00 00       	call   c00085bd <ff_wtoupper>
c00077b8:	83 c4 10             	add    esp,0x10
c00077bb:	89 c1                	mov    ecx,eax
c00077bd:	8d 53 01             	lea    edx,[ebx+0x1]
c00077c0:	66 39 c3             	cmp    bx,ax
c00077c3:	75 3e                	jne    c0007803 <f_mkfs+0x492>
c00077c5:	be 01 00 00 00       	mov    esi,0x1
c00077ca:	89 df                	mov    edi,ebx
c00077cc:	66 01 f7             	add    di,si
c00077cf:	75 07                	jne    c00077d8 <f_mkfs+0x467>
c00077d1:	83 fe 7f             	cmp    esi,0x7f
c00077d4:	77 31                	ja     c0007807 <f_mkfs+0x496>
c00077d6:	eb 16                	jmp    c00077ee <f_mkfs+0x47d>
c00077d8:	83 ec 0c             	sub    esp,0xc
c00077db:	0f b7 ff             	movzx  edi,di
c00077de:	57                   	push   edi
c00077df:	e8 d9 0d 00 00       	call   c00085bd <ff_wtoupper>
c00077e4:	83 c4 10             	add    esp,0x10
c00077e7:	39 c7                	cmp    edi,eax
c00077e9:	75 e6                	jne    c00077d1 <f_mkfs+0x460>
c00077eb:	46                   	inc    esi
c00077ec:	eb dc                	jmp    c00077ca <f_mkfs+0x459>
c00077ee:	31 c0                	xor    eax,eax
c00077f0:	89 d9                	mov    ecx,ebx
c00077f2:	4e                   	dec    esi
c00077f3:	0f 95 c0             	setne  al
c00077f6:	43                   	inc    ebx
c00077f7:	89 c7                	mov    edi,eax
c00077f9:	eb 14                	jmp    c000780f <f_mkfs+0x49e>
c00077fb:	89 f1                	mov    ecx,esi
c00077fd:	01 f3                	add    ebx,esi
c00077ff:	31 ff                	xor    edi,edi
c0007801:	eb 0c                	jmp    c000780f <f_mkfs+0x49e>
c0007803:	89 d3                	mov    ebx,edx
c0007805:	eb 08                	jmp    c000780f <f_mkfs+0x49e>
c0007807:	bf 02 00 00 00       	mov    edi,0x2
c000780c:	83 c9 ff             	or     ecx,0xffffffff
c000780f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007813:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007816:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000781a:	0f b6 c1             	movzx  eax,cl
c000781d:	e8 3a a9 ff ff       	call   c000215c <xsum32>
c0007822:	66 c1 e9 08          	shr    cx,0x8
c0007826:	89 c2                	mov    edx,eax
c0007828:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782b:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000782f:	0f b7 c1             	movzx  eax,cx
c0007832:	e8 25 a9 ff ff       	call   c000215c <xsum32>
c0007837:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000783c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007840:	66 85 db             	test   bx,bx
c0007843:	74 1f                	je     c0007864 <f_mkfs+0x4f3>
c0007845:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007848:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000784f:	83 c0 02             	add    eax,0x2
c0007852:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007858:	39 c2                	cmp    edx,eax
c000785a:	74 08                	je     c0007864 <f_mkfs+0x4f3>
c000785c:	89 04 24             	mov    DWORD PTR [esp],eax
c000785f:	e9 3f ff ff ff       	jmp    c00077a3 <f_mkfs+0x432>
c0007864:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007867:	83 ec 0c             	sub    esp,0xc
c000786a:	05 01 02 00 00       	add    eax,0x201
c000786f:	c1 e8 09             	shr    eax,0x9
c0007872:	50                   	push   eax
c0007873:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007877:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787f:	55                   	push   ebp
c0007880:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007884:	e8 a3 a3 ff ff       	call   c0001c2c <disk_write>
c0007889:	83 c4 20             	add    esp,0x20
c000788c:	85 c0                	test   eax,eax
c000788e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007891:	0f 85 8b 0b 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007897:	89 d0                	mov    eax,edx
c0007899:	31 d2                	xor    edx,edx
c000789b:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c000789f:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00078a3:	66 85 db             	test   bx,bx
c00078a6:	74 04                	je     c00078ac <f_mkfs+0x53b>
c00078a8:	31 c0                	xor    eax,eax
c00078aa:	eb b0                	jmp    c000785c <f_mkfs+0x4eb>
c00078ac:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078b0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00078b4:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00078b8:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00078be:	31 d2                	xor    edx,edx
c00078c0:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00078cb:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078cf:	c1 eb 09             	shr    ebx,0x9
c00078d2:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00078d9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078dd:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078e5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078e9:	8d 70 01             	lea    esi,[eax+0x1]
c00078ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078f0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078f4:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078fb:	31 d2                	xor    edx,edx
c00078fd:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007902:	89 04 24             	mov    DWORD PTR [esp],eax
c0007905:	89 c1                	mov    ecx,eax
c0007907:	89 e8                	mov    eax,ebp
c0007909:	e8 e7 a3 ff ff       	call   c0001cf5 <mem_set>
c000790e:	31 c0                	xor    eax,eax
c0007910:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007913:	76 10                	jbe    c0007925 <f_mkfs+0x5b4>
c0007915:	83 fe 07             	cmp    esi,0x7
c0007918:	76 0b                	jbe    c0007925 <f_mkfs+0x5b4>
c000791a:	40                   	inc    eax
c000791b:	83 ee 08             	sub    esi,0x8
c000791e:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007923:	eb eb                	jmp    c0007910 <f_mkfs+0x59f>
c0007925:	b2 01                	mov    dl,0x1
c0007927:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c000792b:	85 f6                	test   esi,esi
c000792d:	74 0c                	je     c000793b <f_mkfs+0x5ca>
c000792f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007932:	76 07                	jbe    c000793b <f_mkfs+0x5ca>
c0007934:	08 11                	or     BYTE PTR [ecx],dl
c0007936:	4e                   	dec    esi
c0007937:	d1 e2                	shl    edx,1
c0007939:	eb f0                	jmp    c000792b <f_mkfs+0x5ba>
c000793b:	89 df                	mov    edi,ebx
c000793d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007941:	76 04                	jbe    c0007947 <f_mkfs+0x5d6>
c0007943:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007947:	83 ec 0c             	sub    esp,0xc
c000794a:	57                   	push   edi
c000794b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000794f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007953:	55                   	push   ebp
c0007954:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007958:	e8 cf a2 ff ff       	call   c0001c2c <disk_write>
c000795d:	83 c4 20             	add    esp,0x20
c0007960:	85 c0                	test   eax,eax
c0007962:	0f 85 ba 0a 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007968:	31 d2                	xor    edx,edx
c000796a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000796e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007972:	29 fb                	sub    ebx,edi
c0007974:	0f 85 7a ff ff ff    	jne    c00078f4 <f_mkfs+0x583>
c000797a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000797e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007986:	31 f6                	xor    esi,esi
c0007988:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000798c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000798f:	31 d2                	xor    edx,edx
c0007991:	89 e8                	mov    eax,ebp
c0007993:	e8 5d a3 ff ff       	call   c0001cf5 <mem_set>
c0007998:	31 c9                	xor    ecx,ecx
c000799a:	85 db                	test   ebx,ebx
c000799c:	75 40                	jne    c00079de <f_mkfs+0x66d>
c000799e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00079a3:	89 e8                	mov    eax,ebp
c00079a5:	bb 02 00 00 00       	mov    ebx,0x2
c00079aa:	e8 28 a3 ff ff       	call   c0001cd7 <st_dword>
c00079af:	8d 45 04             	lea    eax,[ebp+0x4]
c00079b2:	83 ca ff             	or     edx,0xffffffff
c00079b5:	e8 1d a3 ff ff       	call   c0001cd7 <st_dword>
c00079ba:	b9 08 00 00 00       	mov    ecx,0x8
c00079bf:	eb 1d                	jmp    c00079de <f_mkfs+0x66d>
c00079c1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c4:	76 3b                	jbe    c0007a01 <f_mkfs+0x690>
c00079c6:	43                   	inc    ebx
c00079c7:	83 fe 01             	cmp    esi,0x1
c00079ca:	89 da                	mov    edx,ebx
c00079cc:	77 03                	ja     c00079d1 <f_mkfs+0x660>
c00079ce:	83 ca ff             	or     edx,0xffffffff
c00079d1:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00079d5:	4e                   	dec    esi
c00079d6:	e8 fc a2 ff ff       	call   c0001cd7 <st_dword>
c00079db:	83 c1 04             	add    ecx,0x4
c00079de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079e2:	85 f6                	test   esi,esi
c00079e4:	75 db                	jne    c00079c1 <f_mkfs+0x650>
c00079e6:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079eb:	77 14                	ja     c0007a01 <f_mkfs+0x690>
c00079ed:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079f1:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079f8:	85 f6                	test   esi,esi
c00079fa:	74 05                	je     c0007a01 <f_mkfs+0x690>
c00079fc:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079ff:	77 dd                	ja     c00079de <f_mkfs+0x66d>
c0007a01:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007a05:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a09:	39 cf                	cmp    edi,ecx
c0007a0b:	76 02                	jbe    c0007a0f <f_mkfs+0x69e>
c0007a0d:	89 cf                	mov    edi,ecx
c0007a0f:	83 ec 0c             	sub    esp,0xc
c0007a12:	57                   	push   edi
c0007a13:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a17:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a1b:	55                   	push   ebp
c0007a1c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a20:	e8 07 a2 ff ff       	call   c0001c2c <disk_write>
c0007a25:	83 c4 20             	add    esp,0x20
c0007a28:	85 c0                	test   eax,eax
c0007a2a:	0f 85 f2 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007a30:	31 d2                	xor    edx,edx
c0007a32:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007a36:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a3a:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a3e:	0f 85 48 ff ff ff    	jne    c000798c <f_mkfs+0x61b>
c0007a44:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a47:	31 d2                	xor    edx,edx
c0007a49:	89 e8                	mov    eax,ebp
c0007a4b:	31 ff                	xor    edi,edi
c0007a4d:	e8 a3 a2 ff ff       	call   c0001cf5 <mem_set>
c0007a52:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a55:	ba 02 00 00 00       	mov    edx,0x2
c0007a5a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a5e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a62:	e8 70 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a67:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a6a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a6e:	e8 64 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a73:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a76:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a7a:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a7e:	e8 54 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a83:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a86:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a8a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a8e:	83 c2 02             	add    edx,0x2
c0007a91:	e8 41 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a96:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a99:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a9d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007aa1:	e8 31 a2 ff ff       	call   c0001cd7 <st_dword>
c0007aa6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007aaa:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007aaf:	89 c6                	mov    esi,eax
c0007ab1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ab5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007ab9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007abc:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007ac0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007ac3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007ac7:	39 cb                	cmp    ebx,ecx
c0007ac9:	76 02                	jbe    c0007acd <f_mkfs+0x75c>
c0007acb:	89 cb                	mov    ebx,ecx
c0007acd:	83 ec 0c             	sub    esp,0xc
c0007ad0:	53                   	push   ebx
c0007ad1:	57                   	push   edi
c0007ad2:	56                   	push   esi
c0007ad3:	55                   	push   ebp
c0007ad4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ad8:	e8 4f a1 ff ff       	call   c0001c2c <disk_write>
c0007add:	83 c4 20             	add    esp,0x20
c0007ae0:	85 c0                	test   eax,eax
c0007ae2:	0f 85 3a 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007ae8:	31 d2                	xor    edx,edx
c0007aea:	b9 00 02 00 00       	mov    ecx,0x200
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 ff a1 ff ff       	call   c0001cf5 <mem_set>
c0007af6:	31 d2                	xor    edx,edx
c0007af8:	01 de                	add    esi,ebx
c0007afa:	11 d7                	adc    edi,edx
c0007afc:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007aff:	75 bf                	jne    c0007ac0 <f_mkfs+0x74f>
c0007b01:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b05:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007b09:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007b11:	b9 00 02 00 00       	mov    ecx,0x200
c0007b16:	31 d2                	xor    edx,edx
c0007b18:	89 e8                	mov    eax,ebp
c0007b1a:	e8 d6 a1 ff ff       	call   c0001cf5 <mem_set>
c0007b1f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007b24:	ba 20 94 02 c0       	mov    edx,0xc0029420
c0007b29:	89 e8                	mov    eax,ebp
c0007b2b:	e8 b0 a1 ff ff       	call   c0001ce0 <mem_cpy>
c0007b30:	8d 45 40             	lea    eax,[ebp+0x40]
c0007b33:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007b37:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b3b:	e8 9a a1 ff ff       	call   c0001cda <st_qword>
c0007b40:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b44:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b47:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b4b:	e8 8a a1 ff ff       	call   c0001cda <st_qword>
c0007b50:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b53:	ba 20 00 00 00       	mov    edx,0x20
c0007b58:	e8 7a a1 ff ff       	call   c0001cd7 <st_dword>
c0007b5d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b61:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b65:	e8 6d a1 ff ff       	call   c0001cd7 <st_dword>
c0007b6a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b6e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b72:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b76:	e8 5c a1 ff ff       	call   c0001cd7 <st_dword>
c0007b7b:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b7e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b82:	e8 50 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b87:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b8b:	8d 50 02             	lea    edx,[eax+0x2]
c0007b8e:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b91:	e8 41 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b96:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b99:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b9e:	e8 34 a1 ff ff       	call   c0001cd7 <st_dword>
c0007ba3:	8d 45 68             	lea    eax,[ebp+0x68]
c0007ba6:	ba 00 01 00 00       	mov    edx,0x100
c0007bab:	e8 23 a1 ff ff       	call   c0001cd3 <st_word>
c0007bb0:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007bb4:	b8 0a 00 00 00       	mov    eax,0xa
c0007bb9:	48                   	dec    eax
c0007bba:	74 05                	je     c0007bc1 <f_mkfs+0x850>
c0007bbc:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007bbf:	eb f8                	jmp    c0007bb9 <f_mkfs+0x848>
c0007bc1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bc5:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007bc9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007bcd:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007bd1:	74 05                	je     c0007bd8 <f_mkfs+0x867>
c0007bd3:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007bd6:	eb f5                	jmp    c0007bcd <f_mkfs+0x85c>
c0007bd8:	8d 45 78             	lea    eax,[ebp+0x78]
c0007bdb:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007be0:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007be6:	31 db                	xor    ebx,ebx
c0007be8:	e8 e6 a0 ff ff       	call   c0001cd3 <st_word>
c0007bed:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bf3:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bf8:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bfb:	e8 d3 a0 ff ff       	call   c0001cd3 <st_word>
c0007c00:	31 c9                	xor    ecx,ecx
c0007c02:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007c05:	83 f8 01             	cmp    eax,0x1
c0007c08:	76 13                	jbe    c0007c1d <f_mkfs+0x8ac>
c0007c0a:	83 f9 70             	cmp    ecx,0x70
c0007c0d:	74 0e                	je     c0007c1d <f_mkfs+0x8ac>
c0007c0f:	89 da                	mov    edx,ebx
c0007c11:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007c16:	e8 41 a5 ff ff       	call   c000215c <xsum32>
c0007c1b:	89 c3                	mov    ebx,eax
c0007c1d:	41                   	inc    ecx
c0007c1e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c24:	75 dc                	jne    c0007c02 <f_mkfs+0x891>
c0007c26:	89 f0                	mov    eax,esi
c0007c28:	89 fa                	mov    edx,edi
c0007c2a:	83 c0 01             	add    eax,0x1
c0007c2d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007c31:	83 d2 00             	adc    edx,0x0
c0007c34:	83 ec 0c             	sub    esp,0xc
c0007c37:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c3b:	6a 01                	push   0x1
c0007c3d:	57                   	push   edi
c0007c3e:	56                   	push   esi
c0007c3f:	55                   	push   ebp
c0007c40:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c44:	e8 e3 9f ff ff       	call   c0001c2c <disk_write>
c0007c49:	83 c4 20             	add    esp,0x20
c0007c4c:	85 c0                	test   eax,eax
c0007c4e:	0f 85 ce 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007c54:	31 d2                	xor    edx,edx
c0007c56:	b9 00 02 00 00       	mov    ecx,0x200
c0007c5b:	89 e8                	mov    eax,ebp
c0007c5d:	e8 93 a0 ff ff       	call   c0001cf5 <mem_set>
c0007c62:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c67:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c6a:	e8 64 a0 ff ff       	call   c0001cd3 <st_word>
c0007c6f:	89 f0                	mov    eax,esi
c0007c71:	89 fa                	mov    edx,edi
c0007c73:	83 c0 09             	add    eax,0x9
c0007c76:	83 d2 00             	adc    edx,0x0
c0007c79:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c7c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c80:	31 c9                	xor    ecx,ecx
c0007c82:	41                   	inc    ecx
c0007c83:	89 da                	mov    edx,ebx
c0007c85:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c8a:	e8 cd a4 ff ff       	call   c000215c <xsum32>
c0007c8f:	89 c3                	mov    ebx,eax
c0007c91:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c97:	75 e9                	jne    c0007c82 <f_mkfs+0x911>
c0007c99:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c9d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007ca1:	83 c0 01             	add    eax,0x1
c0007ca4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007ca8:	83 d2 00             	adc    edx,0x0
c0007cab:	83 ec 0c             	sub    esp,0xc
c0007cae:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007cb2:	6a 01                	push   0x1
c0007cb4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cb8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cbc:	55                   	push   ebp
c0007cbd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007cc1:	e8 66 9f ff ff       	call   c0001c2c <disk_write>
c0007cc6:	83 c4 20             	add    esp,0x20
c0007cc9:	85 c0                	test   eax,eax
c0007ccb:	0f 85 51 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007cd1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cd5:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007cd9:	75 09                	jne    c0007ce4 <f_mkfs+0x973>
c0007cdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007cde:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ce2:	74 12                	je     c0007cf6 <f_mkfs+0x985>
c0007ce4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ce8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cf0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cf4:	eb 8a                	jmp    c0007c80 <f_mkfs+0x90f>
c0007cf6:	31 d2                	xor    edx,edx
c0007cf8:	b9 00 02 00 00       	mov    ecx,0x200
c0007cfd:	89 e8                	mov    eax,ebp
c0007cff:	e8 f1 9f ff ff       	call   c0001cf5 <mem_set>
c0007d04:	83 c6 0b             	add    esi,0xb
c0007d07:	83 d7 00             	adc    edi,0x0
c0007d0a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007d0e:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007d12:	31 c9                	xor    ecx,ecx
c0007d14:	41                   	inc    ecx
c0007d15:	89 da                	mov    edx,ebx
c0007d17:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007d1c:	e8 3b a4 ff ff       	call   c000215c <xsum32>
c0007d21:	89 c3                	mov    ebx,eax
c0007d23:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d29:	75 e9                	jne    c0007d14 <f_mkfs+0x9a3>
c0007d2b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d2e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d32:	83 c6 01             	add    esi,0x1
c0007d35:	83 d7 00             	adc    edi,0x0
c0007d38:	83 ec 0c             	sub    esp,0xc
c0007d3b:	6a 01                	push   0x1
c0007d3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d45:	55                   	push   ebp
c0007d46:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d4a:	e8 dd 9e ff ff       	call   c0001c2c <disk_write>
c0007d4f:	83 c4 20             	add    esp,0x20
c0007d52:	85 c0                	test   eax,eax
c0007d54:	0f 85 c8 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007d5a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d5e:	75 06                	jne    c0007d66 <f_mkfs+0x9f5>
c0007d60:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d64:	74 09                	je     c0007d6f <f_mkfs+0x9fe>
c0007d66:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d69:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d6d:	eb a3                	jmp    c0007d12 <f_mkfs+0x9a1>
c0007d6f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d73:	89 da                	mov    edx,ebx
c0007d75:	01 e8                	add    eax,ebp
c0007d77:	e8 5b 9f ff ff       	call   c0001cd7 <st_dword>
c0007d7c:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d81:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d89:	75 e4                	jne    c0007d6f <f_mkfs+0x9fe>
c0007d8b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d8e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d92:	83 c6 02             	add    esi,0x2
c0007d95:	83 d7 00             	adc    edi,0x0
c0007d98:	83 ec 0c             	sub    esp,0xc
c0007d9b:	6a 01                	push   0x1
c0007d9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da5:	55                   	push   ebp
c0007da6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007daa:	e8 7d 9e ff ff       	call   c0001c2c <disk_write>
c0007daf:	83 c4 20             	add    esp,0x20
c0007db2:	85 c0                	test   eax,eax
c0007db4:	0f 85 68 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007dba:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007dbf:	74 0d                	je     c0007dce <f_mkfs+0xa5d>
c0007dc1:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007dc9:	e9 43 fd ff ff       	jmp    c0007b11 <f_mkfs+0x7a0>
c0007dce:	b1 07                	mov    cl,0x7
c0007dd0:	e9 e3 05 00 00       	jmp    c00083b8 <f_mkfs+0x1047>
c0007dd5:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007dda:	0f 85 4f 02 00 00    	jne    c000802f <f_mkfs+0xcbe>
c0007de0:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007de5:	0f 86 22 02 00 00    	jbe    c000800d <f_mkfs+0xc9c>
c0007deb:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007df0:	0f 85 81 06 00 00    	jne    c0008477 <f_mkfs+0x1106>
c0007df6:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007df9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dfd:	83 f8 40             	cmp    eax,0x40
c0007e00:	0f 87 51 06 00 00    	ja     c0008457 <f_mkfs+0x10e6>
c0007e06:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007e0a:	85 ff                	test   edi,edi
c0007e0c:	75 1c                	jne    c0007e2a <f_mkfs+0xab9>
c0007e0e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007e11:	ba 20 93 02 c0       	mov    edx,0xc0029320
c0007e16:	c1 e9 0c             	shr    ecx,0xc
c0007e19:	bf 01 00 00 00       	mov    edi,0x1
c0007e1e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007e21:	66 85 c0             	test   ax,ax
c0007e24:	0f 85 95 01 00 00    	jne    c0007fbf <f_mkfs+0xc4e>
c0007e2a:	31 d2                	xor    edx,edx
c0007e2c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e2f:	f7 f7                	div    edi
c0007e31:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e36:	0f 86 95 01 00 00    	jbe    c0007fd1 <f_mkfs+0xc60>
c0007e3c:	83 c0 02             	add    eax,0x2
c0007e3f:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e44:	01 c0                	add    eax,eax
c0007e46:	05 ff 01 00 00       	add    eax,0x1ff
c0007e4b:	be 01 00 00 00       	mov    esi,0x1
c0007e50:	c1 e8 09             	shr    eax,0x9
c0007e53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e57:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e5b:	c1 e0 05             	shl    eax,0x5
c0007e5e:	c1 e8 09             	shr    eax,0x9
c0007e61:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e65:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e6a:	31 d2                	xor    edx,edx
c0007e6c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e70:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e74:	89 f0                	mov    eax,esi
c0007e76:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e7a:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e7e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e82:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e86:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e8a:	31 d2                	xor    edx,edx
c0007e8c:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e91:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e95:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e99:	31 db                	xor    ebx,ebx
c0007e9b:	01 c8                	add    eax,ecx
c0007e9d:	11 da                	adc    edx,ebx
c0007e9f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007ea3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007ea7:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007eab:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007eaf:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007eb3:	f7 da                	neg    edx
c0007eb5:	21 d1                	and    ecx,edx
c0007eb7:	29 d9                	sub    ecx,ebx
c0007eb9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ebe:	0f 85 20 01 00 00    	jne    c0007fe4 <f_mkfs+0xc73>
c0007ec4:	31 db                	xor    ebx,ebx
c0007ec6:	01 ce                	add    esi,ecx
c0007ec8:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ecc:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007ed0:	31 d2                	xor    edx,edx
c0007ed2:	89 f8                	mov    eax,edi
c0007ed4:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007ed8:	c1 e0 04             	shl    eax,0x4
c0007edb:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007edf:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ee3:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ee7:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eeb:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eee:	19 d3                	sbb    ebx,edx
c0007ef0:	0f 82 40 01 00 00    	jb     c0008036 <f_mkfs+0xcc5>
c0007ef6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ef9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007efd:	89 c8                	mov    eax,ecx
c0007eff:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007f04:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007f08:	29 f0                	sub    eax,esi
c0007f0a:	29 d0                	sub    eax,edx
c0007f0c:	31 d2                	xor    edx,edx
c0007f0e:	f7 f7                	div    edi
c0007f10:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f15:	89 c3                	mov    ebx,eax
c0007f17:	0f 85 b8 fe ff ff    	jne    c0007dd5 <f_mkfs+0xa64>
c0007f1d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f22:	0f 87 1d 01 00 00    	ja     c0008045 <f_mkfs+0xcd4>
c0007f28:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f2d:	0f 85 03 01 00 00    	jne    c0008036 <f_mkfs+0xcc5>
c0007f33:	83 ff 01             	cmp    edi,0x1
c0007f36:	0f 86 fa 00 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007f3c:	d1 ef                	shr    edi,1
c0007f3e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f42:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f46:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f49:	85 db                	test   ebx,ebx
c0007f4b:	75 2d                	jne    c0007f7a <f_mkfs+0xc09>
c0007f4d:	89 cb                	mov    ebx,ecx
c0007f4f:	ba 30 93 02 c0       	mov    edx,0xc0029330
c0007f54:	c1 eb 11             	shr    ebx,0x11
c0007f57:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f5f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f62:	66 85 c0             	test   ax,ax
c0007f65:	74 11                	je     c0007f78 <f_mkfs+0xc07>
c0007f67:	83 c2 02             	add    edx,0x2
c0007f6a:	39 d8                	cmp    eax,ebx
c0007f6c:	77 0a                	ja     c0007f78 <f_mkfs+0xc07>
c0007f6e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f72:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f76:	eb e7                	jmp    c0007f5f <f_mkfs+0xbee>
c0007f78:	31 db                	xor    ebx,ebx
c0007f7a:	31 d2                	xor    edx,edx
c0007f7c:	89 c8                	mov    eax,ecx
c0007f7e:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f82:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f89:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f8e:	c1 ea 09             	shr    edx,0x9
c0007f91:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f96:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f9a:	0f 87 96 00 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007fa0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007fa4:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007fac:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007fb0:	be 20 00 00 00       	mov    esi,0x20
c0007fb5:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007fba:	e9 a6 fe ff ff       	jmp    c0007e65 <f_mkfs+0xaf4>
c0007fbf:	83 c2 02             	add    edx,0x2
c0007fc2:	39 c8                	cmp    eax,ecx
c0007fc4:	0f 87 60 fe ff ff    	ja     c0007e2a <f_mkfs+0xab9>
c0007fca:	01 ff                	add    edi,edi
c0007fcc:	e9 4d fe ff ff       	jmp    c0007e1e <f_mkfs+0xaad>
c0007fd1:	8d 04 40             	lea    eax,[eax+eax*2]
c0007fd4:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007fd9:	40                   	inc    eax
c0007fda:	d1 e8                	shr    eax,1
c0007fdc:	83 c0 03             	add    eax,0x3
c0007fdf:	e9 62 fe ff ff       	jmp    c0007e46 <f_mkfs+0xad5>
c0007fe4:	31 d2                	xor    edx,edx
c0007fe6:	89 c8                	mov    eax,ecx
c0007fe8:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fec:	85 d2                	test   edx,edx
c0007fee:	74 0c                	je     c0007ffc <f_mkfs+0xc8b>
c0007ff0:	49                   	dec    ecx
c0007ff1:	46                   	inc    esi
c0007ff2:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007ff7:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007ffc:	89 c8                	mov    eax,ecx
c0007ffe:	31 d2                	xor    edx,edx
c0008000:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008004:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008008:	e9 c3 fe ff ff       	jmp    c0007ed0 <f_mkfs+0xb5f>
c000800d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008012:	77 31                	ja     c0008045 <f_mkfs+0xcd4>
c0008014:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008019:	75 1b                	jne    c0008036 <f_mkfs+0xcc5>
c000801b:	8d 04 3f             	lea    eax,[edi+edi*1]
c000801e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008022:	3d 80 00 00 00       	cmp    eax,0x80
c0008027:	0f 86 d9 fd ff ff    	jbe    c0007e06 <f_mkfs+0xa95>
c000802d:	eb 07                	jmp    c0008036 <f_mkfs+0xcc5>
c000802f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008034:	76 0a                	jbe    c0008040 <f_mkfs+0xccf>
c0008036:	bb 0e 00 00 00       	mov    ebx,0xe
c000803b:	e9 ff 03 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0008040:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008045:	31 d2                	xor    edx,edx
c0008047:	b9 00 02 00 00       	mov    ecx,0x200
c000804c:	89 e8                	mov    eax,ebp
c000804e:	e8 a2 9c ff ff       	call   c0001cf5 <mem_set>
c0008053:	b9 0b 00 00 00       	mov    ecx,0xb
c0008058:	ba 42 94 02 c0       	mov    edx,0xc0029442
c000805d:	89 e8                	mov    eax,ebp
c000805f:	e8 7c 9c ff ff       	call   c0001ce0 <mem_cpy>
c0008064:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008067:	ba 00 02 00 00       	mov    edx,0x200
c000806c:	e8 62 9c ff ff       	call   c0001cd3 <st_word>
c0008071:	89 f8                	mov    eax,edi
c0008073:	0f b7 d6             	movzx  edx,si
c0008076:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0008079:	8d 45 0e             	lea    eax,[ebp+0xe]
c000807c:	e8 52 9c ff ff       	call   c0001cd3 <st_word>
c0008081:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0008085:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000808a:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c000808d:	75 08                	jne    c0008097 <f_mkfs+0xd26>
c000808f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0008097:	8d 45 11             	lea    eax,[ebp+0x11]
c000809a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000809e:	e8 30 9c ff ff       	call   c0001cd3 <st_word>
c00080a3:	b8 ff ff 00 00       	mov    eax,0xffff
c00080a8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00080ac:	39 d0                	cmp    eax,edx
c00080ae:	b8 00 00 00 00       	mov    eax,0x0
c00080b3:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00080b7:	72 0a                	jb     c00080c3 <f_mkfs+0xd52>
c00080b9:	8d 45 13             	lea    eax,[ebp+0x13]
c00080bc:	e8 12 9c ff ff       	call   c0001cd3 <st_word>
c00080c1:	eb 08                	jmp    c00080cb <f_mkfs+0xd5a>
c00080c3:	8d 45 20             	lea    eax,[ebp+0x20]
c00080c6:	e8 0c 9c ff ff       	call   c0001cd7 <st_dword>
c00080cb:	8d 45 18             	lea    eax,[ebp+0x18]
c00080ce:	ba 3f 00 00 00       	mov    edx,0x3f
c00080d3:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00080d7:	e8 f7 9b ff ff       	call   c0001cd3 <st_word>
c00080dc:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080df:	ba ff 00 00 00       	mov    edx,0xff
c00080e4:	e8 ea 9b ff ff       	call   c0001cd3 <st_word>
c00080e9:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080f0:	e8 e2 9b ff ff       	call   c0001cd7 <st_dword>
c00080f5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080fa:	75 57                	jne    c0008153 <f_mkfs+0xde2>
c00080fc:	8d 45 43             	lea    eax,[ebp+0x43]
c00080ff:	ba 00 00 21 50       	mov    edx,0x50210000
c0008104:	e8 ce 9b ff ff       	call   c0001cd7 <st_dword>
c0008109:	8d 45 24             	lea    eax,[ebp+0x24]
c000810c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008110:	e8 c2 9b ff ff       	call   c0001cd7 <st_dword>
c0008115:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008118:	ba 02 00 00 00       	mov    edx,0x2
c000811d:	e8 b5 9b ff ff       	call   c0001cd7 <st_dword>
c0008122:	8d 45 30             	lea    eax,[ebp+0x30]
c0008125:	ba 01 00 00 00       	mov    edx,0x1
c000812a:	e8 a4 9b ff ff       	call   c0001cd3 <st_word>
c000812f:	8d 45 32             	lea    eax,[ebp+0x32]
c0008132:	ba 06 00 00 00       	mov    edx,0x6
c0008137:	e8 97 9b ff ff       	call   c0001cd3 <st_word>
c000813c:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008140:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008144:	8d 45 47             	lea    eax,[ebp+0x47]
c0008147:	b9 13 00 00 00       	mov    ecx,0x13
c000814c:	ba 4e 94 02 c0       	mov    edx,0xc002944e
c0008151:	eb 2f                	jmp    c0008182 <f_mkfs+0xe11>
c0008153:	8d 45 27             	lea    eax,[ebp+0x27]
c0008156:	ba 00 00 21 50       	mov    edx,0x50210000
c000815b:	e8 77 9b ff ff       	call   c0001cd7 <st_dword>
c0008160:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008165:	8d 45 16             	lea    eax,[ebp+0x16]
c0008168:	e8 66 9b ff ff       	call   c0001cd3 <st_word>
c000816d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008171:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0008175:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0008178:	b9 13 00 00 00       	mov    ecx,0x13
c000817d:	ba 62 94 02 c0       	mov    edx,0xc0029462
c0008182:	e8 59 9b ff ff       	call   c0001ce0 <mem_cpy>
c0008187:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c000818d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008192:	89 f0                	mov    eax,esi
c0008194:	e8 3a 9b ff ff       	call   c0001cd3 <st_word>
c0008199:	83 ec 0c             	sub    esp,0xc
c000819c:	6a 01                	push   0x1
c000819e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a6:	55                   	push   ebp
c00081a7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081ab:	e8 7c 9a ff ff       	call   c0001c2c <disk_write>
c00081b0:	83 c4 20             	add    esp,0x20
c00081b3:	85 c0                	test   eax,eax
c00081b5:	0f 85 67 02 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00081bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081c0:	0f 85 b7 00 00 00    	jne    c000827d <f_mkfs+0xf0c>
c00081c6:	83 ec 0c             	sub    esp,0xc
c00081c9:	6a 01                	push   0x1
c00081cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081cf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00081d3:	83 c0 06             	add    eax,0x6
c00081d6:	83 d2 00             	adc    edx,0x0
c00081d9:	52                   	push   edx
c00081da:	50                   	push   eax
c00081db:	55                   	push   ebp
c00081dc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081e0:	e8 47 9a ff ff       	call   c0001c2c <disk_write>
c00081e5:	83 c4 20             	add    esp,0x20
c00081e8:	b9 00 02 00 00       	mov    ecx,0x200
c00081ed:	31 d2                	xor    edx,edx
c00081ef:	89 e8                	mov    eax,ebp
c00081f1:	e8 ff 9a ff ff       	call   c0001cf5 <mem_set>
c00081f6:	ba 52 52 61 41       	mov    edx,0x41615252
c00081fb:	89 e8                	mov    eax,ebp
c00081fd:	e8 d5 9a ff ff       	call   c0001cd7 <st_dword>
c0008202:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008208:	ba 72 72 41 61       	mov    edx,0x61417272
c000820d:	e8 c5 9a ff ff       	call   c0001cd7 <st_dword>
c0008212:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008215:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000821b:	e8 b7 9a ff ff       	call   c0001cd7 <st_dword>
c0008220:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008226:	ba 02 00 00 00       	mov    edx,0x2
c000822b:	e8 a7 9a ff ff       	call   c0001cd7 <st_dword>
c0008230:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008235:	89 f0                	mov    eax,esi
c0008237:	e8 97 9a ff ff       	call   c0001cd3 <st_word>
c000823c:	83 ec 0c             	sub    esp,0xc
c000823f:	6a 01                	push   0x1
c0008241:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008245:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008249:	83 c0 07             	add    eax,0x7
c000824c:	83 d2 00             	adc    edx,0x0
c000824f:	52                   	push   edx
c0008250:	50                   	push   eax
c0008251:	55                   	push   ebp
c0008252:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008256:	e8 d1 99 ff ff       	call   c0001c2c <disk_write>
c000825b:	83 c4 14             	add    esp,0x14
c000825e:	6a 01                	push   0x1
c0008260:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008264:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008268:	83 c0 01             	add    eax,0x1
c000826b:	83 d2 00             	adc    edx,0x0
c000826e:	52                   	push   edx
c000826f:	50                   	push   eax
c0008270:	55                   	push   ebp
c0008271:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008275:	e8 b2 99 ff ff       	call   c0001c2c <disk_write>
c000827a:	83 c4 20             	add    esp,0x20
c000827d:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008284:	31 d2                	xor    edx,edx
c0008286:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000828c:	31 db                	xor    ebx,ebx
c000828e:	89 e8                	mov    eax,ebp
c0008290:	e8 60 9a ff ff       	call   c0001cf5 <mem_set>
c0008295:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000829a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00082a1:	0f 94 c3             	sete   bl
c00082a4:	4b                   	dec    ebx
c00082a5:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00082ab:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00082b1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082b6:	75 21                	jne    c00082d9 <f_mkfs+0xf68>
c00082b8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00082bd:	89 e8                	mov    eax,ebp
c00082bf:	e8 13 9a ff ff       	call   c0001cd7 <st_dword>
c00082c4:	8d 45 04             	lea    eax,[ebp+0x4]
c00082c7:	83 ca ff             	or     edx,0xffffffff
c00082ca:	e8 08 9a ff ff       	call   c0001cd7 <st_dword>
c00082cf:	8d 45 08             	lea    eax,[ebp+0x8]
c00082d2:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00082d7:	eb 04                	jmp    c00082dd <f_mkfs+0xf6c>
c00082d9:	89 da                	mov    edx,ebx
c00082db:	89 e8                	mov    eax,ebp
c00082dd:	e8 f5 99 ff ff       	call   c0001cd7 <st_dword>
c00082e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082ea:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082ee:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082f2:	39 ce                	cmp    esi,ecx
c00082f4:	76 02                	jbe    c00082f8 <f_mkfs+0xf87>
c00082f6:	89 ce                	mov    esi,ecx
c00082f8:	83 ec 0c             	sub    esp,0xc
c00082fb:	56                   	push   esi
c00082fc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008300:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008304:	55                   	push   ebp
c0008305:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008309:	e8 1e 99 ff ff       	call   c0001c2c <disk_write>
c000830e:	83 c4 20             	add    esp,0x20
c0008311:	85 c0                	test   eax,eax
c0008313:	0f 85 09 01 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008319:	31 d2                	xor    edx,edx
c000831b:	b9 00 02 00 00       	mov    ecx,0x200
c0008320:	89 e8                	mov    eax,ebp
c0008322:	e8 ce 99 ff ff       	call   c0001cf5 <mem_set>
c0008327:	31 d2                	xor    edx,edx
c0008329:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000832d:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008331:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008335:	75 b3                	jne    c00082ea <f_mkfs+0xf79>
c0008337:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000833a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008341:	40                   	inc    eax
c0008342:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008346:	0f 87 65 ff ff ff    	ja     c00082b1 <f_mkfs+0xf40>
c000834c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008351:	74 04                	je     c0008357 <f_mkfs+0xfe6>
c0008353:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008357:	89 fb                	mov    ebx,edi
c0008359:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000835d:	76 04                	jbe    c0008363 <f_mkfs+0xff2>
c000835f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008363:	83 ec 0c             	sub    esp,0xc
c0008366:	53                   	push   ebx
c0008367:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836f:	55                   	push   ebp
c0008370:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008374:	e8 b3 98 ff ff       	call   c0001c2c <disk_write>
c0008379:	83 c4 20             	add    esp,0x20
c000837c:	85 c0                	test   eax,eax
c000837e:	0f 85 9e 00 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008384:	31 d2                	xor    edx,edx
c0008386:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000838a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000838e:	29 df                	sub    edi,ebx
c0008390:	75 c5                	jne    c0008357 <f_mkfs+0xfe6>
c0008392:	b1 0c                	mov    cl,0xc
c0008394:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008399:	74 1d                	je     c00083b8 <f_mkfs+0x1047>
c000839b:	b8 ff ff 00 00       	mov    eax,0xffff
c00083a0:	b1 06                	mov    cl,0x6
c00083a2:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00083a6:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00083aa:	72 0c                	jb     c00083b8 <f_mkfs+0x1047>
c00083ac:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00083b1:	0f 94 c1             	sete   cl
c00083b4:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00083b8:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00083bd:	75 4c                	jne    c000840b <f_mkfs+0x109a>
c00083bf:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00083c3:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00083c7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00083ce:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00083d5:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083e0:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083eb:	0f b6 c9             	movzx  ecx,cl
c00083ee:	83 ec 0c             	sub    esp,0xc
c00083f1:	55                   	push   ebp
c00083f2:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083fd:	e8 2f c2 ff ff       	call   c0004631 <create_partition>
c0008402:	83 c4 10             	add    esp,0x10
c0008405:	89 c3                	mov    ebx,eax
c0008407:	85 c0                	test   eax,eax
c0008409:	75 34                	jne    c000843f <f_mkfs+0x10ce>
c000840b:	31 db                	xor    ebx,ebx
c000840d:	50                   	push   eax
c000840e:	6a 00                	push   0x0
c0008410:	6a 00                	push   0x0
c0008412:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008416:	e8 27 98 ff ff       	call   c0001c42 <disk_ioctl>
c000841b:	83 c4 10             	add    esp,0x10
c000841e:	85 c0                	test   eax,eax
c0008420:	74 1d                	je     c000843f <f_mkfs+0x10ce>
c0008422:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000842a:	75 0c                	jne    c0008438 <f_mkfs+0x10c7>
c000842c:	83 ec 0c             	sub    esp,0xc
c000842f:	55                   	push   ebp
c0008430:	e8 75 00 00 00       	call   c00084aa <ff_memfree>
c0008435:	83 c4 10             	add    esp,0x10
c0008438:	bb 01 00 00 00       	mov    ebx,0x1
c000843d:	eb 48                	jmp    c0008487 <f_mkfs+0x1116>
c000843f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008447:	75 3e                	jne    c0008487 <f_mkfs+0x1116>
c0008449:	83 ec 0c             	sub    esp,0xc
c000844c:	55                   	push   ebp
c000844d:	e8 58 00 00 00       	call   c00084aa <ff_memfree>
c0008452:	83 c4 10             	add    esp,0x10
c0008455:	eb 30                	jmp    c0008487 <f_mkfs+0x1116>
c0008457:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000845c:	0f 85 eb fa ff ff    	jne    c0007f4d <f_mkfs+0xbdc>
c0008462:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008466:	81 ff 80 00 00 00    	cmp    edi,0x80
c000846c:	0f 86 b8 f9 ff ff    	jbe    c0007e2a <f_mkfs+0xab9>
c0008472:	e9 bf fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008477:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000847c:	0f 85 c0 fa ff ff    	jne    c0007f42 <f_mkfs+0xbd1>
c0008482:	e9 af fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008487:	81 c4 9c 00 00 00    	add    esp,0x9c
c000848d:	89 d8                	mov    eax,ebx
c000848f:	5b                   	pop    ebx
c0008490:	5e                   	pop    esi
c0008491:	5f                   	pop    edi
c0008492:	5d                   	pop    ebp
c0008493:	c3                   	ret    

c0008494 <ff_memalloc>:
c0008494:	83 ec 0c             	sub    esp,0xc
c0008497:	83 ec 0c             	sub    esp,0xc
c000849a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000849e:	e8 9d 73 00 00       	call   c000f840 <malloc>
c00084a3:	83 c4 10             	add    esp,0x10
c00084a6:	83 c4 0c             	add    esp,0xc
c00084a9:	c3                   	ret    

c00084aa <ff_memfree>:
c00084aa:	83 ec 0c             	sub    esp,0xc
c00084ad:	83 ec 0c             	sub    esp,0xc
c00084b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084b4:	e8 97 73 00 00       	call   c000f850 <free>
c00084b9:	83 c4 10             	add    esp,0x10
c00084bc:	90                   	nop
c00084bd:	83 c4 0c             	add    esp,0xc
c00084c0:	c3                   	ret    

c00084c1 <ff_uni2oem>:
c00084c1:	83 ec 14             	sub    esp,0x14
c00084c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00084c8:	66 89 04 24          	mov    WORD PTR [esp],ax
c00084cc:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084d3:	c7 44 24 0c 80 97 02 c0 	mov    DWORD PTR [esp+0xc],0xc0029780
c00084db:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084e0:	77 0b                	ja     c00084ed <ff_uni2oem+0x2c>
c00084e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084e6:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084eb:	eb 5b                	jmp    c0008548 <ff_uni2oem+0x87>
c00084ed:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084f5:	77 51                	ja     c0008548 <ff_uni2oem+0x87>
c00084f7:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084fd:	75 49                	jne    c0008548 <ff_uni2oem+0x87>
c00084ff:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008506:	eb 0b                	jmp    c0008513 <ff_uni2oem+0x52>
c0008508:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000850d:	40                   	inc    eax
c000850e:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008513:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008519:	77 1b                	ja     c0008536 <ff_uni2oem+0x75>
c000851b:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008520:	01 c0                	add    eax,eax
c0008522:	89 c2                	mov    edx,eax
c0008524:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008528:	01 d0                	add    eax,edx
c000852a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000852d:	0f b7 c0             	movzx  eax,ax
c0008530:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008534:	75 d2                	jne    c0008508 <ff_uni2oem+0x47>
c0008536:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000853b:	83 e8 80             	sub    eax,0xffffff80
c000853e:	25 ff 00 00 00       	and    eax,0xff
c0008543:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008548:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000854d:	83 c4 14             	add    esp,0x14
c0008550:	c3                   	ret    

c0008551 <ff_oem2uni>:
c0008551:	83 ec 18             	sub    esp,0x18
c0008554:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008558:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000855c:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008561:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008565:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000856c:	c7 44 24 10 80 97 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029780
c0008574:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000857a:	77 0b                	ja     c0008587 <ff_oem2uni+0x36>
c000857c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008580:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008585:	eb 2d                	jmp    c00085b4 <ff_oem2uni+0x63>
c0008587:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000858d:	75 25                	jne    c00085b4 <ff_oem2uni+0x63>
c000858f:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008596:	77 1c                	ja     c00085b4 <ff_oem2uni+0x63>
c0008598:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000859d:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00085a2:	01 c0                	add    eax,eax
c00085a4:	89 c2                	mov    edx,eax
c00085a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085aa:	01 d0                	add    eax,edx
c00085ac:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085af:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00085b4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00085b9:	83 c4 18             	add    esp,0x18
c00085bc:	c3                   	ret    

c00085bd <ff_wtoupper>:
c00085bd:	83 ec 10             	sub    esp,0x10
c00085c0:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00085c8:	0f 87 3e 01 00 00    	ja     c000870c <ff_wtoupper+0x14f>
c00085ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00085d2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00085d7:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085de:	77 07                	ja     c00085e7 <ff_wtoupper+0x2a>
c00085e0:	b8 80 95 02 c0       	mov    eax,0xc0029580
c00085e5:	eb 05                	jmp    c00085ec <ff_wtoupper+0x2f>
c00085e7:	b8 c0 94 02 c0       	mov    eax,0xc00294c0
c00085ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085f4:	8d 50 02             	lea    edx,[eax+0x2]
c00085f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085fb:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085fe:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008603:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008609:	0f 84 f4 00 00 00    	je     c0008703 <ff_wtoupper+0x146>
c000860f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008614:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008619:	0f 82 e4 00 00 00    	jb     c0008703 <ff_wtoupper+0x146>
c000861f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008623:	8d 50 02             	lea    edx,[eax+0x2]
c0008626:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000862a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000862d:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008632:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008637:	66 c1 e8 08          	shr    ax,0x8
c000863b:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008640:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008647:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000864c:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008651:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008656:	01 ca                	add    edx,ecx
c0008658:	39 d0                	cmp    eax,edx
c000865a:	0f 8d 86 00 00 00    	jge    c00086e6 <ff_wtoupper+0x129>
c0008660:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008665:	83 f8 08             	cmp    eax,0x8
c0008668:	0f 87 94 00 00 00    	ja     c0008702 <ff_wtoupper+0x145>
c000866e:	8b 04 85 80 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b80]
c0008675:	ff e0                	jmp    eax
c0008677:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000867c:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008681:	29 c2                	sub    edx,eax
c0008683:	89 d0                	mov    eax,edx
c0008685:	01 c0                	add    eax,eax
c0008687:	89 c2                	mov    edx,eax
c0008689:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000868d:	01 d0                	add    eax,edx
c000868f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008692:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008697:	eb 4b                	jmp    c00086e4 <ff_wtoupper+0x127>
c0008699:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000869e:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00086a2:	83 e0 01             	and    eax,0x1
c00086a5:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00086aa:	eb 38                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086ac:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00086b2:	eb 30                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086b4:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00086ba:	eb 28                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086bc:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00086c2:	eb 20                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086c4:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00086ca:	eb 18                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086cc:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00086d2:	eb 10                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086d4:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086da:	eb 08                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086dc:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086e3:	90                   	nop
c00086e4:	eb 1c                	jmp    c0008702 <ff_wtoupper+0x145>
c00086e6:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086ec:	0f 85 fe fe ff ff    	jne    c00085f0 <ff_wtoupper+0x33>
c00086f2:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086f7:	01 c0                	add    eax,eax
c00086f9:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086fd:	e9 ee fe ff ff       	jmp    c00085f0 <ff_wtoupper+0x33>
c0008702:	90                   	nop
c0008703:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008708:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000870c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008710:	83 c4 10             	add    esp,0x10
c0008713:	c3                   	ret    

c0008714 <psrc_set_converter>:
c0008714:	56                   	push   esi
c0008715:	89 d6                	mov    esi,edx
c0008717:	53                   	push   ebx
c0008718:	89 c3                	mov    ebx,eax
c000871a:	83 ec 0c             	sub    esp,0xc
c000871d:	52                   	push   edx
c000871e:	50                   	push   eax
c000871f:	e8 6f 55 00 00       	call   c000dc93 <sinc_set_converter>
c0008724:	83 c4 10             	add    esp,0x10
c0008727:	85 c0                	test   eax,eax
c0008729:	74 25                	je     c0008750 <psrc_set_converter+0x3c>
c000872b:	50                   	push   eax
c000872c:	50                   	push   eax
c000872d:	56                   	push   esi
c000872e:	53                   	push   ebx
c000872f:	e8 17 5d 00 00       	call   c000e44b <zoh_set_converter>
c0008734:	83 c4 10             	add    esp,0x10
c0008737:	85 c0                	test   eax,eax
c0008739:	74 15                	je     c0008750 <psrc_set_converter+0x3c>
c000873b:	51                   	push   ecx
c000873c:	51                   	push   ecx
c000873d:	56                   	push   esi
c000873e:	53                   	push   ebx
c000873f:	e8 0f 11 00 00       	call   c0009853 <linear_set_converter>
c0008744:	83 c4 10             	add    esp,0x10
c0008747:	ba 0a 00 00 00       	mov    edx,0xa
c000874c:	85 c0                	test   eax,eax
c000874e:	75 02                	jne    c0008752 <psrc_set_converter+0x3e>
c0008750:	31 d2                	xor    edx,edx
c0008752:	89 d0                	mov    eax,edx
c0008754:	5a                   	pop    edx
c0008755:	5b                   	pop    ebx
c0008756:	5e                   	pop    esi
c0008757:	c3                   	ret    

c0008758 <src_delete>:
c0008758:	53                   	push   ebx
c0008759:	83 ec 08             	sub    esp,0x8
c000875c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008760:	85 db                	test   ebx,ebx
c0008762:	74 29                	je     c000878d <src_delete+0x35>
c0008764:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008767:	85 c0                	test   eax,eax
c0008769:	74 0c                	je     c0008777 <src_delete+0x1f>
c000876b:	83 ec 0c             	sub    esp,0xc
c000876e:	50                   	push   eax
c000876f:	e8 dc 70 00 00       	call   c000f850 <free>
c0008774:	83 c4 10             	add    esp,0x10
c0008777:	50                   	push   eax
c0008778:	6a 3c                	push   0x3c
c000877a:	6a 00                	push   0x0
c000877c:	53                   	push   ebx
c000877d:	e8 f6 7f ff ff       	call   c0000778 <memset>
c0008782:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008785:	e8 c6 70 00 00       	call   c000f850 <free>
c000878a:	83 c4 10             	add    esp,0x10
c000878d:	31 c0                	xor    eax,eax
c000878f:	83 c4 08             	add    esp,0x8
c0008792:	5b                   	pop    ebx
c0008793:	c3                   	ret    

c0008794 <src_process>:
c0008794:	55                   	push   ebp
c0008795:	57                   	push   edi
c0008796:	56                   	push   esi
c0008797:	53                   	push   ebx
c0008798:	83 ec 1c             	sub    esp,0x1c
c000879b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000879f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00087a3:	85 ed                	test   ebp,ebp
c00087a5:	0f 84 6f 01 00 00    	je     c000891a <src_process+0x186>
c00087ab:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c00087af:	0f 84 6c 01 00 00    	je     c0008921 <src_process+0x18d>
c00087b5:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00087b9:	0f 84 62 01 00 00    	je     c0008921 <src_process+0x18d>
c00087bf:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00087c6:	0f 85 5c 01 00 00    	jne    c0008928 <src_process+0x194>
c00087cc:	85 db                	test   ebx,ebx
c00087ce:	0f 84 5b 01 00 00    	je     c000892f <src_process+0x19b>
c00087d4:	8b 33                	mov    esi,DWORD PTR [ebx]
c00087d6:	85 f6                	test   esi,esi
c00087d8:	0f 84 58 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087de:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087e1:	85 ff                	test   edi,edi
c00087e3:	0f 84 4d 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087e9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087ec:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087f7:	68 00 00 70 3f       	push   0x3f700000
c00087fc:	6a 00                	push   0x0
c00087fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008802:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008806:	e8 34 fc 01 00       	call   c002843f <__ltdf2>
c000880b:	83 c4 10             	add    esp,0x10
c000880e:	85 c0                	test   eax,eax
c0008810:	0f 88 27 01 00 00    	js     c000893d <src_process+0x1a9>
c0008816:	68 00 00 70 40       	push   0x40700000
c000881b:	6a 00                	push   0x0
c000881d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008821:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008825:	e8 f7 fb 01 00       	call   c0028421 <__gtdf2>
c000882a:	83 c4 10             	add    esp,0x10
c000882d:	85 c0                	test   eax,eax
c000882f:	0f 8f 08 01 00 00    	jg     c000893d <src_process+0x1a9>
c0008835:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008839:	79 07                	jns    c0008842 <src_process+0xae>
c000883b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008842:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008845:	85 c0                	test   eax,eax
c0008847:	79 50                	jns    c0008899 <src_process+0x105>
c0008849:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008850:	39 fe                	cmp    esi,edi
c0008852:	72 37                	jb     c000888b <src_process+0xf7>
c0008854:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000885b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008862:	68 00 00 70 3f       	push   0x3f700000
c0008867:	6a 00                	push   0x0
c0008869:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000886c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000886f:	e8 cb fb 01 00       	call   c002843f <__ltdf2>
c0008874:	83 c4 10             	add    esp,0x10
c0008877:	85 c0                	test   eax,eax
c0008879:	79 37                	jns    c00088b2 <src_process+0x11e>
c000887b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000887f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008883:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008886:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008889:	eb 27                	jmp    c00088b2 <src_process+0x11e>
c000888b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000888e:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008892:	8d 04 86             	lea    eax,[esi+eax*4]
c0008895:	39 c7                	cmp    edi,eax
c0008897:	eb 0d                	jmp    c00088a6 <src_process+0x112>
c0008899:	39 fe                	cmp    esi,edi
c000889b:	72 ee                	jb     c000888b <src_process+0xf7>
c000889d:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c00088a1:	8d 04 87             	lea    eax,[edi+eax*4]
c00088a4:	39 c6                	cmp    esi,eax
c00088a6:	73 ac                	jae    c0008854 <src_process+0xc0>
c00088a8:	b8 10 00 00 00       	mov    eax,0x10
c00088ad:	e9 90 00 00 00       	jmp    c0008942 <src_process+0x1ae>
c00088b2:	83 ec 10             	sub    esp,0x10
c00088b5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00088b8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00088bb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00088be:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00088c1:	e8 7e f2 01 00       	call   c0027b44 <__subdf3>
c00088c6:	83 c4 18             	add    esp,0x18
c00088c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00088cd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00088d1:	52                   	push   edx
c00088d2:	50                   	push   eax
c00088d3:	e8 f8 fc 01 00       	call   c00285d0 <fabs>
c00088d8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088dc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088e0:	83 c4 10             	add    esp,0x10
c00088e3:	68 af 03 d2 3c       	push   0x3cd203af
c00088e8:	68 16 56 e7 9e       	push   0x9ee75616
c00088ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f5:	e8 45 fb 01 00       	call   c002843f <__ltdf2>
c00088fa:	83 c4 10             	add    esp,0x10
c00088fd:	85 c0                	test   eax,eax
c00088ff:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0008903:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c0008907:	79 05                	jns    c000890e <src_process+0x17a>
c0008909:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000890c:	eb 03                	jmp    c0008911 <src_process+0x17d>
c000890e:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0008911:	83 c4 1c             	add    esp,0x1c
c0008914:	5b                   	pop    ebx
c0008915:	5e                   	pop    esi
c0008916:	5f                   	pop    edi
c0008917:	5d                   	pop    ebp
c0008918:	ff e0                	jmp    eax
c000891a:	b8 02 00 00 00       	mov    eax,0x2
c000891f:	eb 21                	jmp    c0008942 <src_process+0x1ae>
c0008921:	b8 07 00 00 00       	mov    eax,0x7
c0008926:	eb 1a                	jmp    c0008942 <src_process+0x1ae>
c0008928:	b8 12 00 00 00       	mov    eax,0x12
c000892d:	eb 13                	jmp    c0008942 <src_process+0x1ae>
c000892f:	b8 03 00 00 00       	mov    eax,0x3
c0008934:	eb 0c                	jmp    c0008942 <src_process+0x1ae>
c0008936:	b8 04 00 00 00       	mov    eax,0x4
c000893b:	eb 05                	jmp    c0008942 <src_process+0x1ae>
c000893d:	b8 06 00 00 00       	mov    eax,0x6
c0008942:	83 c4 1c             	add    esp,0x1c
c0008945:	5b                   	pop    ebx
c0008946:	5e                   	pop    esi
c0008947:	5f                   	pop    edi
c0008948:	5d                   	pop    ebp
c0008949:	c3                   	ret    

c000894a <src_callback_read>:
c000894a:	55                   	push   ebp
c000894b:	57                   	push   edi
c000894c:	56                   	push   esi
c000894d:	53                   	push   ebx
c000894e:	83 ec 3c             	sub    esp,0x3c
c0008951:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008955:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008959:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000895d:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008961:	85 ed                	test   ebp,ebp
c0008963:	0f 8e 52 01 00 00    	jle    c0008abb <src_callback_read+0x171>
c0008969:	85 db                	test   ebx,ebx
c000896b:	0f 84 4a 01 00 00    	je     c0008abb <src_callback_read+0x171>
c0008971:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008978:	74 0c                	je     c0008986 <src_callback_read+0x3c>
c000897a:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008981:	e9 35 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008986:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000898a:	75 0c                	jne    c0008998 <src_callback_read+0x4e>
c000898c:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008993:	e9 23 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008998:	51                   	push   ecx
c0008999:	6a 24                	push   0x24
c000899b:	6a 00                	push   0x0
c000899d:	8d 44 24 18          	lea    eax,[esp+0x18]
c00089a1:	50                   	push   eax
c00089a2:	e8 d1 7d ff ff       	call   c0000778 <memset>
c00089a7:	83 c4 10             	add    esp,0x10
c00089aa:	68 00 00 70 3f       	push   0x3f700000
c00089af:	6a 00                	push   0x0
c00089b1:	57                   	push   edi
c00089b2:	56                   	push   esi
c00089b3:	e8 87 fa 01 00       	call   c002843f <__ltdf2>
c00089b8:	83 c4 10             	add    esp,0x10
c00089bb:	85 c0                	test   eax,eax
c00089bd:	78 3e                	js     c00089fd <src_callback_read+0xb3>
c00089bf:	68 00 00 70 40       	push   0x40700000
c00089c4:	6a 00                	push   0x0
c00089c6:	57                   	push   edi
c00089c7:	56                   	push   esi
c00089c8:	e8 54 fa 01 00       	call   c0028421 <__gtdf2>
c00089cd:	83 c4 10             	add    esp,0x10
c00089d0:	85 c0                	test   eax,eax
c00089d2:	7f 29                	jg     c00089fd <src_callback_read+0xb3>
c00089d4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00089d8:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089e0:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089e4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089e7:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089ef:	31 f6                	xor    esi,esi
c00089f1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089f4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089f8:	e9 97 00 00 00       	jmp    c0008a94 <src_callback_read+0x14a>
c00089fd:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008a04:	e9 b2 00 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008a09:	8d 44 24 04          	lea    eax,[esp+0x4]
c0008a0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008a11:	52                   	push   edx
c0008a12:	52                   	push   edx
c0008a13:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008a17:	50                   	push   eax
c0008a18:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a1b:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008a1e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008a22:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008a26:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008a2a:	83 c4 10             	add    esp,0x10
c0008a2d:	85 c0                	test   eax,eax
c0008a2f:	75 08                	jne    c0008a39 <src_callback_read+0xef>
c0008a31:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008a39:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a40:	50                   	push   eax
c0008a41:	50                   	push   eax
c0008a42:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a46:	50                   	push   eax
c0008a47:	53                   	push   ebx
c0008a48:	e8 47 fd ff ff       	call   c0008794 <src_process>
c0008a4d:	83 c4 10             	add    esp,0x10
c0008a50:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a57:	85 c0                	test   eax,eax
c0008a59:	75 49                	jne    c0008aa4 <src_callback_read+0x15a>
c0008a5b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a5f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a62:	89 f9                	mov    ecx,edi
c0008a64:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a68:	0f af ca             	imul   ecx,edx
c0008a6b:	c1 e1 02             	shl    ecx,0x2
c0008a6e:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a72:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a76:	0f af d1             	imul   edx,ecx
c0008a79:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a7d:	c1 e2 02             	shl    edx,0x2
c0008a80:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a84:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a87:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a8c:	74 12                	je     c0008aa0 <src_callback_read+0x156>
c0008a8e:	39 d5                	cmp    ebp,edx
c0008a90:	7e 14                	jle    c0008aa6 <src_callback_read+0x15c>
c0008a92:	89 d6                	mov    esi,edx
c0008a94:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a99:	75 9e                	jne    c0008a39 <src_callback_read+0xef>
c0008a9b:	e9 69 ff ff ff       	jmp    c0008a09 <src_callback_read+0xbf>
c0008aa0:	85 c9                	test   ecx,ecx
c0008aa2:	75 ea                	jne    c0008a8e <src_callback_read+0x144>
c0008aa4:	89 f2                	mov    edx,esi
c0008aa6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008aaa:	85 c0                	test   eax,eax
c0008aac:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008aaf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008ab3:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008ab6:	74 05                	je     c0008abd <src_callback_read+0x173>
c0008ab8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008abb:	31 d2                	xor    edx,edx
c0008abd:	83 c4 3c             	add    esp,0x3c
c0008ac0:	89 d0                	mov    eax,edx
c0008ac2:	5b                   	pop    ebx
c0008ac3:	5e                   	pop    esi
c0008ac4:	5f                   	pop    edi
c0008ac5:	5d                   	pop    ebp
c0008ac6:	c3                   	ret    

c0008ac7 <src_set_ratio>:
c0008ac7:	57                   	push   edi
c0008ac8:	ba 02 00 00 00       	mov    edx,0x2
c0008acd:	56                   	push   esi
c0008ace:	53                   	push   ebx
c0008acf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ad3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008ad7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008adb:	85 db                	test   ebx,ebx
c0008add:	74 4c                	je     c0008b2b <src_set_ratio+0x64>
c0008adf:	ba 07 00 00 00       	mov    edx,0x7
c0008ae4:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008ae8:	74 41                	je     c0008b2b <src_set_ratio+0x64>
c0008aea:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008aee:	74 3b                	je     c0008b2b <src_set_ratio+0x64>
c0008af0:	68 00 00 70 3f       	push   0x3f700000
c0008af5:	6a 00                	push   0x0
c0008af7:	57                   	push   edi
c0008af8:	56                   	push   esi
c0008af9:	e8 41 f9 01 00       	call   c002843f <__ltdf2>
c0008afe:	83 c4 10             	add    esp,0x10
c0008b01:	ba 06 00 00 00       	mov    edx,0x6
c0008b06:	85 c0                	test   eax,eax
c0008b08:	78 21                	js     c0008b2b <src_set_ratio+0x64>
c0008b0a:	68 00 00 70 40       	push   0x40700000
c0008b0f:	6a 00                	push   0x0
c0008b11:	57                   	push   edi
c0008b12:	56                   	push   esi
c0008b13:	e8 09 f9 01 00       	call   c0028421 <__gtdf2>
c0008b18:	83 c4 10             	add    esp,0x10
c0008b1b:	ba 06 00 00 00       	mov    edx,0x6
c0008b20:	85 c0                	test   eax,eax
c0008b22:	7f 07                	jg     c0008b2b <src_set_ratio+0x64>
c0008b24:	89 33                	mov    DWORD PTR [ebx],esi
c0008b26:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008b29:	31 d2                	xor    edx,edx
c0008b2b:	5b                   	pop    ebx
c0008b2c:	89 d0                	mov    eax,edx
c0008b2e:	5e                   	pop    esi
c0008b2f:	5f                   	pop    edi
c0008b30:	c3                   	ret    

c0008b31 <src_get_channels>:
c0008b31:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b35:	b8 02 00 00 00       	mov    eax,0x2
c0008b3a:	85 d2                	test   edx,edx
c0008b3c:	74 14                	je     c0008b52 <src_get_channels+0x21>
c0008b3e:	b8 07 00 00 00       	mov    eax,0x7
c0008b43:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b47:	74 09                	je     c0008b52 <src_get_channels+0x21>
c0008b49:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b4d:	74 03                	je     c0008b52 <src_get_channels+0x21>
c0008b4f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b52:	c3                   	ret    

c0008b53 <src_reset>:
c0008b53:	53                   	push   ebx
c0008b54:	b8 02 00 00 00       	mov    eax,0x2
c0008b59:	83 ec 08             	sub    esp,0x8
c0008b5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b60:	85 db                	test   ebx,ebx
c0008b62:	74 36                	je     c0008b9a <src_reset+0x47>
c0008b64:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b67:	85 c0                	test   eax,eax
c0008b69:	74 09                	je     c0008b74 <src_reset+0x21>
c0008b6b:	83 ec 0c             	sub    esp,0xc
c0008b6e:	53                   	push   ebx
c0008b6f:	ff d0                	call   eax
c0008b71:	83 c4 10             	add    esp,0x10
c0008b74:	31 c0                	xor    eax,eax
c0008b76:	31 d2                	xor    edx,edx
c0008b78:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b7b:	89 03                	mov    DWORD PTR [ebx],eax
c0008b7d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b80:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b83:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b8a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b91:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b98:	31 c0                	xor    eax,eax
c0008b9a:	83 c4 08             	add    esp,0x8
c0008b9d:	5b                   	pop    ebx
c0008b9e:	c3                   	ret    

c0008b9f <src_new>:
c0008b9f:	57                   	push   edi
c0008ba0:	56                   	push   esi
c0008ba1:	53                   	push   ebx
c0008ba2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008ba6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008baa:	85 f6                	test   esi,esi
c0008bac:	74 73                	je     c0008c21 <src_new+0x82>
c0008bae:	85 ff                	test   edi,edi
c0008bb0:	7f 08                	jg     c0008bba <src_new+0x1b>
c0008bb2:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008bb8:	eb 1e                	jmp    c0008bd8 <src_new+0x39>
c0008bba:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008bc0:	50                   	push   eax
c0008bc1:	50                   	push   eax
c0008bc2:	6a 3c                	push   0x3c
c0008bc4:	6a 01                	push   0x1
c0008bc6:	e8 a5 6c 00 00       	call   c000f870 <calloc>
c0008bcb:	83 c4 10             	add    esp,0x10
c0008bce:	89 c3                	mov    ebx,eax
c0008bd0:	85 c0                	test   eax,eax
c0008bd2:	75 10                	jne    c0008be4 <src_new+0x45>
c0008bd4:	85 f6                	test   esi,esi
c0008bd6:	75 04                	jne    c0008bdc <src_new+0x3d>
c0008bd8:	31 db                	xor    ebx,ebx
c0008bda:	eb 4b                	jmp    c0008c27 <src_new+0x88>
c0008bdc:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008be2:	eb 43                	jmp    c0008c27 <src_new+0x88>
c0008be4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008be7:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bf2:	e8 1d fb ff ff       	call   c0008714 <psrc_set_converter>
c0008bf7:	85 c0                	test   eax,eax
c0008bf9:	74 18                	je     c0008c13 <src_new+0x74>
c0008bfb:	85 f6                	test   esi,esi
c0008bfd:	74 06                	je     c0008c05 <src_new+0x66>
c0008bff:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008c05:	83 ec 0c             	sub    esp,0xc
c0008c08:	53                   	push   ebx
c0008c09:	31 db                	xor    ebx,ebx
c0008c0b:	e8 40 6c 00 00       	call   c000f850 <free>
c0008c10:	83 c4 10             	add    esp,0x10
c0008c13:	83 ec 0c             	sub    esp,0xc
c0008c16:	53                   	push   ebx
c0008c17:	e8 37 ff ff ff       	call   c0008b53 <src_reset>
c0008c1c:	83 c4 10             	add    esp,0x10
c0008c1f:	eb 06                	jmp    c0008c27 <src_new+0x88>
c0008c21:	85 ff                	test   edi,edi
c0008c23:	7f 9b                	jg     c0008bc0 <src_new+0x21>
c0008c25:	eb b1                	jmp    c0008bd8 <src_new+0x39>
c0008c27:	89 d8                	mov    eax,ebx
c0008c29:	5b                   	pop    ebx
c0008c2a:	5e                   	pop    esi
c0008c2b:	5f                   	pop    edi
c0008c2c:	c3                   	ret    

c0008c2d <src_callback_new>:
c0008c2d:	56                   	push   esi
c0008c2e:	53                   	push   ebx
c0008c2f:	53                   	push   ebx
c0008c30:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008c34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c38:	85 f6                	test   esi,esi
c0008c3a:	75 0e                	jne    c0008c4a <src_callback_new+0x1d>
c0008c3c:	31 db                	xor    ebx,ebx
c0008c3e:	85 c0                	test   eax,eax
c0008c40:	74 47                	je     c0008c89 <src_callback_new+0x5c>
c0008c42:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c48:	eb 3f                	jmp    c0008c89 <src_callback_new+0x5c>
c0008c4a:	85 c0                	test   eax,eax
c0008c4c:	74 06                	je     c0008c54 <src_callback_new+0x27>
c0008c4e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c54:	51                   	push   ecx
c0008c55:	50                   	push   eax
c0008c56:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5e:	e8 3c ff ff ff       	call   c0008b9f <src_new>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	89 c3                	mov    ebx,eax
c0008c68:	85 c0                	test   eax,eax
c0008c6a:	74 1d                	je     c0008c89 <src_callback_new+0x5c>
c0008c6c:	83 ec 0c             	sub    esp,0xc
c0008c6f:	50                   	push   eax
c0008c70:	e8 de fe ff ff       	call   c0008b53 <src_reset>
c0008c75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c79:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c80:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c83:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c86:	83 c4 10             	add    esp,0x10
c0008c89:	89 d8                	mov    eax,ebx
c0008c8b:	5a                   	pop    edx
c0008c8c:	5b                   	pop    ebx
c0008c8d:	5e                   	pop    esi
c0008c8e:	c3                   	ret    

c0008c8f <src_get_name>:
c0008c8f:	53                   	push   ebx
c0008c90:	83 ec 14             	sub    esp,0x14
c0008c93:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c97:	53                   	push   ebx
c0008c98:	e8 d0 4f 00 00       	call   c000dc6d <sinc_get_name>
c0008c9d:	83 c4 10             	add    esp,0x10
c0008ca0:	85 c0                	test   eax,eax
c0008ca2:	75 1d                	jne    c0008cc1 <src_get_name+0x32>
c0008ca4:	83 ec 0c             	sub    esp,0xc
c0008ca7:	53                   	push   ebx
c0008ca8:	e8 80 57 00 00       	call   c000e42d <zoh_get_name>
c0008cad:	83 c4 10             	add    esp,0x10
c0008cb0:	85 c0                	test   eax,eax
c0008cb2:	75 0d                	jne    c0008cc1 <src_get_name+0x32>
c0008cb4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb8:	83 c4 08             	add    esp,0x8
c0008cbb:	5b                   	pop    ebx
c0008cbc:	e9 74 0b 00 00       	jmp    c0009835 <linear_get_name>
c0008cc1:	83 c4 08             	add    esp,0x8
c0008cc4:	5b                   	pop    ebx
c0008cc5:	c3                   	ret    

c0008cc6 <src_get_description>:
c0008cc6:	53                   	push   ebx
c0008cc7:	83 ec 14             	sub    esp,0x14
c0008cca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008cce:	53                   	push   ebx
c0008ccf:	e8 ac 4f 00 00       	call   c000dc80 <sinc_get_description>
c0008cd4:	83 c4 10             	add    esp,0x10
c0008cd7:	85 c0                	test   eax,eax
c0008cd9:	75 1d                	jne    c0008cf8 <src_get_description+0x32>
c0008cdb:	83 ec 0c             	sub    esp,0xc
c0008cde:	53                   	push   ebx
c0008cdf:	e8 58 57 00 00       	call   c000e43c <zoh_get_description>
c0008ce4:	83 c4 10             	add    esp,0x10
c0008ce7:	85 c0                	test   eax,eax
c0008ce9:	75 0d                	jne    c0008cf8 <src_get_description+0x32>
c0008ceb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cef:	83 c4 08             	add    esp,0x8
c0008cf2:	5b                   	pop    ebx
c0008cf3:	e9 4c 0b 00 00       	jmp    c0009844 <linear_get_description>
c0008cf8:	83 c4 08             	add    esp,0x8
c0008cfb:	5b                   	pop    ebx
c0008cfc:	c3                   	ret    

c0008cfd <src_get_version>:
c0008cfd:	b8 80 98 02 c0       	mov    eax,0xc0029880
c0008d02:	c3                   	ret    

c0008d03 <src_is_valid_ratio>:
c0008d03:	83 ec 1c             	sub    esp,0x1c
c0008d06:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008d0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d16:	68 00 00 70 3f       	push   0x3f700000
c0008d1b:	6a 00                	push   0x0
c0008d1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d25:	e8 15 f7 01 00       	call   c002843f <__ltdf2>
c0008d2a:	83 c4 10             	add    esp,0x10
c0008d2d:	31 d2                	xor    edx,edx
c0008d2f:	85 c0                	test   eax,eax
c0008d31:	78 1e                	js     c0008d51 <src_is_valid_ratio+0x4e>
c0008d33:	68 00 00 70 40       	push   0x40700000
c0008d38:	6a 00                	push   0x0
c0008d3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d3e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d42:	e8 da f6 01 00       	call   c0028421 <__gtdf2>
c0008d47:	31 d2                	xor    edx,edx
c0008d49:	83 c4 10             	add    esp,0x10
c0008d4c:	85 c0                	test   eax,eax
c0008d4e:	0f 9e c2             	setle  dl
c0008d51:	89 d0                	mov    eax,edx
c0008d53:	83 c4 1c             	add    esp,0x1c
c0008d56:	c3                   	ret    

c0008d57 <src_error>:
c0008d57:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d5b:	31 c0                	xor    eax,eax
c0008d5d:	85 d2                	test   edx,edx
c0008d5f:	74 03                	je     c0008d64 <src_error+0xd>
c0008d61:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d64:	c3                   	ret    

c0008d65 <src_strerror>:
c0008d65:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d69:	31 c0                	xor    eax,eax
c0008d6b:	83 fa 17             	cmp    edx,0x17
c0008d6e:	77 07                	ja     c0008d77 <src_strerror+0x12>
c0008d70:	8b 04 95 e0 9c 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6320]
c0008d77:	c3                   	ret    

c0008d78 <src_simple>:
c0008d78:	56                   	push   esi
c0008d79:	53                   	push   ebx
c0008d7a:	83 ec 18             	sub    esp,0x18
c0008d7d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d81:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d85:	50                   	push   eax
c0008d86:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8e:	e8 0c fe ff ff       	call   c0008b9f <src_new>
c0008d93:	83 c4 10             	add    esp,0x10
c0008d96:	85 c0                	test   eax,eax
c0008d98:	75 06                	jne    c0008da0 <src_simple+0x28>
c0008d9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d9e:	eb 25                	jmp    c0008dc5 <src_simple+0x4d>
c0008da0:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008da7:	89 c3                	mov    ebx,eax
c0008da9:	50                   	push   eax
c0008daa:	50                   	push   eax
c0008dab:	56                   	push   esi
c0008dac:	53                   	push   ebx
c0008dad:	e8 e2 f9 ff ff       	call   c0008794 <src_process>
c0008db2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008db5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008db9:	e8 9a f9 ff ff       	call   c0008758 <src_delete>
c0008dbe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008dc2:	83 c4 10             	add    esp,0x10
c0008dc5:	83 c4 14             	add    esp,0x14
c0008dc8:	5b                   	pop    ebx
c0008dc9:	5e                   	pop    esi
c0008dca:	c3                   	ret    

c0008dcb <src_short_to_float_array>:
c0008dcb:	53                   	push   ebx
c0008dcc:	83 ec 18             	sub    esp,0x18
c0008dcf:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008dd3:	85 db                	test   ebx,ebx
c0008dd5:	74 54                	je     c0008e2b <src_short_to_float_array+0x60>
c0008dd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ddb:	4b                   	dec    ebx
c0008ddc:	83 ec 0c             	sub    esp,0xc
c0008ddf:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008de3:	50                   	push   eax
c0008de4:	e8 ea f3 01 00       	call   c00281d3 <__floatsidf>
c0008de9:	83 c4 10             	add    esp,0x10
c0008dec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008df0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008df4:	68 00 00 00 3f       	push   0x3f000000
c0008df9:	6a 00                	push   0x0
c0008dfb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e03:	e8 68 ed 01 00       	call   c0027b70 <__muldf3>
c0008e08:	59                   	pop    ecx
c0008e09:	59                   	pop    ecx
c0008e0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e0e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e12:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e1a:	e8 24 f6 01 00       	call   c0028443 <__truncdfsf2>
c0008e1f:	83 c4 10             	add    esp,0x10
c0008e22:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008e26:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008e29:	eb a8                	jmp    c0008dd3 <src_short_to_float_array+0x8>
c0008e2b:	83 c4 18             	add    esp,0x18
c0008e2e:	5b                   	pop    ebx
c0008e2f:	c3                   	ret    

c0008e30 <src_float_to_short_array>:
c0008e30:	56                   	push   esi
c0008e31:	53                   	push   ebx
c0008e32:	83 ec 14             	sub    esp,0x14
c0008e35:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008e39:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e3d:	85 db                	test   ebx,ebx
c0008e3f:	0f 84 a4 00 00 00    	je     c0008ee9 <src_float_to_short_array+0xb9>
c0008e45:	83 ec 0c             	sub    esp,0xc
c0008e48:	4b                   	dec    ebx
c0008e49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e4d:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e50:	e8 12 f7 01 00       	call   c0028567 <__extendsfdf2>
c0008e55:	83 c4 10             	add    esp,0x10
c0008e58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e5c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e60:	68 00 00 e0 41       	push   0x41e00000
c0008e65:	6a 00                	push   0x0
c0008e67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6f:	e8 fc ec 01 00       	call   c0027b70 <__muldf3>
c0008e74:	83 c4 10             	add    esp,0x10
c0008e77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e7b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e7f:	68 ff ff df 41       	push   0x41dfffff
c0008e84:	68 00 00 c0 ff       	push   0xffc00000
c0008e89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e91:	e8 a7 f5 01 00       	call   c002843d <__gedf2>
c0008e96:	83 c4 10             	add    esp,0x10
c0008e99:	85 c0                	test   eax,eax
c0008e9b:	78 08                	js     c0008ea5 <src_float_to_short_array+0x75>
c0008e9d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008ea3:	eb 98                	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ea5:	68 00 00 e0 c1       	push   0xc1e00000
c0008eaa:	6a 00                	push   0x0
c0008eac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb4:	e8 88 f5 01 00       	call   c0028441 <__ledf2>
c0008eb9:	83 c4 10             	add    esp,0x10
c0008ebc:	85 c0                	test   eax,eax
c0008ebe:	7f 0b                	jg     c0008ecb <src_float_to_short_array+0x9b>
c0008ec0:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008ec6:	e9 72 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ecb:	50                   	push   eax
c0008ecc:	50                   	push   eax
c0008ecd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed5:	e8 16 f7 01 00       	call   c00285f0 <lrint>
c0008eda:	83 c4 10             	add    esp,0x10
c0008edd:	c1 f8 10             	sar    eax,0x10
c0008ee0:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008ee4:	e9 54 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ee9:	83 c4 14             	add    esp,0x14
c0008eec:	5b                   	pop    ebx
c0008eed:	5e                   	pop    esi
c0008eee:	c3                   	ret    

c0008eef <src_int_to_float_array>:
c0008eef:	53                   	push   ebx
c0008ef0:	83 ec 18             	sub    esp,0x18
c0008ef3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ef7:	85 db                	test   ebx,ebx
c0008ef9:	74 52                	je     c0008f4d <src_int_to_float_array+0x5e>
c0008efb:	83 ec 0c             	sub    esp,0xc
c0008efe:	4b                   	dec    ebx
c0008eff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f03:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f06:	e8 c8 f2 01 00       	call   c00281d3 <__floatsidf>
c0008f0b:	83 c4 10             	add    esp,0x10
c0008f0e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f12:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f16:	68 00 00 00 3e       	push   0x3e000000
c0008f1b:	6a 00                	push   0x0
c0008f1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f25:	e8 46 ec 01 00       	call   c0027b70 <__muldf3>
c0008f2a:	59                   	pop    ecx
c0008f2b:	59                   	pop    ecx
c0008f2c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f30:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f3c:	e8 02 f5 01 00       	call   c0028443 <__truncdfsf2>
c0008f41:	83 c4 10             	add    esp,0x10
c0008f44:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f48:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f4b:	eb aa                	jmp    c0008ef7 <src_int_to_float_array+0x8>
c0008f4d:	83 c4 18             	add    esp,0x18
c0008f50:	5b                   	pop    ebx
c0008f51:	c3                   	ret    

c0008f52 <src_float_to_int_array>:
c0008f52:	56                   	push   esi
c0008f53:	53                   	push   ebx
c0008f54:	83 ec 14             	sub    esp,0x14
c0008f57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f5b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f5f:	85 db                	test   ebx,ebx
c0008f61:	0f 84 a2 00 00 00    	je     c0009009 <src_float_to_int_array+0xb7>
c0008f67:	83 ec 0c             	sub    esp,0xc
c0008f6a:	4b                   	dec    ebx
c0008f6b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f6f:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f72:	e8 f0 f5 01 00       	call   c0028567 <__extendsfdf2>
c0008f77:	83 c4 10             	add    esp,0x10
c0008f7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f82:	68 00 00 e0 41       	push   0x41e00000
c0008f87:	6a 00                	push   0x0
c0008f89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f91:	e8 da eb 01 00       	call   c0027b70 <__muldf3>
c0008f96:	83 c4 10             	add    esp,0x10
c0008f99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f9d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008fa1:	68 ff ff df 41       	push   0x41dfffff
c0008fa6:	68 00 00 c0 ff       	push   0xffc00000
c0008fab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008faf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb3:	e8 85 f4 01 00       	call   c002843d <__gedf2>
c0008fb8:	83 c4 10             	add    esp,0x10
c0008fbb:	85 c0                	test   eax,eax
c0008fbd:	78 09                	js     c0008fc8 <src_float_to_int_array+0x76>
c0008fbf:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008fc6:	eb 97                	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fc8:	68 00 00 e0 c1       	push   0xc1e00000
c0008fcd:	6a 00                	push   0x0
c0008fcf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd7:	e8 65 f4 01 00       	call   c0028441 <__ledf2>
c0008fdc:	83 c4 10             	add    esp,0x10
c0008fdf:	85 c0                	test   eax,eax
c0008fe1:	7f 0c                	jg     c0008fef <src_float_to_int_array+0x9d>
c0008fe3:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fea:	e9 70 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fef:	50                   	push   eax
c0008ff0:	50                   	push   eax
c0008ff1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff9:	e8 f2 f5 01 00       	call   c00285f0 <lrint>
c0008ffe:	83 c4 10             	add    esp,0x10
c0009001:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0009004:	e9 56 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0009009:	83 c4 14             	add    esp,0x14
c000900c:	5b                   	pop    ebx
c000900d:	5e                   	pop    esi
c000900e:	c3                   	ret    

c000900f <linear_vari_process>:
c000900f:	55                   	push   ebp
c0009010:	31 d2                	xor    edx,edx
c0009012:	57                   	push   edi
c0009013:	56                   	push   esi
c0009014:	53                   	push   ebx
c0009015:	83 ec 3c             	sub    esp,0x3c
c0009018:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000901c:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0009020:	0f 8e d3 07 00 00    	jle    c00097f9 <linear_vari_process+0x7ea>
c0009026:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000902a:	ba 05 00 00 00       	mov    edx,0x5
c000902f:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0009032:	85 db                	test   ebx,ebx
c0009034:	0f 84 bf 07 00 00    	je     c00097f9 <linear_vari_process+0x7ea>
c000903a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000903d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009041:	74 19                	je     c000905c <linear_vari_process+0x4d>
c0009043:	31 d2                	xor    edx,edx
c0009045:	39 c2                	cmp    edx,eax
c0009047:	7d 0c                	jge    c0009055 <linear_vari_process+0x46>
c0009049:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000904b:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000904e:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009052:	42                   	inc    edx
c0009053:	eb f0                	jmp    c0009045 <linear_vari_process+0x36>
c0009055:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000905c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000905f:	0f af d0             	imul   edx,eax
c0009062:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0009065:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0009069:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009070:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009073:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000907a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000907e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009081:	8b 00                	mov    eax,DWORD PTR [eax]
c0009083:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009087:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000908b:	68 00 00 70 3f       	push   0x3f700000
c0009090:	6a 00                	push   0x0
c0009092:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009096:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000909a:	e8 a0 f3 01 00       	call   c002843f <__ltdf2>
c000909f:	83 c4 10             	add    esp,0x10
c00090a2:	ba 16 00 00 00       	mov    edx,0x16
c00090a7:	85 c0                	test   eax,eax
c00090a9:	0f 88 4a 07 00 00    	js     c00097f9 <linear_vari_process+0x7ea>
c00090af:	68 00 00 70 40       	push   0x40700000
c00090b4:	6a 00                	push   0x0
c00090b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090be:	e8 5e f3 01 00       	call   c0028421 <__gtdf2>
c00090c3:	83 c4 10             	add    esp,0x10
c00090c6:	ba 16 00 00 00       	mov    edx,0x16
c00090cb:	85 c0                	test   eax,eax
c00090cd:	0f 8f 26 07 00 00    	jg     c00097f9 <linear_vari_process+0x7ea>
c00090d3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00090d7:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090da:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090e5:	68 00 00 f0 3f       	push   0x3ff00000
c00090ea:	6a 00                	push   0x0
c00090ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f4:	e8 46 f3 01 00       	call   c002843f <__ltdf2>
c00090f9:	83 c4 10             	add    esp,0x10
c00090fc:	85 c0                	test   eax,eax
c00090fe:	0f 89 89 02 00 00    	jns    c000938d <linear_vari_process+0x37e>
c0009104:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0009107:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c000910a:	0f 8d 7d 02 00 00    	jge    c000938d <linear_vari_process+0x37e>
c0009110:	83 ec 0c             	sub    esp,0xc
c0009113:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009116:	e8 b8 f0 01 00       	call   c00281d3 <__floatsidf>
c000911b:	83 c4 10             	add    esp,0x10
c000911e:	89 04 24             	mov    DWORD PTR [esp],eax
c0009121:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009125:	68 00 00 f0 3f       	push   0x3ff00000
c000912a:	6a 00                	push   0x0
c000912c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009130:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009134:	e8 ba e3 01 00       	call   c00274f3 <__adddf3>
c0009139:	83 c4 10             	add    esp,0x10
c000913c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009140:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009144:	52                   	push   edx
c0009145:	50                   	push   eax
c0009146:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914e:	e8 1d ea 01 00       	call   c0027b70 <__muldf3>
c0009153:	5d                   	pop    ebp
c0009154:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009158:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000915c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000915f:	e8 6f f0 01 00       	call   c00281d3 <__floatsidf>
c0009164:	83 c4 10             	add    esp,0x10
c0009167:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000916b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000916f:	52                   	push   edx
c0009170:	50                   	push   eax
c0009171:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009175:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009179:	e8 75 e3 01 00       	call   c00274f3 <__adddf3>
c000917e:	59                   	pop    ecx
c000917f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009183:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009187:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000918a:	e8 44 f0 01 00       	call   c00281d3 <__floatsidf>
c000918f:	83 c4 10             	add    esp,0x10
c0009192:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009196:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000919a:	52                   	push   edx
c000919b:	50                   	push   eax
c000919c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a4:	e8 94 f2 01 00       	call   c002843d <__gedf2>
c00091a9:	83 c4 10             	add    esp,0x10
c00091ac:	85 c0                	test   eax,eax
c00091ae:	0f 89 d9 01 00 00    	jns    c000938d <linear_vari_process+0x37e>
c00091b4:	85 ff                	test   edi,edi
c00091b6:	0f 8e f4 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c00091bc:	83 ec 10             	sub    esp,0x10
c00091bf:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091c2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091c5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00091c9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00091cc:	ff 30                	push   DWORD PTR [eax]
c00091ce:	e8 71 e9 01 00       	call   c0027b44 <__subdf3>
c00091d3:	83 c4 18             	add    esp,0x18
c00091d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091de:	52                   	push   edx
c00091df:	50                   	push   eax
c00091e0:	e8 eb f3 01 00       	call   c00285d0 <fabs>
c00091e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091e9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091ed:	83 c4 10             	add    esp,0x10
c00091f0:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091f5:	68 23 42 92 0c       	push   0xc924223
c00091fa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091fe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009202:	e8 1a f2 01 00       	call   c0028421 <__gtdf2>
c0009207:	83 c4 10             	add    esp,0x10
c000920a:	85 c0                	test   eax,eax
c000920c:	0f 8e 9e 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c0009212:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009216:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009219:	8b 00                	mov    eax,DWORD PTR [eax]
c000921b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000921f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009222:	52                   	push   edx
c0009223:	50                   	push   eax
c0009224:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009227:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000922a:	e8 15 e9 01 00       	call   c0027b44 <__subdf3>
c000922f:	59                   	pop    ecx
c0009230:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009234:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009238:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000923b:	e8 93 ef 01 00       	call   c00281d3 <__floatsidf>
c0009240:	83 c4 10             	add    esp,0x10
c0009243:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009247:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000924b:	52                   	push   edx
c000924c:	50                   	push   eax
c000924d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009255:	e8 16 e9 01 00       	call   c0027b70 <__muldf3>
c000925a:	5f                   	pop    edi
c000925b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000925f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009263:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009266:	e8 68 ef 01 00       	call   c00281d3 <__floatsidf>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009272:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009276:	52                   	push   edx
c0009277:	50                   	push   eax
c0009278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000927c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009280:	e8 cf eb 01 00       	call   c0027e54 <__divdf3>
c0009285:	83 c4 10             	add    esp,0x10
c0009288:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000928c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009290:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009294:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009298:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000929c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092a0:	e8 4e e2 01 00       	call   c00274f3 <__adddf3>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092b0:	31 ff                	xor    edi,edi
c00092b2:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c00092b5:	0f 8e 9d 00 00 00    	jle    c0009358 <linear_vari_process+0x349>
c00092bb:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00092be:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00092c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00092c5:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00092c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00092cc:	8b 06                	mov    eax,DWORD PTR [esi]
c00092ce:	52                   	push   edx
c00092cf:	52                   	push   edx
c00092d0:	55                   	push   ebp
c00092d1:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00092d4:	47                   	inc    edi
c00092d5:	e8 ae db 01 00       	call   c0026e88 <__subsf3>
c00092da:	89 04 24             	mov    DWORD PTR [esp],eax
c00092dd:	e8 85 f2 01 00       	call   c0028567 <__extendsfdf2>
c00092e2:	83 c4 10             	add    esp,0x10
c00092e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092e9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092fd:	e8 6e e8 01 00       	call   c0027b70 <__muldf3>
c0009302:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009305:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009309:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000930d:	e8 55 f2 01 00       	call   c0028567 <__extendsfdf2>
c0009312:	83 c4 10             	add    esp,0x10
c0009315:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009319:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000931d:	52                   	push   edx
c000931e:	50                   	push   eax
c000931f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009323:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009327:	e8 c7 e1 01 00       	call   c00274f3 <__adddf3>
c000932c:	59                   	pop    ecx
c000932d:	5d                   	pop    ebp
c000932e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009332:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009336:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933e:	e8 00 f1 01 00       	call   c0028443 <__truncdfsf2>
c0009343:	83 c4 10             	add    esp,0x10
c0009346:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0009349:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000934d:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009350:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009353:	e9 5a ff ff ff       	jmp    c00092b2 <linear_vari_process+0x2a3>
c0009358:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009360:	68 00 00 f0 3f       	push   0x3ff00000
c0009365:	6a 00                	push   0x0
c0009367:	e8 e8 ea 01 00       	call   c0027e54 <__divdf3>
c000936c:	83 c4 10             	add    esp,0x10
c000936f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009372:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000937c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009380:	e8 6e e1 01 00       	call   c00274f3 <__adddf3>
c0009385:	83 c4 10             	add    esp,0x10
c0009388:	e9 50 fd ff ff       	jmp    c00090dd <linear_vari_process+0xce>
c000938d:	50                   	push   eax
c000938e:	50                   	push   eax
c000938f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009393:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009397:	e8 54 f2 01 00       	call   c00285f0 <lrint>
c000939c:	83 ec 0c             	sub    esp,0xc
c000939f:	50                   	push   eax
c00093a0:	e8 2e ee 01 00       	call   c00281d3 <__floatsidf>
c00093a5:	83 c4 10             	add    esp,0x10
c00093a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093b0:	52                   	push   edx
c00093b1:	50                   	push   eax
c00093b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093ba:	e8 85 e7 01 00       	call   c0027b44 <__subdf3>
c00093bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00093c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00093c7:	83 c4 20             	add    esp,0x20
c00093ca:	6a 00                	push   0x0
c00093cc:	6a 00                	push   0x0
c00093ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d6:	e8 64 f0 01 00       	call   c002843f <__ltdf2>
c00093db:	83 c4 10             	add    esp,0x10
c00093de:	85 c0                	test   eax,eax
c00093e0:	79 1e                	jns    c0009400 <linear_vari_process+0x3f1>
c00093e2:	68 00 00 f0 3f       	push   0x3ff00000
c00093e7:	6a 00                	push   0x0
c00093e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093f1:	e8 fd e0 01 00       	call   c00274f3 <__adddf3>
c00093f6:	83 c4 10             	add    esp,0x10
c00093f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00093fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009400:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009403:	83 ec 10             	sub    esp,0x10
c0009406:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009412:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009416:	e8 29 e7 01 00       	call   c0027b44 <__subdf3>
c000941b:	83 c4 18             	add    esp,0x18
c000941e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009422:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009426:	52                   	push   edx
c0009427:	50                   	push   eax
c0009428:	e8 c3 f1 01 00       	call   c00285f0 <lrint>
c000942d:	83 c4 10             	add    esp,0x10
c0009430:	0f af f8             	imul   edi,eax
c0009433:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009436:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009439:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000943c:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c000943f:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009442:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009446:	0f 8d 13 03 00 00    	jge    c000975f <linear_vari_process+0x750>
c000944c:	83 ec 0c             	sub    esp,0xc
c000944f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009452:	e8 7c ed 01 00       	call   c00281d3 <__floatsidf>
c0009457:	83 c4 10             	add    esp,0x10
c000945a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000945e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009462:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009466:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000946a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000946e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009472:	e8 f9 e6 01 00       	call   c0027b70 <__muldf3>
c0009477:	89 3c 24             	mov    DWORD PTR [esp],edi
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	e8 4c ed 01 00       	call   c00281d3 <__floatsidf>
c0009487:	83 c4 10             	add    esp,0x10
c000948a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000948e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009492:	52                   	push   edx
c0009493:	50                   	push   eax
c0009494:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009498:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000949c:	e8 52 e0 01 00       	call   c00274f3 <__adddf3>
c00094a1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00094a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094a8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094ac:	e8 22 ed 01 00       	call   c00281d3 <__floatsidf>
c00094b1:	83 c4 10             	add    esp,0x10
c00094b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094bc:	52                   	push   edx
c00094bd:	50                   	push   eax
c00094be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c6:	e8 74 ef 01 00       	call   c002843f <__ltdf2>
c00094cb:	83 c4 10             	add    esp,0x10
c00094ce:	85 c0                	test   eax,eax
c00094d0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00094d4:	0f 89 85 02 00 00    	jns    c000975f <linear_vari_process+0x750>
c00094da:	85 c9                	test   ecx,ecx
c00094dc:	0f 8e f5 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c00094e2:	83 ec 10             	sub    esp,0x10
c00094e5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094e8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094eb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094ef:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094f2:	ff 30                	push   DWORD PTR [eax]
c00094f4:	e8 4b e6 01 00       	call   c0027b44 <__subdf3>
c00094f9:	83 c4 18             	add    esp,0x18
c00094fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009500:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009504:	52                   	push   edx
c0009505:	50                   	push   eax
c0009506:	e8 c5 f0 01 00       	call   c00285d0 <fabs>
c000950b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000950f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009513:	83 c4 10             	add    esp,0x10
c0009516:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000951b:	68 23 42 92 0c       	push   0xc924223
c0009520:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009524:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009528:	e8 f4 ee 01 00       	call   c0028421 <__gtdf2>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	85 c0                	test   eax,eax
c0009532:	0f 8e 9f 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c0009538:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000953c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000953f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009541:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009545:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009549:	52                   	push   edx
c000954a:	50                   	push   eax
c000954b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000954e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009551:	e8 ee e5 01 00       	call   c0027b44 <__subdf3>
c0009556:	5f                   	pop    edi
c0009557:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000955b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000955f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009562:	e8 6c ec 01 00       	call   c00281d3 <__floatsidf>
c0009567:	83 c4 10             	add    esp,0x10
c000956a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000956e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009572:	52                   	push   edx
c0009573:	50                   	push   eax
c0009574:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009578:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000957c:	e8 ef e5 01 00       	call   c0027b70 <__muldf3>
c0009581:	5d                   	pop    ebp
c0009582:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009586:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000958a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000958d:	e8 41 ec 01 00       	call   c00281d3 <__floatsidf>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009599:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000959d:	52                   	push   edx
c000959e:	50                   	push   eax
c000959f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a7:	e8 a8 e8 01 00       	call   c0027e54 <__divdf3>
c00095ac:	83 c4 10             	add    esp,0x10
c00095af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095b3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c7:	e8 27 df 01 00       	call   c00274f3 <__adddf3>
c00095cc:	83 c4 10             	add    esp,0x10
c00095cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095d7:	31 ff                	xor    edi,edi
c00095d9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095dc:	39 f8                	cmp    eax,edi
c00095de:	0f 8e ac 00 00 00    	jle    c0009690 <linear_vari_process+0x681>
c00095e4:	8b 16                	mov    edx,DWORD PTR [esi]
c00095e6:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095e9:	29 c1                	sub    ecx,eax
c00095eb:	89 c8                	mov    eax,ecx
c00095ed:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095f0:	01 f8                	add    eax,edi
c00095f2:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095f6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095f9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009600:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009603:	51                   	push   ecx
c0009604:	01 f8                	add    eax,edi
c0009606:	51                   	push   ecx
c0009607:	47                   	inc    edi
c0009608:	55                   	push   ebp
c0009609:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c000960c:	e8 77 d8 01 00       	call   c0026e88 <__subsf3>
c0009611:	89 04 24             	mov    DWORD PTR [esp],eax
c0009614:	e8 4e ef 01 00       	call   c0028567 <__extendsfdf2>
c0009619:	83 c4 10             	add    esp,0x10
c000961c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009620:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009624:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009628:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000962c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009630:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009634:	e8 37 e5 01 00       	call   c0027b70 <__muldf3>
c0009639:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000963c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009640:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009644:	e8 1e ef 01 00       	call   c0028567 <__extendsfdf2>
c0009649:	83 c4 10             	add    esp,0x10
c000964c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009650:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009654:	52                   	push   edx
c0009655:	50                   	push   eax
c0009656:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965e:	e8 90 de 01 00       	call   c00274f3 <__adddf3>
c0009663:	5d                   	pop    ebp
c0009664:	59                   	pop    ecx
c0009665:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009669:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000966d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009671:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009675:	e8 c9 ed 01 00       	call   c0028443 <__truncdfsf2>
c000967a:	83 c4 10             	add    esp,0x10
c000967d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009681:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009685:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009688:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000968b:	e9 49 ff ff ff       	jmp    c00095d9 <linear_vari_process+0x5ca>
c0009690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	68 00 00 f0 3f       	push   0x3ff00000
c000969d:	6a 00                	push   0x0
c000969f:	e8 b0 e7 01 00       	call   c0027e54 <__divdf3>
c00096a4:	83 c4 10             	add    esp,0x10
c00096a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096af:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b3:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bf:	e8 2f de 01 00       	call   c00274f3 <__adddf3>
c00096c4:	59                   	pop    ecx
c00096c5:	5f                   	pop    edi
c00096c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d6:	e8 15 ef 01 00       	call   c00285f0 <lrint>
c00096db:	83 ec 0c             	sub    esp,0xc
c00096de:	50                   	push   eax
c00096df:	e8 ef ea 01 00       	call   c00281d3 <__floatsidf>
c00096e4:	83 c4 10             	add    esp,0x10
c00096e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096eb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ef:	52                   	push   edx
c00096f0:	50                   	push   eax
c00096f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f9:	e8 46 e4 01 00       	call   c0027b44 <__subdf3>
c00096fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009702:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009706:	83 c4 20             	add    esp,0x20
c0009709:	6a 00                	push   0x0
c000970b:	6a 00                	push   0x0
c000970d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009711:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009715:	e8 25 ed 01 00       	call   c002843f <__ltdf2>
c000971a:	83 c4 10             	add    esp,0x10
c000971d:	85 c0                	test   eax,eax
c000971f:	79 1e                	jns    c000973f <linear_vari_process+0x730>
c0009721:	68 00 00 f0 3f       	push   0x3ff00000
c0009726:	6a 00                	push   0x0
c0009728:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000972c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009730:	e8 be dd 01 00       	call   c00274f3 <__adddf3>
c0009735:	83 c4 10             	add    esp,0x10
c0009738:	89 04 24             	mov    DWORD PTR [esp],eax
c000973b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000973f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009742:	83 ec 10             	sub    esp,0x10
c0009745:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009749:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000974d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009751:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009755:	e8 ea e3 01 00       	call   c0027b44 <__subdf3>
c000975a:	e9 bc fc ff ff       	jmp    c000941b <linear_vari_process+0x40c>
c000975f:	39 fd                	cmp    ebp,edi
c0009761:	7d 38                	jge    c000979b <linear_vari_process+0x78c>
c0009763:	83 ec 0c             	sub    esp,0xc
c0009766:	89 f8                	mov    eax,edi
c0009768:	29 e8                	sub    eax,ebp
c000976a:	99                   	cdq    
c000976b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000976e:	50                   	push   eax
c000976f:	e8 5f ea 01 00       	call   c00281d3 <__floatsidf>
c0009774:	83 c4 10             	add    esp,0x10
c0009777:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000977b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000977f:	52                   	push   edx
c0009780:	50                   	push   eax
c0009781:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009785:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009789:	e8 65 dd 01 00       	call   c00274f3 <__adddf3>
c000978e:	83 c4 10             	add    esp,0x10
c0009791:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009794:	89 04 24             	mov    DWORD PTR [esp],eax
c0009797:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000979b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000979f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00097a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00097a6:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00097a9:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00097ac:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097af:	85 c0                	test   eax,eax
c00097b1:	7f 29                	jg     c00097dc <linear_vari_process+0x7cd>
c00097b3:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00097b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00097bf:	89 01                	mov    DWORD PTR [ecx],eax
c00097c1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00097c4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097c7:	99                   	cdq    
c00097c8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097cb:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00097ce:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00097d1:	99                   	cdq    
c00097d2:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097d5:	31 d2                	xor    edx,edx
c00097d7:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097da:	eb 1d                	jmp    c00097f9 <linear_vari_process+0x7ea>
c00097dc:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097df:	31 d2                	xor    edx,edx
c00097e1:	29 c8                	sub    eax,ecx
c00097e3:	c1 e0 02             	shl    eax,0x2
c00097e6:	39 d1                	cmp    ecx,edx
c00097e8:	7e c9                	jle    c00097b3 <linear_vari_process+0x7a4>
c00097ea:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097ec:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097ef:	83 c0 04             	add    eax,0x4
c00097f2:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097f6:	42                   	inc    edx
c00097f7:	eb ed                	jmp    c00097e6 <linear_vari_process+0x7d7>
c00097f9:	83 c4 3c             	add    esp,0x3c
c00097fc:	89 d0                	mov    eax,edx
c00097fe:	5b                   	pop    ebx
c00097ff:	5e                   	pop    esi
c0009800:	5f                   	pop    edi
c0009801:	5d                   	pop    ebp
c0009802:	c3                   	ret    

c0009803 <linear_reset>:
c0009803:	83 ec 0c             	sub    esp,0xc
c0009806:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000980a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000980d:	85 c0                	test   eax,eax
c000980f:	74 20                	je     c0009831 <linear_reset+0x2e>
c0009811:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0009814:	83 c0 1c             	add    eax,0x1c
c0009817:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000981a:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0009821:	c1 e2 02             	shl    edx,0x2
c0009824:	51                   	push   ecx
c0009825:	52                   	push   edx
c0009826:	6a 00                	push   0x0
c0009828:	50                   	push   eax
c0009829:	e8 4a 6f ff ff       	call   c0000778 <memset>
c000982e:	83 c4 10             	add    esp,0x10
c0009831:	83 c4 0c             	add    esp,0xc
c0009834:	c3                   	ret    

c0009835 <linear_get_name>:
c0009835:	31 c0                	xor    eax,eax
c0009837:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000983c:	75 05                	jne    c0009843 <linear_get_name+0xe>
c000983e:	b8 40 9d 02 c0       	mov    eax,0xc0029d40
c0009843:	c3                   	ret    

c0009844 <linear_get_description>:
c0009844:	31 c0                	xor    eax,eax
c0009846:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000984b:	75 05                	jne    c0009852 <linear_get_description+0xe>
c000984d:	b8 54 9d 02 c0       	mov    eax,0xc0029d54
c0009852:	c3                   	ret    

c0009853 <linear_set_converter>:
c0009853:	53                   	push   ebx
c0009854:	b8 0a 00 00 00       	mov    eax,0xa
c0009859:	83 ec 08             	sub    esp,0x8
c000985c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009860:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009865:	75 6e                	jne    c00098d5 <linear_set_converter+0x82>
c0009867:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000986a:	85 c0                	test   eax,eax
c000986c:	74 13                	je     c0009881 <linear_set_converter+0x2e>
c000986e:	83 ec 0c             	sub    esp,0xc
c0009871:	50                   	push   eax
c0009872:	e8 d9 5f 00 00       	call   c000f850 <free>
c0009877:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000987e:	83 c4 10             	add    esp,0x10
c0009881:	50                   	push   eax
c0009882:	50                   	push   eax
c0009883:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009886:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000988d:	50                   	push   eax
c000988e:	6a 01                	push   0x1
c0009890:	e8 db 5f 00 00       	call   c000f870 <calloc>
c0009895:	83 c4 10             	add    esp,0x10
c0009898:	89 c2                	mov    edx,eax
c000989a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000989d:	85 d2                	test   edx,edx
c000989f:	b8 01 00 00 00       	mov    eax,0x1
c00098a4:	74 2f                	je     c00098d5 <linear_set_converter+0x82>
c00098a6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00098a9:	83 ec 0c             	sub    esp,0xc
c00098ac:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00098af:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c00098b5:	c7 43 24 0f 90 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000900f
c00098bc:	c7 43 20 0f 90 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000900f
c00098c3:	c7 43 28 03 98 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0009803
c00098ca:	53                   	push   ebx
c00098cb:	e8 33 ff ff ff       	call   c0009803 <linear_reset>
c00098d0:	83 c4 10             	add    esp,0x10
c00098d3:	31 c0                	xor    eax,eax
c00098d5:	83 c4 08             	add    esp,0x8
c00098d8:	5b                   	pop    ebx
c00098d9:	c3                   	ret    

c00098da <int_to_fp>:
c00098da:	c1 e0 0c             	shl    eax,0xc
c00098dd:	c3                   	ret    

c00098de <fp_to_int>:
c00098de:	c1 f8 0c             	sar    eax,0xc
c00098e1:	c3                   	ret    

c00098e2 <fp_fraction_part>:
c00098e2:	25 ff 0f 00 00       	and    eax,0xfff
c00098e7:	c3                   	ret    

c00098e8 <fp_to_double>:
c00098e8:	83 ec 1c             	sub    esp,0x1c
c00098eb:	e8 f2 ff ff ff       	call   c00098e2 <fp_fraction_part>
c00098f0:	83 ec 0c             	sub    esp,0xc
c00098f3:	50                   	push   eax
c00098f4:	e8 da e8 01 00       	call   c00281d3 <__floatsidf>
c00098f9:	83 c4 10             	add    esp,0x10
c00098fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009900:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009904:	68 00 00 30 3f       	push   0x3f300000
c0009909:	6a 00                	push   0x0
c000990b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000990f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009913:	e8 58 e2 01 00       	call   c0027b70 <__muldf3>
c0009918:	83 c4 2c             	add    esp,0x2c
c000991b:	c3                   	ret    

c000991c <calc_output_single>:
c000991c:	55                   	push   ebp
c000991d:	57                   	push   edi
c000991e:	56                   	push   esi
c000991f:	89 c6                	mov    esi,eax
c0009921:	53                   	push   ebx
c0009922:	89 d3                	mov    ebx,edx
c0009924:	83 ec 4c             	sub    esp,0x4c
c0009927:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000992b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000992e:	e8 a7 ff ff ff       	call   c00098da <int_to_fp>
c0009933:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c0009936:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000993a:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000993e:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009942:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c0009945:	99                   	cdq    
c0009946:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000994e:	f7 fb                	idiv   ebx
c0009950:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009958:	89 da                	mov    edx,ebx
c000995a:	0f af d0             	imul   edx,eax
c000995d:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009961:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009965:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009969:	29 c2                	sub    edx,eax
c000996b:	8d 2c 96             	lea    ebp,[esi+edx*4]
c000996e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009972:	83 c5 04             	add    ebp,0x4
c0009975:	e8 6e ff ff ff       	call   c00098e8 <fp_to_double>
c000997a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000997e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009986:	e8 53 ff ff ff       	call   c00098de <fp_to_int>
c000998b:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c000998e:	52                   	push   edx
c000998f:	52                   	push   edx
c0009990:	51                   	push   ecx
c0009991:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009995:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009999:	e8 ea d4 01 00       	call   c0026e88 <__subsf3>
c000999e:	89 04 24             	mov    DWORD PTR [esp],eax
c00099a1:	e8 c1 eb 01 00       	call   c0028567 <__extendsfdf2>
c00099a6:	83 c4 10             	add    esp,0x10
c00099a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099ad:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099c1:	e8 aa e1 01 00       	call   c0027b70 <__muldf3>
c00099c6:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00099ca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00099ce:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099d1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00099d5:	e8 8d eb 01 00       	call   c0028567 <__extendsfdf2>
c00099da:	83 c4 10             	add    esp,0x10
c00099dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099e5:	52                   	push   edx
c00099e6:	50                   	push   eax
c00099e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099ef:	e8 ff da 01 00       	call   c00274f3 <__adddf3>
c00099f4:	59                   	pop    ecx
c00099f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099fd:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c0009a03:	e8 5f eb 01 00       	call   c0028567 <__extendsfdf2>
c0009a08:	83 c4 10             	add    esp,0x10
c0009a0b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009a0f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009a13:	52                   	push   edx
c0009a14:	50                   	push   eax
c0009a15:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a19:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a1d:	e8 4e e1 01 00       	call   c0027b70 <__muldf3>
c0009a22:	83 c4 10             	add    esp,0x10
c0009a25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009a29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009a2d:	52                   	push   edx
c0009a2e:	50                   	push   eax
c0009a2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a33:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a37:	e8 b7 da 01 00       	call   c00274f3 <__adddf3>
c0009a3c:	83 c4 10             	add    esp,0x10
c0009a3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a47:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a4b:	0f 89 1d ff ff ff    	jns    c000996e <calc_output_single+0x52>
c0009a51:	89 d9                	mov    ecx,ebx
c0009a53:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a57:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a5b:	89 dd                	mov    ebp,ebx
c0009a5d:	29 c8                	sub    eax,ecx
c0009a5f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a67:	99                   	cdq    
c0009a68:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a70:	f7 fb                	idiv   ebx
c0009a72:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a76:	0f af e8             	imul   ebp,eax
c0009a79:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a7d:	01 cd                	add    ebp,ecx
c0009a7f:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a82:	89 e8                	mov    eax,ebp
c0009a84:	83 ee 04             	sub    esi,0x4
c0009a87:	e8 5c fe ff ff       	call   c00098e8 <fp_to_double>
c0009a8c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a90:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a94:	89 e8                	mov    eax,ebp
c0009a96:	29 dd                	sub    ebp,ebx
c0009a98:	e8 41 fe ff ff       	call   c00098de <fp_to_int>
c0009a9d:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009aa0:	52                   	push   edx
c0009aa1:	52                   	push   edx
c0009aa2:	51                   	push   ecx
c0009aa3:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009aa7:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009aab:	e8 d8 d3 01 00       	call   c0026e88 <__subsf3>
c0009ab0:	89 04 24             	mov    DWORD PTR [esp],eax
c0009ab3:	e8 af ea 01 00       	call   c0028567 <__extendsfdf2>
c0009ab8:	83 c4 10             	add    esp,0x10
c0009abb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009abf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009ac3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ac7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009acb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009acf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ad3:	e8 98 e0 01 00       	call   c0027b70 <__muldf3>
c0009ad8:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009adc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ae0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009ae3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009ae7:	e8 7b ea 01 00       	call   c0028567 <__extendsfdf2>
c0009aec:	83 c4 10             	add    esp,0x10
c0009aef:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009af3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009af7:	52                   	push   edx
c0009af8:	50                   	push   eax
c0009af9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b01:	e8 ed d9 01 00       	call   c00274f3 <__adddf3>
c0009b06:	59                   	pop    ecx
c0009b07:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009b0b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009b0f:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009b15:	e8 4d ea 01 00       	call   c0028567 <__extendsfdf2>
c0009b1a:	83 c4 10             	add    esp,0x10
c0009b1d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b21:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b25:	52                   	push   edx
c0009b26:	50                   	push   eax
c0009b27:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2f:	e8 3c e0 01 00       	call   c0027b70 <__muldf3>
c0009b34:	83 c4 10             	add    esp,0x10
c0009b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b3f:	52                   	push   edx
c0009b40:	50                   	push   eax
c0009b41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b49:	e8 a5 d9 01 00       	call   c00274f3 <__adddf3>
c0009b4e:	83 c4 10             	add    esp,0x10
c0009b51:	85 ed                	test   ebp,ebp
c0009b53:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b57:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b5b:	0f 8f 21 ff ff ff    	jg     c0009a82 <calc_output_single+0x166>
c0009b61:	52                   	push   edx
c0009b62:	50                   	push   eax
c0009b63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b6b:	e8 83 d9 01 00       	call   c00274f3 <__adddf3>
c0009b70:	83 c4 5c             	add    esp,0x5c
c0009b73:	5b                   	pop    ebx
c0009b74:	5e                   	pop    esi
c0009b75:	5f                   	pop    edi
c0009b76:	5d                   	pop    ebp
c0009b77:	c3                   	ret    

c0009b78 <calc_output_stereo>:
c0009b78:	55                   	push   ebp
c0009b79:	89 cd                	mov    ebp,ecx
c0009b7b:	57                   	push   edi
c0009b7c:	56                   	push   esi
c0009b7d:	53                   	push   ebx
c0009b7e:	89 c3                	mov    ebx,eax
c0009b80:	83 ec 6c             	sub    esp,0x6c
c0009b83:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b87:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b8e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b95:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b99:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b9d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009ba0:	e8 35 fd ff ff       	call   c00098da <int_to_fp>
c0009ba5:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009bad:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bb1:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009bb9:	29 c8                	sub    eax,ecx
c0009bbb:	99                   	cdq    
c0009bbc:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009bc0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009bc4:	0f af d0             	imul   edx,eax
c0009bc7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009bca:	31 d2                	xor    edx,edx
c0009bcc:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009bd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009bd4:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009bd7:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009bdb:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009bde:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009be2:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009be6:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009be9:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bee:	29 c1                	sub    ecx,eax
c0009bf0:	31 c0                	xor    eax,eax
c0009bf2:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bf5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bf9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bfd:	83 c7 08             	add    edi,0x8
c0009c00:	e8 e3 fc ff ff       	call   c00098e8 <fp_to_double>
c0009c05:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009c09:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009c0d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c11:	e8 c8 fc ff ff       	call   c00098de <fp_to_int>
c0009c16:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009c19:	52                   	push   edx
c0009c1a:	52                   	push   edx
c0009c1b:	51                   	push   ecx
c0009c1c:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009c20:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009c24:	e8 5f d2 01 00       	call   c0026e88 <__subsf3>
c0009c29:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c2c:	e8 36 e9 01 00       	call   c0028567 <__extendsfdf2>
c0009c31:	83 c4 10             	add    esp,0x10
c0009c34:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c38:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c3c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c40:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c44:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c48:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c4c:	e8 1f df 01 00       	call   c0027b70 <__muldf3>
c0009c51:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c55:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c59:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c5c:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c60:	e8 02 e9 01 00       	call   c0028567 <__extendsfdf2>
c0009c65:	83 c4 10             	add    esp,0x10
c0009c68:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c6c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c70:	52                   	push   edx
c0009c71:	50                   	push   eax
c0009c72:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c76:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c7a:	e8 74 d8 01 00       	call   c00274f3 <__adddf3>
c0009c7f:	59                   	pop    ecx
c0009c80:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c84:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c88:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c8e:	e8 d4 e8 01 00       	call   c0028567 <__extendsfdf2>
c0009c93:	83 c4 10             	add    esp,0x10
c0009c96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c9e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009caa:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cae:	e8 bd de 01 00       	call   c0027b70 <__muldf3>
c0009cb3:	83 c4 10             	add    esp,0x10
c0009cb6:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cba:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cbe:	52                   	push   edx
c0009cbf:	50                   	push   eax
c0009cc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc8:	e8 26 d8 01 00       	call   c00274f3 <__adddf3>
c0009ccd:	59                   	pop    ecx
c0009cce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009cd2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009cd6:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009cdc:	e8 86 e8 01 00       	call   c0028567 <__extendsfdf2>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ce8:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cf8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cfc:	e8 6f de 01 00       	call   c0027b70 <__muldf3>
c0009d01:	83 c4 10             	add    esp,0x10
c0009d04:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009d08:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009d0c:	52                   	push   edx
c0009d0d:	50                   	push   eax
c0009d0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d12:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d16:	e8 d8 d7 01 00       	call   c00274f3 <__adddf3>
c0009d1b:	83 c4 10             	add    esp,0x10
c0009d1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009d22:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d26:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d2a:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009d2e:	0f 89 c5 fe ff ff    	jns    c0009bf9 <calc_output_stereo+0x81>
c0009d34:	29 e9                	sub    ecx,ebp
c0009d36:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d3a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d3e:	29 c8                	sub    eax,ecx
c0009d40:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d48:	99                   	cdq    
c0009d49:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d4d:	31 d2                	xor    edx,edx
c0009d4f:	0f af f8             	imul   edi,eax
c0009d52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d56:	40                   	inc    eax
c0009d57:	01 cf                	add    edi,ecx
c0009d59:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d5e:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d62:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d6a:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d6d:	31 c0                	xor    eax,eax
c0009d6f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d73:	89 f8                	mov    eax,edi
c0009d75:	83 eb 08             	sub    ebx,0x8
c0009d78:	e8 6b fb ff ff       	call   c00098e8 <fp_to_double>
c0009d7d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d81:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d85:	89 f8                	mov    eax,edi
c0009d87:	e8 52 fb ff ff       	call   c00098de <fp_to_int>
c0009d8c:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d8f:	52                   	push   edx
c0009d90:	52                   	push   edx
c0009d91:	55                   	push   ebp
c0009d92:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d96:	e8 ed d0 01 00       	call   c0026e88 <__subsf3>
c0009d9b:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d9e:	e8 c4 e7 01 00       	call   c0028567 <__extendsfdf2>
c0009da3:	83 c4 10             	add    esp,0x10
c0009da6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009daa:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dbe:	e8 ad dd 01 00       	call   c0027b70 <__muldf3>
c0009dc3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009dc6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009dca:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009dce:	e8 94 e7 01 00       	call   c0028567 <__extendsfdf2>
c0009dd3:	83 c4 10             	add    esp,0x10
c0009dd6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dda:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dde:	52                   	push   edx
c0009ddf:	50                   	push   eax
c0009de0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de8:	e8 06 d7 01 00       	call   c00274f3 <__adddf3>
c0009ded:	59                   	pop    ecx
c0009dee:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009df2:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009df6:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dfc:	e8 66 e7 01 00       	call   c0028567 <__extendsfdf2>
c0009e01:	83 c4 10             	add    esp,0x10
c0009e04:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e08:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e0c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e10:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e14:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e1c:	e8 4f dd 01 00       	call   c0027b70 <__muldf3>
c0009e21:	83 c4 10             	add    esp,0x10
c0009e24:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e28:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e2c:	52                   	push   edx
c0009e2d:	50                   	push   eax
c0009e2e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e32:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e36:	e8 b8 d6 01 00       	call   c00274f3 <__adddf3>
c0009e3b:	5d                   	pop    ebp
c0009e3c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e40:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e44:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e4a:	e8 18 e7 01 00       	call   c0028567 <__extendsfdf2>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e56:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e5a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e5e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e62:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e66:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e6a:	e8 01 dd 01 00       	call   c0027b70 <__muldf3>
c0009e6f:	83 c4 10             	add    esp,0x10
c0009e72:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e76:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e7a:	52                   	push   edx
c0009e7b:	50                   	push   eax
c0009e7c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e80:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e84:	e8 6a d6 01 00       	call   c00274f3 <__adddf3>
c0009e89:	83 c4 10             	add    esp,0x10
c0009e8c:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e90:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e94:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e98:	85 ff                	test   edi,edi
c0009e9a:	0f 8f d3 fe ff ff    	jg     c0009d73 <calc_output_stereo+0x1fb>
c0009ea0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb0:	e8 3e d6 01 00       	call   c00274f3 <__adddf3>
c0009eb5:	83 c4 10             	add    esp,0x10
c0009eb8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ebc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ec0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ecc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ed0:	e8 9b dc 01 00       	call   c0027b70 <__muldf3>
c0009ed5:	59                   	pop    ecx
c0009ed6:	5b                   	pop    ebx
c0009ed7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009edb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009edf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee7:	e8 57 e5 01 00       	call   c0028443 <__truncdfsf2>
c0009eec:	83 c4 10             	add    esp,0x10
c0009eef:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ef6:	89 03                	mov    DWORD PTR [ebx],eax
c0009ef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009efc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f08:	e8 e6 d5 01 00       	call   c00274f3 <__adddf3>
c0009f0d:	83 c4 10             	add    esp,0x10
c0009f10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009f14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009f18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f1c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f28:	e8 43 dc 01 00       	call   c0027b70 <__muldf3>
c0009f2d:	5e                   	pop    esi
c0009f2e:	5f                   	pop    edi
c0009f2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f33:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3f:	e8 ff e4 01 00       	call   c0028443 <__truncdfsf2>
c0009f44:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f4b:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f4e:	83 c4 7c             	add    esp,0x7c
c0009f51:	5b                   	pop    ebx
c0009f52:	5e                   	pop    esi
c0009f53:	5f                   	pop    edi
c0009f54:	5d                   	pop    ebp
c0009f55:	c3                   	ret    

c0009f56 <calc_output_quad>:
c0009f56:	55                   	push   ebp
c0009f57:	57                   	push   edi
c0009f58:	56                   	push   esi
c0009f59:	89 c6                	mov    esi,eax
c0009f5b:	53                   	push   ebx
c0009f5c:	83 ec 7c             	sub    esp,0x7c
c0009f5f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f63:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f67:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f6e:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f75:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f79:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f7d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f80:	e8 55 f9 ff ff       	call   c00098da <int_to_fp>
c0009f85:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f88:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f8b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f8f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f93:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f97:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f9b:	99                   	cdq    
c0009f9c:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009fa0:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009fa4:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009fa7:	31 d2                	xor    edx,edx
c0009fa9:	0f af d8             	imul   ebx,eax
c0009fac:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009fb4:	0f af c7             	imul   eax,edi
c0009fb7:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009fbb:	29 c1                	sub    ecx,eax
c0009fbd:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009fc5:	31 c0                	xor    eax,eax
c0009fc7:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009fca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009fce:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009fd2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fd6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fda:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fde:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fe2:	89 d8                	mov    eax,ebx
c0009fe4:	83 c7 10             	add    edi,0x10
c0009fe7:	e8 fc f8 ff ff       	call   c00098e8 <fp_to_double>
c0009fec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009ff0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ff4:	89 d8                	mov    eax,ebx
c0009ff6:	e8 e3 f8 ff ff       	call   c00098de <fp_to_int>
c0009ffb:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fff:	52                   	push   edx
c000a000:	52                   	push   edx
c000a001:	51                   	push   ecx
c000a002:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c000a006:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a00a:	e8 79 ce 01 00       	call   c0026e88 <__subsf3>
c000a00f:	89 04 24             	mov    DWORD PTR [esp],eax
c000a012:	e8 50 e5 01 00       	call   c0028567 <__extendsfdf2>
c000a017:	83 c4 10             	add    esp,0x10
c000a01a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a01e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a02a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a02e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a032:	e8 39 db 01 00       	call   c0027b70 <__muldf3>
c000a037:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a03b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a03f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a042:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a046:	e8 1c e5 01 00       	call   c0028567 <__extendsfdf2>
c000a04b:	83 c4 10             	add    esp,0x10
c000a04e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a052:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a056:	52                   	push   edx
c000a057:	50                   	push   eax
c000a058:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a05c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a060:	e8 8e d4 01 00       	call   c00274f3 <__adddf3>
c000a065:	59                   	pop    ecx
c000a066:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a06a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a06e:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a074:	e8 ee e4 01 00       	call   c0028567 <__extendsfdf2>
c000a079:	83 c4 10             	add    esp,0x10
c000a07c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a080:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a08c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a090:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a094:	e8 d7 da 01 00       	call   c0027b70 <__muldf3>
c000a099:	83 c4 10             	add    esp,0x10
c000a09c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0a4:	52                   	push   edx
c000a0a5:	50                   	push   eax
c000a0a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0ae:	e8 40 d4 01 00       	call   c00274f3 <__adddf3>
c000a0b3:	59                   	pop    ecx
c000a0b4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a0b8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a0bc:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a0c2:	e8 a0 e4 01 00       	call   c0028567 <__extendsfdf2>
c000a0c7:	83 c4 10             	add    esp,0x10
c000a0ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0e2:	e8 89 da 01 00       	call   c0027b70 <__muldf3>
c000a0e7:	83 c4 10             	add    esp,0x10
c000a0ea:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ee:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0f2:	52                   	push   edx
c000a0f3:	50                   	push   eax
c000a0f4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0f8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0fc:	e8 f2 d3 01 00       	call   c00274f3 <__adddf3>
c000a101:	59                   	pop    ecx
c000a102:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a106:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a10a:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a110:	e8 52 e4 01 00       	call   c0028567 <__extendsfdf2>
c000a115:	83 c4 10             	add    esp,0x10
c000a118:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a11c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a120:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a124:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a128:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a12c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a130:	e8 3b da 01 00       	call   c0027b70 <__muldf3>
c000a135:	83 c4 10             	add    esp,0x10
c000a138:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a13c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a140:	52                   	push   edx
c000a141:	50                   	push   eax
c000a142:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a146:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a14a:	e8 a4 d3 01 00       	call   c00274f3 <__adddf3>
c000a14f:	59                   	pop    ecx
c000a150:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a154:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a158:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a15e:	e8 04 e4 01 00       	call   c0028567 <__extendsfdf2>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a16a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a16e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a172:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a176:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17e:	e8 ed d9 01 00       	call   c0027b70 <__muldf3>
c000a183:	83 c4 10             	add    esp,0x10
c000a186:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a18a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a18e:	52                   	push   edx
c000a18f:	50                   	push   eax
c000a190:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a194:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a198:	e8 56 d3 01 00       	call   c00274f3 <__adddf3>
c000a19d:	83 c4 10             	add    esp,0x10
c000a1a0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a1a4:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a1a8:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a1ac:	0f 89 30 fe ff ff    	jns    c0009fe2 <calc_output_quad+0x8c>
c000a1b2:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a1b6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a1ba:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a1be:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a1c2:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a1ca:	29 c8                	sub    eax,ecx
c000a1cc:	99                   	cdq    
c000a1cd:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a1d1:	31 d2                	xor    edx,edx
c000a1d3:	0f af d8             	imul   ebx,eax
c000a1d6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1da:	40                   	inc    eax
c000a1db:	01 cb                	add    ebx,ecx
c000a1dd:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1e2:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1e6:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1ea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1ee:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1f1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1f9:	31 c0                	xor    eax,eax
c000a1fb:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1ff:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a203:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a207:	89 d8                	mov    eax,ebx
c000a209:	83 ee 10             	sub    esi,0x10
c000a20c:	e8 d7 f6 ff ff       	call   c00098e8 <fp_to_double>
c000a211:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a215:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a219:	89 d8                	mov    eax,ebx
c000a21b:	e8 be f6 ff ff       	call   c00098de <fp_to_int>
c000a220:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a224:	52                   	push   edx
c000a225:	52                   	push   edx
c000a226:	57                   	push   edi
c000a227:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a22b:	e8 58 cc 01 00       	call   c0026e88 <__subsf3>
c000a230:	89 04 24             	mov    DWORD PTR [esp],eax
c000a233:	e8 2f e3 01 00       	call   c0028567 <__extendsfdf2>
c000a238:	83 c4 10             	add    esp,0x10
c000a23b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a23f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a243:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a247:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a24b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a24f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a253:	e8 18 d9 01 00       	call   c0027b70 <__muldf3>
c000a258:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a25b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a25f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a263:	e8 ff e2 01 00       	call   c0028567 <__extendsfdf2>
c000a268:	83 c4 10             	add    esp,0x10
c000a26b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a26f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a273:	52                   	push   edx
c000a274:	50                   	push   eax
c000a275:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a279:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a27d:	e8 71 d2 01 00       	call   c00274f3 <__adddf3>
c000a282:	59                   	pop    ecx
c000a283:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a287:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a28b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a291:	e8 d1 e2 01 00       	call   c0028567 <__extendsfdf2>
c000a296:	83 c4 10             	add    esp,0x10
c000a299:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a29d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ad:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2b1:	e8 ba d8 01 00       	call   c0027b70 <__muldf3>
c000a2b6:	83 c4 10             	add    esp,0x10
c000a2b9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2bd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2c1:	52                   	push   edx
c000a2c2:	50                   	push   eax
c000a2c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2cb:	e8 23 d2 01 00       	call   c00274f3 <__adddf3>
c000a2d0:	5f                   	pop    edi
c000a2d1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a2d5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a2d9:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2df:	e8 83 e2 01 00       	call   c0028567 <__extendsfdf2>
c000a2e4:	83 c4 10             	add    esp,0x10
c000a2e7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2eb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2fb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ff:	e8 6c d8 01 00       	call   c0027b70 <__muldf3>
c000a304:	83 c4 10             	add    esp,0x10
c000a307:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a30b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a30f:	52                   	push   edx
c000a310:	50                   	push   eax
c000a311:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a315:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a319:	e8 d5 d1 01 00       	call   c00274f3 <__adddf3>
c000a31e:	59                   	pop    ecx
c000a31f:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a323:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a327:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a32d:	e8 35 e2 01 00       	call   c0028567 <__extendsfdf2>
c000a332:	83 c4 10             	add    esp,0x10
c000a335:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a339:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a33d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a341:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a345:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a349:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a34d:	e8 1e d8 01 00       	call   c0027b70 <__muldf3>
c000a352:	83 c4 10             	add    esp,0x10
c000a355:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a359:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a35d:	52                   	push   edx
c000a35e:	50                   	push   eax
c000a35f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a363:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a367:	e8 87 d1 01 00       	call   c00274f3 <__adddf3>
c000a36c:	5f                   	pop    edi
c000a36d:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a371:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a375:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a37b:	e8 e7 e1 01 00       	call   c0028567 <__extendsfdf2>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a387:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a38b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a38f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a393:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a397:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a39b:	e8 d0 d7 01 00       	call   c0027b70 <__muldf3>
c000a3a0:	83 c4 10             	add    esp,0x10
c000a3a3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a3a7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a3ab:	52                   	push   edx
c000a3ac:	50                   	push   eax
c000a3ad:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b5:	e8 39 d1 01 00       	call   c00274f3 <__adddf3>
c000a3ba:	83 c4 10             	add    esp,0x10
c000a3bd:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a3c1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a3c5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a3c9:	85 db                	test   ebx,ebx
c000a3cb:	0f 8f 36 fe ff ff    	jg     c000a207 <calc_output_quad+0x2b1>
c000a3d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3e1:	e8 0d d1 01 00       	call   c00274f3 <__adddf3>
c000a3e6:	83 c4 10             	add    esp,0x10
c000a3e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a401:	e8 6a d7 01 00       	call   c0027b70 <__muldf3>
c000a406:	59                   	pop    ecx
c000a407:	5b                   	pop    ebx
c000a408:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a40c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a410:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a414:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a418:	e8 26 e0 01 00       	call   c0028443 <__truncdfsf2>
c000a41d:	83 c4 10             	add    esp,0x10
c000a420:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a427:	89 06                	mov    DWORD PTR [esi],eax
c000a429:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a42d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a431:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a435:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a439:	e8 b5 d0 01 00       	call   c00274f3 <__adddf3>
c000a43e:	83 c4 10             	add    esp,0x10
c000a441:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a445:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a449:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a44d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a451:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a455:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a459:	e8 12 d7 01 00       	call   c0027b70 <__muldf3>
c000a45e:	5e                   	pop    esi
c000a45f:	5f                   	pop    edi
c000a460:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a464:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	e8 ce df 01 00       	call   c0028443 <__truncdfsf2>
c000a475:	83 c4 10             	add    esp,0x10
c000a478:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a47f:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a482:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a486:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a48a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a48e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a492:	e8 5c d0 01 00       	call   c00274f3 <__adddf3>
c000a497:	83 c4 10             	add    esp,0x10
c000a49a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a49e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4b2:	e8 b9 d6 01 00       	call   c0027b70 <__muldf3>
c000a4b7:	5d                   	pop    ebp
c000a4b8:	59                   	pop    ecx
c000a4b9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	e8 75 df 01 00       	call   c0028443 <__truncdfsf2>
c000a4ce:	83 c4 10             	add    esp,0x10
c000a4d1:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a4d8:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4db:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4df:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4eb:	e8 03 d0 01 00       	call   c00274f3 <__adddf3>
c000a4f0:	83 c4 10             	add    esp,0x10
c000a4f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a503:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a507:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a50b:	e8 60 d6 01 00       	call   c0027b70 <__muldf3>
c000a510:	5b                   	pop    ebx
c000a511:	5e                   	pop    esi
c000a512:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a516:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a51a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a51e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a522:	e8 1c df 01 00       	call   c0028443 <__truncdfsf2>
c000a527:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a52e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a531:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a537:	5b                   	pop    ebx
c000a538:	5e                   	pop    esi
c000a539:	5f                   	pop    edi
c000a53a:	5d                   	pop    ebp
c000a53b:	c3                   	ret    

c000a53c <calc_output_hex>:
c000a53c:	55                   	push   ebp
c000a53d:	89 cd                	mov    ebp,ecx
c000a53f:	57                   	push   edi
c000a540:	56                   	push   esi
c000a541:	53                   	push   ebx
c000a542:	89 c3                	mov    ebx,eax
c000a544:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a54a:	89 14 24             	mov    DWORD PTR [esp],edx
c000a54d:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a554:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a55b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a55f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a563:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a566:	e8 6f f3 ff ff       	call   c00098da <int_to_fp>
c000a56b:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a56e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a572:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a575:	29 c8                	sub    eax,ecx
c000a577:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a57b:	99                   	cdq    
c000a57c:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a584:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a587:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a58f:	0f af f8             	imul   edi,eax
c000a592:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a595:	01 cf                	add    edi,ecx
c000a597:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a59b:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a59e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a5a2:	0f af c2             	imul   eax,edx
c000a5a5:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a5a9:	29 c1                	sub    ecx,eax
c000a5ab:	31 d2                	xor    edx,edx
c000a5ad:	31 c0                	xor    eax,eax
c000a5af:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a5ba:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a5be:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a5c2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a5c6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a5ca:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a5ce:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a5d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5d6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5da:	89 f8                	mov    eax,edi
c000a5dc:	e8 07 f3 ff ff       	call   c00098e8 <fp_to_double>
c000a5e1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5e9:	89 f8                	mov    eax,edi
c000a5eb:	e8 ee f2 ff ff       	call   c00098de <fp_to_int>
c000a5f0:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5f4:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5f7:	52                   	push   edx
c000a5f8:	52                   	push   edx
c000a5f9:	51                   	push   ecx
c000a5fa:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5fe:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a605:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a609:	e8 7a c8 01 00       	call   c0026e88 <__subsf3>
c000a60e:	89 04 24             	mov    DWORD PTR [esp],eax
c000a611:	e8 51 df 01 00       	call   c0028567 <__extendsfdf2>
c000a616:	83 c4 10             	add    esp,0x10
c000a619:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a61d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a625:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a629:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a62d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a631:	e8 3a d5 01 00       	call   c0027b70 <__muldf3>
c000a636:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a63a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a63e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a641:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a645:	e8 1d df 01 00       	call   c0028567 <__extendsfdf2>
c000a64a:	83 c4 10             	add    esp,0x10
c000a64d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a651:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a655:	52                   	push   edx
c000a656:	50                   	push   eax
c000a657:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65f:	e8 8f ce 01 00       	call   c00274f3 <__adddf3>
c000a664:	59                   	pop    ecx
c000a665:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a669:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a66d:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a673:	e8 ef de 01 00       	call   c0028567 <__extendsfdf2>
c000a678:	83 c4 10             	add    esp,0x10
c000a67b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a67f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a683:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a687:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a68b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a68f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a693:	e8 d8 d4 01 00       	call   c0027b70 <__muldf3>
c000a698:	83 c4 10             	add    esp,0x10
c000a69b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a69f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6a3:	52                   	push   edx
c000a6a4:	50                   	push   eax
c000a6a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6ad:	e8 41 ce 01 00       	call   c00274f3 <__adddf3>
c000a6b2:	59                   	pop    ecx
c000a6b3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a6b7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a6bb:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a6c1:	e8 a1 de 01 00       	call   c0028567 <__extendsfdf2>
c000a6c6:	83 c4 10             	add    esp,0x10
c000a6c9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6cd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6dd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6e1:	e8 8a d4 01 00       	call   c0027b70 <__muldf3>
c000a6e6:	83 c4 10             	add    esp,0x10
c000a6e9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6ed:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6f1:	52                   	push   edx
c000a6f2:	50                   	push   eax
c000a6f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6f7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6fb:	e8 f3 cd 01 00       	call   c00274f3 <__adddf3>
c000a700:	59                   	pop    ecx
c000a701:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a705:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a709:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a70f:	e8 53 de 01 00       	call   c0028567 <__extendsfdf2>
c000a714:	83 c4 10             	add    esp,0x10
c000a717:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a71b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a71f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a723:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a727:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72f:	e8 3c d4 01 00       	call   c0027b70 <__muldf3>
c000a734:	83 c4 10             	add    esp,0x10
c000a737:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a73b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a73f:	52                   	push   edx
c000a740:	50                   	push   eax
c000a741:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a745:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a749:	e8 a5 cd 01 00       	call   c00274f3 <__adddf3>
c000a74e:	59                   	pop    ecx
c000a74f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a753:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a757:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a75d:	e8 05 de 01 00       	call   c0028567 <__extendsfdf2>
c000a762:	83 c4 10             	add    esp,0x10
c000a765:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a769:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a76d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a771:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a775:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a779:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a77d:	e8 ee d3 01 00       	call   c0027b70 <__muldf3>
c000a782:	83 c4 10             	add    esp,0x10
c000a785:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a789:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a78d:	52                   	push   edx
c000a78e:	50                   	push   eax
c000a78f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a793:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a797:	e8 57 cd 01 00       	call   c00274f3 <__adddf3>
c000a79c:	59                   	pop    ecx
c000a79d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a7a1:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a7a5:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a7ab:	e8 b7 dd 01 00       	call   c0028567 <__extendsfdf2>
c000a7b0:	83 c4 10             	add    esp,0x10
c000a7b3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7b7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7c3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7c7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7cb:	e8 a0 d3 01 00       	call   c0027b70 <__muldf3>
c000a7d0:	83 c4 10             	add    esp,0x10
c000a7d3:	83 c6 18             	add    esi,0x18
c000a7d6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7da:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7de:	52                   	push   edx
c000a7df:	50                   	push   eax
c000a7e0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e8:	e8 06 cd 01 00       	call   c00274f3 <__adddf3>
c000a7ed:	59                   	pop    ecx
c000a7ee:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7f2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7f6:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7fc:	e8 66 dd 01 00       	call   c0028567 <__extendsfdf2>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a808:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a80c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a810:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a814:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a818:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a81c:	e8 4f d3 01 00       	call   c0027b70 <__muldf3>
c000a821:	83 c4 10             	add    esp,0x10
c000a824:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a828:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a82c:	52                   	push   edx
c000a82d:	50                   	push   eax
c000a82e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a832:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a836:	e8 b8 cc 01 00       	call   c00274f3 <__adddf3>
c000a83b:	83 c4 10             	add    esp,0x10
c000a83e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a842:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a846:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a849:	0f 89 8b fd ff ff    	jns    c000a5da <calc_output_hex+0x9e>
c000a84f:	31 f6                	xor    esi,esi
c000a851:	31 ff                	xor    edi,edi
c000a853:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a857:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a85a:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a85e:	29 e9                	sub    ecx,ebp
c000a860:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a864:	29 c8                	sub    eax,ecx
c000a866:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a869:	99                   	cdq    
c000a86a:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a86e:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a871:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a875:	0f af e8             	imul   ebp,eax
c000a878:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a87c:	40                   	inc    eax
c000a87d:	01 cd                	add    ebp,ecx
c000a87f:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a884:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a888:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a88c:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a890:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a893:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a897:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a89b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a89f:	89 e8                	mov    eax,ebp
c000a8a1:	e8 42 f0 ff ff       	call   c00098e8 <fp_to_double>
c000a8a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8ae:	89 e8                	mov    eax,ebp
c000a8b0:	e8 29 f0 ff ff       	call   c00098de <fp_to_int>
c000a8b5:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a8b9:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a8bc:	52                   	push   edx
c000a8bd:	52                   	push   edx
c000a8be:	51                   	push   ecx
c000a8bf:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a8c6:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a8cd:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a8d1:	e8 b2 c5 01 00       	call   c0026e88 <__subsf3>
c000a8d6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8d9:	e8 89 dc 01 00       	call   c0028567 <__extendsfdf2>
c000a8de:	83 c4 10             	add    esp,0x10
c000a8e1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8f1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f9:	e8 72 d2 01 00       	call   c0027b70 <__muldf3>
c000a8fe:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a905:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a909:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a90c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a910:	e8 52 dc 01 00       	call   c0028567 <__extendsfdf2>
c000a915:	83 c4 10             	add    esp,0x10
c000a918:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a91c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a920:	52                   	push   edx
c000a921:	50                   	push   eax
c000a922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a92a:	e8 c4 cb 01 00       	call   c00274f3 <__adddf3>
c000a92f:	59                   	pop    ecx
c000a930:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a934:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a938:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a93e:	e8 24 dc 01 00       	call   c0028567 <__extendsfdf2>
c000a943:	83 c4 10             	add    esp,0x10
c000a946:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a94a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a94e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a952:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a956:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95e:	e8 0d d2 01 00       	call   c0027b70 <__muldf3>
c000a963:	83 c4 10             	add    esp,0x10
c000a966:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a96a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a96e:	52                   	push   edx
c000a96f:	50                   	push   eax
c000a970:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a974:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a978:	e8 76 cb 01 00       	call   c00274f3 <__adddf3>
c000a97d:	59                   	pop    ecx
c000a97e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a982:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a986:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a98c:	e8 d6 db 01 00       	call   c0028567 <__extendsfdf2>
c000a991:	83 c4 10             	add    esp,0x10
c000a994:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a998:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a99c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9a8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9ac:	e8 bf d1 01 00       	call   c0027b70 <__muldf3>
c000a9b1:	83 c4 10             	add    esp,0x10
c000a9b4:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9b8:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9bc:	52                   	push   edx
c000a9bd:	50                   	push   eax
c000a9be:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c2:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c6:	e8 28 cb 01 00       	call   c00274f3 <__adddf3>
c000a9cb:	59                   	pop    ecx
c000a9cc:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a9d0:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a9d4:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9da:	e8 88 db 01 00       	call   c0028567 <__extendsfdf2>
c000a9df:	83 c4 10             	add    esp,0x10
c000a9e2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9e6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9f2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9f6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9fa:	e8 71 d1 01 00       	call   c0027b70 <__muldf3>
c000a9ff:	83 c4 10             	add    esp,0x10
c000aa02:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa06:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa0a:	52                   	push   edx
c000aa0b:	50                   	push   eax
c000aa0c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa10:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa14:	e8 da ca 01 00       	call   c00274f3 <__adddf3>
c000aa19:	59                   	pop    ecx
c000aa1a:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000aa1e:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000aa22:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000aa28:	e8 3a db 01 00       	call   c0028567 <__extendsfdf2>
c000aa2d:	83 c4 10             	add    esp,0x10
c000aa30:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa34:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa40:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa44:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa48:	e8 23 d1 01 00       	call   c0027b70 <__muldf3>
c000aa4d:	83 c4 10             	add    esp,0x10
c000aa50:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa54:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa58:	52                   	push   edx
c000aa59:	50                   	push   eax
c000aa5a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa5e:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa62:	e8 8c ca 01 00       	call   c00274f3 <__adddf3>
c000aa67:	59                   	pop    ecx
c000aa68:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa6c:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa70:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa76:	e8 ec da 01 00       	call   c0028567 <__extendsfdf2>
c000aa7b:	83 c4 10             	add    esp,0x10
c000aa7e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa82:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa92:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa96:	e8 d5 d0 01 00       	call   c0027b70 <__muldf3>
c000aa9b:	83 c4 10             	add    esp,0x10
c000aa9e:	83 eb 18             	sub    ebx,0x18
c000aaa1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aaa5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aaa9:	52                   	push   edx
c000aaaa:	50                   	push   eax
c000aaab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aaaf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aab3:	e8 3b ca 01 00       	call   c00274f3 <__adddf3>
c000aab8:	59                   	pop    ecx
c000aab9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aabd:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aac1:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aac7:	e8 9b da 01 00       	call   c0028567 <__extendsfdf2>
c000aacc:	83 c4 10             	add    esp,0x10
c000aacf:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aad3:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aad7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadf:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae3:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae7:	e8 84 d0 01 00       	call   c0027b70 <__muldf3>
c000aaec:	83 c4 10             	add    esp,0x10
c000aaef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aaf3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aaf7:	52                   	push   edx
c000aaf8:	50                   	push   eax
c000aaf9:	57                   	push   edi
c000aafa:	56                   	push   esi
c000aafb:	e8 f3 c9 01 00       	call   c00274f3 <__adddf3>
c000ab00:	83 c4 10             	add    esp,0x10
c000ab03:	89 c6                	mov    esi,eax
c000ab05:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000ab08:	89 d7                	mov    edi,edx
c000ab0a:	85 ed                	test   ebp,ebp
c000ab0c:	0f 8f 8d fd ff ff    	jg     c000a89f <calc_output_hex+0x363>
c000ab12:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab16:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab22:	e8 cc c9 01 00       	call   c00274f3 <__adddf3>
c000ab27:	83 c4 10             	add    esp,0x10
c000ab2a:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab2d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab31:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab35:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab3d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab41:	e8 2a d0 01 00       	call   c0027b70 <__muldf3>
c000ab46:	59                   	pop    ecx
c000ab47:	5b                   	pop    ebx
c000ab48:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab4c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab50:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab54:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab58:	e8 e6 d8 01 00       	call   c0028443 <__truncdfsf2>
c000ab5d:	83 c4 10             	add    esp,0x10
c000ab60:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab67:	89 03                	mov    DWORD PTR [ebx],eax
c000ab69:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab6d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab79:	e8 75 c9 01 00       	call   c00274f3 <__adddf3>
c000ab7e:	83 c4 10             	add    esp,0x10
c000ab81:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab84:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab98:	e8 d3 cf 01 00       	call   c0027b70 <__muldf3>
c000ab9d:	5d                   	pop    ebp
c000ab9e:	59                   	pop    ecx
c000ab9f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aba3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aba7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaf:	e8 8f d8 01 00       	call   c0028443 <__truncdfsf2>
c000abb4:	83 c4 10             	add    esp,0x10
c000abb7:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abbe:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000abc1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc5:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abcd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abd1:	e8 1d c9 01 00       	call   c00274f3 <__adddf3>
c000abd6:	83 c4 10             	add    esp,0x10
c000abd9:	89 04 24             	mov    DWORD PTR [esp],eax
c000abdc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abe0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf0:	e8 7b cf 01 00       	call   c0027b70 <__muldf3>
c000abf5:	5b                   	pop    ebx
c000abf6:	5d                   	pop    ebp
c000abf7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abfb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac07:	e8 37 d8 01 00       	call   c0028443 <__truncdfsf2>
c000ac0c:	83 c4 10             	add    esp,0x10
c000ac0f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac16:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ac19:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac1d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac21:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac25:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac29:	e8 c5 c8 01 00       	call   c00274f3 <__adddf3>
c000ac2e:	83 c4 10             	add    esp,0x10
c000ac31:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac34:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac38:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac3c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac48:	e8 23 cf 01 00       	call   c0027b70 <__muldf3>
c000ac4d:	59                   	pop    ecx
c000ac4e:	5b                   	pop    ebx
c000ac4f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac53:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac57:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5f:	e8 df d7 01 00       	call   c0028443 <__truncdfsf2>
c000ac64:	83 c4 10             	add    esp,0x10
c000ac67:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac6e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac79:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac7d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac81:	e8 6d c8 01 00       	call   c00274f3 <__adddf3>
c000ac86:	83 c4 10             	add    esp,0x10
c000ac89:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac8c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aca0:	e8 cb ce 01 00       	call   c0027b70 <__muldf3>
c000aca5:	5d                   	pop    ebp
c000aca6:	59                   	pop    ecx
c000aca7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acaf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb7:	e8 87 d7 01 00       	call   c0028443 <__truncdfsf2>
c000acbc:	83 c4 10             	add    esp,0x10
c000acbf:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000acc6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000acc9:	57                   	push   edi
c000acca:	56                   	push   esi
c000accb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000accf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acd3:	e8 1b c8 01 00       	call   c00274f3 <__adddf3>
c000acd8:	83 c4 10             	add    esp,0x10
c000acdb:	89 04 24             	mov    DWORD PTR [esp],eax
c000acde:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ace2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ace6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acf2:	e8 79 ce 01 00       	call   c0027b70 <__muldf3>
c000acf7:	5b                   	pop    ebx
c000acf8:	5e                   	pop    esi
c000acf9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acfd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad01:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad09:	e8 35 d7 01 00       	call   c0028443 <__truncdfsf2>
c000ad0e:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000ad15:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000ad18:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ad1e:	5b                   	pop    ebx
c000ad1f:	5e                   	pop    esi
c000ad20:	5f                   	pop    edi
c000ad21:	5d                   	pop    ebp
c000ad22:	c3                   	ret    

c000ad23 <sinc_reset>:
c000ad23:	56                   	push   esi
c000ad24:	53                   	push   ebx
c000ad25:	51                   	push   ecx
c000ad26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad2a:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ad2d:	85 db                	test   ebx,ebx
c000ad2f:	74 59                	je     c000ad8a <sinc_reset+0x67>
c000ad31:	31 d2                	xor    edx,edx
c000ad33:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad3a:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad3d:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad40:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad47:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad4e:	31 c0                	xor    eax,eax
c000ad50:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad56:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad59:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad5c:	52                   	push   edx
c000ad5d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad60:	c1 e0 02             	shl    eax,0x2
c000ad63:	50                   	push   eax
c000ad64:	6a 00                	push   0x0
c000ad66:	56                   	push   esi
c000ad67:	e8 0c 5a ff ff       	call   c0000778 <memset>
c000ad6c:	83 c4 0c             	add    esp,0xc
c000ad6f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad72:	c1 e0 02             	shl    eax,0x2
c000ad75:	50                   	push   eax
c000ad76:	68 aa 00 00 00       	push   0xaa
c000ad7b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad7e:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad81:	50                   	push   eax
c000ad82:	e8 f1 59 ff ff       	call   c0000778 <memset>
c000ad87:	83 c4 10             	add    esp,0x10
c000ad8a:	58                   	pop    eax
c000ad8b:	5b                   	pop    ebx
c000ad8c:	5e                   	pop    esi
c000ad8d:	c3                   	ret    

c000ad8e <calc_output_multi>:
c000ad8e:	55                   	push   ebp
c000ad8f:	57                   	push   edi
c000ad90:	56                   	push   esi
c000ad91:	89 c6                	mov    esi,eax
c000ad93:	53                   	push   ebx
c000ad94:	83 ec 4c             	sub    esp,0x4c
c000ad97:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad9b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad9f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ada3:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ada7:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000adab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000adaf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000adb3:	8d 46 44             	lea    eax,[esi+0x44]
c000adb6:	89 04 24             	mov    DWORD PTR [esp],eax
c000adb9:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000adbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000adc3:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000adc6:	e8 0f eb ff ff       	call   c00098da <int_to_fp>
c000adcb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000adce:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000add2:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000add6:	99                   	cdq    
c000add7:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000addb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000addf:	0f af d0             	imul   edx,eax
c000ade2:	0f af c3             	imul   eax,ebx
c000ade5:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000ade9:	29 c1                	sub    ecx,eax
c000adeb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adef:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adf3:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adfa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adfe:	57                   	push   edi
c000adff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae03:	6a 00                	push   0x0
c000ae05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae09:	e8 6a 59 ff ff       	call   c0000778 <memset>
c000ae0e:	83 c4 10             	add    esp,0x10
c000ae11:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae15:	89 df                	mov    edi,ebx
c000ae17:	e8 cc ea ff ff       	call   c00098e8 <fp_to_double>
c000ae1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae24:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae28:	e8 b1 ea ff ff       	call   c00098de <fp_to_int>
c000ae2d:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ae30:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ae33:	51                   	push   ecx
c000ae34:	51                   	push   ecx
c000ae35:	55                   	push   ebp
c000ae36:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae3a:	e8 49 c0 01 00       	call   c0026e88 <__subsf3>
c000ae3f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae42:	e8 20 d7 01 00       	call   c0028567 <__extendsfdf2>
c000ae47:	83 c4 10             	add    esp,0x10
c000ae4a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae4e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae56:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae5a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae5e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae62:	e8 09 cd 01 00       	call   c0027b70 <__muldf3>
c000ae67:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae6e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae72:	e8 f0 d6 01 00       	call   c0028567 <__extendsfdf2>
c000ae77:	83 c4 10             	add    esp,0x10
c000ae7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae82:	52                   	push   edx
c000ae83:	50                   	push   eax
c000ae84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae8c:	e8 62 c6 01 00       	call   c00274f3 <__adddf3>
c000ae91:	83 c4 10             	add    esp,0x10
c000ae94:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae98:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae9c:	89 f8                	mov    eax,edi
c000ae9e:	b9 08 00 00 00       	mov    ecx,0x8
c000aea3:	99                   	cdq    
c000aea4:	f7 f9                	idiv   ecx
c000aea6:	4a                   	dec    edx
c000aea7:	83 fa 06             	cmp    edx,0x6
c000aeaa:	77 07                	ja     c000aeb3 <calc_output_multi+0x125>
c000aeac:	ff 24 95 84 9d 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd627c]
c000aeb3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aeb6:	4f                   	dec    edi
c000aeb7:	83 ec 0c             	sub    esp,0xc
c000aeba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aebd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aec1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aec8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aecc:	e8 96 d6 01 00       	call   c0028567 <__extendsfdf2>
c000aed1:	83 c4 10             	add    esp,0x10
c000aed4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aed8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aedc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aee8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeec:	e8 7f cc 01 00       	call   c0027b70 <__muldf3>
c000aef1:	83 c4 10             	add    esp,0x10
c000aef4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aef8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aefc:	52                   	push   edx
c000aefd:	50                   	push   eax
c000aefe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af01:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af04:	e8 ea c5 01 00       	call   c00274f3 <__adddf3>
c000af09:	83 c4 10             	add    esp,0x10
c000af0c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af0f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af12:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af15:	4f                   	dec    edi
c000af16:	83 ec 0c             	sub    esp,0xc
c000af19:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af20:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af27:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af2b:	e8 37 d6 01 00       	call   c0028567 <__extendsfdf2>
c000af30:	83 c4 10             	add    esp,0x10
c000af33:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af37:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af43:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af47:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af4b:	e8 20 cc 01 00       	call   c0027b70 <__muldf3>
c000af50:	83 c4 10             	add    esp,0x10
c000af53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af57:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af5b:	52                   	push   edx
c000af5c:	50                   	push   eax
c000af5d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af60:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af63:	e8 8b c5 01 00       	call   c00274f3 <__adddf3>
c000af68:	83 c4 10             	add    esp,0x10
c000af6b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af6e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af71:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af74:	4f                   	dec    edi
c000af75:	83 ec 0c             	sub    esp,0xc
c000af78:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af7f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af86:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af8a:	e8 d8 d5 01 00       	call   c0028567 <__extendsfdf2>
c000af8f:	83 c4 10             	add    esp,0x10
c000af92:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af96:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afa2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afa6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afaa:	e8 c1 cb 01 00       	call   c0027b70 <__muldf3>
c000afaf:	83 c4 10             	add    esp,0x10
c000afb2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afb6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afba:	52                   	push   edx
c000afbb:	50                   	push   eax
c000afbc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afbf:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afc2:	e8 2c c5 01 00       	call   c00274f3 <__adddf3>
c000afc7:	83 c4 10             	add    esp,0x10
c000afca:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000afcd:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000afd0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000afd3:	4f                   	dec    edi
c000afd4:	83 ec 0c             	sub    esp,0xc
c000afd7:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afda:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afde:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afe5:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afe9:	e8 79 d5 01 00       	call   c0028567 <__extendsfdf2>
c000afee:	83 c4 10             	add    esp,0x10
c000aff1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aff5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aff9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000affd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b001:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b005:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b009:	e8 62 cb 01 00       	call   c0027b70 <__muldf3>
c000b00e:	83 c4 10             	add    esp,0x10
c000b011:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b015:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b019:	52                   	push   edx
c000b01a:	50                   	push   eax
c000b01b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b01e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b021:	e8 cd c4 01 00       	call   c00274f3 <__adddf3>
c000b026:	83 c4 10             	add    esp,0x10
c000b029:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b02c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b02f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b032:	4f                   	dec    edi
c000b033:	83 ec 0c             	sub    esp,0xc
c000b036:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b039:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b03d:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b044:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b048:	e8 1a d5 01 00       	call   c0028567 <__extendsfdf2>
c000b04d:	83 c4 10             	add    esp,0x10
c000b050:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b054:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b058:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b060:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b064:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b068:	e8 03 cb 01 00       	call   c0027b70 <__muldf3>
c000b06d:	83 c4 10             	add    esp,0x10
c000b070:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b074:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b078:	52                   	push   edx
c000b079:	50                   	push   eax
c000b07a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b07d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b080:	e8 6e c4 01 00       	call   c00274f3 <__adddf3>
c000b085:	83 c4 10             	add    esp,0x10
c000b088:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b08b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b08e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b091:	4f                   	dec    edi
c000b092:	83 ec 0c             	sub    esp,0xc
c000b095:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b098:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b09c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0a3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0a7:	e8 bb d4 01 00       	call   c0028567 <__extendsfdf2>
c000b0ac:	83 c4 10             	add    esp,0x10
c000b0af:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0b3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c7:	e8 a4 ca 01 00       	call   c0027b70 <__muldf3>
c000b0cc:	83 c4 10             	add    esp,0x10
c000b0cf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0d7:	52                   	push   edx
c000b0d8:	50                   	push   eax
c000b0d9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0dc:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0df:	e8 0f c4 01 00       	call   c00274f3 <__adddf3>
c000b0e4:	83 c4 10             	add    esp,0x10
c000b0e7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0ea:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0ed:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0f0:	4f                   	dec    edi
c000b0f1:	83 ec 0c             	sub    esp,0xc
c000b0f4:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0fb:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b102:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b106:	e8 5c d4 01 00       	call   c0028567 <__extendsfdf2>
c000b10b:	83 c4 10             	add    esp,0x10
c000b10e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b112:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b116:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b122:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b126:	e8 45 ca 01 00       	call   c0027b70 <__muldf3>
c000b12b:	83 c4 10             	add    esp,0x10
c000b12e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b132:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b136:	52                   	push   edx
c000b137:	50                   	push   eax
c000b138:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b13b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b13e:	e8 b0 c3 01 00       	call   c00274f3 <__adddf3>
c000b143:	83 c4 10             	add    esp,0x10
c000b146:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b149:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b14c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b14f:	4f                   	dec    edi
c000b150:	83 ec 0c             	sub    esp,0xc
c000b153:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b156:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b15a:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b161:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b165:	e8 fd d3 01 00       	call   c0028567 <__extendsfdf2>
c000b16a:	83 c4 10             	add    esp,0x10
c000b16d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b171:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b175:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b179:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b17d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b181:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b185:	e8 e6 c9 01 00       	call   c0027b70 <__muldf3>
c000b18a:	83 c4 10             	add    esp,0x10
c000b18d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b191:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b195:	52                   	push   edx
c000b196:	50                   	push   eax
c000b197:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b19a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b19d:	e8 51 c3 01 00       	call   c00274f3 <__adddf3>
c000b1a2:	83 c4 10             	add    esp,0x10
c000b1a5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1a8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1ab:	85 ff                	test   edi,edi
c000b1ad:	0f 8f e9 fc ff ff    	jg     c000ae9c <calc_output_multi+0x10e>
c000b1b3:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b1b7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b1bb:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b1bf:	0f 89 4c fc ff ff    	jns    c000ae11 <calc_output_multi+0x83>
c000b1c5:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b1c9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b1cd:	29 c8                	sub    eax,ecx
c000b1cf:	99                   	cdq    
c000b1d0:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b1d4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b1d8:	0f af d0             	imul   edx,eax
c000b1db:	40                   	inc    eax
c000b1dc:	01 d1                	add    ecx,edx
c000b1de:	0f af c3             	imul   eax,ebx
c000b1e1:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1e5:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1ec:	55                   	push   ebp
c000b1ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1f1:	6a 00                	push   0x0
c000b1f3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1f7:	e8 7c 55 ff ff       	call   c0000778 <memset>
c000b1fc:	83 c4 10             	add    esp,0x10
c000b1ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b203:	e8 e0 e6 ff ff       	call   c00098e8 <fp_to_double>
c000b208:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b20c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b210:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b214:	e8 c5 e6 ff ff       	call   c00098de <fp_to_int>
c000b219:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b21c:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b21f:	57                   	push   edi
c000b220:	57                   	push   edi
c000b221:	89 df                	mov    edi,ebx
c000b223:	55                   	push   ebp
c000b224:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b228:	e8 5b bc 01 00       	call   c0026e88 <__subsf3>
c000b22d:	89 04 24             	mov    DWORD PTR [esp],eax
c000b230:	e8 32 d3 01 00       	call   c0028567 <__extendsfdf2>
c000b235:	83 c4 10             	add    esp,0x10
c000b238:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b23c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b240:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b244:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b248:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b24c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b250:	e8 1b c9 01 00       	call   c0027b70 <__muldf3>
c000b255:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b258:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b25c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b260:	e8 02 d3 01 00       	call   c0028567 <__extendsfdf2>
c000b265:	83 c4 10             	add    esp,0x10
c000b268:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b26c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b270:	52                   	push   edx
c000b271:	50                   	push   eax
c000b272:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b276:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b27a:	e8 74 c2 01 00       	call   c00274f3 <__adddf3>
c000b27f:	83 c4 10             	add    esp,0x10
c000b282:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b286:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b28a:	89 f8                	mov    eax,edi
c000b28c:	b9 08 00 00 00       	mov    ecx,0x8
c000b291:	99                   	cdq    
c000b292:	f7 f9                	idiv   ecx
c000b294:	4a                   	dec    edx
c000b295:	83 fa 06             	cmp    edx,0x6
c000b298:	77 07                	ja     c000b2a1 <calc_output_multi+0x513>
c000b29a:	ff 24 95 a0 9d 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6260]
c000b2a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2a5:	4f                   	dec    edi
c000b2a6:	83 ec 0c             	sub    esp,0xc
c000b2a9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2b0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2b7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2bb:	e8 a7 d2 01 00       	call   c0028567 <__extendsfdf2>
c000b2c0:	83 c4 10             	add    esp,0x10
c000b2c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2d7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2db:	e8 90 c8 01 00       	call   c0027b70 <__muldf3>
c000b2e0:	83 c4 10             	add    esp,0x10
c000b2e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2eb:	52                   	push   edx
c000b2ec:	50                   	push   eax
c000b2ed:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2f0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2f3:	e8 fb c1 01 00       	call   c00274f3 <__adddf3>
c000b2f8:	83 c4 10             	add    esp,0x10
c000b2fb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2fe:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b301:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b305:	4f                   	dec    edi
c000b306:	83 ec 0c             	sub    esp,0xc
c000b309:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b30c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b310:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b317:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b31b:	e8 47 d2 01 00       	call   c0028567 <__extendsfdf2>
c000b320:	83 c4 10             	add    esp,0x10
c000b323:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b327:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b32b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b32f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b333:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b337:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b33b:	e8 30 c8 01 00       	call   c0027b70 <__muldf3>
c000b340:	83 c4 10             	add    esp,0x10
c000b343:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b347:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b34b:	52                   	push   edx
c000b34c:	50                   	push   eax
c000b34d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b350:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b353:	e8 9b c1 01 00       	call   c00274f3 <__adddf3>
c000b358:	83 c4 10             	add    esp,0x10
c000b35b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b35e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b361:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b365:	4f                   	dec    edi
c000b366:	83 ec 0c             	sub    esp,0xc
c000b369:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b36c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b370:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b377:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b37b:	e8 e7 d1 01 00       	call   c0028567 <__extendsfdf2>
c000b380:	83 c4 10             	add    esp,0x10
c000b383:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b387:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b38b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b38f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b393:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b397:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b39b:	e8 d0 c7 01 00       	call   c0027b70 <__muldf3>
c000b3a0:	83 c4 10             	add    esp,0x10
c000b3a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3ab:	52                   	push   edx
c000b3ac:	50                   	push   eax
c000b3ad:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3b0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3b3:	e8 3b c1 01 00       	call   c00274f3 <__adddf3>
c000b3b8:	83 c4 10             	add    esp,0x10
c000b3bb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3be:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3c5:	4f                   	dec    edi
c000b3c6:	83 ec 0c             	sub    esp,0xc
c000b3c9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3d0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3d7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3db:	e8 87 d1 01 00       	call   c0028567 <__extendsfdf2>
c000b3e0:	83 c4 10             	add    esp,0x10
c000b3e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3fb:	e8 70 c7 01 00       	call   c0027b70 <__muldf3>
c000b400:	83 c4 10             	add    esp,0x10
c000b403:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b407:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b40b:	52                   	push   edx
c000b40c:	50                   	push   eax
c000b40d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b410:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b413:	e8 db c0 01 00       	call   c00274f3 <__adddf3>
c000b418:	83 c4 10             	add    esp,0x10
c000b41b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b41e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b421:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b425:	4f                   	dec    edi
c000b426:	83 ec 0c             	sub    esp,0xc
c000b429:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b42c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b430:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b437:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b43b:	e8 27 d1 01 00       	call   c0028567 <__extendsfdf2>
c000b440:	83 c4 10             	add    esp,0x10
c000b443:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b447:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b44b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b44f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b453:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b457:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b45b:	e8 10 c7 01 00       	call   c0027b70 <__muldf3>
c000b460:	83 c4 10             	add    esp,0x10
c000b463:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b467:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b46b:	52                   	push   edx
c000b46c:	50                   	push   eax
c000b46d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b470:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b473:	e8 7b c0 01 00       	call   c00274f3 <__adddf3>
c000b478:	83 c4 10             	add    esp,0x10
c000b47b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b47e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b481:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b485:	4f                   	dec    edi
c000b486:	83 ec 0c             	sub    esp,0xc
c000b489:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b48c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b490:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b497:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b49b:	e8 c7 d0 01 00       	call   c0028567 <__extendsfdf2>
c000b4a0:	83 c4 10             	add    esp,0x10
c000b4a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4b7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4bb:	e8 b0 c6 01 00       	call   c0027b70 <__muldf3>
c000b4c0:	83 c4 10             	add    esp,0x10
c000b4c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4cb:	52                   	push   edx
c000b4cc:	50                   	push   eax
c000b4cd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4d0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4d3:	e8 1b c0 01 00       	call   c00274f3 <__adddf3>
c000b4d8:	83 c4 10             	add    esp,0x10
c000b4db:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4de:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4e5:	4f                   	dec    edi
c000b4e6:	83 ec 0c             	sub    esp,0xc
c000b4e9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4f0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4f7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4fb:	e8 67 d0 01 00       	call   c0028567 <__extendsfdf2>
c000b500:	83 c4 10             	add    esp,0x10
c000b503:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b507:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b50b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b50f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b513:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b517:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b51b:	e8 50 c6 01 00       	call   c0027b70 <__muldf3>
c000b520:	83 c4 10             	add    esp,0x10
c000b523:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b527:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b52b:	52                   	push   edx
c000b52c:	50                   	push   eax
c000b52d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b530:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b533:	e8 bb bf 01 00       	call   c00274f3 <__adddf3>
c000b538:	83 c4 10             	add    esp,0x10
c000b53b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b53e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b541:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b545:	4f                   	dec    edi
c000b546:	83 ec 0c             	sub    esp,0xc
c000b549:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b54c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b550:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b557:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b55b:	e8 07 d0 01 00       	call   c0028567 <__extendsfdf2>
c000b560:	83 c4 10             	add    esp,0x10
c000b563:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b567:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b56b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b56f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b573:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b577:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b57b:	e8 f0 c5 01 00       	call   c0027b70 <__muldf3>
c000b580:	83 c4 10             	add    esp,0x10
c000b583:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b587:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b58b:	52                   	push   edx
c000b58c:	50                   	push   eax
c000b58d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b590:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b593:	e8 5b bf 01 00       	call   c00274f3 <__adddf3>
c000b598:	83 c4 10             	add    esp,0x10
c000b59b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b59e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b5a1:	85 ff                	test   edi,edi
c000b5a3:	0f 8f e1 fc ff ff    	jg     c000b28a <calc_output_multi+0x4fc>
c000b5a9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b5ad:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b5b1:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b5b5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b5ba:	0f 8f 3f fc ff ff    	jg     c000b1ff <calc_output_multi+0x471>
c000b5c0:	be 08 00 00 00       	mov    esi,0x8
c000b5c5:	89 d8                	mov    eax,ebx
c000b5c7:	99                   	cdq    
c000b5c8:	f7 fe                	idiv   esi
c000b5ca:	4a                   	dec    edx
c000b5cb:	83 fa 06             	cmp    edx,0x6
c000b5ce:	77 07                	ja     c000b5d7 <calc_output_multi+0x849>
c000b5d0:	ff 24 95 bc 9d 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6244]
c000b5d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5db:	4b                   	dec    ebx
c000b5dc:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5e0:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5e7:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5eb:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5ee:	e8 00 bf 01 00       	call   c00274f3 <__adddf3>
c000b5f3:	83 c4 10             	add    esp,0x10
c000b5f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b602:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b606:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60e:	e8 5d c5 01 00       	call   c0027b70 <__muldf3>
c000b613:	5d                   	pop    ebp
c000b614:	59                   	pop    ecx
c000b615:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b619:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b61d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b625:	e8 19 ce 01 00       	call   c0028443 <__truncdfsf2>
c000b62a:	83 c4 10             	add    esp,0x10
c000b62d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b631:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b634:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b638:	4b                   	dec    ebx
c000b639:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b63d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b640:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b644:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b648:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b64b:	e8 a3 be 01 00       	call   c00274f3 <__adddf3>
c000b650:	83 c4 10             	add    esp,0x10
c000b653:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b657:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b65f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b663:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b667:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b66b:	e8 00 c5 01 00       	call   c0027b70 <__muldf3>
c000b670:	59                   	pop    ecx
c000b671:	5f                   	pop    edi
c000b672:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b676:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b67a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b67e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b682:	e8 bc cd 01 00       	call   c0028443 <__truncdfsf2>
c000b687:	83 c4 10             	add    esp,0x10
c000b68a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b68e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b691:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b695:	4b                   	dec    ebx
c000b696:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b69a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b69d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6a1:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6a5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6a8:	e8 46 be 01 00       	call   c00274f3 <__adddf3>
c000b6ad:	83 c4 10             	add    esp,0x10
c000b6b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6b4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c8:	e8 a3 c4 01 00       	call   c0027b70 <__muldf3>
c000b6cd:	5f                   	pop    edi
c000b6ce:	5d                   	pop    ebp
c000b6cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6df:	e8 5f cd 01 00       	call   c0028443 <__truncdfsf2>
c000b6e4:	83 c4 10             	add    esp,0x10
c000b6e7:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6eb:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6f2:	4b                   	dec    ebx
c000b6f3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6f7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6fe:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b702:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b705:	e8 e9 bd 01 00       	call   c00274f3 <__adddf3>
c000b70a:	83 c4 10             	add    esp,0x10
c000b70d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b711:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b715:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b719:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b71d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b721:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b725:	e8 46 c4 01 00       	call   c0027b70 <__muldf3>
c000b72a:	5d                   	pop    ebp
c000b72b:	59                   	pop    ecx
c000b72c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b730:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b734:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b738:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b73c:	e8 02 cd 01 00       	call   c0028443 <__truncdfsf2>
c000b741:	83 c4 10             	add    esp,0x10
c000b744:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b748:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b74b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b74f:	4b                   	dec    ebx
c000b750:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b754:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b757:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b75b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b75f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b762:	e8 8c bd 01 00       	call   c00274f3 <__adddf3>
c000b767:	83 c4 10             	add    esp,0x10
c000b76a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b76e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b772:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b782:	e8 e9 c3 01 00       	call   c0027b70 <__muldf3>
c000b787:	59                   	pop    ecx
c000b788:	5f                   	pop    edi
c000b789:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b78d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b791:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b799:	e8 a5 cc 01 00       	call   c0028443 <__truncdfsf2>
c000b79e:	83 c4 10             	add    esp,0x10
c000b7a1:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7a5:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7ac:	4b                   	dec    ebx
c000b7ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7b8:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7bc:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7bf:	e8 2f bd 01 00       	call   c00274f3 <__adddf3>
c000b7c4:	83 c4 10             	add    esp,0x10
c000b7c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7df:	e8 8c c3 01 00       	call   c0027b70 <__muldf3>
c000b7e4:	5f                   	pop    edi
c000b7e5:	5d                   	pop    ebp
c000b7e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7ea:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f6:	e8 48 cc 01 00       	call   c0028443 <__truncdfsf2>
c000b7fb:	83 c4 10             	add    esp,0x10
c000b7fe:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b802:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b805:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b809:	4b                   	dec    ebx
c000b80a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b80e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b811:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b815:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b819:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b81c:	e8 d2 bc 01 00       	call   c00274f3 <__adddf3>
c000b821:	83 c4 10             	add    esp,0x10
c000b824:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b828:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b82c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b830:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b834:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b838:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b83c:	e8 2f c3 01 00       	call   c0027b70 <__muldf3>
c000b841:	5d                   	pop    ebp
c000b842:	59                   	pop    ecx
c000b843:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b847:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b84b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b84f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b853:	e8 eb cb 01 00       	call   c0028443 <__truncdfsf2>
c000b858:	83 c4 10             	add    esp,0x10
c000b85b:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b85f:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b862:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b866:	4b                   	dec    ebx
c000b867:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b86b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b86e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b872:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b876:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b879:	e8 75 bc 01 00       	call   c00274f3 <__adddf3>
c000b87e:	83 c4 10             	add    esp,0x10
c000b881:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b885:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b889:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b88d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b891:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b895:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b899:	e8 d2 c2 01 00       	call   c0027b70 <__muldf3>
c000b89e:	59                   	pop    ecx
c000b89f:	5f                   	pop    edi
c000b8a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8a4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b8a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8b0:	e8 8e cb 01 00       	call   c0028443 <__truncdfsf2>
c000b8b5:	83 c4 10             	add    esp,0x10
c000b8b8:	85 db                	test   ebx,ebx
c000b8ba:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b8be:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b8c1:	0f 8f fe fc ff ff    	jg     c000b5c5 <calc_output_multi+0x837>
c000b8c7:	83 c4 4c             	add    esp,0x4c
c000b8ca:	5b                   	pop    ebx
c000b8cb:	5e                   	pop    esi
c000b8cc:	5f                   	pop    edi
c000b8cd:	5d                   	pop    ebp
c000b8ce:	c3                   	ret    

c000b8cf <double_to_fp>:
c000b8cf:	83 ec 0c             	sub    esp,0xc
c000b8d2:	68 00 00 b0 40       	push   0x40b00000
c000b8d7:	6a 00                	push   0x0
c000b8d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8e1:	e8 8a c2 01 00       	call   c0027b70 <__muldf3>
c000b8e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8ee:	83 c4 1c             	add    esp,0x1c
c000b8f1:	e9 fa cc 01 00       	jmp    c00285f0 <lrint>

c000b8f6 <prepare_data>:
c000b8f6:	55                   	push   ebp
c000b8f7:	57                   	push   edi
c000b8f8:	56                   	push   esi
c000b8f9:	53                   	push   ebx
c000b8fa:	83 ec 1c             	sub    esp,0x1c
c000b8fd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b901:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b905:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b909:	0f 89 57 01 00 00    	jns    c000ba66 <prepare_data+0x170>
c000b90f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b912:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b915:	85 d2                	test   edx,edx
c000b917:	75 0d                	jne    c000b926 <prepare_data+0x30>
c000b919:	8d 14 36             	lea    edx,[esi+esi*1]
c000b91c:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b91f:	29 d0                	sub    eax,edx
c000b921:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b924:	eb 44                	jmp    c000b96a <prepare_data+0x74>
c000b926:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b929:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b92c:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b92f:	39 c1                	cmp    ecx,eax
c000b931:	7d 04                	jge    c000b937 <prepare_data+0x41>
c000b933:	29 d0                	sub    eax,edx
c000b935:	eb 2d                	jmp    c000b964 <prepare_data+0x6e>
c000b937:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b93d:	29 d7                	sub    edi,edx
c000b93f:	01 f7                	add    edi,esi
c000b941:	51                   	push   ecx
c000b942:	29 f2                	sub    edx,esi
c000b944:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b94b:	8d 14 90             	lea    edx,[eax+edx*4]
c000b94e:	51                   	push   ecx
c000b94f:	52                   	push   edx
c000b950:	50                   	push   eax
c000b951:	e8 26 4d ff ff       	call   c000067c <memmove>
c000b956:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b959:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b95c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b95f:	29 f0                	sub    eax,esi
c000b961:	83 c4 10             	add    esp,0x10
c000b964:	29 f0                	sub    eax,esi
c000b966:	79 02                	jns    c000b96a <prepare_data+0x74>
c000b968:	31 c0                	xor    eax,eax
c000b96a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b96d:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b970:	29 ef                	sub    edi,ebp
c000b972:	39 c7                	cmp    edi,eax
c000b974:	7e 02                	jle    c000b978 <prepare_data+0x82>
c000b976:	89 c7                	mov    edi,eax
c000b978:	89 f8                	mov    eax,edi
c000b97a:	99                   	cdq    
c000b97b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b97e:	b8 15 00 00 00       	mov    eax,0x15
c000b983:	29 d7                	sub    edi,edx
c000b985:	0f 88 dd 00 00 00    	js     c000ba68 <prepare_data+0x172>
c000b98b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b98e:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b991:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b994:	0f 8f ce 00 00 00    	jg     c000ba68 <prepare_data+0x172>
c000b99a:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b9a0:	50                   	push   eax
c000b9a1:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9a8:	50                   	push   eax
c000b9a9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b9ad:	8b 00                	mov    eax,DWORD PTR [eax]
c000b9af:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b9b2:	50                   	push   eax
c000b9b3:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9b6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b9ba:	50                   	push   eax
c000b9bb:	e8 84 4d ff ff       	call   c0000744 <memcpy>
c000b9c0:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b9c3:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b9c6:	01 fd                	add    ebp,edi
c000b9c8:	01 f9                	add    ecx,edi
c000b9ca:	83 c4 10             	add    esp,0x10
c000b9cd:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b9d0:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b9d3:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b9d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9da:	0f 85 86 00 00 00    	jne    c000ba66 <prepare_data+0x170>
c000b9e0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9e3:	89 e8                	mov    eax,ebp
c000b9e5:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9e8:	29 c8                	sub    eax,ecx
c000b9ea:	39 f8                	cmp    eax,edi
c000b9ec:	7d 78                	jge    c000ba66 <prepare_data+0x170>
c000b9ee:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9f2:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9f6:	74 6e                	je     c000ba66 <prepare_data+0x170>
c000b9f8:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9fb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9ff:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000ba02:	29 ef                	sub    edi,ebp
c000ba04:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000ba08:	7c 29                	jl     c000ba33 <prepare_data+0x13d>
c000ba0a:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0d:	29 f1                	sub    ecx,esi
c000ba0f:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000ba16:	55                   	push   ebp
c000ba17:	50                   	push   eax
c000ba18:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000ba1b:	50                   	push   eax
c000ba1c:	52                   	push   edx
c000ba1d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba21:	e8 56 4c ff ff       	call   c000067c <memmove>
c000ba26:	83 c4 10             	add    esp,0x10
c000ba29:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000ba2c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000ba2f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba33:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ba36:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ba39:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba3c:	83 c6 05             	add    esi,0x5
c000ba3f:	78 07                	js     c000ba48 <prepare_data+0x152>
c000ba41:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba44:	39 cf                	cmp    edi,ecx
c000ba46:	7e 04                	jle    c000ba4c <prepare_data+0x156>
c000ba48:	89 ce                	mov    esi,ecx
c000ba4a:	29 c6                	sub    esi,eax
c000ba4c:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba4f:	51                   	push   ecx
c000ba50:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba57:	51                   	push   ecx
c000ba58:	6a 00                	push   0x0
c000ba5a:	50                   	push   eax
c000ba5b:	e8 18 4d ff ff       	call   c0000778 <memset>
c000ba60:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba63:	83 c4 10             	add    esp,0x10
c000ba66:	31 c0                	xor    eax,eax
c000ba68:	83 c4 1c             	add    esp,0x1c
c000ba6b:	5b                   	pop    ebx
c000ba6c:	5e                   	pop    esi
c000ba6d:	5f                   	pop    edi
c000ba6e:	5d                   	pop    ebp
c000ba6f:	c3                   	ret    

c000ba70 <sinc_multichan_vari_process>:
c000ba70:	55                   	push   ebp
c000ba71:	ba 05 00 00 00       	mov    edx,0x5
c000ba76:	57                   	push   edi
c000ba77:	56                   	push   esi
c000ba78:	53                   	push   ebx
c000ba79:	83 ec 4c             	sub    esp,0x4c
c000ba7c:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba80:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba84:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba87:	85 db                	test   ebx,ebx
c000ba89:	0f 84 9b 06 00 00    	je     c000c12a <sinc_multichan_vari_process+0x6ba>
c000ba8f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba92:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba95:	0f af c5             	imul   eax,ebp
c000ba98:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba9b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba9e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000baa5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000baac:	0f af c5             	imul   eax,ebp
c000baaf:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bab2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bab5:	8b 06                	mov    eax,DWORD PTR [esi]
c000bab7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000babb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000babf:	68 00 00 70 3f       	push   0x3f700000
c000bac4:	6a 00                	push   0x0
c000bac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bace:	e8 6c c9 01 00       	call   c002843f <__ltdf2>
c000bad3:	83 c4 10             	add    esp,0x10
c000bad6:	ba 16 00 00 00       	mov    edx,0x16
c000badb:	85 c0                	test   eax,eax
c000badd:	0f 88 47 06 00 00    	js     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bae3:	68 00 00 70 40       	push   0x40700000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baf2:	e8 2a c9 01 00       	call   c0028421 <__gtdf2>
c000baf7:	83 c4 10             	add    esp,0x10
c000bafa:	ba 16 00 00 00       	mov    edx,0x16
c000baff:	85 c0                	test   eax,eax
c000bb01:	0f 8f 23 06 00 00    	jg     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bb07:	83 ec 0c             	sub    esp,0xc
c000bb0a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bb0d:	e8 c1 c6 01 00       	call   c00281d3 <__floatsidf>
c000bb12:	83 c4 10             	add    esp,0x10
c000bb15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb1d:	68 00 00 00 40       	push   0x40000000
c000bb22:	6a 00                	push   0x0
c000bb24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb2c:	e8 c2 b9 01 00       	call   c00274f3 <__adddf3>
c000bb31:	59                   	pop    ecx
c000bb32:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb36:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb3a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb3d:	e8 91 c6 01 00       	call   c00281d3 <__floatsidf>
c000bb42:	83 c4 10             	add    esp,0x10
c000bb45:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb49:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb4d:	52                   	push   edx
c000bb4e:	50                   	push   eax
c000bb4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb57:	e8 f8 c2 01 00       	call   c0027e54 <__divdf3>
c000bb5c:	83 c4 10             	add    esp,0x10
c000bb5f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb63:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb67:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb6a:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb6d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb71:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb85:	e8 97 c8 01 00       	call   c0028421 <__gtdf2>
c000bb8a:	83 c4 10             	add    esp,0x10
c000bb8d:	85 c0                	test   eax,eax
c000bb8f:	7e 2d                	jle    c000bbbe <sinc_multichan_vari_process+0x14e>
c000bb91:	68 00 00 f0 3f       	push   0x3ff00000
c000bb96:	6a 00                	push   0x0
c000bb98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bba0:	e8 9a c8 01 00       	call   c002843f <__ltdf2>
c000bba5:	83 c4 10             	add    esp,0x10
c000bba8:	85 c0                	test   eax,eax
c000bbaa:	79 4d                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbb0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bbb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bbb8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bbbc:	eb 1b                	jmp    c000bbd9 <sinc_multichan_vari_process+0x169>
c000bbbe:	68 00 00 f0 3f       	push   0x3ff00000
c000bbc3:	6a 00                	push   0x0
c000bbc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbcd:	e8 6d c8 01 00       	call   c002843f <__ltdf2>
c000bbd2:	83 c4 10             	add    esp,0x10
c000bbd5:	85 c0                	test   eax,eax
c000bbd7:	79 20                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbd9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbdd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbe1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe9:	e8 66 c2 01 00       	call   c0027e54 <__divdf3>
c000bbee:	83 c4 10             	add    esp,0x10
c000bbf1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbf5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbf9:	50                   	push   eax
c000bbfa:	50                   	push   eax
c000bbfb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc03:	e8 e8 c9 01 00       	call   c00285f0 <lrint>
c000bc08:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bc0b:	40                   	inc    eax
c000bc0c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc10:	0f af c5             	imul   eax,ebp
c000bc13:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bc17:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bc1a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1e:	58                   	pop    eax
c000bc1f:	5a                   	pop    edx
c000bc20:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc24:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc28:	e8 c3 c9 01 00       	call   c00285f0 <lrint>
c000bc2d:	83 ec 0c             	sub    esp,0xc
c000bc30:	50                   	push   eax
c000bc31:	e8 9d c5 01 00       	call   c00281d3 <__floatsidf>
c000bc36:	83 c4 10             	add    esp,0x10
c000bc39:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc3d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc41:	52                   	push   edx
c000bc42:	50                   	push   eax
c000bc43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc47:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc4b:	e8 f4 be 01 00       	call   c0027b44 <__subdf3>
c000bc50:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc54:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc58:	83 c4 20             	add    esp,0x20
c000bc5b:	6a 00                	push   0x0
c000bc5d:	6a 00                	push   0x0
c000bc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc67:	e8 d3 c7 01 00       	call   c002843f <__ltdf2>
c000bc6c:	83 c4 10             	add    esp,0x10
c000bc6f:	85 c0                	test   eax,eax
c000bc71:	79 1f                	jns    c000bc92 <sinc_multichan_vari_process+0x222>
c000bc73:	68 00 00 f0 3f       	push   0x3ff00000
c000bc78:	6a 00                	push   0x0
c000bc7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc7e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc82:	e8 6c b8 01 00       	call   c00274f3 <__adddf3>
c000bc87:	83 c4 10             	add    esp,0x10
c000bc8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc92:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc95:	83 ec 10             	sub    esp,0x10
c000bc98:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc9c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcaf:	e8 90 be 01 00       	call   c0027b44 <__subdf3>
c000bcb4:	83 c4 18             	add    esp,0x18
c000bcb7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcbb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcbf:	52                   	push   edx
c000bcc0:	50                   	push   eax
c000bcc1:	e8 2a c9 01 00       	call   c00285f0 <lrint>
c000bcc6:	0f af e8             	imul   ebp,eax
c000bcc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bccd:	01 e8                	add    eax,ebp
c000bccf:	99                   	cdq    
c000bcd0:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bcd3:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bcd6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcda:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcde:	68 00 00 f0 3f       	push   0x3ff00000
c000bce3:	6a 00                	push   0x0
c000bce5:	e8 6a c1 01 00       	call   c0027e54 <__divdf3>
c000bcea:	83 c4 10             	add    esp,0x10
c000bced:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcf1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcf5:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcfa:	68 23 42 92 0c       	push   0xc924223
c000bcff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd07:	e8 e7 b7 01 00       	call   c00274f3 <__adddf3>
c000bd0c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bd10:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bd14:	83 c4 20             	add    esp,0x20
c000bd17:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd1f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bd27:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bd2a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bd2d:	7d 50                	jge    c000bd7f <sinc_multichan_vari_process+0x30f>
c000bd2f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd32:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd35:	01 c8                	add    eax,ecx
c000bd37:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3a:	99                   	cdq    
c000bd3b:	f7 f9                	idiv   ecx
c000bd3d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd41:	7d 0c                	jge    c000bd4f <sinc_multichan_vari_process+0x2df>
c000bd43:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd46:	85 ed                	test   ebp,ebp
c000bd48:	79 6b                	jns    c000bdb5 <sinc_multichan_vari_process+0x345>
c000bd4a:	e9 e6 00 00 00       	jmp    c000be35 <sinc_multichan_vari_process+0x3c5>
c000bd4f:	50                   	push   eax
c000bd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd54:	57                   	push   edi
c000bd55:	53                   	push   ebx
c000bd56:	e8 9b fb ff ff       	call   c000b8f6 <prepare_data>
c000bd5b:	83 c4 10             	add    esp,0x10
c000bd5e:	89 c2                	mov    edx,eax
c000bd60:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd63:	85 c0                	test   eax,eax
c000bd65:	0f 85 bf 03 00 00    	jne    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bd6b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd6e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd71:	01 c8                	add    eax,ecx
c000bd73:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd76:	99                   	cdq    
c000bd77:	f7 f9                	idiv   ecx
c000bd79:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd7d:	7c c4                	jl     c000bd43 <sinc_multichan_vari_process+0x2d3>
c000bd7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd83:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd87:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd8a:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd91:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd95:	89 06                	mov    DWORD PTR [esi],eax
c000bd97:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd9a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd9d:	99                   	cdq    
c000bd9e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bda1:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bda4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bda7:	99                   	cdq    
c000bda8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bdab:	31 d2                	xor    edx,edx
c000bdad:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bdb0:	e9 75 03 00 00       	jmp    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bdb5:	83 ec 0c             	sub    esp,0xc
c000bdb8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bdbb:	e8 13 c4 01 00       	call   c00281d3 <__floatsidf>
c000bdc0:	83 c4 10             	add    esp,0x10
c000bdc3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdc7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdcf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bddb:	e8 13 b7 01 00       	call   c00274f3 <__adddf3>
c000bde0:	83 c4 10             	add    esp,0x10
c000bde3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bde7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdeb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdf3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdf7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdfb:	e8 f3 b6 01 00       	call   c00274f3 <__adddf3>
c000be00:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000be03:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be07:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be0b:	e8 c3 c3 01 00       	call   c00281d3 <__floatsidf>
c000be10:	83 c4 10             	add    esp,0x10
c000be13:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be17:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be1b:	52                   	push   edx
c000be1c:	50                   	push   eax
c000be1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be25:	e8 13 c6 01 00       	call   c002843d <__gedf2>
c000be2a:	83 c4 10             	add    esp,0x10
c000be2d:	85 c0                	test   eax,eax
c000be2f:	0f 89 4a ff ff ff    	jns    c000bd7f <sinc_multichan_vari_process+0x30f>
c000be35:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000be39:	0f 8e ed 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be3f:	83 ec 10             	sub    esp,0x10
c000be42:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be45:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be48:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be4b:	ff 36                	push   DWORD PTR [esi]
c000be4d:	e8 f2 bc 01 00       	call   c0027b44 <__subdf3>
c000be52:	83 c4 18             	add    esp,0x18
c000be55:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be59:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be5d:	52                   	push   edx
c000be5e:	50                   	push   eax
c000be5f:	e8 6c c7 01 00       	call   c00285d0 <fabs>
c000be64:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be68:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be6c:	83 c4 10             	add    esp,0x10
c000be6f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be74:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be81:	e8 9b c5 01 00       	call   c0028421 <__gtdf2>
c000be86:	83 c4 10             	add    esp,0x10
c000be89:	85 c0                	test   eax,eax
c000be8b:	0f 8e 9b 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be91:	8b 06                	mov    eax,DWORD PTR [esi]
c000be93:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be96:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be9a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be9e:	52                   	push   edx
c000be9f:	50                   	push   eax
c000bea0:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bea3:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bea6:	e8 99 bc 01 00       	call   c0027b44 <__subdf3>
c000beab:	59                   	pop    ecx
c000beac:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000beb0:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000beb4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000beb7:	e8 17 c3 01 00       	call   c00281d3 <__floatsidf>
c000bebc:	83 c4 10             	add    esp,0x10
c000bebf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bec3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bec7:	52                   	push   edx
c000bec8:	50                   	push   eax
c000bec9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000becd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bed1:	e8 9a bc 01 00       	call   c0027b70 <__muldf3>
c000bed6:	5d                   	pop    ebp
c000bed7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bedb:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bedf:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bee2:	e8 ec c2 01 00       	call   c00281d3 <__floatsidf>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bef2:	52                   	push   edx
c000bef3:	50                   	push   eax
c000bef4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000befc:	e8 53 bf 01 00       	call   c0027e54 <__divdf3>
c000bf01:	83 c4 10             	add    esp,0x10
c000bf04:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf08:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf14:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf18:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf1c:	e8 d2 b5 01 00       	call   c00274f3 <__adddf3>
c000bf21:	83 c4 10             	add    esp,0x10
c000bf24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf28:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf2c:	83 ec 0c             	sub    esp,0xc
c000bf2f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bf32:	e8 9c c2 01 00       	call   c00281d3 <__floatsidf>
c000bf37:	83 c4 10             	add    esp,0x10
c000bf3a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf3e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf52:	e8 e8 c4 01 00       	call   c002843f <__ltdf2>
c000bf57:	83 c4 10             	add    esp,0x10
c000bf5a:	85 c0                	test   eax,eax
c000bf5c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf60:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf64:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf68:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf6c:	78 10                	js     c000bf7e <sinc_multichan_vari_process+0x50e>
c000bf6e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf72:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf76:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf7a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf86:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8e:	e8 dd bb 01 00       	call   c0027b70 <__muldf3>
c000bf93:	59                   	pop    ecx
c000bf94:	5d                   	pop    ebp
c000bf95:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf99:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa5:	e8 25 f9 ff ff       	call   c000b8cf <double_to_fp>
c000bfaa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfae:	89 c5                	mov    ebp,eax
c000bfb0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfb4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfb8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfbc:	e8 af bb 01 00       	call   c0027b70 <__muldf3>
c000bfc1:	83 c4 18             	add    esp,0x18
c000bfc4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bfc8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bfcc:	52                   	push   edx
c000bfcd:	50                   	push   eax
c000bfce:	e8 fc f8 ff ff       	call   c000b8cf <double_to_fp>
c000bfd3:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bfd6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfda:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfdd:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfe0:	50                   	push   eax
c000bfe1:	50                   	push   eax
c000bfe2:	50                   	push   eax
c000bfe3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfe6:	e8 e8 c1 01 00       	call   c00281d3 <__floatsidf>
c000bfeb:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfef:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bff3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bff7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bffb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c003:	e8 4c be 01 00       	call   c0027e54 <__divdf3>
c000c008:	83 c4 1c             	add    esp,0x1c
c000c00b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c00f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000c013:	52                   	push   edx
c000c014:	89 ea                	mov    edx,ebp
c000c016:	50                   	push   eax
c000c017:	89 d8                	mov    eax,ebx
c000c019:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c01c:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000c020:	e8 69 ed ff ff       	call   c000ad8e <calc_output_multi>
c000c025:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c028:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000c02b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c02f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c033:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c037:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c03b:	e8 14 be 01 00       	call   c0027e54 <__divdf3>
c000c040:	83 c4 10             	add    esp,0x10
c000c043:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c047:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c04b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c04f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c053:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c057:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c05b:	e8 93 b4 01 00       	call   c00274f3 <__adddf3>
c000c060:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c064:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c068:	83 c4 28             	add    esp,0x28
c000c06b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c06f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c073:	e8 78 c5 01 00       	call   c00285f0 <lrint>
c000c078:	83 ec 0c             	sub    esp,0xc
c000c07b:	50                   	push   eax
c000c07c:	e8 52 c1 01 00       	call   c00281d3 <__floatsidf>
c000c081:	83 c4 10             	add    esp,0x10
c000c084:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c088:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c08c:	52                   	push   edx
c000c08d:	50                   	push   eax
c000c08e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c092:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c096:	e8 a9 ba 01 00       	call   c0027b44 <__subdf3>
c000c09b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c09f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0a3:	83 c4 20             	add    esp,0x20
c000c0a6:	6a 00                	push   0x0
c000c0a8:	6a 00                	push   0x0
c000c0aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0b2:	e8 88 c3 01 00       	call   c002843f <__ltdf2>
c000c0b7:	83 c4 10             	add    esp,0x10
c000c0ba:	85 c0                	test   eax,eax
c000c0bc:	79 20                	jns    c000c0de <sinc_multichan_vari_process+0x66e>
c000c0be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ce:	e8 20 b4 01 00       	call   c00274f3 <__adddf3>
c000c0d3:	83 c4 10             	add    esp,0x10
c000c0d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0de:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0e1:	83 ec 10             	sub    esp,0x10
c000c0e4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0e8:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0f3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0fb:	e8 44 ba 01 00       	call   c0027b44 <__subdf3>
c000c100:	83 c4 18             	add    esp,0x18
c000c103:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c107:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c10b:	52                   	push   edx
c000c10c:	50                   	push   eax
c000c10d:	e8 de c4 01 00       	call   c00285f0 <lrint>
c000c112:	0f af e8             	imul   ebp,eax
c000c115:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c119:	83 c4 10             	add    esp,0x10
c000c11c:	01 e8                	add    eax,ebp
c000c11e:	99                   	cdq    
c000c11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c125:	e9 fd fb ff ff       	jmp    c000bd27 <sinc_multichan_vari_process+0x2b7>
c000c12a:	83 c4 4c             	add    esp,0x4c
c000c12d:	89 d0                	mov    eax,edx
c000c12f:	5b                   	pop    ebx
c000c130:	5e                   	pop    esi
c000c131:	5f                   	pop    edi
c000c132:	5d                   	pop    ebp
c000c133:	c3                   	ret    

c000c134 <sinc_hex_vari_process>:
c000c134:	55                   	push   ebp
c000c135:	ba 05 00 00 00       	mov    edx,0x5
c000c13a:	57                   	push   edi
c000c13b:	56                   	push   esi
c000c13c:	53                   	push   ebx
c000c13d:	83 ec 4c             	sub    esp,0x4c
c000c140:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c144:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c148:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c14b:	85 db                	test   ebx,ebx
c000c14d:	0f 84 9c 06 00 00    	je     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c153:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c156:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c159:	0f af c7             	imul   eax,edi
c000c15c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c15f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c162:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c169:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c170:	0f af c7             	imul   eax,edi
c000c173:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c176:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c179:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c17c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c180:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c184:	68 00 00 70 3f       	push   0x3f700000
c000c189:	6a 00                	push   0x0
c000c18b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c18f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c193:	e8 a7 c2 01 00       	call   c002843f <__ltdf2>
c000c198:	83 c4 10             	add    esp,0x10
c000c19b:	ba 16 00 00 00       	mov    edx,0x16
c000c1a0:	85 c0                	test   eax,eax
c000c1a2:	0f 88 47 06 00 00    	js     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1a8:	68 00 00 70 40       	push   0x40700000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b7:	e8 65 c2 01 00       	call   c0028421 <__gtdf2>
c000c1bc:	83 c4 10             	add    esp,0x10
c000c1bf:	ba 16 00 00 00       	mov    edx,0x16
c000c1c4:	85 c0                	test   eax,eax
c000c1c6:	0f 8f 23 06 00 00    	jg     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1cc:	83 ec 0c             	sub    esp,0xc
c000c1cf:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c1d2:	e8 fc bf 01 00       	call   c00281d3 <__floatsidf>
c000c1d7:	83 c4 10             	add    esp,0x10
c000c1da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1e2:	68 00 00 00 40       	push   0x40000000
c000c1e7:	6a 00                	push   0x0
c000c1e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1f1:	e8 fd b2 01 00       	call   c00274f3 <__adddf3>
c000c1f6:	59                   	pop    ecx
c000c1f7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1fb:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1ff:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c202:	e8 cc bf 01 00       	call   c00281d3 <__floatsidf>
c000c207:	83 c4 10             	add    esp,0x10
c000c20a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c20e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c212:	52                   	push   edx
c000c213:	50                   	push   eax
c000c214:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c218:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c21c:	e8 33 bc 01 00       	call   c0027e54 <__divdf3>
c000c221:	83 c4 10             	add    esp,0x10
c000c224:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c228:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c22c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c22f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c232:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c236:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c23a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c23e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c242:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c246:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c24a:	e8 d2 c1 01 00       	call   c0028421 <__gtdf2>
c000c24f:	83 c4 10             	add    esp,0x10
c000c252:	85 c0                	test   eax,eax
c000c254:	7e 2d                	jle    c000c283 <sinc_hex_vari_process+0x14f>
c000c256:	68 00 00 f0 3f       	push   0x3ff00000
c000c25b:	6a 00                	push   0x0
c000c25d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c261:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c265:	e8 d5 c1 01 00       	call   c002843f <__ltdf2>
c000c26a:	83 c4 10             	add    esp,0x10
c000c26d:	85 c0                	test   eax,eax
c000c26f:	79 4d                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c271:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c275:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c279:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c27d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c281:	eb 1b                	jmp    c000c29e <sinc_hex_vari_process+0x16a>
c000c283:	68 00 00 f0 3f       	push   0x3ff00000
c000c288:	6a 00                	push   0x0
c000c28a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c28e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c292:	e8 a8 c1 01 00       	call   c002843f <__ltdf2>
c000c297:	83 c4 10             	add    esp,0x10
c000c29a:	85 c0                	test   eax,eax
c000c29c:	79 20                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c29e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ae:	e8 a1 bb 01 00       	call   c0027e54 <__divdf3>
c000c2b3:	83 c4 10             	add    esp,0x10
c000c2b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2ba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2be:	50                   	push   eax
c000c2bf:	50                   	push   eax
c000c2c0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c8:	e8 23 c3 01 00       	call   c00285f0 <lrint>
c000c2cd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c2d0:	40                   	inc    eax
c000c2d1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2d5:	0f af c7             	imul   eax,edi
c000c2d8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2df:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2e3:	58                   	pop    eax
c000c2e4:	5a                   	pop    edx
c000c2e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ed:	e8 fe c2 01 00       	call   c00285f0 <lrint>
c000c2f2:	83 ec 0c             	sub    esp,0xc
c000c2f5:	50                   	push   eax
c000c2f6:	e8 d8 be 01 00       	call   c00281d3 <__floatsidf>
c000c2fb:	83 c4 10             	add    esp,0x10
c000c2fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c302:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c306:	52                   	push   edx
c000c307:	50                   	push   eax
c000c308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c30c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c310:	e8 2f b8 01 00       	call   c0027b44 <__subdf3>
c000c315:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c319:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c31d:	83 c4 20             	add    esp,0x20
c000c320:	6a 00                	push   0x0
c000c322:	6a 00                	push   0x0
c000c324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c32c:	e8 0e c1 01 00       	call   c002843f <__ltdf2>
c000c331:	83 c4 10             	add    esp,0x10
c000c334:	85 c0                	test   eax,eax
c000c336:	79 1f                	jns    c000c357 <sinc_hex_vari_process+0x223>
c000c338:	68 00 00 f0 3f       	push   0x3ff00000
c000c33d:	6a 00                	push   0x0
c000c33f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c343:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c347:	e8 a7 b1 01 00       	call   c00274f3 <__adddf3>
c000c34c:	83 c4 10             	add    esp,0x10
c000c34f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c353:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c357:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c35a:	83 ec 10             	sub    esp,0x10
c000c35d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c361:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c368:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c36c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c370:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c374:	e8 cb b7 01 00       	call   c0027b44 <__subdf3>
c000c379:	83 c4 18             	add    esp,0x18
c000c37c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c380:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c384:	52                   	push   edx
c000c385:	50                   	push   eax
c000c386:	e8 65 c2 01 00       	call   c00285f0 <lrint>
c000c38b:	0f af f8             	imul   edi,eax
c000c38e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c392:	01 f8                	add    eax,edi
c000c394:	99                   	cdq    
c000c395:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c398:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c39b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c39f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3a3:	68 00 00 f0 3f       	push   0x3ff00000
c000c3a8:	6a 00                	push   0x0
c000c3aa:	e8 a5 ba 01 00       	call   c0027e54 <__divdf3>
c000c3af:	83 c4 10             	add    esp,0x10
c000c3b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3ba:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c3bf:	68 23 42 92 0c       	push   0xc924223
c000c3c4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3cc:	e8 22 b1 01 00       	call   c00274f3 <__adddf3>
c000c3d1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c3d5:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c3d9:	83 c4 20             	add    esp,0x20
c000c3dc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3e4:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3ef:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3f2:	7d 50                	jge    c000c444 <sinc_hex_vari_process+0x310>
c000c3f4:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fa:	01 c8                	add    eax,ecx
c000c3fc:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3ff:	99                   	cdq    
c000c400:	f7 f9                	idiv   ecx
c000c402:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c406:	7d 0c                	jge    c000c414 <sinc_hex_vari_process+0x2e0>
c000c408:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c40b:	85 ff                	test   edi,edi
c000c40d:	79 6c                	jns    c000c47b <sinc_hex_vari_process+0x347>
c000c40f:	e9 e7 00 00 00       	jmp    c000c4fb <sinc_hex_vari_process+0x3c7>
c000c414:	50                   	push   eax
c000c415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c419:	56                   	push   esi
c000c41a:	53                   	push   ebx
c000c41b:	e8 d6 f4 ff ff       	call   c000b8f6 <prepare_data>
c000c420:	83 c4 10             	add    esp,0x10
c000c423:	89 c2                	mov    edx,eax
c000c425:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c428:	85 c0                	test   eax,eax
c000c42a:	0f 85 bf 03 00 00    	jne    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c430:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c433:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c436:	01 c8                	add    eax,ecx
c000c438:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c43b:	99                   	cdq    
c000c43c:	f7 f9                	idiv   ecx
c000c43e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c442:	7c c4                	jl     c000c408 <sinc_hex_vari_process+0x2d4>
c000c444:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c448:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c44c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c44f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c456:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c45a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c45d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c460:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c463:	99                   	cdq    
c000c464:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c467:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c46a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c46d:	99                   	cdq    
c000c46e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c471:	31 d2                	xor    edx,edx
c000c473:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c476:	e9 74 03 00 00       	jmp    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c47b:	83 ec 0c             	sub    esp,0xc
c000c47e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c481:	e8 4d bd 01 00       	call   c00281d3 <__floatsidf>
c000c486:	83 c4 10             	add    esp,0x10
c000c489:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c48d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c491:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c495:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c499:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c49d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4a1:	e8 4d b0 01 00       	call   c00274f3 <__adddf3>
c000c4a6:	83 c4 10             	add    esp,0x10
c000c4a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c4ad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c4b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4c1:	e8 2d b0 01 00       	call   c00274f3 <__adddf3>
c000c4c6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c4c9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4cd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4d1:	e8 fd bc 01 00       	call   c00281d3 <__floatsidf>
c000c4d6:	83 c4 10             	add    esp,0x10
c000c4d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4e1:	52                   	push   edx
c000c4e2:	50                   	push   eax
c000c4e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4eb:	e8 4d bf 01 00       	call   c002843d <__gedf2>
c000c4f0:	83 c4 10             	add    esp,0x10
c000c4f3:	85 c0                	test   eax,eax
c000c4f5:	0f 89 49 ff ff ff    	jns    c000c444 <sinc_hex_vari_process+0x310>
c000c4fb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4ff:	0f 8e ef 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c505:	83 ec 10             	sub    esp,0x10
c000c508:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c50b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c50e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c511:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c514:	e8 2b b6 01 00       	call   c0027b44 <__subdf3>
c000c519:	83 c4 18             	add    esp,0x18
c000c51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c520:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c524:	52                   	push   edx
c000c525:	50                   	push   eax
c000c526:	e8 a5 c0 01 00       	call   c00285d0 <fabs>
c000c52b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c52f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c533:	83 c4 10             	add    esp,0x10
c000c536:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c53b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c540:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c544:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c548:	e8 d4 be 01 00       	call   c0028421 <__gtdf2>
c000c54d:	83 c4 10             	add    esp,0x10
c000c550:	85 c0                	test   eax,eax
c000c552:	0f 8e 9c 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c558:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c55b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c55e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c562:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c566:	52                   	push   edx
c000c567:	50                   	push   eax
c000c568:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c56b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c56e:	e8 d1 b5 01 00       	call   c0027b44 <__subdf3>
c000c573:	59                   	pop    ecx
c000c574:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c578:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c57c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c57f:	e8 4f bc 01 00       	call   c00281d3 <__floatsidf>
c000c584:	83 c4 10             	add    esp,0x10
c000c587:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c58b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c58f:	52                   	push   edx
c000c590:	50                   	push   eax
c000c591:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c595:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c599:	e8 d2 b5 01 00       	call   c0027b70 <__muldf3>
c000c59e:	5f                   	pop    edi
c000c59f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c5a3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c5a7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c5aa:	e8 24 bc 01 00       	call   c00281d3 <__floatsidf>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5ba:	52                   	push   edx
c000c5bb:	50                   	push   eax
c000c5bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c4:	e8 8b b8 01 00       	call   c0027e54 <__divdf3>
c000c5c9:	83 c4 10             	add    esp,0x10
c000c5cc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c5d0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c5d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e4:	e8 0a af 01 00       	call   c00274f3 <__adddf3>
c000c5e9:	83 c4 10             	add    esp,0x10
c000c5ec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5f0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5f4:	83 ec 0c             	sub    esp,0xc
c000c5f7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5fa:	e8 d4 bb 01 00       	call   c00281d3 <__floatsidf>
c000c5ff:	83 c4 10             	add    esp,0x10
c000c602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c60a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c60e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c616:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c61a:	e8 20 be 01 00       	call   c002843f <__ltdf2>
c000c61f:	83 c4 10             	add    esp,0x10
c000c622:	85 c0                	test   eax,eax
c000c624:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c628:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c62c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c630:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c634:	78 10                	js     c000c646 <sinc_hex_vari_process+0x512>
c000c636:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c63a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c63e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c642:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c652:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c656:	e8 15 b5 01 00       	call   c0027b70 <__muldf3>
c000c65b:	59                   	pop    ecx
c000c65c:	5f                   	pop    edi
c000c65d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c661:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c665:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c669:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c66d:	e8 5d f2 ff ff       	call   c000b8cf <double_to_fp>
c000c672:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c676:	89 c7                	mov    edi,eax
c000c678:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c67c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c680:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c684:	e8 e7 b4 01 00       	call   c0027b70 <__muldf3>
c000c689:	83 c4 18             	add    esp,0x18
c000c68c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c690:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c694:	52                   	push   edx
c000c695:	50                   	push   eax
c000c696:	e8 34 f2 ff ff       	call   c000b8cf <double_to_fp>
c000c69b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c69e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c6a2:	83 c4 0c             	add    esp,0xc
c000c6a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c6a8:	8d 04 90             	lea    eax,[eax+edx*4]
c000c6ab:	50                   	push   eax
c000c6ac:	50                   	push   eax
c000c6ad:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c6b0:	e8 1e bb 01 00       	call   c00281d3 <__floatsidf>
c000c6b5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c6b9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c6bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6cd:	e8 82 b7 01 00       	call   c0027e54 <__divdf3>
c000c6d2:	83 c4 18             	add    esp,0x18
c000c6d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6dd:	52                   	push   edx
c000c6de:	89 fa                	mov    edx,edi
c000c6e0:	50                   	push   eax
c000c6e1:	89 d8                	mov    eax,ebx
c000c6e3:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6e7:	e8 50 de ff ff       	call   c000a53c <calc_output_hex>
c000c6ec:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c700:	e8 4f b7 01 00       	call   c0027e54 <__divdf3>
c000c705:	83 c4 10             	add    esp,0x10
c000c708:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c70c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c710:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c714:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c718:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c720:	e8 ce ad 01 00       	call   c00274f3 <__adddf3>
c000c725:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c729:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c72d:	83 c4 18             	add    esp,0x18
c000c730:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c734:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c738:	e8 b3 be 01 00       	call   c00285f0 <lrint>
c000c73d:	83 ec 0c             	sub    esp,0xc
c000c740:	50                   	push   eax
c000c741:	e8 8d ba 01 00       	call   c00281d3 <__floatsidf>
c000c746:	83 c4 10             	add    esp,0x10
c000c749:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c74d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c751:	52                   	push   edx
c000c752:	50                   	push   eax
c000c753:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c757:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c75b:	e8 e4 b3 01 00       	call   c0027b44 <__subdf3>
c000c760:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c764:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c768:	83 c4 20             	add    esp,0x20
c000c76b:	6a 00                	push   0x0
c000c76d:	6a 00                	push   0x0
c000c76f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c773:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c777:	e8 c3 bc 01 00       	call   c002843f <__ltdf2>
c000c77c:	83 c4 10             	add    esp,0x10
c000c77f:	85 c0                	test   eax,eax
c000c781:	79 20                	jns    c000c7a3 <sinc_hex_vari_process+0x66f>
c000c783:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c787:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c78b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c78f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c793:	e8 5b ad 01 00       	call   c00274f3 <__adddf3>
c000c798:	83 c4 10             	add    esp,0x10
c000c79b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c79f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c7a3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c7a6:	83 ec 10             	sub    esp,0x10
c000c7a9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c7ad:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7bc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7c0:	e8 7f b3 01 00       	call   c0027b44 <__subdf3>
c000c7c5:	83 c4 18             	add    esp,0x18
c000c7c8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7d0:	52                   	push   edx
c000c7d1:	50                   	push   eax
c000c7d2:	e8 19 be 01 00       	call   c00285f0 <lrint>
c000c7d7:	0f af f8             	imul   edi,eax
c000c7da:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7de:	83 c4 10             	add    esp,0x10
c000c7e1:	01 f8                	add    eax,edi
c000c7e3:	99                   	cdq    
c000c7e4:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7e7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7ea:	e9 fd fb ff ff       	jmp    c000c3ec <sinc_hex_vari_process+0x2b8>
c000c7ef:	83 c4 4c             	add    esp,0x4c
c000c7f2:	89 d0                	mov    eax,edx
c000c7f4:	5b                   	pop    ebx
c000c7f5:	5e                   	pop    esi
c000c7f6:	5f                   	pop    edi
c000c7f7:	5d                   	pop    ebp
c000c7f8:	c3                   	ret    

c000c7f9 <sinc_quad_vari_process>:
c000c7f9:	55                   	push   ebp
c000c7fa:	ba 05 00 00 00       	mov    edx,0x5
c000c7ff:	57                   	push   edi
c000c800:	56                   	push   esi
c000c801:	53                   	push   ebx
c000c802:	83 ec 4c             	sub    esp,0x4c
c000c805:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c809:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c80d:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c810:	85 db                	test   ebx,ebx
c000c812:	0f 84 9c 06 00 00    	je     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c818:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c81b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c81e:	0f af c7             	imul   eax,edi
c000c821:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c824:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c827:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c82e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c835:	0f af c7             	imul   eax,edi
c000c838:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c83b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c83e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c841:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c845:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c849:	68 00 00 70 3f       	push   0x3f700000
c000c84e:	6a 00                	push   0x0
c000c850:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c854:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c858:	e8 e2 bb 01 00       	call   c002843f <__ltdf2>
c000c85d:	83 c4 10             	add    esp,0x10
c000c860:	ba 16 00 00 00       	mov    edx,0x16
c000c865:	85 c0                	test   eax,eax
c000c867:	0f 88 47 06 00 00    	js     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c86d:	68 00 00 70 40       	push   0x40700000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c87c:	e8 a0 bb 01 00       	call   c0028421 <__gtdf2>
c000c881:	83 c4 10             	add    esp,0x10
c000c884:	ba 16 00 00 00       	mov    edx,0x16
c000c889:	85 c0                	test   eax,eax
c000c88b:	0f 8f 23 06 00 00    	jg     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c891:	83 ec 0c             	sub    esp,0xc
c000c894:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c897:	e8 37 b9 01 00       	call   c00281d3 <__floatsidf>
c000c89c:	83 c4 10             	add    esp,0x10
c000c89f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8a7:	68 00 00 00 40       	push   0x40000000
c000c8ac:	6a 00                	push   0x0
c000c8ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b6:	e8 38 ac 01 00       	call   c00274f3 <__adddf3>
c000c8bb:	59                   	pop    ecx
c000c8bc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c8c0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c8c4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8c7:	e8 07 b9 01 00       	call   c00281d3 <__floatsidf>
c000c8cc:	83 c4 10             	add    esp,0x10
c000c8cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8d3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8d7:	52                   	push   edx
c000c8d8:	50                   	push   eax
c000c8d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8e1:	e8 6e b5 01 00       	call   c0027e54 <__divdf3>
c000c8e6:	83 c4 10             	add    esp,0x10
c000c8e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8f1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8f4:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c903:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c907:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90f:	e8 0d bb 01 00       	call   c0028421 <__gtdf2>
c000c914:	83 c4 10             	add    esp,0x10
c000c917:	85 c0                	test   eax,eax
c000c919:	7e 2d                	jle    c000c948 <sinc_quad_vari_process+0x14f>
c000c91b:	68 00 00 f0 3f       	push   0x3ff00000
c000c920:	6a 00                	push   0x0
c000c922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c92a:	e8 10 bb 01 00       	call   c002843f <__ltdf2>
c000c92f:	83 c4 10             	add    esp,0x10
c000c932:	85 c0                	test   eax,eax
c000c934:	79 4d                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c93a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c93e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c942:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c946:	eb 1b                	jmp    c000c963 <sinc_quad_vari_process+0x16a>
c000c948:	68 00 00 f0 3f       	push   0x3ff00000
c000c94d:	6a 00                	push   0x0
c000c94f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c953:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c957:	e8 e3 ba 01 00       	call   c002843f <__ltdf2>
c000c95c:	83 c4 10             	add    esp,0x10
c000c95f:	85 c0                	test   eax,eax
c000c961:	79 20                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c963:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c967:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c96b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c96f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c973:	e8 dc b4 01 00       	call   c0027e54 <__divdf3>
c000c978:	83 c4 10             	add    esp,0x10
c000c97b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c97f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c983:	50                   	push   eax
c000c984:	50                   	push   eax
c000c985:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c989:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c98d:	e8 5e bc 01 00       	call   c00285f0 <lrint>
c000c992:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c995:	40                   	inc    eax
c000c996:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c99a:	0f af c7             	imul   eax,edi
c000c99d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c9a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9a4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a8:	58                   	pop    eax
c000c9a9:	5a                   	pop    edx
c000c9aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9b2:	e8 39 bc 01 00       	call   c00285f0 <lrint>
c000c9b7:	83 ec 0c             	sub    esp,0xc
c000c9ba:	50                   	push   eax
c000c9bb:	e8 13 b8 01 00       	call   c00281d3 <__floatsidf>
c000c9c0:	83 c4 10             	add    esp,0x10
c000c9c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c9c7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c9cb:	52                   	push   edx
c000c9cc:	50                   	push   eax
c000c9cd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d5:	e8 6a b1 01 00       	call   c0027b44 <__subdf3>
c000c9da:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9de:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9e2:	83 c4 20             	add    esp,0x20
c000c9e5:	6a 00                	push   0x0
c000c9e7:	6a 00                	push   0x0
c000c9e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9f1:	e8 49 ba 01 00       	call   c002843f <__ltdf2>
c000c9f6:	83 c4 10             	add    esp,0x10
c000c9f9:	85 c0                	test   eax,eax
c000c9fb:	79 1f                	jns    c000ca1c <sinc_quad_vari_process+0x223>
c000c9fd:	68 00 00 f0 3f       	push   0x3ff00000
c000ca02:	6a 00                	push   0x0
c000ca04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca0c:	e8 e2 aa 01 00       	call   c00274f3 <__adddf3>
c000ca11:	83 c4 10             	add    esp,0x10
c000ca14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca18:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ca1c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ca1f:	83 ec 10             	sub    esp,0x10
c000ca22:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ca26:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca31:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca35:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca39:	e8 06 b1 01 00       	call   c0027b44 <__subdf3>
c000ca3e:	83 c4 18             	add    esp,0x18
c000ca41:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca45:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca49:	52                   	push   edx
c000ca4a:	50                   	push   eax
c000ca4b:	e8 a0 bb 01 00       	call   c00285f0 <lrint>
c000ca50:	0f af f8             	imul   edi,eax
c000ca53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca57:	01 f8                	add    eax,edi
c000ca59:	99                   	cdq    
c000ca5a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca5d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca64:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca68:	68 00 00 f0 3f       	push   0x3ff00000
c000ca6d:	6a 00                	push   0x0
c000ca6f:	e8 e0 b3 01 00       	call   c0027e54 <__divdf3>
c000ca74:	83 c4 10             	add    esp,0x10
c000ca77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca7f:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca84:	68 23 42 92 0c       	push   0xc924223
c000ca89:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca8d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca91:	e8 5d aa 01 00       	call   c00274f3 <__adddf3>
c000ca96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca9e:	83 c4 20             	add    esp,0x20
c000caa1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000caa9:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cab1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cab4:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cab7:	7d 50                	jge    c000cb09 <sinc_quad_vari_process+0x310>
c000cab9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cabf:	01 c8                	add    eax,ecx
c000cac1:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac4:	99                   	cdq    
c000cac5:	f7 f9                	idiv   ecx
c000cac7:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacb:	7d 0c                	jge    c000cad9 <sinc_quad_vari_process+0x2e0>
c000cacd:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cad0:	85 ff                	test   edi,edi
c000cad2:	79 6c                	jns    c000cb40 <sinc_quad_vari_process+0x347>
c000cad4:	e9 e7 00 00 00       	jmp    c000cbc0 <sinc_quad_vari_process+0x3c7>
c000cad9:	50                   	push   eax
c000cada:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cade:	56                   	push   esi
c000cadf:	53                   	push   ebx
c000cae0:	e8 11 ee ff ff       	call   c000b8f6 <prepare_data>
c000cae5:	83 c4 10             	add    esp,0x10
c000cae8:	89 c2                	mov    edx,eax
c000caea:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000caed:	85 c0                	test   eax,eax
c000caef:	0f 85 bf 03 00 00    	jne    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000caf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000caf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cafb:	01 c8                	add    eax,ecx
c000cafd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cb00:	99                   	cdq    
c000cb01:	f7 f9                	idiv   ecx
c000cb03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cb07:	7c c4                	jl     c000cacd <sinc_quad_vari_process+0x2d4>
c000cb09:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb0d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb11:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cb14:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cb17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb1b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb1f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cb22:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cb25:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cb28:	99                   	cdq    
c000cb29:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb2c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cb2f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cb32:	99                   	cdq    
c000cb33:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb36:	31 d2                	xor    edx,edx
c000cb38:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb3b:	e9 74 03 00 00       	jmp    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000cb40:	83 ec 0c             	sub    esp,0xc
c000cb43:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb46:	e8 88 b6 01 00       	call   c00281d3 <__floatsidf>
c000cb4b:	83 c4 10             	add    esp,0x10
c000cb4e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb52:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb66:	e8 88 a9 01 00       	call   c00274f3 <__adddf3>
c000cb6b:	83 c4 10             	add    esp,0x10
c000cb6e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb72:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb86:	e8 68 a9 01 00       	call   c00274f3 <__adddf3>
c000cb8b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb92:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb96:	e8 38 b6 01 00       	call   c00281d3 <__floatsidf>
c000cb9b:	83 c4 10             	add    esp,0x10
c000cb9e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cba2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cba6:	52                   	push   edx
c000cba7:	50                   	push   eax
c000cba8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbb0:	e8 88 b8 01 00       	call   c002843d <__gedf2>
c000cbb5:	83 c4 10             	add    esp,0x10
c000cbb8:	85 c0                	test   eax,eax
c000cbba:	0f 89 49 ff ff ff    	jns    c000cb09 <sinc_quad_vari_process+0x310>
c000cbc0:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cbc4:	0f 8e ef 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cbca:	83 ec 10             	sub    esp,0x10
c000cbcd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbd0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbd3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cbd6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cbd9:	e8 66 af 01 00       	call   c0027b44 <__subdf3>
c000cbde:	83 c4 18             	add    esp,0x18
c000cbe1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbe5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbe9:	52                   	push   edx
c000cbea:	50                   	push   eax
c000cbeb:	e8 e0 b9 01 00       	call   c00285d0 <fabs>
c000cbf0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbf4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbf8:	83 c4 10             	add    esp,0x10
c000cbfb:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cc00:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cc05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc09:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc0d:	e8 0f b8 01 00       	call   c0028421 <__gtdf2>
c000cc12:	83 c4 10             	add    esp,0x10
c000cc15:	85 c0                	test   eax,eax
c000cc17:	0f 8e 9c 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cc1d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cc20:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cc23:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc27:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc2b:	52                   	push   edx
c000cc2c:	50                   	push   eax
c000cc2d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cc30:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cc33:	e8 0c af 01 00       	call   c0027b44 <__subdf3>
c000cc38:	59                   	pop    ecx
c000cc39:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc3d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc41:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc44:	e8 8a b5 01 00       	call   c00281d3 <__floatsidf>
c000cc49:	83 c4 10             	add    esp,0x10
c000cc4c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc50:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc54:	52                   	push   edx
c000cc55:	50                   	push   eax
c000cc56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5e:	e8 0d af 01 00       	call   c0027b70 <__muldf3>
c000cc63:	5f                   	pop    edi
c000cc64:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc68:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc6c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc6f:	e8 5f b5 01 00       	call   c00281d3 <__floatsidf>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc7f:	52                   	push   edx
c000cc80:	50                   	push   eax
c000cc81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc89:	e8 c6 b1 01 00       	call   c0027e54 <__divdf3>
c000cc8e:	83 c4 10             	add    esp,0x10
c000cc91:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc95:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cca1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca9:	e8 45 a8 01 00       	call   c00274f3 <__adddf3>
c000ccae:	83 c4 10             	add    esp,0x10
c000ccb1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccb5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccb9:	83 ec 0c             	sub    esp,0xc
c000ccbc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ccbf:	e8 0f b5 01 00       	call   c00281d3 <__floatsidf>
c000ccc4:	83 c4 10             	add    esp,0x10
c000ccc7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cccb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cccf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdf:	e8 5b b7 01 00       	call   c002843f <__ltdf2>
c000cce4:	83 c4 10             	add    esp,0x10
c000cce7:	85 c0                	test   eax,eax
c000cce9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cced:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccf1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccf5:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccf9:	78 10                	js     c000cd0b <sinc_quad_vari_process+0x512>
c000ccfb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cd03:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cd07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd13:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd17:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd1b:	e8 50 ae 01 00       	call   c0027b70 <__muldf3>
c000cd20:	59                   	pop    ecx
c000cd21:	5f                   	pop    edi
c000cd22:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd26:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd2a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd2e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd32:	e8 98 eb ff ff       	call   c000b8cf <double_to_fp>
c000cd37:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd3b:	89 c7                	mov    edi,eax
c000cd3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd45:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd49:	e8 22 ae 01 00       	call   c0027b70 <__muldf3>
c000cd4e:	83 c4 18             	add    esp,0x18
c000cd51:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd55:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd59:	52                   	push   edx
c000cd5a:	50                   	push   eax
c000cd5b:	e8 6f eb ff ff       	call   c000b8cf <double_to_fp>
c000cd60:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd63:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd67:	83 c4 0c             	add    esp,0xc
c000cd6a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd6d:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd70:	50                   	push   eax
c000cd71:	50                   	push   eax
c000cd72:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd75:	e8 59 b4 01 00       	call   c00281d3 <__floatsidf>
c000cd7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd82:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd86:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd92:	e8 bd b0 01 00       	call   c0027e54 <__divdf3>
c000cd97:	83 c4 18             	add    esp,0x18
c000cd9a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd9e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cda2:	52                   	push   edx
c000cda3:	89 fa                	mov    edx,edi
c000cda5:	50                   	push   eax
c000cda6:	89 d8                	mov    eax,ebx
c000cda8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cdac:	e8 a5 d1 ff ff       	call   c0009f56 <calc_output_quad>
c000cdb1:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cdb5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdb9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdbd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc5:	e8 8a b0 01 00       	call   c0027e54 <__divdf3>
c000cdca:	83 c4 10             	add    esp,0x10
c000cdcd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cdd1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cdd5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdd9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cddd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde5:	e8 09 a7 01 00       	call   c00274f3 <__adddf3>
c000cdea:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdee:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdf2:	83 c4 18             	add    esp,0x18
c000cdf5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdf9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdfd:	e8 ee b7 01 00       	call   c00285f0 <lrint>
c000ce02:	83 ec 0c             	sub    esp,0xc
c000ce05:	50                   	push   eax
c000ce06:	e8 c8 b3 01 00       	call   c00281d3 <__floatsidf>
c000ce0b:	83 c4 10             	add    esp,0x10
c000ce0e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce12:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce16:	52                   	push   edx
c000ce17:	50                   	push   eax
c000ce18:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce1c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce20:	e8 1f ad 01 00       	call   c0027b44 <__subdf3>
c000ce25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce2d:	83 c4 20             	add    esp,0x20
c000ce30:	6a 00                	push   0x0
c000ce32:	6a 00                	push   0x0
c000ce34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce3c:	e8 fe b5 01 00       	call   c002843f <__ltdf2>
c000ce41:	83 c4 10             	add    esp,0x10
c000ce44:	85 c0                	test   eax,eax
c000ce46:	79 20                	jns    c000ce68 <sinc_quad_vari_process+0x66f>
c000ce48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce58:	e8 96 a6 01 00       	call   c00274f3 <__adddf3>
c000ce5d:	83 c4 10             	add    esp,0x10
c000ce60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce64:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce68:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce6b:	83 ec 10             	sub    esp,0x10
c000ce6e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce72:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce7d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce81:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce85:	e8 ba ac 01 00       	call   c0027b44 <__subdf3>
c000ce8a:	83 c4 18             	add    esp,0x18
c000ce8d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce91:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce95:	52                   	push   edx
c000ce96:	50                   	push   eax
c000ce97:	e8 54 b7 01 00       	call   c00285f0 <lrint>
c000ce9c:	0f af f8             	imul   edi,eax
c000ce9f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cea3:	83 c4 10             	add    esp,0x10
c000cea6:	01 f8                	add    eax,edi
c000cea8:	99                   	cdq    
c000cea9:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ceac:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ceaf:	e9 fd fb ff ff       	jmp    c000cab1 <sinc_quad_vari_process+0x2b8>
c000ceb4:	83 c4 4c             	add    esp,0x4c
c000ceb7:	89 d0                	mov    eax,edx
c000ceb9:	5b                   	pop    ebx
c000ceba:	5e                   	pop    esi
c000cebb:	5f                   	pop    edi
c000cebc:	5d                   	pop    ebp
c000cebd:	c3                   	ret    

c000cebe <sinc_stereo_vari_process>:
c000cebe:	55                   	push   ebp
c000cebf:	ba 05 00 00 00       	mov    edx,0x5
c000cec4:	57                   	push   edi
c000cec5:	56                   	push   esi
c000cec6:	53                   	push   ebx
c000cec7:	83 ec 4c             	sub    esp,0x4c
c000ceca:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cece:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ced2:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ced5:	85 db                	test   ebx,ebx
c000ced7:	0f 84 9c 06 00 00    	je     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cedd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cee0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cee3:	0f af c7             	imul   eax,edi
c000cee6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cee9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceec:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cef3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cefa:	0f af c7             	imul   eax,edi
c000cefd:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cf00:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cf03:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf06:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cf0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cf0e:	68 00 00 70 3f       	push   0x3f700000
c000cf13:	6a 00                	push   0x0
c000cf15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf1d:	e8 1d b5 01 00       	call   c002843f <__ltdf2>
c000cf22:	83 c4 10             	add    esp,0x10
c000cf25:	ba 16 00 00 00       	mov    edx,0x16
c000cf2a:	85 c0                	test   eax,eax
c000cf2c:	0f 88 47 06 00 00    	js     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf32:	68 00 00 70 40       	push   0x40700000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf41:	e8 db b4 01 00       	call   c0028421 <__gtdf2>
c000cf46:	83 c4 10             	add    esp,0x10
c000cf49:	ba 16 00 00 00       	mov    edx,0x16
c000cf4e:	85 c0                	test   eax,eax
c000cf50:	0f 8f 23 06 00 00    	jg     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf56:	83 ec 0c             	sub    esp,0xc
c000cf59:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf5c:	e8 72 b2 01 00       	call   c00281d3 <__floatsidf>
c000cf61:	83 c4 10             	add    esp,0x10
c000cf64:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf6c:	68 00 00 00 40       	push   0x40000000
c000cf71:	6a 00                	push   0x0
c000cf73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf7b:	e8 73 a5 01 00       	call   c00274f3 <__adddf3>
c000cf80:	59                   	pop    ecx
c000cf81:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf85:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf89:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf8c:	e8 42 b2 01 00       	call   c00281d3 <__floatsidf>
c000cf91:	83 c4 10             	add    esp,0x10
c000cf94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf98:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf9c:	52                   	push   edx
c000cf9d:	50                   	push   eax
c000cf9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa6:	e8 a9 ae 01 00       	call   c0027e54 <__divdf3>
c000cfab:	83 c4 10             	add    esp,0x10
c000cfae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cfb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cfb6:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cfb9:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cfbc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfc0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd4:	e8 48 b4 01 00       	call   c0028421 <__gtdf2>
c000cfd9:	83 c4 10             	add    esp,0x10
c000cfdc:	85 c0                	test   eax,eax
c000cfde:	7e 2d                	jle    c000d00d <sinc_stereo_vari_process+0x14f>
c000cfe0:	68 00 00 f0 3f       	push   0x3ff00000
c000cfe5:	6a 00                	push   0x0
c000cfe7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfeb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfef:	e8 4b b4 01 00       	call   c002843f <__ltdf2>
c000cff4:	83 c4 10             	add    esp,0x10
c000cff7:	85 c0                	test   eax,eax
c000cff9:	79 4d                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000cffb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d003:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d007:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d00b:	eb 1b                	jmp    c000d028 <sinc_stereo_vari_process+0x16a>
c000d00d:	68 00 00 f0 3f       	push   0x3ff00000
c000d012:	6a 00                	push   0x0
c000d014:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d018:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d01c:	e8 1e b4 01 00       	call   c002843f <__ltdf2>
c000d021:	83 c4 10             	add    esp,0x10
c000d024:	85 c0                	test   eax,eax
c000d026:	79 20                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000d028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d02c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d030:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d034:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d038:	e8 17 ae 01 00       	call   c0027e54 <__divdf3>
c000d03d:	83 c4 10             	add    esp,0x10
c000d040:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d044:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d048:	50                   	push   eax
c000d049:	50                   	push   eax
c000d04a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d04e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d052:	e8 99 b5 01 00       	call   c00285f0 <lrint>
c000d057:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d05a:	40                   	inc    eax
c000d05b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d05f:	0f af c7             	imul   eax,edi
c000d062:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d066:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d069:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d06d:	58                   	pop    eax
c000d06e:	5a                   	pop    edx
c000d06f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d073:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d077:	e8 74 b5 01 00       	call   c00285f0 <lrint>
c000d07c:	83 ec 0c             	sub    esp,0xc
c000d07f:	50                   	push   eax
c000d080:	e8 4e b1 01 00       	call   c00281d3 <__floatsidf>
c000d085:	83 c4 10             	add    esp,0x10
c000d088:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d08c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d090:	52                   	push   edx
c000d091:	50                   	push   eax
c000d092:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d096:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d09a:	e8 a5 aa 01 00       	call   c0027b44 <__subdf3>
c000d09f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0a7:	83 c4 20             	add    esp,0x20
c000d0aa:	6a 00                	push   0x0
c000d0ac:	6a 00                	push   0x0
c000d0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b6:	e8 84 b3 01 00       	call   c002843f <__ltdf2>
c000d0bb:	83 c4 10             	add    esp,0x10
c000d0be:	85 c0                	test   eax,eax
c000d0c0:	79 1f                	jns    c000d0e1 <sinc_stereo_vari_process+0x223>
c000d0c2:	68 00 00 f0 3f       	push   0x3ff00000
c000d0c7:	6a 00                	push   0x0
c000d0c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0d1:	e8 1d a4 01 00       	call   c00274f3 <__adddf3>
c000d0d6:	83 c4 10             	add    esp,0x10
c000d0d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0e1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0e4:	83 ec 10             	sub    esp,0x10
c000d0e7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0eb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fe:	e8 41 aa 01 00       	call   c0027b44 <__subdf3>
c000d103:	83 c4 18             	add    esp,0x18
c000d106:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d10a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d10e:	52                   	push   edx
c000d10f:	50                   	push   eax
c000d110:	e8 db b4 01 00       	call   c00285f0 <lrint>
c000d115:	0f af f8             	imul   edi,eax
c000d118:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d11c:	01 f8                	add    eax,edi
c000d11e:	99                   	cdq    
c000d11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d125:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d129:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d12d:	68 00 00 f0 3f       	push   0x3ff00000
c000d132:	6a 00                	push   0x0
c000d134:	e8 1b ad 01 00       	call   c0027e54 <__divdf3>
c000d139:	83 c4 10             	add    esp,0x10
c000d13c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d140:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d144:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d149:	68 23 42 92 0c       	push   0xc924223
c000d14e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d152:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d156:	e8 98 a3 01 00       	call   c00274f3 <__adddf3>
c000d15b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d15f:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d163:	83 c4 20             	add    esp,0x20
c000d166:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d16e:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d176:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d179:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d17c:	7d 50                	jge    c000d1ce <sinc_stereo_vari_process+0x310>
c000d17e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d181:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d184:	01 c8                	add    eax,ecx
c000d186:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d189:	99                   	cdq    
c000d18a:	f7 f9                	idiv   ecx
c000d18c:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d190:	7d 0c                	jge    c000d19e <sinc_stereo_vari_process+0x2e0>
c000d192:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d195:	85 ff                	test   edi,edi
c000d197:	79 6c                	jns    c000d205 <sinc_stereo_vari_process+0x347>
c000d199:	e9 e7 00 00 00       	jmp    c000d285 <sinc_stereo_vari_process+0x3c7>
c000d19e:	50                   	push   eax
c000d19f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1a3:	56                   	push   esi
c000d1a4:	53                   	push   ebx
c000d1a5:	e8 4c e7 ff ff       	call   c000b8f6 <prepare_data>
c000d1aa:	83 c4 10             	add    esp,0x10
c000d1ad:	89 c2                	mov    edx,eax
c000d1af:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d1b2:	85 c0                	test   eax,eax
c000d1b4:	0f 85 bf 03 00 00    	jne    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d1ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d1bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d1c0:	01 c8                	add    eax,ecx
c000d1c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d1c5:	99                   	cdq    
c000d1c6:	f7 f9                	idiv   ecx
c000d1c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d1cc:	7c c4                	jl     c000d192 <sinc_stereo_vari_process+0x2d4>
c000d1ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d1d2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1d6:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d1d9:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1e4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1e7:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1ea:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1ed:	99                   	cdq    
c000d1ee:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1f1:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1f4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1f7:	99                   	cdq    
c000d1f8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1fb:	31 d2                	xor    edx,edx
c000d1fd:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d200:	e9 74 03 00 00       	jmp    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d205:	83 ec 0c             	sub    esp,0xc
c000d208:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d20b:	e8 c3 af 01 00       	call   c00281d3 <__floatsidf>
c000d210:	83 c4 10             	add    esp,0x10
c000d213:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d217:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d21b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d21f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d223:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d227:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d22b:	e8 c3 a2 01 00       	call   c00274f3 <__adddf3>
c000d230:	83 c4 10             	add    esp,0x10
c000d233:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d237:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d23b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d23f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d243:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d247:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d24b:	e8 a3 a2 01 00       	call   c00274f3 <__adddf3>
c000d250:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d253:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d257:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d25b:	e8 73 af 01 00       	call   c00281d3 <__floatsidf>
c000d260:	83 c4 10             	add    esp,0x10
c000d263:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d267:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d26b:	52                   	push   edx
c000d26c:	50                   	push   eax
c000d26d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d271:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d275:	e8 c3 b1 01 00       	call   c002843d <__gedf2>
c000d27a:	83 c4 10             	add    esp,0x10
c000d27d:	85 c0                	test   eax,eax
c000d27f:	0f 89 49 ff ff ff    	jns    c000d1ce <sinc_stereo_vari_process+0x310>
c000d285:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d289:	0f 8e ef 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d28f:	83 ec 10             	sub    esp,0x10
c000d292:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d295:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d298:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d29b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d29e:	e8 a1 a8 01 00       	call   c0027b44 <__subdf3>
c000d2a3:	83 c4 18             	add    esp,0x18
c000d2a6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2aa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2ae:	52                   	push   edx
c000d2af:	50                   	push   eax
c000d2b0:	e8 1b b3 01 00       	call   c00285d0 <fabs>
c000d2b5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d2b9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d2bd:	83 c4 10             	add    esp,0x10
c000d2c0:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d2c5:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d2ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2d2:	e8 4a b1 01 00       	call   c0028421 <__gtdf2>
c000d2d7:	83 c4 10             	add    esp,0x10
c000d2da:	85 c0                	test   eax,eax
c000d2dc:	0f 8e 9c 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d2e2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2e5:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2ec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2f0:	52                   	push   edx
c000d2f1:	50                   	push   eax
c000d2f2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2f5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2f8:	e8 47 a8 01 00       	call   c0027b44 <__subdf3>
c000d2fd:	59                   	pop    ecx
c000d2fe:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d302:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d306:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d309:	e8 c5 ae 01 00       	call   c00281d3 <__floatsidf>
c000d30e:	83 c4 10             	add    esp,0x10
c000d311:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d315:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d319:	52                   	push   edx
c000d31a:	50                   	push   eax
c000d31b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d31f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d323:	e8 48 a8 01 00       	call   c0027b70 <__muldf3>
c000d328:	5f                   	pop    edi
c000d329:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d32d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d331:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d334:	e8 9a ae 01 00       	call   c00281d3 <__floatsidf>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d340:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d344:	52                   	push   edx
c000d345:	50                   	push   eax
c000d346:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34e:	e8 01 ab 01 00       	call   c0027e54 <__divdf3>
c000d353:	83 c4 10             	add    esp,0x10
c000d356:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d35a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d35e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d362:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d366:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36e:	e8 80 a1 01 00       	call   c00274f3 <__adddf3>
c000d373:	83 c4 10             	add    esp,0x10
c000d376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d37e:	83 ec 0c             	sub    esp,0xc
c000d381:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d384:	e8 4a ae 01 00       	call   c00281d3 <__floatsidf>
c000d389:	83 c4 10             	add    esp,0x10
c000d38c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d390:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d394:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d398:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d39c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a4:	e8 96 b0 01 00       	call   c002843f <__ltdf2>
c000d3a9:	83 c4 10             	add    esp,0x10
c000d3ac:	85 c0                	test   eax,eax
c000d3ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d3b2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d3b6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d3ba:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d3be:	78 10                	js     c000d3d0 <sinc_stereo_vari_process+0x512>
c000d3c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d3c4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d3c8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d3cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3e0:	e8 8b a7 01 00       	call   c0027b70 <__muldf3>
c000d3e5:	59                   	pop    ecx
c000d3e6:	5f                   	pop    edi
c000d3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f7:	e8 d3 e4 ff ff       	call   c000b8cf <double_to_fp>
c000d3fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d400:	89 c7                	mov    edi,eax
c000d402:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d406:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40e:	e8 5d a7 01 00       	call   c0027b70 <__muldf3>
c000d413:	83 c4 18             	add    esp,0x18
c000d416:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d41a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d41e:	52                   	push   edx
c000d41f:	50                   	push   eax
c000d420:	e8 aa e4 ff ff       	call   c000b8cf <double_to_fp>
c000d425:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d428:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d42c:	83 c4 0c             	add    esp,0xc
c000d42f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d432:	8d 04 90             	lea    eax,[eax+edx*4]
c000d435:	50                   	push   eax
c000d436:	50                   	push   eax
c000d437:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d43a:	e8 94 ad 01 00       	call   c00281d3 <__floatsidf>
c000d43f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d443:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d447:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d453:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d457:	e8 f8 a9 01 00       	call   c0027e54 <__divdf3>
c000d45c:	83 c4 18             	add    esp,0x18
c000d45f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d463:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d467:	52                   	push   edx
c000d468:	89 fa                	mov    edx,edi
c000d46a:	50                   	push   eax
c000d46b:	89 d8                	mov    eax,ebx
c000d46d:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d471:	e8 02 c7 ff ff       	call   c0009b78 <calc_output_stereo>
c000d476:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d47a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d47e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d482:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d486:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d48a:	e8 c5 a9 01 00       	call   c0027e54 <__divdf3>
c000d48f:	83 c4 10             	add    esp,0x10
c000d492:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d496:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d49a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d49e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4aa:	e8 44 a0 01 00       	call   c00274f3 <__adddf3>
c000d4af:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d4b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d4b7:	83 c4 18             	add    esp,0x18
c000d4ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4c2:	e8 29 b1 01 00       	call   c00285f0 <lrint>
c000d4c7:	83 ec 0c             	sub    esp,0xc
c000d4ca:	50                   	push   eax
c000d4cb:	e8 03 ad 01 00       	call   c00281d3 <__floatsidf>
c000d4d0:	83 c4 10             	add    esp,0x10
c000d4d3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4db:	52                   	push   edx
c000d4dc:	50                   	push   eax
c000d4dd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e5:	e8 5a a6 01 00       	call   c0027b44 <__subdf3>
c000d4ea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4ee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4f2:	83 c4 20             	add    esp,0x20
c000d4f5:	6a 00                	push   0x0
c000d4f7:	6a 00                	push   0x0
c000d4f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d501:	e8 39 af 01 00       	call   c002843f <__ltdf2>
c000d506:	83 c4 10             	add    esp,0x10
c000d509:	85 c0                	test   eax,eax
c000d50b:	79 20                	jns    c000d52d <sinc_stereo_vari_process+0x66f>
c000d50d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d511:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d515:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d519:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d51d:	e8 d1 9f 01 00       	call   c00274f3 <__adddf3>
c000d522:	83 c4 10             	add    esp,0x10
c000d525:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d529:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d52d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d530:	83 ec 10             	sub    esp,0x10
c000d533:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d537:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d53a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d53e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d542:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d546:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d54a:	e8 f5 a5 01 00       	call   c0027b44 <__subdf3>
c000d54f:	83 c4 18             	add    esp,0x18
c000d552:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d556:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d55a:	52                   	push   edx
c000d55b:	50                   	push   eax
c000d55c:	e8 8f b0 01 00       	call   c00285f0 <lrint>
c000d561:	0f af f8             	imul   edi,eax
c000d564:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d568:	83 c4 10             	add    esp,0x10
c000d56b:	01 f8                	add    eax,edi
c000d56d:	99                   	cdq    
c000d56e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d571:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d574:	e9 fd fb ff ff       	jmp    c000d176 <sinc_stereo_vari_process+0x2b8>
c000d579:	83 c4 4c             	add    esp,0x4c
c000d57c:	89 d0                	mov    eax,edx
c000d57e:	5b                   	pop    ebx
c000d57f:	5e                   	pop    esi
c000d580:	5f                   	pop    edi
c000d581:	5d                   	pop    ebp
c000d582:	c3                   	ret    

c000d583 <sinc_mono_vari_process>:
c000d583:	55                   	push   ebp
c000d584:	ba 05 00 00 00       	mov    edx,0x5
c000d589:	57                   	push   edi
c000d58a:	56                   	push   esi
c000d58b:	53                   	push   ebx
c000d58c:	83 ec 4c             	sub    esp,0x4c
c000d58f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d593:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d597:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d59a:	85 db                	test   ebx,ebx
c000d59c:	0f 84 c1 06 00 00    	je     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5a2:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d5a5:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d5a8:	0f af c7             	imul   eax,edi
c000d5ab:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d5ae:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d5b1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d5b8:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d5bf:	0f af c7             	imul   eax,edi
c000d5c2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d5c5:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d5c9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d5cc:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d5d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d5d6:	68 00 00 70 3f       	push   0x3f700000
c000d5db:	6a 00                	push   0x0
c000d5dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e5:	e8 55 ae 01 00       	call   c002843f <__ltdf2>
c000d5ea:	83 c4 10             	add    esp,0x10
c000d5ed:	ba 16 00 00 00       	mov    edx,0x16
c000d5f2:	85 c0                	test   eax,eax
c000d5f4:	0f 88 69 06 00 00    	js     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5fa:	68 00 00 70 40       	push   0x40700000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d605:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d609:	e8 13 ae 01 00       	call   c0028421 <__gtdf2>
c000d60e:	83 c4 10             	add    esp,0x10
c000d611:	ba 16 00 00 00       	mov    edx,0x16
c000d616:	85 c0                	test   eax,eax
c000d618:	0f 8f 45 06 00 00    	jg     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d61e:	83 ec 0c             	sub    esp,0xc
c000d621:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d624:	e8 aa ab 01 00       	call   c00281d3 <__floatsidf>
c000d629:	83 c4 10             	add    esp,0x10
c000d62c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d630:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d634:	68 00 00 00 40       	push   0x40000000
c000d639:	6a 00                	push   0x0
c000d63b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d63f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d643:	e8 ab 9e 01 00       	call   c00274f3 <__adddf3>
c000d648:	59                   	pop    ecx
c000d649:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d64d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d651:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d654:	e8 7a ab 01 00       	call   c00281d3 <__floatsidf>
c000d659:	83 c4 10             	add    esp,0x10
c000d65c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d660:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d664:	52                   	push   edx
c000d665:	50                   	push   eax
c000d666:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66e:	e8 e1 a7 01 00       	call   c0027e54 <__divdf3>
c000d673:	83 c4 10             	add    esp,0x10
c000d676:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d67a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d67e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d681:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d684:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d688:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d68c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d69c:	e8 80 ad 01 00       	call   c0028421 <__gtdf2>
c000d6a1:	83 c4 10             	add    esp,0x10
c000d6a4:	85 c0                	test   eax,eax
c000d6a6:	7e 2d                	jle    c000d6d5 <sinc_mono_vari_process+0x152>
c000d6a8:	68 00 00 f0 3f       	push   0x3ff00000
c000d6ad:	6a 00                	push   0x0
c000d6af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b7:	e8 83 ad 01 00       	call   c002843f <__ltdf2>
c000d6bc:	83 c4 10             	add    esp,0x10
c000d6bf:	85 c0                	test   eax,eax
c000d6c1:	79 4d                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d6cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6d3:	eb 1b                	jmp    c000d6f0 <sinc_mono_vari_process+0x16d>
c000d6d5:	68 00 00 f0 3f       	push   0x3ff00000
c000d6da:	6a 00                	push   0x0
c000d6dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e4:	e8 56 ad 01 00       	call   c002843f <__ltdf2>
c000d6e9:	83 c4 10             	add    esp,0x10
c000d6ec:	85 c0                	test   eax,eax
c000d6ee:	79 20                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d700:	e8 4f a7 01 00       	call   c0027e54 <__divdf3>
c000d705:	83 c4 10             	add    esp,0x10
c000d708:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d70c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d710:	50                   	push   eax
c000d711:	50                   	push   eax
c000d712:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d716:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d71a:	e8 d1 ae 01 00       	call   c00285f0 <lrint>
c000d71f:	40                   	inc    eax
c000d720:	0f af c7             	imul   eax,edi
c000d723:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d727:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d72b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d72e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d731:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d735:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d739:	58                   	pop    eax
c000d73a:	5a                   	pop    edx
c000d73b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d73f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d743:	e8 a8 ae 01 00       	call   c00285f0 <lrint>
c000d748:	83 ec 0c             	sub    esp,0xc
c000d74b:	50                   	push   eax
c000d74c:	e8 82 aa 01 00       	call   c00281d3 <__floatsidf>
c000d751:	83 c4 10             	add    esp,0x10
c000d754:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d758:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d75c:	52                   	push   edx
c000d75d:	50                   	push   eax
c000d75e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d762:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d766:	e8 d9 a3 01 00       	call   c0027b44 <__subdf3>
c000d76b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d76f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d773:	83 c4 20             	add    esp,0x20
c000d776:	6a 00                	push   0x0
c000d778:	6a 00                	push   0x0
c000d77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d782:	e8 b8 ac 01 00       	call   c002843f <__ltdf2>
c000d787:	83 c4 10             	add    esp,0x10
c000d78a:	85 c0                	test   eax,eax
c000d78c:	79 1f                	jns    c000d7ad <sinc_mono_vari_process+0x22a>
c000d78e:	68 00 00 f0 3f       	push   0x3ff00000
c000d793:	6a 00                	push   0x0
c000d795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d799:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d79d:	e8 51 9d 01 00       	call   c00274f3 <__adddf3>
c000d7a2:	83 c4 10             	add    esp,0x10
c000d7a5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d7ad:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d7b0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d7b3:	83 ec 10             	sub    esp,0x10
c000d7b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c6:	e8 79 a3 01 00       	call   c0027b44 <__subdf3>
c000d7cb:	83 c4 18             	add    esp,0x18
c000d7ce:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d7d2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d7d6:	52                   	push   edx
c000d7d7:	50                   	push   eax
c000d7d8:	e8 13 ae 01 00       	call   c00285f0 <lrint>
c000d7dd:	0f af f8             	imul   edi,eax
c000d7e0:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7e3:	31 ff                	xor    edi,edi
c000d7e5:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7ea:	99                   	cdq    
c000d7eb:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7ee:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f9:	55                   	push   ebp
c000d7fa:	57                   	push   edi
c000d7fb:	e8 54 a6 01 00       	call   c0027e54 <__divdf3>
c000d800:	83 c4 10             	add    esp,0x10
c000d803:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d807:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d80b:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d810:	68 23 42 92 0c       	push   0xc924223
c000d815:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d819:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d81d:	e8 d1 9c 01 00       	call   c00274f3 <__adddf3>
c000d822:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d826:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d82a:	83 c4 20             	add    esp,0x20
c000d82d:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d831:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d835:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d838:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d83b:	7d 54                	jge    c000d891 <sinc_mono_vari_process+0x30e>
c000d83d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d840:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d843:	01 c8                	add    eax,ecx
c000d845:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d848:	99                   	cdq    
c000d849:	f7 f9                	idiv   ecx
c000d84b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d84f:	7d 0c                	jge    c000d85d <sinc_mono_vari_process+0x2da>
c000d851:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d854:	85 ff                	test   edi,edi
c000d856:	79 73                	jns    c000d8cb <sinc_mono_vari_process+0x348>
c000d858:	e9 ee 00 00 00       	jmp    c000d94b <sinc_mono_vari_process+0x3c8>
c000d85d:	50                   	push   eax
c000d85e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d862:	56                   	push   esi
c000d863:	53                   	push   ebx
c000d864:	e8 8d e0 ff ff       	call   c000b8f6 <prepare_data>
c000d869:	89 c2                	mov    edx,eax
c000d86b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d86f:	83 c4 10             	add    esp,0x10
c000d872:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d875:	85 d2                	test   edx,edx
c000d877:	0f 85 e6 03 00 00    	jne    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d87d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d880:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d883:	01 c8                	add    eax,ecx
c000d885:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d888:	99                   	cdq    
c000d889:	f7 f9                	idiv   ecx
c000d88b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d88f:	7c c0                	jl     c000d851 <sinc_mono_vari_process+0x2ce>
c000d891:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d895:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d899:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d89d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d8a0:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d8a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8a7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d8ab:	89 01                	mov    DWORD PTR [ecx],eax
c000d8ad:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d8b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d8b3:	99                   	cdq    
c000d8b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d8ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d8bd:	99                   	cdq    
c000d8be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8c1:	31 d2                	xor    edx,edx
c000d8c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d8c6:	e9 98 03 00 00       	jmp    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d8cb:	83 ec 0c             	sub    esp,0xc
c000d8ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d8d1:	e8 fd a8 01 00       	call   c00281d3 <__floatsidf>
c000d8d6:	83 c4 10             	add    esp,0x10
c000d8d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8f1:	e8 fd 9b 01 00       	call   c00274f3 <__adddf3>
c000d8f6:	83 c4 10             	add    esp,0x10
c000d8f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8fd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d901:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d905:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d909:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d90d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d911:	e8 dd 9b 01 00       	call   c00274f3 <__adddf3>
c000d916:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d919:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d91d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d921:	e8 ad a8 01 00       	call   c00281d3 <__floatsidf>
c000d926:	83 c4 10             	add    esp,0x10
c000d929:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d92d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d931:	52                   	push   edx
c000d932:	50                   	push   eax
c000d933:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d937:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d93b:	e8 e1 aa 01 00       	call   c0028421 <__gtdf2>
c000d940:	83 c4 10             	add    esp,0x10
c000d943:	85 c0                	test   eax,eax
c000d945:	0f 8f 46 ff ff ff    	jg     c000d891 <sinc_mono_vari_process+0x30e>
c000d94b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d94f:	0f 8e f5 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d955:	83 ec 10             	sub    esp,0x10
c000d958:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d95b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d95e:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d962:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d965:	ff 30                	push   DWORD PTR [eax]
c000d967:	e8 d8 a1 01 00       	call   c0027b44 <__subdf3>
c000d96c:	83 c4 18             	add    esp,0x18
c000d96f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d977:	52                   	push   edx
c000d978:	50                   	push   eax
c000d979:	e8 52 ac 01 00       	call   c00285d0 <fabs>
c000d97e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d982:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d986:	83 c4 10             	add    esp,0x10
c000d989:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d98e:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d99b:	e8 81 aa 01 00       	call   c0028421 <__gtdf2>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	85 c0                	test   eax,eax
c000d9a5:	0f 8e 9f 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d9ab:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d9af:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d9b2:	8b 00                	mov    eax,DWORD PTR [eax]
c000d9b4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d9b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d9bc:	52                   	push   edx
c000d9bd:	50                   	push   eax
c000d9be:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d9c1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d9c4:	e8 7b a1 01 00       	call   c0027b44 <__subdf3>
c000d9c9:	5f                   	pop    edi
c000d9ca:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9ce:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9d2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d9d5:	e8 f9 a7 01 00       	call   c00281d3 <__floatsidf>
c000d9da:	83 c4 10             	add    esp,0x10
c000d9dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9e5:	52                   	push   edx
c000d9e6:	50                   	push   eax
c000d9e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9ef:	e8 7c a1 01 00       	call   c0027b70 <__muldf3>
c000d9f4:	5d                   	pop    ebp
c000d9f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9fd:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000da00:	e8 ce a7 01 00       	call   c00281d3 <__floatsidf>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da0c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da10:	52                   	push   edx
c000da11:	50                   	push   eax
c000da12:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da16:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da1a:	e8 35 a4 01 00       	call   c0027e54 <__divdf3>
c000da1f:	83 c4 10             	add    esp,0x10
c000da22:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da26:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da32:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da36:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da3a:	e8 b4 9a 01 00       	call   c00274f3 <__adddf3>
c000da3f:	83 c4 10             	add    esp,0x10
c000da42:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da46:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da4a:	83 ec 0c             	sub    esp,0xc
c000da4d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da50:	e8 7e a7 01 00       	call   c00281d3 <__floatsidf>
c000da55:	83 c4 10             	add    esp,0x10
c000da58:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da5c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da70:	e8 ca a9 01 00       	call   c002843f <__ltdf2>
c000da75:	83 c4 10             	add    esp,0x10
c000da78:	85 c0                	test   eax,eax
c000da7a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da7e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da82:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da86:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da8a:	78 10                	js     c000da9c <sinc_mono_vari_process+0x519>
c000da8c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da90:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da94:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da98:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da9c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daa8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daac:	e8 bf a0 01 00       	call   c0027b70 <__muldf3>
c000dab1:	59                   	pop    ecx
c000dab2:	5f                   	pop    edi
c000dab3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dab7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dabb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dabf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dac3:	e8 07 de ff ff       	call   c000b8cf <double_to_fp>
c000dac8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dacc:	89 c7                	mov    edi,eax
c000dace:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dad2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dad6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dada:	e8 91 a0 01 00       	call   c0027b70 <__muldf3>
c000dadf:	83 c4 18             	add    esp,0x18
c000dae2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dae6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000daea:	52                   	push   edx
c000daeb:	50                   	push   eax
c000daec:	e8 de dd ff ff       	call   c000b8cf <double_to_fp>
c000daf1:	83 ec 0c             	sub    esp,0xc
c000daf4:	89 c5                	mov    ebp,eax
c000daf6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000daf9:	e8 d5 a6 01 00       	call   c00281d3 <__floatsidf>
c000dafe:	83 c4 10             	add    esp,0x10
c000db01:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db05:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db09:	52                   	push   edx
c000db0a:	50                   	push   eax
c000db0b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db0f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db13:	e8 3c a3 01 00       	call   c0027e54 <__divdf3>
c000db18:	83 c4 10             	add    esp,0x10
c000db1b:	89 e9                	mov    ecx,ebp
c000db1d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db21:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db25:	89 d8                	mov    eax,ebx
c000db27:	89 fa                	mov    edx,edi
c000db29:	e8 ee bd ff ff       	call   c000991c <calc_output_single>
c000db2e:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000db31:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000db34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db38:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db3c:	52                   	push   edx
c000db3d:	50                   	push   eax
c000db3e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db42:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db46:	e8 25 a0 01 00       	call   c0027b70 <__muldf3>
c000db4b:	59                   	pop    ecx
c000db4c:	59                   	pop    ecx
c000db4d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db51:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db55:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	e8 e1 a8 01 00       	call   c0028443 <__truncdfsf2>
c000db62:	83 c4 10             	add    esp,0x10
c000db65:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db68:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db6f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db73:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db77:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db7b:	e8 d4 a2 01 00       	call   c0027e54 <__divdf3>
c000db80:	83 c4 10             	add    esp,0x10
c000db83:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db87:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db97:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9b:	e8 53 99 01 00       	call   c00274f3 <__adddf3>
c000dba0:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000dba4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dba8:	83 c4 18             	add    esp,0x18
c000dbab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbb3:	e8 38 aa 01 00       	call   c00285f0 <lrint>
c000dbb8:	83 ec 0c             	sub    esp,0xc
c000dbbb:	50                   	push   eax
c000dbbc:	e8 12 a6 01 00       	call   c00281d3 <__floatsidf>
c000dbc1:	83 c4 10             	add    esp,0x10
c000dbc4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dbc8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dbcc:	52                   	push   edx
c000dbcd:	50                   	push   eax
c000dbce:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd6:	e8 69 9f 01 00       	call   c0027b44 <__subdf3>
c000dbdb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dbdf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dbe3:	83 c4 20             	add    esp,0x20
c000dbe6:	6a 00                	push   0x0
c000dbe8:	6a 00                	push   0x0
c000dbea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbf2:	e8 48 a8 01 00       	call   c002843f <__ltdf2>
c000dbf7:	83 c4 10             	add    esp,0x10
c000dbfa:	85 c0                	test   eax,eax
c000dbfc:	79 20                	jns    c000dc1e <sinc_mono_vari_process+0x69b>
c000dbfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0e:	e8 e0 98 01 00       	call   c00274f3 <__adddf3>
c000dc13:	83 c4 10             	add    esp,0x10
c000dc16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc1a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dc1e:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dc21:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dc24:	83 ec 10             	sub    esp,0x10
c000dc27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc33:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc37:	e8 08 9f 01 00       	call   c0027b44 <__subdf3>
c000dc3c:	83 c4 18             	add    esp,0x18
c000dc3f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc43:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc47:	52                   	push   edx
c000dc48:	50                   	push   eax
c000dc49:	e8 a2 a9 01 00       	call   c00285f0 <lrint>
c000dc4e:	83 c4 10             	add    esp,0x10
c000dc51:	0f af f8             	imul   edi,eax
c000dc54:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc57:	99                   	cdq    
c000dc58:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc5b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc5e:	e9 d2 fb ff ff       	jmp    c000d835 <sinc_mono_vari_process+0x2b2>
c000dc63:	83 c4 4c             	add    esp,0x4c
c000dc66:	89 d0                	mov    eax,edx
c000dc68:	5b                   	pop    ebx
c000dc69:	5e                   	pop    esi
c000dc6a:	5f                   	pop    edi
c000dc6b:	5d                   	pop    ebp
c000dc6c:	c3                   	ret    

c000dc6d <sinc_get_name>:
c000dc6d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc71:	31 c0                	xor    eax,eax
c000dc73:	83 fa 02             	cmp    edx,0x2
c000dc76:	77 07                	ja     c000dc7f <sinc_get_name+0x12>
c000dc78:	8b 04 95 e4 9d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd621c]
c000dc7f:	c3                   	ret    

c000dc80 <sinc_get_description>:
c000dc80:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc84:	31 c0                	xor    eax,eax
c000dc86:	83 fa 02             	cmp    edx,0x2
c000dc89:	77 07                	ja     c000dc92 <sinc_get_description+0x12>
c000dc8b:	8b 04 95 d8 9d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6228]
c000dc92:	c3                   	ret    

c000dc93 <sinc_set_converter>:
c000dc93:	53                   	push   ebx
c000dc94:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc9a:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dca1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dca4:	85 c0                	test   eax,eax
c000dca6:	74 13                	je     c000dcbb <sinc_set_converter+0x28>
c000dca8:	83 ec 0c             	sub    esp,0xc
c000dcab:	50                   	push   eax
c000dcac:	e8 9f 1b 00 00       	call   c000f850 <free>
c000dcb1:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dcb8:	83 c4 10             	add    esp,0x10
c000dcbb:	50                   	push   eax
c000dcbc:	68 44 08 00 00       	push   0x844
c000dcc1:	6a 00                	push   0x0
c000dcc3:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dcc7:	50                   	push   eax
c000dcc8:	e8 ab 2a ff ff       	call   c0000778 <memset>
c000dccd:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dcd0:	83 c4 10             	add    esp,0x10
c000dcd3:	b8 0b 00 00 00       	mov    eax,0xb
c000dcd8:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dcde:	7f 6e                	jg     c000dd4e <sinc_set_converter+0xbb>
c000dce0:	83 fa 01             	cmp    edx,0x1
c000dce3:	75 10                	jne    c000dcf5 <sinc_set_converter+0x62>
c000dce5:	c7 43 24 83 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d583
c000dcec:	c7 43 20 83 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d583
c000dcf3:	eb 4d                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dcf5:	83 fa 02             	cmp    edx,0x2
c000dcf8:	75 10                	jne    c000dd0a <sinc_set_converter+0x77>
c000dcfa:	c7 43 24 be ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cebe
c000dd01:	c7 43 20 be ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cebe
c000dd08:	eb 38                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd0a:	83 fa 04             	cmp    edx,0x4
c000dd0d:	75 10                	jne    c000dd1f <sinc_set_converter+0x8c>
c000dd0f:	c7 43 24 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7f9
c000dd16:	c7 43 20 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7f9
c000dd1d:	eb 23                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd1f:	83 fa 06             	cmp    edx,0x6
c000dd22:	75 10                	jne    c000dd34 <sinc_set_converter+0xa1>
c000dd24:	c7 43 24 34 c1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c134
c000dd2b:	c7 43 20 34 c1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c134
c000dd32:	eb 0e                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd34:	c7 43 24 70 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba70
c000dd3b:	c7 43 20 70 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba70
c000dd42:	c7 43 28 23 ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad23
c000dd49:	b8 0a 00 00 00       	mov    eax,0xa
c000dd4e:	81 c4 58 08 00 00    	add    esp,0x858
c000dd54:	5b                   	pop    ebx
c000dd55:	c3                   	ret    

c000dd56 <zoh_vari_process>:
c000dd56:	55                   	push   ebp
c000dd57:	31 d2                	xor    edx,edx
c000dd59:	57                   	push   edi
c000dd5a:	56                   	push   esi
c000dd5b:	53                   	push   ebx
c000dd5c:	83 ec 3c             	sub    esp,0x3c
c000dd5f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd63:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd67:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd6b:	0f 8e 80 06 00 00    	jle    c000e3f1 <zoh_vari_process+0x69b>
c000dd71:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd74:	ba 05 00 00 00       	mov    edx,0x5
c000dd79:	85 db                	test   ebx,ebx
c000dd7b:	0f 84 70 06 00 00    	je     c000e3f1 <zoh_vari_process+0x69b>
c000dd81:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd84:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd88:	74 19                	je     c000dda3 <zoh_vari_process+0x4d>
c000dd8a:	31 d2                	xor    edx,edx
c000dd8c:	39 c2                	cmp    edx,eax
c000dd8e:	7d 0c                	jge    c000dd9c <zoh_vari_process+0x46>
c000dd90:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd92:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd95:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd99:	42                   	inc    edx
c000dd9a:	eb f0                	jmp    c000dd8c <zoh_vari_process+0x36>
c000dd9c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dda3:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dda6:	0f af d0             	imul   edx,eax
c000dda9:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000ddac:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000ddb0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000ddb7:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ddba:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000ddc1:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000ddc4:	8b 07                	mov    eax,DWORD PTR [edi]
c000ddc6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ddca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddce:	68 00 00 70 3f       	push   0x3f700000
c000ddd3:	6a 00                	push   0x0
c000ddd5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddd9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dddd:	e8 5d a6 01 00       	call   c002843f <__ltdf2>
c000dde2:	83 c4 10             	add    esp,0x10
c000dde5:	ba 16 00 00 00       	mov    edx,0x16
c000ddea:	85 c0                	test   eax,eax
c000ddec:	0f 88 ff 05 00 00    	js     c000e3f1 <zoh_vari_process+0x69b>
c000ddf2:	68 00 00 70 40       	push   0x40700000
c000ddf7:	6a 00                	push   0x0
c000ddf9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddfd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de01:	e8 1b a6 01 00       	call   c0028421 <__gtdf2>
c000de06:	83 c4 10             	add    esp,0x10
c000de09:	ba 16 00 00 00       	mov    edx,0x16
c000de0e:	85 c0                	test   eax,eax
c000de10:	0f 8f db 05 00 00    	jg     c000e3f1 <zoh_vari_process+0x69b>
c000de16:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000de19:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000de1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000de24:	68 00 00 f0 3f       	push   0x3ff00000
c000de29:	6a 00                	push   0x0
c000de2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de33:	e8 07 a6 01 00       	call   c002843f <__ltdf2>
c000de38:	83 c4 10             	add    esp,0x10
c000de3b:	85 c0                	test   eax,eax
c000de3d:	0f 89 da 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000de43:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de46:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de49:	0f 8d ce 01 00 00    	jge    c000e01d <zoh_vari_process+0x2c7>
c000de4f:	83 ec 0c             	sub    esp,0xc
c000de52:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de55:	e8 79 a3 01 00       	call   c00281d3 <__floatsidf>
c000de5a:	83 c4 10             	add    esp,0x10
c000de5d:	89 04 24             	mov    DWORD PTR [esp],eax
c000de60:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de6c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de70:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de74:	e8 f7 9c 01 00       	call   c0027b70 <__muldf3>
c000de79:	59                   	pop    ecx
c000de7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de7e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de82:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de85:	e8 49 a3 01 00       	call   c00281d3 <__floatsidf>
c000de8a:	83 c4 10             	add    esp,0x10
c000de8d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de91:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de95:	52                   	push   edx
c000de96:	50                   	push   eax
c000de97:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9f:	e8 4f 96 01 00       	call   c00274f3 <__adddf3>
c000dea4:	59                   	pop    ecx
c000dea5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dea9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dead:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000deb0:	e8 1e a3 01 00       	call   c00281d3 <__floatsidf>
c000deb5:	83 c4 10             	add    esp,0x10
c000deb8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000debc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dec0:	52                   	push   edx
c000dec1:	50                   	push   eax
c000dec2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dec6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deca:	e8 6e a5 01 00       	call   c002843d <__gedf2>
c000decf:	83 c4 10             	add    esp,0x10
c000ded2:	85 c0                	test   eax,eax
c000ded4:	0f 89 43 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000deda:	85 ed                	test   ebp,ebp
c000dedc:	0f 8e ec 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000dee2:	83 ec 10             	sub    esp,0x10
c000dee5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dee8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deeb:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deee:	ff 37                	push   DWORD PTR [edi]
c000def0:	e8 4f 9c 01 00       	call   c0027b44 <__subdf3>
c000def5:	83 c4 18             	add    esp,0x18
c000def8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000defc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df00:	52                   	push   edx
c000df01:	50                   	push   eax
c000df02:	e8 c9 a6 01 00       	call   c00285d0 <fabs>
c000df07:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df0b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000df0f:	83 c4 10             	add    esp,0x10
c000df12:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df17:	68 23 42 92 0c       	push   0xc924223
c000df1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df24:	e8 f8 a4 01 00       	call   c0028421 <__gtdf2>
c000df29:	83 c4 10             	add    esp,0x10
c000df2c:	85 c0                	test   eax,eax
c000df2e:	0f 8e 9a 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000df34:	8b 07                	mov    eax,DWORD PTR [edi]
c000df36:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df39:	89 04 24             	mov    DWORD PTR [esp],eax
c000df3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df40:	52                   	push   edx
c000df41:	50                   	push   eax
c000df42:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df45:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df48:	e8 f7 9b 01 00       	call   c0027b44 <__subdf3>
c000df4d:	59                   	pop    ecx
c000df4e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df52:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df56:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df59:	e8 75 a2 01 00       	call   c00281d3 <__floatsidf>
c000df5e:	83 c4 10             	add    esp,0x10
c000df61:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df65:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df69:	52                   	push   edx
c000df6a:	50                   	push   eax
c000df6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df73:	e8 f8 9b 01 00       	call   c0027b70 <__muldf3>
c000df78:	5d                   	pop    ebp
c000df79:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df7d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df81:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df84:	e8 4a a2 01 00       	call   c00281d3 <__floatsidf>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df90:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df94:	52                   	push   edx
c000df95:	50                   	push   eax
c000df96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9e:	e8 b1 9e 01 00       	call   c0027e54 <__divdf3>
c000dfa3:	83 c4 10             	add    esp,0x10
c000dfa6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfaa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfbe:	e8 30 95 01 00       	call   c00274f3 <__adddf3>
c000dfc3:	83 c4 10             	add    esp,0x10
c000dfc6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfce:	31 c0                	xor    eax,eax
c000dfd0:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dfd3:	7e 13                	jle    c000dfe8 <zoh_vari_process+0x292>
c000dfd5:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dfd9:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfdc:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfdf:	40                   	inc    eax
c000dfe0:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfe3:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfe6:	eb e8                	jmp    c000dfd0 <zoh_vari_process+0x27a>
c000dfe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dff0:	68 00 00 f0 3f       	push   0x3ff00000
c000dff5:	6a 00                	push   0x0
c000dff7:	e8 58 9e 01 00       	call   c0027e54 <__divdf3>
c000dffc:	83 c4 10             	add    esp,0x10
c000dfff:	89 04 24             	mov    DWORD PTR [esp],eax
c000e002:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e00c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e010:	e8 de 94 01 00       	call   c00274f3 <__adddf3>
c000e015:	83 c4 10             	add    esp,0x10
c000e018:	e9 ff fd ff ff       	jmp    c000de1c <zoh_vari_process+0xc6>
c000e01d:	55                   	push   ebp
c000e01e:	55                   	push   ebp
c000e01f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e023:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e027:	e8 c4 a5 01 00       	call   c00285f0 <lrint>
c000e02c:	83 ec 0c             	sub    esp,0xc
c000e02f:	50                   	push   eax
c000e030:	e8 9e a1 01 00       	call   c00281d3 <__floatsidf>
c000e035:	83 c4 10             	add    esp,0x10
c000e038:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e03c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e040:	52                   	push   edx
c000e041:	50                   	push   eax
c000e042:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e046:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e04a:	e8 f5 9a 01 00       	call   c0027b44 <__subdf3>
c000e04f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e053:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e057:	83 c4 20             	add    esp,0x20
c000e05a:	6a 00                	push   0x0
c000e05c:	6a 00                	push   0x0
c000e05e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e062:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e066:	e8 d4 a3 01 00       	call   c002843f <__ltdf2>
c000e06b:	83 c4 10             	add    esp,0x10
c000e06e:	85 c0                	test   eax,eax
c000e070:	79 1e                	jns    c000e090 <zoh_vari_process+0x33a>
c000e072:	68 00 00 f0 3f       	push   0x3ff00000
c000e077:	6a 00                	push   0x0
c000e079:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e07d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e081:	e8 6d 94 01 00       	call   c00274f3 <__adddf3>
c000e086:	83 c4 10             	add    esp,0x10
c000e089:	89 04 24             	mov    DWORD PTR [esp],eax
c000e08c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e090:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e093:	83 ec 10             	sub    esp,0x10
c000e096:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a6:	e8 99 9a 01 00       	call   c0027b44 <__subdf3>
c000e0ab:	83 c4 18             	add    esp,0x18
c000e0ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0b6:	52                   	push   edx
c000e0b7:	50                   	push   eax
c000e0b8:	e8 33 a5 01 00       	call   c00285f0 <lrint>
c000e0bd:	83 c4 10             	add    esp,0x10
c000e0c0:	0f af e8             	imul   ebp,eax
c000e0c3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e0c6:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e0c9:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e0cd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e0d0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e0d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0d7:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0da:	0f 8d 7a 02 00 00    	jge    c000e35a <zoh_vari_process+0x604>
c000e0e0:	83 ec 0c             	sub    esp,0xc
c000e0e3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0e6:	e8 e8 a0 01 00       	call   c00281d3 <__floatsidf>
c000e0eb:	83 c4 10             	add    esp,0x10
c000e0ee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0f2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0f6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e102:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e106:	e8 65 9a 01 00       	call   c0027b70 <__muldf3>
c000e10b:	59                   	pop    ecx
c000e10c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e110:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e118:	e8 b6 a0 01 00       	call   c00281d3 <__floatsidf>
c000e11d:	83 c4 10             	add    esp,0x10
c000e120:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e124:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e128:	52                   	push   edx
c000e129:	50                   	push   eax
c000e12a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e12e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e132:	e8 bc 93 01 00       	call   c00274f3 <__adddf3>
c000e137:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e13a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e13e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e142:	e8 8c a0 01 00       	call   c00281d3 <__floatsidf>
c000e147:	83 c4 10             	add    esp,0x10
c000e14a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e14e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e152:	52                   	push   edx
c000e153:	50                   	push   eax
c000e154:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e158:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e15c:	e8 e0 a2 01 00       	call   c0028441 <__ledf2>
c000e161:	83 c4 10             	add    esp,0x10
c000e164:	85 c0                	test   eax,eax
c000e166:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e16a:	0f 8f ea 01 00 00    	jg     c000e35a <zoh_vari_process+0x604>
c000e170:	85 c9                	test   ecx,ecx
c000e172:	0f 8e ed 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e178:	83 ec 10             	sub    esp,0x10
c000e17b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e17e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e181:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e184:	ff 37                	push   DWORD PTR [edi]
c000e186:	e8 b9 99 01 00       	call   c0027b44 <__subdf3>
c000e18b:	83 c4 18             	add    esp,0x18
c000e18e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e192:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e196:	52                   	push   edx
c000e197:	50                   	push   eax
c000e198:	e8 33 a4 01 00       	call   c00285d0 <fabs>
c000e19d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e1a1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e1a5:	83 c4 10             	add    esp,0x10
c000e1a8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e1ad:	68 23 42 92 0c       	push   0xc924223
c000e1b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1ba:	e8 62 a2 01 00       	call   c0028421 <__gtdf2>
c000e1bf:	83 c4 10             	add    esp,0x10
c000e1c2:	85 c0                	test   eax,eax
c000e1c4:	0f 8e 9b 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e1ca:	8b 07                	mov    eax,DWORD PTR [edi]
c000e1cc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e1cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1d7:	52                   	push   edx
c000e1d8:	50                   	push   eax
c000e1d9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1dc:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1df:	e8 60 99 01 00       	call   c0027b44 <__subdf3>
c000e1e4:	5d                   	pop    ebp
c000e1e5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1e9:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1ed:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1f0:	e8 de 9f 01 00       	call   c00281d3 <__floatsidf>
c000e1f5:	83 c4 10             	add    esp,0x10
c000e1f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1fc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e200:	52                   	push   edx
c000e201:	50                   	push   eax
c000e202:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e206:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e20a:	e8 61 99 01 00       	call   c0027b70 <__muldf3>
c000e20f:	59                   	pop    ecx
c000e210:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e214:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e218:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e21b:	e8 b3 9f 01 00       	call   c00281d3 <__floatsidf>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e227:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e22b:	52                   	push   edx
c000e22c:	50                   	push   eax
c000e22d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e231:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e235:	e8 1a 9c 01 00       	call   c0027e54 <__divdf3>
c000e23a:	83 c4 10             	add    esp,0x10
c000e23d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e241:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e245:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e249:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e24d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e255:	e8 99 92 01 00       	call   c00274f3 <__adddf3>
c000e25a:	83 c4 10             	add    esp,0x10
c000e25d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e261:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e265:	31 d2                	xor    edx,edx
c000e267:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e26a:	39 d0                	cmp    eax,edx
c000e26c:	7e 1d                	jle    c000e28b <zoh_vari_process+0x535>
c000e26e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e271:	29 c1                	sub    ecx,eax
c000e273:	89 c8                	mov    eax,ecx
c000e275:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e277:	01 d0                	add    eax,edx
c000e279:	42                   	inc    edx
c000e27a:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e27d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e280:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e283:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e286:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e289:	eb dc                	jmp    c000e267 <zoh_vari_process+0x511>
c000e28b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e28f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e293:	68 00 00 f0 3f       	push   0x3ff00000
c000e298:	6a 00                	push   0x0
c000e29a:	e8 b5 9b 01 00       	call   c0027e54 <__divdf3>
c000e29f:	83 c4 10             	add    esp,0x10
c000e2a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2aa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2ae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2ba:	e8 34 92 01 00       	call   c00274f3 <__adddf3>
c000e2bf:	5d                   	pop    ebp
c000e2c0:	59                   	pop    ecx
c000e2c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2c5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2d1:	e8 1a a3 01 00       	call   c00285f0 <lrint>
c000e2d6:	83 ec 0c             	sub    esp,0xc
c000e2d9:	50                   	push   eax
c000e2da:	e8 f4 9e 01 00       	call   c00281d3 <__floatsidf>
c000e2df:	83 c4 10             	add    esp,0x10
c000e2e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2e6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2ea:	52                   	push   edx
c000e2eb:	50                   	push   eax
c000e2ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f4:	e8 4b 98 01 00       	call   c0027b44 <__subdf3>
c000e2f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e301:	83 c4 20             	add    esp,0x20
c000e304:	6a 00                	push   0x0
c000e306:	6a 00                	push   0x0
c000e308:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e30c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e310:	e8 2a a1 01 00       	call   c002843f <__ltdf2>
c000e315:	83 c4 10             	add    esp,0x10
c000e318:	85 c0                	test   eax,eax
c000e31a:	79 1e                	jns    c000e33a <zoh_vari_process+0x5e4>
c000e31c:	68 00 00 f0 3f       	push   0x3ff00000
c000e321:	6a 00                	push   0x0
c000e323:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e327:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e32b:	e8 c3 91 01 00       	call   c00274f3 <__adddf3>
c000e330:	83 c4 10             	add    esp,0x10
c000e333:	89 04 24             	mov    DWORD PTR [esp],eax
c000e336:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e33a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e33d:	83 ec 10             	sub    esp,0x10
c000e340:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e344:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e348:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e34c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e350:	e8 ef 97 01 00       	call   c0027b44 <__subdf3>
c000e355:	e9 51 fd ff ff       	jmp    c000e0ab <zoh_vari_process+0x355>
c000e35a:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e35e:	7d 3a                	jge    c000e39a <zoh_vari_process+0x644>
c000e360:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e364:	83 ec 0c             	sub    esp,0xc
c000e367:	29 e8                	sub    eax,ebp
c000e369:	99                   	cdq    
c000e36a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e36d:	50                   	push   eax
c000e36e:	e8 60 9e 01 00       	call   c00281d3 <__floatsidf>
c000e373:	83 c4 10             	add    esp,0x10
c000e376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e37e:	52                   	push   edx
c000e37f:	50                   	push   eax
c000e380:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e384:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e388:	e8 66 91 01 00       	call   c00274f3 <__adddf3>
c000e38d:	83 c4 10             	add    esp,0x10
c000e390:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e393:	89 04 24             	mov    DWORD PTR [esp],eax
c000e396:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e39a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e39d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e3a1:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e3a4:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e3a7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3aa:	85 c0                	test   eax,eax
c000e3ac:	7f 25                	jg     c000e3d3 <zoh_vari_process+0x67d>
c000e3ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e3b2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e3b6:	89 07                	mov    DWORD PTR [edi],eax
c000e3b8:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e3bb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3be:	99                   	cdq    
c000e3bf:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3c2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e3c5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e3c8:	99                   	cdq    
c000e3c9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3cc:	31 d2                	xor    edx,edx
c000e3ce:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e3d1:	eb 1e                	jmp    c000e3f1 <zoh_vari_process+0x69b>
c000e3d3:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e3d6:	31 d2                	xor    edx,edx
c000e3d8:	29 c8                	sub    eax,ecx
c000e3da:	c1 e0 02             	shl    eax,0x2
c000e3dd:	39 d1                	cmp    ecx,edx
c000e3df:	7e cd                	jle    c000e3ae <zoh_vari_process+0x658>
c000e3e1:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3e3:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3e7:	83 c0 04             	add    eax,0x4
c000e3ea:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3ee:	42                   	inc    edx
c000e3ef:	eb ec                	jmp    c000e3dd <zoh_vari_process+0x687>
c000e3f1:	83 c4 3c             	add    esp,0x3c
c000e3f4:	89 d0                	mov    eax,edx
c000e3f6:	5b                   	pop    ebx
c000e3f7:	5e                   	pop    esi
c000e3f8:	5f                   	pop    edi
c000e3f9:	5d                   	pop    ebp
c000e3fa:	c3                   	ret    

c000e3fb <zoh_reset>:
c000e3fb:	83 ec 0c             	sub    esp,0xc
c000e3fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e402:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e405:	85 c0                	test   eax,eax
c000e407:	74 20                	je     c000e429 <zoh_reset+0x2e>
c000e409:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e40c:	83 c0 1c             	add    eax,0x1c
c000e40f:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e412:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e419:	c1 e2 02             	shl    edx,0x2
c000e41c:	51                   	push   ecx
c000e41d:	52                   	push   edx
c000e41e:	6a 00                	push   0x0
c000e420:	50                   	push   eax
c000e421:	e8 52 23 ff ff       	call   c0000778 <memset>
c000e426:	83 c4 10             	add    esp,0x10
c000e429:	83 c4 0c             	add    esp,0xc
c000e42c:	c3                   	ret    

c000e42d <zoh_get_name>:
c000e42d:	31 c0                	xor    eax,eax
c000e42f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e434:	75 05                	jne    c000e43b <zoh_get_name+0xe>
c000e436:	b8 fe 9e 02 c0       	mov    eax,0xc0029efe
c000e43b:	c3                   	ret    

c000e43c <zoh_get_description>:
c000e43c:	31 c0                	xor    eax,eax
c000e43e:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e443:	75 05                	jne    c000e44a <zoh_get_description+0xe>
c000e445:	b8 0f 9f 02 c0       	mov    eax,0xc0029f0f
c000e44a:	c3                   	ret    

c000e44b <zoh_set_converter>:
c000e44b:	53                   	push   ebx
c000e44c:	b8 0a 00 00 00       	mov    eax,0xa
c000e451:	83 ec 08             	sub    esp,0x8
c000e454:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e458:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e45d:	75 6e                	jne    c000e4cd <zoh_set_converter+0x82>
c000e45f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e462:	85 c0                	test   eax,eax
c000e464:	74 13                	je     c000e479 <zoh_set_converter+0x2e>
c000e466:	83 ec 0c             	sub    esp,0xc
c000e469:	50                   	push   eax
c000e46a:	e8 e1 13 00 00       	call   c000f850 <free>
c000e46f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e476:	83 c4 10             	add    esp,0x10
c000e479:	50                   	push   eax
c000e47a:	50                   	push   eax
c000e47b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e47e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e485:	50                   	push   eax
c000e486:	6a 01                	push   0x1
c000e488:	e8 e3 13 00 00       	call   c000f870 <calloc>
c000e48d:	83 c4 10             	add    esp,0x10
c000e490:	89 c2                	mov    edx,eax
c000e492:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e495:	85 d2                	test   edx,edx
c000e497:	b8 01 00 00 00       	mov    eax,0x1
c000e49c:	74 2f                	je     c000e4cd <zoh_set_converter+0x82>
c000e49e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e4a1:	83 ec 0c             	sub    esp,0xc
c000e4a4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e4a7:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e4ad:	c7 43 24 56 dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd56
c000e4b4:	c7 43 20 56 dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd56
c000e4bb:	c7 43 28 fb e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3fb
c000e4c2:	53                   	push   ebx
c000e4c3:	e8 33 ff ff ff       	call   c000e3fb <zoh_reset>
c000e4c8:	83 c4 10             	add    esp,0x10
c000e4cb:	31 c0                	xor    eax,eax
c000e4cd:	83 c4 08             	add    esp,0x8
c000e4d0:	5b                   	pop    ebx
c000e4d1:	c3                   	ret    

c000e4d2 <CPU::current()>:
c000e4d2:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c000e4d7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4dd:	90                   	nop
c000e4de:	c3                   	ret    

c000e4df <operator new(unsigned long)>:
c000e4df:	83 ec 0c             	sub    esp,0xc
c000e4e2:	83 ec 0c             	sub    esp,0xc
c000e4e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4e9:	e8 52 13 00 00       	call   c000f840 <malloc>
c000e4ee:	83 c4 10             	add    esp,0x10
c000e4f1:	83 c4 0c             	add    esp,0xc
c000e4f4:	c3                   	ret    

c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>:
c000e4f5:	83 ec 0c             	sub    esp,0xc
c000e4f8:	83 ec 08             	sub    esp,0x8
c000e4fb:	68 46 9f 02 c0       	push   0xc0029f46
c000e500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e504:	e8 b7 23 ff ff       	call   c00008c0 <strcmp>
c000e509:	83 c4 10             	add    esp,0x10
c000e50c:	85 c0                	test   eax,eax
c000e50e:	0f 94 c0             	sete   al
c000e511:	84 c0                	test   al,al
c000e513:	74 0a                	je     c000e51f <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e515:	b8 88 e3 02 c0       	mov    eax,0xc002e388
c000e51a:	e9 e3 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e51f:	83 ec 08             	sub    esp,0x8
c000e522:	68 4f 9f 02 c0       	push   0xc0029f4f
c000e527:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e52b:	e8 90 23 ff ff       	call   c00008c0 <strcmp>
c000e530:	83 c4 10             	add    esp,0x10
c000e533:	85 c0                	test   eax,eax
c000e535:	0f 94 c0             	sete   al
c000e538:	84 c0                	test   al,al
c000e53a:	74 0a                	je     c000e546 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e53c:	b8 6c 69 02 c0       	mov    eax,0xc002696c
c000e541:	e9 bc 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e546:	83 ec 08             	sub    esp,0x8
c000e549:	68 59 9f 02 c0       	push   0xc0029f59
c000e54e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e552:	e8 69 23 ff ff       	call   c00008c0 <strcmp>
c000e557:	83 c4 10             	add    esp,0x10
c000e55a:	85 c0                	test   eax,eax
c000e55c:	0f 94 c0             	sete   al
c000e55f:	84 c0                	test   al,al
c000e561:	74 0a                	je     c000e56d <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e563:	b8 a0 66 02 c0       	mov    eax,0xc00266a0
c000e568:	e9 95 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e56d:	83 ec 08             	sub    esp,0x8
c000e570:	68 62 9f 02 c0       	push   0xc0029f62
c000e575:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e579:	e8 42 23 ff ff       	call   c00008c0 <strcmp>
c000e57e:	83 c4 10             	add    esp,0x10
c000e581:	85 c0                	test   eax,eax
c000e583:	0f 94 c0             	sete   al
c000e586:	84 c0                	test   al,al
c000e588:	74 07                	je     c000e591 <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e58a:	b8 6c 6a 02 c0       	mov    eax,0xc0026a6c
c000e58f:	eb 71                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e591:	83 ec 08             	sub    esp,0x8
c000e594:	68 6c 9f 02 c0       	push   0xc0029f6c
c000e599:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59d:	e8 1e 23 ff ff       	call   c00008c0 <strcmp>
c000e5a2:	83 c4 10             	add    esp,0x10
c000e5a5:	85 c0                	test   eax,eax
c000e5a7:	0f 94 c0             	sete   al
c000e5aa:	84 c0                	test   al,al
c000e5ac:	74 07                	je     c000e5b5 <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5ae:	b8 ec 67 02 c0       	mov    eax,0xc00267ec
c000e5b3:	eb 4d                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b5:	83 ec 08             	sub    esp,0x8
c000e5b8:	68 75 9f 02 c0       	push   0xc0029f75
c000e5bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c1:	e8 fa 22 ff ff       	call   c00008c0 <strcmp>
c000e5c6:	83 c4 10             	add    esp,0x10
c000e5c9:	85 c0                	test   eax,eax
c000e5cb:	0f 94 c0             	sete   al
c000e5ce:	84 c0                	test   al,al
c000e5d0:	74 07                	je     c000e5d9 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e5d2:	b8 8c e3 02 c0       	mov    eax,0xc002e38c
c000e5d7:	eb 29                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5d9:	83 ec 08             	sub    esp,0x8
c000e5dc:	68 82 9f 02 c0       	push   0xc0029f82
c000e5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e5:	e8 d6 22 ff ff       	call   c00008c0 <strcmp>
c000e5ea:	83 c4 10             	add    esp,0x10
c000e5ed:	85 c0                	test   eax,eax
c000e5ef:	0f 94 c0             	sete   al
c000e5f2:	84 c0                	test   al,al
c000e5f4:	74 07                	je     c000e5fd <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e5f6:	b8 8d e3 02 c0       	mov    eax,0xc002e38d
c000e5fb:	eb 05                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5fd:	b8 00 00 00 00       	mov    eax,0x0
c000e602:	83 c4 0c             	add    esp,0xc
c000e605:	c3                   	ret    

c000e606 <Computer::close(int, int, void*)>:
c000e606:	57                   	push   edi
c000e607:	56                   	push   esi
c000e608:	53                   	push   ebx
c000e609:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e60d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e611:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e615:	83 ec 0c             	sub    esp,0xc
c000e618:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e61e:	e8 0b 5e 00 00       	call   c001442e <Device::closeAll()>
c000e623:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e629:	83 c4 10             	add    esp,0x10
c000e62c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e62e:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e632:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e63a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e63e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e642:	5b                   	pop    ebx
c000e643:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e646:	5e                   	pop    esi
c000e647:	5f                   	pop    edi
c000e648:	ff e0                	jmp    eax

c000e64a <Krnl::firstTask()>:
c000e64a:	53                   	push   ebx
c000e64b:	83 ec 14             	sub    esp,0x14
c000e64e:	fb                   	sti    
c000e64f:	68 3f 1b 00 00       	push   0x1b3f
c000e654:	e8 e7 11 00 00       	call   c000f840 <malloc>
c000e659:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e660:	89 c3                	mov    ebx,eax
c000e662:	ff 35 f4 18 03 c0    	push   DWORD PTR ds:0xc00318f4
c000e668:	68 8f 9f 02 c0       	push   0xc0029f8f
c000e66d:	6a 01                	push   0x1
c000e66f:	50                   	push   eax
c000e670:	e8 23 f5 00 00       	call   c001db98 <Process::Process(bool, char const*, Process*, char**)>
c000e675:	83 c4 20             	add    esp,0x20
c000e678:	68 ff 00 00 00       	push   0xff
c000e67d:	6a 00                	push   0x0
c000e67f:	68 d5 f1 00 c0       	push   0xc000f1d5
c000e684:	53                   	push   ebx
c000e685:	e8 0e f8 00 00       	call   c001de98 <Process::createThread(void (*)(void*), void*, int)>
c000e68a:	6a 7a                	push   0x7a
c000e68c:	6a 00                	push   0x0
c000e68e:	68 f7 e6 01 c0       	push   0xc001e6f7
c000e693:	ff 35 f4 18 03 c0    	push   DWORD PTR ds:0xc00318f4
c000e699:	e8 fa f7 00 00       	call   c001de98 <Process::createThread(void (*)(void*), void*, int)>
c000e69e:	83 c4 20             	add    esp,0x20
c000e6a1:	a3 a8 18 03 c0       	mov    ds:0xc00318a8,eax
c000e6a6:	c6 05 8d e3 02 c0 01 	mov    BYTE PTR ds:0xc002e38d,0x1
c000e6ad:	e8 c5 03 01 00       	call   c001ea77 <Vm::initialise8086()>
c000e6b2:	e8 5f 4b 00 00       	call   c0013216 <Fs::initVFS()>
c000e6b7:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c000e6bc:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e6c2:	8b 10                	mov    edx,DWORD PTR [eax]
c000e6c4:	6a 00                	push   0x0
c000e6c6:	6a 00                	push   0x0
c000e6c8:	6a 00                	push   0x0
c000e6ca:	50                   	push   eax
c000e6cb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e6ce:	e8 39 de 00 00       	call   c001c50c <Sys::loadSyscalls()>
c000e6d3:	e8 5c bd 00 00       	call   c001a434 <Krnl::loadSystemEnv()>
c000e6d8:	83 c4 0c             	add    esp,0xc
c000e6db:	6a 3a                	push   0x3a
c000e6dd:	68 9c 9f 02 c0       	push   0xc0029f9c
c000e6e2:	68 a5 9f 02 c0       	push   0xc0029fa5
c000e6e7:	e8 6e ca 00 00       	call   c001b15a <Reg::readIntWithDefault(char*, char*, int)>
c000e6ec:	89 04 24             	mov    DWORD PTR [esp],eax
c000e6ef:	e8 0a 56 00 00       	call   c0013cfe <User::loadClockSettings(int)>
c000e6f4:	58                   	pop    eax
c000e6f5:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c000e6fa:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e700:	e8 fd 5c 00 00       	call   c0014402 <Device::loadDriversForAll()>
c000e705:	e8 70 b8 00 00       	call   c0019f7a <Krnl::startCPUs()>
c000e70a:	5a                   	pop    edx
c000e70b:	8b 1d 88 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e388
c000e711:	59                   	pop    ecx
c000e712:	6a 01                	push   0x1
c000e714:	68 ad 9f 02 c0       	push   0xc0029fad
c000e719:	e8 82 ef 00 00       	call   c001d6a0 <Thr::loadDLL(char const*, bool)>
c000e71e:	5a                   	pop    edx
c000e71f:	59                   	pop    ecx
c000e720:	53                   	push   ebx
c000e721:	50                   	push   eax
c000e722:	e8 c8 f1 00 00       	call   c001d8ef <Thr::executeDLL(unsigned long, void*)>
c000e727:	83 c4 10             	add    esp,0x10
c000e72a:	83 ec 0c             	sub    esp,0xc
c000e72d:	6a 02                	push   0x2
c000e72f:	e8 c8 fa 00 00       	call   c001e1fc <blockTask(TaskState)>
c000e734:	83 c4 10             	add    esp,0x10
c000e737:	eb f1                	jmp    c000e72a <Krnl::firstTask()+0xe0>
c000e739:	90                   	nop

c000e73a <Computer::Computer()>:
c000e73a:	83 ec 0c             	sub    esp,0xc
c000e73d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e741:	83 ec 08             	sub    esp,0x8
c000e744:	68 c9 9f 02 c0       	push   0xc0029fc9
c000e749:	50                   	push   eax
c000e74a:	e8 59 5d 00 00       	call   c00144a8 <Device::Device(char const*)>
c000e74f:	83 c4 10             	add    esp,0x10
c000e752:	ba 68 a1 02 c0       	mov    edx,0xc002a168
c000e757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e75b:	89 10                	mov    DWORD PTR [eax],edx
c000e75d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e761:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e76b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e76f:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e779:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e77d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e783:	83 ca 04             	or     edx,0x4
c000e786:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e78c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e790:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e796:	0f b6 d0             	movzx  edx,al
c000e799:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e79d:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e7a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ae:	0f b6 d0             	movzx  edx,al
c000e7b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7b5:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e7ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7be:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7c4:	8d 50 01             	lea    edx,[eax+0x1]
c000e7c7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e7cb:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e7d1:	0f b6 d0             	movzx  edx,al
c000e7d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7d8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e7dc:	83 e1 3f             	and    ecx,0x3f
c000e7df:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e7e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ed:	0f b6 d0             	movzx  edx,al
c000e7f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f4:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e7fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ff:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e805:	0f b6 d0             	movzx  edx,al
c000e808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80c:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e815:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e81b:	8d 50 01             	lea    edx,[eax+0x1]
c000e81e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e822:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e828:	0f b6 d0             	movzx  edx,al
c000e82b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e82f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e833:	83 e1 3f             	and    ecx,0x3f
c000e836:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e83e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e844:	0f b6 d0             	movzx  edx,al
c000e847:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e84b:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e856:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e85c:	0f b6 d0             	movzx  edx,al
c000e85f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e863:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e86c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e872:	8d 50 01             	lea    edx,[eax+0x1]
c000e875:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e879:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e87f:	0f b6 d0             	movzx  edx,al
c000e882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e886:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e88a:	83 e1 3f             	and    ecx,0x3f
c000e88d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e891:	90                   	nop
c000e892:	83 c4 0c             	add    esp,0xc
c000e895:	c3                   	ret    

c000e896 <Computer::setBootMessage(char const*)>:
c000e896:	c3                   	ret    
c000e897:	90                   	nop

c000e898 <Computer::detectFeatures()>:
c000e898:	55                   	push   ebp
c000e899:	57                   	push   edi
c000e89a:	56                   	push   esi
c000e89b:	53                   	push   ebx
c000e89c:	83 ec 1c             	sub    esp,0x1c
c000e89f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e8a3:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e8ad:	e8 32 1a ff ff       	call   c00002e4 <detectCPUID>
c000e8b2:	85 c0                	test   eax,eax
c000e8b4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8ba:	0f 95 c2             	setne  dl
c000e8bd:	83 e0 fd             	and    eax,0xfffffffd
c000e8c0:	d1 e2                	shl    edx,1
c000e8c2:	09 d0                	or     eax,edx
c000e8c4:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8ca:	a8 02                	test   al,0x2
c000e8cc:	75 46                	jne    c000e914 <Computer::detectFeatures()+0x7c>
c000e8ce:	f6 05 a1 e3 02 c0 04 	test   BYTE PTR ds:0xc002e3a1,0x4
c000e8d5:	74 07                	je     c000e8de <Computer::detectFeatures()+0x46>
c000e8d7:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e8de:	e8 53 7d 01 00       	call   c0026636 <x87Detect>
c000e8e3:	83 e0 01             	and    eax,0x1
c000e8e6:	c1 e0 04             	shl    eax,0x4
c000e8e9:	88 c2                	mov    dl,al
c000e8eb:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8f1:	83 e0 ef             	and    eax,0xffffffef
c000e8f4:	09 d0                	or     eax,edx
c000e8f6:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8fc:	a8 10                	test   al,0x10
c000e8fe:	0f 85 2a 01 00 00    	jne    c000ea2e <Computer::detectFeatures()+0x196>
c000e904:	84 c0                	test   al,al
c000e906:	0f 88 45 01 00 00    	js     c000ea51 <Computer::detectFeatures()+0x1b9>
c000e90c:	83 c4 1c             	add    esp,0x1c
c000e90f:	5b                   	pop    ebx
c000e910:	5e                   	pop    esi
c000e911:	5f                   	pop    edi
c000e912:	5d                   	pop    ebp
c000e913:	c3                   	ret    
c000e914:	83 ec 0c             	sub    esp,0xc
c000e917:	6a 20                	push   0x20
c000e919:	e8 6e a3 00 00       	call   c0018c8c <CPU::cpuidCheckEDX(unsigned int)>
c000e91e:	83 e0 01             	and    eax,0x1
c000e921:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e928:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e92e:	83 e0 f7             	and    eax,0xfffffff7
c000e931:	09 d0                	or     eax,edx
c000e933:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e939:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e940:	e8 47 a3 00 00       	call   c0018c8c <CPU::cpuidCheckEDX(unsigned int)>
c000e945:	83 e0 01             	and    eax,0x1
c000e948:	88 c2                	mov    dl,al
c000e94a:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e950:	83 e0 fe             	and    eax,0xfffffffe
c000e953:	09 d0                	or     eax,edx
c000e955:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e95b:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e962:	e8 25 a3 00 00       	call   c0018c8c <CPU::cpuidCheckEDX(unsigned int)>
c000e967:	c1 e0 07             	shl    eax,0x7
c000e96a:	88 c2                	mov    dl,al
c000e96c:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e972:	83 e0 7f             	and    eax,0x7f
c000e975:	09 d0                	or     eax,edx
c000e977:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e97d:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e984:	e8 03 a3 00 00       	call   c0018c8c <CPU::cpuidCheckEDX(unsigned int)>
c000e989:	83 c4 10             	add    esp,0x10
c000e98c:	83 e0 01             	and    eax,0x1
c000e98f:	c1 e0 05             	shl    eax,0x5
c000e992:	88 c2                	mov    dl,al
c000e994:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e99a:	83 e0 df             	and    eax,0xffffffdf
c000e99d:	09 d0                	or     eax,edx
c000e99f:	f7 05 a0 e3 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002e3a0,0x401
c000e9a9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9af:	0f 84 c2 00 00 00    	je     c000ea77 <Computer::detectFeatures()+0x1df>
c000e9b5:	83 e0 fe             	and    eax,0xfffffffe
c000e9b8:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9be:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9c4:	88 c2                	mov    dl,al
c000e9c6:	83 e2 09             	and    edx,0x9
c000e9c9:	fe ca                	dec    dl
c000e9cb:	75 09                	jne    c000e9d6 <Computer::detectFeatures()+0x13e>
c000e9cd:	83 e0 fe             	and    eax,0xfffffffe
c000e9d0:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9d6:	83 ec 0c             	sub    esp,0xc
c000e9d9:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e9dd:	50                   	push   eax
c000e9de:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e9e2:	55                   	push   ebp
c000e9e3:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e9e7:	57                   	push   edi
c000e9e8:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e9ec:	56                   	push   esi
c000e9ed:	68 00 00 00 80       	push   0x80000000
c000e9f2:	e8 11 a2 00 00       	call   c0018c08 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e9f7:	83 c4 20             	add    esp,0x20
c000e9fa:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea01:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ea05:	0f 86 c3 fe ff ff    	jbe    c000e8ce <Computer::detectFeatures()+0x36>
c000ea0b:	83 ec 0c             	sub    esp,0xc
c000ea0e:	50                   	push   eax
c000ea0f:	55                   	push   ebp
c000ea10:	57                   	push   edi
c000ea11:	56                   	push   esi
c000ea12:	68 01 00 00 80       	push   0x80000001
c000ea17:	e8 ec a1 00 00       	call   c0018c08 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea1c:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000ea26:	83 c4 20             	add    esp,0x20
c000ea29:	e9 a0 fe ff ff       	jmp    c000e8ce <Computer::detectFeatures()+0x36>
c000ea2e:	e8 bd 7b 01 00       	call   c00265f0 <absolutelyNoChanceInHell>
c000ea33:	88 c2                	mov    dl,al
c000ea35:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea3b:	c1 e2 07             	shl    edx,0x7
c000ea3e:	83 e0 7f             	and    eax,0x7f
c000ea41:	09 d0                	or     eax,edx
c000ea43:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea49:	84 c0                	test   al,al
c000ea4b:	0f 89 bb fe ff ff    	jns    c000e90c <Computer::detectFeatures()+0x74>
c000ea51:	e8 7a 7b 01 00       	call   c00265d0 <avxDetect>
c000ea56:	83 e0 01             	and    eax,0x1
c000ea59:	c1 e0 05             	shl    eax,0x5
c000ea5c:	88 c2                	mov    dl,al
c000ea5e:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea64:	83 e0 df             	and    eax,0xffffffdf
c000ea67:	09 d0                	or     eax,edx
c000ea69:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea6f:	83 c4 1c             	add    esp,0x1c
c000ea72:	5b                   	pop    ebx
c000ea73:	5e                   	pop    esi
c000ea74:	5f                   	pop    edi
c000ea75:	5d                   	pop    ebp
c000ea76:	c3                   	ret    
c000ea77:	83 ec 0c             	sub    esp,0xc
c000ea7a:	68 00 02 00 00       	push   0x200
c000ea7f:	e8 08 a2 00 00       	call   c0018c8c <CPU::cpuidCheckEDX(unsigned int)>
c000ea84:	83 c4 10             	add    esp,0x10
c000ea87:	83 e0 01             	and    eax,0x1
c000ea8a:	88 c2                	mov    dl,al
c000ea8c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea92:	83 e0 fe             	and    eax,0xfffffffe
c000ea95:	09 d0                	or     eax,edx
c000ea97:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea9d:	e9 1c ff ff ff       	jmp    c000e9be <Computer::detectFeatures()+0x126>

c000eaa2 <Computer::displayFeatures()>:
c000eaa2:	53                   	push   ebx
c000eaa3:	83 ec 14             	sub    esp,0x14
c000eaa6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eaaa:	68 d9 9f 02 c0       	push   0xc0029fd9
c000eaaf:	e8 de 43 00 00       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c000eab4:	83 c4 10             	add    esp,0x10
c000eab7:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eabe:	0f 85 73 02 00 00    	jne    c000ed37 <Computer::displayFeatures()+0x295>
c000eac4:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c000eac9:	83 ec 08             	sub    esp,0x8
c000eacc:	50                   	push   eax
c000eacd:	68 ec 9f 02 c0       	push   0xc0029fec
c000ead2:	e8 bb 43 00 00       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c000ead7:	83 c4 10             	add    esp,0x10
c000eada:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000eae1:	0f 85 8c 02 00 00    	jne    c000ed73 <Computer::displayFeatures()+0x2d1>
c000eae7:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c000eaec:	83 ec 08             	sub    esp,0x8
c000eaef:	50                   	push   eax
c000eaf0:	68 fd 9f 02 c0       	push   0xc0029ffd
c000eaf5:	e8 98 43 00 00       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c000eafa:	83 c4 10             	add    esp,0x10
c000eafd:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000eb04:	0f 85 5f 02 00 00    	jne    c000ed69 <Computer::displayFeatures()+0x2c7>
c000eb0a:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c000eb0f:	83 ec 08             	sub    esp,0x8
c000eb12:	50                   	push   eax
c000eb13:	68 0e a0 02 c0       	push   0xc002a00e
c000eb18:	e8 75 43 00 00       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c000eb1d:	83 c4 10             	add    esp,0x10
c000eb20:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000eb27:	0f 85 32 02 00 00    	jne    c000ed5f <Computer::displayFeatures()+0x2bd>
c000eb2d:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c000eb32:	83 ec 08             	sub    esp,0x8
c000eb35:	50                   	push   eax
c000eb36:	68 1f a0 02 c0       	push   0xc002a01f
c000eb3b:	e8 52 43 00 00       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c000eb40:	83 c4 10             	add    esp,0x10
c000eb43:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000eb4a:	0f 85 05 02 00 00    	jne    c000ed55 <Computer::displayFeatures()+0x2b3>
c000eb50:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c000eb55:	83 ec 08             	sub    esp,0x8
c000eb58:	50                   	push   eax
c000eb59:	68 30 a0 02 c0       	push   0xc002a030
c000eb5e:	e8 2f 43 00 00       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c000eb63:	83 c4 10             	add    esp,0x10
c000eb66:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000eb6d:	0f 85 d8 01 00 00    	jne    c000ed4b <Computer::displayFeatures()+0x2a9>
c000eb73:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c000eb78:	83 ec 08             	sub    esp,0x8
c000eb7b:	50                   	push   eax
c000eb7c:	68 41 a0 02 c0       	push   0xc002a041
c000eb81:	e8 0c 43 00 00       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c000eb86:	83 c4 10             	add    esp,0x10
c000eb89:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000eb90:	0f 85 ab 01 00 00    	jne    c000ed41 <Computer::displayFeatures()+0x29f>
c000eb96:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c000eb9b:	83 ec 08             	sub    esp,0x8
c000eb9e:	50                   	push   eax
c000eb9f:	68 52 a0 02 c0       	push   0xc002a052
c000eba4:	e8 e9 42 00 00       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c000eba9:	83 c4 10             	add    esp,0x10
c000ebac:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ebb3:	0f 88 1b 02 00 00    	js     c000edd4 <Computer::displayFeatures()+0x332>
c000ebb9:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c000ebbe:	83 ec 08             	sub    esp,0x8
c000ebc1:	50                   	push   eax
c000ebc2:	68 63 a0 02 c0       	push   0xc002a063
c000ebc7:	e8 c6 42 00 00       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c000ebcc:	83 c4 10             	add    esp,0x10
c000ebcf:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ebd6:	0f 85 a1 01 00 00    	jne    c000ed7d <Computer::displayFeatures()+0x2db>
c000ebdc:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c000ebe1:	83 ec 08             	sub    esp,0x8
c000ebe4:	50                   	push   eax
c000ebe5:	68 74 a0 02 c0       	push   0xc002a074
c000ebea:	e8 a3 42 00 00       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c000ebef:	83 c4 10             	add    esp,0x10
c000ebf2:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ebf9:	0f 85 cb 01 00 00    	jne    c000edca <Computer::displayFeatures()+0x328>
c000ebff:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c000ec04:	83 ec 08             	sub    esp,0x8
c000ec07:	50                   	push   eax
c000ec08:	68 85 a0 02 c0       	push   0xc002a085
c000ec0d:	e8 80 42 00 00       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c000ec12:	83 c4 10             	add    esp,0x10
c000ec15:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ec1c:	0f 85 9e 01 00 00    	jne    c000edc0 <Computer::displayFeatures()+0x31e>
c000ec22:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c000ec27:	83 ec 08             	sub    esp,0x8
c000ec2a:	50                   	push   eax
c000ec2b:	68 96 a0 02 c0       	push   0xc002a096
c000ec30:	e8 5d 42 00 00       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c000ec35:	83 c4 10             	add    esp,0x10
c000ec38:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ec3f:	0f 85 71 01 00 00    	jne    c000edb6 <Computer::displayFeatures()+0x314>
c000ec45:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c000ec4a:	83 ec 08             	sub    esp,0x8
c000ec4d:	50                   	push   eax
c000ec4e:	68 a7 a0 02 c0       	push   0xc002a0a7
c000ec53:	e8 3a 42 00 00       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c000ec58:	83 c4 10             	add    esp,0x10
c000ec5b:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ec62:	0f 85 44 01 00 00    	jne    c000edac <Computer::displayFeatures()+0x30a>
c000ec68:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c000ec6d:	83 ec 08             	sub    esp,0x8
c000ec70:	50                   	push   eax
c000ec71:	68 b8 a0 02 c0       	push   0xc002a0b8
c000ec76:	e8 17 42 00 00       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c000ec7b:	83 c4 10             	add    esp,0x10
c000ec7e:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000ec85:	0f 85 17 01 00 00    	jne    c000eda2 <Computer::displayFeatures()+0x300>
c000ec8b:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c000ec90:	83 ec 08             	sub    esp,0x8
c000ec93:	50                   	push   eax
c000ec94:	68 c9 a0 02 c0       	push   0xc002a0c9
c000ec99:	e8 f4 41 00 00       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c000ec9e:	83 c4 10             	add    esp,0x10
c000eca1:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000eca8:	0f 85 ea 00 00 00    	jne    c000ed98 <Computer::displayFeatures()+0x2f6>
c000ecae:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c000ecb3:	83 ec 08             	sub    esp,0x8
c000ecb6:	50                   	push   eax
c000ecb7:	68 da a0 02 c0       	push   0xc002a0da
c000ecbc:	e8 d1 41 00 00       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c000ecc1:	83 c4 10             	add    esp,0x10
c000ecc4:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000eccb:	0f 88 0d 01 00 00    	js     c000edde <Computer::displayFeatures()+0x33c>
c000ecd1:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c000ecd6:	83 ec 08             	sub    esp,0x8
c000ecd9:	50                   	push   eax
c000ecda:	68 eb a0 02 c0       	push   0xc002a0eb
c000ecdf:	e8 ae 41 00 00       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c000ece4:	83 c4 10             	add    esp,0x10
c000ece7:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ecee:	0f 85 9a 00 00 00    	jne    c000ed8e <Computer::displayFeatures()+0x2ec>
c000ecf4:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c000ecf9:	83 ec 08             	sub    esp,0x8
c000ecfc:	50                   	push   eax
c000ecfd:	68 fc a0 02 c0       	push   0xc002a0fc
c000ed02:	e8 8b 41 00 00       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c000ed07:	83 c4 10             	add    esp,0x10
c000ed0a:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000ed11:	75 74                	jne    c000ed87 <Computer::displayFeatures()+0x2e5>
c000ed13:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c000ed18:	83 ec 08             	sub    esp,0x8
c000ed1b:	50                   	push   eax
c000ed1c:	68 0d a1 02 c0       	push   0xc002a10d
c000ed21:	e8 6c 41 00 00       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c000ed26:	c7 44 24 20 70 ba 02 c0 	mov    DWORD PTR [esp+0x20],0xc002ba70
c000ed2e:	83 c4 18             	add    esp,0x18
c000ed31:	5b                   	pop    ebx
c000ed32:	e9 5b 41 00 00       	jmp    c0012e92 <Dbg::kprintf(char const*, ...)>
c000ed37:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c000ed3c:	e9 88 fd ff ff       	jmp    c000eac9 <Computer::displayFeatures()+0x27>
c000ed41:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c000ed46:	e9 50 fe ff ff       	jmp    c000eb9b <Computer::displayFeatures()+0xf9>
c000ed4b:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c000ed50:	e9 23 fe ff ff       	jmp    c000eb78 <Computer::displayFeatures()+0xd6>
c000ed55:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c000ed5a:	e9 f6 fd ff ff       	jmp    c000eb55 <Computer::displayFeatures()+0xb3>
c000ed5f:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c000ed64:	e9 c9 fd ff ff       	jmp    c000eb32 <Computer::displayFeatures()+0x90>
c000ed69:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c000ed6e:	e9 9c fd ff ff       	jmp    c000eb0f <Computer::displayFeatures()+0x6d>
c000ed73:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c000ed78:	e9 6f fd ff ff       	jmp    c000eaec <Computer::displayFeatures()+0x4a>
c000ed7d:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c000ed82:	e9 5a fe ff ff       	jmp    c000ebe1 <Computer::displayFeatures()+0x13f>
c000ed87:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c000ed8c:	eb 8a                	jmp    c000ed18 <Computer::displayFeatures()+0x276>
c000ed8e:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c000ed93:	e9 61 ff ff ff       	jmp    c000ecf9 <Computer::displayFeatures()+0x257>
c000ed98:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c000ed9d:	e9 11 ff ff ff       	jmp    c000ecb3 <Computer::displayFeatures()+0x211>
c000eda2:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c000eda7:	e9 e4 fe ff ff       	jmp    c000ec90 <Computer::displayFeatures()+0x1ee>
c000edac:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c000edb1:	e9 b7 fe ff ff       	jmp    c000ec6d <Computer::displayFeatures()+0x1cb>
c000edb6:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c000edbb:	e9 8a fe ff ff       	jmp    c000ec4a <Computer::displayFeatures()+0x1a8>
c000edc0:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c000edc5:	e9 5d fe ff ff       	jmp    c000ec27 <Computer::displayFeatures()+0x185>
c000edca:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c000edcf:	e9 30 fe ff ff       	jmp    c000ec04 <Computer::displayFeatures()+0x162>
c000edd4:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c000edd9:	e9 e0 fd ff ff       	jmp    c000ebbe <Computer::displayFeatures()+0x11c>
c000edde:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c000ede3:	e9 ee fe ff ff       	jmp    c000ecd6 <Computer::displayFeatures()+0x234>

c000ede8 <Computer::rdmsr(unsigned int)>:
c000ede8:	83 ec 0c             	sub    esp,0xc
c000edeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000edef:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000edf6:	74 0a                	je     c000ee02 <Computer::rdmsr(unsigned int)+0x1a>
c000edf8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000edfc:	0f 32                	rdmsr  
c000edfe:	83 c4 0c             	add    esp,0xc
c000ee01:	c3                   	ret    
c000ee02:	83 ec 0c             	sub    esp,0xc
c000ee05:	68 1e a1 02 c0       	push   0xc002a11e
c000ee0a:	e8 5e b7 00 00       	call   c001a56d <Krnl::panic(char const*)>
c000ee0f:	83 c4 10             	add    esp,0x10
c000ee12:	eb e4                	jmp    c000edf8 <Computer::rdmsr(unsigned int)+0x10>

c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ee14:	57                   	push   edi
c000ee15:	56                   	push   esi
c000ee16:	52                   	push   edx
c000ee17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee1b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ee1f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ee23:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee2a:	74 0e                	je     c000ee3a <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ee2c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee30:	89 f0                	mov    eax,esi
c000ee32:	89 fa                	mov    edx,edi
c000ee34:	0f 30                	wrmsr  
c000ee36:	58                   	pop    eax
c000ee37:	5e                   	pop    esi
c000ee38:	5f                   	pop    edi
c000ee39:	c3                   	ret    
c000ee3a:	83 ec 0c             	sub    esp,0xc
c000ee3d:	68 24 a1 02 c0       	push   0xc002a124
c000ee42:	e8 26 b7 00 00       	call   c001a56d <Krnl::panic(char const*)>
c000ee47:	83 c4 10             	add    esp,0x10
c000ee4a:	eb e0                	jmp    c000ee2c <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ee4c <Computer::nmiEnabled()>:
c000ee4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee50:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ee56:	c3                   	ret    
c000ee57:	90                   	nop

c000ee58 <Computer::readCMOS(unsigned char)>:
c000ee58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee5c:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ee63:	19 c0                	sbb    eax,eax
c000ee65:	83 e0 80             	and    eax,0xffffff80
c000ee68:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ee6c:	e6 70                	out    0x70,al
c000ee6e:	e4 71                	in     al,0x71
c000ee70:	c3                   	ret    
c000ee71:	90                   	nop

c000ee72 <Computer::enableNMI(bool)>:
c000ee72:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ee76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee7a:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ee80:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ee88:	eb ce                	jmp    c000ee58 <Computer::readCMOS(unsigned char)>

c000ee8a <Computer::open(int, int, void*)>:
c000ee8a:	56                   	push   esi
c000ee8b:	53                   	push   ebx
c000ee8c:	83 ec 10             	sub    esp,0x10
c000ee8f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ee93:	f6 05 a0 e3 02 c0 04 	test   BYTE PTR ds:0xc002e3a0,0x4
c000ee9a:	68 68 12 00 00       	push   0x1268
c000ee9f:	0f 94 05 c4 d2 02 c0 	sete   BYTE PTR ds:0xc002d2c4
c000eea6:	e8 95 09 00 00       	call   c000f840 <malloc>
c000eeab:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeae:	89 c6                	mov    esi,eax
c000eeb0:	e8 a3 92 00 00       	call   c0018158 <ACPI::ACPI()>
c000eeb5:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000eebb:	58                   	pop    eax
c000eebc:	5a                   	pop    edx
c000eebd:	56                   	push   esi
c000eebe:	53                   	push   ebx
c000eebf:	e8 f4 53 00 00       	call   c00142b8 <Device::addChild(Device*)>
c000eec4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eec7:	e8 cc f9 ff ff       	call   c000e898 <Computer::detectFeatures()>
c000eecc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eecf:	e8 ce fb ff ff       	call   c000eaa2 <Computer::displayFeatures()>
c000eed4:	59                   	pop    ecx
c000eed5:	5e                   	pop    esi
c000eed6:	6a 01                	push   0x1
c000eed8:	53                   	push   ebx
c000eed9:	e8 94 ff ff ff       	call   c000ee72 <Computer::enableNMI(bool)>
c000eede:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000eee5:	e8 56 09 00 00       	call   c000f840 <malloc>
c000eeea:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeed:	89 c6                	mov    esi,eax
c000eeef:	e8 50 9e 00 00       	call   c0018d44 <CPU::CPU()>
c000eef4:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000eefa:	58                   	pop    eax
c000eefb:	5a                   	pop    edx
c000eefc:	56                   	push   esi
c000eefd:	53                   	push   ebx
c000eefe:	e8 b5 53 00 00       	call   c00142b8 <Device::addChild(Device*)>
c000ef03:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ef09:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef0b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef0f:	6a 00                	push   0x0
c000ef11:	6a 00                	push   0x0
c000ef13:	50                   	push   eax
c000ef14:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef17:	83 c4 20             	add    esp,0x20
c000ef1a:	e8 1f 59 00 00       	call   c001483e <setupFPU()>
c000ef1f:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ef25:	85 c0                	test   eax,eax
c000ef27:	74 1f                	je     c000ef48 <Computer::open(int, int, void*)+0xbe>
c000ef29:	83 ec 08             	sub    esp,0x8
c000ef2c:	50                   	push   eax
c000ef2d:	53                   	push   ebx
c000ef2e:	e8 85 53 00 00       	call   c00142b8 <Device::addChild(Device*)>
c000ef33:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ef39:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef3b:	6a 00                	push   0x0
c000ef3d:	6a 00                	push   0x0
c000ef3f:	6a 00                	push   0x0
c000ef41:	50                   	push   eax
c000ef42:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef45:	83 c4 20             	add    esp,0x20
c000ef48:	83 ec 0c             	sub    esp,0xc
c000ef4b:	68 4a e6 00 c0       	push   0xc000e64a
c000ef50:	e8 43 f0 00 00       	call   c001df98 <setupMultitasking(void (*)())>
c000ef55:	83 c4 14             	add    esp,0x14
c000ef58:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef5d:	5b                   	pop    ebx
c000ef5e:	5e                   	pop    esi
c000ef5f:	c3                   	ret    

c000ef60 <Computer::disableNMI()>:
c000ef60:	6a 00                	push   0x0
c000ef62:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ef66:	e8 07 ff ff ff       	call   c000ee72 <Computer::enableNMI(bool)>
c000ef6b:	58                   	pop    eax
c000ef6c:	5a                   	pop    edx
c000ef6d:	c3                   	ret    

c000ef6e <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ef6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef72:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ef79:	19 c0                	sbb    eax,eax
c000ef7b:	83 e0 80             	and    eax,0xffffff80
c000ef7e:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ef82:	e6 70                	out    0x70,al
c000ef84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef88:	e6 71                	out    0x71,al
c000ef8a:	c3                   	ret    
c000ef8b:	90                   	nop

c000ef8c <Computer::handleNMI()>:
c000ef8c:	56                   	push   esi
c000ef8d:	53                   	push   ebx
c000ef8e:	83 ec 10             	sub    esp,0x10
c000ef91:	e4 92                	in     al,0x92
c000ef93:	89 c6                	mov    esi,eax
c000ef95:	e4 61                	in     al,0x61
c000ef97:	68 2a a1 02 c0       	push   0xc002a12a
c000ef9c:	88 c3                	mov    bl,al
c000ef9e:	e8 ef 3e 00 00       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c000efa3:	83 c4 10             	add    esp,0x10
c000efa6:	83 e6 10             	and    esi,0x10
c000efa9:	75 0d                	jne    c000efb8 <Computer::handleNMI()+0x2c>
c000efab:	f6 c3 40             	test   bl,0x40
c000efae:	75 1d                	jne    c000efcd <Computer::handleNMI()+0x41>
c000efb0:	84 db                	test   bl,bl
c000efb2:	78 2d                	js     c000efe1 <Computer::handleNMI()+0x55>
c000efb4:	58                   	pop    eax
c000efb5:	5b                   	pop    ebx
c000efb6:	5e                   	pop    esi
c000efb7:	c3                   	ret    
c000efb8:	83 ec 0c             	sub    esp,0xc
c000efbb:	68 3b a1 02 c0       	push   0xc002a13b
c000efc0:	e8 a8 b5 00 00       	call   c001a56d <Krnl::panic(char const*)>
c000efc5:	83 c4 10             	add    esp,0x10
c000efc8:	f6 c3 40             	test   bl,0x40
c000efcb:	74 e3                	je     c000efb0 <Computer::handleNMI()+0x24>
c000efcd:	83 ec 0c             	sub    esp,0xc
c000efd0:	68 48 a1 02 c0       	push   0xc002a148
c000efd5:	e8 93 b5 00 00       	call   c001a56d <Krnl::panic(char const*)>
c000efda:	83 c4 10             	add    esp,0x10
c000efdd:	84 db                	test   bl,bl
c000efdf:	79 d3                	jns    c000efb4 <Computer::handleNMI()+0x28>
c000efe1:	c7 44 24 10 52 a1 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a152
c000efe9:	5a                   	pop    edx
c000efea:	5b                   	pop    ebx
c000efeb:	5e                   	pop    esi
c000efec:	e9 7c b5 00 00       	jmp    c001a56d <Krnl::panic(char const*)>
c000eff1:	90                   	nop

c000eff2 <Computer::setDiskActivityLight(int, bool)>:
c000eff2:	56                   	push   esi
c000eff3:	53                   	push   ebx
c000eff4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000eff8:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000effd:	77 1b                	ja     c000f01a <Computer::setDiskActivityLight(int, bool)+0x28>
c000efff:	e4 92                	in     al,0x92
c000f001:	bb 40 00 00 00       	mov    ebx,0x40
c000f006:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f00a:	89 da                	mov    edx,ebx
c000f00c:	d3 e2                	shl    edx,cl
c000f00e:	89 f1                	mov    ecx,esi
c000f010:	f7 d2                	not    edx
c000f012:	d3 e3                	shl    ebx,cl
c000f014:	21 d0                	and    eax,edx
c000f016:	09 d8                	or     eax,ebx
c000f018:	e6 92                	out    0x92,al
c000f01a:	5b                   	pop    ebx
c000f01b:	5e                   	pop    esi
c000f01c:	c3                   	ret    
c000f01d:	90                   	nop

c000f01e <GDTEntry::setBase(unsigned int)>:
c000f01e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f022:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f026:	89 c1                	mov    ecx,eax
c000f028:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f02c:	c1 e9 10             	shr    ecx,0x10
c000f02f:	c1 e8 18             	shr    eax,0x18
c000f032:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f035:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f038:	c3                   	ret    
c000f039:	90                   	nop

c000f03a <GDTEntry::setLimit(unsigned int)>:
c000f03a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f03e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f042:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f045:	66 89 01             	mov    WORD PTR [ecx],ax
c000f048:	83 e2 f0             	and    edx,0xfffffff0
c000f04b:	c1 e8 10             	shr    eax,0x10
c000f04e:	83 e0 0f             	and    eax,0xf
c000f051:	09 d0                	or     eax,edx
c000f053:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f056:	c3                   	ret    
c000f057:	90                   	nop

c000f058 <GDT::GDT()>:
c000f058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f05c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f062:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f066:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f06c:	90                   	nop
c000f06d:	c3                   	ret    

c000f06e <GDT::addEntry(GDTEntry)>:
c000f06e:	53                   	push   ebx
c000f06f:	83 ec 0c             	sub    esp,0xc
c000f072:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f076:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f078:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f07f:	52                   	push   edx
c000f080:	50                   	push   eax
c000f081:	68 8c a1 02 c0       	push   0xc002a18c
c000f086:	e8 07 3e 00 00       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c000f08b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f08d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f091:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f095:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f099:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f09d:	8d 50 01             	lea    edx,[eax+0x1]
c000f0a0:	c1 e0 03             	shl    eax,0x3
c000f0a3:	89 13                	mov    DWORD PTR [ebx],edx
c000f0a5:	83 c4 18             	add    esp,0x18
c000f0a8:	5b                   	pop    ebx
c000f0a9:	c3                   	ret    

c000f0aa <GDT::getNumberOfEntries()>:
c000f0aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0ae:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0b0:	c3                   	ret    
c000f0b1:	90                   	nop

c000f0b2 <GDT::flush()>:
c000f0b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0b6:	8b 10                	mov    edx,DWORD PTR [eax]
c000f0b8:	83 c0 04             	add    eax,0x4
c000f0bb:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f0c2:	a3 92 e3 02 c0       	mov    ds:0xc002e392,eax
c000f0c7:	66 89 15 90 e3 02 c0 	mov    WORD PTR ds:0xc002e390,dx
c000f0ce:	e9 75 13 ff ff       	jmp    c0000448 <loadGDT>
c000f0d3:	90                   	nop

c000f0d4 <GDT::setup()>:
c000f0d4:	55                   	push   ebp
c000f0d5:	57                   	push   edi
c000f0d6:	56                   	push   esi
c000f0d7:	53                   	push   ebx
c000f0d8:	83 ec 3c             	sub    esp,0x3c
c000f0db:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f0df:	6a 00                	push   0x0
c000f0e1:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f0e5:	53                   	push   ebx
c000f0e6:	e8 33 ff ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f0eb:	6a 00                	push   0x0
c000f0ed:	53                   	push   ebx
c000f0ee:	e8 47 ff ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f0f3:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f0fb:	6a 00                	push   0x0
c000f0fd:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f101:	53                   	push   ebx
c000f102:	e8 17 ff ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f107:	68 ff ff ff 00       	push   0xffffff
c000f10c:	53                   	push   ebx
c000f10d:	e8 28 ff ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f112:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f116:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f11b:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f120:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f124:	83 c4 20             	add    esp,0x20
c000f127:	6a 00                	push   0x0
c000f129:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f12d:	53                   	push   ebx
c000f12e:	e8 eb fe ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f133:	68 ff ff ff 00       	push   0xffffff
c000f138:	53                   	push   ebx
c000f139:	e8 fc fe ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f13e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f142:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f146:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f14a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f14e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f152:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f157:	0d 00 92 c0 00       	or     eax,0xc09200
c000f15c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f160:	89 d8                	mov    eax,ebx
c000f162:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f166:	80 cc 60             	or     ah,0x60
c000f169:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f16d:	83 c4 0c             	add    esp,0xc
c000f170:	89 f8                	mov    eax,edi
c000f172:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f176:	80 cc 60             	or     ah,0x60
c000f179:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f17d:	89 c7                	mov    edi,eax
c000f17f:	55                   	push   ebp
c000f180:	e8 e9 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f185:	83 c4 0c             	add    esp,0xc
c000f188:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f18c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f190:	55                   	push   ebp
c000f191:	e8 d8 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f196:	83 c4 0c             	add    esp,0xc
c000f199:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f19d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1a1:	55                   	push   ebp
c000f1a2:	e8 c7 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1a7:	83 c4 0c             	add    esp,0xc
c000f1aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f1ae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f1b2:	53                   	push   ebx
c000f1b3:	51                   	push   ecx
c000f1b4:	55                   	push   ebp
c000f1b5:	e8 b4 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1ba:	83 c4 0c             	add    esp,0xc
c000f1bd:	57                   	push   edi
c000f1be:	56                   	push   esi
c000f1bf:	55                   	push   ebp
c000f1c0:	e8 a9 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1c5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f1c8:	e8 e5 fe ff ff       	call   c000f0b2 <GDT::flush()>
c000f1cd:	83 c4 4c             	add    esp,0x4c
c000f1d0:	5b                   	pop    ebx
c000f1d1:	5e                   	pop    esi
c000f1d2:	5f                   	pop    edi
c000f1d3:	5d                   	pop    ebp
c000f1d4:	c3                   	ret    

c000f1d5 <idleFunction(void*)>:
c000f1d5:	53                   	push   ebx
c000f1d6:	83 ec 08             	sub    esp,0x8
c000f1d9:	e8 8b eb 00 00       	call   c001dd69 <unlockScheduler()>
c000f1de:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c000f1e3:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f1e9:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f1f0:	74 3c                	je     c000f22e <idleFunction(void*)+0x59>
c000f1f2:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f1f9:	74 33                	je     c000f22e <idleFunction(void*)+0x59>
c000f1fb:	31 db                	xor    ebx,ebx
c000f1fd:	52                   	push   edx
c000f1fe:	52                   	push   edx
c000f1ff:	68 e1 00 00 00       	push   0xe1
c000f204:	50                   	push   eax
c000f205:	e8 de fb ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c000f20a:	53                   	push   ebx
c000f20b:	83 e0 02             	and    eax,0x2
c000f20e:	50                   	push   eax
c000f20f:	68 e1 00 00 00       	push   0xe1
c000f214:	ff 35 88 e3 02 c0    	push   DWORD PTR ds:0xc002e388
c000f21a:	e8 f5 fb ff ff       	call   c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>
c000f21f:	83 c4 20             	add    esp,0x20
c000f222:	e8 58 10 ff ff       	call   c000027f <doTPAUSE>
c000f227:	e8 44 94 01 00       	call   c0028670 <idleCommon()>
c000f22c:	eb f4                	jmp    c000f222 <idleFunction(void*)+0x4d>
c000f22e:	fb                   	sti    
c000f22f:	f4                   	hlt    
c000f230:	e8 3b 94 01 00       	call   c0028670 <idleCommon()>
c000f235:	eb f7                	jmp    c000f22e <idleFunction(void*)+0x59>
c000f237:	90                   	nop

c000f238 <IDTEntry::IDTEntry(bool)>:
c000f238:	83 ec 04             	sub    esp,0x4
c000f23b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f23f:	88 04 24             	mov    BYTE PTR [esp],al
c000f242:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f246:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f24c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f250:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f254:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f258:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f25b:	83 e2 f0             	and    edx,0xfffffff0
c000f25e:	83 ca 0e             	or     edx,0xe
c000f261:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f264:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f268:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f26b:	83 e2 ef             	and    edx,0xffffffef
c000f26e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f271:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f275:	74 04                	je     c000f27b <IDTEntry::IDTEntry(bool)+0x43>
c000f277:	b2 03                	mov    dl,0x3
c000f279:	eb 02                	jmp    c000f27d <IDTEntry::IDTEntry(bool)+0x45>
c000f27b:	b2 00                	mov    dl,0x0
c000f27d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f281:	83 e2 03             	and    edx,0x3
c000f284:	88 d1                	mov    cl,dl
c000f286:	c1 e1 05             	shl    ecx,0x5
c000f289:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f28c:	83 e2 9f             	and    edx,0xffffff9f
c000f28f:	09 ca                	or     edx,ecx
c000f291:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f294:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f298:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f29b:	83 ca 80             	or     edx,0xffffff80
c000f29e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2a1:	90                   	nop
c000f2a2:	83 c4 04             	add    esp,0x4
c000f2a5:	c3                   	ret    

c000f2a6 <IDTEntry::setOffset(unsigned int)>:
c000f2a6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2ae:	66 89 02             	mov    WORD PTR [edx],ax
c000f2b1:	c1 e8 10             	shr    eax,0x10
c000f2b4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f2b8:	c3                   	ret    
c000f2b9:	90                   	nop

c000f2ba <IDT::IDT()>:
c000f2ba:	90                   	nop
c000f2bb:	c3                   	ret    

c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f2bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f2c0:	83 c0 30             	add    eax,0x30
c000f2c3:	c3                   	ret    

c000f2c4 <IDT::addEntry(IDTEntry, int)>:
c000f2c4:	53                   	push   ebx
c000f2c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2c9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f2cd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f2d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f2d5:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f2d8:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f2dc:	5b                   	pop    ebx
c000f2dd:	c3                   	ret    

c000f2de <IDT::addEntry(int, void (*)(), bool)>:
c000f2de:	53                   	push   ebx
c000f2df:	83 ec 10             	sub    esp,0x10
c000f2e2:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f2e7:	50                   	push   eax
c000f2e8:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f2ec:	53                   	push   ebx
c000f2ed:	e8 46 ff ff ff       	call   c000f238 <IDTEntry::IDTEntry(bool)>
c000f2f2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f2f6:	53                   	push   ebx
c000f2f7:	e8 aa ff ff ff       	call   c000f2a6 <IDTEntry::setOffset(unsigned int)>
c000f2fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f300:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f304:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f30c:	e8 b3 ff ff ff       	call   c000f2c4 <IDT::addEntry(IDTEntry, int)>
c000f311:	83 c4 30             	add    esp,0x30
c000f314:	5b                   	pop    ebx
c000f315:	c3                   	ret    

c000f316 <IDT::flush()>:
c000f316:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f31a:	66 c7 05 98 e3 02 c0 ff 07 	mov    WORD PTR ds:0xc002e398,0x7ff
c000f323:	a3 9a e3 02 c0       	mov    ds:0xc002e39a,eax
c000f328:	0f 01 1d 98 e3 02 c0 	lidtd  ds:0xc002e398
c000f32f:	c3                   	ret    

c000f330 <IDT::setup()>:
c000f330:	57                   	push   edi
c000f331:	56                   	push   esi
c000f332:	53                   	push   ebx
c000f333:	83 ec 10             	sub    esp,0x10
c000f336:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f33a:	6a 00                	push   0x0
c000f33c:	68 68 04 00 c0       	push   0xc0000468
c000f341:	6a 00                	push   0x0
c000f343:	53                   	push   ebx
c000f344:	e8 95 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f349:	6a 00                	push   0x0
c000f34b:	68 78 04 00 c0       	push   0xc0000478
c000f350:	6a 01                	push   0x1
c000f352:	53                   	push   ebx
c000f353:	e8 86 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f358:	83 c4 20             	add    esp,0x20
c000f35b:	6a 00                	push   0x0
c000f35d:	68 82 04 00 c0       	push   0xc0000482
c000f362:	6a 02                	push   0x2
c000f364:	53                   	push   ebx
c000f365:	e8 74 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f36a:	6a 00                	push   0x0
c000f36c:	68 8c 04 00 c0       	push   0xc000048c
c000f371:	6a 03                	push   0x3
c000f373:	53                   	push   ebx
c000f374:	e8 65 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f379:	83 c4 20             	add    esp,0x20
c000f37c:	6a 00                	push   0x0
c000f37e:	68 96 04 00 c0       	push   0xc0000496
c000f383:	6a 04                	push   0x4
c000f385:	53                   	push   ebx
c000f386:	e8 53 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f38b:	6a 00                	push   0x0
c000f38d:	68 a0 04 00 c0       	push   0xc00004a0
c000f392:	6a 05                	push   0x5
c000f394:	53                   	push   ebx
c000f395:	e8 44 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f39a:	83 c4 20             	add    esp,0x20
c000f39d:	6a 00                	push   0x0
c000f39f:	68 aa 04 00 c0       	push   0xc00004aa
c000f3a4:	6a 06                	push   0x6
c000f3a6:	53                   	push   ebx
c000f3a7:	e8 32 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3ac:	6a 00                	push   0x0
c000f3ae:	68 b4 04 00 c0       	push   0xc00004b4
c000f3b3:	6a 07                	push   0x7
c000f3b5:	53                   	push   ebx
c000f3b6:	e8 23 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3bb:	83 c4 20             	add    esp,0x20
c000f3be:	6a 00                	push   0x0
c000f3c0:	68 be 04 00 c0       	push   0xc00004be
c000f3c5:	6a 08                	push   0x8
c000f3c7:	53                   	push   ebx
c000f3c8:	e8 11 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3cd:	6a 00                	push   0x0
c000f3cf:	68 c6 04 00 c0       	push   0xc00004c6
c000f3d4:	6a 09                	push   0x9
c000f3d6:	53                   	push   ebx
c000f3d7:	e8 02 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3dc:	83 c4 20             	add    esp,0x20
c000f3df:	6a 00                	push   0x0
c000f3e1:	68 d0 04 00 c0       	push   0xc00004d0
c000f3e6:	6a 0a                	push   0xa
c000f3e8:	53                   	push   ebx
c000f3e9:	e8 f0 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3ee:	6a 00                	push   0x0
c000f3f0:	68 d8 04 00 c0       	push   0xc00004d8
c000f3f5:	6a 0b                	push   0xb
c000f3f7:	53                   	push   ebx
c000f3f8:	e8 e1 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3fd:	83 c4 20             	add    esp,0x20
c000f400:	6a 00                	push   0x0
c000f402:	68 e0 04 00 c0       	push   0xc00004e0
c000f407:	6a 0c                	push   0xc
c000f409:	53                   	push   ebx
c000f40a:	e8 cf fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f40f:	6a 00                	push   0x0
c000f411:	68 e8 04 00 c0       	push   0xc00004e8
c000f416:	6a 0d                	push   0xd
c000f418:	53                   	push   ebx
c000f419:	e8 c0 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f41e:	83 c4 20             	add    esp,0x20
c000f421:	6a 00                	push   0x0
c000f423:	68 f0 04 00 c0       	push   0xc00004f0
c000f428:	6a 0e                	push   0xe
c000f42a:	53                   	push   ebx
c000f42b:	e8 ae fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f430:	6a 00                	push   0x0
c000f432:	68 f8 04 00 c0       	push   0xc00004f8
c000f437:	6a 0f                	push   0xf
c000f439:	53                   	push   ebx
c000f43a:	e8 9f fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f43f:	83 c4 20             	add    esp,0x20
c000f442:	6a 00                	push   0x0
c000f444:	68 02 05 00 c0       	push   0xc0000502
c000f449:	6a 10                	push   0x10
c000f44b:	53                   	push   ebx
c000f44c:	e8 8d fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f451:	6a 00                	push   0x0
c000f453:	68 0c 05 00 c0       	push   0xc000050c
c000f458:	6a 11                	push   0x11
c000f45a:	53                   	push   ebx
c000f45b:	e8 7e fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f460:	83 c4 20             	add    esp,0x20
c000f463:	6a 00                	push   0x0
c000f465:	68 16 05 00 c0       	push   0xc0000516
c000f46a:	6a 12                	push   0x12
c000f46c:	53                   	push   ebx
c000f46d:	e8 6c fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f472:	6a 01                	push   0x1
c000f474:	68 b0 05 00 c0       	push   0xc00005b0
c000f479:	6a 60                	push   0x60
c000f47b:	53                   	push   ebx
c000f47c:	e8 5d fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f481:	83 c4 20             	add    esp,0x20
c000f484:	6a 00                	push   0x0
c000f486:	68 b7 05 00 c0       	push   0xc00005b7
c000f48b:	6a 20                	push   0x20
c000f48d:	53                   	push   ebx
c000f48e:	e8 4b fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f493:	6a 00                	push   0x0
c000f495:	68 a2 05 00 c0       	push   0xc00005a2
c000f49a:	6a 21                	push   0x21
c000f49c:	53                   	push   ebx
c000f49d:	e8 3c fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4a2:	83 c4 20             	add    esp,0x20
c000f4a5:	6a 00                	push   0x0
c000f4a7:	68 a9 05 00 c0       	push   0xc00005a9
c000f4ac:	6a 22                	push   0x22
c000f4ae:	53                   	push   ebx
c000f4af:	e8 2a fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4b4:	6a 00                	push   0x0
c000f4b6:	68 20 05 00 c0       	push   0xc0000520
c000f4bb:	6a 23                	push   0x23
c000f4bd:	53                   	push   ebx
c000f4be:	e8 1b fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4c3:	83 c4 20             	add    esp,0x20
c000f4c6:	6a 00                	push   0x0
c000f4c8:	68 2a 05 00 c0       	push   0xc000052a
c000f4cd:	6a 24                	push   0x24
c000f4cf:	53                   	push   ebx
c000f4d0:	e8 09 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4d5:	6a 00                	push   0x0
c000f4d7:	68 34 05 00 c0       	push   0xc0000534
c000f4dc:	6a 25                	push   0x25
c000f4de:	53                   	push   ebx
c000f4df:	e8 fa fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4e4:	83 c4 20             	add    esp,0x20
c000f4e7:	6a 00                	push   0x0
c000f4e9:	68 3e 05 00 c0       	push   0xc000053e
c000f4ee:	6a 26                	push   0x26
c000f4f0:	53                   	push   ebx
c000f4f1:	e8 e8 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4f6:	6a 00                	push   0x0
c000f4f8:	68 48 05 00 c0       	push   0xc0000548
c000f4fd:	6a 27                	push   0x27
c000f4ff:	53                   	push   ebx
c000f500:	e8 d9 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f505:	83 c4 20             	add    esp,0x20
c000f508:	6a 00                	push   0x0
c000f50a:	68 52 05 00 c0       	push   0xc0000552
c000f50f:	6a 28                	push   0x28
c000f511:	53                   	push   ebx
c000f512:	e8 c7 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f517:	6a 00                	push   0x0
c000f519:	68 5c 05 00 c0       	push   0xc000055c
c000f51e:	6a 29                	push   0x29
c000f520:	53                   	push   ebx
c000f521:	e8 b8 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f526:	83 c4 20             	add    esp,0x20
c000f529:	6a 00                	push   0x0
c000f52b:	68 66 05 00 c0       	push   0xc0000566
c000f530:	6a 2a                	push   0x2a
c000f532:	53                   	push   ebx
c000f533:	e8 a6 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f538:	6a 00                	push   0x0
c000f53a:	68 70 05 00 c0       	push   0xc0000570
c000f53f:	6a 2b                	push   0x2b
c000f541:	53                   	push   ebx
c000f542:	e8 97 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f547:	83 c4 20             	add    esp,0x20
c000f54a:	6a 00                	push   0x0
c000f54c:	68 7a 05 00 c0       	push   0xc000057a
c000f551:	6a 2c                	push   0x2c
c000f553:	53                   	push   ebx
c000f554:	e8 85 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f559:	6a 00                	push   0x0
c000f55b:	68 84 05 00 c0       	push   0xc0000584
c000f560:	6a 2d                	push   0x2d
c000f562:	53                   	push   ebx
c000f563:	e8 76 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f568:	83 c4 20             	add    esp,0x20
c000f56b:	6a 00                	push   0x0
c000f56d:	68 8e 05 00 c0       	push   0xc000058e
c000f572:	6a 2e                	push   0x2e
c000f574:	53                   	push   ebx
c000f575:	e8 64 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f57a:	6a 00                	push   0x0
c000f57c:	68 98 05 00 c0       	push   0xc0000598
c000f581:	6a 2f                	push   0x2f
c000f583:	53                   	push   ebx
c000f584:	e8 55 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f589:	83 c4 20             	add    esp,0x20
c000f58c:	6a 00                	push   0x0
c000f58e:	68 ed 05 00 c0       	push   0xc00005ed
c000f593:	6a 30                	push   0x30
c000f595:	53                   	push   ebx
c000f596:	e8 43 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f59b:	6a 00                	push   0x0
c000f59d:	68 f7 05 00 c0       	push   0xc00005f7
c000f5a2:	6a 31                	push   0x31
c000f5a4:	53                   	push   ebx
c000f5a5:	e8 34 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5aa:	83 c4 20             	add    esp,0x20
c000f5ad:	6a 00                	push   0x0
c000f5af:	68 01 06 00 c0       	push   0xc0000601
c000f5b4:	6a 32                	push   0x32
c000f5b6:	53                   	push   ebx
c000f5b7:	e8 22 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5bc:	6a 00                	push   0x0
c000f5be:	68 0b 06 00 c0       	push   0xc000060b
c000f5c3:	6a 33                	push   0x33
c000f5c5:	53                   	push   ebx
c000f5c6:	e8 13 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5cb:	83 c4 20             	add    esp,0x20
c000f5ce:	6a 00                	push   0x0
c000f5d0:	68 15 06 00 c0       	push   0xc0000615
c000f5d5:	6a 34                	push   0x34
c000f5d7:	53                   	push   ebx
c000f5d8:	e8 01 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5dd:	6a 00                	push   0x0
c000f5df:	68 1f 06 00 c0       	push   0xc000061f
c000f5e4:	6a 35                	push   0x35
c000f5e6:	53                   	push   ebx
c000f5e7:	e8 f2 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5ec:	83 c4 20             	add    esp,0x20
c000f5ef:	6a 00                	push   0x0
c000f5f1:	68 29 06 00 c0       	push   0xc0000629
c000f5f6:	6a 36                	push   0x36
c000f5f8:	53                   	push   ebx
c000f5f9:	e8 e0 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5fe:	6a 00                	push   0x0
c000f600:	68 33 06 00 c0       	push   0xc0000633
c000f605:	6a 37                	push   0x37
c000f607:	53                   	push   ebx
c000f608:	e8 d1 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f60d:	83 c4 20             	add    esp,0x20
c000f610:	e8 ea 28 00 00       	call   c0011eff <Virt::getAKernelVAS()>
c000f615:	52                   	push   edx
c000f616:	6a 03                	push   0x3
c000f618:	6a 02                	push   0x2
c000f61a:	50                   	push   eax
c000f61b:	e8 02 2e 00 00       	call   c0012422 <VAS::allocatePages(int, int)>
c000f620:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f627:	89 c6                	mov    esi,eax
c000f629:	e8 12 02 00 00       	call   c000f840 <malloc>
c000f62e:	81 c6 00 20 00 00    	add    esi,0x2000
c000f634:	89 04 24             	mov    DWORD PTR [esp],eax
c000f637:	89 c7                	mov    edi,eax
c000f639:	e8 2e 1e 00 00       	call   c001146c <TSS::TSS()>
c000f63e:	83 c4 0c             	add    esp,0xc
c000f641:	68 be 04 00 c0       	push   0xc00004be
c000f646:	56                   	push   esi
c000f647:	57                   	push   edi
c000f648:	e8 5f 1e 00 00       	call   c00114ac <TSS::setup(unsigned long, unsigned long)>
c000f64d:	59                   	pop    ecx
c000f64e:	89 c6                	mov    esi,eax
c000f650:	5f                   	pop    edi
c000f651:	6a 00                	push   0x0
c000f653:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f657:	50                   	push   eax
c000f658:	e8 db fb ff ff       	call   c000f238 <IDTEntry::IDTEntry(bool)>
c000f65d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f661:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f666:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f66d:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f673:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f677:	80 ce 05             	or     dh,0x5
c000f67a:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f67d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f681:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f685:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f688:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f68b:	e8 86 fc ff ff       	call   c000f316 <IDT::flush()>
c000f690:	83 c4 20             	add    esp,0x20
c000f693:	5b                   	pop    ebx
c000f694:	5e                   	pop    esi
c000f695:	5f                   	pop    edi
c000f696:	c3                   	ret    

c000f697 <sbrk>:
c000f697:	55                   	push   ebp
c000f698:	57                   	push   edi
c000f699:	56                   	push   esi
c000f69a:	53                   	push   ebx
c000f69b:	83 ec 1c             	sub    esp,0x1c
c000f69e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f6a2:	85 c0                	test   eax,eax
c000f6a4:	74 3e                	je     c000f6e4 <sbrk+0x4d>
c000f6a6:	78 43                	js     c000f6eb <sbrk+0x54>
c000f6a8:	8b 15 88 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e388
c000f6ae:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f6b4:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f6ba:	83 e2 01             	and    edx,0x1
c000f6bd:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f6c1:	8b 0d b8 d2 02 c0    	mov    ecx,DWORD PTR ds:0xc002d2b8
c000f6c7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f6cb:	05 ff 0f 00 00       	add    eax,0xfff
c000f6d0:	89 c2                	mov    edx,eax
c000f6d2:	78 2f                	js     c000f703 <sbrk+0x6c>
c000f6d4:	c1 fa 0c             	sar    edx,0xc
c000f6d7:	89 d7                	mov    edi,edx
c000f6d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f6dd:	be 00 00 00 00       	mov    esi,0x0
c000f6e2:	eb 36                	jmp    c000f71a <sbrk+0x83>
c000f6e4:	a1 b8 d2 02 c0       	mov    eax,ds:0xc002d2b8
c000f6e9:	eb 74                	jmp    c000f75f <sbrk+0xc8>
c000f6eb:	83 ec 08             	sub    esp,0x8
c000f6ee:	50                   	push   eax
c000f6ef:	68 a8 a1 02 c0       	push   0xc002a1a8
c000f6f4:	e8 99 37 00 00       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c000f6f9:	83 c4 10             	add    esp,0x10
c000f6fc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f701:	eb 5c                	jmp    c000f75f <sbrk+0xc8>
c000f703:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f709:	eb c9                	jmp    c000f6d4 <sbrk+0x3d>
c000f70b:	81 05 b8 d2 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002d2b8,0x1000
c000f715:	46                   	inc    esi
c000f716:	39 f7                	cmp    edi,esi
c000f718:	74 34                	je     c000f74e <sbrk+0xb7>
c000f71a:	e8 e0 27 00 00       	call   c0011eff <Virt::getAKernelVAS()>
c000f71f:	89 c3                	mov    ebx,eax
c000f721:	8b 2d b8 d2 02 c0    	mov    ebp,DWORD PTR ds:0xc002d2b8
c000f727:	e8 b1 07 00 00       	call   c000fedd <Phys::allocatePage()>
c000f72c:	68 01 04 00 00       	push   0x401
c000f731:	55                   	push   ebp
c000f732:	50                   	push   eax
c000f733:	53                   	push   ebx
c000f734:	e8 e9 2b 00 00       	call   c0012322 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f739:	83 c4 10             	add    esp,0x10
c000f73c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f741:	74 c8                	je     c000f70b <sbrk+0x74>
c000f743:	8b 1d b8 d2 02 c0    	mov    ebx,DWORD PTR ds:0xc002d2b8
c000f749:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f74c:	eb bd                	jmp    c000f70b <sbrk+0x74>
c000f74e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f753:	75 12                	jne    c000f767 <sbrk+0xd0>
c000f755:	0f 20 d8             	mov    eax,cr3
c000f758:	0f 22 d8             	mov    cr3,eax
c000f75b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f75f:	83 c4 1c             	add    esp,0x1c
c000f762:	5b                   	pop    ebx
c000f763:	5e                   	pop    esi
c000f764:	5f                   	pop    edi
c000f765:	5d                   	pop    ebp
c000f766:	c3                   	ret    
c000f767:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f76b:	89 cb                	mov    ebx,ecx
c000f76d:	c1 eb 0a             	shr    ebx,0xa
c000f770:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f776:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f77c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f780:	c1 e0 0c             	shl    eax,0xc
c000f783:	01 c8                	add    eax,ecx
c000f785:	c1 e8 0a             	shr    eax,0xa
c000f788:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f78d:	2d 00 00 40 00       	sub    eax,0x400000
c000f792:	39 c3                	cmp    ebx,eax
c000f794:	77 c5                	ja     c000f75b <sbrk+0xc4>
c000f796:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f799:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f79f:	39 d8                	cmp    eax,ebx
c000f7a1:	73 f3                	jae    c000f796 <sbrk+0xff>
c000f7a3:	eb b6                	jmp    c000f75b <sbrk+0xc4>

c000f7a5 <mmap>:
c000f7a5:	83 ec 18             	sub    esp,0x18
c000f7a8:	68 d8 a1 02 c0       	push   0xc002a1d8
c000f7ad:	e8 bb ad 00 00       	call   c001a56d <Krnl::panic(char const*)>
c000f7b2:	b8 00 00 00 00       	mov    eax,0x0
c000f7b7:	83 c4 1c             	add    esp,0x1c
c000f7ba:	c3                   	ret    

c000f7bb <munmap>:
c000f7bb:	83 ec 18             	sub    esp,0x18
c000f7be:	68 dd a1 02 c0       	push   0xc002a1dd
c000f7c3:	e8 a5 ad 00 00       	call   c001a56d <Krnl::panic(char const*)>
c000f7c8:	b8 00 00 00 00       	mov    eax,0x0
c000f7cd:	83 c4 1c             	add    esp,0x1c
c000f7d0:	c3                   	ret    

c000f7d1 <liballoc_lock()>:
c000f7d1:	83 ec 0c             	sub    esp,0xc
c000f7d4:	e8 8e e5 00 00       	call   c001dd67 <lockScheduler()>
c000f7d9:	b8 00 00 00 00       	mov    eax,0x0
c000f7de:	83 c4 0c             	add    esp,0xc
c000f7e1:	c3                   	ret    

c000f7e2 <liballoc_unlock()>:
c000f7e2:	83 ec 0c             	sub    esp,0xc
c000f7e5:	e8 7f e5 00 00       	call   c001dd69 <unlockScheduler()>
c000f7ea:	b8 00 00 00 00       	mov    eax,0x0
c000f7ef:	83 c4 0c             	add    esp,0xc
c000f7f2:	c3                   	ret    

c000f7f3 <liballoc_alloc(int)>:
c000f7f3:	83 ec 0c             	sub    esp,0xc
c000f7f6:	e8 04 27 00 00       	call   c0011eff <Virt::getAKernelVAS()>
c000f7fb:	83 ec 04             	sub    esp,0x4
c000f7fe:	6a 01                	push   0x1
c000f800:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f804:	50                   	push   eax
c000f805:	e8 18 2c 00 00       	call   c0012422 <VAS::allocatePages(int, int)>
c000f80a:	83 c4 1c             	add    esp,0x1c
c000f80d:	c3                   	ret    

c000f80e <liballoc_free(void*, int)>:
c000f80e:	83 ec 0c             	sub    esp,0xc
c000f811:	e8 e9 26 00 00       	call   c0011eff <Virt::getAKernelVAS()>
c000f816:	83 ec 08             	sub    esp,0x8
c000f819:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f81d:	50                   	push   eax
c000f81e:	e8 bb 28 00 00       	call   c00120de <VAS::freeAllocatedPages(unsigned long)>
c000f823:	b8 00 00 00 00       	mov    eax,0x0
c000f828:	83 c4 1c             	add    esp,0x1c
c000f82b:	c3                   	ret    

c000f82c <realloc>:
c000f82c:	83 ec 14             	sub    esp,0x14
c000f82f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f833:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f837:	e8 18 1e ff ff       	call   c0001654 <dlrealloc>
c000f83c:	83 c4 1c             	add    esp,0x1c
c000f83f:	c3                   	ret    

c000f840 <malloc>:
c000f840:	83 ec 18             	sub    esp,0x18
c000f843:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f847:	e8 cb 18 ff ff       	call   c0001117 <dlmalloc>
c000f84c:	83 c4 1c             	add    esp,0x1c
c000f84f:	c3                   	ret    

c000f850 <free>:
c000f850:	83 ec 18             	sub    esp,0x18
c000f853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f857:	e8 60 15 ff ff       	call   c0000dbc <dlfree>
c000f85c:	83 c4 1c             	add    esp,0x1c
c000f85f:	c3                   	ret    

c000f860 <rfree>:
c000f860:	83 ec 18             	sub    esp,0x18
c000f863:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f867:	e8 50 15 ff ff       	call   c0000dbc <dlfree>
c000f86c:	83 c4 1c             	add    esp,0x1c
c000f86f:	c3                   	ret    

c000f870 <calloc>:
c000f870:	56                   	push   esi
c000f871:	53                   	push   ebx
c000f872:	83 ec 10             	sub    esp,0x10
c000f875:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f879:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f87e:	53                   	push   ebx
c000f87f:	e8 bc ff ff ff       	call   c000f840 <malloc>
c000f884:	89 c6                	mov    esi,eax
c000f886:	83 c4 0c             	add    esp,0xc
c000f889:	53                   	push   ebx
c000f88a:	6a 00                	push   0x0
c000f88c:	50                   	push   eax
c000f88d:	e8 e6 0e ff ff       	call   c0000778 <memset>
c000f892:	89 f0                	mov    eax,esi
c000f894:	83 c4 14             	add    esp,0x14
c000f897:	5b                   	pop    ebx
c000f898:	5e                   	pop    esi
c000f899:	c3                   	ret    

c000f89a <hwTextMode_loadInData(VgaText*)>:
c000f89a:	55                   	push   ebp
c000f89b:	a1 c0 d2 02 c0       	mov    eax,ds:0xc002d2c0
c000f8a0:	57                   	push   edi
c000f8a1:	56                   	push   esi
c000f8a2:	53                   	push   ebx
c000f8a3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f8a7:	8b 97 ac 0f 00 00    	mov    edx,DWORD PTR [edi+0xfac]
c000f8ad:	85 d2                	test   edx,edx
c000f8af:	7e 2f                	jle    c000f8e0 <hwTextMode_loadInData(VgaText*)+0x46>
c000f8b1:	8d a8 94 00 00 00    	lea    ebp,[eax+0x94]
c000f8b7:	8d 4f 0c             	lea    ecx,[edi+0xc]
c000f8ba:	31 f6                	xor    esi,esi
c000f8bc:	29 fd                	sub    ebp,edi
c000f8be:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f8c1:	31 c0                	xor    eax,eax
c000f8c3:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f8c7:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f8cb:	40                   	inc    eax
c000f8cc:	83 f8 50             	cmp    eax,0x50
c000f8cf:	75 f2                	jne    c000f8c3 <hwTextMode_loadInData(VgaText*)+0x29>
c000f8d1:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f8d7:	46                   	inc    esi
c000f8d8:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f8de:	7f de                	jg     c000f8be <hwTextMode_loadInData(VgaText*)+0x24>
c000f8e0:	5b                   	pop    ebx
c000f8e1:	5e                   	pop    esi
c000f8e2:	5f                   	pop    edi
c000f8e3:	5d                   	pop    ebp
c000f8e4:	c3                   	ret    

c000f8e5 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f8e5:	55                   	push   ebp
c000f8e6:	80 3d 20 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e420,0x0
c000f8ed:	57                   	push   edi
c000f8ee:	56                   	push   esi
c000f8ef:	53                   	push   ebx
c000f8f0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f8f4:	75 50                	jne    c000f946 <hwTextMode_loadInTitle(VgaText*, char*)+0x61>
c000f8f6:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f8fc:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f902:	8b 15 c0 d2 02 c0    	mov    edx,DWORD PTR ds:0xc002d2c0
c000f908:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f90c:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f912:	eb 0e                	jmp    c000f922 <hwTextMode_loadInTitle(VgaText*, char*)+0x3d>
c000f914:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f91a:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f920:	89 da                	mov    edx,ebx
c000f922:	83 e5 0f             	and    ebp,0xf
c000f925:	c1 e0 04             	shl    eax,0x4
c000f928:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f92b:	0f b6 c0             	movzx  eax,al
c000f92e:	41                   	inc    ecx
c000f92f:	09 e8                	or     eax,ebp
c000f931:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f935:	c1 e0 08             	shl    eax,0x8
c000f938:	09 e8                	or     eax,ebp
c000f93a:	39 fb                	cmp    ebx,edi
c000f93c:	66 89 02             	mov    WORD PTR [edx],ax
c000f93f:	75 d3                	jne    c000f914 <hwTextMode_loadInTitle(VgaText*, char*)+0x2f>
c000f941:	5b                   	pop    ebx
c000f942:	5e                   	pop    esi
c000f943:	5f                   	pop    edi
c000f944:	5d                   	pop    ebp
c000f945:	c3                   	ret    
c000f946:	c7 86 d8 0f 00 00 02 00 00 00 	mov    DWORD PTR [esi+0xfd8],0x2
c000f950:	c7 86 d4 0f 00 00 00 00 00 00 	mov    DWORD PTR [esi+0xfd4],0x0
c000f95a:	31 c0                	xor    eax,eax
c000f95c:	bd 02 00 00 00       	mov    ebp,0x2
c000f961:	eb 9f                	jmp    c000f902 <hwTextMode_loadInTitle(VgaText*, char*)+0x1d>

c000f963 <hwTextMode_showCursor(VgaText*, bool)>:
c000f963:	56                   	push   esi
c000f964:	80 3d 20 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e420,0x0
c000f96b:	53                   	push   ebx
c000f96c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f970:	75 39                	jne    c000f9ab <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000f972:	84 c0                	test   al,al
c000f974:	74 38                	je     c000f9ae <hwTextMode_showCursor(VgaText*, bool)+0x4b>
c000f976:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f97b:	b0 0a                	mov    al,0xa
c000f97d:	89 da                	mov    edx,ebx
c000f97f:	ee                   	out    dx,al
c000f980:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f985:	89 ca                	mov    edx,ecx
c000f987:	ec                   	in     al,dx
c000f988:	b2 0f                	mov    dl,0xf
c000f98a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f98e:	83 e0 c0             	and    eax,0xffffffc0
c000f991:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f997:	09 d0                	or     eax,edx
c000f999:	89 ca                	mov    edx,ecx
c000f99b:	ee                   	out    dx,al
c000f99c:	b0 0b                	mov    al,0xb
c000f99e:	89 da                	mov    edx,ebx
c000f9a0:	ee                   	out    dx,al
c000f9a1:	89 ca                	mov    edx,ecx
c000f9a3:	ec                   	in     al,dx
c000f9a4:	83 e0 e0             	and    eax,0xffffffe0
c000f9a7:	83 c8 0f             	or     eax,0xf
c000f9aa:	ee                   	out    dx,al
c000f9ab:	5b                   	pop    ebx
c000f9ac:	5e                   	pop    esi
c000f9ad:	c3                   	ret    
c000f9ae:	b0 0a                	mov    al,0xa
c000f9b0:	ba d4 03 00 00       	mov    edx,0x3d4
c000f9b5:	ee                   	out    dx,al
c000f9b6:	b0 20                	mov    al,0x20
c000f9b8:	ba d5 03 00 00       	mov    edx,0x3d5
c000f9bd:	ee                   	out    dx,al
c000f9be:	5b                   	pop    ebx
c000f9bf:	5e                   	pop    esi
c000f9c0:	c3                   	ret    

c000f9c1 <hwTextMode_update(VgaText*)>:
c000f9c1:	c3                   	ret    

c000f9c2 <hwTextMode_updateCursor(VgaText*)>:
c000f9c2:	56                   	push   esi
c000f9c3:	80 3d 20 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e420,0x0
c000f9ca:	53                   	push   ebx
c000f9cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f9cf:	75 3f                	jne    c000fa10 <hwTextMode_updateCursor(VgaText*)+0x4e>
c000f9d1:	be d4 03 00 00       	mov    esi,0x3d4
c000f9d6:	b9 19 00 00 00       	mov    ecx,0x19
c000f9db:	89 f2                	mov    edx,esi
c000f9dd:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f9e3:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f9e9:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f9ec:	c1 e1 04             	shl    ecx,0x4
c000f9ef:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f9f5:	b0 0f                	mov    al,0xf
c000f9f7:	ee                   	out    dx,al
c000f9f8:	bb d5 03 00 00       	mov    ebx,0x3d5
c000f9fd:	88 c8                	mov    al,cl
c000f9ff:	89 da                	mov    edx,ebx
c000fa01:	ee                   	out    dx,al
c000fa02:	b0 0e                	mov    al,0xe
c000fa04:	89 f2                	mov    edx,esi
c000fa06:	ee                   	out    dx,al
c000fa07:	89 c8                	mov    eax,ecx
c000fa09:	89 da                	mov    edx,ebx
c000fa0b:	66 c1 e8 08          	shr    ax,0x8
c000fa0f:	ee                   	out    dx,al
c000fa10:	5b                   	pop    ebx
c000fa11:	5e                   	pop    esi
c000fa12:	c3                   	ret    

c000fa13 <hwTextMode_disableBlink(VgaText*, bool)>:
c000fa13:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa17:	80 3d 20 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e420,0x0
c000fa1e:	75 38                	jne    c000fa58 <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000fa20:	ba da 03 00 00       	mov    edx,0x3da
c000fa25:	84 c0                	test   al,al
c000fa27:	75 18                	jne    c000fa41 <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000fa29:	ec                   	in     al,dx
c000fa2a:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa2f:	b0 30                	mov    al,0x30
c000fa31:	89 ca                	mov    edx,ecx
c000fa33:	ee                   	out    dx,al
c000fa34:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa39:	ec                   	in     al,dx
c000fa3a:	83 c8 08             	or     eax,0x8
c000fa3d:	89 ca                	mov    edx,ecx
c000fa3f:	ee                   	out    dx,al
c000fa40:	c3                   	ret    
c000fa41:	ec                   	in     al,dx
c000fa42:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa47:	b0 30                	mov    al,0x30
c000fa49:	89 ca                	mov    edx,ecx
c000fa4b:	ee                   	out    dx,al
c000fa4c:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa51:	ec                   	in     al,dx
c000fa52:	83 e0 f7             	and    eax,0xfffffff7
c000fa55:	89 ca                	mov    edx,ecx
c000fa57:	ee                   	out    dx,al
c000fa58:	c3                   	ret    

c000fa59 <hwTextMode_scrollScreen(VgaText*)>:
c000fa59:	55                   	push   ebp
c000fa5a:	57                   	push   edi
c000fa5b:	56                   	push   esi
c000fa5c:	53                   	push   ebx
c000fa5d:	83 ec 1c             	sub    esp,0x1c
c000fa60:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fa64:	80 3d 20 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e420,0x0
c000fa6b:	74 14                	je     c000fa81 <hwTextMode_scrollScreen(VgaText*)+0x28>
c000fa6d:	c7 81 d0 0f 00 00 02 00 00 00 	mov    DWORD PTR [ecx+0xfd0],0x2
c000fa77:	c7 81 cc 0f 00 00 00 00 00 00 	mov    DWORD PTR [ecx+0xfcc],0x0
c000fa81:	a1 c0 d2 02 c0       	mov    eax,ds:0xc002d2c0
c000fa86:	bd 02 00 00 00       	mov    ebp,0x2
c000fa8b:	05 a0 00 00 00       	add    eax,0xa0
c000fa90:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fa94:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fa98:	31 c0                	xor    eax,eax
c000fa9a:	eb 0b                	jmp    c000faa7 <hwTextMode_scrollScreen(VgaText*)+0x4e>
c000fa9c:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faa2:	74 57                	je     c000fafb <hwTextMode_scrollScreen(VgaText*)+0xa2>
c000faa4:	43                   	inc    ebx
c000faa5:	89 f0                	mov    eax,esi
c000faa7:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000faad:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000fab3:	88 13                	mov    BYTE PTR [ebx],dl
c000fab5:	8d 70 01             	lea    esi,[eax+0x1]
c000fab8:	83 fd 18             	cmp    ebp,0x18
c000fabb:	75 df                	jne    c000fa9c <hwTextMode_scrollScreen(VgaText*)+0x43>
c000fabd:	a8 01                	test   al,0x1
c000fabf:	75 13                	jne    c000fad4 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000fac1:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000fac4:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faca:	75 d8                	jne    c000faa4 <hwTextMode_scrollScreen(VgaText*)+0x4b>
c000facc:	83 c4 1c             	add    esp,0x1c
c000facf:	5b                   	pop    ebx
c000fad0:	5e                   	pop    esi
c000fad1:	5f                   	pop    edi
c000fad2:	5d                   	pop    ebp
c000fad3:	c3                   	ret    
c000fad4:	83 ec 08             	sub    esp,0x8
c000fad7:	0f b6 81 cc 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfcc]
c000fade:	50                   	push   eax
c000fadf:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000fae3:	0f b6 81 d0 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfd0]
c000faea:	50                   	push   eax
c000faeb:	e8 4e 0c 00 00       	call   c001073e <VgaText::combineColours(unsigned char, unsigned char)>
c000faf0:	83 c4 10             	add    esp,0x10
c000faf3:	88 07                	mov    BYTE PTR [edi],al
c000faf5:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000faf9:	eb c9                	jmp    c000fac4 <hwTextMode_scrollScreen(VgaText*)+0x6b>
c000fafb:	45                   	inc    ebp
c000fafc:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000fb04:	eb 8e                	jmp    c000fa94 <hwTextMode_scrollScreen(VgaText*)+0x3b>

c000fb06 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000fb06:	57                   	push   edi
c000fb07:	80 3d 20 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e420,0x0
c000fb0e:	56                   	push   esi
c000fb0f:	53                   	push   ebx
c000fb10:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fb14:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000fb18:	75 65                	jne    c000fb7f <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x79>
c000fb1a:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000fb1f:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000fb24:	83 ec 08             	sub    esp,0x8
c000fb27:	52                   	push   edx
c000fb28:	50                   	push   eax
c000fb29:	e8 10 0c 00 00       	call   c001073e <VgaText::combineColours(unsigned char, unsigned char)>
c000fb2e:	5a                   	pop    edx
c000fb2f:	0f b6 c0             	movzx  eax,al
c000fb32:	59                   	pop    ecx
c000fb33:	50                   	push   eax
c000fb34:	0f be c3             	movsx  eax,bl
c000fb37:	50                   	push   eax
c000fb38:	e8 a7 0c 00 00       	call   c00107e4 <VgaText::combineCharAndColour(char, unsigned char)>
c000fb3d:	83 c4 10             	add    esp,0x10
c000fb40:	8b 35 c0 d2 02 c0    	mov    esi,DWORD PTR ds:0xc002d2c0
c000fb46:	80 3d 20 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e420,0x0
c000fb4d:	74 07                	je     c000fb56 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000fb4f:	66 0f be c3          	movsx  ax,bl
c000fb53:	80 cc 02             	or     ah,0x2
c000fb56:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fb5a:	ba 19 00 00 00       	mov    edx,0x19
c000fb5f:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000fb65:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000fb68:	8d 14 92             	lea    edx,[edx+edx*4]
c000fb6b:	c1 e1 04             	shl    ecx,0x4
c000fb6e:	c1 e2 04             	shl    edx,0x4
c000fb71:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000fb75:	01 ca                	add    edx,ecx
c000fb77:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000fb7b:	5b                   	pop    ebx
c000fb7c:	5e                   	pop    esi
c000fb7d:	5f                   	pop    edi
c000fb7e:	c3                   	ret    
c000fb7f:	b8 02 00 00 00       	mov    eax,0x2
c000fb84:	31 d2                	xor    edx,edx
c000fb86:	eb 9c                	jmp    c000fb24 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000fb88 <setupTextMode()>:
c000fb88:	a1 10 04 00 00       	mov    eax,ds:0x410
c000fb8d:	83 e0 30             	and    eax,0x30
c000fb90:	66 83 f8 30          	cmp    ax,0x30
c000fb94:	75 11                	jne    c000fba7 <setupTextMode()+0x1f>
c000fb96:	81 2d c0 d2 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002d2c0,0x8000
c000fba0:	c6 05 20 e4 02 c0 01 	mov    BYTE PTR ds:0xc002e420,0x1
c000fba7:	c7 05 58 e4 02 c0 13 fa 00 c0 	mov    DWORD PTR ds:0xc002e458,0xc000fa13
c000fbb1:	c7 05 44 e4 02 c0 9a f8 00 c0 	mov    DWORD PTR ds:0xc002e444,0xc000f89a
c000fbbb:	c7 05 40 e4 02 c0 e5 f8 00 c0 	mov    DWORD PTR ds:0xc002e440,0xc000f8e5
c000fbc5:	c7 05 4c e4 02 c0 59 fa 00 c0 	mov    DWORD PTR ds:0xc002e44c,0xc000fa59
c000fbcf:	c7 05 54 e4 02 c0 63 f9 00 c0 	mov    DWORD PTR ds:0xc002e454,0xc000f963
c000fbd9:	c7 05 48 e4 02 c0 c1 f9 00 c0 	mov    DWORD PTR ds:0xc002e448,0xc000f9c1
c000fbe3:	c7 05 50 e4 02 c0 c2 f9 00 c0 	mov    DWORD PTR ds:0xc002e450,0xc000f9c2
c000fbed:	c7 05 5c e4 02 c0 06 fb 00 c0 	mov    DWORD PTR ds:0xc002e45c,0xc000fb06
c000fbf7:	c3                   	ret    

c000fbf8 <kernel_main>:
c000fbf8:	57                   	push   edi
c000fbf9:	bf f9 03 00 00       	mov    edi,0x3f9
c000fbfe:	56                   	push   esi
c000fbff:	31 f6                	xor    esi,esi
c000fc01:	53                   	push   ebx
c000fc02:	83 ec 20             	sub    esp,0x20
c000fc05:	e8 8e 09 00 00       	call   c0010598 <installVgaTextImplementation()>
c000fc0a:	e8 79 ff ff ff       	call   c000fb88 <setupTextMode()>
c000fc0f:	89 f0                	mov    eax,esi
c000fc11:	89 fa                	mov    edx,edi
c000fc13:	ee                   	out    dx,al
c000fc14:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fc19:	b0 80                	mov    al,0x80
c000fc1b:	89 da                	mov    edx,ebx
c000fc1d:	ee                   	out    dx,al
c000fc1e:	b1 03                	mov    cl,0x3
c000fc20:	ba f8 03 00 00       	mov    edx,0x3f8
c000fc25:	88 c8                	mov    al,cl
c000fc27:	ee                   	out    dx,al
c000fc28:	89 f0                	mov    eax,esi
c000fc2a:	89 fa                	mov    edx,edi
c000fc2c:	ee                   	out    dx,al
c000fc2d:	88 c8                	mov    al,cl
c000fc2f:	89 da                	mov    edx,ebx
c000fc31:	ee                   	out    dx,al
c000fc32:	b0 c7                	mov    al,0xc7
c000fc34:	ba fa 03 00 00       	mov    edx,0x3fa
c000fc39:	ee                   	out    dx,al
c000fc3a:	b0 0b                	mov    al,0xb
c000fc3c:	ba fc 03 00 00       	mov    edx,0x3fc
c000fc41:	ee                   	out    dx,al
c000fc42:	83 ec 0c             	sub    esp,0xc
c000fc45:	68 e4 a1 02 c0       	push   0xc002a1e4
c000fc4a:	e8 43 32 00 00       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c000fc4f:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fc54:	05 ff 0f 00 00       	add    eax,0xfff
c000fc59:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fc5e:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc61:	e8 ee 03 00 00       	call   c0010054 <Phys::physicalMemorySetup(unsigned int)>
c000fc66:	e8 15 22 00 00       	call   c0011e80 <Virt::virtualMemorySetup()>
c000fc6b:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fc71:	83 c4 10             	add    esp,0x10
c000fc74:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fc7a:	75 0e                	jne    c000fc8a <kernel_main+0x92>
c000fc7c:	89 d8                	mov    eax,ebx
c000fc7e:	25 48 03 00 00       	and    eax,0x348
c000fc83:	3d 00 03 00 00       	cmp    eax,0x300
c000fc88:	74 10                	je     c000fc9a <kernel_main+0xa2>
c000fc8a:	83 ec 0c             	sub    esp,0xc
c000fc8d:	68 71 ba 02 c0       	push   0xc002ba71
c000fc92:	e8 d6 a8 00 00       	call   c001a56d <Krnl::panic(char const*)>
c000fc97:	83 c4 10             	add    esp,0x10
c000fc9a:	83 ec 0c             	sub    esp,0xc
c000fc9d:	89 1d a0 e3 02 c0    	mov    DWORD PTR ds:0xc002e3a0,ebx
c000fca3:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000fca7:	53                   	push   ebx
c000fca8:	e8 59 22 00 00       	call   c0011f06 <VAS::VAS()>
c000fcad:	89 1d 0c e5 02 c0    	mov    DWORD PTR ds:0xc002e50c,ebx
c000fcb3:	e8 68 03 ff ff       	call   c0000020 <callGlobalConstructors>
c000fcb8:	c7 04 24 fb a1 02 c0 	mov    DWORD PTR [esp],0xc002a1fb
c000fcbf:	e8 ce 31 00 00       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c000fcc4:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fccb:	e8 70 fb ff ff       	call   c000f840 <malloc>
c000fcd0:	89 04 24             	mov    DWORD PTR [esp],eax
c000fcd3:	89 c6                	mov    esi,eax
c000fcd5:	e8 60 ea ff ff       	call   c000e73a <Computer::Computer()>
c000fcda:	58                   	pop    eax
c000fcdb:	89 35 88 e3 02 c0    	mov    DWORD PTR ds:0xc002e388,esi
c000fce1:	5a                   	pop    edx
c000fce2:	56                   	push   esi
c000fce3:	68 18 a2 02 c0       	push   0xc002a218
c000fce8:	e8 a5 31 00 00       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c000fced:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c000fcf2:	8b 10                	mov    edx,DWORD PTR [eax]
c000fcf4:	6a 00                	push   0x0
c000fcf6:	6a 00                	push   0x0
c000fcf8:	6a 00                	push   0x0
c000fcfa:	50                   	push   eax
c000fcfb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fcfe:	83 c4 14             	add    esp,0x14
c000fd01:	53                   	push   ebx
c000fd02:	e8 af 24 00 00       	call   c00121b6 <VAS::~VAS()>
c000fd07:	c7 04 24 2b a2 02 c0 	mov    DWORD PTR [esp],0xc002a22b
c000fd0e:	e8 5a a8 00 00       	call   c001a56d <Krnl::panic(char const*)>
c000fd13:	83 c4 30             	add    esp,0x30
c000fd16:	5b                   	pop    ebx
c000fd17:	5e                   	pop    esi
c000fd18:	5f                   	pop    edi
c000fd19:	c3                   	ret    

c000fd1a <Phys::allocateDMA(unsigned long)>:
c000fd1a:	55                   	push   ebp
c000fd1b:	31 d2                	xor    edx,edx
c000fd1d:	57                   	push   edi
c000fd1e:	31 ed                	xor    ebp,ebp
c000fd20:	56                   	push   esi
c000fd21:	31 c9                	xor    ecx,ecx
c000fd23:	53                   	push   ebx
c000fd24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd28:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fd2e:	31 c0                	xor    eax,eax
c000fd30:	c1 ee 0c             	shr    esi,0xc
c000fd33:	eb 17                	jmp    c000fd4c <Phys::allocateDMA(unsigned long)+0x32>
c000fd35:	85 c9                	test   ecx,ecx
c000fd37:	75 04                	jne    c000fd3d <Phys::allocateDMA(unsigned long)+0x23>
c000fd39:	89 d5                	mov    ebp,edx
c000fd3b:	89 d0                	mov    eax,edx
c000fd3d:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fd40:	39 de                	cmp    esi,ebx
c000fd42:	74 20                	je     c000fd64 <Phys::allocateDMA(unsigned long)+0x4a>
c000fd44:	42                   	inc    edx
c000fd45:	89 d9                	mov    ecx,ebx
c000fd47:	83 fa 2f             	cmp    edx,0x2f
c000fd4a:	7f 11                	jg     c000fd5d <Phys::allocateDMA(unsigned long)+0x43>
c000fd4c:	80 ba e0 e3 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd1c20],0x0
c000fd53:	74 e0                	je     c000fd35 <Phys::allocateDMA(unsigned long)+0x1b>
c000fd55:	31 c9                	xor    ecx,ecx
c000fd57:	42                   	inc    edx
c000fd58:	83 fa 2f             	cmp    edx,0x2f
c000fd5b:	7e ef                	jle    c000fd4c <Phys::allocateDMA(unsigned long)+0x32>
c000fd5d:	5b                   	pop    ebx
c000fd5e:	31 c0                	xor    eax,eax
c000fd60:	5e                   	pop    esi
c000fd61:	5f                   	pop    edi
c000fd62:	5d                   	pop    ebp
c000fd63:	c3                   	ret    
c000fd64:	8d 14 30             	lea    edx,[eax+esi*1]
c000fd67:	89 d7                	mov    edi,edx
c000fd69:	4f                   	dec    edi
c000fd6a:	79 03                	jns    c000fd6f <Phys::allocateDMA(unsigned long)+0x55>
c000fd6c:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fd6f:	c1 ff 04             	sar    edi,0x4
c000fd72:	89 c2                	mov    edx,eax
c000fd74:	c1 fa 04             	sar    edx,0x4
c000fd77:	39 fa                	cmp    edx,edi
c000fd79:	75 2f                	jne    c000fdaa <Phys::allocateDMA(unsigned long)+0x90>
c000fd7b:	85 db                	test   ebx,ebx
c000fd7d:	74 1a                	je     c000fd99 <Phys::allocateDMA(unsigned long)+0x7f>
c000fd7f:	be e0 e3 02 c0       	mov    esi,0xc002e3e0
c000fd84:	8d 90 e0 e3 02 c0    	lea    edx,[eax-0x3ffd1c20]
c000fd8a:	f7 d6                	not    esi
c000fd8c:	29 c6                	sub    esi,eax
c000fd8e:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fd91:	42                   	inc    edx
c000fd92:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fd95:	39 d9                	cmp    ecx,ebx
c000fd97:	7f f5                	jg     c000fd8e <Phys::allocateDMA(unsigned long)+0x74>
c000fd99:	85 ff                	test   edi,edi
c000fd9b:	74 13                	je     c000fdb0 <Phys::allocateDMA(unsigned long)+0x96>
c000fd9d:	5b                   	pop    ebx
c000fd9e:	05 50 20 0c 00       	add    eax,0xc2050
c000fda3:	5e                   	pop    esi
c000fda4:	c1 e0 0c             	shl    eax,0xc
c000fda7:	5f                   	pop    edi
c000fda8:	5d                   	pop    ebp
c000fda9:	c3                   	ret    
c000fdaa:	89 ea                	mov    edx,ebp
c000fdac:	31 c9                	xor    ecx,ecx
c000fdae:	eb a7                	jmp    c000fd57 <Phys::allocateDMA(unsigned long)+0x3d>
c000fdb0:	5b                   	pop    ebx
c000fdb1:	c1 e0 0c             	shl    eax,0xc
c000fdb4:	5e                   	pop    esi
c000fdb5:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fdba:	5f                   	pop    edi
c000fdbb:	5d                   	pop    ebp
c000fdbc:	c3                   	ret    

c000fdbd <Phys::freeDMA(unsigned long, unsigned long)>:
c000fdbd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdc1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fdc5:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fdcb:	c1 e9 0c             	shr    ecx,0xc
c000fdce:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fdd3:	76 25                	jbe    c000fdfa <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fdd5:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fdda:	c1 e8 0c             	shr    eax,0xc
c000fddd:	8d 50 10             	lea    edx,[eax+0x10]
c000fde0:	85 c9                	test   ecx,ecx
c000fde2:	74 15                	je     c000fdf9 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fde4:	8d 82 e0 e3 02 c0    	lea    eax,[edx-0x3ffd1c20]
c000fdea:	8d 94 11 e0 e3 02 c0 	lea    edx,[ecx+edx*1-0x3ffd1c20]
c000fdf1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fdf4:	40                   	inc    eax
c000fdf5:	39 d0                	cmp    eax,edx
c000fdf7:	75 f8                	jne    c000fdf1 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fdf9:	c3                   	ret    
c000fdfa:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fe00:	c1 ea 0c             	shr    edx,0xc
c000fe03:	eb db                	jmp    c000fde0 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fe05 <Phys::setPageState(unsigned long, bool)>:
c000fe05:	56                   	push   esi
c000fe06:	ba 01 00 00 00       	mov    edx,0x1
c000fe0b:	53                   	push   ebx
c000fe0c:	8b 35 bc d2 02 c0    	mov    esi,DWORD PTR ds:0xc002d2bc
c000fe12:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe16:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe1a:	89 c8                	mov    eax,ecx
c000fe1c:	83 e1 07             	and    ecx,0x7
c000fe1f:	c1 e8 03             	shr    eax,0x3
c000fe22:	d3 e3                	shl    ebx,cl
c000fe24:	01 c6                	add    esi,eax
c000fe26:	d3 e2                	shl    edx,cl
c000fe28:	f7 d2                	not    edx
c000fe2a:	20 16                	and    BYTE PTR [esi],dl
c000fe2c:	03 05 bc d2 02 c0    	add    eax,DWORD PTR ds:0xc002d2bc
c000fe32:	08 18                	or     BYTE PTR [eax],bl
c000fe34:	5b                   	pop    ebx
c000fe35:	5e                   	pop    esi
c000fe36:	c3                   	ret    

c000fe37 <Phys::getPageState(unsigned long)>:
c000fe37:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fe3b:	8b 15 bc d2 02 c0    	mov    edx,DWORD PTR ds:0xc002d2bc
c000fe41:	89 c8                	mov    eax,ecx
c000fe43:	83 e1 07             	and    ecx,0x7
c000fe46:	c1 e8 03             	shr    eax,0x3
c000fe49:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fe4d:	d3 f8                	sar    eax,cl
c000fe4f:	83 e0 01             	and    eax,0x1
c000fe52:	c3                   	ret    

c000fe53 <Phys::freePage(unsigned long)>:
c000fe53:	53                   	push   ebx
c000fe54:	83 ec 08             	sub    esp,0x8
c000fe57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe5b:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fe61:	76 57                	jbe    c000feba <Phys::freePage(unsigned long)+0x67>
c000fe63:	c1 eb 0c             	shr    ebx,0xc
c000fe66:	53                   	push   ebx
c000fe67:	e8 cb ff ff ff       	call   c000fe37 <Phys::getPageState(unsigned long)>
c000fe6c:	5a                   	pop    edx
c000fe6d:	84 c0                	test   al,al
c000fe6f:	74 5b                	je     c000fecc <Phys::freePage(unsigned long)+0x79>
c000fe71:	a1 d0 e3 02 c0       	mov    eax,ds:0xc002e3d0
c000fe76:	48                   	dec    eax
c000fe77:	a3 d0 e3 02 c0       	mov    ds:0xc002e3d0,eax
c000fe7c:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe7f:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe82:	c1 e0 02             	shl    eax,0x2
c000fe85:	99                   	cdq    
c000fe86:	f7 3d d4 e3 02 c0    	idiv   DWORD PTR ds:0xc002e3d4
c000fe8c:	39 05 cc e3 02 c0    	cmp    DWORD PTR ds:0xc002e3cc,eax
c000fe92:	75 13                	jne    c000fea7 <Phys::freePage(unsigned long)+0x54>
c000fe94:	83 ec 08             	sub    esp,0x8
c000fe97:	6a 00                	push   0x0
c000fe99:	53                   	push   ebx
c000fe9a:	e8 66 ff ff ff       	call   c000fe05 <Phys::setPageState(unsigned long, bool)>
c000fe9f:	83 c4 10             	add    esp,0x10
c000fea2:	83 c4 08             	add    esp,0x8
c000fea5:	5b                   	pop    ebx
c000fea6:	c3                   	ret    
c000fea7:	83 ec 0c             	sub    esp,0xc
c000feaa:	a3 cc e3 02 c0       	mov    ds:0xc002e3cc,eax
c000feaf:	50                   	push   eax
c000feb0:	e8 77 0a 00 00       	call   c001092c <VgaText::updateRAMUsageDisplay(int)>
c000feb5:	83 c4 10             	add    esp,0x10
c000feb8:	eb da                	jmp    c000fe94 <Phys::freePage(unsigned long)+0x41>
c000feba:	68 00 10 00 00       	push   0x1000
c000febf:	53                   	push   ebx
c000fec0:	e8 f8 fe ff ff       	call   c000fdbd <Phys::freeDMA(unsigned long, unsigned long)>
c000fec5:	59                   	pop    ecx
c000fec6:	5b                   	pop    ebx
c000fec7:	83 c4 08             	add    esp,0x8
c000feca:	5b                   	pop    ebx
c000fecb:	c3                   	ret    
c000fecc:	c7 44 24 10 46 a2 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a246
c000fed4:	83 c4 08             	add    esp,0x8
c000fed7:	5b                   	pop    ebx
c000fed8:	e9 90 a6 00 00       	jmp    c001a56d <Krnl::panic(char const*)>

c000fedd <Phys::allocatePage()>:
c000fedd:	56                   	push   esi
c000fede:	53                   	push   ebx
c000fedf:	51                   	push   ecx
c000fee0:	8b 35 c4 e3 02 c0    	mov    esi,DWORD PTR ds:0xc002e3c4
c000fee6:	89 f3                	mov    ebx,esi
c000fee8:	eb 0a                	jmp    c000fef4 <Phys::allocatePage()+0x17>
c000feea:	89 1d c4 e3 02 c0    	mov    DWORD PTR ds:0xc002e3c4,ebx
c000fef0:	39 de                	cmp    esi,ebx
c000fef2:	74 24                	je     c000ff18 <Phys::allocatePage()+0x3b>
c000fef4:	53                   	push   ebx
c000fef5:	e8 3d ff ff ff       	call   c000fe37 <Phys::getPageState(unsigned long)>
c000fefa:	5a                   	pop    edx
c000fefb:	84 c0                	test   al,al
c000fefd:	74 77                	je     c000ff76 <Phys::allocatePage()+0x99>
c000feff:	43                   	inc    ebx
c000ff00:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ff06:	75 e2                	jne    c000feea <Phys::allocatePage()+0xd>
c000ff08:	31 db                	xor    ebx,ebx
c000ff0a:	c7 05 c4 e3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e3c4,0x0
c000ff14:	39 de                	cmp    esi,ebx
c000ff16:	75 dc                	jne    c000fef4 <Phys::allocatePage()+0x17>
c000ff18:	83 ec 0c             	sub    esp,0xc
c000ff1b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ff20:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ff23:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c000ff29:	e8 60 2c 00 00       	call   c0012b8e <VAS::scanForEviction()>
c000ff2e:	83 c4 10             	add    esp,0x10
c000ff31:	85 c0                	test   eax,eax
c000ff33:	75 76                	jne    c000ffab <Phys::allocatePage()+0xce>
c000ff35:	83 ec 0c             	sub    esp,0xc
c000ff38:	68 5c a2 02 c0       	push   0xc002a25c
c000ff3d:	e8 50 2f 00 00       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c000ff42:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000ff49:	e8 cc fd ff ff       	call   c000fd1a <Phys::allocateDMA(unsigned long)>
c000ff4e:	83 c4 10             	add    esp,0x10
c000ff51:	85 c0                	test   eax,eax
c000ff53:	75 56                	jne    c000ffab <Phys::allocatePage()+0xce>
c000ff55:	83 ec 0c             	sub    esp,0xc
c000ff58:	68 6d a2 02 c0       	push   0xc002a26d
c000ff5d:	e8 0b a6 00 00       	call   c001a56d <Krnl::panic(char const*)>
c000ff62:	83 c4 10             	add    esp,0x10
c000ff65:	8b 1d c4 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e3c4
c000ff6b:	53                   	push   ebx
c000ff6c:	e8 c6 fe ff ff       	call   c000fe37 <Phys::getPageState(unsigned long)>
c000ff71:	5a                   	pop    edx
c000ff72:	84 c0                	test   al,al
c000ff74:	75 89                	jne    c000feff <Phys::allocatePage()+0x22>
c000ff76:	6a 01                	push   0x1
c000ff78:	53                   	push   ebx
c000ff79:	e8 87 fe ff ff       	call   c000fe05 <Phys::setPageState(unsigned long, bool)>
c000ff7e:	a1 d0 e3 02 c0       	mov    eax,ds:0xc002e3d0
c000ff83:	59                   	pop    ecx
c000ff84:	40                   	inc    eax
c000ff85:	5b                   	pop    ebx
c000ff86:	a3 d0 e3 02 c0       	mov    ds:0xc002e3d0,eax
c000ff8b:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff8e:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff91:	c1 e0 02             	shl    eax,0x2
c000ff94:	99                   	cdq    
c000ff95:	f7 3d d4 e3 02 c0    	idiv   DWORD PTR ds:0xc002e3d4
c000ff9b:	39 05 cc e3 02 c0    	cmp    DWORD PTR ds:0xc002e3cc,eax
c000ffa1:	75 0c                	jne    c000ffaf <Phys::allocatePage()+0xd2>
c000ffa3:	a1 c4 e3 02 c0       	mov    eax,ds:0xc002e3c4
c000ffa8:	c1 e0 0c             	shl    eax,0xc
c000ffab:	5a                   	pop    edx
c000ffac:	5b                   	pop    ebx
c000ffad:	5e                   	pop    esi
c000ffae:	c3                   	ret    
c000ffaf:	83 ec 0c             	sub    esp,0xc
c000ffb2:	a3 cc e3 02 c0       	mov    ds:0xc002e3cc,eax
c000ffb7:	50                   	push   eax
c000ffb8:	e8 6f 09 00 00       	call   c001092c <VgaText::updateRAMUsageDisplay(int)>
c000ffbd:	83 c4 10             	add    esp,0x10
c000ffc0:	eb e1                	jmp    c000ffa3 <Phys::allocatePage()+0xc6>

c000ffc2 <Phys::allocateContiguousPages(int)>:
c000ffc2:	57                   	push   edi
c000ffc3:	56                   	push   esi
c000ffc4:	53                   	push   ebx
c000ffc5:	31 db                	xor    ebx,ebx
c000ffc7:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000ffcb:	e8 97 dd 00 00       	call   c001dd67 <lockScheduler()>
c000ffd0:	85 db                	test   ebx,ebx
c000ffd2:	75 11                	jne    c000ffe5 <Phys::allocateContiguousPages(int)+0x23>
c000ffd4:	e8 04 ff ff ff       	call   c000fedd <Phys::allocatePage()>
c000ffd9:	83 ff 01             	cmp    edi,0x1
c000ffdc:	89 c6                	mov    esi,eax
c000ffde:	74 21                	je     c0010001 <Phys::allocateContiguousPages(int)+0x3f>
c000ffe0:	bb 01 00 00 00       	mov    ebx,0x1
c000ffe5:	e8 f3 fe ff ff       	call   c000fedd <Phys::allocatePage()>
c000ffea:	89 da                	mov    edx,ebx
c000ffec:	c1 e2 0c             	shl    edx,0xc
c000ffef:	01 f2                	add    edx,esi
c000fff1:	39 c2                	cmp    edx,eax
c000fff3:	74 17                	je     c001000c <Phys::allocateContiguousPages(int)+0x4a>
c000fff5:	bb 01 00 00 00       	mov    ebx,0x1
c000fffa:	89 c6                	mov    esi,eax
c000fffc:	83 ff 01             	cmp    edi,0x1
c000ffff:	75 e4                	jne    c000ffe5 <Phys::allocateContiguousPages(int)+0x23>
c0010001:	e8 63 dd 00 00       	call   c001dd69 <unlockScheduler()>
c0010006:	89 f0                	mov    eax,esi
c0010008:	5b                   	pop    ebx
c0010009:	5e                   	pop    esi
c001000a:	5f                   	pop    edi
c001000b:	c3                   	ret    
c001000c:	43                   	inc    ebx
c001000d:	39 fb                	cmp    ebx,edi
c001000f:	75 bf                	jne    c000ffd0 <Phys::allocateContiguousPages(int)+0xe>
c0010011:	e8 53 dd 00 00       	call   c001dd69 <unlockScheduler()>
c0010016:	89 f0                	mov    eax,esi
c0010018:	5b                   	pop    ebx
c0010019:	5e                   	pop    esi
c001001a:	5f                   	pop    edi
c001001b:	c3                   	ret    

c001001c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c001001c:	56                   	push   esi
c001001d:	53                   	push   ebx
c001001e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010022:	39 1d c8 e3 02 c0    	cmp    DWORD PTR ds:0xc002e3c8,ebx
c0010028:	73 06                	jae    c0010030 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c001002a:	89 1d c8 e3 02 c0    	mov    DWORD PTR ds:0xc002e3c8,ebx
c0010030:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010034:	c1 eb 0c             	shr    ebx,0xc
c0010037:	c1 e8 0c             	shr    eax,0xc
c001003a:	39 d8                	cmp    eax,ebx
c001003c:	73 13                	jae    c0010051 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c001003e:	6a 00                	push   0x0
c0010040:	8d 70 01             	lea    esi,[eax+0x1]
c0010043:	50                   	push   eax
c0010044:	e8 bc fd ff ff       	call   c000fe05 <Phys::setPageState(unsigned long, bool)>
c0010049:	5a                   	pop    edx
c001004a:	89 f0                	mov    eax,esi
c001004c:	59                   	pop    ecx
c001004d:	39 f3                	cmp    ebx,esi
c001004f:	75 ed                	jne    c001003e <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0010051:	5b                   	pop    ebx
c0010052:	5e                   	pop    esi
c0010053:	c3                   	ret    

c0010054 <Phys::physicalMemorySetup(unsigned int)>:
c0010054:	55                   	push   ebp
c0010055:	57                   	push   edi
c0010056:	56                   	push   esi
c0010057:	53                   	push   ebx
c0010058:	31 db                	xor    ebx,ebx
c001005a:	83 ec 40             	sub    esp,0x40
c001005d:	6a 30                	push   0x30
c001005f:	6a 00                	push   0x0
c0010061:	68 e0 e3 02 c0       	push   0xc002e3e0
c0010066:	e8 0d 07 ff ff       	call   c0000778 <memset>
c001006b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001006f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0010074:	05 00 10 00 00       	add    eax,0x1000
c0010079:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001007d:	83 c4 10             	add    esp,0x10
c0010080:	83 ec 08             	sub    esp,0x8
c0010083:	6a 01                	push   0x1
c0010085:	53                   	push   ebx
c0010086:	43                   	inc    ebx
c0010087:	e8 79 fd ff ff       	call   c000fe05 <Phys::setPageState(unsigned long, bool)>
c001008c:	83 c4 10             	add    esp,0x10
c001008f:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0010095:	75 e9                	jne    c0010080 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c0010097:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c001009e:	66 85 c0             	test   ax,ax
c00100a1:	0f 84 8e 01 00 00    	je     c0010235 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c00100a7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00100ab:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00100b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00100b7:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c00100bc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00100c0:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00100c8:	eb 15                	jmp    c00100df <Phys::physicalMemorySetup(unsigned int)+0x8b>
c00100ca:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00100ce:	83 c3 18             	add    ebx,0x18
c00100d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00100d5:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00100d9:	0f 84 66 01 00 00    	je     c0010245 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c00100df:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00100e2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00100e5:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00100e8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00100ec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00100f0:	8b 33                	mov    esi,DWORD PTR [ebx]
c00100f2:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c00100f5:	01 f0                	add    eax,esi
c00100f7:	55                   	push   ebp
c00100f8:	11 fa                	adc    edx,edi
c00100fa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00100fe:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0010102:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0010106:	56                   	push   esi
c0010107:	68 a8 a2 02 c0       	push   0xc002a2a8
c001010c:	e8 81 2d 00 00       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0010111:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010115:	83 c4 10             	add    esp,0x10
c0010118:	09 f8                	or     eax,edi
c001011a:	0f 85 25 01 00 00    	jne    c0010245 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c0010120:	4d                   	dec    ebp
c0010121:	75 a7                	jne    c00100ca <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010123:	ba 00 00 08 00       	mov    edx,0x80000
c0010128:	89 c1                	mov    ecx,eax
c001012a:	39 f2                	cmp    edx,esi
c001012c:	19 f9                	sbb    ecx,edi
c001012e:	0f 82 a7 00 00 00    	jb     c00101db <Phys::physicalMemorySetup(unsigned int)+0x187>
c0010134:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0010138:	89 c1                	mov    ecx,eax
c001013a:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c001013e:	0f 83 97 00 00 00    	jae    c00101db <Phys::physicalMemorySetup(unsigned int)+0x187>
c0010144:	ba 00 00 0a 00       	mov    edx,0xa0000
c0010149:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001014d:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010151:	39 fa                	cmp    edx,edi
c0010153:	19 e8                	sbb    eax,ebp
c0010155:	0f 82 14 01 00 00    	jb     c001026f <Phys::physicalMemorySetup(unsigned int)+0x21b>
c001015b:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001015f:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010163:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0010169:	ba ff 1f 00 00       	mov    edx,0x1fff
c001016e:	83 d5 ff             	adc    ebp,0xffffffff
c0010171:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0010175:	31 c0                	xor    eax,eax
c0010177:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c001017b:	39 fa                	cmp    edx,edi
c001017d:	89 c1                	mov    ecx,eax
c001017f:	19 e9                	sbb    ecx,ebp
c0010181:	0f 83 43 ff ff ff    	jae    c00100ca <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010187:	be 00 00 08 00       	mov    esi,0x80000
c001018c:	50                   	push   eax
c001018d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0010191:	57                   	push   edi
c0010192:	56                   	push   esi
c0010193:	68 cc a2 02 c0       	push   0xc002a2cc
c0010198:	e8 f5 2c 00 00       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001019d:	5a                   	pop    edx
c001019e:	59                   	pop    ecx
c001019f:	57                   	push   edi
c00101a0:	56                   	push   esi
c00101a1:	e8 76 fe ff ff       	call   c001001c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00101a6:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00101aa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00101ae:	83 c4 0c             	add    esp,0xc
c00101b1:	0f ac d0 0c          	shrd   eax,edx,0xc
c00101b5:	03 05 d4 e3 02 c0    	add    eax,DWORD PTR ds:0xc002e3d4
c00101bb:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00101c2:	a3 d4 e3 02 c0       	mov    ds:0xc002e3d4,eax
c00101c7:	52                   	push   edx
c00101c8:	50                   	push   eax
c00101c9:	68 89 a2 02 c0       	push   0xc002a289
c00101ce:	e8 bf 2c 00 00       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c00101d3:	83 c4 10             	add    esp,0x10
c00101d6:	e9 ef fe ff ff       	jmp    c00100ca <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101db:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00101df:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101e3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00101e7:	39 ea                	cmp    edx,ebp
c00101e9:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c00101ed:	0f 82 d7 fe ff ff    	jb     c00100ca <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101f3:	ba ff 1f 00 00       	mov    edx,0x1fff
c00101f8:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00101fc:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0010200:	0f 83 c4 fe ff ff    	jae    c00100ca <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010206:	39 ee                	cmp    esi,ebp
c0010208:	89 f8                	mov    eax,edi
c001020a:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c001020e:	0f 83 78 ff ff ff    	jae    c001018c <Phys::physicalMemorySetup(unsigned int)+0x138>
c0010214:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010218:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001021c:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0010220:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010224:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0010228:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001022c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010230:	e9 57 ff ff ff       	jmp    c001018c <Phys::physicalMemorySetup(unsigned int)+0x138>
c0010235:	83 ec 0c             	sub    esp,0xc
c0010238:	68 7b a2 02 c0       	push   0xc002a27b
c001023d:	e8 2b a3 00 00       	call   c001a56d <Krnl::panic(char const*)>
c0010242:	83 c4 10             	add    esp,0x10
c0010245:	bb 40 01 00 00       	mov    ebx,0x140
c001024a:	83 ec 08             	sub    esp,0x8
c001024d:	6a 00                	push   0x0
c001024f:	53                   	push   ebx
c0010250:	43                   	inc    ebx
c0010251:	e8 af fb ff ff       	call   c000fe05 <Phys::setPageState(unsigned long, bool)>
c0010256:	ff 05 d4 e3 02 c0    	inc    DWORD PTR ds:0xc002e3d4
c001025c:	83 c4 10             	add    esp,0x10
c001025f:	81 fb 80 01 00 00    	cmp    ebx,0x180
c0010265:	75 e3                	jne    c001024a <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c0010267:	83 c4 3c             	add    esp,0x3c
c001026a:	5b                   	pop    ebx
c001026b:	5e                   	pop    esi
c001026c:	5f                   	pop    edi
c001026d:	5d                   	pop    ebp
c001026e:	c3                   	ret    
c001026f:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0010277:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001027f:	e9 d7 fe ff ff       	jmp    c001015b <Phys::physicalMemorySetup(unsigned int)+0x107>

c0010284 <Pipe::isAtty()>:
c0010284:	31 c0                	xor    eax,eax
c0010286:	c3                   	ret    
c0010287:	90                   	nop

c0010288 <Pipe::~Pipe()>:
c0010288:	83 ec 0c             	sub    esp,0xc
c001028b:	ba 38 a3 02 c0       	mov    edx,0xc002a338
c0010290:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010294:	89 10                	mov    DWORD PTR [eax],edx
c0010296:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001029a:	83 ec 0c             	sub    esp,0xc
c001029d:	50                   	push   eax
c001029e:	e8 37 16 00 00       	call   c00118da <UnixFile::~UnixFile()>
c00102a3:	83 c4 10             	add    esp,0x10
c00102a6:	90                   	nop
c00102a7:	83 c4 0c             	add    esp,0xc
c00102aa:	c3                   	ret    
c00102ab:	90                   	nop

c00102ac <Pipe::~Pipe()>:
c00102ac:	83 ec 0c             	sub    esp,0xc
c00102af:	83 ec 0c             	sub    esp,0xc
c00102b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102b6:	e8 cd ff ff ff       	call   c0010288 <Pipe::~Pipe()>
c00102bb:	83 c4 10             	add    esp,0x10
c00102be:	83 ec 08             	sub    esp,0x8
c00102c1:	6a 20                	push   0x20
c00102c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102c7:	e8 e6 2a 00 00       	call   c0012db2 <operator delete(void*, unsigned long)>
c00102cc:	83 c4 10             	add    esp,0x10
c00102cf:	83 c4 0c             	add    esp,0xc
c00102d2:	c3                   	ret    
c00102d3:	90                   	nop

c00102d4 <Pipe::read(unsigned long long, void*, int*)>:
c00102d4:	55                   	push   ebp
c00102d5:	57                   	push   edi
c00102d6:	56                   	push   esi
c00102d7:	53                   	push   ebx
c00102d8:	83 ec 1c             	sub    esp,0x1c
c00102db:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00102df:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00102e3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00102e7:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00102ea:	89 c8                	mov    eax,ecx
c00102ec:	99                   	cdq    
c00102ed:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c00102f1:	74 19                	je     c001030c <Pipe::read(unsigned long long, void*, int*)+0x38>
c00102f3:	39 f9                	cmp    ecx,edi
c00102f5:	89 d1                	mov    ecx,edx
c00102f7:	19 f1                	sbb    ecx,esi
c00102f9:	73 11                	jae    c001030c <Pipe::read(unsigned long long, void*, int*)+0x38>
c00102fb:	e8 67 da 00 00       	call   c001dd67 <lockScheduler()>
c0010300:	e8 9d dd 00 00       	call   c001e0a2 <schedule()>
c0010305:	e8 5f da 00 00       	call   c001dd69 <unlockScheduler()>
c001030a:	eb db                	jmp    c00102e7 <Pipe::read(unsigned long long, void*, int*)+0x13>
c001030c:	39 f8                	cmp    eax,edi
c001030e:	89 d1                	mov    ecx,edx
c0010310:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0010314:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0010318:	19 f1                	sbb    ecx,esi
c001031a:	73 08                	jae    c0010324 <Pipe::read(unsigned long long, void*, int*)+0x50>
c001031c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010320:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010324:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010327:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c001032a:	29 c6                	sub    esi,eax
c001032c:	89 f1                	mov    ecx,esi
c001032e:	c1 f9 1f             	sar    ecx,0x1f
c0010331:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0010335:	89 ca                	mov    edx,ecx
c0010337:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001033b:	19 d1                	sbb    ecx,edx
c001033d:	73 04                	jae    c0010343 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c001033f:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0010343:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010347:	89 fd                	mov    ebp,edi
c0010349:	29 f5                	sub    ebp,esi
c001034b:	85 f6                	test   esi,esi
c001034d:	74 12                	je     c0010361 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c001034f:	52                   	push   edx
c0010350:	56                   	push   esi
c0010351:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c0010354:	50                   	push   eax
c0010355:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0010359:	e8 e6 03 ff ff       	call   c0000744 <memcpy>
c001035e:	83 c4 10             	add    esp,0x10
c0010361:	85 ed                	test   ebp,ebp
c0010363:	74 12                	je     c0010377 <Pipe::read(unsigned long long, void*, int*)+0xa3>
c0010365:	50                   	push   eax
c0010366:	55                   	push   ebp
c0010367:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c001036a:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c001036e:	56                   	push   esi
c001036f:	e8 d0 03 ff ff       	call   c0000744 <memcpy>
c0010374:	83 c4 10             	add    esp,0x10
c0010377:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c001037a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001037d:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010380:	99                   	cdq    
c0010381:	89 f7                	mov    edi,esi
c0010383:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0010387:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c001038b:	c1 ff 1f             	sar    edi,0x1f
c001038e:	57                   	push   edi
c001038f:	56                   	push   esi
c0010390:	52                   	push   edx
c0010391:	50                   	push   eax
c0010392:	e8 d5 66 01 00       	call   c0026a6c <__umoddi3>
c0010397:	83 c4 10             	add    esp,0x10
c001039a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001039d:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00103a2:	75 10                	jne    c00103b4 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c00103a4:	83 ec 0c             	sub    esp,0xc
c00103a7:	68 f5 a2 02 c0       	push   0xc002a2f5
c00103ac:	e8 bc a1 00 00       	call   c001a56d <Krnl::panic(char const*)>
c00103b1:	83 c4 10             	add    esp,0x10
c00103b4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00103b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00103bc:	89 10                	mov    DWORD PTR [eax],edx
c00103be:	83 c4 1c             	add    esp,0x1c
c00103c1:	31 c0                	xor    eax,eax
c00103c3:	5b                   	pop    ebx
c00103c4:	5e                   	pop    esi
c00103c5:	5f                   	pop    edi
c00103c6:	5d                   	pop    ebp
c00103c7:	c3                   	ret    

c00103c8 <Pipe::write(unsigned long long, void*, int*)>:
c00103c8:	55                   	push   ebp
c00103c9:	57                   	push   edi
c00103ca:	56                   	push   esi
c00103cb:	53                   	push   ebx
c00103cc:	83 ec 1c             	sub    esp,0x1c
c00103cf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00103d3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00103d7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00103db:	89 04 24             	mov    DWORD PTR [esp],eax
c00103de:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c00103e1:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c00103e4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00103e8:	89 de                	mov    esi,ebx
c00103ea:	89 df                	mov    edi,ebx
c00103ec:	c1 ff 1f             	sar    edi,0x1f
c00103ef:	01 c6                	add    esi,eax
c00103f1:	89 c8                	mov    eax,ecx
c00103f3:	11 d7                	adc    edi,edx
c00103f5:	99                   	cdq    
c00103f6:	39 f1                	cmp    ecx,esi
c00103f8:	89 d0                	mov    eax,edx
c00103fa:	19 f8                	sbb    eax,edi
c00103fc:	b8 01 00 00 00       	mov    eax,0x1
c0010401:	0f 82 80 00 00 00    	jb     c0010487 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c0010407:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001040a:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001040d:	01 d8                	add    eax,ebx
c001040f:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0010413:	99                   	cdq    
c0010414:	f7 f9                	idiv   ecx
c0010416:	29 d1                	sub    ecx,edx
c0010418:	89 d7                	mov    edi,edx
c001041a:	89 c8                	mov    eax,ecx
c001041c:	99                   	cdq    
c001041d:	39 ce                	cmp    esi,ecx
c001041f:	19 d3                	sbb    ebx,edx
c0010421:	bb 00 00 00 00       	mov    ebx,0x0
c0010426:	72 04                	jb     c001042c <Pipe::write(unsigned long long, void*, int*)+0x64>
c0010428:	89 f3                	mov    ebx,esi
c001042a:	29 cb                	sub    ebx,ecx
c001042c:	89 f1                	mov    ecx,esi
c001042e:	29 d9                	sub    ecx,ebx
c0010430:	74 1a                	je     c001044c <Pipe::write(unsigned long long, void*, int*)+0x84>
c0010432:	52                   	push   edx
c0010433:	51                   	push   ecx
c0010434:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010438:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001043c:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c001043f:	57                   	push   edi
c0010440:	e8 ff 02 ff ff       	call   c0000744 <memcpy>
c0010445:	83 c4 10             	add    esp,0x10
c0010448:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001044c:	85 db                	test   ebx,ebx
c001044e:	74 12                	je     c0010462 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c0010450:	50                   	push   eax
c0010451:	53                   	push   ebx
c0010452:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c0010456:	51                   	push   ecx
c0010457:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c001045a:	e8 e5 02 ff ff       	call   c0000744 <memcpy>
c001045f:	83 c4 10             	add    esp,0x10
c0010462:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c0010465:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c001046a:	75 10                	jne    c001047c <Pipe::write(unsigned long long, void*, int*)+0xb4>
c001046c:	83 ec 0c             	sub    esp,0xc
c001046f:	68 11 a3 02 c0       	push   0xc002a311
c0010474:	e8 f4 a0 00 00       	call   c001a56d <Krnl::panic(char const*)>
c0010479:	83 c4 10             	add    esp,0x10
c001047c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010480:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0010483:	89 38                	mov    DWORD PTR [eax],edi
c0010485:	31 c0                	xor    eax,eax
c0010487:	83 c4 1c             	add    esp,0x1c
c001048a:	5b                   	pop    ebx
c001048b:	5e                   	pop    esi
c001048c:	5f                   	pop    edi
c001048d:	5d                   	pop    ebp
c001048e:	c3                   	ret    
c001048f:	90                   	nop

c0010490 <Pipe::Pipe(int)>:
c0010490:	83 ec 0c             	sub    esp,0xc
c0010493:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010497:	83 ec 08             	sub    esp,0x8
c001049a:	6a 00                	push   0x0
c001049c:	50                   	push   eax
c001049d:	e8 56 12 00 00       	call   c00116f8 <UnixFile::UnixFile(int)>
c00104a2:	83 c4 10             	add    esp,0x10
c00104a5:	ba 38 a3 02 c0       	mov    edx,0xc002a338
c00104aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104ae:	89 10                	mov    DWORD PTR [eax],edx
c00104b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104b4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00104b8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00104bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104bf:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00104c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104ca:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00104d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00104d5:	83 ec 0c             	sub    esp,0xc
c00104d8:	50                   	push   eax
c00104d9:	e8 62 f3 ff ff       	call   c000f840 <malloc>
c00104de:	83 c4 10             	add    esp,0x10
c00104e1:	89 c2                	mov    edx,eax
c00104e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104e7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00104ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104ee:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00104f2:	90                   	nop
c00104f3:	83 c4 0c             	add    esp,0xc
c00104f6:	c3                   	ret    
c00104f7:	90                   	nop

c00104f8 <VgaText::isAtty()>:
c00104f8:	b0 01                	mov    al,0x1
c00104fa:	c3                   	ret    
c00104fb:	90                   	nop

c00104fc <VgaText::~VgaText()>:
c00104fc:	83 ec 0c             	sub    esp,0xc
c00104ff:	ba f4 a3 02 c0       	mov    edx,0xc002a3f4
c0010504:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010508:	89 10                	mov    DWORD PTR [eax],edx
c001050a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001050e:	83 ec 0c             	sub    esp,0xc
c0010511:	50                   	push   eax
c0010512:	e8 c3 13 00 00       	call   c00118da <UnixFile::~UnixFile()>
c0010517:	83 c4 10             	add    esp,0x10
c001051a:	90                   	nop
c001051b:	83 c4 0c             	add    esp,0xc
c001051e:	c3                   	ret    
c001051f:	90                   	nop

c0010520 <VgaText::~VgaText()>:
c0010520:	83 ec 0c             	sub    esp,0xc
c0010523:	83 ec 0c             	sub    esp,0xc
c0010526:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001052a:	e8 cd ff ff ff       	call   c00104fc <VgaText::~VgaText()>
c001052f:	83 c4 10             	add    esp,0x10
c0010532:	83 ec 08             	sub    esp,0x8
c0010535:	68 60 12 00 00       	push   0x1260
c001053a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001053e:	e8 6f 28 00 00       	call   c0012db2 <operator delete(void*, unsigned long)>
c0010543:	83 c4 10             	add    esp,0x10
c0010546:	83 c4 0c             	add    esp,0xc
c0010549:	c3                   	ret    

c001054a <VgaText::read(unsigned long long, void*, int*)>:
c001054a:	83 ec 10             	sub    esp,0x10
c001054d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010551:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010555:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010559:	e8 0c 5d 00 00       	call   c001626a <readKeyboard(VgaText*, char*, unsigned long)>
c001055e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010562:	89 02                	mov    DWORD PTR [edx],eax
c0010564:	31 c0                	xor    eax,eax
c0010566:	83 c4 1c             	add    esp,0x1c
c0010569:	c3                   	ret    

c001056a <setTerminalScrollLock(bool)>:
c001056a:	c3                   	ret    

c001056b <addToTerminalCycle(VgaText*)>:
c001056b:	8b 15 60 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e460
c0010571:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010575:	85 d2                	test   edx,edx
c0010577:	75 0c                	jne    c0010585 <addToTerminalCycle(VgaText*)+0x1a>
c0010579:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c001057f:	a3 60 e4 02 c0       	mov    ds:0xc002e460,eax
c0010584:	c3                   	ret    
c0010585:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c001058b:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c0010591:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c0010597:	c3                   	ret    

c0010598 <installVgaTextImplementation()>:
c0010598:	83 ec 10             	sub    esp,0x10
c001059b:	6a 20                	push   0x20
c001059d:	6a 00                	push   0x0
c001059f:	68 40 e4 02 c0       	push   0xc002e440
c00105a4:	e8 cf 01 ff ff       	call   c0000778 <memset>
c00105a9:	83 c4 1c             	add    esp,0x1c
c00105ac:	c3                   	ret    

c00105ad <scrollTerminalScrollLock(int)>:
c00105ad:	c3                   	ret    

c00105ae <VgaText::load()>:
c00105ae:	53                   	push   ebx
c00105af:	31 c0                	xor    eax,eax
c00105b1:	83 ec 58             	sub    esp,0x58
c00105b4:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c00105b8:	89 e2                	mov    edx,esp
c00105ba:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c00105be:	40                   	inc    eax
c00105bf:	83 f8 50             	cmp    eax,0x50
c00105c2:	75 f6                	jne    c00105ba <VgaText::load()+0xc>
c00105c4:	31 c0                	xor    eax,eax
c00105c6:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c00105cd:	84 c9                	test   cl,cl
c00105cf:	74 06                	je     c00105d7 <VgaText::load()+0x29>
c00105d1:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00105d4:	40                   	inc    eax
c00105d5:	eb ef                	jmp    c00105c6 <VgaText::load()+0x18>
c00105d7:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c00105dd:	85 c0                	test   eax,eax
c00105df:	74 09                	je     c00105ea <VgaText::load()+0x3c>
c00105e1:	51                   	push   ecx
c00105e2:	51                   	push   ecx
c00105e3:	52                   	push   edx
c00105e4:	53                   	push   ebx
c00105e5:	ff d0                	call   eax
c00105e7:	83 c4 10             	add    esp,0x10
c00105ea:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c00105f0:	85 c0                	test   eax,eax
c00105f2:	74 09                	je     c00105fd <VgaText::load()+0x4f>
c00105f4:	83 ec 0c             	sub    esp,0xc
c00105f7:	53                   	push   ebx
c00105f8:	ff d0                	call   eax
c00105fa:	83 c4 10             	add    esp,0x10
c00105fd:	83 c4 58             	add    esp,0x58
c0010600:	5b                   	pop    ebx
c0010601:	c3                   	ret    

c0010602 <VgaText::updateCursor()>:
c0010602:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010606:	39 05 64 e4 02 c0    	cmp    DWORD PTR ds:0xc002e464,eax
c001060c:	75 0c                	jne    c001061a <VgaText::updateCursor()+0x18>
c001060e:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c0010614:	85 c0                	test   eax,eax
c0010616:	74 02                	je     c001061a <VgaText::updateCursor()+0x18>
c0010618:	ff e0                	jmp    eax
c001061a:	c3                   	ret    
c001061b:	90                   	nop

c001061c <VgaText::showCursor(bool)>:
c001061c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010620:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010624:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c001062a:	c3                   	ret    
c001062b:	90                   	nop

c001062c <VgaText::disableBlink(bool)>:
c001062c:	56                   	push   esi
c001062d:	53                   	push   ebx
c001062e:	51                   	push   ecx
c001062f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010633:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010637:	39 1d 64 e4 02 c0    	cmp    DWORD PTR ds:0xc002e464,ebx
c001063d:	75 18                	jne    c0010657 <VgaText::disableBlink(bool)+0x2b>
c001063f:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c0010645:	85 c0                	test   eax,eax
c0010647:	74 0e                	je     c0010657 <VgaText::disableBlink(bool)+0x2b>
c0010649:	89 f1                	mov    ecx,esi
c001064b:	52                   	push   edx
c001064c:	52                   	push   edx
c001064d:	0f b6 d1             	movzx  edx,cl
c0010650:	52                   	push   edx
c0010651:	53                   	push   ebx
c0010652:	ff d0                	call   eax
c0010654:	83 c4 10             	add    esp,0x10
c0010657:	89 f0                	mov    eax,esi
c0010659:	83 f0 01             	xor    eax,0x1
c001065c:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c0010662:	58                   	pop    eax
c0010663:	5b                   	pop    ebx
c0010664:	5e                   	pop    esi
c0010665:	c3                   	ret    

c0010666 <VgaText::doANSI_SGR(int)>:
c0010666:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001066a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001066e:	85 d2                	test   edx,edx
c0010670:	75 14                	jne    c0010686 <VgaText::doANSI_SGR(int)+0x20>
c0010672:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c0010678:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c001067e:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c0010684:	eb 65                	jmp    c00106eb <VgaText::doANSI_SGR(int)+0x85>
c0010686:	83 fa 07             	cmp    edx,0x7
c0010689:	75 14                	jne    c001069f <VgaText::doANSI_SGR(int)+0x39>
c001068b:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c0010691:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c0010697:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c001069d:	eb 4c                	jmp    c00106eb <VgaText::doANSI_SGR(int)+0x85>
c001069f:	83 fa 1b             	cmp    edx,0x1b
c00106a2:	74 ce                	je     c0010672 <VgaText::doANSI_SGR(int)+0xc>
c00106a4:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00106a7:	83 f9 07             	cmp    ecx,0x7
c00106aa:	77 09                	ja     c00106b5 <VgaText::doANSI_SGR(int)+0x4f>
c00106ac:	8b 14 8d e0 d2 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2d20]
c00106b3:	eb 20                	jmp    c00106d5 <VgaText::doANSI_SGR(int)+0x6f>
c00106b5:	8d 4a d8             	lea    ecx,[edx-0x28]
c00106b8:	83 f9 07             	cmp    ecx,0x7
c00106bb:	77 09                	ja     c00106c6 <VgaText::doANSI_SGR(int)+0x60>
c00106bd:	8b 14 8d e0 d2 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2d20]
c00106c4:	eb 25                	jmp    c00106eb <VgaText::doANSI_SGR(int)+0x85>
c00106c6:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00106c9:	83 f9 07             	cmp    ecx,0x7
c00106cc:	77 0e                	ja     c00106dc <VgaText::doANSI_SGR(int)+0x76>
c00106ce:	8b 14 95 98 d1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2e68]
c00106d5:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00106db:	c3                   	ret    
c00106dc:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00106df:	83 f9 07             	cmp    ecx,0x7
c00106e2:	77 0d                	ja     c00106f1 <VgaText::doANSI_SGR(int)+0x8b>
c00106e4:	8b 14 95 70 d1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2e90]
c00106eb:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c00106f1:	c3                   	ret    

c00106f2 <VgaText::setDefaultBgColour(VgaColour)>:
c00106f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106f6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106fa:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c0010700:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c0010706:	c3                   	ret    
c0010707:	90                   	nop

c0010708 <VgaText::setDefaultFgColour(VgaColour)>:
c0010708:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001070c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010710:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c0010716:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c001071c:	c3                   	ret    
c001071d:	90                   	nop

c001071e <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c001071e:	53                   	push   ebx
c001071f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010723:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010727:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001072b:	51                   	push   ecx
c001072c:	e8 c1 ff ff ff       	call   c00106f2 <VgaText::setDefaultBgColour(VgaColour)>
c0010731:	58                   	pop    eax
c0010732:	5a                   	pop    edx
c0010733:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0010737:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001073b:	5b                   	pop    ebx
c001073c:	eb ca                	jmp    c0010708 <VgaText::setDefaultFgColour(VgaColour)>

c001073e <VgaText::combineColours(unsigned char, unsigned char)>:
c001073e:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0010742:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0010747:	83 e0 0f             	and    eax,0xf
c001074a:	c1 e2 04             	shl    edx,0x4
c001074d:	09 d0                	or     eax,edx
c001074f:	c3                   	ret    

c0010750 <VgaText::scrollScreen()>:
c0010750:	57                   	push   edi
c0010751:	56                   	push   esi
c0010752:	be 01 00 00 00       	mov    esi,0x1
c0010757:	53                   	push   ebx
c0010758:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001075c:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0010762:	31 ff                	xor    edi,edi
c0010764:	01 d9                	add    ecx,ebx
c0010766:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c0010769:	83 fe 17             	cmp    esi,0x17
c001076c:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c0010772:	75 28                	jne    c001079c <VgaText::scrollScreen()+0x4c>
c0010774:	f7 c7 01 00 00 00    	test   edi,0x1
c001077a:	74 1c                	je     c0010798 <VgaText::scrollScreen()+0x48>
c001077c:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c0010783:	50                   	push   eax
c0010784:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c001078b:	50                   	push   eax
c001078c:	e8 ad ff ff ff       	call   c001073e <VgaText::combineColours(unsigned char, unsigned char)>
c0010791:	5a                   	pop    edx
c0010792:	5a                   	pop    edx
c0010793:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c0010796:	eb 04                	jmp    c001079c <VgaText::scrollScreen()+0x4c>
c0010798:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c001079c:	47                   	inc    edi
c001079d:	41                   	inc    ecx
c001079e:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00107a4:	75 c0                	jne    c0010766 <VgaText::scrollScreen()+0x16>
c00107a6:	46                   	inc    esi
c00107a7:	83 fe 18             	cmp    esi,0x18
c00107aa:	75 b0                	jne    c001075c <VgaText::scrollScreen()+0xc>
c00107ac:	39 1d 64 e4 02 c0    	cmp    DWORD PTR ds:0xc002e464,ebx
c00107b2:	75 24                	jne    c00107d8 <VgaText::scrollScreen()+0x88>
c00107b4:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c00107bb:	74 08                	je     c00107c5 <VgaText::scrollScreen()+0x75>
c00107bd:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c00107c3:	eb 13                	jmp    c00107d8 <VgaText::scrollScreen()+0x88>
c00107c5:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c00107cb:	85 c0                	test   eax,eax
c00107cd:	74 09                	je     c00107d8 <VgaText::scrollScreen()+0x88>
c00107cf:	83 ec 0c             	sub    esp,0xc
c00107d2:	53                   	push   ebx
c00107d3:	ff d0                	call   eax
c00107d5:	83 c4 10             	add    esp,0x10
c00107d8:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00107dc:	5b                   	pop    ebx
c00107dd:	5e                   	pop    esi
c00107de:	5f                   	pop    edi
c00107df:	e9 1e fe ff ff       	jmp    c0010602 <VgaText::updateCursor()>

c00107e4 <VgaText::combineCharAndColour(char, unsigned char)>:
c00107e4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00107e9:	c1 e0 08             	shl    eax,0x8
c00107ec:	89 c2                	mov    edx,eax
c00107ee:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00107f3:	09 d0                	or     eax,edx
c00107f5:	c3                   	ret    

c00107f6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00107f6:	53                   	push   ebx
c00107f7:	83 ec 08             	sub    esp,0x8
c00107fa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00107fe:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010803:	50                   	push   eax
c0010804:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010809:	50                   	push   eax
c001080a:	e8 2f ff ff ff       	call   c001073e <VgaText::combineColours(unsigned char, unsigned char)>
c001080f:	5a                   	pop    edx
c0010810:	0f b6 c0             	movzx  eax,al
c0010813:	5b                   	pop    ebx
c0010814:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0010819:	50                   	push   eax
c001081a:	53                   	push   ebx
c001081b:	e8 c4 ff ff ff       	call   c00107e4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010820:	5a                   	pop    edx
c0010821:	5a                   	pop    edx
c0010822:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c0010828:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c001082c:	0f b7 d2             	movzx  edx,dx
c001082f:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c0010834:	39 0d 64 e4 02 c0    	cmp    DWORD PTR ds:0xc002e464,ecx
c001083a:	75 14                	jne    c0010850 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c001083c:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c0010842:	85 c0                	test   eax,eax
c0010844:	74 0a                	je     c0010850 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c0010846:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001084a:	83 c4 08             	add    esp,0x8
c001084d:	5b                   	pop    ebx
c001084e:	ff e0                	jmp    eax
c0010850:	83 c4 08             	add    esp,0x8
c0010853:	5b                   	pop    ebx
c0010854:	c3                   	ret    
c0010855:	90                   	nop

c0010856 <VgaText::getCursorX()>:
c0010856:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001085a:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c0010860:	c3                   	ret    
c0010861:	90                   	nop

c0010862 <VgaText::getCursorY()>:
c0010862:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010866:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c001086c:	c3                   	ret    
c001086d:	90                   	nop

c001086e <VgaText::setCursor(int, int)>:
c001086e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010872:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010876:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c001087c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010880:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c0010886:	e9 77 fd ff ff       	jmp    c0010602 <VgaText::updateCursor()>
c001088b:	90                   	nop

c001088c <VgaText::setCursorX(int)>:
c001088c:	83 ec 10             	sub    esp,0x10
c001088f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010893:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c0010899:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001089d:	50                   	push   eax
c001089e:	e8 cb ff ff ff       	call   c001086e <VgaText::setCursor(int, int)>
c00108a3:	83 c4 1c             	add    esp,0x1c
c00108a6:	c3                   	ret    
c00108a7:	90                   	nop

c00108a8 <VgaText::setCursorY(int)>:
c00108a8:	83 ec 10             	sub    esp,0x10
c00108ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00108af:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00108b3:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c00108b9:	50                   	push   eax
c00108ba:	e8 af ff ff ff       	call   c001086e <VgaText::setCursor(int, int)>
c00108bf:	83 c4 1c             	add    esp,0x1c
c00108c2:	c3                   	ret    
c00108c3:	90                   	nop

c00108c4 <VgaText::incrementCursor(bool)>:
c00108c4:	56                   	push   esi
c00108c5:	53                   	push   ebx
c00108c6:	51                   	push   ecx
c00108c7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00108cb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00108cf:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c00108d5:	40                   	inc    eax
c00108d6:	83 f8 50             	cmp    eax,0x50
c00108d9:	74 08                	je     c00108e3 <VgaText::incrementCursor(bool)+0x1f>
c00108db:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c00108e1:	eb 33                	jmp    c0010916 <VgaText::incrementCursor(bool)+0x52>
c00108e3:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c00108e9:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c00108f3:	8d 50 01             	lea    edx,[eax+0x1]
c00108f6:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c00108fc:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010902:	75 12                	jne    c0010916 <VgaText::incrementCursor(bool)+0x52>
c0010904:	83 ec 0c             	sub    esp,0xc
c0010907:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c001090d:	53                   	push   ebx
c001090e:	e8 3d fe ff ff       	call   c0010750 <VgaText::scrollScreen()>
c0010913:	83 c4 10             	add    esp,0x10
c0010916:	89 f0                	mov    eax,esi
c0010918:	84 c0                	test   al,al
c001091a:	74 0c                	je     c0010928 <VgaText::incrementCursor(bool)+0x64>
c001091c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010920:	5a                   	pop    edx
c0010921:	5b                   	pop    ebx
c0010922:	5e                   	pop    esi
c0010923:	e9 da fc ff ff       	jmp    c0010602 <VgaText::updateCursor()>
c0010928:	58                   	pop    eax
c0010929:	5b                   	pop    ebx
c001092a:	5e                   	pop    esi
c001092b:	c3                   	ret    

c001092c <VgaText::updateRAMUsageDisplay(int)>:
c001092c:	56                   	push   esi
c001092d:	8b 35 c0 d2 02 c0    	mov    esi,DWORD PTR ds:0xc002d2c0
c0010933:	53                   	push   ebx
c0010934:	bb 0a 00 00 00       	mov    ebx,0xa
c0010939:	6a 0f                	push   0xf
c001093b:	6a 00                	push   0x0
c001093d:	e8 fc fd ff ff       	call   c001073e <VgaText::combineColours(unsigned char, unsigned char)>
c0010942:	5a                   	pop    edx
c0010943:	59                   	pop    ecx
c0010944:	0f b6 c8             	movzx  ecx,al
c0010947:	51                   	push   ecx
c0010948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001094c:	99                   	cdq    
c001094d:	f7 fb                	idiv   ebx
c001094f:	89 d3                	mov    ebx,edx
c0010951:	83 c0 30             	add    eax,0x30
c0010954:	83 c3 30             	add    ebx,0x30
c0010957:	0f be c0             	movsx  eax,al
c001095a:	0f b6 db             	movzx  ebx,bl
c001095d:	50                   	push   eax
c001095e:	e8 81 fe ff ff       	call   c00107e4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010963:	5a                   	pop    edx
c0010964:	5a                   	pop    edx
c0010965:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c001096c:	51                   	push   ecx
c001096d:	53                   	push   ebx
c001096e:	e8 71 fe ff ff       	call   c00107e4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010973:	5b                   	pop    ebx
c0010974:	5a                   	pop    edx
c0010975:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c001097c:	51                   	push   ecx
c001097d:	6a 25                	push   0x25
c001097f:	e8 60 fe ff ff       	call   c00107e4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010984:	59                   	pop    ecx
c0010985:	5b                   	pop    ebx
c0010986:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c001098d:	5b                   	pop    ebx
c001098e:	5e                   	pop    esi
c001098f:	c3                   	ret    

c0010990 <VgaText::updateDiskUsage()>:
c0010990:	55                   	push   ebp
c0010991:	bd 10 27 00 00       	mov    ebp,0x2710
c0010996:	57                   	push   edi
c0010997:	8b 3d c0 d2 02 c0    	mov    edi,DWORD PTR ds:0xc002d2c0
c001099d:	56                   	push   esi
c001099e:	53                   	push   ebx
c001099f:	6a 0f                	push   0xf
c00109a1:	6a 00                	push   0x0
c00109a3:	e8 96 fd ff ff       	call   c001073e <VgaText::combineColours(unsigned char, unsigned char)>
c00109a8:	5a                   	pop    edx
c00109a9:	0f b6 d8             	movzx  ebx,al
c00109ac:	59                   	pop    ecx
c00109ad:	8b 35 e8 26 03 c0    	mov    esi,DWORD PTR ds:0xc00326e8
c00109b3:	53                   	push   ebx
c00109b4:	b9 0a 00 00 00       	mov    ecx,0xa
c00109b9:	89 f0                	mov    eax,esi
c00109bb:	99                   	cdq    
c00109bc:	f7 fd                	idiv   ebp
c00109be:	99                   	cdq    
c00109bf:	f7 f9                	idiv   ecx
c00109c1:	8d 42 30             	lea    eax,[edx+0x30]
c00109c4:	0f b6 c0             	movzx  eax,al
c00109c7:	50                   	push   eax
c00109c8:	e8 17 fe ff ff       	call   c00107e4 <VgaText::combineCharAndColour(char, unsigned char)>
c00109cd:	5d                   	pop    ebp
c00109ce:	bd e8 03 00 00       	mov    ebp,0x3e8
c00109d3:	5a                   	pop    edx
c00109d4:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c00109d8:	53                   	push   ebx
c00109d9:	89 f0                	mov    eax,esi
c00109db:	99                   	cdq    
c00109dc:	f7 fd                	idiv   ebp
c00109de:	99                   	cdq    
c00109df:	f7 f9                	idiv   ecx
c00109e1:	8d 42 30             	lea    eax,[edx+0x30]
c00109e4:	0f b6 c0             	movzx  eax,al
c00109e7:	50                   	push   eax
c00109e8:	e8 f7 fd ff ff       	call   c00107e4 <VgaText::combineCharAndColour(char, unsigned char)>
c00109ed:	5d                   	pop    ebp
c00109ee:	bd 64 00 00 00       	mov    ebp,0x64
c00109f3:	5a                   	pop    edx
c00109f4:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c00109fb:	53                   	push   ebx
c00109fc:	89 f0                	mov    eax,esi
c00109fe:	99                   	cdq    
c00109ff:	f7 fd                	idiv   ebp
c0010a01:	99                   	cdq    
c0010a02:	f7 f9                	idiv   ecx
c0010a04:	8d 42 30             	lea    eax,[edx+0x30]
c0010a07:	0f b6 c0             	movzx  eax,al
c0010a0a:	50                   	push   eax
c0010a0b:	e8 d4 fd ff ff       	call   c00107e4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a10:	5d                   	pop    ebp
c0010a11:	5a                   	pop    edx
c0010a12:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c0010a19:	53                   	push   ebx
c0010a1a:	89 f0                	mov    eax,esi
c0010a1c:	99                   	cdq    
c0010a1d:	f7 f9                	idiv   ecx
c0010a1f:	89 d6                	mov    esi,edx
c0010a21:	99                   	cdq    
c0010a22:	f7 f9                	idiv   ecx
c0010a24:	8d 42 30             	lea    eax,[edx+0x30]
c0010a27:	0f b6 c0             	movzx  eax,al
c0010a2a:	50                   	push   eax
c0010a2b:	e8 b4 fd ff ff       	call   c00107e4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a30:	5d                   	pop    ebp
c0010a31:	5a                   	pop    edx
c0010a32:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c0010a39:	53                   	push   ebx
c0010a3a:	8d 46 30             	lea    eax,[esi+0x30]
c0010a3d:	0f b6 f0             	movzx  esi,al
c0010a40:	56                   	push   esi
c0010a41:	e8 9e fd ff ff       	call   c00107e4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a46:	5e                   	pop    esi
c0010a47:	8b 35 e4 26 03 c0    	mov    esi,DWORD PTR ds:0xc00326e4
c0010a4d:	5d                   	pop    ebp
c0010a4e:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c0010a55:	bd 10 27 00 00       	mov    ebp,0x2710
c0010a5a:	53                   	push   ebx
c0010a5b:	89 f0                	mov    eax,esi
c0010a5d:	99                   	cdq    
c0010a5e:	f7 fd                	idiv   ebp
c0010a60:	99                   	cdq    
c0010a61:	f7 f9                	idiv   ecx
c0010a63:	8d 42 30             	lea    eax,[edx+0x30]
c0010a66:	0f b6 c0             	movzx  eax,al
c0010a69:	50                   	push   eax
c0010a6a:	e8 75 fd ff ff       	call   c00107e4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a6f:	5a                   	pop    edx
c0010a70:	5d                   	pop    ebp
c0010a71:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c0010a78:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010a7d:	53                   	push   ebx
c0010a7e:	89 f0                	mov    eax,esi
c0010a80:	99                   	cdq    
c0010a81:	f7 fd                	idiv   ebp
c0010a83:	99                   	cdq    
c0010a84:	f7 f9                	idiv   ecx
c0010a86:	8d 42 30             	lea    eax,[edx+0x30]
c0010a89:	0f b6 c0             	movzx  eax,al
c0010a8c:	50                   	push   eax
c0010a8d:	e8 52 fd ff ff       	call   c00107e4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a92:	5a                   	pop    edx
c0010a93:	5d                   	pop    ebp
c0010a94:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c0010a9b:	bd 64 00 00 00       	mov    ebp,0x64
c0010aa0:	53                   	push   ebx
c0010aa1:	89 f0                	mov    eax,esi
c0010aa3:	99                   	cdq    
c0010aa4:	f7 fd                	idiv   ebp
c0010aa6:	99                   	cdq    
c0010aa7:	f7 f9                	idiv   ecx
c0010aa9:	83 c2 30             	add    edx,0x30
c0010aac:	0f b6 d2             	movzx  edx,dl
c0010aaf:	52                   	push   edx
c0010ab0:	e8 2f fd ff ff       	call   c00107e4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010ab5:	5a                   	pop    edx
c0010ab6:	5d                   	pop    ebp
c0010ab7:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010abe:	53                   	push   ebx
c0010abf:	89 f0                	mov    eax,esi
c0010ac1:	99                   	cdq    
c0010ac2:	f7 f9                	idiv   ecx
c0010ac4:	89 d6                	mov    esi,edx
c0010ac6:	99                   	cdq    
c0010ac7:	f7 f9                	idiv   ecx
c0010ac9:	8d 42 30             	lea    eax,[edx+0x30]
c0010acc:	0f b6 c0             	movzx  eax,al
c0010acf:	50                   	push   eax
c0010ad0:	e8 0f fd ff ff       	call   c00107e4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010ad5:	5a                   	pop    edx
c0010ad6:	59                   	pop    ecx
c0010ad7:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c0010ade:	53                   	push   ebx
c0010adf:	8d 46 30             	lea    eax,[esi+0x30]
c0010ae2:	0f b6 f0             	movzx  esi,al
c0010ae5:	56                   	push   esi
c0010ae6:	e8 f9 fc ff ff       	call   c00107e4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010aeb:	5b                   	pop    ebx
c0010aec:	5e                   	pop    esi
c0010aed:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010af4:	5b                   	pop    ebx
c0010af5:	5e                   	pop    esi
c0010af6:	5f                   	pop    edi
c0010af7:	5d                   	pop    ebp
c0010af8:	c3                   	ret    
c0010af9:	90                   	nop

c0010afa <VgaText::updateTitle()>:
c0010afa:	53                   	push   ebx
c0010afb:	31 c0                	xor    eax,eax
c0010afd:	83 ec 58             	sub    esp,0x58
c0010b00:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010b04:	89 e1                	mov    ecx,esp
c0010b06:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010b0a:	40                   	inc    eax
c0010b0b:	83 f8 50             	cmp    eax,0x50
c0010b0e:	75 f6                	jne    c0010b06 <VgaText::updateTitle()+0xc>
c0010b10:	31 c0                	xor    eax,eax
c0010b12:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c0010b19:	84 db                	test   bl,bl
c0010b1b:	74 06                	je     c0010b23 <VgaText::updateTitle()+0x29>
c0010b1d:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010b20:	40                   	inc    eax
c0010b21:	eb ef                	jmp    c0010b12 <VgaText::updateTitle()+0x18>
c0010b23:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c0010b29:	85 c0                	test   eax,eax
c0010b2b:	74 09                	je     c0010b36 <VgaText::updateTitle()+0x3c>
c0010b2d:	53                   	push   ebx
c0010b2e:	53                   	push   ebx
c0010b2f:	51                   	push   ecx
c0010b30:	52                   	push   edx
c0010b31:	ff d0                	call   eax
c0010b33:	83 c4 10             	add    esp,0x10
c0010b36:	e8 55 fe ff ff       	call   c0010990 <VgaText::updateDiskUsage()>
c0010b3b:	83 c4 58             	add    esp,0x58
c0010b3e:	5b                   	pop    ebx
c0010b3f:	c3                   	ret    

c0010b40 <VgaText::setTitleTextColour(VgaColour)>:
c0010b40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b44:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b48:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c0010b4e:	eb aa                	jmp    c0010afa <VgaText::updateTitle()>

c0010b50 <VgaText::setTitleColour(VgaColour)>:
c0010b50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b54:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b58:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c0010b5e:	eb 9a                	jmp    c0010afa <VgaText::updateTitle()>

c0010b60 <VgaText::setTitle(char*)>:
c0010b60:	53                   	push   ebx
c0010b61:	83 ec 10             	sub    esp,0x10
c0010b64:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010b68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b6c:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c0010b72:	50                   	push   eax
c0010b73:	e8 bc fc fe ff       	call   c0000834 <strcpy>
c0010b78:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010b7c:	83 c4 18             	add    esp,0x18
c0010b7f:	5b                   	pop    ebx
c0010b80:	e9 75 ff ff ff       	jmp    c0010afa <VgaText::updateTitle()>
c0010b85:	90                   	nop

c0010b86 <VgaText::decrementCursor(bool)>:
c0010b86:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010b8a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010b8e:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c0010b94:	85 c0                	test   eax,eax
c0010b96:	74 07                	je     c0010b9f <VgaText::decrementCursor(bool)+0x19>
c0010b98:	48                   	dec    eax
c0010b99:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c0010b9f:	84 c9                	test   cl,cl
c0010ba1:	74 09                	je     c0010bac <VgaText::decrementCursor(bool)+0x26>
c0010ba3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010ba7:	e9 56 fa ff ff       	jmp    c0010602 <VgaText::updateCursor()>
c0010bac:	c3                   	ret    
c0010bad:	90                   	nop

c0010bae <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010bae:	53                   	push   ebx
c0010baf:	83 ec 08             	sub    esp,0x8
c0010bb2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010bb6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010bba:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010bbe:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010bc2:	3c 07                	cmp    al,0x7
c0010bc4:	75 2a                	jne    c0010bf0 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010bc6:	a1 14 e5 02 c0       	mov    eax,ds:0xc002e514
c0010bcb:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010bd3:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010bdb:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010be3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010be7:	83 c4 08             	add    esp,0x8
c0010bea:	5b                   	pop    ebx
c0010beb:	e9 a0 30 00 00       	jmp    c0013c90 <Buzzer::beep(int, int, bool)>
c0010bf0:	3c 0d                	cmp    al,0xd
c0010bf2:	75 0c                	jne    c0010c00 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c0010bf4:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010bfe:	eb 3b                	jmp    c0010c3b <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c0010c00:	3c 0a                	cmp    al,0xa
c0010c02:	75 40                	jne    c0010c44 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c0010c04:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010c0a:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010c14:	8d 50 01             	lea    edx,[eax+0x1]
c0010c17:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010c1d:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010c23:	75 12                	jne    c0010c37 <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c0010c25:	83 ec 0c             	sub    esp,0xc
c0010c28:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010c2e:	53                   	push   ebx
c0010c2f:	e8 1c fb ff ff       	call   c0010750 <VgaText::scrollScreen()>
c0010c34:	83 c4 10             	add    esp,0x10
c0010c37:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010c3b:	83 c4 08             	add    esp,0x8
c0010c3e:	5b                   	pop    ebx
c0010c3f:	e9 be f9 ff ff       	jmp    c0010602 <VgaText::updateCursor()>
c0010c44:	3c 08                	cmp    al,0x8
c0010c46:	75 31                	jne    c0010c79 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c0010c48:	50                   	push   eax
c0010c49:	50                   	push   eax
c0010c4a:	6a 01                	push   0x1
c0010c4c:	53                   	push   ebx
c0010c4d:	e8 34 ff ff ff       	call   c0010b86 <VgaText::decrementCursor(bool)>
c0010c52:	5a                   	pop    edx
c0010c53:	59                   	pop    ecx
c0010c54:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010c5a:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010c60:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010c66:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010c6c:	6a 20                	push   0x20
c0010c6e:	53                   	push   ebx
c0010c6f:	e8 82 fb ff ff       	call   c00107f6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010c74:	83 c4 28             	add    esp,0x28
c0010c77:	5b                   	pop    ebx
c0010c78:	c3                   	ret    
c0010c79:	83 ec 08             	sub    esp,0x8
c0010c7c:	0f be c0             	movsx  eax,al
c0010c7f:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010c85:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010c8b:	51                   	push   ecx
c0010c8c:	52                   	push   edx
c0010c8d:	50                   	push   eax
c0010c8e:	53                   	push   ebx
c0010c8f:	e8 62 fb ff ff       	call   c00107f6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010c94:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010c98:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010ca0:	83 c4 28             	add    esp,0x28
c0010ca3:	5b                   	pop    ebx
c0010ca4:	e9 1b fc ff ff       	jmp    c00108c4 <VgaText::incrementCursor(bool)>
c0010ca9:	90                   	nop

c0010caa <VgaText::isShowingCursor()>:
c0010caa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cae:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c0010cb4:	c3                   	ret    
c0010cb5:	90                   	nop

c0010cb6 <VgaText::isBlinkDisabled()>:
c0010cb6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cba:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c0010cc0:	83 f0 01             	xor    eax,0x1
c0010cc3:	c3                   	ret    

c0010cc4 <VgaText::setCursorHeight(int)>:
c0010cc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cc8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010ccc:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010cd2:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c0010cd9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010cdd:	e9 3a f9 ff ff       	jmp    c001061c <VgaText::showCursor(bool)>

c0010ce2 <VgaText::getCursorHeight()>:
c0010ce2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ce6:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0010cec:	c3                   	ret    

c0010ced <setActiveTerminal(VgaText*)>:
c0010ced:	53                   	push   ebx
c0010cee:	83 ec 08             	sub    esp,0x8
c0010cf1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010cf5:	85 db                	test   ebx,ebx
c0010cf7:	75 11                	jne    c0010d0a <setActiveTerminal(VgaText*)+0x1d>
c0010cf9:	c7 44 24 10 4c a3 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a34c
c0010d01:	83 c4 08             	add    esp,0x8
c0010d04:	5b                   	pop    ebx
c0010d05:	e9 63 98 00 00       	jmp    c001a56d <Krnl::panic(char const*)>
c0010d0a:	50                   	push   eax
c0010d0b:	50                   	push   eax
c0010d0c:	53                   	push   ebx
c0010d0d:	68 5a a3 02 c0       	push   0xc002a35a
c0010d12:	e8 7b 21 00 00       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0010d17:	a1 64 e4 02 c0       	mov    eax,ds:0xc002e464
c0010d1c:	83 c4 10             	add    esp,0x10
c0010d1f:	85 c0                	test   eax,eax
c0010d21:	74 0c                	je     c0010d2f <setActiveTerminal(VgaText*)+0x42>
c0010d23:	83 ec 0c             	sub    esp,0xc
c0010d26:	50                   	push   eax
c0010d27:	e8 d6 f8 ff ff       	call   c0010602 <VgaText::updateCursor()>
c0010d2c:	83 c4 10             	add    esp,0x10
c0010d2f:	89 1d 64 e4 02 c0    	mov    DWORD PTR ds:0xc002e464,ebx
c0010d35:	51                   	push   ecx
c0010d36:	51                   	push   ecx
c0010d37:	53                   	push   ebx
c0010d38:	68 72 a3 02 c0       	push   0xc002a372
c0010d3d:	e8 50 21 00 00       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0010d42:	83 c4 0c             	add    esp,0xc
c0010d45:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010d4b:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010d51:	53                   	push   ebx
c0010d52:	e8 17 fb ff ff       	call   c001086e <VgaText::setCursor(int, int)>
c0010d57:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d5a:	e8 57 ff ff ff       	call   c0010cb6 <VgaText::isBlinkDisabled()>
c0010d5f:	5a                   	pop    edx
c0010d60:	0f b6 c0             	movzx  eax,al
c0010d63:	59                   	pop    ecx
c0010d64:	50                   	push   eax
c0010d65:	53                   	push   ebx
c0010d66:	e8 c1 f8 ff ff       	call   c001062c <VgaText::disableBlink(bool)>
c0010d6b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d6e:	e8 6f ff ff ff       	call   c0010ce2 <VgaText::getCursorHeight()>
c0010d73:	5a                   	pop    edx
c0010d74:	59                   	pop    ecx
c0010d75:	50                   	push   eax
c0010d76:	53                   	push   ebx
c0010d77:	e8 48 ff ff ff       	call   c0010cc4 <VgaText::setCursorHeight(int)>
c0010d7c:	83 c4 10             	add    esp,0x10
c0010d7f:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010d86:	75 0a                	jne    c0010d92 <setActiveTerminal(VgaText*)+0xa5>
c0010d88:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c0010d92:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010d96:	83 c4 08             	add    esp,0x8
c0010d99:	5b                   	pop    ebx
c0010d9a:	e9 0f f8 ff ff       	jmp    c00105ae <VgaText::load()>

c0010d9f <doTerminalCycle()>:
c0010d9f:	83 ec 18             	sub    esp,0x18
c0010da2:	a1 60 e4 02 c0       	mov    eax,ds:0xc002e460
c0010da7:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c0010dad:	50                   	push   eax
c0010dae:	a3 60 e4 02 c0       	mov    ds:0xc002e460,eax
c0010db3:	e8 35 ff ff ff       	call   c0010ced <setActiveTerminal(VgaText*)>
c0010db8:	83 c4 1c             	add    esp,0x1c
c0010dbb:	c3                   	ret    

c0010dbc <VgaText::doUpdate()>:
c0010dbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010dc0:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c0010dc6:	85 c0                	test   eax,eax
c0010dc8:	74 02                	je     c0010dcc <VgaText::doUpdate()+0x10>
c0010dca:	ff e0                	jmp    eax
c0010dcc:	c3                   	ret    
c0010dcd:	90                   	nop

c0010dce <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010dce:	55                   	push   ebp
c0010dcf:	57                   	push   edi
c0010dd0:	56                   	push   esi
c0010dd1:	53                   	push   ebx
c0010dd2:	83 ec 1c             	sub    esp,0x1c
c0010dd5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010dd9:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010dde:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010de5:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010de8:	50                   	push   eax
c0010de9:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010dee:	50                   	push   eax
c0010def:	e8 4a f9 ff ff       	call   c001073e <VgaText::combineColours(unsigned char, unsigned char)>
c0010df4:	59                   	pop    ecx
c0010df5:	0f b6 c0             	movzx  eax,al
c0010df8:	5b                   	pop    ebx
c0010df9:	31 c9                	xor    ecx,ecx
c0010dfb:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010e03:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010e07:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010e0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010e11:	0f b7 db             	movzx  ebx,bx
c0010e14:	01 db                	add    ebx,ebx
c0010e16:	01 fb                	add    ebx,edi
c0010e18:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010e1b:	84 c0                	test   al,al
c0010e1d:	0f 84 38 01 00 00    	je     c0010f5b <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c0010e23:	3c 0d                	cmp    al,0xd
c0010e25:	75 0f                	jne    c0010e36 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010e27:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010e31:	e9 1f 01 00 00       	jmp    c0010f55 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010e36:	3c 0a                	cmp    al,0xa
c0010e38:	75 5b                	jne    c0010e95 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c0010e3a:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c0010e40:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010e4a:	8d 48 01             	lea    ecx,[eax+0x1]
c0010e4d:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c0010e53:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c0010e59:	75 12                	jne    c0010e6d <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010e5b:	83 ec 0c             	sub    esp,0xc
c0010e5e:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c0010e64:	55                   	push   ebp
c0010e65:	e8 e6 f8 ff ff       	call   c0010750 <VgaText::scrollScreen()>
c0010e6a:	83 c4 10             	add    esp,0x10
c0010e6d:	83 ec 0c             	sub    esp,0xc
c0010e70:	55                   	push   ebp
c0010e71:	e8 8c f7 ff ff       	call   c0010602 <VgaText::updateCursor()>
c0010e76:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010e7e:	83 c4 10             	add    esp,0x10
c0010e81:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010e87:	31 c9                	xor    ecx,ecx
c0010e89:	0f b7 db             	movzx  ebx,bx
c0010e8c:	01 db                	add    ebx,ebx
c0010e8e:	01 fb                	add    ebx,edi
c0010e90:	e9 c0 00 00 00       	jmp    c0010f55 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010e95:	3c 08                	cmp    al,0x8
c0010e97:	75 4e                	jne    c0010ee7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c0010e99:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010e9d:	53                   	push   ebx
c0010e9e:	53                   	push   ebx
c0010e9f:	6a 01                	push   0x1
c0010ea1:	55                   	push   ebp
c0010ea2:	e8 df fc ff ff       	call   c0010b86 <VgaText::decrementCursor(bool)>
c0010ea7:	58                   	pop    eax
c0010ea8:	5a                   	pop    edx
c0010ea9:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010eaf:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010eb5:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010ebb:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010ec1:	6a 20                	push   0x20
c0010ec3:	55                   	push   ebp
c0010ec4:	e8 2d f9 ff ff       	call   c00107f6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010ec9:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010ed1:	83 c4 20             	add    esp,0x20
c0010ed4:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010eda:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010ede:	0f b7 db             	movzx  ebx,bx
c0010ee1:	01 db                	add    ebx,ebx
c0010ee3:	01 fb                	add    ebx,edi
c0010ee5:	eb 6e                	jmp    c0010f55 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010ee7:	51                   	push   ecx
c0010ee8:	51                   	push   ecx
c0010ee9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010eed:	50                   	push   eax
c0010eee:	e8 f1 f8 ff ff       	call   c00107e4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010ef3:	83 c4 10             	add    esp,0x10
c0010ef6:	66 89 03             	mov    WORD PTR [ebx],ax
c0010ef9:	39 2d 64 e4 02 c0    	cmp    DWORD PTR ds:0xc002e464,ebp
c0010eff:	75 2a                	jne    c0010f2b <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010f01:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010f07:	85 c0                	test   eax,eax
c0010f09:	74 20                	je     c0010f2b <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010f0b:	52                   	push   edx
c0010f0c:	52                   	push   edx
c0010f0d:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010f13:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010f19:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f1d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f21:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010f24:	51                   	push   ecx
c0010f25:	55                   	push   ebp
c0010f26:	ff d0                	call   eax
c0010f28:	83 c4 20             	add    esp,0x20
c0010f2b:	83 c3 02             	add    ebx,0x2
c0010f2e:	50                   	push   eax
c0010f2f:	50                   	push   eax
c0010f30:	6a 00                	push   0x0
c0010f32:	55                   	push   ebp
c0010f33:	e8 8c f9 ff ff       	call   c00108c4 <VgaText::incrementCursor(bool)>
c0010f38:	83 c4 10             	add    esp,0x10
c0010f3b:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c0010f42:	75 0f                	jne    c0010f53 <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c0010f44:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010f4c:	0f b7 db             	movzx  ebx,bx
c0010f4f:	01 db                	add    ebx,ebx
c0010f51:	01 fb                	add    ebx,edi
c0010f53:	b1 01                	mov    cl,0x1
c0010f55:	46                   	inc    esi
c0010f56:	e9 bd fe ff ff       	jmp    c0010e18 <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010f5b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010f5f:	83 ec 0c             	sub    esp,0xc
c0010f62:	55                   	push   ebp
c0010f63:	e8 9a f6 ff ff       	call   c0010602 <VgaText::updateCursor()>
c0010f68:	83 c4 10             	add    esp,0x10
c0010f6b:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010f6f:	84 c9                	test   cl,cl
c0010f71:	74 0c                	je     c0010f7f <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c0010f73:	83 ec 0c             	sub    esp,0xc
c0010f76:	55                   	push   ebp
c0010f77:	e8 40 fe ff ff       	call   c0010dbc <VgaText::doUpdate()>
c0010f7c:	83 c4 10             	add    esp,0x10
c0010f7f:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0010f86:	83 c4 1c             	add    esp,0x1c
c0010f89:	5b                   	pop    ebx
c0010f8a:	5e                   	pop    esi
c0010f8b:	5f                   	pop    edi
c0010f8c:	5d                   	pop    ebp
c0010f8d:	c3                   	ret    

c0010f8e <VgaText::clearScreen()>:
c0010f8e:	57                   	push   edi
c0010f8f:	56                   	push   esi
c0010f90:	31 f6                	xor    esi,esi
c0010f92:	53                   	push   ebx
c0010f93:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010f97:	52                   	push   edx
c0010f98:	6a 00                	push   0x0
c0010f9a:	6a 00                	push   0x0
c0010f9c:	53                   	push   ebx
c0010f9d:	e8 cc f8 ff ff       	call   c001086e <VgaText::setCursor(int, int)>
c0010fa2:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c0010fa9:	83 c4 10             	add    esp,0x10
c0010fac:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c0010fb2:	7e 26                	jle    c0010fda <VgaText::clearScreen()+0x4c>
c0010fb4:	31 ff                	xor    edi,edi
c0010fb6:	50                   	push   eax
c0010fb7:	50                   	push   eax
c0010fb8:	56                   	push   esi
c0010fb9:	57                   	push   edi
c0010fba:	47                   	inc    edi
c0010fbb:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010fc1:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010fc7:	6a 20                	push   0x20
c0010fc9:	53                   	push   ebx
c0010fca:	e8 27 f8 ff ff       	call   c00107f6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010fcf:	83 c4 20             	add    esp,0x20
c0010fd2:	83 ff 50             	cmp    edi,0x50
c0010fd5:	75 df                	jne    c0010fb6 <VgaText::clearScreen()+0x28>
c0010fd7:	46                   	inc    esi
c0010fd8:	eb d2                	jmp    c0010fac <VgaText::clearScreen()+0x1e>
c0010fda:	83 ec 0c             	sub    esp,0xc
c0010fdd:	53                   	push   ebx
c0010fde:	e8 d9 fd ff ff       	call   c0010dbc <VgaText::doUpdate()>
c0010fe3:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c0010fea:	83 c4 10             	add    esp,0x10
c0010fed:	5b                   	pop    ebx
c0010fee:	5e                   	pop    esi
c0010fef:	5f                   	pop    edi
c0010ff0:	c3                   	ret    
c0010ff1:	90                   	nop

c0010ff2 <VgaText::putchar(char)>:
c0010ff2:	56                   	push   esi
c0010ff3:	53                   	push   ebx
c0010ff4:	83 ec 14             	sub    esp,0x14
c0010ff7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010ffb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010fff:	3c 5b                	cmp    al,0x5b
c0011001:	75 21                	jne    c0011024 <VgaText::putchar(char)+0x32>
c0011003:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c001100a:	74 28                	je     c0011034 <VgaText::putchar(char)+0x42>
c001100c:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c0011015:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c001101f:	e9 e2 00 00 00       	jmp    c0011106 <VgaText::putchar(char)+0x114>
c0011024:	3c 1b                	cmp    al,0x1b
c0011026:	75 0c                	jne    c0011034 <VgaText::putchar(char)+0x42>
c0011028:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c001102f:	e9 d2 00 00 00       	jmp    c0011106 <VgaText::putchar(char)+0x114>
c0011034:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c001103a:	84 c9                	test   cl,cl
c001103c:	0f 84 ab 00 00 00    	je     c00110ed <VgaText::putchar(char)+0xfb>
c0011042:	8d 50 c0             	lea    edx,[eax-0x40]
c0011045:	80 fa 3e             	cmp    dl,0x3e
c0011048:	0f 87 82 00 00 00    	ja     c00110d0 <VgaText::putchar(char)+0xde>
c001104e:	3c 6d                	cmp    al,0x6d
c0011050:	75 4d                	jne    c001109f <VgaText::putchar(char)+0xad>
c0011052:	31 f6                	xor    esi,esi
c0011054:	31 d2                	xor    edx,edx
c0011056:	31 c0                	xor    eax,eax
c0011058:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c001105e:	7e 30                	jle    c0011090 <VgaText::putchar(char)+0x9e>
c0011060:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c0011068:	80 fa 3b             	cmp    dl,0x3b
c001106b:	75 17                	jne    c0011084 <VgaText::putchar(char)+0x92>
c001106d:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0011071:	50                   	push   eax
c0011072:	53                   	push   ebx
c0011073:	e8 ee f5 ff ff       	call   c0010666 <VgaText::doANSI_SGR(int)>
c0011078:	59                   	pop    ecx
c0011079:	31 d2                	xor    edx,edx
c001107b:	58                   	pop    eax
c001107c:	31 c0                	xor    eax,eax
c001107e:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0011082:	eb 09                	jmp    c001108d <VgaText::putchar(char)+0x9b>
c0011084:	6b c0 0a             	imul   eax,eax,0xa
c0011087:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c001108b:	88 ca                	mov    dl,cl
c001108d:	46                   	inc    esi
c001108e:	eb c8                	jmp    c0011058 <VgaText::putchar(char)+0x66>
c0011090:	84 d2                	test   dl,dl
c0011092:	74 31                	je     c00110c5 <VgaText::putchar(char)+0xd3>
c0011094:	50                   	push   eax
c0011095:	53                   	push   ebx
c0011096:	e8 cb f5 ff ff       	call   c0010666 <VgaText::doANSI_SGR(int)>
c001109b:	58                   	pop    eax
c001109c:	5a                   	pop    edx
c001109d:	eb 26                	jmp    c00110c5 <VgaText::putchar(char)+0xd3>
c001109f:	3c 4a                	cmp    al,0x4a
c00110a1:	75 22                	jne    c00110c5 <VgaText::putchar(char)+0xd3>
c00110a3:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c00110aa:	75 19                	jne    c00110c5 <VgaText::putchar(char)+0xd3>
c00110ac:	83 ec 0c             	sub    esp,0xc
c00110af:	53                   	push   ebx
c00110b0:	e8 d9 fe ff ff       	call   c0010f8e <VgaText::clearScreen()>
c00110b5:	83 c4 0c             	add    esp,0xc
c00110b8:	6a 00                	push   0x0
c00110ba:	6a 00                	push   0x0
c00110bc:	53                   	push   ebx
c00110bd:	e8 ac f7 ff ff       	call   c001086e <VgaText::setCursor(int, int)>
c00110c2:	83 c4 10             	add    esp,0x10
c00110c5:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c00110ce:	eb 36                	jmp    c0011106 <VgaText::putchar(char)+0x114>
c00110d0:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c00110d6:	83 fa 0e             	cmp    edx,0xe
c00110d9:	7f 2b                	jg     c0011106 <VgaText::putchar(char)+0x114>
c00110db:	8d 4a 01             	lea    ecx,[edx+0x1]
c00110de:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c00110e4:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c00110eb:	eb 19                	jmp    c0011106 <VgaText::putchar(char)+0x114>
c00110ed:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c00110f3:	0f be c0             	movsx  eax,al
c00110f6:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c00110fc:	50                   	push   eax
c00110fd:	53                   	push   ebx
c00110fe:	e8 ab fa ff ff       	call   c0010bae <VgaText::putchar(char, VgaColour, VgaColour)>
c0011103:	83 c4 10             	add    esp,0x10
c0011106:	83 c4 14             	add    esp,0x14
c0011109:	5b                   	pop    ebx
c001110a:	5e                   	pop    esi
c001110b:	c3                   	ret    

c001110c <VgaText::puts(char const*)>:
c001110c:	53                   	push   ebx
c001110d:	83 ec 08             	sub    esp,0x8
c0011110:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011114:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0011117:	84 c0                	test   al,al
c0011119:	74 12                	je     c001112d <VgaText::puts(char const*)+0x21>
c001111b:	43                   	inc    ebx
c001111c:	51                   	push   ecx
c001111d:	51                   	push   ecx
c001111e:	50                   	push   eax
c001111f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011123:	e8 ca fe ff ff       	call   c0010ff2 <VgaText::putchar(char)>
c0011128:	83 c4 10             	add    esp,0x10
c001112b:	eb e7                	jmp    c0011114 <VgaText::puts(char const*)+0x8>
c001112d:	83 c4 08             	add    esp,0x8
c0011130:	5b                   	pop    ebx
c0011131:	c3                   	ret    

c0011132 <VgaText::putx(unsigned int)>:
c0011132:	57                   	push   edi
c0011133:	b9 11 00 00 00       	mov    ecx,0x11
c0011138:	56                   	push   esi
c0011139:	be 8e a3 02 c0       	mov    esi,0xc002a38e
c001113e:	53                   	push   ebx
c001113f:	83 ec 20             	sub    esp,0x20
c0011142:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011146:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c001114a:	fc                   	cld    
c001114b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001114d:	be 08 00 00 00       	mov    esi,0x8
c0011152:	50                   	push   eax
c0011153:	50                   	push   eax
c0011154:	89 d8                	mov    eax,ebx
c0011156:	c1 e3 04             	shl    ebx,0x4
c0011159:	c1 e8 1c             	shr    eax,0x1c
c001115c:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0011161:	50                   	push   eax
c0011162:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011166:	e8 87 fe ff ff       	call   c0010ff2 <VgaText::putchar(char)>
c001116b:	83 c4 10             	add    esp,0x10
c001116e:	4e                   	dec    esi
c001116f:	75 e1                	jne    c0011152 <VgaText::putx(unsigned int)+0x20>
c0011171:	83 c4 20             	add    esp,0x20
c0011174:	5b                   	pop    ebx
c0011175:	5e                   	pop    esi
c0011176:	5f                   	pop    edi
c0011177:	c3                   	ret    

c0011178 <VgaText::VgaText(char const*)>:
c0011178:	57                   	push   edi
c0011179:	56                   	push   esi
c001117a:	53                   	push   ebx
c001117b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001117f:	83 ec 08             	sub    esp,0x8
c0011182:	6a 00                	push   0x0
c0011184:	50                   	push   eax
c0011185:	e8 6e 05 00 00       	call   c00116f8 <UnixFile::UnixFile(int)>
c001118a:	83 c4 10             	add    esp,0x10
c001118d:	ba f4 a3 02 c0       	mov    edx,0xc002a3f4
c0011192:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011196:	89 10                	mov    DWORD PTR [eax],edx
c0011198:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001119c:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c00111a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111aa:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c00111b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111b8:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c00111bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111c3:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c00111ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111ce:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c00111d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111dc:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c00111e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111ea:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c00111f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111f5:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c00111fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011200:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c0011206:	bb 40 e4 02 c0       	mov    ebx,0xc002e440
c001120b:	b8 08 00 00 00       	mov    eax,0x8
c0011210:	fc                   	cld    
c0011211:	89 d7                	mov    edi,edx
c0011213:	89 de                	mov    esi,ebx
c0011215:	89 c1                	mov    ecx,eax
c0011217:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011219:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001121d:	05 1e 10 00 00       	add    eax,0x101e
c0011222:	83 ec 08             	sub    esp,0x8
c0011225:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011229:	50                   	push   eax
c001122a:	e8 05 f6 fe ff       	call   c0000834 <strcpy>
c001122f:	83 c4 10             	add    esp,0x10
c0011232:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011236:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c0011240:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011244:	83 c0 0c             	add    eax,0xc
c0011247:	83 ec 04             	sub    esp,0x4
c001124a:	68 00 0f 00 00       	push   0xf00
c001124f:	6a 00                	push   0x0
c0011251:	50                   	push   eax
c0011252:	e8 21 f5 fe ff       	call   c0000778 <memset>
c0011257:	83 c4 10             	add    esp,0x10
c001125a:	83 ec 04             	sub    esp,0x4
c001125d:	6a 00                	push   0x0
c001125f:	6a 07                	push   0x7
c0011261:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011265:	e8 b4 f4 ff ff       	call   c001071e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001126a:	83 c4 10             	add    esp,0x10
c001126d:	83 ec 08             	sub    esp,0x8
c0011270:	6a 02                	push   0x2
c0011272:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011276:	e8 49 fa ff ff       	call   c0010cc4 <VgaText::setCursorHeight(int)>
c001127b:	83 c4 10             	add    esp,0x10
c001127e:	83 ec 04             	sub    esp,0x4
c0011281:	6a 00                	push   0x0
c0011283:	6a 00                	push   0x0
c0011285:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011289:	e8 e0 f5 ff ff       	call   c001086e <VgaText::setCursor(int, int)>
c001128e:	83 c4 10             	add    esp,0x10
c0011291:	83 ec 08             	sub    esp,0x8
c0011294:	6a 01                	push   0x1
c0011296:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001129a:	e8 7d f3 ff ff       	call   c001061c <VgaText::showCursor(bool)>
c001129f:	83 c4 10             	add    esp,0x10
c00112a2:	83 ec 08             	sub    esp,0x8
c00112a5:	6a 01                	push   0x1
c00112a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112ab:	e8 7c f3 ff ff       	call   c001062c <VgaText::disableBlink(bool)>
c00112b0:	83 c4 10             	add    esp,0x10
c00112b3:	83 ec 0c             	sub    esp,0xc
c00112b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112ba:	e8 cf fc ff ff       	call   c0010f8e <VgaText::clearScreen()>
c00112bf:	83 c4 10             	add    esp,0x10
c00112c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112c6:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c00112cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112d1:	05 9e 10 00 00       	add    eax,0x109e
c00112d6:	83 ec 04             	sub    esp,0x4
c00112d9:	68 96 00 00 00       	push   0x96
c00112de:	6a 00                	push   0x0
c00112e0:	50                   	push   eax
c00112e1:	e8 92 f4 fe ff       	call   c0000778 <memset>
c00112e6:	83 c4 10             	add    esp,0x10
c00112e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112ed:	05 34 11 00 00       	add    eax,0x1134
c00112f2:	83 ec 04             	sub    esp,0x4
c00112f5:	68 2c 01 00 00       	push   0x12c
c00112fa:	6a 00                	push   0x0
c00112fc:	50                   	push   eax
c00112fd:	e8 76 f4 fe ff       	call   c0000778 <memset>
c0011302:	83 c4 10             	add    esp,0x10
c0011305:	90                   	nop
c0011306:	5b                   	pop    ebx
c0011307:	5e                   	pop    esi
c0011308:	5f                   	pop    edi
c0011309:	c3                   	ret    

c001130a <VgaText::receiveKey(unsigned char)>:
c001130a:	55                   	push   ebp
c001130b:	57                   	push   edi
c001130c:	56                   	push   esi
c001130d:	53                   	push   ebx
c001130e:	83 ec 1c             	sub    esp,0x1c
c0011311:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011315:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011319:	84 db                	test   bl,bl
c001131b:	0f 84 c9 00 00 00    	je     c00113ea <VgaText::receiveKey(unsigned char)+0xe0>
c0011321:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c0011327:	80 fb 08             	cmp    bl,0x8
c001132a:	75 2c                	jne    c0011358 <VgaText::receiveKey(unsigned char)+0x4e>
c001132c:	83 ec 0c             	sub    esp,0xc
c001132f:	57                   	push   edi
c0011330:	e8 5f f4 fe ff       	call   c0000794 <strlen>
c0011335:	83 c4 10             	add    esp,0x10
c0011338:	85 c0                	test   eax,eax
c001133a:	74 41                	je     c001137d <VgaText::receiveKey(unsigned char)+0x73>
c001133c:	50                   	push   eax
c001133d:	50                   	push   eax
c001133e:	6a 08                	push   0x8
c0011340:	56                   	push   esi
c0011341:	e8 ac fc ff ff       	call   c0010ff2 <VgaText::putchar(char)>
c0011346:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011349:	e8 46 f4 fe ff       	call   c0000794 <strlen>
c001134e:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c0011356:	eb 22                	jmp    c001137a <VgaText::receiveKey(unsigned char)+0x70>
c0011358:	0f be c3             	movsx  eax,bl
c001135b:	52                   	push   edx
c001135c:	52                   	push   edx
c001135d:	50                   	push   eax
c001135e:	56                   	push   esi
c001135f:	e8 8e fc ff ff       	call   c0010ff2 <VgaText::putchar(char)>
c0011364:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0011368:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001136d:	59                   	pop    ecx
c001136e:	5d                   	pop    ebp
c001136f:	8d 44 24 16          	lea    eax,[esp+0x16]
c0011373:	50                   	push   eax
c0011374:	57                   	push   edi
c0011375:	e8 fa f5 fe ff       	call   c0000974 <strcat>
c001137a:	83 c4 10             	add    esp,0x10
c001137d:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c0011384:	75 05                	jne    c001138b <VgaText::receiveKey(unsigned char)+0x81>
c0011386:	80 fb 0a             	cmp    bl,0xa
c0011389:	75 53                	jne    c00113de <VgaText::receiveKey(unsigned char)+0xd4>
c001138b:	83 ec 0c             	sub    esp,0xc
c001138e:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c0011394:	53                   	push   ebx
c0011395:	e8 fa f3 fe ff       	call   c0000794 <strlen>
c001139a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001139d:	89 c5                	mov    ebp,eax
c001139f:	e8 f0 f3 fe ff       	call   c0000794 <strlen>
c00113a4:	83 c4 10             	add    esp,0x10
c00113a7:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c00113ab:	3d 2c 01 00 00       	cmp    eax,0x12c
c00113b0:	76 10                	jbe    c00113c2 <VgaText::receiveKey(unsigned char)+0xb8>
c00113b2:	83 ec 0c             	sub    esp,0xc
c00113b5:	68 9f a3 02 c0       	push   0xc002a39f
c00113ba:	e8 ae 91 00 00       	call   c001a56d <Krnl::panic(char const*)>
c00113bf:	83 c4 10             	add    esp,0x10
c00113c2:	50                   	push   eax
c00113c3:	50                   	push   eax
c00113c4:	57                   	push   edi
c00113c5:	53                   	push   ebx
c00113c6:	e8 a9 f5 fe ff       	call   c0000974 <strcat>
c00113cb:	83 c4 0c             	add    esp,0xc
c00113ce:	68 96 00 00 00       	push   0x96
c00113d3:	6a 00                	push   0x0
c00113d5:	57                   	push   edi
c00113d6:	e8 9d f3 fe ff       	call   c0000778 <memset>
c00113db:	83 c4 10             	add    esp,0x10
c00113de:	83 ec 0c             	sub    esp,0xc
c00113e1:	56                   	push   esi
c00113e2:	e8 d5 f9 ff ff       	call   c0010dbc <VgaText::doUpdate()>
c00113e7:	83 c4 10             	add    esp,0x10
c00113ea:	83 c4 1c             	add    esp,0x1c
c00113ed:	5b                   	pop    ebx
c00113ee:	5e                   	pop    esi
c00113ef:	5f                   	pop    edi
c00113f0:	5d                   	pop    ebp
c00113f1:	c3                   	ret    

c00113f2 <VgaText::write(unsigned long long, void*, int*)>:
c00113f2:	55                   	push   ebp
c00113f3:	57                   	push   edi
c00113f4:	56                   	push   esi
c00113f5:	53                   	push   ebx
c00113f6:	83 ec 0c             	sub    esp,0xc
c00113f9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00113fd:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0011401:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011405:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c001140c:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c001140f:	39 eb                	cmp    ebx,ebp
c0011411:	74 13                	je     c0011426 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0011413:	43                   	inc    ebx
c0011414:	50                   	push   eax
c0011415:	50                   	push   eax
c0011416:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c001141a:	50                   	push   eax
c001141b:	56                   	push   esi
c001141c:	e8 d1 fb ff ff       	call   c0010ff2 <VgaText::putchar(char)>
c0011421:	83 c4 10             	add    esp,0x10
c0011424:	eb e9                	jmp    c001140f <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0011426:	83 ec 0c             	sub    esp,0xc
c0011429:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c0011430:	56                   	push   esi
c0011431:	e8 86 f9 ff ff       	call   c0010dbc <VgaText::doUpdate()>
c0011436:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001143a:	89 38                	mov    DWORD PTR [eax],edi
c001143c:	83 c4 1c             	add    esp,0x1c
c001143f:	31 c0                	xor    eax,eax
c0011441:	5b                   	pop    ebx
c0011442:	5e                   	pop    esi
c0011443:	5f                   	pop    edi
c0011444:	5d                   	pop    ebp
c0011445:	c3                   	ret    

c0011446 <newTerminal(char*)>:
c0011446:	83 ec 28             	sub    esp,0x28
c0011449:	68 60 12 00 00       	push   0x1260
c001144e:	e8 ed e3 ff ff       	call   c000f840 <malloc>
c0011453:	5a                   	pop    edx
c0011454:	59                   	pop    ecx
c0011455:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011459:	50                   	push   eax
c001145a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001145e:	e8 15 fd ff ff       	call   c0011178 <VgaText::VgaText(char const*)>
c0011463:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011467:	83 c4 2c             	add    esp,0x2c
c001146a:	c3                   	ret    
c001146b:	90                   	nop

c001146c <TSS::TSS()>:
c001146c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011470:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011477:	90                   	nop
c0011478:	c3                   	ret    
c0011479:	90                   	nop

c001147a <TSS::setESP(unsigned long)>:
c001147a:	55                   	push   ebp
c001147b:	89 e5                	mov    ebp,esp
c001147d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011480:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011483:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011486:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011489:	90                   	nop
c001148a:	5d                   	pop    ebp
c001148b:	c3                   	ret    

c001148c <TSS::flush()>:
c001148c:	55                   	push   ebp
c001148d:	89 e5                	mov    ebp,esp
c001148f:	83 ec 10             	sub    esp,0x10
c0011492:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011495:	8b 00                	mov    eax,DWORD PTR [eax]
c0011497:	83 c8 03             	or     eax,0x3
c001149a:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c001149e:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00114a2:	66 89 d0             	mov    ax,dx
c00114a5:	0f 00 d8             	ltr    ax
c00114a8:	90                   	nop
c00114a9:	c9                   	leave  
c00114aa:	c3                   	ret    
c00114ab:	90                   	nop

c00114ac <TSS::setup(unsigned long, unsigned long)>:
c00114ac:	55                   	push   ebp
c00114ad:	89 e5                	mov    ebp,esp
c00114af:	83 ec 18             	sub    esp,0x18
c00114b2:	83 ec 0c             	sub    esp,0xc
c00114b5:	6a 68                	push   0x68
c00114b7:	e8 84 e3 ff ff       	call   c000f840 <malloc>
c00114bc:	83 c4 10             	add    esp,0x10
c00114bf:	89 c2                	mov    edx,eax
c00114c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114c4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00114c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114ca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114cd:	83 ec 04             	sub    esp,0x4
c00114d0:	6a 68                	push   0x68
c00114d2:	6a 00                	push   0x0
c00114d4:	50                   	push   eax
c00114d5:	e8 9e f2 fe ff       	call   c0000778 <memset>
c00114da:	83 c4 10             	add    esp,0x10
c00114dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114e0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114e3:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c00114e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114ec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114ef:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c00114f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114f8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114fb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00114fe:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011501:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011504:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011507:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c001150d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011510:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011513:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0011519:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001151c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001151f:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0011525:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011528:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001152b:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0011531:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011534:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011537:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c001153d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011540:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011543:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0011549:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001154c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001154f:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0011552:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0011555:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011558:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001155b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001155e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011561:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011564:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011567:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c001156e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011571:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011574:	0f 20 da             	mov    edx,cr3
c0011577:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001157a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001157d:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0011580:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011583:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011586:	83 ec 08             	sub    esp,0x8
c0011589:	50                   	push   eax
c001158a:	8d 45 ec             	lea    eax,[ebp-0x14]
c001158d:	50                   	push   eax
c001158e:	e8 8b da ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c0011593:	83 c4 10             	add    esp,0x10
c0011596:	83 ec 08             	sub    esp,0x8
c0011599:	6a 68                	push   0x68
c001159b:	8d 45 ec             	lea    eax,[ebp-0x14]
c001159e:	50                   	push   eax
c001159f:	e8 96 da ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c00115a4:	83 c4 10             	add    esp,0x10
c00115a7:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c00115ab:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00115ae:	83 e0 0f             	and    eax,0xf
c00115b1:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00115b4:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00115b7:	83 c8 40             	or     eax,0x40
c00115ba:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00115bd:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c00115c2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00115c8:	05 78 01 00 00       	add    eax,0x178
c00115cd:	83 ec 04             	sub    esp,0x4
c00115d0:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00115d3:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00115d6:	50                   	push   eax
c00115d7:	e8 92 da ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c00115dc:	83 c4 10             	add    esp,0x10
c00115df:	89 c2                	mov    edx,eax
c00115e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115e4:	89 10                	mov    DWORD PTR [eax],edx
c00115e6:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c00115eb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00115f1:	05 78 01 00 00       	add    eax,0x178
c00115f6:	83 ec 0c             	sub    esp,0xc
c00115f9:	50                   	push   eax
c00115fa:	e8 b3 da ff ff       	call   c000f0b2 <GDT::flush()>
c00115ff:	83 c4 10             	add    esp,0x10
c0011602:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011605:	8b 00                	mov    eax,DWORD PTR [eax]
c0011607:	83 ec 08             	sub    esp,0x8
c001160a:	50                   	push   eax
c001160b:	68 08 a4 02 c0       	push   0xc002a408
c0011610:	e8 7d 18 00 00       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0011615:	83 c4 10             	add    esp,0x10
c0011618:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001161b:	8b 00                	mov    eax,DWORD PTR [eax]
c001161d:	c9                   	leave  
c001161e:	c3                   	ret    
c001161f:	90                   	nop

c0011620 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0011620:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011624:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011628:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001162b:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011630:	75 08                	jne    c001163a <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0011632:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011638:	eb 38                	jmp    c0011672 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c001163a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001163f:	75 17                	jne    c0011658 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0011641:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011646:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011649:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c001164f:	8b 10                	mov    edx,DWORD PTR [eax]
c0011651:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011655:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0011658:	89 c1                	mov    ecx,eax
c001165a:	83 e1 fd             	and    ecx,0xfffffffd
c001165d:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0011663:	74 cd                	je     c0011632 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011665:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c001166a:	83 e0 ef             	and    eax,0xffffffef
c001166d:	83 f8 08             	cmp    eax,0x8
c0011670:	76 c0                	jbe    c0011632 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011672:	31 c0                	xor    eax,eax
c0011674:	c3                   	ret    
c0011675:	90                   	nop

c0011676 <ReservedFilename::isAtty()>:
c0011676:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001167a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001167d:	31 c0                	xor    eax,eax
c001167f:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0011685:	74 09                	je     c0011690 <ReservedFilename::isAtty()+0x1a>
c0011687:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c001168d:	0f 94 c0             	sete   al
c0011690:	c3                   	ret    
c0011691:	90                   	nop

c0011692 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0011692:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011696:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001169a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001169d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00116a1:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00116a6:	75 08                	jne    c00116b0 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c00116a8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00116ae:	eb 3d                	jmp    c00116ed <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00116b0:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00116b5:	75 17                	jne    c00116ce <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c00116b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00116bc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00116bf:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c00116c5:	8b 10                	mov    edx,DWORD PTR [eax]
c00116c7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00116cb:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c00116ce:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00116d3:	75 04                	jne    c00116d9 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c00116d5:	89 0a                	mov    DWORD PTR [edx],ecx
c00116d7:	eb 14                	jmp    c00116ed <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00116d9:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00116de:	74 c8                	je     c00116a8 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00116e0:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00116e5:	83 e0 ef             	and    eax,0xffffffef
c00116e8:	83 f8 08             	cmp    eax,0x8
c00116eb:	76 bb                	jbe    c00116a8 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00116ed:	31 c0                	xor    eax,eax
c00116ef:	c3                   	ret    

c00116f0 <UnixFile::getFileDescriptor()>:
c00116f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00116f7:	c3                   	ret    

c00116f8 <UnixFile::UnixFile(int)>:
c00116f8:	53                   	push   ebx
c00116f9:	83 ec 28             	sub    esp,0x28
c00116fc:	ba f4 a4 02 c0       	mov    edx,0xc002a4f4
c0011701:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011705:	89 10                	mov    DWORD PTR [eax],edx
c0011707:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c001170f:	0f 8f 8c 01 00 00    	jg     c00118a1 <UnixFile::UnixFile(int)+0x1a9>
c0011715:	a1 20 d3 02 c0       	mov    eax,ds:0xc002d320
c001171a:	8d 50 01             	lea    edx,[eax+0x1]
c001171d:	89 15 20 d3 02 c0    	mov    DWORD PTR ds:0xc002d320,edx
c0011723:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011727:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001172a:	83 ec 08             	sub    esp,0x8
c001172d:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011731:	68 f8 e4 02 c0       	push   0xc002e4f8
c0011736:	e8 a5 6f 01 00       	call   c00286e0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c001173b:	83 c4 10             	add    esp,0x10
c001173e:	a0 f4 e4 02 c0       	mov    al,ds:0xc002e4f4
c0011743:	83 f0 01             	xor    eax,0x1
c0011746:	84 c0                	test   al,al
c0011748:	0f 84 54 01 00 00    	je     c00118a2 <UnixFile::UnixFile(int)+0x1aa>
c001174e:	c6 05 f4 e4 02 c0 01 	mov    BYTE PTR ds:0xc002e4f4,0x1
c0011755:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c001175d:	83 ec 0c             	sub    esp,0xc
c0011760:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011764:	e8 d7 e0 ff ff       	call   c000f840 <malloc>
c0011769:	83 c4 10             	add    esp,0x10
c001176c:	89 c3                	mov    ebx,eax
c001176e:	83 ec 08             	sub    esp,0x8
c0011771:	68 03 ff ff 0f       	push   0xfffff03
c0011776:	53                   	push   ebx
c0011777:	e8 2c 01 00 00       	call   c00118a8 <ReservedFilename::ReservedFilename(int)>
c001177c:	83 c4 10             	add    esp,0x10
c001177f:	89 1d ec e4 02 c0    	mov    DWORD PTR ds:0xc002e4ec,ebx
c0011785:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c001178d:	83 ec 0c             	sub    esp,0xc
c0011790:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011794:	e8 a7 e0 ff ff       	call   c000f840 <malloc>
c0011799:	83 c4 10             	add    esp,0x10
c001179c:	89 c3                	mov    ebx,eax
c001179e:	83 ec 08             	sub    esp,0x8
c00117a1:	68 01 ff ff 0f       	push   0xfffff01
c00117a6:	53                   	push   ebx
c00117a7:	e8 fc 00 00 00       	call   c00118a8 <ReservedFilename::ReservedFilename(int)>
c00117ac:	83 c4 10             	add    esp,0x10
c00117af:	89 1d f0 e4 02 c0    	mov    DWORD PTR ds:0xc002e4f0,ebx
c00117b5:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c00117bd:	83 ec 0c             	sub    esp,0xc
c00117c0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00117c4:	e8 77 e0 ff ff       	call   c000f840 <malloc>
c00117c9:	83 c4 10             	add    esp,0x10
c00117cc:	89 c3                	mov    ebx,eax
c00117ce:	83 ec 08             	sub    esp,0x8
c00117d1:	68 00 ff ff 0f       	push   0xfffff00
c00117d6:	53                   	push   ebx
c00117d7:	e8 cc 00 00 00       	call   c00118a8 <ReservedFilename::ReservedFilename(int)>
c00117dc:	83 c4 10             	add    esp,0x10
c00117df:	89 1d e4 e4 02 c0    	mov    DWORD PTR ds:0xc002e4e4,ebx
c00117e5:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00117ed:	83 ec 0c             	sub    esp,0xc
c00117f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00117f4:	e8 47 e0 ff ff       	call   c000f840 <malloc>
c00117f9:	83 c4 10             	add    esp,0x10
c00117fc:	89 c3                	mov    ebx,eax
c00117fe:	83 ec 08             	sub    esp,0x8
c0011801:	68 02 ff ff 0f       	push   0xfffff02
c0011806:	53                   	push   ebx
c0011807:	e8 9c 00 00 00       	call   c00118a8 <ReservedFilename::ReservedFilename(int)>
c001180c:	83 c4 10             	add    esp,0x10
c001180f:	89 1d e8 e4 02 c0    	mov    DWORD PTR ds:0xc002e4e8,ebx
c0011815:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001181d:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0011822:	7f 7e                	jg     c00118a2 <UnixFile::UnixFile(int)+0x1aa>
c0011824:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c001182c:	83 ec 0c             	sub    esp,0xc
c001182f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011833:	e8 08 e0 ff ff       	call   c000f840 <malloc>
c0011838:	83 c4 10             	add    esp,0x10
c001183b:	89 c3                	mov    ebx,eax
c001183d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011841:	05 10 ff ff 0f       	add    eax,0xfffff10
c0011846:	83 ec 08             	sub    esp,0x8
c0011849:	50                   	push   eax
c001184a:	53                   	push   ebx
c001184b:	e8 58 00 00 00       	call   c00118a8 <ReservedFilename::ReservedFilename(int)>
c0011850:	83 c4 10             	add    esp,0x10
c0011853:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011857:	89 1c 85 c0 e4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1b40],ebx
c001185e:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0011866:	83 ec 0c             	sub    esp,0xc
c0011869:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001186d:	e8 ce df ff ff       	call   c000f840 <malloc>
c0011872:	83 c4 10             	add    esp,0x10
c0011875:	89 c3                	mov    ebx,eax
c0011877:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001187b:	05 20 ff ff 0f       	add    eax,0xfffff20
c0011880:	83 ec 08             	sub    esp,0x8
c0011883:	50                   	push   eax
c0011884:	53                   	push   ebx
c0011885:	e8 1e 00 00 00       	call   c00118a8 <ReservedFilename::ReservedFilename(int)>
c001188a:	83 c4 10             	add    esp,0x10
c001188d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011891:	89 1c 85 80 e4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1b80],ebx
c0011898:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001189c:	e9 7c ff ff ff       	jmp    c001181d <UnixFile::UnixFile(int)+0x125>
c00118a1:	90                   	nop
c00118a2:	83 c4 28             	add    esp,0x28
c00118a5:	5b                   	pop    ebx
c00118a6:	c3                   	ret    
c00118a7:	90                   	nop

c00118a8 <ReservedFilename::ReservedFilename(int)>:
c00118a8:	83 ec 0c             	sub    esp,0xc
c00118ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118af:	83 ec 08             	sub    esp,0x8
c00118b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118b6:	50                   	push   eax
c00118b7:	e8 3c fe ff ff       	call   c00116f8 <UnixFile::UnixFile(int)>
c00118bc:	83 c4 10             	add    esp,0x10
c00118bf:	ba 10 a5 02 c0       	mov    edx,0xc002a510
c00118c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118c8:	89 10                	mov    DWORD PTR [eax],edx
c00118ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118ce:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00118d2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00118d5:	90                   	nop
c00118d6:	83 c4 0c             	add    esp,0xc
c00118d9:	c3                   	ret    

c00118da <UnixFile::~UnixFile()>:
c00118da:	83 ec 1c             	sub    esp,0x1c
c00118dd:	ba f4 a4 02 c0       	mov    edx,0xc002a4f4
c00118e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00118e6:	89 10                	mov    DWORD PTR [eax],edx
c00118e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00118ec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00118ef:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00118f4:	7f 73                	jg     c0011969 <UnixFile::~UnixFile()+0x8f>
c00118f6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00118fe:	83 ec 0c             	sub    esp,0xc
c0011901:	68 f8 e4 02 c0       	push   0xc002e4f8
c0011906:	e8 a9 6e 01 00       	call   c00287b4 <LinkedList<UnixFile>::getFirstElement()>
c001190b:	83 c4 10             	add    esp,0x10
c001190e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011912:	83 ec 0c             	sub    esp,0xc
c0011915:	68 f8 e4 02 c0       	push   0xc002e4f8
c001191a:	e8 9d 6e 01 00       	call   c00287bc <LinkedList<UnixFile>::removeFirst()>
c001191f:	83 c4 10             	add    esp,0x10
c0011922:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011926:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001192a:	74 40                	je     c001196c <UnixFile::~UnixFile()+0x92>
c001192c:	83 ec 08             	sub    esp,0x8
c001192f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011933:	68 f8 e4 02 c0       	push   0xc002e4f8
c0011938:	e8 a3 6d 01 00       	call   c00286e0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c001193d:	83 c4 10             	add    esp,0x10
c0011940:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011944:	8d 50 01             	lea    edx,[eax+0x1]
c0011947:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001194b:	3d 88 13 00 00       	cmp    eax,0x1388
c0011950:	0f 94 c0             	sete   al
c0011953:	84 c0                	test   al,al
c0011955:	74 a7                	je     c00118fe <UnixFile::~UnixFile()+0x24>
c0011957:	83 ec 0c             	sub    esp,0xc
c001195a:	68 cc a4 02 c0       	push   0xc002a4cc
c001195f:	e8 09 8c 00 00       	call   c001a56d <Krnl::panic(char const*)>
c0011964:	83 c4 10             	add    esp,0x10
c0011967:	eb 95                	jmp    c00118fe <UnixFile::~UnixFile()+0x24>
c0011969:	90                   	nop
c001196a:	eb 01                	jmp    c001196d <UnixFile::~UnixFile()+0x93>
c001196c:	90                   	nop
c001196d:	90                   	nop
c001196e:	83 c4 1c             	add    esp,0x1c
c0011971:	c3                   	ret    

c0011972 <UnixFile::~UnixFile()>:
c0011972:	83 ec 0c             	sub    esp,0xc
c0011975:	83 ec 0c             	sub    esp,0xc
c0011978:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001197c:	e8 59 ff ff ff       	call   c00118da <UnixFile::~UnixFile()>
c0011981:	83 c4 10             	add    esp,0x10
c0011984:	83 ec 08             	sub    esp,0x8
c0011987:	6a 0c                	push   0xc
c0011989:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001198d:	e8 20 14 00 00       	call   c0012db2 <operator delete(void*, unsigned long)>
c0011992:	83 c4 10             	add    esp,0x10
c0011995:	83 c4 0c             	add    esp,0xc
c0011998:	c3                   	ret    
c0011999:	90                   	nop

c001199a <ReservedFilename::~ReservedFilename()>:
c001199a:	83 ec 0c             	sub    esp,0xc
c001199d:	ba 10 a5 02 c0       	mov    edx,0xc002a510
c00119a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119a6:	89 10                	mov    DWORD PTR [eax],edx
c00119a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119ac:	83 ec 0c             	sub    esp,0xc
c00119af:	50                   	push   eax
c00119b0:	e8 25 ff ff ff       	call   c00118da <UnixFile::~UnixFile()>
c00119b5:	83 c4 10             	add    esp,0x10
c00119b8:	90                   	nop
c00119b9:	83 c4 0c             	add    esp,0xc
c00119bc:	c3                   	ret    
c00119bd:	90                   	nop

c00119be <ReservedFilename::~ReservedFilename()>:
c00119be:	83 ec 0c             	sub    esp,0xc
c00119c1:	83 ec 0c             	sub    esp,0xc
c00119c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119c8:	e8 cd ff ff ff       	call   c001199a <ReservedFilename::~ReservedFilename()>
c00119cd:	83 c4 10             	add    esp,0x10
c00119d0:	83 ec 08             	sub    esp,0x8
c00119d3:	6a 0c                	push   0xc
c00119d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119d9:	e8 d4 13 00 00       	call   c0012db2 <operator delete(void*, unsigned long)>
c00119de:	83 c4 10             	add    esp,0x10
c00119e1:	83 c4 0c             	add    esp,0xc
c00119e4:	c3                   	ret    

c00119e5 <getFromFileDescriptor(int)>:
c00119e5:	53                   	push   ebx
c00119e6:	83 ec 08             	sub    esp,0x8
c00119e9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00119ed:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00119f3:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00119f9:	7f 2c                	jg     c0011a27 <getFromFileDescriptor(int)+0x42>
c00119fb:	83 ec 0c             	sub    esp,0xc
c00119fe:	68 f8 e4 02 c0       	push   0xc002e4f8
c0011a03:	e8 ac 6d 01 00       	call   c00287b4 <LinkedList<UnixFile>::getFirstElement()>
c0011a08:	83 c4 10             	add    esp,0x10
c0011a0b:	85 c0                	test   eax,eax
c0011a0d:	75 04                	jne    c0011a13 <getFromFileDescriptor(int)+0x2e>
c0011a0f:	31 c0                	xor    eax,eax
c0011a11:	eb 6e                	jmp    c0011a81 <getFromFileDescriptor(int)+0x9c>
c0011a13:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011a16:	74 69                	je     c0011a81 <getFromFileDescriptor(int)+0x9c>
c0011a18:	52                   	push   edx
c0011a19:	52                   	push   edx
c0011a1a:	50                   	push   eax
c0011a1b:	68 f8 e4 02 c0       	push   0xc002e4f8
c0011a20:	e8 39 6e 01 00       	call   c002885e <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011a25:	eb e1                	jmp    c0011a08 <getFromFileDescriptor(int)+0x23>
c0011a27:	a1 ec e4 02 c0       	mov    eax,ds:0xc002e4ec
c0011a2c:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011a32:	74 4d                	je     c0011a81 <getFromFileDescriptor(int)+0x9c>
c0011a34:	a1 f0 e4 02 c0       	mov    eax,ds:0xc002e4f0
c0011a39:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011a3f:	74 40                	je     c0011a81 <getFromFileDescriptor(int)+0x9c>
c0011a41:	a1 e8 e4 02 c0       	mov    eax,ds:0xc002e4e8
c0011a46:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011a4c:	74 33                	je     c0011a81 <getFromFileDescriptor(int)+0x9c>
c0011a4e:	a1 e4 e4 02 c0       	mov    eax,ds:0xc002e4e4
c0011a53:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011a59:	74 26                	je     c0011a81 <getFromFileDescriptor(int)+0x9c>
c0011a5b:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011a61:	83 f8 08             	cmp    eax,0x8
c0011a64:	77 09                	ja     c0011a6f <getFromFileDescriptor(int)+0x8a>
c0011a66:	8b 04 85 c0 e4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1b40]
c0011a6d:	eb 12                	jmp    c0011a81 <getFromFileDescriptor(int)+0x9c>
c0011a6f:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011a75:	83 fb 08             	cmp    ebx,0x8
c0011a78:	77 95                	ja     c0011a0f <getFromFileDescriptor(int)+0x2a>
c0011a7a:	8b 04 9d 80 e4 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd1b80]
c0011a81:	83 c4 08             	add    esp,0x8
c0011a84:	5b                   	pop    ebx
c0011a85:	c3                   	ret    

c0011a86 <__static_initialization_and_destruction_0(int, int)>:
c0011a86:	83 ec 0c             	sub    esp,0xc
c0011a89:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011a8e:	75 34                	jne    c0011ac4 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011a90:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011a98:	75 2a                	jne    c0011ac4 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011a9a:	83 ec 0c             	sub    esp,0xc
c0011a9d:	68 f8 e4 02 c0       	push   0xc002e4f8
c0011aa2:	e8 e1 6b 01 00       	call   c0028688 <LinkedList<UnixFile>::LinkedList()>
c0011aa7:	83 c4 10             	add    esp,0x10
c0011aaa:	83 ec 04             	sub    esp,0x4
c0011aad:	68 b4 d2 02 c0       	push   0xc002d2b4
c0011ab2:	68 f8 e4 02 c0       	push   0xc002e4f8
c0011ab7:	68 86 86 02 c0       	push   0xc0028686
c0011abc:	e8 6b 12 00 00       	call   c0012d2c <__cxa_atexit>
c0011ac1:	83 c4 10             	add    esp,0x10
c0011ac4:	90                   	nop
c0011ac5:	83 c4 0c             	add    esp,0xc
c0011ac8:	c3                   	ret    

c0011ac9 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011ac9:	83 ec 0c             	sub    esp,0xc
c0011acc:	83 ec 08             	sub    esp,0x8
c0011acf:	68 ff ff 00 00       	push   0xffff
c0011ad4:	6a 01                	push   0x1
c0011ad6:	e8 ab ff ff ff       	call   c0011a86 <__static_initialization_and_destruction_0(int, int)>
c0011adb:	83 c4 10             	add    esp,0x10
c0011ade:	83 c4 0c             	add    esp,0xc
c0011ae1:	c3                   	ret    

c0011ae2 <Virt::swappingSetup()>:
c0011ae2:	57                   	push   edi
c0011ae3:	56                   	push   esi
c0011ae4:	53                   	push   ebx
c0011ae5:	83 ec 1c             	sub    esp,0x1c
c0011ae8:	68 24 a5 02 c0       	push   0xc002a524
c0011aed:	e8 a0 13 00 00       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0011af2:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011af9:	e8 42 dd ff ff       	call   c000f840 <malloc>
c0011afe:	83 c4 0c             	add    esp,0xc
c0011b01:	89 c6                	mov    esi,eax
c0011b03:	ff 35 f4 18 03 c0    	push   DWORD PTR ds:0xc00318f4
c0011b09:	68 3a a5 02 c0       	push   0xc002a53a
c0011b0e:	50                   	push   eax
c0011b0f:	e8 d6 18 00 00       	call   c00133ea <File::File(char const*, Process*)>
c0011b14:	83 c4 10             	add    esp,0x10
c0011b17:	85 f6                	test   esi,esi
c0011b19:	0f 84 34 01 00 00    	je     c0011c53 <Virt::swappingSetup()+0x171>
c0011b1f:	53                   	push   ebx
c0011b20:	8d 44 24 07          	lea    eax,[esp+0x7]
c0011b24:	50                   	push   eax
c0011b25:	8d 44 24 10          	lea    eax,[esp+0x10]
c0011b29:	50                   	push   eax
c0011b2a:	56                   	push   esi
c0011b2b:	e8 ca 1b 00 00       	call   c00136fa <File::stat(unsigned long long*, bool*)>
c0011b30:	83 c4 10             	add    esp,0x10
c0011b33:	85 c0                	test   eax,eax
c0011b35:	75 0b                	jne    c0011b42 <Virt::swappingSetup()+0x60>
c0011b37:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0011b3c:	0f 84 f0 00 00 00    	je     c0011c32 <Virt::swappingSetup()+0x150>
c0011b42:	83 ec 0c             	sub    esp,0xc
c0011b45:	56                   	push   esi
c0011b46:	e8 7b 1a 00 00       	call   c00135c6 <File::unlink()>
c0011b4b:	c7 04 24 64 a5 02 c0 	mov    DWORD PTR [esp],0xc002a564
c0011b52:	e8 3b 13 00 00       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0011b57:	58                   	pop    eax
c0011b58:	5a                   	pop    edx
c0011b59:	6a 12                	push   0x12
c0011b5b:	56                   	push   esi
c0011b5c:	e8 ed 18 00 00       	call   c001344e <File::open(FileOpenMode)>
c0011b61:	83 c4 10             	add    esp,0x10
c0011b64:	8b 0d 30 d3 02 c0    	mov    ecx,DWORD PTR ds:0xc002d330
c0011b6a:	85 c9                	test   ecx,ecx
c0011b6c:	74 42                	je     c0011bb0 <Virt::swappingSetup()+0xce>
c0011b6e:	31 db                	xor    ebx,ebx
c0011b70:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0011b74:	83 ec 0c             	sub    esp,0xc
c0011b77:	8b 06                	mov    eax,DWORD PTR [esi]
c0011b79:	57                   	push   edi
c0011b7a:	68 e2 1a 01 c0       	push   0xc0011ae2
c0011b7f:	6a 00                	push   0x0
c0011b81:	68 00 02 00 00       	push   0x200
c0011b86:	56                   	push   esi
c0011b87:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011b8a:	83 c4 20             	add    esp,0x20
c0011b8d:	81 7c 24 04 00 02 00 00 	cmp    DWORD PTR [esp+0x4],0x200
c0011b95:	74 10                	je     c0011ba7 <Virt::swappingSetup()+0xc5>
c0011b97:	83 ec 0c             	sub    esp,0xc
c0011b9a:	68 7c a5 02 c0       	push   0xc002a57c
c0011b9f:	e8 c9 89 00 00       	call   c001a56d <Krnl::panic(char const*)>
c0011ba4:	83 c4 10             	add    esp,0x10
c0011ba7:	43                   	inc    ebx
c0011ba8:	39 1d 30 d3 02 c0    	cmp    DWORD PTR ds:0xc002d330,ebx
c0011bae:	77 c4                	ja     c0011b74 <Virt::swappingSetup()+0x92>
c0011bb0:	83 ec 0c             	sub    esp,0xc
c0011bb3:	56                   	push   esi
c0011bb4:	e8 f3 18 00 00       	call   c00134ac <File::close()>
c0011bb9:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c0011bbe:	31 d2                	xor    edx,edx
c0011bc0:	c1 e0 09             	shl    eax,0x9
c0011bc3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0011bc7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011bcb:	83 c4 10             	add    esp,0x10
c0011bce:	83 ec 08             	sub    esp,0x8
c0011bd1:	0f ac d0 09          	shrd   eax,edx,0x9
c0011bd5:	31 d2                	xor    edx,edx
c0011bd7:	a3 30 d3 02 c0       	mov    ds:0xc002d330,eax
c0011bdc:	f7 35 2c d3 02 c0    	div    DWORD PTR ds:0xc002d32c
c0011be2:	c1 e8 05             	shr    eax,0x5
c0011be5:	50                   	push   eax
c0011be6:	68 9a a5 02 c0       	push   0xc002a59a
c0011beb:	e8 a2 12 00 00       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0011bf0:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c0011bf5:	31 d2                	xor    edx,edx
c0011bf7:	f7 35 2c d3 02 c0    	div    DWORD PTR ds:0xc002d32c
c0011bfd:	c1 e8 05             	shr    eax,0x5
c0011c00:	89 04 24             	mov    DWORD PTR [esp],eax
c0011c03:	e8 38 dc ff ff       	call   c000f840 <malloc>
c0011c08:	83 c4 0c             	add    esp,0xc
c0011c0b:	89 c1                	mov    ecx,eax
c0011c0d:	a3 08 e5 02 c0       	mov    ds:0xc002e508,eax
c0011c12:	31 d2                	xor    edx,edx
c0011c14:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c0011c19:	f7 35 2c d3 02 c0    	div    DWORD PTR ds:0xc002d32c
c0011c1f:	c1 e8 05             	shr    eax,0x5
c0011c22:	50                   	push   eax
c0011c23:	6a 00                	push   0x0
c0011c25:	51                   	push   ecx
c0011c26:	e8 4d eb fe ff       	call   c0000778 <memset>
c0011c2b:	83 c4 20             	add    esp,0x20
c0011c2e:	5b                   	pop    ebx
c0011c2f:	5e                   	pop    esi
c0011c30:	5f                   	pop    edi
c0011c31:	c3                   	ret    
c0011c32:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011c36:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011c3a:	89 c1                	mov    ecx,eax
c0011c3c:	89 d3                	mov    ebx,edx
c0011c3e:	09 c3                	or     ebx,eax
c0011c40:	0f 84 fc fe ff ff    	je     c0011b42 <Virt::swappingSetup()+0x60>
c0011c46:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0011c4c:	74 80                	je     c0011bce <Virt::swappingSetup()+0xec>
c0011c4e:	e9 ef fe ff ff       	jmp    c0011b42 <Virt::swappingSetup()+0x60>
c0011c53:	83 ec 0c             	sub    esp,0xc
c0011c56:	68 4a a5 02 c0       	push   0xc002a54a
c0011c5b:	e8 0d 89 00 00       	call   c001a56d <Krnl::panic(char const*)>
c0011c60:	83 c4 10             	add    esp,0x10
c0011c63:	e9 b7 fe ff ff       	jmp    c0011b1f <Virt::swappingSetup()+0x3d>

c0011c68 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011c68:	53                   	push   ebx
c0011c69:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011c6d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011c71:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011c77:	89 c8                	mov    eax,ecx
c0011c79:	d1 e8                	shr    eax,1
c0011c7b:	03 05 28 d3 02 c0    	add    eax,DWORD PTR ds:0xc002d328
c0011c81:	83 e1 01             	and    ecx,0x1
c0011c84:	8a 10                	mov    dl,BYTE PTR [eax]
c0011c86:	75 09                	jne    c0011c91 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011c88:	83 e2 f0             	and    edx,0xfffffff0
c0011c8b:	09 da                	or     edx,ebx
c0011c8d:	88 10                	mov    BYTE PTR [eax],dl
c0011c8f:	5b                   	pop    ebx
c0011c90:	c3                   	ret    
c0011c91:	c1 e3 04             	shl    ebx,0x4
c0011c94:	83 e2 0f             	and    edx,0xf
c0011c97:	09 da                	or     edx,ebx
c0011c99:	88 10                	mov    BYTE PTR [eax],dl
c0011c9b:	5b                   	pop    ebx
c0011c9c:	c3                   	ret    

c0011c9d <Virt::getPageState(unsigned long)>:
c0011c9d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ca1:	8b 0d 28 d3 02 c0    	mov    ecx,DWORD PTR ds:0xc002d328
c0011ca7:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011cad:	89 d0                	mov    eax,edx
c0011caf:	d1 e8                	shr    eax,1
c0011cb1:	83 e2 01             	and    edx,0x1
c0011cb4:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011cb7:	75 04                	jne    c0011cbd <Virt::getPageState(unsigned long)+0x20>
c0011cb9:	83 e0 0f             	and    eax,0xf
c0011cbc:	c3                   	ret    
c0011cbd:	c0 e8 04             	shr    al,0x4
c0011cc0:	c3                   	ret    

c0011cc1 <Virt::allocateKernelVirtualPages(int)>:
c0011cc1:	55                   	push   ebp
c0011cc2:	31 ed                	xor    ebp,ebp
c0011cc4:	57                   	push   edi
c0011cc5:	56                   	push   esi
c0011cc6:	53                   	push   ebx
c0011cc7:	31 db                	xor    ebx,ebx
c0011cc9:	83 ec 1c             	sub    esp,0x1c
c0011ccc:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011cd0:	8b 3d 24 d3 02 c0    	mov    edi,DWORD PTR ds:0xc002d324
c0011cd6:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011cdb:	57                   	push   edi
c0011cdc:	e8 bc ff ff ff       	call   c0011c9d <Virt::getPageState(unsigned long)>
c0011ce1:	5a                   	pop    edx
c0011ce2:	84 c0                	test   al,al
c0011ce4:	75 3a                	jne    c0011d20 <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011ce6:	85 db                	test   ebx,ebx
c0011ce8:	75 02                	jne    c0011cec <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011cea:	89 fd                	mov    ebp,edi
c0011cec:	43                   	inc    ebx
c0011ced:	39 f3                	cmp    ebx,esi
c0011cef:	74 5a                	je     c0011d4b <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011cf1:	47                   	inc    edi
c0011cf2:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011cf8:	76 31                	jbe    c0011d2b <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011cfa:	c7 05 24 d3 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002d324,0xc8000
c0011d04:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011d09:	75 28                	jne    c0011d33 <Virt::allocateKernelVirtualPages(int)+0x72>
c0011d0b:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011d10:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011d15:	57                   	push   edi
c0011d16:	e8 82 ff ff ff       	call   c0011c9d <Virt::getPageState(unsigned long)>
c0011d1b:	5a                   	pop    edx
c0011d1c:	84 c0                	test   al,al
c0011d1e:	74 c6                	je     c0011ce6 <Virt::allocateKernelVirtualPages(int)+0x25>
c0011d20:	31 db                	xor    ebx,ebx
c0011d22:	47                   	inc    edi
c0011d23:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011d29:	77 cf                	ja     c0011cfa <Virt::allocateKernelVirtualPages(int)+0x39>
c0011d2b:	89 3d 24 d3 02 c0    	mov    DWORD PTR ds:0xc002d324,edi
c0011d31:	eb a8                	jmp    c0011cdb <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011d33:	83 ec 0c             	sub    esp,0xc
c0011d36:	68 84 a6 02 c0       	push   0xc002a684
c0011d3b:	e8 2d 88 00 00       	call   c001a56d <Krnl::panic(char const*)>
c0011d40:	8b 3d 24 d3 02 c0    	mov    edi,DWORD PTR ds:0xc002d324
c0011d46:	83 c4 10             	add    esp,0x10
c0011d49:	eb 90                	jmp    c0011cdb <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011d4b:	89 2d 24 d3 02 c0    	mov    DWORD PTR ds:0xc002d324,ebp
c0011d51:	4b                   	dec    ebx
c0011d52:	74 5f                	je     c0011db3 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011d54:	85 f6                	test   esi,esi
c0011d56:	74 3d                	je     c0011d95 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011d58:	89 e8                	mov    eax,ebp
c0011d5a:	31 db                	xor    ebx,ebx
c0011d5c:	8d 7e ff             	lea    edi,[esi-0x1]
c0011d5f:	eb 14                	jmp    c0011d75 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011d61:	6a 01                	push   0x1
c0011d63:	43                   	inc    ebx
c0011d64:	50                   	push   eax
c0011d65:	e8 fe fe ff ff       	call   c0011c68 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d6a:	58                   	pop    eax
c0011d6b:	39 f3                	cmp    ebx,esi
c0011d6d:	5a                   	pop    edx
c0011d6e:	74 25                	je     c0011d95 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011d70:	a1 24 d3 02 c0       	mov    eax,ds:0xc002d324
c0011d75:	8d 50 01             	lea    edx,[eax+0x1]
c0011d78:	85 db                	test   ebx,ebx
c0011d7a:	89 15 24 d3 02 c0    	mov    DWORD PTR ds:0xc002d324,edx
c0011d80:	74 20                	je     c0011da2 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011d82:	39 df                	cmp    edi,ebx
c0011d84:	75 db                	jne    c0011d61 <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011d86:	6a 03                	push   0x3
c0011d88:	43                   	inc    ebx
c0011d89:	50                   	push   eax
c0011d8a:	e8 d9 fe ff ff       	call   c0011c68 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d8f:	59                   	pop    ecx
c0011d90:	39 f3                	cmp    ebx,esi
c0011d92:	58                   	pop    eax
c0011d93:	75 db                	jne    c0011d70 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011d95:	83 c4 1c             	add    esp,0x1c
c0011d98:	89 e8                	mov    eax,ebp
c0011d9a:	5b                   	pop    ebx
c0011d9b:	c1 e0 0c             	shl    eax,0xc
c0011d9e:	5e                   	pop    esi
c0011d9f:	5f                   	pop    edi
c0011da0:	5d                   	pop    ebp
c0011da1:	c3                   	ret    
c0011da2:	6a 02                	push   0x2
c0011da4:	bb 01 00 00 00       	mov    ebx,0x1
c0011da9:	50                   	push   eax
c0011daa:	e8 b9 fe ff ff       	call   c0011c68 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011daf:	58                   	pop    eax
c0011db0:	5a                   	pop    edx
c0011db1:	eb bd                	jmp    c0011d70 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011db3:	6a 04                	push   0x4
c0011db5:	8d 45 01             	lea    eax,[ebp+0x1]
c0011db8:	55                   	push   ebp
c0011db9:	a3 24 d3 02 c0       	mov    ds:0xc002d324,eax
c0011dbe:	e8 a5 fe ff ff       	call   c0011c68 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011dc3:	59                   	pop    ecx
c0011dc4:	89 e8                	mov    eax,ebp
c0011dc6:	5b                   	pop    ebx
c0011dc7:	c1 e0 0c             	shl    eax,0xc
c0011dca:	83 c4 1c             	add    esp,0x1c
c0011dcd:	5b                   	pop    ebx
c0011dce:	5e                   	pop    esi
c0011dcf:	5f                   	pop    edi
c0011dd0:	5d                   	pop    ebp
c0011dd1:	c3                   	ret    

c0011dd2 <Virt::freeSwapfilePage(unsigned long)>:
c0011dd2:	53                   	push   ebx
c0011dd3:	8b 15 08 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e508
c0011dd9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011ddd:	b8 01 00 00 00       	mov    eax,0x1
c0011de2:	89 cb                	mov    ebx,ecx
c0011de4:	d3 e0                	shl    eax,cl
c0011de6:	c1 eb 05             	shr    ebx,0x5
c0011de9:	f7 d0                	not    eax
c0011deb:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0011dee:	5b                   	pop    ebx
c0011def:	c3                   	ret    

c0011df0 <Virt::swapIDToSector(unsigned long)>:
c0011df0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011df4:	0f af 05 2c d3 02 c0 	imul   eax,DWORD PTR ds:0xc002d32c
c0011dfb:	03 05 34 d3 02 c0    	add    eax,DWORD PTR ds:0xc002d334
c0011e01:	c3                   	ret    

c0011e02 <Virt::allocateSwapfilePage()>:
c0011e02:	55                   	push   ebp
c0011e03:	31 d2                	xor    edx,edx
c0011e05:	57                   	push   edi
c0011e06:	56                   	push   esi
c0011e07:	53                   	push   ebx
c0011e08:	83 ec 0c             	sub    esp,0xc
c0011e0b:	8b 0d 2c d3 02 c0    	mov    ecx,DWORD PTR ds:0xc002d32c
c0011e11:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c0011e16:	f7 f1                	div    ecx
c0011e18:	39 0d 30 d3 02 c0    	cmp    DWORD PTR ds:0xc002d330,ecx
c0011e1e:	72 2d                	jb     c0011e4d <Virt::allocateSwapfilePage()+0x4b>
c0011e20:	8b 35 08 e5 02 c0    	mov    esi,DWORD PTR ds:0xc002e508
c0011e26:	8b 16                	mov    edx,DWORD PTR [esi]
c0011e28:	f6 c2 01             	test   dl,0x1
c0011e2b:	74 3c                	je     c0011e69 <Virt::allocateSwapfilePage()+0x67>
c0011e2d:	31 c9                	xor    ecx,ecx
c0011e2f:	bf 01 00 00 00       	mov    edi,0x1
c0011e34:	eb 12                	jmp    c0011e48 <Virt::allocateSwapfilePage()+0x46>
c0011e36:	89 fd                	mov    ebp,edi
c0011e38:	89 ca                	mov    edx,ecx
c0011e3a:	d3 e5                	shl    ebp,cl
c0011e3c:	c1 ea 05             	shr    edx,0x5
c0011e3f:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011e42:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011e44:	85 ea                	test   edx,ebp
c0011e46:	74 2a                	je     c0011e72 <Virt::allocateSwapfilePage()+0x70>
c0011e48:	41                   	inc    ecx
c0011e49:	39 c8                	cmp    eax,ecx
c0011e4b:	77 e9                	ja     c0011e36 <Virt::allocateSwapfilePage()+0x34>
c0011e4d:	83 ec 0c             	sub    esp,0xc
c0011e50:	68 b5 a5 02 c0       	push   0xc002a5b5
c0011e55:	e8 13 87 00 00       	call   c001a56d <Krnl::panic(char const*)>
c0011e5a:	83 c4 10             	add    esp,0x10
c0011e5d:	31 c9                	xor    ecx,ecx
c0011e5f:	83 c4 0c             	add    esp,0xc
c0011e62:	89 c8                	mov    eax,ecx
c0011e64:	5b                   	pop    ebx
c0011e65:	5e                   	pop    esi
c0011e66:	5f                   	pop    edi
c0011e67:	5d                   	pop    ebp
c0011e68:	c3                   	ret    
c0011e69:	89 f3                	mov    ebx,esi
c0011e6b:	bd 01 00 00 00       	mov    ebp,0x1
c0011e70:	31 c9                	xor    ecx,ecx
c0011e72:	09 ea                	or     edx,ebp
c0011e74:	89 c8                	mov    eax,ecx
c0011e76:	89 13                	mov    DWORD PTR [ebx],edx
c0011e78:	83 c4 0c             	add    esp,0xc
c0011e7b:	5b                   	pop    ebx
c0011e7c:	5e                   	pop    esi
c0011e7d:	5f                   	pop    edi
c0011e7e:	5d                   	pop    ebp
c0011e7f:	c3                   	ret    

c0011e80 <Virt::virtualMemorySetup()>:
c0011e80:	53                   	push   ebx
c0011e81:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011e86:	83 ec 08             	sub    esp,0x8
c0011e89:	6a 0f                	push   0xf
c0011e8b:	53                   	push   ebx
c0011e8c:	43                   	inc    ebx
c0011e8d:	e8 d6 fd ff ff       	call   c0011c68 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011e92:	59                   	pop    ecx
c0011e93:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011e99:	58                   	pop    eax
c0011e9a:	75 ed                	jne    c0011e89 <Virt::virtualMemorySetup()+0x9>
c0011e9c:	83 ec 08             	sub    esp,0x8
c0011e9f:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011ea4:	68 00 00 00 c8       	push   0xc8000000
c0011ea9:	68 cc a5 02 c0       	push   0xc002a5cc
c0011eae:	e8 df 0f 00 00       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0011eb3:	58                   	pop    eax
c0011eb4:	5a                   	pop    edx
c0011eb5:	68 00 f0 ff ef       	push   0xeffff000
c0011eba:	68 e0 a5 02 c0       	push   0xc002a5e0
c0011ebf:	e8 ce 0f 00 00       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0011ec4:	83 c4 10             	add    esp,0x10
c0011ec7:	83 ec 08             	sub    esp,0x8
c0011eca:	6a 00                	push   0x0
c0011ecc:	53                   	push   ebx
c0011ecd:	43                   	inc    ebx
c0011ece:	e8 95 fd ff ff       	call   c0011c68 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011ed3:	83 c4 10             	add    esp,0x10
c0011ed6:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011edc:	75 e9                	jne    c0011ec7 <Virt::virtualMemorySetup()+0x47>
c0011ede:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011ee3:	83 ec 08             	sub    esp,0x8
c0011ee6:	6a 0f                	push   0xf
c0011ee8:	53                   	push   ebx
c0011ee9:	43                   	inc    ebx
c0011eea:	e8 79 fd ff ff       	call   c0011c68 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011eef:	83 c4 10             	add    esp,0x10
c0011ef2:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011ef8:	75 e9                	jne    c0011ee3 <Virt::virtualMemorySetup()+0x63>
c0011efa:	83 c4 08             	add    esp,0x8
c0011efd:	5b                   	pop    ebx
c0011efe:	c3                   	ret    

c0011eff <Virt::getAKernelVAS()>:
c0011eff:	a1 0c e5 02 c0       	mov    eax,ds:0xc002e50c
c0011f04:	c3                   	ret    
c0011f05:	90                   	nop

c0011f06 <VAS::VAS()>:
c0011f06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f0a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011f11:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f15:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0011f1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f20:	a3 0c e5 02 c0       	mov    ds:0xc002e50c,eax
c0011f25:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f29:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011f2d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f31:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011f34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f38:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c0011f3f:	90                   	nop
c0011f40:	c3                   	ret    
c0011f41:	90                   	nop

c0011f42 <VAS::VAS(VAS*)>:
c0011f42:	83 ec 0c             	sub    esp,0xc
c0011f45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f49:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011f50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f54:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0011f5b:	83 ec 0c             	sub    esp,0xc
c0011f5e:	68 a4 a6 02 c0       	push   0xc002a6a4
c0011f63:	e8 05 86 00 00       	call   c001a56d <Krnl::panic(char const*)>
c0011f68:	83 c4 10             	add    esp,0x10
c0011f6b:	90                   	nop
c0011f6c:	83 c4 0c             	add    esp,0xc
c0011f6f:	c3                   	ret    

c0011f70 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011f70:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011f74:	89 c2                	mov    edx,eax
c0011f76:	c1 e8 0a             	shr    eax,0xa
c0011f79:	c1 ea 16             	shr    edx,0x16
c0011f7c:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011f81:	19 c9                	sbb    ecx,ecx
c0011f83:	c1 e2 0c             	shl    edx,0xc
c0011f86:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011f8c:	25 fc 0f 00 00       	and    eax,0xffc
c0011f91:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011f98:	01 d0                	add    eax,edx
c0011f9a:	c3                   	ret    
c0011f9b:	90                   	nop

c0011f9c <VAS::getPageTableEntry(unsigned long)>:
c0011f9c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011fa0:	89 ca                	mov    edx,ecx
c0011fa2:	c1 e9 0a             	shr    ecx,0xa
c0011fa5:	c1 ea 16             	shr    edx,0x16
c0011fa8:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011fae:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011fb4:	c1 e0 0c             	shl    eax,0xc
c0011fb7:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011fba:	c3                   	ret    

c0011fbb <Virt::freeKernelVirtualPages(unsigned long)>:
c0011fbb:	57                   	push   edi
c0011fbc:	56                   	push   esi
c0011fbd:	be 01 00 00 00       	mov    esi,0x1
c0011fc2:	53                   	push   ebx
c0011fc3:	83 ec 10             	sub    esp,0x10
c0011fc6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011fca:	c1 eb 0c             	shr    ebx,0xc
c0011fcd:	eb 3f                	jmp    c001200e <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011fcf:	e8 2b ff ff ff       	call   c0011eff <Virt::getAKernelVAS()>
c0011fd4:	83 ec 08             	sub    esp,0x8
c0011fd7:	57                   	push   edi
c0011fd8:	50                   	push   eax
c0011fd9:	e8 be ff ff ff       	call   c0011f9c <VAS::getPageTableEntry(unsigned long)>
c0011fde:	83 c4 10             	add    esp,0x10
c0011fe1:	8b 00                	mov    eax,DWORD PTR [eax]
c0011fe3:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011fe7:	f6 c4 04             	test   ah,0x4
c0011fea:	75 5f                	jne    c001204b <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011fec:	80 fa 04             	cmp    dl,0x4
c0011fef:	74 78                	je     c0012069 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011ff1:	80 fa 02             	cmp    dl,0x2
c0011ff4:	0f 84 88 00 00 00    	je     c0012082 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011ffa:	80 fa 03             	cmp    dl,0x3
c0011ffd:	0f 84 ad 00 00 00    	je     c00120b0 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0012003:	fe ca                	dec    dl
c0012005:	0f 84 92 00 00 00    	je     c001209d <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c001200b:	43                   	inc    ebx
c001200c:	31 f6                	xor    esi,esi
c001200e:	53                   	push   ebx
c001200f:	e8 89 fc ff ff       	call   c0011c9d <Virt::getPageState(unsigned long)>
c0012014:	5f                   	pop    edi
c0012015:	89 df                	mov    edi,ebx
c0012017:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001201b:	c1 e7 0c             	shl    edi,0xc
c001201e:	84 c0                	test   al,al
c0012020:	75 ad                	jne    c0011fcf <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0012022:	83 ec 0c             	sub    esp,0xc
c0012025:	68 f4 a5 02 c0       	push   0xc002a5f4
c001202a:	e8 3e 85 00 00       	call   c001a56d <Krnl::panic(char const*)>
c001202f:	e8 cb fe ff ff       	call   c0011eff <Virt::getAKernelVAS()>
c0012034:	5a                   	pop    edx
c0012035:	59                   	pop    ecx
c0012036:	57                   	push   edi
c0012037:	50                   	push   eax
c0012038:	e8 5f ff ff ff       	call   c0011f9c <VAS::getPageTableEntry(unsigned long)>
c001203d:	83 c4 10             	add    esp,0x10
c0012040:	8b 00                	mov    eax,DWORD PTR [eax]
c0012042:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0012046:	f6 c4 04             	test   ah,0x4
c0012049:	74 c0                	je     c001200b <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c001204b:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c001204f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012054:	83 ec 0c             	sub    esp,0xc
c0012057:	50                   	push   eax
c0012058:	e8 f6 dd ff ff       	call   c000fe53 <Phys::freePage(unsigned long)>
c001205d:	83 c4 10             	add    esp,0x10
c0012060:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0012064:	80 fa 04             	cmp    dl,0x4
c0012067:	75 88                	jne    c0011ff1 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0012069:	89 f0                	mov    eax,esi
c001206b:	84 c0                	test   al,al
c001206d:	75 47                	jne    c00120b6 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c001206f:	c7 44 24 20 c8 a6 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a6c8
c0012077:	83 c4 10             	add    esp,0x10
c001207a:	5b                   	pop    ebx
c001207b:	5e                   	pop    esi
c001207c:	5f                   	pop    edi
c001207d:	e9 eb 84 00 00       	jmp    c001a56d <Krnl::panic(char const*)>
c0012082:	89 f0                	mov    eax,esi
c0012084:	84 c0                	test   al,al
c0012086:	75 15                	jne    c001209d <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0012088:	83 ec 0c             	sub    esp,0xc
c001208b:	68 10 a6 02 c0       	push   0xc002a610
c0012090:	e8 d8 84 00 00       	call   c001a56d <Krnl::panic(char const*)>
c0012095:	83 c4 10             	add    esp,0x10
c0012098:	e9 6e ff ff ff       	jmp    c001200b <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c001209d:	83 ec 08             	sub    esp,0x8
c00120a0:	6a 00                	push   0x0
c00120a2:	53                   	push   ebx
c00120a3:	e8 c0 fb ff ff       	call   c0011c68 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00120a8:	83 c4 10             	add    esp,0x10
c00120ab:	e9 5b ff ff ff       	jmp    c001200b <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00120b0:	89 f0                	mov    eax,esi
c00120b2:	84 c0                	test   al,al
c00120b4:	75 15                	jne    c00120cb <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c00120b6:	83 ec 08             	sub    esp,0x8
c00120b9:	6a 00                	push   0x0
c00120bb:	53                   	push   ebx
c00120bc:	e8 a7 fb ff ff       	call   c0011c68 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00120c1:	83 c4 10             	add    esp,0x10
c00120c4:	83 c4 10             	add    esp,0x10
c00120c7:	5b                   	pop    ebx
c00120c8:	5e                   	pop    esi
c00120c9:	5f                   	pop    edi
c00120ca:	c3                   	ret    
c00120cb:	c7 44 24 20 2c a6 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a62c
c00120d3:	83 c4 10             	add    esp,0x10
c00120d6:	5b                   	pop    ebx
c00120d7:	5e                   	pop    esi
c00120d8:	5f                   	pop    edi
c00120d9:	e9 8f 84 00 00       	jmp    c001a56d <Krnl::panic(char const*)>

c00120de <VAS::freeAllocatedPages(unsigned long)>:
c00120de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00120e2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00120e6:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c00120ea:	74 09                	je     c00120f5 <VAS::freeAllocatedPages(unsigned long)+0x17>
c00120ec:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00120f0:	e9 c6 fe ff ff       	jmp    c0011fbb <Virt::freeKernelVirtualPages(unsigned long)>
c00120f5:	c7 44 24 04 ec a6 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a6ec
c00120fd:	e9 90 0d 00 00       	jmp    c0012e92 <Dbg::kprintf(char const*, ...)>

c0012102 <VAS::virtualToPhysical(unsigned long)>:
c0012102:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0012106:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001210a:	e8 8d fe ff ff       	call   c0011f9c <VAS::getPageTableEntry(unsigned long)>
c001210f:	5a                   	pop    edx
c0012110:	8b 00                	mov    eax,DWORD PTR [eax]
c0012112:	59                   	pop    ecx
c0012113:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012118:	c3                   	ret    
c0012119:	90                   	nop

c001211a <VAS::reflagRange(unsigned long, int, int, int)>:
c001211a:	55                   	push   ebp
c001211b:	57                   	push   edi
c001211c:	56                   	push   esi
c001211d:	53                   	push   ebx
c001211e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012122:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0012126:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001212a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001212e:	85 db                	test   ebx,ebx
c0012130:	7e 22                	jle    c0012154 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0012132:	c1 e3 0c             	shl    ebx,0xc
c0012135:	01 f3                	add    ebx,esi
c0012137:	56                   	push   esi
c0012138:	81 c6 00 10 00 00    	add    esi,0x1000
c001213e:	55                   	push   ebp
c001213f:	e8 58 fe ff ff       	call   c0011f9c <VAS::getPageTableEntry(unsigned long)>
c0012144:	5a                   	pop    edx
c0012145:	59                   	pop    ecx
c0012146:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012148:	21 f9                	and    ecx,edi
c001214a:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c001214e:	39 f3                	cmp    ebx,esi
c0012150:	89 08                	mov    DWORD PTR [eax],ecx
c0012152:	75 e3                	jne    c0012137 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0012154:	5b                   	pop    ebx
c0012155:	5e                   	pop    esi
c0012156:	5f                   	pop    edi
c0012157:	5d                   	pop    ebp
c0012158:	c3                   	ret    
c0012159:	90                   	nop

c001215a <VAS::setToWriteCombining(unsigned long, int)>:
c001215a:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c001215f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012165:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c001216c:	75 01                	jne    c001216f <VAS::setToWriteCombining(unsigned long, int)+0x15>
c001216e:	c3                   	ret    
c001216f:	68 80 00 00 00       	push   0x80
c0012174:	6a ff                	push   0xffffffff
c0012176:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001217a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001217e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012182:	e8 93 ff ff ff       	call   c001211a <VAS::reflagRange(unsigned long, int, int, int)>
c0012187:	83 c4 14             	add    esp,0x14
c001218a:	c3                   	ret    
c001218b:	90                   	nop

c001218c <VAS::mapOtherVASIn(bool, VAS*)>:
c001218c:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0012191:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012195:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012198:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001219c:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c001219f:	19 c0                	sbb    eax,eax
c00121a1:	83 ca 03             	or     edx,0x3
c00121a4:	83 e0 fc             	and    eax,0xfffffffc
c00121a7:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00121ae:	0f 20 d8             	mov    eax,cr3
c00121b1:	0f 22 d8             	mov    cr3,eax
c00121b4:	c3                   	ret    
c00121b5:	90                   	nop

c00121b6 <VAS::~VAS()>:
c00121b6:	83 ec 2c             	sub    esp,0x2c
c00121b9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00121c1:	e8 a1 bb 00 00       	call   c001dd67 <lockScheduler()>
c00121c6:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00121cb:	8b 00                	mov    eax,DWORD PTR [eax]
c00121cd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00121d0:	8b 80 32 19 00 00    	mov    eax,DWORD PTR [eax+0x1932]
c00121d6:	83 ec 04             	sub    esp,0x4
c00121d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00121dd:	6a 01                	push   0x1
c00121df:	50                   	push   eax
c00121e0:	e8 a7 ff ff ff       	call   c001218c <VAS::mapOtherVASIn(bool, VAS*)>
c00121e5:	83 c4 10             	add    esp,0x10
c00121e8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00121f0:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00121f8:	0f 8f d7 00 00 00    	jg     c00122d5 <VAS::~VAS()+0x11f>
c00121fe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012202:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012205:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012209:	c1 e2 02             	shl    edx,0x2
c001220c:	01 d0                	add    eax,edx
c001220e:	8b 00                	mov    eax,DWORD PTR [eax]
c0012210:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012214:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012218:	83 e0 01             	and    eax,0x1
c001221b:	0f 84 ab 00 00 00    	je     c00122cc <VAS::~VAS()+0x116>
c0012221:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012229:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0012231:	7f 75                	jg     c00122a8 <VAS::~VAS()+0xf2>
c0012233:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012237:	c1 e0 0a             	shl    eax,0xa
c001223a:	89 c2                	mov    edx,eax
c001223c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012240:	01 d0                	add    eax,edx
c0012242:	c1 e0 0c             	shl    eax,0xc
c0012245:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012249:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001224e:	8b 00                	mov    eax,DWORD PTR [eax]
c0012250:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012253:	8b 80 32 19 00 00    	mov    eax,DWORD PTR [eax+0x1932]
c0012259:	83 ec 04             	sub    esp,0x4
c001225c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012260:	6a 01                	push   0x1
c0012262:	50                   	push   eax
c0012263:	e8 08 fd ff ff       	call   c0011f70 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0012268:	83 c4 10             	add    esp,0x10
c001226b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001226f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012273:	8b 00                	mov    eax,DWORD PTR [eax]
c0012275:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012279:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001227d:	25 01 04 00 00       	and    eax,0x401
c0012282:	3d 01 04 00 00       	cmp    eax,0x401
c0012287:	75 19                	jne    c00122a2 <VAS::~VAS()+0xec>
c0012289:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001228d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012292:	83 ec 0c             	sub    esp,0xc
c0012295:	50                   	push   eax
c0012296:	e8 b8 db ff ff       	call   c000fe53 <Phys::freePage(unsigned long)>
c001229b:	83 c4 10             	add    esp,0x10
c001229e:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00122a2:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00122a6:	eb 81                	jmp    c0012229 <VAS::~VAS()+0x73>
c00122a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00122ac:	25 00 04 00 00       	and    eax,0x400
c00122b1:	74 19                	je     c00122cc <VAS::~VAS()+0x116>
c00122b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00122b7:	25 00 f0 ff ff       	and    eax,0xfffff000
c00122bc:	83 ec 0c             	sub    esp,0xc
c00122bf:	50                   	push   eax
c00122c0:	e8 8e db ff ff       	call   c000fe53 <Phys::freePage(unsigned long)>
c00122c5:	83 c4 10             	add    esp,0x10
c00122c8:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00122cc:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00122d0:	e9 1b ff ff ff       	jmp    c00121f0 <VAS::~VAS()+0x3a>
c00122d5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122d9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00122dc:	83 ec 0c             	sub    esp,0xc
c00122df:	50                   	push   eax
c00122e0:	e8 d6 fc ff ff       	call   c0011fbb <Virt::freeKernelVirtualPages(unsigned long)>
c00122e5:	83 c4 10             	add    esp,0x10
c00122e8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122ec:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00122ef:	83 ec 0c             	sub    esp,0xc
c00122f2:	50                   	push   eax
c00122f3:	e8 5b db ff ff       	call   c000fe53 <Phys::freePage(unsigned long)>
c00122f8:	83 c4 10             	add    esp,0x10
c00122fb:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00122ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012303:	c1 e0 02             	shl    eax,0x2
c0012306:	83 ec 08             	sub    esp,0x8
c0012309:	50                   	push   eax
c001230a:	68 10 a7 02 c0       	push   0xc002a710
c001230f:	e8 7e 0b 00 00       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0012314:	83 c4 10             	add    esp,0x10
c0012317:	e8 4d ba 00 00       	call   c001dd69 <unlockScheduler()>
c001231c:	90                   	nop
c001231d:	83 c4 2c             	add    esp,0x2c
c0012320:	c3                   	ret    
c0012321:	90                   	nop

c0012322 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0012322:	55                   	push   ebp
c0012323:	57                   	push   edi
c0012324:	56                   	push   esi
c0012325:	53                   	push   ebx
c0012326:	83 ec 1c             	sub    esp,0x1c
c0012329:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001232d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012331:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0012337:	77 08                	ja     c0012341 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0012339:	0f 20 d8             	mov    eax,cr3
c001233c:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c001233f:	75 47                	jne    c0012388 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0012341:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012345:	09 d8                	or     eax,ebx
c0012347:	a9 ff 0f 00 00       	test   eax,0xfff
c001234c:	75 57                	jne    c00123a5 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c001234e:	89 de                	mov    esi,ebx
c0012350:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012353:	c1 ee 16             	shr    esi,0x16
c0012356:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c001235d:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0012361:	74 54                	je     c00123b7 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0012363:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012367:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c001236d:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0012371:	c1 e6 0c             	shl    esi,0xc
c0012374:	c1 eb 0a             	shr    ebx,0xa
c0012377:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c001237d:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0012380:	83 c4 1c             	add    esp,0x1c
c0012383:	5b                   	pop    ebx
c0012384:	5e                   	pop    esi
c0012385:	5f                   	pop    edi
c0012386:	5d                   	pop    ebp
c0012387:	c3                   	ret    
c0012388:	83 ec 0c             	sub    esp,0xc
c001238b:	68 30 a7 02 c0       	push   0xc002a730
c0012390:	e8 fd 0a 00 00       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0012395:	83 c4 10             	add    esp,0x10
c0012398:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001239c:	09 d8                	or     eax,ebx
c001239e:	a9 ff 0f 00 00       	test   eax,0xfff
c00123a3:	74 a9                	je     c001234e <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00123a5:	83 ec 0c             	sub    esp,0xc
c00123a8:	68 98 a7 02 c0       	push   0xc002a798
c00123ad:	e8 bb 81 00 00       	call   c001a56d <Krnl::panic(char const*)>
c00123b2:	83 c4 10             	add    esp,0x10
c00123b5:	eb 97                	jmp    c001234e <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00123b7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00123bb:	e8 1d db ff ff       	call   c000fedd <Phys::allocatePage()>
c00123c0:	89 c5                	mov    ebp,eax
c00123c2:	e8 38 fb ff ff       	call   c0011eff <Virt::getAKernelVAS()>
c00123c7:	83 ec 0c             	sub    esp,0xc
c00123ca:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00123ce:	6a 01                	push   0x1
c00123d0:	e8 ec f8 ff ff       	call   c0011cc1 <Virt::allocateKernelVirtualPages(int)>
c00123d5:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00123dc:	6a 01                	push   0x1
c00123de:	50                   	push   eax
c00123df:	55                   	push   ebp
c00123e0:	81 cd 07 04 00 00    	or     ebp,0x407
c00123e6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00123ea:	51                   	push   ecx
c00123eb:	e8 26 02 00 00       	call   c0012616 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00123f0:	83 c4 1c             	add    esp,0x1c
c00123f3:	68 00 10 00 00       	push   0x1000
c00123f8:	6a 00                	push   0x0
c00123fa:	50                   	push   eax
c00123fb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00123ff:	e8 74 e3 fe ff       	call   c0000778 <memset>
c0012404:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012408:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001240b:	e8 ab fb ff ff       	call   c0011fbb <Virt::freeKernelVirtualPages(unsigned long)>
c0012410:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012414:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012417:	83 c4 10             	add    esp,0x10
c001241a:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c001241d:	e9 41 ff ff ff       	jmp    c0012363 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c0012422 <VAS::allocatePages(int, int)>:
c0012422:	55                   	push   ebp
c0012423:	57                   	push   edi
c0012424:	56                   	push   esi
c0012425:	53                   	push   ebx
c0012426:	83 ec 1c             	sub    esp,0x1c
c0012429:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001242d:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0012432:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012438:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c001243e:	83 e0 01             	and    eax,0x1
c0012441:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0012445:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012449:	0f 85 cc 00 00 00    	jne    c001251b <VAS::allocatePages(int, int)+0xf9>
c001244f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012452:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012456:	85 c0                	test   eax,eax
c0012458:	0f 84 a1 00 00 00    	je     c00124ff <VAS::allocatePages(int, int)+0xdd>
c001245e:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0012462:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012466:	c1 e6 0c             	shl    esi,0xc
c0012469:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c001246d:	85 c0                	test   eax,eax
c001246f:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0012472:	7e 33                	jle    c00124a7 <VAS::allocatePages(int, int)+0x85>
c0012474:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0012478:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001247c:	81 cd 00 04 00 00    	or     ebp,0x400
c0012482:	e8 56 da ff ff       	call   c000fedd <Phys::allocatePage()>
c0012487:	55                   	push   ebp
c0012488:	53                   	push   ebx
c0012489:	50                   	push   eax
c001248a:	57                   	push   edi
c001248b:	e8 92 fe ff ff       	call   c0012322 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012490:	83 c4 10             	add    esp,0x10
c0012493:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012498:	74 03                	je     c001249d <VAS::allocatePages(int, int)+0x7b>
c001249a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001249d:	81 c3 00 10 00 00    	add    ebx,0x1000
c00124a3:	39 de                	cmp    esi,ebx
c00124a5:	75 db                	jne    c0012482 <VAS::allocatePages(int, int)+0x60>
c00124a7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00124ac:	75 12                	jne    c00124c0 <VAS::allocatePages(int, int)+0x9e>
c00124ae:	0f 20 d8             	mov    eax,cr3
c00124b1:	0f 22 d8             	mov    cr3,eax
c00124b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00124b8:	83 c4 1c             	add    esp,0x1c
c00124bb:	5b                   	pop    ebx
c00124bc:	5e                   	pop    esi
c00124bd:	5f                   	pop    edi
c00124be:	5d                   	pop    ebp
c00124bf:	c3                   	ret    
c00124c0:	c1 ee 0a             	shr    esi,0xa
c00124c3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00124c7:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c00124cd:	c1 eb 0a             	shr    ebx,0xa
c00124d0:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c00124d6:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00124dc:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00124e2:	39 c3                	cmp    ebx,eax
c00124e4:	77 ce                	ja     c00124b4 <VAS::allocatePages(int, int)+0x92>
c00124e6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00124e9:	81 c3 00 10 00 00    	add    ebx,0x1000
c00124ef:	39 d8                	cmp    eax,ebx
c00124f1:	73 f3                	jae    c00124e6 <VAS::allocatePages(int, int)+0xc4>
c00124f3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00124f7:	83 c4 1c             	add    esp,0x1c
c00124fa:	5b                   	pop    ebx
c00124fb:	5e                   	pop    esi
c00124fc:	5f                   	pop    edi
c00124fd:	5d                   	pop    ebp
c00124fe:	c3                   	ret    
c00124ff:	83 ec 0c             	sub    esp,0xc
c0012502:	68 bc a7 02 c0       	push   0xc002a7bc
c0012507:	e8 61 80 00 00       	call   c001a56d <Krnl::panic(char const*)>
c001250c:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001250f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012513:	83 c4 10             	add    esp,0x10
c0012516:	e9 43 ff ff ff       	jmp    c001245e <VAS::allocatePages(int, int)+0x3c>
c001251b:	83 ec 0c             	sub    esp,0xc
c001251e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012522:	e8 9a f7 ff ff       	call   c0011cc1 <Virt::allocateKernelVirtualPages(int)>
c0012527:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001252b:	83 c4 10             	add    esp,0x10
c001252e:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0012533:	0f 87 9b 00 00 00    	ja     c00125d4 <VAS::allocatePages(int, int)+0x1b2>
c0012539:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001253d:	85 d2                	test   edx,edx
c001253f:	7e 3c                	jle    c001257d <VAS::allocatePages(int, int)+0x15b>
c0012541:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012545:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012549:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001254d:	c1 e5 0c             	shl    ebp,0xc
c0012550:	81 ce 00 04 00 00    	or     esi,0x400
c0012556:	01 dd                	add    ebp,ebx
c0012558:	e8 80 d9 ff ff       	call   c000fedd <Phys::allocatePage()>
c001255d:	56                   	push   esi
c001255e:	53                   	push   ebx
c001255f:	50                   	push   eax
c0012560:	57                   	push   edi
c0012561:	e8 bc fd ff ff       	call   c0012322 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012566:	83 c4 10             	add    esp,0x10
c0012569:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001256e:	74 03                	je     c0012573 <VAS::allocatePages(int, int)+0x151>
c0012570:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012573:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012579:	39 dd                	cmp    ebp,ebx
c001257b:	75 db                	jne    c0012558 <VAS::allocatePages(int, int)+0x136>
c001257d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012582:	0f 84 26 ff ff ff    	je     c00124ae <VAS::allocatePages(int, int)+0x8c>
c0012588:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001258c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012590:	89 d3                	mov    ebx,edx
c0012592:	c1 e0 0c             	shl    eax,0xc
c0012595:	c1 eb 0a             	shr    ebx,0xa
c0012598:	01 d0                	add    eax,edx
c001259a:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00125a0:	c1 e8 0a             	shr    eax,0xa
c00125a3:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00125a9:	25 00 f0 ff ff       	and    eax,0xfffff000
c00125ae:	2d 00 00 40 00       	sub    eax,0x400000
c00125b3:	39 c3                	cmp    ebx,eax
c00125b5:	0f 87 f9 fe ff ff    	ja     c00124b4 <VAS::allocatePages(int, int)+0x92>
c00125bb:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00125be:	81 c3 00 10 00 00    	add    ebx,0x1000
c00125c4:	39 d8                	cmp    eax,ebx
c00125c6:	73 f3                	jae    c00125bb <VAS::allocatePages(int, int)+0x199>
c00125c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00125cc:	83 c4 1c             	add    esp,0x1c
c00125cf:	5b                   	pop    ebx
c00125d0:	5e                   	pop    esi
c00125d1:	5f                   	pop    edi
c00125d2:	5d                   	pop    ebp
c00125d3:	c3                   	ret    
c00125d4:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c00125d9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00125df:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c00125e6:	0f 84 4d ff ff ff    	je     c0012539 <VAS::allocatePages(int, int)+0x117>
c00125ec:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c00125f4:	e9 40 ff ff ff       	jmp    c0012539 <VAS::allocatePages(int, int)+0x117>
c00125f9:	90                   	nop

c00125fa <VAS::setCPUSpecific(unsigned long)>:
c00125fa:	83 ec 0c             	sub    esp,0xc
c00125fd:	6a 05                	push   0x5
c00125ff:	68 00 00 40 c2       	push   0xc2400000
c0012604:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012608:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001260c:	e8 11 fd ff ff       	call   c0012322 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012611:	83 c4 1c             	add    esp,0x1c
c0012614:	c3                   	ret    
c0012615:	90                   	nop

c0012616 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0012616:	55                   	push   ebp
c0012617:	57                   	push   edi
c0012618:	56                   	push   esi
c0012619:	53                   	push   ebx
c001261a:	83 ec 1c             	sub    esp,0x1c
c001261d:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0012622:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012626:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001262c:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012630:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012636:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001263a:	83 e0 01             	and    eax,0x1
c001263d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012641:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012645:	85 c0                	test   eax,eax
c0012647:	7e 39                	jle    c0012682 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0012649:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001264d:	89 f3                	mov    ebx,esi
c001264f:	c1 e0 0c             	shl    eax,0xc
c0012652:	01 f0                	add    eax,esi
c0012654:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012658:	55                   	push   ebp
c0012659:	53                   	push   ebx
c001265a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001265e:	29 f0                	sub    eax,esi
c0012660:	01 d8                	add    eax,ebx
c0012662:	50                   	push   eax
c0012663:	57                   	push   edi
c0012664:	e8 b9 fc ff ff       	call   c0012322 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012669:	83 c4 10             	add    esp,0x10
c001266c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012671:	74 03                	je     c0012676 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0012673:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012676:	81 c3 00 10 00 00    	add    ebx,0x1000
c001267c:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0012680:	75 d6                	jne    c0012658 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0012682:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012687:	75 10                	jne    c0012699 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0012689:	0f 20 d8             	mov    eax,cr3
c001268c:	0f 22 d8             	mov    cr3,eax
c001268f:	83 c4 1c             	add    esp,0x1c
c0012692:	89 f0                	mov    eax,esi
c0012694:	5b                   	pop    ebx
c0012695:	5e                   	pop    esi
c0012696:	5f                   	pop    edi
c0012697:	5d                   	pop    ebp
c0012698:	c3                   	ret    
c0012699:	89 f3                	mov    ebx,esi
c001269b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001269f:	c1 eb 0a             	shr    ebx,0xa
c00126a2:	c1 e0 0c             	shl    eax,0xc
c00126a5:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00126ab:	01 f0                	add    eax,esi
c00126ad:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00126b3:	c1 e8 0a             	shr    eax,0xa
c00126b6:	25 00 f0 ff ff       	and    eax,0xfffff000
c00126bb:	2d 00 00 40 00       	sub    eax,0x400000
c00126c0:	39 c3                	cmp    ebx,eax
c00126c2:	77 cb                	ja     c001268f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c00126c4:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00126c7:	81 c3 00 10 00 00    	add    ebx,0x1000
c00126cd:	39 d8                	cmp    eax,ebx
c00126cf:	73 f3                	jae    c00126c4 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c00126d1:	83 c4 1c             	add    esp,0x1c
c00126d4:	89 f0                	mov    eax,esi
c00126d6:	5b                   	pop    ebx
c00126d7:	5e                   	pop    esi
c00126d8:	5f                   	pop    edi
c00126d9:	5d                   	pop    ebp
c00126da:	c3                   	ret    
c00126db:	90                   	nop

c00126dc <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c00126dc:	55                   	push   ebp
c00126dd:	57                   	push   edi
c00126de:	56                   	push   esi
c00126df:	53                   	push   ebx
c00126e0:	83 ec 1c             	sub    esp,0x1c
c00126e3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00126e7:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00126eb:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c00126ef:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00126f3:	a9 ff 0f 00 00       	test   eax,0xfff
c00126f8:	75 4a                	jne    c0012744 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c00126fa:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00126fe:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012701:	c1 eb 16             	shr    ebx,0x16
c0012704:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c001270b:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c001270f:	74 4d                	je     c001275e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0012711:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012715:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0012719:	c1 e8 0a             	shr    eax,0xa
c001271c:	80 fa 01             	cmp    dl,0x1
c001271f:	19 d2                	sbb    edx,edx
c0012721:	c1 e3 0c             	shl    ebx,0xc
c0012724:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0012728:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c001272e:	25 fc 0f 00 00       	and    eax,0xffc
c0012733:	01 d8                	add    eax,ebx
c0012735:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c001273c:	83 c4 1c             	add    esp,0x1c
c001273f:	5b                   	pop    ebx
c0012740:	5e                   	pop    esi
c0012741:	5f                   	pop    edi
c0012742:	5d                   	pop    ebp
c0012743:	c3                   	ret    
c0012744:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0012748:	83 ec 0c             	sub    esp,0xc
c001274b:	68 e8 a7 02 c0       	push   0xc002a7e8
c0012750:	e8 18 7e 00 00       	call   c001a56d <Krnl::panic(char const*)>
c0012755:	83 c4 10             	add    esp,0x10
c0012758:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001275c:	eb 9c                	jmp    c00126fa <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c001275e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012762:	e8 76 d7 ff ff       	call   c000fedd <Phys::allocatePage()>
c0012767:	89 c5                	mov    ebp,eax
c0012769:	e8 91 f7 ff ff       	call   c0011eff <Virt::getAKernelVAS()>
c001276e:	83 ec 0c             	sub    esp,0xc
c0012771:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012775:	6a 01                	push   0x1
c0012777:	e8 45 f5 ff ff       	call   c0011cc1 <Virt::allocateKernelVirtualPages(int)>
c001277c:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012783:	6a 01                	push   0x1
c0012785:	50                   	push   eax
c0012786:	55                   	push   ebp
c0012787:	81 cd 07 04 00 00    	or     ebp,0x407
c001278d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012791:	51                   	push   ecx
c0012792:	e8 7f fe ff ff       	call   c0012616 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012797:	83 c4 1c             	add    esp,0x1c
c001279a:	68 00 10 00 00       	push   0x1000
c001279f:	6a 00                	push   0x0
c00127a1:	50                   	push   eax
c00127a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00127a6:	e8 cd df fe ff       	call   c0000778 <memset>
c00127ab:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00127af:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00127b2:	e8 04 f8 ff ff       	call   c0011fbb <Virt::freeKernelVirtualPages(unsigned long)>
c00127b7:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00127ba:	83 c4 10             	add    esp,0x10
c00127bd:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c00127c0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00127c4:	e9 48 ff ff ff       	jmp    c0012711 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c00127c9:	90                   	nop

c00127ca <VAS::VAS(bool)>:
c00127ca:	53                   	push   ebx
c00127cb:	83 ec 28             	sub    esp,0x28
c00127ce:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00127d2:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00127d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127da:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00127e1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127e5:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00127ec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127f0:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c00127f4:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c00127f7:	e8 e1 d6 ff ff       	call   c000fedd <Phys::allocatePage()>
c00127fc:	89 c2                	mov    edx,eax
c00127fe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012802:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012805:	e8 f5 f6 ff ff       	call   c0011eff <Virt::getAKernelVAS()>
c001280a:	89 c3                	mov    ebx,eax
c001280c:	83 ec 0c             	sub    esp,0xc
c001280f:	6a 01                	push   0x1
c0012811:	e8 ab f4 ff ff       	call   c0011cc1 <Virt::allocateKernelVirtualPages(int)>
c0012816:	83 c4 10             	add    esp,0x10
c0012819:	89 c2                	mov    edx,eax
c001281b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001281f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012822:	83 ec 0c             	sub    esp,0xc
c0012825:	6a 03                	push   0x3
c0012827:	6a 01                	push   0x1
c0012829:	52                   	push   edx
c001282a:	50                   	push   eax
c001282b:	53                   	push   ebx
c001282c:	e8 e5 fd ff ff       	call   c0012616 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012831:	83 c4 20             	add    esp,0x20
c0012834:	89 c2                	mov    edx,eax
c0012836:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001283a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001283d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012845:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c001284d:	7f 1c                	jg     c001286b <VAS::VAS(bool)+0xa1>
c001284f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012853:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012856:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001285a:	c1 e2 02             	shl    edx,0x2
c001285d:	01 d0                	add    eax,edx
c001285f:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012865:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012869:	eb da                	jmp    c0012845 <VAS::VAS(bool)+0x7b>
c001286b:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0012873:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c001287b:	7f 7a                	jg     c00128f7 <VAS::VAS(bool)+0x12d>
c001287d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012881:	2d 00 02 00 00       	sub    eax,0x200
c0012886:	c1 e0 0c             	shl    eax,0xc
c0012889:	83 c8 03             	or     eax,0x3
c001288c:	89 c2                	mov    edx,eax
c001288e:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0012893:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012899:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001289f:	83 e0 10             	and    eax,0x10
c00128a2:	84 c0                	test   al,al
c00128a4:	74 07                	je     c00128ad <VAS::VAS(bool)+0xe3>
c00128a6:	b8 00 01 00 00       	mov    eax,0x100
c00128ab:	eb 05                	jmp    c00128b2 <VAS::VAS(bool)+0xe8>
c00128ad:	b8 00 00 00 00       	mov    eax,0x0
c00128b2:	09 d0                	or     eax,edx
c00128b4:	89 c1                	mov    ecx,eax
c00128b6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00128ba:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00128bd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00128c1:	c1 e2 02             	shl    edx,0x2
c00128c4:	01 d0                	add    eax,edx
c00128c6:	89 ca                	mov    edx,ecx
c00128c8:	89 10                	mov    DWORD PTR [eax],edx
c00128ca:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00128ce:	2d 40 03 00 00       	sub    eax,0x340
c00128d3:	83 f8 7f             	cmp    eax,0x7f
c00128d6:	77 16                	ja     c00128ee <VAS::VAS(bool)+0x124>
c00128d8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00128dc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00128df:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00128e3:	c1 e2 02             	shl    edx,0x2
c00128e6:	01 d0                	add    eax,edx
c00128e8:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00128ee:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00128f2:	e9 7c ff ff ff       	jmp    c0012873 <VAS::VAS(bool)+0xa9>
c00128f7:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c00128fc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012902:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012908:	83 e0 10             	and    eax,0x10
c001290b:	84 c0                	test   al,al
c001290d:	74 07                	je     c0012916 <VAS::VAS(bool)+0x14c>
c001290f:	b8 03 41 00 00       	mov    eax,0x4103
c0012914:	eb 05                	jmp    c001291b <VAS::VAS(bool)+0x151>
c0012916:	b8 03 40 00 00       	mov    eax,0x4003
c001291b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001291f:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0012922:	81 c2 20 0c 00 00    	add    edx,0xc20
c0012928:	89 02                	mov    DWORD PTR [edx],eax
c001292a:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c001292f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012935:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001293b:	83 ec 08             	sub    esp,0x8
c001293e:	50                   	push   eax
c001293f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012943:	e8 b2 fc ff ff       	call   c00125fa <VAS::setCPUSpecific(unsigned long)>
c0012948:	83 c4 10             	add    esp,0x10
c001294b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001294f:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012952:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0012957:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001295d:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012963:	83 e0 10             	and    eax,0x10
c0012966:	84 c0                	test   al,al
c0012968:	74 07                	je     c0012971 <VAS::VAS(bool)+0x1a7>
c001296a:	b8 00 01 00 00       	mov    eax,0x100
c001296f:	eb 05                	jmp    c0012976 <VAS::VAS(bool)+0x1ac>
c0012971:	b8 00 00 00 00       	mov    eax,0x0
c0012976:	09 c2                	or     edx,eax
c0012978:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001297c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001297f:	05 fc 0f 00 00       	add    eax,0xffc
c0012984:	83 ca 03             	or     edx,0x3
c0012987:	89 10                	mov    DWORD PTR [eax],edx
c0012989:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c001298e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012994:	83 ec 0c             	sub    esp,0xc
c0012997:	50                   	push   eax
c0012998:	e8 07 1c 00 00       	call   c00145a4 <Device::getName()>
c001299d:	83 c4 10             	add    esp,0x10
c00129a0:	83 ec 08             	sub    esp,0x8
c00129a3:	68 46 a6 02 c0       	push   0xc002a646
c00129a8:	50                   	push   eax
c00129a9:	e8 12 df fe ff       	call   c00008c0 <strcmp>
c00129ae:	83 c4 10             	add    esp,0x10
c00129b1:	85 c0                	test   eax,eax
c00129b3:	0f 94 c0             	sete   al
c00129b6:	84 c0                	test   al,al
c00129b8:	74 70                	je     c0012a2a <VAS::VAS(bool)+0x260>
c00129ba:	e8 8b b3 00 00       	call   c001dd4a <disableIRQs()>
c00129bf:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c00129c4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00129ca:	05 7c 09 00 00       	add    eax,0x97c
c00129cf:	83 ec 0c             	sub    esp,0xc
c00129d2:	50                   	push   eax
c00129d3:	e8 e4 c8 ff ff       	call   c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00129d8:	83 c4 10             	add    esp,0x10
c00129db:	25 00 f0 ff ff       	and    eax,0xfffff000
c00129e0:	89 c3                	mov    ebx,eax
c00129e2:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c00129e7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00129ed:	05 7c 09 00 00       	add    eax,0x97c
c00129f2:	83 ec 0c             	sub    esp,0xc
c00129f5:	50                   	push   eax
c00129f6:	e8 c1 c8 ff ff       	call   c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00129fb:	83 c4 10             	add    esp,0x10
c00129fe:	83 ec 08             	sub    esp,0x8
c0012a01:	50                   	push   eax
c0012a02:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012a06:	e8 91 f5 ff ff       	call   c0011f9c <VAS::getPageTableEntry(unsigned long)>
c0012a0b:	83 c4 10             	add    esp,0x10
c0012a0e:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a10:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012a15:	6a 11                	push   0x11
c0012a17:	53                   	push   ebx
c0012a18:	50                   	push   eax
c0012a19:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012a1d:	e8 00 f9 ff ff       	call   c0012322 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012a22:	83 c4 10             	add    esp,0x10
c0012a25:	e8 2e b3 00 00       	call   c001dd58 <enableIRQs()>
c0012a2a:	90                   	nop
c0012a2b:	83 c4 28             	add    esp,0x28
c0012a2e:	5b                   	pop    ebx
c0012a2f:	c3                   	ret    

c0012a30 <VAS::evict(unsigned long)>:
c0012a30:	55                   	push   ebp
c0012a31:	57                   	push   edi
c0012a32:	56                   	push   esi
c0012a33:	53                   	push   ebx
c0012a34:	83 ec 0c             	sub    esp,0xc
c0012a37:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0012a3b:	e8 c2 f3 ff ff       	call   c0011e02 <Virt::allocateSwapfilePage()>
c0012a40:	89 c7                	mov    edi,eax
c0012a42:	a1 2c d3 02 c0       	mov    eax,ds:0xc002d32c
c0012a47:	85 c0                	test   eax,eax
c0012a49:	7e 3d                	jle    c0012a88 <VAS::evict(unsigned long)+0x58>
c0012a4b:	89 ee                	mov    esi,ebp
c0012a4d:	31 db                	xor    ebx,ebx
c0012a4f:	83 ec 0c             	sub    esp,0xc
c0012a52:	57                   	push   edi
c0012a53:	e8 98 f3 ff ff       	call   c0011df0 <Virt::swapIDToSector(unsigned long)>
c0012a58:	89 34 24             	mov    DWORD PTR [esp],esi
c0012a5b:	01 d8                	add    eax,ebx
c0012a5d:	6a 01                	push   0x1
c0012a5f:	31 d2                	xor    edx,edx
c0012a61:	43                   	inc    ebx
c0012a62:	52                   	push   edx
c0012a63:	81 c6 00 02 00 00    	add    esi,0x200
c0012a69:	50                   	push   eax
c0012a6a:	0f be 05 38 d3 02 c0 	movsx  eax,BYTE PTR ds:0xc002d338
c0012a71:	ff 34 85 9c e8 02 c0 	push   DWORD PTR [eax*4-0x3ffd1764]
c0012a78:	e8 c7 3c 00 00       	call   c0016744 <LogicalDisk::write(unsigned long long, int, void*)>
c0012a7d:	83 c4 20             	add    esp,0x20
c0012a80:	39 1d 2c d3 02 c0    	cmp    DWORD PTR ds:0xc002d32c,ebx
c0012a86:	7f c7                	jg     c0012a4f <VAS::evict(unsigned long)+0x1f>
c0012a88:	83 ec 08             	sub    esp,0x8
c0012a8b:	c1 e7 0b             	shl    edi,0xb
c0012a8e:	55                   	push   ebp
c0012a8f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012a93:	e8 04 f5 ff ff       	call   c0011f9c <VAS::getPageTableEntry(unsigned long)>
c0012a98:	8b 10                	mov    edx,DWORD PTR [eax]
c0012a9a:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012aa0:	09 d7                	or     edi,edx
c0012aa2:	89 38                	mov    DWORD PTR [eax],edi
c0012aa4:	ff 05 04 e5 02 c0    	inc    DWORD PTR ds:0xc002e504
c0012aaa:	0f 20 d8             	mov    eax,cr3
c0012aad:	0f 22 d8             	mov    cr3,eax
c0012ab0:	83 c4 1c             	add    esp,0x1c
c0012ab3:	5b                   	pop    ebx
c0012ab4:	5e                   	pop    esi
c0012ab5:	5f                   	pop    edi
c0012ab6:	5d                   	pop    ebp
c0012ab7:	c3                   	ret    

c0012ab8 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012ab8:	57                   	push   edi
c0012ab9:	56                   	push   esi
c0012aba:	53                   	push   ebx
c0012abb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012abf:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012ac5:	74 1c                	je     c0012ae3 <VAS::tryLoadBackOffDisk(unsigned long)+0x2b>
c0012ac7:	53                   	push   ebx
c0012ac8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012acc:	e8 cb f4 ff ff       	call   c0011f9c <VAS::getPageTableEntry(unsigned long)>
c0012ad1:	5a                   	pop    edx
c0012ad2:	89 c6                	mov    esi,eax
c0012ad4:	59                   	pop    ecx
c0012ad5:	85 c0                	test   eax,eax
c0012ad7:	74 0a                	je     c0012ae3 <VAS::tryLoadBackOffDisk(unsigned long)+0x2b>
c0012ad9:	8b 38                	mov    edi,DWORD PTR [eax]
c0012adb:	f7 c7 01 00 00 00    	test   edi,0x1
c0012ae1:	74 06                	je     c0012ae9 <VAS::tryLoadBackOffDisk(unsigned long)+0x31>
c0012ae3:	31 c0                	xor    eax,eax
c0012ae5:	5b                   	pop    ebx
c0012ae6:	5e                   	pop    esi
c0012ae7:	5f                   	pop    edi
c0012ae8:	c3                   	ret    
c0012ae9:	e8 ef d3 ff ff       	call   c000fedd <Phys::allocatePage()>
c0012aee:	c1 ef 0b             	shr    edi,0xb
c0012af1:	8b 16                	mov    edx,DWORD PTR [esi]
c0012af3:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012af9:	09 c2                	or     edx,eax
c0012afb:	81 ca 01 08 00 00    	or     edx,0x801
c0012b01:	89 16                	mov    DWORD PTR [esi],edx
c0012b03:	0f 20 d8             	mov    eax,cr3
c0012b06:	0f 22 d8             	mov    cr3,eax
c0012b09:	a1 2c d3 02 c0       	mov    eax,ds:0xc002d32c
c0012b0e:	85 c0                	test   eax,eax
c0012b10:	7e 3b                	jle    c0012b4d <VAS::tryLoadBackOffDisk(unsigned long)+0x95>
c0012b12:	31 f6                	xor    esi,esi
c0012b14:	83 ec 0c             	sub    esp,0xc
c0012b17:	57                   	push   edi
c0012b18:	e8 d3 f2 ff ff       	call   c0011df0 <Virt::swapIDToSector(unsigned long)>
c0012b1d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012b20:	01 f0                	add    eax,esi
c0012b22:	6a 01                	push   0x1
c0012b24:	31 d2                	xor    edx,edx
c0012b26:	46                   	inc    esi
c0012b27:	52                   	push   edx
c0012b28:	81 c3 00 02 00 00    	add    ebx,0x200
c0012b2e:	50                   	push   eax
c0012b2f:	0f be 05 38 d3 02 c0 	movsx  eax,BYTE PTR ds:0xc002d338
c0012b36:	ff 34 85 9c e8 02 c0 	push   DWORD PTR [eax*4-0x3ffd1764]
c0012b3d:	e8 96 3b 00 00       	call   c00166d8 <LogicalDisk::read(unsigned long long, int, void*)>
c0012b42:	83 c4 20             	add    esp,0x20
c0012b45:	39 35 2c d3 02 c0    	cmp    DWORD PTR ds:0xc002d32c,esi
c0012b4b:	7f c7                	jg     c0012b14 <VAS::tryLoadBackOffDisk(unsigned long)+0x5c>
c0012b4d:	83 ec 0c             	sub    esp,0xc
c0012b50:	ff 0d 04 e5 02 c0    	dec    DWORD PTR ds:0xc002e504
c0012b56:	57                   	push   edi
c0012b57:	e8 76 f2 ff ff       	call   c0011dd2 <Virt::freeSwapfilePage(unsigned long)>
c0012b5c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012b60:	83 c4 10             	add    esp,0x10
c0012b63:	25 ff 0f 00 00       	and    eax,0xfff
c0012b68:	3d e0 0f 00 00       	cmp    eax,0xfe0
c0012b6d:	77 07                	ja     c0012b76 <VAS::tryLoadBackOffDisk(unsigned long)+0xbe>
c0012b6f:	b0 01                	mov    al,0x1
c0012b71:	e9 6f ff ff ff       	jmp    c0012ae5 <VAS::tryLoadBackOffDisk(unsigned long)+0x2d>
c0012b76:	83 ec 0c             	sub    esp,0xc
c0012b79:	68 54 a6 02 c0       	push   0xc002a654
c0012b7e:	e8 0f 03 00 00       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0012b83:	83 c4 10             	add    esp,0x10
c0012b86:	b0 01                	mov    al,0x1
c0012b88:	e9 58 ff ff ff       	jmp    c0012ae5 <VAS::tryLoadBackOffDisk(unsigned long)+0x2d>
c0012b8d:	90                   	nop

c0012b8e <VAS::scanForEviction()>:
c0012b8e:	55                   	push   ebp
c0012b8f:	57                   	push   edi
c0012b90:	31 ff                	xor    edi,edi
c0012b92:	56                   	push   esi
c0012b93:	31 f6                	xor    esi,esi
c0012b95:	53                   	push   ebx
c0012b96:	83 ec 1c             	sub    esp,0x1c
c0012b99:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0012b9d:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0012ba0:	89 d8                	mov    eax,ebx
c0012ba2:	39 c3                	cmp    ebx,eax
c0012ba4:	74 72                	je     c0012c18 <VAS::scanForEviction()+0x8a>
c0012ba6:	a9 ff ff 3f 00       	test   eax,0x3fffff
c0012bab:	75 0e                	jne    c0012bbb <VAS::scanForEviction()+0x2d>
c0012bad:	89 c1                	mov    ecx,eax
c0012baf:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0012bb2:	c1 e9 16             	shr    ecx,0x16
c0012bb5:	f6 04 8a 01          	test   BYTE PTR [edx+ecx*4],0x1
c0012bb9:	74 51                	je     c0012c0c <VAS::scanForEviction()+0x7e>
c0012bbb:	50                   	push   eax
c0012bbc:	55                   	push   ebp
c0012bbd:	e8 da f3 ff ff       	call   c0011f9c <VAS::getPageTableEntry(unsigned long)>
c0012bc2:	5a                   	pop    edx
c0012bc3:	8b 10                	mov    edx,DWORD PTR [eax]
c0012bc5:	59                   	pop    ecx
c0012bc6:	89 d1                	mov    ecx,edx
c0012bc8:	81 e1 00 0c 00 00    	and    ecx,0xc00
c0012bce:	81 f9 00 0c 00 00    	cmp    ecx,0xc00
c0012bd4:	74 54                	je     c0012c2a <VAS::scanForEviction()+0x9c>
c0012bd6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0012bd9:	05 00 10 00 00       	add    eax,0x1000
c0012bde:	3d ff ff bf ff       	cmp    eax,0xffbfffff
c0012be3:	76 3d                	jbe    c0012c22 <VAS::scanForEviction()+0x94>
c0012be5:	c7 45 10 00 00 00 00 	mov    DWORD PTR [ebp+0x10],0x0
c0012bec:	85 db                	test   ebx,ebx
c0012bee:	74 79                	je     c0012c69 <VAS::scanForEviction()+0xdb>
c0012bf0:	31 c0                	xor    eax,eax
c0012bf2:	be 01 00 00 00       	mov    esi,0x1
c0012bf7:	a9 ff ff 3f 00       	test   eax,0x3fffff
c0012bfc:	75 bd                	jne    c0012bbb <VAS::scanForEviction()+0x2d>
c0012bfe:	89 c1                	mov    ecx,eax
c0012c00:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0012c03:	c1 e9 16             	shr    ecx,0x16
c0012c06:	f6 04 8a 01          	test   BYTE PTR [edx+ecx*4],0x1
c0012c0a:	75 af                	jne    c0012bbb <VAS::scanForEviction()+0x2d>
c0012c0c:	05 00 00 40 00       	add    eax,0x400000
c0012c11:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0012c14:	39 c3                	cmp    ebx,eax
c0012c16:	75 8e                	jne    c0012ba6 <VAS::scanForEviction()+0x18>
c0012c18:	89 f1                	mov    ecx,esi
c0012c1a:	84 c9                	test   cl,cl
c0012c1c:	74 88                	je     c0012ba6 <VAS::scanForEviction()+0x18>
c0012c1e:	89 f7                	mov    edi,esi
c0012c20:	eb 84                	jmp    c0012ba6 <VAS::scanForEviction()+0x18>
c0012c22:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0012c25:	e9 78 ff ff ff       	jmp    c0012ba2 <VAS::scanForEviction()+0x14>
c0012c2a:	f6 c2 01             	test   dl,0x1
c0012c2d:	74 a7                	je     c0012bd6 <VAS::scanForEviction()+0x48>
c0012c2f:	f6 c2 40             	test   dl,0x40
c0012c32:	74 0b                	je     c0012c3f <VAS::scanForEviction()+0xb1>
c0012c34:	83 e2 bf             	and    edx,0xffffffbf
c0012c37:	89 10                	mov    DWORD PTR [eax],edx
c0012c39:	89 f8                	mov    eax,edi
c0012c3b:	84 c0                	test   al,al
c0012c3d:	74 97                	je     c0012bd6 <VAS::scanForEviction()+0x48>
c0012c3f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012c43:	83 ec 08             	sub    esp,0x8
c0012c46:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0012c49:	55                   	push   ebp
c0012c4a:	e8 e1 fd ff ff       	call   c0012a30 <VAS::evict(unsigned long)>
c0012c4f:	81 45 10 00 10 00 00 	add    DWORD PTR [ebp+0x10],0x1000
c0012c56:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012c5a:	83 c4 2c             	add    esp,0x2c
c0012c5d:	89 d0                	mov    eax,edx
c0012c5f:	5b                   	pop    ebx
c0012c60:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012c65:	5e                   	pop    esi
c0012c66:	5f                   	pop    edi
c0012c67:	5d                   	pop    ebp
c0012c68:	c3                   	ret    
c0012c69:	bf 01 00 00 00       	mov    edi,0x1
c0012c6e:	eb 80                	jmp    c0012bf0 <VAS::scanForEviction()+0x62>

c0012c70 <mapVASFirstTime>:
c0012c70:	55                   	push   ebp
c0012c71:	57                   	push   edi
c0012c72:	56                   	push   esi
c0012c73:	53                   	push   ebx
c0012c74:	83 ec 0c             	sub    esp,0xc
c0012c77:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012c7c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012c7f:	4a                   	dec    edx
c0012c80:	0f 84 8e 00 00 00    	je     c0012d14 <mapVASFirstTime+0xa4>
c0012c86:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012c89:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012c8c:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012c91:	c1 e5 15             	shl    ebp,0x15
c0012c94:	be 00 90 e7 01       	mov    esi,0x1e79000
c0012c99:	8b ba 32 19 00 00    	mov    edi,DWORD PTR [edx+0x1932]
c0012c9f:	29 eb                	sub    ebx,ebp
c0012ca1:	29 ee                	sub    esi,ebp
c0012ca3:	e8 35 d2 ff ff       	call   c000fedd <Phys::allocatePage()>
c0012ca8:	83 ec 0c             	sub    esp,0xc
c0012cab:	68 03 04 00 00       	push   0x403
c0012cb0:	6a 01                	push   0x1
c0012cb2:	53                   	push   ebx
c0012cb3:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012cb9:	50                   	push   eax
c0012cba:	57                   	push   edi
c0012cbb:	e8 56 f9 ff ff       	call   c0012616 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012cc0:	83 c4 20             	add    esp,0x20
c0012cc3:	39 f3                	cmp    ebx,esi
c0012cc5:	75 dc                	jne    c0012ca3 <mapVASFirstTime+0x33>
c0012cc7:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012ccc:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012cd1:	29 ee                	sub    esi,ebp
c0012cd3:	29 e8                	sub    eax,ebp
c0012cd5:	89 c5                	mov    ebp,eax
c0012cd7:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012cdb:	19 db                	sbb    ebx,ebx
c0012cdd:	e8 fb d1 ff ff       	call   c000fedd <Phys::allocatePage()>
c0012ce2:	83 e3 04             	and    ebx,0x4
c0012ce5:	83 ec 0c             	sub    esp,0xc
c0012ce8:	81 c3 03 04 00 00    	add    ebx,0x403
c0012cee:	53                   	push   ebx
c0012cef:	6a 01                	push   0x1
c0012cf1:	56                   	push   esi
c0012cf2:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012cf8:	50                   	push   eax
c0012cf9:	57                   	push   edi
c0012cfa:	e8 17 f9 ff ff       	call   c0012616 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012cff:	83 c4 20             	add    esp,0x20
c0012d02:	39 f5                	cmp    ebp,esi
c0012d04:	75 d1                	jne    c0012cd7 <mapVASFirstTime+0x67>
c0012d06:	0f 20 d8             	mov    eax,cr3
c0012d09:	0f 22 d8             	mov    cr3,eax
c0012d0c:	83 c4 0c             	add    esp,0xc
c0012d0f:	5b                   	pop    ebx
c0012d10:	5e                   	pop    esi
c0012d11:	5f                   	pop    edi
c0012d12:	5d                   	pop    ebp
c0012d13:	c3                   	ret    
c0012d14:	83 ec 0c             	sub    esp,0xc
c0012d17:	68 68 a6 02 c0       	push   0xc002a668
c0012d1c:	e8 71 01 00 00       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0012d21:	83 c4 10             	add    esp,0x10
c0012d24:	83 c4 0c             	add    esp,0xc
c0012d27:	5b                   	pop    ebx
c0012d28:	5e                   	pop    esi
c0012d29:	5f                   	pop    edi
c0012d2a:	5d                   	pop    ebp
c0012d2b:	c3                   	ret    

c0012d2c <__cxa_atexit>:
c0012d2c:	31 c0                	xor    eax,eax
c0012d2e:	c3                   	ret    

c0012d2f <__cxa_finalize>:
c0012d2f:	c3                   	ret    

c0012d30 <__stack_chk_fail>:
c0012d30:	55                   	push   ebp
c0012d31:	89 e5                	mov    ebp,esp
c0012d33:	83 ec 14             	sub    esp,0x14
c0012d36:	68 0b a8 02 c0       	push   0xc002a80b
c0012d3b:	e8 52 01 00 00       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0012d40:	58                   	pop    eax
c0012d41:	5a                   	pop    edx
c0012d42:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012d45:	68 5b a8 02 c0       	push   0xc002a85b
c0012d4a:	e8 43 01 00 00       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0012d4f:	59                   	pop    ecx
c0012d50:	58                   	pop    eax
c0012d51:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012d54:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012d57:	68 5b a8 02 c0       	push   0xc002a85b
c0012d5c:	e8 31 01 00 00       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0012d61:	5a                   	pop    edx
c0012d62:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012d65:	59                   	pop    ecx
c0012d66:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d68:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012d6b:	68 5b a8 02 c0       	push   0xc002a85b
c0012d70:	e8 1d 01 00 00       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0012d75:	5a                   	pop    edx
c0012d76:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012d79:	59                   	pop    ecx
c0012d7a:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d7c:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d7e:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012d81:	68 5b a8 02 c0       	push   0xc002a85b
c0012d86:	e8 07 01 00 00       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0012d8b:	c7 04 24 63 a8 02 c0 	mov    DWORD PTR [esp],0xc002a863
c0012d92:	e8 d6 77 00 00       	call   c001a56d <Krnl::panic(char const*)>
c0012d97:	83 c4 10             	add    esp,0x10
c0012d9a:	c9                   	leave  
c0012d9b:	c3                   	ret    

c0012d9c <__cxa_pure_virtual>:
c0012d9c:	83 ec 18             	sub    esp,0x18
c0012d9f:	68 7b a8 02 c0       	push   0xc002a87b
c0012da4:	e8 c4 77 00 00       	call   c001a56d <Krnl::panic(char const*)>
c0012da9:	83 c4 1c             	add    esp,0x1c
c0012dac:	c3                   	ret    

c0012dad <operator new[](unsigned long)>:
c0012dad:	e9 8e ca ff ff       	jmp    c000f840 <malloc>

c0012db2 <operator delete(void*, unsigned long)>:
c0012db2:	e9 a9 ca ff ff       	jmp    c000f860 <rfree>

c0012db7 <operator delete[](void*)>:
c0012db7:	e9 a4 ca ff ff       	jmp    c000f860 <rfree>

c0012dbc <operator delete[](void*, unsigned long)>:
c0012dbc:	e9 9f ca ff ff       	jmp    c000f860 <rfree>

c0012dc1 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012dc1:	57                   	push   edi
c0012dc2:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012dc7:	56                   	push   esi
c0012dc8:	be 90 a8 02 c0       	mov    esi,0xc002a890
c0012dcd:	53                   	push   ebx
c0012dce:	83 ec 40             	sub    esp,0x40
c0012dd1:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012dd5:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012dd9:	fc                   	cld    
c0012dda:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012ddc:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012de0:	83 f9 3e             	cmp    ecx,0x3e
c0012de3:	7e 05                	jle    c0012dea <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012de5:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012dea:	89 df                	mov    edi,ebx
c0012dec:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012df0:	eb 02                	jmp    c0012df4 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012df2:	89 c7                	mov    edi,eax
c0012df4:	31 d2                	xor    edx,edx
c0012df6:	46                   	inc    esi
c0012df7:	89 f8                	mov    eax,edi
c0012df9:	f7 f1                	div    ecx
c0012dfb:	39 cf                	cmp    edi,ecx
c0012dfd:	73 f3                	jae    c0012df2 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012dff:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012e02:	eb 02                	jmp    c0012e06 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012e04:	89 c3                	mov    ebx,eax
c0012e06:	31 d2                	xor    edx,edx
c0012e08:	4e                   	dec    esi
c0012e09:	89 d8                	mov    eax,ebx
c0012e0b:	f7 f1                	div    ecx
c0012e0d:	39 cb                	cmp    ebx,ecx
c0012e0f:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012e13:	88 16                	mov    BYTE PTR [esi],dl
c0012e15:	73 ed                	jae    c0012e04 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012e17:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012e1b:	83 c4 40             	add    esp,0x40
c0012e1e:	5b                   	pop    ebx
c0012e1f:	5e                   	pop    esi
c0012e20:	5f                   	pop    edi
c0012e21:	c3                   	ret    

c0012e22 <Dbg::logc(char)>:
c0012e22:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012e26:	ba fd 03 00 00       	mov    edx,0x3fd
c0012e2b:	ec                   	in     al,dx
c0012e2c:	a8 20                	test   al,0x20
c0012e2e:	74 fb                	je     c0012e2b <Dbg::logc(char)+0x9>
c0012e30:	ba f8 03 00 00       	mov    edx,0x3f8
c0012e35:	88 c8                	mov    al,cl
c0012e37:	ee                   	out    dx,al
c0012e38:	c3                   	ret    

c0012e39 <Dbg::logs(char*)>:
c0012e39:	53                   	push   ebx
c0012e3a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012e3e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012e41:	84 c0                	test   al,al
c0012e43:	74 0f                	je     c0012e54 <Dbg::logs(char*)+0x1b>
c0012e45:	50                   	push   eax
c0012e46:	43                   	inc    ebx
c0012e47:	e8 d6 ff ff ff       	call   c0012e22 <Dbg::logc(char)>
c0012e4c:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012e4f:	5a                   	pop    edx
c0012e50:	84 c0                	test   al,al
c0012e52:	75 f1                	jne    c0012e45 <Dbg::logs(char*)+0xc>
c0012e54:	5b                   	pop    ebx
c0012e55:	c3                   	ret    

c0012e56 <Dbg::logWriteInt(unsigned int)>:
c0012e56:	83 ec 10             	sub    esp,0x10
c0012e59:	6a 0a                	push   0xa
c0012e5b:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012e5f:	50                   	push   eax
c0012e60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e64:	e8 58 ff ff ff       	call   c0012dc1 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012e69:	50                   	push   eax
c0012e6a:	e8 ca ff ff ff       	call   c0012e39 <Dbg::logs(char*)>
c0012e6f:	83 c4 20             	add    esp,0x20
c0012e72:	c3                   	ret    

c0012e73 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012e73:	83 ec 10             	sub    esp,0x10
c0012e76:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012e7a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012e7e:	50                   	push   eax
c0012e7f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e83:	e8 39 ff ff ff       	call   c0012dc1 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012e88:	50                   	push   eax
c0012e89:	e8 ab ff ff ff       	call   c0012e39 <Dbg::logs(char*)>
c0012e8e:	83 c4 20             	add    esp,0x20
c0012e91:	c3                   	ret    

c0012e92 <Dbg::kprintf(char const*, ...)>:
c0012e92:	55                   	push   ebp
c0012e93:	57                   	push   edi
c0012e94:	56                   	push   esi
c0012e95:	53                   	push   ebx
c0012e96:	83 ec 0c             	sub    esp,0xc
c0012e99:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012e9d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012ea1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012ea5:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012ea8:	84 c0                	test   al,al
c0012eaa:	74 4a                	je     c0012ef6 <Dbg::kprintf(char const*, ...)+0x64>
c0012eac:	31 db                	xor    ebx,ebx
c0012eae:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012eb1:	3c 25                	cmp    al,0x25
c0012eb3:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012eb6:	0f 85 e4 00 00 00    	jne    c0012fa0 <Dbg::kprintf(char const*, ...)+0x10e>
c0012ebc:	83 c3 02             	add    ebx,0x2
c0012ebf:	8a 07                	mov    al,BYTE PTR [edi]
c0012ec1:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012ec4:	83 e8 25             	sub    eax,0x25
c0012ec7:	3c 53                	cmp    al,0x53
c0012ec9:	0f 87 ba 00 00 00    	ja     c0012f89 <Dbg::kprintf(char const*, ...)+0xf7>
c0012ecf:	0f b6 c0             	movzx  eax,al
c0012ed2:	ff 24 85 d0 a8 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd5730]
c0012ed9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012edd:	89 c8                	mov    eax,ecx
c0012edf:	83 c1 04             	add    ecx,0x4
c0012ee2:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012ee6:	ff 30                	push   DWORD PTR [eax]
c0012ee8:	e8 4c ff ff ff       	call   c0012e39 <Dbg::logs(char*)>
c0012eed:	58                   	pop    eax
c0012eee:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012ef2:	84 c0                	test   al,al
c0012ef4:	75 b8                	jne    c0012eae <Dbg::kprintf(char const*, ...)+0x1c>
c0012ef6:	83 c4 0c             	add    esp,0xc
c0012ef9:	5b                   	pop    ebx
c0012efa:	5e                   	pop    esi
c0012efb:	5f                   	pop    edi
c0012efc:	5d                   	pop    ebp
c0012efd:	c3                   	ret    
c0012efe:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012f02:	89 d0                	mov    eax,edx
c0012f04:	83 c2 04             	add    edx,0x4
c0012f07:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012f0b:	ff 30                	push   DWORD PTR [eax]
c0012f0d:	e8 44 ff ff ff       	call   c0012e56 <Dbg::logWriteInt(unsigned int)>
c0012f12:	58                   	pop    eax
c0012f13:	eb d9                	jmp    c0012eee <Dbg::kprintf(char const*, ...)+0x5c>
c0012f15:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012f19:	89 d0                	mov    eax,edx
c0012f1b:	83 c2 04             	add    edx,0x4
c0012f1e:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012f21:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012f25:	50                   	push   eax
c0012f26:	e8 f7 fe ff ff       	call   c0012e22 <Dbg::logc(char)>
c0012f2b:	58                   	pop    eax
c0012f2c:	eb c0                	jmp    c0012eee <Dbg::kprintf(char const*, ...)+0x5c>
c0012f2e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012f32:	89 c8                	mov    eax,ecx
c0012f34:	83 c1 04             	add    ecx,0x4
c0012f37:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012f3b:	ff 30                	push   DWORD PTR [eax]
c0012f3d:	e8 14 ff ff ff       	call   c0012e56 <Dbg::logWriteInt(unsigned int)>
c0012f42:	5f                   	pop    edi
c0012f43:	eb a9                	jmp    c0012eee <Dbg::kprintf(char const*, ...)+0x5c>
c0012f45:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012f49:	89 c8                	mov    eax,ecx
c0012f4b:	83 c1 04             	add    ecx,0x4
c0012f4e:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012f52:	6a 10                	push   0x10
c0012f54:	ff 30                	push   DWORD PTR [eax]
c0012f56:	e8 18 ff ff ff       	call   c0012e73 <Dbg::logWriteIntBase(unsigned int, int)>
c0012f5b:	59                   	pop    ecx
c0012f5c:	5f                   	pop    edi
c0012f5d:	eb 8f                	jmp    c0012eee <Dbg::kprintf(char const*, ...)+0x5c>
c0012f5f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012f63:	89 d0                	mov    eax,edx
c0012f65:	83 c2 08             	add    edx,0x8
c0012f68:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012f6c:	6a 10                	push   0x10
c0012f6e:	ff 30                	push   DWORD PTR [eax]
c0012f70:	e8 fe fe ff ff       	call   c0012e73 <Dbg::logWriteIntBase(unsigned int, int)>
c0012f75:	58                   	pop    eax
c0012f76:	5a                   	pop    edx
c0012f77:	e9 72 ff ff ff       	jmp    c0012eee <Dbg::kprintf(char const*, ...)+0x5c>
c0012f7c:	6a 25                	push   0x25
c0012f7e:	e8 9f fe ff ff       	call   c0012e22 <Dbg::logc(char)>
c0012f83:	58                   	pop    eax
c0012f84:	e9 65 ff ff ff       	jmp    c0012eee <Dbg::kprintf(char const*, ...)+0x5c>
c0012f89:	6a 25                	push   0x25
c0012f8b:	e8 92 fe ff ff       	call   c0012e22 <Dbg::logc(char)>
c0012f90:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012f93:	50                   	push   eax
c0012f94:	e8 89 fe ff ff       	call   c0012e22 <Dbg::logc(char)>
c0012f99:	5a                   	pop    edx
c0012f9a:	59                   	pop    ecx
c0012f9b:	e9 4e ff ff ff       	jmp    c0012eee <Dbg::kprintf(char const*, ...)+0x5c>
c0012fa0:	50                   	push   eax
c0012fa1:	89 eb                	mov    ebx,ebp
c0012fa3:	e8 7a fe ff ff       	call   c0012e22 <Dbg::logc(char)>
c0012fa8:	89 fd                	mov    ebp,edi
c0012faa:	58                   	pop    eax
c0012fab:	e9 3e ff ff ff       	jmp    c0012eee <Dbg::kprintf(char const*, ...)+0x5c>

c0012fb0 <File::read(unsigned long long, void*, int*)>:
c0012fb0:	53                   	push   ebx
c0012fb1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012fb5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012fb9:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012fc0:	3c 19                	cmp    al,0x19
c0012fc2:	77 35                	ja     c0012ff9 <File::read(unsigned long long, void*, int*)+0x49>
c0012fc4:	8b 04 85 a0 e9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1660]
c0012fcb:	85 c0                	test   eax,eax
c0012fcd:	74 2a                	je     c0012ff9 <File::read(unsigned long long, void*, int*)+0x49>
c0012fcf:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012fd5:	85 c0                	test   eax,eax
c0012fd7:	74 20                	je     c0012ff9 <File::read(unsigned long long, void*, int*)+0x49>
c0012fd9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012fdd:	74 21                	je     c0013000 <File::read(unsigned long long, void*, int*)+0x50>
c0012fdf:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012fe1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012fe5:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012feb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012fef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012ff3:	5b                   	pop    ebx
c0012ff4:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0012ff7:	ff e0                	jmp    eax
c0012ff9:	b8 0b 00 00 00       	mov    eax,0xb
c0012ffe:	eb 05                	jmp    c0013005 <File::read(unsigned long long, void*, int*)+0x55>
c0013000:	b8 05 00 00 00       	mov    eax,0x5
c0013005:	5b                   	pop    ebx
c0013006:	c3                   	ret    
c0013007:	90                   	nop

c0013008 <File::write(unsigned long long, void*, int*)>:
c0013008:	53                   	push   ebx
c0013009:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001300d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013011:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0013018:	3c 19                	cmp    al,0x19
c001301a:	77 35                	ja     c0013051 <File::write(unsigned long long, void*, int*)+0x49>
c001301c:	8b 04 85 a0 e9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1660]
c0013023:	85 c0                	test   eax,eax
c0013025:	74 2a                	je     c0013051 <File::write(unsigned long long, void*, int*)+0x49>
c0013027:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001302d:	85 c0                	test   eax,eax
c001302f:	74 20                	je     c0013051 <File::write(unsigned long long, void*, int*)+0x49>
c0013031:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013035:	74 21                	je     c0013058 <File::write(unsigned long long, void*, int*)+0x50>
c0013037:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013039:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001303d:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0013043:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013047:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001304b:	5b                   	pop    ebx
c001304c:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c001304f:	ff e0                	jmp    eax
c0013051:	b8 0b 00 00 00       	mov    eax,0xb
c0013056:	eb 05                	jmp    c001305d <File::write(unsigned long long, void*, int*)+0x55>
c0013058:	b8 05 00 00 00       	mov    eax,0x5
c001305d:	5b                   	pop    ebx
c001305e:	c3                   	ret    
c001305f:	90                   	nop

c0013060 <Directory::read(unsigned long long, void*, int*)>:
c0013060:	53                   	push   ebx
c0013061:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013065:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013069:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0013070:	3c 19                	cmp    al,0x19
c0013072:	77 35                	ja     c00130a9 <Directory::read(unsigned long long, void*, int*)+0x49>
c0013074:	8b 04 85 a0 e9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1660]
c001307b:	85 c0                	test   eax,eax
c001307d:	74 2a                	je     c00130a9 <Directory::read(unsigned long long, void*, int*)+0x49>
c001307f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013085:	85 c0                	test   eax,eax
c0013087:	74 20                	je     c00130a9 <Directory::read(unsigned long long, void*, int*)+0x49>
c0013089:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001308d:	74 21                	je     c00130b0 <Directory::read(unsigned long long, void*, int*)+0x50>
c001308f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013091:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013095:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001309b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001309f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00130a3:	5b                   	pop    ebx
c00130a4:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c00130a7:	ff e0                	jmp    eax
c00130a9:	b8 0b 00 00 00       	mov    eax,0xb
c00130ae:	eb 05                	jmp    c00130b5 <Directory::read(unsigned long long, void*, int*)+0x55>
c00130b0:	b8 05 00 00 00       	mov    eax,0x5
c00130b5:	5b                   	pop    ebx
c00130b6:	c3                   	ret    
c00130b7:	90                   	nop

c00130b8 <Directory::write(unsigned long long, void*, int*)>:
c00130b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00130bc:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c00130c3:	b8 0b 00 00 00       	mov    eax,0xb
c00130c8:	80 fa 19             	cmp    dl,0x19
c00130cb:	77 18                	ja     c00130e5 <Directory::write(unsigned long long, void*, int*)+0x2d>
c00130cd:	8b 14 95 a0 e9 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1660]
c00130d4:	85 d2                	test   edx,edx
c00130d6:	74 0d                	je     c00130e5 <Directory::write(unsigned long long, void*, int*)+0x2d>
c00130d8:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c00130df:	19 c0                	sbb    eax,eax
c00130e1:	83 e0 0a             	and    eax,0xa
c00130e4:	40                   	inc    eax
c00130e5:	c3                   	ret    

c00130e6 <File::isAtty()>:
c00130e6:	31 c0                	xor    eax,eax
c00130e8:	c3                   	ret    
c00130e9:	90                   	nop

c00130ea <Directory::isAtty()>:
c00130ea:	31 c0                	xor    eax,eax
c00130ec:	c3                   	ret    
c00130ed:	90                   	nop

c00130ee <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00130ee:	b8 0a 00 00 00       	mov    eax,0xa
c00130f3:	c3                   	ret    

c00130f4 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c00130f4:	b8 0a 00 00 00       	mov    eax,0xa
c00130f9:	c3                   	ret    

c00130fa <File::~File()>:
c00130fa:	83 ec 0c             	sub    esp,0xc
c00130fd:	ba 8c aa 02 c0       	mov    edx,0xc002aa8c
c0013102:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013106:	89 10                	mov    DWORD PTR [eax],edx
c0013108:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001310c:	83 ec 0c             	sub    esp,0xc
c001310f:	50                   	push   eax
c0013110:	e8 c5 e7 ff ff       	call   c00118da <UnixFile::~UnixFile()>
c0013115:	83 c4 10             	add    esp,0x10
c0013118:	90                   	nop
c0013119:	83 c4 0c             	add    esp,0xc
c001311c:	c3                   	ret    
c001311d:	90                   	nop

c001311e <File::~File()>:
c001311e:	83 ec 0c             	sub    esp,0xc
c0013121:	83 ec 0c             	sub    esp,0xc
c0013124:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013128:	e8 cd ff ff ff       	call   c00130fa <File::~File()>
c001312d:	83 c4 10             	add    esp,0x10
c0013130:	83 ec 08             	sub    esp,0x8
c0013133:	68 14 01 00 00       	push   0x114
c0013138:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001313c:	e8 71 fc ff ff       	call   c0012db2 <operator delete(void*, unsigned long)>
c0013141:	83 c4 10             	add    esp,0x10
c0013144:	83 c4 0c             	add    esp,0xc
c0013147:	c3                   	ret    

c0013148 <Directory::~Directory()>:
c0013148:	83 ec 0c             	sub    esp,0xc
c001314b:	ba a8 aa 02 c0       	mov    edx,0xc002aaa8
c0013150:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013154:	89 10                	mov    DWORD PTR [eax],edx
c0013156:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001315a:	83 ec 0c             	sub    esp,0xc
c001315d:	50                   	push   eax
c001315e:	e8 77 e7 ff ff       	call   c00118da <UnixFile::~UnixFile()>
c0013163:	83 c4 10             	add    esp,0x10
c0013166:	90                   	nop
c0013167:	83 c4 0c             	add    esp,0xc
c001316a:	c3                   	ret    
c001316b:	90                   	nop

c001316c <Directory::~Directory()>:
c001316c:	83 ec 0c             	sub    esp,0xc
c001316f:	83 ec 0c             	sub    esp,0xc
c0013172:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013176:	e8 cd ff ff ff       	call   c0013148 <Directory::~Directory()>
c001317b:	83 c4 10             	add    esp,0x10
c001317e:	83 ec 08             	sub    esp,0x8
c0013181:	68 14 01 00 00       	push   0x114
c0013186:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001318a:	e8 23 fc ff ff       	call   c0012db2 <operator delete(void*, unsigned long)>
c001318f:	83 c4 10             	add    esp,0x10
c0013192:	83 c4 0c             	add    esp,0xc
c0013195:	c3                   	ret    

c0013196 <Filesystem::Filesystem()>:
c0013196:	ba 28 aa 02 c0       	mov    edx,0xc002aa28
c001319b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001319f:	89 10                	mov    DWORD PTR [eax],edx
c00131a1:	8b 15 10 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e510
c00131a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00131ab:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00131ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00131b2:	a3 10 e5 02 c0       	mov    ds:0xc002e510,eax
c00131b7:	90                   	nop
c00131b8:	c3                   	ret    
c00131b9:	90                   	nop

c00131ba <Filesystem::~Filesystem()>:
c00131ba:	ba 28 aa 02 c0       	mov    edx,0xc002aa28
c00131bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00131c3:	89 10                	mov    DWORD PTR [eax],edx
c00131c5:	90                   	nop
c00131c6:	c3                   	ret    
c00131c7:	90                   	nop

c00131c8 <Filesystem::~Filesystem()>:
c00131c8:	83 ec 0c             	sub    esp,0xc
c00131cb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00131cf:	e8 e6 ff ff ff       	call   c00131ba <Filesystem::~Filesystem()>
c00131d4:	83 c4 04             	add    esp,0x4
c00131d7:	83 ec 08             	sub    esp,0x8
c00131da:	6a 08                	push   0x8
c00131dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131e0:	e8 cd fb ff ff       	call   c0012db2 <operator delete(void*, unsigned long)>
c00131e5:	83 c4 10             	add    esp,0x10
c00131e8:	83 c4 0c             	add    esp,0xc
c00131eb:	c3                   	ret    

c00131ec <Fs::getcwd(Process*, char*, int)>:
c00131ec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00131f0:	31 c0                	xor    eax,eax
c00131f2:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00131f5:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00131f9:	7d 15                	jge    c0013210 <Fs::getcwd(Process*, char*, int)+0x24>
c00131fb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00131ff:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0013206:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0013209:	84 c9                	test   cl,cl
c001320b:	74 06                	je     c0013213 <Fs::getcwd(Process*, char*, int)+0x27>
c001320d:	40                   	inc    eax
c001320e:	eb e2                	jmp    c00131f2 <Fs::getcwd(Process*, char*, int)+0x6>
c0013210:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0013213:	31 c0                	xor    eax,eax
c0013215:	c3                   	ret    

c0013216 <Fs::initVFS()>:
c0013216:	83 ec 18             	sub    esp,0x18
c0013219:	6a 08                	push   0x8
c001321b:	e8 20 c6 ff ff       	call   c000f840 <malloc>
c0013220:	89 04 24             	mov    DWORD PTR [esp],eax
c0013223:	e8 e0 dc 00 00       	call   c0020f08 <FAT::FAT()>
c0013228:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001322f:	e8 0c c6 ff ff       	call   c000f840 <malloc>
c0013234:	89 04 24             	mov    DWORD PTR [esp],eax
c0013237:	e8 24 ef 00 00       	call   c0022160 <ISO9660::ISO9660()>
c001323c:	83 c4 1c             	add    esp,0x1c
c001323f:	c3                   	ret    

c0013240 <Fs::standardiseFiles(char*, char const*, char const*)>:
c0013240:	55                   	push   ebp
c0013241:	57                   	push   edi
c0013242:	56                   	push   esi
c0013243:	53                   	push   ebx
c0013244:	81 ec 10 04 00 00    	sub    esp,0x410
c001324a:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0013251:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0013258:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c001325f:	68 00 04 00 00       	push   0x400
c0013264:	6a 00                	push   0x0
c0013266:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001326a:	56                   	push   esi
c001326b:	e8 08 d5 fe ff       	call   c0000778 <memset>
c0013270:	83 c4 10             	add    esp,0x10
c0013273:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0013277:	75 0b                	jne    c0013284 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0013279:	50                   	push   eax
c001327a:	50                   	push   eax
c001327b:	57                   	push   edi
c001327c:	56                   	push   esi
c001327d:	e8 b2 d5 fe ff       	call   c0000834 <strcpy>
c0013282:	eb 41                	jmp    c00132c5 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0013284:	8a 07                	mov    al,BYTE PTR [edi]
c0013286:	3c 5c                	cmp    al,0x5c
c0013288:	74 04                	je     c001328e <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c001328a:	3c 2f                	cmp    al,0x2f
c001328c:	75 18                	jne    c00132a6 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c001328e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0013291:	3c 60                	cmp    al,0x60
c0013293:	7e 03                	jle    c0013298 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0013295:	83 e8 20             	sub    eax,0x20
c0013298:	88 04 24             	mov    BYTE PTR [esp],al
c001329b:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c00132a2:	50                   	push   eax
c00132a3:	50                   	push   eax
c00132a4:	eb 18                	jmp    c00132be <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c00132a6:	50                   	push   eax
c00132a7:	50                   	push   eax
c00132a8:	55                   	push   ebp
c00132a9:	56                   	push   esi
c00132aa:	e8 85 d5 fe ff       	call   c0000834 <strcpy>
c00132af:	5a                   	pop    edx
c00132b0:	59                   	pop    ecx
c00132b1:	68 78 c1 02 c0       	push   0xc002c178
c00132b6:	56                   	push   esi
c00132b7:	e8 b8 d6 fe ff       	call   c0000974 <strcat>
c00132bc:	5d                   	pop    ebp
c00132bd:	58                   	pop    eax
c00132be:	57                   	push   edi
c00132bf:	56                   	push   esi
c00132c0:	e8 af d6 fe ff       	call   c0000974 <strcat>
c00132c5:	83 c4 10             	add    esp,0x10
c00132c8:	8a 04 24             	mov    al,BYTE PTR [esp]
c00132cb:	3c 60                	cmp    al,0x60
c00132cd:	7e 03                	jle    c00132d2 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c00132cf:	83 e8 20             	sub    eax,0x20
c00132d2:	88 04 24             	mov    BYTE PTR [esp],al
c00132d5:	88 03                	mov    BYTE PTR [ebx],al
c00132d7:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c00132de:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c00132e4:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00132e8:	bf 03 00 00 00       	mov    edi,0x3
c00132ed:	b8 03 00 00 00       	mov    eax,0x3
c00132f2:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c00132f5:	84 d2                	test   dl,dl
c00132f7:	0f 84 91 00 00 00    	je     c001338e <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c00132fd:	8d 4f 01             	lea    ecx,[edi+0x1]
c0013300:	80 fa 5c             	cmp    dl,0x5c
c0013303:	74 05                	je     c001330a <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0013305:	80 fa 2f             	cmp    dl,0x2f
c0013308:	75 12                	jne    c001331c <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c001330a:	89 c5                	mov    ebp,eax
c001330c:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0013311:	74 09                	je     c001331c <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0013313:	40                   	inc    eax
c0013314:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0013318:	89 cf                	mov    edi,ecx
c001331a:	eb d6                	jmp    c00132f2 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c001331c:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0013321:	75 5b                	jne    c001337e <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0013323:	80 fa 2e             	cmp    dl,0x2e
c0013326:	75 56                	jne    c001337e <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0013328:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c001332c:	74 19                	je     c0013347 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c001332e:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0013333:	74 53                	je     c0013388 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0013335:	89 f9                	mov    ecx,edi
c0013337:	41                   	inc    ecx
c0013338:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c001333b:	80 fa 2f             	cmp    dl,0x2f
c001333e:	74 f7                	je     c0013337 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0013340:	80 fa 5c             	cmp    dl,0x5c
c0013343:	74 f2                	je     c0013337 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0013345:	eb d1                	jmp    c0013318 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013347:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c001334c:	74 3a                	je     c0013388 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c001334e:	83 f8 03             	cmp    eax,0x3
c0013351:	74 c5                	je     c0013318 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013353:	41                   	inc    ecx
c0013354:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0013357:	80 fa 2f             	cmp    dl,0x2f
c001335a:	74 f7                	je     c0013353 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c001335c:	80 fa 5c             	cmp    dl,0x5c
c001335f:	74 f2                	je     c0013353 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0013361:	48                   	dec    eax
c0013362:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0013366:	75 06                	jne    c001336e <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0013368:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001336c:	eb f3                	jmp    c0013361 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c001336e:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0013372:	74 07                	je     c001337b <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0013374:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013378:	48                   	dec    eax
c0013379:	eb f3                	jmp    c001336e <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c001337b:	40                   	inc    eax
c001337c:	eb 9a                	jmp    c0013318 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001337e:	80 fa 2f             	cmp    dl,0x2f
c0013381:	74 95                	je     c0013318 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013383:	80 fa 5c             	cmp    dl,0x5c
c0013386:	74 90                	je     c0013318 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013388:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c001338b:	40                   	inc    eax
c001338c:	eb 8a                	jmp    c0013318 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001338e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013392:	83 ec 0c             	sub    esp,0xc
c0013395:	53                   	push   ebx
c0013396:	e8 f9 d3 fe ff       	call   c0000794 <strlen>
c001339b:	83 c4 10             	add    esp,0x10
c001339e:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c00133a3:	75 26                	jne    c00133cb <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c00133a5:	83 ec 0c             	sub    esp,0xc
c00133a8:	53                   	push   ebx
c00133a9:	e8 e6 d3 fe ff       	call   c0000794 <strlen>
c00133ae:	83 c4 10             	add    esp,0x10
c00133b1:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c00133b6:	74 26                	je     c00133de <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c00133b8:	83 ec 0c             	sub    esp,0xc
c00133bb:	53                   	push   ebx
c00133bc:	e8 d3 d3 fe ff       	call   c0000794 <strlen>
c00133c1:	83 c4 10             	add    esp,0x10
c00133c4:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00133c9:	eb c7                	jmp    c0013392 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c00133cb:	83 ec 0c             	sub    esp,0xc
c00133ce:	53                   	push   ebx
c00133cf:	e8 c0 d3 fe ff       	call   c0000794 <strlen>
c00133d4:	83 c4 10             	add    esp,0x10
c00133d7:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c00133dc:	74 c7                	je     c00133a5 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c00133de:	81 c4 0c 04 00 00    	add    esp,0x40c
c00133e4:	5b                   	pop    ebx
c00133e5:	5e                   	pop    esi
c00133e6:	5f                   	pop    edi
c00133e7:	5d                   	pop    ebp
c00133e8:	c3                   	ret    
c00133e9:	90                   	nop

c00133ea <File::File(char const*, Process*)>:
c00133ea:	83 ec 0c             	sub    esp,0xc
c00133ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133f1:	83 ec 08             	sub    esp,0x8
c00133f4:	6a 00                	push   0x0
c00133f6:	50                   	push   eax
c00133f7:	e8 fc e2 ff ff       	call   c00116f8 <UnixFile::UnixFile(int)>
c00133fc:	83 c4 10             	add    esp,0x10
c00133ff:	ba 8c aa 02 c0       	mov    edx,0xc002aa8c
c0013404:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013408:	89 10                	mov    DWORD PTR [eax],edx
c001340a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001340e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013414:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013418:	83 c0 0d             	add    eax,0xd
c001341b:	83 ec 04             	sub    esp,0x4
c001341e:	52                   	push   edx
c001341f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013423:	50                   	push   eax
c0013424:	e8 17 fe ff ff       	call   c0013240 <Fs::standardiseFiles(char*, char const*, char const*)>
c0013429:	83 c4 10             	add    esp,0x10
c001342c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013430:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013433:	8d 50 bf             	lea    edx,[eax-0x41]
c0013436:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001343a:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013440:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013444:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013448:	90                   	nop
c0013449:	83 c4 0c             	add    esp,0xc
c001344c:	c3                   	ret    
c001344d:	90                   	nop

c001344e <File::open(FileOpenMode)>:
c001344e:	53                   	push   ebx
c001344f:	b8 0b 00 00 00       	mov    eax,0xb
c0013454:	83 ec 08             	sub    esp,0x8
c0013457:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001345b:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013462:	80 fa 19             	cmp    dl,0x19
c0013465:	77 40                	ja     c00134a7 <File::open(FileOpenMode)+0x59>
c0013467:	8b 14 95 a0 e9 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1660]
c001346e:	85 d2                	test   edx,edx
c0013470:	74 35                	je     c00134a7 <File::open(FileOpenMode)+0x59>
c0013472:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013478:	85 d2                	test   edx,edx
c001347a:	74 2b                	je     c00134a7 <File::open(FileOpenMode)+0x59>
c001347c:	b8 06 00 00 00       	mov    eax,0x6
c0013481:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013485:	75 20                	jne    c00134a7 <File::open(FileOpenMode)+0x59>
c0013487:	8b 02                	mov    eax,DWORD PTR [edx]
c0013489:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001348f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013493:	51                   	push   ecx
c0013494:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013497:	51                   	push   ecx
c0013498:	52                   	push   edx
c0013499:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001349c:	83 c4 10             	add    esp,0x10
c001349f:	85 c0                	test   eax,eax
c00134a1:	75 04                	jne    c00134a7 <File::open(FileOpenMode)+0x59>
c00134a3:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00134a7:	83 c4 08             	add    esp,0x8
c00134aa:	5b                   	pop    ebx
c00134ab:	c3                   	ret    

c00134ac <File::close()>:
c00134ac:	53                   	push   ebx
c00134ad:	b8 0b 00 00 00       	mov    eax,0xb
c00134b2:	83 ec 08             	sub    esp,0x8
c00134b5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00134b9:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00134c0:	80 fa 19             	cmp    dl,0x19
c00134c3:	77 41                	ja     c0013506 <File::close()+0x5a>
c00134c5:	8b 1c 95 a0 e9 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1660]
c00134cc:	85 db                	test   ebx,ebx
c00134ce:	74 36                	je     c0013506 <File::close()+0x5a>
c00134d0:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00134d7:	74 2d                	je     c0013506 <File::close()+0x5a>
c00134d9:	b8 05 00 00 00       	mov    eax,0x5
c00134de:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00134e2:	74 22                	je     c0013506 <File::close()+0x5a>
c00134e4:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00134e8:	8b 04 95 a0 e9 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1660]
c00134ef:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00134f5:	53                   	push   ebx
c00134f6:	53                   	push   ebx
c00134f7:	8b 10                	mov    edx,DWORD PTR [eax]
c00134f9:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00134ff:	50                   	push   eax
c0013500:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0013503:	83 c4 10             	add    esp,0x10
c0013506:	83 c4 08             	add    esp,0x8
c0013509:	5b                   	pop    ebx
c001350a:	c3                   	ret    
c001350b:	90                   	nop

c001350c <File::seek(unsigned long long)>:
c001350c:	56                   	push   esi
c001350d:	53                   	push   ebx
c001350e:	b8 0b 00 00 00       	mov    eax,0xb
c0013513:	51                   	push   ecx
c0013514:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013518:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001351c:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0013523:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013527:	80 fa 19             	cmp    dl,0x19
c001352a:	77 31                	ja     c001355d <File::seek(unsigned long long)+0x51>
c001352c:	8b 14 95 a0 e9 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1660]
c0013533:	85 d2                	test   edx,edx
c0013535:	74 26                	je     c001355d <File::seek(unsigned long long)+0x51>
c0013537:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001353d:	85 d2                	test   edx,edx
c001353f:	74 1c                	je     c001355d <File::seek(unsigned long long)+0x51>
c0013541:	b8 05 00 00 00       	mov    eax,0x5
c0013546:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c001354a:	74 11                	je     c001355d <File::seek(unsigned long long)+0x51>
c001354c:	8b 02                	mov    eax,DWORD PTR [edx]
c001354e:	53                   	push   ebx
c001354f:	51                   	push   ecx
c0013550:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0013556:	52                   	push   edx
c0013557:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001355a:	83 c4 10             	add    esp,0x10
c001355d:	5a                   	pop    edx
c001355e:	5b                   	pop    ebx
c001355f:	5e                   	pop    esi
c0013560:	c3                   	ret    
c0013561:	90                   	nop

c0013562 <File::tell(unsigned long long*)>:
c0013562:	83 ec 0c             	sub    esp,0xc
c0013565:	b8 0b 00 00 00       	mov    eax,0xb
c001356a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001356e:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013575:	80 fa 19             	cmp    dl,0x19
c0013578:	77 34                	ja     c00135ae <File::tell(unsigned long long*)+0x4c>
c001357a:	8b 14 95 a0 e9 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1660]
c0013581:	85 d2                	test   edx,edx
c0013583:	74 29                	je     c00135ae <File::tell(unsigned long long*)+0x4c>
c0013585:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001358b:	85 d2                	test   edx,edx
c001358d:	74 1f                	je     c00135ae <File::tell(unsigned long long*)+0x4c>
c001358f:	b8 05 00 00 00       	mov    eax,0x5
c0013594:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013598:	74 14                	je     c00135ae <File::tell(unsigned long long*)+0x4c>
c001359a:	50                   	push   eax
c001359b:	8b 02                	mov    eax,DWORD PTR [edx]
c001359d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00135a1:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00135a7:	52                   	push   edx
c00135a8:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00135ab:	83 c4 10             	add    esp,0x10
c00135ae:	83 c4 0c             	add    esp,0xc
c00135b1:	c3                   	ret    

c00135b2 <File::rewind()>:
c00135b2:	83 ec 10             	sub    esp,0x10
c00135b5:	6a 00                	push   0x0
c00135b7:	6a 00                	push   0x0
c00135b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135bd:	e8 4a ff ff ff       	call   c001350c <File::seek(unsigned long long)>
c00135c2:	83 c4 1c             	add    esp,0x1c
c00135c5:	c3                   	ret    

c00135c6 <File::unlink()>:
c00135c6:	83 ec 0c             	sub    esp,0xc
c00135c9:	b8 0b 00 00 00       	mov    eax,0xb
c00135ce:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00135d2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00135d9:	80 f9 19             	cmp    cl,0x19
c00135dc:	77 2f                	ja     c001360d <File::unlink()+0x47>
c00135de:	8b 0c 8d a0 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1660]
c00135e5:	85 c9                	test   ecx,ecx
c00135e7:	74 24                	je     c001360d <File::unlink()+0x47>
c00135e9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00135ef:	85 c9                	test   ecx,ecx
c00135f1:	74 1a                	je     c001360d <File::unlink()+0x47>
c00135f3:	b8 06 00 00 00       	mov    eax,0x6
c00135f8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00135fc:	75 0f                	jne    c001360d <File::unlink()+0x47>
c00135fe:	83 c2 0d             	add    edx,0xd
c0013601:	50                   	push   eax
c0013602:	50                   	push   eax
c0013603:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013605:	52                   	push   edx
c0013606:	51                   	push   ecx
c0013607:	ff 50 38             	call   DWORD PTR [eax+0x38]
c001360a:	83 c4 10             	add    esp,0x10
c001360d:	83 c4 0c             	add    esp,0xc
c0013610:	c3                   	ret    
c0013611:	90                   	nop

c0013612 <File::rename(char const*)>:
c0013612:	83 ec 0c             	sub    esp,0xc
c0013615:	b8 0b 00 00 00       	mov    eax,0xb
c001361a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001361e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013625:	80 f9 19             	cmp    cl,0x19
c0013628:	77 32                	ja     c001365c <File::rename(char const*)+0x4a>
c001362a:	8b 0c 8d a0 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1660]
c0013631:	85 c9                	test   ecx,ecx
c0013633:	74 27                	je     c001365c <File::rename(char const*)+0x4a>
c0013635:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001363b:	85 c9                	test   ecx,ecx
c001363d:	74 1d                	je     c001365c <File::rename(char const*)+0x4a>
c001363f:	b8 06 00 00 00       	mov    eax,0x6
c0013644:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013648:	75 12                	jne    c001365c <File::rename(char const*)+0x4a>
c001364a:	83 c2 0d             	add    edx,0xd
c001364d:	50                   	push   eax
c001364e:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013650:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013654:	52                   	push   edx
c0013655:	51                   	push   ecx
c0013656:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013659:	83 c4 10             	add    esp,0x10
c001365c:	83 c4 0c             	add    esp,0xc
c001365f:	c3                   	ret    

c0013660 <File::chfatattr(unsigned char, unsigned char)>:
c0013660:	57                   	push   edi
c0013661:	b8 0b 00 00 00       	mov    eax,0xb
c0013666:	56                   	push   esi
c0013667:	53                   	push   ebx
c0013668:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001366c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013670:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013677:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001367b:	80 f9 19             	cmp    cl,0x19
c001367e:	77 37                	ja     c00136b7 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013680:	8b 0c 8d a0 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1660]
c0013687:	85 c9                	test   ecx,ecx
c0013689:	74 2c                	je     c00136b7 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001368b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013691:	85 c9                	test   ecx,ecx
c0013693:	74 22                	je     c00136b7 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013695:	b8 06 00 00 00       	mov    eax,0x6
c001369a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001369e:	75 17                	jne    c00136b7 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00136a0:	8b 39                	mov    edi,DWORD PTR [ecx]
c00136a2:	89 f0                	mov    eax,esi
c00136a4:	83 c2 0d             	add    edx,0xd
c00136a7:	0f b6 f0             	movzx  esi,al
c00136aa:	0f b6 db             	movzx  ebx,bl
c00136ad:	56                   	push   esi
c00136ae:	53                   	push   ebx
c00136af:	52                   	push   edx
c00136b0:	51                   	push   ecx
c00136b1:	ff 57 34             	call   DWORD PTR [edi+0x34]
c00136b4:	83 c4 10             	add    esp,0x10
c00136b7:	5b                   	pop    ebx
c00136b8:	5e                   	pop    esi
c00136b9:	5f                   	pop    edi
c00136ba:	c3                   	ret    
c00136bb:	90                   	nop

c00136bc <File::exists()>:
c00136bc:	83 ec 0c             	sub    esp,0xc
c00136bf:	31 c0                	xor    eax,eax
c00136c1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00136c5:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00136cc:	80 f9 19             	cmp    cl,0x19
c00136cf:	77 24                	ja     c00136f5 <File::exists()+0x39>
c00136d1:	8b 0c 8d a0 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1660]
c00136d8:	85 c9                	test   ecx,ecx
c00136da:	74 19                	je     c00136f5 <File::exists()+0x39>
c00136dc:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00136e2:	85 c9                	test   ecx,ecx
c00136e4:	74 0f                	je     c00136f5 <File::exists()+0x39>
c00136e6:	83 c2 0d             	add    edx,0xd
c00136e9:	50                   	push   eax
c00136ea:	50                   	push   eax
c00136eb:	8b 01                	mov    eax,DWORD PTR [ecx]
c00136ed:	52                   	push   edx
c00136ee:	51                   	push   ecx
c00136ef:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00136f2:	83 c4 10             	add    esp,0x10
c00136f5:	83 c4 0c             	add    esp,0xc
c00136f8:	c3                   	ret    
c00136f9:	90                   	nop

c00136fa <File::stat(unsigned long long*, bool*)>:
c00136fa:	56                   	push   esi
c00136fb:	53                   	push   ebx
c00136fc:	50                   	push   eax
c00136fd:	b8 0b 00 00 00       	mov    eax,0xb
c0013702:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013706:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001370a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013711:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013715:	80 f9 19             	cmp    cl,0x19
c0013718:	77 3d                	ja     c0013757 <File::stat(unsigned long long*, bool*)+0x5d>
c001371a:	8b 0c 8d a0 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1660]
c0013721:	85 c9                	test   ecx,ecx
c0013723:	74 32                	je     c0013757 <File::stat(unsigned long long*, bool*)+0x5d>
c0013725:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001372b:	85 c9                	test   ecx,ecx
c001372d:	74 28                	je     c0013757 <File::stat(unsigned long long*, bool*)+0x5d>
c001372f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013731:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013735:	74 13                	je     c001374a <File::stat(unsigned long long*, bool*)+0x50>
c0013737:	83 ec 04             	sub    esp,0x4
c001373a:	56                   	push   esi
c001373b:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0013741:	51                   	push   ecx
c0013742:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0013745:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0013748:	eb 0a                	jmp    c0013754 <File::stat(unsigned long long*, bool*)+0x5a>
c001374a:	53                   	push   ebx
c001374b:	83 c2 0d             	add    edx,0xd
c001374e:	56                   	push   esi
c001374f:	52                   	push   edx
c0013750:	51                   	push   ecx
c0013751:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0013754:	83 c4 10             	add    esp,0x10
c0013757:	5a                   	pop    edx
c0013758:	5b                   	pop    ebx
c0013759:	5e                   	pop    esi
c001375a:	c3                   	ret    

c001375b <Fs::setcwd(Process*, char*)>:
c001375b:	55                   	push   ebp
c001375c:	57                   	push   edi
c001375d:	56                   	push   esi
c001375e:	53                   	push   ebx
c001375f:	81 ec 20 02 00 00    	sub    esp,0x220
c0013765:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c001376c:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0013772:	57                   	push   edi
c0013773:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001377a:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c001377e:	56                   	push   esi
c001377f:	e8 bc fa ff ff       	call   c0013240 <Fs::standardiseFiles(char*, char const*, char const*)>
c0013784:	89 34 24             	mov    DWORD PTR [esp],esi
c0013787:	e8 08 d0 fe ff       	call   c0000794 <strlen>
c001378c:	83 c4 10             	add    esp,0x10
c001378f:	83 f8 02             	cmp    eax,0x2
c0013792:	77 17                	ja     c00137ab <Fs::setcwd(Process*, char*)+0x50>
c0013794:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0013799:	83 e8 41             	sub    eax,0x41
c001379c:	83 f8 19             	cmp    eax,0x19
c001379f:	76 24                	jbe    c00137c5 <Fs::setcwd(Process*, char*)+0x6a>
c00137a1:	b8 03 00 00 00       	mov    eax,0x3
c00137a6:	e9 e0 00 00 00       	jmp    c001388b <Fs::setcwd(Process*, char*)+0x130>
c00137ab:	83 ec 0c             	sub    esp,0xc
c00137ae:	56                   	push   esi
c00137af:	e8 e0 cf fe ff       	call   c0000794 <strlen>
c00137b4:	83 c4 10             	add    esp,0x10
c00137b7:	83 f8 03             	cmp    eax,0x3
c00137ba:	75 34                	jne    c00137f0 <Fs::setcwd(Process*, char*)+0x95>
c00137bc:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c00137c1:	75 2d                	jne    c00137f0 <Fs::setcwd(Process*, char*)+0x95>
c00137c3:	eb cf                	jmp    c0013794 <Fs::setcwd(Process*, char*)+0x39>
c00137c5:	8b 14 85 a0 e9 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1660]
c00137cc:	b8 05 00 00 00       	mov    eax,0x5
c00137d1:	85 d2                	test   edx,edx
c00137d3:	0f 84 b2 00 00 00    	je     c001388b <Fs::setcwd(Process*, char*)+0x130>
c00137d9:	b8 06 00 00 00       	mov    eax,0x6
c00137de:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00137e5:	0f 85 92 00 00 00    	jne    c001387d <Fs::setcwd(Process*, char*)+0x122>
c00137eb:	e9 9b 00 00 00       	jmp    c001388b <Fs::setcwd(Process*, char*)+0x130>
c00137f0:	83 ec 0c             	sub    esp,0xc
c00137f3:	68 14 01 00 00       	push   0x114
c00137f8:	e8 43 c0 ff ff       	call   c000f840 <malloc>
c00137fd:	83 c4 0c             	add    esp,0xc
c0013800:	89 c3                	mov    ebx,eax
c0013802:	55                   	push   ebp
c0013803:	56                   	push   esi
c0013804:	50                   	push   eax
c0013805:	e8 e0 fb ff ff       	call   c00133ea <File::File(char const*, Process*)>
c001380a:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c001380f:	83 c4 0c             	add    esp,0xc
c0013812:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0013816:	50                   	push   eax
c0013817:	8d 44 24 10          	lea    eax,[esp+0x10]
c001381b:	50                   	push   eax
c001381c:	53                   	push   ebx
c001381d:	e8 d8 fe ff ff       	call   c00136fa <File::stat(unsigned long long*, bool*)>
c0013822:	83 c4 10             	add    esp,0x10
c0013825:	83 f8 02             	cmp    eax,0x2
c0013828:	74 04                	je     c001382e <Fs::setcwd(Process*, char*)+0xd3>
c001382a:	85 c0                	test   eax,eax
c001382c:	74 1c                	je     c001384a <Fs::setcwd(Process*, char*)+0xef>
c001382e:	b8 01 00 00 00       	mov    eax,0x1
c0013833:	85 db                	test   ebx,ebx
c0013835:	74 54                	je     c001388b <Fs::setcwd(Process*, char*)+0x130>
c0013837:	83 ec 0c             	sub    esp,0xc
c001383a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001383c:	53                   	push   ebx
c001383d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013840:	83 c4 10             	add    esp,0x10
c0013843:	b8 01 00 00 00       	mov    eax,0x1
c0013848:	eb 41                	jmp    c001388b <Fs::setcwd(Process*, char*)+0x130>
c001384a:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001384f:	75 1c                	jne    c001386d <Fs::setcwd(Process*, char*)+0x112>
c0013851:	b8 02 00 00 00       	mov    eax,0x2
c0013856:	85 db                	test   ebx,ebx
c0013858:	74 31                	je     c001388b <Fs::setcwd(Process*, char*)+0x130>
c001385a:	83 ec 0c             	sub    esp,0xc
c001385d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001385f:	53                   	push   ebx
c0013860:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013863:	83 c4 10             	add    esp,0x10
c0013866:	b8 02 00 00 00       	mov    eax,0x2
c001386b:	eb 1e                	jmp    c001388b <Fs::setcwd(Process*, char*)+0x130>
c001386d:	85 db                	test   ebx,ebx
c001386f:	74 0c                	je     c001387d <Fs::setcwd(Process*, char*)+0x122>
c0013871:	83 ec 0c             	sub    esp,0xc
c0013874:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013876:	53                   	push   ebx
c0013877:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001387a:	83 c4 10             	add    esp,0x10
c001387d:	50                   	push   eax
c001387e:	50                   	push   eax
c001387f:	56                   	push   esi
c0013880:	57                   	push   edi
c0013881:	e8 ae cf fe ff       	call   c0000834 <strcpy>
c0013886:	83 c4 10             	add    esp,0x10
c0013889:	31 c0                	xor    eax,eax
c001388b:	81 c4 1c 02 00 00    	add    esp,0x21c
c0013891:	5b                   	pop    ebx
c0013892:	5e                   	pop    esi
c0013893:	5f                   	pop    edi
c0013894:	5d                   	pop    ebp
c0013895:	c3                   	ret    

c0013896 <Directory::Directory(char const*, Process*)>:
c0013896:	83 ec 0c             	sub    esp,0xc
c0013899:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001389d:	83 ec 08             	sub    esp,0x8
c00138a0:	6a 00                	push   0x0
c00138a2:	50                   	push   eax
c00138a3:	e8 50 de ff ff       	call   c00116f8 <UnixFile::UnixFile(int)>
c00138a8:	83 c4 10             	add    esp,0x10
c00138ab:	ba a8 aa 02 c0       	mov    edx,0xc002aaa8
c00138b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138b4:	89 10                	mov    DWORD PTR [eax],edx
c00138b6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00138ba:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00138c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138c4:	83 c0 0d             	add    eax,0xd
c00138c7:	83 ec 04             	sub    esp,0x4
c00138ca:	52                   	push   edx
c00138cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00138cf:	50                   	push   eax
c00138d0:	e8 6b f9 ff ff       	call   c0013240 <Fs::standardiseFiles(char*, char const*, char const*)>
c00138d5:	83 c4 10             	add    esp,0x10
c00138d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138dc:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00138df:	8d 50 bf             	lea    edx,[eax-0x41]
c00138e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138e6:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00138ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138f0:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00138f4:	90                   	nop
c00138f5:	83 c4 0c             	add    esp,0xc
c00138f8:	c3                   	ret    
c00138f9:	90                   	nop

c00138fa <Directory::open()>:
c00138fa:	53                   	push   ebx
c00138fb:	b8 0b 00 00 00       	mov    eax,0xb
c0013900:	83 ec 08             	sub    esp,0x8
c0013903:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013907:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001390e:	80 fa 19             	cmp    dl,0x19
c0013911:	77 3d                	ja     c0013950 <Directory::open()+0x56>
c0013913:	8b 14 95 a0 e9 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1660]
c001391a:	85 d2                	test   edx,edx
c001391c:	74 32                	je     c0013950 <Directory::open()+0x56>
c001391e:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013924:	85 d2                	test   edx,edx
c0013926:	74 28                	je     c0013950 <Directory::open()+0x56>
c0013928:	b8 06 00 00 00       	mov    eax,0x6
c001392d:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013931:	75 1d                	jne    c0013950 <Directory::open()+0x56>
c0013933:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013939:	50                   	push   eax
c001393a:	8b 02                	mov    eax,DWORD PTR [edx]
c001393c:	51                   	push   ecx
c001393d:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013940:	51                   	push   ecx
c0013941:	52                   	push   edx
c0013942:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0013945:	83 c4 10             	add    esp,0x10
c0013948:	85 c0                	test   eax,eax
c001394a:	75 04                	jne    c0013950 <Directory::open()+0x56>
c001394c:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013950:	83 c4 08             	add    esp,0x8
c0013953:	5b                   	pop    ebx
c0013954:	c3                   	ret    
c0013955:	90                   	nop

c0013956 <Directory::close()>:
c0013956:	53                   	push   ebx
c0013957:	b8 0b 00 00 00       	mov    eax,0xb
c001395c:	83 ec 08             	sub    esp,0x8
c001395f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013963:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001396a:	80 fa 19             	cmp    dl,0x19
c001396d:	77 41                	ja     c00139b0 <Directory::close()+0x5a>
c001396f:	8b 1c 95 a0 e9 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1660]
c0013976:	85 db                	test   ebx,ebx
c0013978:	74 36                	je     c00139b0 <Directory::close()+0x5a>
c001397a:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013981:	74 2d                	je     c00139b0 <Directory::close()+0x5a>
c0013983:	b8 05 00 00 00       	mov    eax,0x5
c0013988:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001398c:	74 22                	je     c00139b0 <Directory::close()+0x5a>
c001398e:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013992:	8b 04 95 a0 e9 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1660]
c0013999:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001399f:	53                   	push   ebx
c00139a0:	53                   	push   ebx
c00139a1:	8b 10                	mov    edx,DWORD PTR [eax]
c00139a3:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00139a9:	50                   	push   eax
c00139aa:	ff 52 20             	call   DWORD PTR [edx+0x20]
c00139ad:	83 c4 10             	add    esp,0x10
c00139b0:	83 c4 08             	add    esp,0x8
c00139b3:	5b                   	pop    ebx
c00139b4:	c3                   	ret    
c00139b5:	90                   	nop

c00139b6 <Directory::unlink()>:
c00139b6:	83 ec 0c             	sub    esp,0xc
c00139b9:	b8 0b 00 00 00       	mov    eax,0xb
c00139be:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00139c2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00139c9:	80 f9 19             	cmp    cl,0x19
c00139cc:	77 2f                	ja     c00139fd <Directory::unlink()+0x47>
c00139ce:	8b 0c 8d a0 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1660]
c00139d5:	85 c9                	test   ecx,ecx
c00139d7:	74 24                	je     c00139fd <Directory::unlink()+0x47>
c00139d9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00139df:	85 c9                	test   ecx,ecx
c00139e1:	74 1a                	je     c00139fd <Directory::unlink()+0x47>
c00139e3:	b8 06 00 00 00       	mov    eax,0x6
c00139e8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00139ec:	75 0f                	jne    c00139fd <Directory::unlink()+0x47>
c00139ee:	83 c2 0d             	add    edx,0xd
c00139f1:	50                   	push   eax
c00139f2:	50                   	push   eax
c00139f3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00139f5:	52                   	push   edx
c00139f6:	51                   	push   ecx
c00139f7:	ff 50 38             	call   DWORD PTR [eax+0x38]
c00139fa:	83 c4 10             	add    esp,0x10
c00139fd:	83 c4 0c             	add    esp,0xc
c0013a00:	c3                   	ret    
c0013a01:	90                   	nop

c0013a02 <Directory::rename(char const*)>:
c0013a02:	83 ec 0c             	sub    esp,0xc
c0013a05:	b8 0b 00 00 00       	mov    eax,0xb
c0013a0a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a0e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013a15:	80 f9 19             	cmp    cl,0x19
c0013a18:	77 32                	ja     c0013a4c <Directory::rename(char const*)+0x4a>
c0013a1a:	8b 0c 8d a0 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1660]
c0013a21:	85 c9                	test   ecx,ecx
c0013a23:	74 27                	je     c0013a4c <Directory::rename(char const*)+0x4a>
c0013a25:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013a2b:	85 c9                	test   ecx,ecx
c0013a2d:	74 1d                	je     c0013a4c <Directory::rename(char const*)+0x4a>
c0013a2f:	b8 06 00 00 00       	mov    eax,0x6
c0013a34:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013a38:	75 12                	jne    c0013a4c <Directory::rename(char const*)+0x4a>
c0013a3a:	83 c2 0d             	add    edx,0xd
c0013a3d:	50                   	push   eax
c0013a3e:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013a40:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013a44:	52                   	push   edx
c0013a45:	51                   	push   ecx
c0013a46:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013a49:	83 c4 10             	add    esp,0x10
c0013a4c:	83 c4 0c             	add    esp,0xc
c0013a4f:	c3                   	ret    

c0013a50 <Directory::exists()>:
c0013a50:	83 ec 0c             	sub    esp,0xc
c0013a53:	31 c0                	xor    eax,eax
c0013a55:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a59:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013a60:	80 f9 19             	cmp    cl,0x19
c0013a63:	77 24                	ja     c0013a89 <Directory::exists()+0x39>
c0013a65:	8b 0c 8d a0 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1660]
c0013a6c:	85 c9                	test   ecx,ecx
c0013a6e:	74 19                	je     c0013a89 <Directory::exists()+0x39>
c0013a70:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013a76:	85 c9                	test   ecx,ecx
c0013a78:	74 0f                	je     c0013a89 <Directory::exists()+0x39>
c0013a7a:	83 c2 0d             	add    edx,0xd
c0013a7d:	50                   	push   eax
c0013a7e:	50                   	push   eax
c0013a7f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013a81:	52                   	push   edx
c0013a82:	51                   	push   ecx
c0013a83:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013a86:	83 c4 10             	add    esp,0x10
c0013a89:	83 c4 0c             	add    esp,0xc
c0013a8c:	c3                   	ret    
c0013a8d:	90                   	nop

c0013a8e <Directory::read(dirent*)>:
c0013a8e:	83 ec 1c             	sub    esp,0x1c
c0013a91:	b8 0b 00 00 00       	mov    eax,0xb
c0013a96:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013a9a:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013aa1:	80 fa 19             	cmp    dl,0x19
c0013aa4:	77 30                	ja     c0013ad6 <Directory::read(dirent*)+0x48>
c0013aa6:	8b 14 95 a0 e9 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1660]
c0013aad:	85 d2                	test   edx,edx
c0013aaf:	74 25                	je     c0013ad6 <Directory::read(dirent*)+0x48>
c0013ab1:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013ab8:	74 1c                	je     c0013ad6 <Directory::read(dirent*)+0x48>
c0013aba:	83 ec 0c             	sub    esp,0xc
c0013abd:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013abf:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013ac3:	52                   	push   edx
c0013ac4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013ac8:	6a 00                	push   0x0
c0013aca:	68 10 01 00 00       	push   0x110
c0013acf:	51                   	push   ecx
c0013ad0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013ad3:	83 c4 20             	add    esp,0x20
c0013ad6:	83 c4 1c             	add    esp,0x1c
c0013ad9:	c3                   	ret    

c0013ada <Directory::create()>:
c0013ada:	83 ec 0c             	sub    esp,0xc
c0013add:	b8 0b 00 00 00       	mov    eax,0xb
c0013ae2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013ae6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013aed:	80 f9 19             	cmp    cl,0x19
c0013af0:	77 2f                	ja     c0013b21 <Directory::create()+0x47>
c0013af2:	8b 0c 8d a0 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1660]
c0013af9:	85 c9                	test   ecx,ecx
c0013afb:	74 24                	je     c0013b21 <Directory::create()+0x47>
c0013afd:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013b03:	85 c9                	test   ecx,ecx
c0013b05:	74 1a                	je     c0013b21 <Directory::create()+0x47>
c0013b07:	b8 06 00 00 00       	mov    eax,0x6
c0013b0c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013b10:	75 0f                	jne    c0013b21 <Directory::create()+0x47>
c0013b12:	83 c2 0d             	add    edx,0xd
c0013b15:	50                   	push   eax
c0013b16:	50                   	push   eax
c0013b17:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b19:	52                   	push   edx
c0013b1a:	51                   	push   ecx
c0013b1b:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013b1e:	83 c4 10             	add    esp,0x10
c0013b21:	83 c4 0c             	add    esp,0xc
c0013b24:	c3                   	ret    
c0013b25:	90                   	nop

c0013b26 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013b26:	b8 0a 00 00 00       	mov    eax,0xa
c0013b2b:	c3                   	ret    

c0013b2c <Bus::Bus(char const*)>:
c0013b2c:	83 ec 0c             	sub    esp,0xc
c0013b2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b33:	83 ec 08             	sub    esp,0x8
c0013b36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b3a:	50                   	push   eax
c0013b3b:	e8 68 09 00 00       	call   c00144a8 <Device::Device(char const*)>
c0013b40:	83 c4 10             	add    esp,0x10
c0013b43:	ba c4 aa 02 c0       	mov    edx,0xc002aac4
c0013b48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b4c:	89 10                	mov    DWORD PTR [eax],edx
c0013b4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b52:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013b5c:	90                   	nop
c0013b5d:	83 c4 0c             	add    esp,0xc
c0013b60:	c3                   	ret    
c0013b61:	90                   	nop

c0013b62 <Bus::~Bus()>:
c0013b62:	83 ec 0c             	sub    esp,0xc
c0013b65:	ba c4 aa 02 c0       	mov    edx,0xc002aac4
c0013b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b6e:	89 10                	mov    DWORD PTR [eax],edx
c0013b70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b74:	83 ec 0c             	sub    esp,0xc
c0013b77:	50                   	push   eax
c0013b78:	e8 0d 06 00 00       	call   c001418a <Device::~Device()>
c0013b7d:	83 c4 10             	add    esp,0x10
c0013b80:	90                   	nop
c0013b81:	83 c4 0c             	add    esp,0xc
c0013b84:	c3                   	ret    
c0013b85:	90                   	nop

c0013b86 <Bus::~Bus()>:
c0013b86:	83 ec 0c             	sub    esp,0xc
c0013b89:	83 ec 0c             	sub    esp,0xc
c0013b8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b90:	e8 cd ff ff ff       	call   c0013b62 <Bus::~Bus()>
c0013b95:	83 c4 10             	add    esp,0x10
c0013b98:	83 ec 08             	sub    esp,0x8
c0013b9b:	68 58 01 00 00       	push   0x158
c0013ba0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ba4:	e8 09 f2 ff ff       	call   c0012db2 <operator delete(void*, unsigned long)>
c0013ba9:	83 c4 10             	add    esp,0x10
c0013bac:	83 c4 0c             	add    esp,0xc
c0013baf:	c3                   	ret    

c0013bb0 <Buzzer::Buzzer(char const*)>:
c0013bb0:	83 ec 0c             	sub    esp,0xc
c0013bb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bb7:	83 ec 08             	sub    esp,0x8
c0013bba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bbe:	50                   	push   eax
c0013bbf:	e8 e4 08 00 00       	call   c00144a8 <Device::Device(char const*)>
c0013bc4:	83 c4 10             	add    esp,0x10
c0013bc7:	ba f0 aa 02 c0       	mov    edx,0xc002aaf0
c0013bcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bd0:	89 10                	mov    DWORD PTR [eax],edx
c0013bd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bd6:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013be0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013be4:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013bee:	90                   	nop
c0013bef:	83 c4 0c             	add    esp,0xc
c0013bf2:	c3                   	ret    
c0013bf3:	90                   	nop

c0013bf4 <Buzzer::~Buzzer()>:
c0013bf4:	83 ec 0c             	sub    esp,0xc
c0013bf7:	ba f0 aa 02 c0       	mov    edx,0xc002aaf0
c0013bfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c00:	89 10                	mov    DWORD PTR [eax],edx
c0013c02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c06:	83 ec 0c             	sub    esp,0xc
c0013c09:	50                   	push   eax
c0013c0a:	e8 7b 05 00 00       	call   c001418a <Device::~Device()>
c0013c0f:	83 c4 10             	add    esp,0x10
c0013c12:	90                   	nop
c0013c13:	83 c4 0c             	add    esp,0xc
c0013c16:	c3                   	ret    
c0013c17:	90                   	nop

c0013c18 <Buzzer::~Buzzer()>:
c0013c18:	83 ec 0c             	sub    esp,0xc
c0013c1b:	83 ec 0c             	sub    esp,0xc
c0013c1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c22:	e8 cd ff ff ff       	call   c0013bf4 <Buzzer::~Buzzer()>
c0013c27:	83 c4 10             	add    esp,0x10
c0013c2a:	83 ec 08             	sub    esp,0x8
c0013c2d:	68 5c 01 00 00       	push   0x15c
c0013c32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c36:	e8 77 f1 ff ff       	call   c0012db2 <operator delete(void*, unsigned long)>
c0013c3b:	83 c4 10             	add    esp,0x10
c0013c3e:	83 c4 0c             	add    esp,0xc
c0013c41:	c3                   	ret    

c0013c42 <Buzzer::stop()>:
c0013c42:	83 ec 14             	sub    esp,0x14
c0013c45:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c49:	8b 10                	mov    edx,DWORD PTR [eax]
c0013c4b:	6a 00                	push   0x0
c0013c4d:	50                   	push   eax
c0013c4e:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013c51:	83 c4 1c             	add    esp,0x1c
c0013c54:	c3                   	ret    

c0013c55 <beepThread(void*)>:
c0013c55:	53                   	push   ebx
c0013c56:	83 ec 08             	sub    esp,0x8
c0013c59:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013c5d:	e8 07 a1 00 00       	call   c001dd69 <unlockScheduler()>
c0013c62:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013c67:	52                   	push   edx
c0013c68:	52                   	push   edx
c0013c69:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013c6f:	52                   	push   edx
c0013c70:	50                   	push   eax
c0013c71:	e8 40 a6 00 00       	call   c001e2b6 <nanoSleep(unsigned long long)>
c0013c76:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013c79:	e8 c4 ff ff ff       	call   c0013c42 <Buzzer::stop()>
c0013c7e:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013c86:	83 c4 18             	add    esp,0x18
c0013c89:	5b                   	pop    ebx
c0013c8a:	e9 6d a5 00 00       	jmp    c001e1fc <blockTask(TaskState)>
c0013c8f:	90                   	nop

c0013c90 <Buzzer::beep(int, int, bool)>:
c0013c90:	57                   	push   edi
c0013c91:	56                   	push   esi
c0013c92:	53                   	push   ebx
c0013c93:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013c97:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013c9b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013c9f:	52                   	push   edx
c0013ca0:	52                   	push   edx
c0013ca1:	8b 06                	mov    eax,DWORD PTR [esi]
c0013ca3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ca7:	56                   	push   esi
c0013ca8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013cab:	83 c4 10             	add    esp,0x10
c0013cae:	89 f8                	mov    eax,edi
c0013cb0:	84 c0                	test   al,al
c0013cb2:	74 1f                	je     c0013cd3 <Buzzer::beep(int, int, bool)+0x43>
c0013cb4:	50                   	push   eax
c0013cb5:	50                   	push   eax
c0013cb6:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013cbc:	99                   	cdq    
c0013cbd:	52                   	push   edx
c0013cbe:	50                   	push   eax
c0013cbf:	e8 f2 a5 00 00       	call   c001e2b6 <nanoSleep(unsigned long long)>
c0013cc4:	83 c4 10             	add    esp,0x10
c0013cc7:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013ccb:	5b                   	pop    ebx
c0013ccc:	5e                   	pop    esi
c0013ccd:	5f                   	pop    edi
c0013cce:	e9 6f ff ff ff       	jmp    c0013c42 <Buzzer::stop()>
c0013cd3:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013cd9:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0013cde:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013ce6:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013cea:	c7 44 24 14 55 3c 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013c55
c0013cf2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013cf6:	5b                   	pop    ebx
c0013cf7:	5e                   	pop    esi
c0013cf8:	5f                   	pop    edi
c0013cf9:	e9 9a a1 00 00       	jmp    c001de98 <Process::createThread(void (*)(void*), void*, int)>

c0013cfe <User::loadClockSettings(int)>:
c0013cfe:	53                   	push   ebx
c0013cff:	83 ec 14             	sub    esp,0x14
c0013d02:	68 14 01 00 00       	push   0x114
c0013d07:	e8 34 bb ff ff       	call   c000f840 <malloc>
c0013d0c:	83 c4 0c             	add    esp,0xc
c0013d0f:	89 c3                	mov    ebx,eax
c0013d11:	ff 35 f4 18 03 c0    	push   DWORD PTR ds:0xc00318f4
c0013d17:	68 18 ab 02 c0       	push   0xc002ab18
c0013d1c:	50                   	push   eax
c0013d1d:	e8 c8 f6 ff ff       	call   c00133ea <File::File(char const*, Process*)>
c0013d22:	58                   	pop    eax
c0013d23:	5a                   	pop    edx
c0013d24:	6a 01                	push   0x1
c0013d26:	53                   	push   ebx
c0013d27:	e8 22 f7 ff ff       	call   c001344e <File::open(FileOpenMode)>
c0013d2c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013d2f:	e8 78 f7 ff ff       	call   c00134ac <File::close()>
c0013d34:	83 c4 10             	add    esp,0x10
c0013d37:	85 db                	test   ebx,ebx
c0013d39:	74 0f                	je     c0013d4a <User::loadClockSettings(int)+0x4c>
c0013d3b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d3d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013d41:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013d44:	83 c4 08             	add    esp,0x8
c0013d47:	5b                   	pop    ebx
c0013d48:	ff e0                	jmp    eax
c0013d4a:	83 c4 08             	add    esp,0x8
c0013d4d:	5b                   	pop    ebx
c0013d4e:	c3                   	ret    
c0013d4f:	90                   	nop

c0013d50 <Clock::Clock(char const*)>:
c0013d50:	83 ec 0c             	sub    esp,0xc
c0013d53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d57:	83 ec 08             	sub    esp,0x8
c0013d5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d5e:	50                   	push   eax
c0013d5f:	e8 44 07 00 00       	call   c00144a8 <Device::Device(char const*)>
c0013d64:	83 c4 10             	add    esp,0x10
c0013d67:	ba 40 ab 02 c0       	mov    edx,0xc002ab40
c0013d6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d70:	89 10                	mov    DWORD PTR [eax],edx
c0013d72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d76:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013d80:	90                   	nop
c0013d81:	83 c4 0c             	add    esp,0xc
c0013d84:	c3                   	ret    
c0013d85:	90                   	nop

c0013d86 <Clock::~Clock()>:
c0013d86:	83 ec 0c             	sub    esp,0xc
c0013d89:	ba 40 ab 02 c0       	mov    edx,0xc002ab40
c0013d8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d92:	89 10                	mov    DWORD PTR [eax],edx
c0013d94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d98:	83 ec 0c             	sub    esp,0xc
c0013d9b:	50                   	push   eax
c0013d9c:	e8 e9 03 00 00       	call   c001418a <Device::~Device()>
c0013da1:	83 c4 10             	add    esp,0x10
c0013da4:	90                   	nop
c0013da5:	83 c4 0c             	add    esp,0xc
c0013da8:	c3                   	ret    
c0013da9:	90                   	nop

c0013daa <Clock::~Clock()>:
c0013daa:	83 ec 0c             	sub    esp,0xc
c0013dad:	83 ec 0c             	sub    esp,0xc
c0013db0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013db4:	e8 cd ff ff ff       	call   c0013d86 <Clock::~Clock()>
c0013db9:	83 c4 10             	add    esp,0x10
c0013dbc:	83 ec 08             	sub    esp,0x8
c0013dbf:	68 58 01 00 00       	push   0x158
c0013dc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013dc8:	e8 e5 ef ff ff       	call   c0012db2 <operator delete(void*, unsigned long)>
c0013dcd:	83 c4 10             	add    esp,0x10
c0013dd0:	83 c4 0c             	add    esp,0xc
c0013dd3:	c3                   	ret    

c0013dd4 <Clock::timeInSecondsLocal()>:
c0013dd4:	53                   	push   ebx
c0013dd5:	83 ec 14             	sub    esp,0x14
c0013dd8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013ddc:	8b 10                	mov    edx,DWORD PTR [eax]
c0013dde:	50                   	push   eax
c0013ddf:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013de2:	0f b6 0d 18 e5 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e518
c0013de9:	03 0d 1c e5 02 c0    	add    ecx,DWORD PTR ds:0xc002e51c
c0013def:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013df5:	89 cb                	mov    ebx,ecx
c0013df7:	c1 fb 1f             	sar    ebx,0x1f
c0013dfa:	01 c8                	add    eax,ecx
c0013dfc:	11 da                	adc    edx,ebx
c0013dfe:	83 c4 10             	add    esp,0x10
c0013e01:	31 c9                	xor    ecx,ecx
c0013e03:	80 3d 19 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e519,0x0
c0013e0a:	74 05                	je     c0013e11 <Clock::timeInSecondsLocal()+0x3d>
c0013e0c:	b9 08 07 00 00       	mov    ecx,0x708
c0013e11:	31 db                	xor    ebx,ebx
c0013e13:	01 c8                	add    eax,ecx
c0013e15:	11 da                	adc    edx,ebx
c0013e17:	83 c4 08             	add    esp,0x8
c0013e1a:	5b                   	pop    ebx
c0013e1b:	c3                   	ret    

c0013e1c <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013e1c:	57                   	push   edi
c0013e1d:	56                   	push   esi
c0013e1e:	53                   	push   ebx
c0013e1f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013e23:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013e27:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013e29:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013e2d:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013e30:	0f b6 05 18 e5 02 c0 	movzx  eax,BYTE PTR ds:0xc002e518
c0013e37:	03 05 1c e5 02 c0    	add    eax,DWORD PTR ds:0xc002e51c
c0013e3d:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013e43:	99                   	cdq    
c0013e44:	29 c6                	sub    esi,eax
c0013e46:	19 d7                	sbb    edi,edx
c0013e48:	89 f0                	mov    eax,esi
c0013e4a:	89 fa                	mov    edx,edi
c0013e4c:	31 f6                	xor    esi,esi
c0013e4e:	80 3d 19 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e519,0x0
c0013e55:	74 05                	je     c0013e5c <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013e57:	be 08 07 00 00       	mov    esi,0x708
c0013e5c:	31 ff                	xor    edi,edi
c0013e5e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013e62:	29 f0                	sub    eax,esi
c0013e64:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013e68:	19 fa                	sbb    edx,edi
c0013e6a:	89 d8                	mov    eax,ebx
c0013e6c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013e70:	5b                   	pop    ebx
c0013e71:	5e                   	pop    esi
c0013e72:	5f                   	pop    edi
c0013e73:	ff e0                	jmp    eax

c0013e75 <datetimeToSeconds(datetime_t)>:
c0013e75:	55                   	push   ebp
c0013e76:	57                   	push   edi
c0013e77:	56                   	push   esi
c0013e78:	53                   	push   ebx
c0013e79:	83 ec 14             	sub    esp,0x14
c0013e7c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013e80:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013e84:	89 d3                	mov    ebx,edx
c0013e86:	0f b6 c6             	movzx  eax,dh
c0013e89:	c1 eb 10             	shr    ebx,0x10
c0013e8c:	48                   	dec    eax
c0013e8d:	66 81 eb 6c 07       	sub    bx,0x76c
c0013e92:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013e96:	0f b6 f5             	movzx  esi,ch
c0013e99:	89 cf                	mov    edi,ecx
c0013e9b:	6b f6 3c             	imul   esi,esi,0x3c
c0013e9e:	c1 ef 10             	shr    edi,0x10
c0013ea1:	0f b6 c9             	movzx  ecx,cl
c0013ea4:	89 f8                	mov    eax,edi
c0013ea6:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013eac:	0f b6 f8             	movzx  edi,al
c0013eaf:	0f b6 d2             	movzx  edx,dl
c0013eb2:	01 fe                	add    esi,edi
c0013eb4:	01 f1                	add    ecx,esi
c0013eb6:	0f b7 f3             	movzx  esi,bx
c0013eb9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013ebd:	c1 f9 1f             	sar    ecx,0x1f
c0013ec0:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013ec5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013ec9:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013ece:	8b 0c 8d 80 ab 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5480]
c0013ed5:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013ed9:	76 29                	jbe    c0013f04 <datetimeToSeconds(datetime_t)+0x8f>
c0013edb:	f6 c3 03             	test   bl,0x3
c0013ede:	75 24                	jne    c0013f04 <datetimeToSeconds(datetime_t)+0x8f>
c0013ee0:	31 d2                	xor    edx,edx
c0013ee2:	bf 64 00 00 00       	mov    edi,0x64
c0013ee7:	89 d8                	mov    eax,ebx
c0013ee9:	66 f7 f7             	div    di
c0013eec:	66 85 d2             	test   dx,dx
c0013eef:	75 12                	jne    c0013f03 <datetimeToSeconds(datetime_t)+0x8e>
c0013ef1:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013ef7:	bf 90 01 00 00       	mov    edi,0x190
c0013efc:	99                   	cdq    
c0013efd:	f7 ff                	idiv   edi
c0013eff:	85 d2                	test   edx,edx
c0013f01:	75 01                	jne    c0013f04 <datetimeToSeconds(datetime_t)+0x8f>
c0013f03:	41                   	inc    ecx
c0013f04:	66 83 fb 46          	cmp    bx,0x46
c0013f08:	76 45                	jbe    c0013f4f <datetimeToSeconds(datetime_t)+0xda>
c0013f0a:	bb 46 00 00 00       	mov    ebx,0x46
c0013f0f:	bf 64 00 00 00       	mov    edi,0x64
c0013f14:	bd 90 01 00 00       	mov    ebp,0x190
c0013f19:	b8 6d 01 00 00       	mov    eax,0x16d
c0013f1e:	f6 c3 03             	test   bl,0x3
c0013f21:	75 23                	jne    c0013f46 <datetimeToSeconds(datetime_t)+0xd1>
c0013f23:	89 d8                	mov    eax,ebx
c0013f25:	99                   	cdq    
c0013f26:	f7 ff                	idiv   edi
c0013f28:	b8 6e 01 00 00       	mov    eax,0x16e
c0013f2d:	85 d2                	test   edx,edx
c0013f2f:	75 15                	jne    c0013f46 <datetimeToSeconds(datetime_t)+0xd1>
c0013f31:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013f37:	99                   	cdq    
c0013f38:	f7 fd                	idiv   ebp
c0013f3a:	83 fa 01             	cmp    edx,0x1
c0013f3d:	19 c0                	sbb    eax,eax
c0013f3f:	f7 d0                	not    eax
c0013f41:	05 6e 01 00 00       	add    eax,0x16e
c0013f46:	01 c1                	add    ecx,eax
c0013f48:	43                   	inc    ebx
c0013f49:	39 f3                	cmp    ebx,esi
c0013f4b:	7c cc                	jl     c0013f19 <datetimeToSeconds(datetime_t)+0xa4>
c0013f4d:	eb 35                	jmp    c0013f84 <datetimeToSeconds(datetime_t)+0x10f>
c0013f4f:	74 33                	je     c0013f84 <datetimeToSeconds(datetime_t)+0x10f>
c0013f51:	b8 45 00 00 00       	mov    eax,0x45
c0013f56:	89 c2                	mov    edx,eax
c0013f58:	83 e2 03             	and    edx,0x3
c0013f5b:	39 f0                	cmp    eax,esi
c0013f5d:	7e 0f                	jle    c0013f6e <datetimeToSeconds(datetime_t)+0xf9>
c0013f5f:	83 fa 01             	cmp    edx,0x1
c0013f62:	19 d2                	sbb    edx,edx
c0013f64:	48                   	dec    eax
c0013f65:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013f6c:	eb e8                	jmp    c0013f56 <datetimeToSeconds(datetime_t)+0xe1>
c0013f6e:	b8 6d 01 00 00       	mov    eax,0x16d
c0013f73:	85 d2                	test   edx,edx
c0013f75:	75 0b                	jne    c0013f82 <datetimeToSeconds(datetime_t)+0x10d>
c0013f77:	66 83 fb 01          	cmp    bx,0x1
c0013f7b:	19 c0                	sbb    eax,eax
c0013f7d:	05 6e 01 00 00       	add    eax,0x16e
c0013f82:	29 c1                	sub    ecx,eax
c0013f84:	b8 80 51 01 00       	mov    eax,0x15180
c0013f89:	f7 e9                	imul   ecx
c0013f8b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013f8f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013f93:	83 c4 14             	add    esp,0x14
c0013f96:	5b                   	pop    ebx
c0013f97:	5e                   	pop    esi
c0013f98:	5f                   	pop    edi
c0013f99:	5d                   	pop    ebp
c0013f9a:	c3                   	ret    
c0013f9b:	90                   	nop

c0013f9c <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013f9c:	57                   	push   edi
c0013f9d:	56                   	push   esi
c0013f9e:	53                   	push   ebx
c0013f9f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013fa3:	8b 06                	mov    eax,DWORD PTR [esi]
c0013fa5:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013fa8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013fac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013fb0:	e8 c0 fe ff ff       	call   c0013e75 <datetimeToSeconds(datetime_t)>
c0013fb5:	59                   	pop    ecx
c0013fb6:	0f b6 0d 18 e5 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e518
c0013fbd:	5b                   	pop    ebx
c0013fbe:	03 0d 1c e5 02 c0    	add    ecx,DWORD PTR ds:0xc002e51c
c0013fc4:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013fca:	89 cb                	mov    ebx,ecx
c0013fcc:	c1 fb 1f             	sar    ebx,0x1f
c0013fcf:	29 c8                	sub    eax,ecx
c0013fd1:	19 da                	sbb    edx,ebx
c0013fd3:	31 c9                	xor    ecx,ecx
c0013fd5:	80 3d 19 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e519,0x0
c0013fdc:	74 05                	je     c0013fe3 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013fde:	b9 08 07 00 00       	mov    ecx,0x708
c0013fe3:	31 db                	xor    ebx,ebx
c0013fe5:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013fe9:	29 c8                	sub    eax,ecx
c0013feb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013fef:	19 da                	sbb    edx,ebx
c0013ff1:	89 f8                	mov    eax,edi
c0013ff3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013ff7:	5b                   	pop    ebx
c0013ff8:	5e                   	pop    esi
c0013ff9:	5f                   	pop    edi
c0013ffa:	ff e0                	jmp    eax

c0013ffc <secondsToDatetime(unsigned long long)>:
c0013ffc:	55                   	push   ebp
c0013ffd:	57                   	push   edi
c0013ffe:	56                   	push   esi
c0013fff:	53                   	push   ebx
c0014000:	83 ec 1c             	sub    esp,0x1c
c0014003:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0014007:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001400b:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001400f:	6a 00                	push   0x0
c0014011:	68 80 51 01 00       	push   0x15180
c0014016:	55                   	push   ebp
c0014017:	57                   	push   edi
c0014018:	e8 4f 29 01 00       	call   c002696c <__udivdi3>
c001401d:	83 c4 10             	add    esp,0x10
c0014020:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0014026:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001402a:	6a 00                	push   0x0
c001402c:	68 80 51 01 00       	push   0x15180
c0014031:	55                   	push   ebp
c0014032:	57                   	push   edi
c0014033:	bf 10 0e 00 00       	mov    edi,0xe10
c0014038:	e8 2f 2a 01 00       	call   c0026a6c <__umoddi3>
c001403d:	83 c4 10             	add    esp,0x10
c0014040:	99                   	cdq    
c0014041:	f7 ff                	idiv   edi
c0014043:	bf 3c 00 00 00       	mov    edi,0x3c
c0014048:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c001404b:	89 d0                	mov    eax,edx
c001404d:	99                   	cdq    
c001404e:	f7 ff                	idiv   edi
c0014050:	85 db                	test   ebx,ebx
c0014052:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0014055:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0014058:	79 11                	jns    c001406b <secondsToDatetime(unsigned long long)+0x6f>
c001405a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001405e:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0014064:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0014069:	eb 07                	jmp    c0014072 <secondsToDatetime(unsigned long long)+0x76>
c001406b:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0014070:	89 d8                	mov    eax,ebx
c0014072:	bf b4 05 00 00       	mov    edi,0x5b4
c0014077:	99                   	cdq    
c0014078:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c001407d:	f7 f9                	idiv   ecx
c001407f:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0014084:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014088:	31 d2                	xor    edx,edx
c001408a:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0014092:	01 c3                	add    ebx,eax
c0014094:	89 d8                	mov    eax,ebx
c0014096:	f7 f1                	div    ecx
c0014098:	31 d2                	xor    edx,edx
c001409a:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c001409d:	89 d8                	mov    eax,ebx
c001409f:	f7 f7                	div    edi
c00140a1:	31 d2                	xor    edx,edx
c00140a3:	29 c1                	sub    ecx,eax
c00140a5:	89 d8                	mov    eax,ebx
c00140a7:	f7 f5                	div    ebp
c00140a9:	bd 6d 01 00 00       	mov    ebp,0x16d
c00140ae:	29 c1                	sub    ecx,eax
c00140b0:	31 d2                	xor    edx,edx
c00140b2:	89 c8                	mov    eax,ecx
c00140b4:	f7 f5                	div    ebp
c00140b6:	bd 94 8e 00 00       	mov    ebp,0x8e94
c00140bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00140bf:	31 d2                	xor    edx,edx
c00140c1:	89 c8                	mov    eax,ecx
c00140c3:	f7 f5                	div    ebp
c00140c5:	31 d2                	xor    edx,edx
c00140c7:	01 c3                	add    ebx,eax
c00140c9:	89 c8                	mov    eax,ecx
c00140cb:	f7 f7                	div    edi
c00140cd:	bf 99 00 00 00       	mov    edi,0x99
c00140d2:	29 c3                	sub    ebx,eax
c00140d4:	31 d2                	xor    edx,edx
c00140d6:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c00140de:	29 c3                	sub    ebx,eax
c00140e0:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00140e3:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c00140e6:	bb 05 00 00 00       	mov    ebx,0x5
c00140eb:	83 c1 02             	add    ecx,0x2
c00140ee:	89 c8                	mov    eax,ecx
c00140f0:	f7 f7                	div    edi
c00140f2:	31 d2                	xor    edx,edx
c00140f4:	89 c7                	mov    edi,eax
c00140f6:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c00140fc:	83 c0 02             	add    eax,0x2
c00140ff:	f7 f3                	div    ebx
c0014101:	89 eb                	mov    ebx,ebp
c0014103:	29 c3                	sub    ebx,eax
c0014105:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c001410b:	88 1e                	mov    BYTE PTR [esi],bl
c001410d:	19 c0                	sbb    eax,eax
c001410f:	31 d2                	xor    edx,edx
c0014111:	83 e0 0c             	and    eax,0xc
c0014114:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0014118:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0014120:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0014124:	83 f9 01             	cmp    ecx,0x1
c0014127:	0f 96 c2             	setbe  dl
c001412a:	41                   	inc    ecx
c001412b:	01 d0                	add    eax,edx
c001412d:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0014130:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0014134:	83 c4 1c             	add    esp,0x1c
c0014137:	89 f0                	mov    eax,esi
c0014139:	5b                   	pop    ebx
c001413a:	5e                   	pop    esi
c001413b:	5f                   	pop    edi
c001413c:	5d                   	pop    ebp
c001413d:	c2 04 00             	ret    0x4

c0014140 <Clock::timeInDatetimeLocal()>:
c0014140:	53                   	push   ebx
c0014141:	83 ec 14             	sub    esp,0x14
c0014144:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014148:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001414c:	e8 83 fc ff ff       	call   c0013dd4 <Clock::timeInSecondsLocal()>
c0014151:	83 c4 0c             	add    esp,0xc
c0014154:	52                   	push   edx
c0014155:	50                   	push   eax
c0014156:	53                   	push   ebx
c0014157:	e8 a0 fe ff ff       	call   c0013ffc <secondsToDatetime(unsigned long long)>
c001415c:	89 d8                	mov    eax,ebx
c001415e:	83 c4 14             	add    esp,0x14
c0014161:	5b                   	pop    ebx
c0014162:	c2 04 00             	ret    0x4
c0014165:	90                   	nop

c0014166 <Device::hibernate()>:
c0014166:	c3                   	ret    
c0014167:	90                   	nop

c0014168 <Device::wake()>:
c0014168:	c3                   	ret    
c0014169:	90                   	nop

c001416a <Device::detect()>:
c001416a:	c3                   	ret    
c001416b:	90                   	nop

c001416c <Device::disableLegacy()>:
c001416c:	c3                   	ret    
c001416d:	90                   	nop

c001416e <Device::powerSaving(PowerSavingLevel)>:
c001416e:	c3                   	ret    
c001416f:	90                   	nop

c0014170 <DriverlessDevice::close(int, int, void*)>:
c0014170:	31 c0                	xor    eax,eax
c0014172:	c3                   	ret    
c0014173:	90                   	nop

c0014174 <DriverlessDevice::detect()>:
c0014174:	c3                   	ret    
c0014175:	90                   	nop

c0014176 <DriverlessDevice::open(int, int, void*)>:
c0014176:	83 ec 18             	sub    esp,0x18
c0014179:	68 b0 ab 02 c0       	push   0xc002abb0
c001417e:	e8 ea 63 00 00       	call   c001a56d <Krnl::panic(char const*)>
c0014183:	83 c8 ff             	or     eax,0xffffffff
c0014186:	83 c4 1c             	add    esp,0x1c
c0014189:	c3                   	ret    

c001418a <Device::~Device()>:
c001418a:	ba d8 ab 02 c0       	mov    edx,0xc002abd8
c001418f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014193:	89 10                	mov    DWORD PTR [eax],edx
c0014195:	90                   	nop
c0014196:	c3                   	ret    
c0014197:	90                   	nop

c0014198 <Device::~Device()>:
c0014198:	83 ec 0c             	sub    esp,0xc
c001419b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001419f:	e8 e6 ff ff ff       	call   c001418a <Device::~Device()>
c00141a4:	83 c4 04             	add    esp,0x4
c00141a7:	83 ec 08             	sub    esp,0x8
c00141aa:	68 58 01 00 00       	push   0x158
c00141af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00141b3:	e8 fa eb ff ff       	call   c0012db2 <operator delete(void*, unsigned long)>
c00141b8:	83 c4 10             	add    esp,0x10
c00141bb:	83 c4 0c             	add    esp,0xc
c00141be:	c3                   	ret    
c00141bf:	90                   	nop

c00141c0 <Device::findAndLoadDriver()>:
c00141c0:	c3                   	ret    
c00141c1:	90                   	nop

c00141c2 <Device::preOpenPCI(PCIDeviceInfo)>:
c00141c2:	57                   	push   edi
c00141c3:	b9 09 00 00 00       	mov    ecx,0x9
c00141c8:	56                   	push   esi
c00141c9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00141cd:	8d 74 24 10          	lea    esi,[esp+0x10]
c00141d1:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c00141db:	81 c7 18 01 00 00    	add    edi,0x118
c00141e1:	fc                   	cld    
c00141e2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00141e4:	5e                   	pop    esi
c00141e5:	5f                   	pop    edi
c00141e6:	c3                   	ret    
c00141e7:	90                   	nop

c00141e8 <Device::preOpenACPI(void*, char*, char*)>:
c00141e8:	56                   	push   esi
c00141e9:	53                   	push   ebx
c00141ea:	83 ec 08             	sub    esp,0x8
c00141ed:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00141f1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00141f5:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c00141ff:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014203:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c0014209:	6a 1e                	push   0x1e
c001420b:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0014211:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014215:	81 c3 3a 01 00 00    	add    ebx,0x13a
c001421b:	50                   	push   eax
c001421c:	e8 23 c5 fe ff       	call   c0000744 <memcpy>
c0014221:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0014225:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0014229:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c0014231:	83 c4 14             	add    esp,0x14
c0014234:	5b                   	pop    ebx
c0014235:	5e                   	pop    esi
c0014236:	e9 09 c5 fe ff       	jmp    c0000744 <memcpy>
c001423b:	90                   	nop

c001423c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001423c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014240:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0014245:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c001424c:	75 0b                	jne    c0014259 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c001424e:	8b 00                	mov    eax,DWORD PTR [eax]
c0014250:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014254:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014257:	eb 1e                	jmp    c0014277 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0014259:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c001425e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014264:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001426a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001426c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014270:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014274:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0014277:	ff e0                	jmp    eax
c0014279:	90                   	nop

c001427a <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c001427a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001427e:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0014283:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c001428a:	75 0b                	jne    c0014297 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c001428c:	8b 00                	mov    eax,DWORD PTR [eax]
c001428e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014292:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0014295:	eb 1e                	jmp    c00142b5 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0014297:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c001429c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00142a2:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00142a8:	8b 08                	mov    ecx,DWORD PTR [eax]
c00142aa:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00142ae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00142b2:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c00142b5:	ff e0                	jmp    eax
c00142b7:	90                   	nop

c00142b8 <Device::addChild(Device*)>:
c00142b8:	53                   	push   ebx
c00142b9:	83 ec 08             	sub    esp,0x8
c00142bc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00142c0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00142c4:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c00142ca:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c00142d0:	8b 13                	mov    edx,DWORD PTR [ebx]
c00142d2:	85 d2                	test   edx,edx
c00142d4:	74 04                	je     c00142da <Device::addChild(Device*)+0x22>
c00142d6:	89 d3                	mov    ebx,edx
c00142d8:	eb f6                	jmp    c00142d0 <Device::addChild(Device*)+0x18>
c00142da:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00142dd:	83 ec 0c             	sub    esp,0xc
c00142e0:	6a 08                	push   0x8
c00142e2:	e8 59 b5 ff ff       	call   c000f840 <malloc>
c00142e7:	89 03                	mov    DWORD PTR [ebx],eax
c00142e9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00142ef:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00142f6:	83 c4 18             	add    esp,0x18
c00142f9:	5b                   	pop    ebx
c00142fa:	c3                   	ret    
c00142fb:	90                   	nop

c00142fc <Device::removeAllChildren()>:
c00142fc:	56                   	push   esi
c00142fd:	53                   	push   ebx
c00142fe:	52                   	push   edx
c00142ff:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014303:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0014309:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001430c:	74 17                	je     c0014325 <Device::removeAllChildren()+0x29>
c001430e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0014311:	85 c0                	test   eax,eax
c0014313:	74 0c                	je     c0014321 <Device::removeAllChildren()+0x25>
c0014315:	83 ec 0c             	sub    esp,0xc
c0014318:	8b 10                	mov    edx,DWORD PTR [eax]
c001431a:	50                   	push   eax
c001431b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001431e:	83 c4 10             	add    esp,0x10
c0014321:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014323:	eb e4                	jmp    c0014309 <Device::removeAllChildren()+0xd>
c0014325:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001432b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014331:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0014337:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001433e:	58                   	pop    eax
c001433f:	5b                   	pop    ebx
c0014340:	5e                   	pop    esi
c0014341:	c3                   	ret    

c0014342 <Device::hibernateAll()>:
c0014342:	53                   	push   ebx
c0014343:	83 ec 14             	sub    esp,0x14
c0014346:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001434a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001434c:	53                   	push   ebx
c001434d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0014350:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014356:	83 c4 10             	add    esp,0x10
c0014359:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001435c:	74 0f                	je     c001436d <Device::hibernateAll()+0x2b>
c001435e:	83 ec 0c             	sub    esp,0xc
c0014361:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014364:	e8 d9 ff ff ff       	call   c0014342 <Device::hibernateAll()>
c0014369:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001436b:	eb e9                	jmp    c0014356 <Device::hibernateAll()+0x14>
c001436d:	83 c4 08             	add    esp,0x8
c0014370:	5b                   	pop    ebx
c0014371:	c3                   	ret    

c0014372 <Device::wakeAll()>:
c0014372:	53                   	push   ebx
c0014373:	83 ec 14             	sub    esp,0x14
c0014376:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001437a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001437c:	53                   	push   ebx
c001437d:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0014380:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014386:	83 c4 10             	add    esp,0x10
c0014389:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001438c:	74 0f                	je     c001439d <Device::wakeAll()+0x2b>
c001438e:	83 ec 0c             	sub    esp,0xc
c0014391:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014394:	e8 d9 ff ff ff       	call   c0014372 <Device::wakeAll()>
c0014399:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001439b:	eb e9                	jmp    c0014386 <Device::wakeAll()+0x14>
c001439d:	83 c4 08             	add    esp,0x8
c00143a0:	5b                   	pop    ebx
c00143a1:	c3                   	ret    

c00143a2 <Device::detectAll()>:
c00143a2:	53                   	push   ebx
c00143a3:	83 ec 14             	sub    esp,0x14
c00143a6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00143aa:	8b 03                	mov    eax,DWORD PTR [ebx]
c00143ac:	53                   	push   ebx
c00143ad:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00143b0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00143b6:	83 c4 10             	add    esp,0x10
c00143b9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00143bc:	74 0f                	je     c00143cd <Device::detectAll()+0x2b>
c00143be:	83 ec 0c             	sub    esp,0xc
c00143c1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00143c4:	e8 d9 ff ff ff       	call   c00143a2 <Device::detectAll()>
c00143c9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00143cb:	eb e9                	jmp    c00143b6 <Device::detectAll()+0x14>
c00143cd:	83 c4 08             	add    esp,0x8
c00143d0:	5b                   	pop    ebx
c00143d1:	c3                   	ret    

c00143d2 <Device::disableLegacyAll()>:
c00143d2:	53                   	push   ebx
c00143d3:	83 ec 14             	sub    esp,0x14
c00143d6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00143da:	8b 03                	mov    eax,DWORD PTR [ebx]
c00143dc:	53                   	push   ebx
c00143dd:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c00143e0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00143e6:	83 c4 10             	add    esp,0x10
c00143e9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00143ec:	74 0f                	je     c00143fd <Device::disableLegacyAll()+0x2b>
c00143ee:	83 ec 0c             	sub    esp,0xc
c00143f1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00143f4:	e8 d9 ff ff ff       	call   c00143d2 <Device::disableLegacyAll()>
c00143f9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00143fb:	eb e9                	jmp    c00143e6 <Device::disableLegacyAll()+0x14>
c00143fd:	83 c4 08             	add    esp,0x8
c0014400:	5b                   	pop    ebx
c0014401:	c3                   	ret    

c0014402 <Device::loadDriversForAll()>:
c0014402:	53                   	push   ebx
c0014403:	83 ec 08             	sub    esp,0x8
c0014406:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001440a:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014410:	8b 18                	mov    ebx,DWORD PTR [eax]
c0014412:	85 db                	test   ebx,ebx
c0014414:	74 12                	je     c0014428 <Device::loadDriversForAll()+0x26>
c0014416:	83 ec 0c             	sub    esp,0xc
c0014419:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001441c:	e8 e1 ff ff ff       	call   c0014402 <Device::loadDriversForAll()>
c0014421:	83 c4 10             	add    esp,0x10
c0014424:	89 d8                	mov    eax,ebx
c0014426:	eb e8                	jmp    c0014410 <Device::loadDriversForAll()+0xe>
c0014428:	83 c4 08             	add    esp,0x8
c001442b:	5b                   	pop    ebx
c001442c:	c3                   	ret    
c001442d:	90                   	nop

c001442e <Device::closeAll()>:
c001442e:	53                   	push   ebx
c001442f:	83 ec 08             	sub    esp,0x8
c0014432:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014436:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014438:	6a 00                	push   0x0
c001443a:	6a 00                	push   0x0
c001443c:	6a 00                	push   0x0
c001443e:	53                   	push   ebx
c001443f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014442:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014448:	83 c4 10             	add    esp,0x10
c001444b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001444e:	74 0f                	je     c001445f <Device::closeAll()+0x31>
c0014450:	83 ec 0c             	sub    esp,0xc
c0014453:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014456:	e8 d3 ff ff ff       	call   c001442e <Device::closeAll()>
c001445b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001445d:	eb e9                	jmp    c0014448 <Device::closeAll()+0x1a>
c001445f:	83 c4 08             	add    esp,0x8
c0014462:	5b                   	pop    ebx
c0014463:	c3                   	ret    

c0014464 <Device::powerSavingAll(PowerSavingLevel)>:
c0014464:	56                   	push   esi
c0014465:	53                   	push   ebx
c0014466:	83 ec 0c             	sub    esp,0xc
c0014469:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001446d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0014471:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014473:	56                   	push   esi
c0014474:	53                   	push   ebx
c0014475:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0014478:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001447e:	83 c4 10             	add    esp,0x10
c0014481:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014484:	74 0f                	je     c0014495 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0014486:	52                   	push   edx
c0014487:	52                   	push   edx
c0014488:	56                   	push   esi
c0014489:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001448c:	e8 d3 ff ff ff       	call   c0014464 <Device::powerSavingAll(PowerSavingLevel)>
c0014491:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014493:	eb e9                	jmp    c001447e <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0014495:	58                   	pop    eax
c0014496:	5b                   	pop    ebx
c0014497:	5e                   	pop    esi
c0014498:	c3                   	ret    
c0014499:	90                   	nop

c001449a <Device::setName(char const*)>:
c001449a:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c00144a2:	e9 8d c3 fe ff       	jmp    c0000834 <strcpy>
c00144a7:	90                   	nop

c00144a8 <Device::Device(char const*)>:
c00144a8:	83 ec 1c             	sub    esp,0x1c
c00144ab:	ba d8 ab 02 c0       	mov    edx,0xc002abd8
c00144b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144b4:	89 10                	mov    DWORD PTR [eax],edx
c00144b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144ba:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c00144c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144c8:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00144d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144d6:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00144e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144e4:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00144ee:	83 ec 08             	sub    esp,0x8
c00144f1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00144f5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00144f9:	e8 9c ff ff ff       	call   c001449a <Device::setName(char const*)>
c00144fe:	83 c4 10             	add    esp,0x10
c0014501:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0014509:	83 ec 0c             	sub    esp,0xc
c001450c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014510:	e8 2b b3 ff ff       	call   c000f840 <malloc>
c0014515:	83 c4 10             	add    esp,0x10
c0014518:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001451e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014525:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014529:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c001452f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014533:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014539:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001453f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014543:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014549:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014550:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014554:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c001455b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001455f:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0014566:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001456a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0014574:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014578:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0014582:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014586:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0014590:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014594:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c001459e:	90                   	nop
c001459f:	83 c4 1c             	add    esp,0x1c
c00145a2:	c3                   	ret    
c00145a3:	90                   	nop

c00145a4 <Device::getName()>:
c00145a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00145a8:	05 d0 00 00 00       	add    eax,0xd0
c00145ad:	c3                   	ret    

c00145ae <DriverlessDevice::DriverlessDevice(char const*)>:
c00145ae:	83 ec 0c             	sub    esp,0xc
c00145b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145b5:	83 ec 08             	sub    esp,0x8
c00145b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00145bc:	50                   	push   eax
c00145bd:	e8 e6 fe ff ff       	call   c00144a8 <Device::Device(char const*)>
c00145c2:	83 c4 10             	add    esp,0x10
c00145c5:	ba 04 ac 02 c0       	mov    edx,0xc002ac04
c00145ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145ce:	89 10                	mov    DWORD PTR [eax],edx
c00145d0:	90                   	nop
c00145d1:	83 c4 0c             	add    esp,0xc
c00145d4:	c3                   	ret    
c00145d5:	90                   	nop

c00145d6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c00145d6:	57                   	push   edi
c00145d7:	56                   	push   esi
c00145d8:	53                   	push   ebx
c00145d9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00145dd:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00145e1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00145e5:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c00145eb:	75 0c                	jne    c00145f9 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c00145ed:	52                   	push   edx
c00145ee:	52                   	push   edx
c00145ef:	53                   	push   ebx
c00145f0:	56                   	push   esi
c00145f1:	e8 b4 42 01 00       	call   c00288aa <LinkedList<Device>::addElement(Device*)>
c00145f6:	83 c4 10             	add    esp,0x10
c00145f9:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00145ff:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014602:	74 12                	je     c0014616 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0014604:	50                   	push   eax
c0014605:	57                   	push   edi
c0014606:	56                   	push   esi
c0014607:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001460a:	e8 c7 ff ff ff       	call   c00145d6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001460f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014611:	83 c4 10             	add    esp,0x10
c0014614:	eb e9                	jmp    c00145ff <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0014616:	5b                   	pop    ebx
c0014617:	5e                   	pop    esi
c0014618:	5f                   	pop    edi
c0014619:	c3                   	ret    

c001461a <getDevicesOfType(DeviceType)>:
c001461a:	53                   	push   ebx
c001461b:	83 ec 14             	sub    esp,0x14
c001461e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014622:	53                   	push   ebx
c0014623:	e8 5e 43 01 00       	call   c0028986 <LinkedList<Device>::LinkedList()>
c0014628:	83 c4 0c             	add    esp,0xc
c001462b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001462f:	53                   	push   ebx
c0014630:	ff 35 88 e3 02 c0    	push   DWORD PTR ds:0xc002e388
c0014636:	e8 9b ff ff ff       	call   c00145d6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001463b:	89 d8                	mov    eax,ebx
c001463d:	83 c4 18             	add    esp,0x18
c0014640:	5b                   	pop    ebx
c0014641:	c2 04 00             	ret    0x4

c0014644 <HardDiskController::HardDiskController(char const*)>:
c0014644:	83 ec 0c             	sub    esp,0xc
c0014647:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001464b:	83 ec 08             	sub    esp,0x8
c001464e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014652:	50                   	push   eax
c0014653:	e8 50 fe ff ff       	call   c00144a8 <Device::Device(char const*)>
c0014658:	83 c4 10             	add    esp,0x10
c001465b:	ba 30 ac 02 c0       	mov    edx,0xc002ac30
c0014660:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014664:	89 10                	mov    DWORD PTR [eax],edx
c0014666:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001466a:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0014674:	90                   	nop
c0014675:	83 c4 0c             	add    esp,0xc
c0014678:	c3                   	ret    
c0014679:	90                   	nop

c001467a <HardDiskController::~HardDiskController()>:
c001467a:	83 ec 0c             	sub    esp,0xc
c001467d:	ba 30 ac 02 c0       	mov    edx,0xc002ac30
c0014682:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014686:	89 10                	mov    DWORD PTR [eax],edx
c0014688:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001468c:	83 ec 0c             	sub    esp,0xc
c001468f:	50                   	push   eax
c0014690:	e8 f5 fa ff ff       	call   c001418a <Device::~Device()>
c0014695:	83 c4 10             	add    esp,0x10
c0014698:	90                   	nop
c0014699:	83 c4 0c             	add    esp,0xc
c001469c:	c3                   	ret    
c001469d:	90                   	nop

c001469e <HardDiskController::~HardDiskController()>:
c001469e:	83 ec 0c             	sub    esp,0xc
c00146a1:	83 ec 0c             	sub    esp,0xc
c00146a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146a8:	e8 cd ff ff ff       	call   c001467a <HardDiskController::~HardDiskController()>
c00146ad:	83 c4 10             	add    esp,0x10
c00146b0:	83 ec 08             	sub    esp,0x8
c00146b3:	68 58 01 00 00       	push   0x158
c00146b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146bc:	e8 f1 e6 ff ff       	call   c0012db2 <operator delete(void*, unsigned long)>
c00146c1:	83 c4 10             	add    esp,0x10
c00146c4:	83 c4 0c             	add    esp,0xc
c00146c7:	c3                   	ret    

c00146c8 <PhysicalDisk::eject()>:
c00146c8:	83 ec 18             	sub    esp,0x18
c00146cb:	68 54 ac 02 c0       	push   0xc002ac54
c00146d0:	e8 bd e7 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c00146d5:	83 c8 ff             	or     eax,0xffffffff
c00146d8:	83 c4 1c             	add    esp,0x1c
c00146db:	c3                   	ret    

c00146dc <PhysicalDisk::PhysicalDisk(char const*, int)>:
c00146dc:	83 ec 0c             	sub    esp,0xc
c00146df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146e3:	83 ec 08             	sub    esp,0x8
c00146e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146ea:	50                   	push   eax
c00146eb:	e8 b8 fd ff ff       	call   c00144a8 <Device::Device(char const*)>
c00146f0:	83 c4 10             	add    esp,0x10
c00146f3:	ba 84 ac 02 c0       	mov    edx,0xc002ac84
c00146f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146fc:	89 10                	mov    DWORD PTR [eax],edx
c00146fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014702:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0014709:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001470d:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0014714:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014718:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0014722:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014726:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001472a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0014730:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014734:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001473e:	90                   	nop
c001473f:	83 c4 0c             	add    esp,0xc
c0014742:	c3                   	ret    
c0014743:	90                   	nop

c0014744 <PhysicalDisk::startCache()>:
c0014744:	56                   	push   esi
c0014745:	53                   	push   ebx
c0014746:	83 ec 10             	sub    esp,0x10
c0014749:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001474d:	6a 44                	push   0x44
c001474f:	e8 ec b0 ff ff       	call   c000f840 <malloc>
c0014754:	89 c6                	mov    esi,eax
c0014756:	58                   	pop    eax
c0014757:	5a                   	pop    edx
c0014758:	53                   	push   ebx
c0014759:	56                   	push   esi
c001475a:	e8 5f 27 00 00       	call   c0016ebe <VCache::VCache(PhysicalDisk*)>
c001475f:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0014765:	83 c4 14             	add    esp,0x14
c0014768:	5b                   	pop    ebx
c0014769:	5e                   	pop    esi
c001476a:	c3                   	ret    
c001476b:	90                   	nop

c001476c <PhysicalDisk::~PhysicalDisk()>:
c001476c:	83 ec 0c             	sub    esp,0xc
c001476f:	ba 84 ac 02 c0       	mov    edx,0xc002ac84
c0014774:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014778:	89 10                	mov    DWORD PTR [eax],edx
c001477a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001477e:	83 ec 0c             	sub    esp,0xc
c0014781:	50                   	push   eax
c0014782:	e8 03 fa ff ff       	call   c001418a <Device::~Device()>
c0014787:	83 c4 10             	add    esp,0x10
c001478a:	90                   	nop
c001478b:	83 c4 0c             	add    esp,0xc
c001478e:	c3                   	ret    
c001478f:	90                   	nop

c0014790 <PhysicalDisk::~PhysicalDisk()>:
c0014790:	83 ec 0c             	sub    esp,0xc
c0014793:	83 ec 0c             	sub    esp,0xc
c0014796:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001479a:	e8 cd ff ff ff       	call   c001476c <PhysicalDisk::~PhysicalDisk()>
c001479f:	83 c4 10             	add    esp,0x10
c00147a2:	83 ec 08             	sub    esp,0x8
c00147a5:	68 6c 01 00 00       	push   0x16c
c00147aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147ae:	e8 ff e5 ff ff       	call   c0012db2 <operator delete(void*, unsigned long)>
c00147b3:	83 c4 10             	add    esp,0x10
c00147b6:	83 c4 0c             	add    esp,0xc
c00147b9:	c3                   	ret    

c00147ba <FPU::FPU(char const*)>:
c00147ba:	83 ec 0c             	sub    esp,0xc
c00147bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147c1:	83 ec 08             	sub    esp,0x8
c00147c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147c8:	50                   	push   eax
c00147c9:	e8 da fc ff ff       	call   c00144a8 <Device::Device(char const*)>
c00147ce:	83 c4 10             	add    esp,0x10
c00147d1:	ba c8 ac 02 c0       	mov    edx,0xc002acc8
c00147d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147da:	89 10                	mov    DWORD PTR [eax],edx
c00147dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147e0:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c00147ea:	90                   	nop
c00147eb:	83 c4 0c             	add    esp,0xc
c00147ee:	c3                   	ret    
c00147ef:	90                   	nop

c00147f0 <FPU::~FPU()>:
c00147f0:	83 ec 0c             	sub    esp,0xc
c00147f3:	ba c8 ac 02 c0       	mov    edx,0xc002acc8
c00147f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147fc:	89 10                	mov    DWORD PTR [eax],edx
c00147fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014802:	83 ec 0c             	sub    esp,0xc
c0014805:	50                   	push   eax
c0014806:	e8 7f f9 ff ff       	call   c001418a <Device::~Device()>
c001480b:	83 c4 10             	add    esp,0x10
c001480e:	90                   	nop
c001480f:	83 c4 0c             	add    esp,0xc
c0014812:	c3                   	ret    
c0014813:	90                   	nop

c0014814 <FPU::~FPU()>:
c0014814:	83 ec 0c             	sub    esp,0xc
c0014817:	83 ec 0c             	sub    esp,0xc
c001481a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001481e:	e8 cd ff ff ff       	call   c00147f0 <FPU::~FPU()>
c0014823:	83 c4 10             	add    esp,0x10
c0014826:	83 ec 08             	sub    esp,0x8
c0014829:	68 58 01 00 00       	push   0x158
c001482e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014832:	e8 7b e5 ff ff       	call   c0012db2 <operator delete(void*, unsigned long)>
c0014837:	83 c4 10             	add    esp,0x10
c001483a:	83 c4 0c             	add    esp,0xc
c001483d:	c3                   	ret    

c001483e <setupFPU()>:
c001483e:	53                   	push   ebx
c001483f:	83 ec 08             	sub    esp,0x8
c0014842:	8b 15 88 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e388
c0014848:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c001484f:	74 19                	je     c001486a <setupFPU()+0x2c>
c0014851:	83 ec 0c             	sub    esp,0xc
c0014854:	68 58 01 00 00       	push   0x158
c0014859:	e8 e2 af ff ff       	call   c000f840 <malloc>
c001485e:	89 c3                	mov    ebx,eax
c0014860:	89 04 24             	mov    DWORD PTR [esp],eax
c0014863:	e8 92 0c 01 00       	call   c00254fa <AVX::AVX()>
c0014868:	eb 5b                	jmp    c00148c5 <setupFPU()+0x87>
c001486a:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0014870:	84 c0                	test   al,al
c0014872:	79 19                	jns    c001488d <setupFPU()+0x4f>
c0014874:	83 ec 0c             	sub    esp,0xc
c0014877:	68 58 01 00 00       	push   0x158
c001487c:	e8 bf af ff ff       	call   c000f840 <malloc>
c0014881:	89 c3                	mov    ebx,eax
c0014883:	89 04 24             	mov    DWORD PTR [esp],eax
c0014886:	e8 95 0d 01 00       	call   c0025620 <SSE::SSE()>
c001488b:	eb 38                	jmp    c00148c5 <setupFPU()+0x87>
c001488d:	a8 20                	test   al,0x20
c001488f:	74 19                	je     c00148aa <setupFPU()+0x6c>
c0014891:	83 ec 0c             	sub    esp,0xc
c0014894:	68 58 01 00 00       	push   0x158
c0014899:	e8 a2 af ff ff       	call   c000f840 <malloc>
c001489e:	89 c3                	mov    ebx,eax
c00148a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00148a3:	e8 e2 0c 01 00       	call   c002558a <MMX::MMX()>
c00148a8:	eb 1b                	jmp    c00148c5 <setupFPU()+0x87>
c00148aa:	a8 10                	test   al,0x10
c00148ac:	74 1c                	je     c00148ca <setupFPU()+0x8c>
c00148ae:	83 ec 0c             	sub    esp,0xc
c00148b1:	68 58 01 00 00       	push   0x158
c00148b6:	e8 85 af ff ff       	call   c000f840 <malloc>
c00148bb:	89 c3                	mov    ebx,eax
c00148bd:	89 04 24             	mov    DWORD PTR [esp],eax
c00148c0:	e8 e9 0d 01 00       	call   c00256ae <x87::x87()>
c00148c5:	83 c4 10             	add    esp,0x10
c00148c8:	eb 24                	jmp    c00148ee <setupFPU()+0xb0>
c00148ca:	83 e0 ef             	and    eax,0xffffffef
c00148cd:	83 ec 0c             	sub    esp,0xc
c00148d0:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00148d6:	68 b4 ac 02 c0       	push   0xc002acb4
c00148db:	e8 b2 e5 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c00148e0:	0f 20 c0             	mov    eax,cr0
c00148e3:	83 c8 04             	or     eax,0x4
c00148e6:	0f 22 c0             	mov    cr0,eax
c00148e9:	31 db                	xor    ebx,ebx
c00148eb:	83 c4 10             	add    esp,0x10
c00148ee:	89 d8                	mov    eax,ebx
c00148f0:	83 c4 08             	add    esp,0x8
c00148f3:	5b                   	pop    ebx
c00148f4:	c3                   	ret    
c00148f5:	90                   	nop

c00148f6 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c00148f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00148fa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00148fe:	c1 e0 04             	shl    eax,0x4
c0014901:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014905:	8d 50 10             	lea    edx,[eax+0x10]
c0014908:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c001490e:	74 08                	je     c0014918 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0014910:	83 c0 04             	add    eax,0x4
c0014913:	39 d0                	cmp    eax,edx
c0014915:	75 f1                	jne    c0014908 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0014917:	c3                   	ret    
c0014918:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014922:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c001492c:	eb e2                	jmp    c0014910 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c001492e <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c001492e:	57                   	push   edi
c001492f:	31 c0                	xor    eax,eax
c0014931:	56                   	push   esi
c0014932:	53                   	push   ebx
c0014933:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014937:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001493b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001493f:	89 da                	mov    edx,ebx
c0014941:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014945:	c1 e2 04             	shl    edx,0x4
c0014948:	01 ca                	add    edx,ecx
c001494a:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0014952:	74 16                	je     c001496a <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0014954:	40                   	inc    eax
c0014955:	83 f8 04             	cmp    eax,0x4
c0014958:	75 f0                	jne    c001494a <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c001495a:	c7 44 24 10 f8 ac 02 c0 	mov    DWORD PTR [esp+0x10],0xc002acf8
c0014962:	5b                   	pop    ebx
c0014963:	5e                   	pop    esi
c0014964:	5f                   	pop    edi
c0014965:	e9 03 5c 00 00       	jmp    c001a56d <Krnl::panic(char const*)>
c001496a:	8d 04 98             	lea    eax,[eax+ebx*4]
c001496d:	8d 04 81             	lea    eax,[ecx+eax*4]
c0014970:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0014976:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c001497c:	5b                   	pop    ebx
c001497d:	5e                   	pop    esi
c001497e:	5f                   	pop    edi
c001497f:	c3                   	ret    

c0014980 <doubleFault(regs*, void*)>:
c0014980:	55                   	push   ebp
c0014981:	89 e5                	mov    ebp,esp
c0014983:	83 ec 08             	sub    esp,0x8
c0014986:	83 ec 0c             	sub    esp,0xc
c0014989:	68 33 ad 02 c0       	push   0xc002ad33
c001498e:	e8 da 5b 00 00       	call   c001a56d <Krnl::panic(char const*)>
c0014993:	83 c4 10             	add    esp,0x10
c0014996:	90                   	nop
c0014997:	c9                   	leave  
c0014998:	c3                   	ret    
c0014999:	90                   	nop

c001499a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001499a:	56                   	push   esi
c001499b:	53                   	push   ebx
c001499c:	50                   	push   eax
c001499d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00149a1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00149a5:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00149aa:	75 35                	jne    c00149e1 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c00149ac:	8d 43 20             	lea    eax,[ebx+0x20]
c00149af:	31 d2                	xor    edx,edx
c00149b1:	89 c1                	mov    ecx,eax
c00149b3:	c1 e1 04             	shl    ecx,0x4
c00149b6:	01 f1                	add    ecx,esi
c00149b8:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c00149c0:	74 3e                	je     c0014a00 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c00149c2:	42                   	inc    edx
c00149c3:	83 fa 04             	cmp    edx,0x4
c00149c6:	75 f0                	jne    c00149b8 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c00149c8:	83 ec 0c             	sub    esp,0xc
c00149cb:	68 78 ad 02 c0       	push   0xc002ad78
c00149d0:	e8 98 5b 00 00       	call   c001a56d <Krnl::panic(char const*)>
c00149d5:	83 c4 10             	add    esp,0x10
c00149d8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00149dd:	5a                   	pop    edx
c00149de:	5b                   	pop    ebx
c00149df:	5e                   	pop    esi
c00149e0:	c3                   	ret    
c00149e1:	83 ec 0c             	sub    esp,0xc
c00149e4:	56                   	push   esi
c00149e5:	e8 ba fb ff ff       	call   c00145a4 <Device::getName()>
c00149ea:	83 c4 10             	add    esp,0x10
c00149ed:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00149f0:	75 ba                	jne    c00149ac <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00149f2:	83 fb 0f             	cmp    ebx,0xf
c00149f5:	7f 29                	jg     c0014a20 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c00149f7:	0f b6 9b e0 d5 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd2a20]
c00149fe:	eb ac                	jmp    c00149ac <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014a00:	8d 04 82             	lea    eax,[edx+eax*4]
c0014a03:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014a07:	8d 04 86             	lea    eax,[esi+eax*4]
c0014a0a:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014a10:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014a14:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0014a1a:	89 d8                	mov    eax,ebx
c0014a1c:	5a                   	pop    edx
c0014a1d:	5b                   	pop    ebx
c0014a1e:	5e                   	pop    esi
c0014a1f:	c3                   	ret    
c0014a20:	83 ec 0c             	sub    esp,0xc
c0014a23:	68 40 ad 02 c0       	push   0xc002ad40
c0014a28:	e8 40 5b 00 00       	call   c001a56d <Krnl::panic(char const*)>
c0014a2d:	83 c4 10             	add    esp,0x10
c0014a30:	e9 77 ff ff ff       	jmp    c00149ac <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014a35:	90                   	nop

c0014a36 <InterruptController::clearAllHandlers(int, bool)>:
c0014a36:	56                   	push   esi
c0014a37:	53                   	push   ebx
c0014a38:	52                   	push   edx
c0014a39:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014a3d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014a41:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0014a46:	75 61                	jne    c0014aa9 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0014a48:	8d 46 20             	lea    eax,[esi+0x20]
c0014a4b:	c1 e6 04             	shl    esi,0x4
c0014a4e:	c1 e0 04             	shl    eax,0x4
c0014a51:	01 de                	add    esi,ebx
c0014a53:	01 d8                	add    eax,ebx
c0014a55:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014a5f:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014a69:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014a73:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014a7d:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014a87:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014a91:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014a9b:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014aa5:	58                   	pop    eax
c0014aa6:	5b                   	pop    ebx
c0014aa7:	5e                   	pop    esi
c0014aa8:	c3                   	ret    
c0014aa9:	83 ec 0c             	sub    esp,0xc
c0014aac:	53                   	push   ebx
c0014aad:	e8 f2 fa ff ff       	call   c00145a4 <Device::getName()>
c0014ab2:	83 c4 10             	add    esp,0x10
c0014ab5:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014ab8:	75 8e                	jne    c0014a48 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014aba:	83 fe 0f             	cmp    esi,0xf
c0014abd:	7f 09                	jg     c0014ac8 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014abf:	0f b6 b6 e0 d5 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd2a20]
c0014ac6:	eb 80                	jmp    c0014a48 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014ac8:	83 ec 0c             	sub    esp,0xc
c0014acb:	68 b4 ad 02 c0       	push   0xc002adb4
c0014ad0:	e8 98 5a 00 00       	call   c001a56d <Krnl::panic(char const*)>
c0014ad5:	83 c4 10             	add    esp,0x10
c0014ad8:	e9 6b ff ff ff       	jmp    c0014a48 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014add:	90                   	nop

c0014ade <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014ade:	56                   	push   esi
c0014adf:	53                   	push   ebx
c0014ae0:	52                   	push   edx
c0014ae1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014ae5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014ae9:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014aee:	75 3a                	jne    c0014b2a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014af0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014af4:	8d 50 20             	lea    edx,[eax+0x20]
c0014af7:	c1 e2 04             	shl    edx,0x4
c0014afa:	8d 04 16             	lea    eax,[esi+edx*1]
c0014afd:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014b01:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014b07:	74 0b                	je     c0014b14 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014b09:	83 c0 04             	add    eax,0x4
c0014b0c:	39 d0                	cmp    eax,edx
c0014b0e:	75 f1                	jne    c0014b01 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014b10:	58                   	pop    eax
c0014b11:	5b                   	pop    ebx
c0014b12:	5e                   	pop    esi
c0014b13:	c3                   	ret    
c0014b14:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014b1e:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014b28:	eb df                	jmp    c0014b09 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014b2a:	83 ec 0c             	sub    esp,0xc
c0014b2d:	56                   	push   esi
c0014b2e:	e8 71 fa ff ff       	call   c00145a4 <Device::getName()>
c0014b33:	83 c4 10             	add    esp,0x10
c0014b36:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014b39:	75 b5                	jne    c0014af0 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014b3b:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014b40:	7f 11                	jg     c0014b53 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014b42:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014b46:	0f b6 80 e0 d5 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd2a20]
c0014b4d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014b51:	eb 9d                	jmp    c0014af0 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014b53:	83 ec 0c             	sub    esp,0xc
c0014b56:	68 b4 ad 02 c0       	push   0xc002adb4
c0014b5b:	e8 0d 5a 00 00       	call   c001a56d <Krnl::panic(char const*)>
c0014b60:	83 c4 10             	add    esp,0x10
c0014b63:	eb 8b                	jmp    c0014af0 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014b65 <nmiHandler(regs*, void*)>:
c0014b65:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0014b6a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014b6e:	e9 19 a4 ff ff       	jmp    c000ef8c <Computer::handleNMI()>

c0014b73 <int_handler>:
c0014b73:	55                   	push   ebp
c0014b74:	57                   	push   edi
c0014b75:	56                   	push   esi
c0014b76:	53                   	push   ebx
c0014b77:	83 ec 0c             	sub    esp,0xc
c0014b7a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014b7e:	80 3d e4 0e 03 c0 00 	cmp    BYTE PTR ds:0xc0030ee4,0x0
c0014b85:	74 0b                	je     c0014b92 <int_handler+0x1f>
c0014b87:	fa                   	cli    
c0014b88:	f4                   	hlt    
c0014b89:	80 3d e4 0e 03 c0 00 	cmp    BYTE PTR ds:0xc0030ee4,0x0
c0014b90:	75 f5                	jne    c0014b87 <int_handler+0x14>
c0014b92:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0014b97:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014b9a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014ba0:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014ba6:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014ba9:	83 f8 17             	cmp    eax,0x17
c0014bac:	77 13                	ja     c0014bc1 <int_handler+0x4e>
c0014bae:	83 ec 08             	sub    esp,0x8
c0014bb1:	8b 17                	mov    edx,DWORD PTR [edi]
c0014bb3:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014bb6:	0f b6 c0             	movzx  eax,al
c0014bb9:	50                   	push   eax
c0014bba:	57                   	push   edi
c0014bbb:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014bbe:	83 c4 10             	add    esp,0x10
c0014bc1:	83 c3 15             	add    ebx,0x15
c0014bc4:	c1 e3 04             	shl    ebx,0x4
c0014bc7:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014bcb:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014bd2:	31 db                	xor    ebx,ebx
c0014bd4:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014bd8:	85 c0                	test   eax,eax
c0014bda:	74 13                	je     c0014bef <int_handler+0x7c>
c0014bdc:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014bdf:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014be3:	74 1c                	je     c0014c01 <int_handler+0x8e>
c0014be5:	83 ec 08             	sub    esp,0x8
c0014be8:	52                   	push   edx
c0014be9:	56                   	push   esi
c0014bea:	ff d0                	call   eax
c0014bec:	83 c4 10             	add    esp,0x10
c0014bef:	43                   	inc    ebx
c0014bf0:	83 fb 04             	cmp    ebx,0x4
c0014bf3:	75 df                	jne    c0014bd4 <int_handler+0x61>
c0014bf5:	83 c4 0c             	add    esp,0xc
c0014bf8:	31 c0                	xor    eax,eax
c0014bfa:	5b                   	pop    ebx
c0014bfb:	31 d2                	xor    edx,edx
c0014bfd:	5e                   	pop    esi
c0014bfe:	5f                   	pop    edi
c0014bff:	5d                   	pop    ebp
c0014c00:	c3                   	ret    
c0014c01:	83 ec 08             	sub    esp,0x8
c0014c04:	52                   	push   edx
c0014c05:	56                   	push   esi
c0014c06:	ff d0                	call   eax
c0014c08:	83 c4 10             	add    esp,0x10
c0014c0b:	83 c4 0c             	add    esp,0xc
c0014c0e:	5b                   	pop    ebx
c0014c0f:	5e                   	pop    esi
c0014c10:	5f                   	pop    edi
c0014c11:	5d                   	pop    ebp
c0014c12:	c3                   	ret    
c0014c13:	90                   	nop

c0014c14 <InterruptController::InterruptController(char const*)>:
c0014c14:	83 ec 1c             	sub    esp,0x1c
c0014c17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c1b:	83 ec 08             	sub    esp,0x8
c0014c1e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014c22:	50                   	push   eax
c0014c23:	e8 80 f8 ff ff       	call   c00144a8 <Device::Device(char const*)>
c0014c28:	83 c4 10             	add    esp,0x10
c0014c2b:	ba 70 b0 02 c0       	mov    edx,0xc002b070
c0014c30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c34:	89 10                	mov    DWORD PTR [eax],edx
c0014c36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c3a:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014c44:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014c4c:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014c54:	7f 5e                	jg     c0014cb4 <InterruptController::InterruptController(char const*)+0xa0>
c0014c56:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014c5e:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014c63:	7f 49                	jg     c0014cae <InterruptController::InterruptController(char const*)+0x9a>
c0014c65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c69:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014c6d:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014c74:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014c78:	01 ca                	add    edx,ecx
c0014c7a:	83 c2 54             	add    edx,0x54
c0014c7d:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014c85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c89:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014c8d:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014c94:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014c98:	01 ca                	add    edx,ecx
c0014c9a:	81 c2 54 04 00 00    	add    edx,0x454
c0014ca0:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014ca8:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014cac:	eb b0                	jmp    c0014c5e <InterruptController::InterruptController(char const*)+0x4a>
c0014cae:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014cb2:	eb 98                	jmp    c0014c4c <InterruptController::InterruptController(char const*)+0x38>
c0014cb4:	90                   	nop
c0014cb5:	83 c4 1c             	add    esp,0x1c
c0014cb8:	c3                   	ret    
c0014cb9:	90                   	nop

c0014cba <InterruptController::~InterruptController()>:
c0014cba:	83 ec 0c             	sub    esp,0xc
c0014cbd:	ba 70 b0 02 c0       	mov    edx,0xc002b070
c0014cc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014cc6:	89 10                	mov    DWORD PTR [eax],edx
c0014cc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014ccc:	83 ec 0c             	sub    esp,0xc
c0014ccf:	50                   	push   eax
c0014cd0:	e8 b5 f4 ff ff       	call   c001418a <Device::~Device()>
c0014cd5:	83 c4 10             	add    esp,0x10
c0014cd8:	90                   	nop
c0014cd9:	83 c4 0c             	add    esp,0xc
c0014cdc:	c3                   	ret    
c0014cdd:	90                   	nop

c0014cde <InterruptController::~InterruptController()>:
c0014cde:	83 ec 0c             	sub    esp,0xc
c0014ce1:	83 ec 0c             	sub    esp,0xc
c0014ce4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014ce8:	e8 cd ff ff ff       	call   c0014cba <InterruptController::~InterruptController()>
c0014ced:	83 c4 10             	add    esp,0x10
c0014cf0:	83 ec 08             	sub    esp,0x8
c0014cf3:	68 58 21 00 00       	push   0x2158
c0014cf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014cfc:	e8 b1 e0 ff ff       	call   c0012db2 <operator delete(void*, unsigned long)>
c0014d01:	83 c4 10             	add    esp,0x10
c0014d04:	83 c4 0c             	add    esp,0xc
c0014d07:	c3                   	ret    

c0014d08 <displayDebugInfo(regs*)>:
c0014d08:	55                   	push   ebp
c0014d09:	57                   	push   edi
c0014d0a:	56                   	push   esi
c0014d0b:	53                   	push   ebx
c0014d0c:	83 ec 24             	sub    esp,0x24
c0014d0f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014d13:	0f 20 c2             	mov    edx,cr0
c0014d16:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014d1a:	0f 20 d7             	mov    edi,cr2
c0014d1d:	0f 20 de             	mov    esi,cr3
c0014d20:	0f 20 e5             	mov    ebp,cr4
c0014d23:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014d26:	68 ee ad 02 c0       	push   0xc002adee
c0014d2b:	e8 62 e1 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0014d30:	59                   	pop    ecx
c0014d31:	58                   	pop    eax
c0014d32:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014d35:	68 f9 ad 02 c0       	push   0xc002adf9
c0014d3a:	e8 53 e1 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0014d3f:	58                   	pop    eax
c0014d40:	5a                   	pop    edx
c0014d41:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014d44:	68 04 ae 02 c0       	push   0xc002ae04
c0014d49:	e8 44 e1 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0014d4e:	59                   	pop    ecx
c0014d4f:	58                   	pop    eax
c0014d50:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014d53:	68 0f ae 02 c0       	push   0xc002ae0f
c0014d58:	e8 35 e1 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0014d5d:	58                   	pop    eax
c0014d5e:	5a                   	pop    edx
c0014d5f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014d62:	68 1a ae 02 c0       	push   0xc002ae1a
c0014d67:	e8 26 e1 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0014d6c:	59                   	pop    ecx
c0014d6d:	58                   	pop    eax
c0014d6e:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014d71:	68 25 ae 02 c0       	push   0xc002ae25
c0014d76:	e8 17 e1 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0014d7b:	58                   	pop    eax
c0014d7c:	5a                   	pop    edx
c0014d7d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014d80:	68 30 ae 02 c0       	push   0xc002ae30
c0014d85:	e8 08 e1 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0014d8a:	59                   	pop    ecx
c0014d8b:	58                   	pop    eax
c0014d8c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014d8f:	68 3b ae 02 c0       	push   0xc002ae3b
c0014d94:	e8 f9 e0 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0014d99:	58                   	pop    eax
c0014d9a:	5a                   	pop    edx
c0014d9b:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014d9e:	68 46 ae 02 c0       	push   0xc002ae46
c0014da3:	e8 ea e0 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0014da8:	59                   	pop    ecx
c0014da9:	58                   	pop    eax
c0014daa:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014dad:	68 55 ae 02 c0       	push   0xc002ae55
c0014db2:	e8 db e0 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0014db7:	58                   	pop    eax
c0014db8:	5a                   	pop    edx
c0014db9:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014dbc:	68 60 ae 02 c0       	push   0xc002ae60
c0014dc1:	e8 cc e0 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0014dc6:	59                   	pop    ecx
c0014dc7:	58                   	pop    eax
c0014dc8:	57                   	push   edi
c0014dc9:	68 6b ae 02 c0       	push   0xc002ae6b
c0014dce:	e8 bf e0 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0014dd3:	58                   	pop    eax
c0014dd4:	5a                   	pop    edx
c0014dd5:	56                   	push   esi
c0014dd6:	68 76 ae 02 c0       	push   0xc002ae76
c0014ddb:	e8 b2 e0 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0014de0:	59                   	pop    ecx
c0014de1:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0014de6:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014dec:	e8 fc be ff ff       	call   c0010ced <setActiveTerminal(VgaText*)>
c0014df1:	58                   	pop    eax
c0014df2:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014df5:	5a                   	pop    edx
c0014df6:	c1 e0 05             	shl    eax,0x5
c0014df9:	05 40 d3 02 c0       	add    eax,0xc002d340
c0014dfe:	50                   	push   eax
c0014dff:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0014e04:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014e0a:	e8 fd c2 ff ff       	call   c001110c <VgaText::puts(char const*)>
c0014e0f:	59                   	pop    ecx
c0014e10:	58                   	pop    eax
c0014e11:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0014e16:	68 81 ae 02 c0       	push   0xc002ae81
c0014e1b:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014e21:	e8 e6 c2 ff ff       	call   c001110c <VgaText::puts(char const*)>
c0014e26:	58                   	pop    eax
c0014e27:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014e2c:	5a                   	pop    edx
c0014e2d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014e30:	83 c0 0c             	add    eax,0xc
c0014e33:	50                   	push   eax
c0014e34:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0014e39:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014e3f:	e8 c8 c2 ff ff       	call   c001110c <VgaText::puts(char const*)>
c0014e44:	59                   	pop    ecx
c0014e45:	58                   	pop    eax
c0014e46:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0014e4b:	68 8a ae 02 c0       	push   0xc002ae8a
c0014e50:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014e56:	e8 b1 c2 ff ff       	call   c001110c <VgaText::puts(char const*)>
c0014e5b:	58                   	pop    eax
c0014e5c:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0014e61:	5a                   	pop    edx
c0014e62:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014e65:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014e6b:	e8 c2 c2 ff ff       	call   c0011132 <VgaText::putx(unsigned int)>
c0014e70:	59                   	pop    ecx
c0014e71:	58                   	pop    eax
c0014e72:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0014e77:	68 92 ae 02 c0       	push   0xc002ae92
c0014e7c:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014e82:	e8 85 c2 ff ff       	call   c001110c <VgaText::puts(char const*)>
c0014e87:	58                   	pop    eax
c0014e88:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0014e8d:	5a                   	pop    edx
c0014e8e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014e91:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014e97:	e8 96 c2 ff ff       	call   c0011132 <VgaText::putx(unsigned int)>
c0014e9c:	59                   	pop    ecx
c0014e9d:	58                   	pop    eax
c0014e9e:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0014ea3:	68 9a ae 02 c0       	push   0xc002ae9a
c0014ea8:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014eae:	e8 59 c2 ff ff       	call   c001110c <VgaText::puts(char const*)>
c0014eb3:	58                   	pop    eax
c0014eb4:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0014eb9:	5a                   	pop    edx
c0014eba:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014ebd:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014ec3:	e8 6a c2 ff ff       	call   c0011132 <VgaText::putx(unsigned int)>
c0014ec8:	59                   	pop    ecx
c0014ec9:	58                   	pop    eax
c0014eca:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0014ecf:	68 a2 ae 02 c0       	push   0xc002aea2
c0014ed4:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014eda:	e8 2d c2 ff ff       	call   c001110c <VgaText::puts(char const*)>
c0014edf:	58                   	pop    eax
c0014ee0:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0014ee5:	5a                   	pop    edx
c0014ee6:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014ee9:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014eef:	e8 3e c2 ff ff       	call   c0011132 <VgaText::putx(unsigned int)>
c0014ef4:	59                   	pop    ecx
c0014ef5:	58                   	pop    eax
c0014ef6:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0014efb:	68 aa ae 02 c0       	push   0xc002aeaa
c0014f00:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014f06:	e8 01 c2 ff ff       	call   c001110c <VgaText::puts(char const*)>
c0014f0b:	58                   	pop    eax
c0014f0c:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0014f11:	5a                   	pop    edx
c0014f12:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014f15:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014f1b:	e8 12 c2 ff ff       	call   c0011132 <VgaText::putx(unsigned int)>
c0014f20:	59                   	pop    ecx
c0014f21:	58                   	pop    eax
c0014f22:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0014f27:	68 b2 ae 02 c0       	push   0xc002aeb2
c0014f2c:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014f32:	e8 d5 c1 ff ff       	call   c001110c <VgaText::puts(char const*)>
c0014f37:	58                   	pop    eax
c0014f38:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0014f3d:	5a                   	pop    edx
c0014f3e:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014f41:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014f47:	e8 e6 c1 ff ff       	call   c0011132 <VgaText::putx(unsigned int)>
c0014f4c:	59                   	pop    ecx
c0014f4d:	58                   	pop    eax
c0014f4e:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0014f53:	68 ba ae 02 c0       	push   0xc002aeba
c0014f58:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014f5e:	e8 a9 c1 ff ff       	call   c001110c <VgaText::puts(char const*)>
c0014f63:	58                   	pop    eax
c0014f64:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0014f69:	5a                   	pop    edx
c0014f6a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014f6e:	52                   	push   edx
c0014f6f:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014f75:	e8 b8 c1 ff ff       	call   c0011132 <VgaText::putx(unsigned int)>
c0014f7a:	59                   	pop    ecx
c0014f7b:	58                   	pop    eax
c0014f7c:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0014f81:	68 c3 ae 02 c0       	push   0xc002aec3
c0014f86:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014f8c:	e8 7b c1 ff ff       	call   c001110c <VgaText::puts(char const*)>
c0014f91:	58                   	pop    eax
c0014f92:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0014f97:	5a                   	pop    edx
c0014f98:	57                   	push   edi
c0014f99:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014f9f:	e8 8e c1 ff ff       	call   c0011132 <VgaText::putx(unsigned int)>
c0014fa4:	59                   	pop    ecx
c0014fa5:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0014faa:	5f                   	pop    edi
c0014fab:	68 cb ae 02 c0       	push   0xc002aecb
c0014fb0:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014fb6:	e8 51 c1 ff ff       	call   c001110c <VgaText::puts(char const*)>
c0014fbb:	58                   	pop    eax
c0014fbc:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0014fc1:	5a                   	pop    edx
c0014fc2:	56                   	push   esi
c0014fc3:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014fc9:	e8 64 c1 ff ff       	call   c0011132 <VgaText::putx(unsigned int)>
c0014fce:	59                   	pop    ecx
c0014fcf:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0014fd4:	5e                   	pop    esi
c0014fd5:	68 d3 ae 02 c0       	push   0xc002aed3
c0014fda:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014fe0:	e8 27 c1 ff ff       	call   c001110c <VgaText::puts(char const*)>
c0014fe5:	5f                   	pop    edi
c0014fe6:	58                   	pop    eax
c0014fe7:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0014fec:	55                   	push   ebp
c0014fed:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014ff3:	e8 3a c1 ff ff       	call   c0011132 <VgaText::putx(unsigned int)>
c0014ff8:	58                   	pop    eax
c0014ff9:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0014ffe:	5a                   	pop    edx
c0014fff:	68 db ae 02 c0       	push   0xc002aedb
c0015004:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001500a:	e8 fd c0 ff ff       	call   c001110c <VgaText::puts(char const*)>
c001500f:	0f 21 c0             	mov    eax,db0
c0015012:	59                   	pop    ecx
c0015013:	5e                   	pop    esi
c0015014:	50                   	push   eax
c0015015:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001501a:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0015020:	e8 0d c1 ff ff       	call   c0011132 <VgaText::putx(unsigned int)>
c0015025:	5f                   	pop    edi
c0015026:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001502b:	5d                   	pop    ebp
c001502c:	68 e4 ae 02 c0       	push   0xc002aee4
c0015031:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0015037:	e8 d0 c0 ff ff       	call   c001110c <VgaText::puts(char const*)>
c001503c:	0f 21 c8             	mov    eax,db1
c001503f:	5a                   	pop    edx
c0015040:	59                   	pop    ecx
c0015041:	50                   	push   eax
c0015042:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0015047:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001504d:	e8 e0 c0 ff ff       	call   c0011132 <VgaText::putx(unsigned int)>
c0015052:	5e                   	pop    esi
c0015053:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0015058:	5f                   	pop    edi
c0015059:	68 ec ae 02 c0       	push   0xc002aeec
c001505e:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0015064:	e8 a3 c0 ff ff       	call   c001110c <VgaText::puts(char const*)>
c0015069:	0f 21 d0             	mov    eax,db2
c001506c:	5d                   	pop    ebp
c001506d:	5a                   	pop    edx
c001506e:	50                   	push   eax
c001506f:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0015074:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001507a:	e8 b3 c0 ff ff       	call   c0011132 <VgaText::putx(unsigned int)>
c001507f:	59                   	pop    ecx
c0015080:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0015085:	5e                   	pop    esi
c0015086:	68 f4 ae 02 c0       	push   0xc002aef4
c001508b:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0015091:	e8 76 c0 ff ff       	call   c001110c <VgaText::puts(char const*)>
c0015096:	0f 21 d8             	mov    eax,db3
c0015099:	5f                   	pop    edi
c001509a:	5d                   	pop    ebp
c001509b:	50                   	push   eax
c001509c:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c00150a1:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c00150a7:	e8 86 c0 ff ff       	call   c0011132 <VgaText::putx(unsigned int)>
c00150ac:	58                   	pop    eax
c00150ad:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c00150b2:	5a                   	pop    edx
c00150b3:	68 fc ae 02 c0       	push   0xc002aefc
c00150b8:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c00150be:	e8 49 c0 ff ff       	call   c001110c <VgaText::puts(char const*)>
c00150c3:	0f 21 f0             	mov    eax,db6
c00150c6:	59                   	pop    ecx
c00150c7:	5e                   	pop    esi
c00150c8:	50                   	push   eax
c00150c9:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c00150ce:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c00150d4:	e8 59 c0 ff ff       	call   c0011132 <VgaText::putx(unsigned int)>
c00150d9:	5f                   	pop    edi
c00150da:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c00150df:	5d                   	pop    ebp
c00150e0:	68 04 af 02 c0       	push   0xc002af04
c00150e5:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c00150eb:	e8 1c c0 ff ff       	call   c001110c <VgaText::puts(char const*)>
c00150f0:	0f 21 f8             	mov    eax,db7
c00150f3:	5a                   	pop    edx
c00150f4:	59                   	pop    ecx
c00150f5:	50                   	push   eax
c00150f6:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c00150fb:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0015101:	e8 2c c0 ff ff       	call   c0011132 <VgaText::putx(unsigned int)>
c0015106:	5e                   	pop    esi
c0015107:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001510a:	e8 40 85 00 00       	call   c001d64f <Thr::getDriverNameFromAddress(unsigned long)>
c001510f:	83 c4 10             	add    esp,0x10
c0015112:	85 c0                	test   eax,eax
c0015114:	74 7d                	je     c0015193 <displayDebugInfo(regs*)+0x48b>
c0015116:	89 c6                	mov    esi,eax
c0015118:	50                   	push   eax
c0015119:	50                   	push   eax
c001511a:	56                   	push   esi
c001511b:	68 0c af 02 c0       	push   0xc002af0c
c0015120:	e8 6d dd ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0015125:	5a                   	pop    edx
c0015126:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001512b:	59                   	pop    ecx
c001512c:	68 1a af 02 c0       	push   0xc002af1a
c0015131:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0015137:	e8 d0 bf ff ff       	call   c001110c <VgaText::puts(char const*)>
c001513c:	5f                   	pop    edi
c001513d:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0015142:	5d                   	pop    ebp
c0015143:	56                   	push   esi
c0015144:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001514a:	e8 bd bf ff ff       	call   c001110c <VgaText::puts(char const*)>
c001514f:	58                   	pop    eax
c0015150:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0015155:	5a                   	pop    edx
c0015156:	68 26 af 02 c0       	push   0xc002af26
c001515b:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0015161:	e8 a6 bf ff ff       	call   c001110c <VgaText::puts(char const*)>
c0015166:	59                   	pop    ecx
c0015167:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001516c:	8b b8 26 19 00 00    	mov    edi,DWORD PTR [eax+0x1926]
c0015172:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0015175:	e8 0c 85 00 00       	call   c001d686 <Thr::getDriverOffsetFromAddress(unsigned long)>
c001517a:	5b                   	pop    ebx
c001517b:	5d                   	pop    ebp
c001517c:	50                   	push   eax
c001517d:	57                   	push   edi
c001517e:	e8 af bf ff ff       	call   c0011132 <VgaText::putx(unsigned int)>
c0015183:	58                   	pop    eax
c0015184:	5a                   	pop    edx
c0015185:	56                   	push   esi
c0015186:	68 32 af 02 c0       	push   0xc002af32
c001518b:	e8 02 dd ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0015190:	83 c4 10             	add    esp,0x10
c0015193:	fa                   	cli    
c0015194:	f4                   	hlt    
c0015195:	eb fe                	jmp    c0015195 <displayDebugInfo(regs*)+0x48d>

c0015197 <x87EmulHandler(regs*, void*)>:
c0015197:	53                   	push   ebx
c0015198:	83 ec 14             	sub    esp,0x14
c001519b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001519f:	53                   	push   ebx
c00151a0:	e8 83 a8 00 00       	call   c001fa28 <Vm::x87Handler(regs*)>
c00151a5:	83 c4 10             	add    esp,0x10
c00151a8:	84 c0                	test   al,al
c00151aa:	74 05                	je     c00151b1 <x87EmulHandler(regs*, void*)+0x1a>
c00151ac:	83 c4 08             	add    esp,0x8
c00151af:	5b                   	pop    ebx
c00151b0:	c3                   	ret    
c00151b1:	83 ec 0c             	sub    esp,0xc
c00151b4:	68 42 af 02 c0       	push   0xc002af42
c00151b9:	e8 d4 dc ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c00151be:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00151c1:	e8 42 fb ff ff       	call   c0014d08 <displayDebugInfo(regs*)>

c00151c6 <gpFault(regs*, void*)>:
c00151c6:	53                   	push   ebx
c00151c7:	83 ec 14             	sub    esp,0x14
c00151ca:	c7 05 38 e5 02 c0 77 ed 01 c0 	mov    DWORD PTR ds:0xc002e538,0xc001ed77
c00151d4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00151d8:	53                   	push   ebx
c00151d9:	e8 99 9b 00 00       	call   c001ed77 <Vm::faultHandler(regs*)>
c00151de:	83 c4 10             	add    esp,0x10
c00151e1:	84 c0                	test   al,al
c00151e3:	74 05                	je     c00151ea <gpFault(regs*, void*)+0x24>
c00151e5:	83 c4 08             	add    esp,0x8
c00151e8:	5b                   	pop    ebx
c00151e9:	c3                   	ret    
c00151ea:	83 ec 0c             	sub    esp,0xc
c00151ed:	68 58 af 02 c0       	push   0xc002af58
c00151f2:	e8 9b dc ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c00151f7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00151fa:	e8 09 fb ff ff       	call   c0014d08 <displayDebugInfo(regs*)>

c00151ff <pgFault(regs*, void*)>:
c00151ff:	83 ec 14             	sub    esp,0x14
c0015202:	0f 20 d0             	mov    eax,cr2
c0015205:	50                   	push   eax
c0015206:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001520b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001520e:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c0015214:	e8 9f d8 ff ff       	call   c0012ab8 <VAS::tryLoadBackOffDisk(unsigned long)>
c0015219:	83 c4 10             	add    esp,0x10
c001521c:	84 c0                	test   al,al
c001521e:	74 04                	je     c0015224 <pgFault(regs*, void*)+0x25>
c0015220:	83 c4 0c             	add    esp,0xc
c0015223:	c3                   	ret    
c0015224:	83 ec 0c             	sub    esp,0xc
c0015227:	68 73 af 02 c0       	push   0xc002af73
c001522c:	e8 61 dc ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0015231:	58                   	pop    eax
c0015232:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015236:	e8 cd fa ff ff       	call   c0014d08 <displayDebugInfo(regs*)>

c001523b <otherISRHandler(regs*, void*)>:
c001523b:	53                   	push   ebx
c001523c:	83 ec 0c             	sub    esp,0xc
c001523f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015243:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0015246:	50                   	push   eax
c0015247:	50                   	push   eax
c0015248:	68 85 af 02 c0       	push   0xc002af85
c001524d:	e8 40 dc ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0015252:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015255:	e8 ae fa ff ff       	call   c0014d08 <displayDebugInfo(regs*)>

c001525a <opcodeFault(regs*, void*)>:
c001525a:	55                   	push   ebp
c001525b:	89 e5                	mov    ebp,esp
c001525d:	56                   	push   esi
c001525e:	53                   	push   ebx
c001525f:	83 ec 40             	sub    esp,0x40
c0015262:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0015267:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001526d:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0015273:	84 c0                	test   al,al
c0015275:	74 24                	je     c001529b <opcodeFault(regs*, void*)+0x41>
c0015277:	83 ec 0c             	sub    esp,0xc
c001527a:	68 a4 af 02 c0       	push   0xc002afa4
c001527f:	e8 0e dc ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0015284:	83 c4 10             	add    esp,0x10
c0015287:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001528a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001528d:	8d 50 19             	lea    edx,[eax+0x19]
c0015290:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015293:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015296:	e9 be 05 00 00       	jmp    c0015859 <opcodeFault(regs*, void*)+0x5ff>
c001529b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001529e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152a1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00152a4:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c00152a8:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c00152ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152af:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152b2:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00152b5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152b8:	8a 00                	mov    al,BYTE PTR [eax]
c00152ba:	3c f0                	cmp    al,0xf0
c00152bc:	75 17                	jne    c00152d5 <opcodeFault(regs*, void*)+0x7b>
c00152be:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00152c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152c4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152c7:	8d 50 01             	lea    edx,[eax+0x1]
c00152ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152cd:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00152d0:	e9 da 00 00 00       	jmp    c00153af <opcodeFault(regs*, void*)+0x155>
c00152d5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152d8:	8a 00                	mov    al,BYTE PTR [eax]
c00152da:	3c f2                	cmp    al,0xf2
c00152dc:	74 09                	je     c00152e7 <opcodeFault(regs*, void*)+0x8d>
c00152de:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152e1:	8a 00                	mov    al,BYTE PTR [eax]
c00152e3:	3c f3                	cmp    al,0xf3
c00152e5:	75 1b                	jne    c0015302 <opcodeFault(regs*, void*)+0xa8>
c00152e7:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00152eb:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00152ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152f1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152f4:	8d 50 01             	lea    edx,[eax+0x1]
c00152f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152fa:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00152fd:	e9 ad 00 00 00       	jmp    c00153af <opcodeFault(regs*, void*)+0x155>
c0015302:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015305:	8a 00                	mov    al,BYTE PTR [eax]
c0015307:	3c 66                	cmp    al,0x66
c0015309:	75 1f                	jne    c001532a <opcodeFault(regs*, void*)+0xd0>
c001530b:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001530f:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0015313:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015316:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015319:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001531c:	8d 50 01             	lea    edx,[eax+0x1]
c001531f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015322:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015325:	e9 85 00 00 00       	jmp    c00153af <opcodeFault(regs*, void*)+0x155>
c001532a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001532d:	8a 00                	mov    al,BYTE PTR [eax]
c001532f:	3c 67                	cmp    al,0x67
c0015331:	75 18                	jne    c001534b <opcodeFault(regs*, void*)+0xf1>
c0015333:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015337:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001533a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001533d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015340:	8d 50 01             	lea    edx,[eax+0x1]
c0015343:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015346:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015349:	eb 64                	jmp    c00153af <opcodeFault(regs*, void*)+0x155>
c001534b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001534e:	8a 00                	mov    al,BYTE PTR [eax]
c0015350:	3c 2e                	cmp    al,0x2e
c0015352:	74 09                	je     c001535d <opcodeFault(regs*, void*)+0x103>
c0015354:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015357:	8a 00                	mov    al,BYTE PTR [eax]
c0015359:	3c 3e                	cmp    al,0x3e
c001535b:	75 18                	jne    c0015375 <opcodeFault(regs*, void*)+0x11b>
c001535d:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015361:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015364:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015367:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001536a:	8d 50 01             	lea    edx,[eax+0x1]
c001536d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015370:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015373:	eb 3a                	jmp    c00153af <opcodeFault(regs*, void*)+0x155>
c0015375:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015378:	8a 00                	mov    al,BYTE PTR [eax]
c001537a:	3c 36                	cmp    al,0x36
c001537c:	74 1b                	je     c0015399 <opcodeFault(regs*, void*)+0x13f>
c001537e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015381:	8a 00                	mov    al,BYTE PTR [eax]
c0015383:	3c 26                	cmp    al,0x26
c0015385:	74 12                	je     c0015399 <opcodeFault(regs*, void*)+0x13f>
c0015387:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001538a:	8a 00                	mov    al,BYTE PTR [eax]
c001538c:	3c 64                	cmp    al,0x64
c001538e:	74 09                	je     c0015399 <opcodeFault(regs*, void*)+0x13f>
c0015390:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015393:	8a 00                	mov    al,BYTE PTR [eax]
c0015395:	3c 65                	cmp    al,0x65
c0015397:	75 16                	jne    c00153af <opcodeFault(regs*, void*)+0x155>
c0015399:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001539d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153a3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153a6:	8d 50 01             	lea    edx,[eax+0x1]
c00153a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153ac:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153af:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153b2:	8a 00                	mov    al,BYTE PTR [eax]
c00153b4:	3c 0f                	cmp    al,0xf
c00153b6:	0f 85 ad 00 00 00    	jne    c0015469 <opcodeFault(regs*, void*)+0x20f>
c00153bc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153bf:	40                   	inc    eax
c00153c0:	8a 00                	mov    al,BYTE PTR [eax]
c00153c2:	3c c2                	cmp    al,0xc2
c00153c4:	74 0e                	je     c00153d4 <opcodeFault(regs*, void*)+0x17a>
c00153c6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153c9:	40                   	inc    eax
c00153ca:	8a 00                	mov    al,BYTE PTR [eax]
c00153cc:	3c c3                	cmp    al,0xc3
c00153ce:	0f 85 95 00 00 00    	jne    c0015469 <opcodeFault(regs*, void*)+0x20f>
c00153d4:	83 ec 0c             	sub    esp,0xc
c00153d7:	68 c7 af 02 c0       	push   0xc002afc7
c00153dc:	e8 b1 da ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c00153e1:	83 c4 10             	add    esp,0x10
c00153e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153e7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153ea:	8d 50 01             	lea    edx,[eax+0x1]
c00153ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153f0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153f3:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153f6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153f9:	8a 00                	mov    al,BYTE PTR [eax]
c00153fb:	8d 50 fe             	lea    edx,[eax-0x2]
c00153fe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015401:	88 10                	mov    BYTE PTR [eax],dl
c0015403:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0015406:	50                   	push   eax
c0015407:	8d 45 c3             	lea    eax,[ebp-0x3d]
c001540a:	50                   	push   eax
c001540b:	8d 45 c4             	lea    eax,[ebp-0x3c]
c001540e:	50                   	push   eax
c001540f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015412:	e8 1d 48 00 00       	call   c0019c34 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0015417:	83 c4 10             	add    esp,0x10
c001541a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001541d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015420:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0015423:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0015426:	01 d0                	add    eax,edx
c0015428:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001542b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001542e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015431:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0015434:	48                   	dec    eax
c0015435:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0015438:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001543b:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001543e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015441:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015444:	83 ec 04             	sub    esp,0x4
c0015447:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c001544a:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c001544d:	50                   	push   eax
c001544e:	e8 61 ad fe ff       	call   c00001b4 <voodooXADD>
c0015453:	83 c4 10             	add    esp,0x10
c0015456:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0015459:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001545c:	01 c2                	add    edx,eax
c001545e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015461:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015464:	e9 f0 03 00 00       	jmp    c0015859 <opcodeFault(regs*, void*)+0x5ff>
c0015469:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001546c:	8a 00                	mov    al,BYTE PTR [eax]
c001546e:	3c 0f                	cmp    al,0xf
c0015470:	0f 85 8b 01 00 00    	jne    c0015601 <opcodeFault(regs*, void*)+0x3a7>
c0015476:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015479:	40                   	inc    eax
c001547a:	8a 00                	mov    al,BYTE PTR [eax]
c001547c:	3c c7                	cmp    al,0xc7
c001547e:	0f 86 7d 01 00 00    	jbe    c0015601 <opcodeFault(regs*, void*)+0x3a7>
c0015484:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015487:	40                   	inc    eax
c0015488:	8a 00                	mov    al,BYTE PTR [eax]
c001548a:	3c cf                	cmp    al,0xcf
c001548c:	0f 87 6f 01 00 00    	ja     c0015601 <opcodeFault(regs*, void*)+0x3a7>
c0015492:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015495:	40                   	inc    eax
c0015496:	8a 00                	mov    al,BYTE PTR [eax]
c0015498:	83 c0 38             	add    eax,0x38
c001549b:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001549e:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c00154a2:	75 0b                	jne    c00154af <opcodeFault(regs*, void*)+0x255>
c00154a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154a7:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00154aa:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00154ad:	eb 75                	jmp    c0015524 <opcodeFault(regs*, void*)+0x2ca>
c00154af:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c00154b3:	75 0b                	jne    c00154c0 <opcodeFault(regs*, void*)+0x266>
c00154b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154b8:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00154bb:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00154be:	eb 64                	jmp    c0015524 <opcodeFault(regs*, void*)+0x2ca>
c00154c0:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00154c4:	75 0b                	jne    c00154d1 <opcodeFault(regs*, void*)+0x277>
c00154c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154c9:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00154cc:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00154cf:	eb 53                	jmp    c0015524 <opcodeFault(regs*, void*)+0x2ca>
c00154d1:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00154d5:	75 0b                	jne    c00154e2 <opcodeFault(regs*, void*)+0x288>
c00154d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154da:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00154dd:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00154e0:	eb 42                	jmp    c0015524 <opcodeFault(regs*, void*)+0x2ca>
c00154e2:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00154e6:	75 0b                	jne    c00154f3 <opcodeFault(regs*, void*)+0x299>
c00154e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154eb:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00154ee:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00154f1:	eb 31                	jmp    c0015524 <opcodeFault(regs*, void*)+0x2ca>
c00154f3:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00154f7:	75 0b                	jne    c0015504 <opcodeFault(regs*, void*)+0x2aa>
c00154f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154fc:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00154ff:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015502:	eb 20                	jmp    c0015524 <opcodeFault(regs*, void*)+0x2ca>
c0015504:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0015508:	75 0b                	jne    c0015515 <opcodeFault(regs*, void*)+0x2bb>
c001550a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001550d:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015510:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015513:	eb 0f                	jmp    c0015524 <opcodeFault(regs*, void*)+0x2ca>
c0015515:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0015519:	75 09                	jne    c0015524 <opcodeFault(regs*, void*)+0x2ca>
c001551b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001551e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0015521:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015524:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0015528:	74 10                	je     c001553a <opcodeFault(regs*, void*)+0x2e0>
c001552a:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0015531:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0015538:	eb 2d                	jmp    c0015567 <opcodeFault(regs*, void*)+0x30d>
c001553a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001553d:	c1 e0 18             	shl    eax,0x18
c0015540:	89 c2                	mov    edx,eax
c0015542:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015545:	c1 e0 08             	shl    eax,0x8
c0015548:	25 00 00 ff 00       	and    eax,0xff0000
c001554d:	09 c2                	or     edx,eax
c001554f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015552:	c1 e8 08             	shr    eax,0x8
c0015555:	25 00 ff 00 00       	and    eax,0xff00
c001555a:	09 c2                	or     edx,eax
c001555c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001555f:	c1 e8 18             	shr    eax,0x18
c0015562:	09 d0                	or     eax,edx
c0015564:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015567:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c001556b:	75 0b                	jne    c0015578 <opcodeFault(regs*, void*)+0x31e>
c001556d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015570:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015573:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0015576:	eb 75                	jmp    c00155ed <opcodeFault(regs*, void*)+0x393>
c0015578:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001557c:	75 0b                	jne    c0015589 <opcodeFault(regs*, void*)+0x32f>
c001557e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015581:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015584:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0015587:	eb 64                	jmp    c00155ed <opcodeFault(regs*, void*)+0x393>
c0015589:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c001558d:	75 0b                	jne    c001559a <opcodeFault(regs*, void*)+0x340>
c001558f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015592:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015595:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0015598:	eb 53                	jmp    c00155ed <opcodeFault(regs*, void*)+0x393>
c001559a:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c001559e:	75 0b                	jne    c00155ab <opcodeFault(regs*, void*)+0x351>
c00155a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155a3:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155a6:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00155a9:	eb 42                	jmp    c00155ed <opcodeFault(regs*, void*)+0x393>
c00155ab:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00155af:	75 0b                	jne    c00155bc <opcodeFault(regs*, void*)+0x362>
c00155b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155b4:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155b7:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c00155ba:	eb 31                	jmp    c00155ed <opcodeFault(regs*, void*)+0x393>
c00155bc:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00155c0:	75 0b                	jne    c00155cd <opcodeFault(regs*, void*)+0x373>
c00155c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155c5:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155c8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00155cb:	eb 20                	jmp    c00155ed <opcodeFault(regs*, void*)+0x393>
c00155cd:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00155d1:	75 0b                	jne    c00155de <opcodeFault(regs*, void*)+0x384>
c00155d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155d6:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155d9:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00155dc:	eb 0f                	jmp    c00155ed <opcodeFault(regs*, void*)+0x393>
c00155de:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00155e2:	75 09                	jne    c00155ed <opcodeFault(regs*, void*)+0x393>
c00155e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155e7:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155ea:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00155ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155f0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00155f3:	8d 50 02             	lea    edx,[eax+0x2]
c00155f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155f9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00155fc:	e9 58 02 00 00       	jmp    c0015859 <opcodeFault(regs*, void*)+0x5ff>
c0015601:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015604:	8a 00                	mov    al,BYTE PTR [eax]
c0015606:	3c 0f                	cmp    al,0xf
c0015608:	0f 85 76 01 00 00    	jne    c0015784 <opcodeFault(regs*, void*)+0x52a>
c001560e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015611:	40                   	inc    eax
c0015612:	8a 00                	mov    al,BYTE PTR [eax]
c0015614:	3c c7                	cmp    al,0xc7
c0015616:	0f 85 68 01 00 00    	jne    c0015784 <opcodeFault(regs*, void*)+0x52a>
c001561c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001561f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015622:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015625:	8d 50 01             	lea    edx,[eax+0x1]
c0015628:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001562b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001562e:	8d 45 ba             	lea    eax,[ebp-0x46]
c0015631:	50                   	push   eax
c0015632:	8d 45 bb             	lea    eax,[ebp-0x45]
c0015635:	50                   	push   eax
c0015636:	8d 45 bc             	lea    eax,[ebp-0x44]
c0015639:	50                   	push   eax
c001563a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001563d:	e8 f2 45 00 00       	call   c0019c34 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0015642:	83 c4 10             	add    esp,0x10
c0015645:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0015648:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c001564b:	83 f0 01             	xor    eax,0x1
c001564e:	84 c0                	test   al,al
c0015650:	0f 84 2e 01 00 00    	je     c0015784 <opcodeFault(regs*, void*)+0x52a>
c0015656:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0015659:	3c 01                	cmp    al,0x1
c001565b:	0f 85 23 01 00 00    	jne    c0015784 <opcodeFault(regs*, void*)+0x52a>
c0015661:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0015664:	83 f0 01             	xor    eax,0x1
c0015667:	84 c0                	test   al,al
c0015669:	0f 84 15 01 00 00    	je     c0015784 <opcodeFault(regs*, void*)+0x52a>
c001566f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015672:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015675:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015678:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c001567f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015682:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015685:	89 c2                	mov    edx,eax
c0015687:	b8 00 00 00 00       	mov    eax,0x0
c001568c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001568f:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0015692:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015695:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0015698:	ba 00 00 00 00       	mov    edx,0x0
c001569d:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c00156a0:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c00156a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156a6:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00156a9:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00156ac:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c00156b3:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00156b6:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00156b9:	89 c2                	mov    edx,eax
c00156bb:	b8 00 00 00 00       	mov    eax,0x0
c00156c0:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00156c3:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c00156c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156c9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00156cc:	ba 00 00 00 00       	mov    edx,0x0
c00156d1:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c00156d4:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c00156d7:	e8 8b 86 00 00       	call   c001dd67 <lockScheduler()>
c00156dc:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00156df:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00156e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00156e4:	89 c1                	mov    ecx,eax
c00156e6:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c00156e9:	89 cb                	mov    ebx,ecx
c00156eb:	89 d0                	mov    eax,edx
c00156ed:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c00156f0:	89 c6                	mov    esi,eax
c00156f2:	89 f0                	mov    eax,esi
c00156f4:	09 d8                	or     eax,ebx
c00156f6:	85 c0                	test   eax,eax
c00156f8:	75 21                	jne    c001571b <opcodeFault(regs*, void*)+0x4c1>
c00156fa:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00156fd:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015700:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015703:	89 01                	mov    DWORD PTR [ecx],eax
c0015705:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0015708:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001570b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001570e:	83 c8 40             	or     eax,0x40
c0015711:	89 c2                	mov    edx,eax
c0015713:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015716:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015719:	eb 3e                	jmp    c0015759 <opcodeFault(regs*, void*)+0x4ff>
c001571b:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001571e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015721:	8b 00                	mov    eax,DWORD PTR [eax]
c0015723:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015726:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0015729:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c001572c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001572f:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0015732:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015735:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015738:	89 d0                	mov    eax,edx
c001573a:	31 d2                	xor    edx,edx
c001573c:	89 c3                	mov    ebx,eax
c001573e:	89 d6                	mov    esi,edx
c0015740:	89 da                	mov    edx,ebx
c0015742:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015745:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0015748:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001574b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001574e:	83 e0 bf             	and    eax,0xffffffbf
c0015751:	89 c2                	mov    edx,eax
c0015753:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015756:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015759:	e8 0b 86 00 00       	call   c001dd69 <unlockScheduler()>
c001575e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015761:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015764:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0015767:	01 c2                	add    edx,eax
c0015769:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001576c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001576f:	83 ec 0c             	sub    esp,0xc
c0015772:	68 d6 af 02 c0       	push   0xc002afd6
c0015777:	e8 16 d7 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001577c:	83 c4 10             	add    esp,0x10
c001577f:	e9 d5 00 00 00       	jmp    c0015859 <opcodeFault(regs*, void*)+0x5ff>
c0015784:	83 ec 0c             	sub    esp,0xc
c0015787:	68 e9 af 02 c0       	push   0xc002afe9
c001578c:	e8 01 d7 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0015791:	83 c4 10             	add    esp,0x10
c0015794:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015797:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001579a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001579d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00157a0:	c1 e0 04             	shl    eax,0x4
c00157a3:	01 d0                	add    eax,edx
c00157a5:	83 c0 03             	add    eax,0x3
c00157a8:	8a 00                	mov    al,BYTE PTR [eax]
c00157aa:	0f b6 d8             	movzx  ebx,al
c00157ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157b0:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00157b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157b6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00157b9:	c1 e0 04             	shl    eax,0x4
c00157bc:	01 d0                	add    eax,edx
c00157be:	83 c0 02             	add    eax,0x2
c00157c1:	8a 00                	mov    al,BYTE PTR [eax]
c00157c3:	0f b6 c8             	movzx  ecx,al
c00157c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157c9:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00157cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157cf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00157d2:	c1 e0 04             	shl    eax,0x4
c00157d5:	01 d0                	add    eax,edx
c00157d7:	40                   	inc    eax
c00157d8:	8a 00                	mov    al,BYTE PTR [eax]
c00157da:	0f b6 d0             	movzx  edx,al
c00157dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157e0:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c00157e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157e6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00157e9:	c1 e0 04             	shl    eax,0x4
c00157ec:	01 f0                	add    eax,esi
c00157ee:	8a 00                	mov    al,BYTE PTR [eax]
c00157f0:	0f b6 c0             	movzx  eax,al
c00157f3:	83 ec 0c             	sub    esp,0xc
c00157f6:	53                   	push   ebx
c00157f7:	51                   	push   ecx
c00157f8:	52                   	push   edx
c00157f9:	50                   	push   eax
c00157fa:	68 fc af 02 c0       	push   0xc002affc
c00157ff:	e8 8e d6 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0015804:	83 c4 20             	add    esp,0x20
c0015807:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001580a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001580d:	83 c0 03             	add    eax,0x3
c0015810:	8a 00                	mov    al,BYTE PTR [eax]
c0015812:	0f b6 d8             	movzx  ebx,al
c0015815:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015818:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001581b:	83 c0 02             	add    eax,0x2
c001581e:	8a 00                	mov    al,BYTE PTR [eax]
c0015820:	0f b6 c8             	movzx  ecx,al
c0015823:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015826:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015829:	40                   	inc    eax
c001582a:	8a 00                	mov    al,BYTE PTR [eax]
c001582c:	0f b6 d0             	movzx  edx,al
c001582f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015832:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015835:	8a 00                	mov    al,BYTE PTR [eax]
c0015837:	0f b6 c0             	movzx  eax,al
c001583a:	83 ec 0c             	sub    esp,0xc
c001583d:	53                   	push   ebx
c001583e:	51                   	push   ecx
c001583f:	52                   	push   edx
c0015840:	50                   	push   eax
c0015841:	68 24 b0 02 c0       	push   0xc002b024
c0015846:	e8 47 d6 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001584b:	83 c4 20             	add    esp,0x20
c001584e:	83 ec 0c             	sub    esp,0xc
c0015851:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015854:	e8 af f4 ff ff       	call   c0014d08 <displayDebugInfo(regs*)>
c0015859:	8d 65 f8             	lea    esp,[ebp-0x8]
c001585c:	5b                   	pop    ebx
c001585d:	5e                   	pop    esi
c001585e:	5d                   	pop    ebp
c001585f:	c3                   	ret    

c0015860 <displayProgramFault(char const*)>:
c0015860:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015865:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015868:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c001586e:	85 c0                	test   eax,eax
c0015870:	74 15                	je     c0015887 <displayProgramFault(char const*)+0x27>
c0015872:	83 ec 0c             	sub    esp,0xc
c0015875:	6a 04                	push   0x4
c0015877:	6a 0f                	push   0xf
c0015879:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001587d:	50                   	push   eax
c001587e:	e8 4b b5 ff ff       	call   c0010dce <VgaText::puts(char const*, VgaColour, VgaColour)>
c0015883:	83 c4 1c             	add    esp,0x1c
c0015886:	c3                   	ret    
c0015887:	c3                   	ret    

c0015888 <setupInterruptController()>:
c0015888:	55                   	push   ebp
c0015889:	89 e5                	mov    ebp,esp
c001588b:	53                   	push   ebx
c001588c:	83 ec 24             	sub    esp,0x24
c001588f:	b8 00 00 00 00       	mov    eax,0x0
c0015894:	85 c0                	test   eax,eax
c0015896:	0f 95 c0             	setne  al
c0015899:	84 c0                	test   al,al
c001589b:	74 5b                	je     c00158f8 <setupInterruptController()+0x70>
c001589d:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c00158a4:	83 ec 0c             	sub    esp,0xc
c00158a7:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c00158aa:	e8 91 9f ff ff       	call   c000f840 <malloc>
c00158af:	83 c4 10             	add    esp,0x10
c00158b2:	89 c3                	mov    ebx,eax
c00158b4:	83 ec 0c             	sub    esp,0xc
c00158b7:	53                   	push   ebx
c00158b8:	e8 2f 00 01 00       	call   c00258ec <APIC::APIC()>
c00158bd:	83 c4 10             	add    esp,0x10
c00158c0:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c00158c3:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c00158c6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00158c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00158cb:	83 c0 08             	add    eax,0x8
c00158ce:	8b 00                	mov    eax,DWORD PTR [eax]
c00158d0:	6a 00                	push   0x0
c00158d2:	6a 00                	push   0x0
c00158d4:	6a 00                	push   0x0
c00158d6:	52                   	push   edx
c00158d7:	ff d0                	call   eax
c00158d9:	83 c4 10             	add    esp,0x10
c00158dc:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c00158e1:	83 ec 08             	sub    esp,0x8
c00158e4:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00158e7:	50                   	push   eax
c00158e8:	e8 cb e9 ff ff       	call   c00142b8 <Device::addChild(Device*)>
c00158ed:	83 c4 10             	add    esp,0x10
c00158f0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00158f3:	e9 88 03 00 00       	jmp    c0015c80 <setupInterruptController()+0x3f8>
c00158f8:	a0 20 0d 03 c0       	mov    al,ds:0xc0030d20
c00158fd:	0f b6 c0             	movzx  eax,al
c0015900:	83 ec 08             	sub    esp,0x8
c0015903:	50                   	push   eax
c0015904:	68 49 b0 02 c0       	push   0xc002b049
c0015909:	e8 84 d5 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001590e:	83 c4 10             	add    esp,0x10
c0015911:	a0 20 0d 03 c0       	mov    al,ds:0xc0030d20
c0015916:	84 c0                	test   al,al
c0015918:	75 14                	jne    c001592e <setupInterruptController()+0xa6>
c001591a:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c001591f:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0015925:	83 e2 fe             	and    edx,0xfffffffe
c0015928:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001592e:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0015933:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0015939:	83 e0 01             	and    eax,0x1
c001593c:	84 c0                	test   al,al
c001593e:	0f 95 c0             	setne  al
c0015941:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0015944:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c001594b:	83 ec 0c             	sub    esp,0xc
c001594e:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015951:	e8 ea 9e ff ff       	call   c000f840 <malloc>
c0015956:	83 c4 10             	add    esp,0x10
c0015959:	89 c3                	mov    ebx,eax
c001595b:	83 ec 0c             	sub    esp,0xc
c001595e:	53                   	push   ebx
c001595f:	e8 e0 04 01 00       	call   c0025e44 <PIC::PIC()>
c0015964:	83 c4 10             	add    esp,0x10
c0015967:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c001596a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001596d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015970:	8b 00                	mov    eax,DWORD PTR [eax]
c0015972:	83 c0 08             	add    eax,0x8
c0015975:	8b 00                	mov    eax,DWORD PTR [eax]
c0015977:	6a 00                	push   0x0
c0015979:	6a 00                	push   0x0
c001597b:	6a 00                	push   0x0
c001597d:	52                   	push   edx
c001597e:	ff d0                	call   eax
c0015980:	83 c4 10             	add    esp,0x10
c0015983:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0015987:	74 73                	je     c00159fc <setupInterruptController()+0x174>
c0015989:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001598c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001598f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015991:	83 c0 0c             	add    eax,0xc
c0015994:	8b 00                	mov    eax,DWORD PTR [eax]
c0015996:	6a 00                	push   0x0
c0015998:	6a 00                	push   0x0
c001599a:	6a 00                	push   0x0
c001599c:	52                   	push   edx
c001599d:	ff d0                	call   eax
c001599f:	83 c4 10             	add    esp,0x10
c00159a2:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00159a6:	74 15                	je     c00159bd <setupInterruptController()+0x135>
c00159a8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00159ad:	83 c0 04             	add    eax,0x4
c00159b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00159b2:	83 ec 0c             	sub    esp,0xc
c00159b5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00159b8:	ff d0                	call   eax
c00159ba:	83 c4 10             	add    esp,0x10
c00159bd:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c00159c4:	83 ec 0c             	sub    esp,0xc
c00159c7:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00159ca:	e8 71 9e ff ff       	call   c000f840 <malloc>
c00159cf:	83 c4 10             	add    esp,0x10
c00159d2:	89 c3                	mov    ebx,eax
c00159d4:	83 ec 0c             	sub    esp,0xc
c00159d7:	53                   	push   ebx
c00159d8:	e8 0f ff 00 00       	call   c00258ec <APIC::APIC()>
c00159dd:	83 c4 10             	add    esp,0x10
c00159e0:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00159e3:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00159e6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159e9:	8b 00                	mov    eax,DWORD PTR [eax]
c00159eb:	83 c0 08             	add    eax,0x8
c00159ee:	8b 00                	mov    eax,DWORD PTR [eax]
c00159f0:	6a 00                	push   0x0
c00159f2:	6a 00                	push   0x0
c00159f4:	6a 00                	push   0x0
c00159f6:	52                   	push   edx
c00159f7:	ff d0                	call   eax
c00159f9:	83 c4 10             	add    esp,0x10
c00159fc:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0015a01:	83 ec 08             	sub    esp,0x8
c0015a04:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a07:	50                   	push   eax
c0015a08:	e8 ab e8 ff ff       	call   c00142b8 <Device::addChild(Device*)>
c0015a0d:	83 c4 10             	add    esp,0x10
c0015a10:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a13:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a15:	83 c0 24             	add    eax,0x24
c0015a18:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a1a:	6a 00                	push   0x0
c0015a1c:	68 3b 52 01 c0       	push   0xc001523b
c0015a21:	6a 00                	push   0x0
c0015a23:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a26:	ff d0                	call   eax
c0015a28:	83 c4 10             	add    esp,0x10
c0015a2b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a30:	83 c0 24             	add    eax,0x24
c0015a33:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a35:	6a 00                	push   0x0
c0015a37:	68 3b 52 01 c0       	push   0xc001523b
c0015a3c:	6a 01                	push   0x1
c0015a3e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a41:	ff d0                	call   eax
c0015a43:	83 c4 10             	add    esp,0x10
c0015a46:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a49:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a4b:	83 c0 24             	add    eax,0x24
c0015a4e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a50:	6a 00                	push   0x0
c0015a52:	68 65 4b 01 c0       	push   0xc0014b65
c0015a57:	6a 02                	push   0x2
c0015a59:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a5c:	ff d0                	call   eax
c0015a5e:	83 c4 10             	add    esp,0x10
c0015a61:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a64:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a66:	83 c0 24             	add    eax,0x24
c0015a69:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a6b:	6a 00                	push   0x0
c0015a6d:	68 3b 52 01 c0       	push   0xc001523b
c0015a72:	6a 03                	push   0x3
c0015a74:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a77:	ff d0                	call   eax
c0015a79:	83 c4 10             	add    esp,0x10
c0015a7c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a7f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a81:	83 c0 24             	add    eax,0x24
c0015a84:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a86:	6a 00                	push   0x0
c0015a88:	68 3b 52 01 c0       	push   0xc001523b
c0015a8d:	6a 04                	push   0x4
c0015a8f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a92:	ff d0                	call   eax
c0015a94:	83 c4 10             	add    esp,0x10
c0015a97:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a9a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a9c:	83 c0 24             	add    eax,0x24
c0015a9f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aa1:	6a 00                	push   0x0
c0015aa3:	68 3b 52 01 c0       	push   0xc001523b
c0015aa8:	6a 05                	push   0x5
c0015aaa:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015aad:	ff d0                	call   eax
c0015aaf:	83 c4 10             	add    esp,0x10
c0015ab2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ab5:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ab7:	83 c0 24             	add    eax,0x24
c0015aba:	8b 00                	mov    eax,DWORD PTR [eax]
c0015abc:	6a 00                	push   0x0
c0015abe:	68 5a 52 01 c0       	push   0xc001525a
c0015ac3:	6a 06                	push   0x6
c0015ac5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ac8:	ff d0                	call   eax
c0015aca:	83 c4 10             	add    esp,0x10
c0015acd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ad0:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ad2:	83 c0 24             	add    eax,0x24
c0015ad5:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ad7:	6a 00                	push   0x0
c0015ad9:	68 97 51 01 c0       	push   0xc0015197
c0015ade:	6a 07                	push   0x7
c0015ae0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ae3:	ff d0                	call   eax
c0015ae5:	83 c4 10             	add    esp,0x10
c0015ae8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015aeb:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aed:	83 c0 24             	add    eax,0x24
c0015af0:	8b 00                	mov    eax,DWORD PTR [eax]
c0015af2:	6a 00                	push   0x0
c0015af4:	68 80 49 01 c0       	push   0xc0014980
c0015af9:	6a 08                	push   0x8
c0015afb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015afe:	ff d0                	call   eax
c0015b00:	83 c4 10             	add    esp,0x10
c0015b03:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b06:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b08:	83 c0 24             	add    eax,0x24
c0015b0b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b0d:	6a 00                	push   0x0
c0015b0f:	68 3b 52 01 c0       	push   0xc001523b
c0015b14:	6a 09                	push   0x9
c0015b16:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b19:	ff d0                	call   eax
c0015b1b:	83 c4 10             	add    esp,0x10
c0015b1e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b21:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b23:	83 c0 24             	add    eax,0x24
c0015b26:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b28:	6a 00                	push   0x0
c0015b2a:	68 3b 52 01 c0       	push   0xc001523b
c0015b2f:	6a 0a                	push   0xa
c0015b31:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b34:	ff d0                	call   eax
c0015b36:	83 c4 10             	add    esp,0x10
c0015b39:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b3c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b3e:	83 c0 24             	add    eax,0x24
c0015b41:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b43:	6a 00                	push   0x0
c0015b45:	68 3b 52 01 c0       	push   0xc001523b
c0015b4a:	6a 0b                	push   0xb
c0015b4c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b4f:	ff d0                	call   eax
c0015b51:	83 c4 10             	add    esp,0x10
c0015b54:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b57:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b59:	83 c0 24             	add    eax,0x24
c0015b5c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b5e:	6a 00                	push   0x0
c0015b60:	68 3b 52 01 c0       	push   0xc001523b
c0015b65:	6a 0c                	push   0xc
c0015b67:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b6a:	ff d0                	call   eax
c0015b6c:	83 c4 10             	add    esp,0x10
c0015b6f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b72:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b74:	83 c0 24             	add    eax,0x24
c0015b77:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b79:	6a 00                	push   0x0
c0015b7b:	68 c6 51 01 c0       	push   0xc00151c6
c0015b80:	6a 0d                	push   0xd
c0015b82:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b85:	ff d0                	call   eax
c0015b87:	83 c4 10             	add    esp,0x10
c0015b8a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b8d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b8f:	83 c0 24             	add    eax,0x24
c0015b92:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b94:	6a 00                	push   0x0
c0015b96:	68 ff 51 01 c0       	push   0xc00151ff
c0015b9b:	6a 0e                	push   0xe
c0015b9d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ba0:	ff d0                	call   eax
c0015ba2:	83 c4 10             	add    esp,0x10
c0015ba5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ba8:	8b 00                	mov    eax,DWORD PTR [eax]
c0015baa:	83 c0 24             	add    eax,0x24
c0015bad:	8b 00                	mov    eax,DWORD PTR [eax]
c0015baf:	6a 00                	push   0x0
c0015bb1:	68 3b 52 01 c0       	push   0xc001523b
c0015bb6:	6a 0f                	push   0xf
c0015bb8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bbb:	ff d0                	call   eax
c0015bbd:	83 c4 10             	add    esp,0x10
c0015bc0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bc3:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bc5:	83 c0 24             	add    eax,0x24
c0015bc8:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bca:	6a 00                	push   0x0
c0015bcc:	68 3b 52 01 c0       	push   0xc001523b
c0015bd1:	6a 10                	push   0x10
c0015bd3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bd6:	ff d0                	call   eax
c0015bd8:	83 c4 10             	add    esp,0x10
c0015bdb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bde:	8b 00                	mov    eax,DWORD PTR [eax]
c0015be0:	83 c0 24             	add    eax,0x24
c0015be3:	8b 00                	mov    eax,DWORD PTR [eax]
c0015be5:	6a 00                	push   0x0
c0015be7:	68 3b 52 01 c0       	push   0xc001523b
c0015bec:	6a 11                	push   0x11
c0015bee:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bf1:	ff d0                	call   eax
c0015bf3:	83 c4 10             	add    esp,0x10
c0015bf6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bf9:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bfb:	83 c0 24             	add    eax,0x24
c0015bfe:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c00:	6a 00                	push   0x0
c0015c02:	68 3b 52 01 c0       	push   0xc001523b
c0015c07:	6a 12                	push   0x12
c0015c09:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c0c:	ff d0                	call   eax
c0015c0e:	83 c4 10             	add    esp,0x10
c0015c11:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c14:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c16:	83 c0 24             	add    eax,0x24
c0015c19:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c1b:	6a 00                	push   0x0
c0015c1d:	68 3b 52 01 c0       	push   0xc001523b
c0015c22:	6a 13                	push   0x13
c0015c24:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c27:	ff d0                	call   eax
c0015c29:	83 c4 10             	add    esp,0x10
c0015c2c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c2f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c31:	83 c0 24             	add    eax,0x24
c0015c34:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c36:	6a 00                	push   0x0
c0015c38:	68 3b 52 01 c0       	push   0xc001523b
c0015c3d:	6a 14                	push   0x14
c0015c3f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c42:	ff d0                	call   eax
c0015c44:	83 c4 10             	add    esp,0x10
c0015c47:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c4a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c4c:	83 c0 24             	add    eax,0x24
c0015c4f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c51:	6a 00                	push   0x0
c0015c53:	68 3b 52 01 c0       	push   0xc001523b
c0015c58:	6a 1e                	push   0x1e
c0015c5a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c5d:	ff d0                	call   eax
c0015c5f:	83 c4 10             	add    esp,0x10
c0015c62:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c65:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c67:	83 c0 24             	add    eax,0x24
c0015c6a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c6c:	6a 00                	push   0x0
c0015c6e:	68 f7 c6 01 c0       	push   0xc001c6f7
c0015c73:	6a 60                	push   0x60
c0015c75:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c78:	ff d0                	call   eax
c0015c7a:	83 c4 10             	add    esp,0x10
c0015c7d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c80:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015c83:	c9                   	leave  
c0015c84:	c3                   	ret    
c0015c85:	90                   	nop

c0015c86 <InterruptController::convertLegacyIRQNumber(int)>:
c0015c86:	55                   	push   ebp
c0015c87:	89 e5                	mov    ebp,esp
c0015c89:	83 ec 08             	sub    esp,0x8
c0015c8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c8f:	83 ec 0c             	sub    esp,0xc
c0015c92:	50                   	push   eax
c0015c93:	e8 0c e9 ff ff       	call   c00145a4 <Device::getName()>
c0015c98:	83 c4 10             	add    esp,0x10
c0015c9b:	8a 00                	mov    al,BYTE PTR [eax]
c0015c9d:	3c 41                	cmp    al,0x41
c0015c9f:	0f 94 c0             	sete   al
c0015ca2:	84 c0                	test   al,al
c0015ca4:	74 28                	je     c0015cce <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015ca6:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015caa:	7f 12                	jg     c0015cbe <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015cac:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015caf:	05 e0 d5 02 c0       	add    eax,0xc002d5e0
c0015cb4:	8a 00                	mov    al,BYTE PTR [eax]
c0015cb6:	0f b6 c0             	movzx  eax,al
c0015cb9:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015cbc:	eb 10                	jmp    c0015cce <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015cbe:	83 ec 0c             	sub    esp,0xc
c0015cc1:	68 40 ad 02 c0       	push   0xc002ad40
c0015cc6:	e8 a2 48 00 00       	call   c001a56d <Krnl::panic(char const*)>
c0015ccb:	83 c4 10             	add    esp,0x10
c0015cce:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015cd1:	c9                   	leave  
c0015cd2:	c3                   	ret    
c0015cd3:	90                   	nop

c0015cd4 <startGUI(void*)>:
c0015cd4:	55                   	push   ebp
c0015cd5:	89 e5                	mov    ebp,esp
c0015cd7:	53                   	push   ebx
c0015cd8:	83 ec 04             	sub    esp,0x4
c0015cdb:	e8 89 80 00 00       	call   c001dd69 <unlockScheduler()>
c0015ce0:	8b 1d 88 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e388
c0015ce6:	83 ec 08             	sub    esp,0x8
c0015ce9:	6a 01                	push   0x1
c0015ceb:	68 b0 b0 02 c0       	push   0xc002b0b0
c0015cf0:	e8 ab 79 00 00       	call   c001d6a0 <Thr::loadDLL(char const*, bool)>
c0015cf5:	83 c4 10             	add    esp,0x10
c0015cf8:	83 ec 08             	sub    esp,0x8
c0015cfb:	53                   	push   ebx
c0015cfc:	50                   	push   eax
c0015cfd:	e8 ed 7b 00 00       	call   c001d8ef <Thr::executeDLL(unsigned long, void*)>
c0015d02:	83 c4 10             	add    esp,0x10
c0015d05:	8b 1d 88 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e388
c0015d0b:	83 ec 08             	sub    esp,0x8
c0015d0e:	6a 01                	push   0x1
c0015d10:	68 ca b0 02 c0       	push   0xc002b0ca
c0015d15:	e8 86 79 00 00       	call   c001d6a0 <Thr::loadDLL(char const*, bool)>
c0015d1a:	83 c4 10             	add    esp,0x10
c0015d1d:	83 ec 08             	sub    esp,0x8
c0015d20:	53                   	push   ebx
c0015d21:	50                   	push   eax
c0015d22:	e8 c8 7b 00 00       	call   c001d8ef <Thr::executeDLL(unsigned long, void*)>
c0015d27:	83 c4 10             	add    esp,0x10
c0015d2a:	90                   	nop
c0015d2b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015d2e:	c9                   	leave  
c0015d2f:	c3                   	ret    

c0015d30 <startGUIVESA(void*)>:
c0015d30:	55                   	push   ebp
c0015d31:	89 e5                	mov    ebp,esp
c0015d33:	53                   	push   ebx
c0015d34:	83 ec 04             	sub    esp,0x4
c0015d37:	e8 2d 80 00 00       	call   c001dd69 <unlockScheduler()>
c0015d3c:	8b 1d 88 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e388
c0015d42:	83 ec 08             	sub    esp,0x8
c0015d45:	6a 01                	push   0x1
c0015d47:	68 e4 b0 02 c0       	push   0xc002b0e4
c0015d4c:	e8 4f 79 00 00       	call   c001d6a0 <Thr::loadDLL(char const*, bool)>
c0015d51:	83 c4 10             	add    esp,0x10
c0015d54:	83 ec 08             	sub    esp,0x8
c0015d57:	53                   	push   ebx
c0015d58:	50                   	push   eax
c0015d59:	e8 91 7b 00 00       	call   c001d8ef <Thr::executeDLL(unsigned long, void*)>
c0015d5e:	83 c4 10             	add    esp,0x10
c0015d61:	8b 1d 88 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e388
c0015d67:	83 ec 08             	sub    esp,0x8
c0015d6a:	6a 01                	push   0x1
c0015d6c:	68 ca b0 02 c0       	push   0xc002b0ca
c0015d71:	e8 2a 79 00 00       	call   c001d6a0 <Thr::loadDLL(char const*, bool)>
c0015d76:	83 c4 10             	add    esp,0x10
c0015d79:	83 ec 08             	sub    esp,0x8
c0015d7c:	53                   	push   ebx
c0015d7d:	50                   	push   eax
c0015d7e:	e8 6c 7b 00 00       	call   c001d8ef <Thr::executeDLL(unsigned long, void*)>
c0015d83:	83 c4 10             	add    esp,0x10
c0015d86:	90                   	nop
c0015d87:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015d8a:	c9                   	leave  
c0015d8b:	c3                   	ret    

c0015d8c <sendKeyToTerminal(unsigned char)>:
c0015d8c:	55                   	push   ebp
c0015d8d:	89 e5                	mov    ebp,esp
c0015d8f:	83 ec 28             	sub    esp,0x28
c0015d92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d95:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015d98:	a1 64 e4 02 c0       	mov    eax,ds:0xc002e464
c0015d9d:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015da1:	83 ec 08             	sub    esp,0x8
c0015da4:	52                   	push   edx
c0015da5:	50                   	push   eax
c0015da6:	e8 5f b5 ff ff       	call   c001130a <VgaText::receiveKey(unsigned char)>
c0015dab:	83 c4 10             	add    esp,0x10
c0015dae:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015db2:	75 41                	jne    c0015df5 <sendKeyToTerminal(unsigned char)+0x69>
c0015db4:	e8 d5 7f 00 00       	call   c001dd8e <lockStuff()>
c0015db9:	a1 40 e5 02 c0       	mov    eax,ds:0xc002e540
c0015dbe:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015dc1:	c7 05 40 e5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e540,0x0
c0015dcb:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015dcf:	74 1f                	je     c0015df0 <sendKeyToTerminal(unsigned char)+0x64>
c0015dd1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015dd4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015dd7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015dda:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015ddd:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015de0:	83 ec 0c             	sub    esp,0xc
c0015de3:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015de6:	e8 93 85 00 00       	call   c001e37e <unblockTask(ThreadControlBlock*)>
c0015deb:	83 c4 10             	add    esp,0x10
c0015dee:	eb db                	jmp    c0015dcb <sendKeyToTerminal(unsigned char)+0x3f>
c0015df0:	e8 32 83 00 00       	call   c001e127 <unlockStuff()>
c0015df5:	90                   	nop
c0015df6:	c9                   	leave  
c0015df7:	c3                   	ret    

c0015df8 <sendKeyboardToken(KeyboardToken)>:
c0015df8:	55                   	push   ebp
c0015df9:	89 e5                	mov    ebp,esp
c0015dfb:	83 ec 18             	sub    esp,0x18
c0015dfe:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015e01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e04:	0f b7 c0             	movzx  eax,ax
c0015e07:	83 f2 01             	xor    edx,0x1
c0015e0a:	88 90 60 e5 02 c0    	mov    BYTE PTR [eax-0x3ffd1aa0],dl
c0015e10:	a1 48 e5 02 c0       	mov    eax,ds:0xc002e548
c0015e15:	85 c0                	test   eax,eax
c0015e17:	74 24                	je     c0015e3d <sendKeyboardToken(KeyboardToken)+0x45>
c0015e19:	8b 0d 48 e5 02 c0    	mov    ecx,DWORD PTR ds:0xc002e548
c0015e1f:	83 ec 04             	sub    esp,0x4
c0015e22:	68 60 e5 02 c0       	push   0xc002e560
c0015e27:	83 ec 08             	sub    esp,0x8
c0015e2a:	89 e2                	mov    edx,esp
c0015e2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e2f:	89 02                	mov    DWORD PTR [edx],eax
c0015e31:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015e34:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015e38:	ff d1                	call   ecx
c0015e3a:	83 c4 10             	add    esp,0x10
c0015e3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e40:	66 3d 03 02          	cmp    ax,0x203
c0015e44:	75 07                	jne    c0015e4d <sendKeyboardToken(KeyboardToken)+0x55>
c0015e46:	a0 60 e6 02 c0       	mov    al,ds:0xc002e660
c0015e4b:	84 c0                	test   al,al
c0015e4d:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015e51:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015e54:	a0 68 e9 02 c0       	mov    al,ds:0xc002e968
c0015e59:	38 c2                	cmp    dl,al
c0015e5b:	74 1c                	je     c0015e79 <sendKeyboardToken(KeyboardToken)+0x81>
c0015e5d:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015e60:	a2 68 e9 02 c0       	mov    ds:0xc002e968,al
c0015e65:	a0 68 e9 02 c0       	mov    al,ds:0xc002e968
c0015e6a:	0f b6 c0             	movzx  eax,al
c0015e6d:	83 ec 0c             	sub    esp,0xc
c0015e70:	50                   	push   eax
c0015e71:	e8 f4 a6 ff ff       	call   c001056a <setTerminalScrollLock(bool)>
c0015e76:	83 c4 10             	add    esp,0x10
c0015e79:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015e7c:	84 c0                	test   al,al
c0015e7e:	0f 84 ae 00 00 00    	je     c0015f32 <sendKeyboardToken(KeyboardToken)+0x13a>
c0015e84:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e87:	66 3d 10 03          	cmp    ax,0x310
c0015e8b:	75 06                	jne    c0015e93 <sendKeyboardToken(KeyboardToken)+0x9b>
c0015e8d:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015e93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e96:	66 3d 11 03          	cmp    ax,0x311
c0015e9a:	75 06                	jne    c0015ea2 <sendKeyboardToken(KeyboardToken)+0xaa>
c0015e9c:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015ea2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ea5:	66 3d 12 03          	cmp    ax,0x312
c0015ea9:	75 06                	jne    c0015eb1 <sendKeyboardToken(KeyboardToken)+0xb9>
c0015eab:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015eb1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015eb4:	66 3d 13 03          	cmp    ax,0x313
c0015eb8:	75 06                	jne    c0015ec0 <sendKeyboardToken(KeyboardToken)+0xc8>
c0015eba:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015ec0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ec3:	66 3d 14 03          	cmp    ax,0x314
c0015ec7:	75 06                	jne    c0015ecf <sendKeyboardToken(KeyboardToken)+0xd7>
c0015ec9:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015ecf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ed2:	66 3d 15 03          	cmp    ax,0x315
c0015ed6:	75 06                	jne    c0015ede <sendKeyboardToken(KeyboardToken)+0xe6>
c0015ed8:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015ede:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ee1:	66 3d 16 03          	cmp    ax,0x316
c0015ee5:	75 06                	jne    c0015eed <sendKeyboardToken(KeyboardToken)+0xf5>
c0015ee7:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015eed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ef0:	66 3d 17 03          	cmp    ax,0x317
c0015ef4:	75 06                	jne    c0015efc <sendKeyboardToken(KeyboardToken)+0x104>
c0015ef6:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015efc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015eff:	66 3d 18 03          	cmp    ax,0x318
c0015f03:	75 06                	jne    c0015f0b <sendKeyboardToken(KeyboardToken)+0x113>
c0015f05:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015f0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f0e:	66 3d 19 03          	cmp    ax,0x319
c0015f12:	75 06                	jne    c0015f1a <sendKeyboardToken(KeyboardToken)+0x122>
c0015f14:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015f1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f1d:	66 3d 1a 03          	cmp    ax,0x31a
c0015f21:	0f 85 c9 00 00 00    	jne    c0015ff0 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015f27:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015f2d:	e9 be 00 00 00       	jmp    c0015ff0 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015f32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f35:	66 3d 10 03          	cmp    ax,0x310
c0015f39:	75 0a                	jne    c0015f45 <sendKeyboardToken(KeyboardToken)+0x14d>
c0015f3b:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015f41:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015f45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f48:	66 3d 11 03          	cmp    ax,0x311
c0015f4c:	75 0a                	jne    c0015f58 <sendKeyboardToken(KeyboardToken)+0x160>
c0015f4e:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015f54:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015f58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f5b:	66 3d 12 03          	cmp    ax,0x312
c0015f5f:	75 0a                	jne    c0015f6b <sendKeyboardToken(KeyboardToken)+0x173>
c0015f61:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015f67:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015f6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f6e:	66 3d 13 03          	cmp    ax,0x313
c0015f72:	75 0a                	jne    c0015f7e <sendKeyboardToken(KeyboardToken)+0x186>
c0015f74:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0015f7a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015f7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f81:	66 3d 14 03          	cmp    ax,0x314
c0015f85:	75 0a                	jne    c0015f91 <sendKeyboardToken(KeyboardToken)+0x199>
c0015f87:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0015f8d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015f91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f94:	66 3d 15 03          	cmp    ax,0x315
c0015f98:	75 0a                	jne    c0015fa4 <sendKeyboardToken(KeyboardToken)+0x1ac>
c0015f9a:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015fa0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015fa4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fa7:	66 3d 16 03          	cmp    ax,0x316
c0015fab:	75 0a                	jne    c0015fb7 <sendKeyboardToken(KeyboardToken)+0x1bf>
c0015fad:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0015fb3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015fb7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fba:	66 3d 17 03          	cmp    ax,0x317
c0015fbe:	75 0a                	jne    c0015fca <sendKeyboardToken(KeyboardToken)+0x1d2>
c0015fc0:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0015fc6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015fca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fcd:	66 3d 18 03          	cmp    ax,0x318
c0015fd1:	75 0a                	jne    c0015fdd <sendKeyboardToken(KeyboardToken)+0x1e5>
c0015fd3:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0015fd9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015fdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fe0:	66 3d 19 03          	cmp    ax,0x319
c0015fe4:	75 0a                	jne    c0015ff0 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015fe6:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0015fec:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ff0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ff3:	66 3d 00 02          	cmp    ax,0x200
c0015ff7:	75 2c                	jne    c0016025 <sendKeyboardToken(KeyboardToken)+0x22d>
c0015ff9:	a0 60 e9 02 c0       	mov    al,ds:0xc002e960
c0015ffe:	83 f0 01             	xor    eax,0x1
c0016001:	84 c0                	test   al,al
c0016003:	74 20                	je     c0016025 <sendKeyboardToken(KeyboardToken)+0x22d>
c0016005:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001600a:	6a 01                	push   0x1
c001600c:	6a 00                	push   0x0
c001600e:	68 d4 5c 01 c0       	push   0xc0015cd4
c0016013:	50                   	push   eax
c0016014:	e8 7f 7e 00 00       	call   c001de98 <Process::createThread(void (*)(void*), void*, int)>
c0016019:	83 c4 10             	add    esp,0x10
c001601c:	c6 05 60 e9 02 c0 01 	mov    BYTE PTR ds:0xc002e960,0x1
c0016023:	eb 33                	jmp    c0016058 <sendKeyboardToken(KeyboardToken)+0x260>
c0016025:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016028:	66 3d 01 02          	cmp    ax,0x201
c001602c:	75 2a                	jne    c0016058 <sendKeyboardToken(KeyboardToken)+0x260>
c001602e:	a0 60 e9 02 c0       	mov    al,ds:0xc002e960
c0016033:	83 f0 01             	xor    eax,0x1
c0016036:	84 c0                	test   al,al
c0016038:	74 1e                	je     c0016058 <sendKeyboardToken(KeyboardToken)+0x260>
c001603a:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001603f:	6a 01                	push   0x1
c0016041:	6a 00                	push   0x0
c0016043:	68 30 5d 01 c0       	push   0xc0015d30
c0016048:	50                   	push   eax
c0016049:	e8 4a 7e 00 00       	call   c001de98 <Process::createThread(void (*)(void*), void*, int)>
c001604e:	83 c4 10             	add    esp,0x10
c0016051:	c6 05 60 e9 02 c0 01 	mov    BYTE PTR ds:0xc002e960,0x1
c0016058:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001605b:	66 3d 1d 03          	cmp    ax,0x31d
c001605f:	75 06                	jne    c0016067 <sendKeyboardToken(KeyboardToken)+0x26f>
c0016061:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0016067:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001606a:	66 3d 1c 03          	cmp    ax,0x31c
c001606e:	75 06                	jne    c0016076 <sendKeyboardToken(KeyboardToken)+0x27e>
c0016070:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0016076:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016079:	66 3d 1b 03          	cmp    ax,0x31b
c001607d:	75 06                	jne    c0016085 <sendKeyboardToken(KeyboardToken)+0x28d>
c001607f:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0016085:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016088:	66 3d 1e 03          	cmp    ax,0x31e
c001608c:	75 06                	jne    c0016094 <sendKeyboardToken(KeyboardToken)+0x29c>
c001608e:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0016094:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016097:	66 3d 1f 03          	cmp    ax,0x31f
c001609b:	75 06                	jne    c00160a3 <sendKeyboardToken(KeyboardToken)+0x2ab>
c001609d:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c00160a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160a6:	66 3d 1a 03          	cmp    ax,0x31a
c00160aa:	75 06                	jne    c00160b2 <sendKeyboardToken(KeyboardToken)+0x2ba>
c00160ac:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c00160b2:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c00160b6:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00160b9:	83 f0 01             	xor    eax,0x1
c00160bc:	84 c0                	test   al,al
c00160be:	74 77                	je     c0016137 <sendKeyboardToken(KeyboardToken)+0x33f>
c00160c0:	a0 61 e6 02 c0       	mov    al,ds:0xc002e661
c00160c5:	84 c0                	test   al,al
c00160c7:	74 41                	je     c001610a <sendKeyboardToken(KeyboardToken)+0x312>
c00160c9:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00160cd:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c00160d1:	74 2b                	je     c00160fe <sendKeyboardToken(KeyboardToken)+0x306>
c00160d3:	8b 15 64 e9 02 c0    	mov    edx,DWORD PTR ds:0xc002e964
c00160d9:	89 d0                	mov    eax,edx
c00160db:	c1 e0 02             	shl    eax,0x2
c00160de:	01 d0                	add    eax,edx
c00160e0:	01 c0                	add    eax,eax
c00160e2:	a3 64 e9 02 c0       	mov    ds:0xc002e964,eax
c00160e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160ea:	0f b7 c0             	movzx  eax,ax
c00160ed:	8d 50 d0             	lea    edx,[eax-0x30]
c00160f0:	a1 64 e9 02 c0       	mov    eax,ds:0xc002e964
c00160f5:	01 d0                	add    eax,edx
c00160f7:	a3 64 e9 02 c0       	mov    ds:0xc002e964,eax
c00160fc:	eb 6d                	jmp    c001616b <sendKeyboardToken(KeyboardToken)+0x373>
c00160fe:	c7 05 64 e9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e964,0x0
c0016108:	eb 61                	jmp    c001616b <sendKeyboardToken(KeyboardToken)+0x373>
c001610a:	a1 64 e9 02 c0       	mov    eax,ds:0xc002e964
c001610f:	85 c0                	test   eax,eax
c0016111:	74 18                	je     c001612b <sendKeyboardToken(KeyboardToken)+0x333>
c0016113:	a1 64 e9 02 c0       	mov    eax,ds:0xc002e964
c0016118:	0f b6 c0             	movzx  eax,al
c001611b:	83 ec 0c             	sub    esp,0xc
c001611e:	50                   	push   eax
c001611f:	e8 68 fc ff ff       	call   c0015d8c <sendKeyToTerminal(unsigned char)>
c0016124:	83 c4 10             	add    esp,0x10
c0016127:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001612b:	c7 05 64 e9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e964,0x0
c0016135:	eb 34                	jmp    c001616b <sendKeyboardToken(KeyboardToken)+0x373>
c0016137:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001613a:	66 3d 01 01          	cmp    ax,0x101
c001613e:	75 2b                	jne    c001616b <sendKeyboardToken(KeyboardToken)+0x373>
c0016140:	a1 64 e9 02 c0       	mov    eax,ds:0xc002e964
c0016145:	85 c0                	test   eax,eax
c0016147:	74 18                	je     c0016161 <sendKeyboardToken(KeyboardToken)+0x369>
c0016149:	a1 64 e9 02 c0       	mov    eax,ds:0xc002e964
c001614e:	0f b6 c0             	movzx  eax,al
c0016151:	83 ec 0c             	sub    esp,0xc
c0016154:	50                   	push   eax
c0016155:	e8 32 fc ff ff       	call   c0015d8c <sendKeyToTerminal(unsigned char)>
c001615a:	83 c4 10             	add    esp,0x10
c001615d:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0016161:	c7 05 64 e9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e964,0x0
c001616b:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001616e:	83 f0 01             	xor    eax,0x1
c0016171:	84 c0                	test   al,al
c0016173:	74 4c                	je     c00161c1 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016175:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016178:	83 f0 01             	xor    eax,0x1
c001617b:	84 c0                	test   al,al
c001617d:	74 42                	je     c00161c1 <sendKeyboardToken(KeyboardToken)+0x3c9>
c001617f:	a0 60 e6 02 c0       	mov    al,ds:0xc002e660
c0016184:	83 f0 01             	xor    eax,0x1
c0016187:	84 c0                	test   al,al
c0016189:	74 36                	je     c00161c1 <sendKeyboardToken(KeyboardToken)+0x3c9>
c001618b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001618e:	66 83 f8 1f          	cmp    ax,0x1f
c0016192:	76 09                	jbe    c001619d <sendKeyboardToken(KeyboardToken)+0x3a5>
c0016194:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016197:	66 83 f8 7e          	cmp    ax,0x7e
c001619b:	76 12                	jbe    c00161af <sendKeyboardToken(KeyboardToken)+0x3b7>
c001619d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161a0:	66 83 f8 0a          	cmp    ax,0xa
c00161a4:	74 09                	je     c00161af <sendKeyboardToken(KeyboardToken)+0x3b7>
c00161a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161a9:	66 83 f8 08          	cmp    ax,0x8
c00161ad:	75 12                	jne    c00161c1 <sendKeyboardToken(KeyboardToken)+0x3c9>
c00161af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161b2:	0f b6 c0             	movzx  eax,al
c00161b5:	83 ec 0c             	sub    esp,0xc
c00161b8:	50                   	push   eax
c00161b9:	e8 ce fb ff ff       	call   c0015d8c <sendKeyToTerminal(unsigned char)>
c00161be:	83 c4 10             	add    esp,0x10
c00161c1:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00161c4:	83 f0 01             	xor    eax,0x1
c00161c7:	84 c0                	test   al,al
c00161c9:	74 4f                	je     c001621a <sendKeyboardToken(KeyboardToken)+0x422>
c00161cb:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00161ce:	83 f0 01             	xor    eax,0x1
c00161d1:	84 c0                	test   al,al
c00161d3:	74 45                	je     c001621a <sendKeyboardToken(KeyboardToken)+0x422>
c00161d5:	a0 60 e6 02 c0       	mov    al,ds:0xc002e660
c00161da:	84 c0                	test   al,al
c00161dc:	74 3c                	je     c001621a <sendKeyboardToken(KeyboardToken)+0x422>
c00161de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161e1:	66 83 f8 3f          	cmp    ax,0x3f
c00161e5:	76 33                	jbe    c001621a <sendKeyboardToken(KeyboardToken)+0x422>
c00161e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161ea:	66 83 f8 7f          	cmp    ax,0x7f
c00161ee:	77 2a                	ja     c001621a <sendKeyboardToken(KeyboardToken)+0x422>
c00161f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161f3:	88 c2                	mov    dl,al
c00161f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161f8:	66 83 f8 5f          	cmp    ax,0x5f
c00161fc:	76 04                	jbe    c0016202 <sendKeyboardToken(KeyboardToken)+0x40a>
c00161fe:	b0 20                	mov    al,0x20
c0016200:	eb 02                	jmp    c0016204 <sendKeyboardToken(KeyboardToken)+0x40c>
c0016202:	b0 00                	mov    al,0x0
c0016204:	29 c2                	sub    edx,eax
c0016206:	88 d0                	mov    al,dl
c0016208:	83 e8 40             	sub    eax,0x40
c001620b:	0f b6 c0             	movzx  eax,al
c001620e:	83 ec 0c             	sub    esp,0xc
c0016211:	50                   	push   eax
c0016212:	e8 75 fb ff ff       	call   c0015d8c <sendKeyToTerminal(unsigned char)>
c0016217:	83 c4 10             	add    esp,0x10
c001621a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001621d:	66 3d 00 03          	cmp    ax,0x300
c0016221:	75 0f                	jne    c0016232 <sendKeyboardToken(KeyboardToken)+0x43a>
c0016223:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016226:	83 f0 01             	xor    eax,0x1
c0016229:	84 c0                	test   al,al
c001622b:	74 05                	je     c0016232 <sendKeyboardToken(KeyboardToken)+0x43a>
c001622d:	e8 6d ab ff ff       	call   c0010d9f <doTerminalCycle()>
c0016232:	90                   	nop
c0016233:	c9                   	leave  
c0016234:	c3                   	ret    

c0016235 <clearInternalKeybuffer(VgaText*)>:
c0016235:	55                   	push   ebp
c0016236:	89 e5                	mov    ebp,esp
c0016238:	83 ec 08             	sub    esp,0x8
c001623b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001623e:	05 34 11 00 00       	add    eax,0x1134
c0016243:	83 ec 0c             	sub    esp,0xc
c0016246:	50                   	push   eax
c0016247:	e8 48 a5 fe ff       	call   c0000794 <strlen>
c001624c:	83 c4 10             	add    esp,0x10
c001624f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016252:	81 c2 34 11 00 00    	add    edx,0x1134
c0016258:	83 ec 04             	sub    esp,0x4
c001625b:	50                   	push   eax
c001625c:	6a 00                	push   0x0
c001625e:	52                   	push   edx
c001625f:	e8 14 a5 fe ff       	call   c0000778 <memset>
c0016264:	83 c4 10             	add    esp,0x10
c0016267:	90                   	nop
c0016268:	c9                   	leave  
c0016269:	c3                   	ret    

c001626a <readKeyboard(VgaText*, char*, unsigned long)>:
c001626a:	55                   	push   ebp
c001626b:	89 e5                	mov    ebp,esp
c001626d:	83 ec 18             	sub    esp,0x18
c0016270:	fb                   	sti    
c0016271:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0016278:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001627c:	0f 84 8a 00 00 00    	je     c001630c <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c0016282:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016285:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c001628b:	84 c0                	test   al,al
c001628d:	75 11                	jne    c00162a0 <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c001628f:	e8 d3 7a 00 00       	call   c001dd67 <lockScheduler()>
c0016294:	e8 09 7e 00 00       	call   c001e0a2 <schedule()>
c0016299:	e8 cb 7a 00 00       	call   c001dd69 <unlockScheduler()>
c001629e:	eb e2                	jmp    c0016282 <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c00162a0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00162a3:	8d 50 01             	lea    edx,[eax+0x1]
c00162a6:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c00162a9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00162ac:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c00162b2:	88 10                	mov    BYTE PTR [eax],dl
c00162b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162b7:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c00162bd:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c00162c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162c3:	05 34 11 00 00       	add    eax,0x1134
c00162c8:	83 ec 0c             	sub    esp,0xc
c00162cb:	50                   	push   eax
c00162cc:	e8 c3 a4 fe ff       	call   c0000794 <strlen>
c00162d1:	83 c4 10             	add    esp,0x10
c00162d4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00162d7:	81 c2 34 11 00 00    	add    edx,0x1134
c00162dd:	8d 4a 01             	lea    ecx,[edx+0x1]
c00162e0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00162e3:	81 c2 34 11 00 00    	add    edx,0x1134
c00162e9:	83 ec 04             	sub    esp,0x4
c00162ec:	50                   	push   eax
c00162ed:	51                   	push   ecx
c00162ee:	52                   	push   edx
c00162ef:	e8 88 a3 fe ff       	call   c000067c <memmove>
c00162f4:	83 c4 10             	add    esp,0x10
c00162f7:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c00162fa:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00162fd:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0016301:	0f 85 71 ff ff ff    	jne    c0016278 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0016307:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001630a:	eb 03                	jmp    c001630f <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c001630c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001630f:	c9                   	leave  
c0016310:	c3                   	ret    
c0016311:	90                   	nop

c0016312 <Keyboard::Keyboard(char const*)>:
c0016312:	83 ec 0c             	sub    esp,0xc
c0016315:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016319:	83 ec 08             	sub    esp,0x8
c001631c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016320:	50                   	push   eax
c0016321:	e8 82 e1 ff ff       	call   c00144a8 <Device::Device(char const*)>
c0016326:	83 c4 10             	add    esp,0x10
c0016329:	ba 08 b1 02 c0       	mov    edx,0xc002b108
c001632e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016332:	89 10                	mov    DWORD PTR [eax],edx
c0016334:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016338:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0016342:	c6 05 44 e5 02 c0 01 	mov    BYTE PTR ds:0xc002e544,0x1
c0016349:	90                   	nop
c001634a:	83 c4 0c             	add    esp,0xc
c001634d:	c3                   	ret    

c001634e <Keyboard::~Keyboard()>:
c001634e:	83 ec 0c             	sub    esp,0xc
c0016351:	ba 08 b1 02 c0       	mov    edx,0xc002b108
c0016356:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001635a:	89 10                	mov    DWORD PTR [eax],edx
c001635c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016360:	83 ec 0c             	sub    esp,0xc
c0016363:	50                   	push   eax
c0016364:	e8 21 de ff ff       	call   c001418a <Device::~Device()>
c0016369:	83 c4 10             	add    esp,0x10
c001636c:	90                   	nop
c001636d:	83 c4 0c             	add    esp,0xc
c0016370:	c3                   	ret    
c0016371:	90                   	nop

c0016372 <Keyboard::~Keyboard()>:
c0016372:	83 ec 0c             	sub    esp,0xc
c0016375:	83 ec 0c             	sub    esp,0xc
c0016378:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001637c:	e8 cd ff ff ff       	call   c001634e <Keyboard::~Keyboard()>
c0016381:	83 c4 10             	add    esp,0x10
c0016384:	83 ec 08             	sub    esp,0x8
c0016387:	68 5c 01 00 00       	push   0x15c
c001638c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016390:	e8 1d ca ff ff       	call   c0012db2 <operator delete(void*, unsigned long)>
c0016395:	83 c4 10             	add    esp,0x10
c0016398:	83 c4 0c             	add    esp,0xc
c001639b:	c3                   	ret    

c001639c <LogicalDisk::close(int, int, void*)>:
c001639c:	83 c8 ff             	or     eax,0xffffffff
c001639f:	c3                   	ret    

c00163a0 <LogicalDisk::~LogicalDisk()>:
c00163a0:	83 ec 0c             	sub    esp,0xc
c00163a3:	ba b8 b1 02 c0       	mov    edx,0xc002b1b8
c00163a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163ac:	89 10                	mov    DWORD PTR [eax],edx
c00163ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163b2:	83 ec 0c             	sub    esp,0xc
c00163b5:	50                   	push   eax
c00163b6:	e8 cf dd ff ff       	call   c001418a <Device::~Device()>
c00163bb:	83 c4 10             	add    esp,0x10
c00163be:	90                   	nop
c00163bf:	83 c4 0c             	add    esp,0xc
c00163c2:	c3                   	ret    
c00163c3:	90                   	nop

c00163c4 <LogicalDisk::~LogicalDisk()>:
c00163c4:	83 ec 0c             	sub    esp,0xc
c00163c7:	83 ec 0c             	sub    esp,0xc
c00163ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163ce:	e8 cd ff ff ff       	call   c00163a0 <LogicalDisk::~LogicalDisk()>
c00163d3:	83 c4 10             	add    esp,0x10
c00163d6:	83 ec 08             	sub    esp,0x8
c00163d9:	68 74 01 00 00       	push   0x174
c00163de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163e2:	e8 cb c9 ff ff       	call   c0012db2 <operator delete(void*, unsigned long)>
c00163e7:	83 c4 10             	add    esp,0x10
c00163ea:	83 c4 0c             	add    esp,0xc
c00163ed:	c3                   	ret    

c00163ee <LogicalDisk::open(int, int, void*)>:
c00163ee:	83 ec 18             	sub    esp,0x18
c00163f1:	68 34 b1 02 c0       	push   0xc002b134
c00163f6:	e8 72 41 00 00       	call   c001a56d <Krnl::panic(char const*)>
c00163fb:	83 c8 ff             	or     eax,0xffffffff
c00163fe:	83 c4 1c             	add    esp,0x1c
c0016401:	c3                   	ret    

c0016402 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0016402:	53                   	push   ebx
c0016403:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0016407:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001640b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001640f:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0016415:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c001641b:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0016421:	77 10                	ja     c0016433 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0016423:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0016429:	89 d3                	mov    ebx,edx
c001642b:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0016431:	72 05                	jb     c0016438 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0016433:	83 c8 ff             	or     eax,0xffffffff
c0016436:	89 c2                	mov    edx,eax
c0016438:	5b                   	pop    ebx
c0016439:	c3                   	ret    

c001643a <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c001643a:	56                   	push   esi
c001643b:	83 c8 ff             	or     eax,0xffffffff
c001643e:	53                   	push   ebx
c001643f:	89 c2                	mov    edx,eax
c0016441:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0016445:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0016449:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001644d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016453:	77 27                	ja     c001647c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0016455:	89 d8                	mov    eax,ebx
c0016457:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c001645d:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0016463:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016468:	89 c2                	mov    edx,eax
c001646a:	73 10                	jae    c001647c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001646c:	89 c8                	mov    eax,ecx
c001646e:	89 da                	mov    edx,ebx
c0016470:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0016476:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c001647c:	5b                   	pop    ebx
c001647d:	5e                   	pop    esi
c001647e:	c3                   	ret    
c001647f:	90                   	nop

c0016480 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016480:	83 ec 1c             	sub    esp,0x1c
c0016483:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016487:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001648b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001648f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016493:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016497:	89 04 24             	mov    DWORD PTR [esp],eax
c001649a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001649e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00164a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00164a6:	83 ec 08             	sub    esp,0x8
c00164a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00164ad:	50                   	push   eax
c00164ae:	e8 f5 df ff ff       	call   c00144a8 <Device::Device(char const*)>
c00164b3:	83 c4 10             	add    esp,0x10
c00164b6:	ba b8 b1 02 c0       	mov    edx,0xc002b1b8
c00164bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00164bf:	89 10                	mov    DWORD PTR [eax],edx
c00164c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00164c5:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00164cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00164d0:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00164d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00164db:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c00164e5:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00164e9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00164ed:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00164f1:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c00164f7:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c00164fd:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016501:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016504:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016508:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c001650e:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0016514:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016518:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001651c:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0016522:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016526:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0016530:	90                   	nop
c0016531:	83 c4 1c             	add    esp,0x1c
c0016534:	c3                   	ret    
c0016535:	90                   	nop

c0016536 <LogicalDisk::assignDriveLetter()>:
c0016536:	55                   	push   ebp
c0016537:	57                   	push   edi
c0016538:	56                   	push   esi
c0016539:	53                   	push   ebx
c001653a:	83 ec 14             	sub    esp,0x14
c001653d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016541:	8b 3d 80 e9 02 c0    	mov    edi,DWORD PTR ds:0xc002e980
c0016547:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c001654d:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0016551:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0016557:	8b 3d 84 e9 02 c0    	mov    edi,DWORD PTR ds:0xc002e984
c001655d:	3c 01                	cmp    al,0x1
c001655f:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0016563:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0016567:	19 c0                	sbb    eax,eax
c0016569:	83 e0 02             	and    eax,0x2
c001656c:	83 c0 41             	add    eax,0x41
c001656f:	0f be e8             	movsx  ebp,al
c0016572:	3c 43                	cmp    al,0x43
c0016574:	75 10                	jne    c0016586 <LogicalDisk::assignDriveLetter()+0x50>
c0016576:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c001657d:	75 5d                	jne    c00165dc <LogicalDisk::assignDriveLetter()+0xa6>
c001657f:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0016584:	75 56                	jne    c00165dc <LogicalDisk::assignDriveLetter()+0xa6>
c0016586:	8d 75 bf             	lea    esi,[ebp-0x41]
c0016589:	ba 01 00 00 00       	mov    edx,0x1
c001658e:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0016592:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0016596:	d3 e2                	shl    edx,cl
c0016598:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001659c:	89 d7                	mov    edi,edx
c001659e:	89 d6                	mov    esi,edx
c00165a0:	c1 ff 1f             	sar    edi,0x1f
c00165a3:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c00165a7:	21 f9                	and    ecx,edi
c00165a9:	09 d1                	or     ecx,edx
c00165ab:	75 2f                	jne    c00165dc <LogicalDisk::assignDriveLetter()+0xa6>
c00165ad:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00165b1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00165b5:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c00165bb:	09 f2                	or     edx,esi
c00165bd:	89 15 80 e9 02 c0    	mov    DWORD PTR ds:0xc002e980,edx
c00165c3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00165c7:	09 fa                	or     edx,edi
c00165c9:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00165cd:	89 15 84 e9 02 c0    	mov    DWORD PTR ds:0xc002e984,edx
c00165d3:	89 1c bd a0 e9 02 c0 	mov    DWORD PTR [edi*4-0x3ffd1660],ebx
c00165da:	eb 08                	jmp    c00165e4 <LogicalDisk::assignDriveLetter()+0xae>
c00165dc:	45                   	inc    ebp
c00165dd:	40                   	inc    eax
c00165de:	3c 5b                	cmp    al,0x5b
c00165e0:	75 90                	jne    c0016572 <LogicalDisk::assignDriveLetter()+0x3c>
c00165e2:	31 c0                	xor    eax,eax
c00165e4:	83 c4 14             	add    esp,0x14
c00165e7:	5b                   	pop    ebx
c00165e8:	5e                   	pop    esi
c00165e9:	5f                   	pop    edi
c00165ea:	5d                   	pop    ebp
c00165eb:	c3                   	ret    

c00165ec <LogicalDisk::mount()>:
c00165ec:	56                   	push   esi
c00165ed:	53                   	push   ebx
c00165ee:	51                   	push   ecx
c00165ef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00165f3:	8b 1d 10 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e510
c00165f9:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0016603:	85 db                	test   ebx,ebx
c0016605:	74 50                	je     c0016657 <LogicalDisk::mount()+0x6b>
c0016607:	e8 46 77 00 00       	call   c001dd52 <getIRQNestingLevel()>
c001660c:	52                   	push   edx
c001660d:	52                   	push   edx
c001660e:	50                   	push   eax
c001660f:	68 58 b1 02 c0       	push   0xc002b158
c0016614:	e8 79 c8 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0016619:	83 c4 0c             	add    esp,0xc
c001661c:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0016623:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016625:	83 e8 41             	sub    eax,0x41
c0016628:	50                   	push   eax
c0016629:	56                   	push   esi
c001662a:	53                   	push   ebx
c001662b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001662e:	83 c4 10             	add    esp,0x10
c0016631:	84 c0                	test   al,al
c0016633:	74 08                	je     c001663d <LogicalDisk::mount()+0x51>
c0016635:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c001663b:	eb 1c                	jmp    c0016659 <LogicalDisk::mount()+0x6d>
c001663d:	e8 10 77 00 00       	call   c001dd52 <getIRQNestingLevel()>
c0016642:	51                   	push   ecx
c0016643:	51                   	push   ecx
c0016644:	50                   	push   eax
c0016645:	68 73 b1 02 c0       	push   0xc002b173
c001664a:	e8 43 c8 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001664f:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0016652:	83 c4 10             	add    esp,0x10
c0016655:	eb ac                	jmp    c0016603 <LogicalDisk::mount()+0x17>
c0016657:	31 c0                	xor    eax,eax
c0016659:	5a                   	pop    edx
c001665a:	5b                   	pop    ebx
c001665b:	5e                   	pop    esi
c001665c:	c3                   	ret    
c001665d:	90                   	nop

c001665e <LogicalDisk::unmount()>:
c001665e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016662:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001666c:	c3                   	ret    
c001666d:	90                   	nop

c001666e <LogicalDisk::eject()>:
c001666e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016672:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016678:	8b 10                	mov    edx,DWORD PTR [eax]
c001667a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001667e:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0016681:	90                   	nop

c0016682 <LogicalDisk::unassignDriveLetter()>:
c0016682:	57                   	push   edi
c0016683:	56                   	push   esi
c0016684:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016688:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c001668f:	84 c9                	test   cl,cl
c0016691:	75 0f                	jne    c00166a2 <LogicalDisk::unassignDriveLetter()+0x20>
c0016693:	c7 44 24 0c 8e b1 02 c0 	mov    DWORD PTR [esp+0xc],0xc002b18e
c001669b:	5e                   	pop    esi
c001669c:	5f                   	pop    edi
c001669d:	e9 cb 3e 00 00       	jmp    c001a56d <Krnl::panic(char const*)>
c00166a2:	83 e9 41             	sub    ecx,0x41
c00166a5:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c00166ac:	b8 01 00 00 00       	mov    eax,0x1
c00166b1:	c7 04 8d a0 e9 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd1660],0x0
c00166bc:	d3 e0                	shl    eax,cl
c00166be:	89 c7                	mov    edi,eax
c00166c0:	f7 d0                	not    eax
c00166c2:	c1 ff 1f             	sar    edi,0x1f
c00166c5:	21 05 80 e9 02 c0    	and    DWORD PTR ds:0xc002e980,eax
c00166cb:	89 fe                	mov    esi,edi
c00166cd:	f7 d6                	not    esi
c00166cf:	21 35 84 e9 02 c0    	and    DWORD PTR ds:0xc002e984,esi
c00166d5:	5e                   	pop    esi
c00166d6:	5f                   	pop    edi
c00166d7:	c3                   	ret    

c00166d8 <LogicalDisk::read(unsigned long long, int, void*)>:
c00166d8:	57                   	push   edi
c00166d9:	56                   	push   esi
c00166da:	53                   	push   ebx
c00166db:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00166df:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00166e3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00166e7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00166eb:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00166f1:	77 41                	ja     c0016734 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c00166f3:	99                   	cdq    
c00166f4:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00166fa:	01 c8                	add    eax,ecx
c00166fc:	11 da                	adc    edx,ebx
c00166fe:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016704:	19 d7                	sbb    edi,edx
c0016706:	72 33                	jb     c001673b <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0016708:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001670e:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016714:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016718:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001671c:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016722:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016728:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001672c:	5b                   	pop    ebx
c001672d:	5e                   	pop    esi
c001672e:	5f                   	pop    edi
c001672f:	e9 b0 0a 00 00       	jmp    c00171e4 <VCache::read(unsigned long long, int, void*)>
c0016734:	b8 05 00 00 00       	mov    eax,0x5
c0016739:	eb 05                	jmp    c0016740 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c001673b:	b8 07 00 00 00       	mov    eax,0x7
c0016740:	5b                   	pop    ebx
c0016741:	5e                   	pop    esi
c0016742:	5f                   	pop    edi
c0016743:	c3                   	ret    

c0016744 <LogicalDisk::write(unsigned long long, int, void*)>:
c0016744:	57                   	push   edi
c0016745:	56                   	push   esi
c0016746:	53                   	push   ebx
c0016747:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001674b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001674f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016753:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016757:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001675d:	77 41                	ja     c00167a0 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c001675f:	99                   	cdq    
c0016760:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016766:	01 c8                	add    eax,ecx
c0016768:	11 da                	adc    edx,ebx
c001676a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016770:	19 d7                	sbb    edi,edx
c0016772:	72 33                	jb     c00167a7 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0016774:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001677a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016780:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016784:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016788:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001678e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016794:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016798:	5b                   	pop    ebx
c0016799:	5e                   	pop    esi
c001679a:	5f                   	pop    edi
c001679b:	e9 4e 09 00 00       	jmp    c00170ee <VCache::write(unsigned long long, int, void*)>
c00167a0:	b8 05 00 00 00       	mov    eax,0x5
c00167a5:	eb 05                	jmp    c00167ac <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c00167a7:	b8 07 00 00 00       	mov    eax,0x7
c00167ac:	5b                   	pop    ebx
c00167ad:	5e                   	pop    esi
c00167ae:	5f                   	pop    edi
c00167af:	c3                   	ret    

c00167b0 <Mouse::Mouse(char const*)>:
c00167b0:	83 ec 0c             	sub    esp,0xc
c00167b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167b7:	83 ec 08             	sub    esp,0x8
c00167ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00167be:	50                   	push   eax
c00167bf:	e8 e4 dc ff ff       	call   c00144a8 <Device::Device(char const*)>
c00167c4:	83 c4 10             	add    esp,0x10
c00167c7:	ba e4 b1 02 c0       	mov    edx,0xc002b1e4
c00167cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167d0:	89 10                	mov    DWORD PTR [eax],edx
c00167d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167d6:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c00167e0:	90                   	nop
c00167e1:	83 c4 0c             	add    esp,0xc
c00167e4:	c3                   	ret    
c00167e5:	90                   	nop

c00167e6 <Mouse::~Mouse()>:
c00167e6:	83 ec 0c             	sub    esp,0xc
c00167e9:	ba e4 b1 02 c0       	mov    edx,0xc002b1e4
c00167ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167f2:	89 10                	mov    DWORD PTR [eax],edx
c00167f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167f8:	83 ec 0c             	sub    esp,0xc
c00167fb:	50                   	push   eax
c00167fc:	e8 89 d9 ff ff       	call   c001418a <Device::~Device()>
c0016801:	83 c4 10             	add    esp,0x10
c0016804:	90                   	nop
c0016805:	83 c4 0c             	add    esp,0xc
c0016808:	c3                   	ret    
c0016809:	90                   	nop

c001680a <Mouse::~Mouse()>:
c001680a:	83 ec 0c             	sub    esp,0xc
c001680d:	83 ec 0c             	sub    esp,0xc
c0016810:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016814:	e8 cd ff ff ff       	call   c00167e6 <Mouse::~Mouse()>
c0016819:	83 c4 10             	add    esp,0x10
c001681c:	83 ec 08             	sub    esp,0x8
c001681f:	68 58 01 00 00       	push   0x158
c0016824:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016828:	e8 85 c5 ff ff       	call   c0012db2 <operator delete(void*, unsigned long)>
c001682d:	83 c4 10             	add    esp,0x10
c0016830:	83 c4 0c             	add    esp,0xc
c0016833:	c3                   	ret    

c0016834 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016834:	55                   	push   ebp
c0016835:	57                   	push   edi
c0016836:	56                   	push   esi
c0016837:	53                   	push   ebx
c0016838:	81 ec 28 01 00 00    	sub    esp,0x128
c001683e:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0016845:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001684c:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0016853:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c001685a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001685e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0016862:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016869:	e8 36 dd ff ff       	call   c00145a4 <Device::getName()>
c001686e:	5a                   	pop    edx
c001686f:	59                   	pop    ecx
c0016870:	50                   	push   eax
c0016871:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0016875:	55                   	push   ebp
c0016876:	e8 b9 9f fe ff       	call   c0000834 <strcpy>
c001687b:	5b                   	pop    ebx
c001687c:	58                   	pop    eax
c001687d:	68 08 b2 02 c0       	push   0xc002b208
c0016882:	55                   	push   ebp
c0016883:	e8 ec a0 fe ff       	call   c0000974 <strcat>
c0016888:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c001688f:	e8 ac 8f ff ff       	call   c000f840 <malloc>
c0016894:	83 c4 0c             	add    esp,0xc
c0016897:	89 c3                	mov    ebx,eax
c0016899:	57                   	push   edi
c001689a:	56                   	push   esi
c001689b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001689f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00168a3:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00168aa:	55                   	push   ebp
c00168ab:	50                   	push   eax
c00168ac:	e8 cf fb ff ff       	call   c0016480 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00168b1:	83 c4 14             	add    esp,0x14
c00168b4:	53                   	push   ebx
c00168b5:	e8 7c fc ff ff       	call   c0016536 <LogicalDisk::assignDriveLetter()>
c00168ba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00168bd:	89 c6                	mov    esi,eax
c00168bf:	e8 28 fd ff ff       	call   c00165ec <LogicalDisk::mount()>
c00168c4:	58                   	pop    eax
c00168c5:	5a                   	pop    edx
c00168c6:	53                   	push   ebx
c00168c7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00168ce:	e8 e5 d9 ff ff       	call   c00142b8 <Device::addChild(Device*)>
c00168d3:	59                   	pop    ecx
c00168d4:	89 f0                	mov    eax,esi
c00168d6:	5b                   	pop    ebx
c00168d7:	0f be f0             	movsx  esi,al
c00168da:	56                   	push   esi
c00168db:	68 13 b2 02 c0       	push   0xc002b213
c00168e0:	e8 ad c5 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c00168e5:	81 c4 2c 01 00 00    	add    esp,0x12c
c00168eb:	5b                   	pop    ebx
c00168ec:	5e                   	pop    esi
c00168ed:	5f                   	pop    edi
c00168ee:	5d                   	pop    ebp
c00168ef:	c3                   	ret    

c00168f0 <createPartitionsForDisk(PhysicalDisk*)>:
c00168f0:	55                   	push   ebp
c00168f1:	57                   	push   edi
c00168f2:	56                   	push   esi
c00168f3:	53                   	push   ebx
c00168f4:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00168fa:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0016901:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0016907:	3d 00 02 00 00       	cmp    eax,0x200
c001690c:	74 27                	je     c0016935 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c001690e:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0016914:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c001691a:	83 ec 10             	sub    esp,0x10
c001691d:	0f a4 f7 0a          	shld   edi,esi,0xa
c0016921:	99                   	cdq    
c0016922:	c1 e6 0a             	shl    esi,0xa
c0016925:	52                   	push   edx
c0016926:	89 fd                	mov    ebp,edi
c0016928:	50                   	push   eax
c0016929:	55                   	push   ebp
c001692a:	56                   	push   esi
c001692b:	e8 3c 00 01 00       	call   c002696c <__udivdi3>
c0016930:	e9 b1 00 00 00       	jmp    c00169e6 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016935:	83 ec 0c             	sub    esp,0xc
c0016938:	8b 03                	mov    eax,DWORD PTR [ebx]
c001693a:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c001693e:	56                   	push   esi
c001693f:	6a 01                	push   0x1
c0016941:	6a 00                	push   0x0
c0016943:	6a 00                	push   0x0
c0016945:	53                   	push   ebx
c0016946:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0016949:	83 c4 20             	add    esp,0x20
c001694c:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0016954:	75 0a                	jne    c0016960 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016956:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c001695e:	74 2c                	je     c001698c <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0016960:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016966:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001696c:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016972:	83 ec 10             	sub    esp,0x10
c0016975:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016979:	89 f7                	mov    edi,esi
c001697b:	c1 e0 0a             	shl    eax,0xa
c001697e:	c1 ff 1f             	sar    edi,0x1f
c0016981:	57                   	push   edi
c0016982:	56                   	push   esi
c0016983:	52                   	push   edx
c0016984:	50                   	push   eax
c0016985:	e8 e2 ff 00 00       	call   c002696c <__udivdi3>
c001698a:	eb 5a                	jmp    c00169e6 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c001698c:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0016993:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c001699a:	83 e1 7f             	and    ecx,0x7f
c001699d:	83 e0 7f             	and    eax,0x7f
c00169a0:	01 c1                	add    ecx,eax
c00169a2:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c00169a9:	83 e0 7f             	and    eax,0x7f
c00169ac:	01 c1                	add    ecx,eax
c00169ae:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c00169b5:	83 e0 7f             	and    eax,0x7f
c00169b8:	00 c1                	add    cl,al
c00169ba:	74 41                	je     c00169fd <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c00169bc:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00169c2:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00169c8:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00169ce:	83 ec 10             	sub    esp,0x10
c00169d1:	0f a4 c2 0a          	shld   edx,eax,0xa
c00169d5:	89 f7                	mov    edi,esi
c00169d7:	c1 e0 0a             	shl    eax,0xa
c00169da:	c1 ff 1f             	sar    edi,0x1f
c00169dd:	57                   	push   edi
c00169de:	56                   	push   esi
c00169df:	52                   	push   edx
c00169e0:	50                   	push   eax
c00169e1:	e8 86 ff 00 00       	call   c002696c <__udivdi3>
c00169e6:	83 c4 14             	add    esp,0x14
c00169e9:	52                   	push   edx
c00169ea:	50                   	push   eax
c00169eb:	6a 00                	push   0x0
c00169ed:	6a 00                	push   0x0
c00169ef:	53                   	push   ebx
c00169f0:	e8 3f fe ff ff       	call   c0016834 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00169f5:	83 c4 20             	add    esp,0x20
c00169f8:	e9 79 01 00 00       	jmp    c0016b76 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c00169fd:	89 f0                	mov    eax,esi
c00169ff:	31 f6                	xor    esi,esi
c0016a01:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016a08:	75 02                	jne    c0016a0c <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016a0a:	89 f1                	mov    ecx,esi
c0016a0c:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016a13:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016a1a:	c1 e2 08             	shl    edx,0x8
c0016a1d:	c1 e7 10             	shl    edi,0x10
c0016a20:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016a28:	09 fa                	or     edx,edi
c0016a2a:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016a32:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016a39:	83 c0 10             	add    eax,0x10
c0016a3c:	09 fa                	or     edx,edi
c0016a3e:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016a45:	c1 e7 18             	shl    edi,0x18
c0016a48:	09 fa                	or     edx,edi
c0016a4a:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016a51:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016a55:	c1 e7 10             	shl    edi,0x10
c0016a58:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016a5f:	c1 e2 08             	shl    edx,0x8
c0016a62:	09 fa                	or     edx,edi
c0016a64:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016a6b:	09 fa                	or     edx,edi
c0016a6d:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016a74:	c1 e7 18             	shl    edi,0x18
c0016a77:	09 fa                	or     edx,edi
c0016a79:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016a7d:	46                   	inc    esi
c0016a7e:	83 fe 04             	cmp    esi,0x4
c0016a81:	0f 85 7a ff ff ff    	jne    c0016a01 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016a87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a8b:	83 f0 01             	xor    eax,0x1
c0016a8e:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016a92:	75 57                	jne    c0016aeb <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016a94:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016a98:	83 f0 01             	xor    eax,0x1
c0016a9b:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016a9f:	75 4a                	jne    c0016aeb <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016aa1:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016aa5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016aad:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016ab5:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016abb:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016ac1:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016ac7:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016acb:	89 f7                	mov    edi,esi
c0016acd:	c1 e0 0a             	shl    eax,0xa
c0016ad0:	c1 ff 1f             	sar    edi,0x1f
c0016ad3:	57                   	push   edi
c0016ad4:	56                   	push   esi
c0016ad5:	52                   	push   edx
c0016ad6:	50                   	push   eax
c0016ad7:	e8 90 fe 00 00       	call   c002696c <__udivdi3>
c0016adc:	83 c4 10             	add    esp,0x10
c0016adf:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016ae3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016ae7:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016aeb:	84 c9                	test   cl,cl
c0016aed:	74 53                	je     c0016b42 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016aef:	0f b6 c9             	movzx  ecx,cl
c0016af2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016af6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016afa:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016afe:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016b02:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016b06:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016b0a:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016b0e:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016b12:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016b16:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016b1a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016b1e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016b22:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016b26:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016b2a:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016b2e:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016b32:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016b36:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016b3a:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016b3e:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016b42:	31 ed                	xor    ebp,ebp
c0016b44:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016b48:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016b4c:	89 f8                	mov    eax,edi
c0016b4e:	09 f0                	or     eax,esi
c0016b50:	74 1e                	je     c0016b70 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016b52:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016b56:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016b5a:	89 d1                	mov    ecx,edx
c0016b5c:	09 c1                	or     ecx,eax
c0016b5e:	74 10                	je     c0016b70 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016b60:	83 ec 0c             	sub    esp,0xc
c0016b63:	57                   	push   edi
c0016b64:	56                   	push   esi
c0016b65:	52                   	push   edx
c0016b66:	50                   	push   eax
c0016b67:	53                   	push   ebx
c0016b68:	e8 c7 fc ff ff       	call   c0016834 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016b6d:	83 c4 20             	add    esp,0x20
c0016b70:	45                   	inc    ebp
c0016b71:	83 fd 04             	cmp    ebp,0x4
c0016b74:	75 ce                	jne    c0016b44 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016b76:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016b7c:	5b                   	pop    ebx
c0016b7d:	5e                   	pop    esi
c0016b7e:	5f                   	pop    edi
c0016b7f:	5d                   	pop    ebp
c0016b80:	c3                   	ret    
c0016b81:	90                   	nop

c0016b82 <Serial::Serial(char const*)>:
c0016b82:	83 ec 0c             	sub    esp,0xc
c0016b85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b89:	83 ec 08             	sub    esp,0x8
c0016b8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016b90:	50                   	push   eax
c0016b91:	e8 12 d9 ff ff       	call   c00144a8 <Device::Device(char const*)>
c0016b96:	83 c4 10             	add    esp,0x10
c0016b99:	ba 40 b2 02 c0       	mov    edx,0xc002b240
c0016b9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ba2:	89 10                	mov    DWORD PTR [eax],edx
c0016ba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ba8:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016bb2:	90                   	nop
c0016bb3:	83 c4 0c             	add    esp,0xc
c0016bb6:	c3                   	ret    
c0016bb7:	90                   	nop

c0016bb8 <Serial::~Serial()>:
c0016bb8:	83 ec 0c             	sub    esp,0xc
c0016bbb:	ba 40 b2 02 c0       	mov    edx,0xc002b240
c0016bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bc4:	89 10                	mov    DWORD PTR [eax],edx
c0016bc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bca:	83 ec 0c             	sub    esp,0xc
c0016bcd:	50                   	push   eax
c0016bce:	e8 b7 d5 ff ff       	call   c001418a <Device::~Device()>
c0016bd3:	83 c4 10             	add    esp,0x10
c0016bd6:	90                   	nop
c0016bd7:	83 c4 0c             	add    esp,0xc
c0016bda:	c3                   	ret    
c0016bdb:	90                   	nop

c0016bdc <Serial::~Serial()>:
c0016bdc:	83 ec 0c             	sub    esp,0xc
c0016bdf:	83 ec 0c             	sub    esp,0xc
c0016be2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016be6:	e8 cd ff ff ff       	call   c0016bb8 <Serial::~Serial()>
c0016beb:	83 c4 10             	add    esp,0x10
c0016bee:	83 ec 08             	sub    esp,0x8
c0016bf1:	68 58 01 00 00       	push   0x158
c0016bf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016bfa:	e8 b3 c1 ff ff       	call   c0012db2 <operator delete(void*, unsigned long)>
c0016bff:	83 c4 10             	add    esp,0x10
c0016c02:	83 c4 0c             	add    esp,0xc
c0016c05:	c3                   	ret    

c0016c06 <Timer::Timer(char const*)>:
c0016c06:	83 ec 0c             	sub    esp,0xc
c0016c09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c0d:	83 ec 08             	sub    esp,0x8
c0016c10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c14:	50                   	push   eax
c0016c15:	e8 8e d8 ff ff       	call   c00144a8 <Device::Device(char const*)>
c0016c1a:	83 c4 10             	add    esp,0x10
c0016c1d:	ba 84 b2 02 c0       	mov    edx,0xc002b284
c0016c22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c26:	89 10                	mov    DWORD PTR [eax],edx
c0016c28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c2c:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016c36:	90                   	nop
c0016c37:	83 c4 0c             	add    esp,0xc
c0016c3a:	c3                   	ret    
c0016c3b:	90                   	nop

c0016c3c <Timer::~Timer()>:
c0016c3c:	83 ec 0c             	sub    esp,0xc
c0016c3f:	ba 84 b2 02 c0       	mov    edx,0xc002b284
c0016c44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c48:	89 10                	mov    DWORD PTR [eax],edx
c0016c4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c4e:	83 ec 0c             	sub    esp,0xc
c0016c51:	50                   	push   eax
c0016c52:	e8 33 d5 ff ff       	call   c001418a <Device::~Device()>
c0016c57:	83 c4 10             	add    esp,0x10
c0016c5a:	90                   	nop
c0016c5b:	83 c4 0c             	add    esp,0xc
c0016c5e:	c3                   	ret    
c0016c5f:	90                   	nop

c0016c60 <Timer::~Timer()>:
c0016c60:	83 ec 0c             	sub    esp,0xc
c0016c63:	83 ec 0c             	sub    esp,0xc
c0016c66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c6a:	e8 cd ff ff ff       	call   c0016c3c <Timer::~Timer()>
c0016c6f:	83 c4 10             	add    esp,0x10
c0016c72:	83 ec 08             	sub    esp,0x8
c0016c75:	68 5c 01 00 00       	push   0x15c
c0016c7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c7e:	e8 2f c1 ff ff       	call   c0012db2 <operator delete(void*, unsigned long)>
c0016c83:	83 c4 10             	add    esp,0x10
c0016c86:	83 c4 0c             	add    esp,0xc
c0016c89:	c3                   	ret    

c0016c8a <Timer::read()>:
c0016c8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016c8e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016c94:	c3                   	ret    

c0016c95 <timerHandler(unsigned long long)>:
c0016c95:	55                   	push   ebp
c0016c96:	57                   	push   edi
c0016c97:	56                   	push   esi
c0016c98:	53                   	push   ebx
c0016c99:	83 ec 0c             	sub    esp,0xc
c0016c9c:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016ca0:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016ca4:	01 35 10 ea 02 c0    	add    DWORD PTR ds:0xc002ea10,esi
c0016caa:	11 3d 14 ea 02 c0    	adc    DWORD PTR ds:0xc002ea14,edi
c0016cb0:	80 3d 8d e3 02 c0 00 	cmp    BYTE PTR ds:0xc002e38d,0x0
c0016cb7:	0f 84 07 01 00 00    	je     c0016dc4 <timerHandler(unsigned long long)+0x12f>
c0016cbd:	e8 cc 70 00 00       	call   c001dd8e <lockStuff()>
c0016cc2:	83 ec 0c             	sub    esp,0xc
c0016cc5:	68 dc 18 03 c0       	push   0xc00318dc
c0016cca:	e8 0f 1d 01 00       	call   c00289de <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016ccf:	c7 04 24 dc 18 03 c0 	mov    DWORD PTR [esp],0xc00318dc
c0016cd6:	89 c3                	mov    ebx,eax
c0016cd8:	e8 09 1d 01 00       	call   c00289e6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016cdd:	83 c4 10             	add    esp,0x10
c0016ce0:	84 c0                	test   al,al
c0016ce2:	74 60                	je     c0016d44 <timerHandler(unsigned long long)+0xaf>
c0016ce4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016cea:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0016ced:	85 c0                	test   eax,eax
c0016cef:	0f 85 91 00 00 00    	jne    c0016d86 <timerHandler(unsigned long long)+0xf1>
c0016cf5:	e9 be 00 00 00       	jmp    c0016db8 <timerHandler(unsigned long long)+0x123>
c0016cfa:	83 ec 0c             	sub    esp,0xc
c0016cfd:	55                   	push   ebp
c0016cfe:	e8 7b 76 00 00       	call   c001e37e <unblockTask(ThreadControlBlock*)>
c0016d03:	83 c4 10             	add    esp,0x10
c0016d06:	39 eb                	cmp    ebx,ebp
c0016d08:	75 12                	jne    c0016d1c <timerHandler(unsigned long long)+0x87>
c0016d0a:	83 ec 0c             	sub    esp,0xc
c0016d0d:	68 dc 18 03 c0       	push   0xc00318dc
c0016d12:	e8 c7 1c 01 00       	call   c00289de <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016d17:	89 c3                	mov    ebx,eax
c0016d19:	83 c4 10             	add    esp,0x10
c0016d1c:	83 ec 0c             	sub    esp,0xc
c0016d1f:	68 dc 18 03 c0       	push   0xc00318dc
c0016d24:	e8 bd 1c 01 00       	call   c00289e6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016d29:	83 c4 10             	add    esp,0x10
c0016d2c:	84 c0                	test   al,al
c0016d2e:	75 b4                	jne    c0016ce4 <timerHandler(unsigned long long)+0x4f>
c0016d30:	83 ec 0c             	sub    esp,0xc
c0016d33:	68 dc 18 03 c0       	push   0xc00318dc
c0016d38:	e8 a1 1c 01 00       	call   c00289de <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016d3d:	83 c4 10             	add    esp,0x10
c0016d40:	39 d8                	cmp    eax,ebx
c0016d42:	74 a0                	je     c0016ce4 <timerHandler(unsigned long long)+0x4f>
c0016d44:	83 ec 0c             	sub    esp,0xc
c0016d47:	68 dc 18 03 c0       	push   0xc00318dc
c0016d4c:	e8 8d 1c 01 00       	call   c00289de <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016d51:	c7 04 24 dc 18 03 c0 	mov    DWORD PTR [esp],0xc00318dc
c0016d58:	89 c5                	mov    ebp,eax
c0016d5a:	e8 a3 1c 01 00       	call   c0028a02 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016d5f:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016d62:	83 c4 10             	add    esp,0x10
c0016d65:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016d68:	39 15 10 ea 02 c0    	cmp    DWORD PTR ds:0xc002ea10,edx
c0016d6e:	a1 14 ea 02 c0       	mov    eax,ds:0xc002ea14
c0016d73:	19 c8                	sbb    eax,ecx
c0016d75:	73 83                	jae    c0016cfa <timerHandler(unsigned long long)+0x65>
c0016d77:	50                   	push   eax
c0016d78:	50                   	push   eax
c0016d79:	55                   	push   ebp
c0016d7a:	68 dc 18 03 c0       	push   0xc00318dc
c0016d7f:	e8 2c 1d 01 00       	call   c0028ab0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016d84:	eb 93                	jmp    c0016d19 <timerHandler(unsigned long long)+0x84>
c0016d86:	80 3d 8c e3 02 c0 00 	cmp    BYTE PTR ds:0xc002e38c,0x0
c0016d8d:	74 29                	je     c0016db8 <timerHandler(unsigned long long)+0x123>
c0016d8f:	39 c6                	cmp    esi,eax
c0016d91:	bb 00 00 00 00       	mov    ebx,0x0
c0016d96:	19 df                	sbb    edi,ebx
c0016d98:	72 19                	jb     c0016db3 <timerHandler(unsigned long long)+0x11e>
c0016d9a:	e8 c8 6f 00 00       	call   c001dd67 <lockScheduler()>
c0016d9f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016da4:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016da7:	e8 f6 72 00 00       	call   c001e0a2 <schedule()>
c0016dac:	e8 b8 6f 00 00       	call   c001dd69 <unlockScheduler()>
c0016db1:	eb 05                	jmp    c0016db8 <timerHandler(unsigned long long)+0x123>
c0016db3:	29 f0                	sub    eax,esi
c0016db5:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0016db8:	83 c4 0c             	add    esp,0xc
c0016dbb:	5b                   	pop    ebx
c0016dbc:	5e                   	pop    esi
c0016dbd:	5f                   	pop    edi
c0016dbe:	5d                   	pop    ebp
c0016dbf:	e9 63 73 00 00       	jmp    c001e127 <unlockStuff()>
c0016dc4:	83 c4 0c             	add    esp,0xc
c0016dc7:	5b                   	pop    ebx
c0016dc8:	5e                   	pop    esi
c0016dc9:	5f                   	pop    edi
c0016dca:	5d                   	pop    ebp
c0016dcb:	c3                   	ret    

c0016dcc <setupTimer(int)>:
c0016dcc:	57                   	push   edi
c0016dcd:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0016dd2:	56                   	push   esi
c0016dd3:	53                   	push   ebx
c0016dd4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016dd8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016dde:	83 ec 0c             	sub    esp,0xc
c0016de1:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016de7:	e8 b8 d7 ff ff       	call   c00145a4 <Device::getName()>
c0016dec:	83 c4 10             	add    esp,0x10
c0016def:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016df2:	0f 85 8d 00 00 00    	jne    c0016e85 <setupTimer(int)+0xb9>
c0016df8:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0016dfd:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016e04:	74 7f                	je     c0016e85 <setupTimer(int)+0xb9>
c0016e06:	83 ec 0c             	sub    esp,0xc
c0016e09:	68 5c 01 00 00       	push   0x15c
c0016e0e:	e8 2d 8a ff ff       	call   c000f840 <malloc>
c0016e13:	89 04 24             	mov    DWORD PTR [esp],eax
c0016e16:	89 c3                	mov    ebx,eax
c0016e18:	e8 31 f7 00 00       	call   c002654e <PIT::PIT()>
c0016e1d:	59                   	pop    ecx
c0016e1e:	5f                   	pop    edi
c0016e1f:	53                   	push   ebx
c0016e20:	ff 35 88 e3 02 c0    	push   DWORD PTR ds:0xc002e388
c0016e26:	e8 8d d4 ff ff       	call   c00142b8 <Device::addChild(Device*)>
c0016e2b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016e2d:	6a 00                	push   0x0
c0016e2f:	6a 00                	push   0x0
c0016e31:	56                   	push   esi
c0016e32:	53                   	push   ebx
c0016e33:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016e36:	83 c4 14             	add    esp,0x14
c0016e39:	68 60 01 00 00       	push   0x160
c0016e3e:	e8 fd 89 ff ff       	call   c000f840 <malloc>
c0016e43:	89 04 24             	mov    DWORD PTR [esp],eax
c0016e46:	89 c7                	mov    edi,eax
c0016e48:	e8 b1 f5 00 00       	call   c00263fe <APICTimer::APICTimer()>
c0016e4d:	6a 00                	push   0x0
c0016e4f:	6a 00                	push   0x0
c0016e51:	56                   	push   esi
c0016e52:	57                   	push   edi
c0016e53:	e8 a8 f4 00 00       	call   c0026300 <APICTimer::open(int, int, void*)>
c0016e58:	83 c4 20             	add    esp,0x20
c0016e5b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016e5d:	6a 00                	push   0x0
c0016e5f:	6a 00                	push   0x0
c0016e61:	6a 00                	push   0x0
c0016e63:	53                   	push   ebx
c0016e64:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016e67:	58                   	pop    eax
c0016e68:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0016e6d:	5a                   	pop    edx
c0016e6e:	57                   	push   edi
c0016e6f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016e75:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016e7b:	e8 38 d4 ff ff       	call   c00142b8 <Device::addChild(Device*)>
c0016e80:	83 c4 10             	add    esp,0x10
c0016e83:	eb 33                	jmp    c0016eb8 <setupTimer(int)+0xec>
c0016e85:	83 ec 0c             	sub    esp,0xc
c0016e88:	68 5c 01 00 00       	push   0x15c
c0016e8d:	e8 ae 89 ff ff       	call   c000f840 <malloc>
c0016e92:	89 04 24             	mov    DWORD PTR [esp],eax
c0016e95:	89 c3                	mov    ebx,eax
c0016e97:	e8 b2 f6 00 00       	call   c002654e <PIT::PIT()>
c0016e9c:	58                   	pop    eax
c0016e9d:	5a                   	pop    edx
c0016e9e:	53                   	push   ebx
c0016e9f:	ff 35 88 e3 02 c0    	push   DWORD PTR ds:0xc002e388
c0016ea5:	e8 0e d4 ff ff       	call   c00142b8 <Device::addChild(Device*)>
c0016eaa:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016eac:	6a 00                	push   0x0
c0016eae:	6a 00                	push   0x0
c0016eb0:	56                   	push   esi
c0016eb1:	53                   	push   ebx
c0016eb2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016eb5:	83 c4 20             	add    esp,0x20
c0016eb8:	89 d8                	mov    eax,ebx
c0016eba:	5b                   	pop    ebx
c0016ebb:	5e                   	pop    esi
c0016ebc:	5f                   	pop    edi
c0016ebd:	c3                   	ret    

c0016ebe <VCache::VCache(PhysicalDisk*)>:
c0016ebe:	53                   	push   ebx
c0016ebf:	83 ec 18             	sub    esp,0x18
c0016ec2:	ba b4 b2 02 c0       	mov    edx,0xc002b2b4
c0016ec7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ecb:	89 10                	mov    DWORD PTR [eax],edx
c0016ecd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ed1:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016ed8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016edc:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016ee3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ee7:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016eee:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016ef5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ef9:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016f00:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016f07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f0b:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016f12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f16:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016f1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f1e:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0016f25:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0016f2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f30:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016f34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f38:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0016f3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f40:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016f44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f48:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016f4f:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0016f57:	83 ec 0c             	sub    esp,0xc
c0016f5a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016f5e:	e8 dd 88 ff ff       	call   c000f840 <malloc>
c0016f63:	83 c4 10             	add    esp,0x10
c0016f66:	89 c3                	mov    ebx,eax
c0016f68:	83 ec 0c             	sub    esp,0xc
c0016f6b:	53                   	push   ebx
c0016f6c:	e8 15 6f 00 00       	call   c001de86 <Mutex::Mutex()>
c0016f71:	83 c4 10             	add    esp,0x10
c0016f74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f78:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0016f7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f7f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016f83:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0016f86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f8a:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0016f91:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016f95:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016f9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f9f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016fa2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016fa6:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0016fac:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016fb2:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016fb6:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0016fb9:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0016fbc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fc0:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016fc4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016fc8:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016fce:	05 00 01 00 00       	add    eax,0x100
c0016fd3:	c1 e0 04             	shl    eax,0x4
c0016fd6:	83 ec 0c             	sub    esp,0xc
c0016fd9:	50                   	push   eax
c0016fda:	e8 61 88 ff ff       	call   c000f840 <malloc>
c0016fdf:	83 c4 10             	add    esp,0x10
c0016fe2:	89 c2                	mov    edx,eax
c0016fe4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fe8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016feb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fef:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016ff6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ffa:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016ffe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017002:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017008:	c1 e0 07             	shl    eax,0x7
c001700b:	83 ec 0c             	sub    esp,0xc
c001700e:	50                   	push   eax
c001700f:	e8 2c 88 ff ff       	call   c000f840 <malloc>
c0017014:	83 c4 10             	add    esp,0x10
c0017017:	89 c2                	mov    edx,eax
c0017019:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001701d:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0017020:	90                   	nop
c0017021:	83 c4 18             	add    esp,0x18
c0017024:	5b                   	pop    ebx
c0017025:	c3                   	ret    

c0017026 <VCache::invalidateReadBuffer()>:
c0017026:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001702a:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0017030:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0017034:	c3                   	ret    
c0017035:	90                   	nop

c0017036 <VCache::writeWriteBuffer()>:
c0017036:	53                   	push   ebx
c0017037:	83 ec 14             	sub    esp,0x14
c001703a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001703e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017041:	8b 10                	mov    edx,DWORD PTR [eax]
c0017043:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0017046:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0017049:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001704c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001704f:	50                   	push   eax
c0017050:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0017053:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c001705a:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0017061:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0017065:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c001706c:	83 c4 28             	add    esp,0x28
c001706f:	5b                   	pop    ebx
c0017070:	c3                   	ret    
c0017071:	90                   	nop

c0017072 <VCache::~VCache()>:
c0017072:	83 ec 0c             	sub    esp,0xc
c0017075:	ba b4 b2 02 c0       	mov    edx,0xc002b2b4
c001707a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001707e:	89 10                	mov    DWORD PTR [eax],edx
c0017080:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017084:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0017087:	84 c0                	test   al,al
c0017089:	74 0f                	je     c001709a <VCache::~VCache()+0x28>
c001708b:	83 ec 0c             	sub    esp,0xc
c001708e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017092:	e8 9f ff ff ff       	call   c0017036 <VCache::writeWriteBuffer()>
c0017097:	83 c4 10             	add    esp,0x10
c001709a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001709e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00170a1:	83 ec 0c             	sub    esp,0xc
c00170a4:	50                   	push   eax
c00170a5:	e8 a6 87 ff ff       	call   c000f850 <free>
c00170aa:	83 c4 10             	add    esp,0x10
c00170ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00170b1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00170b4:	83 ec 0c             	sub    esp,0xc
c00170b7:	50                   	push   eax
c00170b8:	e8 93 87 ff ff       	call   c000f850 <free>
c00170bd:	83 c4 10             	add    esp,0x10
c00170c0:	90                   	nop
c00170c1:	83 c4 0c             	add    esp,0xc
c00170c4:	c3                   	ret    
c00170c5:	90                   	nop

c00170c6 <VCache::~VCache()>:
c00170c6:	83 ec 0c             	sub    esp,0xc
c00170c9:	83 ec 0c             	sub    esp,0xc
c00170cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00170d0:	e8 9d ff ff ff       	call   c0017072 <VCache::~VCache()>
c00170d5:	83 c4 10             	add    esp,0x10
c00170d8:	83 ec 08             	sub    esp,0x8
c00170db:	6a 44                	push   0x44
c00170dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00170e1:	e8 cc bc ff ff       	call   c0012db2 <operator delete(void*, unsigned long)>
c00170e6:	83 c4 10             	add    esp,0x10
c00170e9:	83 c4 0c             	add    esp,0xc
c00170ec:	c3                   	ret    
c00170ed:	90                   	nop

c00170ee <VCache::write(unsigned long long, int, void*)>:
c00170ee:	55                   	push   ebp
c00170ef:	57                   	push   edi
c00170f0:	56                   	push   esi
c00170f1:	53                   	push   ebx
c00170f2:	83 ec 28             	sub    esp,0x28
c00170f5:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00170f9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00170fd:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0017101:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0017105:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017108:	e8 db 71 00 00       	call   c001e2e8 <Semaphore::acquire()>
c001710d:	83 c4 10             	add    esp,0x10
c0017110:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0017114:	74 0c                	je     c0017122 <VCache::write(unsigned long long, int, void*)+0x34>
c0017116:	83 ec 0c             	sub    esp,0xc
c0017119:	53                   	push   ebx
c001711a:	e8 07 ff ff ff       	call   c0017026 <VCache::invalidateReadBuffer()>
c001711f:	83 c4 10             	add    esp,0x10
c0017122:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0017126:	74 66                	je     c001718e <VCache::write(unsigned long long, int, void*)+0xa0>
c0017128:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001712b:	99                   	cdq    
c001712c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017130:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0017133:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0017136:	89 c1                	mov    ecx,eax
c0017138:	89 d0                	mov    eax,edx
c001713a:	31 f1                	xor    ecx,esi
c001713c:	31 f8                	xor    eax,edi
c001713e:	89 ca                	mov    edx,ecx
c0017140:	09 c2                	or     edx,eax
c0017142:	75 3e                	jne    c0017182 <VCache::write(unsigned long long, int, void*)+0x94>
c0017144:	83 fd 01             	cmp    ebp,0x1
c0017147:	75 39                	jne    c0017182 <VCache::write(unsigned long long, int, void*)+0x94>
c0017149:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001714c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017152:	51                   	push   ecx
c0017153:	50                   	push   eax
c0017154:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017158:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001715c:	0f af c8             	imul   ecx,eax
c001715f:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c0017162:	51                   	push   ecx
c0017163:	e8 dc 95 fe ff       	call   c0000744 <memcpy>
c0017168:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001716b:	83 c4 10             	add    esp,0x10
c001716e:	40                   	inc    eax
c001716f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0017172:	83 c0 80             	add    eax,0xffffff80
c0017175:	75 57                	jne    c00171ce <VCache::write(unsigned long long, int, void*)+0xe0>
c0017177:	83 ec 0c             	sub    esp,0xc
c001717a:	53                   	push   ebx
c001717b:	e8 b6 fe ff ff       	call   c0017036 <VCache::writeWriteBuffer()>
c0017180:	eb 34                	jmp    c00171b6 <VCache::write(unsigned long long, int, void*)+0xc8>
c0017182:	83 ec 0c             	sub    esp,0xc
c0017185:	53                   	push   ebx
c0017186:	e8 ab fe ff ff       	call   c0017036 <VCache::writeWriteBuffer()>
c001718b:	83 c4 10             	add    esp,0x10
c001718e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017191:	83 fd 7f             	cmp    ebp,0x7f
c0017194:	7f 25                	jg     c00171bb <VCache::write(unsigned long long, int, void*)+0xcd>
c0017196:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0017199:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c001719c:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c001719f:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c00171a3:	52                   	push   edx
c00171a4:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00171aa:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00171ae:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00171b1:	e8 8e 95 fe ff       	call   c0000744 <memcpy>
c00171b6:	83 c4 10             	add    esp,0x10
c00171b9:	eb 13                	jmp    c00171ce <VCache::write(unsigned long long, int, void*)+0xe0>
c00171bb:	83 ec 0c             	sub    esp,0xc
c00171be:	8b 10                	mov    edx,DWORD PTR [eax]
c00171c0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00171c4:	55                   	push   ebp
c00171c5:	57                   	push   edi
c00171c6:	56                   	push   esi
c00171c7:	50                   	push   eax
c00171c8:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c00171cb:	83 c4 20             	add    esp,0x20
c00171ce:	83 ec 0c             	sub    esp,0xc
c00171d1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00171d4:	e8 bd 76 00 00       	call   c001e896 <Semaphore::release()>
c00171d9:	83 c4 2c             	add    esp,0x2c
c00171dc:	31 c0                	xor    eax,eax
c00171de:	5b                   	pop    ebx
c00171df:	5e                   	pop    esi
c00171e0:	5f                   	pop    edi
c00171e1:	5d                   	pop    ebp
c00171e2:	c3                   	ret    
c00171e3:	90                   	nop

c00171e4 <VCache::read(unsigned long long, int, void*)>:
c00171e4:	55                   	push   ebp
c00171e5:	57                   	push   edi
c00171e6:	56                   	push   esi
c00171e7:	53                   	push   ebx
c00171e8:	83 ec 28             	sub    esp,0x28
c00171eb:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00171ef:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00171f3:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00171f7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00171fb:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00171ff:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0017203:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0017207:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001720a:	e8 d9 70 00 00       	call   c001e2e8 <Semaphore::acquire()>
c001720f:	83 c4 10             	add    esp,0x10
c0017212:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0017216:	74 0c                	je     c0017224 <VCache::read(unsigned long long, int, void*)+0x40>
c0017218:	83 ec 0c             	sub    esp,0xc
c001721b:	53                   	push   ebx
c001721c:	e8 15 fe ff ff       	call   c0017036 <VCache::writeWriteBuffer()>
c0017221:	83 c4 10             	add    esp,0x10
c0017224:	83 fe 01             	cmp    esi,0x1
c0017227:	0f 85 80 00 00 00    	jne    c00172ad <VCache::read(unsigned long long, int, void*)+0xc9>
c001722d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017230:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0017237:	75 74                	jne    c00172ad <VCache::read(unsigned long long, int, void*)+0xc9>
c0017239:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001723c:	89 d1                	mov    ecx,edx
c001723e:	f7 d9                	neg    ecx
c0017240:	89 cf                	mov    edi,ecx
c0017242:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0017246:	c1 ff 1f             	sar    edi,0x1f
c0017249:	23 0c 24             	and    ecx,DWORD PTR [esp]
c001724c:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0017250:	89 ce                	mov    esi,ecx
c0017252:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017256:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c001725a:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001725e:	89 cf                	mov    edi,ecx
c0017260:	74 0a                	je     c001726c <VCache::read(unsigned long long, int, void*)+0x88>
c0017262:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0017265:	75 05                	jne    c001726c <VCache::read(unsigned long long, int, void*)+0x88>
c0017267:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c001726a:	74 1c                	je     c0017288 <VCache::read(unsigned long long, int, void*)+0xa4>
c001726c:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0017270:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c0017273:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c0017276:	83 ec 0c             	sub    esp,0xc
c0017279:	8b 08                	mov    ecx,DWORD PTR [eax]
c001727b:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001727e:	52                   	push   edx
c001727f:	57                   	push   edi
c0017280:	56                   	push   esi
c0017281:	50                   	push   eax
c0017282:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0017285:	83 c4 20             	add    esp,0x20
c0017288:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001728b:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0017291:	50                   	push   eax
c0017292:	52                   	push   edx
c0017293:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017296:	48                   	dec    eax
c0017297:	23 44 24 08          	and    eax,DWORD PTR [esp+0x8]
c001729b:	0f af c2             	imul   eax,edx
c001729e:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c00172a1:	50                   	push   eax
c00172a2:	55                   	push   ebp
c00172a3:	e8 9c 94 fe ff       	call   c0000744 <memcpy>
c00172a8:	83 c4 10             	add    esp,0x10
c00172ab:	eb 21                	jmp    c00172ce <VCache::read(unsigned long long, int, void*)+0xea>
c00172ad:	83 ec 0c             	sub    esp,0xc
c00172b0:	53                   	push   ebx
c00172b1:	e8 70 fd ff ff       	call   c0017026 <VCache::invalidateReadBuffer()>
c00172b6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00172b9:	8b 10                	mov    edx,DWORD PTR [eax]
c00172bb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00172be:	56                   	push   esi
c00172bf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00172c3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00172c7:	50                   	push   eax
c00172c8:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00172cb:	83 c4 20             	add    esp,0x20
c00172ce:	83 ec 0c             	sub    esp,0xc
c00172d1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00172d4:	e8 bd 75 00 00       	call   c001e896 <Semaphore::release()>
c00172d9:	83 c4 2c             	add    esp,0x2c
c00172dc:	31 c0                	xor    eax,eax
c00172de:	5b                   	pop    ebx
c00172df:	5e                   	pop    esi
c00172e0:	5f                   	pop    edi
c00172e1:	5d                   	pop    ebp
c00172e2:	c3                   	ret    
c00172e3:	90                   	nop

c00172e4 <Video::putrect(int, int, int, int, unsigned int)>:
c00172e4:	55                   	push   ebp
c00172e5:	57                   	push   edi
c00172e6:	56                   	push   esi
c00172e7:	53                   	push   ebx
c00172e8:	83 ec 1c             	sub    esp,0x1c
c00172eb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00172ef:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00172f3:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00172f7:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00172fb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00172ff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017303:	01 df                	add    edi,ebx
c0017305:	39 fb                	cmp    ebx,edi
c0017307:	7d 1f                	jge    c0017328 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0017309:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001730d:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0017311:	7d 12                	jge    c0017325 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0017313:	8b 16                	mov    edx,DWORD PTR [esi]
c0017315:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0017319:	53                   	push   ebx
c001731a:	55                   	push   ebp
c001731b:	45                   	inc    ebp
c001731c:	56                   	push   esi
c001731d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0017320:	83 c4 10             	add    esp,0x10
c0017323:	eb e8                	jmp    c001730d <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0017325:	43                   	inc    ebx
c0017326:	eb dd                	jmp    c0017305 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0017328:	83 c4 1c             	add    esp,0x1c
c001732b:	5b                   	pop    ebx
c001732c:	5e                   	pop    esi
c001732d:	5f                   	pop    edi
c001732e:	5d                   	pop    ebp
c001732f:	c3                   	ret    

c0017330 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0017330:	55                   	push   ebp
c0017331:	57                   	push   edi
c0017332:	31 ff                	xor    edi,edi
c0017334:	56                   	push   esi
c0017335:	53                   	push   ebx
c0017336:	83 ec 1c             	sub    esp,0x1c
c0017339:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001733d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0017341:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0017348:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c001734d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017351:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0017355:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017359:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c001735c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017360:	01 f9                	add    ecx,edi
c0017362:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0017366:	7d 2f                	jge    c0017397 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0017368:	31 f6                	xor    esi,esi
c001736a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001736e:	01 f2                	add    edx,esi
c0017370:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0017374:	7d 1a                	jge    c0017390 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0017376:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017379:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c001737c:	46                   	inc    esi
c001737d:	51                   	push   ecx
c001737e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0017382:	52                   	push   edx
c0017383:	55                   	push   ebp
c0017384:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017387:	83 c4 10             	add    esp,0x10
c001738a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001738e:	eb da                	jmp    c001736a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0017390:	47                   	inc    edi
c0017391:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0017395:	eb c5                	jmp    c001735c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0017397:	83 c4 1c             	add    esp,0x1c
c001739a:	5b                   	pop    ebx
c001739b:	5e                   	pop    esi
c001739c:	5f                   	pop    edi
c001739d:	5d                   	pop    ebp
c001739e:	c3                   	ret    
c001739f:	90                   	nop

c00173a0 <Video::blit(unsigned int*, int, int, int, int)>:
c00173a0:	55                   	push   ebp
c00173a1:	57                   	push   edi
c00173a2:	56                   	push   esi
c00173a3:	53                   	push   ebx
c00173a4:	83 ec 1c             	sub    esp,0x1c
c00173a7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00173ab:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00173af:	85 c0                	test   eax,eax
c00173b1:	79 02                	jns    c00173b5 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c00173b3:	31 c0                	xor    eax,eax
c00173b5:	c1 e0 02             	shl    eax,0x2
c00173b8:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00173bc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00173c0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00173c4:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c00173c8:	39 d8                	cmp    eax,ebx
c00173ca:	7e 49                	jle    c0017415 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00173cc:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00173d2:	7c 41                	jl     c0017415 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00173d4:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00173d8:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00173dc:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00173e0:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c00173e4:	39 f9                	cmp    ecx,edi
c00173e6:	7e 22                	jle    c001740a <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c00173e8:	83 c5 04             	add    ebp,0x4
c00173eb:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00173f1:	7c 14                	jl     c0017407 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c00173f3:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00173f5:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c00173f8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00173fc:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017400:	56                   	push   esi
c0017401:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0017404:	83 c4 10             	add    esp,0x10
c0017407:	47                   	inc    edi
c0017408:	eb d2                	jmp    c00173dc <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c001740a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001740e:	43                   	inc    ebx
c001740f:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0017413:	eb ab                	jmp    c00173c0 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0017415:	83 c4 1c             	add    esp,0x1c
c0017418:	5b                   	pop    ebx
c0017419:	5e                   	pop    esi
c001741a:	5f                   	pop    edi
c001741b:	5d                   	pop    ebp
c001741c:	c3                   	ret    
c001741d:	90                   	nop

c001741e <Video::clearScreen(unsigned int)>:
c001741e:	57                   	push   edi
c001741f:	56                   	push   esi
c0017420:	53                   	push   ebx
c0017421:	31 db                	xor    ebx,ebx
c0017423:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017427:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001742d:	7e 1f                	jle    c001744e <Video::clearScreen(unsigned int)+0x30>
c001742f:	31 ff                	xor    edi,edi
c0017431:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0017437:	7e 12                	jle    c001744b <Video::clearScreen(unsigned int)+0x2d>
c0017439:	8b 06                	mov    eax,DWORD PTR [esi]
c001743b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001743f:	53                   	push   ebx
c0017440:	57                   	push   edi
c0017441:	47                   	inc    edi
c0017442:	56                   	push   esi
c0017443:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017446:	83 c4 10             	add    esp,0x10
c0017449:	eb e6                	jmp    c0017431 <Video::clearScreen(unsigned int)+0x13>
c001744b:	43                   	inc    ebx
c001744c:	eb d9                	jmp    c0017427 <Video::clearScreen(unsigned int)+0x9>
c001744e:	5b                   	pop    ebx
c001744f:	5e                   	pop    esi
c0017450:	5f                   	pop    edi
c0017451:	c3                   	ret    

c0017452 <Video::putpixel(int, int, unsigned int)>:
c0017452:	c7 44 24 04 bc b2 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b2bc
c001745a:	e9 0e 31 00 00       	jmp    c001a56d <Krnl::panic(char const*)>
c001745f:	90                   	nop

c0017460 <Video::Video(char const*)>:
c0017460:	83 ec 0c             	sub    esp,0xc
c0017463:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017467:	83 ec 08             	sub    esp,0x8
c001746a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001746e:	50                   	push   eax
c001746f:	e8 34 d0 ff ff       	call   c00144a8 <Device::Device(char const*)>
c0017474:	83 c4 10             	add    esp,0x10
c0017477:	ba 40 b3 02 c0       	mov    edx,0xc002b340
c001747c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017480:	89 10                	mov    DWORD PTR [eax],edx
c0017482:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017486:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0017490:	90                   	nop
c0017491:	83 c4 0c             	add    esp,0xc
c0017494:	c3                   	ret    
c0017495:	90                   	nop

c0017496 <Video::~Video()>:
c0017496:	83 ec 0c             	sub    esp,0xc
c0017499:	ba 40 b3 02 c0       	mov    edx,0xc002b340
c001749e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174a2:	89 10                	mov    DWORD PTR [eax],edx
c00174a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174a8:	83 ec 0c             	sub    esp,0xc
c00174ab:	50                   	push   eax
c00174ac:	e8 d9 cc ff ff       	call   c001418a <Device::~Device()>
c00174b1:	83 c4 10             	add    esp,0x10
c00174b4:	90                   	nop
c00174b5:	83 c4 0c             	add    esp,0xc
c00174b8:	c3                   	ret    
c00174b9:	90                   	nop

c00174ba <Video::~Video()>:
c00174ba:	83 ec 0c             	sub    esp,0xc
c00174bd:	83 ec 0c             	sub    esp,0xc
c00174c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00174c4:	e8 cd ff ff ff       	call   c0017496 <Video::~Video()>
c00174c9:	83 c4 10             	add    esp,0x10
c00174cc:	83 ec 08             	sub    esp,0x8
c00174cf:	68 64 01 00 00       	push   0x164
c00174d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00174d8:	e8 d5 b8 ff ff       	call   c0012db2 <operator delete(void*, unsigned long)>
c00174dd:	83 c4 10             	add    esp,0x10
c00174e0:	83 c4 0c             	add    esp,0xc
c00174e3:	c3                   	ret    

c00174e4 <Video::isMonochrome()>:
c00174e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00174e8:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c00174ee:	c3                   	ret    
c00174ef:	90                   	nop

c00174f0 <Video::getWidth()>:
c00174f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00174f4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00174fa:	c3                   	ret    
c00174fb:	90                   	nop

c00174fc <Video::getHeight()>:
c00174fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017500:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017506:	c3                   	ret    
c0017507:	90                   	nop

c0017508 <Video::drawCursor(int, int, unsigned char*, int)>:
c0017508:	55                   	push   ebp
c0017509:	57                   	push   edi
c001750a:	56                   	push   esi
c001750b:	53                   	push   ebx
c001750c:	83 ec 2c             	sub    esp,0x2c
c001750f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017513:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017517:	83 f8 01             	cmp    eax,0x1
c001751a:	19 c9                	sbb    ecx,ecx
c001751c:	31 db                	xor    ebx,ebx
c001751e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0017522:	89 cd                	mov    ebp,ecx
c0017524:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c001752c:	f7 d5                	not    ebp
c001752e:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0017534:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017538:	01 d8                	add    eax,ebx
c001753a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001753e:	56                   	push   esi
c001753f:	e8 b8 ff ff ff       	call   c00174fc <Video::getHeight()>
c0017544:	59                   	pop    ecx
c0017545:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0017549:	7e 70                	jle    c00175bb <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c001754b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001754f:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0017553:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0017556:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001755a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001755e:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0017565:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017569:	89 f8                	mov    eax,edi
c001756b:	83 c0 20             	add    eax,0x20
c001756e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017572:	56                   	push   esi
c0017573:	e8 78 ff ff ff       	call   c00174f0 <Video::getWidth()>
c0017578:	5a                   	pop    edx
c0017579:	39 c7                	cmp    edi,eax
c001757b:	7d 34                	jge    c00175b1 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c001757d:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0017582:	74 05                	je     c0017589 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0017584:	8b 06                	mov    eax,DWORD PTR [esi]
c0017586:	55                   	push   ebp
c0017587:	eb 0d                	jmp    c0017596 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0017589:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c001758e:	74 12                	je     c00175a2 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0017590:	8b 06                	mov    eax,DWORD PTR [esi]
c0017592:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017596:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001759a:	57                   	push   edi
c001759b:	56                   	push   esi
c001759c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001759f:	83 c4 10             	add    esp,0x10
c00175a2:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c00175a6:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c00175aa:	47                   	inc    edi
c00175ab:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00175af:	75 c1                	jne    c0017572 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c00175b1:	43                   	inc    ebx
c00175b2:	83 fb 20             	cmp    ebx,0x20
c00175b5:	0f 85 79 ff ff ff    	jne    c0017534 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c00175bb:	83 c4 2c             	add    esp,0x2c
c00175be:	5b                   	pop    ebx
c00175bf:	5e                   	pop    esi
c00175c0:	5f                   	pop    edi
c00175c1:	5d                   	pop    ebp
c00175c2:	c3                   	ret    
c00175c3:	90                   	nop

c00175c4 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c00175c4:	55                   	push   ebp
c00175c5:	57                   	push   edi
c00175c6:	56                   	push   esi
c00175c7:	53                   	push   ebx
c00175c8:	83 ec 28             	sub    esp,0x28
c00175cb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00175cf:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c00175d3:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c00175d7:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c00175db:	c1 e7 08             	shl    edi,0x8
c00175de:	01 c7                	add    edi,eax
c00175e0:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c00175e4:	c1 e0 08             	shl    eax,0x8
c00175e7:	01 d0                	add    eax,edx
c00175e9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00175ed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00175f1:	0f af c7             	imul   eax,edi
c00175f4:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c00175fb:	50                   	push   eax
c00175fc:	e8 3f 82 ff ff       	call   c000f840 <malloc>
c0017601:	83 c4 10             	add    esp,0x10
c0017604:	89 c5                	mov    ebp,eax
c0017606:	85 c0                	test   eax,eax
c0017608:	75 15                	jne    c001761f <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c001760a:	83 ec 0c             	sub    esp,0xc
c001760d:	68 dd b2 02 c0       	push   0xc002b2dd
c0017612:	e8 7b b8 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0017617:	83 c4 10             	add    esp,0x10
c001761a:	e9 1c 01 00 00       	jmp    c001773b <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c001761f:	be 12 00 00 00       	mov    esi,0x12
c0017624:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0017628:	74 11                	je     c001763b <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c001762a:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c001762e:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c0017632:	c1 fe 03             	sar    esi,0x3
c0017635:	0f af f0             	imul   esi,eax
c0017638:	83 c6 12             	add    esi,0x12
c001763b:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c001763f:	74 04                	je     c0017645 <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c0017641:	85 ff                	test   edi,edi
c0017643:	75 12                	jne    c0017657 <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c0017645:	83 ec 0c             	sub    esp,0xc
c0017648:	68 f4 b2 02 c0       	push   0xc002b2f4
c001764d:	e8 40 b8 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0017652:	e9 ce 00 00 00       	jmp    c0017725 <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c0017657:	52                   	push   edx
c0017658:	52                   	push   edx
c0017659:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c001765d:	50                   	push   eax
c001765e:	68 09 b3 02 c0       	push   0xc002b309
c0017663:	e8 2a b8 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0017668:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c001766c:	83 c4 10             	add    esp,0x10
c001766f:	80 fa 02             	cmp    dl,0x2
c0017672:	0f 85 98 00 00 00    	jne    c0017710 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c0017678:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c001767d:	75 10                	jne    c001768f <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c001767f:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0017683:	75 0a                	jne    c001768f <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0017685:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0017688:	83 e8 18             	sub    eax,0x18
c001768b:	a8 f7                	test   al,0xf7
c001768d:	74 0a                	je     c0017699 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c001768f:	83 ec 0c             	sub    esp,0xc
c0017692:	68 16 b3 02 c0       	push   0xc002b316
c0017697:	eb 7f                	jmp    c0017718 <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c0017699:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00176a1:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00176a9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00176ad:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00176b5:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c00176b9:	75 0c                	jne    c00176c7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c00176bb:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c00176c0:	c1 e0 18             	shl    eax,0x18
c00176c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00176c7:	41                   	inc    ecx
c00176c8:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c00176cd:	c1 e2 10             	shl    edx,0x10
c00176d0:	89 d0                	mov    eax,edx
c00176d2:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c00176d7:	c1 e2 08             	shl    edx,0x8
c00176da:	09 c2                	or     edx,eax
c00176dc:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c00176e0:	09 c2                	or     edx,eax
c00176e2:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c00176e6:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c00176ea:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c00176ee:	c1 f8 03             	sar    eax,0x3
c00176f1:	01 c6                	add    esi,eax
c00176f3:	89 c8                	mov    eax,ecx
c00176f5:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00176f9:	39 c7                	cmp    edi,eax
c00176fb:	7f b0                	jg     c00176ad <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c00176fd:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017701:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017705:	39 14 24             	cmp    DWORD PTR [esp],edx
c0017708:	7e 22                	jle    c001772c <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c001770a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001770e:	eb 99                	jmp    c00176a9 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c0017710:	50                   	push   eax
c0017711:	50                   	push   eax
c0017712:	52                   	push   edx
c0017713:	68 24 b3 02 c0       	push   0xc002b324
c0017718:	e8 75 b7 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001771d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017720:	e8 2b 81 ff ff       	call   c000f850 <free>
c0017725:	83 c4 10             	add    esp,0x10
c0017728:	31 ed                	xor    ebp,ebp
c001772a:	eb 0f                	jmp    c001773b <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c001772c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017730:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0017733:	89 38                	mov    DWORD PTR [eax],edi
c0017735:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017739:	89 08                	mov    DWORD PTR [eax],ecx
c001773b:	83 c4 1c             	add    esp,0x1c
c001773e:	89 e8                	mov    eax,ebp
c0017740:	5b                   	pop    ebx
c0017741:	5e                   	pop    esi
c0017742:	5f                   	pop    edi
c0017743:	5d                   	pop    ebp
c0017744:	c3                   	ret    
c0017745:	90                   	nop

c0017746 <Video::putTGA(int, int, unsigned char*, int)>:
c0017746:	55                   	push   ebp
c0017747:	57                   	push   edi
c0017748:	56                   	push   esi
c0017749:	53                   	push   ebx
c001774a:	83 ec 28             	sub    esp,0x28
c001774d:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0017751:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017755:	50                   	push   eax
c0017756:	8d 44 24 18          	lea    eax,[esp+0x18]
c001775a:	50                   	push   eax
c001775b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001775f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017763:	56                   	push   esi
c0017764:	e8 5b fe ff ff       	call   c00175c4 <Video::tgaParse(unsigned char*, int, int*, int*)>
c0017769:	83 c4 20             	add    esp,0x20
c001776c:	85 c0                	test   eax,eax
c001776e:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0017772:	74 35                	je     c00177a9 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017774:	89 c7                	mov    edi,eax
c0017776:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001777a:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001777e:	39 d8                	cmp    eax,ebx
c0017780:	7e 27                	jle    c00177a9 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017782:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017786:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001778a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001778e:	39 e8                	cmp    eax,ebp
c0017790:	7e 14                	jle    c00177a6 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0017792:	8b 06                	mov    eax,DWORD PTR [esi]
c0017794:	83 c7 04             	add    edi,0x4
c0017797:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c001779a:	53                   	push   ebx
c001779b:	55                   	push   ebp
c001779c:	45                   	inc    ebp
c001779d:	56                   	push   esi
c001779e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00177a1:	83 c4 10             	add    esp,0x10
c00177a4:	eb e0                	jmp    c0017786 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c00177a6:	43                   	inc    ebx
c00177a7:	eb cd                	jmp    c0017776 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c00177a9:	83 c4 1c             	add    esp,0x1c
c00177ac:	5b                   	pop    ebx
c00177ad:	5e                   	pop    esi
c00177ae:	5f                   	pop    edi
c00177af:	5d                   	pop    ebp
c00177b0:	c3                   	ret    
c00177b1:	90                   	nop

c00177b2 <ACPI::close(int, int, void*)>:
c00177b2:	83 ec 1c             	sub    esp,0x1c
c00177b5:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c00177bd:	74 0a                	je     c00177c9 <ACPI::close(int, int, void*)+0x17>
c00177bf:	b8 00 00 00 00       	mov    eax,0x0
c00177c4:	e9 9a 00 00 00       	jmp    c0017863 <ACPI::close(int, int, void*)+0xb1>
c00177c9:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00177ce:	75 37                	jne    c0017807 <ACPI::close(int, int, void*)+0x55>
c00177d0:	83 ec 0c             	sub    esp,0xc
c00177d3:	68 80 b3 02 c0       	push   0xc002b380
c00177d8:	e8 b5 b6 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c00177dd:	83 c4 10             	add    esp,0x10
c00177e0:	a1 48 0a 03 c0       	mov    eax,ds:0xc0030a48
c00177e5:	85 c0                	test   eax,eax
c00177e7:	74 07                	je     c00177f0 <ACPI::close(int, int, void*)+0x3e>
c00177e9:	a1 48 0a 03 c0       	mov    eax,ds:0xc0030a48
c00177ee:	ff d0                	call   eax
c00177f0:	83 ec 0c             	sub    esp,0xc
c00177f3:	68 a4 b4 02 c0       	push   0xc002b4a4
c00177f8:	e8 70 2d 00 00       	call   c001a56d <Krnl::panic(char const*)>
c00177fd:	83 c4 10             	add    esp,0x10
c0017800:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017805:	eb 5c                	jmp    c0017863 <ACPI::close(int, int, void*)+0xb1>
c0017807:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c001780c:	75 50                	jne    c001785e <ACPI::close(int, int, void*)+0xac>
c001780e:	a1 44 0a 03 c0       	mov    eax,ds:0xc0030a44
c0017813:	85 c0                	test   eax,eax
c0017815:	74 07                	je     c001781e <ACPI::close(int, int, void*)+0x6c>
c0017817:	a1 44 0a 03 c0       	mov    eax,ds:0xc0030a44
c001781c:	ff d0                	call   eax
c001781e:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0017823:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017828:	83 e0 02             	and    eax,0x2
c001782b:	74 1c                	je     c0017849 <ACPI::close(int, int, void*)+0x97>
c001782d:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0017834:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017838:	89 c2                	mov    edx,eax
c001783a:	ec                   	in     al,dx
c001783b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001783f:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0017843:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017847:	eb da                	jmp    c0017823 <ACPI::close(int, int, void*)+0x71>
c0017849:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0017850:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0017855:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0017859:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001785d:	ee                   	out    dx,al
c001785e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017863:	83 c4 1c             	add    esp,0x1c
c0017866:	c3                   	ret    

c0017867 <findRSDP()>:
c0017867:	83 ec 1c             	sub    esp,0x1c
c001786a:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c001786f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017875:	83 e0 04             	and    eax,0x4
c0017878:	84 c0                	test   al,al
c001787a:	75 07                	jne    c0017883 <findRSDP()+0x1c>
c001787c:	b8 00 00 00 00       	mov    eax,0x0
c0017881:	eb 6a                	jmp    c00178ed <findRSDP()+0x86>
c0017883:	a1 d4 e3 02 c0       	mov    eax,ds:0xc002e3d4
c0017888:	3d ff 07 00 00       	cmp    eax,0x7ff
c001788d:	7f 1b                	jg     c00178aa <findRSDP()+0x43>
c001788f:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0017894:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001789a:	83 e2 fb             	and    edx,0xfffffffb
c001789d:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00178a3:	b8 00 00 00 00       	mov    eax,0x0
c00178a8:	eb 43                	jmp    c00178ed <findRSDP()+0x86>
c00178aa:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c00178b2:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c00178ba:	77 2c                	ja     c00178e8 <findRSDP()+0x81>
c00178bc:	83 ec 04             	sub    esp,0x4
c00178bf:	6a 08                	push   0x8
c00178c1:	68 8d b3 02 c0       	push   0xc002b38d
c00178c6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00178ca:	e8 71 8d fe ff       	call   c0000640 <memcmp>
c00178cf:	83 c4 10             	add    esp,0x10
c00178d2:	85 c0                	test   eax,eax
c00178d4:	0f 94 c0             	sete   al
c00178d7:	84 c0                	test   al,al
c00178d9:	74 06                	je     c00178e1 <findRSDP()+0x7a>
c00178db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00178df:	eb 0c                	jmp    c00178ed <findRSDP()+0x86>
c00178e1:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c00178e6:	eb ca                	jmp    c00178b2 <findRSDP()+0x4b>
c00178e8:	b8 00 00 00 00       	mov    eax,0x0
c00178ed:	83 c4 1c             	add    esp,0x1c
c00178f0:	c3                   	ret    

c00178f1 <loadACPITables(unsigned char*)>:
c00178f1:	56                   	push   esi
c00178f2:	53                   	push   ebx
c00178f3:	83 ec 44             	sub    esp,0x44
c00178f6:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c00178fb:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017901:	83 e0 04             	and    eax,0x4
c0017904:	84 c0                	test   al,al
c0017906:	0f 84 05 02 00 00    	je     c0017b11 <loadACPITables(unsigned char*)+0x220>
c001790c:	a0 60 0c 03 c0       	mov    al,ds:0xc0030c60
c0017911:	84 c0                	test   al,al
c0017913:	74 75                	je     c001798a <loadACPITables(unsigned char*)+0x99>
c0017915:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017919:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001791d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017921:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017924:	83 e8 24             	sub    eax,0x24
c0017927:	c1 e8 03             	shr    eax,0x3
c001792a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001792e:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017936:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001793a:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c001793e:	0f 8d b2 00 00 00    	jge    c00179f6 <loadACPITables(unsigned char*)+0x105>
c0017944:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017948:	83 c0 24             	add    eax,0x24
c001794b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001794f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017953:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017957:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001795b:	c1 e0 03             	shl    eax,0x3
c001795e:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0017962:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017966:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017969:	8b 00                	mov    eax,DWORD PTR [eax]
c001796b:	89 c1                	mov    ecx,eax
c001796d:	a1 4c 0a 03 c0       	mov    eax,ds:0xc0030a4c
c0017972:	8d 50 01             	lea    edx,[eax+0x1]
c0017975:	89 15 4c 0a 03 c0    	mov    DWORD PTR ds:0xc0030a4c,edx
c001797b:	89 ca                	mov    edx,ecx
c001797d:	89 14 c5 64 0a 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf59c],edx
c0017984:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0017988:	eb ac                	jmp    c0017936 <loadACPITables(unsigned char*)+0x45>
c001798a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001798e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017992:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017996:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017999:	83 e8 24             	sub    eax,0x24
c001799c:	c1 e8 02             	shr    eax,0x2
c001799f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00179a3:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c00179ab:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00179af:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c00179b3:	7d 41                	jge    c00179f6 <loadACPITables(unsigned char*)+0x105>
c00179b5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00179b9:	83 c0 24             	add    eax,0x24
c00179bc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00179c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00179c4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00179c8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00179cc:	c1 e0 02             	shl    eax,0x2
c00179cf:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c00179d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00179d7:	8b 08                	mov    ecx,DWORD PTR [eax]
c00179d9:	a1 4c 0a 03 c0       	mov    eax,ds:0xc0030a4c
c00179de:	8d 50 01             	lea    edx,[eax+0x1]
c00179e1:	89 15 4c 0a 03 c0    	mov    DWORD PTR ds:0xc0030a4c,edx
c00179e7:	89 ca                	mov    edx,ecx
c00179e9:	89 14 c5 64 0a 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf59c],edx
c00179f0:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00179f4:	eb b5                	jmp    c00179ab <loadACPITables(unsigned char*)+0xba>
c00179f6:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00179fe:	a1 4c 0a 03 c0       	mov    eax,ds:0xc0030a4c
c0017a03:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0017a07:	0f 8d 05 01 00 00    	jge    c0017b12 <loadACPITables(unsigned char*)+0x221>
c0017a0d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017a11:	8b 04 c5 64 0a 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf59c]
c0017a18:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017a1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a20:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017a24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a28:	25 ff 0f 00 00       	and    eax,0xfff
c0017a2d:	89 c6                	mov    esi,eax
c0017a2f:	e8 cb a4 ff ff       	call   c0011eff <Virt::getAKernelVAS()>
c0017a34:	89 c3                	mov    ebx,eax
c0017a36:	83 ec 0c             	sub    esp,0xc
c0017a39:	6a 01                	push   0x1
c0017a3b:	e8 81 a2 ff ff       	call   c0011cc1 <Virt::allocateKernelVirtualPages(int)>
c0017a40:	83 c4 10             	add    esp,0x10
c0017a43:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017a47:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017a4d:	83 ec 0c             	sub    esp,0xc
c0017a50:	6a 01                	push   0x1
c0017a52:	6a 01                	push   0x1
c0017a54:	50                   	push   eax
c0017a55:	52                   	push   edx
c0017a56:	53                   	push   ebx
c0017a57:	e8 ba ab ff ff       	call   c0012616 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017a5c:	83 c4 20             	add    esp,0x20
c0017a5f:	09 f0                	or     eax,esi
c0017a61:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017a65:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017a69:	c1 e0 03             	shl    eax,0x3
c0017a6c:	05 60 0a 03 c0       	add    eax,0xc0030a60
c0017a71:	83 ec 04             	sub    esp,0x4
c0017a74:	6a 04                	push   0x4
c0017a76:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017a7a:	50                   	push   eax
c0017a7b:	e8 c4 8c fe ff       	call   c0000744 <memcpy>
c0017a80:	83 c4 10             	add    esp,0x10
c0017a83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a87:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017a8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017a8e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017a92:	05 00 10 00 00       	add    eax,0x1000
c0017a97:	c1 e8 0c             	shr    eax,0xc
c0017a9a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017a9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017aa2:	89 04 24             	mov    DWORD PTR [esp],eax
c0017aa5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017aa9:	25 ff 0f 00 00       	and    eax,0xfff
c0017aae:	89 c6                	mov    esi,eax
c0017ab0:	e8 4a a4 ff ff       	call   c0011eff <Virt::getAKernelVAS()>
c0017ab5:	89 c3                	mov    ebx,eax
c0017ab7:	83 ec 0c             	sub    esp,0xc
c0017aba:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017abe:	e8 fe a1 ff ff       	call   c0011cc1 <Virt::allocateKernelVirtualPages(int)>
c0017ac3:	83 c4 10             	add    esp,0x10
c0017ac6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017aca:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017ad0:	83 ec 0c             	sub    esp,0xc
c0017ad3:	6a 01                	push   0x1
c0017ad5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017ad9:	50                   	push   eax
c0017ada:	52                   	push   edx
c0017adb:	53                   	push   ebx
c0017adc:	e8 35 ab ff ff       	call   c0012616 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017ae1:	83 c4 20             	add    esp,0x20
c0017ae4:	09 f0                	or     eax,esi
c0017ae6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017aea:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017aed:	83 ec 0c             	sub    esp,0xc
c0017af0:	50                   	push   eax
c0017af1:	e8 c5 a4 ff ff       	call   c0011fbb <Virt::freeKernelVirtualPages(unsigned long)>
c0017af6:	83 c4 10             	add    esp,0x10
c0017af9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017afd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017b01:	89 14 c5 64 0a 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf59c],edx
c0017b08:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0017b0c:	e9 ed fe ff ff       	jmp    c00179fe <loadACPITables(unsigned char*)+0x10d>
c0017b11:	90                   	nop
c0017b12:	83 c4 44             	add    esp,0x44
c0017b15:	5b                   	pop    ebx
c0017b16:	5e                   	pop    esi
c0017b17:	c3                   	ret    

c0017b18 <findRSDT(unsigned char*)>:
c0017b18:	56                   	push   esi
c0017b19:	53                   	push   ebx
c0017b1a:	83 ec 44             	sub    esp,0x44
c0017b1d:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0017b22:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017b28:	83 e0 04             	and    eax,0x4
c0017b2b:	84 c0                	test   al,al
c0017b2d:	75 0a                	jne    c0017b39 <findRSDT(unsigned char*)+0x21>
c0017b2f:	b8 00 00 00 00       	mov    eax,0x0
c0017b34:	e9 f7 00 00 00       	jmp    c0017c30 <findRSDT(unsigned char*)+0x118>
c0017b39:	83 ec 04             	sub    esp,0x4
c0017b3c:	6a 24                	push   0x24
c0017b3e:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0017b42:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017b46:	50                   	push   eax
c0017b47:	e8 f8 8b fe ff       	call   c0000744 <memcpy>
c0017b4c:	83 c4 10             	add    esp,0x10
c0017b4f:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017b53:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0017b57:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017b5f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017b63:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017b67:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017b6b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017b6f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017b73:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b77:	25 ff 0f 00 00       	and    eax,0xfff
c0017b7c:	89 c6                	mov    esi,eax
c0017b7e:	e8 7c a3 ff ff       	call   c0011eff <Virt::getAKernelVAS()>
c0017b83:	89 c3                	mov    ebx,eax
c0017b85:	83 ec 0c             	sub    esp,0xc
c0017b88:	6a 02                	push   0x2
c0017b8a:	e8 32 a1 ff ff       	call   c0011cc1 <Virt::allocateKernelVirtualPages(int)>
c0017b8f:	83 c4 10             	add    esp,0x10
c0017b92:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017b96:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017b9c:	83 ec 0c             	sub    esp,0xc
c0017b9f:	6a 01                	push   0x1
c0017ba1:	6a 02                	push   0x2
c0017ba3:	50                   	push   eax
c0017ba4:	52                   	push   edx
c0017ba5:	53                   	push   ebx
c0017ba6:	e8 6b aa ff ff       	call   c0012616 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017bab:	83 c4 20             	add    esp,0x20
c0017bae:	09 f0                	or     eax,esi
c0017bb0:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017bb4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017bb8:	25 ff 0f 00 00       	and    eax,0xfff
c0017bbd:	89 c6                	mov    esi,eax
c0017bbf:	e8 3b a3 ff ff       	call   c0011eff <Virt::getAKernelVAS()>
c0017bc4:	89 c3                	mov    ebx,eax
c0017bc6:	83 ec 0c             	sub    esp,0xc
c0017bc9:	6a 02                	push   0x2
c0017bcb:	e8 f1 a0 ff ff       	call   c0011cc1 <Virt::allocateKernelVirtualPages(int)>
c0017bd0:	83 c4 10             	add    esp,0x10
c0017bd3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017bd7:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017bdd:	83 ec 0c             	sub    esp,0xc
c0017be0:	6a 01                	push   0x1
c0017be2:	6a 02                	push   0x2
c0017be4:	50                   	push   eax
c0017be5:	52                   	push   edx
c0017be6:	53                   	push   ebx
c0017be7:	e8 2a aa ff ff       	call   c0012616 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017bec:	83 c4 20             	add    esp,0x20
c0017bef:	09 f0                	or     eax,esi
c0017bf1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017bf5:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0017bfa:	75 11                	jne    c0017c0d <findRSDT(unsigned char*)+0xf5>
c0017bfc:	c6 05 60 0c 03 c0 00 	mov    BYTE PTR ds:0xc0030c60,0x0
c0017c03:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c07:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017c0b:	eb 1f                	jmp    c0017c2c <findRSDT(unsigned char*)+0x114>
c0017c0d:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0017c12:	75 11                	jne    c0017c25 <findRSDT(unsigned char*)+0x10d>
c0017c14:	c6 05 60 0c 03 c0 01 	mov    BYTE PTR ds:0xc0030c60,0x1
c0017c1b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017c1f:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017c23:	eb 07                	jmp    c0017c2c <findRSDT(unsigned char*)+0x114>
c0017c25:	b8 00 00 00 00       	mov    eax,0x0
c0017c2a:	eb 04                	jmp    c0017c30 <findRSDT(unsigned char*)+0x118>
c0017c2c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017c30:	83 c4 44             	add    esp,0x44
c0017c33:	5b                   	pop    ebx
c0017c34:	5e                   	pop    esi
c0017c35:	c3                   	ret    

c0017c36 <findDataTable(unsigned char*, char*)>:
c0017c36:	83 ec 1c             	sub    esp,0x1c
c0017c39:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0017c3e:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017c44:	83 e0 04             	and    eax,0x4
c0017c47:	84 c0                	test   al,al
c0017c49:	75 07                	jne    c0017c52 <findDataTable(unsigned char*, char*)+0x1c>
c0017c4b:	b8 00 00 00 00       	mov    eax,0x0
c0017c50:	eb 7c                	jmp    c0017cce <findDataTable(unsigned char*, char*)+0x98>
c0017c52:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017c5a:	a1 4c 0a 03 c0       	mov    eax,ds:0xc0030a4c
c0017c5f:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017c63:	7d 3a                	jge    c0017c9f <findDataTable(unsigned char*, char*)+0x69>
c0017c65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017c69:	c1 e0 03             	shl    eax,0x3
c0017c6c:	05 60 0a 03 c0       	add    eax,0xc0030a60
c0017c71:	83 ec 04             	sub    esp,0x4
c0017c74:	6a 04                	push   0x4
c0017c76:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017c7a:	50                   	push   eax
c0017c7b:	e8 c0 89 fe ff       	call   c0000640 <memcmp>
c0017c80:	83 c4 10             	add    esp,0x10
c0017c83:	85 c0                	test   eax,eax
c0017c85:	0f 94 c0             	sete   al
c0017c88:	84 c0                	test   al,al
c0017c8a:	74 0d                	je     c0017c99 <findDataTable(unsigned char*, char*)+0x63>
c0017c8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017c90:	8b 04 c5 64 0a 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf59c]
c0017c97:	eb 35                	jmp    c0017cce <findDataTable(unsigned char*, char*)+0x98>
c0017c99:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017c9d:	eb bb                	jmp    c0017c5a <findDataTable(unsigned char*, char*)+0x24>
c0017c9f:	a0 60 0c 03 c0       	mov    al,ds:0xc0030c60
c0017ca4:	84 c0                	test   al,al
c0017ca6:	74 07                	je     c0017caf <findDataTable(unsigned char*, char*)+0x79>
c0017ca8:	b8 58 00 00 00       	mov    eax,0x58
c0017cad:	eb 05                	jmp    c0017cb4 <findDataTable(unsigned char*, char*)+0x7e>
c0017caf:	b8 52 00 00 00       	mov    eax,0x52
c0017cb4:	83 ec 04             	sub    esp,0x4
c0017cb7:	50                   	push   eax
c0017cb8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017cbc:	68 c8 b4 02 c0       	push   0xc002b4c8
c0017cc1:	e8 cc b1 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0017cc6:	83 c4 10             	add    esp,0x10
c0017cc9:	b8 00 00 00 00       	mov    eax,0x0
c0017cce:	83 c4 1c             	add    esp,0x1c
c0017cd1:	c3                   	ret    

c0017cd2 <scanMADT()>:
c0017cd2:	53                   	push   ebx
c0017cd3:	83 ec 38             	sub    esp,0x38
c0017cd6:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0017cdb:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017ce1:	83 e0 04             	and    eax,0x4
c0017ce4:	84 c0                	test   al,al
c0017ce6:	0f 84 63 04 00 00    	je     c001814f <scanMADT()+0x47d>
c0017cec:	e8 76 fb ff ff       	call   c0017867 <findRSDP()>
c0017cf1:	a3 6c 0c 03 c0       	mov    ds:0xc0030c6c,eax
c0017cf6:	a1 6c 0c 03 c0       	mov    eax,ds:0xc0030c6c
c0017cfb:	85 c0                	test   eax,eax
c0017cfd:	75 19                	jne    c0017d18 <scanMADT()+0x46>
c0017cff:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0017d04:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017d0a:	83 e2 fb             	and    edx,0xfffffffb
c0017d0d:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017d13:	e9 3b 04 00 00       	jmp    c0018153 <scanMADT()+0x481>
c0017d18:	a1 6c 0c 03 c0       	mov    eax,ds:0xc0030c6c
c0017d1d:	83 ec 0c             	sub    esp,0xc
c0017d20:	50                   	push   eax
c0017d21:	e8 f2 fd ff ff       	call   c0017b18 <findRSDT(unsigned char*)>
c0017d26:	83 c4 10             	add    esp,0x10
c0017d29:	a3 68 0c 03 c0       	mov    ds:0xc0030c68,eax
c0017d2e:	a1 68 0c 03 c0       	mov    eax,ds:0xc0030c68
c0017d33:	85 c0                	test   eax,eax
c0017d35:	75 19                	jne    c0017d50 <scanMADT()+0x7e>
c0017d37:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0017d3c:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017d42:	83 e2 fb             	and    edx,0xfffffffb
c0017d45:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017d4b:	e9 03 04 00 00       	jmp    c0018153 <scanMADT()+0x481>
c0017d50:	a1 68 0c 03 c0       	mov    eax,ds:0xc0030c68
c0017d55:	83 ec 0c             	sub    esp,0xc
c0017d58:	50                   	push   eax
c0017d59:	e8 93 fb ff ff       	call   c00178f1 <loadACPITables(unsigned char*)>
c0017d5e:	83 c4 10             	add    esp,0x10
c0017d61:	a1 68 0c 03 c0       	mov    eax,ds:0xc0030c68
c0017d66:	83 ec 08             	sub    esp,0x8
c0017d69:	68 96 b3 02 c0       	push   0xc002b396
c0017d6e:	50                   	push   eax
c0017d6f:	e8 c2 fe ff ff       	call   c0017c36 <findDataTable(unsigned char*, char*)>
c0017d74:	83 c4 10             	add    esp,0x10
c0017d77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017d7b:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017d80:	75 19                	jne    c0017d9b <scanMADT()+0xc9>
c0017d82:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0017d87:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017d8d:	83 e2 fe             	and    edx,0xfffffffe
c0017d90:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017d96:	e9 b8 03 00 00       	jmp    c0018153 <scanMADT()+0x481>
c0017d9b:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017da3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017da7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017daa:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017dae:	0f 87 9f 03 00 00    	ja     c0018153 <scanMADT()+0x481>
c0017db4:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017dbc:	0f 87 91 03 00 00    	ja     c0018153 <scanMADT()+0x481>
c0017dc2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017dc6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017dca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017dce:	8d 50 01             	lea    edx,[eax+0x1]
c0017dd1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017dd5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017dd9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017ddd:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017de1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017de5:	8d 50 01             	lea    edx,[eax+0x1]
c0017de8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017dec:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017df0:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017df4:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017df8:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017dfd:	0f 86 4f 03 00 00    	jbe    c0018152 <scanMADT()+0x480>
c0017e03:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017e08:	75 57                	jne    c0017e61 <scanMADT()+0x18f>
c0017e0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e0e:	8d 50 01             	lea    edx,[eax+0x1]
c0017e11:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017e15:	8a 15 60 0e 03 c0    	mov    dl,BYTE PTR ds:0xc0030e60
c0017e1b:	0f b6 d2             	movzx  edx,dl
c0017e1e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017e22:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017e26:	88 82 a0 0e 03 c0    	mov    BYTE PTR [edx-0x3ffcf160],al
c0017e2c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e30:	8d 50 01             	lea    edx,[eax+0x1]
c0017e33:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017e37:	8a 15 60 0e 03 c0    	mov    dl,BYTE PTR ds:0xc0030e60
c0017e3d:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017e40:	88 0d 60 0e 03 c0    	mov    BYTE PTR ds:0xc0030e60,cl
c0017e46:	0f b6 d2             	movzx  edx,dl
c0017e49:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017e4d:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017e51:	88 82 80 0e 03 c0    	mov    BYTE PTR [edx-0x3ffcf180],al
c0017e57:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017e5c:	e9 da 02 00 00       	jmp    c001813b <scanMADT()+0x469>
c0017e61:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017e66:	0f 85 14 01 00 00    	jne    c0017f80 <scanMADT()+0x2ae>
c0017e6c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e70:	8d 50 01             	lea    edx,[eax+0x1]
c0017e73:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017e77:	8a 15 20 0d 03 c0    	mov    dl,BYTE PTR ds:0xc0030d20
c0017e7d:	0f b6 d2             	movzx  edx,dl
c0017e80:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017e84:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017e88:	88 82 40 0d 03 c0    	mov    BYTE PTR [edx-0x3ffcf2c0],al
c0017e8e:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017e92:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e96:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e9a:	01 d0                	add    eax,edx
c0017e9c:	83 c0 2c             	add    eax,0x2c
c0017e9f:	8a 00                	mov    al,BYTE PTR [eax]
c0017ea1:	0f b6 d0             	movzx  edx,al
c0017ea4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ea8:	8d 48 01             	lea    ecx,[eax+0x1]
c0017eab:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017eaf:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017eb3:	0f b6 c0             	movzx  eax,al
c0017eb6:	c1 e0 08             	shl    eax,0x8
c0017eb9:	89 d1                	mov    ecx,edx
c0017ebb:	09 c1                	or     ecx,eax
c0017ebd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ec1:	8d 50 02             	lea    edx,[eax+0x2]
c0017ec4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ec8:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017ecc:	0f b6 c0             	movzx  eax,al
c0017ecf:	c1 e0 10             	shl    eax,0x10
c0017ed2:	09 c1                	or     ecx,eax
c0017ed4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ed8:	8d 50 03             	lea    edx,[eax+0x3]
c0017edb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017edf:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017ee3:	0f b6 c0             	movzx  eax,al
c0017ee6:	c1 e0 18             	shl    eax,0x18
c0017ee9:	09 c1                	or     ecx,eax
c0017eeb:	89 ca                	mov    edx,ecx
c0017eed:	a0 20 0d 03 c0       	mov    al,ds:0xc0030d20
c0017ef2:	0f b6 c0             	movzx  eax,al
c0017ef5:	89 14 85 60 0d 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf2a0],edx
c0017efc:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017f01:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f05:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f09:	01 d0                	add    eax,edx
c0017f0b:	83 c0 2c             	add    eax,0x2c
c0017f0e:	8a 00                	mov    al,BYTE PTR [eax]
c0017f10:	0f b6 d0             	movzx  edx,al
c0017f13:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f17:	8d 48 01             	lea    ecx,[eax+0x1]
c0017f1a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f1e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017f22:	0f b6 c0             	movzx  eax,al
c0017f25:	c1 e0 08             	shl    eax,0x8
c0017f28:	89 d1                	mov    ecx,edx
c0017f2a:	09 c1                	or     ecx,eax
c0017f2c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f30:	8d 50 02             	lea    edx,[eax+0x2]
c0017f33:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f37:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017f3b:	0f b6 c0             	movzx  eax,al
c0017f3e:	c1 e0 10             	shl    eax,0x10
c0017f41:	09 c1                	or     ecx,eax
c0017f43:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f47:	8d 50 03             	lea    edx,[eax+0x3]
c0017f4a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f4e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017f52:	0f b6 c0             	movzx  eax,al
c0017f55:	c1 e0 18             	shl    eax,0x18
c0017f58:	09 c1                	or     ecx,eax
c0017f5a:	89 ca                	mov    edx,ecx
c0017f5c:	a0 20 0d 03 c0       	mov    al,ds:0xc0030d20
c0017f61:	0f b6 c0             	movzx  eax,al
c0017f64:	89 14 85 e0 0d 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf220],edx
c0017f6b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017f70:	a0 20 0d 03 c0       	mov    al,ds:0xc0030d20
c0017f75:	40                   	inc    eax
c0017f76:	a2 20 0d 03 c0       	mov    ds:0xc0030d20,al
c0017f7b:	e9 bb 01 00 00       	jmp    c001813b <scanMADT()+0x469>
c0017f80:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0017f85:	0f 85 e9 00 00 00    	jne    c0018074 <scanMADT()+0x3a2>
c0017f8b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f8f:	8d 50 01             	lea    edx,[eax+0x1]
c0017f92:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f96:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f9a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017f9e:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0017fa2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fa6:	8d 50 01             	lea    edx,[eax+0x1]
c0017fa9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017fad:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017fb1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017fb5:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017fb9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017fbd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fc1:	01 d0                	add    eax,edx
c0017fc3:	83 c0 2c             	add    eax,0x2c
c0017fc6:	8a 00                	mov    al,BYTE PTR [eax]
c0017fc8:	0f b6 d0             	movzx  edx,al
c0017fcb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fcf:	8d 48 01             	lea    ecx,[eax+0x1]
c0017fd2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fd6:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017fda:	0f b6 c0             	movzx  eax,al
c0017fdd:	c1 e0 08             	shl    eax,0x8
c0017fe0:	89 d1                	mov    ecx,edx
c0017fe2:	09 c1                	or     ecx,eax
c0017fe4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fe8:	8d 50 02             	lea    edx,[eax+0x2]
c0017feb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fef:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017ff3:	0f b6 c0             	movzx  eax,al
c0017ff6:	c1 e0 10             	shl    eax,0x10
c0017ff9:	09 c1                	or     ecx,eax
c0017ffb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fff:	8d 50 03             	lea    edx,[eax+0x3]
c0018002:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018006:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001800a:	0f b6 c0             	movzx  eax,al
c001800d:	c1 e0 18             	shl    eax,0x18
c0018010:	09 c8                	or     eax,ecx
c0018012:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018016:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001801b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001801f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018023:	01 d0                	add    eax,edx
c0018025:	83 c0 2c             	add    eax,0x2c
c0018028:	8a 00                	mov    al,BYTE PTR [eax]
c001802a:	0f b6 c0             	movzx  eax,al
c001802d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018031:	8d 4a 01             	lea    ecx,[edx+0x1]
c0018034:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018038:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c001803c:	0f b6 d2             	movzx  edx,dl
c001803f:	c1 e2 08             	shl    edx,0x8
c0018042:	09 d0                	or     eax,edx
c0018044:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0018049:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001804e:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0018053:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018057:	88 90 e0 d5 02 c0    	mov    BYTE PTR [eax-0x3ffd2a20],dl
c001805d:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0018062:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0018067:	66 89 84 12 00 0d 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffcf300],ax
c001806f:	e9 c7 00 00 00       	jmp    c001813b <scanMADT()+0x469>
c0018074:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0018079:	0f 85 b0 00 00 00    	jne    c001812f <scanMADT()+0x45d>
c001807f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018083:	8d 50 01             	lea    edx,[eax+0x1]
c0018086:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001808a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001808e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018092:	0f b6 c0             	movzx  eax,al
c0018095:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018099:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001809d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180a1:	01 d0                	add    eax,edx
c00180a3:	83 c0 2c             	add    eax,0x2c
c00180a6:	8a 00                	mov    al,BYTE PTR [eax]
c00180a8:	0f b6 d0             	movzx  edx,al
c00180ab:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180af:	8d 48 01             	lea    ecx,[eax+0x1]
c00180b2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180b6:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00180ba:	0f b6 c0             	movzx  eax,al
c00180bd:	c1 e0 08             	shl    eax,0x8
c00180c0:	09 d0                	or     eax,edx
c00180c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00180c6:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00180cb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180cf:	8d 50 01             	lea    edx,[eax+0x1]
c00180d2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00180d6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180da:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00180de:	0f b6 c0             	movzx  eax,al
c00180e1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00180e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180e9:	c1 e0 08             	shl    eax,0x8
c00180ec:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00180f0:	89 c1                	mov    ecx,eax
c00180f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00180f6:	c1 e0 18             	shl    eax,0x18
c00180f9:	89 c3                	mov    ebx,eax
c00180fb:	a1 70 0c 03 c0       	mov    eax,ds:0xc0030c70
c0018100:	8d 50 01             	lea    edx,[eax+0x1]
c0018103:	89 15 70 0c 03 c0    	mov    DWORD PTR ds:0xc0030c70,edx
c0018109:	09 d9                	or     ecx,ebx
c001810b:	89 ca                	mov    edx,ecx
c001810d:	89 14 85 80 0c 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf380],edx
c0018114:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0018118:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001811c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018120:	68 f8 b4 02 c0       	push   0xc002b4f8
c0018125:	e8 68 ad ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001812a:	83 c4 10             	add    esp,0x10
c001812d:	eb 0c                	jmp    c001813b <scanMADT()+0x469>
c001812f:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0018134:	75 05                	jne    c001813b <scanMADT()+0x469>
c0018136:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c001813b:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0018140:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018144:	01 d0                	add    eax,edx
c0018146:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001814a:	e9 54 fc ff ff       	jmp    c0017da3 <scanMADT()+0xd1>
c001814f:	90                   	nop
c0018150:	eb 01                	jmp    c0018153 <scanMADT()+0x481>
c0018152:	90                   	nop
c0018153:	83 c4 38             	add    esp,0x38
c0018156:	5b                   	pop    ebx
c0018157:	c3                   	ret    

c0018158 <ACPI::ACPI()>:
c0018158:	83 ec 0c             	sub    esp,0xc
c001815b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001815f:	83 ec 08             	sub    esp,0x8
c0018162:	68 9b b3 02 c0       	push   0xc002b39b
c0018167:	50                   	push   eax
c0018168:	e8 3b c3 ff ff       	call   c00144a8 <Device::Device(char const*)>
c001816d:	83 c4 10             	add    esp,0x10
c0018170:	ba 6c b5 02 c0       	mov    edx,0xc002b56c
c0018175:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018179:	89 10                	mov    DWORD PTR [eax],edx
c001817b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001817f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0018186:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001818a:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0018194:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018198:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c00181a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181a6:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c00181ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181b1:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c00181b8:	e8 15 fb ff ff       	call   c0017cd2 <scanMADT()>
c00181bd:	90                   	nop
c00181be:	83 c4 0c             	add    esp,0xc
c00181c1:	c3                   	ret    

c00181c2 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c00181c2:	83 ec 2c             	sub    esp,0x2c
c00181c5:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00181c9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00181cd:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00181d1:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00181d5:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00181da:	88 d0                	mov    al,dl
c00181dc:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00181e0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00181e5:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00181ed:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00181f1:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00181f7:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00181fb:	0f 8d 97 00 00 00    	jge    c0018298 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0018201:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018205:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018209:	83 c2 2a             	add    edx,0x2a
c001820c:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0018210:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0018215:	75 78                	jne    c001828f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0018217:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001821b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001821f:	83 c2 2a             	add    edx,0x2a
c0018222:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0018226:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c001822a:	75 63                	jne    c001828f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c001822c:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0018231:	74 3a                	je     c001826d <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0018233:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018237:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001823b:	83 c2 2a             	add    edx,0x2a
c001823e:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0018242:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018246:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0018249:	39 c2                	cmp    edx,eax
c001824b:	74 10                	je     c001825d <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c001824d:	83 ec 0c             	sub    esp,0xc
c0018250:	68 34 b5 02 c0       	push   0xc002b534
c0018255:	e8 13 23 00 00       	call   c001a56d <Krnl::panic(char const*)>
c001825a:	83 c4 10             	add    esp,0x10
c001825d:	83 ec 0c             	sub    esp,0xc
c0018260:	68 a0 b3 02 c0       	push   0xc002b3a0
c0018265:	e8 03 23 00 00       	call   c001a56d <Krnl::panic(char const*)>
c001826a:	83 c4 10             	add    esp,0x10
c001826d:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0018271:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018275:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018279:	83 c2 2a             	add    edx,0x2a
c001827c:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0018280:	8b 02                	mov    eax,DWORD PTR [edx]
c0018282:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0018285:	89 01                	mov    DWORD PTR [ecx],eax
c0018287:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001828a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001828f:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0018293:	e9 55 ff ff ff       	jmp    c00181ed <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0018298:	90                   	nop
c0018299:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001829d:	83 c4 2c             	add    esp,0x2c
c00182a0:	c2 04 00             	ret    0x4
c00182a3:	90                   	nop

c00182a4 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c00182a4:	83 ec 1c             	sub    esp,0x1c
c00182a7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00182ab:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00182af:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00182b3:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00182b8:	88 c8                	mov    al,cl
c00182ba:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00182be:	88 d0                	mov    al,dl
c00182c0:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00182c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00182c8:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00182ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00182d2:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00182d5:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c00182d9:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c00182dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00182e1:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00182e7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00182eb:	8d 48 2a             	lea    ecx,[eax+0x2a]
c00182ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00182f2:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c00182f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00182fb:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018301:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0018305:	8d 48 01             	lea    ecx,[eax+0x1]
c0018308:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001830c:	83 c2 2a             	add    edx,0x2a
c001830f:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0018313:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018317:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001831d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018321:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0018324:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018328:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c001832c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018330:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018336:	8d 50 01             	lea    edx,[eax+0x1]
c0018339:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001833d:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0018343:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018347:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001834d:	3d 00 02 00 00       	cmp    eax,0x200
c0018352:	75 10                	jne    c0018364 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0018354:	83 ec 0c             	sub    esp,0xc
c0018357:	68 af b3 02 c0       	push   0xc002b3af
c001835c:	e8 0c 22 00 00       	call   c001a56d <Krnl::panic(char const*)>
c0018361:	83 c4 10             	add    esp,0x10
c0018364:	90                   	nop
c0018365:	83 c4 1c             	add    esp,0x1c
c0018368:	c3                   	ret    
c0018369:	90                   	nop

c001836a <ACPI::setScreenBrightnessLevel(void*, int)>:
c001836a:	b8 00 00 00 00       	mov    eax,0x0
c001836f:	c3                   	ret    

c0018370 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0018370:	83 ec 1c             	sub    esp,0x1c
c0018373:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018377:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c001837a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001837e:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0018383:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0018388:	83 ec 08             	sub    esp,0x8
c001838b:	52                   	push   edx
c001838c:	50                   	push   eax
c001838d:	e8 c6 6a ff ff       	call   c000ee58 <Computer::readCMOS(unsigned char)>
c0018392:	83 c4 10             	add    esp,0x10
c0018395:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018399:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c001839e:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00183a3:	83 ec 04             	sub    esp,0x4
c00183a6:	6a 01                	push   0x1
c00183a8:	52                   	push   edx
c00183a9:	50                   	push   eax
c00183aa:	e8 bf 6b ff ff       	call   c000ef6e <Computer::writeCMOS(unsigned char, unsigned char)>
c00183af:	83 c4 10             	add    esp,0x10
c00183b2:	90                   	nop
c00183b3:	83 c4 1c             	add    esp,0x1c
c00183b6:	c3                   	ret    
c00183b7:	90                   	nop

c00183b8 <ACPI::open(int, int, void*)>:
c00183b8:	53                   	push   ebx
c00183b9:	83 ec 28             	sub    esp,0x28
c00183bc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183c0:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c00183c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183cb:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c00183d2:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c00183d7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00183dd:	83 e0 04             	and    eax,0x4
c00183e0:	84 c0                	test   al,al
c00183e2:	74 47                	je     c001842b <ACPI::open(int, int, void*)+0x73>
c00183e4:	a1 68 0c 03 c0       	mov    eax,ds:0xc0030c68
c00183e9:	83 ec 08             	sub    esp,0x8
c00183ec:	68 cc b3 02 c0       	push   0xc002b3cc
c00183f1:	50                   	push   eax
c00183f2:	e8 3f f8 ff ff       	call   c0017c36 <findDataTable(unsigned char*, char*)>
c00183f7:	83 c4 10             	add    esp,0x10
c00183fa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00183fe:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0018403:	74 26                	je     c001842b <ACPI::open(int, int, void*)+0x73>
c0018405:	83 ec 0c             	sub    esp,0xc
c0018408:	68 d1 b3 02 c0       	push   0xc002b3d1
c001840d:	e8 80 aa ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0018412:	83 c4 10             	add    esp,0x10
c0018415:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018419:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018420:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018424:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c001842b:	c7 44 24 18 5f 0c 00 00 	mov    DWORD PTR [esp+0x18],0xc5f
c0018433:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018437:	8a 00                	mov    al,BYTE PTR [eax]
c0018439:	3c 01                	cmp    al,0x1
c001843b:	75 28                	jne    c0018465 <ACPI::open(int, int, void*)+0xad>
c001843d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018441:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018448:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001844c:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0018453:	83 ec 0c             	sub    esp,0xc
c0018456:	68 e2 b3 02 c0       	push   0xc002b3e2
c001845b:	e8 32 aa ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0018460:	83 c4 10             	add    esp,0x10
c0018463:	eb 25                	jmp    c001848a <ACPI::open(int, int, void*)+0xd2>
c0018465:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018469:	8a 00                	mov    al,BYTE PTR [eax]
c001846b:	3c 02                	cmp    al,0x2
c001846d:	75 1b                	jne    c001848a <ACPI::open(int, int, void*)+0xd2>
c001846f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018473:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001847a:	83 ec 0c             	sub    esp,0xc
c001847d:	68 ea b3 02 c0       	push   0xc002b3ea
c0018482:	e8 0b aa ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0018487:	83 c4 10             	add    esp,0x10
c001848a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001848e:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018494:	83 f0 01             	xor    eax,0x1
c0018497:	84 c0                	test   al,al
c0018499:	74 6a                	je     c0018505 <ACPI::open(int, int, void*)+0x14d>
c001849b:	83 ec 0c             	sub    esp,0xc
c001849e:	68 f2 b3 02 c0       	push   0xc002b3f2
c00184a3:	e8 ea a9 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c00184a8:	83 c4 10             	add    esp,0x10
c00184ab:	e8 a0 7c fe ff       	call   c0000150 <manualPCIProbe>
c00184b0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00184b4:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c00184b9:	75 28                	jne    c00184e3 <ACPI::open(int, int, void*)+0x12b>
c00184bb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184bf:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00184c6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184ca:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00184d1:	83 ec 0c             	sub    esp,0xc
c00184d4:	68 00 b4 02 c0       	push   0xc002b400
c00184d9:	e8 b4 a9 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c00184de:	83 c4 10             	add    esp,0x10
c00184e1:	eb 22                	jmp    c0018505 <ACPI::open(int, int, void*)+0x14d>
c00184e3:	83 7c 24 14 02       	cmp    DWORD PTR [esp+0x14],0x2
c00184e8:	75 1b                	jne    c0018505 <ACPI::open(int, int, void*)+0x14d>
c00184ea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184ee:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00184f5:	83 ec 0c             	sub    esp,0xc
c00184f8:	68 0a b4 02 c0       	push   0xc002b40a
c00184fd:	e8 90 a9 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0018502:	83 c4 10             	add    esp,0x10
c0018505:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018509:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c001850f:	84 c0                	test   al,al
c0018511:	74 13                	je     c0018526 <ACPI::open(int, int, void*)+0x16e>
c0018513:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018517:	8a 80 65 12 00 00    	mov    al,BYTE PTR [eax+0x1265]
c001851d:	83 f0 01             	xor    eax,0x1
c0018520:	0f b6 c0             	movzx  eax,al
c0018523:	40                   	inc    eax
c0018524:	eb 05                	jmp    c001852b <ACPI::open(int, int, void*)+0x173>
c0018526:	b8 00 00 00 00       	mov    eax,0x0
c001852b:	83 ec 08             	sub    esp,0x8
c001852e:	50                   	push   eax
c001852f:	68 14 b4 02 c0       	push   0xc002b414
c0018534:	e8 59 a9 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0018539:	83 c4 10             	add    esp,0x10
c001853c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018540:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018546:	84 c0                	test   al,al
c0018548:	74 67                	je     c00185b1 <ACPI::open(int, int, void*)+0x1f9>
c001854a:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c0018552:	83 ec 0c             	sub    esp,0xc
c0018555:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018559:	e8 e2 72 ff ff       	call   c000f840 <malloc>
c001855e:	83 c4 10             	add    esp,0x10
c0018561:	89 c3                	mov    ebx,eax
c0018563:	83 ec 0c             	sub    esp,0xc
c0018566:	53                   	push   ebx
c0018567:	e8 2c a3 00 00       	call   c0022898 <PCI::PCI()>
c001856c:	83 c4 10             	add    esp,0x10
c001856f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018573:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018577:	83 ec 08             	sub    esp,0x8
c001857a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001857e:	50                   	push   eax
c001857f:	e8 34 bd ff ff       	call   c00142b8 <Device::addChild(Device*)>
c0018584:	83 c4 10             	add    esp,0x10
c0018587:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001858b:	8b 00                	mov    eax,DWORD PTR [eax]
c001858d:	83 c0 08             	add    eax,0x8
c0018590:	8b 00                	mov    eax,DWORD PTR [eax]
c0018592:	6a 00                	push   0x0
c0018594:	6a 00                	push   0x0
c0018596:	6a 00                	push   0x0
c0018598:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001859c:	ff d0                	call   eax
c001859e:	83 c4 10             	add    esp,0x10
c00185a1:	83 ec 0c             	sub    esp,0xc
c00185a4:	68 1d b4 02 c0       	push   0xc002b41d
c00185a9:	e8 e4 a8 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c00185ae:	83 c4 10             	add    esp,0x10
c00185b1:	e8 2c 95 ff ff       	call   c0011ae2 <Virt::swappingSetup()>
c00185b6:	83 ec 0c             	sub    esp,0xc
c00185b9:	68 28 b4 02 c0       	push   0xc002b428
c00185be:	e8 80 46 00 00       	call   c001cc43 <Thr::loadKernelSymbolTable(char const*)>
c00185c3:	83 c4 10             	add    esp,0x10
c00185c6:	8b 1d 88 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e388
c00185cc:	83 ec 08             	sub    esp,0x8
c00185cf:	6a 01                	push   0x1
c00185d1:	68 46 b4 02 c0       	push   0xc002b446
c00185d6:	e8 c5 50 00 00       	call   c001d6a0 <Thr::loadDLL(char const*, bool)>
c00185db:	83 c4 10             	add    esp,0x10
c00185de:	83 ec 08             	sub    esp,0x8
c00185e1:	53                   	push   ebx
c00185e2:	50                   	push   eax
c00185e3:	e8 07 53 00 00       	call   c001d8ef <Thr::executeDLL(unsigned long, void*)>
c00185e8:	83 c4 10             	add    esp,0x10
c00185eb:	8b 1d 88 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e388
c00185f1:	83 ec 08             	sub    esp,0x8
c00185f4:	6a 01                	push   0x1
c00185f6:	68 63 b4 02 c0       	push   0xc002b463
c00185fb:	e8 a0 50 00 00       	call   c001d6a0 <Thr::loadDLL(char const*, bool)>
c0018600:	83 c4 10             	add    esp,0x10
c0018603:	83 ec 08             	sub    esp,0x8
c0018606:	53                   	push   ebx
c0018607:	50                   	push   eax
c0018608:	e8 e2 52 00 00       	call   c001d8ef <Thr::executeDLL(unsigned long, void*)>
c001860d:	83 c4 10             	add    esp,0x10
c0018610:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0018615:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001861b:	83 e0 04             	and    eax,0x4
c001861e:	84 c0                	test   al,al
c0018620:	0f 84 d2 00 00 00    	je     c00186f8 <ACPI::open(int, int, void*)+0x340>
c0018626:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001862d:	83 ec 0c             	sub    esp,0xc
c0018630:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0018634:	e8 07 72 ff ff       	call   c000f840 <malloc>
c0018639:	83 c4 10             	add    esp,0x10
c001863c:	89 c3                	mov    ebx,eax
c001863e:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c0018643:	83 ec 04             	sub    esp,0x4
c0018646:	50                   	push   eax
c0018647:	68 80 b4 02 c0       	push   0xc002b480
c001864c:	53                   	push   ebx
c001864d:	e8 98 ad ff ff       	call   c00133ea <File::File(char const*, Process*)>
c0018652:	83 c4 10             	add    esp,0x10
c0018655:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0018659:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001865e:	74 17                	je     c0018677 <ACPI::open(int, int, void*)+0x2bf>
c0018660:	83 ec 0c             	sub    esp,0xc
c0018663:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018667:	e8 50 b0 ff ff       	call   c00136bc <File::exists()>
c001866c:	83 c4 10             	add    esp,0x10
c001866f:	84 c0                	test   al,al
c0018671:	74 04                	je     c0018677 <ACPI::open(int, int, void*)+0x2bf>
c0018673:	b0 01                	mov    al,0x1
c0018675:	eb 02                	jmp    c0018679 <ACPI::open(int, int, void*)+0x2c1>
c0018677:	b0 00                	mov    al,0x0
c0018679:	84 c0                	test   al,al
c001867b:	74 22                	je     c001869f <ACPI::open(int, int, void*)+0x2e7>
c001867d:	83 ec 08             	sub    esp,0x8
c0018680:	6a 01                	push   0x1
c0018682:	68 80 b4 02 c0       	push   0xc002b480
c0018687:	e8 14 50 00 00       	call   c001d6a0 <Thr::loadDLL(char const*, bool)>
c001868c:	83 c4 10             	add    esp,0x10
c001868f:	83 ec 08             	sub    esp,0x8
c0018692:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018696:	50                   	push   eax
c0018697:	e8 53 52 00 00       	call   c001d8ef <Thr::executeDLL(unsigned long, void*)>
c001869c:	83 c4 10             	add    esp,0x10
c001869f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00186a4:	74 1e                	je     c00186c4 <ACPI::open(int, int, void*)+0x30c>
c00186a6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00186ab:	74 17                	je     c00186c4 <ACPI::open(int, int, void*)+0x30c>
c00186ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00186b1:	8b 00                	mov    eax,DWORD PTR [eax]
c00186b3:	83 c0 08             	add    eax,0x8
c00186b6:	8b 00                	mov    eax,DWORD PTR [eax]
c00186b8:	83 ec 0c             	sub    esp,0xc
c00186bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00186bf:	ff d0                	call   eax
c00186c1:	83 c4 10             	add    esp,0x10
c00186c4:	a1 68 0c 03 c0       	mov    eax,ds:0xc0030c68
c00186c9:	83 ec 08             	sub    esp,0x8
c00186cc:	68 9d b4 02 c0       	push   0xc002b49d
c00186d1:	50                   	push   eax
c00186d2:	e8 5f f5 ff ff       	call   c0017c36 <findDataTable(unsigned char*, char*)>
c00186d7:	83 c4 10             	add    esp,0x10
c00186da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00186de:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00186e3:	74 13                	je     c00186f8 <ACPI::open(int, int, void*)+0x340>
c00186e5:	83 ec 08             	sub    esp,0x8
c00186e8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00186ec:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00186f0:	e8 7b fc ff ff       	call   c0018370 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c00186f5:	83 c4 10             	add    esp,0x10
c00186f8:	b8 00 00 00 00       	mov    eax,0x0
c00186fd:	83 c4 28             	add    esp,0x28
c0018700:	5b                   	pop    ebx
c0018701:	c3                   	ret    

c0018702 <ACPI::sleep()>:
c0018702:	83 ec 0c             	sub    esp,0xc
c0018705:	a1 40 0a 03 c0       	mov    eax,ds:0xc0030a40
c001870a:	85 c0                	test   eax,eax
c001870c:	74 07                	je     c0018715 <ACPI::sleep()+0x13>
c001870e:	a1 40 0a 03 c0       	mov    eax,ds:0xc0030a40
c0018713:	ff d0                	call   eax
c0018715:	90                   	nop
c0018716:	83 c4 0c             	add    esp,0xc
c0018719:	c3                   	ret    

c001871a <CPU::close(int, int, void*)>:
c001871a:	31 c0                	xor    eax,eax
c001871c:	c3                   	ret    
c001871d:	90                   	nop

c001871e <CPU::lookupAMDName(unsigned char, unsigned char)>:
c001871e:	55                   	push   ebp
c001871f:	57                   	push   edi
c0018720:	56                   	push   esi
c0018721:	53                   	push   ebx
c0018722:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018726:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001872a:	89 ce                	mov    esi,ecx
c001872c:	89 d5                	mov    ebp,edx
c001872e:	80 f9 04             	cmp    cl,0x4
c0018731:	75 28                	jne    c001875b <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0018733:	8d 42 f9             	lea    eax,[edx-0x7]
c0018736:	3c 03                	cmp    al,0x3
c0018738:	0f 86 63 01 00 00    	jbe    c00188a1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c001873e:	80 fa 03             	cmp    dl,0x3
c0018741:	0f 84 5a 01 00 00    	je     c00188a1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018747:	8d 7a f2             	lea    edi,[edx-0xe]
c001874a:	b8 b0 d7 02 c0       	mov    eax,0xc002d7b0
c001874f:	89 fb                	mov    ebx,edi
c0018751:	80 fb 01             	cmp    bl,0x1
c0018754:	77 4e                	ja     c00187a4 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0018756:	e9 52 01 00 00       	jmp    c00188ad <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001875b:	80 f9 05             	cmp    cl,0x5
c001875e:	75 4d                	jne    c00187ad <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0018760:	b8 c0 d7 02 c0       	mov    eax,0xc002d7c0
c0018765:	80 fa 03             	cmp    dl,0x3
c0018768:	0f 86 3f 01 00 00    	jbe    c00188ad <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001876e:	8d 7a fa             	lea    edi,[edx-0x6]
c0018771:	b8 d0 d7 02 c0       	mov    eax,0xc002d7d0
c0018776:	89 fb                	mov    ebx,edi
c0018778:	80 fb 01             	cmp    bl,0x1
c001877b:	0f 86 2c 01 00 00    	jbe    c00188ad <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018781:	b8 e0 d7 02 c0       	mov    eax,0xc002d7e0
c0018786:	80 fa 08             	cmp    dl,0x8
c0018789:	0f 84 1e 01 00 00    	je     c00188ad <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001878f:	89 d7                	mov    edi,edx
c0018791:	b8 f0 d7 02 c0       	mov    eax,0xc002d7f0
c0018796:	83 e7 fb             	and    edi,0xfffffffb
c0018799:	89 fb                	mov    ebx,edi
c001879b:	80 fb 09             	cmp    bl,0x9
c001879e:	0f 84 09 01 00 00    	je     c00188ad <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187a4:	31 c0                	xor    eax,eax
c00187a6:	89 eb                	mov    ebx,ebp
c00187a8:	0f b6 fb             	movzx  edi,bl
c00187ab:	eb 30                	jmp    c00187dd <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c00187ad:	31 c0                	xor    eax,eax
c00187af:	80 f9 06             	cmp    cl,0x6
c00187b2:	75 f2                	jne    c00187a6 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00187b4:	80 fa 0a             	cmp    dl,0xa
c00187b7:	77 ed                	ja     c00187a6 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00187b9:	bf de 05 00 00       	mov    edi,0x5de
c00187be:	0f a3 d7             	bt     edi,edx
c00187c1:	73 e3                	jae    c00187a6 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00187c3:	b8 00 d8 02 c0       	mov    eax,0xc002d800
c00187c8:	e9 e0 00 00 00       	jmp    c00188ad <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187cd:	39 c7                	cmp    edi,eax
c00187cf:	0f 84 d3 00 00 00    	je     c00188a8 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00187d5:	40                   	inc    eax
c00187d6:	3d d0 00 00 00       	cmp    eax,0xd0
c00187db:	74 09                	je     c00187e6 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c00187dd:	89 f3                	mov    ebx,esi
c00187df:	80 fb 0f             	cmp    bl,0xf
c00187e2:	75 f1                	jne    c00187d5 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c00187e4:	eb e7                	jmp    c00187cd <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c00187e6:	80 f9 10             	cmp    cl,0x10
c00187e9:	75 14                	jne    c00187ff <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c00187eb:	8d 42 fc             	lea    eax,[edx-0x4]
c00187ee:	83 e0 fb             	and    eax,0xfffffffb
c00187f1:	3c 02                	cmp    al,0x2
c00187f3:	76 34                	jbe    c0018829 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c00187f5:	b8 82 b8 02 c0       	mov    eax,0xc002b882
c00187fa:	80 fa 02             	cmp    dl,0x2
c00187fd:	eb 24                	jmp    c0018823 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c00187ff:	80 f9 11             	cmp    cl,0x11
c0018802:	75 13                	jne    c0018817 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0018804:	b8 82 b8 02 c0       	mov    eax,0xc002b882
c0018809:	80 fa 03             	cmp    dl,0x3
c001880c:	0f 85 9b 00 00 00    	jne    c00188ad <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018812:	e9 91 00 00 00       	jmp    c00188a8 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018817:	80 f9 12             	cmp    cl,0x12
c001881a:	75 14                	jne    c0018830 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c001881c:	b8 82 b8 02 c0       	mov    eax,0xc002b882
c0018821:	fe ca                	dec    dl
c0018823:	0f 85 84 00 00 00    	jne    c00188ad <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018829:	b8 20 d8 02 c0       	mov    eax,0xc002d820
c001882e:	eb 7d                	jmp    c00188ad <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018830:	80 f9 14             	cmp    cl,0x14
c0018833:	75 12                	jne    c0018847 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0018835:	4a                   	dec    edx
c0018836:	b8 82 b8 02 c0       	mov    eax,0xc002b882
c001883b:	80 fa 01             	cmp    dl,0x1
c001883e:	77 6d                	ja     c00188ad <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018840:	b8 30 d8 02 c0       	mov    eax,0xc002d830
c0018845:	eb 66                	jmp    c00188ad <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018847:	80 f9 15             	cmp    cl,0x15
c001884a:	75 31                	jne    c001887d <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c001884c:	b8 40 d8 02 c0       	mov    eax,0xc002d840
c0018851:	80 fa 01             	cmp    dl,0x1
c0018854:	74 57                	je     c00188ad <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018856:	b8 82 b8 02 c0       	mov    eax,0xc002b882
c001885b:	80 fa 13             	cmp    dl,0x13
c001885e:	76 0c                	jbe    c001886c <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0018860:	80 fa 30             	cmp    dl,0x30
c0018863:	75 48                	jne    c00188ad <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018865:	b8 60 d8 02 c0       	mov    eax,0xc002d860
c001886a:	eb 41                	jmp    c00188ad <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001886c:	b9 04 00 09 00       	mov    ecx,0x90004
c0018871:	0f a3 d1             	bt     ecx,edx
c0018874:	73 37                	jae    c00188ad <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018876:	b8 50 d8 02 c0       	mov    eax,0xc002d850
c001887b:	eb 30                	jmp    c00188ad <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001887d:	b8 82 b8 02 c0       	mov    eax,0xc002b882
c0018882:	80 f9 16             	cmp    cl,0x16
c0018885:	75 26                	jne    c00188ad <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018887:	b8 70 d8 02 c0       	mov    eax,0xc002d870
c001888c:	84 d2                	test   dl,dl
c001888e:	74 1d                	je     c00188ad <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018890:	b8 82 b8 02 c0       	mov    eax,0xc002b882
c0018895:	80 fa 30             	cmp    dl,0x30
c0018898:	75 13                	jne    c00188ad <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001889a:	b8 80 d8 02 c0       	mov    eax,0xc002d880
c001889f:	eb 0c                	jmp    c00188ad <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188a1:	b8 a0 d7 02 c0       	mov    eax,0xc002d7a0
c00188a6:	eb 05                	jmp    c00188ad <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188a8:	b8 10 d8 02 c0       	mov    eax,0xc002d810
c00188ad:	5b                   	pop    ebx
c00188ae:	5e                   	pop    esi
c00188af:	5f                   	pop    edi
c00188b0:	5d                   	pop    ebp
c00188b1:	c3                   	ret    

c00188b2 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c00188b2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00188b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00188ba:	80 f9 04             	cmp    cl,0x4
c00188bd:	75 6b                	jne    c001892a <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c00188bf:	b8 00 d6 02 c0       	mov    eax,0xc002d600
c00188c4:	80 fa 01             	cmp    dl,0x1
c00188c7:	0f 86 92 02 00 00    	jbe    c0018b5f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188cd:	b8 10 d6 02 c0       	mov    eax,0xc002d610
c00188d2:	80 fa 02             	cmp    dl,0x2
c00188d5:	0f 84 84 02 00 00    	je     c0018b5f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188db:	b8 20 d6 02 c0       	mov    eax,0xc002d620
c00188e0:	80 fa 03             	cmp    dl,0x3
c00188e3:	0f 84 76 02 00 00    	je     c0018b5f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188e9:	b8 30 d6 02 c0       	mov    eax,0xc002d630
c00188ee:	80 fa 04             	cmp    dl,0x4
c00188f1:	0f 84 68 02 00 00    	je     c0018b5f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188f7:	b8 40 d6 02 c0       	mov    eax,0xc002d640
c00188fc:	80 fa 05             	cmp    dl,0x5
c00188ff:	0f 84 5a 02 00 00    	je     c0018b5f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018905:	b8 20 d6 02 c0       	mov    eax,0xc002d620
c001890a:	80 fa 07             	cmp    dl,0x7
c001890d:	0f 84 4c 02 00 00    	je     c0018b5f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018913:	83 ea 08             	sub    edx,0x8
c0018916:	b8 82 b8 02 c0       	mov    eax,0xc002b882
c001891b:	80 fa 01             	cmp    dl,0x1
c001891e:	0f 87 3b 02 00 00    	ja     c0018b5f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018924:	b8 50 d6 02 c0       	mov    eax,0xc002d650
c0018929:	c3                   	ret    
c001892a:	80 f9 05             	cmp    cl,0x5
c001892d:	75 45                	jne    c0018974 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c001892f:	8d 4a ff             	lea    ecx,[edx-0x1]
c0018932:	b8 60 d6 02 c0       	mov    eax,0xc002d660
c0018937:	80 f9 02             	cmp    cl,0x2
c001893a:	0f 86 1f 02 00 00    	jbe    c0018b5f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018940:	80 fa 04             	cmp    dl,0x4
c0018943:	0f 84 f3 01 00 00    	je     c0018b3c <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0018949:	80 fa 07             	cmp    dl,0x7
c001894c:	0f 84 0d 02 00 00    	je     c0018b5f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018952:	b8 70 d6 02 c0       	mov    eax,0xc002d670
c0018957:	80 fa 08             	cmp    dl,0x8
c001895a:	0f 84 ff 01 00 00    	je     c0018b5f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018960:	b8 82 b8 02 c0       	mov    eax,0xc002b882
c0018965:	80 fa 09             	cmp    dl,0x9
c0018968:	0f 85 f1 01 00 00    	jne    c0018b5f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001896e:	b8 80 d6 02 c0       	mov    eax,0xc002d680
c0018973:	c3                   	ret    
c0018974:	80 f9 06             	cmp    cl,0x6
c0018977:	0f 85 85 01 00 00    	jne    c0018b02 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c001897d:	b8 90 d6 02 c0       	mov    eax,0xc002d690
c0018982:	80 fa 01             	cmp    dl,0x1
c0018985:	0f 84 d4 01 00 00    	je     c0018b5f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001898b:	8d 42 fb             	lea    eax,[edx-0x5]
c001898e:	3c 01                	cmp    al,0x1
c0018990:	0f 86 ac 01 00 00    	jbe    c0018b42 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018996:	80 fa 03             	cmp    dl,0x3
c0018999:	0f 84 a3 01 00 00    	je     c0018b42 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c001899f:	8d 4a f9             	lea    ecx,[edx-0x7]
c00189a2:	b8 b0 d6 02 c0       	mov    eax,0xc002d6b0
c00189a7:	80 f9 01             	cmp    cl,0x1
c00189aa:	0f 86 af 01 00 00    	jbe    c0018b5f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189b0:	80 fa 09             	cmp    dl,0x9
c00189b3:	0f 84 8f 01 00 00    	je     c0018b48 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c00189b9:	8d 4a f6             	lea    ecx,[edx-0xa]
c00189bc:	80 f9 01             	cmp    cl,0x1
c00189bf:	0f 86 9a 01 00 00    	jbe    c0018b5f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189c5:	b8 c0 d6 02 c0       	mov    eax,0xc002d6c0
c00189ca:	80 fa 0d             	cmp    dl,0xd
c00189cd:	0f 84 8c 01 00 00    	je     c0018b5f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189d3:	b8 d0 d6 02 c0       	mov    eax,0xc002d6d0
c00189d8:	80 fa 0e             	cmp    dl,0xe
c00189db:	0f 84 7e 01 00 00    	je     c0018b5f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189e1:	b8 e0 d6 02 c0       	mov    eax,0xc002d6e0
c00189e6:	80 fa 0f             	cmp    dl,0xf
c00189e9:	0f 84 70 01 00 00    	je     c0018b5f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189ef:	b8 c0 d6 02 c0       	mov    eax,0xc002d6c0
c00189f4:	80 fa 15             	cmp    dl,0x15
c00189f7:	0f 84 62 01 00 00    	je     c0018b5f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189fd:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018a00:	b8 e0 d6 02 c0       	mov    eax,0xc002d6e0
c0018a05:	80 f9 01             	cmp    cl,0x1
c0018a08:	0f 86 51 01 00 00    	jbe    c0018b5f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a0e:	80 fa 1a             	cmp    dl,0x1a
c0018a11:	0f 84 37 01 00 00    	je     c0018b4e <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018a17:	80 fa 1c             	cmp    dl,0x1c
c0018a1a:	0f 84 34 01 00 00    	je     c0018b54 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018a20:	80 fa 1d             	cmp    dl,0x1d
c0018a23:	0f 84 36 01 00 00    	je     c0018b5f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a29:	b8 10 d7 02 c0       	mov    eax,0xc002d710
c0018a2e:	80 fa 25             	cmp    dl,0x25
c0018a31:	0f 84 28 01 00 00    	je     c0018b5f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a37:	8d 4a da             	lea    ecx,[edx-0x26]
c0018a3a:	b8 00 d7 02 c0       	mov    eax,0xc002d700
c0018a3f:	80 f9 01             	cmp    cl,0x1
c0018a42:	0f 86 17 01 00 00    	jbe    c0018b5f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a48:	b8 20 d7 02 c0       	mov    eax,0xc002d720
c0018a4d:	80 fa 2a             	cmp    dl,0x2a
c0018a50:	0f 84 09 01 00 00    	je     c0018b5f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a56:	b8 10 d7 02 c0       	mov    eax,0xc002d710
c0018a5b:	80 fa 2c             	cmp    dl,0x2c
c0018a5e:	0f 84 fb 00 00 00    	je     c0018b5f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a64:	b8 20 d7 02 c0       	mov    eax,0xc002d720
c0018a69:	80 fa 2d             	cmp    dl,0x2d
c0018a6c:	0f 84 ed 00 00 00    	je     c0018b5f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a72:	b8 f0 d6 02 c0       	mov    eax,0xc002d6f0
c0018a77:	80 fa 2e             	cmp    dl,0x2e
c0018a7a:	0f 84 df 00 00 00    	je     c0018b5f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a80:	b8 10 d7 02 c0       	mov    eax,0xc002d710
c0018a85:	80 fa 2f             	cmp    dl,0x2f
c0018a88:	0f 84 d1 00 00 00    	je     c0018b5f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a8e:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018a91:	b8 00 d7 02 c0       	mov    eax,0xc002d700
c0018a96:	80 f9 01             	cmp    cl,0x1
c0018a99:	0f 86 c0 00 00 00    	jbe    c0018b5f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a9f:	b8 30 d7 02 c0       	mov    eax,0xc002d730
c0018aa4:	80 fa 37             	cmp    dl,0x37
c0018aa7:	0f 84 b2 00 00 00    	je     c0018b5f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018aad:	b8 40 d7 02 c0       	mov    eax,0xc002d740
c0018ab2:	80 fa 3a             	cmp    dl,0x3a
c0018ab5:	0f 84 a4 00 00 00    	je     c0018b5f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018abb:	b8 50 d7 02 c0       	mov    eax,0xc002d750
c0018ac0:	80 fa 3c             	cmp    dl,0x3c
c0018ac3:	0f 84 96 00 00 00    	je     c0018b5f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ac9:	b8 60 d7 02 c0       	mov    eax,0xc002d760
c0018ace:	80 fa 3d             	cmp    dl,0x3d
c0018ad1:	0f 84 88 00 00 00    	je     c0018b5f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ad7:	b8 40 d7 02 c0       	mov    eax,0xc002d740
c0018adc:	80 fa 3e             	cmp    dl,0x3e
c0018adf:	74 7e                	je     c0018b5f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ae1:	8d 42 bb             	lea    eax,[edx-0x45]
c0018ae4:	3c 01                	cmp    al,0x1
c0018ae6:	76 72                	jbe    c0018b5a <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018ae8:	80 fa 3f             	cmp    dl,0x3f
c0018aeb:	74 6d                	je     c0018b5a <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018aed:	80 fa 4a             	cmp    dl,0x4a
c0018af0:	74 0a                	je     c0018afc <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018af2:	b8 82 b8 02 c0       	mov    eax,0xc002b882
c0018af7:	80 fa 4d             	cmp    dl,0x4d
c0018afa:	75 63                	jne    c0018b5f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018afc:	b8 30 d7 02 c0       	mov    eax,0xc002d730
c0018b01:	c3                   	ret    
c0018b02:	b8 82 b8 02 c0       	mov    eax,0xc002b882
c0018b07:	80 f9 0b             	cmp    cl,0xb
c0018b0a:	75 0a                	jne    c0018b16 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018b0c:	fe ca                	dec    dl
c0018b0e:	75 4f                	jne    c0018b5f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b10:	b8 70 d7 02 c0       	mov    eax,0xc002d770
c0018b15:	c3                   	ret    
c0018b16:	80 f9 0f             	cmp    cl,0xf
c0018b19:	75 44                	jne    c0018b5f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b1b:	b8 80 d7 02 c0       	mov    eax,0xc002d780
c0018b20:	80 fa 02             	cmp    dl,0x2
c0018b23:	76 3a                	jbe    c0018b5f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b25:	8d 42 fd             	lea    eax,[edx-0x3]
c0018b28:	3c 01                	cmp    al,0x1
c0018b2a:	76 0a                	jbe    c0018b36 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018b2c:	b8 82 b8 02 c0       	mov    eax,0xc002b882
c0018b31:	80 fa 06             	cmp    dl,0x6
c0018b34:	75 29                	jne    c0018b5f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b36:	b8 90 d7 02 c0       	mov    eax,0xc002d790
c0018b3b:	c3                   	ret    
c0018b3c:	b8 70 d6 02 c0       	mov    eax,0xc002d670
c0018b41:	c3                   	ret    
c0018b42:	b8 a0 d6 02 c0       	mov    eax,0xc002d6a0
c0018b47:	c3                   	ret    
c0018b48:	b8 c0 d6 02 c0       	mov    eax,0xc002d6c0
c0018b4d:	c3                   	ret    
c0018b4e:	b8 f0 d6 02 c0       	mov    eax,0xc002d6f0
c0018b53:	c3                   	ret    
c0018b54:	b8 00 d7 02 c0       	mov    eax,0xc002d700
c0018b59:	c3                   	ret    
c0018b5a:	b8 50 d7 02 c0       	mov    eax,0xc002d750
c0018b5f:	c3                   	ret    

c0018b60 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018b60:	60                   	pusha  
c0018b61:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018b65:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018b69:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018b6d:	9c                   	pushf  
c0018b6e:	fa                   	cli    
c0018b6f:	0f 09                	wbinvd 
c0018b71:	0f 30                	wrmsr  
c0018b73:	9d                   	popf   
c0018b74:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018b78:	89 02                	mov    DWORD PTR [edx],eax
c0018b7a:	61                   	popa   
c0018b7b:	c3                   	ret    

c0018b7c <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018b7c:	60                   	pusha  
c0018b7d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018b81:	9c                   	pushf  
c0018b82:	fa                   	cli    
c0018b83:	0f 09                	wbinvd 
c0018b85:	31 c0                	xor    eax,eax
c0018b87:	31 d2                	xor    edx,edx
c0018b89:	0f 32                	rdmsr  
c0018b8b:	9d                   	popf   
c0018b8c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018b90:	89 02                	mov    DWORD PTR [edx],eax
c0018b92:	61                   	popa   
c0018b93:	c3                   	ret    

c0018b94 <CPU::AMD_K6_writeback(int, int, int)>:
c0018b94:	56                   	push   esi
c0018b95:	53                   	push   ebx
c0018b96:	83 ec 10             	sub    esp,0x10
c0018b99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018b9d:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018ba2:	75 5d                	jne    c0018c01 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018ba4:	83 f8 08             	cmp    eax,0x8
c0018ba7:	75 09                	jne    c0018bb2 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018ba9:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018bae:	7e 13                	jle    c0018bc3 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018bb0:	eb 30                	jmp    c0018be2 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018bb2:	83 f8 06             	cmp    eax,0x6
c0018bb5:	7c 4a                	jl     c0018c01 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018bb7:	83 f8 07             	cmp    eax,0x7
c0018bba:	7e 07                	jle    c0018bc3 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018bbc:	83 f8 09             	cmp    eax,0x9
c0018bbf:	74 21                	je     c0018be2 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018bc1:	eb 3e                	jmp    c0018c01 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018bc3:	89 e6                	mov    esi,esp
c0018bc5:	8b 1d c8 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e3c8
c0018bcb:	56                   	push   esi
c0018bcc:	c1 eb 15             	shr    ebx,0x15
c0018bcf:	68 82 00 00 c0       	push   0xc0000082
c0018bd4:	83 e3 7e             	and    ebx,0x7e
c0018bd7:	e8 a0 ff ff ff       	call   c0018b7c <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018bdc:	56                   	push   esi
c0018bdd:	6a 00                	push   0x0
c0018bdf:	53                   	push   ebx
c0018be0:	eb 12                	jmp    c0018bf4 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018be2:	89 e3                	mov    ebx,esp
c0018be4:	53                   	push   ebx
c0018be5:	68 82 00 00 c0       	push   0xc0000082
c0018bea:	e8 8d ff ff ff       	call   c0018b7c <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018bef:	53                   	push   ebx
c0018bf0:	6a 00                	push   0x0
c0018bf2:	6a 00                	push   0x0
c0018bf4:	68 82 00 00 c0       	push   0xc0000082
c0018bf9:	e8 62 ff ff ff       	call   c0018b60 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018bfe:	83 c4 18             	add    esp,0x18
c0018c01:	83 c4 10             	add    esp,0x10
c0018c04:	5b                   	pop    ebx
c0018c05:	5e                   	pop    esi
c0018c06:	c3                   	ret    
c0018c07:	90                   	nop

c0018c08 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018c08:	55                   	push   ebp
c0018c09:	57                   	push   edi
c0018c0a:	56                   	push   esi
c0018c0b:	53                   	push   ebx
c0018c0c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018c10:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018c14:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018c18:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018c1c:	39 05 a0 d8 02 c0    	cmp    DWORD PTR ds:0xc002d8a0,eax
c0018c22:	75 23                	jne    c0018c47 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018c24:	a1 cc 0e 03 c0       	mov    eax,ds:0xc0030ecc
c0018c29:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018c2d:	89 06                	mov    DWORD PTR [esi],eax
c0018c2f:	a1 c8 0e 03 c0       	mov    eax,ds:0xc0030ec8
c0018c34:	89 07                	mov    DWORD PTR [edi],eax
c0018c36:	a1 c4 0e 03 c0       	mov    eax,ds:0xc0030ec4
c0018c3b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018c3e:	a1 c0 0e 03 c0       	mov    eax,ds:0xc0030ec0
c0018c43:	89 02                	mov    DWORD PTR [edx],eax
c0018c45:	eb 3f                	jmp    c0018c86 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018c47:	31 c9                	xor    ecx,ecx
c0018c49:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018c4d:	0f a2                	cpuid  
c0018c4f:	89 06                	mov    DWORD PTR [esi],eax
c0018c51:	89 1f                	mov    DWORD PTR [edi],ebx
c0018c53:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018c57:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018c5a:	89 10                	mov    DWORD PTR [eax],edx
c0018c5c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018c60:	a3 a0 d8 02 c0       	mov    ds:0xc002d8a0,eax
c0018c65:	8b 06                	mov    eax,DWORD PTR [esi]
c0018c67:	a3 cc 0e 03 c0       	mov    ds:0xc0030ecc,eax
c0018c6c:	8b 07                	mov    eax,DWORD PTR [edi]
c0018c6e:	a3 c8 0e 03 c0       	mov    ds:0xc0030ec8,eax
c0018c73:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018c76:	a3 c4 0e 03 c0       	mov    ds:0xc0030ec4,eax
c0018c7b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018c7f:	8b 00                	mov    eax,DWORD PTR [eax]
c0018c81:	a3 c0 0e 03 c0       	mov    ds:0xc0030ec0,eax
c0018c86:	5b                   	pop    ebx
c0018c87:	5e                   	pop    esi
c0018c88:	5f                   	pop    edi
c0018c89:	5d                   	pop    ebp
c0018c8a:	c3                   	ret    
c0018c8b:	90                   	nop

c0018c8c <CPU::cpuidCheckEDX(unsigned int)>:
c0018c8c:	83 ec 10             	sub    esp,0x10
c0018c8f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c93:	50                   	push   eax
c0018c94:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c98:	50                   	push   eax
c0018c99:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c9d:	50                   	push   eax
c0018c9e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018ca2:	50                   	push   eax
c0018ca3:	6a 01                	push   0x1
c0018ca5:	e8 5e ff ff ff       	call   c0018c08 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018caa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018cae:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018cb2:	0f 95 c0             	setne  al
c0018cb5:	83 c4 24             	add    esp,0x24
c0018cb8:	c3                   	ret    
c0018cb9:	90                   	nop

c0018cba <CPU::cpuidCheckECX(unsigned int)>:
c0018cba:	83 ec 10             	sub    esp,0x10
c0018cbd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018cc1:	50                   	push   eax
c0018cc2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018cc6:	50                   	push   eax
c0018cc7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018ccb:	50                   	push   eax
c0018ccc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018cd0:	50                   	push   eax
c0018cd1:	6a 01                	push   0x1
c0018cd3:	e8 30 ff ff ff       	call   c0018c08 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018cd8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018cdc:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018ce0:	0f 95 c0             	setne  al
c0018ce3:	83 c4 24             	add    esp,0x24
c0018ce6:	c3                   	ret    
c0018ce7:	90                   	nop

c0018ce8 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018ce8:	83 ec 10             	sub    esp,0x10
c0018ceb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018cef:	50                   	push   eax
c0018cf0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018cf4:	50                   	push   eax
c0018cf5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018cf9:	50                   	push   eax
c0018cfa:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018cfe:	50                   	push   eax
c0018cff:	6a 07                	push   0x7
c0018d01:	e8 02 ff ff ff       	call   c0018c08 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d06:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d0a:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018d0e:	0f 95 c0             	setne  al
c0018d11:	83 c4 24             	add    esp,0x24
c0018d14:	c3                   	ret    
c0018d15:	90                   	nop

c0018d16 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018d16:	83 ec 10             	sub    esp,0x10
c0018d19:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d1d:	50                   	push   eax
c0018d1e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d22:	50                   	push   eax
c0018d23:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d27:	50                   	push   eax
c0018d28:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d2c:	50                   	push   eax
c0018d2d:	6a 07                	push   0x7
c0018d2f:	e8 d4 fe ff ff       	call   c0018c08 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d34:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d38:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018d3c:	0f 95 c0             	setne  al
c0018d3f:	83 c4 24             	add    esp,0x24
c0018d42:	c3                   	ret    
c0018d43:	90                   	nop

c0018d44 <CPU::CPU()>:
c0018d44:	83 ec 0c             	sub    esp,0xc
c0018d47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018d4b:	83 ec 08             	sub    esp,0x8
c0018d4e:	68 82 b8 02 c0       	push   0xc002b882
c0018d53:	50                   	push   eax
c0018d54:	e8 4f b7 ff ff       	call   c00144a8 <Device::Device(char const*)>
c0018d59:	83 c4 10             	add    esp,0x10
c0018d5c:	ba 5c b9 02 c0       	mov    edx,0xc002b95c
c0018d61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018d65:	89 10                	mov    DWORD PTR [eax],edx
c0018d67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018d6b:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018d75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018d79:	05 78 01 00 00       	add    eax,0x178
c0018d7e:	83 ec 0c             	sub    esp,0xc
c0018d81:	50                   	push   eax
c0018d82:	e8 d1 62 ff ff       	call   c000f058 <GDT::GDT()>
c0018d87:	83 c4 10             	add    esp,0x10
c0018d8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018d8e:	05 7c 09 00 00       	add    eax,0x97c
c0018d93:	83 ec 0c             	sub    esp,0xc
c0018d96:	50                   	push   eax
c0018d97:	e8 1e 65 ff ff       	call   c000f2ba <IDT::IDT()>
c0018d9c:	83 c4 10             	add    esp,0x10
c0018d9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018da3:	05 7c 11 00 00       	add    eax,0x117c
c0018da8:	83 ec 0c             	sub    esp,0xc
c0018dab:	50                   	push   eax
c0018dac:	e8 bb 86 ff ff       	call   c001146c <TSS::TSS()>
c0018db1:	83 c4 10             	add    esp,0x10
c0018db4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018db8:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018dbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018dc3:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018dcd:	90                   	nop
c0018dce:	83 c4 0c             	add    esp,0xc
c0018dd1:	c3                   	ret    

c0018dd2 <CPU::displayFeatures()>:
c0018dd2:	53                   	push   ebx
c0018dd3:	83 ec 10             	sub    esp,0x10
c0018dd6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018dda:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0018de0:	68 90 b5 02 c0       	push   0xc002b590
c0018de5:	e8 a8 a0 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0018dea:	59                   	pop    ecx
c0018deb:	58                   	pop    eax
c0018dec:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0018df2:	50                   	push   eax
c0018df3:	68 a1 b5 02 c0       	push   0xc002b5a1
c0018df8:	e8 95 a0 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0018dfd:	58                   	pop    eax
c0018dfe:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018e04:	5a                   	pop    edx
c0018e05:	c1 e8 0e             	shr    eax,0xe
c0018e08:	0f b6 c0             	movzx  eax,al
c0018e0b:	50                   	push   eax
c0018e0c:	68 b2 b5 02 c0       	push   0xc002b5b2
c0018e11:	e8 7c a0 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0018e16:	59                   	pop    ecx
c0018e17:	58                   	pop    eax
c0018e18:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018e1e:	66 c1 e8 06          	shr    ax,0x6
c0018e22:	0f b6 c0             	movzx  eax,al
c0018e25:	50                   	push   eax
c0018e26:	68 c3 b5 02 c0       	push   0xc002b5c3
c0018e2b:	e8 62 a0 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0018e30:	c7 04 24 70 ba 02 c0 	mov    DWORD PTR [esp],0xc002ba70
c0018e37:	e8 56 a0 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0018e3c:	83 c4 10             	add    esp,0x10
c0018e3f:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c0018e44:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0018e4b:	74 05                	je     c0018e52 <CPU::displayFeatures()+0x80>
c0018e4d:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c0018e52:	52                   	push   edx
c0018e53:	52                   	push   edx
c0018e54:	50                   	push   eax
c0018e55:	68 d4 b5 02 c0       	push   0xc002b5d4
c0018e5a:	e8 33 a0 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0018e5f:	83 c4 10             	add    esp,0x10
c0018e62:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c0018e67:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0018e6e:	78 05                	js     c0018e75 <CPU::displayFeatures()+0xa3>
c0018e70:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c0018e75:	51                   	push   ecx
c0018e76:	51                   	push   ecx
c0018e77:	50                   	push   eax
c0018e78:	68 eb b5 02 c0       	push   0xc002b5eb
c0018e7d:	e8 10 a0 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0018e82:	83 c4 10             	add    esp,0x10
c0018e85:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c0018e8a:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0018e91:	75 05                	jne    c0018e98 <CPU::displayFeatures()+0xc6>
c0018e93:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c0018e98:	52                   	push   edx
c0018e99:	52                   	push   edx
c0018e9a:	50                   	push   eax
c0018e9b:	68 02 b6 02 c0       	push   0xc002b602
c0018ea0:	e8 ed 9f ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0018ea5:	83 c4 10             	add    esp,0x10
c0018ea8:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c0018ead:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0018eb4:	75 05                	jne    c0018ebb <CPU::displayFeatures()+0xe9>
c0018eb6:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c0018ebb:	51                   	push   ecx
c0018ebc:	51                   	push   ecx
c0018ebd:	50                   	push   eax
c0018ebe:	68 19 b6 02 c0       	push   0xc002b619
c0018ec3:	e8 ca 9f ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0018ec8:	83 c4 10             	add    esp,0x10
c0018ecb:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c0018ed0:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0018ed7:	75 05                	jne    c0018ede <CPU::displayFeatures()+0x10c>
c0018ed9:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c0018ede:	52                   	push   edx
c0018edf:	52                   	push   edx
c0018ee0:	50                   	push   eax
c0018ee1:	68 30 b6 02 c0       	push   0xc002b630
c0018ee6:	e8 a7 9f ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0018eeb:	83 c4 10             	add    esp,0x10
c0018eee:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c0018ef3:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0018efa:	75 05                	jne    c0018f01 <CPU::displayFeatures()+0x12f>
c0018efc:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c0018f01:	51                   	push   ecx
c0018f02:	51                   	push   ecx
c0018f03:	50                   	push   eax
c0018f04:	68 47 b6 02 c0       	push   0xc002b647
c0018f09:	e8 84 9f ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0018f0e:	83 c4 10             	add    esp,0x10
c0018f11:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c0018f16:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0018f1d:	75 05                	jne    c0018f24 <CPU::displayFeatures()+0x152>
c0018f1f:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c0018f24:	52                   	push   edx
c0018f25:	52                   	push   edx
c0018f26:	50                   	push   eax
c0018f27:	68 5e b6 02 c0       	push   0xc002b65e
c0018f2c:	e8 61 9f ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0018f31:	83 c4 10             	add    esp,0x10
c0018f34:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c0018f39:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0018f40:	75 05                	jne    c0018f47 <CPU::displayFeatures()+0x175>
c0018f42:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c0018f47:	51                   	push   ecx
c0018f48:	51                   	push   ecx
c0018f49:	50                   	push   eax
c0018f4a:	68 75 b6 02 c0       	push   0xc002b675
c0018f4f:	e8 3e 9f ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0018f54:	83 c4 10             	add    esp,0x10
c0018f57:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c0018f5c:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0018f63:	75 05                	jne    c0018f6a <CPU::displayFeatures()+0x198>
c0018f65:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c0018f6a:	52                   	push   edx
c0018f6b:	52                   	push   edx
c0018f6c:	50                   	push   eax
c0018f6d:	68 8c b6 02 c0       	push   0xc002b68c
c0018f72:	e8 1b 9f ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0018f77:	83 c4 10             	add    esp,0x10
c0018f7a:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c0018f7f:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0018f86:	75 05                	jne    c0018f8d <CPU::displayFeatures()+0x1bb>
c0018f88:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c0018f8d:	51                   	push   ecx
c0018f8e:	51                   	push   ecx
c0018f8f:	50                   	push   eax
c0018f90:	68 a3 b6 02 c0       	push   0xc002b6a3
c0018f95:	e8 f8 9e ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0018f9a:	83 c4 10             	add    esp,0x10
c0018f9d:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c0018fa2:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0018fa9:	75 05                	jne    c0018fb0 <CPU::displayFeatures()+0x1de>
c0018fab:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c0018fb0:	52                   	push   edx
c0018fb1:	52                   	push   edx
c0018fb2:	50                   	push   eax
c0018fb3:	68 ba b6 02 c0       	push   0xc002b6ba
c0018fb8:	e8 d5 9e ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0018fbd:	83 c4 10             	add    esp,0x10
c0018fc0:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c0018fc5:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0018fcc:	75 05                	jne    c0018fd3 <CPU::displayFeatures()+0x201>
c0018fce:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c0018fd3:	51                   	push   ecx
c0018fd4:	51                   	push   ecx
c0018fd5:	50                   	push   eax
c0018fd6:	68 d1 b6 02 c0       	push   0xc002b6d1
c0018fdb:	e8 b2 9e ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0018fe0:	83 c4 10             	add    esp,0x10
c0018fe3:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c0018fe8:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0018fef:	75 05                	jne    c0018ff6 <CPU::displayFeatures()+0x224>
c0018ff1:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c0018ff6:	52                   	push   edx
c0018ff7:	52                   	push   edx
c0018ff8:	50                   	push   eax
c0018ff9:	68 e8 b6 02 c0       	push   0xc002b6e8
c0018ffe:	e8 8f 9e ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0019003:	83 c4 10             	add    esp,0x10
c0019006:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c001900b:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0019012:	78 05                	js     c0019019 <CPU::displayFeatures()+0x247>
c0019014:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c0019019:	51                   	push   ecx
c001901a:	51                   	push   ecx
c001901b:	50                   	push   eax
c001901c:	68 ff b6 02 c0       	push   0xc002b6ff
c0019021:	e8 6c 9e ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0019026:	83 c4 10             	add    esp,0x10
c0019029:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c001902e:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0019035:	75 05                	jne    c001903c <CPU::displayFeatures()+0x26a>
c0019037:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c001903c:	52                   	push   edx
c001903d:	52                   	push   edx
c001903e:	50                   	push   eax
c001903f:	68 16 b7 02 c0       	push   0xc002b716
c0019044:	e8 49 9e ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0019049:	83 c4 18             	add    esp,0x18
c001904c:	5b                   	pop    ebx
c001904d:	c3                   	ret    

c001904e <CPU::detectFeatures()>:
c001904e:	55                   	push   ebp
c001904f:	57                   	push   edi
c0019050:	56                   	push   esi
c0019051:	53                   	push   ebx
c0019052:	83 ec 50             	sub    esp,0x50
c0019055:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0019059:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0019063:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c001906a:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0019070:	6a 0d                	push   0xd
c0019072:	6a 00                	push   0x0
c0019074:	57                   	push   edi
c0019075:	e8 fe 76 fe ff       	call   c0000778 <memset>
c001907a:	83 c4 10             	add    esp,0x10
c001907d:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0019082:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0019089:	0f 84 20 09 00 00    	je     c00199af <CPU::detectFeatures()+0x961>
c001908f:	83 ec 0c             	sub    esp,0xc
c0019092:	6a 10                	push   0x10
c0019094:	e8 f3 fb ff ff       	call   c0018c8c <CPU::cpuidCheckEDX(unsigned int)>
c0019099:	83 e0 01             	and    eax,0x1
c001909c:	8d 14 00             	lea    edx,[eax+eax*1]
c001909f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00190a5:	83 e0 fd             	and    eax,0xfffffffd
c00190a8:	09 d0                	or     eax,edx
c00190aa:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00190b0:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c00190b7:	e8 d0 fb ff ff       	call   c0018c8c <CPU::cpuidCheckEDX(unsigned int)>
c00190bc:	83 e0 01             	and    eax,0x1
c00190bf:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00190c6:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00190cc:	83 e0 fb             	and    eax,0xfffffffb
c00190cf:	09 d0                	or     eax,edx
c00190d1:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00190d7:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00190de:	e8 a9 fb ff ff       	call   c0018c8c <CPU::cpuidCheckEDX(unsigned int)>
c00190e3:	83 e0 01             	and    eax,0x1
c00190e6:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00190ed:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00190f3:	83 e0 f7             	and    eax,0xfffffff7
c00190f6:	09 d0                	or     eax,edx
c00190f8:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00190fe:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0019105:	e8 82 fb ff ff       	call   c0018c8c <CPU::cpuidCheckEDX(unsigned int)>
c001910a:	83 e0 01             	and    eax,0x1
c001910d:	c1 e0 04             	shl    eax,0x4
c0019110:	88 c2                	mov    dl,al
c0019112:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019118:	83 e0 ef             	and    eax,0xffffffef
c001911b:	09 d0                	or     eax,edx
c001911d:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019123:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c001912a:	e8 5d fb ff ff       	call   c0018c8c <CPU::cpuidCheckEDX(unsigned int)>
c001912f:	83 e0 01             	and    eax,0x1
c0019132:	c1 e0 05             	shl    eax,0x5
c0019135:	88 c2                	mov    dl,al
c0019137:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001913d:	83 e0 df             	and    eax,0xffffffdf
c0019140:	09 d0                	or     eax,edx
c0019142:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019148:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001914f:	e8 38 fb ff ff       	call   c0018c8c <CPU::cpuidCheckEDX(unsigned int)>
c0019154:	83 e0 01             	and    eax,0x1
c0019157:	8d 14 00             	lea    edx,[eax+eax*1]
c001915a:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019160:	83 e0 fd             	and    eax,0xfffffffd
c0019163:	09 d0                	or     eax,edx
c0019165:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001916b:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0019172:	e8 15 fb ff ff       	call   c0018c8c <CPU::cpuidCheckEDX(unsigned int)>
c0019177:	83 e0 01             	and    eax,0x1
c001917a:	c1 e0 06             	shl    eax,0x6
c001917d:	88 c2                	mov    dl,al
c001917f:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019185:	83 e0 bf             	and    eax,0xffffffbf
c0019188:	09 d0                	or     eax,edx
c001918a:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019190:	58                   	pop    eax
c0019191:	8d 74 24 28          	lea    esi,[esp+0x28]
c0019195:	56                   	push   esi
c0019196:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001919a:	55                   	push   ebp
c001919b:	8d 44 24 28          	lea    eax,[esp+0x28]
c001919f:	50                   	push   eax
c00191a0:	8d 54 24 28          	lea    edx,[esp+0x28]
c00191a4:	52                   	push   edx
c00191a5:	6a 00                	push   0x0
c00191a7:	e8 5c fa ff ff       	call   c0018c08 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00191ac:	83 c4 1c             	add    esp,0x1c
c00191af:	6a 04                	push   0x4
c00191b1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00191b5:	50                   	push   eax
c00191b6:	57                   	push   edi
c00191b7:	e8 88 75 fe ff       	call   c0000744 <memcpy>
c00191bc:	83 c4 0c             	add    esp,0xc
c00191bf:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c00191c5:	6a 04                	push   0x4
c00191c7:	56                   	push   esi
c00191c8:	50                   	push   eax
c00191c9:	e8 76 75 fe ff       	call   c0000744 <memcpy>
c00191ce:	83 c4 0c             	add    esp,0xc
c00191d1:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c00191d7:	6a 04                	push   0x4
c00191d9:	55                   	push   ebp
c00191da:	50                   	push   eax
c00191db:	e8 64 75 fe ff       	call   c0000744 <memcpy>
c00191e0:	58                   	pop    eax
c00191e1:	5a                   	pop    edx
c00191e2:	68 2d b7 02 c0       	push   0xc002b72d
c00191e7:	57                   	push   edi
c00191e8:	e8 d3 76 fe ff       	call   c00008c0 <strcmp>
c00191ed:	83 c4 10             	add    esp,0x10
c00191f0:	85 c0                	test   eax,eax
c00191f2:	75 0f                	jne    c0019203 <CPU::detectFeatures()+0x1b5>
c00191f4:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c00191fe:	e9 22 02 00 00       	jmp    c0019425 <CPU::detectFeatures()+0x3d7>
c0019203:	50                   	push   eax
c0019204:	50                   	push   eax
c0019205:	68 3a b7 02 c0       	push   0xc002b73a
c001920a:	57                   	push   edi
c001920b:	e8 b0 76 fe ff       	call   c00008c0 <strcmp>
c0019210:	83 c4 10             	add    esp,0x10
c0019213:	85 c0                	test   eax,eax
c0019215:	74 dd                	je     c00191f4 <CPU::detectFeatures()+0x1a6>
c0019217:	51                   	push   ecx
c0019218:	51                   	push   ecx
c0019219:	68 47 b7 02 c0       	push   0xc002b747
c001921e:	57                   	push   edi
c001921f:	e8 9c 76 fe ff       	call   c00008c0 <strcmp>
c0019224:	83 c4 10             	add    esp,0x10
c0019227:	85 c0                	test   eax,eax
c0019229:	74 2a                	je     c0019255 <CPU::detectFeatures()+0x207>
c001922b:	52                   	push   edx
c001922c:	52                   	push   edx
c001922d:	68 54 b7 02 c0       	push   0xc002b754
c0019232:	57                   	push   edi
c0019233:	e8 88 76 fe ff       	call   c00008c0 <strcmp>
c0019238:	83 c4 10             	add    esp,0x10
c001923b:	85 c0                	test   eax,eax
c001923d:	74 16                	je     c0019255 <CPU::detectFeatures()+0x207>
c001923f:	50                   	push   eax
c0019240:	50                   	push   eax
c0019241:	68 61 b7 02 c0       	push   0xc002b761
c0019246:	57                   	push   edi
c0019247:	e8 74 76 fe ff       	call   c00008c0 <strcmp>
c001924c:	83 c4 10             	add    esp,0x10
c001924f:	85 c0                	test   eax,eax
c0019251:	74 48                	je     c001929b <CPU::detectFeatures()+0x24d>
c0019253:	eb 0f                	jmp    c0019264 <CPU::detectFeatures()+0x216>
c0019255:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c001925f:	e9 c1 01 00 00       	jmp    c0019425 <CPU::detectFeatures()+0x3d7>
c0019264:	50                   	push   eax
c0019265:	50                   	push   eax
c0019266:	68 6e b7 02 c0       	push   0xc002b76e
c001926b:	57                   	push   edi
c001926c:	e8 4f 76 fe ff       	call   c00008c0 <strcmp>
c0019271:	83 c4 10             	add    esp,0x10
c0019274:	85 c0                	test   eax,eax
c0019276:	74 23                	je     c001929b <CPU::detectFeatures()+0x24d>
c0019278:	50                   	push   eax
c0019279:	50                   	push   eax
c001927a:	68 7b b7 02 c0       	push   0xc002b77b
c001927f:	57                   	push   edi
c0019280:	e8 3b 76 fe ff       	call   c00008c0 <strcmp>
c0019285:	83 c4 10             	add    esp,0x10
c0019288:	85 c0                	test   eax,eax
c001928a:	75 1e                	jne    c00192aa <CPU::detectFeatures()+0x25c>
c001928c:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019296:	e9 8a 01 00 00       	jmp    c0019425 <CPU::detectFeatures()+0x3d7>
c001929b:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c00192a5:	e9 7b 01 00 00       	jmp    c0019425 <CPU::detectFeatures()+0x3d7>
c00192aa:	50                   	push   eax
c00192ab:	50                   	push   eax
c00192ac:	68 88 b7 02 c0       	push   0xc002b788
c00192b1:	57                   	push   edi
c00192b2:	e8 09 76 fe ff       	call   c00008c0 <strcmp>
c00192b7:	83 c4 10             	add    esp,0x10
c00192ba:	85 c0                	test   eax,eax
c00192bc:	75 0f                	jne    c00192cd <CPU::detectFeatures()+0x27f>
c00192be:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00192c8:	e9 58 01 00 00       	jmp    c0019425 <CPU::detectFeatures()+0x3d7>
c00192cd:	50                   	push   eax
c00192ce:	50                   	push   eax
c00192cf:	68 47 b7 02 c0       	push   0xc002b747
c00192d4:	57                   	push   edi
c00192d5:	e8 e6 75 fe ff       	call   c00008c0 <strcmp>
c00192da:	83 c4 10             	add    esp,0x10
c00192dd:	85 c0                	test   eax,eax
c00192df:	75 0f                	jne    c00192f0 <CPU::detectFeatures()+0x2a2>
c00192e1:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00192eb:	e9 35 01 00 00       	jmp    c0019425 <CPU::detectFeatures()+0x3d7>
c00192f0:	50                   	push   eax
c00192f1:	50                   	push   eax
c00192f2:	68 95 b7 02 c0       	push   0xc002b795
c00192f7:	57                   	push   edi
c00192f8:	e8 c3 75 fe ff       	call   c00008c0 <strcmp>
c00192fd:	83 c4 10             	add    esp,0x10
c0019300:	85 c0                	test   eax,eax
c0019302:	75 0f                	jne    c0019313 <CPU::detectFeatures()+0x2c5>
c0019304:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c001930e:	e9 12 01 00 00       	jmp    c0019425 <CPU::detectFeatures()+0x3d7>
c0019313:	51                   	push   ecx
c0019314:	51                   	push   ecx
c0019315:	68 a2 b7 02 c0       	push   0xc002b7a2
c001931a:	57                   	push   edi
c001931b:	e8 a0 75 fe ff       	call   c00008c0 <strcmp>
c0019320:	83 c4 10             	add    esp,0x10
c0019323:	85 c0                	test   eax,eax
c0019325:	75 0f                	jne    c0019336 <CPU::detectFeatures()+0x2e8>
c0019327:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0019331:	e9 ef 00 00 00       	jmp    c0019425 <CPU::detectFeatures()+0x3d7>
c0019336:	52                   	push   edx
c0019337:	52                   	push   edx
c0019338:	68 af b7 02 c0       	push   0xc002b7af
c001933d:	57                   	push   edi
c001933e:	e8 7d 75 fe ff       	call   c00008c0 <strcmp>
c0019343:	83 c4 10             	add    esp,0x10
c0019346:	85 c0                	test   eax,eax
c0019348:	75 0f                	jne    c0019359 <CPU::detectFeatures()+0x30b>
c001934a:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0019354:	e9 cc 00 00 00       	jmp    c0019425 <CPU::detectFeatures()+0x3d7>
c0019359:	50                   	push   eax
c001935a:	50                   	push   eax
c001935b:	68 bc b7 02 c0       	push   0xc002b7bc
c0019360:	57                   	push   edi
c0019361:	e8 5a 75 fe ff       	call   c00008c0 <strcmp>
c0019366:	83 c4 10             	add    esp,0x10
c0019369:	85 c0                	test   eax,eax
c001936b:	75 0f                	jne    c001937c <CPU::detectFeatures()+0x32e>
c001936d:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0019377:	e9 a9 00 00 00       	jmp    c0019425 <CPU::detectFeatures()+0x3d7>
c001937c:	50                   	push   eax
c001937d:	50                   	push   eax
c001937e:	68 c9 b7 02 c0       	push   0xc002b7c9
c0019383:	57                   	push   edi
c0019384:	e8 37 75 fe ff       	call   c00008c0 <strcmp>
c0019389:	83 c4 10             	add    esp,0x10
c001938c:	85 c0                	test   eax,eax
c001938e:	75 0f                	jne    c001939f <CPU::detectFeatures()+0x351>
c0019390:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c001939a:	e9 86 00 00 00       	jmp    c0019425 <CPU::detectFeatures()+0x3d7>
c001939f:	50                   	push   eax
c00193a0:	50                   	push   eax
c00193a1:	68 d6 b7 02 c0       	push   0xc002b7d6
c00193a6:	57                   	push   edi
c00193a7:	e8 14 75 fe ff       	call   c00008c0 <strcmp>
c00193ac:	83 c4 10             	add    esp,0x10
c00193af:	85 c0                	test   eax,eax
c00193b1:	75 0c                	jne    c00193bf <CPU::detectFeatures()+0x371>
c00193b3:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00193bd:	eb 66                	jmp    c0019425 <CPU::detectFeatures()+0x3d7>
c00193bf:	50                   	push   eax
c00193c0:	50                   	push   eax
c00193c1:	68 e3 b7 02 c0       	push   0xc002b7e3
c00193c6:	57                   	push   edi
c00193c7:	e8 f4 74 fe ff       	call   c00008c0 <strcmp>
c00193cc:	83 c4 10             	add    esp,0x10
c00193cf:	85 c0                	test   eax,eax
c00193d1:	75 0c                	jne    c00193df <CPU::detectFeatures()+0x391>
c00193d3:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00193dd:	eb 46                	jmp    c0019425 <CPU::detectFeatures()+0x3d7>
c00193df:	50                   	push   eax
c00193e0:	50                   	push   eax
c00193e1:	68 f0 b7 02 c0       	push   0xc002b7f0
c00193e6:	57                   	push   edi
c00193e7:	e8 d4 74 fe ff       	call   c00008c0 <strcmp>
c00193ec:	83 c4 10             	add    esp,0x10
c00193ef:	85 c0                	test   eax,eax
c00193f1:	74 e0                	je     c00193d3 <CPU::detectFeatures()+0x385>
c00193f3:	50                   	push   eax
c00193f4:	50                   	push   eax
c00193f5:	68 fd b7 02 c0       	push   0xc002b7fd
c00193fa:	57                   	push   edi
c00193fb:	e8 c0 74 fe ff       	call   c00008c0 <strcmp>
c0019400:	83 c4 10             	add    esp,0x10
c0019403:	85 c0                	test   eax,eax
c0019405:	74 cc                	je     c00193d3 <CPU::detectFeatures()+0x385>
c0019407:	51                   	push   ecx
c0019408:	51                   	push   ecx
c0019409:	68 0a b8 02 c0       	push   0xc002b80a
c001940e:	57                   	push   edi
c001940f:	e8 ac 74 fe ff       	call   c00008c0 <strcmp>
c0019414:	83 c4 10             	add    esp,0x10
c0019417:	85 c0                	test   eax,eax
c0019419:	74 b8                	je     c00193d3 <CPU::detectFeatures()+0x385>
c001941b:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0019425:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c001942a:	0f 86 be 00 00 00    	jbe    c00194ee <CPU::detectFeatures()+0x4a0>
c0019430:	83 ec 0c             	sub    esp,0xc
c0019433:	68 80 00 00 00       	push   0x80
c0019438:	e8 ab f8 ff ff       	call   c0018ce8 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001943d:	83 e0 01             	and    eax,0x1
c0019440:	c1 e0 06             	shl    eax,0x6
c0019443:	88 c2                	mov    dl,al
c0019445:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001944b:	83 e0 bf             	and    eax,0xffffffbf
c001944e:	09 d0                	or     eax,edx
c0019450:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019456:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c001945d:	e8 86 f8 ff ff       	call   c0018ce8 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019462:	83 e0 01             	and    eax,0x1
c0019465:	c1 e0 04             	shl    eax,0x4
c0019468:	88 c2                	mov    dl,al
c001946a:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019470:	83 e0 ef             	and    eax,0xffffffef
c0019473:	09 d0                	or     eax,edx
c0019475:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001947b:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0019482:	e8 61 f8 ff ff       	call   c0018ce8 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019487:	c1 e0 07             	shl    eax,0x7
c001948a:	88 c2                	mov    dl,al
c001948c:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019492:	83 e0 7f             	and    eax,0x7f
c0019495:	09 d0                	or     eax,edx
c0019497:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001949d:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00194a4:	e8 6d f8 ff ff       	call   c0018d16 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00194a9:	83 e0 01             	and    eax,0x1
c00194ac:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00194b3:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00194b9:	83 e0 f7             	and    eax,0xfffffff7
c00194bc:	09 d0                	or     eax,edx
c00194be:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00194c4:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00194cb:	e8 46 f8 ff ff       	call   c0018d16 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00194d0:	83 c4 10             	add    esp,0x10
c00194d3:	83 e0 01             	and    eax,0x1
c00194d6:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00194dd:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00194e3:	83 e0 fb             	and    eax,0xfffffffb
c00194e6:	09 d0                	or     eax,edx
c00194e8:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00194ee:	83 ec 0c             	sub    esp,0xc
c00194f1:	56                   	push   esi
c00194f2:	55                   	push   ebp
c00194f3:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00194f7:	57                   	push   edi
c00194f8:	8d 44 24 28          	lea    eax,[esp+0x28]
c00194fc:	50                   	push   eax
c00194fd:	6a 01                	push   0x1
c00194ff:	e8 04 f7 ff ff       	call   c0018c08 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019504:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0019508:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001950e:	88 ca                	mov    dl,cl
c0019510:	83 e0 f0             	and    eax,0xfffffff0
c0019513:	83 e2 0f             	and    edx,0xf
c0019516:	09 d0                	or     eax,edx
c0019518:	88 ca                	mov    dl,cl
c001951a:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0019520:	c0 ea 04             	shr    dl,0x4
c0019523:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0019527:	0f b6 c2             	movzx  eax,dl
c001952a:	83 c4 20             	add    esp,0x20
c001952d:	c1 e0 06             	shl    eax,0x6
c0019530:	89 c5                	mov    ebp,eax
c0019532:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019538:	66 25 3f c0          	and    ax,0xc03f
c001953c:	09 e8                	or     eax,ebp
c001953e:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019545:	89 c8                	mov    eax,ecx
c0019547:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c001954d:	c1 e8 08             	shr    eax,0x8
c0019550:	83 e2 3f             	and    edx,0x3f
c0019553:	83 e0 0f             	and    eax,0xf
c0019556:	89 c5                	mov    ebp,eax
c0019558:	c1 e5 06             	shl    ebp,0x6
c001955b:	09 d5                	or     ebp,edx
c001955d:	89 ea                	mov    edx,ebp
c001955f:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0019565:	88 c2                	mov    dl,al
c0019567:	c0 ea 02             	shr    dl,0x2
c001956a:	89 d5                	mov    ebp,edx
c001956c:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0019572:	83 e2 c0             	and    edx,0xffffffc0
c0019575:	09 d5                	or     ebp,edx
c0019577:	89 ea                	mov    edx,ebp
c0019579:	89 cd                	mov    ebp,ecx
c001957b:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0019581:	c1 ed 0c             	shr    ebp,0xc
c0019584:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c001958a:	83 e5 03             	and    ebp,0x3
c001958d:	83 e2 cf             	and    edx,0xffffffcf
c0019590:	c1 e5 04             	shl    ebp,0x4
c0019593:	09 d5                	or     ebp,edx
c0019595:	3c 06                	cmp    al,0x6
c0019597:	89 ea                	mov    edx,ebp
c0019599:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c001959f:	74 04                	je     c00195a5 <CPU::detectFeatures()+0x557>
c00195a1:	3c 0f                	cmp    al,0xf
c00195a3:	75 5c                	jne    c0019601 <CPU::detectFeatures()+0x5b3>
c00195a5:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00195a9:	89 cd                	mov    ebp,ecx
c00195ab:	c1 ed 10             	shr    ebp,0x10
c00195ae:	c1 e5 04             	shl    ebp,0x4
c00195b1:	09 ea                	or     edx,ebp
c00195b3:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00195b9:	0f b6 d2             	movzx  edx,dl
c00195bc:	66 81 e5 3f c0       	and    bp,0xc03f
c00195c1:	c1 e2 06             	shl    edx,0x6
c00195c4:	09 ea                	or     edx,ebp
c00195c6:	3c 0f                	cmp    al,0xf
c00195c8:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00195cf:	75 30                	jne    c0019601 <CPU::detectFeatures()+0x5b3>
c00195d1:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c00195d7:	c1 e9 14             	shr    ecx,0x14
c00195da:	83 e0 3f             	and    eax,0x3f
c00195dd:	83 c1 0f             	add    ecx,0xf
c00195e0:	88 ca                	mov    dl,cl
c00195e2:	c0 e9 02             	shr    cl,0x2
c00195e5:	c1 e2 06             	shl    edx,0x6
c00195e8:	09 d0                	or     eax,edx
c00195ea:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c00195f0:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c00195f6:	83 e0 c0             	and    eax,0xffffffc0
c00195f9:	09 c1                	or     ecx,eax
c00195fb:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0019601:	83 ec 0c             	sub    esp,0xc
c0019604:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c001960b:	56                   	push   esi
c001960c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019610:	50                   	push   eax
c0019611:	57                   	push   edi
c0019612:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019616:	55                   	push   ebp
c0019617:	68 00 00 00 80       	push   0x80000000
c001961c:	e8 e7 f5 ff ff       	call   c0018c08 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019621:	83 c4 20             	add    esp,0x20
c0019624:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c001962c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019630:	76 1e                	jbe    c0019650 <CPU::detectFeatures()+0x602>
c0019632:	83 ec 0c             	sub    esp,0xc
c0019635:	56                   	push   esi
c0019636:	50                   	push   eax
c0019637:	57                   	push   edi
c0019638:	55                   	push   ebp
c0019639:	68 01 00 00 80       	push   0x80000001
c001963e:	e8 c5 f5 ff ff       	call   c0018c08 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019643:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c001964d:	83 c4 20             	add    esp,0x20
c0019650:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0019656:	83 f8 01             	cmp    eax,0x1
c0019659:	75 6f                	jne    c00196ca <CPU::detectFeatures()+0x67c>
c001965b:	51                   	push   ecx
c001965c:	51                   	push   ecx
c001965d:	68 16 b8 02 c0       	push   0xc002b816
c0019662:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019666:	56                   	push   esi
c0019667:	e8 c8 71 fe ff       	call   c0000834 <strcpy>
c001966c:	5f                   	pop    edi
c001966d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019673:	5d                   	pop    ebp
c0019674:	66 c1 e8 06          	shr    ax,0x6
c0019678:	0f b6 c0             	movzx  eax,al
c001967b:	50                   	push   eax
c001967c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019682:	c1 e8 0e             	shr    eax,0xe
c0019685:	0f b6 c0             	movzx  eax,al
c0019688:	50                   	push   eax
c0019689:	e8 24 f2 ff ff       	call   c00188b2 <CPU::lookupIntelName(unsigned char, unsigned char)>
c001968e:	5a                   	pop    edx
c001968f:	59                   	pop    ecx
c0019690:	50                   	push   eax
c0019691:	56                   	push   esi
c0019692:	e8 dd 72 fe ff       	call   c0000974 <strcat>
c0019697:	5f                   	pop    edi
c0019698:	5d                   	pop    ebp
c0019699:	56                   	push   esi
c001969a:	53                   	push   ebx
c001969b:	e8 fa ad ff ff       	call   c001449a <Device::setName(char const*)>
c00196a0:	58                   	pop    eax
c00196a1:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00196a7:	5a                   	pop    edx
c00196a8:	68 1d b8 02 c0       	push   0xc002b81d
c00196ad:	50                   	push   eax
c00196ae:	e8 0d 72 fe ff       	call   c00008c0 <strcmp>
c00196b3:	83 c4 10             	add    esp,0x10
c00196b6:	85 c0                	test   eax,eax
c00196b8:	0f 85 71 03 00 00    	jne    c0019a2f <CPU::detectFeatures()+0x9e1>
c00196be:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c00196c5:	e9 65 03 00 00       	jmp    c0019a2f <CPU::detectFeatures()+0x9e1>
c00196ca:	83 f8 02             	cmp    eax,0x2
c00196cd:	0f 85 b5 00 00 00    	jne    c0019788 <CPU::detectFeatures()+0x73a>
c00196d3:	57                   	push   edi
c00196d4:	57                   	push   edi
c00196d5:	68 2f b8 02 c0       	push   0xc002b82f
c00196da:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00196de:	56                   	push   esi
c00196df:	e8 50 71 fe ff       	call   c0000834 <strcpy>
c00196e4:	5d                   	pop    ebp
c00196e5:	58                   	pop    eax
c00196e6:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00196ec:	66 c1 e8 06          	shr    ax,0x6
c00196f0:	0f b6 c0             	movzx  eax,al
c00196f3:	50                   	push   eax
c00196f4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00196fa:	c1 e8 0e             	shr    eax,0xe
c00196fd:	0f b6 c0             	movzx  eax,al
c0019700:	50                   	push   eax
c0019701:	e8 18 f0 ff ff       	call   c001871e <CPU::lookupAMDName(unsigned char, unsigned char)>
c0019706:	5a                   	pop    edx
c0019707:	59                   	pop    ecx
c0019708:	50                   	push   eax
c0019709:	56                   	push   esi
c001970a:	e8 65 72 fe ff       	call   c0000974 <strcat>
c001970f:	5f                   	pop    edi
c0019710:	5d                   	pop    ebp
c0019711:	56                   	push   esi
c0019712:	53                   	push   ebx
c0019713:	e8 82 ad ff ff       	call   c001449a <Device::setName(char const*)>
c0019718:	58                   	pop    eax
c0019719:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001971f:	5a                   	pop    edx
c0019720:	68 34 b8 02 c0       	push   0xc002b834
c0019725:	50                   	push   eax
c0019726:	e8 95 71 fe ff       	call   c00008c0 <strcmp>
c001972b:	83 c4 10             	add    esp,0x10
c001972e:	85 c0                	test   eax,eax
c0019730:	75 20                	jne    c0019752 <CPU::detectFeatures()+0x704>
c0019732:	8b 15 88 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e388
c0019738:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c001973e:	a8 01                	test   al,0x1
c0019740:	74 10                	je     c0019752 <CPU::detectFeatures()+0x704>
c0019742:	83 e0 fe             	and    eax,0xfffffffe
c0019745:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c001974b:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0019752:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019758:	c1 e8 0e             	shr    eax,0xe
c001975b:	3c 05                	cmp    al,0x5
c001975d:	0f 85 cc 02 00 00    	jne    c0019a2f <CPU::detectFeatures()+0x9e1>
c0019763:	56                   	push   esi
c0019764:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001976a:	83 e0 0f             	and    eax,0xf
c001976d:	50                   	push   eax
c001976e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019774:	66 c1 e8 06          	shr    ax,0x6
c0019778:	0f b6 c0             	movzx  eax,al
c001977b:	50                   	push   eax
c001977c:	6a 05                	push   0x5
c001977e:	e8 11 f4 ff ff       	call   c0018b94 <CPU::AMD_K6_writeback(int, int, int)>
c0019783:	e9 1f 02 00 00       	jmp    c00199a7 <CPU::detectFeatures()+0x959>
c0019788:	8d 50 fd             	lea    edx,[eax-0x3]
c001978b:	83 fa 01             	cmp    edx,0x1
c001978e:	76 09                	jbe    c0019799 <CPU::detectFeatures()+0x74b>
c0019790:	83 f8 06             	cmp    eax,0x6
c0019793:	0f 85 91 01 00 00    	jne    c001992a <CPU::detectFeatures()+0x8dc>
c0019799:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001979f:	c1 ea 0e             	shr    edx,0xe
c00197a2:	80 fa 05             	cmp    dl,0x5
c00197a5:	75 7b                	jne    c0019822 <CPU::detectFeatures()+0x7d4>
c00197a7:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00197ad:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00197b2:	66 81 fa 00 01       	cmp    dx,0x100
c00197b7:	75 0c                	jne    c00197c5 <CPU::detectFeatures()+0x777>
c00197b9:	51                   	push   ecx
c00197ba:	51                   	push   ecx
c00197bb:	68 3b b8 02 c0       	push   0xc002b83b
c00197c0:	e9 dc 01 00 00       	jmp    c00199a1 <CPU::detectFeatures()+0x953>
c00197c5:	66 81 fa 00 02       	cmp    dx,0x200
c00197ca:	75 0c                	jne    c00197d8 <CPU::detectFeatures()+0x78a>
c00197cc:	52                   	push   edx
c00197cd:	52                   	push   edx
c00197ce:	68 4e b8 02 c0       	push   0xc002b84e
c00197d3:	e9 c9 01 00 00       	jmp    c00199a1 <CPU::detectFeatures()+0x953>
c00197d8:	66 81 fa 40 02       	cmp    dx,0x240
c00197dd:	75 0c                	jne    c00197eb <CPU::detectFeatures()+0x79d>
c00197df:	50                   	push   eax
c00197e0:	50                   	push   eax
c00197e1:	68 60 b8 02 c0       	push   0xc002b860
c00197e6:	e9 b6 01 00 00       	jmp    c00199a1 <CPU::detectFeatures()+0x953>
c00197eb:	83 f8 06             	cmp    eax,0x6
c00197ee:	75 0c                	jne    c00197fc <CPU::detectFeatures()+0x7ae>
c00197f0:	50                   	push   eax
c00197f1:	50                   	push   eax
c00197f2:	68 72 b8 02 c0       	push   0xc002b872
c00197f7:	e9 a5 01 00 00       	jmp    c00199a1 <CPU::detectFeatures()+0x953>
c00197fc:	83 f8 04             	cmp    eax,0x4
c00197ff:	75 0c                	jne    c001980d <CPU::detectFeatures()+0x7bf>
c0019801:	50                   	push   eax
c0019802:	50                   	push   eax
c0019803:	68 7e b8 02 c0       	push   0xc002b87e
c0019808:	e9 94 01 00 00       	jmp    c00199a1 <CPU::detectFeatures()+0x953>
c001980d:	83 f8 03             	cmp    eax,0x3
c0019810:	0f 85 19 02 00 00    	jne    c0019a2f <CPU::detectFeatures()+0x9e1>
c0019816:	50                   	push   eax
c0019817:	50                   	push   eax
c0019818:	68 86 b8 02 c0       	push   0xc002b886
c001981d:	e9 7f 01 00 00       	jmp    c00199a1 <CPU::detectFeatures()+0x953>
c0019822:	80 fa 06             	cmp    dl,0x6
c0019825:	0f 85 db 00 00 00    	jne    c0019906 <CPU::detectFeatures()+0x8b8>
c001982b:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019831:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019836:	66 81 fa 80 01       	cmp    dx,0x180
c001983b:	75 0c                	jne    c0019849 <CPU::detectFeatures()+0x7fb>
c001983d:	50                   	push   eax
c001983e:	50                   	push   eax
c001983f:	68 91 b8 02 c0       	push   0xc002b891
c0019844:	e9 58 01 00 00       	jmp    c00199a1 <CPU::detectFeatures()+0x953>
c0019849:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c001984f:	66 f7 c1 80 ff       	test   cx,0xff80
c0019854:	75 0c                	jne    c0019862 <CPU::detectFeatures()+0x814>
c0019856:	50                   	push   eax
c0019857:	50                   	push   eax
c0019858:	68 a1 b8 02 c0       	push   0xc002b8a1
c001985d:	e9 3f 01 00 00       	jmp    c00199a1 <CPU::detectFeatures()+0x953>
c0019862:	66 81 fa 40 02       	cmp    dx,0x240
c0019867:	75 0c                	jne    c0019875 <CPU::detectFeatures()+0x827>
c0019869:	55                   	push   ebp
c001986a:	55                   	push   ebp
c001986b:	68 a8 b8 02 c0       	push   0xc002b8a8
c0019870:	e9 2c 01 00 00       	jmp    c00199a1 <CPU::detectFeatures()+0x953>
c0019875:	66 81 fa 80 02       	cmp    dx,0x280
c001987a:	75 0c                	jne    c0019888 <CPU::detectFeatures()+0x83a>
c001987c:	57                   	push   edi
c001987d:	57                   	push   edi
c001987e:	68 b1 b8 02 c0       	push   0xc002b8b1
c0019883:	e9 19 01 00 00       	jmp    c00199a1 <CPU::detectFeatures()+0x953>
c0019888:	66 81 fa 40 03       	cmp    dx,0x340
c001988d:	74 ed                	je     c001987c <CPU::detectFeatures()+0x82e>
c001988f:	66 81 fa c0 03       	cmp    dx,0x3c0
c0019894:	75 0c                	jne    c00198a2 <CPU::detectFeatures()+0x854>
c0019896:	56                   	push   esi
c0019897:	56                   	push   esi
c0019898:	68 b8 b8 02 c0       	push   0xc002b8b8
c001989d:	e9 ff 00 00 00       	jmp    c00199a1 <CPU::detectFeatures()+0x953>
c00198a2:	83 f8 06             	cmp    eax,0x6
c00198a5:	0f 84 45 ff ff ff    	je     c00197f0 <CPU::detectFeatures()+0x7a2>
c00198ab:	83 f8 04             	cmp    eax,0x4
c00198ae:	0f 84 4d ff ff ff    	je     c0019801 <CPU::detectFeatures()+0x7b3>
c00198b4:	83 f8 03             	cmp    eax,0x3
c00198b7:	0f 85 72 01 00 00    	jne    c0019a2f <CPU::detectFeatures()+0x9e1>
c00198bd:	51                   	push   ecx
c00198be:	51                   	push   ecx
c00198bf:	68 c1 b8 02 c0       	push   0xc002b8c1
c00198c4:	53                   	push   ebx
c00198c5:	e8 d0 ab ff ff       	call   c001449a <Device::setName(char const*)>
c00198ca:	b1 c1                	mov    cl,0xc1
c00198cc:	88 c8                	mov    al,cl
c00198ce:	e6 22                	out    0x22,al
c00198d0:	e4 23                	in     al,0x23
c00198d2:	88 c2                	mov    dl,al
c00198d4:	88 c8                	mov    al,cl
c00198d6:	e6 22                	out    0x22,al
c00198d8:	88 d0                	mov    al,dl
c00198da:	83 c8 10             	or     eax,0x10
c00198dd:	e6 23                	out    0x23,al
c00198df:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00198e6:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00198e9:	89 d0                	mov    eax,edx
c00198eb:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c00198f1:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c00198f5:	40                   	inc    eax
c00198f6:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00198fc:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019901:	e9 a1 00 00 00       	jmp    c00199a7 <CPU::detectFeatures()+0x959>
c0019906:	83 f8 06             	cmp    eax,0x6
c0019909:	0f 84 e1 fe ff ff    	je     c00197f0 <CPU::detectFeatures()+0x7a2>
c001990f:	83 f8 04             	cmp    eax,0x4
c0019912:	0f 84 e9 fe ff ff    	je     c0019801 <CPU::detectFeatures()+0x7b3>
c0019918:	83 f8 03             	cmp    eax,0x3
c001991b:	0f 85 0e 01 00 00    	jne    c0019a2f <CPU::detectFeatures()+0x9e1>
c0019921:	52                   	push   edx
c0019922:	52                   	push   edx
c0019923:	68 cc b8 02 c0       	push   0xc002b8cc
c0019928:	eb 77                	jmp    c00199a1 <CPU::detectFeatures()+0x953>
c001992a:	83 f8 07             	cmp    eax,0x7
c001992d:	75 09                	jne    c0019938 <CPU::detectFeatures()+0x8ea>
c001992f:	50                   	push   eax
c0019930:	50                   	push   eax
c0019931:	68 d6 b8 02 c0       	push   0xc002b8d6
c0019936:	eb 69                	jmp    c00199a1 <CPU::detectFeatures()+0x953>
c0019938:	83 f8 0a             	cmp    eax,0xa
c001993b:	75 09                	jne    c0019946 <CPU::detectFeatures()+0x8f8>
c001993d:	50                   	push   eax
c001993e:	50                   	push   eax
c001993f:	68 e1 b8 02 c0       	push   0xc002b8e1
c0019944:	eb 5b                	jmp    c00199a1 <CPU::detectFeatures()+0x953>
c0019946:	83 f8 0b             	cmp    eax,0xb
c0019949:	75 09                	jne    c0019954 <CPU::detectFeatures()+0x906>
c001994b:	50                   	push   eax
c001994c:	50                   	push   eax
c001994d:	68 e9 b8 02 c0       	push   0xc002b8e9
c0019952:	eb 4d                	jmp    c00199a1 <CPU::detectFeatures()+0x953>
c0019954:	83 f8 08             	cmp    eax,0x8
c0019957:	75 09                	jne    c0019962 <CPU::detectFeatures()+0x914>
c0019959:	50                   	push   eax
c001995a:	50                   	push   eax
c001995b:	68 f2 b8 02 c0       	push   0xc002b8f2
c0019960:	eb 3f                	jmp    c00199a1 <CPU::detectFeatures()+0x953>
c0019962:	83 f8 09             	cmp    eax,0x9
c0019965:	75 09                	jne    c0019970 <CPU::detectFeatures()+0x922>
c0019967:	50                   	push   eax
c0019968:	50                   	push   eax
c0019969:	68 fa b8 02 c0       	push   0xc002b8fa
c001996e:	eb 31                	jmp    c00199a1 <CPU::detectFeatures()+0x953>
c0019970:	83 f8 05             	cmp    eax,0x5
c0019973:	75 09                	jne    c001997e <CPU::detectFeatures()+0x930>
c0019975:	50                   	push   eax
c0019976:	50                   	push   eax
c0019977:	68 02 b9 02 c0       	push   0xc002b902
c001997c:	eb 23                	jmp    c00199a1 <CPU::detectFeatures()+0x953>
c001997e:	83 f8 0c             	cmp    eax,0xc
c0019981:	75 09                	jne    c001998c <CPU::detectFeatures()+0x93e>
c0019983:	55                   	push   ebp
c0019984:	55                   	push   ebp
c0019985:	68 10 b9 02 c0       	push   0xc002b910
c001998a:	eb 15                	jmp    c00199a1 <CPU::detectFeatures()+0x953>
c001998c:	83 f8 0d             	cmp    eax,0xd
c001998f:	75 09                	jne    c001999a <CPU::detectFeatures()+0x94c>
c0019991:	57                   	push   edi
c0019992:	57                   	push   edi
c0019993:	68 1b b9 02 c0       	push   0xc002b91b
c0019998:	eb 07                	jmp    c00199a1 <CPU::detectFeatures()+0x953>
c001999a:	56                   	push   esi
c001999b:	56                   	push   esi
c001999c:	68 2f b9 02 c0       	push   0xc002b92f
c00199a1:	53                   	push   ebx
c00199a2:	e8 f3 aa ff ff       	call   c001449a <Device::setName(char const*)>
c00199a7:	83 c4 10             	add    esp,0x10
c00199aa:	e9 80 00 00 00       	jmp    c0019a2f <CPU::detectFeatures()+0x9e1>
c00199af:	51                   	push   ecx
c00199b0:	51                   	push   ecx
c00199b1:	68 7b b7 02 c0       	push   0xc002b77b
c00199b6:	57                   	push   edi
c00199b7:	e8 78 6e fe ff       	call   c0000834 <strcpy>
c00199bc:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00199c6:	e8 e3 68 fe ff       	call   c00002ae <is486>
c00199cb:	83 c4 10             	add    esp,0x10
c00199ce:	85 c0                	test   eax,eax
c00199d0:	74 2b                	je     c00199fd <CPU::detectFeatures()+0x9af>
c00199d2:	52                   	push   edx
c00199d3:	52                   	push   edx
c00199d4:	68 3b b9 02 c0       	push   0xc002b93b
c00199d9:	53                   	push   ebx
c00199da:	e8 bb aa ff ff       	call   c001449a <Device::setName(char const*)>
c00199df:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00199e6:	0f 20 c0             	mov    eax,cr0
c00199e9:	83 e0 14             	and    eax,0x14
c00199ec:	83 c4 10             	add    esp,0x10
c00199ef:	83 f8 04             	cmp    eax,0x4
c00199f2:	75 1f                	jne    c0019a13 <CPU::detectFeatures()+0x9c5>
c00199f4:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c00199fb:	eb 32                	jmp    c0019a2f <CPU::detectFeatures()+0x9e1>
c00199fd:	50                   	push   eax
c00199fe:	50                   	push   eax
c00199ff:	68 46 b9 02 c0       	push   0xc002b946
c0019a04:	53                   	push   ebx
c0019a05:	e8 90 aa ff ff       	call   c001449a <Device::setName(char const*)>
c0019a0a:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019a11:	eb d3                	jmp    c00199e6 <CPU::detectFeatures()+0x998>
c0019a13:	e8 71 68 fe ff       	call   c0000289 <hasLegacyFPU>
c0019a18:	83 e0 01             	and    eax,0x1
c0019a1b:	8d 14 00             	lea    edx,[eax+eax*1]
c0019a1e:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019a24:	83 e0 fd             	and    eax,0xfffffffd
c0019a27:	09 d0                	or     eax,edx
c0019a29:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019a2f:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019a36:	83 c4 4c             	add    esp,0x4c
c0019a39:	5b                   	pop    ebx
c0019a3a:	5e                   	pop    esi
c0019a3b:	5f                   	pop    edi
c0019a3c:	5d                   	pop    ebp
c0019a3d:	c3                   	ret    

c0019a3e <CPU::setupSMEP()>:
c0019a3e:	0f 20 e0             	mov    eax,cr4
c0019a41:	0d 00 00 10 00       	or     eax,0x100000
c0019a46:	0f 22 e0             	mov    cr4,eax
c0019a49:	c3                   	ret    

c0019a4a <CPU::setupUMIP()>:
c0019a4a:	0f 20 e0             	mov    eax,cr4
c0019a4d:	80 cc 08             	or     ah,0x8
c0019a50:	0f 22 e0             	mov    cr4,eax
c0019a53:	c3                   	ret    

c0019a54 <CPU::setupTSC()>:
c0019a54:	0f 20 e0             	mov    eax,cr4
c0019a57:	83 c8 04             	or     eax,0x4
c0019a5a:	0f 22 e0             	mov    cr4,eax
c0019a5d:	c3                   	ret    

c0019a5e <CPU::setupLargePages()>:
c0019a5e:	0f 20 e0             	mov    eax,cr4
c0019a61:	83 c8 10             	or     eax,0x10
c0019a64:	0f 22 e0             	mov    cr4,eax
c0019a67:	c3                   	ret    

c0019a68 <CPU::setupPAT()>:
c0019a68:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0019a6d:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019a74:	74 2c                	je     c0019aa2 <CPU::setupPAT()+0x3a>
c0019a76:	53                   	push   ebx
c0019a77:	83 ec 10             	sub    esp,0x10
c0019a7a:	68 77 02 00 00       	push   0x277
c0019a7f:	50                   	push   eax
c0019a80:	e8 63 53 ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0019a85:	83 e2 f8             	and    edx,0xfffffff8
c0019a88:	83 ca 01             	or     edx,0x1
c0019a8b:	52                   	push   edx
c0019a8c:	50                   	push   eax
c0019a8d:	68 77 02 00 00       	push   0x277
c0019a92:	ff 35 88 e3 02 c0    	push   DWORD PTR ds:0xc002e388
c0019a98:	e8 77 53 ff ff       	call   c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>
c0019a9d:	83 c4 28             	add    esp,0x28
c0019aa0:	5b                   	pop    ebx
c0019aa1:	c3                   	ret    
c0019aa2:	c3                   	ret    
c0019aa3:	90                   	nop

c0019aa4 <CPU::setupMTRR()>:
c0019aa4:	c3                   	ret    
c0019aa5:	90                   	nop

c0019aa6 <CPU::setupGlobalPages()>:
c0019aa6:	0f 20 e0             	mov    eax,cr4
c0019aa9:	0c 80                	or     al,0x80
c0019aab:	0f 22 e0             	mov    cr4,eax
c0019aae:	c3                   	ret    
c0019aaf:	90                   	nop

c0019ab0 <CPU::allowUsermodeDataAccess()>:
c0019ab0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019ab4:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019abb:	74 03                	je     c0019ac0 <CPU::allowUsermodeDataAccess()+0x10>
c0019abd:	0f 01 cb             	stac   
c0019ac0:	c3                   	ret    
c0019ac1:	90                   	nop

c0019ac2 <CPU::prohibitUsermodeDataAccess()>:
c0019ac2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019ac6:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019acd:	74 03                	je     c0019ad2 <CPU::prohibitUsermodeDataAccess()+0x10>
c0019acf:	0f 01 ca             	clac   
c0019ad2:	c3                   	ret    
c0019ad3:	90                   	nop

c0019ad4 <CPU::setupSMAP()>:
c0019ad4:	0f 20 e0             	mov    eax,cr4
c0019ad7:	0d 00 00 20 00       	or     eax,0x200000
c0019adc:	0f 22 e0             	mov    cr4,eax
c0019adf:	eb e1                	jmp    c0019ac2 <CPU::prohibitUsermodeDataAccess()>
c0019ae1:	90                   	nop

c0019ae2 <CPU::setupFeatures()>:
c0019ae2:	83 ec 0c             	sub    esp,0xc
c0019ae5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019ae9:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019af0:	74 07                	je     c0019af9 <CPU::setupFeatures()+0x17>
c0019af2:	52                   	push   edx
c0019af3:	e8 46 ff ff ff       	call   c0019a3e <CPU::setupSMEP()>
c0019af8:	58                   	pop    eax
c0019af9:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019b00:	74 07                	je     c0019b09 <CPU::setupFeatures()+0x27>
c0019b02:	52                   	push   edx
c0019b03:	e8 cc ff ff ff       	call   c0019ad4 <CPU::setupSMAP()>
c0019b08:	58                   	pop    eax
c0019b09:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019b10:	74 07                	je     c0019b19 <CPU::setupFeatures()+0x37>
c0019b12:	52                   	push   edx
c0019b13:	e8 32 ff ff ff       	call   c0019a4a <CPU::setupUMIP()>
c0019b18:	58                   	pop    eax
c0019b19:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019b20:	74 07                	je     c0019b29 <CPU::setupFeatures()+0x47>
c0019b22:	52                   	push   edx
c0019b23:	e8 2c ff ff ff       	call   c0019a54 <CPU::setupTSC()>
c0019b28:	58                   	pop    eax
c0019b29:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019b30:	74 07                	je     c0019b39 <CPU::setupFeatures()+0x57>
c0019b32:	52                   	push   edx
c0019b33:	e8 26 ff ff ff       	call   c0019a5e <CPU::setupLargePages()>
c0019b38:	59                   	pop    ecx
c0019b39:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019b40:	74 07                	je     c0019b49 <CPU::setupFeatures()+0x67>
c0019b42:	52                   	push   edx
c0019b43:	e8 5e ff ff ff       	call   c0019aa6 <CPU::setupGlobalPages()>
c0019b48:	58                   	pop    eax
c0019b49:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019b50:	74 0c                	je     c0019b5e <CPU::setupFeatures()+0x7c>
c0019b52:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019b56:	83 c4 0c             	add    esp,0xc
c0019b59:	e9 0a ff ff ff       	jmp    c0019a68 <CPU::setupPAT()>
c0019b5e:	83 c4 0c             	add    esp,0xc
c0019b61:	c3                   	ret    

c0019b62 <CPU::open(int, int, void*)>:
c0019b62:	57                   	push   edi
c0019b63:	56                   	push   esi
c0019b64:	53                   	push   ebx
c0019b65:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019b69:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019b6d:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019b73:	83 ec 0c             	sub    esp,0xc
c0019b76:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019b7c:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019b82:	50                   	push   eax
c0019b83:	e8 4c 55 ff ff       	call   c000f0d4 <GDT::setup()>
c0019b88:	83 c4 0c             	add    esp,0xc
c0019b8b:	6a 00                	push   0x0
c0019b8d:	68 ef be ad de       	push   0xdeadbeef
c0019b92:	57                   	push   edi
c0019b93:	e8 14 79 ff ff       	call   c00114ac <TSS::setup(unsigned long, unsigned long)>
c0019b98:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019b9b:	e8 ec 78 ff ff       	call   c001148c <TSS::flush()>
c0019ba0:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019ba6:	89 04 24             	mov    DWORD PTR [esp],eax
c0019ba9:	e8 82 57 ff ff       	call   c000f330 <IDT::setup()>
c0019bae:	b8 00 04 00 00       	mov    eax,0x400
c0019bb3:	0f 23 f8             	mov    db7,eax
c0019bb6:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019bc0:	e8 18 63 ff ff       	call   c000fedd <Phys::allocatePage()>
c0019bc5:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019bcb:	89 30                	mov    DWORD PTR [eax],esi
c0019bcd:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019bd3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019bd6:	58                   	pop    eax
c0019bd7:	5a                   	pop    edx
c0019bd8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019bde:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019be2:	e8 13 8a ff ff       	call   c00125fa <VAS::setCPUSpecific(unsigned long)>
c0019be7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019bea:	e8 5f f4 ff ff       	call   c001904e <CPU::detectFeatures()>
c0019bef:	e8 94 bc ff ff       	call   c0015888 <setupInterruptController()>
c0019bf4:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019bfa:	a1 a0 e3 02 c0       	mov    eax,ds:0xc002e3a0
c0019bff:	83 e0 10             	and    eax,0x10
c0019c02:	83 f8 01             	cmp    eax,0x1
c0019c05:	19 c0                	sbb    eax,eax
c0019c07:	83 e0 46             	and    eax,0x46
c0019c0a:	83 c0 1e             	add    eax,0x1e
c0019c0d:	89 04 24             	mov    DWORD PTR [esp],eax
c0019c10:	e8 b7 d1 ff ff       	call   c0016dcc <setupTimer(int)>
c0019c15:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019c1b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019c1e:	e8 bf fe ff ff       	call   c0019ae2 <CPU::setupFeatures()>
c0019c23:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019c26:	e8 a7 f1 ff ff       	call   c0018dd2 <CPU::displayFeatures()>
c0019c2b:	83 c4 10             	add    esp,0x10
c0019c2e:	31 c0                	xor    eax,eax
c0019c30:	5b                   	pop    ebx
c0019c31:	5e                   	pop    esi
c0019c32:	5f                   	pop    edi
c0019c33:	c3                   	ret    

c0019c34 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019c34:	57                   	push   edi
c0019c35:	56                   	push   esi
c0019c36:	53                   	push   ebx
c0019c37:	51                   	push   ecx
c0019c38:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019c3c:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019c3f:	0f 02 c0             	lar    eax,ax
c0019c42:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019c45:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019c49:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019c4c:	88 ca                	mov    dl,cl
c0019c4e:	c0 ea 06             	shr    dl,0x6
c0019c51:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019c55:	89 ca                	mov    edx,ecx
c0019c57:	66 c1 ea 03          	shr    dx,0x3
c0019c5b:	83 e2 07             	and    edx,0x7
c0019c5e:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019c63:	88 17                	mov    BYTE PTR [edi],dl
c0019c65:	0f 84 a6 01 00 00    	je     c0019e11 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019c6b:	83 e1 07             	and    ecx,0x7
c0019c6e:	80 f9 04             	cmp    cl,0x4
c0019c71:	0f 84 98 00 00 00    	je     c0019d0f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019c77:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019c7c:	0f 95 c0             	setne  al
c0019c7f:	80 f9 05             	cmp    cl,0x5
c0019c82:	0f 95 c2             	setne  dl
c0019c85:	08 c2                	or     dl,al
c0019c87:	74 79                	je     c0019d02 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019c89:	84 c9                	test   cl,cl
c0019c8b:	75 05                	jne    c0019c92 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019c8d:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019c90:	eb 3c                	jmp    c0019cce <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019c92:	80 f9 01             	cmp    cl,0x1
c0019c95:	75 05                	jne    c0019c9c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019c97:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019c9a:	eb 32                	jmp    c0019cce <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019c9c:	80 f9 02             	cmp    cl,0x2
c0019c9f:	75 05                	jne    c0019ca6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019ca1:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019ca4:	eb 28                	jmp    c0019cce <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019ca6:	31 c0                	xor    eax,eax
c0019ca8:	80 f9 03             	cmp    cl,0x3
c0019cab:	75 05                	jne    c0019cb2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019cad:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019cb0:	eb 1c                	jmp    c0019cce <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019cb2:	80 f9 05             	cmp    cl,0x5
c0019cb5:	75 05                	jne    c0019cbc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019cb7:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019cba:	eb 12                	jmp    c0019cce <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019cbc:	80 f9 06             	cmp    cl,0x6
c0019cbf:	75 05                	jne    c0019cc6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019cc1:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019cc4:	eb 08                	jmp    c0019cce <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019cc6:	80 f9 07             	cmp    cl,0x7
c0019cc9:	75 03                	jne    c0019cce <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019ccb:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019cce:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019cd3:	75 10                	jne    c0019ce5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019cd5:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019cd9:	b9 03 00 00 00       	mov    ecx,0x3
c0019cde:	01 d0                	add    eax,edx
c0019ce0:	e9 37 01 00 00       	jmp    c0019e1c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019ce5:	b9 02 00 00 00       	mov    ecx,0x2
c0019cea:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019cef:	0f 85 27 01 00 00    	jne    c0019e1c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019cf5:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019cf8:	b9 06 00 00 00       	mov    ecx,0x6
c0019cfd:	e9 1a 01 00 00       	jmp    c0019e1c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019d02:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019d05:	b9 06 00 00 00       	mov    ecx,0x6
c0019d0a:	e9 0f 01 00 00       	jmp    c0019e1e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019d0f:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019d12:	88 ca                	mov    dl,cl
c0019d14:	c0 ea 06             	shr    dl,0x6
c0019d17:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019d1b:	89 ca                	mov    edx,ecx
c0019d1d:	66 c1 ea 03          	shr    dx,0x3
c0019d21:	83 e2 07             	and    edx,0x7
c0019d24:	80 e1 07             	and    cl,0x7
c0019d27:	75 05                	jne    c0019d2e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019d29:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019d2c:	eb 4c                	jmp    c0019d7a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019d2e:	80 f9 01             	cmp    cl,0x1
c0019d31:	75 05                	jne    c0019d38 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019d33:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019d36:	eb 42                	jmp    c0019d7a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019d38:	80 f9 02             	cmp    cl,0x2
c0019d3b:	75 05                	jne    c0019d42 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019d3d:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019d40:	eb 38                	jmp    c0019d7a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019d42:	80 f9 03             	cmp    cl,0x3
c0019d45:	75 05                	jne    c0019d4c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019d47:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019d4a:	eb 2e                	jmp    c0019d7a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019d4c:	80 f9 04             	cmp    cl,0x4
c0019d4f:	75 12                	jne    c0019d63 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019d51:	f6 c4 60             	test   ah,0x60
c0019d54:	75 08                	jne    c0019d5e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019d56:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019d59:	8d 78 14             	lea    edi,[eax+0x14]
c0019d5c:	eb 1c                	jmp    c0019d7a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019d5e:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019d61:	eb 17                	jmp    c0019d7a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019d63:	80 f9 05             	cmp    cl,0x5
c0019d66:	75 05                	jne    c0019d6d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019d68:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019d6b:	eb 0d                	jmp    c0019d7a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019d6d:	80 f9 06             	cmp    cl,0x6
c0019d70:	75 05                	jne    c0019d77 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019d72:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019d75:	eb 03                	jmp    c0019d7a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019d77:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019d7a:	84 d2                	test   dl,dl
c0019d7c:	75 05                	jne    c0019d83 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019d7e:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019d81:	eb 3c                	jmp    c0019dbf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019d83:	80 fa 01             	cmp    dl,0x1
c0019d86:	75 05                	jne    c0019d8d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019d88:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019d8b:	eb 32                	jmp    c0019dbf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019d8d:	80 fa 02             	cmp    dl,0x2
c0019d90:	75 05                	jne    c0019d97 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019d92:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019d95:	eb 28                	jmp    c0019dbf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019d97:	80 fa 03             	cmp    dl,0x3
c0019d9a:	75 05                	jne    c0019da1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019d9c:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019d9f:	eb 1e                	jmp    c0019dbf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019da1:	31 c0                	xor    eax,eax
c0019da3:	80 fa 04             	cmp    dl,0x4
c0019da6:	74 17                	je     c0019dbf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019da8:	80 fa 05             	cmp    dl,0x5
c0019dab:	75 05                	jne    c0019db2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019dad:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019db0:	eb 0d                	jmp    c0019dbf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019db2:	80 fa 06             	cmp    dl,0x6
c0019db5:	75 05                	jne    c0019dbc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019db7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019dba:	eb 03                	jmp    c0019dbf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019dbc:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019dbf:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019dc4:	0f 94 c2             	sete   dl
c0019dc7:	80 f9 05             	cmp    cl,0x5
c0019dca:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019dce:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019dd3:	d3 e0                	shl    eax,cl
c0019dd5:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019dd9:	74 0a                	je     c0019de5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019ddb:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019dde:	b9 07 00 00 00       	mov    ecx,0x7
c0019de3:	eb 37                	jmp    c0019e1c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019de5:	01 f8                	add    eax,edi
c0019de7:	b9 03 00 00 00       	mov    ecx,0x3
c0019dec:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019df1:	74 2b                	je     c0019e1e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019df3:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019df8:	75 0d                	jne    c0019e07 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019dfa:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019dfe:	01 c8                	add    eax,ecx
c0019e00:	b9 04 00 00 00       	mov    ecx,0x4
c0019e05:	eb 17                	jmp    c0019e1e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019e07:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019e0a:	b9 07 00 00 00       	mov    ecx,0x7
c0019e0f:	eb 0d                	jmp    c0019e1e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019e11:	b9 02 00 00 00       	mov    ecx,0x2
c0019e16:	b2 01                	mov    dl,0x1
c0019e18:	31 c0                	xor    eax,eax
c0019e1a:	eb 02                	jmp    c0019e1e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019e1c:	31 d2                	xor    edx,edx
c0019e1e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019e22:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019e24:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019e28:	88 11                	mov    BYTE PTR [ecx],dl
c0019e2a:	5a                   	pop    edx
c0019e2b:	5b                   	pop    ebx
c0019e2c:	5e                   	pop    esi
c0019e2d:	5f                   	pop    edi
c0019e2e:	c3                   	ret    

c0019e2f <Krnl::smpEntry()>:
c0019e2f:	eb fe                	jmp    c0019e2f <Krnl::smpEntry()>

c0019e31 <Krnl::startCPU(int)>:
c0019e31:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0019e36:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019e3d:	0f 84 36 01 00 00    	je     c0019f79 <Krnl::startCPU(int)+0x148>
c0019e43:	53                   	push   ebx
c0019e44:	83 ec 08             	sub    esp,0x8
c0019e47:	e8 1b 3f 00 00       	call   c001dd67 <lockScheduler()>
c0019e4c:	52                   	push   edx
c0019e4d:	52                   	push   edx
c0019e4e:	6a 1b                	push   0x1b
c0019e50:	ff 35 88 e3 02 c0    	push   DWORD PTR ds:0xc002e388
c0019e56:	e8 8d 4f ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0019e5b:	59                   	pop    ecx
c0019e5c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019e61:	89 c3                	mov    ebx,eax
c0019e63:	58                   	pop    eax
c0019e64:	53                   	push   ebx
c0019e65:	68 80 b9 02 c0       	push   0xc002b980
c0019e6a:	e8 23 90 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0019e6f:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019e79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019e7d:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019e87:	c1 e0 18             	shl    eax,0x18
c0019e8a:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0019e90:	83 c4 10             	add    esp,0x10
c0019e93:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0019e99:	09 c2                	or     edx,eax
c0019e9b:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0019ea1:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0019ea7:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019ead:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019eb3:	80 cd c5             	or     ch,0xc5
c0019eb6:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019ebc:	f3 90                	pause  
c0019ebe:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019ec0:	0f ba e1 0c          	bt     ecx,0xc
c0019ec4:	72 f6                	jb     c0019ebc <Krnl::startCPU(int)+0x8b>
c0019ec6:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019ecc:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019ed2:	09 c1                	or     ecx,eax
c0019ed4:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019eda:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019ee0:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019ee6:	80 cd 85             	or     ch,0x85
c0019ee9:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019eef:	f3 90                	pause  
c0019ef1:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019ef3:	0f ba e1 0c          	bt     ecx,0xc
c0019ef7:	72 f6                	jb     c0019eef <Krnl::startCPU(int)+0xbe>
c0019ef9:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019f03:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019f09:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019f0f:	09 c1                	or     ecx,eax
c0019f11:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019f17:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019f1d:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0019f23:	81 c9 02 06 00 00    	or     ecx,0x602
c0019f29:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019f2f:	f3 90                	pause  
c0019f31:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019f33:	0f ba e1 0c          	bt     ecx,0xc
c0019f37:	72 f6                	jb     c0019f2f <Krnl::startCPU(int)+0xfe>
c0019f39:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019f43:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019f49:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019f4f:	09 c8                	or     eax,ecx
c0019f51:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0019f57:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0019f5d:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0019f62:	0d 02 06 00 00       	or     eax,0x602
c0019f67:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0019f6d:	f3 90                	pause  
c0019f6f:	8b 02                	mov    eax,DWORD PTR [edx]
c0019f71:	0f ba e0 0c          	bt     eax,0xc
c0019f75:	72 f6                	jb     c0019f6d <Krnl::startCPU(int)+0x13c>
c0019f77:	eb fe                	jmp    c0019f77 <Krnl::startCPU(int)+0x146>
c0019f79:	c3                   	ret    

c0019f7a <Krnl::startCPUs()>:
c0019f7a:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0019f7f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0019f85:	88 c2                	mov    dl,al
c0019f87:	83 e2 0a             	and    edx,0xa
c0019f8a:	80 fa 0a             	cmp    dl,0xa
c0019f8d:	75 09                	jne    c0019f98 <Krnl::startCPUs()+0x1e>
c0019f8f:	a8 01                	test   al,0x1
c0019f91:	74 05                	je     c0019f98 <Krnl::startCPUs()+0x1e>
c0019f93:	e9 03 62 fe ff       	jmp    c000019b <prepareTramp>
c0019f98:	c3                   	ret    
c0019f99:	90                   	nop

c0019f9a <EnvVarContainer::getEnv(char const*)>:
c0019f9a:	57                   	push   edi
c0019f9b:	56                   	push   esi
c0019f9c:	53                   	push   ebx
c0019f9d:	31 db                	xor    ebx,ebx
c0019f9f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019fa3:	39 1e                	cmp    DWORD PTR [esi],ebx
c0019fa5:	7e 2b                	jle    c0019fd2 <EnvVarContainer::getEnv(char const*)+0x38>
c0019fa7:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0019fae:	50                   	push   eax
c0019faf:	50                   	push   eax
c0019fb0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019fb3:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0019fb6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019fba:	e8 01 69 fe ff       	call   c00008c0 <strcmp>
c0019fbf:	83 c4 10             	add    esp,0x10
c0019fc2:	85 c0                	test   eax,eax
c0019fc4:	75 09                	jne    c0019fcf <EnvVarContainer::getEnv(char const*)+0x35>
c0019fc6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019fc9:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0019fcd:	eb 05                	jmp    c0019fd4 <EnvVarContainer::getEnv(char const*)+0x3a>
c0019fcf:	43                   	inc    ebx
c0019fd0:	eb d1                	jmp    c0019fa3 <EnvVarContainer::getEnv(char const*)+0x9>
c0019fd2:	31 c0                	xor    eax,eax
c0019fd4:	5b                   	pop    ebx
c0019fd5:	5e                   	pop    esi
c0019fd6:	5f                   	pop    edi
c0019fd7:	c3                   	ret    

c0019fd8 <EnvVarContainer::setEnv(char const*, char const*)>:
c0019fd8:	57                   	push   edi
c0019fd9:	56                   	push   esi
c0019fda:	53                   	push   ebx
c0019fdb:	83 ec 1c             	sub    esp,0x1c
c0019fde:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019fe2:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0019fe6:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019fea:	57                   	push   edi
c0019feb:	e8 a4 67 fe ff       	call   c0000794 <strlen>
c0019ff0:	40                   	inc    eax
c0019ff1:	89 04 24             	mov    DWORD PTR [esp],eax
c0019ff4:	e8 47 58 ff ff       	call   c000f840 <malloc>
c0019ff9:	89 34 24             	mov    DWORD PTR [esp],esi
c0019ffc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a000:	e8 8f 67 fe ff       	call   c0000794 <strlen>
c001a005:	40                   	inc    eax
c001a006:	89 04 24             	mov    DWORD PTR [esp],eax
c001a009:	e8 32 58 ff ff       	call   c000f840 <malloc>
c001a00e:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a011:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a015:	e8 7a 67 fe ff       	call   c0000794 <strlen>
c001a01a:	83 c4 0c             	add    esp,0xc
c001a01d:	40                   	inc    eax
c001a01e:	50                   	push   eax
c001a01f:	6a 00                	push   0x0
c001a021:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a025:	e8 4e 67 fe ff       	call   c0000778 <memset>
c001a02a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a02d:	e8 62 67 fe ff       	call   c0000794 <strlen>
c001a032:	83 c4 0c             	add    esp,0xc
c001a035:	40                   	inc    eax
c001a036:	50                   	push   eax
c001a037:	57                   	push   edi
c001a038:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a03c:	e8 03 67 fe ff       	call   c0000744 <memcpy>
c001a041:	89 34 24             	mov    DWORD PTR [esp],esi
c001a044:	e8 4b 67 fe ff       	call   c0000794 <strlen>
c001a049:	83 c4 0c             	add    esp,0xc
c001a04c:	40                   	inc    eax
c001a04d:	50                   	push   eax
c001a04e:	6a 00                	push   0x0
c001a050:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a054:	e8 1f 67 fe ff       	call   c0000778 <memset>
c001a059:	89 34 24             	mov    DWORD PTR [esp],esi
c001a05c:	e8 33 67 fe ff       	call   c0000794 <strlen>
c001a061:	83 c4 0c             	add    esp,0xc
c001a064:	40                   	inc    eax
c001a065:	50                   	push   eax
c001a066:	56                   	push   esi
c001a067:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a06b:	e8 d4 66 fe ff       	call   c0000744 <memcpy>
c001a070:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a072:	40                   	inc    eax
c001a073:	89 03                	mov    DWORD PTR [ebx],eax
c001a075:	c1 e0 03             	shl    eax,0x3
c001a078:	5a                   	pop    edx
c001a079:	59                   	pop    ecx
c001a07a:	50                   	push   eax
c001a07b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001a07e:	e8 a9 57 ff ff       	call   c000f82c <realloc>
c001a083:	83 c4 0c             	add    esp,0xc
c001a086:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a089:	6a 08                	push   0x8
c001a08b:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a08f:	52                   	push   edx
c001a090:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a092:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a096:	50                   	push   eax
c001a097:	e8 a8 66 fe ff       	call   c0000744 <memcpy>
c001a09c:	83 c4 20             	add    esp,0x20
c001a09f:	5b                   	pop    ebx
c001a0a0:	5e                   	pop    esi
c001a0a1:	5f                   	pop    edi
c001a0a2:	c3                   	ret    
c001a0a3:	90                   	nop

c001a0a4 <EnvVarContainer::deleteEnv(char const*)>:
c001a0a4:	c3                   	ret    
c001a0a5:	90                   	nop

c001a0a6 <EnvVarContainer::loadFrom(char const*, char const*)>:
c001a0a6:	55                   	push   ebp
c001a0a7:	57                   	push   edi
c001a0a8:	56                   	push   esi
c001a0a9:	53                   	push   ebx
c001a0aa:	81 ec 38 01 00 00    	sub    esp,0x138
c001a0b0:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c001a0b7:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c001a0be:	68 14 01 00 00       	push   0x114
c001a0c3:	e8 78 57 ff ff       	call   c000f840 <malloc>
c001a0c8:	83 c4 0c             	add    esp,0xc
c001a0cb:	89 c7                	mov    edi,eax
c001a0cd:	ff 76 08             	push   DWORD PTR [esi+0x8]
c001a0d0:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a0d7:	50                   	push   eax
c001a0d8:	e8 0d 93 ff ff       	call   c00133ea <File::File(char const*, Process*)>
c001a0dd:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a0e0:	e8 d7 95 ff ff       	call   c00136bc <File::exists()>
c001a0e5:	83 c4 10             	add    esp,0x10
c001a0e8:	84 c0                	test   al,al
c001a0ea:	75 31                	jne    c001a11d <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001a0ec:	51                   	push   ecx
c001a0ed:	51                   	push   ecx
c001a0ee:	6a 12                	push   0x12
c001a0f0:	57                   	push   edi
c001a0f1:	e8 58 93 ff ff       	call   c001344e <File::open(FileOpenMode)>
c001a0f6:	8b 07                	mov    eax,DWORD PTR [edi]
c001a0f8:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001a0fb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a0fe:	e8 91 66 fe ff       	call   c0000794 <strlen>
c001a103:	5a                   	pop    edx
c001a104:	31 d2                	xor    edx,edx
c001a106:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a10a:	51                   	push   ecx
c001a10b:	55                   	push   ebp
c001a10c:	52                   	push   edx
c001a10d:	50                   	push   eax
c001a10e:	57                   	push   edi
c001a10f:	ff d3                	call   ebx
c001a111:	83 c4 14             	add    esp,0x14
c001a114:	57                   	push   edi
c001a115:	e8 92 93 ff ff       	call   c00134ac <File::close()>
c001a11a:	83 c4 10             	add    esp,0x10
c001a11d:	31 db                	xor    ebx,ebx
c001a11f:	50                   	push   eax
c001a120:	31 ed                	xor    ebp,ebp
c001a122:	68 00 01 00 00       	push   0x100
c001a127:	6a 00                	push   0x0
c001a129:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a12d:	50                   	push   eax
c001a12e:	e8 45 66 fe ff       	call   c0000778 <memset>
c001a133:	58                   	pop    eax
c001a134:	5a                   	pop    edx
c001a135:	6a 01                	push   0x1
c001a137:	57                   	push   edi
c001a138:	e8 11 93 ff ff       	call   c001344e <File::open(FileOpenMode)>
c001a13d:	83 c4 10             	add    esp,0x10
c001a140:	83 ec 0c             	sub    esp,0xc
c001a143:	8b 07                	mov    eax,DWORD PTR [edi]
c001a145:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a149:	51                   	push   ecx
c001a14a:	8d 54 24 23          	lea    edx,[esp+0x23]
c001a14e:	52                   	push   edx
c001a14f:	6a 00                	push   0x0
c001a151:	6a 01                	push   0x1
c001a153:	57                   	push   edi
c001a154:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a157:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001a15b:	83 c4 20             	add    esp,0x20
c001a15e:	3c 0d                	cmp    al,0xd
c001a160:	0f 84 12 01 00 00    	je     c001a278 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a166:	85 db                	test   ebx,ebx
c001a168:	0f 84 fd 00 00 00    	je     c001a26b <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a16e:	3c 0a                	cmp    al,0xa
c001a170:	74 13                	je     c001a185 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a172:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a177:	74 0c                	je     c001a185 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a179:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c001a17f:	0f 8e e6 00 00 00    	jle    c001a26b <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a185:	83 ec 0c             	sub    esp,0xc
c001a188:	8d 53 01             	lea    edx,[ebx+0x1]
c001a18b:	29 dd                	sub    ebp,ebx
c001a18d:	52                   	push   edx
c001a18e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a192:	e8 a9 56 ff ff       	call   c000f840 <malloc>
c001a197:	8d 4d 04             	lea    ecx,[ebp+0x4]
c001a19a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a19e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001a1a1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001a1a5:	e8 96 56 ff ff       	call   c000f840 <malloc>
c001a1aa:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a1ae:	83 c4 0c             	add    esp,0xc
c001a1b1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a1b5:	52                   	push   edx
c001a1b6:	6a 00                	push   0x0
c001a1b8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a1bc:	e8 b7 65 fe ff       	call   c0000778 <memset>
c001a1c1:	83 c4 0c             	add    esp,0xc
c001a1c4:	53                   	push   ebx
c001a1c5:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001a1c9:	55                   	push   ebp
c001a1ca:	01 eb                	add    ebx,ebp
c001a1cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a1d0:	e8 6f 65 fe ff       	call   c0000744 <memcpy>
c001a1d5:	83 c4 0c             	add    esp,0xc
c001a1d8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a1dc:	51                   	push   ecx
c001a1dd:	6a 00                	push   0x0
c001a1df:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a1e3:	e8 90 65 fe ff       	call   c0000778 <memset>
c001a1e8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a1eb:	e8 a4 65 fe ff       	call   c0000794 <strlen>
c001a1f0:	83 c4 0c             	add    esp,0xc
c001a1f3:	50                   	push   eax
c001a1f4:	53                   	push   ebx
c001a1f5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a1f9:	e8 46 65 fe ff       	call   c0000744 <memcpy>
c001a1fe:	5b                   	pop    ebx
c001a1ff:	58                   	pop    eax
c001a200:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a204:	68 91 b9 02 c0       	push   0xc002b991
c001a209:	e8 84 8c ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001a20e:	8b 06                	mov    eax,DWORD PTR [esi]
c001a210:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001a213:	40                   	inc    eax
c001a214:	83 c4 10             	add    esp,0x10
c001a217:	89 06                	mov    DWORD PTR [esi],eax
c001a219:	85 d2                	test   edx,edx
c001a21b:	75 0c                	jne    c001a229 <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c001a21d:	83 ec 0c             	sub    esp,0xc
c001a220:	6a 08                	push   0x8
c001a222:	e8 19 56 ff ff       	call   c000f840 <malloc>
c001a227:	eb 0c                	jmp    c001a235 <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c001a229:	c1 e0 03             	shl    eax,0x3
c001a22c:	51                   	push   ecx
c001a22d:	51                   	push   ecx
c001a22e:	50                   	push   eax
c001a22f:	52                   	push   edx
c001a230:	e8 f7 55 ff ff       	call   c000f82c <realloc>
c001a235:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c001a238:	83 c4 10             	add    esp,0x10
c001a23b:	31 db                	xor    ebx,ebx
c001a23d:	52                   	push   edx
c001a23e:	6a 08                	push   0x8
c001a240:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a244:	50                   	push   eax
c001a245:	8b 16                	mov    edx,DWORD PTR [esi]
c001a247:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a24a:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a24e:	50                   	push   eax
c001a24f:	e8 f0 64 fe ff       	call   c0000744 <memcpy>
c001a254:	83 c4 0c             	add    esp,0xc
c001a257:	68 00 01 00 00       	push   0x100
c001a25c:	6a 00                	push   0x0
c001a25e:	55                   	push   ebp
c001a25f:	31 ed                	xor    ebp,ebp
c001a261:	e8 12 65 fe ff       	call   c0000778 <memset>
c001a266:	83 c4 10             	add    esp,0x10
c001a269:	eb 0d                	jmp    c001a278 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a26b:	3c 3d                	cmp    al,0x3d
c001a26d:	74 07                	je     c001a276 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c001a26f:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c001a273:	45                   	inc    ebp
c001a274:	eb 02                	jmp    c001a278 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a276:	89 eb                	mov    ebx,ebp
c001a278:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a27d:	0f 85 bd fe ff ff    	jne    c001a140 <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c001a283:	50                   	push   eax
c001a284:	50                   	push   eax
c001a285:	ff 36                	push   DWORD PTR [esi]
c001a287:	68 9f b9 02 c0       	push   0xc002b99f
c001a28c:	e8 01 8c ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001a291:	81 c4 3c 01 00 00    	add    esp,0x13c
c001a297:	5b                   	pop    ebx
c001a298:	5e                   	pop    esi
c001a299:	5f                   	pop    edi
c001a29a:	5d                   	pop    ebp
c001a29b:	c3                   	ret    

c001a29c <EnvVarContainer::__loadSystem()>:
c001a29c:	83 ec 10             	sub    esp,0x10
c001a29f:	68 c0 d8 02 c0       	push   0xc002d8c0
c001a2a4:	68 ca b9 02 c0       	push   0xc002b9ca
c001a2a9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a2ad:	e8 f4 fd ff ff       	call   c001a0a6 <EnvVarContainer::loadFrom(char const*, char const*)>
c001a2b2:	83 c4 1c             	add    esp,0x1c
c001a2b5:	c3                   	ret    

c001a2b6 <EnvVarContainer::__loadUser()>:
c001a2b6:	c3                   	ret    
c001a2b7:	90                   	nop

c001a2b8 <EnvVarContainer::EnvVarContainer(Process*)>:
c001a2b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2bc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a2c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2c6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a2ca:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a2cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2d1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a2d8:	90                   	nop
c001a2d9:	c3                   	ret    

c001a2da <EnvVarContainer::~EnvVarContainer()>:
c001a2da:	83 ec 0c             	sub    esp,0xc
c001a2dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a2e1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a2e4:	85 c0                	test   eax,eax
c001a2e6:	74 1d                	je     c001a305 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a2e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a2ec:	8b 00                	mov    eax,DWORD PTR [eax]
c001a2ee:	85 c0                	test   eax,eax
c001a2f0:	74 13                	je     c001a305 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a2f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a2f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a2f9:	83 ec 0c             	sub    esp,0xc
c001a2fc:	50                   	push   eax
c001a2fd:	e8 4e 55 ff ff       	call   c000f850 <free>
c001a302:	83 c4 10             	add    esp,0x10
c001a305:	90                   	nop
c001a306:	83 c4 0c             	add    esp,0xc
c001a309:	c3                   	ret    

c001a30a <Krnl::getEnv(Process*, char const*)>:
c001a30a:	53                   	push   ebx
c001a30b:	83 ec 08             	sub    esp,0x8
c001a30e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a312:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a316:	39 05 f4 18 03 c0    	cmp    DWORD PTR ds:0xc00318f4,eax
c001a31c:	74 04                	je     c001a322 <Krnl::getEnv(Process*, char const*)+0x18>
c001a31e:	85 c0                	test   eax,eax
c001a320:	75 0b                	jne    c001a32d <Krnl::getEnv(Process*, char const*)+0x23>
c001a322:	a1 d4 0e 03 c0       	mov    eax,ds:0xc0030ed4
c001a327:	85 c0                	test   eax,eax
c001a329:	75 19                	jne    c001a344 <Krnl::getEnv(Process*, char const*)+0x3a>
c001a32b:	eb 27                	jmp    c001a354 <Krnl::getEnv(Process*, char const*)+0x4a>
c001a32d:	52                   	push   edx
c001a32e:	52                   	push   edx
c001a32f:	53                   	push   ebx
c001a330:	ff b0 3a 1b 00 00    	push   DWORD PTR [eax+0x1b3a]
c001a336:	e8 5f fc ff ff       	call   c0019f9a <EnvVarContainer::getEnv(char const*)>
c001a33b:	83 c4 10             	add    esp,0x10
c001a33e:	85 c0                	test   eax,eax
c001a340:	75 28                	jne    c001a36a <Krnl::getEnv(Process*, char const*)+0x60>
c001a342:	eb de                	jmp    c001a322 <Krnl::getEnv(Process*, char const*)+0x18>
c001a344:	52                   	push   edx
c001a345:	52                   	push   edx
c001a346:	53                   	push   ebx
c001a347:	50                   	push   eax
c001a348:	e8 4d fc ff ff       	call   c0019f9a <EnvVarContainer::getEnv(char const*)>
c001a34d:	83 c4 10             	add    esp,0x10
c001a350:	85 c0                	test   eax,eax
c001a352:	75 16                	jne    c001a36a <Krnl::getEnv(Process*, char const*)+0x60>
c001a354:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a358:	a1 d8 0e 03 c0       	mov    eax,ds:0xc0030ed8
c001a35d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a361:	83 c4 08             	add    esp,0x8
c001a364:	5b                   	pop    ebx
c001a365:	e9 30 fc ff ff       	jmp    c0019f9a <EnvVarContainer::getEnv(char const*)>
c001a36a:	83 c4 08             	add    esp,0x8
c001a36d:	5b                   	pop    ebx
c001a36e:	c3                   	ret    

c001a36f <Krnl::setEnvSystem(char const*, char const*)>:
c001a36f:	83 ec 10             	sub    esp,0x10
c001a372:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a376:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a37a:	ff 35 d8 0e 03 c0    	push   DWORD PTR ds:0xc0030ed8
c001a380:	e8 53 fc ff ff       	call   c0019fd8 <EnvVarContainer::setEnv(char const*, char const*)>
c001a385:	83 c4 1c             	add    esp,0x1c
c001a388:	c3                   	ret    

c001a389 <Krnl::setEnvUser(char const*, char const*)>:
c001a389:	a1 d4 0e 03 c0       	mov    eax,ds:0xc0030ed4
c001a38e:	85 c0                	test   eax,eax
c001a390:	74 15                	je     c001a3a7 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a392:	83 ec 10             	sub    esp,0x10
c001a395:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a399:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a39d:	50                   	push   eax
c001a39e:	e8 35 fc ff ff       	call   c0019fd8 <EnvVarContainer::setEnv(char const*, char const*)>
c001a3a3:	83 c4 1c             	add    esp,0x1c
c001a3a6:	c3                   	ret    
c001a3a7:	c3                   	ret    

c001a3a8 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a3a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3ac:	8b 80 3a 1b 00 00    	mov    eax,DWORD PTR [eax+0x1b3a]
c001a3b2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a3b6:	e9 1d fc ff ff       	jmp    c0019fd8 <EnvVarContainer::setEnv(char const*, char const*)>

c001a3bb <Krnl::deleteEnvSystem(char const*)>:
c001a3bb:	c3                   	ret    

c001a3bc <Krnl::deleteEnvUser(char const*)>:
c001a3bc:	c3                   	ret    

c001a3bd <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a3bd:	c3                   	ret    

c001a3be <Krnl::newProcessEnv(Process*)>:
c001a3be:	83 ec 28             	sub    esp,0x28
c001a3c1:	6a 0c                	push   0xc
c001a3c3:	e8 78 54 ff ff       	call   c000f840 <malloc>
c001a3c8:	5a                   	pop    edx
c001a3c9:	59                   	pop    ecx
c001a3ca:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a3ce:	50                   	push   eax
c001a3cf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a3d3:	e8 e0 fe ff ff       	call   c001a2b8 <EnvVarContainer::EnvVarContainer(Process*)>
c001a3d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a3dc:	83 c4 2c             	add    esp,0x2c
c001a3df:	c3                   	ret    

c001a3e0 <Krnl::copyProcessEnv(Process*, Process*)>:
c001a3e0:	56                   	push   esi
c001a3e1:	53                   	push   ebx
c001a3e2:	83 ec 10             	sub    esp,0x10
c001a3e5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a3e9:	8b b0 3a 1b 00 00    	mov    esi,DWORD PTR [eax+0x1b3a]
c001a3ef:	6a 0c                	push   0xc
c001a3f1:	e8 4a 54 ff ff       	call   c000f840 <malloc>
c001a3f6:	89 c3                	mov    ebx,eax
c001a3f8:	58                   	pop    eax
c001a3f9:	5a                   	pop    edx
c001a3fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a3fe:	53                   	push   ebx
c001a3ff:	e8 b4 fe ff ff       	call   c001a2b8 <EnvVarContainer::EnvVarContainer(Process*)>
c001a404:	8b 06                	mov    eax,DWORD PTR [esi]
c001a406:	89 03                	mov    DWORD PTR [ebx],eax
c001a408:	c1 e0 03             	shl    eax,0x3
c001a40b:	89 04 24             	mov    DWORD PTR [esp],eax
c001a40e:	e8 2d 54 ff ff       	call   c000f840 <malloc>
c001a413:	83 c4 0c             	add    esp,0xc
c001a416:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a419:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001a41b:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c001a422:	52                   	push   edx
c001a423:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a426:	50                   	push   eax
c001a427:	e8 18 63 fe ff       	call   c0000744 <memcpy>
c001a42c:	89 d8                	mov    eax,ebx
c001a42e:	83 c4 14             	add    esp,0x14
c001a431:	5b                   	pop    ebx
c001a432:	5e                   	pop    esi
c001a433:	c3                   	ret    

c001a434 <Krnl::loadSystemEnv()>:
c001a434:	53                   	push   ebx
c001a435:	83 ec 14             	sub    esp,0x14
c001a438:	6a 0c                	push   0xc
c001a43a:	e8 01 54 ff ff       	call   c000f840 <malloc>
c001a43f:	89 c3                	mov    ebx,eax
c001a441:	58                   	pop    eax
c001a442:	5a                   	pop    edx
c001a443:	ff 35 f4 18 03 c0    	push   DWORD PTR ds:0xc00318f4
c001a449:	53                   	push   ebx
c001a44a:	e8 69 fe ff ff       	call   c001a2b8 <EnvVarContainer::EnvVarContainer(Process*)>
c001a44f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a452:	89 1d d8 0e 03 c0    	mov    DWORD PTR ds:0xc0030ed8,ebx
c001a458:	e8 3f fe ff ff       	call   c001a29c <EnvVarContainer::__loadSystem()>
c001a45d:	83 c4 18             	add    esp,0x18
c001a460:	5b                   	pop    ebx
c001a461:	c3                   	ret    

c001a462 <Krnl::loadUserEnv()>:
c001a462:	53                   	push   ebx
c001a463:	83 ec 14             	sub    esp,0x14
c001a466:	6a 0c                	push   0xc
c001a468:	e8 d3 53 ff ff       	call   c000f840 <malloc>
c001a46d:	89 c3                	mov    ebx,eax
c001a46f:	58                   	pop    eax
c001a470:	5a                   	pop    edx
c001a471:	ff 35 f4 18 03 c0    	push   DWORD PTR ds:0xc00318f4
c001a477:	53                   	push   ebx
c001a478:	e8 3b fe ff ff       	call   c001a2b8 <EnvVarContainer::EnvVarContainer(Process*)>
c001a47d:	89 1d d4 0e 03 c0    	mov    DWORD PTR ds:0xc0030ed4,ebx
c001a483:	83 c4 18             	add    esp,0x18
c001a486:	5b                   	pop    ebx
c001a487:	c3                   	ret    

c001a488 <Krnl::flushEnv()>:
c001a488:	c3                   	ret    

c001a489 <Krnl::getProcessTotalEnvCount(Process*)>:
c001a489:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a48d:	8b 15 d4 0e 03 c0    	mov    edx,DWORD PTR ds:0xc0030ed4
c001a493:	8b 88 3a 1b 00 00    	mov    ecx,DWORD PTR [eax+0x1b3a]
c001a499:	a1 d8 0e 03 c0       	mov    eax,ds:0xc0030ed8
c001a49e:	8b 00                	mov    eax,DWORD PTR [eax]
c001a4a0:	03 01                	add    eax,DWORD PTR [ecx]
c001a4a2:	85 d2                	test   edx,edx
c001a4a4:	74 02                	je     c001a4a8 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a4a6:	03 02                	add    eax,DWORD PTR [edx]
c001a4a8:	c3                   	ret    

c001a4a9 <Krnl::getProcessEnvPair(Process*, int)>:
c001a4a9:	57                   	push   edi
c001a4aa:	8b 0d d4 0e 03 c0    	mov    ecx,DWORD PTR ds:0xc0030ed4
c001a4b0:	56                   	push   esi
c001a4b1:	85 c9                	test   ecx,ecx
c001a4b3:	53                   	push   ebx
c001a4b4:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a4b8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a4bc:	8b 97 3a 1b 00 00    	mov    edx,DWORD PTR [edi+0x1b3a]
c001a4c2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a4c6:	8b 02                	mov    eax,DWORD PTR [edx]
c001a4c8:	75 47                	jne    c001a511 <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001a4ca:	39 c3                	cmp    ebx,eax
c001a4cc:	7c 47                	jl     c001a515 <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001a4ce:	8b 15 d8 0e 03 c0    	mov    edx,DWORD PTR ds:0xc0030ed8
c001a4d4:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a4d6:	01 c1                	add    ecx,eax
c001a4d8:	39 d9                	cmp    ecx,ebx
c001a4da:	7e 6c                	jle    c001a548 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a4dc:	51                   	push   ecx
c001a4dd:	89 d9                	mov    ecx,ebx
c001a4df:	29 c1                	sub    ecx,eax
c001a4e1:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a4e4:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001a4e8:	53                   	push   ebx
c001a4e9:	68 ec b9 02 c0       	push   0xc002b9ec
c001a4ee:	e8 9f 89 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001a4f3:	8b 87 3a 1b 00 00    	mov    eax,DWORD PTR [edi+0x1b3a]
c001a4f9:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a4fb:	a1 d8 0e 03 c0       	mov    eax,ds:0xc0030ed8
c001a500:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a503:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a507:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a50a:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a50d:	89 06                	mov    DWORD PTR [esi],eax
c001a50f:	eb 51                	jmp    c001a562 <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a511:	39 c3                	cmp    ebx,eax
c001a513:	7d 05                	jge    c001a51a <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a515:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a518:	eb 20                	jmp    c001a53a <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a51a:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a51c:	8d 14 07             	lea    edx,[edi+eax*1]
c001a51f:	39 da                	cmp    edx,ebx
c001a521:	7e 04                	jle    c001a527 <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a523:	29 c3                	sub    ebx,eax
c001a525:	eb 10                	jmp    c001a537 <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a527:	8b 0d d8 0e 03 c0    	mov    ecx,DWORD PTR ds:0xc0030ed8
c001a52d:	03 11                	add    edx,DWORD PTR [ecx]
c001a52f:	39 da                	cmp    edx,ebx
c001a531:	7e 15                	jle    c001a548 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a533:	29 c3                	sub    ebx,eax
c001a535:	29 fb                	sub    ebx,edi
c001a537:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a53a:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a53e:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a541:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a544:	89 06                	mov    DWORD PTR [esi],eax
c001a546:	eb 1d                	jmp    c001a565 <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a548:	83 ec 0c             	sub    esp,0xc
c001a54b:	68 00 ba 02 c0       	push   0xc002ba00
c001a550:	e8 18 00 00 00       	call   c001a56d <Krnl::panic(char const*)>
c001a555:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a55b:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a562:	83 c4 10             	add    esp,0x10
c001a565:	89 f0                	mov    eax,esi
c001a567:	5b                   	pop    ebx
c001a568:	5e                   	pop    esi
c001a569:	5f                   	pop    edi
c001a56a:	c2 04 00             	ret    0x4

c001a56d <Krnl::panic(char const*)>:
c001a56d:	55                   	push   ebp
c001a56e:	89 e5                	mov    ebp,esp
c001a570:	53                   	push   ebx
c001a571:	83 ec 0c             	sub    esp,0xc
c001a574:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a577:	fa                   	cli    
c001a578:	c6 05 e4 0e 03 c0 01 	mov    BYTE PTR ds:0xc0030ee4,0x1
c001a57f:	53                   	push   ebx
c001a580:	c6 05 c4 d2 02 c0 00 	mov    BYTE PTR ds:0xc002d2c4,0x0
c001a587:	68 1a ba 02 c0       	push   0xc002ba1a
c001a58c:	e8 01 89 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001a591:	58                   	pop    eax
c001a592:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a597:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a59d:	e8 4b 67 ff ff       	call   c0010ced <setActiveTerminal(VgaText*)>
c001a5a2:	83 c4 0c             	add    esp,0xc
c001a5a5:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a5aa:	6a 01                	push   0x1
c001a5ac:	6a 0f                	push   0xf
c001a5ae:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a5b4:	e8 65 61 ff ff       	call   c001071e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a5b9:	58                   	pop    eax
c001a5ba:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a5bf:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a5c5:	e8 c4 69 ff ff       	call   c0010f8e <VgaText::clearScreen()>
c001a5ca:	58                   	pop    eax
c001a5cb:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a5d0:	5a                   	pop    edx
c001a5d1:	68 33 ba 02 c0       	push   0xc002ba33
c001a5d6:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a5dc:	e8 2b 6b ff ff       	call   c001110c <VgaText::puts(char const*)>
c001a5e1:	59                   	pop    ecx
c001a5e2:	58                   	pop    eax
c001a5e3:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a5e8:	68 d8 ba 02 c0       	push   0xc002bad8
c001a5ed:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a5f3:	e8 14 6b ff ff       	call   c001110c <VgaText::puts(char const*)>
c001a5f8:	58                   	pop    eax
c001a5f9:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a5fe:	5a                   	pop    edx
c001a5ff:	68 4f ba 02 c0       	push   0xc002ba4f
c001a604:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a60a:	e8 fd 6a ff ff       	call   c001110c <VgaText::puts(char const*)>
c001a60f:	59                   	pop    ecx
c001a610:	58                   	pop    eax
c001a611:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a616:	53                   	push   ebx
c001a617:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a61d:	e8 ea 6a ff ff       	call   c001110c <VgaText::puts(char const*)>
c001a622:	58                   	pop    eax
c001a623:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a628:	5a                   	pop    edx
c001a629:	68 6f ba 02 c0       	push   0xc002ba6f
c001a62e:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a634:	e8 d3 6a ff ff       	call   c001110c <VgaText::puts(char const*)>
c001a639:	a1 e0 0e 03 c0       	mov    eax,ds:0xc0030ee0
c001a63e:	83 c4 10             	add    esp,0x10
c001a641:	85 c0                	test   eax,eax
c001a643:	74 02                	je     c001a647 <Krnl::panic(char const*)+0xda>
c001a645:	ff d0                	call   eax
c001a647:	83 ec 0c             	sub    esp,0xc
c001a64a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a64d:	e8 fd 2f 00 00       	call   c001d64f <Thr::getDriverNameFromAddress(unsigned long)>
c001a652:	83 c4 10             	add    esp,0x10
c001a655:	89 c3                	mov    ebx,eax
c001a657:	85 c0                	test   eax,eax
c001a659:	0f 84 50 02 00 00    	je     c001a8af <Krnl::panic(char const*)+0x342>
c001a65f:	83 ec 08             	sub    esp,0x8
c001a662:	8b 15 f4 18 03 c0    	mov    edx,DWORD PTR ds:0xc00318f4
c001a668:	68 14 bb 02 c0       	push   0xc002bb14
c001a66d:	ff b2 26 19 00 00    	push   DWORD PTR [edx+0x1926]
c001a673:	e8 94 6a ff ff       	call   c001110c <VgaText::puts(char const*)>
c001a678:	58                   	pop    eax
c001a679:	5a                   	pop    edx
c001a67a:	8b 15 f4 18 03 c0    	mov    edx,DWORD PTR ds:0xc00318f4
c001a680:	68 4f ba 02 c0       	push   0xc002ba4f
c001a685:	ff b2 26 19 00 00    	push   DWORD PTR [edx+0x1926]
c001a68b:	e8 7c 6a ff ff       	call   c001110c <VgaText::puts(char const*)>
c001a690:	59                   	pop    ecx
c001a691:	58                   	pop    eax
c001a692:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a697:	53                   	push   ebx
c001a698:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a69e:	e8 69 6a ff ff       	call   c001110c <VgaText::puts(char const*)>
c001a6a3:	83 c4 10             	add    esp,0x10
c001a6a6:	83 ec 08             	sub    esp,0x8
c001a6a9:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a6ae:	68 6e ba 02 c0       	push   0xc002ba6e
c001a6b3:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a6b9:	e8 4e 6a ff ff       	call   c001110c <VgaText::puts(char const*)>
c001a6be:	58                   	pop    eax
c001a6bf:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a6c4:	5a                   	pop    edx
c001a6c5:	68 6c bb 02 c0       	push   0xc002bb6c
c001a6ca:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a6d0:	e8 37 6a ff ff       	call   c001110c <VgaText::puts(char const*)>
c001a6d5:	59                   	pop    ecx
c001a6d6:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a6db:	5b                   	pop    ebx
c001a6dc:	68 ac bb 02 c0       	push   0xc002bbac
c001a6e1:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a6e7:	e8 20 6a ff ff       	call   c001110c <VgaText::puts(char const*)>
c001a6ec:	58                   	pop    eax
c001a6ed:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a6f2:	5a                   	pop    edx
c001a6f3:	68 5a ba 02 c0       	push   0xc002ba5a
c001a6f8:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a6fe:	e8 09 6a ff ff       	call   c001110c <VgaText::puts(char const*)>
c001a703:	59                   	pop    ecx
c001a704:	5b                   	pop    ebx
c001a705:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a708:	68 72 ba 02 c0       	push   0xc002ba72
c001a70d:	e8 80 87 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001a712:	58                   	pop    eax
c001a713:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a716:	5a                   	pop    edx
c001a717:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a71a:	68 7b ba 02 c0       	push   0xc002ba7b
c001a71f:	e8 6e 87 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001a724:	59                   	pop    ecx
c001a725:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a728:	5b                   	pop    ebx
c001a729:	8b 00                	mov    eax,DWORD PTR [eax]
c001a72b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a72e:	68 84 ba 02 c0       	push   0xc002ba84
c001a733:	e8 5a 87 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001a738:	58                   	pop    eax
c001a739:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a73e:	5a                   	pop    edx
c001a73f:	68 f0 bb 02 c0       	push   0xc002bbf0
c001a744:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a74a:	e8 bd 69 ff ff       	call   c001110c <VgaText::puts(char const*)>
c001a74f:	59                   	pop    ecx
c001a750:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a755:	5b                   	pop    ebx
c001a756:	68 8d ba 02 c0       	push   0xc002ba8d
c001a75b:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a761:	e8 a6 69 ff ff       	call   c001110c <VgaText::puts(char const*)>
c001a766:	0f 20 c0             	mov    eax,cr0
c001a769:	5a                   	pop    edx
c001a76a:	59                   	pop    ecx
c001a76b:	50                   	push   eax
c001a76c:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a771:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a777:	e8 b6 69 ff ff       	call   c0011132 <VgaText::putx(unsigned int)>
c001a77c:	5b                   	pop    ebx
c001a77d:	58                   	pop    eax
c001a77e:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a783:	68 97 ba 02 c0       	push   0xc002ba97
c001a788:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a78e:	e8 79 69 ff ff       	call   c001110c <VgaText::puts(char const*)>
c001a793:	0f 20 d0             	mov    eax,cr2
c001a796:	5a                   	pop    edx
c001a797:	59                   	pop    ecx
c001a798:	50                   	push   eax
c001a799:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a79e:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a7a4:	e8 89 69 ff ff       	call   c0011132 <VgaText::putx(unsigned int)>
c001a7a9:	5b                   	pop    ebx
c001a7aa:	58                   	pop    eax
c001a7ab:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a7b0:	68 a1 ba 02 c0       	push   0xc002baa1
c001a7b5:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a7bb:	e8 4c 69 ff ff       	call   c001110c <VgaText::puts(char const*)>
c001a7c0:	0f 20 d8             	mov    eax,cr3
c001a7c3:	5a                   	pop    edx
c001a7c4:	59                   	pop    ecx
c001a7c5:	50                   	push   eax
c001a7c6:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a7cb:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a7d1:	e8 5c 69 ff ff       	call   c0011132 <VgaText::putx(unsigned int)>
c001a7d6:	5b                   	pop    ebx
c001a7d7:	58                   	pop    eax
c001a7d8:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a7dd:	68 b4 ba 02 c0       	push   0xc002bab4
c001a7e2:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a7e8:	e8 1f 69 ff ff       	call   c001110c <VgaText::puts(char const*)>
c001a7ed:	0f 20 e0             	mov    eax,cr4
c001a7f0:	5a                   	pop    edx
c001a7f1:	59                   	pop    ecx
c001a7f2:	50                   	push   eax
c001a7f3:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a7f8:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a7fe:	e8 2f 69 ff ff       	call   c0011132 <VgaText::putx(unsigned int)>
c001a803:	5b                   	pop    ebx
c001a804:	58                   	pop    eax
c001a805:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a80a:	68 be ba 02 c0       	push   0xc002babe
c001a80f:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a815:	e8 f2 68 ff ff       	call   c001110c <VgaText::puts(char const*)>
c001a81a:	5a                   	pop    edx
c001a81b:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a820:	59                   	pop    ecx
c001a821:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c001a827:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a82a:	50                   	push   eax
c001a82b:	e8 02 69 ff ff       	call   c0011132 <VgaText::putx(unsigned int)>
c001a830:	5b                   	pop    ebx
c001a831:	58                   	pop    eax
c001a832:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a837:	68 d5 ba 02 c0       	push   0xc002bad5
c001a83c:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a842:	e8 c5 68 ff ff       	call   c001110c <VgaText::puts(char const*)>
c001a847:	5a                   	pop    edx
c001a848:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a84d:	59                   	pop    ecx
c001a84e:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c001a854:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a857:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a85a:	50                   	push   eax
c001a85b:	e8 d2 68 ff ff       	call   c0011132 <VgaText::putx(unsigned int)>
c001a860:	5b                   	pop    ebx
c001a861:	58                   	pop    eax
c001a862:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a867:	68 d5 ba 02 c0       	push   0xc002bad5
c001a86c:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a872:	e8 95 68 ff ff       	call   c001110c <VgaText::puts(char const*)>
c001a877:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a87c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a87f:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c001a885:	8b 12                	mov    edx,DWORD PTR [edx]
c001a887:	59                   	pop    ecx
c001a888:	5b                   	pop    ebx
c001a889:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a88c:	50                   	push   eax
c001a88d:	e8 a0 68 ff ff       	call   c0011132 <VgaText::putx(unsigned int)>
c001a892:	83 c4 10             	add    esp,0x10
c001a895:	b2 fe                	mov    dl,0xfe
c001a897:	e4 60                	in     al,0x60
c001a899:	3c 1c                	cmp    al,0x1c
c001a89b:	74 04                	je     c001a8a1 <Krnl::panic(char const*)+0x334>
c001a89d:	3c 5a                	cmp    al,0x5a
c001a89f:	75 f6                	jne    c001a897 <Krnl::panic(char const*)+0x32a>
c001a8a1:	e4 64                	in     al,0x64
c001a8a3:	a8 02                	test   al,0x2
c001a8a5:	75 fa                	jne    c001a8a1 <Krnl::panic(char const*)+0x334>
c001a8a7:	88 d0                	mov    al,dl
c001a8a9:	e6 64                	out    0x64,al
c001a8ab:	fa                   	cli    
c001a8ac:	f4                   	hlt    
c001a8ad:	eb e8                	jmp    c001a897 <Krnl::panic(char const*)+0x32a>
c001a8af:	50                   	push   eax
c001a8b0:	50                   	push   eax
c001a8b1:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a8b6:	68 40 bb 02 c0       	push   0xc002bb40
c001a8bb:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a8c1:	e8 46 68 ff ff       	call   c001110c <VgaText::puts(char const*)>
c001a8c6:	58                   	pop    eax
c001a8c7:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a8cc:	5a                   	pop    edx
c001a8cd:	68 4f ba 02 c0       	push   0xc002ba4f
c001a8d2:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a8d8:	e8 2f 68 ff ff       	call   c001110c <VgaText::puts(char const*)>
c001a8dd:	59                   	pop    ecx
c001a8de:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a8e3:	5b                   	pop    ebx
c001a8e4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a8e7:	83 c0 0c             	add    eax,0xc
c001a8ea:	50                   	push   eax
c001a8eb:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001a8f0:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a8f6:	e8 11 68 ff ff       	call   c001110c <VgaText::puts(char const*)>
c001a8fb:	83 c4 10             	add    esp,0x10
c001a8fe:	e9 a3 fd ff ff       	jmp    c001a6a6 <Krnl::panic(char const*)+0x139>

c001a903 <Net::switchEndian16(unsigned short)>:
c001a903:	83 ec 04             	sub    esp,0x4
c001a906:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a90a:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a90e:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a912:	c1 f8 08             	sar    eax,0x8
c001a915:	89 c2                	mov    edx,eax
c001a917:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a91b:	c1 e0 08             	shl    eax,0x8
c001a91e:	09 d0                	or     eax,edx
c001a920:	83 c4 04             	add    esp,0x4
c001a923:	c3                   	ret    

c001a924 <Net::switchEndian32(unsigned int)>:
c001a924:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a928:	c1 e8 18             	shr    eax,0x18
c001a92b:	89 c2                	mov    edx,eax
c001a92d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a931:	c1 e0 08             	shl    eax,0x8
c001a934:	25 00 00 ff 00       	and    eax,0xff0000
c001a939:	09 c2                	or     edx,eax
c001a93b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a93f:	c1 e8 08             	shr    eax,0x8
c001a942:	25 00 ff 00 00       	and    eax,0xff00
c001a947:	09 c2                	or     edx,eax
c001a949:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a94d:	c1 e0 18             	shl    eax,0x18
c001a950:	09 d0                	or     eax,edx
c001a952:	c3                   	ret    

c001a953 <Net::crc32Calc(unsigned char*, int)>:
c001a953:	83 ec 10             	sub    esp,0x10
c001a956:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a95b:	75 07                	jne    c001a964 <Net::crc32Calc(unsigned char*, int)+0x11>
c001a95d:	b8 00 00 00 00       	mov    eax,0x0
c001a962:	eb 7c                	jmp    c001a9e0 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a964:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a969:	7f 07                	jg     c001a972 <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a96b:	b8 00 00 00 00       	mov    eax,0x0
c001a970:	eb 6e                	jmp    c001a9e0 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a972:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a97a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a982:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a986:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a98a:	7d 4e                	jge    c001a9da <Net::crc32Calc(unsigned char*, int)+0x87>
c001a98c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a990:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a994:	01 d0                	add    eax,edx
c001a996:	8a 00                	mov    al,BYTE PTR [eax]
c001a998:	0f b6 c0             	movzx  eax,al
c001a99b:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001a99f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a9a7:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001a9ac:	7f 26                	jg     c001a9d4 <Net::crc32Calc(unsigned char*, int)+0x81>
c001a9ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9b2:	83 e0 01             	and    eax,0x1
c001a9b5:	74 0d                	je     c001a9c4 <Net::crc32Calc(unsigned char*, int)+0x71>
c001a9b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9bb:	d1 e8                	shr    eax,1
c001a9bd:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001a9c2:	eb 06                	jmp    c001a9ca <Net::crc32Calc(unsigned char*, int)+0x77>
c001a9c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9c8:	d1 e8                	shr    eax,1
c001a9ca:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a9ce:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a9d2:	eb d3                	jmp    c001a9a7 <Net::crc32Calc(unsigned char*, int)+0x54>
c001a9d4:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001a9d8:	eb a8                	jmp    c001a982 <Net::crc32Calc(unsigned char*, int)+0x2f>
c001a9da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9de:	f7 d0                	not    eax
c001a9e0:	83 c4 10             	add    esp,0x10
c001a9e3:	c3                   	ret    

c001a9e4 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001a9e4:	83 ec 1c             	sub    esp,0x1c
c001a9e7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a9eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a9ef:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a9f7:	83 7c 24 0c 06       	cmp    DWORD PTR [esp+0xc],0x6
c001a9fc:	7f 14                	jg     c001aa12 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c001a9fe:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa02:	8d 50 01             	lea    edx,[eax+0x1]
c001aa05:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aa09:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001aa0c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001aa10:	eb e5                	jmp    c001a9f7 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c001aa12:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa16:	8d 50 01             	lea    edx,[eax+0x1]
c001aa19:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aa1d:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001aa20:	83 ec 04             	sub    esp,0x4
c001aa23:	6a 06                	push   0x6
c001aa25:	8d 44 24 36          	lea    eax,[esp+0x36]
c001aa29:	50                   	push   eax
c001aa2a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001aa2e:	e8 11 5d fe ff       	call   c0000744 <memcpy>
c001aa33:	83 c4 10             	add    esp,0x10
c001aa36:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001aa3b:	83 ec 04             	sub    esp,0x4
c001aa3e:	6a 06                	push   0x6
c001aa40:	8d 44 24 30          	lea    eax,[esp+0x30]
c001aa44:	50                   	push   eax
c001aa45:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001aa49:	e8 f6 5c fe ff       	call   c0000744 <memcpy>
c001aa4e:	83 c4 10             	add    esp,0x10
c001aa51:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001aa56:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aa5a:	0f b7 c0             	movzx  eax,ax
c001aa5d:	c1 f8 08             	sar    eax,0x8
c001aa60:	89 c1                	mov    ecx,eax
c001aa62:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa66:	8d 50 01             	lea    edx,[eax+0x1]
c001aa69:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aa6d:	88 ca                	mov    dl,cl
c001aa6f:	88 10                	mov    BYTE PTR [eax],dl
c001aa71:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001aa75:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa79:	8d 48 01             	lea    ecx,[eax+0x1]
c001aa7c:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001aa80:	88 10                	mov    BYTE PTR [eax],dl
c001aa82:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001aa86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aa8a:	83 ec 04             	sub    esp,0x4
c001aa8d:	52                   	push   edx
c001aa8e:	50                   	push   eax
c001aa8f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001aa93:	e8 ac 5c fe ff       	call   c0000744 <memcpy>
c001aa98:	83 c4 10             	add    esp,0x10
c001aa9b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001aa9f:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c001aaa3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aaa7:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c001aaab:	83 ec 08             	sub    esp,0x8
c001aaae:	50                   	push   eax
c001aaaf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001aab3:	e8 9b fe ff ff       	call   c001a953 <Net::crc32Calc(unsigned char*, int)>
c001aab8:	83 c4 10             	add    esp,0x10
c001aabb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001aabf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aac3:	c1 e8 18             	shr    eax,0x18
c001aac6:	89 c1                	mov    ecx,eax
c001aac8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aacc:	8d 50 01             	lea    edx,[eax+0x1]
c001aacf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aad3:	88 ca                	mov    dl,cl
c001aad5:	88 10                	mov    BYTE PTR [eax],dl
c001aad7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aadb:	c1 e8 10             	shr    eax,0x10
c001aade:	89 c1                	mov    ecx,eax
c001aae0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aae4:	8d 50 01             	lea    edx,[eax+0x1]
c001aae7:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aaeb:	88 ca                	mov    dl,cl
c001aaed:	88 10                	mov    BYTE PTR [eax],dl
c001aaef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aaf3:	c1 e8 08             	shr    eax,0x8
c001aaf6:	89 c1                	mov    ecx,eax
c001aaf8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aafc:	8d 50 01             	lea    edx,[eax+0x1]
c001aaff:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab03:	88 ca                	mov    dl,cl
c001ab05:	88 10                	mov    BYTE PTR [eax],dl
c001ab07:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab0b:	8d 50 01             	lea    edx,[eax+0x1]
c001ab0e:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab12:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ab16:	88 10                	mov    BYTE PTR [eax],dl
c001ab18:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ab1c:	83 c4 1c             	add    esp,0x1c
c001ab1f:	c3                   	ret    

c001ab20 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001ab20:	83 ec 2c             	sub    esp,0x2c
c001ab23:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ab27:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ab2b:	83 44 24 34 08       	add    DWORD PTR [esp+0x34],0x8
c001ab30:	83 ec 04             	sub    esp,0x4
c001ab33:	6a 06                	push   0x6
c001ab35:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ab39:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ab3d:	83 c0 0e             	add    eax,0xe
c001ab40:	50                   	push   eax
c001ab41:	e8 fe 5b fe ff       	call   c0000744 <memcpy>
c001ab46:	83 c4 10             	add    esp,0x10
c001ab49:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001ab4e:	83 ec 04             	sub    esp,0x4
c001ab51:	6a 06                	push   0x6
c001ab53:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ab57:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ab5b:	83 c0 08             	add    eax,0x8
c001ab5e:	50                   	push   eax
c001ab5f:	e8 e0 5b fe ff       	call   c0000744 <memcpy>
c001ab64:	83 c4 10             	add    esp,0x10
c001ab67:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001ab6c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ab70:	8d 50 01             	lea    edx,[eax+0x1]
c001ab73:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ab77:	8a 00                	mov    al,BYTE PTR [eax]
c001ab79:	0f b6 c0             	movzx  eax,al
c001ab7c:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001ab81:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ab85:	8d 50 01             	lea    edx,[eax+0x1]
c001ab88:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ab8c:	8a 00                	mov    al,BYTE PTR [eax]
c001ab8e:	0f b6 c0             	movzx  eax,al
c001ab91:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c001ab96:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c001ab9b:	c1 e0 08             	shl    eax,0x8
c001ab9e:	89 c2                	mov    edx,eax
c001aba0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001aba4:	09 d0                	or     eax,edx
c001aba6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001abaa:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001abae:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
c001abb3:	75 3a                	jne    c001abef <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001abb5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001abb9:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001abbc:	66 3d dc 05          	cmp    ax,0x5dc
c001abc0:	77 10                	ja     c001abd2 <Net::unwrapEthernetFrame(unsigned char*, int)+0xb2>
c001abc2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001abc6:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001abc9:	0f b7 c0             	movzx  eax,ax
c001abcc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001abd0:	eb 1d                	jmp    c001abef <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001abd2:	83 ec 0c             	sub    esp,0xc
c001abd5:	68 18 bc 02 c0       	push   0xc002bc18
c001abda:	e8 b3 82 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001abdf:	83 c4 10             	add    esp,0x10
c001abe2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001abe6:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001abea:	e9 c0 00 00 00       	jmp    c001acaf <Net::unwrapEthernetFrame(unsigned char*, int)+0x18f>
c001abef:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001abf3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001abf7:	8b 00                	mov    eax,DWORD PTR [eax]
c001abf9:	83 ec 04             	sub    esp,0x4
c001abfc:	52                   	push   edx
c001abfd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ac01:	50                   	push   eax
c001ac02:	e8 3d 5b fe ff       	call   c0000744 <memcpy>
c001ac07:	83 c4 10             	add    esp,0x10
c001ac0a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ac0e:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001ac12:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac16:	8d 50 01             	lea    edx,[eax+0x1]
c001ac19:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ac1d:	8a 00                	mov    al,BYTE PTR [eax]
c001ac1f:	0f b6 c0             	movzx  eax,al
c001ac22:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ac26:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac2a:	8d 50 01             	lea    edx,[eax+0x1]
c001ac2d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ac31:	8a 00                	mov    al,BYTE PTR [eax]
c001ac33:	0f b6 c0             	movzx  eax,al
c001ac36:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ac3a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac3e:	8d 50 01             	lea    edx,[eax+0x1]
c001ac41:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ac45:	8a 00                	mov    al,BYTE PTR [eax]
c001ac47:	0f b6 c0             	movzx  eax,al
c001ac4a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ac4e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac52:	8d 50 01             	lea    edx,[eax+0x1]
c001ac55:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ac59:	8a 00                	mov    al,BYTE PTR [eax]
c001ac5b:	0f b6 c0             	movzx  eax,al
c001ac5e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ac62:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ac66:	c1 e0 18             	shl    eax,0x18
c001ac69:	89 c2                	mov    edx,eax
c001ac6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac6f:	c1 e0 10             	shl    eax,0x10
c001ac72:	09 c2                	or     edx,eax
c001ac74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ac78:	c1 e0 08             	shl    eax,0x8
c001ac7b:	09 d0                	or     eax,edx
c001ac7d:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c001ac81:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ac85:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac89:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c001ac8d:	83 e8 04             	sub    eax,0x4
c001ac90:	83 ec 08             	sub    esp,0x8
c001ac93:	50                   	push   eax
c001ac94:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001ac98:	e8 b6 fc ff ff       	call   c001a953 <Net::crc32Calc(unsigned char*, int)>
c001ac9d:	83 c4 10             	add    esp,0x10
c001aca0:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001aca4:	0f 94 c2             	sete   dl
c001aca7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001acab:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001acae:	90                   	nop
c001acaf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001acb3:	83 c4 2c             	add    esp,0x2c
c001acb6:	c2 04 00             	ret    0x4

c001acb9 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001acb9:	55                   	push   ebp
c001acba:	57                   	push   edi
c001acbb:	56                   	push   esi
c001acbc:	53                   	push   ebx
c001acbd:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001acc3:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001acca:	8a 1e                	mov    bl,BYTE PTR [esi]
c001accc:	8d 6e 01             	lea    ebp,[esi+0x1]
c001accf:	80 fb 40             	cmp    bl,0x40
c001acd2:	75 1b                	jne    c001acef <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001acd4:	8a 16                	mov    dl,BYTE PTR [esi]
c001acd6:	84 d2                	test   dl,dl
c001acd8:	0f 84 f1 00 00 00    	je     c001adcf <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001acde:	8d 46 01             	lea    eax,[esi+0x1]
c001ace1:	80 fa 3a             	cmp    dl,0x3a
c001ace4:	74 04                	je     c001acea <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001ace6:	89 c6                	mov    esi,eax
c001ace8:	eb ea                	jmp    c001acd4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001acea:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001aced:	89 c6                	mov    esi,eax
c001acef:	50                   	push   eax
c001acf0:	6a 40                	push   0x40
c001acf2:	6a 00                	push   0x0
c001acf4:	8d 44 24 24          	lea    eax,[esp+0x24]
c001acf8:	50                   	push   eax
c001acf9:	e8 7a 5a fe ff       	call   c0000778 <memset>
c001acfe:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001ad05:	31 c0                	xor    eax,eax
c001ad07:	83 c4 10             	add    esp,0x10
c001ad0a:	8a 0f                	mov    cl,BYTE PTR [edi]
c001ad0c:	84 c9                	test   cl,cl
c001ad0e:	0f 84 bb 00 00 00    	je     c001adcf <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ad14:	3d c7 00 00 00       	cmp    eax,0xc7
c001ad19:	0f 8f b0 00 00 00    	jg     c001adcf <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ad1f:	80 f9 0a             	cmp    cl,0xa
c001ad22:	0f 85 98 00 00 00    	jne    c001adc0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001ad28:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001ad2d:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001ad31:	a8 df                	test   al,0xdf
c001ad33:	0f 94 c1             	sete   cl
c001ad36:	3c 23                	cmp    al,0x23
c001ad38:	0f 94 c2             	sete   dl
c001ad3b:	08 d1                	or     cl,dl
c001ad3d:	75 4a                	jne    c001ad89 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ad3f:	8d 50 f7             	lea    edx,[eax-0x9]
c001ad42:	80 fa 01             	cmp    dl,0x1
c001ad45:	76 42                	jbe    c001ad89 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ad47:	3c 5b                	cmp    al,0x5b
c001ad49:	75 42                	jne    c001ad8d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001ad4b:	80 fb 40             	cmp    bl,0x40
c001ad4e:	75 39                	jne    c001ad89 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ad50:	83 ec 0c             	sub    esp,0xc
c001ad53:	8d 54 24 65          	lea    edx,[esp+0x65]
c001ad57:	52                   	push   edx
c001ad58:	e8 37 5a fe ff       	call   c0000794 <strlen>
c001ad5d:	83 c4 10             	add    esp,0x10
c001ad60:	83 f8 3f             	cmp    eax,0x3f
c001ad63:	77 6a                	ja     c001adcf <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ad65:	50                   	push   eax
c001ad66:	50                   	push   eax
c001ad67:	8d 54 24 61          	lea    edx,[esp+0x61]
c001ad6b:	52                   	push   edx
c001ad6c:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ad70:	52                   	push   edx
c001ad71:	e8 be 5a fe ff       	call   c0000834 <strcpy>
c001ad76:	58                   	pop    eax
c001ad77:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ad7b:	52                   	push   edx
c001ad7c:	e8 13 5a fe ff       	call   c0000794 <strlen>
c001ad81:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001ad86:	83 c4 10             	add    esp,0x10
c001ad89:	31 d2                	xor    edx,edx
c001ad8b:	eb 3a                	jmp    c001adc7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001ad8d:	80 fb 40             	cmp    bl,0x40
c001ad90:	74 06                	je     c001ad98 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001ad92:	8d 44 24 58          	lea    eax,[esp+0x58]
c001ad96:	eb 20                	jmp    c001adb8 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001ad98:	50                   	push   eax
c001ad99:	50                   	push   eax
c001ad9a:	55                   	push   ebp
c001ad9b:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ad9f:	50                   	push   eax
c001ada0:	e8 1b 5b fe ff       	call   c00008c0 <strcmp>
c001ada5:	83 c4 10             	add    esp,0x10
c001ada8:	85 c0                	test   eax,eax
c001adaa:	75 dd                	jne    c001ad89 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001adac:	eb e4                	jmp    c001ad92 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001adae:	8d 50 01             	lea    edx,[eax+0x1]
c001adb1:	80 f9 3d             	cmp    cl,0x3d
c001adb4:	74 1d                	je     c001add3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001adb6:	89 d0                	mov    eax,edx
c001adb8:	8a 08                	mov    cl,BYTE PTR [eax]
c001adba:	84 c9                	test   cl,cl
c001adbc:	75 f0                	jne    c001adae <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001adbe:	eb 0f                	jmp    c001adcf <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001adc0:	8d 50 01             	lea    edx,[eax+0x1]
c001adc3:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001adc7:	47                   	inc    edi
c001adc8:	89 d0                	mov    eax,edx
c001adca:	e9 3b ff ff ff       	jmp    c001ad0a <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001adcf:	31 c0                	xor    eax,eax
c001add1:	eb 33                	jmp    c001ae06 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001add3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001add7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001adda:	50                   	push   eax
c001addb:	50                   	push   eax
c001addc:	8d 44 24 60          	lea    eax,[esp+0x60]
c001ade0:	50                   	push   eax
c001ade1:	56                   	push   esi
c001ade2:	e8 d9 5a fe ff       	call   c00008c0 <strcmp>
c001ade7:	83 c4 10             	add    esp,0x10
c001adea:	85 c0                	test   eax,eax
c001adec:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001adf0:	75 97                	jne    c001ad89 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001adf2:	51                   	push   ecx
c001adf3:	51                   	push   ecx
c001adf4:	52                   	push   edx
c001adf5:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001adfc:	e8 33 5a fe ff       	call   c0000834 <strcpy>
c001ae01:	83 c4 10             	add    esp,0x10
c001ae04:	b0 01                	mov    al,0x1
c001ae06:	81 c4 2c 01 00 00    	add    esp,0x12c
c001ae0c:	5b                   	pop    ebx
c001ae0d:	5e                   	pop    esi
c001ae0e:	5f                   	pop    edi
c001ae0f:	5d                   	pop    ebp
c001ae10:	c3                   	ret    

c001ae11 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001ae11:	57                   	push   edi
c001ae12:	56                   	push   esi
c001ae13:	53                   	push   ebx
c001ae14:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ae1a:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001ae21:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001ae28:	53                   	push   ebx
c001ae29:	e8 66 59 fe ff       	call   c0000794 <strlen>
c001ae2e:	89 34 24             	mov    DWORD PTR [esp],esi
c001ae31:	89 c7                	mov    edi,eax
c001ae33:	e8 5c 59 fe ff       	call   c0000794 <strlen>
c001ae38:	83 c4 10             	add    esp,0x10
c001ae3b:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001ae3f:	3d ff 00 00 00       	cmp    eax,0xff
c001ae44:	0f 87 d3 00 00 00    	ja     c001af1d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001ae4a:	57                   	push   edi
c001ae4b:	57                   	push   edi
c001ae4c:	56                   	push   esi
c001ae4d:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001ae51:	56                   	push   esi
c001ae52:	e8 dd 59 fe ff       	call   c0000834 <strcpy>
c001ae57:	58                   	pop    eax
c001ae58:	5a                   	pop    edx
c001ae59:	68 78 c1 02 c0       	push   0xc002c178
c001ae5e:	56                   	push   esi
c001ae5f:	e8 10 5b fe ff       	call   c0000974 <strcat>
c001ae64:	59                   	pop    ecx
c001ae65:	5f                   	pop    edi
c001ae66:	53                   	push   ebx
c001ae67:	56                   	push   esi
c001ae68:	e8 07 5b fe ff       	call   c0000974 <strcat>
c001ae6d:	58                   	pop    eax
c001ae6e:	5a                   	pop    edx
c001ae6f:	68 64 bc 02 c0       	push   0xc002bc64
c001ae74:	56                   	push   esi
c001ae75:	e8 fa 5a fe ff       	call   c0000974 <strcat>
c001ae7a:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ae81:	e8 ba 49 ff ff       	call   c000f840 <malloc>
c001ae86:	83 c4 0c             	add    esp,0xc
c001ae89:	89 c3                	mov    ebx,eax
c001ae8b:	ff 35 f4 18 03 c0    	push   DWORD PTR ds:0xc00318f4
c001ae91:	56                   	push   esi
c001ae92:	50                   	push   eax
c001ae93:	e8 52 85 ff ff       	call   c00133ea <File::File(char const*, Process*)>
c001ae98:	83 c4 10             	add    esp,0x10
c001ae9b:	85 db                	test   ebx,ebx
c001ae9d:	74 7e                	je     c001af1d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001ae9f:	51                   	push   ecx
c001aea0:	51                   	push   ecx
c001aea1:	6a 01                	push   0x1
c001aea3:	53                   	push   ebx
c001aea4:	e8 a5 85 ff ff       	call   c001344e <File::open(FileOpenMode)>
c001aea9:	83 c4 10             	add    esp,0x10
c001aeac:	85 c0                	test   eax,eax
c001aeae:	74 08                	je     c001aeb8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001aeb0:	83 ec 0c             	sub    esp,0xc
c001aeb3:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aeb5:	53                   	push   ebx
c001aeb6:	eb 5f                	jmp    c001af17 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001aeb8:	52                   	push   edx
c001aeb9:	8d 44 24 17          	lea    eax,[esp+0x17]
c001aebd:	50                   	push   eax
c001aebe:	8d 44 24 20          	lea    eax,[esp+0x20]
c001aec2:	50                   	push   eax
c001aec3:	53                   	push   ebx
c001aec4:	e8 31 88 ff ff       	call   c00136fa <File::stat(unsigned long long*, bool*)>
c001aec9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001aecd:	83 c4 10             	add    esp,0x10
c001aed0:	89 c1                	mov    ecx,eax
c001aed2:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001aed6:	74 31                	je     c001af09 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001aed8:	83 ec 0c             	sub    esp,0xc
c001aedb:	50                   	push   eax
c001aedc:	e8 5f 49 ff ff       	call   c000f840 <malloc>
c001aee1:	89 c6                	mov    esi,eax
c001aee3:	58                   	pop    eax
c001aee4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aee6:	8d 54 24 20          	lea    edx,[esp+0x20]
c001aeea:	52                   	push   edx
c001aeeb:	56                   	push   esi
c001aeec:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001aef0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001aef4:	53                   	push   ebx
c001aef5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001aef8:	83 c4 20             	add    esp,0x20
c001aefb:	85 c0                	test   eax,eax
c001aefd:	75 0a                	jne    c001af09 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001aeff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001af03:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001af07:	74 18                	je     c001af21 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001af09:	83 ec 0c             	sub    esp,0xc
c001af0c:	53                   	push   ebx
c001af0d:	e8 9a 85 ff ff       	call   c00134ac <File::close()>
c001af12:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af14:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001af17:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001af1a:	83 c4 10             	add    esp,0x10
c001af1d:	31 c0                	xor    eax,eax
c001af1f:	eb 3b                	jmp    c001af5c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001af21:	83 ec 0c             	sub    esp,0xc
c001af24:	53                   	push   ebx
c001af25:	e8 82 85 ff ff       	call   c00134ac <File::close()>
c001af2a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af2c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001af2f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001af32:	83 c4 0c             	add    esp,0xc
c001af35:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001af3c:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001af43:	56                   	push   esi
c001af44:	e8 70 fd ff ff       	call   c001acb9 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001af49:	89 34 24             	mov    DWORD PTR [esp],esi
c001af4c:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001af50:	e8 fb 48 ff ff       	call   c000f850 <free>
c001af55:	83 c4 10             	add    esp,0x10
c001af58:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001af5c:	81 c4 20 01 00 00    	add    esp,0x120
c001af62:	5b                   	pop    ebx
c001af63:	5e                   	pop    esi
c001af64:	5f                   	pop    edi
c001af65:	c3                   	ret    

c001af66 <Reg::getLine(char*, char*, char*)>:
c001af66:	57                   	push   edi
c001af67:	56                   	push   esi
c001af68:	53                   	push   ebx
c001af69:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001af6d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001af71:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001af75:	57                   	push   edi
c001af76:	56                   	push   esi
c001af77:	53                   	push   ebx
c001af78:	68 69 bc 02 c0       	push   0xc002bc69
c001af7d:	e8 8f fe ff ff       	call   c001ae11 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001af82:	83 c4 10             	add    esp,0x10
c001af85:	84 c0                	test   al,al
c001af87:	75 10                	jne    c001af99 <Reg::getLine(char*, char*, char*)+0x33>
c001af89:	57                   	push   edi
c001af8a:	56                   	push   esi
c001af8b:	53                   	push   ebx
c001af8c:	68 8e bc 02 c0       	push   0xc002bc8e
c001af91:	e8 7b fe ff ff       	call   c001ae11 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001af96:	83 c4 10             	add    esp,0x10
c001af99:	5b                   	pop    ebx
c001af9a:	5e                   	pop    esi
c001af9b:	5f                   	pop    edi
c001af9c:	c3                   	ret    

c001af9d <Reg::readInt(char*, char*, int*)>:
c001af9d:	55                   	push   ebp
c001af9e:	57                   	push   edi
c001af9f:	56                   	push   esi
c001afa0:	53                   	push   ebx
c001afa1:	81 ec f0 00 00 00    	sub    esp,0xf0
c001afa7:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001afab:	57                   	push   edi
c001afac:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001afb3:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001afba:	e8 a7 ff ff ff       	call   c001af66 <Reg::getLine(char*, char*, char*)>
c001afbf:	83 c4 10             	add    esp,0x10
c001afc2:	84 c0                	test   al,al
c001afc4:	0f 84 b3 00 00 00    	je     c001b07d <Reg::readInt(char*, char*, int*)+0xe0>
c001afca:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001afce:	80 fa 2b             	cmp    dl,0x2b
c001afd1:	74 0c                	je     c001afdf <Reg::readInt(char*, char*, int*)+0x42>
c001afd3:	80 fa 2d             	cmp    dl,0x2d
c001afd6:	75 0e                	jne    c001afe6 <Reg::readInt(char*, char*, int*)+0x49>
c001afd8:	ba 01 00 00 00       	mov    edx,0x1
c001afdd:	eb 0b                	jmp    c001afea <Reg::readInt(char*, char*, int*)+0x4d>
c001afdf:	ba 01 00 00 00       	mov    edx,0x1
c001afe4:	eb 02                	jmp    c001afe8 <Reg::readInt(char*, char*, int*)+0x4b>
c001afe6:	31 d2                	xor    edx,edx
c001afe8:	31 c0                	xor    eax,eax
c001afea:	be 0a 00 00 00       	mov    esi,0xa
c001afef:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001aff4:	75 20                	jne    c001b016 <Reg::readInt(char*, char*, int*)+0x79>
c001aff6:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001affa:	80 f9 78             	cmp    cl,0x78
c001affd:	75 0a                	jne    c001b009 <Reg::readInt(char*, char*, int*)+0x6c>
c001afff:	83 c2 02             	add    edx,0x2
c001b002:	be 10 00 00 00       	mov    esi,0x10
c001b007:	eb 0d                	jmp    c001b016 <Reg::readInt(char*, char*, int*)+0x79>
c001b009:	80 f9 62             	cmp    cl,0x62
c001b00c:	75 08                	jne    c001b016 <Reg::readInt(char*, char*, int*)+0x79>
c001b00e:	83 c2 02             	add    edx,0x2
c001b011:	be 02 00 00 00       	mov    esi,0x2
c001b016:	01 d7                	add    edi,edx
c001b018:	31 d2                	xor    edx,edx
c001b01a:	8a 1f                	mov    bl,BYTE PTR [edi]
c001b01c:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001b020:	80 fb 0d             	cmp    bl,0xd
c001b023:	0f 94 c3             	sete   bl
c001b026:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001b02b:	0f 94 c1             	sete   cl
c001b02e:	08 cb                	or     bl,cl
c001b030:	75 3a                	jne    c001b06c <Reg::readInt(char*, char*, int*)+0xcf>
c001b032:	0f af d6             	imul   edx,esi
c001b035:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001b03a:	83 fe 10             	cmp    esi,0x10
c001b03d:	75 26                	jne    c001b065 <Reg::readInt(char*, char*, int*)+0xc8>
c001b03f:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b043:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001b046:	89 e9                	mov    ecx,ebp
c001b048:	80 f9 05             	cmp    cl,0x5
c001b04b:	77 06                	ja     c001b053 <Reg::readInt(char*, char*, int*)+0xb6>
c001b04d:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001b051:	eb 16                	jmp    c001b069 <Reg::readInt(char*, char*, int*)+0xcc>
c001b053:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b057:	83 e9 61             	sub    ecx,0x61
c001b05a:	80 f9 05             	cmp    cl,0x5
c001b05d:	77 06                	ja     c001b065 <Reg::readInt(char*, char*, int*)+0xc8>
c001b05f:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001b063:	eb 04                	jmp    c001b069 <Reg::readInt(char*, char*, int*)+0xcc>
c001b065:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001b069:	47                   	inc    edi
c001b06a:	eb ae                	jmp    c001b01a <Reg::readInt(char*, char*, int*)+0x7d>
c001b06c:	84 c0                	test   al,al
c001b06e:	74 02                	je     c001b072 <Reg::readInt(char*, char*, int*)+0xd5>
c001b070:	f7 da                	neg    edx
c001b072:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001b079:	89 10                	mov    DWORD PTR [eax],edx
c001b07b:	88 d8                	mov    al,bl
c001b07d:	81 c4 ec 00 00 00    	add    esp,0xec
c001b083:	5b                   	pop    ebx
c001b084:	5e                   	pop    esi
c001b085:	5f                   	pop    edi
c001b086:	5d                   	pop    ebp
c001b087:	c3                   	ret    

c001b088 <Reg::readString(char*, char*, char*, int)>:
c001b088:	57                   	push   edi
c001b089:	56                   	push   esi
c001b08a:	53                   	push   ebx
c001b08b:	81 ec d4 00 00 00    	sub    esp,0xd4
c001b091:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001b098:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001b09c:	57                   	push   edi
c001b09d:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b0a4:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b0ab:	e8 b6 fe ff ff       	call   c001af66 <Reg::getLine(char*, char*, char*)>
c001b0b0:	83 c4 10             	add    esp,0x10
c001b0b3:	89 c6                	mov    esi,eax
c001b0b5:	84 c0                	test   al,al
c001b0b7:	74 44                	je     c001b0fd <Reg::readString(char*, char*, char*, int)+0x75>
c001b0b9:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001b0c0:	31 c0                	xor    eax,eax
c001b0c2:	4a                   	dec    edx
c001b0c3:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001b0c6:	84 c9                	test   cl,cl
c001b0c8:	74 0f                	je     c001b0d9 <Reg::readString(char*, char*, char*, int)+0x51>
c001b0ca:	39 c2                	cmp    edx,eax
c001b0cc:	7e 0b                	jle    c001b0d9 <Reg::readString(char*, char*, char*, int)+0x51>
c001b0ce:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001b0d1:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001b0d6:	40                   	inc    eax
c001b0d7:	eb ea                	jmp    c001b0c3 <Reg::readString(char*, char*, char*, int)+0x3b>
c001b0d9:	83 ec 0c             	sub    esp,0xc
c001b0dc:	53                   	push   ebx
c001b0dd:	e8 b2 56 fe ff       	call   c0000794 <strlen>
c001b0e2:	83 c4 10             	add    esp,0x10
c001b0e5:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001b0ea:	75 11                	jne    c001b0fd <Reg::readString(char*, char*, char*, int)+0x75>
c001b0ec:	83 ec 0c             	sub    esp,0xc
c001b0ef:	53                   	push   ebx
c001b0f0:	e8 9f 56 fe ff       	call   c0000794 <strlen>
c001b0f5:	83 c4 10             	add    esp,0x10
c001b0f8:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001b0fd:	81 c4 d0 00 00 00    	add    esp,0xd0
c001b103:	89 f0                	mov    eax,esi
c001b105:	5b                   	pop    ebx
c001b106:	5e                   	pop    esi
c001b107:	5f                   	pop    edi
c001b108:	c3                   	ret    

c001b109 <Reg::readBool(char*, char*, bool*)>:
c001b109:	83 ec 20             	sub    esp,0x20
c001b10c:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b110:	50                   	push   eax
c001b111:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b115:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b119:	e8 7f fe ff ff       	call   c001af9d <Reg::readInt(char*, char*, int*)>
c001b11e:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b123:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b127:	0f 95 02             	setne  BYTE PTR [edx]
c001b12a:	83 c4 2c             	add    esp,0x2c
c001b12d:	c3                   	ret    

c001b12e <Reg::readBoolWithDefault(char*, char*, bool)>:
c001b12e:	53                   	push   ebx
c001b12f:	83 ec 1c             	sub    esp,0x1c
c001b132:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b136:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b13a:	50                   	push   eax
c001b13b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b13f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b143:	e8 c1 ff ff ff       	call   c001b109 <Reg::readBool(char*, char*, bool*)>
c001b148:	83 c4 10             	add    esp,0x10
c001b14b:	84 c0                	test   al,al
c001b14d:	74 04                	je     c001b153 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001b14f:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001b153:	88 d8                	mov    al,bl
c001b155:	83 c4 18             	add    esp,0x18
c001b158:	5b                   	pop    ebx
c001b159:	c3                   	ret    

c001b15a <Reg::readIntWithDefault(char*, char*, int)>:
c001b15a:	53                   	push   ebx
c001b15b:	83 ec 1c             	sub    esp,0x1c
c001b15e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b162:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b166:	50                   	push   eax
c001b167:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b16b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b16f:	e8 29 fe ff ff       	call   c001af9d <Reg::readInt(char*, char*, int*)>
c001b174:	83 c4 10             	add    esp,0x10
c001b177:	84 c0                	test   al,al
c001b179:	74 04                	je     c001b17f <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b17b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b17f:	89 d8                	mov    eax,ebx
c001b181:	83 c4 18             	add    esp,0x18
c001b184:	5b                   	pop    ebx
c001b185:	c3                   	ret    

c001b186 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b186:	57                   	push   edi
c001b187:	56                   	push   esi
c001b188:	53                   	push   ebx
c001b189:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b18d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b191:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b195:	56                   	push   esi
c001b196:	53                   	push   ebx
c001b197:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b19b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b19f:	e8 e4 fe ff ff       	call   c001b088 <Reg::readString(char*, char*, char*, int)>
c001b1a4:	83 c4 10             	add    esp,0x10
c001b1a7:	84 c0                	test   al,al
c001b1a9:	75 1b                	jne    c001b1c6 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001b1ab:	50                   	push   eax
c001b1ac:	56                   	push   esi
c001b1ad:	4e                   	dec    esi
c001b1ae:	6a 00                	push   0x0
c001b1b0:	53                   	push   ebx
c001b1b1:	e8 c2 55 fe ff       	call   c0000778 <memset>
c001b1b6:	83 c4 0c             	add    esp,0xc
c001b1b9:	56                   	push   esi
c001b1ba:	57                   	push   edi
c001b1bb:	53                   	push   ebx
c001b1bc:	89 fb                	mov    ebx,edi
c001b1be:	e8 81 55 fe ff       	call   c0000744 <memcpy>
c001b1c3:	83 c4 10             	add    esp,0x10
c001b1c6:	89 d8                	mov    eax,ebx
c001b1c8:	5b                   	pop    ebx
c001b1c9:	5e                   	pop    esi
c001b1ca:	5f                   	pop    edi
c001b1cb:	c3                   	ret    

c001b1cc <Sys::eject(regs*)>:
c001b1cc:	83 ec 0c             	sub    esp,0xc
c001b1cf:	83 ca ff             	or     edx,0xffffffff
c001b1d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1d6:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b1d9:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b1de:	83 e9 41             	sub    ecx,0x41
c001b1e1:	83 f9 19             	cmp    ecx,0x19
c001b1e4:	77 18                	ja     c001b1fe <Sys::eject(regs*)+0x32>
c001b1e6:	8b 0c 8d a0 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1660]
c001b1ed:	85 c9                	test   ecx,ecx
c001b1ef:	74 0d                	je     c001b1fe <Sys::eject(regs*)+0x32>
c001b1f1:	83 ec 0c             	sub    esp,0xc
c001b1f4:	51                   	push   ecx
c001b1f5:	e8 74 b4 ff ff       	call   c001666e <LogicalDisk::eject()>
c001b1fa:	83 c4 10             	add    esp,0x10
c001b1fd:	99                   	cdq    
c001b1fe:	83 c4 0c             	add    esp,0xc
c001b201:	c3                   	ret    

c001b202 <Sys::exit(regs*)>:
c001b202:	83 ec 18             	sub    esp,0x18
c001b205:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b209:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b20c:	e8 99 35 00 00       	call   c001e7aa <terminateTask(int)>
c001b211:	83 c8 ff             	or     eax,0xffffffff
c001b214:	83 c4 1c             	add    esp,0x1c
c001b217:	89 c2                	mov    edx,eax
c001b219:	c3                   	ret    

c001b21a <Sys::getCwd(regs*)>:
c001b21a:	83 ec 10             	sub    esp,0x10
c001b21d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b221:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b224:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b227:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b22c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b22f:	e8 b8 7f ff ff       	call   c00131ec <Fs::getcwd(Process*, char*, int)>
c001b234:	83 c4 1c             	add    esp,0x1c
c001b237:	99                   	cdq    
c001b238:	c3                   	ret    

c001b239 <Sys::getPID(regs*)>:
c001b239:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b23e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b241:	8b 00                	mov    eax,DWORD PTR [eax]
c001b243:	99                   	cdq    
c001b244:	c3                   	ret    

c001b245 <Sys::getRAMData(regs*)>:
c001b245:	8b 0d d4 e3 02 c0    	mov    ecx,DWORD PTR ds:0xc002e3d4
c001b24b:	6b 05 d0 e3 02 c0 64 	imul   eax,DWORD PTR ds:0xc002e3d0,0x64
c001b252:	99                   	cdq    
c001b253:	f7 f9                	idiv   ecx
c001b255:	c1 e0 18             	shl    eax,0x18
c001b258:	09 c8                	or     eax,ecx
c001b25a:	99                   	cdq    
c001b25b:	c3                   	ret    

c001b25c <Sys::loadDLL(regs*)>:
c001b25c:	56                   	push   esi
c001b25d:	53                   	push   ebx
c001b25e:	31 d2                	xor    edx,edx
c001b260:	51                   	push   ecx
c001b261:	b8 01 00 00 00       	mov    eax,0x1
c001b266:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b26a:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b26e:	0f 84 8c 00 00 00    	je     c001b300 <Sys::loadDLL(regs*)+0xa4>
c001b274:	83 ec 0c             	sub    esp,0xc
c001b277:	68 14 01 00 00       	push   0x114
c001b27c:	e8 bf 45 ff ff       	call   c000f840 <malloc>
c001b281:	83 c4 0c             	add    esp,0xc
c001b284:	89 c3                	mov    ebx,eax
c001b286:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b28b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b28e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b291:	53                   	push   ebx
c001b292:	e8 53 81 ff ff       	call   c00133ea <File::File(char const*, Process*)>
c001b297:	83 c4 10             	add    esp,0x10
c001b29a:	31 d2                	xor    edx,edx
c001b29c:	b8 02 00 00 00       	mov    eax,0x2
c001b2a1:	85 db                	test   ebx,ebx
c001b2a3:	74 5b                	je     c001b300 <Sys::loadDLL(regs*)+0xa4>
c001b2a5:	83 ec 0c             	sub    esp,0xc
c001b2a8:	53                   	push   ebx
c001b2a9:	e8 0e 84 ff ff       	call   c00136bc <File::exists()>
c001b2ae:	83 c4 10             	add    esp,0x10
c001b2b1:	84 c0                	test   al,al
c001b2b3:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b2b5:	75 11                	jne    c001b2c8 <Sys::loadDLL(regs*)+0x6c>
c001b2b7:	83 ec 0c             	sub    esp,0xc
c001b2ba:	53                   	push   ebx
c001b2bb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b2be:	83 c4 10             	add    esp,0x10
c001b2c1:	b8 03 00 00 00       	mov    eax,0x3
c001b2c6:	eb 36                	jmp    c001b2fe <Sys::loadDLL(regs*)+0xa2>
c001b2c8:	83 ec 0c             	sub    esp,0xc
c001b2cb:	53                   	push   ebx
c001b2cc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b2cf:	58                   	pop    eax
c001b2d0:	5a                   	pop    edx
c001b2d1:	6a 00                	push   0x0
c001b2d3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b2d6:	e8 c5 23 00 00       	call   c001d6a0 <Thr::loadDLL(char const*, bool)>
c001b2db:	83 c4 10             	add    esp,0x10
c001b2de:	89 c1                	mov    ecx,eax
c001b2e0:	31 d2                	xor    edx,edx
c001b2e2:	b8 04 00 00 00       	mov    eax,0x4
c001b2e7:	85 c9                	test   ecx,ecx
c001b2e9:	74 15                	je     c001b300 <Sys::loadDLL(regs*)+0xa4>
c001b2eb:	53                   	push   ebx
c001b2ec:	53                   	push   ebx
c001b2ed:	ff 35 88 e3 02 c0    	push   DWORD PTR ds:0xc002e388
c001b2f3:	51                   	push   ecx
c001b2f4:	e8 f6 25 00 00       	call   c001d8ef <Thr::executeDLL(unsigned long, void*)>
c001b2f9:	83 c4 10             	add    esp,0x10
c001b2fc:	31 c0                	xor    eax,eax
c001b2fe:	31 d2                	xor    edx,edx
c001b300:	59                   	pop    ecx
c001b301:	5b                   	pop    ebx
c001b302:	5e                   	pop    esi
c001b303:	c3                   	ret    

c001b304 <Sys::read(regs*)>:
c001b304:	57                   	push   edi
c001b305:	56                   	push   esi
c001b306:	53                   	push   ebx
c001b307:	83 ec 10             	sub    esp,0x10
c001b30a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b30e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b311:	83 f8 02             	cmp    eax,0x2
c001b314:	77 10                	ja     c001b326 <Sys::read(regs*)+0x22>
c001b316:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b31b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b31e:	8b 88 26 19 00 00    	mov    ecx,DWORD PTR [eax+0x1926]
c001b324:	eb 0e                	jmp    c001b334 <Sys::read(regs*)+0x30>
c001b326:	83 ec 0c             	sub    esp,0xc
c001b329:	50                   	push   eax
c001b32a:	e8 b6 66 ff ff       	call   c00119e5 <getFromFileDescriptor(int)>
c001b32f:	83 c4 10             	add    esp,0x10
c001b332:	89 c1                	mov    ecx,eax
c001b334:	83 c8 ff             	or     eax,0xffffffff
c001b337:	85 c9                	test   ecx,ecx
c001b339:	89 c2                	mov    edx,eax
c001b33b:	74 28                	je     c001b365 <Sys::read(regs*)+0x61>
c001b33d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b345:	31 ff                	xor    edi,edi
c001b347:	83 ec 0c             	sub    esp,0xc
c001b34a:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b34c:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b350:	52                   	push   edx
c001b351:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b354:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b357:	57                   	push   edi
c001b358:	56                   	push   esi
c001b359:	51                   	push   ecx
c001b35a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b35d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b361:	83 c4 20             	add    esp,0x20
c001b364:	99                   	cdq    
c001b365:	83 c4 10             	add    esp,0x10
c001b368:	5b                   	pop    ebx
c001b369:	5e                   	pop    esi
c001b36a:	5f                   	pop    edi
c001b36b:	c3                   	ret    

c001b36c <Sys::sbrk(regs*)>:
c001b36c:	56                   	push   esi
c001b36d:	53                   	push   ebx
c001b36e:	50                   	push   eax
c001b36f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b374:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b378:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b37b:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001b37e:	8b 88 32 19 00 00    	mov    ecx,DWORD PTR [eax+0x1932]
c001b384:	85 db                	test   ebx,ebx
c001b386:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001b389:	74 02                	je     c001b38d <Sys::sbrk(regs*)+0x21>
c001b38b:	79 06                	jns    c001b393 <Sys::sbrk(regs*)+0x27>
c001b38d:	89 f0                	mov    eax,esi
c001b38f:	31 d2                	xor    edx,edx
c001b391:	eb 2a                	jmp    c001b3bd <Sys::sbrk(regs*)+0x51>
c001b393:	83 c8 ff             	or     eax,0xffffffff
c001b396:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001b39c:	89 c2                	mov    edx,eax
c001b39e:	77 1d                	ja     c001b3bd <Sys::sbrk(regs*)+0x51>
c001b3a0:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001b3a6:	50                   	push   eax
c001b3a7:	c1 ea 0c             	shr    edx,0xc
c001b3aa:	68 07 0c 00 00       	push   0xc07
c001b3af:	52                   	push   edx
c001b3b0:	51                   	push   ecx
c001b3b1:	e8 6c 70 ff ff       	call   c0012422 <VAS::allocatePages(int, int)>
c001b3b6:	89 f0                	mov    eax,esi
c001b3b8:	31 d2                	xor    edx,edx
c001b3ba:	83 c4 10             	add    esp,0x10
c001b3bd:	59                   	pop    ecx
c001b3be:	5b                   	pop    ebx
c001b3bf:	5e                   	pop    esi
c001b3c0:	c3                   	ret    

c001b3c1 <Sys::setCwd(regs*)>:
c001b3c1:	83 ec 14             	sub    esp,0x14
c001b3c4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b3c8:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b3cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b3d0:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b3d3:	e8 83 83 ff ff       	call   c001375b <Fs::setcwd(Process*, char*)>
c001b3d8:	83 c4 1c             	add    esp,0x1c
c001b3db:	99                   	cdq    
c001b3dc:	c3                   	ret    

c001b3dd <Sys::setTime(regs*)>:
c001b3dd:	55                   	push   ebp
c001b3de:	31 d2                	xor    edx,edx
c001b3e0:	57                   	push   edi
c001b3e1:	bf 18 00 00 00       	mov    edi,0x18
c001b3e6:	56                   	push   esi
c001b3e7:	53                   	push   ebx
c001b3e8:	bb 3c 00 00 00       	mov    ebx,0x3c
c001b3ed:	83 ec 30             	sub    esp,0x30
c001b3f0:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001b3f4:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001b3f7:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b3fa:	f7 f3                	div    ebx
c001b3fc:	89 d6                	mov    esi,edx
c001b3fe:	31 d2                	xor    edx,edx
c001b400:	f7 f3                	div    ebx
c001b402:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b405:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b409:	bb 10 0e 00 00       	mov    ebx,0xe10
c001b40e:	31 d2                	xor    edx,edx
c001b410:	f7 f3                	div    ebx
c001b412:	31 d2                	xor    edx,edx
c001b414:	bb 0c 00 00 00       	mov    ebx,0xc
c001b419:	f7 f7                	div    edi
c001b41b:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b41e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b422:	0f b7 cd             	movzx  ecx,bp
c001b425:	56                   	push   esi
c001b426:	89 c7                	mov    edi,eax
c001b428:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001b42c:	c1 e6 10             	shl    esi,0x10
c001b42f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b433:	83 e7 1f             	and    edi,0x1f
c001b436:	51                   	push   ecx
c001b437:	47                   	inc    edi
c001b438:	c1 e8 05             	shr    eax,0x5
c001b43b:	31 d2                	xor    edx,edx
c001b43d:	f7 f3                	div    ebx
c001b43f:	31 db                	xor    ebx,ebx
c001b441:	52                   	push   edx
c001b442:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001b446:	57                   	push   edi
c001b447:	68 a9 bc 02 c0       	push   0xc002bca9
c001b44c:	e8 41 7a ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001b451:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b455:	89 f8                	mov    eax,edi
c001b457:	31 c9                	xor    ecx,ecx
c001b459:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b45d:	88 c1                	mov    cl,al
c001b45f:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001b465:	88 d5                	mov    ch,dl
c001b467:	c1 e0 10             	shl    eax,0x10
c001b46a:	0f b7 d1             	movzx  edx,cx
c001b46d:	09 c2                	or     edx,eax
c001b46f:	89 d8                	mov    eax,ebx
c001b471:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001b476:	09 f0                	or     eax,esi
c001b478:	89 c3                	mov    ebx,eax
c001b47a:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001b47e:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b482:	83 c4 18             	add    esp,0x18
c001b485:	53                   	push   ebx
c001b486:	52                   	push   edx
c001b487:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b48b:	8d 74 24 28          	lea    esi,[esp+0x28]
c001b48f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b493:	e8 dd 89 ff ff       	call   c0013e75 <datetimeToSeconds(datetime_t)>
c001b498:	83 c4 0c             	add    esp,0xc
c001b49b:	52                   	push   edx
c001b49c:	50                   	push   eax
c001b49d:	56                   	push   esi
c001b49e:	e8 59 8b ff ff       	call   c0013ffc <secondsToDatetime(unsigned long long)>
c001b4a3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b4a7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b4ab:	51                   	push   ecx
c001b4ac:	89 d6                	mov    esi,edx
c001b4ae:	51                   	push   ecx
c001b4af:	c1 ee 10             	shr    esi,0x10
c001b4b2:	89 f3                	mov    ebx,esi
c001b4b4:	0f b6 f3             	movzx  esi,bl
c001b4b7:	56                   	push   esi
c001b4b8:	0f b6 f6             	movzx  esi,dh
c001b4bb:	0f b6 d2             	movzx  edx,dl
c001b4be:	56                   	push   esi
c001b4bf:	52                   	push   edx
c001b4c0:	89 c2                	mov    edx,eax
c001b4c2:	c1 ea 10             	shr    edx,0x10
c001b4c5:	52                   	push   edx
c001b4c6:	0f b6 d4             	movzx  edx,ah
c001b4c9:	0f b6 c0             	movzx  eax,al
c001b4cc:	52                   	push   edx
c001b4cd:	50                   	push   eax
c001b4ce:	68 c5 bc 02 c0       	push   0xc002bcc5
c001b4d3:	e8 ba 79 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001b4d8:	83 c4 2c             	add    esp,0x2c
c001b4db:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c001b4e0:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b4e4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b4e8:	53                   	push   ebx
c001b4e9:	51                   	push   ecx
c001b4ea:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b4f0:	e8 a7 8a ff ff       	call   c0013f9c <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b4f5:	83 f0 01             	xor    eax,0x1
c001b4f8:	31 d2                	xor    edx,edx
c001b4fa:	0f b6 c0             	movzx  eax,al
c001b4fd:	83 c4 3c             	add    esp,0x3c
c001b500:	5b                   	pop    ebx
c001b501:	5e                   	pop    esi
c001b502:	5f                   	pop    edi
c001b503:	5d                   	pop    ebp
c001b504:	c3                   	ret    

c001b505 <Sys::timezone(regs*)>:
c001b505:	53                   	push   ebx
c001b506:	83 ec 08             	sub    esp,0x8
c001b509:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b50d:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b511:	75 17                	jne    c001b52a <Sys::timezone(regs*)+0x25>
c001b513:	83 ec 0c             	sub    esp,0xc
c001b516:	68 e1 bc 02 c0       	push   0xc002bce1
c001b51b:	e8 72 79 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001b520:	83 c8 ff             	or     eax,0xffffffff
c001b523:	83 c4 10             	add    esp,0x10
c001b526:	89 c2                	mov    edx,eax
c001b528:	eb 20                	jmp    c001b54a <Sys::timezone(regs*)+0x45>
c001b52a:	83 ec 0c             	sub    esp,0xc
c001b52d:	68 19 bd 02 c0       	push   0xc002bd19
c001b532:	e8 5b 79 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001b537:	58                   	pop    eax
c001b538:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b53b:	e8 be 87 ff ff       	call   c0013cfe <User::loadClockSettings(int)>
c001b540:	83 c4 10             	add    esp,0x10
c001b543:	b8 01 00 00 00       	mov    eax,0x1
c001b548:	31 d2                	xor    edx,edx
c001b54a:	83 c4 08             	add    esp,0x8
c001b54d:	5b                   	pop    ebx
c001b54e:	c3                   	ret    

c001b54f <Sys::write(regs*)>:
c001b54f:	57                   	push   edi
c001b550:	56                   	push   esi
c001b551:	53                   	push   ebx
c001b552:	83 ec 10             	sub    esp,0x10
c001b555:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b559:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b55c:	83 f8 02             	cmp    eax,0x2
c001b55f:	77 10                	ja     c001b571 <Sys::write(regs*)+0x22>
c001b561:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b566:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b569:	8b 88 26 19 00 00    	mov    ecx,DWORD PTR [eax+0x1926]
c001b56f:	eb 0e                	jmp    c001b57f <Sys::write(regs*)+0x30>
c001b571:	83 ec 0c             	sub    esp,0xc
c001b574:	50                   	push   eax
c001b575:	e8 6b 64 ff ff       	call   c00119e5 <getFromFileDescriptor(int)>
c001b57a:	83 c4 10             	add    esp,0x10
c001b57d:	89 c1                	mov    ecx,eax
c001b57f:	83 c8 ff             	or     eax,0xffffffff
c001b582:	85 c9                	test   ecx,ecx
c001b584:	89 c2                	mov    edx,eax
c001b586:	74 28                	je     c001b5b0 <Sys::write(regs*)+0x61>
c001b588:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b590:	31 ff                	xor    edi,edi
c001b592:	83 ec 0c             	sub    esp,0xc
c001b595:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b597:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b59b:	52                   	push   edx
c001b59c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b59f:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b5a2:	57                   	push   edi
c001b5a3:	56                   	push   esi
c001b5a4:	51                   	push   ecx
c001b5a5:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b5a8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b5ac:	83 c4 20             	add    esp,0x20
c001b5af:	99                   	cdq    
c001b5b0:	83 c4 10             	add    esp,0x10
c001b5b3:	5b                   	pop    ebx
c001b5b4:	5e                   	pop    esi
c001b5b5:	5f                   	pop    edi
c001b5b6:	c3                   	ret    

c001b5b7 <Sys::wsbe(regs*)>:
c001b5b7:	57                   	push   edi
c001b5b8:	b9 0b 00 00 00       	mov    ecx,0xb
c001b5bd:	56                   	push   esi
c001b5be:	be 58 bd 02 c0       	mov    esi,0xc002bd58
c001b5c3:	53                   	push   ebx
c001b5c4:	83 ec 30             	sub    esp,0x30
c001b5c7:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b5cb:	fc                   	cld    
c001b5cc:	83 ec 0c             	sub    esp,0xc
c001b5cf:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b5d1:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b5d5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b5da:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b5dd:	8b b0 26 19 00 00    	mov    esi,DWORD PTR [eax+0x1926]
c001b5e3:	8b 06                	mov    eax,DWORD PTR [esi]
c001b5e5:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b5e8:	57                   	push   edi
c001b5e9:	e8 a6 51 fe ff       	call   c0000794 <strlen>
c001b5ee:	5a                   	pop    edx
c001b5ef:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b5f3:	52                   	push   edx
c001b5f4:	31 d2                	xor    edx,edx
c001b5f6:	57                   	push   edi
c001b5f7:	52                   	push   edx
c001b5f8:	50                   	push   eax
c001b5f9:	56                   	push   esi
c001b5fa:	ff d3                	call   ebx
c001b5fc:	83 c4 14             	add    esp,0x14
c001b5ff:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b603:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b606:	e8 9f 31 00 00       	call   c001e7aa <terminateTask(int)>
c001b60b:	83 c4 40             	add    esp,0x40
c001b60e:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b613:	5b                   	pop    ebx
c001b614:	31 d2                	xor    edx,edx
c001b616:	5e                   	pop    esi
c001b617:	5f                   	pop    edi
c001b618:	c3                   	ret    

c001b619 <Sys::yield(regs*)>:
c001b619:	57                   	push   edi
c001b61a:	56                   	push   esi
c001b61b:	53                   	push   ebx
c001b61c:	e8 46 27 00 00       	call   c001dd67 <lockScheduler()>
c001b621:	e8 7c 2a 00 00       	call   c001e0a2 <schedule()>
c001b626:	e8 3e 27 00 00       	call   c001dd69 <unlockScheduler()>
c001b62b:	8b 35 10 ea 02 c0    	mov    esi,DWORD PTR ds:0xc002ea10
c001b631:	8b 3d 14 ea 02 c0    	mov    edi,DWORD PTR ds:0xc002ea14
c001b637:	89 f0                	mov    eax,esi
c001b639:	89 fb                	mov    ebx,edi
c001b63b:	89 f1                	mov    ecx,esi
c001b63d:	c1 e0 07             	shl    eax,0x7
c001b640:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b644:	25 80 30 0f 00       	and    eax,0xf3080
c001b649:	c1 eb 17             	shr    ebx,0x17
c001b64c:	31 c8                	xor    eax,ecx
c001b64e:	89 da                	mov    edx,ebx
c001b650:	5b                   	pop    ebx
c001b651:	5e                   	pop    esi
c001b652:	5f                   	pop    edi
c001b653:	c3                   	ret    

c001b654 <sysCallSeekDir(regs*)>:
c001b654:	31 c0                	xor    eax,eax
c001b656:	31 d2                	xor    edx,edx
c001b658:	c3                   	ret    

c001b659 <sysCallTellDir(regs*)>:
c001b659:	31 c0                	xor    eax,eax
c001b65b:	31 d2                	xor    edx,edx
c001b65d:	c3                   	ret    

c001b65e <sysCallVerify(regs*)>:
c001b65e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b662:	31 d2                	xor    edx,edx
c001b664:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b667:	c3                   	ret    

c001b668 <sysFormatDisk(regs*)>:
c001b668:	56                   	push   esi
c001b669:	53                   	push   ebx
c001b66a:	53                   	push   ebx
c001b66b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b66f:	8b 1d 10 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e510
c001b675:	eb 25                	jmp    c001b69c <sysFormatDisk(regs*)+0x34>
c001b677:	83 ec 0c             	sub    esp,0xc
c001b67a:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b67d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b67f:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b682:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b685:	50                   	push   eax
c001b686:	ff 34 85 a0 e9 02 c0 	push   DWORD PTR [eax*4-0x3ffd1660]
c001b68d:	53                   	push   ebx
c001b68e:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b691:	83 c4 20             	add    esp,0x20
c001b694:	83 f8 08             	cmp    eax,0x8
c001b697:	75 12                	jne    c001b6ab <sysFormatDisk(regs*)+0x43>
c001b699:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b69c:	85 db                	test   ebx,ebx
c001b69e:	75 d7                	jne    c001b677 <sysFormatDisk(regs*)+0xf>
c001b6a0:	59                   	pop    ecx
c001b6a1:	b8 03 00 00 00       	mov    eax,0x3
c001b6a6:	31 d2                	xor    edx,edx
c001b6a8:	5b                   	pop    ebx
c001b6a9:	5e                   	pop    esi
c001b6aa:	c3                   	ret    
c001b6ab:	85 c0                	test   eax,eax
c001b6ad:	74 1b                	je     c001b6ca <sysFormatDisk(regs*)+0x62>
c001b6af:	83 f8 09             	cmp    eax,0x9
c001b6b2:	74 0b                	je     c001b6bf <sysFormatDisk(regs*)+0x57>
c001b6b4:	59                   	pop    ecx
c001b6b5:	b8 02 00 00 00       	mov    eax,0x2
c001b6ba:	31 d2                	xor    edx,edx
c001b6bc:	5b                   	pop    ebx
c001b6bd:	5e                   	pop    esi
c001b6be:	c3                   	ret    
c001b6bf:	59                   	pop    ecx
c001b6c0:	b8 01 00 00 00       	mov    eax,0x1
c001b6c5:	31 d2                	xor    edx,edx
c001b6c7:	5b                   	pop    ebx
c001b6c8:	5e                   	pop    esi
c001b6c9:	c3                   	ret    
c001b6ca:	59                   	pop    ecx
c001b6cb:	31 c0                	xor    eax,eax
c001b6cd:	31 d2                	xor    edx,edx
c001b6cf:	5b                   	pop    ebx
c001b6d0:	5e                   	pop    esi
c001b6d1:	c3                   	ret    

c001b6d2 <sysSetDiskVolumeLabel(regs*)>:
c001b6d2:	56                   	push   esi
c001b6d3:	53                   	push   ebx
c001b6d4:	53                   	push   ebx
c001b6d5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b6d9:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b6dc:	83 f8 19             	cmp    eax,0x19
c001b6df:	77 29                	ja     c001b70a <sysSetDiskVolumeLabel(regs*)+0x38>
c001b6e1:	8b 0c 85 a0 e9 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1660]
c001b6e8:	85 c9                	test   ecx,ecx
c001b6ea:	74 1e                	je     c001b70a <sysSetDiskVolumeLabel(regs*)+0x38>
c001b6ec:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b6ef:	85 d2                	test   edx,edx
c001b6f1:	74 17                	je     c001b70a <sysSetDiskVolumeLabel(regs*)+0x38>
c001b6f3:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b6f9:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b6fb:	52                   	push   edx
c001b6fc:	50                   	push   eax
c001b6fd:	51                   	push   ecx
c001b6fe:	53                   	push   ebx
c001b6ff:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b702:	83 c4 10             	add    esp,0x10
c001b705:	99                   	cdq    
c001b706:	59                   	pop    ecx
c001b707:	5b                   	pop    ebx
c001b708:	5e                   	pop    esi
c001b709:	c3                   	ret    
c001b70a:	59                   	pop    ecx
c001b70b:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b710:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b715:	5b                   	pop    ebx
c001b716:	5e                   	pop    esi
c001b717:	c3                   	ret    

c001b718 <sysGetDiskVolumeLabel(regs*)>:
c001b718:	57                   	push   edi
c001b719:	56                   	push   esi
c001b71a:	53                   	push   ebx
c001b71b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b71f:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b722:	83 fa 19             	cmp    edx,0x19
c001b725:	77 34                	ja     c001b75b <sysGetDiskVolumeLabel(regs*)+0x43>
c001b727:	8b 0c 95 a0 e9 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd1660]
c001b72e:	85 c9                	test   ecx,ecx
c001b730:	74 29                	je     c001b75b <sysGetDiskVolumeLabel(regs*)+0x43>
c001b732:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b735:	85 db                	test   ebx,ebx
c001b737:	74 22                	je     c001b75b <sysGetDiskVolumeLabel(regs*)+0x43>
c001b739:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b73c:	85 c0                	test   eax,eax
c001b73e:	74 1b                	je     c001b75b <sysGetDiskVolumeLabel(regs*)+0x43>
c001b740:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b746:	83 ec 0c             	sub    esp,0xc
c001b749:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b74b:	50                   	push   eax
c001b74c:	53                   	push   ebx
c001b74d:	52                   	push   edx
c001b74e:	51                   	push   ecx
c001b74f:	56                   	push   esi
c001b750:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b753:	83 c4 20             	add    esp,0x20
c001b756:	99                   	cdq    
c001b757:	5b                   	pop    ebx
c001b758:	5e                   	pop    esi
c001b759:	5f                   	pop    edi
c001b75a:	c3                   	ret    
c001b75b:	5b                   	pop    ebx
c001b75c:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b761:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b766:	5e                   	pop    esi
c001b767:	5f                   	pop    edi
c001b768:	c3                   	ret    

c001b769 <sysShutdown(regs*)>:
c001b769:	83 ec 0c             	sub    esp,0xc
c001b76c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b770:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b773:	85 c0                	test   eax,eax
c001b775:	74 18                	je     c001b78f <sysShutdown(regs*)+0x26>
c001b777:	83 f8 01             	cmp    eax,0x1
c001b77a:	74 38                	je     c001b7b4 <sysShutdown(regs*)+0x4b>
c001b77c:	83 f8 02             	cmp    eax,0x2
c001b77f:	74 24                	je     c001b7a5 <sysShutdown(regs*)+0x3c>
c001b781:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b786:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b78b:	83 c4 0c             	add    esp,0xc
c001b78e:	c3                   	ret    
c001b78f:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c001b794:	8b 10                	mov    edx,DWORD PTR [eax]
c001b796:	6a 00                	push   0x0
c001b798:	6a 00                	push   0x0
c001b79a:	6a 00                	push   0x0
c001b79c:	50                   	push   eax
c001b79d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b7a0:	83 c4 10             	add    esp,0x10
c001b7a3:	eb dc                	jmp    c001b781 <sysShutdown(regs*)+0x18>
c001b7a5:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c001b7aa:	8b 10                	mov    edx,DWORD PTR [eax]
c001b7ac:	6a 00                	push   0x0
c001b7ae:	6a 00                	push   0x0
c001b7b0:	6a 01                	push   0x1
c001b7b2:	eb e8                	jmp    c001b79c <sysShutdown(regs*)+0x33>
c001b7b4:	a1 40 0a 03 c0       	mov    eax,ds:0xc0030a40
c001b7b9:	85 c0                	test   eax,eax
c001b7bb:	74 02                	je     c001b7bf <sysShutdown(regs*)+0x56>
c001b7bd:	ff d0                	call   eax
c001b7bf:	31 c0                	xor    eax,eax
c001b7c1:	31 d2                	xor    edx,edx
c001b7c3:	83 c4 0c             	add    esp,0xc
c001b7c6:	c3                   	ret    

c001b7c7 <sysCallRealpath(regs*)>:
c001b7c7:	83 ec 0c             	sub    esp,0xc
c001b7ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7ce:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b7d1:	85 d2                	test   edx,edx
c001b7d3:	74 07                	je     c001b7dc <sysCallRealpath(regs*)+0x15>
c001b7d5:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b7d8:	85 c0                	test   eax,eax
c001b7da:	75 0b                	jne    c001b7e7 <sysCallRealpath(regs*)+0x20>
c001b7dc:	b8 01 00 00 00       	mov    eax,0x1
c001b7e1:	31 d2                	xor    edx,edx
c001b7e3:	83 c4 0c             	add    esp,0xc
c001b7e6:	c3                   	ret    
c001b7e7:	51                   	push   ecx
c001b7e8:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b7ee:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b7f1:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b7f7:	51                   	push   ecx
c001b7f8:	52                   	push   edx
c001b7f9:	50                   	push   eax
c001b7fa:	e8 41 7a ff ff       	call   c0013240 <Fs::standardiseFiles(char*, char const*, char const*)>
c001b7ff:	83 c4 10             	add    esp,0x10
c001b802:	31 c0                	xor    eax,eax
c001b804:	31 d2                	xor    edx,edx
c001b806:	83 c4 0c             	add    esp,0xc
c001b809:	c3                   	ret    

c001b80a <sysCallGetArgc(regs*)>:
c001b80a:	83 ec 14             	sub    esp,0x14
c001b80d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b812:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b815:	ff b0 36 19 00 00    	push   DWORD PTR [eax+0x1936]
c001b81b:	68 84 bd 02 c0       	push   0xc002bd84
c001b820:	e8 6d 76 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001b825:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b82a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b82d:	8b 80 36 19 00 00    	mov    eax,DWORD PTR [eax+0x1936]
c001b833:	83 c4 1c             	add    esp,0x1c
c001b836:	99                   	cdq    
c001b837:	c3                   	ret    

c001b838 <sysCallReadDir(regs*)>:
c001b838:	53                   	push   ebx
c001b839:	83 ec 18             	sub    esp,0x18
c001b83c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b840:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b843:	83 f8 02             	cmp    eax,0x2
c001b846:	76 53                	jbe    c001b89b <sysCallReadDir(regs*)+0x63>
c001b848:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b84b:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001b851:	77 4f                	ja     c001b8a2 <sysCallReadDir(regs*)+0x6a>
c001b853:	83 ec 0c             	sub    esp,0xc
c001b856:	50                   	push   eax
c001b857:	e8 89 61 ff ff       	call   c00119e5 <getFromFileDescriptor(int)>
c001b85c:	83 c4 10             	add    esp,0x10
c001b85f:	85 c0                	test   eax,eax
c001b861:	74 50                	je     c001b8b3 <sysCallReadDir(regs*)+0x7b>
c001b863:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b86b:	83 ec 0c             	sub    esp,0xc
c001b86e:	8b 10                	mov    edx,DWORD PTR [eax]
c001b870:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b874:	51                   	push   ecx
c001b875:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b878:	6a 00                	push   0x0
c001b87a:	68 10 01 00 00       	push   0x110
c001b87f:	50                   	push   eax
c001b880:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b883:	83 c4 20             	add    esp,0x20
c001b886:	85 c0                	test   eax,eax
c001b888:	74 38                	je     c001b8c2 <sysCallReadDir(regs*)+0x8a>
c001b88a:	83 f8 07             	cmp    eax,0x7
c001b88d:	74 0c                	je     c001b89b <sysCallReadDir(regs*)+0x63>
c001b88f:	b8 02 00 00 00       	mov    eax,0x2
c001b894:	31 d2                	xor    edx,edx
c001b896:	83 c4 18             	add    esp,0x18
c001b899:	5b                   	pop    ebx
c001b89a:	c3                   	ret    
c001b89b:	b8 01 00 00 00       	mov    eax,0x1
c001b8a0:	eb f2                	jmp    c001b894 <sysCallReadDir(regs*)+0x5c>
c001b8a2:	83 ec 08             	sub    esp,0x8
c001b8a5:	52                   	push   edx
c001b8a6:	68 9c be 02 c0       	push   0xc002be9c
c001b8ab:	e8 e2 75 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001b8b0:	83 c4 10             	add    esp,0x10
c001b8b3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b8b8:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b8bd:	83 c4 18             	add    esp,0x18
c001b8c0:	5b                   	pop    ebx
c001b8c1:	c3                   	ret    
c001b8c2:	31 c0                	xor    eax,eax
c001b8c4:	eb ce                	jmp    c001b894 <sysCallReadDir(regs*)+0x5c>

c001b8c6 <sysCallIsATTY(regs*)>:
c001b8c6:	83 ec 0c             	sub    esp,0xc
c001b8c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8cd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b8d0:	83 f8 02             	cmp    eax,0x2
c001b8d3:	76 07                	jbe    c001b8dc <sysCallIsATTY(regs*)+0x16>
c001b8d5:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b8da:	75 26                	jne    c001b902 <sysCallIsATTY(regs*)+0x3c>
c001b8dc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8e1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b8e4:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c001b8ea:	85 c0                	test   eax,eax
c001b8ec:	74 24                	je     c001b912 <sysCallIsATTY(regs*)+0x4c>
c001b8ee:	83 ec 0c             	sub    esp,0xc
c001b8f1:	8b 10                	mov    edx,DWORD PTR [eax]
c001b8f3:	50                   	push   eax
c001b8f4:	ff 12                	call   DWORD PTR [edx]
c001b8f6:	31 d2                	xor    edx,edx
c001b8f8:	0f b6 c0             	movzx  eax,al
c001b8fb:	83 c4 10             	add    esp,0x10
c001b8fe:	83 c4 0c             	add    esp,0xc
c001b901:	c3                   	ret    
c001b902:	83 ec 0c             	sub    esp,0xc
c001b905:	50                   	push   eax
c001b906:	e8 da 60 ff ff       	call   c00119e5 <getFromFileDescriptor(int)>
c001b90b:	83 c4 10             	add    esp,0x10
c001b90e:	85 c0                	test   eax,eax
c001b910:	75 dc                	jne    c001b8ee <sysCallIsATTY(regs*)+0x28>
c001b912:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b917:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b91c:	83 c4 0c             	add    esp,0xc
c001b91f:	c3                   	ret    

c001b920 <sysCallSeek(regs*)>:
c001b920:	53                   	push   ebx
c001b921:	83 ec 08             	sub    esp,0x8
c001b924:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b928:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b92b:	83 f8 02             	cmp    eax,0x2
c001b92e:	76 4a                	jbe    c001b97a <sysCallSeek(regs*)+0x5a>
c001b930:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b935:	77 32                	ja     c001b969 <sysCallSeek(regs*)+0x49>
c001b937:	83 ec 0c             	sub    esp,0xc
c001b93a:	50                   	push   eax
c001b93b:	e8 a5 60 ff ff       	call   c00119e5 <getFromFileDescriptor(int)>
c001b940:	83 c4 0c             	add    esp,0xc
c001b943:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b946:	31 db                	xor    ebx,ebx
c001b948:	53                   	push   ebx
c001b949:	51                   	push   ecx
c001b94a:	50                   	push   eax
c001b94b:	e8 bc 7b ff ff       	call   c001350c <File::seek(unsigned long long)>
c001b950:	83 c4 10             	add    esp,0x10
c001b953:	85 c0                	test   eax,eax
c001b955:	0f 95 c0             	setne  al
c001b958:	31 d2                	xor    edx,edx
c001b95a:	0f b6 c0             	movzx  eax,al
c001b95d:	f7 d8                	neg    eax
c001b95f:	83 d2 00             	adc    edx,0x0
c001b962:	83 c4 08             	add    esp,0x8
c001b965:	f7 da                	neg    edx
c001b967:	5b                   	pop    ebx
c001b968:	c3                   	ret    
c001b969:	83 ec 08             	sub    esp,0x8
c001b96c:	50                   	push   eax
c001b96d:	68 8f bd 02 c0       	push   0xc002bd8f
c001b972:	e8 1b 75 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001b977:	83 c4 10             	add    esp,0x10
c001b97a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b97f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b984:	83 c4 08             	add    esp,0x8
c001b987:	5b                   	pop    ebx
c001b988:	c3                   	ret    

c001b989 <sysCallTell(regs*)>:
c001b989:	53                   	push   ebx
c001b98a:	83 ec 08             	sub    esp,0x8
c001b98d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b991:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b994:	83 f8 02             	cmp    eax,0x2
c001b997:	76 5e                	jbe    c001b9f7 <sysCallTell(regs*)+0x6e>
c001b999:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b99e:	77 2d                	ja     c001b9cd <sysCallTell(regs*)+0x44>
c001b9a0:	83 ec 0c             	sub    esp,0xc
c001b9a3:	50                   	push   eax
c001b9a4:	e8 3c 60 ff ff       	call   c00119e5 <getFromFileDescriptor(int)>
c001b9a9:	5a                   	pop    edx
c001b9aa:	59                   	pop    ecx
c001b9ab:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b9ae:	50                   	push   eax
c001b9af:	e8 ae 7b ff ff       	call   c0013562 <File::tell(unsigned long long*)>
c001b9b4:	83 c4 10             	add    esp,0x10
c001b9b7:	85 c0                	test   eax,eax
c001b9b9:	0f 95 c0             	setne  al
c001b9bc:	31 d2                	xor    edx,edx
c001b9be:	0f b6 c0             	movzx  eax,al
c001b9c1:	f7 d8                	neg    eax
c001b9c3:	83 d2 00             	adc    edx,0x0
c001b9c6:	83 c4 08             	add    esp,0x8
c001b9c9:	f7 da                	neg    edx
c001b9cb:	5b                   	pop    ebx
c001b9cc:	c3                   	ret    
c001b9cd:	83 ec 08             	sub    esp,0x8
c001b9d0:	50                   	push   eax
c001b9d1:	68 a9 bd 02 c0       	push   0xc002bda9
c001b9d6:	e8 b7 74 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001b9db:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b9de:	83 c4 10             	add    esp,0x10
c001b9e1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b9e7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b9ee:	31 d2                	xor    edx,edx
c001b9f0:	31 c0                	xor    eax,eax
c001b9f2:	83 c4 08             	add    esp,0x8
c001b9f5:	5b                   	pop    ebx
c001b9f6:	c3                   	ret    
c001b9f7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b9fc:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba01:	83 c4 08             	add    esp,0x8
c001ba04:	5b                   	pop    ebx
c001ba05:	c3                   	ret    

c001ba06 <sysCallSize(regs*)>:
c001ba06:	53                   	push   ebx
c001ba07:	83 ec 18             	sub    esp,0x18
c001ba0a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ba0e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ba11:	83 f8 02             	cmp    eax,0x2
c001ba14:	76 64                	jbe    c001ba7a <sysCallSize(regs*)+0x74>
c001ba16:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001ba1b:	77 33                	ja     c001ba50 <sysCallSize(regs*)+0x4a>
c001ba1d:	83 ec 0c             	sub    esp,0xc
c001ba20:	50                   	push   eax
c001ba21:	e8 bf 5f ff ff       	call   c00119e5 <getFromFileDescriptor(int)>
c001ba26:	83 c4 0c             	add    esp,0xc
c001ba29:	8d 54 24 13          	lea    edx,[esp+0x13]
c001ba2d:	52                   	push   edx
c001ba2e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001ba31:	50                   	push   eax
c001ba32:	e8 c3 7c ff ff       	call   c00136fa <File::stat(unsigned long long*, bool*)>
c001ba37:	83 c4 10             	add    esp,0x10
c001ba3a:	85 c0                	test   eax,eax
c001ba3c:	0f 95 c0             	setne  al
c001ba3f:	31 d2                	xor    edx,edx
c001ba41:	0f b6 c0             	movzx  eax,al
c001ba44:	f7 d8                	neg    eax
c001ba46:	83 d2 00             	adc    edx,0x0
c001ba49:	83 c4 18             	add    esp,0x18
c001ba4c:	f7 da                	neg    edx
c001ba4e:	5b                   	pop    ebx
c001ba4f:	c3                   	ret    
c001ba50:	83 ec 08             	sub    esp,0x8
c001ba53:	50                   	push   eax
c001ba54:	68 c3 bd 02 c0       	push   0xc002bdc3
c001ba59:	e8 34 74 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001ba5e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001ba61:	83 c4 10             	add    esp,0x10
c001ba64:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ba6a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ba71:	31 d2                	xor    edx,edx
c001ba73:	31 c0                	xor    eax,eax
c001ba75:	83 c4 18             	add    esp,0x18
c001ba78:	5b                   	pop    ebx
c001ba79:	c3                   	ret    
c001ba7a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba7f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba84:	83 c4 18             	add    esp,0x18
c001ba87:	5b                   	pop    ebx
c001ba88:	c3                   	ret    

c001ba89 <sysCallSizeFromFilename(regs*)>:
c001ba89:	57                   	push   edi
c001ba8a:	56                   	push   esi
c001ba8b:	53                   	push   ebx
c001ba8c:	83 ec 20             	sub    esp,0x20
c001ba8f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ba93:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001ba96:	83 fb 02             	cmp    ebx,0x2
c001ba99:	0f 86 99 00 00 00    	jbe    c001bb38 <sysCallSizeFromFilename(regs*)+0xaf>
c001ba9f:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001baa5:	77 65                	ja     c001bb0c <sysCallSizeFromFilename(regs*)+0x83>
c001baa7:	83 ec 0c             	sub    esp,0xc
c001baaa:	68 14 01 00 00       	push   0x114
c001baaf:	e8 8c 3d ff ff       	call   c000f840 <malloc>
c001bab4:	83 c4 0c             	add    esp,0xc
c001bab7:	89 c6                	mov    esi,eax
c001bab9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001babe:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bac1:	53                   	push   ebx
c001bac2:	56                   	push   esi
c001bac3:	e8 22 79 ff ff       	call   c00133ea <File::File(char const*, Process*)>
c001bac8:	83 c4 0c             	add    esp,0xc
c001bacb:	8d 44 24 23          	lea    eax,[esp+0x23]
c001bacf:	50                   	push   eax
c001bad0:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001bad3:	56                   	push   esi
c001bad4:	e8 21 7c ff ff       	call   c00136fa <File::stat(unsigned long long*, bool*)>
c001bad9:	83 c4 10             	add    esp,0x10
c001badc:	85 f6                	test   esi,esi
c001bade:	74 14                	je     c001baf4 <sysCallSizeFromFilename(regs*)+0x6b>
c001bae0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bae4:	8b 16                	mov    edx,DWORD PTR [esi]
c001bae6:	83 ec 0c             	sub    esp,0xc
c001bae9:	56                   	push   esi
c001baea:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001baed:	83 c4 10             	add    esp,0x10
c001baf0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001baf4:	85 c0                	test   eax,eax
c001baf6:	0f 95 c0             	setne  al
c001baf9:	31 d2                	xor    edx,edx
c001bafb:	0f b6 c0             	movzx  eax,al
c001bafe:	f7 d8                	neg    eax
c001bb00:	83 d2 00             	adc    edx,0x0
c001bb03:	83 c4 20             	add    esp,0x20
c001bb06:	f7 da                	neg    edx
c001bb08:	5b                   	pop    ebx
c001bb09:	5e                   	pop    esi
c001bb0a:	5f                   	pop    edi
c001bb0b:	c3                   	ret    
c001bb0c:	83 ec 08             	sub    esp,0x8
c001bb0f:	53                   	push   ebx
c001bb10:	68 c3 bd 02 c0       	push   0xc002bdc3
c001bb15:	e8 78 73 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001bb1a:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001bb1d:	83 c4 10             	add    esp,0x10
c001bb20:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bb26:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bb2d:	31 d2                	xor    edx,edx
c001bb2f:	83 c4 20             	add    esp,0x20
c001bb32:	31 c0                	xor    eax,eax
c001bb34:	5b                   	pop    ebx
c001bb35:	5e                   	pop    esi
c001bb36:	5f                   	pop    edi
c001bb37:	c3                   	ret    
c001bb38:	83 c4 20             	add    esp,0x20
c001bb3b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb40:	5b                   	pop    ebx
c001bb41:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb46:	5e                   	pop    esi
c001bb47:	5f                   	pop    edi
c001bb48:	c3                   	ret    

c001bb49 <sysCallClose(regs*)>:
c001bb49:	53                   	push   ebx
c001bb4a:	83 ec 08             	sub    esp,0x8
c001bb4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb51:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bb54:	83 f8 02             	cmp    eax,0x2
c001bb57:	76 50                	jbe    c001bba9 <sysCallClose(regs*)+0x60>
c001bb59:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bb5e:	74 58                	je     c001bbb8 <sysCallClose(regs*)+0x6f>
c001bb60:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bb65:	74 60                	je     c001bbc7 <sysCallClose(regs*)+0x7e>
c001bb67:	77 2f                	ja     c001bb98 <sysCallClose(regs*)+0x4f>
c001bb69:	83 ec 0c             	sub    esp,0xc
c001bb6c:	50                   	push   eax
c001bb6d:	e8 73 5e ff ff       	call   c00119e5 <getFromFileDescriptor(int)>
c001bb72:	89 c3                	mov    ebx,eax
c001bb74:	89 04 24             	mov    DWORD PTR [esp],eax
c001bb77:	e8 30 79 ff ff       	call   c00134ac <File::close()>
c001bb7c:	83 c4 10             	add    esp,0x10
c001bb7f:	85 db                	test   ebx,ebx
c001bb81:	74 0c                	je     c001bb8f <sysCallClose(regs*)+0x46>
c001bb83:	83 ec 0c             	sub    esp,0xc
c001bb86:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bb88:	53                   	push   ebx
c001bb89:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bb8c:	83 c4 10             	add    esp,0x10
c001bb8f:	31 c0                	xor    eax,eax
c001bb91:	31 d2                	xor    edx,edx
c001bb93:	83 c4 08             	add    esp,0x8
c001bb96:	5b                   	pop    ebx
c001bb97:	c3                   	ret    
c001bb98:	83 ec 08             	sub    esp,0x8
c001bb9b:	50                   	push   eax
c001bb9c:	68 c0 be 02 c0       	push   0xc002bec0
c001bba1:	e8 ec 72 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001bba6:	83 c4 10             	add    esp,0x10
c001bba9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bbae:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bbb3:	83 c4 08             	add    esp,0x8
c001bbb6:	5b                   	pop    ebx
c001bbb7:	c3                   	ret    
c001bbb8:	83 ec 0c             	sub    esp,0xc
c001bbbb:	68 de bd 02 c0       	push   0xc002bdde
c001bbc0:	e8 cd 72 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001bbc5:	eb c5                	jmp    c001bb8c <sysCallClose(regs*)+0x43>
c001bbc7:	83 ec 0c             	sub    esp,0xc
c001bbca:	68 ec bd 02 c0       	push   0xc002bdec
c001bbcf:	eb ef                	jmp    c001bbc0 <sysCallClose(regs*)+0x77>

c001bbd1 <sysCallOpenDir(regs*)>:
c001bbd1:	56                   	push   esi
c001bbd2:	53                   	push   ebx
c001bbd3:	53                   	push   ebx
c001bbd4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bbd8:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001bbdb:	85 f6                	test   esi,esi
c001bbdd:	74 59                	je     c001bc38 <sysCallOpenDir(regs*)+0x67>
c001bbdf:	83 ec 0c             	sub    esp,0xc
c001bbe2:	68 14 01 00 00       	push   0x114
c001bbe7:	e8 54 3c ff ff       	call   c000f840 <malloc>
c001bbec:	83 c4 0c             	add    esp,0xc
c001bbef:	89 c6                	mov    esi,eax
c001bbf1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bbf6:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bbf9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bbfc:	56                   	push   esi
c001bbfd:	e8 94 7c ff ff       	call   c0013896 <Directory::Directory(char const*, Process*)>
c001bc02:	83 c4 10             	add    esp,0x10
c001bc05:	85 f6                	test   esi,esi
c001bc07:	74 2f                	je     c001bc38 <sysCallOpenDir(regs*)+0x67>
c001bc09:	83 ec 0c             	sub    esp,0xc
c001bc0c:	56                   	push   esi
c001bc0d:	e8 e8 7c ff ff       	call   c00138fa <Directory::open()>
c001bc12:	83 c4 10             	add    esp,0x10
c001bc15:	85 c0                	test   eax,eax
c001bc17:	75 1f                	jne    c001bc38 <sysCallOpenDir(regs*)+0x67>
c001bc19:	83 ec 0c             	sub    esp,0xc
c001bc1c:	56                   	push   esi
c001bc1d:	e8 ce 5a ff ff       	call   c00116f0 <UnixFile::getFileDescriptor()>
c001bc22:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bc25:	83 c4 10             	add    esp,0x10
c001bc28:	89 02                	mov    DWORD PTR [edx],eax
c001bc2a:	c1 f8 1f             	sar    eax,0x1f
c001bc2d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bc30:	31 c0                	xor    eax,eax
c001bc32:	59                   	pop    ecx
c001bc33:	31 d2                	xor    edx,edx
c001bc35:	5b                   	pop    ebx
c001bc36:	5e                   	pop    esi
c001bc37:	c3                   	ret    
c001bc38:	59                   	pop    ecx
c001bc39:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc3e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc43:	5b                   	pop    ebx
c001bc44:	5e                   	pop    esi
c001bc45:	c3                   	ret    

c001bc46 <sysCallCloseDir(regs*)>:
c001bc46:	53                   	push   ebx
c001bc47:	83 ec 08             	sub    esp,0x8
c001bc4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc4e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bc51:	83 f8 02             	cmp    eax,0x2
c001bc54:	76 47                	jbe    c001bc9d <sysCallCloseDir(regs*)+0x57>
c001bc56:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bc5b:	77 2f                	ja     c001bc8c <sysCallCloseDir(regs*)+0x46>
c001bc5d:	83 ec 0c             	sub    esp,0xc
c001bc60:	50                   	push   eax
c001bc61:	e8 7f 5d ff ff       	call   c00119e5 <getFromFileDescriptor(int)>
c001bc66:	89 c3                	mov    ebx,eax
c001bc68:	89 04 24             	mov    DWORD PTR [esp],eax
c001bc6b:	e8 e6 7c ff ff       	call   c0013956 <Directory::close()>
c001bc70:	83 c4 10             	add    esp,0x10
c001bc73:	85 db                	test   ebx,ebx
c001bc75:	74 0c                	je     c001bc83 <sysCallCloseDir(regs*)+0x3d>
c001bc77:	83 ec 0c             	sub    esp,0xc
c001bc7a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bc7c:	53                   	push   ebx
c001bc7d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bc80:	83 c4 10             	add    esp,0x10
c001bc83:	31 c0                	xor    eax,eax
c001bc85:	31 d2                	xor    edx,edx
c001bc87:	83 c4 08             	add    esp,0x8
c001bc8a:	5b                   	pop    ebx
c001bc8b:	c3                   	ret    
c001bc8c:	83 ec 08             	sub    esp,0x8
c001bc8f:	50                   	push   eax
c001bc90:	68 e8 be 02 c0       	push   0xc002bee8
c001bc95:	e8 f8 71 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001bc9a:	83 c4 10             	add    esp,0x10
c001bc9d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bca2:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bca7:	83 c4 08             	add    esp,0x8
c001bcaa:	5b                   	pop    ebx
c001bcab:	c3                   	ret    

c001bcac <sysCallMakeDir(regs*)>:
c001bcac:	56                   	push   esi
c001bcad:	53                   	push   ebx
c001bcae:	83 ec 10             	sub    esp,0x10
c001bcb1:	68 14 01 00 00       	push   0x114
c001bcb6:	e8 85 3b ff ff       	call   c000f840 <malloc>
c001bcbb:	83 c4 0c             	add    esp,0xc
c001bcbe:	89 c3                	mov    ebx,eax
c001bcc0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bcc5:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bcc8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bccc:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bccf:	53                   	push   ebx
c001bcd0:	e8 c1 7b ff ff       	call   c0013896 <Directory::Directory(char const*, Process*)>
c001bcd5:	83 c4 10             	add    esp,0x10
c001bcd8:	85 db                	test   ebx,ebx
c001bcda:	74 32                	je     c001bd0e <sysCallMakeDir(regs*)+0x62>
c001bcdc:	83 ec 0c             	sub    esp,0xc
c001bcdf:	53                   	push   ebx
c001bce0:	e8 f5 7d ff ff       	call   c0013ada <Directory::create()>
c001bce5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bce8:	89 c6                	mov    esi,eax
c001bcea:	e8 67 7c ff ff       	call   c0013956 <Directory::close()>
c001bcef:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bcf1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bcf4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bcf7:	83 c4 10             	add    esp,0x10
c001bcfa:	31 c0                	xor    eax,eax
c001bcfc:	59                   	pop    ecx
c001bcfd:	85 f6                	test   esi,esi
c001bcff:	5b                   	pop    ebx
c001bd00:	0f 95 c0             	setne  al
c001bd03:	5e                   	pop    esi
c001bd04:	31 d2                	xor    edx,edx
c001bd06:	f7 d8                	neg    eax
c001bd08:	83 d2 00             	adc    edx,0x0
c001bd0b:	f7 da                	neg    edx
c001bd0d:	c3                   	ret    
c001bd0e:	59                   	pop    ecx
c001bd0f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd14:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd19:	5b                   	pop    ebx
c001bd1a:	5e                   	pop    esi
c001bd1b:	c3                   	ret    

c001bd1c <sysCallWait(regs*)>:
c001bd1c:	83 ec 10             	sub    esp,0x10
c001bd1f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bd23:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001bd26:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bd29:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001bd2c:	e8 ec 24 00 00       	call   c001e21d <waitTask(int, int*, int)>
c001bd31:	83 c4 1c             	add    esp,0x1c
c001bd34:	99                   	cdq    
c001bd35:	c3                   	ret    

c001bd36 <sysCallNotImpl(regs*)>:
c001bd36:	83 ec 18             	sub    esp,0x18
c001bd39:	68 fa bd 02 c0       	push   0xc002bdfa
c001bd3e:	e8 2a e8 ff ff       	call   c001a56d <Krnl::panic(char const*)>
c001bd43:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd48:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd4d:	83 c4 1c             	add    esp,0x1c
c001bd50:	c3                   	ret    

c001bd51 <sysPanic(regs*)>:
c001bd51:	83 ec 18             	sub    esp,0x18
c001bd54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bd58:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bd5b:	e8 0d e8 ff ff       	call   c001a56d <Krnl::panic(char const*)>
c001bd60:	c7 04 24 14 be 02 c0 	mov    DWORD PTR [esp],0xc002be14
c001bd67:	e8 01 e8 ff ff       	call   c001a56d <Krnl::panic(char const*)>
c001bd6c:	b8 01 00 00 00       	mov    eax,0x1
c001bd71:	31 d2                	xor    edx,edx
c001bd73:	83 c4 1c             	add    esp,0x1c
c001bd76:	c3                   	ret    

c001bd77 <sysCallRmdir(regs*)>:
c001bd77:	56                   	push   esi
c001bd78:	53                   	push   ebx
c001bd79:	83 ec 20             	sub    esp,0x20
c001bd7c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bd80:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bd83:	68 14 01 00 00       	push   0x114
c001bd88:	e8 b3 3a ff ff       	call   c000f840 <malloc>
c001bd8d:	83 c4 0c             	add    esp,0xc
c001bd90:	89 c3                	mov    ebx,eax
c001bd92:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd97:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bd9a:	56                   	push   esi
c001bd9b:	53                   	push   ebx
c001bd9c:	e8 49 76 ff ff       	call   c00133ea <File::File(char const*, Process*)>
c001bda1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bda4:	e8 1d 78 ff ff       	call   c00135c6 <File::unlink()>
c001bda9:	83 c4 10             	add    esp,0x10
c001bdac:	85 db                	test   ebx,ebx
c001bdae:	74 14                	je     c001bdc4 <sysCallRmdir(regs*)+0x4d>
c001bdb0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bdb4:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bdb6:	83 ec 0c             	sub    esp,0xc
c001bdb9:	53                   	push   ebx
c001bdba:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bdbd:	83 c4 10             	add    esp,0x10
c001bdc0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bdc4:	85 c0                	test   eax,eax
c001bdc6:	0f 95 c0             	setne  al
c001bdc9:	31 d2                	xor    edx,edx
c001bdcb:	0f b6 c0             	movzx  eax,al
c001bdce:	f7 d8                	neg    eax
c001bdd0:	83 d2 00             	adc    edx,0x0
c001bdd3:	83 c4 14             	add    esp,0x14
c001bdd6:	f7 da                	neg    edx
c001bdd8:	5b                   	pop    ebx
c001bdd9:	5e                   	pop    esi
c001bdda:	c3                   	ret    

c001bddb <sysCallUnlink(regs*)>:
c001bddb:	56                   	push   esi
c001bddc:	53                   	push   ebx
c001bddd:	83 ec 20             	sub    esp,0x20
c001bde0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bde4:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bde7:	68 14 01 00 00       	push   0x114
c001bdec:	e8 4f 3a ff ff       	call   c000f840 <malloc>
c001bdf1:	83 c4 0c             	add    esp,0xc
c001bdf4:	89 c3                	mov    ebx,eax
c001bdf6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bdfb:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bdfe:	56                   	push   esi
c001bdff:	53                   	push   ebx
c001be00:	e8 e5 75 ff ff       	call   c00133ea <File::File(char const*, Process*)>
c001be05:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001be08:	e8 b9 77 ff ff       	call   c00135c6 <File::unlink()>
c001be0d:	83 c4 10             	add    esp,0x10
c001be10:	85 db                	test   ebx,ebx
c001be12:	74 14                	je     c001be28 <sysCallUnlink(regs*)+0x4d>
c001be14:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001be18:	8b 13                	mov    edx,DWORD PTR [ebx]
c001be1a:	83 ec 0c             	sub    esp,0xc
c001be1d:	53                   	push   ebx
c001be1e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001be21:	83 c4 10             	add    esp,0x10
c001be24:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001be28:	85 c0                	test   eax,eax
c001be2a:	0f 95 c0             	setne  al
c001be2d:	31 d2                	xor    edx,edx
c001be2f:	0f b6 c0             	movzx  eax,al
c001be32:	f7 d8                	neg    eax
c001be34:	83 d2 00             	adc    edx,0x0
c001be37:	83 c4 14             	add    esp,0x14
c001be3a:	f7 da                	neg    edx
c001be3c:	5b                   	pop    ebx
c001be3d:	5e                   	pop    esi
c001be3e:	c3                   	ret    

c001be3f <sysCallGetArgv(regs*)>:
c001be3f:	83 ec 0c             	sub    esp,0xc
c001be42:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001be46:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001be49:	85 c0                	test   eax,eax
c001be4b:	78 2b                	js     c001be78 <sysCallGetArgv(regs*)+0x39>
c001be4d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001be53:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001be56:	3b 81 36 19 00 00    	cmp    eax,DWORD PTR [ecx+0x1936]
c001be5c:	7d 1a                	jge    c001be78 <sysCallGetArgv(regs*)+0x39>
c001be5e:	8b 84 81 3a 19 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x193a]
c001be65:	85 c0                	test   eax,eax
c001be67:	74 17                	je     c001be80 <sysCallGetArgv(regs*)+0x41>
c001be69:	83 ec 08             	sub    esp,0x8
c001be6c:	50                   	push   eax
c001be6d:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001be70:	e8 bf 49 fe ff       	call   c0000834 <strcpy>
c001be75:	83 c4 10             	add    esp,0x10
c001be78:	31 c0                	xor    eax,eax
c001be7a:	31 d2                	xor    edx,edx
c001be7c:	83 c4 0c             	add    esp,0xc
c001be7f:	c3                   	ret    
c001be80:	b8 01 00 00 00       	mov    eax,0x1
c001be85:	31 d2                	xor    edx,edx
c001be87:	83 c4 0c             	add    esp,0xc
c001be8a:	c3                   	ret    

c001be8b <sysCallTTYName(regs*)>:
c001be8b:	56                   	push   esi
c001be8c:	53                   	push   ebx
c001be8d:	53                   	push   ebx
c001be8e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001be92:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001be95:	85 c0                	test   eax,eax
c001be97:	74 5f                	je     c001bef8 <sysCallTTYName(regs*)+0x6d>
c001be99:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001be9c:	83 f8 02             	cmp    eax,0x2
c001be9f:	77 3e                	ja     c001bedf <sysCallTTYName(regs*)+0x54>
c001bea1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bea6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bea9:	8b 98 26 19 00 00    	mov    ebx,DWORD PTR [eax+0x1926]
c001beaf:	85 db                	test   ebx,ebx
c001beb1:	74 45                	je     c001bef8 <sysCallTTYName(regs*)+0x6d>
c001beb3:	83 ec 0c             	sub    esp,0xc
c001beb6:	8b 03                	mov    eax,DWORD PTR [ebx]
c001beb8:	53                   	push   ebx
c001beb9:	ff 10                	call   DWORD PTR [eax]
c001bebb:	83 c4 10             	add    esp,0x10
c001bebe:	84 c0                	test   al,al
c001bec0:	74 41                	je     c001bf03 <sysCallTTYName(regs*)+0x78>
c001bec2:	83 ec 08             	sub    esp,0x8
c001bec5:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001becb:	53                   	push   ebx
c001becc:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001becf:	e8 60 49 fe ff       	call   c0000834 <strcpy>
c001bed4:	83 c4 10             	add    esp,0x10
c001bed7:	31 c0                	xor    eax,eax
c001bed9:	59                   	pop    ecx
c001beda:	31 d2                	xor    edx,edx
c001bedc:	5b                   	pop    ebx
c001bedd:	5e                   	pop    esi
c001bede:	c3                   	ret    
c001bedf:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bee4:	74 bb                	je     c001bea1 <sysCallTTYName(regs*)+0x16>
c001bee6:	83 ec 0c             	sub    esp,0xc
c001bee9:	50                   	push   eax
c001beea:	e8 f6 5a ff ff       	call   c00119e5 <getFromFileDescriptor(int)>
c001beef:	83 c4 10             	add    esp,0x10
c001bef2:	89 c3                	mov    ebx,eax
c001bef4:	85 db                	test   ebx,ebx
c001bef6:	75 bb                	jne    c001beb3 <sysCallTTYName(regs*)+0x28>
c001bef8:	59                   	pop    ecx
c001bef9:	b8 01 00 00 00       	mov    eax,0x1
c001befe:	31 d2                	xor    edx,edx
c001bf00:	5b                   	pop    ebx
c001bf01:	5e                   	pop    esi
c001bf02:	c3                   	ret    
c001bf03:	59                   	pop    ecx
c001bf04:	b8 02 00 00 00       	mov    eax,0x2
c001bf09:	31 d2                	xor    edx,edx
c001bf0b:	5b                   	pop    ebx
c001bf0c:	5e                   	pop    esi
c001bf0d:	c3                   	ret    

c001bf0e <sysCallUSleep(regs*)>:
c001bf0e:	83 ec 14             	sub    esp,0x14
c001bf11:	b8 e8 03 00 00       	mov    eax,0x3e8
c001bf16:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bf1a:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001bf21:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001bf24:	01 ca                	add    edx,ecx
c001bf26:	52                   	push   edx
c001bf27:	50                   	push   eax
c001bf28:	e8 89 23 00 00       	call   c001e2b6 <nanoSleep(unsigned long long)>
c001bf2d:	31 c0                	xor    eax,eax
c001bf2f:	31 d2                	xor    edx,edx
c001bf31:	83 c4 1c             	add    esp,0x1c
c001bf34:	c3                   	ret    

c001bf35 <sysCallSpawn(regs*)>:
c001bf35:	56                   	push   esi
c001bf36:	53                   	push   ebx
c001bf37:	53                   	push   ebx
c001bf38:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bf3c:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001bf3f:	85 f6                	test   esi,esi
c001bf41:	75 08                	jne    c001bf4b <sysCallSpawn(regs*)+0x16>
c001bf43:	59                   	pop    ecx
c001bf44:	31 c0                	xor    eax,eax
c001bf46:	31 d2                	xor    edx,edx
c001bf48:	5b                   	pop    ebx
c001bf49:	5e                   	pop    esi
c001bf4a:	c3                   	ret    
c001bf4b:	83 ec 0c             	sub    esp,0xc
c001bf4e:	68 3f 1b 00 00       	push   0x1b3f
c001bf53:	e8 e8 38 ff ff       	call   c000f840 <malloc>
c001bf58:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bf5b:	89 c6                	mov    esi,eax
c001bf5d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bf62:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bf65:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bf68:	56                   	push   esi
c001bf69:	e8 44 1a 00 00       	call   c001d9b2 <Process::Process(char const*, Process*, char**)>
c001bf6e:	83 c4 20             	add    esp,0x20
c001bf71:	80 be 3e 1b 00 00 00 	cmp    BYTE PTR [esi+0x1b3e],0x0
c001bf78:	75 c9                	jne    c001bf43 <sysCallSpawn(regs*)+0xe>
c001bf7a:	83 ec 0c             	sub    esp,0xc
c001bf7d:	56                   	push   esi
c001bf7e:	e8 f9 1f 00 00       	call   c001df7c <Process::createUserThread()>
c001bf83:	8b 06                	mov    eax,DWORD PTR [esi]
c001bf85:	83 c4 10             	add    esp,0x10
c001bf88:	99                   	cdq    
c001bf89:	59                   	pop    ecx
c001bf8a:	5b                   	pop    ebx
c001bf8b:	5e                   	pop    esi
c001bf8c:	c3                   	ret    

c001bf8d <sysCallGetEnv(regs*)>:
c001bf8d:	55                   	push   ebp
c001bf8e:	57                   	push   edi
c001bf8f:	56                   	push   esi
c001bf90:	53                   	push   ebx
c001bf91:	83 ec 28             	sub    esp,0x28
c001bf94:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001bf98:	68 23 be 02 c0       	push   0xc002be23
c001bf9d:	e8 f0 6e ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001bfa2:	5f                   	pop    edi
c001bfa3:	8b 5e 24             	mov    ebx,DWORD PTR [esi+0x24]
c001bfa6:	5d                   	pop    ebp
c001bfa7:	53                   	push   ebx
c001bfa8:	68 69 c1 02 c0       	push   0xc002c169
c001bfad:	e8 e0 6e ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001bfb2:	58                   	pop    eax
c001bfb3:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001bfb6:	5a                   	pop    edx
c001bfb7:	57                   	push   edi
c001bfb8:	68 2c be 02 c0       	push   0xc002be2c
c001bfbd:	e8 d0 6e ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001bfc2:	59                   	pop    ecx
c001bfc3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bfc8:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bfcb:	e8 b9 e4 ff ff       	call   c001a489 <Krnl::getProcessTotalEnvCount(Process*)>
c001bfd0:	5a                   	pop    edx
c001bfd1:	89 c5                	mov    ebp,eax
c001bfd3:	59                   	pop    ecx
c001bfd4:	50                   	push   eax
c001bfd5:	68 36 be 02 c0       	push   0xc002be36
c001bfda:	e8 b3 6e ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001bfdf:	83 c4 10             	add    esp,0x10
c001bfe2:	39 ef                	cmp    edi,ebp
c001bfe4:	7c 15                	jl     c001bffb <sysCallGetEnv(regs*)+0x6e>
c001bfe6:	85 db                	test   ebx,ebx
c001bfe8:	75 0c                	jne    c001bff6 <sysCallGetEnv(regs*)+0x69>
c001bfea:	83 c4 1c             	add    esp,0x1c
c001bfed:	31 c0                	xor    eax,eax
c001bfef:	5b                   	pop    ebx
c001bff0:	31 d2                	xor    edx,edx
c001bff2:	5e                   	pop    esi
c001bff3:	5f                   	pop    edi
c001bff4:	5d                   	pop    ebp
c001bff5:	c3                   	ret    
c001bff6:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001bff9:	eb ef                	jmp    c001bfea <sysCallGetEnv(regs*)+0x5d>
c001bffb:	83 ec 0c             	sub    esp,0xc
c001bffe:	68 42 be 02 c0       	push   0xc002be42
c001c003:	e8 8a 6e ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001c008:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c00c:	83 c4 0c             	add    esp,0xc
c001c00f:	57                   	push   edi
c001c010:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c016:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001c019:	50                   	push   eax
c001c01a:	e8 8a e4 ff ff       	call   c001a4a9 <Krnl::getProcessEnvPair(Process*, int)>
c001c01f:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c023:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c027:	68 e8 c1 02 c0       	push   0xc002c1e8
c001c02c:	e8 61 6e ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001c031:	83 c4 10             	add    esp,0x10
c001c034:	8b 76 28             	mov    esi,DWORD PTR [esi+0x28]
c001c037:	85 f6                	test   esi,esi
c001c039:	75 47                	jne    c001c082 <sysCallGetEnv(regs*)+0xf5>
c001c03b:	83 ec 0c             	sub    esp,0xc
c001c03e:	55                   	push   ebp
c001c03f:	e8 50 47 fe ff       	call   c0000794 <strlen>
c001c044:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c047:	89 c3                	mov    ebx,eax
c001c049:	e8 46 47 fe ff       	call   c0000794 <strlen>
c001c04e:	5a                   	pop    edx
c001c04f:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c053:	59                   	pop    ecx
c001c054:	50                   	push   eax
c001c055:	68 45 be 02 c0       	push   0xc002be45
c001c05a:	e8 33 6e ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001c05f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c062:	e8 2d 47 fe ff       	call   c0000794 <strlen>
c001c067:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c06a:	89 c3                	mov    ebx,eax
c001c06c:	e8 23 47 fe ff       	call   c0000794 <strlen>
c001c071:	83 c4 10             	add    esp,0x10
c001c074:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c078:	83 c4 1c             	add    esp,0x1c
c001c07b:	31 d2                	xor    edx,edx
c001c07d:	5b                   	pop    ebx
c001c07e:	5e                   	pop    esi
c001c07f:	5f                   	pop    edi
c001c080:	5d                   	pop    ebp
c001c081:	c3                   	ret    
c001c082:	83 ec 0c             	sub    esp,0xc
c001c085:	68 02 c2 02 c0       	push   0xc002c202
c001c08a:	e8 03 6e ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001c08f:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c092:	58                   	pop    eax
c001c093:	5a                   	pop    edx
c001c094:	55                   	push   ebp
c001c095:	53                   	push   ebx
c001c096:	e8 99 47 fe ff       	call   c0000834 <strcpy>
c001c09b:	59                   	pop    ecx
c001c09c:	5e                   	pop    esi
c001c09d:	68 4f be 02 c0       	push   0xc002be4f
c001c0a2:	53                   	push   ebx
c001c0a3:	e8 cc 48 fe ff       	call   c0000974 <strcat>
c001c0a8:	5d                   	pop    ebp
c001c0a9:	58                   	pop    eax
c001c0aa:	57                   	push   edi
c001c0ab:	53                   	push   ebx
c001c0ac:	e8 c3 48 fe ff       	call   c0000974 <strcat>
c001c0b1:	c7 04 24 1c c2 02 c0 	mov    DWORD PTR [esp],0xc002c21c
c001c0b8:	e8 d5 6d ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001c0bd:	83 c4 10             	add    esp,0x10
c001c0c0:	e9 25 ff ff ff       	jmp    c001bfea <sysCallGetEnv(regs*)+0x5d>

c001c0c5 <sysAppSettings(regs*)>:
c001c0c5:	53                   	push   ebx
c001c0c6:	83 ec 08             	sub    esp,0x8
c001c0c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0cd:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001c0d0:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001c0d6:	25 e0 1f 00 00       	and    eax,0x1fe0
c001c0db:	66 3d c0 09          	cmp    ax,0x9c0
c001c0df:	75 2f                	jne    c001c110 <sysAppSettings(regs*)+0x4b>
c001c0e1:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001c0e7:	83 e0 1f             	and    eax,0x1f
c001c0ea:	3c 01                	cmp    al,0x1
c001c0ec:	74 2e                	je     c001c11c <sysAppSettings(regs*)+0x57>
c001c0ee:	3c 07                	cmp    al,0x7
c001c0f0:	0f 84 bd 00 00 00    	je     c001c1b3 <sysAppSettings(regs*)+0xee>
c001c0f6:	84 c0                	test   al,al
c001c0f8:	0f 84 dc 00 00 00    	je     c001c1da <sysAppSettings(regs*)+0x115>
c001c0fe:	3c 08                	cmp    al,0x8
c001c100:	74 6d                	je     c001c16f <sysAppSettings(regs*)+0xaa>
c001c102:	0f b6 c0             	movzx  eax,al
c001c105:	83 c4 08             	add    esp,0x8
c001c108:	05 e8 03 00 00       	add    eax,0x3e8
c001c10d:	5b                   	pop    ebx
c001c10e:	99                   	cdq    
c001c10f:	c3                   	ret    
c001c110:	b8 01 00 00 00       	mov    eax,0x1
c001c115:	31 d2                	xor    edx,edx
c001c117:	83 c4 08             	add    esp,0x8
c001c11a:	5b                   	pop    ebx
c001c11b:	c3                   	ret    
c001c11c:	51                   	push   ecx
c001c11d:	68 00 01 00 00       	push   0x100
c001c122:	6a 00                	push   0x0
c001c124:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c129:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c12c:	83 c0 0c             	add    eax,0xc
c001c12f:	50                   	push   eax
c001c130:	e8 43 46 fe ff       	call   c0000778 <memset>
c001c135:	83 c4 0c             	add    esp,0xc
c001c138:	68 ff 00 00 00       	push   0xff
c001c13d:	53                   	push   ebx
c001c13e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c143:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c146:	83 c0 0c             	add    eax,0xc
c001c149:	50                   	push   eax
c001c14a:	e8 f5 45 fe ff       	call   c0000744 <memcpy>
c001c14f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c154:	5b                   	pop    ebx
c001c155:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c158:	5a                   	pop    edx
c001c159:	8d 50 0c             	lea    edx,[eax+0xc]
c001c15c:	52                   	push   edx
c001c15d:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001c163:	e8 f8 49 ff ff       	call   c0010b60 <VgaText::setTitle(char*)>
c001c168:	83 c4 10             	add    esp,0x10
c001c16b:	31 c0                	xor    eax,eax
c001c16d:	eb a6                	jmp    c001c115 <sysAppSettings(regs*)+0x50>
c001c16f:	83 ec 08             	sub    esp,0x8
c001c172:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c178:	83 e0 0f             	and    eax,0xf
c001c17b:	50                   	push   eax
c001c17c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c181:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c184:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001c18a:	e8 c1 49 ff ff       	call   c0010b50 <VgaText::setTitleColour(VgaColour)>
c001c18f:	58                   	pop    eax
c001c190:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c196:	5a                   	pop    edx
c001c197:	c1 e8 04             	shr    eax,0x4
c001c19a:	83 e0 0f             	and    eax,0xf
c001c19d:	50                   	push   eax
c001c19e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1a3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1a6:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001c1ac:	e8 8f 49 ff ff       	call   c0010b40 <VgaText::setTitleTextColour(VgaColour)>
c001c1b1:	eb b5                	jmp    c001c168 <sysAppSettings(regs*)+0xa3>
c001c1b3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1b8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1bb:	8b 90 26 19 00 00    	mov    edx,DWORD PTR [eax+0x1926]
c001c1c1:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001c1c7:	c0 e8 06             	shr    al,0x6
c001c1ca:	83 e0 01             	and    eax,0x1
c001c1cd:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001c1d3:	31 c0                	xor    eax,eax
c001c1d5:	e9 3b ff ff ff       	jmp    c001c115 <sysAppSettings(regs*)+0x50>
c001c1da:	b8 02 00 00 00       	mov    eax,0x2
c001c1df:	e9 31 ff ff ff       	jmp    c001c115 <sysAppSettings(regs*)+0x50>

c001c1e4 <sysSetFatAttrib(regs*)>:
c001c1e4:	57                   	push   edi
c001c1e5:	56                   	push   esi
c001c1e6:	53                   	push   ebx
c001c1e7:	83 ec 1c             	sub    esp,0x1c
c001c1ea:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c1ee:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001c1f1:	68 14 01 00 00       	push   0x114
c001c1f6:	e8 45 36 ff ff       	call   c000f840 <malloc>
c001c1fb:	83 c4 0c             	add    esp,0xc
c001c1fe:	89 c3                	mov    ebx,eax
c001c200:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c205:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c208:	57                   	push   edi
c001c209:	53                   	push   ebx
c001c20a:	e8 db 71 ff ff       	call   c00133ea <File::File(char const*, Process*)>
c001c20f:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001c212:	83 c4 0c             	add    esp,0xc
c001c215:	0f b6 d4             	movzx  edx,ah
c001c218:	0f b6 c0             	movzx  eax,al
c001c21b:	52                   	push   edx
c001c21c:	50                   	push   eax
c001c21d:	53                   	push   ebx
c001c21e:	e8 3d 74 ff ff       	call   c0013660 <File::chfatattr(unsigned char, unsigned char)>
c001c223:	83 c4 10             	add    esp,0x10
c001c226:	85 db                	test   ebx,ebx
c001c228:	74 14                	je     c001c23e <sysSetFatAttrib(regs*)+0x5a>
c001c22a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c22e:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c230:	83 ec 0c             	sub    esp,0xc
c001c233:	53                   	push   ebx
c001c234:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c237:	83 c4 10             	add    esp,0x10
c001c23a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c23e:	85 c0                	test   eax,eax
c001c240:	0f 95 c0             	setne  al
c001c243:	31 d2                	xor    edx,edx
c001c245:	0f b6 c0             	movzx  eax,al
c001c248:	f7 d8                	neg    eax
c001c24a:	83 d2 00             	adc    edx,0x0
c001c24d:	83 c4 10             	add    esp,0x10
c001c250:	f7 da                	neg    edx
c001c252:	5b                   	pop    ebx
c001c253:	5e                   	pop    esi
c001c254:	5f                   	pop    edi
c001c255:	c3                   	ret    

c001c256 <sysPipe(regs*)>:
c001c256:	57                   	push   edi
c001c257:	56                   	push   esi
c001c258:	53                   	push   ebx
c001c259:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c25d:	83 ec 0c             	sub    esp,0xc
c001c260:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001c263:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001c266:	6a 20                	push   0x20
c001c268:	e8 d3 35 ff ff       	call   c000f840 <malloc>
c001c26d:	89 c3                	mov    ebx,eax
c001c26f:	58                   	pop    eax
c001c270:	5a                   	pop    edx
c001c271:	68 00 50 00 00       	push   0x5000
c001c276:	53                   	push   ebx
c001c277:	e8 14 42 ff ff       	call   c0010490 <Pipe::Pipe(int)>
c001c27c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c27f:	e8 6c 54 ff ff       	call   c00116f0 <UnixFile::getFileDescriptor()>
c001c284:	89 07                	mov    DWORD PTR [edi],eax
c001c286:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c289:	e8 62 54 ff ff       	call   c00116f0 <UnixFile::getFileDescriptor()>
c001c28e:	83 c4 10             	add    esp,0x10
c001c291:	89 06                	mov    DWORD PTR [esi],eax
c001c293:	31 d2                	xor    edx,edx
c001c295:	5b                   	pop    ebx
c001c296:	31 c0                	xor    eax,eax
c001c298:	5e                   	pop    esi
c001c299:	5f                   	pop    edi
c001c29a:	c3                   	ret    

c001c29b <sysGetUnixTime(regs*)>:
c001c29b:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c001c2a0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c2a6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c2aa:	e9 25 7b ff ff       	jmp    c0013dd4 <Clock::timeInSecondsLocal()>

c001c2af <string_ends_with(char const*, char const*)>:
c001c2af:	57                   	push   edi
c001c2b0:	56                   	push   esi
c001c2b1:	53                   	push   ebx
c001c2b2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c2b6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c2ba:	83 ec 0c             	sub    esp,0xc
c001c2bd:	53                   	push   ebx
c001c2be:	e8 d1 44 fe ff       	call   c0000794 <strlen>
c001c2c3:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c2c6:	89 c6                	mov    esi,eax
c001c2c8:	e8 c7 44 fe ff       	call   c0000794 <strlen>
c001c2cd:	83 c4 10             	add    esp,0x10
c001c2d0:	39 c6                	cmp    esi,eax
c001c2d2:	7d 06                	jge    c001c2da <string_ends_with(char const*, char const*)+0x2b>
c001c2d4:	5b                   	pop    ebx
c001c2d5:	31 c0                	xor    eax,eax
c001c2d7:	5e                   	pop    esi
c001c2d8:	5f                   	pop    edi
c001c2d9:	c3                   	ret    
c001c2da:	83 ec 08             	sub    esp,0x8
c001c2dd:	29 c6                	sub    esi,eax
c001c2df:	57                   	push   edi
c001c2e0:	01 f3                	add    ebx,esi
c001c2e2:	53                   	push   ebx
c001c2e3:	e8 d8 45 fe ff       	call   c00008c0 <strcmp>
c001c2e8:	83 c4 10             	add    esp,0x10
c001c2eb:	85 c0                	test   eax,eax
c001c2ed:	5b                   	pop    ebx
c001c2ee:	0f 94 c0             	sete   al
c001c2f1:	5e                   	pop    esi
c001c2f2:	0f b6 c0             	movzx  eax,al
c001c2f5:	5f                   	pop    edi
c001c2f6:	c3                   	ret    

c001c2f7 <sysCallOpen(regs*)>:
c001c2f7:	56                   	push   esi
c001c2f8:	53                   	push   ebx
c001c2f9:	81 ec 04 01 00 00    	sub    esp,0x104
c001c2ff:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c306:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c309:	85 c9                	test   ecx,ecx
c001c30b:	0f 84 b3 00 00 00    	je     c001c3c4 <sysCallOpen(regs*)+0xcd>
c001c311:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c314:	85 c0                	test   eax,eax
c001c316:	0f 84 a8 00 00 00    	je     c001c3c4 <sysCallOpen(regs*)+0xcd>
c001c31c:	52                   	push   edx
c001c31d:	68 51 be 02 c0       	push   0xc002be51
c001c322:	50                   	push   eax
c001c323:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c327:	56                   	push   esi
c001c328:	e8 13 6f ff ff       	call   c0013240 <Fs::standardiseFiles(char*, char const*, char const*)>
c001c32d:	89 34 24             	mov    DWORD PTR [esp],esi
c001c330:	e8 5f 44 fe ff       	call   c0000794 <strlen>
c001c335:	83 c4 10             	add    esp,0x10
c001c338:	48                   	dec    eax
c001c339:	74 1d                	je     c001c358 <sysCallOpen(regs*)+0x61>
c001c33b:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c33e:	eb 0f                	jmp    c001c34f <sysCallOpen(regs*)+0x58>
c001c340:	80 fa 3a             	cmp    dl,0x3a
c001c343:	74 0f                	je     c001c354 <sysCallOpen(regs*)+0x5d>
c001c345:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c349:	48                   	dec    eax
c001c34a:	74 0c                	je     c001c358 <sysCallOpen(regs*)+0x61>
c001c34c:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c34f:	80 fa 2e             	cmp    dl,0x2e
c001c352:	75 ec                	jne    c001c340 <sysCallOpen(regs*)+0x49>
c001c354:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c358:	83 ec 08             	sub    esp,0x8
c001c35b:	68 55 be 02 c0       	push   0xc002be55
c001c360:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c363:	e8 47 ff ff ff       	call   c001c2af <string_ends_with(char const*, char const*)>
c001c368:	83 c4 10             	add    esp,0x10
c001c36b:	85 c0                	test   eax,eax
c001c36d:	75 17                	jne    c001c386 <sysCallOpen(regs*)+0x8f>
c001c36f:	83 ec 08             	sub    esp,0x8
c001c372:	68 76 be 02 c0       	push   0xc002be76
c001c377:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c37a:	e8 30 ff ff ff       	call   c001c2af <string_ends_with(char const*, char const*)>
c001c37f:	83 c4 10             	add    esp,0x10
c001c382:	85 c0                	test   eax,eax
c001c384:	74 51                	je     c001c3d7 <sysCallOpen(regs*)+0xe0>
c001c386:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c389:	83 ec 08             	sub    esp,0x8
c001c38c:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c392:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c399:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c39c:	ff 30                	push   DWORD PTR [eax]
c001c39e:	68 5a be 02 c0       	push   0xc002be5a
c001c3a3:	e8 ea 6a ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001c3a8:	c7 04 24 69 be 02 c0 	mov    DWORD PTR [esp],0xc002be69
c001c3af:	e8 de 6a ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001c3b4:	83 c4 10             	add    esp,0x10
c001c3b7:	81 c4 04 01 00 00    	add    esp,0x104
c001c3bd:	31 c0                	xor    eax,eax
c001c3bf:	31 d2                	xor    edx,edx
c001c3c1:	5b                   	pop    ebx
c001c3c2:	5e                   	pop    esi
c001c3c3:	c3                   	ret    
c001c3c4:	81 c4 04 01 00 00    	add    esp,0x104
c001c3ca:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c3cf:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c3d4:	5b                   	pop    ebx
c001c3d5:	5e                   	pop    esi
c001c3d6:	c3                   	ret    
c001c3d7:	83 ec 08             	sub    esp,0x8
c001c3da:	68 56 be 02 c0       	push   0xc002be56
c001c3df:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c3e2:	e8 d9 44 fe ff       	call   c00008c0 <strcmp>
c001c3e7:	83 c4 10             	add    esp,0x10
c001c3ea:	85 c0                	test   eax,eax
c001c3ec:	74 98                	je     c001c386 <sysCallOpen(regs*)+0x8f>
c001c3ee:	83 ec 08             	sub    esp,0x8
c001c3f1:	68 55 be 02 c0       	push   0xc002be55
c001c3f6:	56                   	push   esi
c001c3f7:	e8 b3 fe ff ff       	call   c001c2af <string_ends_with(char const*, char const*)>
c001c3fc:	83 c4 10             	add    esp,0x10
c001c3ff:	85 c0                	test   eax,eax
c001c401:	75 83                	jne    c001c386 <sysCallOpen(regs*)+0x8f>
c001c403:	83 ec 08             	sub    esp,0x8
c001c406:	68 7b be 02 c0       	push   0xc002be7b
c001c40b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c40e:	e8 9c fe ff ff       	call   c001c2af <string_ends_with(char const*, char const*)>
c001c413:	83 c4 10             	add    esp,0x10
c001c416:	85 c0                	test   eax,eax
c001c418:	0f 85 d9 00 00 00    	jne    c001c4f7 <sysCallOpen(regs*)+0x200>
c001c41e:	83 ec 08             	sub    esp,0x8
c001c421:	68 80 be 02 c0       	push   0xc002be80
c001c426:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c429:	e8 81 fe ff ff       	call   c001c2af <string_ends_with(char const*, char const*)>
c001c42e:	83 c4 10             	add    esp,0x10
c001c431:	85 c0                	test   eax,eax
c001c433:	0f 85 be 00 00 00    	jne    c001c4f7 <sysCallOpen(regs*)+0x200>
c001c439:	83 ec 08             	sub    esp,0x8
c001c43c:	68 7c be 02 c0       	push   0xc002be7c
c001c441:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c444:	e8 77 44 fe ff       	call   c00008c0 <strcmp>
c001c449:	83 c4 10             	add    esp,0x10
c001c44c:	85 c0                	test   eax,eax
c001c44e:	0f 84 a3 00 00 00    	je     c001c4f7 <sysCallOpen(regs*)+0x200>
c001c454:	83 ec 08             	sub    esp,0x8
c001c457:	68 7b be 02 c0       	push   0xc002be7b
c001c45c:	56                   	push   esi
c001c45d:	e8 4d fe ff ff       	call   c001c2af <string_ends_with(char const*, char const*)>
c001c462:	83 c4 10             	add    esp,0x10
c001c465:	85 c0                	test   eax,eax
c001c467:	0f 85 8a 00 00 00    	jne    c001c4f7 <sysCallOpen(regs*)+0x200>
c001c46d:	83 ec 0c             	sub    esp,0xc
c001c470:	68 14 01 00 00       	push   0x114
c001c475:	e8 c6 33 ff ff       	call   c000f840 <malloc>
c001c47a:	83 c4 0c             	add    esp,0xc
c001c47d:	89 c6                	mov    esi,eax
c001c47f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c484:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c487:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c48a:	56                   	push   esi
c001c48b:	e8 5a 6f ff ff       	call   c00133ea <File::File(char const*, Process*)>
c001c490:	83 c4 10             	add    esp,0x10
c001c493:	85 f6                	test   esi,esi
c001c495:	0f 84 29 ff ff ff    	je     c001c3c4 <sysCallOpen(regs*)+0xcd>
c001c49b:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c49e:	0f b6 c2             	movzx  eax,dl
c001c4a1:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001c4a4:	89 d0                	mov    eax,edx
c001c4a6:	83 e0 01             	and    eax,0x1
c001c4a9:	f6 c2 02             	test   dl,0x2
c001c4ac:	74 03                	je     c001c4b1 <sysCallOpen(regs*)+0x1ba>
c001c4ae:	83 c8 02             	or     eax,0x2
c001c4b1:	f6 c2 04             	test   dl,0x4
c001c4b4:	74 03                	je     c001c4b9 <sysCallOpen(regs*)+0x1c2>
c001c4b6:	83 c8 04             	or     eax,0x4
c001c4b9:	f6 c2 08             	test   dl,0x8
c001c4bc:	74 03                	je     c001c4c1 <sysCallOpen(regs*)+0x1ca>
c001c4be:	83 c8 0a             	or     eax,0xa
c001c4c1:	83 e2 10             	and    edx,0x10
c001c4c4:	74 03                	je     c001c4c9 <sysCallOpen(regs*)+0x1d2>
c001c4c6:	83 c8 12             	or     eax,0x12
c001c4c9:	83 ec 08             	sub    esp,0x8
c001c4cc:	50                   	push   eax
c001c4cd:	56                   	push   esi
c001c4ce:	e8 7b 6f ff ff       	call   c001344e <File::open(FileOpenMode)>
c001c4d3:	83 c4 10             	add    esp,0x10
c001c4d6:	85 c0                	test   eax,eax
c001c4d8:	0f 85 e6 fe ff ff    	jne    c001c3c4 <sysCallOpen(regs*)+0xcd>
c001c4de:	83 ec 0c             	sub    esp,0xc
c001c4e1:	56                   	push   esi
c001c4e2:	e8 09 52 ff ff       	call   c00116f0 <UnixFile::getFileDescriptor()>
c001c4e7:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c4ea:	89 02                	mov    DWORD PTR [edx],eax
c001c4ec:	c1 f8 1f             	sar    eax,0x1f
c001c4ef:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c4f2:	e9 bd fe ff ff       	jmp    c001c3b4 <sysCallOpen(regs*)+0xbd>
c001c4f7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c4fa:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c500:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c507:	e9 ab fe ff ff       	jmp    c001c3b7 <sysCallOpen(regs*)+0xc0>

c001c50c <Sys::loadSyscalls()>:
c001c50c:	c7 05 00 0f 03 c0 19 b6 01 c0 	mov    DWORD PTR ds:0xc0030f00,0xc001b619
c001c516:	c7 05 04 0f 03 c0 02 b2 01 c0 	mov    DWORD PTR ds:0xc0030f04,0xc001b202
c001c520:	c7 05 08 0f 03 c0 6c b3 01 c0 	mov    DWORD PTR ds:0xc0030f08,0xc001b36c
c001c52a:	c7 05 0c 0f 03 c0 4f b5 01 c0 	mov    DWORD PTR ds:0xc0030f0c,0xc001b54f
c001c534:	c7 05 10 0f 03 c0 04 b3 01 c0 	mov    DWORD PTR ds:0xc0030f10,0xc001b304
c001c53e:	c7 05 14 0f 03 c0 39 b2 01 c0 	mov    DWORD PTR ds:0xc0030f14,0xc001b239
c001c548:	c7 05 18 0f 03 c0 1a b2 01 c0 	mov    DWORD PTR ds:0xc0030f18,0xc001b21a
c001c552:	c7 05 1c 0f 03 c0 c1 b3 01 c0 	mov    DWORD PTR ds:0xc0030f1c,0xc001b3c1
c001c55c:	c7 05 24 0f 03 c0 49 bb 01 c0 	mov    DWORD PTR ds:0xc0030f24,0xc001bb49
c001c566:	c7 05 20 0f 03 c0 f7 c2 01 c0 	mov    DWORD PTR ds:0xc0030f20,0xc001c2f7
c001c570:	c7 05 28 0f 03 c0 d1 bb 01 c0 	mov    DWORD PTR ds:0xc0030f28,0xc001bbd1
c001c57a:	c7 05 2c 0f 03 c0 38 b8 01 c0 	mov    DWORD PTR ds:0xc0030f2c,0xc001b838
c001c584:	c7 05 30 0f 03 c0 54 b6 01 c0 	mov    DWORD PTR ds:0xc0030f30,0xc001b654
c001c58e:	c7 05 34 0f 03 c0 59 b6 01 c0 	mov    DWORD PTR ds:0xc0030f34,0xc001b659
c001c598:	c7 05 38 0f 03 c0 ac bc 01 c0 	mov    DWORD PTR ds:0xc0030f38,0xc001bcac
c001c5a2:	c7 05 3c 0f 03 c0 46 bc 01 c0 	mov    DWORD PTR ds:0xc0030f3c,0xc001bc46
c001c5ac:	c7 05 40 0f 03 c0 20 b9 01 c0 	mov    DWORD PTR ds:0xc0030f40,0xc001b920
c001c5b6:	c7 05 44 0f 03 c0 89 b9 01 c0 	mov    DWORD PTR ds:0xc0030f44,0xc001b989
c001c5c0:	c7 05 48 0f 03 c0 06 ba 01 c0 	mov    DWORD PTR ds:0xc0030f48,0xc001ba06
c001c5ca:	c7 05 4c 0f 03 c0 5e b6 01 c0 	mov    DWORD PTR ds:0xc0030f4c,0xc001b65e
c001c5d4:	c7 05 50 0f 03 c0 1c bd 01 c0 	mov    DWORD PTR ds:0xc0030f50,0xc001bd1c
c001c5de:	c7 05 54 0f 03 c0 36 bd 01 c0 	mov    DWORD PTR ds:0xc0030f54,0xc001bd36
c001c5e8:	c7 05 58 0f 03 c0 36 bd 01 c0 	mov    DWORD PTR ds:0xc0030f58,0xc001bd36
c001c5f2:	c7 05 5c 0f 03 c0 77 bd 01 c0 	mov    DWORD PTR ds:0xc0030f5c,0xc001bd77
c001c5fc:	c7 05 60 0f 03 c0 db bd 01 c0 	mov    DWORD PTR ds:0xc0030f60,0xc001bddb
c001c606:	c7 05 64 0f 03 c0 0a b8 01 c0 	mov    DWORD PTR ds:0xc0030f64,0xc001b80a
c001c610:	c7 05 68 0f 03 c0 3f be 01 c0 	mov    DWORD PTR ds:0xc0030f68,0xc001be3f
c001c61a:	c7 05 6c 0f 03 c0 c7 b7 01 c0 	mov    DWORD PTR ds:0xc0030f6c,0xc001b7c7
c001c624:	c7 05 70 0f 03 c0 8b be 01 c0 	mov    DWORD PTR ds:0xc0030f70,0xc001be8b
c001c62e:	c7 05 74 0f 03 c0 c6 b8 01 c0 	mov    DWORD PTR ds:0xc0030f74,0xc001b8c6
c001c638:	c7 05 78 0f 03 c0 0e bf 01 c0 	mov    DWORD PTR ds:0xc0030f78,0xc001bf0e
c001c642:	c7 05 7c 0f 03 c0 89 ba 01 c0 	mov    DWORD PTR ds:0xc0030f7c,0xc001ba89
c001c64c:	c7 05 80 0f 03 c0 35 bf 01 c0 	mov    DWORD PTR ds:0xc0030f80,0xc001bf35
c001c656:	c7 05 84 0f 03 c0 8d bf 01 c0 	mov    DWORD PTR ds:0xc0030f84,0xc001bf8d
c001c660:	c7 05 88 0f 03 c0 c5 c0 01 c0 	mov    DWORD PTR ds:0xc0030f88,0xc001c0c5
c001c66a:	c7 05 8c 0f 03 c0 68 b6 01 c0 	mov    DWORD PTR ds:0xc0030f8c,0xc001b668
c001c674:	c7 05 90 0f 03 c0 d2 b6 01 c0 	mov    DWORD PTR ds:0xc0030f90,0xc001b6d2
c001c67e:	c7 05 94 0f 03 c0 18 b7 01 c0 	mov    DWORD PTR ds:0xc0030f94,0xc001b718
c001c688:	c7 05 98 0f 03 c0 e4 c1 01 c0 	mov    DWORD PTR ds:0xc0030f98,0xc001c1e4
c001c692:	c7 05 9c 0f 03 c0 51 bd 01 c0 	mov    DWORD PTR ds:0xc0030f9c,0xc001bd51
c001c69c:	c7 05 a0 0f 03 c0 69 b7 01 c0 	mov    DWORD PTR ds:0xc0030fa0,0xc001b769
c001c6a6:	c7 05 a4 0f 03 c0 56 c2 01 c0 	mov    DWORD PTR ds:0xc0030fa4,0xc001c256
c001c6b0:	c7 05 a8 0f 03 c0 9b c2 01 c0 	mov    DWORD PTR ds:0xc0030fa8,0xc001c29b
c001c6ba:	c7 05 ac 0f 03 c0 5c b2 01 c0 	mov    DWORD PTR ds:0xc0030fac,0xc001b25c
c001c6c4:	c7 05 b0 0f 03 c0 dd b3 01 c0 	mov    DWORD PTR ds:0xc0030fb0,0xc001b3dd
c001c6ce:	c7 05 b4 0f 03 c0 05 b5 01 c0 	mov    DWORD PTR ds:0xc0030fb4,0xc001b505
c001c6d8:	c7 05 b8 0f 03 c0 cc b1 01 c0 	mov    DWORD PTR ds:0xc0030fb8,0xc001b1cc
c001c6e2:	c7 05 bc 0f 03 c0 b7 b5 01 c0 	mov    DWORD PTR ds:0xc0030fbc,0xc001b5b7
c001c6ec:	c7 05 c0 0f 03 c0 45 b2 01 c0 	mov    DWORD PTR ds:0xc0030fc0,0xc001b245
c001c6f6:	c3                   	ret    

c001c6f7 <Sys::systemCall(regs*, void*)>:
c001c6f7:	53                   	push   ebx
c001c6f8:	83 ec 08             	sub    esp,0x8
c001c6fb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c6ff:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c702:	83 f8 7f             	cmp    eax,0x7f
c001c705:	77 16                	ja     c001c71d <Sys::systemCall(regs*, void*)+0x26>
c001c707:	8b 14 85 00 0f 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf100]
c001c70e:	85 d2                	test   edx,edx
c001c710:	74 0b                	je     c001c71d <Sys::systemCall(regs*, void*)+0x26>
c001c712:	83 ec 0c             	sub    esp,0xc
c001c715:	53                   	push   ebx
c001c716:	ff d2                	call   edx
c001c718:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c71b:	eb 0d                	jmp    c001c72a <Sys::systemCall(regs*, void*)+0x33>
c001c71d:	52                   	push   edx
c001c71e:	52                   	push   edx
c001c71f:	50                   	push   eax
c001c720:	68 85 be 02 c0       	push   0xc002be85
c001c725:	e8 68 67 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001c72a:	83 c4 10             	add    esp,0x10
c001c72d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c732:	31 d2                	xor    edx,edx
c001c734:	83 c4 08             	add    esp,0x8
c001c737:	5b                   	pop    ebx
c001c738:	c3                   	ret    

c001c739 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c739:	55                   	push   ebp
c001c73a:	57                   	push   edi
c001c73b:	56                   	push   esi
c001c73c:	53                   	push   ebx
c001c73d:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c743:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c74a:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c751:	85 c0                	test   eax,eax
c001c753:	0f 95 c1             	setne  cl
c001c756:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c75e:	0f 94 c2             	sete   dl
c001c761:	84 d1                	test   cl,dl
c001c763:	74 23                	je     c001c788 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c765:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c76b:	74 1b                	je     c001c788 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c76d:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c773:	89 da                	mov    edx,ebx
c001c775:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c77b:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c781:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c788:	8b 8c 24 48 10 00 00 	mov    ecx,DWORD PTR [esp+0x1048]
c001c78f:	05 ff 0f 00 00       	add    eax,0xfff
c001c794:	83 ec 0c             	sub    esp,0xc
c001c797:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c79b:	8d a9 ff 0f 00 00    	lea    ebp,[ecx+0xfff]
c001c7a1:	c1 e8 0c             	shr    eax,0xc
c001c7a4:	89 ef                	mov    edi,ebp
c001c7a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c7aa:	c1 ef 0c             	shr    edi,0xc
c001c7ad:	6a 01                	push   0x1
c001c7af:	e8 0d 55 ff ff       	call   c0011cc1 <Virt::allocateKernelVirtualPages(int)>
c001c7b4:	89 c6                	mov    esi,eax
c001c7b6:	58                   	pop    eax
c001c7b7:	5a                   	pop    edx
c001c7b8:	57                   	push   edi
c001c7b9:	68 0b bf 02 c0       	push   0xc002bf0b
c001c7be:	e8 cf 66 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001c7c3:	59                   	pop    ecx
c001c7c4:	58                   	pop    eax
c001c7c5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c7c9:	68 1d bf 02 c0       	push   0xc002bf1d
c001c7ce:	e8 bf 66 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001c7d3:	83 c4 10             	add    esp,0x10
c001c7d6:	81 fd ff 0f 00 00    	cmp    ebp,0xfff
c001c7dc:	0f 86 24 01 00 00    	jbe    c001c906 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cd>
c001c7e2:	c1 e7 0c             	shl    edi,0xc
c001c7e5:	8d 04 1f             	lea    eax,[edi+ebx*1]
c001c7e8:	89 df                	mov    edi,ebx
c001c7ea:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c7ee:	8b ac 24 48 10 00 00 	mov    ebp,DWORD PTR [esp+0x1048]
c001c7f5:	01 dd                	add    ebp,ebx
c001c7f7:	29 fd                	sub    ebp,edi
c001c7f9:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c001c7fd:	0f 84 01 01 00 00    	je     c001c904 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c803:	81 fd 00 10 00 00    	cmp    ebp,0x1000
c001c809:	76 05                	jbe    c001c810 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xd7>
c001c80b:	bd 00 10 00 00       	mov    ebp,0x1000
c001c810:	83 ec 0c             	sub    esp,0xc
c001c813:	31 d2                	xor    edx,edx
c001c815:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c81c:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c81e:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c822:	50                   	push   eax
c001c823:	8d 44 24 30          	lea    eax,[esp+0x30]
c001c827:	50                   	push   eax
c001c828:	52                   	push   edx
c001c829:	55                   	push   ebp
c001c82a:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c831:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c834:	83 c4 20             	add    esp,0x20
c001c837:	85 c0                	test   eax,eax
c001c839:	74 0a                	je     c001c845 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x10c>
c001c83b:	53                   	push   ebx
c001c83c:	53                   	push   ebx
c001c83d:	50                   	push   eax
c001c83e:	68 2f bf 02 c0       	push   0xc002bf2f
c001c843:	eb 0f                	jmp    c001c854 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x11b>
c001c845:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c001c849:	74 20                	je     c001c86b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x132>
c001c84b:	51                   	push   ecx
c001c84c:	51                   	push   ecx
c001c84d:	6a 00                	push   0x0
c001c84f:	68 5a bf 02 c0       	push   0xc002bf5a
c001c854:	e8 39 66 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001c859:	89 34 24             	mov    DWORD PTR [esp],esi
c001c85c:	e8 5a 57 ff ff       	call   c0011fbb <Virt::freeKernelVirtualPages(unsigned long)>
c001c861:	83 c4 10             	add    esp,0x10
c001c864:	31 c0                	xor    eax,eax
c001c866:	e9 55 01 00 00       	jmp    c001c9c0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x287>
c001c86b:	e8 f7 14 00 00       	call   c001dd67 <lockScheduler()>
c001c870:	e8 68 36 ff ff       	call   c000fedd <Phys::allocatePage()>
c001c875:	6a 07                	push   0x7
c001c877:	89 c5                	mov    ebp,eax
c001c879:	56                   	push   esi
c001c87a:	50                   	push   eax
c001c87b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c880:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c883:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c889:	e8 94 5a ff ff       	call   c0012322 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c88e:	83 c4 0c             	add    esp,0xc
c001c891:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c898:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c89e:	6a 00                	push   0x0
c001c8a0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c8a5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c8a8:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c8ae:	e8 d9 58 ff ff       	call   c001218c <VAS::mapOtherVASIn(bool, VAS*)>
c001c8b3:	58                   	pop    eax
c001c8b4:	5a                   	pop    edx
c001c8b5:	68 07 0c 00 00       	push   0xc07
c001c8ba:	57                   	push   edi
c001c8bb:	81 c7 00 10 00 00    	add    edi,0x1000
c001c8c1:	55                   	push   ebp
c001c8c2:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c8c9:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c8cf:	6a 00                	push   0x0
c001c8d1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c8d6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c8d9:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c8df:	e8 f8 5d ff ff       	call   c00126dc <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c8e4:	83 c4 1c             	add    esp,0x1c
c001c8e7:	68 00 10 00 00       	push   0x1000
c001c8ec:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c8f0:	50                   	push   eax
c001c8f1:	56                   	push   esi
c001c8f2:	e8 4d 3e fe ff       	call   c0000744 <memcpy>
c001c8f7:	e8 6d 14 00 00       	call   c001dd69 <unlockScheduler()>
c001c8fc:	83 c4 10             	add    esp,0x10
c001c8ff:	e9 ea fe ff ff       	jmp    c001c7ee <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb5>
c001c904:	89 fb                	mov    ebx,edi
c001c906:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001c90e:	0f 86 9e 00 00 00    	jbe    c001c9b2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c001c914:	e8 4e 14 00 00       	call   c001dd67 <lockScheduler()>
c001c919:	51                   	push   ecx
c001c91a:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c921:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c927:	6a 00                	push   0x0
c001c929:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c92e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c931:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c937:	e8 50 58 ff ff       	call   c001218c <VAS::mapOtherVASIn(bool, VAS*)>
c001c93c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c940:	c1 e7 0c             	shl    edi,0xc
c001c943:	01 df                	add    edi,ebx
c001c945:	83 c4 10             	add    esp,0x10
c001c948:	39 fb                	cmp    ebx,edi
c001c94a:	74 61                	je     c001c9ad <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x274>
c001c94c:	e8 8c 35 ff ff       	call   c000fedd <Phys::allocatePage()>
c001c951:	6a 07                	push   0x7
c001c953:	89 c5                	mov    ebp,eax
c001c955:	56                   	push   esi
c001c956:	50                   	push   eax
c001c957:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c95c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c95f:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c965:	e8 b8 59 ff ff       	call   c0012322 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c96a:	58                   	pop    eax
c001c96b:	5a                   	pop    edx
c001c96c:	68 07 0c 00 00       	push   0xc07
c001c971:	53                   	push   ebx
c001c972:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c978:	55                   	push   ebp
c001c979:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c980:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c986:	6a 00                	push   0x0
c001c988:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c98d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c990:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c996:	e8 41 5d ff ff       	call   c00126dc <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c99b:	83 c4 1c             	add    esp,0x1c
c001c99e:	68 00 10 00 00       	push   0x1000
c001c9a3:	6a 00                	push   0x0
c001c9a5:	56                   	push   esi
c001c9a6:	e8 cd 3d fe ff       	call   c0000778 <memset>
c001c9ab:	eb 98                	jmp    c001c945 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x20c>
c001c9ad:	e8 b7 13 00 00       	call   c001dd69 <unlockScheduler()>
c001c9b2:	83 ec 0c             	sub    esp,0xc
c001c9b5:	56                   	push   esi
c001c9b6:	e8 00 56 ff ff       	call   c0011fbb <Virt::freeKernelVirtualPages(unsigned long)>
c001c9bb:	83 c4 10             	add    esp,0x10
c001c9be:	b0 01                	mov    al,0x1
c001c9c0:	81 c4 2c 10 00 00    	add    esp,0x102c
c001c9c6:	5b                   	pop    ebx
c001c9c7:	5e                   	pop    esi
c001c9c8:	5f                   	pop    edi
c001c9c9:	5d                   	pop    ebp
c001c9ca:	c3                   	ret    

c001c9cb <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001c9cb:	55                   	push   ebp
c001c9cc:	57                   	push   edi
c001c9cd:	56                   	push   esi
c001c9ce:	53                   	push   ebx
c001c9cf:	83 ec 48             	sub    esp,0x48
c001c9d2:	68 14 01 00 00       	push   0x114
c001c9d7:	e8 64 2e ff ff       	call   c000f840 <malloc>
c001c9dc:	83 c4 0c             	add    esp,0xc
c001c9df:	89 c6                	mov    esi,eax
c001c9e1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001c9e5:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001c9e9:	50                   	push   eax
c001c9ea:	e8 fb 69 ff ff       	call   c00133ea <File::File(char const*, Process*)>
c001c9ef:	58                   	pop    eax
c001c9f0:	5a                   	pop    edx
c001c9f1:	6a 01                	push   0x1
c001c9f3:	56                   	push   esi
c001c9f4:	e8 55 6a ff ff       	call   c001344e <File::open(FileOpenMode)>
c001c9f9:	83 c4 10             	add    esp,0x10
c001c9fc:	85 c0                	test   eax,eax
c001c9fe:	0f 85 47 01 00 00    	jne    c001cb4b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ca04:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001ca0c:	83 ec 0c             	sub    esp,0xc
c001ca0f:	6a 34                	push   0x34
c001ca11:	e8 2a 2e ff ff       	call   c000f840 <malloc>
c001ca16:	89 c3                	mov    ebx,eax
c001ca18:	58                   	pop    eax
c001ca19:	8b 06                	mov    eax,DWORD PTR [esi]
c001ca1b:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001ca1f:	57                   	push   edi
c001ca20:	53                   	push   ebx
c001ca21:	6a 00                	push   0x0
c001ca23:	6a 34                	push   0x34
c001ca25:	56                   	push   esi
c001ca26:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ca29:	83 c4 20             	add    esp,0x20
c001ca2c:	85 c0                	test   eax,eax
c001ca2e:	0f 85 17 01 00 00    	jne    c001cb4b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ca34:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001ca3a:	0f 85 0b 01 00 00    	jne    c001cb4b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ca40:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ca43:	85 c0                	test   eax,eax
c001ca45:	0f 84 00 01 00 00    	je     c001cb4b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ca4b:	31 d2                	xor    edx,edx
c001ca4d:	55                   	push   ebp
c001ca4e:	52                   	push   edx
c001ca4f:	50                   	push   eax
c001ca50:	56                   	push   esi
c001ca51:	e8 b6 6a ff ff       	call   c001350c <File::seek(unsigned long long)>
c001ca56:	83 c4 10             	add    esp,0x10
c001ca59:	85 c0                	test   eax,eax
c001ca5b:	0f 85 ea 00 00 00    	jne    c001cb4b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ca61:	83 ec 0c             	sub    esp,0xc
c001ca64:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001ca67:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001ca6b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001ca6f:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001ca73:	0f af c2             	imul   eax,edx
c001ca76:	50                   	push   eax
c001ca77:	e8 c4 2d ff ff       	call   c000f840 <malloc>
c001ca7c:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001ca7e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ca82:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ca85:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ca89:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001ca8d:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001ca91:	0f af c2             	imul   eax,edx
c001ca94:	99                   	cdq    
c001ca95:	52                   	push   edx
c001ca96:	50                   	push   eax
c001ca97:	56                   	push   esi
c001ca98:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ca9b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001ca9e:	83 c4 20             	add    esp,0x20
c001caa1:	85 c0                	test   eax,eax
c001caa3:	0f 84 a2 00 00 00    	je     c001cb4b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001caa9:	31 d2                	xor    edx,edx
c001caab:	51                   	push   ecx
c001caac:	52                   	push   edx
c001caad:	50                   	push   eax
c001caae:	56                   	push   esi
c001caaf:	e8 58 6a ff ff       	call   c001350c <File::seek(unsigned long long)>
c001cab4:	83 c4 10             	add    esp,0x10
c001cab7:	85 c0                	test   eax,eax
c001cab9:	0f 85 8c 00 00 00    	jne    c001cb4b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cabf:	83 ec 0c             	sub    esp,0xc
c001cac2:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cac6:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001caca:	31 ed                	xor    ebp,ebp
c001cacc:	0f af c2             	imul   eax,edx
c001cacf:	50                   	push   eax
c001cad0:	e8 6b 2d ff ff       	call   c000f840 <malloc>
c001cad5:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cad7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cadb:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cade:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cae2:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cae6:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001caea:	0f af c2             	imul   eax,edx
c001caed:	99                   	cdq    
c001caee:	52                   	push   edx
c001caef:	50                   	push   eax
c001caf0:	56                   	push   esi
c001caf1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001caf4:	83 c4 20             	add    esp,0x20
c001caf7:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001caff:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001cb03:	0f 86 80 00 00 00    	jbe    c001cb89 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001cb09:	0f b7 fd             	movzx  edi,bp
c001cb0c:	c1 e7 05             	shl    edi,0x5
c001cb0f:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001cb13:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001cb16:	75 6b                	jne    c001cb83 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cb18:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001cb1b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cb1f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001cb22:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cb26:	52                   	push   edx
c001cb27:	31 d2                	xor    edx,edx
c001cb29:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001cb2c:	52                   	push   edx
c001cb2d:	50                   	push   eax
c001cb2e:	56                   	push   esi
c001cb2f:	e8 d8 69 ff ff       	call   c001350c <File::seek(unsigned long long)>
c001cb34:	83 c4 10             	add    esp,0x10
c001cb37:	85 c0                	test   eax,eax
c001cb39:	74 17                	je     c001cb52 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001cb3b:	83 ec 0c             	sub    esp,0xc
c001cb3e:	68 86 bf 02 c0       	push   0xc002bf86
c001cb43:	e8 4a 63 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001cb48:	83 c4 10             	add    esp,0x10
c001cb4b:	31 c0                	xor    eax,eax
c001cb4d:	e9 87 00 00 00       	jmp    c001cbd9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001cb52:	83 ec 0c             	sub    esp,0xc
c001cb55:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001cb58:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001cb5b:	50                   	push   eax
c001cb5c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001cb60:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cb64:	56                   	push   esi
c001cb65:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001cb69:	e8 cb fb ff ff       	call   c001c739 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001cb6e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cb72:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001cb76:	83 c4 20             	add    esp,0x20
c001cb79:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001cb7d:	73 04                	jae    c001cb83 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cb7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cb83:	45                   	inc    ebp
c001cb84:	e9 76 ff ff ff       	jmp    c001caff <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001cb89:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001cb8d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cb91:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cb95:	89 91 2e 19 00 00    	mov    DWORD PTR [ecx+0x192e],edx
c001cb9b:	83 ec 0c             	sub    esp,0xc
c001cb9e:	8b 91 32 19 00 00    	mov    edx,DWORD PTR [ecx+0x1932]
c001cba4:	25 00 f0 ff ff       	and    eax,0xfffff000
c001cba9:	05 00 10 00 00       	add    eax,0x1000
c001cbae:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001cbb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbb5:	e8 96 2c ff ff       	call   c000f850 <free>
c001cbba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cbbd:	e8 8e 2c ff ff       	call   c000f850 <free>
c001cbc2:	58                   	pop    eax
c001cbc3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cbc7:	e8 84 2c ff ff       	call   c000f850 <free>
c001cbcc:	89 34 24             	mov    DWORD PTR [esp],esi
c001cbcf:	e8 d8 68 ff ff       	call   c00134ac <File::close()>
c001cbd4:	83 c4 10             	add    esp,0x10
c001cbd7:	b0 01                	mov    al,0x1
c001cbd9:	83 c4 3c             	add    esp,0x3c
c001cbdc:	5b                   	pop    ebx
c001cbdd:	5e                   	pop    esi
c001cbde:	5f                   	pop    edi
c001cbdf:	5d                   	pop    ebp
c001cbe0:	c3                   	ret    

c001cbe1 <Thr::runtimeReferenceHelper()>:
c001cbe1:	83 ec 18             	sub    esp,0x18
c001cbe4:	68 8e bf 02 c0       	push   0xc002bf8e
c001cbe9:	e8 a4 62 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001cbee:	fa                   	cli    
c001cbef:	83 c4 10             	add    esp,0x10
c001cbf2:	eb fe                	jmp    c001cbf2 <Thr::runtimeReferenceHelper()+0x11>

c001cbf4 <Thr::getAddressOfKernelSymbol(char const*)>:
c001cbf4:	57                   	push   edi
c001cbf5:	56                   	push   esi
c001cbf6:	53                   	push   ebx
c001cbf7:	31 db                	xor    ebx,ebx
c001cbf9:	39 1d a0 18 03 c0    	cmp    DWORD PTR ds:0xc00318a0,ebx
c001cbff:	7e 3c                	jle    c001cc3d <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001cc01:	8b 34 9d 20 18 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffce7e0]
c001cc08:	31 ff                	xor    edi,edi
c001cc0a:	39 3c 9d 20 17 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffce8e0],edi
c001cc11:	7e 27                	jle    c001cc3a <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001cc13:	50                   	push   eax
c001cc14:	50                   	push   eax
c001cc15:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cc19:	8b 06                	mov    eax,DWORD PTR [esi]
c001cc1b:	03 04 9d a0 17 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffce860]
c001cc22:	50                   	push   eax
c001cc23:	e8 98 3c fe ff       	call   c00008c0 <strcmp>
c001cc28:	83 c4 10             	add    esp,0x10
c001cc2b:	85 c0                	test   eax,eax
c001cc2d:	75 05                	jne    c001cc34 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001cc2f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001cc32:	eb 0b                	jmp    c001cc3f <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001cc34:	83 c6 10             	add    esi,0x10
c001cc37:	47                   	inc    edi
c001cc38:	eb d0                	jmp    c001cc0a <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001cc3a:	43                   	inc    ebx
c001cc3b:	eb bc                	jmp    c001cbf9 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001cc3d:	31 c0                	xor    eax,eax
c001cc3f:	5b                   	pop    ebx
c001cc40:	5e                   	pop    esi
c001cc41:	5f                   	pop    edi
c001cc42:	c3                   	ret    

c001cc43 <Thr::loadKernelSymbolTable(char const*)>:
c001cc43:	55                   	push   ebp
c001cc44:	57                   	push   edi
c001cc45:	56                   	push   esi
c001cc46:	53                   	push   ebx
c001cc47:	83 ec 68             	sub    esp,0x68
c001cc4a:	8b 35 f4 18 03 c0    	mov    esi,DWORD PTR ds:0xc00318f4
c001cc50:	68 14 01 00 00       	push   0x114
c001cc55:	e8 e6 2b ff ff       	call   c000f840 <malloc>
c001cc5a:	83 c4 0c             	add    esp,0xc
c001cc5d:	89 c3                	mov    ebx,eax
c001cc5f:	56                   	push   esi
c001cc60:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001cc64:	50                   	push   eax
c001cc65:	e8 80 67 ff ff       	call   c00133ea <File::File(char const*, Process*)>
c001cc6a:	5e                   	pop    esi
c001cc6b:	5f                   	pop    edi
c001cc6c:	6a 01                	push   0x1
c001cc6e:	53                   	push   ebx
c001cc6f:	e8 da 67 ff ff       	call   c001344e <File::open(FileOpenMode)>
c001cc74:	83 c4 10             	add    esp,0x10
c001cc77:	85 c0                	test   eax,eax
c001cc79:	74 0a                	je     c001cc85 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001cc7b:	83 ec 0c             	sub    esp,0xc
c001cc7e:	68 b0 bf 02 c0       	push   0xc002bfb0
c001cc83:	eb 34                	jmp    c001ccb9 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001cc85:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001cc8d:	83 ec 0c             	sub    esp,0xc
c001cc90:	6a 34                	push   0x34
c001cc92:	e8 a9 2b ff ff       	call   c000f840 <malloc>
c001cc97:	59                   	pop    ecx
c001cc98:	89 c7                	mov    edi,eax
c001cc9a:	8d 74 24 34          	lea    esi,[esp+0x34]
c001cc9e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cca0:	56                   	push   esi
c001cca1:	57                   	push   edi
c001cca2:	6a 00                	push   0x0
c001cca4:	6a 34                	push   0x34
c001cca6:	53                   	push   ebx
c001cca7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ccaa:	83 c4 20             	add    esp,0x20
c001ccad:	85 c0                	test   eax,eax
c001ccaf:	74 17                	je     c001ccc8 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001ccb1:	83 ec 0c             	sub    esp,0xc
c001ccb4:	68 c7 bf 02 c0       	push   0xc002bfc7
c001ccb9:	e8 af d8 ff ff       	call   c001a56d <Krnl::panic(char const*)>
c001ccbe:	83 c4 10             	add    esp,0x10
c001ccc1:	31 c0                	xor    eax,eax
c001ccc3:	e9 31 02 00 00       	jmp    c001cef9 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001ccc8:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001ccce:	75 e1                	jne    c001ccb1 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001ccd0:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001ccd3:	85 c0                	test   eax,eax
c001ccd5:	74 da                	je     c001ccb1 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001ccd7:	52                   	push   edx
c001ccd8:	31 d2                	xor    edx,edx
c001ccda:	52                   	push   edx
c001ccdb:	50                   	push   eax
c001ccdc:	53                   	push   ebx
c001ccdd:	e8 2a 68 ff ff       	call   c001350c <File::seek(unsigned long long)>
c001cce2:	83 c4 10             	add    esp,0x10
c001cce5:	85 c0                	test   eax,eax
c001cce7:	75 c8                	jne    c001ccb1 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cce9:	83 ec 0c             	sub    esp,0xc
c001ccec:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001ccf0:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ccf4:	31 ed                	xor    ebp,ebp
c001ccf6:	0f af c2             	imul   eax,edx
c001ccf9:	50                   	push   eax
c001ccfa:	e8 41 2b ff ff       	call   c000f840 <malloc>
c001ccff:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cd01:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cd05:	89 34 24             	mov    DWORD PTR [esp],esi
c001cd08:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cd0c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cd10:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cd14:	0f af c2             	imul   eax,edx
c001cd17:	99                   	cdq    
c001cd18:	52                   	push   edx
c001cd19:	50                   	push   eax
c001cd1a:	53                   	push   ebx
c001cd1b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cd1e:	83 c4 20             	add    esp,0x20
c001cd21:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cd29:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001cd31:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001cd39:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001cd41:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001cd45:	0f 86 aa 00 00 00    	jbe    c001cdf5 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001cd4b:	0f b7 f5             	movzx  esi,bp
c001cd4e:	6b f6 28             	imul   esi,esi,0x28
c001cd51:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001cd55:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001cd58:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cd5c:	50                   	push   eax
c001cd5d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cd61:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001cd65:	8b 16                	mov    edx,DWORD PTR [esi]
c001cd67:	6b c0 28             	imul   eax,eax,0x28
c001cd6a:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001cd6e:	89 d0                	mov    eax,edx
c001cd70:	31 d2                	xor    edx,edx
c001cd72:	52                   	push   edx
c001cd73:	50                   	push   eax
c001cd74:	53                   	push   ebx
c001cd75:	e8 92 67 ff ff       	call   c001350c <File::seek(unsigned long long)>
c001cd7a:	83 c4 0c             	add    esp,0xc
c001cd7d:	6a 20                	push   0x20
c001cd7f:	6a 00                	push   0x0
c001cd81:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001cd85:	52                   	push   edx
c001cd86:	e8 ed 39 fe ff       	call   c0000778 <memset>
c001cd8b:	58                   	pop    eax
c001cd8c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cd8e:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001cd92:	51                   	push   ecx
c001cd93:	8d 54 24 40          	lea    edx,[esp+0x40]
c001cd97:	52                   	push   edx
c001cd98:	6a 00                	push   0x0
c001cd9a:	6a 1f                	push   0x1f
c001cd9c:	53                   	push   ebx
c001cd9d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cda0:	83 c4 18             	add    esp,0x18
c001cda3:	68 de bf 02 c0       	push   0xc002bfde
c001cda8:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001cdac:	52                   	push   edx
c001cdad:	e8 0e 3b fe ff       	call   c00008c0 <strcmp>
c001cdb2:	83 c4 10             	add    esp,0x10
c001cdb5:	85 c0                	test   eax,eax
c001cdb7:	75 0f                	jne    c001cdc8 <Thr::loadKernelSymbolTable(char const*)+0x185>
c001cdb9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cdbc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cdc0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cdc4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cdc8:	50                   	push   eax
c001cdc9:	50                   	push   eax
c001cdca:	68 e6 bf 02 c0       	push   0xc002bfe6
c001cdcf:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001cdd3:	50                   	push   eax
c001cdd4:	e8 e7 3a fe ff       	call   c00008c0 <strcmp>
c001cdd9:	83 c4 10             	add    esp,0x10
c001cddc:	85 c0                	test   eax,eax
c001cdde:	75 0f                	jne    c001cdef <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001cde0:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cde3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cde7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cdeb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cdef:	45                   	inc    ebp
c001cdf0:	e9 4c ff ff ff       	jmp    c001cd41 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001cdf5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001cdfa:	75 10                	jne    c001ce0c <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001cdfc:	83 ec 0c             	sub    esp,0xc
c001cdff:	68 ee bf 02 c0       	push   0xc002bfee
c001ce04:	e8 64 d7 ff ff       	call   c001a56d <Krnl::panic(char const*)>
c001ce09:	83 c4 10             	add    esp,0x10
c001ce0c:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001ce11:	75 10                	jne    c001ce23 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001ce13:	83 ec 0c             	sub    esp,0xc
c001ce16:	68 ee bf 02 c0       	push   0xc002bfee
c001ce1b:	e8 4d d7 ff ff       	call   c001a56d <Krnl::panic(char const*)>
c001ce20:	83 c4 10             	add    esp,0x10
c001ce23:	31 d2                	xor    edx,edx
c001ce25:	50                   	push   eax
c001ce26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce2a:	52                   	push   edx
c001ce2b:	50                   	push   eax
c001ce2c:	53                   	push   ebx
c001ce2d:	e8 da 66 ff ff       	call   c001350c <File::seek(unsigned long long)>
c001ce32:	5a                   	pop    edx
c001ce33:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ce37:	e8 04 2a ff ff       	call   c000f840 <malloc>
c001ce3c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ce40:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ce44:	31 c9                	xor    ecx,ecx
c001ce46:	5e                   	pop    esi
c001ce47:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ce49:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001ce4d:	55                   	push   ebp
c001ce4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce52:	51                   	push   ecx
c001ce53:	52                   	push   edx
c001ce54:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ce58:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001ce5c:	53                   	push   ebx
c001ce5d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ce60:	83 c4 14             	add    esp,0x14
c001ce63:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ce67:	e8 d4 29 ff ff       	call   c000f840 <malloc>
c001ce6c:	89 c6                	mov    esi,eax
c001ce6e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ce70:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001ce73:	56                   	push   esi
c001ce74:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001ce78:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001ce7c:	51                   	push   ecx
c001ce7d:	52                   	push   edx
c001ce7e:	53                   	push   ebx
c001ce7f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ce82:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ce86:	8b 15 a0 18 03 c0    	mov    edx,DWORD PTR ds:0xc00318a0
c001ce8c:	83 c4 1c             	add    esp,0x1c
c001ce8f:	c1 e8 04             	shr    eax,0x4
c001ce92:	89 04 95 20 17 03 c0 	mov    DWORD PTR [edx*4-0x3ffce8e0],eax
c001ce99:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ce9d:	31 d2                	xor    edx,edx
c001ce9f:	52                   	push   edx
c001cea0:	50                   	push   eax
c001cea1:	53                   	push   ebx
c001cea2:	e8 65 66 ff ff       	call   c001350c <File::seek(unsigned long long)>
c001cea7:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cea9:	31 d2                	xor    edx,edx
c001ceab:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001ceae:	56                   	push   esi
c001ceaf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ceb3:	52                   	push   edx
c001ceb4:	50                   	push   eax
c001ceb5:	53                   	push   ebx
c001ceb6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ceb9:	83 c4 14             	add    esp,0x14
c001cebc:	53                   	push   ebx
c001cebd:	e8 ea 65 ff ff       	call   c00134ac <File::close()>
c001cec2:	5d                   	pop    ebp
c001cec3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cec7:	e8 84 29 ff ff       	call   c000f850 <free>
c001cecc:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cecf:	e8 7c 29 ff ff       	call   c000f850 <free>
c001ced4:	a1 a0 18 03 c0       	mov    eax,ds:0xc00318a0
c001ced9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cedd:	8d 50 01             	lea    edx,[eax+0x1]
c001cee0:	89 0c 85 20 18 03 c0 	mov    DWORD PTR [eax*4-0x3ffce7e0],ecx
c001cee7:	89 34 85 a0 17 03 c0 	mov    DWORD PTR [eax*4-0x3ffce860],esi
c001ceee:	89 15 a0 18 03 c0    	mov    DWORD PTR ds:0xc00318a0,edx
c001cef4:	83 c4 10             	add    esp,0x10
c001cef7:	b0 01                	mov    al,0x1
c001cef9:	83 c4 5c             	add    esp,0x5c
c001cefc:	5b                   	pop    ebx
c001cefd:	5e                   	pop    esi
c001cefe:	5f                   	pop    edi
c001ceff:	5d                   	pop    ebp
c001cf00:	c3                   	ret    

c001cf01 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001cf01:	55                   	push   ebp
c001cf02:	57                   	push   edi
c001cf03:	56                   	push   esi
c001cf04:	53                   	push   ebx
c001cf05:	81 ec 68 03 00 00    	sub    esp,0x368
c001cf0b:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001cf12:	8b 1d f4 18 03 c0    	mov    ebx,DWORD PTR ds:0xc00318f4
c001cf18:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001cf1c:	68 14 01 00 00       	push   0x114
c001cf21:	e8 1a 29 ff ff       	call   c000f840 <malloc>
c001cf26:	83 c4 0c             	add    esp,0xc
c001cf29:	89 c5                	mov    ebp,eax
c001cf2b:	53                   	push   ebx
c001cf2c:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001cf33:	50                   	push   eax
c001cf34:	e8 b1 64 ff ff       	call   c00133ea <File::File(char const*, Process*)>
c001cf39:	5e                   	pop    esi
c001cf3a:	5f                   	pop    edi
c001cf3b:	6a 01                	push   0x1
c001cf3d:	55                   	push   ebp
c001cf3e:	e8 0b 65 ff ff       	call   c001344e <File::open(FileOpenMode)>
c001cf43:	83 c4 10             	add    esp,0x10
c001cf46:	85 c0                	test   eax,eax
c001cf48:	0f 85 8d 06 00 00    	jne    c001d5db <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cf4e:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001cf56:	83 ec 0c             	sub    esp,0xc
c001cf59:	6a 34                	push   0x34
c001cf5b:	e8 e0 28 ff ff       	call   c000f840 <malloc>
c001cf60:	5b                   	pop    ebx
c001cf61:	89 c7                	mov    edi,eax
c001cf63:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001cf67:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cf6a:	53                   	push   ebx
c001cf6b:	57                   	push   edi
c001cf6c:	6a 00                	push   0x0
c001cf6e:	6a 34                	push   0x34
c001cf70:	55                   	push   ebp
c001cf71:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cf74:	83 c4 20             	add    esp,0x20
c001cf77:	85 c0                	test   eax,eax
c001cf79:	0f 85 5c 06 00 00    	jne    c001d5db <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cf7f:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001cf85:	0f 85 50 06 00 00    	jne    c001d5db <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cf8b:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001cf8e:	85 c0                	test   eax,eax
c001cf90:	0f 84 45 06 00 00    	je     c001d5db <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cf96:	31 d2                	xor    edx,edx
c001cf98:	51                   	push   ecx
c001cf99:	52                   	push   edx
c001cf9a:	50                   	push   eax
c001cf9b:	55                   	push   ebp
c001cf9c:	e8 6b 65 ff ff       	call   c001350c <File::seek(unsigned long long)>
c001cfa1:	83 c4 10             	add    esp,0x10
c001cfa4:	85 c0                	test   eax,eax
c001cfa6:	0f 85 2f 06 00 00    	jne    c001d5db <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cfac:	83 ec 0c             	sub    esp,0xc
c001cfaf:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001cfb2:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cfb6:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001cfba:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cfbe:	0f af c2             	imul   eax,edx
c001cfc1:	50                   	push   eax
c001cfc2:	e8 79 28 ff ff       	call   c000f840 <malloc>
c001cfc7:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cfca:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cfce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cfd1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cfd5:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cfd9:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cfdd:	0f af c2             	imul   eax,edx
c001cfe0:	99                   	cdq    
c001cfe1:	52                   	push   edx
c001cfe2:	50                   	push   eax
c001cfe3:	55                   	push   ebp
c001cfe4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cfe7:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001cfea:	83 c4 20             	add    esp,0x20
c001cfed:	85 c0                	test   eax,eax
c001cfef:	0f 84 e6 05 00 00    	je     c001d5db <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cff5:	52                   	push   edx
c001cff6:	31 d2                	xor    edx,edx
c001cff8:	52                   	push   edx
c001cff9:	50                   	push   eax
c001cffa:	55                   	push   ebp
c001cffb:	e8 0c 65 ff ff       	call   c001350c <File::seek(unsigned long long)>
c001d000:	83 c4 10             	add    esp,0x10
c001d003:	85 c0                	test   eax,eax
c001d005:	0f 85 d0 05 00 00    	jne    c001d5db <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d00b:	83 ec 0c             	sub    esp,0xc
c001d00e:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d012:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d016:	31 f6                	xor    esi,esi
c001d018:	0f af c2             	imul   eax,edx
c001d01b:	50                   	push   eax
c001d01c:	e8 1f 28 ff ff       	call   c000f840 <malloc>
c001d021:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d024:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d028:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d02b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d02f:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d033:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d037:	0f af c2             	imul   eax,edx
c001d03a:	99                   	cdq    
c001d03b:	52                   	push   edx
c001d03c:	50                   	push   eax
c001d03d:	55                   	push   ebp
c001d03e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d041:	83 c4 20             	add    esp,0x20
c001d044:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001d048:	0f 86 8a 00 00 00    	jbe    c001d0d8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001d04e:	0f b7 de             	movzx  ebx,si
c001d051:	c1 e3 05             	shl    ebx,0x5
c001d054:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001d058:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001d05b:	75 75                	jne    c001d0d2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001d05d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d060:	31 d2                	xor    edx,edx
c001d062:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d066:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d069:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d06d:	50                   	push   eax
c001d06e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001d071:	52                   	push   edx
c001d072:	50                   	push   eax
c001d073:	55                   	push   ebp
c001d074:	e8 93 64 ff ff       	call   c001350c <File::seek(unsigned long long)>
c001d079:	83 c4 10             	add    esp,0x10
c001d07c:	85 c0                	test   eax,eax
c001d07e:	0f 85 57 05 00 00    	jne    c001d5db <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d084:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001d08b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d08e:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001d092:	31 d2                	xor    edx,edx
c001d094:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d098:	83 ec 0c             	sub    esp,0xc
c001d09b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d09f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d0a6:	50                   	push   eax
c001d0a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d0ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d0af:	52                   	push   edx
c001d0b0:	50                   	push   eax
c001d0b1:	55                   	push   ebp
c001d0b2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d0b5:	83 c4 1c             	add    esp,0x1c
c001d0b8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d0bb:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001d0be:	50                   	push   eax
c001d0bf:	6a 00                	push   0x0
c001d0c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d0c5:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001d0c9:	50                   	push   eax
c001d0ca:	e8 a9 36 fe ff       	call   c0000778 <memset>
c001d0cf:	83 c4 10             	add    esp,0x10
c001d0d2:	46                   	inc    esi
c001d0d3:	e9 6c ff ff ff       	jmp    c001d044 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001d0d8:	53                   	push   ebx
c001d0d9:	31 db                	xor    ebx,ebx
c001d0db:	68 00 01 00 00       	push   0x100
c001d0e0:	6a 00                	push   0x0
c001d0e2:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001d0e6:	50                   	push   eax
c001d0e7:	e8 8c 36 fe ff       	call   c0000778 <memset>
c001d0ec:	83 c4 0c             	add    esp,0xc
c001d0ef:	68 00 01 00 00       	push   0x100
c001d0f4:	6a 00                	push   0x0
c001d0f6:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001d0fd:	50                   	push   eax
c001d0fe:	e8 75 36 fe ff       	call   c0000778 <memset>
c001d103:	83 c4 10             	add    esp,0x10
c001d106:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d10e:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d116:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001d11e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d126:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d12e:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001d132:	0f 86 30 01 00 00    	jbe    c001d268 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001d138:	0f b7 f3             	movzx  esi,bx
c001d13b:	6b f6 28             	imul   esi,esi,0x28
c001d13e:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d142:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d145:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d149:	52                   	push   edx
c001d14a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d14e:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001d152:	8b 06                	mov    eax,DWORD PTR [esi]
c001d154:	6b d2 28             	imul   edx,edx,0x28
c001d157:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001d15b:	31 d2                	xor    edx,edx
c001d15d:	52                   	push   edx
c001d15e:	50                   	push   eax
c001d15f:	55                   	push   ebp
c001d160:	e8 a7 63 ff ff       	call   c001350c <File::seek(unsigned long long)>
c001d165:	83 c4 0c             	add    esp,0xc
c001d168:	6a 20                	push   0x20
c001d16a:	6a 00                	push   0x0
c001d16c:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d173:	51                   	push   ecx
c001d174:	e8 ff 35 fe ff       	call   c0000778 <memset>
c001d179:	59                   	pop    ecx
c001d17a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d17d:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d181:	52                   	push   edx
c001d182:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001d189:	51                   	push   ecx
c001d18a:	6a 00                	push   0x0
c001d18c:	6a 1f                	push   0x1f
c001d18e:	55                   	push   ebp
c001d18f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d192:	83 c4 1c             	add    esp,0x1c
c001d195:	6a 09                	push   0x9
c001d197:	68 08 c0 02 c0       	push   0xc002c008
c001d19c:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d1a3:	51                   	push   ecx
c001d1a4:	e8 97 34 fe ff       	call   c0000640 <memcmp>
c001d1a9:	83 c4 10             	add    esp,0x10
c001d1ac:	85 c0                	test   eax,eax
c001d1ae:	75 21                	jne    c001d1d1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001d1b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d1b4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d1b8:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d1bc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d1c0:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d1c3:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d1ca:	89 d0                	mov    eax,edx
c001d1cc:	40                   	inc    eax
c001d1cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d1d1:	50                   	push   eax
c001d1d2:	6a 09                	push   0x9
c001d1d4:	68 12 c0 02 c0       	push   0xc002c012
c001d1d9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d1e0:	50                   	push   eax
c001d1e1:	e8 5a 34 fe ff       	call   c0000640 <memcmp>
c001d1e6:	83 c4 10             	add    esp,0x10
c001d1e9:	85 c0                	test   eax,eax
c001d1eb:	75 21                	jne    c001d20e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001d1ed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d1f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d1f5:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d1f9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d1fd:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d200:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d207:	89 d0                	mov    eax,edx
c001d209:	40                   	inc    eax
c001d20a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d20e:	50                   	push   eax
c001d20f:	50                   	push   eax
c001d210:	68 de bf 02 c0       	push   0xc002bfde
c001d215:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d21c:	50                   	push   eax
c001d21d:	e8 9e 36 fe ff       	call   c00008c0 <strcmp>
c001d222:	83 c4 10             	add    esp,0x10
c001d225:	85 c0                	test   eax,eax
c001d227:	75 0f                	jne    c001d238 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001d229:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d22c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d230:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d234:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d238:	50                   	push   eax
c001d239:	50                   	push   eax
c001d23a:	68 e6 bf 02 c0       	push   0xc002bfe6
c001d23f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d246:	50                   	push   eax
c001d247:	e8 74 36 fe ff       	call   c00008c0 <strcmp>
c001d24c:	83 c4 10             	add    esp,0x10
c001d24f:	85 c0                	test   eax,eax
c001d251:	75 0f                	jne    c001d262 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001d253:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d256:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d25a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d25e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d262:	43                   	inc    ebx
c001d263:	e9 c6 fe ff ff       	jmp    c001d12e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d268:	31 d2                	xor    edx,edx
c001d26a:	50                   	push   eax
c001d26b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d26f:	52                   	push   edx
c001d270:	50                   	push   eax
c001d271:	55                   	push   ebp
c001d272:	e8 95 62 ff ff       	call   c001350c <File::seek(unsigned long long)>
c001d277:	58                   	pop    eax
c001d278:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d27c:	e8 bf 25 ff ff       	call   c000f840 <malloc>
c001d281:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d284:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d288:	31 d2                	xor    edx,edx
c001d28a:	58                   	pop    eax
c001d28b:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d28f:	53                   	push   ebx
c001d290:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d294:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d298:	52                   	push   edx
c001d299:	50                   	push   eax
c001d29a:	55                   	push   ebp
c001d29b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d29e:	83 c4 14             	add    esp,0x14
c001d2a1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d2a5:	e8 96 25 ff ff       	call   c000f840 <malloc>
c001d2aa:	31 d2                	xor    edx,edx
c001d2ac:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d2b0:	83 c4 0c             	add    esp,0xc
c001d2b3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d2b7:	52                   	push   edx
c001d2b8:	50                   	push   eax
c001d2b9:	55                   	push   ebp
c001d2ba:	e8 4d 62 ff ff       	call   c001350c <File::seek(unsigned long long)>
c001d2bf:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d2c2:	31 d2                	xor    edx,edx
c001d2c4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d2c7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d2cb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d2cf:	52                   	push   edx
c001d2d0:	50                   	push   eax
c001d2d1:	55                   	push   ebp
c001d2d2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d2d5:	83 c4 20             	add    esp,0x20
c001d2d8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d2e0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d2e4:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d2e8:	0f 84 f1 02 00 00    	je     c001d5df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6de>
c001d2ee:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d2f5:	31 d2                	xor    edx,edx
c001d2f7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d2fb:	c1 e8 03             	shr    eax,0x3
c001d2fe:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d302:	51                   	push   ecx
c001d303:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d307:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d30b:	52                   	push   edx
c001d30c:	50                   	push   eax
c001d30d:	55                   	push   ebp
c001d30e:	e8 f9 61 ff ff       	call   c001350c <File::seek(unsigned long long)>
c001d313:	5b                   	pop    ebx
c001d314:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d318:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d31f:	e8 1c 25 ff ff       	call   c000f840 <malloc>
c001d324:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d327:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d32b:	31 d2                	xor    edx,edx
c001d32d:	5e                   	pop    esi
c001d32e:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d332:	50                   	push   eax
c001d333:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d337:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d33b:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d342:	52                   	push   edx
c001d343:	50                   	push   eax
c001d344:	55                   	push   ebp
c001d345:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d348:	83 c4 20             	add    esp,0x20
c001d34b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d353:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d357:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d35b:	0f 8d 62 02 00 00    	jge    c001d5c3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c2>
c001d361:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d365:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d369:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d36e:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d371:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d375:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d379:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d37d:	89 d8                	mov    eax,ebx
c001d37f:	c1 e8 08             	shr    eax,0x8
c001d382:	89 c6                	mov    esi,eax
c001d384:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d388:	c1 e6 04             	shl    esi,0x4
c001d38b:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d38f:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d392:	85 d2                	test   edx,edx
c001d394:	0f 85 bf 00 00 00    	jne    c001d459 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d39a:	83 ec 0c             	sub    esp,0xc
c001d39d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d3a1:	03 06                	add    eax,DWORD PTR [esi]
c001d3a3:	50                   	push   eax
c001d3a4:	e8 4b f8 ff ff       	call   c001cbf4 <Thr::getAddressOfKernelSymbol(char const*)>
c001d3a9:	83 c4 10             	add    esp,0x10
c001d3ac:	89 c2                	mov    edx,eax
c001d3ae:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d3b3:	85 c0                	test   eax,eax
c001d3b5:	0f 85 9e 00 00 00    	jne    c001d459 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d3bb:	83 ec 0c             	sub    esp,0xc
c001d3be:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d3c2:	03 06                	add    eax,DWORD PTR [esi]
c001d3c4:	50                   	push   eax
c001d3c5:	e8 2b 11 ff ff       	call   c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>
c001d3ca:	83 c4 10             	add    esp,0x10
c001d3cd:	89 c2                	mov    edx,eax
c001d3cf:	85 c0                	test   eax,eax
c001d3d1:	0f 85 82 00 00 00    	jne    c001d459 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d3d7:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d3db:	50                   	push   eax
c001d3dc:	50                   	push   eax
c001d3dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3e1:	03 06                	add    eax,DWORD PTR [esi]
c001d3e3:	50                   	push   eax
c001d3e4:	68 1c c0 02 c0       	push   0xc002c01c
c001d3e9:	e8 a4 5a ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001d3ee:	58                   	pop    eax
c001d3ef:	5a                   	pop    edx
c001d3f0:	68 36 c0 02 c0       	push   0xc002c036
c001d3f5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d3fc:	50                   	push   eax
c001d3fd:	e8 32 34 fe ff       	call   c0000834 <strcpy>
c001d402:	59                   	pop    ecx
c001d403:	58                   	pop    eax
c001d404:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d408:	03 06                	add    eax,DWORD PTR [esi]
c001d40a:	50                   	push   eax
c001d40b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d412:	50                   	push   eax
c001d413:	e8 5c 35 fe ff       	call   c0000974 <strcat>
c001d418:	58                   	pop    eax
c001d419:	5a                   	pop    edx
c001d41a:	68 cc c0 02 c0       	push   0xc002c0cc
c001d41f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d426:	50                   	push   eax
c001d427:	e8 48 35 fe ff       	call   c0000974 <strcat>
c001d42c:	83 c4 10             	add    esp,0x10
c001d42f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d434:	0f 84 43 01 00 00    	je     c001d57d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d43a:	83 ec 0c             	sub    esp,0xc
c001d43d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d444:	50                   	push   eax
c001d445:	e8 23 d1 ff ff       	call   c001a56d <Krnl::panic(char const*)>
c001d44a:	83 c4 10             	add    esp,0x10
c001d44d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d451:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d455:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d459:	80 fb 01             	cmp    bl,0x1
c001d45c:	75 7d                	jne    c001d4db <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5da>
c001d45e:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001d465:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d469:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001d46d:	01 ce                	add    esi,ecx
c001d46f:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d475:	0f 94 c0             	sete   al
c001d478:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d47e:	0f 94 c3             	sete   bl
c001d481:	09 c3                	or     ebx,eax
c001d483:	8b 06                	mov    eax,DWORD PTR [esi]
c001d485:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d48a:	74 36                	je     c001d4c2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c1>
c001d48c:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001d48f:	84 db                	test   bl,bl
c001d491:	75 0a                	jne    c001d49d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x59c>
c001d493:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d497:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d49b:	76 37                	jbe    c001d4d4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d49d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001d4a1:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d4a6:	0f 84 d1 00 00 00    	je     c001d57d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d4ac:	83 ec 0c             	sub    esp,0xc
c001d4af:	68 4d c0 02 c0       	push   0xc002c04d
c001d4b4:	e8 b4 d0 ff ff       	call   c001a56d <Krnl::panic(char const*)>
c001d4b9:	83 c4 10             	add    esp,0x10
c001d4bc:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d4c0:	eb 12                	jmp    c001d4d4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d4c2:	01 c1                	add    ecx,eax
c001d4c4:	84 db                	test   bl,bl
c001d4c6:	75 0c                	jne    c001d4d4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d4c8:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d4cc:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d4d0:	77 02                	ja     c001d4d4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d4d2:	01 d1                	add    ecx,edx
c001d4d4:	89 0e                	mov    DWORD PTR [esi],ecx
c001d4d6:	e9 df 00 00 00       	jmp    c001d5ba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d4db:	80 fb 02             	cmp    bl,0x2
c001d4de:	75 71                	jne    c001d551 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x650>
c001d4e0:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d4e7:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d4eb:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001d4ef:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d4f5:	74 15                	je     c001d50c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d4f7:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d4fd:	74 0d                	je     c001d50c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d4ff:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d503:	83 e8 04             	sub    eax,0x4
c001d506:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d50a:	76 1f                	jbe    c001d52b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62a>
c001d50c:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d510:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d515:	74 66                	je     c001d57d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d517:	83 ec 0c             	sub    esp,0xc
c001d51a:	68 69 c0 02 c0       	push   0xc002c069
c001d51f:	e8 49 d0 ff ff       	call   c001a56d <Krnl::panic(char const*)>
c001d524:	83 c4 10             	add    esp,0x10
c001d527:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d52b:	8b 06                	mov    eax,DWORD PTR [esi]
c001d52d:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d532:	74 13                	je     c001d547 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x646>
c001d534:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d538:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d53f:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d543:	01 c8                	add    eax,ecx
c001d545:	eb 04                	jmp    c001d54b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c001d547:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d54b:	01 c2                	add    edx,eax
c001d54d:	89 16                	mov    DWORD PTR [esi],edx
c001d54f:	eb 69                	jmp    c001d5ba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d551:	0f b6 db             	movzx  ebx,bl
c001d554:	50                   	push   eax
c001d555:	50                   	push   eax
c001d556:	53                   	push   ebx
c001d557:	68 85 c0 02 c0       	push   0xc002c085
c001d55c:	e8 31 59 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001d561:	83 c4 10             	add    esp,0x10
c001d564:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d569:	74 12                	je     c001d57d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d56b:	83 ec 0c             	sub    esp,0xc
c001d56e:	68 90 c0 02 c0       	push   0xc002c090
c001d573:	e8 f5 cf ff ff       	call   c001a56d <Krnl::panic(char const*)>
c001d578:	83 c4 10             	add    esp,0x10
c001d57b:	eb 3d                	jmp    c001d5ba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d57d:	83 ec 0c             	sub    esp,0xc
c001d580:	55                   	push   ebp
c001d581:	e8 26 5f ff ff       	call   c00134ac <File::close()>
c001d586:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d589:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d58c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d58f:	59                   	pop    ecx
c001d590:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d594:	e8 b7 22 ff ff       	call   c000f850 <free>
c001d599:	5b                   	pop    ebx
c001d59a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d59e:	e8 ad 22 ff ff       	call   c000f850 <free>
c001d5a3:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d5a6:	e8 a5 22 ff ff       	call   c000f850 <free>
c001d5ab:	5e                   	pop    esi
c001d5ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d5b0:	e8 9b 22 ff ff       	call   c000f850 <free>
c001d5b5:	83 c4 10             	add    esp,0x10
c001d5b8:	eb 21                	jmp    c001d5db <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d5ba:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d5be:	e9 90 fd ff ff       	jmp    c001d353 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d5c3:	83 ec 0c             	sub    esp,0xc
c001d5c6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d5ca:	e8 81 22 ff ff       	call   c000f850 <free>
c001d5cf:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d5d3:	83 c4 10             	add    esp,0x10
c001d5d6:	e9 05 fd ff ff       	jmp    c001d2e0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d5db:	31 c0                	xor    eax,eax
c001d5dd:	eb 33                	jmp    c001d612 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x711>
c001d5df:	83 ec 0c             	sub    esp,0xc
c001d5e2:	55                   	push   ebp
c001d5e3:	e8 c4 5e ff ff       	call   c00134ac <File::close()>
c001d5e8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d5eb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d5ee:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d5f1:	58                   	pop    eax
c001d5f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d5f6:	e8 55 22 ff ff       	call   c000f850 <free>
c001d5fb:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d5fe:	e8 4d 22 ff ff       	call   c000f850 <free>
c001d603:	5a                   	pop    edx
c001d604:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d608:	e8 43 22 ff ff       	call   c000f850 <free>
c001d60d:	83 c4 10             	add    esp,0x10
c001d610:	b0 01                	mov    al,0x1
c001d612:	81 c4 5c 03 00 00    	add    esp,0x35c
c001d618:	5b                   	pop    ebx
c001d619:	5e                   	pop    esi
c001d61a:	5f                   	pop    edi
c001d61b:	5d                   	pop    ebp
c001d61c:	c3                   	ret    

c001d61d <Thr::getDriverBaseFromAddress(unsigned long)>:
c001d61d:	56                   	push   esi
c001d61e:	31 d2                	xor    edx,edx
c001d620:	53                   	push   ebx
c001d621:	8b 1d 00 11 03 c0    	mov    ebx,DWORD PTR ds:0xc0031100
c001d627:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d62b:	39 d3                	cmp    ebx,edx
c001d62d:	7e 1b                	jle    c001d64a <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001d62f:	8b 04 95 20 13 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffcece0]
c001d636:	39 c8                	cmp    eax,ecx
c001d638:	77 0d                	ja     c001d647 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001d63a:	8b 34 95 20 11 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffceee0]
c001d641:	01 c6                	add    esi,eax
c001d643:	39 ce                	cmp    esi,ecx
c001d645:	77 05                	ja     c001d64c <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001d647:	42                   	inc    edx
c001d648:	eb e1                	jmp    c001d62b <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001d64a:	31 c0                	xor    eax,eax
c001d64c:	5b                   	pop    ebx
c001d64d:	5e                   	pop    esi
c001d64e:	c3                   	ret    

c001d64f <Thr::getDriverNameFromAddress(unsigned long)>:
c001d64f:	53                   	push   ebx
c001d650:	31 c0                	xor    eax,eax
c001d652:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d656:	8b 1d 00 11 03 c0    	mov    ebx,DWORD PTR ds:0xc0031100
c001d65c:	39 c3                	cmp    ebx,eax
c001d65e:	7e 22                	jle    c001d682 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001d660:	8b 14 85 20 13 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcece0]
c001d667:	39 ca                	cmp    edx,ecx
c001d669:	77 14                	ja     c001d67f <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d66b:	03 14 85 20 11 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffceee0]
c001d672:	39 ca                	cmp    edx,ecx
c001d674:	76 09                	jbe    c001d67f <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d676:	8b 04 85 20 15 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffceae0]
c001d67d:	eb 05                	jmp    c001d684 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d67f:	40                   	inc    eax
c001d680:	eb da                	jmp    c001d65c <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001d682:	31 c0                	xor    eax,eax
c001d684:	5b                   	pop    ebx
c001d685:	c3                   	ret    

c001d686 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001d686:	53                   	push   ebx
c001d687:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d68b:	53                   	push   ebx
c001d68c:	e8 8c ff ff ff       	call   c001d61d <Thr::getDriverBaseFromAddress(unsigned long)>
c001d691:	5a                   	pop    edx
c001d692:	31 d2                	xor    edx,edx
c001d694:	85 c0                	test   eax,eax
c001d696:	74 04                	je     c001d69c <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d698:	89 da                	mov    edx,ebx
c001d69a:	29 c2                	sub    edx,eax
c001d69c:	89 d0                	mov    eax,edx
c001d69e:	5b                   	pop    ebx
c001d69f:	c3                   	ret    

c001d6a0 <Thr::loadDLL(char const*, bool)>:
c001d6a0:	55                   	push   ebp
c001d6a1:	57                   	push   edi
c001d6a2:	56                   	push   esi
c001d6a3:	53                   	push   ebx
c001d6a4:	81 ec 34 01 00 00    	sub    esp,0x134
c001d6aa:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d6b1:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001d6b8:	56                   	push   esi
c001d6b9:	68 a8 c0 02 c0       	push   0xc002c0a8
c001d6be:	e8 cf 57 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001d6c3:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d6ca:	e8 71 21 ff ff       	call   c000f840 <malloc>
c001d6cf:	83 c4 0c             	add    esp,0xc
c001d6d2:	89 c3                	mov    ebx,eax
c001d6d4:	ff 35 f4 18 03 c0    	push   DWORD PTR ds:0xc00318f4
c001d6da:	56                   	push   esi
c001d6db:	50                   	push   eax
c001d6dc:	e8 09 5d ff ff       	call   c00133ea <File::File(char const*, Process*)>
c001d6e1:	83 c4 10             	add    esp,0x10
c001d6e4:	85 db                	test   ebx,ebx
c001d6e6:	75 3c                	jne    c001d724 <Thr::loadDLL(char const*, bool)+0x84>
c001d6e8:	89 e8                	mov    eax,ebp
c001d6ea:	84 c0                	test   al,al
c001d6ec:	0f 84 f0 01 00 00    	je     c001d8e2 <Thr::loadDLL(char const*, bool)+0x242>
c001d6f2:	50                   	push   eax
c001d6f3:	50                   	push   eax
c001d6f4:	68 b9 c0 02 c0       	push   0xc002c0b9
c001d6f9:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001d6fd:	57                   	push   edi
c001d6fe:	e8 31 31 fe ff       	call   c0000834 <strcpy>
c001d703:	58                   	pop    eax
c001d704:	5a                   	pop    edx
c001d705:	56                   	push   esi
c001d706:	57                   	push   edi
c001d707:	e8 68 32 fe ff       	call   c0000974 <strcat>
c001d70c:	59                   	pop    ecx
c001d70d:	58                   	pop    eax
c001d70e:	68 cc c0 02 c0       	push   0xc002c0cc
c001d713:	57                   	push   edi
c001d714:	e8 5b 32 fe ff       	call   c0000974 <strcat>
c001d719:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d71c:	e8 4c ce ff ff       	call   c001a56d <Krnl::panic(char const*)>
c001d721:	83 c4 10             	add    esp,0x10
c001d724:	50                   	push   eax
c001d725:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d729:	50                   	push   eax
c001d72a:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d72e:	50                   	push   eax
c001d72f:	53                   	push   ebx
c001d730:	e8 c5 5f ff ff       	call   c00136fa <File::stat(unsigned long long*, bool*)>
c001d735:	83 c4 10             	add    esp,0x10
c001d738:	85 db                	test   ebx,ebx
c001d73a:	74 0c                	je     c001d748 <Thr::loadDLL(char const*, bool)+0xa8>
c001d73c:	83 ec 0c             	sub    esp,0xc
c001d73f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d741:	53                   	push   ebx
c001d742:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d745:	83 c4 10             	add    esp,0x10
c001d748:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d74d:	75 0a                	jne    c001d759 <Thr::loadDLL(char const*, bool)+0xb9>
c001d74f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d753:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d757:	75 3c                	jne    c001d795 <Thr::loadDLL(char const*, bool)+0xf5>
c001d759:	89 e8                	mov    eax,ebp
c001d75b:	84 c0                	test   al,al
c001d75d:	0f 84 67 01 00 00    	je     c001d8ca <Thr::loadDLL(char const*, bool)+0x22a>
c001d763:	50                   	push   eax
c001d764:	50                   	push   eax
c001d765:	68 b9 c0 02 c0       	push   0xc002c0b9
c001d76a:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d76e:	53                   	push   ebx
c001d76f:	e8 c0 30 fe ff       	call   c0000834 <strcpy>
c001d774:	58                   	pop    eax
c001d775:	5a                   	pop    edx
c001d776:	56                   	push   esi
c001d777:	53                   	push   ebx
c001d778:	e8 f7 31 fe ff       	call   c0000974 <strcat>
c001d77d:	59                   	pop    ecx
c001d77e:	5f                   	pop    edi
c001d77f:	68 cc c0 02 c0       	push   0xc002c0cc
c001d784:	53                   	push   ebx
c001d785:	e8 ea 31 fe ff       	call   c0000974 <strcat>
c001d78a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d78d:	e8 db cd ff ff       	call   c001a56d <Krnl::panic(char const*)>
c001d792:	83 c4 10             	add    esp,0x10
c001d795:	e8 65 47 ff ff       	call   c0011eff <Virt::getAKernelVAS()>
c001d79a:	51                   	push   ecx
c001d79b:	68 03 08 00 00       	push   0x803
c001d7a0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001d7a4:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d7a8:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001d7ae:	83 d3 00             	adc    ebx,0x0
c001d7b1:	89 ca                	mov    edx,ecx
c001d7b3:	89 d1                	mov    ecx,edx
c001d7b5:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001d7b9:	51                   	push   ecx
c001d7ba:	50                   	push   eax
c001d7bb:	e8 62 4c ff ff       	call   c0012422 <VAS::allocatePages(int, int)>
c001d7c0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001d7c4:	89 c3                	mov    ebx,eax
c001d7c6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d7ca:	05 ff 0f 00 00       	add    eax,0xfff
c001d7cf:	83 d2 00             	adc    edx,0x0
c001d7d2:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d7d6:	c1 ea 0c             	shr    edx,0xc
c001d7d9:	52                   	push   edx
c001d7da:	50                   	push   eax
c001d7db:	53                   	push   ebx
c001d7dc:	68 ce c0 02 c0       	push   0xc002c0ce
c001d7e1:	e8 ac 56 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001d7e6:	83 c4 14             	add    esp,0x14
c001d7e9:	56                   	push   esi
c001d7ea:	e8 a5 2f fe ff       	call   c0000794 <strlen>
c001d7ef:	8b 3d 00 11 03 c0    	mov    edi,DWORD PTR ds:0xc0031100
c001d7f5:	40                   	inc    eax
c001d7f6:	89 04 24             	mov    DWORD PTR [esp],eax
c001d7f9:	e8 42 20 ff ff       	call   c000f840 <malloc>
c001d7fe:	89 04 bd 20 15 03 c0 	mov    DWORD PTR [edi*4-0x3ffceae0],eax
c001d805:	5f                   	pop    edi
c001d806:	58                   	pop    eax
c001d807:	a1 00 11 03 c0       	mov    eax,ds:0xc0031100
c001d80c:	56                   	push   esi
c001d80d:	ff 34 85 20 15 03 c0 	push   DWORD PTR [eax*4-0x3ffceae0]
c001d814:	e8 1b 30 fe ff       	call   c0000834 <strcpy>
c001d819:	a1 00 11 03 c0       	mov    eax,ds:0xc0031100
c001d81e:	8d 50 01             	lea    edx,[eax+0x1]
c001d821:	89 1c 85 20 13 03 c0 	mov    DWORD PTR [eax*4-0x3ffcece0],ebx
c001d828:	89 15 00 11 03 c0    	mov    DWORD PTR ds:0xc0031100,edx
c001d82e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d832:	83 c4 0c             	add    esp,0xc
c001d835:	89 14 85 20 11 03 c0 	mov    DWORD PTR [eax*4-0x3ffceee0],edx
c001d83c:	6a 01                	push   0x1
c001d83e:	53                   	push   ebx
c001d83f:	56                   	push   esi
c001d840:	e8 bc f6 ff ff       	call   c001cf01 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d845:	83 c4 10             	add    esp,0x10
c001d848:	89 c7                	mov    edi,eax
c001d84a:	84 c0                	test   al,al
c001d84c:	0f 85 8c 00 00 00    	jne    c001d8de <Thr::loadDLL(char const*, bool)+0x23e>
c001d852:	89 e8                	mov    eax,ebp
c001d854:	84 c0                	test   al,al
c001d856:	74 76                	je     c001d8ce <Thr::loadDLL(char const*, bool)+0x22e>
c001d858:	83 ec 0c             	sub    esp,0xc
c001d85b:	68 f2 c0 02 c0       	push   0xc002c0f2
c001d860:	e8 08 cd ff ff       	call   c001a56d <Krnl::panic(char const*)>
c001d865:	83 c4 10             	add    esp,0x10
c001d868:	eb 64                	jmp    c001d8ce <Thr::loadDLL(char const*, bool)+0x22e>
c001d86a:	e8 90 46 ff ff       	call   c0011eff <Virt::getAKernelVAS()>
c001d86f:	89 f5                	mov    ebp,esi
c001d871:	c1 e5 0c             	shl    ebp,0xc
c001d874:	52                   	push   edx
c001d875:	01 dd                	add    ebp,ebx
c001d877:	52                   	push   edx
c001d878:	55                   	push   ebp
c001d879:	50                   	push   eax
c001d87a:	e8 1d 47 ff ff       	call   c0011f9c <VAS::getPageTableEntry(unsigned long)>
c001d87f:	83 c4 10             	add    esp,0x10
c001d882:	f6 00 60             	test   BYTE PTR [eax],0x60
c001d885:	75 0c                	jne    c001d893 <Thr::loadDLL(char const*, bool)+0x1f3>
c001d887:	83 ec 0c             	sub    esp,0xc
c001d88a:	55                   	push   ebp
c001d88b:	e8 c3 25 ff ff       	call   c000fe53 <Phys::freePage(unsigned long)>
c001d890:	83 c4 10             	add    esp,0x10
c001d893:	46                   	inc    esi
c001d894:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d898:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d89c:	05 ff 0f 00 00       	add    eax,0xfff
c001d8a1:	83 d2 00             	adc    edx,0x0
c001d8a4:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d8a8:	c1 ea 0c             	shr    edx,0xc
c001d8ab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d8af:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d8b3:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001d8b7:	ba 00 00 00 00       	mov    edx,0x0
c001d8bc:	89 d0                	mov    eax,edx
c001d8be:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001d8c2:	72 a6                	jb     c001d86a <Thr::loadDLL(char const*, bool)+0x1ca>
c001d8c4:	89 f8                	mov    eax,edi
c001d8c6:	84 c0                	test   al,al
c001d8c8:	75 18                	jne    c001d8e2 <Thr::loadDLL(char const*, bool)+0x242>
c001d8ca:	31 db                	xor    ebx,ebx
c001d8cc:	eb 14                	jmp    c001d8e2 <Thr::loadDLL(char const*, bool)+0x242>
c001d8ce:	83 ec 0c             	sub    esp,0xc
c001d8d1:	68 11 c1 02 c0       	push   0xc002c111
c001d8d6:	e8 92 cc ff ff       	call   c001a56d <Krnl::panic(char const*)>
c001d8db:	83 c4 10             	add    esp,0x10
c001d8de:	31 f6                	xor    esi,esi
c001d8e0:	eb b2                	jmp    c001d894 <Thr::loadDLL(char const*, bool)+0x1f4>
c001d8e2:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d8e8:	89 d8                	mov    eax,ebx
c001d8ea:	5b                   	pop    ebx
c001d8eb:	5e                   	pop    esi
c001d8ec:	5f                   	pop    edi
c001d8ed:	5d                   	pop    ebp
c001d8ee:	c3                   	ret    

c001d8ef <Thr::executeDLL(unsigned long, void*)>:
c001d8ef:	56                   	push   esi
c001d8f0:	53                   	push   ebx
c001d8f1:	52                   	push   edx
c001d8f2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d8f6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d8fa:	85 db                	test   ebx,ebx
c001d8fc:	75 10                	jne    c001d90e <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d8fe:	83 ec 0c             	sub    esp,0xc
c001d901:	68 2d c1 02 c0       	push   0xc002c12d
c001d906:	e8 62 cc ff ff       	call   c001a56d <Krnl::panic(char const*)>
c001d90b:	83 c4 10             	add    esp,0x10
c001d90e:	50                   	push   eax
c001d90f:	50                   	push   eax
c001d910:	53                   	push   ebx
c001d911:	68 57 c1 02 c0       	push   0xc002c157
c001d916:	e8 77 55 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001d91b:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d91f:	89 d8                	mov    eax,ebx
c001d921:	83 c4 14             	add    esp,0x14
c001d924:	5b                   	pop    ebx
c001d925:	5e                   	pop    esi
c001d926:	ff e0                	jmp    eax

c001d928 <changeTSS>:
c001d928:	83 ec 14             	sub    esp,0x14
c001d92b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d930:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d933:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d938:	c1 e2 15             	shl    edx,0x15
c001d93b:	29 d0                	sub    eax,edx
c001d93d:	50                   	push   eax
c001d93e:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c001d943:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d949:	05 7c 11 00 00       	add    eax,0x117c
c001d94e:	50                   	push   eax
c001d94f:	e8 26 3b ff ff       	call   c001147a <TSS::setESP(unsigned long)>
c001d954:	83 c4 1c             	add    esp,0x1c
c001d957:	c3                   	ret    

c001d958 <Process::addArgs(char**)>:
c001d958:	57                   	push   edi
c001d959:	56                   	push   esi
c001d95a:	53                   	push   ebx
c001d95b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d95f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d963:	c7 86 36 19 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1936],0x0
c001d96d:	85 ff                	test   edi,edi
c001d96f:	74 3d                	je     c001d9ae <Process::addArgs(char**)+0x56>
c001d971:	8b 07                	mov    eax,DWORD PTR [edi]
c001d973:	85 c0                	test   eax,eax
c001d975:	74 37                	je     c001d9ae <Process::addArgs(char**)+0x56>
c001d977:	31 db                	xor    ebx,ebx
c001d979:	83 ec 0c             	sub    esp,0xc
c001d97c:	50                   	push   eax
c001d97d:	e8 12 2e fe ff       	call   c0000794 <strlen>
c001d982:	40                   	inc    eax
c001d983:	89 04 24             	mov    DWORD PTR [esp],eax
c001d986:	e8 b5 1e ff ff       	call   c000f840 <malloc>
c001d98b:	89 84 9e 3a 19 00 00 	mov    DWORD PTR [esi+ebx*4+0x193a],eax
c001d992:	5a                   	pop    edx
c001d993:	59                   	pop    ecx
c001d994:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001d997:	43                   	inc    ebx
c001d998:	50                   	push   eax
c001d999:	e8 96 2e fe ff       	call   c0000834 <strcpy>
c001d99e:	ff 86 36 19 00 00    	inc    DWORD PTR [esi+0x1936]
c001d9a4:	83 c4 10             	add    esp,0x10
c001d9a7:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d9aa:	85 c0                	test   eax,eax
c001d9ac:	75 cb                	jne    c001d979 <Process::addArgs(char**)+0x21>
c001d9ae:	5b                   	pop    ebx
c001d9af:	5e                   	pop    esi
c001d9b0:	5f                   	pop    edi
c001d9b1:	c3                   	ret    

c001d9b2 <Process::Process(char const*, Process*, char**)>:
c001d9b2:	56                   	push   esi
c001d9b3:	53                   	push   ebx
c001d9b4:	83 ec 14             	sub    esp,0x14
c001d9b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9bb:	05 0c 02 00 00       	add    eax,0x20c
c001d9c0:	bb 07 00 00 00       	mov    ebx,0x7
c001d9c5:	89 c6                	mov    esi,eax
c001d9c7:	85 db                	test   ebx,ebx
c001d9c9:	78 15                	js     c001d9e0 <Process::Process(char const*, Process*, char**)+0x2e>
c001d9cb:	83 ec 0c             	sub    esp,0xc
c001d9ce:	56                   	push   esi
c001d9cf:	e8 4e b2 00 00       	call   c0028c22 <ThreadControlBlock::ThreadControlBlock()>
c001d9d4:	83 c4 10             	add    esp,0x10
c001d9d7:	81 c6 e3 02 00 00    	add    esi,0x2e3
c001d9dd:	4b                   	dec    ebx
c001d9de:	eb e7                	jmp    c001d9c7 <Process::Process(char const*, Process*, char**)+0x15>
c001d9e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9e4:	c6 80 3e 1b 00 00 00 	mov    BYTE PTR [eax+0x1b3e],0x0
c001d9eb:	83 ec 0c             	sub    esp,0xc
c001d9ee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d9f2:	e8 c7 c9 ff ff       	call   c001a3be <Krnl::newProcessEnv(Process*)>
c001d9f7:	83 c4 10             	add    esp,0x10
c001d9fa:	89 c2                	mov    edx,eax
c001d9fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da00:	89 90 3a 1b 00 00    	mov    DWORD PTR [eax+0x1b3a],edx
c001da06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da0a:	66 c7 80 24 19 00 00 00 00 	mov    WORD PTR [eax+0x1924],0x0
c001da13:	a1 10 d9 02 c0       	mov    eax,ds:0xc002d910
c001da18:	8d 50 01             	lea    edx,[eax+0x1]
c001da1b:	89 15 10 d9 02 c0    	mov    DWORD PTR ds:0xc002d910,edx
c001da21:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001da25:	89 02                	mov    DWORD PTR [edx],eax
c001da27:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001da2f:	83 ec 0c             	sub    esp,0xc
c001da32:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001da36:	e8 05 1e ff ff       	call   c000f840 <malloc>
c001da3b:	83 c4 10             	add    esp,0x10
c001da3e:	89 c3                	mov    ebx,eax
c001da40:	83 ec 08             	sub    esp,0x8
c001da43:	6a 00                	push   0x0
c001da45:	53                   	push   ebx
c001da46:	e8 7f 4d ff ff       	call   c00127ca <VAS::VAS(bool)>
c001da4b:	83 c4 10             	add    esp,0x10
c001da4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da52:	89 98 32 19 00 00    	mov    DWORD PTR [eax+0x1932],ebx
c001da58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da5c:	c7 80 36 19 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1936],0x0
c001da66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da6a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001da6e:	89 90 2a 19 00 00    	mov    DWORD PTR [eax+0x192a],edx
c001da74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da78:	8b 80 2a 19 00 00    	mov    eax,DWORD PTR [eax+0x192a]
c001da7e:	85 c0                	test   eax,eax
c001da80:	74 42                	je     c001dac4 <Process::Process(char const*, Process*, char**)+0x112>
c001da82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da86:	8b 80 2a 19 00 00    	mov    eax,DWORD PTR [eax+0x192a]
c001da8c:	8b 90 26 19 00 00    	mov    edx,DWORD PTR [eax+0x1926]
c001da92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da96:	89 90 26 19 00 00    	mov    DWORD PTR [eax+0x1926],edx
c001da9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001daa0:	8b 80 2a 19 00 00    	mov    eax,DWORD PTR [eax+0x192a]
c001daa6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001daac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dab0:	05 0c 01 00 00       	add    eax,0x10c
c001dab5:	83 ec 08             	sub    esp,0x8
c001dab8:	52                   	push   edx
c001dab9:	50                   	push   eax
c001daba:	e8 75 2d fe ff       	call   c0000834 <strcpy>
c001dabf:	83 c4 10             	add    esp,0x10
c001dac2:	eb 63                	jmp    c001db27 <Process::Process(char const*, Process*, char**)+0x175>
c001dac4:	c7 44 24 04 60 12 00 00 	mov    DWORD PTR [esp+0x4],0x1260
c001dacc:	83 ec 0c             	sub    esp,0xc
c001dacf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001dad3:	e8 68 1d ff ff       	call   c000f840 <malloc>
c001dad8:	83 c4 10             	add    esp,0x10
c001dadb:	89 c3                	mov    ebx,eax
c001dadd:	83 ec 08             	sub    esp,0x8
c001dae0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dae4:	53                   	push   ebx
c001dae5:	e8 8e 36 ff ff       	call   c0011178 <VgaText::VgaText(char const*)>
c001daea:	83 c4 10             	add    esp,0x10
c001daed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001daf1:	89 98 26 19 00 00    	mov    DWORD PTR [eax+0x1926],ebx
c001daf7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dafb:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c001db01:	83 ec 0c             	sub    esp,0xc
c001db04:	50                   	push   eax
c001db05:	e8 61 2a ff ff       	call   c001056b <addToTerminalCycle(VgaText*)>
c001db0a:	83 c4 10             	add    esp,0x10
c001db0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db11:	05 0c 01 00 00       	add    eax,0x10c
c001db16:	83 ec 08             	sub    esp,0x8
c001db19:	68 76 c1 02 c0       	push   0xc002c176
c001db1e:	50                   	push   eax
c001db1f:	e8 10 2d fe ff       	call   c0000834 <strcpy>
c001db24:	83 c4 10             	add    esp,0x10
c001db27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db2b:	83 c0 0c             	add    eax,0xc
c001db2e:	83 ec 08             	sub    esp,0x8
c001db31:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001db35:	50                   	push   eax
c001db36:	e8 f9 2c fe ff       	call   c0000834 <strcpy>
c001db3b:	83 c4 10             	add    esp,0x10
c001db3e:	83 ec 08             	sub    esp,0x8
c001db41:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001db45:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001db49:	e8 0a fe ff ff       	call   c001d958 <Process::addArgs(char**)>
c001db4e:	83 c4 10             	add    esp,0x10
c001db51:	83 ec 08             	sub    esp,0x8
c001db54:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001db58:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001db5c:	e8 6a ee ff ff       	call   c001c9cb <Thr::loadProgramIntoMemory(Process*, char const*)>
c001db61:	83 c4 10             	add    esp,0x10
c001db64:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001db68:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001db6c:	83 f0 01             	xor    eax,0x1
c001db6f:	88 c2                	mov    dl,al
c001db71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db75:	88 90 3e 1b 00 00    	mov    BYTE PTR [eax+0x1b3e],dl
c001db7b:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001db80:	83 ec 08             	sub    esp,0x8
c001db83:	50                   	push   eax
c001db84:	68 74 c2 02 c0       	push   0xc002c274
c001db89:	e8 04 53 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001db8e:	83 c4 10             	add    esp,0x10
c001db91:	90                   	nop
c001db92:	83 c4 14             	add    esp,0x14
c001db95:	5b                   	pop    ebx
c001db96:	5e                   	pop    esi
c001db97:	c3                   	ret    

c001db98 <Process::Process(bool, char const*, Process*, char**)>:
c001db98:	56                   	push   esi
c001db99:	53                   	push   ebx
c001db9a:	83 ec 24             	sub    esp,0x24
c001db9d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001dba1:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001dba5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dba9:	05 0c 02 00 00       	add    eax,0x20c
c001dbae:	bb 07 00 00 00       	mov    ebx,0x7
c001dbb3:	89 c6                	mov    esi,eax
c001dbb5:	85 db                	test   ebx,ebx
c001dbb7:	78 15                	js     c001dbce <Process::Process(bool, char const*, Process*, char**)+0x36>
c001dbb9:	83 ec 0c             	sub    esp,0xc
c001dbbc:	56                   	push   esi
c001dbbd:	e8 60 b0 00 00       	call   c0028c22 <ThreadControlBlock::ThreadControlBlock()>
c001dbc2:	83 c4 10             	add    esp,0x10
c001dbc5:	81 c6 e3 02 00 00    	add    esi,0x2e3
c001dbcb:	4b                   	dec    ebx
c001dbcc:	eb e7                	jmp    c001dbb5 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001dbce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dbd2:	c6 80 3e 1b 00 00 00 	mov    BYTE PTR [eax+0x1b3e],0x0
c001dbd9:	83 ec 0c             	sub    esp,0xc
c001dbdc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dbe0:	e8 d9 c7 ff ff       	call   c001a3be <Krnl::newProcessEnv(Process*)>
c001dbe5:	83 c4 10             	add    esp,0x10
c001dbe8:	89 c2                	mov    edx,eax
c001dbea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dbee:	89 90 3a 1b 00 00    	mov    DWORD PTR [eax+0x1b3a],edx
c001dbf4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dbf8:	66 c7 80 24 19 00 00 00 00 	mov    WORD PTR [eax+0x1924],0x0
c001dc01:	a1 10 d9 02 c0       	mov    eax,ds:0xc002d910
c001dc06:	8d 50 01             	lea    edx,[eax+0x1]
c001dc09:	89 15 10 d9 02 c0    	mov    DWORD PTR ds:0xc002d910,edx
c001dc0f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001dc13:	89 02                	mov    DWORD PTR [edx],eax
c001dc15:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001dc1d:	83 ec 0c             	sub    esp,0xc
c001dc20:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001dc24:	e8 17 1c ff ff       	call   c000f840 <malloc>
c001dc29:	83 c4 10             	add    esp,0x10
c001dc2c:	89 c3                	mov    ebx,eax
c001dc2e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001dc33:	83 ec 08             	sub    esp,0x8
c001dc36:	50                   	push   eax
c001dc37:	53                   	push   ebx
c001dc38:	e8 8d 4b ff ff       	call   c00127ca <VAS::VAS(bool)>
c001dc3d:	83 c4 10             	add    esp,0x10
c001dc40:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc44:	89 98 32 19 00 00    	mov    DWORD PTR [eax+0x1932],ebx
c001dc4a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc4e:	c7 80 36 19 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1936],0x0
c001dc58:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc5c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001dc60:	89 90 2a 19 00 00    	mov    DWORD PTR [eax+0x192a],edx
c001dc66:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc6a:	8b 80 2a 19 00 00    	mov    eax,DWORD PTR [eax+0x192a]
c001dc70:	85 c0                	test   eax,eax
c001dc72:	74 42                	je     c001dcb6 <Process::Process(bool, char const*, Process*, char**)+0x11e>
c001dc74:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc78:	8b 80 2a 19 00 00    	mov    eax,DWORD PTR [eax+0x192a]
c001dc7e:	8b 90 26 19 00 00    	mov    edx,DWORD PTR [eax+0x1926]
c001dc84:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc88:	89 90 26 19 00 00    	mov    DWORD PTR [eax+0x1926],edx
c001dc8e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc92:	8b 80 2a 19 00 00    	mov    eax,DWORD PTR [eax+0x192a]
c001dc98:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001dc9e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dca2:	05 0c 01 00 00       	add    eax,0x10c
c001dca7:	83 ec 08             	sub    esp,0x8
c001dcaa:	52                   	push   edx
c001dcab:	50                   	push   eax
c001dcac:	e8 83 2b fe ff       	call   c0000834 <strcpy>
c001dcb1:	83 c4 10             	add    esp,0x10
c001dcb4:	eb 63                	jmp    c001dd19 <Process::Process(bool, char const*, Process*, char**)+0x181>
c001dcb6:	c7 44 24 18 60 12 00 00 	mov    DWORD PTR [esp+0x18],0x1260
c001dcbe:	83 ec 0c             	sub    esp,0xc
c001dcc1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001dcc5:	e8 76 1b ff ff       	call   c000f840 <malloc>
c001dcca:	83 c4 10             	add    esp,0x10
c001dccd:	89 c3                	mov    ebx,eax
c001dccf:	83 ec 08             	sub    esp,0x8
c001dcd2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001dcd6:	53                   	push   ebx
c001dcd7:	e8 9c 34 ff ff       	call   c0011178 <VgaText::VgaText(char const*)>
c001dcdc:	83 c4 10             	add    esp,0x10
c001dcdf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dce3:	89 98 26 19 00 00    	mov    DWORD PTR [eax+0x1926],ebx
c001dce9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dced:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c001dcf3:	83 ec 0c             	sub    esp,0xc
c001dcf6:	50                   	push   eax
c001dcf7:	e8 6f 28 ff ff       	call   c001056b <addToTerminalCycle(VgaText*)>
c001dcfc:	83 c4 10             	add    esp,0x10
c001dcff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd03:	05 0c 01 00 00       	add    eax,0x10c
c001dd08:	83 ec 08             	sub    esp,0x8
c001dd0b:	68 76 c1 02 c0       	push   0xc002c176
c001dd10:	50                   	push   eax
c001dd11:	e8 1e 2b fe ff       	call   c0000834 <strcpy>
c001dd16:	83 c4 10             	add    esp,0x10
c001dd19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd1d:	83 c0 0c             	add    eax,0xc
c001dd20:	83 ec 08             	sub    esp,0x8
c001dd23:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001dd27:	50                   	push   eax
c001dd28:	e8 07 2b fe ff       	call   c0000834 <strcpy>
c001dd2d:	83 c4 10             	add    esp,0x10
c001dd30:	83 ec 08             	sub    esp,0x8
c001dd33:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001dd37:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dd3b:	e8 18 fc ff ff       	call   c001d958 <Process::addArgs(char**)>
c001dd40:	83 c4 10             	add    esp,0x10
c001dd43:	90                   	nop
c001dd44:	83 c4 24             	add    esp,0x24
c001dd47:	5b                   	pop    ebx
c001dd48:	5e                   	pop    esi
c001dd49:	c3                   	ret    

c001dd4a <disableIRQs()>:
c001dd4a:	fa                   	cli    
c001dd4b:	ff 05 cc 18 03 c0    	inc    DWORD PTR ds:0xc00318cc
c001dd51:	c3                   	ret    

c001dd52 <getIRQNestingLevel()>:
c001dd52:	a1 cc 18 03 c0       	mov    eax,ds:0xc00318cc
c001dd57:	c3                   	ret    

c001dd58 <enableIRQs()>:
c001dd58:	a1 cc 18 03 c0       	mov    eax,ds:0xc00318cc
c001dd5d:	48                   	dec    eax
c001dd5e:	a3 cc 18 03 c0       	mov    ds:0xc00318cc,eax
c001dd63:	75 01                	jne    c001dd66 <enableIRQs()+0xe>
c001dd65:	fb                   	sti    
c001dd66:	c3                   	ret    

c001dd67 <lockScheduler()>:
c001dd67:	eb e1                	jmp    c001dd4a <disableIRQs()>

c001dd69 <unlockScheduler()>:
c001dd69:	eb ed                	jmp    c001dd58 <enableIRQs()>

c001dd6b <userModeEntryPoint(void*)>:
c001dd6b:	83 ec 0c             	sub    esp,0xc
c001dd6e:	e8 f6 ff ff ff       	call   c001dd69 <unlockScheduler()>
c001dd73:	fb                   	sti    
c001dd74:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd79:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001dd7c:	8b 80 2e 19 00 00    	mov    eax,DWORD PTR [eax+0x192e]
c001dd82:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001dd86:	83 c4 0c             	add    esp,0xc
c001dd89:	e9 9c 25 fe ff       	jmp    c000032a <goToUsermode>

c001dd8e <lockStuff()>:
c001dd8e:	e8 b7 ff ff ff       	call   c001dd4a <disableIRQs()>
c001dd93:	ff 05 c8 18 03 c0    	inc    DWORD PTR ds:0xc00318c8
c001dd99:	c3                   	ret    

c001dd9a <taskStartupFunction>:
c001dd9a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd9f:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001dda2:	c3                   	ret    

c001dda3 <updateTimeUsed()>:
c001dda3:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c001dda8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ddae:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001ddb5:	74 50                	je     c001de07 <updateTimeUsed()+0x64>
c001ddb7:	57                   	push   edi
c001ddb8:	56                   	push   esi
c001ddb9:	53                   	push   ebx
c001ddba:	0f 31                	rdtsc  
c001ddbc:	89 c1                	mov    ecx,eax
c001ddbe:	a3 08 19 03 c0       	mov    ds:0xc0031908,eax
c001ddc3:	2b 0d f8 18 03 c0    	sub    ecx,DWORD PTR ds:0xc00318f8
c001ddc9:	89 d3                	mov    ebx,edx
c001ddcb:	89 0d 00 19 03 c0    	mov    DWORD PTR ds:0xc0031900,ecx
c001ddd1:	1b 1d fc 18 03 c0    	sbb    ebx,DWORD PTR ds:0xc00318fc
c001ddd7:	a3 f8 18 03 c0       	mov    ds:0xc00318f8,eax
c001dddc:	89 1d 04 19 03 c0    	mov    DWORD PTR ds:0xc0031904,ebx
c001dde2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dde7:	89 15 0c 19 03 c0    	mov    DWORD PTR ds:0xc003190c,edx
c001dded:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001ddf0:	89 15 fc 18 03 c0    	mov    DWORD PTR ds:0xc00318fc,edx
c001ddf6:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001ddf9:	01 f1                	add    ecx,esi
c001ddfb:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001ddfe:	11 fb                	adc    ebx,edi
c001de00:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001de03:	5b                   	pop    ebx
c001de04:	5e                   	pop    esi
c001de05:	5f                   	pop    edi
c001de06:	c3                   	ret    
c001de07:	c3                   	ret    

c001de08 <switchToThread(ThreadControlBlock*)>:
c001de08:	53                   	push   ebx
c001de09:	83 ec 08             	sub    esp,0x8
c001de0c:	a1 c8 18 03 c0       	mov    eax,ds:0xc00318c8
c001de11:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001de15:	85 c0                	test   eax,eax
c001de17:	75 30                	jne    c001de49 <switchToThread(ThreadControlBlock*)+0x41>
c001de19:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001de1c:	3c ff                	cmp    al,0xff
c001de1e:	74 25                	je     c001de45 <switchToThread(ThreadControlBlock*)+0x3d>
c001de20:	0f b6 d0             	movzx  edx,al
c001de23:	b8 84 03 00 00       	mov    eax,0x384
c001de28:	29 d0                	sub    eax,edx
c001de2a:	c1 e0 10             	shl    eax,0x10
c001de2d:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001de30:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001de33:	e8 6b ff ff ff       	call   c001dda3 <updateTimeUsed()>
c001de38:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001de3c:	83 c4 08             	add    esp,0x8
c001de3f:	5b                   	pop    ebx
c001de40:	e9 1d 25 fe ff       	jmp    c0000362 <switchToThreadASM>
c001de45:	31 c0                	xor    eax,eax
c001de47:	eb e7                	jmp    c001de30 <switchToThread(ThreadControlBlock*)+0x28>
c001de49:	c7 05 c4 18 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00318c4,0x1
c001de53:	83 c4 08             	add    esp,0x8
c001de56:	5b                   	pop    ebx
c001de57:	c3                   	ret    

c001de58 <Semaphore::Semaphore(int)>:
c001de58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de5c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001de60:	89 10                	mov    DWORD PTR [eax],edx
c001de62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de66:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001de6d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de71:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001de78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de7c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001de83:	90                   	nop
c001de84:	c3                   	ret    
c001de85:	90                   	nop

c001de86 <Mutex::Mutex()>:
c001de86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de8a:	6a 01                	push   0x1
c001de8c:	50                   	push   eax
c001de8d:	e8 c6 ff ff ff       	call   c001de58 <Semaphore::Semaphore(int)>
c001de92:	83 c4 08             	add    esp,0x8
c001de95:	90                   	nop
c001de96:	c3                   	ret    
c001de97:	90                   	nop

c001de98 <Process::createThread(void (*)(void*), void*, int)>:
c001de98:	55                   	push   ebp
c001de99:	31 c9                	xor    ecx,ecx
c001de9b:	57                   	push   edi
c001de9c:	56                   	push   esi
c001de9d:	53                   	push   ebx
c001de9e:	83 ec 1c             	sub    esp,0x1c
c001dea1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001dea5:	66 8b b3 24 19 00 00 	mov    si,WORD PTR [ebx+0x1924]
c001deac:	89 f2                	mov    edx,esi
c001deae:	0f b7 c2             	movzx  eax,dx
c001deb1:	83 e2 01             	and    edx,0x1
c001deb4:	74 14                	je     c001deca <Process::createThread(void (*)(void*), void*, int)+0x32>
c001deb6:	d1 f8                	sar    eax,1
c001deb8:	41                   	inc    ecx
c001deb9:	89 c2                	mov    edx,eax
c001debb:	83 f9 10             	cmp    ecx,0x10
c001debe:	75 ee                	jne    c001deae <Process::createThread(void (*)(void*), void*, int)+0x16>
c001dec0:	83 c4 1c             	add    esp,0x1c
c001dec3:	31 c0                	xor    eax,eax
c001dec5:	5b                   	pop    ebx
c001dec6:	5e                   	pop    esi
c001dec7:	5f                   	pop    edi
c001dec8:	5d                   	pop    ebp
c001dec9:	c3                   	ret    
c001deca:	83 ec 08             	sub    esp,0x8
c001decd:	b8 01 00 00 00       	mov    eax,0x1
c001ded2:	d3 e0                	shl    eax,cl
c001ded4:	09 c6                	or     esi,eax
c001ded6:	8b 83 32 19 00 00    	mov    eax,DWORD PTR [ebx+0x1932]
c001dedc:	66 89 b3 24 19 00 00 	mov    WORD PTR [ebx+0x1924],si
c001dee3:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001dee6:	8d 04 89             	lea    eax,[ecx+ecx*4]
c001dee9:	8d 04 c1             	lea    eax,[ecx+eax*8]
c001deec:	8d 34 c0             	lea    esi,[eax+eax*8]
c001deef:	01 f6                	add    esi,esi
c001def1:	01 ce                	add    esi,ecx
c001def3:	8d 04 33             	lea    eax,[ebx+esi*1]
c001def6:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001defc:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001df02:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001df06:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001df0c:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001df12:	89 ca                	mov    edx,ecx
c001df14:	f7 da                	neg    edx
c001df16:	c1 e2 15             	shl    edx,0x15
c001df19:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001df1f:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001df25:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001df29:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001df33:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001df39:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001df3d:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001df43:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001df4d:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001df57:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001df5e:	50                   	push   eax
c001df5f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001df63:	68 e8 18 03 c0       	push   0xc00318e8
c001df68:	e8 43 ab 00 00       	call   c0028ab0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001df6d:	83 c4 10             	add    esp,0x10
c001df70:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001df74:	83 c4 1c             	add    esp,0x1c
c001df77:	5b                   	pop    ebx
c001df78:	5e                   	pop    esi
c001df79:	5f                   	pop    edi
c001df7a:	5d                   	pop    ebp
c001df7b:	c3                   	ret    

c001df7c <Process::createUserThread()>:
c001df7c:	83 ec 0c             	sub    esp,0xc
c001df7f:	68 80 00 00 00       	push   0x80
c001df84:	6a 00                	push   0x0
c001df86:	68 6b dd 01 c0       	push   0xc001dd6b
c001df8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001df8f:	e8 04 ff ff ff       	call   c001de98 <Process::createThread(void (*)(void*), void*, int)>
c001df94:	83 c4 1c             	add    esp,0x1c
c001df97:	c3                   	ret    

c001df98 <setupMultitasking(void (*)())>:
c001df98:	56                   	push   esi
c001df99:	53                   	push   ebx
c001df9a:	53                   	push   ebx
c001df9b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001df9f:	eb 10                	jmp    c001dfb1 <setupMultitasking(void (*)())+0x19>
c001dfa1:	83 ec 0c             	sub    esp,0xc
c001dfa4:	68 e8 18 03 c0       	push   0xc00318e8
c001dfa9:	e8 54 aa 00 00       	call   c0028a02 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001dfae:	83 c4 10             	add    esp,0x10
c001dfb1:	83 ec 0c             	sub    esp,0xc
c001dfb4:	68 e8 18 03 c0       	push   0xc00318e8
c001dfb9:	e8 28 aa 00 00       	call   c00289e6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001dfbe:	83 c4 10             	add    esp,0x10
c001dfc1:	84 c0                	test   al,al
c001dfc3:	74 dc                	je     c001dfa1 <setupMultitasking(void (*)())+0x9>
c001dfc5:	83 ec 0c             	sub    esp,0xc
c001dfc8:	68 3f 1b 00 00       	push   0x1b3f
c001dfcd:	e8 6e 18 ff ff       	call   c000f840 <malloc>
c001dfd2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001dfd9:	89 c3                	mov    ebx,eax
c001dfdb:	6a 00                	push   0x0
c001dfdd:	68 7a c1 02 c0       	push   0xc002c17a
c001dfe2:	6a 01                	push   0x1
c001dfe4:	50                   	push   eax
c001dfe5:	e8 ae fb ff ff       	call   c001db98 <Process::Process(bool, char const*, Process*, char**)>
c001dfea:	83 c4 18             	add    esp,0x18
c001dfed:	89 1d f4 18 03 c0    	mov    DWORD PTR ds:0xc00318f4,ebx
c001dff3:	ff b3 26 19 00 00    	push   DWORD PTR [ebx+0x1926]
c001dff9:	68 9c c2 02 c0       	push   0xc002c29c
c001dffe:	e8 8f 4e ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001e003:	58                   	pop    eax
c001e004:	ff b3 26 19 00 00    	push   DWORD PTR [ebx+0x1926]
c001e00a:	e8 de 2c ff ff       	call   c0010ced <setActiveTerminal(VgaText*)>
c001e00f:	66 83 8b 24 19 00 00 01 	or     WORD PTR [ebx+0x1924],0x1
c001e017:	8b 83 32 19 00 00    	mov    eax,DWORD PTR [ebx+0x1932]
c001e01d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001e020:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001e02a:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001e030:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001e036:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001e040:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001e04a:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001e054:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001e05a:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001e060:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001e06a:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001e070:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001e07a:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001e080:	5a                   	pop    edx
c001e081:	59                   	pop    ecx
c001e082:	68 76 c1 02 c0       	push   0xc002c176
c001e087:	50                   	push   eax
c001e088:	e8 a7 27 fe ff       	call   c0000834 <strcpy>
c001e08d:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001e094:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001e098:	83 c4 14             	add    esp,0x14
c001e09b:	5b                   	pop    ebx
c001e09c:	5e                   	pop    esi
c001e09d:	e9 b2 22 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001e0a2 <schedule()>:
c001e0a2:	a1 c8 18 03 c0       	mov    eax,ds:0xc00318c8
c001e0a7:	85 c0                	test   eax,eax
c001e0a9:	74 0b                	je     c001e0b6 <schedule()+0x14>
c001e0ab:	c7 05 c4 18 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00318c4,0x1
c001e0b5:	c3                   	ret    
c001e0b6:	53                   	push   ebx
c001e0b7:	83 ec 14             	sub    esp,0x14
c001e0ba:	68 e8 18 03 c0       	push   0xc00318e8
c001e0bf:	e8 22 a9 00 00       	call   c00289e6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e0c4:	83 c4 10             	add    esp,0x10
c001e0c7:	84 c0                	test   al,al
c001e0c9:	75 38                	jne    c001e103 <schedule()+0x61>
c001e0cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e0d0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e0d3:	4a                   	dec    edx
c001e0d4:	74 32                	je     c001e108 <schedule()+0x66>
c001e0d6:	83 ec 0c             	sub    esp,0xc
c001e0d9:	68 e8 18 03 c0       	push   0xc00318e8
c001e0de:	e8 fb a8 00 00       	call   c00289de <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e0e3:	c7 04 24 e8 18 03 c0 	mov    DWORD PTR [esp],0xc00318e8
c001e0ea:	89 c3                	mov    ebx,eax
c001e0ec:	e8 11 a9 00 00       	call   c0028a02 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e0f1:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001e0f8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e0fb:	e8 08 fd ff ff       	call   c001de08 <switchToThread(ThreadControlBlock*)>
c001e100:	83 c4 10             	add    esp,0x10
c001e103:	83 c4 08             	add    esp,0x8
c001e106:	5b                   	pop    ebx
c001e107:	c3                   	ret    
c001e108:	83 ec 08             	sub    esp,0x8
c001e10b:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001e112:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e118:	68 e8 18 03 c0       	push   0xc00318e8
c001e11d:	e8 8e a9 00 00       	call   c0028ab0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e122:	83 c4 10             	add    esp,0x10
c001e125:	eb af                	jmp    c001e0d6 <schedule()+0x34>

c001e127 <unlockStuff()>:
c001e127:	a1 c8 18 03 c0       	mov    eax,ds:0xc00318c8
c001e12c:	48                   	dec    eax
c001e12d:	a3 c8 18 03 c0       	mov    ds:0xc00318c8,eax
c001e132:	75 09                	jne    c001e13d <unlockStuff()+0x16>
c001e134:	a1 c4 18 03 c0       	mov    eax,ds:0xc00318c4
c001e139:	85 c0                	test   eax,eax
c001e13b:	75 05                	jne    c001e142 <unlockStuff()+0x1b>
c001e13d:	e9 16 fc ff ff       	jmp    c001dd58 <enableIRQs()>
c001e142:	83 ec 0c             	sub    esp,0xc
c001e145:	c7 05 c4 18 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00318c4,0x0
c001e14f:	e8 4e ff ff ff       	call   c001e0a2 <schedule()>
c001e154:	83 c4 0c             	add    esp,0xc
c001e157:	e9 fc fb ff ff       	jmp    c001dd58 <enableIRQs()>

c001e15c <Semaphore::tryAcquire()>:
c001e15c:	83 ec 0c             	sub    esp,0xc
c001e15f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e163:	e8 26 fc ff ff       	call   c001dd8e <lockStuff()>
c001e168:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e16b:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e16d:	7c 0b                	jl     c001e17a <Semaphore::tryAcquire()+0x1e>
c001e16f:	e8 b3 ff ff ff       	call   c001e127 <unlockStuff()>
c001e174:	31 c0                	xor    eax,eax
c001e176:	83 c4 0c             	add    esp,0xc
c001e179:	c3                   	ret    
c001e17a:	42                   	inc    edx
c001e17b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e17e:	e8 a4 ff ff ff       	call   c001e127 <unlockStuff()>
c001e183:	b0 01                	mov    al,0x1
c001e185:	83 c4 0c             	add    esp,0xc
c001e188:	c3                   	ret    
c001e189:	90                   	nop

c001e18a <Semaphore::assertLocked(char const*)>:
c001e18a:	83 ec 0c             	sub    esp,0xc
c001e18d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e191:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e195:	e8 f4 fb ff ff       	call   c001dd8e <lockStuff()>
c001e19a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e19c:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001e19f:	7c 05                	jl     c001e1a6 <Semaphore::assertLocked(char const*)+0x1c>
c001e1a1:	83 c4 0c             	add    esp,0xc
c001e1a4:	eb 81                	jmp    c001e127 <unlockStuff()>
c001e1a6:	83 ec 0c             	sub    esp,0xc
c001e1a9:	52                   	push   edx
c001e1aa:	e8 be c3 ff ff       	call   c001a56d <Krnl::panic(char const*)>
c001e1af:	83 c4 10             	add    esp,0x10
c001e1b2:	83 c4 0c             	add    esp,0xc
c001e1b5:	e9 6d ff ff ff       	jmp    c001e127 <unlockStuff()>

c001e1ba <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001e1ba:	83 ec 0c             	sub    esp,0xc
c001e1bd:	e8 90 fb ff ff       	call   c001dd52 <getIRQNestingLevel()>
c001e1c2:	83 ec 08             	sub    esp,0x8
c001e1c5:	50                   	push   eax
c001e1c6:	68 d0 c2 02 c0       	push   0xc002c2d0
c001e1cb:	e8 c2 4c ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001e1d0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e1d4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e1d9:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e1dc:	e8 c1 fe ff ff       	call   c001e0a2 <schedule()>
c001e1e1:	e8 83 fb ff ff       	call   c001dd69 <unlockScheduler()>
c001e1e6:	e8 67 fb ff ff       	call   c001dd52 <getIRQNestingLevel()>
c001e1eb:	5a                   	pop    edx
c001e1ec:	59                   	pop    ecx
c001e1ed:	50                   	push   eax
c001e1ee:	68 04 c3 02 c0       	push   0xc002c304
c001e1f3:	e8 9a 4c ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001e1f8:	83 c4 1c             	add    esp,0x1c
c001e1fb:	c3                   	ret    

c001e1fc <blockTask(TaskState)>:
c001e1fc:	83 ec 0c             	sub    esp,0xc
c001e1ff:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e203:	e8 5f fb ff ff       	call   c001dd67 <lockScheduler()>
c001e208:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e20d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e210:	e8 8d fe ff ff       	call   c001e0a2 <schedule()>
c001e215:	83 c4 0c             	add    esp,0xc
c001e218:	e9 4c fb ff ff       	jmp    c001dd69 <unlockScheduler()>

c001e21d <waitTask(int, int*, int)>:
c001e21d:	83 ec 18             	sub    esp,0x18
c001e220:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e225:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e229:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e22c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e230:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e235:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e238:	6a 07                	push   0x7
c001e23a:	e8 bd ff ff ff       	call   c001e1fc <blockTask(TaskState)>
c001e23f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e244:	83 c4 10             	add    esp,0x10
c001e247:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e24a:	85 d2                	test   edx,edx
c001e24c:	74 0a                	je     c001e258 <waitTask(int, int*, int)+0x3b>
c001e24e:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e251:	89 02                	mov    DWORD PTR [edx],eax
c001e253:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e258:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e25b:	83 c4 0c             	add    esp,0xc
c001e25e:	c3                   	ret    

c001e25f <nanoSleepUntil(unsigned long long)>:
c001e25f:	83 ec 0c             	sub    esp,0xc
c001e262:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e266:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e26a:	3b 05 10 ea 02 c0    	cmp    eax,DWORD PTR ds:0xc002ea10
c001e270:	89 d1                	mov    ecx,edx
c001e272:	1b 0d 14 ea 02 c0    	sbb    ecx,DWORD PTR ds:0xc002ea14
c001e278:	73 04                	jae    c001e27e <nanoSleepUntil(unsigned long long)+0x1f>
c001e27a:	83 c4 0c             	add    esp,0xc
c001e27d:	c3                   	ret    
c001e27e:	e8 0b fb ff ff       	call   c001dd8e <lockStuff()>
c001e283:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e289:	83 ec 08             	sub    esp,0x8
c001e28c:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e28f:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e292:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e298:	68 dc 18 03 c0       	push   0xc00318dc
c001e29d:	e8 0e a8 00 00       	call   c0028ab0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e2a2:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e2a9:	e8 4e ff ff ff       	call   c001e1fc <blockTask(TaskState)>
c001e2ae:	83 c4 1c             	add    esp,0x1c
c001e2b1:	e9 71 fe ff ff       	jmp    c001e127 <unlockStuff()>

c001e2b6 <nanoSleep(unsigned long long)>:
c001e2b6:	a1 10 ea 02 c0       	mov    eax,ds:0xc002ea10
c001e2bb:	8b 15 14 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea14
c001e2c1:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e2c5:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e2c9:	eb 94                	jmp    c001e25f <nanoSleepUntil(unsigned long long)>

c001e2cb <sleep(unsigned long long)>:
c001e2cb:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001e2d3:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001e2d8:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001e2dc:	01 ca                	add    edx,ecx
c001e2de:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e2e2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e2e6:	eb ce                	jmp    c001e2b6 <nanoSleep(unsigned long long)>

c001e2e8 <Semaphore::acquire()>:
c001e2e8:	83 ec 0c             	sub    esp,0xc
c001e2eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2ef:	e8 9a fa ff ff       	call   c001dd8e <lockStuff()>
c001e2f4:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e2f7:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e2f9:	7d 0c                	jge    c001e307 <Semaphore::acquire()+0x1f>
c001e2fb:	42                   	inc    edx
c001e2fc:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e2ff:	83 c4 0c             	add    esp,0xc
c001e302:	e9 20 fe ff ff       	jmp    c001e127 <unlockStuff()>
c001e307:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e30d:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001e314:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e317:	85 d2                	test   edx,edx
c001e319:	74 2a                	je     c001e345 <Semaphore::acquire()+0x5d>
c001e31b:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001e31e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e324:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001e327:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e32d:	83 ec 0c             	sub    esp,0xc
c001e330:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e333:	6a 05                	push   0x5
c001e335:	e8 c2 fe ff ff       	call   c001e1fc <blockTask(TaskState)>
c001e33a:	83 c4 10             	add    esp,0x10
c001e33d:	83 c4 0c             	add    esp,0xc
c001e340:	e9 e2 fd ff ff       	jmp    c001e127 <unlockStuff()>
c001e345:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e34b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e34e:	eb d7                	jmp    c001e327 <Semaphore::acquire()+0x3f>

c001e350 <taskReturned>:
c001e350:	83 ec 18             	sub    esp,0x18
c001e353:	68 38 c3 02 c0       	push   0xc002c338
c001e358:	e8 10 c2 ff ff       	call   c001a56d <Krnl::panic(char const*)>
c001e35d:	83 c4 10             	add    esp,0x10
c001e360:	83 ec 0c             	sub    esp,0xc
c001e363:	6a 02                	push   0x2
c001e365:	e8 92 fe ff ff       	call   c001e1fc <blockTask(TaskState)>
c001e36a:	e8 f8 f9 ff ff       	call   c001dd67 <lockScheduler()>
c001e36f:	e8 2e fd ff ff       	call   c001e0a2 <schedule()>
c001e374:	e8 f0 f9 ff ff       	call   c001dd69 <unlockScheduler()>
c001e379:	83 c4 10             	add    esp,0x10
c001e37c:	eb e2                	jmp    c001e360 <taskReturned+0x10>

c001e37e <unblockTask(ThreadControlBlock*)>:
c001e37e:	53                   	push   ebx
c001e37f:	83 ec 08             	sub    esp,0x8
c001e382:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e386:	e8 dc f9 ff ff       	call   c001dd67 <lockScheduler()>
c001e38b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e38e:	85 c0                	test   eax,eax
c001e390:	74 5c                	je     c001e3ee <unblockTask(ThreadControlBlock*)+0x70>
c001e392:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e395:	48                   	dec    eax
c001e396:	74 31                	je     c001e3c9 <unblockTask(ThreadControlBlock*)+0x4b>
c001e398:	83 ec 0c             	sub    esp,0xc
c001e39b:	68 e8 18 03 c0       	push   0xc00318e8
c001e3a0:	e8 39 a6 00 00       	call   c00289de <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e3a5:	83 c4 10             	add    esp,0x10
c001e3a8:	85 c0                	test   eax,eax
c001e3aa:	75 17                	jne    c001e3c3 <unblockTask(ThreadControlBlock*)+0x45>
c001e3ac:	eb 65                	jmp    c001e413 <unblockTask(ThreadControlBlock*)+0x95>
c001e3ae:	83 ec 08             	sub    esp,0x8
c001e3b1:	50                   	push   eax
c001e3b2:	68 e8 18 03 c0       	push   0xc00318e8
c001e3b7:	e8 fc a8 00 00       	call   c0028cb8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001e3bc:	83 c4 10             	add    esp,0x10
c001e3bf:	85 c0                	test   eax,eax
c001e3c1:	74 50                	je     c001e413 <unblockTask(ThreadControlBlock*)+0x95>
c001e3c3:	39 c3                	cmp    ebx,eax
c001e3c5:	75 e7                	jne    c001e3ae <unblockTask(ThreadControlBlock*)+0x30>
c001e3c7:	eb 1c                	jmp    c001e3e5 <unblockTask(ThreadControlBlock*)+0x67>
c001e3c9:	83 ec 0c             	sub    esp,0xc
c001e3cc:	68 28 c4 02 c0       	push   0xc002c428
c001e3d1:	e8 bc 4a ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001e3d6:	c7 04 24 b4 c3 02 c0 	mov    DWORD PTR [esp],0xc002c3b4
c001e3dd:	e8 b0 4a ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001e3e2:	83 c4 10             	add    esp,0x10
c001e3e5:	83 c4 08             	add    esp,0x8
c001e3e8:	5b                   	pop    ebx
c001e3e9:	e9 7b f9 ff ff       	jmp    c001dd69 <unlockScheduler()>
c001e3ee:	83 ec 0c             	sub    esp,0xc
c001e3f1:	68 6c c3 02 c0       	push   0xc002c36c
c001e3f6:	e8 97 4a ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001e3fb:	c7 04 24 b4 c3 02 c0 	mov    DWORD PTR [esp],0xc002c3b4
c001e402:	e8 8b 4a ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001e407:	83 c4 10             	add    esp,0x10
c001e40a:	83 c4 08             	add    esp,0x8
c001e40d:	5b                   	pop    ebx
c001e40e:	e9 56 f9 ff ff       	jmp    c001dd69 <unlockScheduler()>
c001e413:	83 ec 08             	sub    esp,0x8
c001e416:	53                   	push   ebx
c001e417:	68 e8 18 03 c0       	push   0xc00318e8
c001e41c:	e8 8f a6 00 00       	call   c0028ab0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e421:	83 c4 10             	add    esp,0x10
c001e424:	83 c4 08             	add    esp,0x8
c001e427:	5b                   	pop    ebx
c001e428:	e9 3c f9 ff ff       	jmp    c001dd69 <unlockScheduler()>

c001e42d <cleanupTerminatedTask(ThreadControlBlock*)>:
c001e42d:	55                   	push   ebp
c001e42e:	57                   	push   edi
c001e42f:	56                   	push   esi
c001e430:	53                   	push   ebx
c001e431:	83 ec 1c             	sub    esp,0x1c
c001e434:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e438:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e43b:	8b b8 36 19 00 00    	mov    edi,DWORD PTR [eax+0x1936]
c001e441:	85 ff                	test   edi,edi
c001e443:	7e 20                	jle    c001e465 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001e445:	31 f6                	xor    esi,esi
c001e447:	83 ec 0c             	sub    esp,0xc
c001e44a:	ff b4 b0 3a 19 00 00 	push   DWORD PTR [eax+esi*4+0x193a]
c001e451:	46                   	inc    esi
c001e452:	e8 f9 13 ff ff       	call   c000f850 <free>
c001e457:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e45a:	83 c4 10             	add    esp,0x10
c001e45d:	39 b0 36 19 00 00    	cmp    DWORD PTR [eax+0x1936],esi
c001e463:	7f e2                	jg     c001e447 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001e465:	c7 80 36 19 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1936],0x0
c001e46f:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001e474:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001e477:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e47a:	d3 c0                	rol    eax,cl
c001e47c:	66 21 82 24 19 00 00 	and    WORD PTR [edx+0x1924],ax
c001e483:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e486:	89 f7                	mov    edi,esi
c001e488:	66 83 be 24 19 00 00 00 	cmp    WORD PTR [esi+0x1924],0x0
c001e490:	0f 85 75 01 00 00    	jne    c001e60b <cleanupTerminatedTask(ThreadControlBlock*)+0x1de>
c001e496:	8b ae 3a 1b 00 00    	mov    ebp,DWORD PTR [esi+0x1b3a]
c001e49c:	85 ed                	test   ebp,ebp
c001e49e:	74 1b                	je     c001e4bb <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001e4a0:	83 ec 0c             	sub    esp,0xc
c001e4a3:	55                   	push   ebp
c001e4a4:	e8 31 be ff ff       	call   c001a2da <EnvVarContainer::~EnvVarContainer()>
c001e4a9:	59                   	pop    ecx
c001e4aa:	5e                   	pop    esi
c001e4ab:	6a 0c                	push   0xc
c001e4ad:	55                   	push   ebp
c001e4ae:	e8 ff 48 ff ff       	call   c0012db2 <operator delete(void*, unsigned long)>
c001e4b3:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e4b6:	83 c4 10             	add    esp,0x10
c001e4b9:	89 f7                	mov    edi,esi
c001e4bb:	8b 86 2a 19 00 00    	mov    eax,DWORD PTR [esi+0x192a]
c001e4c1:	85 c0                	test   eax,eax
c001e4c3:	0f 84 ab 00 00 00    	je     c001e574 <cleanupTerminatedTask(ThreadControlBlock*)+0x147>
c001e4c9:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001e4cc:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e4d0:	31 c9                	xor    ecx,ecx
c001e4d2:	eb 10                	jmp    c001e4e4 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001e4d4:	41                   	inc    ecx
c001e4d5:	83 f9 10             	cmp    ecx,0x10
c001e4d8:	0f 84 96 00 00 00    	je     c001e574 <cleanupTerminatedTask(ThreadControlBlock*)+0x147>
c001e4de:	8b 86 2a 19 00 00    	mov    eax,DWORD PTR [esi+0x192a]
c001e4e4:	0f b7 90 24 19 00 00 	movzx  edx,WORD PTR [eax+0x1924]
c001e4eb:	d3 fa                	sar    edx,cl
c001e4ed:	83 e2 01             	and    edx,0x1
c001e4f0:	74 e2                	je     c001e4d4 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e4f2:	8d 14 89             	lea    edx,[ecx+ecx*4]
c001e4f5:	8d 14 d1             	lea    edx,[ecx+edx*8]
c001e4f8:	8d 14 d2             	lea    edx,[edx+edx*8]
c001e4fb:	01 d2                	add    edx,edx
c001e4fd:	01 ca                	add    edx,ecx
c001e4ff:	01 d0                	add    eax,edx
c001e501:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001e507:	83 fd 07             	cmp    ebp,0x7
c001e50a:	75 c8                	jne    c001e4d4 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e50c:	05 40 02 00 00       	add    eax,0x240
c001e511:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001e514:	83 fd ff             	cmp    ebp,0xffffffff
c001e517:	0f 8c 08 01 00 00    	jl     c001e625 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f8>
c001e51d:	0f 84 b9 01 00 00    	je     c001e6dc <cleanupTerminatedTask(ThreadControlBlock*)+0x2af>
c001e523:	85 ed                	test   ebp,ebp
c001e525:	0f 84 a0 01 00 00    	je     c001e6cb <cleanupTerminatedTask(ThreadControlBlock*)+0x29e>
c001e52b:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001e52d:	75 a5                	jne    c001e4d4 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e52f:	8b 86 2a 19 00 00    	mov    eax,DWORD PTR [esi+0x192a]
c001e535:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e539:	01 d0                	add    eax,edx
c001e53b:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001e53f:	83 ec 0c             	sub    esp,0xc
c001e542:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001e548:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e54b:	8b 80 2a 19 00 00    	mov    eax,DWORD PTR [eax+0x192a]
c001e551:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e558:	50                   	push   eax
c001e559:	e8 20 fe ff ff       	call   c001e37e <unblockTask(ThreadControlBlock*)>
c001e55e:	83 c4 10             	add    esp,0x10
c001e561:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e564:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e568:	89 f7                	mov    edi,esi
c001e56a:	41                   	inc    ecx
c001e56b:	83 f9 10             	cmp    ecx,0x10
c001e56e:	0f 85 6a ff ff ff    	jne    c001e4de <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e574:	8b 86 26 19 00 00    	mov    eax,DWORD PTR [esi+0x1926]
c001e57a:	85 c0                	test   eax,eax
c001e57c:	74 5d                	je     c001e5db <cleanupTerminatedTask(ThreadControlBlock*)+0x1ae>
c001e57e:	8b 96 2a 19 00 00    	mov    edx,DWORD PTR [esi+0x192a]
c001e584:	3b 82 26 19 00 00    	cmp    eax,DWORD PTR [edx+0x1926]
c001e58a:	74 4f                	je     c001e5db <cleanupTerminatedTask(ThreadControlBlock*)+0x1ae>
c001e58c:	83 ec 0c             	sub    esp,0xc
c001e58f:	68 e8 18 03 c0       	push   0xc00318e8
c001e594:	e8 45 a4 00 00       	call   c00289de <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e599:	c7 04 24 e8 18 03 c0 	mov    DWORD PTR [esp],0xc00318e8
c001e5a0:	89 c7                	mov    edi,eax
c001e5a2:	e8 3f a4 00 00       	call   c00289e6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e5a7:	83 c4 10             	add    esp,0x10
c001e5aa:	84 c0                	test   al,al
c001e5ac:	0f 84 e4 00 00 00    	je     c001e696 <cleanupTerminatedTask(ThreadControlBlock*)+0x269>
c001e5b2:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e5b5:	8b 90 26 19 00 00    	mov    edx,DWORD PTR [eax+0x1926]
c001e5bb:	85 d2                	test   edx,edx
c001e5bd:	74 0f                	je     c001e5ce <cleanupTerminatedTask(ThreadControlBlock*)+0x1a1>
c001e5bf:	83 ec 0c             	sub    esp,0xc
c001e5c2:	8b 02                	mov    eax,DWORD PTR [edx]
c001e5c4:	52                   	push   edx
c001e5c5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e5c8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e5cb:	83 c4 10             	add    esp,0x10
c001e5ce:	c7 80 26 19 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1926],0x0
c001e5d8:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e5db:	8b 9f 32 19 00 00    	mov    ebx,DWORD PTR [edi+0x1932]
c001e5e1:	85 db                	test   ebx,ebx
c001e5e3:	74 16                	je     c001e5fb <cleanupTerminatedTask(ThreadControlBlock*)+0x1ce>
c001e5e5:	83 ec 0c             	sub    esp,0xc
c001e5e8:	53                   	push   ebx
c001e5e9:	e8 c8 3b ff ff       	call   c00121b6 <VAS::~VAS()>
c001e5ee:	58                   	pop    eax
c001e5ef:	5a                   	pop    edx
c001e5f0:	6a 14                	push   0x14
c001e5f2:	53                   	push   ebx
c001e5f3:	e8 ba 47 ff ff       	call   c0012db2 <operator delete(void*, unsigned long)>
c001e5f8:	83 c4 10             	add    esp,0x10
c001e5fb:	83 ec 0c             	sub    esp,0xc
c001e5fe:	68 81 c1 02 c0       	push   0xc002c181
c001e603:	e8 8a 48 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001e608:	83 c4 10             	add    esp,0x10
c001e60b:	83 ec 08             	sub    esp,0x8
c001e60e:	68 3f 1b 00 00       	push   0x1b3f
c001e613:	68 8f c1 02 c0       	push   0xc002c18f
c001e618:	e8 75 48 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001e61d:	83 c4 2c             	add    esp,0x2c
c001e620:	5b                   	pop    ebx
c001e621:	5e                   	pop    esi
c001e622:	5f                   	pop    edi
c001e623:	5d                   	pop    ebp
c001e624:	c3                   	ret    
c001e625:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e629:	83 ec 0c             	sub    esp,0xc
c001e62c:	68 6c c4 02 c0       	push   0xc002c46c
c001e631:	e8 37 bf ff ff       	call   c001a56d <Krnl::panic(char const*)>
c001e636:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e639:	83 c4 10             	add    esp,0x10
c001e63c:	89 f7                	mov    edi,esi
c001e63e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e642:	e9 8d fe ff ff       	jmp    c001e4d4 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e647:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c001e64d:	39 82 26 19 00 00    	cmp    DWORD PTR [edx+0x1926],eax
c001e653:	75 1c                	jne    c001e671 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001e655:	83 ec 0c             	sub    esp,0xc
c001e658:	68 d4 c4 02 c0       	push   0xc002c4d4
c001e65d:	e8 30 48 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001e662:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e669:	e8 8e fb ff ff       	call   c001e1fc <blockTask(TaskState)>
c001e66e:	83 c4 10             	add    esp,0x10
c001e671:	83 ec 08             	sub    esp,0x8
c001e674:	56                   	push   esi
c001e675:	68 e8 18 03 c0       	push   0xc00318e8
c001e67a:	e8 31 a4 00 00       	call   c0028ab0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e67f:	c7 04 24 e8 18 03 c0 	mov    DWORD PTR [esp],0xc00318e8
c001e686:	e8 53 a3 00 00       	call   c00289de <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e68b:	83 c4 10             	add    esp,0x10
c001e68e:	39 f8                	cmp    eax,edi
c001e690:	0f 84 1c ff ff ff    	je     c001e5b2 <cleanupTerminatedTask(ThreadControlBlock*)+0x185>
c001e696:	83 ec 0c             	sub    esp,0xc
c001e699:	68 e8 18 03 c0       	push   0xc00318e8
c001e69e:	e8 3b a3 00 00       	call   c00289de <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e6a3:	c7 04 24 e8 18 03 c0 	mov    DWORD PTR [esp],0xc00318e8
c001e6aa:	89 c6                	mov    esi,eax
c001e6ac:	e8 51 a3 00 00       	call   c0028a02 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e6b1:	83 c4 10             	add    esp,0x10
c001e6b4:	39 f3                	cmp    ebx,esi
c001e6b6:	74 b9                	je     c001e671 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001e6b8:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e6bb:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e6be:	39 82 2a 19 00 00    	cmp    DWORD PTR [edx+0x192a],eax
c001e6c4:	75 ab                	jne    c001e671 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001e6c6:	e9 7c ff ff ff       	jmp    c001e647 <cleanupTerminatedTask(ThreadControlBlock*)+0x21a>
c001e6cb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e6cf:	83 ec 0c             	sub    esp,0xc
c001e6d2:	68 a0 c4 02 c0       	push   0xc002c4a0
c001e6d7:	e9 55 ff ff ff       	jmp    c001e631 <cleanupTerminatedTask(ThreadControlBlock*)+0x204>
c001e6dc:	8b 36                	mov    esi,DWORD PTR [esi]
c001e6de:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e6e2:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e6e5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e6e8:	8b b8 2a 19 00 00    	mov    edi,DWORD PTR [eax+0x192a]
c001e6ee:	01 d7                	add    edi,edx
c001e6f0:	89 f8                	mov    eax,edi
c001e6f2:	e9 44 fe ff ff       	jmp    c001e53b <cleanupTerminatedTask(ThreadControlBlock*)+0x10e>

c001e6f7 <cleanerTaskFunction(void*)>:
c001e6f7:	53                   	push   ebx
c001e6f8:	83 ec 08             	sub    esp,0x8
c001e6fb:	e8 69 f6 ff ff       	call   c001dd69 <unlockScheduler()>
c001e700:	e8 62 f6 ff ff       	call   c001dd67 <lockScheduler()>
c001e705:	80 3d ac 18 03 c0 00 	cmp    BYTE PTR ds:0xc00318ac,0x0
c001e70c:	0f 85 8e 00 00 00    	jne    c001e7a0 <cleanerTaskFunction(void*)+0xa9>
c001e712:	83 ec 0c             	sub    esp,0xc
c001e715:	6a 02                	push   0x2
c001e717:	e8 9e fa ff ff       	call   c001e1ba <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e71c:	83 c4 10             	add    esp,0x10
c001e71f:	c6 05 ac 18 03 c0 00 	mov    BYTE PTR ds:0xc00318ac,0x0
c001e726:	e8 63 f6 ff ff       	call   c001dd8e <lockStuff()>
c001e72b:	e8 37 f6 ff ff       	call   c001dd67 <lockScheduler()>
c001e730:	83 ec 0c             	sub    esp,0xc
c001e733:	68 d0 18 03 c0       	push   0xc00318d0
c001e738:	e8 a9 a2 00 00       	call   c00289e6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e73d:	83 c4 10             	add    esp,0x10
c001e740:	84 c0                	test   al,al
c001e742:	75 40                	jne    c001e784 <cleanerTaskFunction(void*)+0x8d>
c001e744:	83 ec 0c             	sub    esp,0xc
c001e747:	68 d0 18 03 c0       	push   0xc00318d0
c001e74c:	e8 8d a2 00 00       	call   c00289de <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e751:	c7 04 24 d0 18 03 c0 	mov    DWORD PTR [esp],0xc00318d0
c001e758:	89 c3                	mov    ebx,eax
c001e75a:	e8 a3 a2 00 00       	call   c0028a02 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e75f:	c7 04 24 a5 c1 02 c0 	mov    DWORD PTR [esp],0xc002c1a5
c001e766:	e8 27 47 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001e76b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e76e:	e8 ba fc ff ff       	call   c001e42d <cleanupTerminatedTask(ThreadControlBlock*)>
c001e773:	c7 04 24 be c1 02 c0 	mov    DWORD PTR [esp],0xc002c1be
c001e77a:	e8 13 47 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001e77f:	83 c4 10             	add    esp,0x10
c001e782:	eb ac                	jmp    c001e730 <cleanerTaskFunction(void*)+0x39>
c001e784:	e8 e0 f5 ff ff       	call   c001dd69 <unlockScheduler()>
c001e789:	e8 99 f9 ff ff       	call   c001e127 <unlockStuff()>
c001e78e:	e8 d4 f5 ff ff       	call   c001dd67 <lockScheduler()>
c001e793:	80 3d ac 18 03 c0 00 	cmp    BYTE PTR ds:0xc00318ac,0x0
c001e79a:	0f 84 72 ff ff ff    	je     c001e712 <cleanerTaskFunction(void*)+0x1b>
c001e7a0:	e8 c4 f5 ff ff       	call   c001dd69 <unlockScheduler()>
c001e7a5:	e9 75 ff ff ff       	jmp    c001e71f <cleanerTaskFunction(void*)+0x28>

c001e7aa <terminateTask(int)>:
c001e7aa:	83 ec 14             	sub    esp,0x14
c001e7ad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e7b2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001e7b5:	83 c0 0c             	add    eax,0xc
c001e7b8:	50                   	push   eax
c001e7b9:	68 fc c4 02 c0       	push   0xc002c4fc
c001e7be:	e8 cf 46 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001e7c3:	e8 c6 f5 ff ff       	call   c001dd8e <lockStuff()>
c001e7c8:	e8 9a f5 ff ff       	call   c001dd67 <lockScheduler()>
c001e7cd:	c7 04 24 d1 c1 02 c0 	mov    DWORD PTR [esp],0xc002c1d1
c001e7d4:	e8 b9 46 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001e7d9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e7dd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e7e2:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e7e5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e7ea:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e7ed:	5a                   	pop    edx
c001e7ee:	59                   	pop    ecx
c001e7ef:	50                   	push   eax
c001e7f0:	68 d0 18 03 c0       	push   0xc00318d0
c001e7f5:	e8 b6 a2 00 00       	call   c0028ab0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e7fa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e7ff:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e806:	c7 04 24 eb c1 02 c0 	mov    DWORD PTR [esp],0xc002c1eb
c001e80d:	e8 80 46 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001e812:	83 c4 10             	add    esp,0x10
c001e815:	a1 a8 18 03 c0       	mov    eax,ds:0xc00318a8
c001e81a:	85 c0                	test   eax,eax
c001e81c:	74 5a                	je     c001e878 <terminateTask(int)+0xce>
c001e81e:	83 ec 0c             	sub    esp,0xc
c001e821:	68 05 c2 02 c0       	push   0xc002c205
c001e826:	e8 67 46 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001e82b:	58                   	pop    eax
c001e82c:	c6 05 ac 18 03 c0 01 	mov    BYTE PTR ds:0xc00318ac,0x1
c001e833:	ff 35 a8 18 03 c0    	push   DWORD PTR ds:0xc00318a8
c001e839:	e8 40 fb ff ff       	call   c001e37e <unblockTask(ThreadControlBlock*)>
c001e83e:	c7 04 24 1f c2 02 c0 	mov    DWORD PTR [esp],0xc002c21f
c001e845:	e8 48 46 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001e84a:	83 c4 10             	add    esp,0x10
c001e84d:	e8 17 f5 ff ff       	call   c001dd69 <unlockScheduler()>
c001e852:	e8 d0 f8 ff ff       	call   c001e127 <unlockStuff()>
c001e857:	83 ec 0c             	sub    esp,0xc
c001e85a:	68 57 c2 02 c0       	push   0xc002c257
c001e85f:	e8 2e 46 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001e864:	83 c4 10             	add    esp,0x10
c001e867:	e8 fb f4 ff ff       	call   c001dd67 <lockScheduler()>
c001e86c:	e8 31 f8 ff ff       	call   c001e0a2 <schedule()>
c001e871:	e8 f3 f4 ff ff       	call   c001dd69 <unlockScheduler()>
c001e876:	eb ef                	jmp    c001e867 <terminateTask(int)+0xbd>
c001e878:	83 ec 0c             	sub    esp,0xc
c001e87b:	68 39 c2 02 c0       	push   0xc002c239
c001e880:	e8 0d 46 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001e885:	83 c4 10             	add    esp,0x10
c001e888:	eb c3                	jmp    c001e84d <terminateTask(int)+0xa3>

c001e88a <Thr::terminateFromIRQ(int)>:
c001e88a:	83 ec 18             	sub    esp,0x18
c001e88d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e891:	e8 14 ff ff ff       	call   c001e7aa <terminateTask(int)>

c001e896 <Semaphore::release()>:
c001e896:	83 ec 0c             	sub    esp,0xc
c001e899:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e89d:	e8 ec f4 ff ff       	call   c001dd8e <lockStuff()>
c001e8a2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e8a5:	85 d2                	test   edx,edx
c001e8a7:	74 1a                	je     c001e8c3 <Semaphore::release()+0x2d>
c001e8a9:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001e8ac:	83 ec 0c             	sub    esp,0xc
c001e8af:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001e8b2:	52                   	push   edx
c001e8b3:	e8 c6 fa ff ff       	call   c001e37e <unblockTask(ThreadControlBlock*)>
c001e8b8:	83 c4 10             	add    esp,0x10
c001e8bb:	83 c4 0c             	add    esp,0xc
c001e8be:	e9 64 f8 ff ff       	jmp    c001e127 <unlockStuff()>
c001e8c3:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001e8c6:	83 c4 0c             	add    esp,0xc
c001e8c9:	e9 59 f8 ff ff       	jmp    c001e127 <unlockStuff()>

c001e8ce <__static_initialization_and_destruction_0(int, int)>:
c001e8ce:	83 ec 0c             	sub    esp,0xc
c001e8d1:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e8d6:	0f 85 88 00 00 00    	jne    c001e964 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e8dc:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e8e4:	75 7e                	jne    c001e964 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e8e6:	83 ec 0c             	sub    esp,0xc
c001e8e9:	68 e8 18 03 c0       	push   0xc00318e8
c001e8ee:	e8 6d a3 00 00       	call   c0028c60 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e8f3:	83 c4 10             	add    esp,0x10
c001e8f6:	83 ec 04             	sub    esp,0x4
c001e8f9:	68 b4 d2 02 c0       	push   0xc002d2b4
c001e8fe:	68 e8 18 03 c0       	push   0xc00318e8
c001e903:	68 20 8c 02 c0       	push   0xc0028c20
c001e908:	e8 1f 44 ff ff       	call   c0012d2c <__cxa_atexit>
c001e90d:	83 c4 10             	add    esp,0x10
c001e910:	83 ec 0c             	sub    esp,0xc
c001e913:	68 dc 18 03 c0       	push   0xc00318dc
c001e918:	e8 43 a3 00 00       	call   c0028c60 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e91d:	83 c4 10             	add    esp,0x10
c001e920:	83 ec 04             	sub    esp,0x4
c001e923:	68 b4 d2 02 c0       	push   0xc002d2b4
c001e928:	68 dc 18 03 c0       	push   0xc00318dc
c001e92d:	68 20 8c 02 c0       	push   0xc0028c20
c001e932:	e8 f5 43 ff ff       	call   c0012d2c <__cxa_atexit>
c001e937:	83 c4 10             	add    esp,0x10
c001e93a:	83 ec 0c             	sub    esp,0xc
c001e93d:	68 d0 18 03 c0       	push   0xc00318d0
c001e942:	e8 19 a3 00 00       	call   c0028c60 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e947:	83 c4 10             	add    esp,0x10
c001e94a:	83 ec 04             	sub    esp,0x4
c001e94d:	68 b4 d2 02 c0       	push   0xc002d2b4
c001e952:	68 d0 18 03 c0       	push   0xc00318d0
c001e957:	68 20 8c 02 c0       	push   0xc0028c20
c001e95c:	e8 cb 43 ff ff       	call   c0012d2c <__cxa_atexit>
c001e961:	83 c4 10             	add    esp,0x10
c001e964:	90                   	nop
c001e965:	83 c4 0c             	add    esp,0xc
c001e968:	c3                   	ret    

c001e969 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001e969:	83 ec 0c             	sub    esp,0xc
c001e96c:	83 ec 08             	sub    esp,0x8
c001e96f:	68 ff ff 00 00       	push   0xffff
c001e974:	6a 01                	push   0x1
c001e976:	e8 53 ff ff ff       	call   c001e8ce <__static_initialization_and_destruction_0(int, int)>
c001e97b:	83 c4 10             	add    esp,0x10
c001e97e:	83 c4 0c             	add    esp,0xc
c001e981:	c3                   	ret    

c001e982 <Vm::inbv(unsigned short)>:
c001e982:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e986:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e98b:	75 06                	jne    c001e993 <Vm::inbv(unsigned short)+0x11>
c001e98d:	a0 2c 19 03 c0       	mov    al,ds:0xc003192c
c001e992:	c3                   	ret    
c001e993:	ec                   	in     al,dx
c001e994:	c3                   	ret    

c001e995 <Vm::outbv(unsigned short, unsigned char)>:
c001e995:	53                   	push   ebx
c001e996:	83 ec 08             	sub    esp,0x8
c001e999:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e99d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e9a1:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e9a6:	75 38                	jne    c001e9e0 <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001e9a8:	0f b6 c3             	movzx  eax,bl
c001e9ab:	51                   	push   ecx
c001e9ac:	51                   	push   ecx
c001e9ad:	50                   	push   eax
c001e9ae:	68 1b c5 02 c0       	push   0xc002c51b
c001e9b3:	e8 da 44 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001e9b8:	8b 15 2c 19 03 c0    	mov    edx,DWORD PTR ds:0xc003192c
c001e9be:	83 c4 10             	add    esp,0x10
c001e9c1:	8d 42 01             	lea    eax,[edx+0x1]
c001e9c4:	88 9a 40 19 03 c0    	mov    BYTE PTR [edx-0x3ffce6c0],bl
c001e9ca:	a3 2c 19 03 c0       	mov    ds:0xc003192c,eax
c001e9cf:	83 f8 20             	cmp    eax,0x20
c001e9d2:	75 0f                	jne    c001e9e3 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001e9d4:	c7 05 2c 19 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc003192c,0x1f
c001e9de:	eb 03                	jmp    c001e9e3 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001e9e0:	88 d8                	mov    al,bl
c001e9e2:	ee                   	out    dx,al
c001e9e3:	83 c4 08             	add    esp,0x8
c001e9e6:	5b                   	pop    ebx
c001e9e7:	c3                   	ret    

c001e9e8 <Vm::realToLinear(unsigned short, unsigned short)>:
c001e9e8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e9ed:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e9f2:	c1 e0 04             	shl    eax,0x4
c001e9f5:	01 d0                	add    eax,edx
c001e9f7:	c3                   	ret    

c001e9f8 <Vm::getSegment(unsigned int)>:
c001e9f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e9fc:	c1 e8 10             	shr    eax,0x10
c001e9ff:	c3                   	ret    

c001ea00 <Vm::getOffset(unsigned int)>:
c001ea00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea04:	c3                   	ret    

c001ea05 <Vm::mainloop2()>:
c001ea05:	83 ec 0c             	sub    esp,0xc
c001ea08:	e8 5a f3 ff ff       	call   c001dd67 <lockScheduler()>
c001ea0d:	83 ec 0c             	sub    esp,0xc
c001ea10:	c6 05 25 19 03 c0 01 	mov    BYTE PTR ds:0xc0031925,0x1
c001ea17:	6a 02                	push   0x2
c001ea19:	e8 9c f7 ff ff       	call   c001e1ba <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001ea1e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ea23:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001ea27:	52                   	push   edx
c001ea28:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001ea2c:	52                   	push   edx
c001ea2d:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001ea31:	52                   	push   edx
c001ea32:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001ea36:	50                   	push   eax
c001ea37:	e8 be 18 fe ff       	call   c00002fa <goToVM86>
c001ea3c:	83 c4 2c             	add    esp,0x2c
c001ea3f:	c3                   	ret    

c001ea40 <Vm::mainVm8086Loop(void*)>:
c001ea40:	83 ec 0c             	sub    esp,0xc
c001ea43:	e8 21 f3 ff ff       	call   c001dd69 <unlockScheduler()>
c001ea48:	83 c4 0c             	add    esp,0xc
c001ea4b:	eb b8                	jmp    c001ea05 <Vm::mainloop2()>

c001ea4d <Vm::mainloop3(unsigned long)>:
c001ea4d:	53                   	push   ebx
c001ea4e:	83 ec 08             	sub    esp,0x8
c001ea51:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ea55:	e8 0d f3 ff ff       	call   c001dd67 <lockScheduler()>
c001ea5a:	83 ec 0c             	sub    esp,0xc
c001ea5d:	89 1d 20 19 03 c0    	mov    DWORD PTR ds:0xc0031920,ebx
c001ea63:	6a 02                	push   0x2
c001ea65:	c6 05 24 19 03 c0 01 	mov    BYTE PTR ds:0xc0031924,0x1
c001ea6c:	e8 49 f7 ff ff       	call   c001e1ba <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001ea71:	83 c4 18             	add    esp,0x18
c001ea74:	5b                   	pop    ebx
c001ea75:	eb 8e                	jmp    c001ea05 <Vm::mainloop2()>

c001ea77 <Vm::initialise8086()>:
c001ea77:	83 ec 0c             	sub    esp,0xc
c001ea7a:	68 80 00 00 00       	push   0x80
c001ea7f:	6a 00                	push   0x0
c001ea81:	68 40 ea 01 c0       	push   0xc001ea40
c001ea86:	ff 35 f4 18 03 c0    	push   DWORD PTR ds:0xc00318f4
c001ea8c:	e8 07 f4 ff ff       	call   c001de98 <Process::createThread(void (*)(void*), void*, int)>
c001ea91:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001ea98:	a3 28 19 03 c0       	mov    ds:0xc0031928,eax
c001ea9d:	68 00 01 00 00       	push   0x100
c001eaa2:	a1 f4 18 03 c0       	mov    eax,ds:0xc00318f4
c001eaa7:	6a 00                	push   0x0
c001eaa9:	6a 00                	push   0x0
c001eaab:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001eab1:	e8 60 3b ff ff       	call   c0012616 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001eab6:	83 c4 2c             	add    esp,0x2c
c001eab9:	c3                   	ret    

c001eaba <Vm::finish8086()>:
c001eaba:	53                   	push   ebx
c001eabb:	83 ec 08             	sub    esp,0x8
c001eabe:	e8 a4 f2 ff ff       	call   c001dd67 <lockScheduler()>
c001eac3:	80 3d 24 19 03 c0 00 	cmp    BYTE PTR ds:0xc0031924,0x0
c001eaca:	75 0c                	jne    c001ead8 <Vm::finish8086()+0x1e>
c001eacc:	e8 d1 f5 ff ff       	call   c001e0a2 <schedule()>
c001ead1:	e8 93 f2 ff ff       	call   c001dd69 <unlockScheduler()>
c001ead6:	eb e6                	jmp    c001eabe <Vm::finish8086()+0x4>
c001ead8:	83 ec 0c             	sub    esp,0xc
c001eadb:	8b 1d 20 19 03 c0    	mov    ebx,DWORD PTR ds:0xc0031920
c001eae1:	ff 35 28 19 03 c0    	push   DWORD PTR ds:0xc0031928
c001eae7:	c6 05 24 19 03 c0 00 	mov    BYTE PTR ds:0xc0031924,0x0
c001eaee:	e8 8b f8 ff ff       	call   c001e37e <unblockTask(ThreadControlBlock*)>
c001eaf3:	e8 71 f2 ff ff       	call   c001dd69 <unlockScheduler()>
c001eaf8:	89 d8                	mov    eax,ebx
c001eafa:	83 c4 18             	add    esp,0x18
c001eafd:	5b                   	pop    ebx
c001eafe:	c3                   	ret    

c001eaff <Vm::getOutput8086(unsigned char*)>:
c001eaff:	83 ec 10             	sub    esp,0x10
c001eb02:	ff 35 2c 19 03 c0    	push   DWORD PTR ds:0xc003192c
c001eb08:	68 40 19 03 c0       	push   0xc0031940
c001eb0d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eb11:	e8 2e 1c fe ff       	call   c0000744 <memcpy>
c001eb16:	a1 2c 19 03 c0       	mov    eax,ds:0xc003192c
c001eb1b:	c7 05 2c 19 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003192c,0x0
c001eb25:	83 c4 1c             	add    esp,0x1c
c001eb28:	c3                   	ret    

c001eb29 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001eb29:	55                   	push   ebp
c001eb2a:	57                   	push   edi
c001eb2b:	56                   	push   esi
c001eb2c:	53                   	push   ebx
c001eb2d:	83 ec 2c             	sub    esp,0x2c
c001eb30:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001eb34:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001eb38:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001eb3c:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001eb40:	e8 22 f2 ff ff       	call   c001dd67 <lockScheduler()>
c001eb45:	a0 25 19 03 c0       	mov    al,ds:0xc0031925
c001eb4a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001eb4e:	84 c0                	test   al,al
c001eb50:	75 0c                	jne    c001eb5e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x35>
c001eb52:	e8 4b f5 ff ff       	call   c001e0a2 <schedule()>
c001eb57:	e8 0d f2 ff ff       	call   c001dd69 <unlockScheduler()>
c001eb5c:	eb e2                	jmp    c001eb40 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001eb5e:	a1 28 19 03 c0       	mov    eax,ds:0xc0031928
c001eb63:	c7 05 2c 19 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003192c,0x0
c001eb6d:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001eb71:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001eb75:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001eb79:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001eb7d:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001eb81:	50                   	push   eax
c001eb82:	6a 20                	push   0x20
c001eb84:	6a 00                	push   0x0
c001eb86:	68 40 19 03 c0       	push   0xc0031940
c001eb8b:	e8 e8 1b fe ff       	call   c0000778 <memset>
c001eb90:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001eb97:	e8 a4 0c ff ff       	call   c000f840 <malloc>
c001eb9c:	83 c4 0c             	add    esp,0xc
c001eb9f:	89 c7                	mov    edi,eax
c001eba1:	ff 35 f4 18 03 c0    	push   DWORD PTR ds:0xc00318f4
c001eba7:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ebab:	50                   	push   eax
c001ebac:	e8 39 48 ff ff       	call   c00133ea <File::File(char const*, Process*)>
c001ebb1:	83 c4 10             	add    esp,0x10
c001ebb4:	85 ff                	test   edi,edi
c001ebb6:	75 0a                	jne    c001ebc2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x99>
c001ebb8:	83 ec 0c             	sub    esp,0xc
c001ebbb:	68 37 c5 02 c0       	push   0xc002c537
c001ebc0:	eb 27                	jmp    c001ebe9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c001ebc2:	50                   	push   eax
c001ebc3:	8d 44 24 17          	lea    eax,[esp+0x17]
c001ebc7:	50                   	push   eax
c001ebc8:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ebcc:	50                   	push   eax
c001ebcd:	57                   	push   edi
c001ebce:	e8 27 4b ff ff       	call   c00136fa <File::stat(unsigned long long*, bool*)>
c001ebd3:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001ebd8:	83 c4 10             	add    esp,0x10
c001ebdb:	89 e8                	mov    eax,ebp
c001ebdd:	84 c0                	test   al,al
c001ebdf:	74 19                	je     c001ebfa <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001ebe1:	83 ec 0c             	sub    esp,0xc
c001ebe4:	68 4b c5 02 c0       	push   0xc002c54b
c001ebe9:	e8 7f b9 ff ff       	call   c001a56d <Krnl::panic(char const*)>
c001ebee:	31 ed                	xor    ebp,ebp
c001ebf0:	e8 74 f1 ff ff       	call   c001dd69 <unlockScheduler()>
c001ebf5:	83 c4 10             	add    esp,0x10
c001ebf8:	eb 75                	jmp    c001ec6f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001ebfa:	50                   	push   eax
c001ebfb:	50                   	push   eax
c001ebfc:	6a 01                	push   0x1
c001ebfe:	57                   	push   edi
c001ebff:	e8 4a 48 ff ff       	call   c001344e <File::open(FileOpenMode)>
c001ec04:	83 c4 10             	add    esp,0x10
c001ec07:	85 c0                	test   eax,eax
c001ec09:	74 17                	je     c001ec22 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf9>
c001ec0b:	83 ec 0c             	sub    esp,0xc
c001ec0e:	68 64 c5 02 c0       	push   0xc002c564
c001ec13:	e8 55 b9 ff ff       	call   c001a56d <Krnl::panic(char const*)>
c001ec18:	e8 4c f1 ff ff       	call   c001dd69 <unlockScheduler()>
c001ec1d:	83 c4 10             	add    esp,0x10
c001ec20:	eb 4d                	jmp    c001ec6f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001ec22:	0f b7 f6             	movzx  esi,si
c001ec25:	50                   	push   eax
c001ec26:	0f b7 db             	movzx  ebx,bx
c001ec29:	50                   	push   eax
c001ec2a:	56                   	push   esi
c001ec2b:	53                   	push   ebx
c001ec2c:	e8 b7 fd ff ff       	call   c001e9e8 <Vm::realToLinear(unsigned short, unsigned short)>
c001ec31:	5a                   	pop    edx
c001ec32:	8b 17                	mov    edx,DWORD PTR [edi]
c001ec34:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001ec38:	51                   	push   ecx
c001ec39:	50                   	push   eax
c001ec3a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ec3e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ec42:	57                   	push   edi
c001ec43:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001ec46:	83 c4 14             	add    esp,0x14
c001ec49:	57                   	push   edi
c001ec4a:	e8 5d 48 ff ff       	call   c00134ac <File::close()>
c001ec4f:	c6 05 25 19 03 c0 00 	mov    BYTE PTR ds:0xc0031925,0x0
c001ec56:	e8 0e f1 ff ff       	call   c001dd69 <unlockScheduler()>
c001ec5b:	59                   	pop    ecx
c001ec5c:	ff 35 28 19 03 c0    	push   DWORD PTR ds:0xc0031928
c001ec62:	e8 17 f7 ff ff       	call   c001e37e <unblockTask(ThreadControlBlock*)>
c001ec67:	83 c4 10             	add    esp,0x10
c001ec6a:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001ec6f:	83 c4 2c             	add    esp,0x2c
c001ec72:	89 e8                	mov    eax,ebp
c001ec74:	5b                   	pop    ebx
c001ec75:	5e                   	pop    esi
c001ec76:	5f                   	pop    edi
c001ec77:	5d                   	pop    ebp
c001ec78:	c3                   	ret    

c001ec79 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001ec79:	57                   	push   edi
c001ec7a:	56                   	push   esi
c001ec7b:	53                   	push   ebx
c001ec7c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ec80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ec84:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ec88:	83 e8 06             	sub    eax,0x6
c001ec8b:	0f b7 c0             	movzx  eax,ax
c001ec8e:	50                   	push   eax
c001ec8f:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001ec94:	50                   	push   eax
c001ec95:	e8 4e fd ff ff       	call   c001e9e8 <Vm::realToLinear(unsigned short, unsigned short)>
c001ec9a:	5a                   	pop    edx
c001ec9b:	5e                   	pop    esi
c001ec9c:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001ec9f:	8d 56 fa             	lea    edx,[esi-0x6]
c001eca2:	81 e2 ff ff 00 00    	and    edx,0xffff
c001eca8:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001ecab:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001ecae:	83 c2 02             	add    edx,0x2
c001ecb1:	66 89 10             	mov    WORD PTR [eax],dx
c001ecb4:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001ecb7:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001ecbb:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001ecbe:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001ecc2:	89 d6                	mov    esi,edx
c001ecc4:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001ecca:	66 81 e6 ff fd       	and    si,0xfdff
c001eccf:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001ecd3:	74 07                	je     c001ecdc <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001ecd5:	89 d6                	mov    esi,edx
c001ecd7:	66 81 ce 00 02       	or     si,0x200
c001ecdc:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001ece0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ece5:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001ece9:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001ecf1:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001ecf4:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001ecfc:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001ecff:	5b                   	pop    ebx
c001ed00:	5e                   	pop    esi
c001ed01:	5f                   	pop    edi
c001ed02:	c3                   	ret    

c001ed03 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001ed03:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ed08:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ed0d:	c1 e0 04             	shl    eax,0x4
c001ed10:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001ed13:	c3                   	ret    

c001ed14 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001ed14:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ed19:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ed1e:	c1 e0 04             	shl    eax,0x4
c001ed21:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001ed25:	c3                   	ret    

c001ed26 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001ed26:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ed2b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ed30:	c1 e0 04             	shl    eax,0x4
c001ed33:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001ed36:	c3                   	ret    

c001ed37 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001ed37:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ed3c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ed41:	c1 e0 04             	shl    eax,0x4
c001ed44:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ed48:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001ed4b:	c3                   	ret    

c001ed4c <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001ed4c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ed51:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ed56:	c1 e0 04             	shl    eax,0x4
c001ed59:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ed5d:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001ed61:	c3                   	ret    

c001ed62 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001ed62:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ed67:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ed6c:	c1 e0 04             	shl    eax,0x4
c001ed6f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ed73:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001ed76:	c3                   	ret    

c001ed77 <Vm::faultHandler(regs*)>:
c001ed77:	55                   	push   ebp
c001ed78:	57                   	push   edi
c001ed79:	56                   	push   esi
c001ed7a:	53                   	push   ebx
c001ed7b:	83 ec 1c             	sub    esp,0x1c
c001ed7e:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ed82:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001ed85:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001ed88:	0f b7 c1             	movzx  eax,cx
c001ed8b:	50                   	push   eax
c001ed8c:	0f b7 c3             	movzx  eax,bx
c001ed8f:	c1 e3 04             	shl    ebx,0x4
c001ed92:	50                   	push   eax
c001ed93:	e8 50 fc ff ff       	call   c001e9e8 <Vm::realToLinear(unsigned short, unsigned short)>
c001ed98:	5a                   	pop    edx
c001ed99:	89 c5                	mov    ebp,eax
c001ed9b:	5e                   	pop    esi
c001ed9c:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001eda0:	50                   	push   eax
c001eda1:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001eda5:	50                   	push   eax
c001eda6:	e8 3d fc ff ff       	call   c001e9e8 <Vm::realToLinear(unsigned short, unsigned short)>
c001edab:	01 cb                	add    ebx,ecx
c001edad:	89 c6                	mov    esi,eax
c001edaf:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001edb3:	50                   	push   eax
c001edb4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001edb8:	50                   	push   eax
c001edb9:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001edbd:	50                   	push   eax
c001edbe:	55                   	push   ebp
c001edbf:	53                   	push   ebx
c001edc0:	b3 06                	mov    bl,0x6
c001edc2:	68 7d c5 02 c0       	push   0xc002c57d
c001edc7:	e8 c6 40 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001edcc:	83 c4 20             	add    esp,0x20
c001edcf:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001edd4:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001edd9:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001eddd:	3c 9d                	cmp    al,0x9d
c001eddf:	0f 84 d7 02 00 00    	je     c001f0bc <Vm::faultHandler(regs*)+0x345>
c001ede5:	0f 87 a3 00 00 00    	ja     c001ee8e <Vm::faultHandler(regs*)+0x117>
c001edeb:	3c 66                	cmp    al,0x66
c001eded:	0f 84 15 02 00 00    	je     c001f008 <Vm::faultHandler(regs*)+0x291>
c001edf3:	77 5f                	ja     c001ee54 <Vm::faultHandler(regs*)+0xdd>
c001edf5:	3c 36                	cmp    al,0x36
c001edf7:	0f 84 f1 01 00 00    	je     c001efee <Vm::faultHandler(regs*)+0x277>
c001edfd:	77 28                	ja     c001ee27 <Vm::faultHandler(regs*)+0xb0>
c001edff:	3c 26                	cmp    al,0x26
c001ee01:	0f 84 99 01 00 00    	je     c001efa0 <Vm::faultHandler(regs*)+0x229>
c001ee07:	3c 2e                	cmp    al,0x2e
c001ee09:	0f 85 3b 07 00 00    	jne    c001f54a <Vm::faultHandler(regs*)+0x7d3>
c001ee0f:	83 ec 0c             	sub    esp,0xc
c001ee12:	31 db                	xor    ebx,ebx
c001ee14:	68 92 c5 02 c0       	push   0xc002c592
c001ee19:	e8 74 40 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001ee1e:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ee21:	83 c4 10             	add    esp,0x10
c001ee24:	45                   	inc    ebp
c001ee25:	eb b2                	jmp    c001edd9 <Vm::faultHandler(regs*)+0x62>
c001ee27:	3c 64                	cmp    al,0x64
c001ee29:	0f 84 8b 01 00 00    	je     c001efba <Vm::faultHandler(regs*)+0x243>
c001ee2f:	0f 87 9f 01 00 00    	ja     c001efd4 <Vm::faultHandler(regs*)+0x25d>
c001ee35:	3c 3e                	cmp    al,0x3e
c001ee37:	0f 85 0d 07 00 00    	jne    c001f54a <Vm::faultHandler(regs*)+0x7d3>
c001ee3d:	83 ec 0c             	sub    esp,0xc
c001ee40:	b3 01                	mov    bl,0x1
c001ee42:	68 96 c5 02 c0       	push   0xc002c596
c001ee47:	e8 46 40 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001ee4c:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ee4f:	83 c4 10             	add    esp,0x10
c001ee52:	eb d0                	jmp    c001ee24 <Vm::faultHandler(regs*)+0xad>
c001ee54:	3c 6d                	cmp    al,0x6d
c001ee56:	0f 84 af 03 00 00    	je     c001f20b <Vm::faultHandler(regs*)+0x494>
c001ee5c:	77 15                	ja     c001ee73 <Vm::faultHandler(regs*)+0xfc>
c001ee5e:	3c 67                	cmp    al,0x67
c001ee60:	0f 84 bf 01 00 00    	je     c001f025 <Vm::faultHandler(regs*)+0x2ae>
c001ee66:	3c 6c                	cmp    al,0x6c
c001ee68:	0f 84 3f 03 00 00    	je     c001f1ad <Vm::faultHandler(regs*)+0x436>
c001ee6e:	e9 d7 06 00 00       	jmp    c001f54a <Vm::faultHandler(regs*)+0x7d3>
c001ee73:	3c 6f                	cmp    al,0x6f
c001ee75:	0f 84 a4 04 00 00    	je     c001f31f <Vm::faultHandler(regs*)+0x5a8>
c001ee7b:	0f 82 11 04 00 00    	jb     c001f292 <Vm::faultHandler(regs*)+0x51b>
c001ee81:	3c 9c                	cmp    al,0x9c
c001ee83:	0f 84 ba 01 00 00    	je     c001f043 <Vm::faultHandler(regs*)+0x2cc>
c001ee89:	e9 bc 06 00 00       	jmp    c001f54a <Vm::faultHandler(regs*)+0x7d3>
c001ee8e:	3c ec                	cmp    al,0xec
c001ee90:	0f 84 24 06 00 00    	je     c001f4ba <Vm::faultHandler(regs*)+0x743>
c001ee96:	0f 87 93 00 00 00    	ja     c001ef2f <Vm::faultHandler(regs*)+0x1b8>
c001ee9c:	3c e4                	cmp    al,0xe4
c001ee9e:	0f 84 5c 05 00 00    	je     c001f400 <Vm::faultHandler(regs*)+0x689>
c001eea4:	77 6a                	ja     c001ef10 <Vm::faultHandler(regs*)+0x199>
c001eea6:	3c cd                	cmp    al,0xcd
c001eea8:	0f 84 7e 02 00 00    	je     c001f12c <Vm::faultHandler(regs*)+0x3b5>
c001eeae:	3c cf                	cmp    al,0xcf
c001eeb0:	0f 85 94 06 00 00    	jne    c001f54a <Vm::faultHandler(regs*)+0x7d3>
c001eeb6:	83 ec 0c             	sub    esp,0xc
c001eeb9:	68 da c5 02 c0       	push   0xc002c5da
c001eebe:	e8 cf 3f ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001eec3:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001eec6:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001eec9:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001eecd:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001eed0:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001eed4:	0d 00 02 02 00       	or     eax,0x20200
c001eed9:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001eedc:	56                   	push   esi
c001eedd:	53                   	push   ebx
c001eede:	52                   	push   edx
c001eedf:	68 e0 c5 02 c0       	push   0xc002c5e0
c001eee4:	e8 a9 3f ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001eee9:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001eeed:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001eef3:	66 c1 e8 09          	shr    ax,0x9
c001eef7:	83 e0 01             	and    eax,0x1
c001eefa:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001eefd:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001ef00:	83 c0 06             	add    eax,0x6
c001ef03:	25 ff ff 00 00       	and    eax,0xffff
c001ef08:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001ef0b:	e9 95 02 00 00       	jmp    c001f1a5 <Vm::faultHandler(regs*)+0x42e>
c001ef10:	3c e6                	cmp    al,0xe6
c001ef12:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001ef16:	0f 84 4e 05 00 00    	je     c001f46a <Vm::faultHandler(regs*)+0x6f3>
c001ef1c:	0f 82 0a 05 00 00    	jb     c001f42c <Vm::faultHandler(regs*)+0x6b5>
c001ef22:	3c e7                	cmp    al,0xe7
c001ef24:	0f 84 69 05 00 00    	je     c001f493 <Vm::faultHandler(regs*)+0x71c>
c001ef2a:	e9 1b 06 00 00       	jmp    c001f54a <Vm::faultHandler(regs*)+0x7d3>
c001ef2f:	3c ef                	cmp    al,0xef
c001ef31:	0f 84 e6 05 00 00    	je     c001f51d <Vm::faultHandler(regs*)+0x7a6>
c001ef37:	77 37                	ja     c001ef70 <Vm::faultHandler(regs*)+0x1f9>
c001ef39:	3c ed                	cmp    al,0xed
c001ef3b:	0f 84 a3 05 00 00    	je     c001f4e4 <Vm::faultHandler(regs*)+0x76d>
c001ef41:	3c ee                	cmp    al,0xee
c001ef43:	0f 85 01 06 00 00    	jne    c001f54a <Vm::faultHandler(regs*)+0x7d3>
c001ef49:	52                   	push   edx
c001ef4a:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001ef4d:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001ef50:	68 7b c6 02 c0       	push   0xc002c67b
c001ef55:	e8 38 3f ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001ef5a:	59                   	pop    ecx
c001ef5b:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001ef5f:	5b                   	pop    ebx
c001ef60:	50                   	push   eax
c001ef61:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001ef65:	50                   	push   eax
c001ef66:	e8 2a fa ff ff       	call   c001e995 <Vm::outbv(unsigned short, unsigned char)>
c001ef6b:	e9 a5 05 00 00       	jmp    c001f515 <Vm::faultHandler(regs*)+0x79e>
c001ef70:	3c fa                	cmp    al,0xfa
c001ef72:	0f 84 f7 01 00 00    	je     c001f16f <Vm::faultHandler(regs*)+0x3f8>
c001ef78:	3c fb                	cmp    al,0xfb
c001ef7a:	0f 84 0a 02 00 00    	je     c001f18a <Vm::faultHandler(regs*)+0x413>
c001ef80:	3c f3                	cmp    al,0xf3
c001ef82:	0f 85 c2 05 00 00    	jne    c001f54a <Vm::faultHandler(regs*)+0x7d3>
c001ef88:	83 ec 0c             	sub    esp,0xc
c001ef8b:	68 b3 c5 02 c0       	push   0xc002c5b3
c001ef90:	e8 fd 3e ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001ef95:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ef98:	83 c4 10             	add    esp,0x10
c001ef9b:	e9 84 fe ff ff       	jmp    c001ee24 <Vm::faultHandler(regs*)+0xad>
c001efa0:	83 ec 0c             	sub    esp,0xc
c001efa3:	b3 02                	mov    bl,0x2
c001efa5:	68 8e c5 02 c0       	push   0xc002c58e
c001efaa:	e8 e3 3e ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001efaf:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001efb2:	83 c4 10             	add    esp,0x10
c001efb5:	e9 6a fe ff ff       	jmp    c001ee24 <Vm::faultHandler(regs*)+0xad>
c001efba:	83 ec 0c             	sub    esp,0xc
c001efbd:	b3 03                	mov    bl,0x3
c001efbf:	68 9a c5 02 c0       	push   0xc002c59a
c001efc4:	e8 c9 3e ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001efc9:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001efcc:	83 c4 10             	add    esp,0x10
c001efcf:	e9 50 fe ff ff       	jmp    c001ee24 <Vm::faultHandler(regs*)+0xad>
c001efd4:	83 ec 0c             	sub    esp,0xc
c001efd7:	b3 04                	mov    bl,0x4
c001efd9:	68 9e c5 02 c0       	push   0xc002c59e
c001efde:	e8 af 3e ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001efe3:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001efe6:	83 c4 10             	add    esp,0x10
c001efe9:	e9 36 fe ff ff       	jmp    c001ee24 <Vm::faultHandler(regs*)+0xad>
c001efee:	83 ec 0c             	sub    esp,0xc
c001eff1:	b3 05                	mov    bl,0x5
c001eff3:	68 a2 c5 02 c0       	push   0xc002c5a2
c001eff8:	e8 95 3e ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001effd:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f000:	83 c4 10             	add    esp,0x10
c001f003:	e9 1c fe ff ff       	jmp    c001ee24 <Vm::faultHandler(regs*)+0xad>
c001f008:	83 ec 0c             	sub    esp,0xc
c001f00b:	68 a6 c5 02 c0       	push   0xc002c5a6
c001f010:	e8 7d 3e ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001f015:	83 c4 10             	add    esp,0x10
c001f018:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f01b:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001f020:	e9 ff fd ff ff       	jmp    c001ee24 <Vm::faultHandler(regs*)+0xad>
c001f025:	50                   	push   eax
c001f026:	50                   	push   eax
c001f027:	6a 01                	push   0x1
c001f029:	68 ab c5 02 c0       	push   0xc002c5ab
c001f02e:	e8 5f 3e ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001f033:	83 c4 10             	add    esp,0x10
c001f036:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f039:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001f03e:	e9 e1 fd ff ff       	jmp    c001ee24 <Vm::faultHandler(regs*)+0xad>
c001f043:	83 ec 0c             	sub    esp,0xc
c001f046:	68 b9 c5 02 c0       	push   0xc002c5b9
c001f04b:	e8 42 3e ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001f050:	83 c4 10             	add    esp,0x10
c001f053:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001f056:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f05b:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001f05e:	74 2f                	je     c001f08f <Vm::faultHandler(regs*)+0x318>
c001f060:	83 ea 04             	sub    edx,0x4
c001f063:	25 ff 0d 00 00       	and    eax,0xdff
c001f068:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f06e:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f071:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f074:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f07a:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f07e:	0f 84 bf 04 00 00    	je     c001f543 <Vm::faultHandler(regs*)+0x7cc>
c001f084:	80 cc 02             	or     ah,0x2
c001f087:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f08a:	e9 b4 04 00 00       	jmp    c001f543 <Vm::faultHandler(regs*)+0x7cc>
c001f08f:	83 ea 02             	sub    edx,0x2
c001f092:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f098:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f09b:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f09f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f0a5:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f0a9:	74 05                	je     c001f0b0 <Vm::faultHandler(regs*)+0x339>
c001f0ab:	80 cc 02             	or     ah,0x2
c001f0ae:	eb 03                	jmp    c001f0b3 <Vm::faultHandler(regs*)+0x33c>
c001f0b0:	80 e4 fd             	and    ah,0xfd
c001f0b3:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f0b7:	e9 87 04 00 00       	jmp    c001f543 <Vm::faultHandler(regs*)+0x7cc>
c001f0bc:	83 ec 0c             	sub    esp,0xc
c001f0bf:	68 c0 c5 02 c0       	push   0xc002c5c0
c001f0c4:	e8 c9 3d ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001f0c9:	83 c4 10             	add    esp,0x10
c001f0cc:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f0d1:	74 28                	je     c001f0fb <Vm::faultHandler(regs*)+0x384>
c001f0d3:	8b 06                	mov    eax,DWORD PTR [esi]
c001f0d5:	25 ff 0d 00 00       	and    eax,0xdff
c001f0da:	0d 00 02 02 00       	or     eax,0x20200
c001f0df:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f0e2:	8b 06                	mov    eax,DWORD PTR [esi]
c001f0e4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f0ea:	c1 e8 09             	shr    eax,0x9
c001f0ed:	83 e0 01             	and    eax,0x1
c001f0f0:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f0f3:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f0f6:	83 c0 04             	add    eax,0x4
c001f0f9:	eb 24                	jmp    c001f11f <Vm::faultHandler(regs*)+0x3a8>
c001f0fb:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001f0fe:	0d 00 02 02 00       	or     eax,0x20200
c001f103:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f106:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f109:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f10f:	66 c1 e8 09          	shr    ax,0x9
c001f113:	83 e0 01             	and    eax,0x1
c001f116:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f119:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f11c:	83 c0 02             	add    eax,0x2
c001f11f:	25 ff ff 00 00       	and    eax,0xffff
c001f124:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f127:	e9 17 04 00 00       	jmp    c001f543 <Vm::faultHandler(regs*)+0x7cc>
c001f12c:	53                   	push   ebx
c001f12d:	53                   	push   ebx
c001f12e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f132:	50                   	push   eax
c001f133:	68 c6 c5 02 c0       	push   0xc002c5c6
c001f138:	e8 55 3d ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001f13d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f141:	83 c4 10             	add    esp,0x10
c001f144:	3c ee                	cmp    al,0xee
c001f146:	75 10                	jne    c001f158 <Vm::faultHandler(regs*)+0x3e1>
c001f148:	83 ec 0c             	sub    esp,0xc
c001f14b:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f14e:	e8 fa f8 ff ff       	call   c001ea4d <Vm::mainloop3(unsigned long)>
c001f153:	e9 c0 03 00 00       	jmp    c001f518 <Vm::faultHandler(regs*)+0x7a1>
c001f158:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001f15c:	83 ec 0c             	sub    esp,0xc
c001f15f:	53                   	push   ebx
c001f160:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001f164:	53                   	push   ebx
c001f165:	55                   	push   ebp
c001f166:	50                   	push   eax
c001f167:	57                   	push   edi
c001f168:	e8 0c fb ff ff       	call   c001ec79 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001f16d:	eb 36                	jmp    c001f1a5 <Vm::faultHandler(regs*)+0x42e>
c001f16f:	83 ec 0c             	sub    esp,0xc
c001f172:	68 d0 c5 02 c0       	push   0xc002c5d0
c001f177:	e8 16 3d ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001f17c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f181:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f185:	e9 8b 03 00 00       	jmp    c001f515 <Vm::faultHandler(regs*)+0x79e>
c001f18a:	83 ec 0c             	sub    esp,0xc
c001f18d:	68 d5 c5 02 c0       	push   0xc002c5d5
c001f192:	e8 fb 3c ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001f197:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f19c:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001f1a0:	e9 70 03 00 00       	jmp    c001f515 <Vm::faultHandler(regs*)+0x79e>
c001f1a5:	83 c4 20             	add    esp,0x20
c001f1a8:	e9 99 03 00 00       	jmp    c001f546 <Vm::faultHandler(regs*)+0x7cf>
c001f1ad:	83 ec 0c             	sub    esp,0xc
c001f1b0:	68 13 c6 02 c0       	push   0xc002c613
c001f1b5:	e8 d8 3c ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001f1ba:	83 c4 10             	add    esp,0x10
c001f1bd:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f1c0:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f1c5:	74 0d                	je     c001f1d4 <Vm::faultHandler(regs*)+0x45d>
c001f1c7:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f1ce:	0f 87 9e 01 00 00    	ja     c001f372 <Vm::faultHandler(regs*)+0x5fb>
c001f1d4:	83 ec 0c             	sub    esp,0xc
c001f1d7:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f1db:	0f b7 db             	movzx  ebx,bx
c001f1de:	50                   	push   eax
c001f1df:	e8 9e f7 ff ff       	call   c001e982 <Vm::inbv(unsigned short)>
c001f1e4:	83 c4 0c             	add    esp,0xc
c001f1e7:	0f b6 c0             	movzx  eax,al
c001f1ea:	50                   	push   eax
c001f1eb:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001f1ef:	50                   	push   eax
c001f1f0:	53                   	push   ebx
c001f1f1:	e8 41 fb ff ff       	call   c001ed37 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001f1f6:	83 c4 10             	add    esp,0x10
c001f1f9:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f1fc:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f200:	74 03                	je     c001f205 <Vm::faultHandler(regs*)+0x48e>
c001f202:	48                   	dec    eax
c001f203:	eb 01                	jmp    c001f206 <Vm::faultHandler(regs*)+0x48f>
c001f205:	40                   	inc    eax
c001f206:	0f b7 c0             	movzx  eax,ax
c001f209:	eb 7f                	jmp    c001f28a <Vm::faultHandler(regs*)+0x513>
c001f20b:	83 ec 0c             	sub    esp,0xc
c001f20e:	68 45 c6 02 c0       	push   0xc002c645
c001f213:	e8 7a 3c ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001f218:	83 c4 10             	add    esp,0x10
c001f21b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f21e:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f223:	74 0d                	je     c001f232 <Vm::faultHandler(regs*)+0x4bb>
c001f225:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f22c:	0f 87 40 01 00 00    	ja     c001f372 <Vm::faultHandler(regs*)+0x5fb>
c001f232:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f235:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001f239:	0f b7 db             	movzx  ebx,bx
c001f23c:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f241:	74 20                	je     c001f263 <Vm::faultHandler(regs*)+0x4ec>
c001f243:	ed                   	in     eax,dx
c001f244:	51                   	push   ecx
c001f245:	50                   	push   eax
c001f246:	56                   	push   esi
c001f247:	53                   	push   ebx
c001f248:	e8 15 fb ff ff       	call   c001ed62 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001f24d:	83 c4 10             	add    esp,0x10
c001f250:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f253:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f257:	74 05                	je     c001f25e <Vm::faultHandler(regs*)+0x4e7>
c001f259:	83 e8 04             	sub    eax,0x4
c001f25c:	eb 27                	jmp    c001f285 <Vm::faultHandler(regs*)+0x50e>
c001f25e:	83 c0 04             	add    eax,0x4
c001f261:	eb 22                	jmp    c001f285 <Vm::faultHandler(regs*)+0x50e>
c001f263:	66 ed                	in     ax,dx
c001f265:	0f b7 c0             	movzx  eax,ax
c001f268:	52                   	push   edx
c001f269:	50                   	push   eax
c001f26a:	56                   	push   esi
c001f26b:	53                   	push   ebx
c001f26c:	e8 db fa ff ff       	call   c001ed4c <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001f271:	83 c4 10             	add    esp,0x10
c001f274:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f277:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f27b:	74 05                	je     c001f282 <Vm::faultHandler(regs*)+0x50b>
c001f27d:	83 e8 02             	sub    eax,0x2
c001f280:	eb 03                	jmp    c001f285 <Vm::faultHandler(regs*)+0x50e>
c001f282:	83 c0 02             	add    eax,0x2
c001f285:	25 ff ff 00 00       	and    eax,0xffff
c001f28a:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001f28d:	e9 b1 02 00 00       	jmp    c001f543 <Vm::faultHandler(regs*)+0x7cc>
c001f292:	83 ec 0c             	sub    esp,0xc
c001f295:	4b                   	dec    ebx
c001f296:	68 4b c6 02 c0       	push   0xc002c64b
c001f29b:	e8 f2 3b ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001f2a0:	83 c4 10             	add    esp,0x10
c001f2a3:	80 fb 05             	cmp    bl,0x5
c001f2a6:	77 0a                	ja     c001f2b2 <Vm::faultHandler(regs*)+0x53b>
c001f2a8:	0f b6 db             	movzx  ebx,bl
c001f2ab:	ff 24 9d bc c6 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd3944]
c001f2b2:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f2b6:	eb 1b                	jmp    c001f2d3 <Vm::faultHandler(regs*)+0x55c>
c001f2b8:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f2bc:	eb 15                	jmp    c001f2d3 <Vm::faultHandler(regs*)+0x55c>
c001f2be:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f2c2:	eb 0f                	jmp    c001f2d3 <Vm::faultHandler(regs*)+0x55c>
c001f2c4:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f2c8:	eb 09                	jmp    c001f2d3 <Vm::faultHandler(regs*)+0x55c>
c001f2ca:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f2cd:	eb 04                	jmp    c001f2d3 <Vm::faultHandler(regs*)+0x55c>
c001f2cf:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f2d3:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f2d8:	74 0d                	je     c001f2e7 <Vm::faultHandler(regs*)+0x570>
c001f2da:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001f2e1:	0f 87 8b 00 00 00    	ja     c001f372 <Vm::faultHandler(regs*)+0x5fb>
c001f2e7:	53                   	push   ebx
c001f2e8:	53                   	push   ebx
c001f2e9:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001f2ed:	52                   	push   edx
c001f2ee:	50                   	push   eax
c001f2ef:	e8 0f fa ff ff       	call   c001ed03 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001f2f4:	5e                   	pop    esi
c001f2f5:	0f b6 c0             	movzx  eax,al
c001f2f8:	5d                   	pop    ebp
c001f2f9:	50                   	push   eax
c001f2fa:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f2fe:	50                   	push   eax
c001f2ff:	e8 91 f6 ff ff       	call   c001e995 <Vm::outbv(unsigned short, unsigned char)>
c001f304:	83 c4 10             	add    esp,0x10
c001f307:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001f30a:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f30e:	74 03                	je     c001f313 <Vm::faultHandler(regs*)+0x59c>
c001f310:	48                   	dec    eax
c001f311:	eb 01                	jmp    c001f314 <Vm::faultHandler(regs*)+0x59d>
c001f313:	40                   	inc    eax
c001f314:	0f b7 c0             	movzx  eax,ax
c001f317:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001f31a:	e9 24 02 00 00       	jmp    c001f543 <Vm::faultHandler(regs*)+0x7cc>
c001f31f:	83 ec 0c             	sub    esp,0xc
c001f322:	4b                   	dec    ebx
c001f323:	68 4b c6 02 c0       	push   0xc002c64b
c001f328:	e8 65 3b ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001f32d:	83 c4 10             	add    esp,0x10
c001f330:	80 fb 05             	cmp    bl,0x5
c001f333:	77 0a                	ja     c001f33f <Vm::faultHandler(regs*)+0x5c8>
c001f335:	0f b6 db             	movzx  ebx,bl
c001f338:	ff 24 9d d4 c6 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd392c]
c001f33f:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f343:	eb 1b                	jmp    c001f360 <Vm::faultHandler(regs*)+0x5e9>
c001f345:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f349:	eb 15                	jmp    c001f360 <Vm::faultHandler(regs*)+0x5e9>
c001f34b:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f34f:	eb 0f                	jmp    c001f360 <Vm::faultHandler(regs*)+0x5e9>
c001f351:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f355:	eb 09                	jmp    c001f360 <Vm::faultHandler(regs*)+0x5e9>
c001f357:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f35a:	eb 04                	jmp    c001f360 <Vm::faultHandler(regs*)+0x5e9>
c001f35c:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f360:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001f363:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f368:	74 39                	je     c001f3a3 <Vm::faultHandler(regs*)+0x62c>
c001f36a:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001f370:	76 31                	jbe    c001f3a3 <Vm::faultHandler(regs*)+0x62c>
c001f372:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f376:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f37a:	51                   	push   ecx
c001f37b:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f37f:	51                   	push   ecx
c001f380:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f384:	51                   	push   ecx
c001f385:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f389:	51                   	push   ecx
c001f38a:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f38e:	52                   	push   edx
c001f38f:	50                   	push   eax
c001f390:	50                   	push   eax
c001f391:	68 18 c6 02 c0       	push   0xc002c618
c001f396:	e8 f7 3a ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001f39b:	83 c4 20             	add    esp,0x20
c001f39e:	e9 fb 01 00 00       	jmp    c001f59e <Vm::faultHandler(regs*)+0x827>
c001f3a3:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001f3a6:	0f b7 d3             	movzx  edx,bx
c001f3a9:	81 e6 00 04 00 00    	and    esi,0x400
c001f3af:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001f3b2:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f3b7:	74 1d                	je     c001f3d6 <Vm::faultHandler(regs*)+0x65f>
c001f3b9:	51                   	push   ecx
c001f3ba:	51                   	push   ecx
c001f3bb:	52                   	push   edx
c001f3bc:	50                   	push   eax
c001f3bd:	e8 64 f9 ff ff       	call   c001ed26 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001f3c2:	83 c4 10             	add    esp,0x10
c001f3c5:	89 ea                	mov    edx,ebp
c001f3c7:	ef                   	out    dx,eax
c001f3c8:	85 f6                	test   esi,esi
c001f3ca:	74 05                	je     c001f3d1 <Vm::faultHandler(regs*)+0x65a>
c001f3cc:	83 eb 04             	sub    ebx,0x4
c001f3cf:	eb 21                	jmp    c001f3f2 <Vm::faultHandler(regs*)+0x67b>
c001f3d1:	83 c3 04             	add    ebx,0x4
c001f3d4:	eb 1c                	jmp    c001f3f2 <Vm::faultHandler(regs*)+0x67b>
c001f3d6:	51                   	push   ecx
c001f3d7:	51                   	push   ecx
c001f3d8:	52                   	push   edx
c001f3d9:	50                   	push   eax
c001f3da:	e8 35 f9 ff ff       	call   c001ed14 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001f3df:	83 c4 10             	add    esp,0x10
c001f3e2:	89 ea                	mov    edx,ebp
c001f3e4:	66 ef                	out    dx,ax
c001f3e6:	85 f6                	test   esi,esi
c001f3e8:	74 05                	je     c001f3ef <Vm::faultHandler(regs*)+0x678>
c001f3ea:	83 eb 02             	sub    ebx,0x2
c001f3ed:	eb 03                	jmp    c001f3f2 <Vm::faultHandler(regs*)+0x67b>
c001f3ef:	83 c3 02             	add    ebx,0x2
c001f3f2:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001f3f8:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001f3fb:	e9 43 01 00 00       	jmp    c001f543 <Vm::faultHandler(regs*)+0x7cc>
c001f400:	53                   	push   ebx
c001f401:	53                   	push   ebx
c001f402:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f406:	50                   	push   eax
c001f407:	68 51 c6 02 c0       	push   0xc002c651
c001f40c:	e8 81 3a ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001f411:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f418:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f41c:	89 04 24             	mov    DWORD PTR [esp],eax
c001f41f:	e8 5e f5 ff ff       	call   c001e982 <Vm::inbv(unsigned short)>
c001f424:	0f b6 c0             	movzx  eax,al
c001f427:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f42a:	eb 5e                	jmp    c001f48a <Vm::faultHandler(regs*)+0x713>
c001f42c:	51                   	push   ecx
c001f42d:	51                   	push   ecx
c001f42e:	53                   	push   ebx
c001f42f:	68 57 c6 02 c0       	push   0xc002c657
c001f434:	e8 59 3a ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001f439:	83 c4 10             	add    esp,0x10
c001f43c:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f441:	74 07                	je     c001f44a <Vm::faultHandler(regs*)+0x6d3>
c001f443:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f447:	ed                   	in     eax,dx
c001f448:	eb 14                	jmp    c001f45e <Vm::faultHandler(regs*)+0x6e7>
c001f44a:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001f44d:	66 31 db             	xor    bx,bx
c001f450:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001f453:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f457:	66 ed                	in     ax,dx
c001f459:	0f b7 c0             	movzx  eax,ax
c001f45c:	09 d8                	or     eax,ebx
c001f45e:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f461:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f465:	e9 dc 00 00 00       	jmp    c001f546 <Vm::faultHandler(regs*)+0x7cf>
c001f46a:	50                   	push   eax
c001f46b:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f46e:	53                   	push   ebx
c001f46f:	68 5d c6 02 c0       	push   0xc002c65d
c001f474:	e8 19 3a ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001f479:	58                   	pop    eax
c001f47a:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f47e:	5a                   	pop    edx
c001f47f:	50                   	push   eax
c001f480:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f484:	50                   	push   eax
c001f485:	e8 0b f5 ff ff       	call   c001e995 <Vm::outbv(unsigned short, unsigned char)>
c001f48a:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f48e:	e9 85 00 00 00       	jmp    c001f518 <Vm::faultHandler(regs*)+0x7a1>
c001f493:	50                   	push   eax
c001f494:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f497:	53                   	push   ebx
c001f498:	68 66 c6 02 c0       	push   0xc002c666
c001f49d:	e8 f0 39 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001f4a2:	83 c4 10             	add    esp,0x10
c001f4a5:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f4a9:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f4ae:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f4b1:	74 03                	je     c001f4b6 <Vm::faultHandler(regs*)+0x73f>
c001f4b3:	ef                   	out    dx,eax
c001f4b4:	eb ab                	jmp    c001f461 <Vm::faultHandler(regs*)+0x6ea>
c001f4b6:	66 ef                	out    dx,ax
c001f4b8:	eb a7                	jmp    c001f461 <Vm::faultHandler(regs*)+0x6ea>
c001f4ba:	55                   	push   ebp
c001f4bb:	55                   	push   ebp
c001f4bc:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f4bf:	68 6f c6 02 c0       	push   0xc002c66f
c001f4c4:	e8 c9 39 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001f4c9:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f4d0:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f4d4:	89 04 24             	mov    DWORD PTR [esp],eax
c001f4d7:	e8 a6 f4 ff ff       	call   c001e982 <Vm::inbv(unsigned short)>
c001f4dc:	0f b6 c0             	movzx  eax,al
c001f4df:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f4e2:	eb 31                	jmp    c001f515 <Vm::faultHandler(regs*)+0x79e>
c001f4e4:	56                   	push   esi
c001f4e5:	56                   	push   esi
c001f4e6:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f4e9:	68 75 c6 02 c0       	push   0xc002c675
c001f4ee:	e8 9f 39 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001f4f3:	83 c4 10             	add    esp,0x10
c001f4f6:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f4f9:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f4fe:	74 03                	je     c001f503 <Vm::faultHandler(regs*)+0x78c>
c001f500:	ed                   	in     eax,dx
c001f501:	eb 0d                	jmp    c001f510 <Vm::faultHandler(regs*)+0x799>
c001f503:	66 ed                	in     ax,dx
c001f505:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001f508:	0f b7 c0             	movzx  eax,ax
c001f50b:	66 31 d2             	xor    dx,dx
c001f50e:	09 d0                	or     eax,edx
c001f510:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f513:	eb 2e                	jmp    c001f543 <Vm::faultHandler(regs*)+0x7cc>
c001f515:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f518:	83 c4 10             	add    esp,0x10
c001f51b:	eb 29                	jmp    c001f546 <Vm::faultHandler(regs*)+0x7cf>
c001f51d:	50                   	push   eax
c001f51e:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f521:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f524:	68 84 c6 02 c0       	push   0xc002c684
c001f529:	e8 64 39 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001f52e:	83 c4 10             	add    esp,0x10
c001f531:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f534:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f539:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f53c:	74 03                	je     c001f541 <Vm::faultHandler(regs*)+0x7ca>
c001f53e:	ef                   	out    dx,eax
c001f53f:	eb 02                	jmp    c001f543 <Vm::faultHandler(regs*)+0x7cc>
c001f541:	66 ef                	out    dx,ax
c001f543:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f546:	b0 01                	mov    al,0x1
c001f548:	eb 56                	jmp    c001f5a0 <Vm::faultHandler(regs*)+0x829>
c001f54a:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f54e:	51                   	push   ecx
c001f54f:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f553:	51                   	push   ecx
c001f554:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f558:	51                   	push   ecx
c001f559:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f55d:	51                   	push   ecx
c001f55e:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f562:	52                   	push   edx
c001f563:	50                   	push   eax
c001f564:	50                   	push   eax
c001f565:	68 8d c6 02 c0       	push   0xc002c68d
c001f56a:	e8 23 39 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c001f56f:	83 c4 20             	add    esp,0x20
c001f572:	83 ec 0c             	sub    esp,0xc
c001f575:	6a 60                	push   0x60
c001f577:	e8 06 f4 ff ff       	call   c001e982 <Vm::inbv(unsigned short)>
c001f57c:	83 c4 10             	add    esp,0x10
c001f57f:	3c 1c                	cmp    al,0x1c
c001f581:	74 04                	je     c001f587 <Vm::faultHandler(regs*)+0x810>
c001f583:	3c 5a                	cmp    al,0x5a
c001f585:	75 eb                	jne    c001f572 <Vm::faultHandler(regs*)+0x7fb>
c001f587:	3c 1c                	cmp    al,0x1c
c001f589:	74 04                	je     c001f58f <Vm::faultHandler(regs*)+0x818>
c001f58b:	3c 5a                	cmp    al,0x5a
c001f58d:	75 0f                	jne    c001f59e <Vm::faultHandler(regs*)+0x827>
c001f58f:	83 ec 0c             	sub    esp,0xc
c001f592:	6a 60                	push   0x60
c001f594:	e8 e9 f3 ff ff       	call   c001e982 <Vm::inbv(unsigned short)>
c001f599:	83 c4 10             	add    esp,0x10
c001f59c:	eb e9                	jmp    c001f587 <Vm::faultHandler(regs*)+0x810>
c001f59e:	31 c0                	xor    eax,eax
c001f5a0:	83 c4 1c             	add    esp,0x1c
c001f5a3:	5b                   	pop    ebx
c001f5a4:	5e                   	pop    esi
c001f5a5:	5f                   	pop    edi
c001f5a6:	5d                   	pop    ebp
c001f5a7:	c3                   	ret    

c001f5a8 <Vm::x87Save(void*)>:
c001f5a8:	83 ec 10             	sub    esp,0x10
c001f5ab:	6a 48                	push   0x48
c001f5ad:	68 60 19 03 c0       	push   0xc0031960
c001f5b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f5b6:	e8 89 11 fe ff       	call   c0000744 <memcpy>
c001f5bb:	83 c4 1c             	add    esp,0x1c
c001f5be:	c3                   	ret    

c001f5bf <Vm::x87Load(void*)>:
c001f5bf:	83 ec 10             	sub    esp,0x10
c001f5c2:	6a 48                	push   0x48
c001f5c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001f5c8:	68 60 19 03 c0       	push   0xc0031960
c001f5cd:	e8 72 11 fe ff       	call   c0000744 <memcpy>
c001f5d2:	83 c4 1c             	add    esp,0x1c
c001f5d5:	c3                   	ret    

c001f5d6 <Vm::fpuInternalTo32(unsigned long long)>:
c001f5d6:	57                   	push   edi
c001f5d7:	56                   	push   esi
c001f5d8:	53                   	push   ebx
c001f5d9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f5dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5e1:	89 d6                	mov    esi,edx
c001f5e3:	89 d7                	mov    edi,edx
c001f5e5:	89 c1                	mov    ecx,eax
c001f5e7:	c1 ef 14             	shr    edi,0x14
c001f5ea:	89 d3                	mov    ebx,edx
c001f5ec:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f5f2:	31 d2                	xor    edx,edx
c001f5f4:	89 f8                	mov    eax,edi
c001f5f6:	81 e6 00 00 00 80    	and    esi,0x80000000
c001f5fc:	bf ff 00 00 00       	mov    edi,0xff
c001f601:	05 80 fc ff ff       	add    eax,0xfffffc80
c001f606:	83 d2 ff             	adc    edx,0xffffffff
c001f609:	39 c7                	cmp    edi,eax
c001f60b:	bf 00 00 00 00       	mov    edi,0x0
c001f610:	19 d7                	sbb    edi,edx
c001f612:	72 15                	jb     c001f629 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001f614:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001f618:	c1 e0 17             	shl    eax,0x17
c001f61b:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001f621:	09 f1                	or     ecx,esi
c001f623:	09 c1                	or     ecx,eax
c001f625:	89 cf                	mov    edi,ecx
c001f627:	eb 02                	jmp    c001f62b <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001f629:	31 ff                	xor    edi,edi
c001f62b:	89 f8                	mov    eax,edi
c001f62d:	5b                   	pop    ebx
c001f62e:	5e                   	pop    esi
c001f62f:	5f                   	pop    edi
c001f630:	c3                   	ret    

c001f631 <Vm::fpuInternalTo64(unsigned long long)>:
c001f631:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f635:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f639:	c3                   	ret    

c001f63a <Vm::fpu32ToInternal(unsigned int)>:
c001f63a:	57                   	push   edi
c001f63b:	31 ff                	xor    edi,edi
c001f63d:	56                   	push   esi
c001f63e:	53                   	push   ebx
c001f63f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f643:	89 cb                	mov    ebx,ecx
c001f645:	89 ce                	mov    esi,ecx
c001f647:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001f64d:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001f653:	c1 e9 17             	shr    ecx,0x17
c001f656:	89 f0                	mov    eax,esi
c001f658:	0f b6 d1             	movzx  edx,cl
c001f65b:	81 c2 80 03 00 00    	add    edx,0x380
c001f661:	89 d1                	mov    ecx,edx
c001f663:	89 fa                	mov    edx,edi
c001f665:	c1 e1 14             	shl    ecx,0x14
c001f668:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001f66c:	c1 e0 1d             	shl    eax,0x1d
c001f66f:	89 d7                	mov    edi,edx
c001f671:	89 c6                	mov    esi,eax
c001f673:	89 ca                	mov    edx,ecx
c001f675:	89 f0                	mov    eax,esi
c001f677:	09 fa                	or     edx,edi
c001f679:	09 da                	or     edx,ebx
c001f67b:	5b                   	pop    ebx
c001f67c:	5e                   	pop    esi
c001f67d:	5f                   	pop    edi
c001f67e:	c3                   	ret    

c001f67f <Vm::fpu64ToInternal(unsigned long long)>:
c001f67f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f683:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f687:	c3                   	ret    

c001f688 <Vm::fpuFloatToLong(unsigned long long)>:
c001f688:	57                   	push   edi
c001f689:	31 c0                	xor    eax,eax
c001f68b:	56                   	push   esi
c001f68c:	31 d2                	xor    edx,edx
c001f68e:	53                   	push   ebx
c001f68f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f693:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f697:	89 d9                	mov    ecx,ebx
c001f699:	c1 e9 14             	shr    ecx,0x14
c001f69c:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f6a2:	89 cf                	mov    edi,ecx
c001f6a4:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f6aa:	78 33                	js     c001f6df <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f6ac:	89 d9                	mov    ecx,ebx
c001f6ae:	89 f0                	mov    eax,esi
c001f6b0:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f6b6:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f6bc:	89 ca                	mov    edx,ecx
c001f6be:	b9 34 00 00 00       	mov    ecx,0x34
c001f6c3:	29 f9                	sub    ecx,edi
c001f6c5:	0f ad d0             	shrd   eax,edx,cl
c001f6c8:	d3 fa                	sar    edx,cl
c001f6ca:	f6 c1 20             	test   cl,0x20
c001f6cd:	74 05                	je     c001f6d4 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f6cf:	89 d0                	mov    eax,edx
c001f6d1:	c1 fa 1f             	sar    edx,0x1f
c001f6d4:	85 db                	test   ebx,ebx
c001f6d6:	79 07                	jns    c001f6df <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f6d8:	f7 d8                	neg    eax
c001f6da:	83 d2 00             	adc    edx,0x0
c001f6dd:	f7 da                	neg    edx
c001f6df:	5b                   	pop    ebx
c001f6e0:	5e                   	pop    esi
c001f6e1:	5f                   	pop    edi
c001f6e2:	c3                   	ret    

c001f6e3 <Vm::fpuULongToFloat(unsigned long long)>:
c001f6e3:	57                   	push   edi
c001f6e4:	31 c9                	xor    ecx,ecx
c001f6e6:	56                   	push   esi
c001f6e7:	53                   	push   ebx
c001f6e8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f6ec:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f6f0:	0f ba e7 14          	bt     edi,0x14
c001f6f4:	72 07                	jb     c001f6fd <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f6f6:	01 f6                	add    esi,esi
c001f6f8:	11 ff                	adc    edi,edi
c001f6fa:	41                   	inc    ecx
c001f6fb:	eb f3                	jmp    c001f6f0 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f6fd:	89 fa                	mov    edx,edi
c001f6ff:	89 f0                	mov    eax,esi
c001f701:	bb 33 04 00 00       	mov    ebx,0x433
c001f706:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f70c:	29 cb                	sub    ebx,ecx
c001f70e:	89 d9                	mov    ecx,ebx
c001f710:	5b                   	pop    ebx
c001f711:	c1 e1 14             	shl    ecx,0x14
c001f714:	5e                   	pop    esi
c001f715:	09 ca                	or     edx,ecx
c001f717:	5f                   	pop    edi
c001f718:	c3                   	ret    

c001f719 <Vm::fpuLongToFloat(long long)>:
c001f719:	56                   	push   esi
c001f71a:	31 c0                	xor    eax,eax
c001f71c:	53                   	push   ebx
c001f71d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f721:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f725:	39 c8                	cmp    eax,ecx
c001f727:	19 d8                	sbb    eax,ebx
c001f729:	7d 04                	jge    c001f72f <Vm::fpuLongToFloat(long long)+0x16>
c001f72b:	31 f6                	xor    esi,esi
c001f72d:	eb 0c                	jmp    c001f73b <Vm::fpuLongToFloat(long long)+0x22>
c001f72f:	f7 d9                	neg    ecx
c001f731:	be 01 00 00 00       	mov    esi,0x1
c001f736:	83 d3 00             	adc    ebx,0x0
c001f739:	f7 db                	neg    ebx
c001f73b:	31 c0                	xor    eax,eax
c001f73d:	0f ba e3 14          	bt     ebx,0x14
c001f741:	72 07                	jb     c001f74a <Vm::fpuLongToFloat(long long)+0x31>
c001f743:	01 c9                	add    ecx,ecx
c001f745:	11 db                	adc    ebx,ebx
c001f747:	40                   	inc    eax
c001f748:	eb f3                	jmp    c001f73d <Vm::fpuLongToFloat(long long)+0x24>
c001f74a:	ba 33 04 00 00       	mov    edx,0x433
c001f74f:	29 c2                	sub    edx,eax
c001f751:	89 c8                	mov    eax,ecx
c001f753:	c1 e2 14             	shl    edx,0x14
c001f756:	89 d9                	mov    ecx,ebx
c001f758:	89 f3                	mov    ebx,esi
c001f75a:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f760:	09 ca                	or     edx,ecx
c001f762:	84 db                	test   bl,bl
c001f764:	74 06                	je     c001f76c <Vm::fpuLongToFloat(long long)+0x53>
c001f766:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f76c:	5b                   	pop    ebx
c001f76d:	5e                   	pop    esi
c001f76e:	c3                   	ret    

c001f76f <Vm::fpuGet0()>:
c001f76f:	31 c0                	xor    eax,eax
c001f771:	31 d2                	xor    edx,edx
c001f773:	c3                   	ret    

c001f774 <Vm::fpuGet1()>:
c001f774:	b8 01 00 00 00       	mov    eax,0x1
c001f779:	31 d2                	xor    edx,edx
c001f77b:	c3                   	ret    

c001f77c <Vm::fpuGetPi()>:
c001f77c:	b8 03 00 00 00       	mov    eax,0x3
c001f781:	31 d2                	xor    edx,edx
c001f783:	c3                   	ret    

c001f784 <Vm::fpuGetLog2E()>:
c001f784:	83 ec 18             	sub    esp,0x18
c001f787:	68 ec c6 02 c0       	push   0xc002c6ec
c001f78c:	e8 dc ad ff ff       	call   c001a56d <Krnl::panic(char const*)>
c001f791:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f796:	31 d2                	xor    edx,edx
c001f798:	83 c4 1c             	add    esp,0x1c
c001f79b:	c3                   	ret    

c001f79c <Vm::fpuGetLogE2()>:
c001f79c:	83 ec 18             	sub    esp,0x18
c001f79f:	68 f8 c6 02 c0       	push   0xc002c6f8
c001f7a4:	e8 c4 ad ff ff       	call   c001a56d <Krnl::panic(char const*)>
c001f7a9:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f7ae:	31 d2                	xor    edx,edx
c001f7b0:	83 c4 1c             	add    esp,0x1c
c001f7b3:	c3                   	ret    

c001f7b4 <Vm::fpuGetLog210()>:
c001f7b4:	83 ec 18             	sub    esp,0x18
c001f7b7:	68 04 c7 02 c0       	push   0xc002c704
c001f7bc:	e8 ac ad ff ff       	call   c001a56d <Krnl::panic(char const*)>
c001f7c1:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f7c6:	31 d2                	xor    edx,edx
c001f7c8:	83 c4 1c             	add    esp,0x1c
c001f7cb:	c3                   	ret    

c001f7cc <Vm::fpuGetLog102()>:
c001f7cc:	83 ec 18             	sub    esp,0x18
c001f7cf:	68 11 c7 02 c0       	push   0xc002c711
c001f7d4:	e8 94 ad ff ff       	call   c001a56d <Krnl::panic(char const*)>
c001f7d9:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f7de:	31 d2                	xor    edx,edx
c001f7e0:	83 c4 1c             	add    esp,0x1c
c001f7e3:	c3                   	ret    

c001f7e4 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f7e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f7e8:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f7ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f7f0:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f7f4:	0f 92 c0             	setb   al
c001f7f7:	c3                   	ret    

c001f7f8 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f7f8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f7fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f800:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f804:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f808:	09 c2                	or     edx,eax
c001f80a:	0f 94 c0             	sete   al
c001f80d:	c3                   	ret    

c001f80e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f80e:	57                   	push   edi
c001f80f:	56                   	push   esi
c001f810:	53                   	push   ebx
c001f811:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f815:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f819:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f81d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f821:	57                   	push   edi
c001f822:	56                   	push   esi
c001f823:	53                   	push   ebx
c001f824:	51                   	push   ecx
c001f825:	e8 ce ff ff ff       	call   c001f7f8 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f82a:	83 c4 10             	add    esp,0x10
c001f82d:	88 c2                	mov    dl,al
c001f82f:	31 c0                	xor    eax,eax
c001f831:	84 d2                	test   dl,dl
c001f833:	75 0c                	jne    c001f841 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f835:	57                   	push   edi
c001f836:	56                   	push   esi
c001f837:	53                   	push   ebx
c001f838:	51                   	push   ecx
c001f839:	e8 a6 ff ff ff       	call   c001f7e4 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f83e:	83 c4 10             	add    esp,0x10
c001f841:	83 e0 01             	and    eax,0x1
c001f844:	5b                   	pop    ebx
c001f845:	88 c1                	mov    cl,al
c001f847:	83 e2 01             	and    edx,0x1
c001f84a:	a0 61 19 03 c0       	mov    al,ds:0xc0031961
c001f84f:	c1 e2 06             	shl    edx,0x6
c001f852:	83 e0 ba             	and    eax,0xffffffba
c001f855:	5e                   	pop    esi
c001f856:	09 c8                	or     eax,ecx
c001f858:	5f                   	pop    edi
c001f859:	09 d0                	or     eax,edx
c001f85b:	a2 61 19 03 c0       	mov    ds:0xc0031961,al
c001f860:	c3                   	ret    

c001f861 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f861:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f865:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f869:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f86d:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f871:	c3                   	ret    

c001f872 <Vm::fpuAbs(unsigned long long)>:
c001f872:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f876:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f87a:	c3                   	ret    

c001f87b <Vm::fpuChs(unsigned long long)>:
c001f87b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f87f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f883:	f7 d8                	neg    eax
c001f885:	83 d2 00             	adc    edx,0x0
c001f888:	f7 da                	neg    edx
c001f88a:	c3                   	ret    

c001f88b <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f88b:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f88f:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f894:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f898:	eb c7                	jmp    c001f861 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f89a <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f89a:	53                   	push   ebx
c001f89b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f89f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f8a3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f8a7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f8ab:	0f af ca             	imul   ecx,edx
c001f8ae:	0f af d8             	imul   ebx,eax
c001f8b1:	f7 e2                	mul    edx
c001f8b3:	01 d9                	add    ecx,ebx
c001f8b5:	5b                   	pop    ebx
c001f8b6:	01 ca                	add    edx,ecx
c001f8b8:	c3                   	ret    

c001f8b9 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f8b9:	83 ec 0c             	sub    esp,0xc
c001f8bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f8c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f8c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f8c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f8cc:	e8 9b 70 00 00       	call   c002696c <__udivdi3>
c001f8d1:	83 c4 1c             	add    esp,0x1c
c001f8d4:	c3                   	ret    

c001f8d5 <Vm::fpuSquare(unsigned long long)>:
c001f8d5:	50                   	push   eax
c001f8d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f8da:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f8de:	52                   	push   edx
c001f8df:	50                   	push   eax
c001f8e0:	52                   	push   edx
c001f8e1:	50                   	push   eax
c001f8e2:	e8 b3 ff ff ff       	call   c001f89a <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f8e7:	83 c4 14             	add    esp,0x14
c001f8ea:	c3                   	ret    

c001f8eb <Vm::fpuGetReg(int)>:
c001f8eb:	83 ec 0c             	sub    esp,0xc
c001f8ee:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f8f3:	76 10                	jbe    c001f905 <Vm::fpuGetReg(int)+0x1a>
c001f8f5:	83 ec 0c             	sub    esp,0xc
c001f8f8:	68 1e c7 02 c0       	push   0xc002c71e
c001f8fd:	e8 6b ac ff ff       	call   c001a56d <Krnl::panic(char const*)>
c001f902:	83 c4 10             	add    esp,0x10
c001f905:	a0 61 19 03 c0       	mov    al,ds:0xc0031961
c001f90a:	b9 08 00 00 00       	mov    ecx,0x8
c001f90f:	c0 e8 03             	shr    al,0x3
c001f912:	83 e0 07             	and    eax,0x7
c001f915:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f919:	99                   	cdq    
c001f91a:	f7 f9                	idiv   ecx
c001f91c:	8b 04 d5 64 19 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffce69c]
c001f923:	8b 14 d5 68 19 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffce698]
c001f92a:	83 c4 0c             	add    esp,0xc
c001f92d:	c3                   	ret    

c001f92e <Vm::fpuSetReg(int, unsigned long long)>:
c001f92e:	57                   	push   edi
c001f92f:	56                   	push   esi
c001f930:	52                   	push   edx
c001f931:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f935:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f939:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f93e:	76 10                	jbe    c001f950 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001f940:	83 ec 0c             	sub    esp,0xc
c001f943:	68 31 c7 02 c0       	push   0xc002c731
c001f948:	e8 20 ac ff ff       	call   c001a56d <Krnl::panic(char const*)>
c001f94d:	83 c4 10             	add    esp,0x10
c001f950:	a0 61 19 03 c0       	mov    al,ds:0xc0031961
c001f955:	b9 08 00 00 00       	mov    ecx,0x8
c001f95a:	c0 e8 03             	shr    al,0x3
c001f95d:	83 e0 07             	and    eax,0x7
c001f960:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f964:	99                   	cdq    
c001f965:	f7 f9                	idiv   ecx
c001f967:	89 34 d5 64 19 03 c0 	mov    DWORD PTR [edx*8-0x3ffce69c],esi
c001f96e:	89 3c d5 68 19 03 c0 	mov    DWORD PTR [edx*8-0x3ffce698],edi
c001f975:	58                   	pop    eax
c001f976:	5e                   	pop    esi
c001f977:	5f                   	pop    edi
c001f978:	c3                   	ret    

c001f979 <Vm::fpuPush(unsigned long long)>:
c001f979:	a0 61 19 03 c0       	mov    al,ds:0xc0031961
c001f97e:	c0 e8 03             	shr    al,0x3
c001f981:	83 e0 07             	and    eax,0x7
c001f984:	83 c0 07             	add    eax,0x7
c001f987:	88 c2                	mov    dl,al
c001f989:	83 e0 07             	and    eax,0x7
c001f98c:	83 e2 07             	and    edx,0x7
c001f98f:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001f996:	8a 15 61 19 03 c0    	mov    dl,BYTE PTR ds:0xc0031961
c001f99c:	83 e2 c7             	and    edx,0xffffffc7
c001f99f:	09 ca                	or     edx,ecx
c001f9a1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f9a5:	88 15 61 19 03 c0    	mov    BYTE PTR ds:0xc0031961,dl
c001f9ab:	89 0c c5 68 19 03 c0 	mov    DWORD PTR [eax*8-0x3ffce698],ecx
c001f9b2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f9b6:	89 14 c5 64 19 03 c0 	mov    DWORD PTR [eax*8-0x3ffce69c],edx
c001f9bd:	a1 a4 19 03 c0       	mov    eax,ds:0xc00319a4
c001f9c2:	83 f8 08             	cmp    eax,0x8
c001f9c5:	75 08                	jne    c001f9cf <Vm::fpuPush(unsigned long long)+0x56>
c001f9c7:	80 0d 60 19 03 c0 40 	or     BYTE PTR ds:0xc0031960,0x40
c001f9ce:	c3                   	ret    
c001f9cf:	40                   	inc    eax
c001f9d0:	a3 a4 19 03 c0       	mov    ds:0xc00319a4,eax
c001f9d5:	c3                   	ret    

c001f9d6 <Vm::fpuPop()>:
c001f9d6:	8a 0d 61 19 03 c0    	mov    cl,BYTE PTR ds:0xc0031961
c001f9dc:	53                   	push   ebx
c001f9dd:	c0 e9 03             	shr    cl,0x3
c001f9e0:	8a 1d 61 19 03 c0    	mov    bl,BYTE PTR ds:0xc0031961
c001f9e6:	83 e1 07             	and    ecx,0x7
c001f9e9:	83 e3 c7             	and    ebx,0xffffffc7
c001f9ec:	8b 04 cd 64 19 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffce69c]
c001f9f3:	8b 14 cd 68 19 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffce698]
c001f9fa:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001fa01:	83 e1 38             	and    ecx,0x38
c001fa04:	09 d9                	or     ecx,ebx
c001fa06:	88 0d 61 19 03 c0    	mov    BYTE PTR ds:0xc0031961,cl
c001fa0c:	8b 0d a4 19 03 c0    	mov    ecx,DWORD PTR ds:0xc00319a4
c001fa12:	85 c9                	test   ecx,ecx
c001fa14:	74 09                	je     c001fa1f <Vm::fpuPop()+0x49>
c001fa16:	49                   	dec    ecx
c001fa17:	89 0d a4 19 03 c0    	mov    DWORD PTR ds:0xc00319a4,ecx
c001fa1d:	eb 07                	jmp    c001fa26 <Vm::fpuPop()+0x50>
c001fa1f:	80 0d 60 19 03 c0 40 	or     BYTE PTR ds:0xc0031960,0x40
c001fa26:	5b                   	pop    ebx
c001fa27:	c3                   	ret    

c001fa28 <Vm::x87Handler(regs*)>:
c001fa28:	55                   	push   ebp
c001fa29:	57                   	push   edi
c001fa2a:	56                   	push   esi
c001fa2b:	53                   	push   ebx
c001fa2c:	83 ec 1c             	sub    esp,0x1c
c001fa2f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001fa33:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001fa38:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001fa3b:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001fa43:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001fa47:	50                   	push   eax
c001fa48:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001fa4c:	50                   	push   eax
c001fa4d:	8d 44 24 14          	lea    eax,[esp+0x14]
c001fa51:	50                   	push   eax
c001fa52:	53                   	push   ebx
c001fa53:	e8 dc a1 ff ff       	call   c0019c34 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001fa58:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001fa5b:	83 c4 10             	add    esp,0x10
c001fa5e:	89 c6                	mov    esi,eax
c001fa60:	80 fa d9             	cmp    dl,0xd9
c001fa63:	0f 85 52 01 00 00    	jne    c001fbbb <Vm::x87Handler(regs*)+0x193>
c001fa69:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fa6d:	8d 50 20             	lea    edx,[eax+0x20]
c001fa70:	80 fa 0e             	cmp    dl,0xe
c001fa73:	0f 87 86 00 00 00    	ja     c001faff <Vm::x87Handler(regs*)+0xd7>
c001fa79:	0f b6 d2             	movzx  edx,dl
c001fa7c:	ff 24 95 44 c7 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd38bc]
c001fa83:	e8 e7 fc ff ff       	call   c001f76f <Vm::fpuGet0()>
c001fa88:	eb 05                	jmp    c001fa8f <Vm::x87Handler(regs*)+0x67>
c001fa8a:	e8 e5 fc ff ff       	call   c001f774 <Vm::fpuGet1()>
c001fa8f:	57                   	push   edi
c001fa90:	57                   	push   edi
c001fa91:	52                   	push   edx
c001fa92:	50                   	push   eax
c001fa93:	e8 e1 fe ff ff       	call   c001f979 <Vm::fpuPush(unsigned long long)>
c001fa98:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fa9c:	83 c4 10             	add    esp,0x10
c001fa9f:	b0 01                	mov    al,0x1
c001faa1:	e9 e3 09 00 00       	jmp    c0020489 <Vm::x87Handler(regs*)+0xa61>
c001faa6:	83 ec 0c             	sub    esp,0xc
c001faa9:	6a 00                	push   0x0
c001faab:	e8 3b fe ff ff       	call   c001f8eb <Vm::fpuGetReg(int)>
c001fab0:	59                   	pop    ecx
c001fab1:	5e                   	pop    esi
c001fab2:	52                   	push   edx
c001fab3:	50                   	push   eax
c001fab4:	e8 c2 fd ff ff       	call   c001f87b <Vm::fpuChs(unsigned long long)>
c001fab9:	eb 13                	jmp    c001face <Vm::x87Handler(regs*)+0xa6>
c001fabb:	83 ec 0c             	sub    esp,0xc
c001fabe:	6a 00                	push   0x0
c001fac0:	e8 26 fe ff ff       	call   c001f8eb <Vm::fpuGetReg(int)>
c001fac5:	5f                   	pop    edi
c001fac6:	5d                   	pop    ebp
c001fac7:	52                   	push   edx
c001fac8:	50                   	push   eax
c001fac9:	e8 a4 fd ff ff       	call   c001f872 <Vm::fpuAbs(unsigned long long)>
c001face:	83 c4 0c             	add    esp,0xc
c001fad1:	52                   	push   edx
c001fad2:	50                   	push   eax
c001fad3:	6a 00                	push   0x0
c001fad5:	e8 54 fe ff ff       	call   c001f92e <Vm::fpuSetReg(int, unsigned long long)>
c001fada:	eb bc                	jmp    c001fa98 <Vm::x87Handler(regs*)+0x70>
c001fadc:	e8 d3 fc ff ff       	call   c001f7b4 <Vm::fpuGetLog210()>
c001fae1:	eb ac                	jmp    c001fa8f <Vm::x87Handler(regs*)+0x67>
c001fae3:	e8 9c fc ff ff       	call   c001f784 <Vm::fpuGetLog2E()>
c001fae8:	eb a5                	jmp    c001fa8f <Vm::x87Handler(regs*)+0x67>
c001faea:	e8 8d fc ff ff       	call   c001f77c <Vm::fpuGetPi()>
c001faef:	eb 9e                	jmp    c001fa8f <Vm::x87Handler(regs*)+0x67>
c001faf1:	e8 d6 fc ff ff       	call   c001f7cc <Vm::fpuGetLog102()>
c001faf6:	eb 97                	jmp    c001fa8f <Vm::x87Handler(regs*)+0x67>
c001faf8:	e8 9f fc ff ff       	call   c001f79c <Vm::fpuGetLogE2()>
c001fafd:	eb 90                	jmp    c001fa8f <Vm::x87Handler(regs*)+0x67>
c001faff:	8d 50 40             	lea    edx,[eax+0x40]
c001fb02:	80 fa 07             	cmp    dl,0x7
c001fb05:	77 15                	ja     c001fb1c <Vm::x87Handler(regs*)+0xf4>
c001fb07:	83 ec 0c             	sub    esp,0xc
c001fb0a:	2d c0 00 00 00       	sub    eax,0xc0
c001fb0f:	50                   	push   eax
c001fb10:	e8 d6 fd ff ff       	call   c001f8eb <Vm::fpuGetReg(int)>
c001fb15:	59                   	pop    ecx
c001fb16:	5e                   	pop    esi
c001fb17:	e9 75 ff ff ff       	jmp    c001fa91 <Vm::x87Handler(regs*)+0x69>
c001fb1c:	8d 50 38             	lea    edx,[eax+0x38]
c001fb1f:	80 fa 07             	cmp    dl,0x7
c001fb22:	77 3c                	ja     c001fb60 <Vm::x87Handler(regs*)+0x138>
c001fb24:	83 ec 0c             	sub    esp,0xc
c001fb27:	2d c8 00 00 00       	sub    eax,0xc8
c001fb2c:	50                   	push   eax
c001fb2d:	e8 b9 fd ff ff       	call   c001f8eb <Vm::fpuGetReg(int)>
c001fb32:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fb39:	89 c6                	mov    esi,eax
c001fb3b:	89 d7                	mov    edi,edx
c001fb3d:	e8 a9 fd ff ff       	call   c001f8eb <Vm::fpuGetReg(int)>
c001fb42:	83 c4 0c             	add    esp,0xc
c001fb45:	52                   	push   edx
c001fb46:	50                   	push   eax
c001fb47:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb4b:	2d c8 00 00 00       	sub    eax,0xc8
c001fb50:	50                   	push   eax
c001fb51:	e8 d8 fd ff ff       	call   c001f92e <Vm::fpuSetReg(int, unsigned long long)>
c001fb56:	83 c4 0c             	add    esp,0xc
c001fb59:	57                   	push   edi
c001fb5a:	56                   	push   esi
c001fb5b:	e9 73 ff ff ff       	jmp    c001fad3 <Vm::x87Handler(regs*)+0xab>
c001fb60:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fb64:	84 d2                	test   dl,dl
c001fb66:	75 0f                	jne    c001fb77 <Vm::x87Handler(regs*)+0x14f>
c001fb68:	83 ec 0c             	sub    esp,0xc
c001fb6b:	ff 36                	push   DWORD PTR [esi]
c001fb6d:	e8 c8 fa ff ff       	call   c001f63a <Vm::fpu32ToInternal(unsigned int)>
c001fb72:	e9 bf 00 00 00       	jmp    c001fc36 <Vm::x87Handler(regs*)+0x20e>
c001fb77:	80 fa 03             	cmp    dl,0x3
c001fb7a:	75 13                	jne    c001fb8f <Vm::x87Handler(regs*)+0x167>
c001fb7c:	e8 55 fe ff ff       	call   c001f9d6 <Vm::fpuPop()>
c001fb81:	55                   	push   ebp
c001fb82:	55                   	push   ebp
c001fb83:	52                   	push   edx
c001fb84:	50                   	push   eax
c001fb85:	e8 4c fa ff ff       	call   c001f5d6 <Vm::fpuInternalTo32(unsigned long long)>
c001fb8a:	e9 88 00 00 00       	jmp    c001fc17 <Vm::x87Handler(regs*)+0x1ef>
c001fb8f:	80 fa 05             	cmp    dl,0x5
c001fb92:	75 0e                	jne    c001fba2 <Vm::x87Handler(regs*)+0x17a>
c001fb94:	66 8b 06             	mov    ax,WORD PTR [esi]
c001fb97:	66 a3 62 19 03 c0    	mov    ds:0xc0031962,ax
c001fb9d:	e9 df 00 00 00       	jmp    c001fc81 <Vm::x87Handler(regs*)+0x259>
c001fba2:	31 c0                	xor    eax,eax
c001fba4:	80 fa 07             	cmp    dl,0x7
c001fba7:	0f 85 dc 08 00 00    	jne    c0020489 <Vm::x87Handler(regs*)+0xa61>
c001fbad:	66 a1 62 19 03 c0    	mov    ax,ds:0xc0031962
c001fbb3:	66 89 06             	mov    WORD PTR [esi],ax
c001fbb6:	e9 c6 00 00 00       	jmp    c001fc81 <Vm::x87Handler(regs*)+0x259>
c001fbbb:	80 fa d8             	cmp    dl,0xd8
c001fbbe:	0f 84 c9 00 00 00    	je     c001fc8d <Vm::x87Handler(regs*)+0x265>
c001fbc4:	80 fa dc             	cmp    dl,0xdc
c001fbc7:	0f 84 0d 02 00 00    	je     c001fdda <Vm::x87Handler(regs*)+0x3b2>
c001fbcd:	80 fa de             	cmp    dl,0xde
c001fbd0:	0f 84 cd 02 00 00    	je     c001fea3 <Vm::x87Handler(regs*)+0x47b>
c001fbd6:	80 fa dd             	cmp    dl,0xdd
c001fbd9:	0f 84 5f 04 00 00    	je     c002003e <Vm::x87Handler(regs*)+0x616>
c001fbdf:	80 fa da             	cmp    dl,0xda
c001fbe2:	0f 84 24 05 00 00    	je     c002010c <Vm::x87Handler(regs*)+0x6e4>
c001fbe8:	80 fa df             	cmp    dl,0xdf
c001fbeb:	0f 84 68 05 00 00    	je     c0020159 <Vm::x87Handler(regs*)+0x731>
c001fbf1:	31 c0                	xor    eax,eax
c001fbf3:	80 fa db             	cmp    dl,0xdb
c001fbf6:	0f 85 8d 08 00 00    	jne    c0020489 <Vm::x87Handler(regs*)+0xa61>
c001fbfc:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fc00:	80 fa 03             	cmp    dl,0x3
c001fc03:	0f 85 70 06 00 00    	jne    c0020279 <Vm::x87Handler(regs*)+0x851>
c001fc09:	e8 c8 fd ff ff       	call   c001f9d6 <Vm::fpuPop()>
c001fc0e:	55                   	push   ebp
c001fc0f:	55                   	push   ebp
c001fc10:	52                   	push   edx
c001fc11:	50                   	push   eax
c001fc12:	e8 71 fa ff ff       	call   c001f688 <Vm::fpuFloatToLong(unsigned long long)>
c001fc17:	83 c4 10             	add    esp,0x10
c001fc1a:	89 06                	mov    DWORD PTR [esi],eax
c001fc1c:	eb 63                	jmp    c001fc81 <Vm::x87Handler(regs*)+0x259>
c001fc1e:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fc22:	84 d2                	test   dl,dl
c001fc24:	0f 85 e6 05 00 00    	jne    c0020210 <Vm::x87Handler(regs*)+0x7e8>
c001fc2a:	57                   	push   edi
c001fc2b:	57                   	push   edi
c001fc2c:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fc2f:	ff 36                	push   DWORD PTR [esi]
c001fc31:	e8 49 fa ff ff       	call   c001f67f <Vm::fpu64ToInternal(unsigned long long)>
c001fc36:	5e                   	pop    esi
c001fc37:	5f                   	pop    edi
c001fc38:	52                   	push   edx
c001fc39:	50                   	push   eax
c001fc3a:	e8 3a fd ff ff       	call   c001f979 <Vm::fpuPush(unsigned long long)>
c001fc3f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fc43:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fc46:	e9 51 fe ff ff       	jmp    c001fa9c <Vm::x87Handler(regs*)+0x74>
c001fc4b:	80 fa 03             	cmp    dl,0x3
c001fc4e:	0f 85 d7 06 00 00    	jne    c002032b <Vm::x87Handler(regs*)+0x903>
c001fc54:	57                   	push   edi
c001fc55:	57                   	push   edi
c001fc56:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fc59:	ff 36                	push   DWORD PTR [esi]
c001fc5b:	e8 1f fa ff ff       	call   c001f67f <Vm::fpu64ToInternal(unsigned long long)>
c001fc60:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc67:	89 c6                	mov    esi,eax
c001fc69:	89 d7                	mov    edi,edx
c001fc6b:	e8 7b fc ff ff       	call   c001f8eb <Vm::fpuGetReg(int)>
c001fc70:	57                   	push   edi
c001fc71:	56                   	push   esi
c001fc72:	52                   	push   edx
c001fc73:	50                   	push   eax
c001fc74:	e8 95 fb ff ff       	call   c001f80e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fc79:	83 c4 20             	add    esp,0x20
c001fc7c:	e8 55 fd ff ff       	call   c001f9d6 <Vm::fpuPop()>
c001fc81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fc85:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fc88:	e9 12 fe ff ff       	jmp    c001fa9f <Vm::x87Handler(regs*)+0x77>
c001fc8d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fc91:	8d 50 40             	lea    edx,[eax+0x40]
c001fc94:	80 fa 07             	cmp    dl,0x7
c001fc97:	77 29                	ja     c001fcc2 <Vm::x87Handler(regs*)+0x29a>
c001fc99:	83 ec 0c             	sub    esp,0xc
c001fc9c:	2d c0 00 00 00       	sub    eax,0xc0
c001fca1:	50                   	push   eax
c001fca2:	e8 44 fc ff ff       	call   c001f8eb <Vm::fpuGetReg(int)>
c001fca7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fcae:	89 c6                	mov    esi,eax
c001fcb0:	89 d7                	mov    edi,edx
c001fcb2:	e8 34 fc ff ff       	call   c001f8eb <Vm::fpuGetReg(int)>
c001fcb7:	57                   	push   edi
c001fcb8:	56                   	push   esi
c001fcb9:	52                   	push   edx
c001fcba:	50                   	push   eax
c001fcbb:	e8 a1 fb ff ff       	call   c001f861 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fcc0:	eb 2f                	jmp    c001fcf1 <Vm::x87Handler(regs*)+0x2c9>
c001fcc2:	8d 50 38             	lea    edx,[eax+0x38]
c001fcc5:	80 fa 07             	cmp    dl,0x7
c001fcc8:	77 2f                	ja     c001fcf9 <Vm::x87Handler(regs*)+0x2d1>
c001fcca:	83 ec 0c             	sub    esp,0xc
c001fccd:	2d c8 00 00 00       	sub    eax,0xc8
c001fcd2:	50                   	push   eax
c001fcd3:	e8 13 fc ff ff       	call   c001f8eb <Vm::fpuGetReg(int)>
c001fcd8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fcdf:	89 c6                	mov    esi,eax
c001fce1:	89 d7                	mov    edi,edx
c001fce3:	e8 03 fc ff ff       	call   c001f8eb <Vm::fpuGetReg(int)>
c001fce8:	57                   	push   edi
c001fce9:	56                   	push   esi
c001fcea:	52                   	push   edx
c001fceb:	50                   	push   eax
c001fcec:	e8 a9 fb ff ff       	call   c001f89a <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fcf1:	83 c4 1c             	add    esp,0x1c
c001fcf4:	e9 d8 fd ff ff       	jmp    c001fad1 <Vm::x87Handler(regs*)+0xa9>
c001fcf9:	8d 50 30             	lea    edx,[eax+0x30]
c001fcfc:	80 fa 07             	cmp    dl,0x7
c001fcff:	77 0d                	ja     c001fd0e <Vm::x87Handler(regs*)+0x2e6>
c001fd01:	83 ec 0c             	sub    esp,0xc
c001fd04:	2d d0 00 00 00       	sub    eax,0xd0
c001fd09:	e9 99 03 00 00       	jmp    c00200a7 <Vm::x87Handler(regs*)+0x67f>
c001fd0e:	8d 50 28             	lea    edx,[eax+0x28]
c001fd11:	80 fa 07             	cmp    dl,0x7
c001fd14:	77 0d                	ja     c001fd23 <Vm::x87Handler(regs*)+0x2fb>
c001fd16:	83 ec 0c             	sub    esp,0xc
c001fd19:	2d d8 00 00 00       	sub    eax,0xd8
c001fd1e:	e9 c0 03 00 00       	jmp    c00200e3 <Vm::x87Handler(regs*)+0x6bb>
c001fd23:	8d 50 20             	lea    edx,[eax+0x20]
c001fd26:	80 fa 07             	cmp    dl,0x7
c001fd29:	77 1b                	ja     c001fd46 <Vm::x87Handler(regs*)+0x31e>
c001fd2b:	83 ec 0c             	sub    esp,0xc
c001fd2e:	2d e0 00 00 00       	sub    eax,0xe0
c001fd33:	50                   	push   eax
c001fd34:	e8 b2 fb ff ff       	call   c001f8eb <Vm::fpuGetReg(int)>
c001fd39:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd40:	89 c6                	mov    esi,eax
c001fd42:	89 d7                	mov    edi,edx
c001fd44:	eb 22                	jmp    c001fd68 <Vm::x87Handler(regs*)+0x340>
c001fd46:	8d 50 18             	lea    edx,[eax+0x18]
c001fd49:	80 fa 07             	cmp    dl,0x7
c001fd4c:	77 2d                	ja     c001fd7b <Vm::x87Handler(regs*)+0x353>
c001fd4e:	83 ec 0c             	sub    esp,0xc
c001fd51:	6a 00                	push   0x0
c001fd53:	e8 93 fb ff ff       	call   c001f8eb <Vm::fpuGetReg(int)>
c001fd58:	89 c6                	mov    esi,eax
c001fd5a:	89 d7                	mov    edi,edx
c001fd5c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd60:	2d e8 00 00 00       	sub    eax,0xe8
c001fd65:	89 04 24             	mov    DWORD PTR [esp],eax
c001fd68:	e8 7e fb ff ff       	call   c001f8eb <Vm::fpuGetReg(int)>
c001fd6d:	57                   	push   edi
c001fd6e:	56                   	push   esi
c001fd6f:	52                   	push   edx
c001fd70:	50                   	push   eax
c001fd71:	e8 15 fb ff ff       	call   c001f88b <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fd76:	e9 76 ff ff ff       	jmp    c001fcf1 <Vm::x87Handler(regs*)+0x2c9>
c001fd7b:	8d 50 10             	lea    edx,[eax+0x10]
c001fd7e:	80 fa 07             	cmp    dl,0x7
c001fd81:	77 1b                	ja     c001fd9e <Vm::x87Handler(regs*)+0x376>
c001fd83:	83 ec 0c             	sub    esp,0xc
c001fd86:	2d f0 00 00 00       	sub    eax,0xf0
c001fd8b:	50                   	push   eax
c001fd8c:	e8 5a fb ff ff       	call   c001f8eb <Vm::fpuGetReg(int)>
c001fd91:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd98:	89 c6                	mov    esi,eax
c001fd9a:	89 d7                	mov    edi,edx
c001fd9c:	eb 22                	jmp    c001fdc0 <Vm::x87Handler(regs*)+0x398>
c001fd9e:	3c f7                	cmp    al,0xf7
c001fda0:	0f 86 d1 03 00 00    	jbe    c0020177 <Vm::x87Handler(regs*)+0x74f>
c001fda6:	83 ec 0c             	sub    esp,0xc
c001fda9:	6a 00                	push   0x0
c001fdab:	e8 3b fb ff ff       	call   c001f8eb <Vm::fpuGetReg(int)>
c001fdb0:	89 c6                	mov    esi,eax
c001fdb2:	89 d7                	mov    edi,edx
c001fdb4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fdb8:	2d f8 00 00 00       	sub    eax,0xf8
c001fdbd:	89 04 24             	mov    DWORD PTR [esp],eax
c001fdc0:	e8 26 fb ff ff       	call   c001f8eb <Vm::fpuGetReg(int)>
c001fdc5:	57                   	push   edi
c001fdc6:	56                   	push   esi
c001fdc7:	52                   	push   edx
c001fdc8:	50                   	push   eax
c001fdc9:	e8 eb fa ff ff       	call   c001f8b9 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fdce:	83 c4 1c             	add    esp,0x1c
c001fdd1:	52                   	push   edx
c001fdd2:	50                   	push   eax
c001fdd3:	6a 00                	push   0x0
c001fdd5:	e9 51 02 00 00       	jmp    c002002b <Vm::x87Handler(regs*)+0x603>
c001fdda:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fdde:	8d 50 40             	lea    edx,[eax+0x40]
c001fde1:	80 fa 07             	cmp    dl,0x7
c001fde4:	77 37                	ja     c001fe1d <Vm::x87Handler(regs*)+0x3f5>
c001fde6:	83 ec 0c             	sub    esp,0xc
c001fde9:	2d c0 00 00 00       	sub    eax,0xc0
c001fdee:	50                   	push   eax
c001fdef:	e8 f7 fa ff ff       	call   c001f8eb <Vm::fpuGetReg(int)>
c001fdf4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fdfb:	89 c6                	mov    esi,eax
c001fdfd:	89 d7                	mov    edi,edx
c001fdff:	e8 e7 fa ff ff       	call   c001f8eb <Vm::fpuGetReg(int)>
c001fe04:	57                   	push   edi
c001fe05:	56                   	push   esi
c001fe06:	52                   	push   edx
c001fe07:	50                   	push   eax
c001fe08:	e8 54 fa ff ff       	call   c001f861 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fe0d:	83 c4 1c             	add    esp,0x1c
c001fe10:	52                   	push   edx
c001fe11:	50                   	push   eax
c001fe12:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe16:	2d c0 00 00 00       	sub    eax,0xc0
c001fe1b:	eb 3d                	jmp    c001fe5a <Vm::x87Handler(regs*)+0x432>
c001fe1d:	8d 50 38             	lea    edx,[eax+0x38]
c001fe20:	80 fa 07             	cmp    dl,0x7
c001fe23:	77 3b                	ja     c001fe60 <Vm::x87Handler(regs*)+0x438>
c001fe25:	83 ec 0c             	sub    esp,0xc
c001fe28:	2d c8 00 00 00       	sub    eax,0xc8
c001fe2d:	50                   	push   eax
c001fe2e:	e8 b8 fa ff ff       	call   c001f8eb <Vm::fpuGetReg(int)>
c001fe33:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe3a:	89 c6                	mov    esi,eax
c001fe3c:	89 d7                	mov    edi,edx
c001fe3e:	e8 a8 fa ff ff       	call   c001f8eb <Vm::fpuGetReg(int)>
c001fe43:	57                   	push   edi
c001fe44:	56                   	push   esi
c001fe45:	52                   	push   edx
c001fe46:	50                   	push   eax
c001fe47:	e8 4e fa ff ff       	call   c001f89a <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fe4c:	83 c4 1c             	add    esp,0x1c
c001fe4f:	52                   	push   edx
c001fe50:	50                   	push   eax
c001fe51:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe55:	2d c8 00 00 00       	sub    eax,0xc8
c001fe5a:	50                   	push   eax
c001fe5b:	e9 75 fc ff ff       	jmp    c001fad5 <Vm::x87Handler(regs*)+0xad>
c001fe60:	83 c0 18             	add    eax,0x18
c001fe63:	3c 07                	cmp    al,0x7
c001fe65:	0f 87 3b 04 00 00    	ja     c00202a6 <Vm::x87Handler(regs*)+0x87e>
c001fe6b:	83 ec 0c             	sub    esp,0xc
c001fe6e:	6a 00                	push   0x0
c001fe70:	e8 76 fa ff ff       	call   c001f8eb <Vm::fpuGetReg(int)>
c001fe75:	89 c6                	mov    esi,eax
c001fe77:	89 d7                	mov    edi,edx
c001fe79:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe7d:	2d e8 00 00 00       	sub    eax,0xe8
c001fe82:	89 04 24             	mov    DWORD PTR [esp],eax
c001fe85:	e8 61 fa ff ff       	call   c001f8eb <Vm::fpuGetReg(int)>
c001fe8a:	57                   	push   edi
c001fe8b:	56                   	push   esi
c001fe8c:	52                   	push   edx
c001fe8d:	50                   	push   eax
c001fe8e:	e8 f8 f9 ff ff       	call   c001f88b <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fe93:	83 c4 1c             	add    esp,0x1c
c001fe96:	52                   	push   edx
c001fe97:	50                   	push   eax
c001fe98:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe9c:	2d e8 00 00 00       	sub    eax,0xe8
c001fea1:	eb b7                	jmp    c001fe5a <Vm::x87Handler(regs*)+0x432>
c001fea3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fea7:	8d 50 40             	lea    edx,[eax+0x40]
c001feaa:	80 fa 07             	cmp    dl,0x7
c001fead:	77 3a                	ja     c001fee9 <Vm::x87Handler(regs*)+0x4c1>
c001feaf:	83 ec 0c             	sub    esp,0xc
c001feb2:	2d c0 00 00 00       	sub    eax,0xc0
c001feb7:	50                   	push   eax
c001feb8:	e8 2e fa ff ff       	call   c001f8eb <Vm::fpuGetReg(int)>
c001febd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fec4:	89 c6                	mov    esi,eax
c001fec6:	89 d7                	mov    edi,edx
c001fec8:	e8 1e fa ff ff       	call   c001f8eb <Vm::fpuGetReg(int)>
c001fecd:	57                   	push   edi
c001fece:	56                   	push   esi
c001fecf:	52                   	push   edx
c001fed0:	50                   	push   eax
c001fed1:	e8 8b f9 ff ff       	call   c001f861 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fed6:	83 c4 1c             	add    esp,0x1c
c001fed9:	52                   	push   edx
c001feda:	50                   	push   eax
c001fedb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fedf:	2d c0 00 00 00       	sub    eax,0xc0
c001fee4:	e9 9e 01 00 00       	jmp    c0020087 <Vm::x87Handler(regs*)+0x65f>
c001fee9:	8d 50 20             	lea    edx,[eax+0x20]
c001feec:	80 fa 07             	cmp    dl,0x7
c001feef:	77 3a                	ja     c001ff2b <Vm::x87Handler(regs*)+0x503>
c001fef1:	83 ec 0c             	sub    esp,0xc
c001fef4:	2d e0 00 00 00       	sub    eax,0xe0
c001fef9:	50                   	push   eax
c001fefa:	e8 ec f9 ff ff       	call   c001f8eb <Vm::fpuGetReg(int)>
c001feff:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff06:	89 c6                	mov    esi,eax
c001ff08:	89 d7                	mov    edi,edx
c001ff0a:	e8 dc f9 ff ff       	call   c001f8eb <Vm::fpuGetReg(int)>
c001ff0f:	57                   	push   edi
c001ff10:	56                   	push   esi
c001ff11:	52                   	push   edx
c001ff12:	50                   	push   eax
c001ff13:	e8 73 f9 ff ff       	call   c001f88b <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ff18:	83 c4 1c             	add    esp,0x1c
c001ff1b:	52                   	push   edx
c001ff1c:	50                   	push   eax
c001ff1d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff21:	2d e0 00 00 00       	sub    eax,0xe0
c001ff26:	e9 5c 01 00 00       	jmp    c0020087 <Vm::x87Handler(regs*)+0x65f>
c001ff2b:	8d 50 18             	lea    edx,[eax+0x18]
c001ff2e:	80 fa 07             	cmp    dl,0x7
c001ff31:	77 3b                	ja     c001ff6e <Vm::x87Handler(regs*)+0x546>
c001ff33:	83 ec 0c             	sub    esp,0xc
c001ff36:	6a 00                	push   0x0
c001ff38:	e8 ae f9 ff ff       	call   c001f8eb <Vm::fpuGetReg(int)>
c001ff3d:	89 c6                	mov    esi,eax
c001ff3f:	89 d7                	mov    edi,edx
c001ff41:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff45:	2d e8 00 00 00       	sub    eax,0xe8
c001ff4a:	89 04 24             	mov    DWORD PTR [esp],eax
c001ff4d:	e8 99 f9 ff ff       	call   c001f8eb <Vm::fpuGetReg(int)>
c001ff52:	57                   	push   edi
c001ff53:	56                   	push   esi
c001ff54:	52                   	push   edx
c001ff55:	50                   	push   eax
c001ff56:	e8 30 f9 ff ff       	call   c001f88b <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ff5b:	83 c4 1c             	add    esp,0x1c
c001ff5e:	52                   	push   edx
c001ff5f:	50                   	push   eax
c001ff60:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff64:	2d e8 00 00 00       	sub    eax,0xe8
c001ff69:	e9 19 01 00 00       	jmp    c0020087 <Vm::x87Handler(regs*)+0x65f>
c001ff6e:	8d 50 38             	lea    edx,[eax+0x38]
c001ff71:	80 fa 07             	cmp    dl,0x7
c001ff74:	77 37                	ja     c001ffad <Vm::x87Handler(regs*)+0x585>
c001ff76:	83 ec 0c             	sub    esp,0xc
c001ff79:	2d c8 00 00 00       	sub    eax,0xc8
c001ff7e:	50                   	push   eax
c001ff7f:	e8 67 f9 ff ff       	call   c001f8eb <Vm::fpuGetReg(int)>
c001ff84:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff8b:	89 c6                	mov    esi,eax
c001ff8d:	89 d7                	mov    edi,edx
c001ff8f:	e8 57 f9 ff ff       	call   c001f8eb <Vm::fpuGetReg(int)>
c001ff94:	57                   	push   edi
c001ff95:	56                   	push   esi
c001ff96:	52                   	push   edx
c001ff97:	50                   	push   eax
c001ff98:	e8 fd f8 ff ff       	call   c001f89a <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ff9d:	83 c4 1c             	add    esp,0x1c
c001ffa0:	52                   	push   edx
c001ffa1:	50                   	push   eax
c001ffa2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffa6:	2d c8 00 00 00       	sub    eax,0xc8
c001ffab:	eb 7d                	jmp    c002002a <Vm::x87Handler(regs*)+0x602>
c001ffad:	3c f7                	cmp    al,0xf7
c001ffaf:	76 38                	jbe    c001ffe9 <Vm::x87Handler(regs*)+0x5c1>
c001ffb1:	83 ec 0c             	sub    esp,0xc
c001ffb4:	6a 00                	push   0x0
c001ffb6:	e8 30 f9 ff ff       	call   c001f8eb <Vm::fpuGetReg(int)>
c001ffbb:	89 c6                	mov    esi,eax
c001ffbd:	89 d7                	mov    edi,edx
c001ffbf:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffc3:	2d f8 00 00 00       	sub    eax,0xf8
c001ffc8:	89 04 24             	mov    DWORD PTR [esp],eax
c001ffcb:	e8 1b f9 ff ff       	call   c001f8eb <Vm::fpuGetReg(int)>
c001ffd0:	57                   	push   edi
c001ffd1:	56                   	push   esi
c001ffd2:	52                   	push   edx
c001ffd3:	50                   	push   eax
c001ffd4:	e8 e0 f8 ff ff       	call   c001f8b9 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001ffd9:	83 c4 1c             	add    esp,0x1c
c001ffdc:	52                   	push   edx
c001ffdd:	50                   	push   eax
c001ffde:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffe2:	2d f8 00 00 00       	sub    eax,0xf8
c001ffe7:	eb 41                	jmp    c002002a <Vm::x87Handler(regs*)+0x602>
c001ffe9:	8d 50 10             	lea    edx,[eax+0x10]
c001ffec:	80 fa 07             	cmp    dl,0x7
c001ffef:	0f 87 5a 01 00 00    	ja     c002014f <Vm::x87Handler(regs*)+0x727>
c001fff5:	83 ec 0c             	sub    esp,0xc
c001fff8:	2d f0 00 00 00       	sub    eax,0xf0
c001fffd:	50                   	push   eax
c001fffe:	e8 e8 f8 ff ff       	call   c001f8eb <Vm::fpuGetReg(int)>
c0020003:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002000a:	89 c6                	mov    esi,eax
c002000c:	89 d7                	mov    edi,edx
c002000e:	e8 d8 f8 ff ff       	call   c001f8eb <Vm::fpuGetReg(int)>
c0020013:	57                   	push   edi
c0020014:	56                   	push   esi
c0020015:	52                   	push   edx
c0020016:	50                   	push   eax
c0020017:	e8 9d f8 ff ff       	call   c001f8b9 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c002001c:	83 c4 1c             	add    esp,0x1c
c002001f:	52                   	push   edx
c0020020:	50                   	push   eax
c0020021:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020025:	2d f0 00 00 00       	sub    eax,0xf0
c002002a:	50                   	push   eax
c002002b:	e8 fe f8 ff ff       	call   c001f92e <Vm::fpuSetReg(int, unsigned long long)>
c0020030:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020034:	e8 9d f9 ff ff       	call   c001f9d6 <Vm::fpuPop()>
c0020039:	e9 5e fa ff ff       	jmp    c001fa9c <Vm::x87Handler(regs*)+0x74>
c002003e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020042:	8d 50 30             	lea    edx,[eax+0x30]
c0020045:	80 fa 07             	cmp    dl,0x7
c0020048:	77 1d                	ja     c0020067 <Vm::x87Handler(regs*)+0x63f>
c002004a:	83 ec 0c             	sub    esp,0xc
c002004d:	6a 00                	push   0x0
c002004f:	e8 97 f8 ff ff       	call   c001f8eb <Vm::fpuGetReg(int)>
c0020054:	83 c4 0c             	add    esp,0xc
c0020057:	52                   	push   edx
c0020058:	50                   	push   eax
c0020059:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002005d:	2d d0 00 00 00       	sub    eax,0xd0
c0020062:	e9 f3 fd ff ff       	jmp    c001fe5a <Vm::x87Handler(regs*)+0x432>
c0020067:	8d 50 28             	lea    edx,[eax+0x28]
c002006a:	80 fa 07             	cmp    dl,0x7
c002006d:	77 28                	ja     c0020097 <Vm::x87Handler(regs*)+0x66f>
c002006f:	83 ec 0c             	sub    esp,0xc
c0020072:	6a 00                	push   0x0
c0020074:	e8 72 f8 ff ff       	call   c001f8eb <Vm::fpuGetReg(int)>
c0020079:	83 c4 0c             	add    esp,0xc
c002007c:	52                   	push   edx
c002007d:	50                   	push   eax
c002007e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020082:	2d d8 00 00 00       	sub    eax,0xd8
c0020087:	50                   	push   eax
c0020088:	e8 a1 f8 ff ff       	call   c001f92e <Vm::fpuSetReg(int, unsigned long long)>
c002008d:	e8 44 f9 ff ff       	call   c001f9d6 <Vm::fpuPop()>
c0020092:	e9 01 fa ff ff       	jmp    c001fa98 <Vm::x87Handler(regs*)+0x70>
c0020097:	8d 50 20             	lea    edx,[eax+0x20]
c002009a:	80 fa 07             	cmp    dl,0x7
c002009d:	77 30                	ja     c00200cf <Vm::x87Handler(regs*)+0x6a7>
c002009f:	83 ec 0c             	sub    esp,0xc
c00200a2:	2d e0 00 00 00       	sub    eax,0xe0
c00200a7:	50                   	push   eax
c00200a8:	e8 3e f8 ff ff       	call   c001f8eb <Vm::fpuGetReg(int)>
c00200ad:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00200b4:	89 c6                	mov    esi,eax
c00200b6:	89 d7                	mov    edi,edx
c00200b8:	e8 2e f8 ff ff       	call   c001f8eb <Vm::fpuGetReg(int)>
c00200bd:	57                   	push   edi
c00200be:	56                   	push   esi
c00200bf:	52                   	push   edx
c00200c0:	50                   	push   eax
c00200c1:	e8 48 f7 ff ff       	call   c001f80e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00200c6:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00200ca:	e9 54 02 00 00       	jmp    c0020323 <Vm::x87Handler(regs*)+0x8fb>
c00200cf:	8d 50 18             	lea    edx,[eax+0x18]
c00200d2:	80 fa 07             	cmp    dl,0x7
c00200d5:	0f 87 43 fb ff ff    	ja     c001fc1e <Vm::x87Handler(regs*)+0x1f6>
c00200db:	83 ec 0c             	sub    esp,0xc
c00200de:	2d e8 00 00 00       	sub    eax,0xe8
c00200e3:	50                   	push   eax
c00200e4:	e8 02 f8 ff ff       	call   c001f8eb <Vm::fpuGetReg(int)>
c00200e9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00200f0:	89 c6                	mov    esi,eax
c00200f2:	89 d7                	mov    edi,edx
c00200f4:	e8 f2 f7 ff ff       	call   c001f8eb <Vm::fpuGetReg(int)>
c00200f9:	57                   	push   edi
c00200fa:	56                   	push   esi
c00200fb:	52                   	push   edx
c00200fc:	50                   	push   eax
c00200fd:	e8 0c f7 ff ff       	call   c001f80e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020102:	83 c4 20             	add    esp,0x20
c0020105:	e8 cc f8 ff ff       	call   c001f9d6 <Vm::fpuPop()>
c002010a:	eb 62                	jmp    c002016e <Vm::x87Handler(regs*)+0x746>
c002010c:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c0020110:	0f 85 0f 01 00 00    	jne    c0020225 <Vm::x87Handler(regs*)+0x7fd>
c0020116:	83 ec 0c             	sub    esp,0xc
c0020119:	6a 01                	push   0x1
c002011b:	e8 cb f7 ff ff       	call   c001f8eb <Vm::fpuGetReg(int)>
c0020120:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020127:	89 c6                	mov    esi,eax
c0020129:	89 d7                	mov    edi,edx
c002012b:	e8 bb f7 ff ff       	call   c001f8eb <Vm::fpuGetReg(int)>
c0020130:	57                   	push   edi
c0020131:	56                   	push   esi
c0020132:	52                   	push   edx
c0020133:	50                   	push   eax
c0020134:	e8 d5 f6 ff ff       	call   c001f80e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020139:	83 c4 20             	add    esp,0x20
c002013c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020140:	e8 91 f8 ff ff       	call   c001f9d6 <Vm::fpuPop()>
c0020145:	e8 8c f8 ff ff       	call   c001f9d6 <Vm::fpuPop()>
c002014a:	e9 50 f9 ff ff       	jmp    c001fa9f <Vm::x87Handler(regs*)+0x77>
c002014f:	3c d9                	cmp    al,0xd9
c0020151:	0f 85 b5 02 00 00    	jne    c002040c <Vm::x87Handler(regs*)+0x9e4>
c0020157:	eb bd                	jmp    c0020116 <Vm::x87Handler(regs*)+0x6ee>
c0020159:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c002015d:	0f 85 ea 02 00 00    	jne    c002044d <Vm::x87Handler(regs*)+0xa25>
c0020163:	0f b7 05 60 19 03 c0 	movzx  eax,WORD PTR ds:0xc0031960
c002016a:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c002016e:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020172:	e9 28 f9 ff ff       	jmp    c001fa9f <Vm::x87Handler(regs*)+0x77>
c0020177:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002017b:	84 d2                	test   dl,dl
c002017d:	75 0f                	jne    c002018e <Vm::x87Handler(regs*)+0x766>
c002017f:	83 ec 0c             	sub    esp,0xc
c0020182:	ff 36                	push   DWORD PTR [esi]
c0020184:	e8 b1 f4 ff ff       	call   c001f63a <Vm::fpu32ToInternal(unsigned int)>
c0020189:	e9 2c 01 00 00       	jmp    c00202ba <Vm::x87Handler(regs*)+0x892>
c002018e:	80 fa 01             	cmp    dl,0x1
c0020191:	75 0f                	jne    c00201a2 <Vm::x87Handler(regs*)+0x77a>
c0020193:	83 ec 0c             	sub    esp,0xc
c0020196:	ff 36                	push   DWORD PTR [esi]
c0020198:	e8 9d f4 ff ff       	call   c001f63a <Vm::fpu32ToInternal(unsigned int)>
c002019d:	e9 81 02 00 00       	jmp    c0020423 <Vm::x87Handler(regs*)+0x9fb>
c00201a2:	80 fa 04             	cmp    dl,0x4
c00201a5:	75 0f                	jne    c00201b6 <Vm::x87Handler(regs*)+0x78e>
c00201a7:	83 ec 0c             	sub    esp,0xc
c00201aa:	ff 36                	push   DWORD PTR [esi]
c00201ac:	e8 89 f4 ff ff       	call   c001f63a <Vm::fpu32ToInternal(unsigned int)>
c00201b1:	e9 86 01 00 00       	jmp    c002033c <Vm::x87Handler(regs*)+0x914>
c00201b6:	80 fa 05             	cmp    dl,0x5
c00201b9:	75 1b                	jne    c00201d6 <Vm::x87Handler(regs*)+0x7ae>
c00201bb:	83 ec 0c             	sub    esp,0xc
c00201be:	6a 00                	push   0x0
c00201c0:	e8 26 f7 ff ff       	call   c001f8eb <Vm::fpuGetReg(int)>
c00201c5:	89 c7                	mov    edi,eax
c00201c7:	89 d5                	mov    ebp,edx
c00201c9:	58                   	pop    eax
c00201ca:	ff 36                	push   DWORD PTR [esi]
c00201cc:	e8 69 f4 ff ff       	call   c001f63a <Vm::fpu32ToInternal(unsigned int)>
c00201d1:	e9 a3 01 00 00       	jmp    c0020379 <Vm::x87Handler(regs*)+0x951>
c00201d6:	80 fa 06             	cmp    dl,0x6
c00201d9:	75 0f                	jne    c00201ea <Vm::x87Handler(regs*)+0x7c2>
c00201db:	83 ec 0c             	sub    esp,0xc
c00201de:	ff 36                	push   DWORD PTR [esi]
c00201e0:	e8 55 f4 ff ff       	call   c001f63a <Vm::fpu32ToInternal(unsigned int)>
c00201e5:	e9 ae 01 00 00       	jmp    c0020398 <Vm::x87Handler(regs*)+0x970>
c00201ea:	31 c0                	xor    eax,eax
c00201ec:	80 fa 07             	cmp    dl,0x7
c00201ef:	0f 85 94 02 00 00    	jne    c0020489 <Vm::x87Handler(regs*)+0xa61>
c00201f5:	83 ec 0c             	sub    esp,0xc
c00201f8:	6a 00                	push   0x0
c00201fa:	e8 ec f6 ff ff       	call   c001f8eb <Vm::fpuGetReg(int)>
c00201ff:	89 c7                	mov    edi,eax
c0020201:	89 d5                	mov    ebp,edx
c0020203:	58                   	pop    eax
c0020204:	ff 36                	push   DWORD PTR [esi]
c0020206:	e8 2f f4 ff ff       	call   c001f63a <Vm::fpu32ToInternal(unsigned int)>
c002020b:	e9 cb 01 00 00       	jmp    c00203db <Vm::x87Handler(regs*)+0x9b3>
c0020210:	80 fa 03             	cmp    dl,0x3
c0020213:	0f 85 d3 01 00 00    	jne    c00203ec <Vm::x87Handler(regs*)+0x9c4>
c0020219:	e8 b8 f7 ff ff       	call   c001f9d6 <Vm::fpuPop()>
c002021e:	51                   	push   ecx
c002021f:	51                   	push   ecx
c0020220:	e9 de 01 00 00       	jmp    c0020403 <Vm::x87Handler(regs*)+0x9db>
c0020225:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020229:	80 fa 01             	cmp    dl,0x1
c002022c:	75 09                	jne    c0020237 <Vm::x87Handler(regs*)+0x80f>
c002022e:	57                   	push   edi
c002022f:	57                   	push   edi
c0020230:	8b 06                	mov    eax,DWORD PTR [esi]
c0020232:	e9 e3 01 00 00       	jmp    c002041a <Vm::x87Handler(regs*)+0x9f2>
c0020237:	80 fa 04             	cmp    dl,0x4
c002023a:	75 12                	jne    c002024e <Vm::x87Handler(regs*)+0x826>
c002023c:	31 d2                	xor    edx,edx
c002023e:	51                   	push   ecx
c002023f:	51                   	push   ecx
c0020240:	8b 06                	mov    eax,DWORD PTR [esi]
c0020242:	52                   	push   edx
c0020243:	50                   	push   eax
c0020244:	e8 d0 f4 ff ff       	call   c001f719 <Vm::fpuLongToFloat(long long)>
c0020249:	e9 ee 00 00 00       	jmp    c002033c <Vm::x87Handler(regs*)+0x914>
c002024e:	31 c0                	xor    eax,eax
c0020250:	80 fa 07             	cmp    dl,0x7
c0020253:	0f 85 30 02 00 00    	jne    c0020489 <Vm::x87Handler(regs*)+0xa61>
c0020259:	83 ec 0c             	sub    esp,0xc
c002025c:	6a 00                	push   0x0
c002025e:	e8 88 f6 ff ff       	call   c001f8eb <Vm::fpuGetReg(int)>
c0020263:	89 c7                	mov    edi,eax
c0020265:	89 d5                	mov    ebp,edx
c0020267:	58                   	pop    eax
c0020268:	8b 06                	mov    eax,DWORD PTR [esi]
c002026a:	5a                   	pop    edx
c002026b:	31 d2                	xor    edx,edx
c002026d:	52                   	push   edx
c002026e:	50                   	push   eax
c002026f:	e8 a5 f4 ff ff       	call   c001f719 <Vm::fpuLongToFloat(long long)>
c0020274:	e9 62 01 00 00       	jmp    c00203db <Vm::x87Handler(regs*)+0x9b3>
c0020279:	84 d2                	test   dl,dl
c002027b:	75 0d                	jne    c002028a <Vm::x87Handler(regs*)+0x862>
c002027d:	31 d2                	xor    edx,edx
c002027f:	55                   	push   ebp
c0020280:	55                   	push   ebp
c0020281:	8b 06                	mov    eax,DWORD PTR [esi]
c0020283:	52                   	push   edx
c0020284:	50                   	push   eax
c0020285:	e9 d3 01 00 00       	jmp    c002045d <Vm::x87Handler(regs*)+0xa35>
c002028a:	31 c0                	xor    eax,eax
c002028c:	80 fa 02             	cmp    dl,0x2
c002028f:	0f 85 f4 01 00 00    	jne    c0020489 <Vm::x87Handler(regs*)+0xa61>
c0020295:	83 ec 0c             	sub    esp,0xc
c0020298:	6a 00                	push   0x0
c002029a:	e8 4c f6 ff ff       	call   c001f8eb <Vm::fpuGetReg(int)>
c002029f:	59                   	pop    ecx
c00202a0:	5f                   	pop    edi
c00202a1:	e9 6a f9 ff ff       	jmp    c001fc10 <Vm::x87Handler(regs*)+0x1e8>
c00202a6:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00202aa:	84 d2                	test   dl,dl
c00202ac:	75 2a                	jne    c00202d8 <Vm::x87Handler(regs*)+0x8b0>
c00202ae:	50                   	push   eax
c00202af:	50                   	push   eax
c00202b0:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00202b3:	ff 36                	push   DWORD PTR [esi]
c00202b5:	e8 c5 f3 ff ff       	call   c001f67f <Vm::fpu64ToInternal(unsigned long long)>
c00202ba:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00202c1:	89 c6                	mov    esi,eax
c00202c3:	89 d7                	mov    edi,edx
c00202c5:	e8 21 f6 ff ff       	call   c001f8eb <Vm::fpuGetReg(int)>
c00202ca:	57                   	push   edi
c00202cb:	56                   	push   esi
c00202cc:	52                   	push   edx
c00202cd:	50                   	push   eax
c00202ce:	e8 8e f5 ff ff       	call   c001f861 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c00202d3:	e9 64 01 00 00       	jmp    c002043c <Vm::x87Handler(regs*)+0xa14>
c00202d8:	80 fa 01             	cmp    dl,0x1
c00202db:	75 11                	jne    c00202ee <Vm::x87Handler(regs*)+0x8c6>
c00202dd:	50                   	push   eax
c00202de:	50                   	push   eax
c00202df:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00202e2:	ff 36                	push   DWORD PTR [esi]
c00202e4:	e8 96 f3 ff ff       	call   c001f67f <Vm::fpu64ToInternal(unsigned long long)>
c00202e9:	e9 35 01 00 00       	jmp    c0020423 <Vm::x87Handler(regs*)+0x9fb>
c00202ee:	80 fa 02             	cmp    dl,0x2
c00202f1:	0f 85 54 f9 ff ff    	jne    c001fc4b <Vm::x87Handler(regs*)+0x223>
c00202f7:	55                   	push   ebp
c00202f8:	55                   	push   ebp
c00202f9:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00202fc:	ff 36                	push   DWORD PTR [esi]
c00202fe:	e8 7c f3 ff ff       	call   c001f67f <Vm::fpu64ToInternal(unsigned long long)>
c0020303:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002030a:	89 c6                	mov    esi,eax
c002030c:	89 d7                	mov    edi,edx
c002030e:	e8 d8 f5 ff ff       	call   c001f8eb <Vm::fpuGetReg(int)>
c0020313:	57                   	push   edi
c0020314:	56                   	push   esi
c0020315:	52                   	push   edx
c0020316:	50                   	push   eax
c0020317:	e8 f2 f4 ff ff       	call   c001f80e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002031c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020320:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0020323:	83 c4 20             	add    esp,0x20
c0020326:	e9 74 f7 ff ff       	jmp    c001fa9f <Vm::x87Handler(regs*)+0x77>
c002032b:	80 fa 04             	cmp    dl,0x4
c002032e:	75 2a                	jne    c002035a <Vm::x87Handler(regs*)+0x932>
c0020330:	51                   	push   ecx
c0020331:	51                   	push   ecx
c0020332:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020335:	ff 36                	push   DWORD PTR [esi]
c0020337:	e8 43 f3 ff ff       	call   c001f67f <Vm::fpu64ToInternal(unsigned long long)>
c002033c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020343:	89 c6                	mov    esi,eax
c0020345:	89 d7                	mov    edi,edx
c0020347:	e8 9f f5 ff ff       	call   c001f8eb <Vm::fpuGetReg(int)>
c002034c:	57                   	push   edi
c002034d:	56                   	push   esi
c002034e:	52                   	push   edx
c002034f:	50                   	push   eax
c0020350:	e8 36 f5 ff ff       	call   c001f88b <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020355:	e9 e2 00 00 00       	jmp    c002043c <Vm::x87Handler(regs*)+0xa14>
c002035a:	80 fa 05             	cmp    dl,0x5
c002035d:	75 28                	jne    c0020387 <Vm::x87Handler(regs*)+0x95f>
c002035f:	83 ec 0c             	sub    esp,0xc
c0020362:	6a 00                	push   0x0
c0020364:	e8 82 f5 ff ff       	call   c001f8eb <Vm::fpuGetReg(int)>
c0020369:	89 c7                	mov    edi,eax
c002036b:	89 d5                	mov    ebp,edx
c002036d:	58                   	pop    eax
c002036e:	5a                   	pop    edx
c002036f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020372:	ff 36                	push   DWORD PTR [esi]
c0020374:	e8 06 f3 ff ff       	call   c001f67f <Vm::fpu64ToInternal(unsigned long long)>
c0020379:	83 c4 10             	add    esp,0x10
c002037c:	55                   	push   ebp
c002037d:	57                   	push   edi
c002037e:	52                   	push   edx
c002037f:	50                   	push   eax
c0020380:	e8 06 f5 ff ff       	call   c001f88b <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020385:	eb 60                	jmp    c00203e7 <Vm::x87Handler(regs*)+0x9bf>
c0020387:	80 fa 06             	cmp    dl,0x6
c002038a:	75 2a                	jne    c00203b6 <Vm::x87Handler(regs*)+0x98e>
c002038c:	51                   	push   ecx
c002038d:	51                   	push   ecx
c002038e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020391:	ff 36                	push   DWORD PTR [esi]
c0020393:	e8 e7 f2 ff ff       	call   c001f67f <Vm::fpu64ToInternal(unsigned long long)>
c0020398:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002039f:	89 c6                	mov    esi,eax
c00203a1:	89 d7                	mov    edi,edx
c00203a3:	e8 43 f5 ff ff       	call   c001f8eb <Vm::fpuGetReg(int)>
c00203a8:	57                   	push   edi
c00203a9:	56                   	push   esi
c00203aa:	52                   	push   edx
c00203ab:	50                   	push   eax
c00203ac:	e8 08 f5 ff ff       	call   c001f8b9 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00203b1:	e9 86 00 00 00       	jmp    c002043c <Vm::x87Handler(regs*)+0xa14>
c00203b6:	31 c0                	xor    eax,eax
c00203b8:	80 fa 07             	cmp    dl,0x7
c00203bb:	0f 85 c8 00 00 00    	jne    c0020489 <Vm::x87Handler(regs*)+0xa61>
c00203c1:	83 ec 0c             	sub    esp,0xc
c00203c4:	6a 00                	push   0x0
c00203c6:	e8 20 f5 ff ff       	call   c001f8eb <Vm::fpuGetReg(int)>
c00203cb:	89 c7                	mov    edi,eax
c00203cd:	89 d5                	mov    ebp,edx
c00203cf:	58                   	pop    eax
c00203d0:	5a                   	pop    edx
c00203d1:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00203d4:	ff 36                	push   DWORD PTR [esi]
c00203d6:	e8 a4 f2 ff ff       	call   c001f67f <Vm::fpu64ToInternal(unsigned long long)>
c00203db:	83 c4 10             	add    esp,0x10
c00203de:	55                   	push   ebp
c00203df:	57                   	push   edi
c00203e0:	52                   	push   edx
c00203e1:	50                   	push   eax
c00203e2:	e8 d2 f4 ff ff       	call   c001f8b9 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00203e7:	83 c4 0c             	add    esp,0xc
c00203ea:	eb 53                	jmp    c002043f <Vm::x87Handler(regs*)+0xa17>
c00203ec:	31 c0                	xor    eax,eax
c00203ee:	80 fa 02             	cmp    dl,0x2
c00203f1:	0f 85 92 00 00 00    	jne    c0020489 <Vm::x87Handler(regs*)+0xa61>
c00203f7:	83 ec 0c             	sub    esp,0xc
c00203fa:	6a 00                	push   0x0
c00203fc:	e8 ea f4 ff ff       	call   c001f8eb <Vm::fpuGetReg(int)>
c0020401:	59                   	pop    ecx
c0020402:	5f                   	pop    edi
c0020403:	52                   	push   edx
c0020404:	50                   	push   eax
c0020405:	e8 27 f2 ff ff       	call   c001f631 <Vm::fpuInternalTo64(unsigned long long)>
c002040a:	eb 70                	jmp    c002047c <Vm::x87Handler(regs*)+0xa54>
c002040c:	31 c0                	xor    eax,eax
c002040e:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c0020413:	75 74                	jne    c0020489 <Vm::x87Handler(regs*)+0xa61>
c0020415:	50                   	push   eax
c0020416:	50                   	push   eax
c0020417:	0f b7 06             	movzx  eax,WORD PTR [esi]
c002041a:	31 d2                	xor    edx,edx
c002041c:	52                   	push   edx
c002041d:	50                   	push   eax
c002041e:	e8 f6 f2 ff ff       	call   c001f719 <Vm::fpuLongToFloat(long long)>
c0020423:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002042a:	89 c6                	mov    esi,eax
c002042c:	89 d7                	mov    edi,edx
c002042e:	e8 b8 f4 ff ff       	call   c001f8eb <Vm::fpuGetReg(int)>
c0020433:	57                   	push   edi
c0020434:	56                   	push   esi
c0020435:	52                   	push   edx
c0020436:	50                   	push   eax
c0020437:	e8 5e f4 ff ff       	call   c001f89a <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c002043c:	83 c4 1c             	add    esp,0x1c
c002043f:	52                   	push   edx
c0020440:	50                   	push   eax
c0020441:	6a 00                	push   0x0
c0020443:	e8 e6 f4 ff ff       	call   c001f92e <Vm::fpuSetReg(int, unsigned long long)>
c0020448:	e9 f2 f7 ff ff       	jmp    c001fc3f <Vm::x87Handler(regs*)+0x217>
c002044d:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020451:	80 fa 05             	cmp    dl,0x5
c0020454:	75 11                	jne    c0020467 <Vm::x87Handler(regs*)+0xa3f>
c0020456:	55                   	push   ebp
c0020457:	55                   	push   ebp
c0020458:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002045b:	ff 36                	push   DWORD PTR [esi]
c002045d:	e8 81 f2 ff ff       	call   c001f6e3 <Vm::fpuULongToFloat(unsigned long long)>
c0020462:	e9 cf f7 ff ff       	jmp    c001fc36 <Vm::x87Handler(regs*)+0x20e>
c0020467:	31 c0                	xor    eax,eax
c0020469:	80 fa 07             	cmp    dl,0x7
c002046c:	75 1b                	jne    c0020489 <Vm::x87Handler(regs*)+0xa61>
c002046e:	e8 63 f5 ff ff       	call   c001f9d6 <Vm::fpuPop()>
c0020473:	51                   	push   ecx
c0020474:	51                   	push   ecx
c0020475:	52                   	push   edx
c0020476:	50                   	push   eax
c0020477:	e8 0c f2 ff ff       	call   c001f688 <Vm::fpuFloatToLong(unsigned long long)>
c002047c:	83 c4 10             	add    esp,0x10
c002047f:	89 06                	mov    DWORD PTR [esi],eax
c0020481:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0020484:	e9 f8 f7 ff ff       	jmp    c001fc81 <Vm::x87Handler(regs*)+0x259>
c0020489:	83 c4 1c             	add    esp,0x1c
c002048c:	5b                   	pop    ebx
c002048d:	5e                   	pop    esi
c002048e:	5f                   	pop    edi
c002048f:	5d                   	pop    ebp
c0020490:	c3                   	ret    

c0020491 <__static_initialization_and_destruction_0(int, int)>:
c0020491:	83 ec 0c             	sub    esp,0xc
c0020494:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0020499:	75 1a                	jne    c00204b5 <__static_initialization_and_destruction_0(int, int)+0x24>
c002049b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00204a3:	75 10                	jne    c00204b5 <__static_initialization_and_destruction_0(int, int)+0x24>
c00204a5:	83 ec 0c             	sub    esp,0xc
c00204a8:	68 60 19 03 c0       	push   0xc0031960
c00204ad:	e8 0e 88 00 00       	call   c0028cc0 <Vm::_FPUState::_FPUState()>
c00204b2:	83 c4 10             	add    esp,0x10
c00204b5:	90                   	nop
c00204b6:	83 c4 0c             	add    esp,0xc
c00204b9:	c3                   	ret    

c00204ba <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c00204ba:	83 ec 0c             	sub    esp,0xc
c00204bd:	83 ec 08             	sub    esp,0x8
c00204c0:	68 ff ff 00 00       	push   0xffff
c00204c5:	6a 01                	push   0x1
c00204c7:	e8 c5 ff ff ff       	call   c0020491 <__static_initialization_and_destruction_0(int, int)>
c00204cc:	83 c4 10             	add    esp,0x10
c00204cf:	83 c4 0c             	add    esp,0xc
c00204d2:	c3                   	ret    
c00204d3:	90                   	nop

c00204d4 <FAT::getName()>:
c00204d4:	b8 80 c7 02 c0       	mov    eax,0xc002c780
c00204d9:	c3                   	ret    

c00204da <FAT::tell(void*, unsigned long long*)>:
c00204da:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00204df:	75 06                	jne    c00204e7 <FAT::tell(void*, unsigned long long*)+0xd>
c00204e1:	b8 04 00 00 00       	mov    eax,0x4
c00204e6:	c3                   	ret    
c00204e7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00204ec:	75 06                	jne    c00204f4 <FAT::tell(void*, unsigned long long*)+0x1a>
c00204ee:	b8 04 00 00 00       	mov    eax,0x4
c00204f3:	c3                   	ret    
c00204f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00204f8:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c00204fb:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00204fe:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020502:	89 01                	mov    DWORD PTR [ecx],eax
c0020504:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020507:	b8 00 00 00 00       	mov    eax,0x0
c002050c:	c3                   	ret    
c002050d:	90                   	nop

c002050e <FAT::stat(void*, unsigned long long*)>:
c002050e:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020513:	75 06                	jne    c002051b <FAT::stat(void*, unsigned long long*)+0xd>
c0020515:	b8 04 00 00 00       	mov    eax,0x4
c002051a:	c3                   	ret    
c002051b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020520:	75 06                	jne    c0020528 <FAT::stat(void*, unsigned long long*)+0x1a>
c0020522:	b8 04 00 00 00       	mov    eax,0x4
c0020527:	c3                   	ret    
c0020528:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002052c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c002052f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020532:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020536:	89 01                	mov    DWORD PTR [ecx],eax
c0020538:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002053b:	b8 00 00 00 00       	mov    eax,0x0
c0020540:	c3                   	ret    
c0020541:	90                   	nop

c0020542 <FAT::~FAT()>:
c0020542:	83 ec 0c             	sub    esp,0xc
c0020545:	ba 04 c8 02 c0       	mov    edx,0xc002c804
c002054a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002054e:	89 10                	mov    DWORD PTR [eax],edx
c0020550:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020554:	83 ec 0c             	sub    esp,0xc
c0020557:	50                   	push   eax
c0020558:	e8 5d 2c ff ff       	call   c00131ba <Filesystem::~Filesystem()>
c002055d:	83 c4 10             	add    esp,0x10
c0020560:	90                   	nop
c0020561:	83 c4 0c             	add    esp,0xc
c0020564:	c3                   	ret    
c0020565:	90                   	nop

c0020566 <FAT::~FAT()>:
c0020566:	83 ec 0c             	sub    esp,0xc
c0020569:	83 ec 0c             	sub    esp,0xc
c002056c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020570:	e8 cd ff ff ff       	call   c0020542 <FAT::~FAT()>
c0020575:	83 c4 10             	add    esp,0x10
c0020578:	83 ec 08             	sub    esp,0x8
c002057b:	6a 08                	push   0x8
c002057d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020581:	e8 2c 28 ff ff       	call   c0012db2 <operator delete(void*, unsigned long)>
c0020586:	83 c4 10             	add    esp,0x10
c0020589:	83 c4 0c             	add    esp,0xc
c002058c:	c3                   	ret    
c002058d:	90                   	nop

c002058e <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c002058e:	83 ec 1c             	sub    esp,0x1c
c0020591:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0020598:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c002059d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00205a1:	8b 04 85 e0 19 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce620]
c00205a8:	83 f8 ff             	cmp    eax,0xffffffff
c00205ab:	75 34                	jne    c00205e1 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c00205ad:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00205b1:	88 c2                	mov    dl,al
c00205b3:	a1 c0 19 03 c0       	mov    eax,ds:0xc00319c0
c00205b8:	01 d0                	add    eax,edx
c00205ba:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00205be:	8b 15 c0 19 03 c0    	mov    edx,DWORD PTR ds:0xc00319c0
c00205c4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00205c8:	89 14 85 e0 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce620],edx
c00205cf:	a1 c0 19 03 c0       	mov    eax,ds:0xc00319c0
c00205d4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00205d8:	89 14 85 60 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce5a0],edx
c00205df:	eb 17                	jmp    c00205f8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c00205e1:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00205e5:	88 c2                	mov    dl,al
c00205e7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00205eb:	8b 04 85 e0 19 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce620]
c00205f2:	01 d0                	add    eax,edx
c00205f4:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00205f8:	83 ec 04             	sub    esp,0x4
c00205fb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00205ff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020603:	8d 44 24 15          	lea    eax,[esp+0x15]
c0020607:	50                   	push   eax
c0020608:	e8 2b 67 fe ff       	call   c0006d38 <f_getlabel>
c002060d:	83 c4 10             	add    esp,0x10
c0020610:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020614:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020619:	75 07                	jne    c0020622 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c002061b:	b8 00 00 00 00       	mov    eax,0x0
c0020620:	eb 05                	jmp    c0020627 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0020622:	b8 01 00 00 00       	mov    eax,0x1
c0020627:	83 c4 1c             	add    esp,0x1c
c002062a:	c3                   	ret    
c002062b:	90                   	nop

c002062c <FAT::setlabel(LogicalDisk*, int, char*)>:
c002062c:	57                   	push   edi
c002062d:	83 ec 58             	sub    esp,0x58
c0020630:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0020638:	8d 54 24 10          	lea    edx,[esp+0x10]
c002063c:	b9 0f 00 00 00       	mov    ecx,0xf
c0020641:	b8 00 00 00 00       	mov    eax,0x0
c0020646:	fc                   	cld    
c0020647:	89 d7                	mov    edi,edx
c0020649:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002064b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002064f:	8b 04 85 e0 19 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce620]
c0020656:	83 f8 ff             	cmp    eax,0xffffffff
c0020659:	75 34                	jne    c002068f <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c002065b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002065f:	88 c2                	mov    dl,al
c0020661:	a1 c0 19 03 c0       	mov    eax,ds:0xc00319c0
c0020666:	01 d0                	add    eax,edx
c0020668:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002066c:	8b 15 c0 19 03 c0    	mov    edx,DWORD PTR ds:0xc00319c0
c0020672:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020676:	89 14 85 e0 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce620],edx
c002067d:	a1 c0 19 03 c0       	mov    eax,ds:0xc00319c0
c0020682:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0020686:	89 14 85 60 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce5a0],edx
c002068d:	eb 17                	jmp    c00206a6 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c002068f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020693:	88 c2                	mov    dl,al
c0020695:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020699:	8b 04 85 e0 19 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce620]
c00206a0:	01 d0                	add    eax,edx
c00206a2:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00206a6:	83 ec 08             	sub    esp,0x8
c00206a9:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00206ad:	8d 44 24 18          	lea    eax,[esp+0x18]
c00206b1:	50                   	push   eax
c00206b2:	e8 bd 02 fe ff       	call   c0000974 <strcat>
c00206b7:	83 c4 10             	add    esp,0x10
c00206ba:	83 ec 0c             	sub    esp,0xc
c00206bd:	8d 44 24 18          	lea    eax,[esp+0x18]
c00206c1:	50                   	push   eax
c00206c2:	e8 5f 68 fe ff       	call   c0006f26 <f_setlabel>
c00206c7:	83 c4 10             	add    esp,0x10
c00206ca:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00206ce:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c00206d3:	75 07                	jne    c00206dc <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c00206d5:	b8 00 00 00 00       	mov    eax,0x0
c00206da:	eb 05                	jmp    c00206e1 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c00206dc:	b8 01 00 00 00       	mov    eax,0x1
c00206e1:	83 c4 58             	add    esp,0x58
c00206e4:	5f                   	pop    edi
c00206e5:	c3                   	ret    

c00206e6 <FAT::format(LogicalDisk*, int, char const*, int)>:
c00206e6:	83 ec 2c             	sub    esp,0x2c
c00206e9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00206f1:	83 ec 08             	sub    esp,0x8
c00206f4:	68 a4 c7 02 c0       	push   0xc002c7a4
c00206f9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00206fd:	e8 be 01 fe ff       	call   c00008c0 <strcmp>
c0020702:	83 c4 10             	add    esp,0x10
c0020705:	85 c0                	test   eax,eax
c0020707:	0f 94 c0             	sete   al
c002070a:	84 c0                	test   al,al
c002070c:	74 0d                	je     c002071b <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c002070e:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020716:	e9 a6 00 00 00       	jmp    c00207c1 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002071b:	83 ec 08             	sub    esp,0x8
c002071e:	68 96 c7 02 c0       	push   0xc002c796
c0020723:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020727:	e8 94 01 fe ff       	call   c00008c0 <strcmp>
c002072c:	83 c4 10             	add    esp,0x10
c002072f:	85 c0                	test   eax,eax
c0020731:	0f 94 c0             	sete   al
c0020734:	84 c0                	test   al,al
c0020736:	74 0a                	je     c0020742 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c0020738:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020740:	eb 7f                	jmp    c00207c1 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020742:	83 ec 08             	sub    esp,0x8
c0020745:	68 9c c7 02 c0       	push   0xc002c79c
c002074a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002074e:	e8 6d 01 fe ff       	call   c00008c0 <strcmp>
c0020753:	83 c4 10             	add    esp,0x10
c0020756:	85 c0                	test   eax,eax
c0020758:	0f 94 c0             	sete   al
c002075b:	84 c0                	test   al,al
c002075d:	74 0a                	je     c0020769 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c002075f:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020767:	eb 58                	jmp    c00207c1 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020769:	83 ec 08             	sub    esp,0x8
c002076c:	68 2c 94 02 c0       	push   0xc002942c
c0020771:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020775:	e8 46 01 fe ff       	call   c00008c0 <strcmp>
c002077a:	83 c4 10             	add    esp,0x10
c002077d:	85 c0                	test   eax,eax
c002077f:	0f 94 c0             	sete   al
c0020782:	84 c0                	test   al,al
c0020784:	74 0a                	je     c0020790 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c0020786:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c002078e:	eb 31                	jmp    c00207c1 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020790:	83 ec 08             	sub    esp,0x8
c0020793:	68 a2 c7 02 c0       	push   0xc002c7a2
c0020798:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002079c:	e8 1f 01 fe ff       	call   c00008c0 <strcmp>
c00207a1:	83 c4 10             	add    esp,0x10
c00207a4:	85 c0                	test   eax,eax
c00207a6:	0f 94 c0             	sete   al
c00207a9:	84 c0                	test   al,al
c00207ab:	74 0a                	je     c00207b7 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c00207ad:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00207b5:	eb 0a                	jmp    c00207c1 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00207b7:	b8 08 00 00 00       	mov    eax,0x8
c00207bc:	e9 04 01 00 00       	jmp    c00208c5 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00207c1:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00207c8:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00207cd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00207d1:	8b 04 85 e0 19 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce620]
c00207d8:	83 f8 ff             	cmp    eax,0xffffffff
c00207db:	75 34                	jne    c0020811 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c00207dd:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00207e1:	88 c2                	mov    dl,al
c00207e3:	a1 c0 19 03 c0       	mov    eax,ds:0xc00319c0
c00207e8:	01 d0                	add    eax,edx
c00207ea:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00207ee:	8b 15 c0 19 03 c0    	mov    edx,DWORD PTR ds:0xc00319c0
c00207f4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00207f8:	89 14 85 e0 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce620],edx
c00207ff:	a1 c0 19 03 c0       	mov    eax,ds:0xc00319c0
c0020804:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0020808:	89 14 85 60 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce5a0],edx
c002080f:	eb 17                	jmp    c0020828 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0020811:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020815:	88 c2                	mov    dl,al
c0020817:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002081b:	8b 04 85 e0 19 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce620]
c0020822:	01 d0                	add    eax,edx
c0020824:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020828:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002082c:	88 04 24             	mov    BYTE PTR [esp],al
c002082f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0020833:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020837:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c002083f:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0020844:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c002084c:	83 ec 0c             	sub    esp,0xc
c002084f:	68 00 20 00 00       	push   0x2000
c0020854:	e8 e7 ef fe ff       	call   c000f840 <malloc>
c0020859:	83 c4 10             	add    esp,0x10
c002085c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020860:	68 00 20 00 00       	push   0x2000
c0020865:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020869:	8d 44 24 08          	lea    eax,[esp+0x8]
c002086d:	50                   	push   eax
c002086e:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0020872:	50                   	push   eax
c0020873:	e8 f9 6a fe ff       	call   c0007371 <f_mkfs>
c0020878:	83 c4 10             	add    esp,0x10
c002087b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002087f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0020884:	75 07                	jne    c002088d <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c0020886:	b8 00 00 00 00       	mov    eax,0x0
c002088b:	eb 38                	jmp    c00208c5 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c002088d:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0020892:	75 17                	jne    c00208ab <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c0020894:	83 ec 0c             	sub    esp,0xc
c0020897:	68 d4 c7 02 c0       	push   0xc002c7d4
c002089c:	e8 f1 25 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c00208a1:	83 c4 10             	add    esp,0x10
c00208a4:	b8 09 00 00 00       	mov    eax,0x9
c00208a9:	eb 1a                	jmp    c00208c5 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00208ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00208af:	83 ec 08             	sub    esp,0x8
c00208b2:	50                   	push   eax
c00208b3:	68 a8 c7 02 c0       	push   0xc002c7a8
c00208b8:	e8 d5 25 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c00208bd:	83 c4 10             	add    esp,0x10
c00208c0:	b8 01 00 00 00       	mov    eax,0x1
c00208c5:	83 c4 2c             	add    esp,0x2c
c00208c8:	c3                   	ret    
c00208c9:	90                   	nop

c00208ca <FAT::tryMount(LogicalDisk*, int)>:
c00208ca:	81 ec 6c 03 00 00    	sub    esp,0x36c
c00208d0:	a1 c0 19 03 c0       	mov    eax,ds:0xc00319c0
c00208d5:	83 f8 14             	cmp    eax,0x14
c00208d8:	75 17                	jne    c00208f1 <FAT::tryMount(LogicalDisk*, int)+0x27>
c00208da:	83 ec 0c             	sub    esp,0xc
c00208dd:	68 ba c7 02 c0       	push   0xc002c7ba
c00208e2:	e8 86 9c ff ff       	call   c001a56d <Krnl::panic(char const*)>
c00208e7:	83 c4 10             	add    esp,0x10
c00208ea:	b0 00                	mov    al,0x0
c00208ec:	e9 d7 01 00 00       	jmp    c0020ac8 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00208f1:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00208f8:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00208fe:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020904:	3d 00 02 00 00       	cmp    eax,0x200
c0020909:	74 07                	je     c0020912 <FAT::tryMount(LogicalDisk*, int)+0x48>
c002090b:	b0 00                	mov    al,0x0
c002090d:	e9 b6 01 00 00       	jmp    c0020ac8 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020912:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c002091a:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020921:	8b 04 85 e0 19 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce620]
c0020928:	83 f8 ff             	cmp    eax,0xffffffff
c002092b:	74 07                	je     c0020934 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c002092d:	b0 01                	mov    al,0x1
c002092f:	e9 94 01 00 00       	jmp    c0020ac8 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020934:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c002093e:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0020946:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c002094d:	88 c2                	mov    dl,al
c002094f:	a1 c0 19 03 c0       	mov    eax,ds:0xc00319c0
c0020954:	01 d0                	add    eax,edx
c0020956:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c002095d:	8b 15 c0 19 03 c0    	mov    edx,DWORD PTR ds:0xc00319c0
c0020963:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c002096a:	89 14 85 e0 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce620],edx
c0020971:	a1 c0 19 03 c0       	mov    eax,ds:0xc00319c0
c0020976:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c002097d:	89 14 85 60 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce5a0],edx
c0020984:	83 ec 0c             	sub    esp,0xc
c0020987:	68 54 02 00 00       	push   0x254
c002098c:	e8 af ee fe ff       	call   c000f840 <malloc>
c0020991:	83 c4 10             	add    esp,0x10
c0020994:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c002099b:	83 ec 04             	sub    esp,0x4
c002099e:	6a 00                	push   0x0
c00209a0:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00209a7:	50                   	push   eax
c00209a8:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00209af:	e8 7b 45 fe ff       	call   c0004f2f <f_mount>
c00209b4:	83 c4 10             	add    esp,0x10
c00209b7:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c00209be:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c00209c6:	74 19                	je     c00209e1 <FAT::tryMount(LogicalDisk*, int)+0x117>
c00209c8:	83 ec 0c             	sub    esp,0xc
c00209cb:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00209d2:	e8 89 ee fe ff       	call   c000f860 <rfree>
c00209d7:	83 c4 10             	add    esp,0x10
c00209da:	b0 00                	mov    al,0x0
c00209dc:	e9 e7 00 00 00       	jmp    c0020ac8 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00209e1:	83 ec 04             	sub    esp,0x4
c00209e4:	68 00 01 00 00       	push   0x100
c00209e9:	6a 00                	push   0x0
c00209eb:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00209f2:	50                   	push   eax
c00209f3:	e8 80 fd fd ff       	call   c0000778 <memset>
c00209f8:	83 c4 10             	add    esp,0x10
c00209fb:	83 ec 08             	sub    esp,0x8
c00209fe:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020a05:	50                   	push   eax
c0020a06:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020a0d:	50                   	push   eax
c0020a0e:	e8 61 ff fd ff       	call   c0000974 <strcat>
c0020a13:	83 c4 10             	add    esp,0x10
c0020a16:	83 ec 08             	sub    esp,0x8
c0020a19:	68 c8 c7 02 c0       	push   0xc002c7c8
c0020a1e:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020a25:	50                   	push   eax
c0020a26:	e8 49 ff fd ff       	call   c0000974 <strcat>
c0020a2b:	83 c4 10             	add    esp,0x10
c0020a2e:	83 ec 04             	sub    esp,0x4
c0020a31:	6a 01                	push   0x1
c0020a33:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0020a3a:	50                   	push   eax
c0020a3b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020a3f:	50                   	push   eax
c0020a40:	e8 4c 45 fe ff       	call   c0004f91 <f_open>
c0020a45:	83 c4 10             	add    esp,0x10
c0020a48:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020a4f:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0020a56:	85 c0                	test   eax,eax
c0020a58:	74 0a                	je     c0020a64 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0020a5a:	78 2d                	js     c0020a89 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020a5c:	83 e8 04             	sub    eax,0x4
c0020a5f:	83 f8 01             	cmp    eax,0x1
c0020a62:	77 25                	ja     c0020a89 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020a64:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0020a6c:	83 ec 0c             	sub    esp,0xc
c0020a6f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020a73:	50                   	push   eax
c0020a74:	e8 6a 50 fe ff       	call   c0005ae3 <f_close>
c0020a79:	83 c4 10             	add    esp,0x10
c0020a7c:	90                   	nop
c0020a7d:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0020a85:	74 3a                	je     c0020ac1 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0020a87:	eb 2d                	jmp    c0020ab6 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0020a89:	83 ec 0c             	sub    esp,0xc
c0020a8c:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020a93:	e8 c8 ed fe ff       	call   c000f860 <rfree>
c0020a98:	83 c4 10             	add    esp,0x10
c0020a9b:	83 ec 04             	sub    esp,0x4
c0020a9e:	6a 00                	push   0x0
c0020aa0:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020aa7:	50                   	push   eax
c0020aa8:	6a 00                	push   0x0
c0020aaa:	e8 80 44 fe ff       	call   c0004f2f <f_mount>
c0020aaf:	83 c4 10             	add    esp,0x10
c0020ab2:	b0 00                	mov    al,0x0
c0020ab4:	eb 12                	jmp    c0020ac8 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020ab6:	a1 c0 19 03 c0       	mov    eax,ds:0xc00319c0
c0020abb:	40                   	inc    eax
c0020abc:	a3 c0 19 03 c0       	mov    ds:0xc00319c0,eax
c0020ac1:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0020ac8:	81 c4 6c 03 00 00    	add    esp,0x36c
c0020ace:	c3                   	ret    
c0020acf:	90                   	nop

c0020ad0 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0020ad0:	81 ec 3c 02 00 00    	sub    esp,0x23c
c0020ad6:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c0020ade:	74 0a                	je     c0020aea <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c0020ae0:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c0020ae8:	75 0a                	jne    c0020af4 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c0020aea:	b8 04 00 00 00       	mov    eax,0x4
c0020aef:	e9 db 00 00 00       	jmp    c0020bcf <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020af4:	83 ec 08             	sub    esp,0x8
c0020af7:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020afe:	50                   	push   eax
c0020aff:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c0020b06:	e8 e2 55 fe ff       	call   c00060ed <f_readdir>
c0020b0b:	83 c4 10             	add    esp,0x10
c0020b0e:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c0020b15:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0020b1b:	83 ec 0c             	sub    esp,0xc
c0020b1e:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020b25:	83 c0 1a             	add    eax,0x1a
c0020b28:	50                   	push   eax
c0020b29:	e8 66 fc fd ff       	call   c0000794 <strlen>
c0020b2e:	83 c4 10             	add    esp,0x10
c0020b31:	ba 00 00 00 00       	mov    edx,0x0
c0020b36:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020b3a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0020b3e:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c0020b45:	0f b6 c0             	movzx  eax,al
c0020b48:	83 e0 10             	and    eax,0x10
c0020b4b:	74 07                	je     c0020b54 <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c0020b4d:	b8 02 00 00 00       	mov    eax,0x2
c0020b52:	eb 05                	jmp    c0020b59 <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c0020b54:	b8 01 00 00 00       	mov    eax,0x1
c0020b59:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020b5d:	83 ec 08             	sub    esp,0x8
c0020b60:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020b67:	83 c0 1a             	add    eax,0x1a
c0020b6a:	50                   	push   eax
c0020b6b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020b6f:	83 c0 10             	add    eax,0x10
c0020b72:	50                   	push   eax
c0020b73:	e8 bc fc fd ff       	call   c0000834 <strcpy>
c0020b78:	83 c4 10             	add    esp,0x10
c0020b7b:	83 ec 04             	sub    esp,0x4
c0020b7e:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c0020b85:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020b89:	50                   	push   eax
c0020b8a:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c0020b91:	e8 ae fb fd ff       	call   c0000744 <memcpy>
c0020b96:	83 c4 10             	add    esp,0x10
c0020b99:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c0020ba0:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020ba6:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c0020bad:	84 c0                	test   al,al
c0020baf:	75 07                	jne    c0020bb8 <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c0020bb1:	b8 07 00 00 00       	mov    eax,0x7
c0020bb6:	eb 17                	jmp    c0020bcf <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020bb8:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c0020bbf:	85 c0                	test   eax,eax
c0020bc1:	75 07                	jne    c0020bca <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c0020bc3:	b8 00 00 00 00       	mov    eax,0x0
c0020bc8:	eb 05                	jmp    c0020bcf <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020bca:	b8 01 00 00 00       	mov    eax,0x1
c0020bcf:	81 c4 3c 02 00 00    	add    esp,0x23c
c0020bd5:	c3                   	ret    

c0020bd6 <FAT::read(void*, unsigned long, void*, int*)>:
c0020bd6:	83 ec 1c             	sub    esp,0x1c
c0020bd9:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020bde:	74 07                	je     c0020be7 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0020be0:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020be5:	75 07                	jne    c0020bee <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020be7:	b8 04 00 00 00       	mov    eax,0x4
c0020bec:	eb 3d                	jmp    c0020c2b <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020bee:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020bf2:	50                   	push   eax
c0020bf3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020bf7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020bfb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020bff:	e8 c9 47 fe ff       	call   c00053cd <f_read>
c0020c04:	83 c4 10             	add    esp,0x10
c0020c07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020c0b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020c0f:	89 c2                	mov    edx,eax
c0020c11:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020c15:	89 10                	mov    DWORD PTR [eax],edx
c0020c17:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020c1b:	85 c0                	test   eax,eax
c0020c1d:	75 07                	jne    c0020c26 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0020c1f:	b8 00 00 00 00       	mov    eax,0x0
c0020c24:	eb 05                	jmp    c0020c2b <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020c26:	b8 01 00 00 00       	mov    eax,0x1
c0020c2b:	83 c4 1c             	add    esp,0x1c
c0020c2e:	c3                   	ret    
c0020c2f:	90                   	nop

c0020c30 <FAT::write(void*, unsigned long, void*, int*)>:
c0020c30:	83 ec 1c             	sub    esp,0x1c
c0020c33:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020c38:	74 07                	je     c0020c41 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020c3a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020c3f:	75 07                	jne    c0020c48 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020c41:	b8 04 00 00 00       	mov    eax,0x4
c0020c46:	eb 3d                	jmp    c0020c85 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020c48:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020c4c:	50                   	push   eax
c0020c4d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020c51:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020c55:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020c59:	e8 ef 49 fe ff       	call   c000564d <f_write>
c0020c5e:	83 c4 10             	add    esp,0x10
c0020c61:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020c65:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020c69:	89 c2                	mov    edx,eax
c0020c6b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020c6f:	89 10                	mov    DWORD PTR [eax],edx
c0020c71:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020c75:	85 c0                	test   eax,eax
c0020c77:	75 07                	jne    c0020c80 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0020c79:	b8 00 00 00 00       	mov    eax,0x0
c0020c7e:	eb 05                	jmp    c0020c85 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020c80:	b8 01 00 00 00       	mov    eax,0x1
c0020c85:	83 c4 1c             	add    esp,0x1c
c0020c88:	c3                   	ret    
c0020c89:	90                   	nop

c0020c8a <FAT::close(void*)>:
c0020c8a:	83 ec 1c             	sub    esp,0x1c
c0020c8d:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020c92:	75 07                	jne    c0020c9b <FAT::close(void*)+0x11>
c0020c94:	b8 04 00 00 00       	mov    eax,0x4
c0020c99:	eb 36                	jmp    c0020cd1 <FAT::close(void*)+0x47>
c0020c9b:	83 ec 0c             	sub    esp,0xc
c0020c9e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020ca2:	e8 3c 4e fe ff       	call   c0005ae3 <f_close>
c0020ca7:	83 c4 10             	add    esp,0x10
c0020caa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020cae:	83 ec 0c             	sub    esp,0xc
c0020cb1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020cb5:	e8 96 eb fe ff       	call   c000f850 <free>
c0020cba:	83 c4 10             	add    esp,0x10
c0020cbd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020cc1:	85 c0                	test   eax,eax
c0020cc3:	75 07                	jne    c0020ccc <FAT::close(void*)+0x42>
c0020cc5:	b8 00 00 00 00       	mov    eax,0x0
c0020cca:	eb 05                	jmp    c0020cd1 <FAT::close(void*)+0x47>
c0020ccc:	b8 01 00 00 00       	mov    eax,0x1
c0020cd1:	83 c4 1c             	add    esp,0x1c
c0020cd4:	c3                   	ret    
c0020cd5:	90                   	nop

c0020cd6 <FAT::closeDir(void*)>:
c0020cd6:	83 ec 1c             	sub    esp,0x1c
c0020cd9:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020cde:	75 07                	jne    c0020ce7 <FAT::closeDir(void*)+0x11>
c0020ce0:	b8 04 00 00 00       	mov    eax,0x4
c0020ce5:	eb 36                	jmp    c0020d1d <FAT::closeDir(void*)+0x47>
c0020ce7:	83 ec 0c             	sub    esp,0xc
c0020cea:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020cee:	e8 d8 53 fe ff       	call   c00060cb <f_closedir>
c0020cf3:	83 c4 10             	add    esp,0x10
c0020cf6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020cfa:	83 ec 0c             	sub    esp,0xc
c0020cfd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d01:	e8 4a eb fe ff       	call   c000f850 <free>
c0020d06:	83 c4 10             	add    esp,0x10
c0020d09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d0d:	85 c0                	test   eax,eax
c0020d0f:	75 07                	jne    c0020d18 <FAT::closeDir(void*)+0x42>
c0020d11:	b8 00 00 00 00       	mov    eax,0x0
c0020d16:	eb 05                	jmp    c0020d1d <FAT::closeDir(void*)+0x47>
c0020d18:	b8 01 00 00 00       	mov    eax,0x1
c0020d1d:	83 c4 1c             	add    esp,0x1c
c0020d20:	c3                   	ret    
c0020d21:	90                   	nop

c0020d22 <FAT::seek(void*, unsigned long long)>:
c0020d22:	83 ec 2c             	sub    esp,0x2c
c0020d25:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020d29:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020d2d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020d31:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d35:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020d3a:	75 07                	jne    c0020d43 <FAT::seek(void*, unsigned long long)+0x21>
c0020d3c:	b8 04 00 00 00       	mov    eax,0x4
c0020d41:	eb 2f                	jmp    c0020d72 <FAT::seek(void*, unsigned long long)+0x50>
c0020d43:	83 ec 04             	sub    esp,0x4
c0020d46:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020d4a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020d4e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020d52:	e8 bb 4d fe ff       	call   c0005b12 <f_lseek>
c0020d57:	83 c4 10             	add    esp,0x10
c0020d5a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020d5e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020d62:	85 c0                	test   eax,eax
c0020d64:	75 07                	jne    c0020d6d <FAT::seek(void*, unsigned long long)+0x4b>
c0020d66:	b8 00 00 00 00       	mov    eax,0x0
c0020d6b:	eb 05                	jmp    c0020d72 <FAT::seek(void*, unsigned long long)+0x50>
c0020d6d:	b8 01 00 00 00       	mov    eax,0x1
c0020d72:	83 c4 2c             	add    esp,0x2c
c0020d75:	c3                   	ret    

c0020d76 <fatWrapperReadDisk>:
c0020d76:	83 ec 1c             	sub    esp,0x1c
c0020d79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020d7d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020d81:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020d85:	89 04 24             	mov    DWORD PTR [esp],eax
c0020d88:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020d8c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020d90:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020d95:	8b 04 85 a0 e9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1660]
c0020d9c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020da0:	83 ec 0c             	sub    esp,0xc
c0020da3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020da7:	52                   	push   edx
c0020da8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020dac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020db0:	50                   	push   eax
c0020db1:	e8 22 59 ff ff       	call   c00166d8 <LogicalDisk::read(unsigned long long, int, void*)>
c0020db6:	83 c4 20             	add    esp,0x20
c0020db9:	83 c4 1c             	add    esp,0x1c
c0020dbc:	c3                   	ret    

c0020dbd <fatWrapperWriteDisk>:
c0020dbd:	83 ec 1c             	sub    esp,0x1c
c0020dc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020dc4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020dc8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020dcc:	89 04 24             	mov    DWORD PTR [esp],eax
c0020dcf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020dd3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020dd7:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020ddc:	8b 04 85 a0 e9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1660]
c0020de3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020de7:	83 ec 0c             	sub    esp,0xc
c0020dea:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020dee:	52                   	push   edx
c0020def:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020df3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020df7:	50                   	push   eax
c0020df8:	e8 47 59 ff ff       	call   c0016744 <LogicalDisk::write(unsigned long long, int, void*)>
c0020dfd:	83 c4 20             	add    esp,0x20
c0020e00:	83 c4 1c             	add    esp,0x1c
c0020e03:	c3                   	ret    

c0020e04 <fatWrapperIoctl>:
c0020e04:	53                   	push   ebx
c0020e05:	83 ec 28             	sub    esp,0x28
c0020e08:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020e0c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0020e10:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020e14:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020e18:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0020e1d:	75 31                	jne    c0020e50 <fatWrapperIoctl+0x4c>
c0020e1f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020e23:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020e27:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e2c:	8b 04 85 a0 e9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1660]
c0020e33:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020e39:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020e3f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020e43:	66 89 02             	mov    WORD PTR [edx],ax
c0020e46:	b8 00 00 00 00       	mov    eax,0x0
c0020e4b:	e9 b2 00 00 00       	jmp    c0020f02 <fatWrapperIoctl+0xfe>
c0020e50:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0020e55:	75 6a                	jne    c0020ec1 <fatWrapperIoctl+0xbd>
c0020e57:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020e5b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020e5f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e64:	8b 04 85 a0 e9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1660]
c0020e6b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020e71:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0020e77:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0020e7d:	89 c8                	mov    eax,ecx
c0020e7f:	89 da                	mov    edx,ebx
c0020e81:	0f a4 c2 0a          	shld   edx,eax,0xa
c0020e85:	c1 e0 0a             	shl    eax,0xa
c0020e88:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0020e8d:	8b 0c 8d a0 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1660]
c0020e94:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0020e9a:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0020ea0:	89 cb                	mov    ebx,ecx
c0020ea2:	c1 fb 1f             	sar    ebx,0x1f
c0020ea5:	53                   	push   ebx
c0020ea6:	51                   	push   ecx
c0020ea7:	52                   	push   edx
c0020ea8:	50                   	push   eax
c0020ea9:	e8 be 5a 00 00       	call   c002696c <__udivdi3>
c0020eae:	83 c4 10             	add    esp,0x10
c0020eb1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020eb5:	89 01                	mov    DWORD PTR [ecx],eax
c0020eb7:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020eba:	b8 00 00 00 00       	mov    eax,0x0
c0020ebf:	eb 41                	jmp    c0020f02 <fatWrapperIoctl+0xfe>
c0020ec1:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020ec6:	75 07                	jne    c0020ecf <fatWrapperIoctl+0xcb>
c0020ec8:	b8 00 00 00 00       	mov    eax,0x0
c0020ecd:	eb 33                	jmp    c0020f02 <fatWrapperIoctl+0xfe>
c0020ecf:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0020ed4:	75 19                	jne    c0020eef <fatWrapperIoctl+0xeb>
c0020ed6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020eda:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020ede:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020ee2:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0020ee8:	b8 00 00 00 00       	mov    eax,0x0
c0020eed:	eb 13                	jmp    c0020f02 <fatWrapperIoctl+0xfe>
c0020eef:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0020ef4:	75 07                	jne    c0020efd <fatWrapperIoctl+0xf9>
c0020ef6:	b8 00 00 00 00       	mov    eax,0x0
c0020efb:	eb 05                	jmp    c0020f02 <fatWrapperIoctl+0xfe>
c0020efd:	b8 04 00 00 00       	mov    eax,0x4
c0020f02:	83 c4 28             	add    esp,0x28
c0020f05:	5b                   	pop    ebx
c0020f06:	c3                   	ret    
c0020f07:	90                   	nop

c0020f08 <FAT::FAT()>:
c0020f08:	83 ec 1c             	sub    esp,0x1c
c0020f0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020f0f:	83 ec 0c             	sub    esp,0xc
c0020f12:	50                   	push   eax
c0020f13:	e8 7e 22 ff ff       	call   c0013196 <Filesystem::Filesystem()>
c0020f18:	83 c4 10             	add    esp,0x10
c0020f1b:	ba 04 c8 02 c0       	mov    edx,0xc002c804
c0020f20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020f24:	89 10                	mov    DWORD PTR [eax],edx
c0020f26:	c7 05 c0 19 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00319c0,0x0
c0020f30:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020f38:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0020f3d:	7f 15                	jg     c0020f54 <FAT::FAT()+0x4c>
c0020f3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020f43:	c7 04 85 e0 19 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffce620],0xffffffff
c0020f4e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0020f52:	eb e4                	jmp    c0020f38 <FAT::FAT()+0x30>
c0020f54:	90                   	nop
c0020f55:	83 c4 1c             	add    esp,0x1c
c0020f58:	c3                   	ret    
c0020f59:	90                   	nop

c0020f5a <FAT::fixFilepath(char*)>:
c0020f5a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020f5e:	8a 00                	mov    al,BYTE PTR [eax]
c0020f60:	3c 40                	cmp    al,0x40
c0020f62:	7e 2c                	jle    c0020f90 <FAT::fixFilepath(char*)+0x36>
c0020f64:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020f68:	8a 00                	mov    al,BYTE PTR [eax]
c0020f6a:	83 e8 41             	sub    eax,0x41
c0020f6d:	88 c2                	mov    dl,al
c0020f6f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020f73:	88 10                	mov    BYTE PTR [eax],dl
c0020f75:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020f79:	8a 00                	mov    al,BYTE PTR [eax]
c0020f7b:	0f be c0             	movsx  eax,al
c0020f7e:	8b 04 85 e0 19 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce620]
c0020f85:	83 c0 30             	add    eax,0x30
c0020f88:	88 c2                	mov    dl,al
c0020f8a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020f8e:	88 10                	mov    BYTE PTR [eax],dl
c0020f90:	90                   	nop
c0020f91:	c3                   	ret    

c0020f92 <FAT::open(char const*, void**, FileOpenMode)>:
c0020f92:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020f98:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020fa0:	74 0a                	je     c0020fac <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0020fa2:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020faa:	75 0a                	jne    c0020fb6 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0020fac:	b8 04 00 00 00       	mov    eax,0x4
c0020fb1:	e9 fd 00 00 00       	jmp    c00210b3 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020fb6:	83 ec 08             	sub    esp,0x8
c0020fb9:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020fc0:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020fc4:	50                   	push   eax
c0020fc5:	e8 6a f8 fd ff       	call   c0000834 <strcpy>
c0020fca:	83 c4 10             	add    esp,0x10
c0020fcd:	83 ec 08             	sub    esp,0x8
c0020fd0:	8d 44 24 10          	lea    eax,[esp+0x10]
c0020fd4:	50                   	push   eax
c0020fd5:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020fdc:	e8 79 ff ff ff       	call   c0020f5a <FAT::fixFilepath(char*)>
c0020fe1:	83 c4 10             	add    esp,0x10
c0020fe4:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0020fec:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020ff3:	83 e0 01             	and    eax,0x1
c0020ff6:	74 08                	je     c0021000 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0020ff8:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0021000:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021007:	83 e0 04             	and    eax,0x4
c002100a:	74 10                	je     c002101c <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c002100c:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0021014:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c002101c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021023:	83 e0 02             	and    eax,0x2
c0021026:	74 08                	je     c0021030 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0021028:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0021030:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021037:	83 e0 08             	and    eax,0x8
c002103a:	74 08                	je     c0021044 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c002103c:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0021044:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002104b:	83 e0 10             	and    eax,0x10
c002104e:	74 08                	je     c0021058 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0021050:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0021058:	83 ec 0c             	sub    esp,0xc
c002105b:	68 50 02 00 00       	push   0x250
c0021060:	e8 db e7 fe ff       	call   c000f840 <malloc>
c0021065:	83 c4 10             	add    esp,0x10
c0021068:	89 c2                	mov    edx,eax
c002106a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021071:	89 10                	mov    DWORD PTR [eax],edx
c0021073:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c002107b:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021082:	8b 00                	mov    eax,DWORD PTR [eax]
c0021084:	83 ec 04             	sub    esp,0x4
c0021087:	52                   	push   edx
c0021088:	8d 54 24 10          	lea    edx,[esp+0x10]
c002108c:	52                   	push   edx
c002108d:	50                   	push   eax
c002108e:	e8 fe 3e fe ff       	call   c0004f91 <f_open>
c0021093:	83 c4 10             	add    esp,0x10
c0021096:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c002109d:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00210a5:	74 07                	je     c00210ae <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c00210a7:	b8 01 00 00 00       	mov    eax,0x1
c00210ac:	eb 05                	jmp    c00210b3 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00210ae:	b8 00 00 00 00       	mov    eax,0x0
c00210b3:	81 c4 1c 01 00 00    	add    esp,0x11c
c00210b9:	c3                   	ret    

c00210ba <FAT::openDir(char const*, void**)>:
c00210ba:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00210c0:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00210c8:	74 0a                	je     c00210d4 <FAT::openDir(char const*, void**)+0x1a>
c00210ca:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00210d2:	75 07                	jne    c00210db <FAT::openDir(char const*, void**)+0x21>
c00210d4:	b8 04 00 00 00       	mov    eax,0x4
c00210d9:	eb 7d                	jmp    c0021158 <FAT::openDir(char const*, void**)+0x9e>
c00210db:	83 ec 08             	sub    esp,0x8
c00210de:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00210e5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00210e9:	50                   	push   eax
c00210ea:	e8 45 f7 fd ff       	call   c0000834 <strcpy>
c00210ef:	83 c4 10             	add    esp,0x10
c00210f2:	83 ec 08             	sub    esp,0x8
c00210f5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00210f9:	50                   	push   eax
c00210fa:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021101:	e8 54 fe ff ff       	call   c0020f5a <FAT::fixFilepath(char*)>
c0021106:	83 c4 10             	add    esp,0x10
c0021109:	83 ec 0c             	sub    esp,0xc
c002110c:	6a 4c                	push   0x4c
c002110e:	e8 2d e7 fe ff       	call   c000f840 <malloc>
c0021113:	83 c4 10             	add    esp,0x10
c0021116:	89 c2                	mov    edx,eax
c0021118:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002111f:	89 10                	mov    DWORD PTR [eax],edx
c0021121:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021128:	8b 00                	mov    eax,DWORD PTR [eax]
c002112a:	83 ec 08             	sub    esp,0x8
c002112d:	8d 54 24 14          	lea    edx,[esp+0x14]
c0021131:	52                   	push   edx
c0021132:	50                   	push   eax
c0021133:	e8 91 4e fe ff       	call   c0005fc9 <f_opendir>
c0021138:	83 c4 10             	add    esp,0x10
c002113b:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021142:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c002114a:	74 07                	je     c0021153 <FAT::openDir(char const*, void**)+0x99>
c002114c:	b8 01 00 00 00       	mov    eax,0x1
c0021151:	eb 05                	jmp    c0021158 <FAT::openDir(char const*, void**)+0x9e>
c0021153:	b8 00 00 00 00       	mov    eax,0x0
c0021158:	81 c4 1c 01 00 00    	add    esp,0x11c
c002115e:	c3                   	ret    
c002115f:	90                   	nop

c0021160 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0021160:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021166:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c002116e:	75 0a                	jne    c002117a <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0021170:	b8 04 00 00 00       	mov    eax,0x4
c0021175:	e9 c9 00 00 00       	jmp    c0021243 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002117a:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0021182:	75 0a                	jne    c002118e <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0021184:	b8 04 00 00 00       	mov    eax,0x4
c0021189:	e9 b5 00 00 00       	jmp    c0021243 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002118e:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0021196:	75 0a                	jne    c00211a2 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0021198:	b8 04 00 00 00       	mov    eax,0x4
c002119d:	e9 a1 00 00 00       	jmp    c0021243 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00211a2:	83 ec 08             	sub    esp,0x8
c00211a5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00211ac:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00211b3:	50                   	push   eax
c00211b4:	e8 7b f6 fd ff       	call   c0000834 <strcpy>
c00211b9:	83 c4 10             	add    esp,0x10
c00211bc:	83 ec 08             	sub    esp,0x8
c00211bf:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00211c6:	50                   	push   eax
c00211c7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00211ce:	e8 87 fd ff ff       	call   c0020f5a <FAT::fixFilepath(char*)>
c00211d3:	83 c4 10             	add    esp,0x10
c00211d6:	83 ec 08             	sub    esp,0x8
c00211d9:	8d 44 24 08          	lea    eax,[esp+0x8]
c00211dd:	50                   	push   eax
c00211de:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00211e5:	50                   	push   eax
c00211e6:	e8 9d 4f fe ff       	call   c0006188 <f_stat>
c00211eb:	83 c4 10             	add    esp,0x10
c00211ee:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00211f5:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00211fc:	85 c0                	test   eax,eax
c00211fe:	74 07                	je     c0021207 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0021200:	83 f8 04             	cmp    eax,0x4
c0021203:	74 32                	je     c0021237 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0021205:	eb 37                	jmp    c002123e <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0021207:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002120b:	0f b6 c0             	movzx  eax,al
c002120e:	83 e0 10             	and    eax,0x10
c0021211:	0f 95 c2             	setne  dl
c0021214:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c002121b:	88 10                	mov    BYTE PTR [eax],dl
c002121d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021220:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021224:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c002122b:	89 01                	mov    DWORD PTR [ecx],eax
c002122d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0021230:	b8 00 00 00 00       	mov    eax,0x0
c0021235:	eb 0c                	jmp    c0021243 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021237:	b8 02 00 00 00       	mov    eax,0x2
c002123c:	eb 05                	jmp    c0021243 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002123e:	b8 01 00 00 00       	mov    eax,0x1
c0021243:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021249:	c3                   	ret    

c002124a <FAT::unlink(char const*)>:
c002124a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021250:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021258:	75 07                	jne    c0021261 <FAT::unlink(char const*)+0x17>
c002125a:	b8 04 00 00 00       	mov    eax,0x4
c002125f:	eb 5c                	jmp    c00212bd <FAT::unlink(char const*)+0x73>
c0021261:	83 ec 08             	sub    esp,0x8
c0021264:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002126b:	8d 44 24 18          	lea    eax,[esp+0x18]
c002126f:	50                   	push   eax
c0021270:	e8 bf f5 fd ff       	call   c0000834 <strcpy>
c0021275:	83 c4 10             	add    esp,0x10
c0021278:	83 ec 08             	sub    esp,0x8
c002127b:	8d 44 24 14          	lea    eax,[esp+0x14]
c002127f:	50                   	push   eax
c0021280:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021287:	e8 ce fc ff ff       	call   c0020f5a <FAT::fixFilepath(char*)>
c002128c:	83 c4 10             	add    esp,0x10
c002128f:	83 ec 0c             	sub    esp,0xc
c0021292:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021296:	50                   	push   eax
c0021297:	e8 3e 52 fe ff       	call   c00064da <f_unlink>
c002129c:	83 c4 10             	add    esp,0x10
c002129f:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00212a6:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00212ad:	85 c0                	test   eax,eax
c00212af:	75 07                	jne    c00212b8 <FAT::unlink(char const*)+0x6e>
c00212b1:	b8 00 00 00 00       	mov    eax,0x0
c00212b6:	eb 05                	jmp    c00212bd <FAT::unlink(char const*)+0x73>
c00212b8:	b8 01 00 00 00       	mov    eax,0x1
c00212bd:	81 c4 1c 01 00 00    	add    esp,0x11c
c00212c3:	c3                   	ret    

c00212c4 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c00212c4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00212ca:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c00212d1:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c00212d8:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00212dc:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00212e0:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c00212e8:	75 0a                	jne    c00212f4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c00212ea:	b8 04 00 00 00       	mov    eax,0x4
c00212ef:	e9 1c 01 00 00       	jmp    c0021410 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c00212f4:	83 ec 08             	sub    esp,0x8
c00212f7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00212fe:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021302:	50                   	push   eax
c0021303:	e8 2c f5 fd ff       	call   c0000834 <strcpy>
c0021308:	83 c4 10             	add    esp,0x10
c002130b:	83 ec 08             	sub    esp,0x8
c002130e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0021312:	50                   	push   eax
c0021313:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c002131a:	e8 3b fc ff ff       	call   c0020f5a <FAT::fixFilepath(char*)>
c002131f:	83 c4 10             	add    esp,0x10
c0021322:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c002132a:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0021332:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021337:	83 e0 01             	and    eax,0x1
c002133a:	74 08                	je     c0021344 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c002133c:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0021344:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021349:	83 e0 02             	and    eax,0x2
c002134c:	74 08                	je     c0021356 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c002134e:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0021356:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002135b:	83 e0 04             	and    eax,0x4
c002135e:	74 08                	je     c0021368 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0021360:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0021368:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002136d:	83 e0 08             	and    eax,0x8
c0021370:	74 08                	je     c002137a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0021372:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c002137a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002137f:	83 e0 01             	and    eax,0x1
c0021382:	74 08                	je     c002138c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0021384:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c002138c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021391:	83 e0 02             	and    eax,0x2
c0021394:	74 08                	je     c002139e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0021396:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c002139e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00213a3:	83 e0 04             	and    eax,0x4
c00213a6:	74 08                	je     c00213b0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c00213a8:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c00213b0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00213b5:	83 e0 08             	and    eax,0x8
c00213b8:	74 08                	je     c00213c2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c00213ba:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c00213c2:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00213c9:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c00213d0:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c00213d8:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c00213e0:	83 ec 04             	sub    esp,0x4
c00213e3:	52                   	push   edx
c00213e4:	50                   	push   eax
c00213e5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00213e9:	50                   	push   eax
c00213ea:	e8 8d 57 fe ff       	call   c0006b7c <f_chmod>
c00213ef:	83 c4 10             	add    esp,0x10
c00213f2:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c00213f9:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0021400:	85 c0                	test   eax,eax
c0021402:	75 07                	jne    c002140b <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0021404:	b8 00 00 00 00       	mov    eax,0x0
c0021409:	eb 05                	jmp    c0021410 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c002140b:	b8 01 00 00 00       	mov    eax,0x1
c0021410:	81 c4 2c 01 00 00    	add    esp,0x12c
c0021416:	c3                   	ret    
c0021417:	90                   	nop

c0021418 <FAT::rename(char const*, char const*)>:
c0021418:	81 ec 1c 02 00 00    	sub    esp,0x21c
c002141e:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0021426:	74 0a                	je     c0021432 <FAT::rename(char const*, char const*)+0x1a>
c0021428:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0021430:	75 0a                	jne    c002143c <FAT::rename(char const*, char const*)+0x24>
c0021432:	b8 04 00 00 00       	mov    eax,0x4
c0021437:	e9 98 00 00 00       	jmp    c00214d4 <FAT::rename(char const*, char const*)+0xbc>
c002143c:	83 ec 08             	sub    esp,0x8
c002143f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021446:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c002144d:	50                   	push   eax
c002144e:	e8 e1 f3 fd ff       	call   c0000834 <strcpy>
c0021453:	83 c4 10             	add    esp,0x10
c0021456:	83 ec 08             	sub    esp,0x8
c0021459:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0021460:	50                   	push   eax
c0021461:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021468:	e8 ed fa ff ff       	call   c0020f5a <FAT::fixFilepath(char*)>
c002146d:	83 c4 10             	add    esp,0x10
c0021470:	83 ec 08             	sub    esp,0x8
c0021473:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c002147a:	8d 44 24 18          	lea    eax,[esp+0x18]
c002147e:	50                   	push   eax
c002147f:	e8 b0 f3 fd ff       	call   c0000834 <strcpy>
c0021484:	83 c4 10             	add    esp,0x10
c0021487:	83 ec 08             	sub    esp,0x8
c002148a:	8d 44 24 14          	lea    eax,[esp+0x14]
c002148e:	50                   	push   eax
c002148f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021496:	e8 bf fa ff ff       	call   c0020f5a <FAT::fixFilepath(char*)>
c002149b:	83 c4 10             	add    esp,0x10
c002149e:	83 ec 08             	sub    esp,0x8
c00214a1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00214a5:	50                   	push   eax
c00214a6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00214ad:	50                   	push   eax
c00214ae:	e8 d6 53 fe ff       	call   c0006889 <f_rename>
c00214b3:	83 c4 10             	add    esp,0x10
c00214b6:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c00214bd:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c00214c4:	85 c0                	test   eax,eax
c00214c6:	75 07                	jne    c00214cf <FAT::rename(char const*, char const*)+0xb7>
c00214c8:	b8 00 00 00 00       	mov    eax,0x0
c00214cd:	eb 05                	jmp    c00214d4 <FAT::rename(char const*, char const*)+0xbc>
c00214cf:	b8 01 00 00 00       	mov    eax,0x1
c00214d4:	81 c4 1c 02 00 00    	add    esp,0x21c
c00214da:	c3                   	ret    
c00214db:	90                   	nop

c00214dc <FAT::mkdir(char const*)>:
c00214dc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00214e2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00214ea:	75 07                	jne    c00214f3 <FAT::mkdir(char const*)+0x17>
c00214ec:	b8 04 00 00 00       	mov    eax,0x4
c00214f1:	eb 5c                	jmp    c002154f <FAT::mkdir(char const*)+0x73>
c00214f3:	83 ec 08             	sub    esp,0x8
c00214f6:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00214fd:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021501:	50                   	push   eax
c0021502:	e8 2d f3 fd ff       	call   c0000834 <strcpy>
c0021507:	83 c4 10             	add    esp,0x10
c002150a:	83 ec 08             	sub    esp,0x8
c002150d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021511:	50                   	push   eax
c0021512:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021519:	e8 3c fa ff ff       	call   c0020f5a <FAT::fixFilepath(char*)>
c002151e:	83 c4 10             	add    esp,0x10
c0021521:	83 ec 0c             	sub    esp,0xc
c0021524:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021528:	50                   	push   eax
c0021529:	e8 2f 51 fe ff       	call   c000665d <f_mkdir>
c002152e:	83 c4 10             	add    esp,0x10
c0021531:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021538:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c002153f:	85 c0                	test   eax,eax
c0021541:	75 07                	jne    c002154a <FAT::mkdir(char const*)+0x6e>
c0021543:	b8 00 00 00 00       	mov    eax,0x0
c0021548:	eb 05                	jmp    c002154f <FAT::mkdir(char const*)+0x73>
c002154a:	b8 01 00 00 00       	mov    eax,0x1
c002154f:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021555:	c3                   	ret    

c0021556 <FAT::exists(char const*)>:
c0021556:	81 ec 2c 02 00 00    	sub    esp,0x22c
c002155c:	83 ec 08             	sub    esp,0x8
c002155f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021566:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002156a:	50                   	push   eax
c002156b:	e8 c4 f2 fd ff       	call   c0000834 <strcpy>
c0021570:	83 c4 10             	add    esp,0x10
c0021573:	83 ec 08             	sub    esp,0x8
c0021576:	8d 44 24 08          	lea    eax,[esp+0x8]
c002157a:	50                   	push   eax
c002157b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021582:	e8 d3 f9 ff ff       	call   c0020f5a <FAT::fixFilepath(char*)>
c0021587:	83 c4 10             	add    esp,0x10
c002158a:	83 ec 08             	sub    esp,0x8
c002158d:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0021594:	50                   	push   eax
c0021595:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021599:	50                   	push   eax
c002159a:	e8 e9 4b fe ff       	call   c0006188 <f_stat>
c002159f:	83 c4 10             	add    esp,0x10
c00215a2:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00215a9:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00215b0:	85 c0                	test   eax,eax
c00215b2:	75 04                	jne    c00215b8 <FAT::exists(char const*)+0x62>
c00215b4:	b0 01                	mov    al,0x1
c00215b6:	eb 02                	jmp    c00215ba <FAT::exists(char const*)+0x64>
c00215b8:	b0 00                	mov    al,0x0
c00215ba:	81 c4 2c 02 00 00    	add    esp,0x22c
c00215c0:	c3                   	ret    
c00215c1:	90                   	nop

c00215c2 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c00215c2:	b8 08 00 00 00       	mov    eax,0x8
c00215c7:	c3                   	ret    

c00215c8 <ISO9660::seek(void*, unsigned long long)>:
c00215c8:	53                   	push   ebx
c00215c9:	b8 04 00 00 00       	mov    eax,0x4
c00215ce:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00215d2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00215d6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00215da:	85 d2                	test   edx,edx
c00215dc:	74 17                	je     c00215f5 <ISO9660::seek(void*, unsigned long long)+0x2d>
c00215de:	89 c8                	mov    eax,ecx
c00215e0:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c00215e3:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c00215e6:	b8 01 00 00 00       	mov    eax,0x1
c00215eb:	73 08                	jae    c00215f5 <ISO9660::seek(void*, unsigned long long)+0x2d>
c00215ed:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c00215f0:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c00215f3:	31 c0                	xor    eax,eax
c00215f5:	5b                   	pop    ebx
c00215f6:	c3                   	ret    
c00215f7:	90                   	nop

c00215f8 <ISO9660::tell(void*, unsigned long long*)>:
c00215f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00215fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021600:	85 d2                	test   edx,edx
c0021602:	74 12                	je     c0021616 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021604:	85 c0                	test   eax,eax
c0021606:	74 0e                	je     c0021616 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021608:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c002160b:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c002160e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021611:	89 10                	mov    DWORD PTR [eax],edx
c0021613:	31 c0                	xor    eax,eax
c0021615:	c3                   	ret    
c0021616:	b8 04 00 00 00       	mov    eax,0x4
c002161b:	c3                   	ret    

c002161c <ISO9660::getName()>:
c002161c:	b8 60 c8 02 c0       	mov    eax,0xc002c860
c0021621:	c3                   	ret    

c0021622 <ISO9660::stat(void*, unsigned long long*)>:
c0021622:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021626:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002162a:	85 d2                	test   edx,edx
c002162c:	74 12                	je     c0021640 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c002162e:	85 c0                	test   eax,eax
c0021630:	74 0e                	je     c0021640 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021632:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0021635:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0021638:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c002163b:	89 10                	mov    DWORD PTR [eax],edx
c002163d:	31 c0                	xor    eax,eax
c002163f:	c3                   	ret    
c0021640:	b8 04 00 00 00       	mov    eax,0x4
c0021645:	c3                   	ret    

c0021646 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0021646:	b8 01 00 00 00       	mov    eax,0x1
c002164b:	c3                   	ret    

c002164c <ISO9660::unlink(char const*)>:
c002164c:	b8 01 00 00 00       	mov    eax,0x1
c0021651:	c3                   	ret    

c0021652 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0021652:	b8 01 00 00 00       	mov    eax,0x1
c0021657:	c3                   	ret    

c0021658 <ISO9660::rename(char const*, char const*)>:
c0021658:	b8 01 00 00 00       	mov    eax,0x1
c002165d:	c3                   	ret    

c002165e <ISO9660::mkdir(char const*)>:
c002165e:	b8 01 00 00 00       	mov    eax,0x1
c0021663:	c3                   	ret    

c0021664 <ISO9660::close(void*)>:
c0021664:	83 ec 0c             	sub    esp,0xc
c0021667:	b8 04 00 00 00       	mov    eax,0x4
c002166c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021670:	85 d2                	test   edx,edx
c0021672:	74 0e                	je     c0021682 <ISO9660::close(void*)+0x1e>
c0021674:	83 ec 0c             	sub    esp,0xc
c0021677:	52                   	push   edx
c0021678:	e8 d3 e1 fe ff       	call   c000f850 <free>
c002167d:	83 c4 10             	add    esp,0x10
c0021680:	31 c0                	xor    eax,eax
c0021682:	83 c4 0c             	add    esp,0xc
c0021685:	c3                   	ret    

c0021686 <ISO9660::closeDir(void*)>:
c0021686:	83 ec 0c             	sub    esp,0xc
c0021689:	b8 04 00 00 00       	mov    eax,0x4
c002168e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021692:	85 d2                	test   edx,edx
c0021694:	74 0e                	je     c00216a4 <ISO9660::closeDir(void*)+0x1e>
c0021696:	83 ec 0c             	sub    esp,0xc
c0021699:	52                   	push   edx
c002169a:	e8 b1 e1 fe ff       	call   c000f850 <free>
c002169f:	83 c4 10             	add    esp,0x10
c00216a2:	31 c0                	xor    eax,eax
c00216a4:	83 c4 0c             	add    esp,0xc
c00216a7:	c3                   	ret    

c00216a8 <ISO9660::~ISO9660()>:
c00216a8:	83 ec 0c             	sub    esp,0xc
c00216ab:	ba c4 c8 02 c0       	mov    edx,0xc002c8c4
c00216b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216b4:	89 10                	mov    DWORD PTR [eax],edx
c00216b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216ba:	83 ec 0c             	sub    esp,0xc
c00216bd:	50                   	push   eax
c00216be:	e8 f7 1a ff ff       	call   c00131ba <Filesystem::~Filesystem()>
c00216c3:	83 c4 10             	add    esp,0x10
c00216c6:	90                   	nop
c00216c7:	83 c4 0c             	add    esp,0xc
c00216ca:	c3                   	ret    
c00216cb:	90                   	nop

c00216cc <ISO9660::~ISO9660()>:
c00216cc:	83 ec 0c             	sub    esp,0xc
c00216cf:	83 ec 0c             	sub    esp,0xc
c00216d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00216d6:	e8 cd ff ff ff       	call   c00216a8 <ISO9660::~ISO9660()>
c00216db:	83 c4 10             	add    esp,0x10
c00216de:	83 ec 08             	sub    esp,0x8
c00216e1:	6a 08                	push   0x8
c00216e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00216e7:	e8 c6 16 ff ff       	call   c0012db2 <operator delete(void*, unsigned long)>
c00216ec:	83 c4 10             	add    esp,0x10
c00216ef:	83 c4 0c             	add    esp,0xc
c00216f2:	c3                   	ret    

c00216f3 <__memmem(unsigned char*, int, unsigned char*, int)>:
c00216f3:	55                   	push   ebp
c00216f4:	31 c9                	xor    ecx,ecx
c00216f6:	57                   	push   edi
c00216f7:	56                   	push   esi
c00216f8:	53                   	push   ebx
c00216f9:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00216fd:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0021701:	89 eb                	mov    ebx,ebp
c0021703:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0021707:	39 ce                	cmp    esi,ecx
c0021709:	7e 17                	jle    c0021722 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c002170b:	31 d2                	xor    edx,edx
c002170d:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0021711:	7d 13                	jge    c0021726 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0021713:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021717:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c002171a:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c002171d:	75 0d                	jne    c002172c <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c002171f:	42                   	inc    edx
c0021720:	eb eb                	jmp    c002170d <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0021722:	31 c0                	xor    eax,eax
c0021724:	eb 0a                	jmp    c0021730 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021726:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c002172a:	eb 04                	jmp    c0021730 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c002172c:	41                   	inc    ecx
c002172d:	43                   	inc    ebx
c002172e:	eb d7                	jmp    c0021707 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0021730:	5b                   	pop    ebx
c0021731:	5e                   	pop    esi
c0021732:	5f                   	pop    edi
c0021733:	5d                   	pop    ebp
c0021734:	c3                   	ret    

c0021735 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0021735:	56                   	push   esi
c0021736:	53                   	push   ebx
c0021737:	52                   	push   edx
c0021738:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002173c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0021740:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021744:	39 0d c0 1a 03 c0    	cmp    DWORD PTR ds:0xc0031ac0,ecx
c002174a:	75 08                	jne    c0021754 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c002174c:	38 05 14 d9 02 c0    	cmp    BYTE PTR ds:0xc002d914,al
c0021752:	74 2b                	je     c002177f <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c0021754:	83 ec 0c             	sub    esp,0xc
c0021757:	a2 14 d9 02 c0       	mov    ds:0xc002d914,al
c002175c:	68 e0 1a 03 c0       	push   0xc0031ae0
c0021761:	0f be c0             	movsx  eax,al
c0021764:	6a 01                	push   0x1
c0021766:	89 0d c0 1a 03 c0    	mov    DWORD PTR ds:0xc0031ac0,ecx
c002176c:	31 db                	xor    ebx,ebx
c002176e:	53                   	push   ebx
c002176f:	51                   	push   ecx
c0021770:	ff 34 85 9c e8 02 c0 	push   DWORD PTR [eax*4-0x3ffd1764]
c0021777:	e8 5c 4f ff ff       	call   c00166d8 <LogicalDisk::read(unsigned long long, int, void*)>
c002177c:	83 c4 20             	add    esp,0x20
c002177f:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c0021787:	c7 44 24 14 e0 1a 03 c0 	mov    DWORD PTR [esp+0x14],0xc0031ae0
c002178f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0021793:	58                   	pop    eax
c0021794:	5b                   	pop    ebx
c0021795:	5e                   	pop    esi
c0021796:	e9 a9 ef fd ff       	jmp    c0000744 <memcpy>
c002179b:	90                   	nop

c002179c <ISO9660::tryMount(LogicalDisk*, int)>:
c002179c:	81 ec 10 08 00 00    	sub    esp,0x810
c00217a2:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c00217a9:	83 c0 41             	add    eax,0x41
c00217ac:	0f be c0             	movsx  eax,al
c00217af:	50                   	push   eax
c00217b0:	8d 44 24 08          	lea    eax,[esp+0x8]
c00217b4:	50                   	push   eax
c00217b5:	6a 10                	push   0x10
c00217b7:	e8 79 ff ff ff       	call   c0021735 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00217bc:	83 c4 10             	add    esp,0x10
c00217bf:	31 c0                	xor    eax,eax
c00217c1:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c00217c6:	75 1d                	jne    c00217e5 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00217c8:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c00217cd:	75 16                	jne    c00217e5 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00217cf:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c00217d4:	75 0f                	jne    c00217e5 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00217d6:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c00217db:	75 08                	jne    c00217e5 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00217dd:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c00217e2:	0f 94 c0             	sete   al
c00217e5:	81 c4 0c 08 00 00    	add    esp,0x80c
c00217eb:	c3                   	ret    

c00217ec <ISO9660::read(void*, unsigned long, void*, int*)>:
c00217ec:	55                   	push   ebp
c00217ed:	57                   	push   edi
c00217ee:	56                   	push   esi
c00217ef:	53                   	push   ebx
c00217f0:	81 ec 2c 08 00 00    	sub    esp,0x82c
c00217f6:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c00217fd:	85 ed                	test   ebp,ebp
c00217ff:	0f 84 d6 01 00 00    	je     c00219db <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021805:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c002180d:	0f 84 c8 01 00 00    	je     c00219db <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021813:	b8 01 00 00 00       	mov    eax,0x1
c0021818:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c002181c:	0f 85 be 01 00 00    	jne    c00219e0 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0021822:	31 d2                	xor    edx,edx
c0021824:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c002182b:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002182e:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0021831:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0021835:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
c0021838:	89 04 24             	mov    DWORD PTR [esp],eax
c002183b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002183f:	01 f0                	add    eax,esi
c0021841:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0021844:	11 fa                	adc    edx,edi
c0021846:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c002184a:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c002184e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0021852:	19 d1                	sbb    ecx,edx
c0021854:	72 0a                	jb     c0021860 <ISO9660::read(void*, unsigned long, void*, int*)+0x74>
c0021856:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002185a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002185e:	eb 13                	jmp    c0021873 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0021860:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021864:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021868:	29 f0                	sub    eax,esi
c002186a:	19 fa                	sbb    edx,edi
c002186c:	89 04 24             	mov    DWORD PTR [esp],eax
c002186f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021873:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021876:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0021879:	0f a4 c2 0b          	shld   edx,eax,0xb
c002187d:	51                   	push   ecx
c002187e:	c1 e0 0b             	shl    eax,0xb
c0021881:	01 c6                	add    esi,eax
c0021883:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021887:	11 d7                	adc    edi,edx
c0021889:	50                   	push   eax
c002188a:	89 fa                	mov    edx,edi
c002188c:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c0021890:	89 f0                	mov    eax,esi
c0021892:	53                   	push   ebx
c0021893:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021897:	50                   	push   eax
c0021898:	e8 98 fe ff ff       	call   c0021735 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002189d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00218a1:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00218a4:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00218a8:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00218ae:	83 c4 10             	add    esp,0x10
c00218b1:	b8 00 08 00 00       	mov    eax,0x800
c00218b6:	29 d0                	sub    eax,edx
c00218b8:	39 c1                	cmp    ecx,eax
c00218ba:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00218be:	83 d9 00             	sbb    ecx,0x0
c00218c1:	7d 1c                	jge    c00218df <ISO9660::read(void*, unsigned long, void*, int*)+0xf3>
c00218c3:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00218c8:	75 12                	jne    c00218dc <ISO9660::read(void*, unsigned long, void*, int*)+0xf0>
c00218ca:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00218d1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00218d7:	e9 fb 00 00 00       	jmp    c00219d7 <ISO9660::read(void*, unsigned long, void*, int*)+0x1eb>
c00218dc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00218df:	8d 0c 13             	lea    ecx,[ebx+edx*1]
c00218e2:	31 d2                	xor    edx,edx
c00218e4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00218e8:	39 c2                	cmp    edx,eax
c00218ea:	7d 14                	jge    c0021900 <ISO9660::read(void*, unsigned long, void*, int*)+0x114>
c00218ec:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c00218f3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00218f7:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c00218fa:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00218fd:	42                   	inc    edx
c00218fe:	eb e8                	jmp    c00218e8 <ISO9660::read(void*, unsigned long, void*, int*)+0xfc>
c0021900:	89 c3                	mov    ebx,eax
c0021902:	85 c0                	test   eax,eax
c0021904:	79 02                	jns    c0021908 <ISO9660::read(void*, unsigned long, void*, int*)+0x11c>
c0021906:	31 db                	xor    ebx,ebx
c0021908:	99                   	cdq    
c0021909:	01 c3                	add    ebx,eax
c002190b:	03 9c 24 4c 08 00 00 	add    ebx,DWORD PTR [esp+0x84c]
c0021912:	01 c6                	add    esi,eax
c0021914:	11 d7                	adc    edi,edx
c0021916:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c002191a:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c002191e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0021921:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0021925:	29 c6                	sub    esi,eax
c0021927:	19 d7                	sbb    edi,edx
c0021929:	89 34 24             	mov    DWORD PTR [esp],esi
c002192c:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0021930:	b8 ff 07 00 00       	mov    eax,0x7ff
c0021935:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0021938:	b8 00 00 00 00       	mov    eax,0x0
c002193d:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021941:	7d 3e                	jge    c0021981 <ISO9660::read(void*, unsigned long, void*, int*)+0x195>
c0021943:	52                   	push   edx
c0021944:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021948:	50                   	push   eax
c0021949:	53                   	push   ebx
c002194a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002194e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021952:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021956:	50                   	push   eax
c0021957:	e8 d9 fd ff ff       	call   c0021735 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002195c:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0021964:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0021969:	81 c3 00 08 00 00    	add    ebx,0x800
c002196f:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0021977:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c002197c:	83 c4 10             	add    esp,0x10
c002197f:	eb af                	jmp    c0021930 <ISO9660::read(void*, unsigned long, void*, int*)+0x144>
c0021981:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021985:	0b 04 24             	or     eax,DWORD PTR [esp]
c0021988:	74 32                	je     c00219bc <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c002198a:	50                   	push   eax
c002198b:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c002198f:	50                   	push   eax
c0021990:	8d 44 24 28          	lea    eax,[esp+0x28]
c0021994:	50                   	push   eax
c0021995:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0021999:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002199d:	0f ac fe 0b          	shrd   esi,edi,0xb
c00219a1:	56                   	push   esi
c00219a2:	e8 8e fd ff ff       	call   c0021735 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00219a7:	83 c4 0c             	add    esp,0xc
c00219aa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00219ae:	8d 44 24 28          	lea    eax,[esp+0x28]
c00219b2:	50                   	push   eax
c00219b3:	53                   	push   ebx
c00219b4:	e8 8b ed fd ff       	call   c0000744 <memcpy>
c00219b9:	83 c4 10             	add    esp,0x10
c00219bc:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00219c3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00219c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00219cb:	89 38                	mov    DWORD PTR [eax],edi
c00219cd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00219d1:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00219d4:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00219d7:	31 c0                	xor    eax,eax
c00219d9:	eb 05                	jmp    c00219e0 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c00219db:	b8 04 00 00 00       	mov    eax,0x4
c00219e0:	81 c4 2c 08 00 00    	add    esp,0x82c
c00219e6:	5b                   	pop    ebx
c00219e7:	5e                   	pop    esi
c00219e8:	5f                   	pop    edi
c00219e9:	5d                   	pop    ebp
c00219ea:	c3                   	ret    
c00219eb:	90                   	nop

c00219ec <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c00219ec:	55                   	push   ebp
c00219ed:	57                   	push   edi
c00219ee:	56                   	push   esi
c00219ef:	53                   	push   ebx
c00219f0:	81 ec 5c 09 00 00    	sub    esp,0x95c
c00219f6:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c00219fd:	85 f6                	test   esi,esi
c00219ff:	0f 84 64 02 00 00    	je     c0021c69 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021a05:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0021a0d:	0f 84 56 02 00 00    	je     c0021c69 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021a13:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0021a16:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c0021a19:	75 0a                	jne    c0021a25 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0021a1b:	b8 07 00 00 00       	mov    eax,0x7
c0021a20:	e9 49 02 00 00       	jmp    c0021c6e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021a25:	50                   	push   eax
c0021a26:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021a2a:	50                   	push   eax
c0021a2b:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021a32:	53                   	push   ebx
c0021a33:	8b 06                	mov    eax,DWORD PTR [esi]
c0021a35:	c1 e0 0b             	shl    eax,0xb
c0021a38:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0021a3b:	c1 e8 0b             	shr    eax,0xb
c0021a3e:	50                   	push   eax
c0021a3f:	e8 f1 fc ff ff       	call   c0021735 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021a44:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021a47:	83 c4 10             	add    esp,0x10
c0021a4a:	89 c1                	mov    ecx,eax
c0021a4c:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c0021a4f:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0021a55:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0021a58:	84 db                	test   bl,bl
c0021a5a:	0f 85 90 00 00 00    	jne    c0021af0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c0021a60:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c0021a66:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021a6c:	29 c7                	sub    edi,eax
c0021a6e:	89 fb                	mov    ebx,edi
c0021a70:	c1 fb 1f             	sar    ebx,0x1f
c0021a73:	01 f8                	add    eax,edi
c0021a75:	11 da                	adc    edx,ebx
c0021a77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021a7b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021a7f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0021a82:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c0021a85:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021a88:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021a8b:	89 04 24             	mov    DWORD PTR [esp],eax
c0021a8e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021a92:	89 d8                	mov    eax,ebx
c0021a94:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0021a97:	ba 00 00 00 00       	mov    edx,0x0
c0021a9c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021aa0:	b8 00 00 00 00       	mov    eax,0x0
c0021aa5:	73 0b                	jae    c0021ab2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0021aa7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021aaa:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021aae:	29 f8                	sub    eax,edi
c0021ab0:	19 da                	sbb    edx,ebx
c0021ab2:	89 d3                	mov    ebx,edx
c0021ab4:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021ab7:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021aba:	09 c3                	or     ebx,eax
c0021abc:	0f 84 59 ff ff ff    	je     c0021a1b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0021ac2:	55                   	push   ebp
c0021ac3:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021ac7:	50                   	push   eax
c0021ac8:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021acf:	53                   	push   ebx
c0021ad0:	8b 06                	mov    eax,DWORD PTR [esi]
c0021ad2:	c1 e0 0b             	shl    eax,0xb
c0021ad5:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0021ad9:	c1 e8 0b             	shr    eax,0xb
c0021adc:	50                   	push   eax
c0021add:	e8 53 fc ff ff       	call   c0021735 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021ae2:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021ae5:	83 c4 10             	add    esp,0x10
c0021ae8:	25 ff 07 00 00       	and    eax,0x7ff
c0021aed:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0021af0:	57                   	push   edi
c0021af1:	6a 28                	push   0x28
c0021af3:	6a 00                	push   0x0
c0021af5:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021af9:	50                   	push   eax
c0021afa:	e8 79 ec fd ff       	call   c0000778 <memset>
c0021aff:	31 d2                	xor    edx,edx
c0021b01:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0021b04:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021b0a:	89 f8                	mov    eax,edi
c0021b0c:	83 c0 21             	add    eax,0x21
c0021b0f:	83 d2 00             	adc    edx,0x0
c0021b12:	89 c7                	mov    edi,eax
c0021b14:	89 d5                	mov    ebp,edx
c0021b16:	83 c4 10             	add    esp,0x10
c0021b19:	31 c9                	xor    ecx,ecx
c0021b1b:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c0021b22:	83 f9 28             	cmp    ecx,0x28
c0021b25:	88 04 24             	mov    BYTE PTR [esp],al
c0021b28:	0f 94 c2             	sete   dl
c0021b2b:	88 d0                	mov    al,dl
c0021b2d:	ba ff 07 00 00       	mov    edx,0x7ff
c0021b32:	39 fa                	cmp    edx,edi
c0021b34:	ba 00 00 00 00       	mov    edx,0x0
c0021b39:	19 ea                	sbb    edx,ebp
c0021b3b:	0f 92 c2             	setb   dl
c0021b3e:	09 c2                	or     edx,eax
c0021b40:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0021b44:	0f 94 c0             	sete   al
c0021b47:	08 d0                	or     al,dl
c0021b49:	75 16                	jne    c0021b61 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021b4b:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021b4f:	74 10                	je     c0021b61 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021b51:	8a 04 24             	mov    al,BYTE PTR [esp]
c0021b54:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0021b58:	41                   	inc    ecx
c0021b59:	83 c7 01             	add    edi,0x1
c0021b5c:	83 d5 00             	adc    ebp,0x0
c0021b5f:	eb ba                	jmp    c0021b1b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c0021b61:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0021b68:	83 ec 0c             	sub    esp,0xc
c0021b6b:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0021b6f:	57                   	push   edi
c0021b70:	e8 1f ec fd ff       	call   c0000794 <strlen>
c0021b75:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0021b7d:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021b81:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c0021b88:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021b8b:	5a                   	pop    edx
c0021b8c:	25 ff 07 00 00       	and    eax,0x7ff
c0021b91:	01 c8                	add    eax,ecx
c0021b93:	59                   	pop    ecx
c0021b94:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0021b9a:	83 e0 02             	and    eax,0x2
c0021b9d:	3c 01                	cmp    al,0x1
c0021b9f:	19 c0                	sbb    eax,eax
c0021ba1:	83 c0 02             	add    eax,0x2
c0021ba4:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021ba8:	57                   	push   edi
c0021ba9:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0021bad:	50                   	push   eax
c0021bae:	e8 81 ec fd ff       	call   c0000834 <strcpy>
c0021bb3:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0021bb7:	83 c4 10             	add    esp,0x10
c0021bba:	84 c0                	test   al,al
c0021bbc:	75 21                	jne    c0021bdf <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c0021bbe:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0021bc6:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021bce:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021bd6:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021bdd:	eb 28                	jmp    c0021c07 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021bdf:	fe c8                	dec    al
c0021be1:	75 24                	jne    c0021c07 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021be3:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021beb:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021bf3:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021bfb:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0021c02:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0021c07:	0f b6 fb             	movzx  edi,bl
c0021c0a:	31 db                	xor    ebx,ebx
c0021c0c:	50                   	push   eax
c0021c0d:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c0021c14:	8d 44 24 48          	lea    eax,[esp+0x48]
c0021c18:	50                   	push   eax
c0021c19:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c0021c20:	e8 1f eb fd ff       	call   c0000744 <memcpy>
c0021c25:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c0021c2c:	89 f9                	mov    ecx,edi
c0021c2e:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021c34:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c0021c37:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021c3a:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c0021c3d:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021c40:	83 c4 10             	add    esp,0x10
c0021c43:	39 c7                	cmp    edi,eax
c0021c45:	89 df                	mov    edi,ebx
c0021c47:	19 d7                	sbb    edi,edx
c0021c49:	72 10                	jb     c0021c5b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021c4b:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0021c52:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0021c59:	eb 0a                	jmp    c0021c65 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c0021c5b:	29 c8                	sub    eax,ecx
c0021c5d:	19 da                	sbb    edx,ebx
c0021c5f:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021c62:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021c65:	31 c0                	xor    eax,eax
c0021c67:	eb 05                	jmp    c0021c6e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021c69:	b8 04 00 00 00       	mov    eax,0x4
c0021c6e:	81 c4 5c 09 00 00    	add    esp,0x95c
c0021c74:	5b                   	pop    ebx
c0021c75:	5e                   	pop    esi
c0021c76:	5f                   	pop    edi
c0021c77:	5d                   	pop    ebp
c0021c78:	c3                   	ret    

c0021c79 <readRoot(unsigned int*, unsigned int*, char)>:
c0021c79:	81 ec 40 08 00 00    	sub    esp,0x840
c0021c7f:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0021c87:	50                   	push   eax
c0021c88:	8d 44 24 38          	lea    eax,[esp+0x38]
c0021c8c:	50                   	push   eax
c0021c8d:	6a 10                	push   0x10
c0021c8f:	e8 a1 fa ff ff       	call   c0021735 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021c94:	83 c4 0c             	add    esp,0xc
c0021c97:	6a 22                	push   0x22
c0021c99:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c0021ca0:	50                   	push   eax
c0021ca1:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0021ca5:	50                   	push   eax
c0021ca6:	e8 99 ea fd ff       	call   c0000744 <memcpy>
c0021cab:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021cb2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021cb6:	89 10                	mov    DWORD PTR [eax],edx
c0021cb8:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0021cbf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021cc3:	89 10                	mov    DWORD PTR [eax],edx
c0021cc5:	b0 01                	mov    al,0x1
c0021cc7:	81 c4 4c 08 00 00    	add    esp,0x84c
c0021ccd:	c3                   	ret    

c0021cce <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021cce:	55                   	push   ebp
c0021ccf:	57                   	push   edi
c0021cd0:	56                   	push   esi
c0021cd1:	53                   	push   ebx
c0021cd2:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021cd8:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0021cdf:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021ce6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021cea:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021cee:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021cf2:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021cf6:	75 03                	jne    c0021cfb <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021cf8:	83 c3 02             	add    ebx,0x2
c0021cfb:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0021cfe:	75 03                	jne    c0021d03 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0021d00:	43                   	inc    ebx
c0021d01:	eb f8                	jmp    c0021cfb <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021d03:	51                   	push   ecx
c0021d04:	68 00 01 00 00       	push   0x100
c0021d09:	6a 00                	push   0x0
c0021d0b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021d0f:	50                   	push   eax
c0021d10:	e8 63 ea fd ff       	call   c0000778 <memset>
c0021d15:	83 c4 10             	add    esp,0x10
c0021d18:	31 d2                	xor    edx,edx
c0021d1a:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021d1d:	84 c0                	test   al,al
c0021d1f:	74 21                	je     c0021d42 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0021d21:	3c 2f                	cmp    al,0x2f
c0021d23:	75 0b                	jne    c0021d30 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0021d25:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021d29:	bd 01 00 00 00       	mov    ebp,0x1
c0021d2e:	eb 14                	jmp    c0021d44 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0021d30:	8d 48 9f             	lea    ecx,[eax-0x61]
c0021d33:	80 f9 19             	cmp    cl,0x19
c0021d36:	77 03                	ja     c0021d3b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021d38:	83 e8 20             	sub    eax,0x20
c0021d3b:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0021d3f:	42                   	inc    edx
c0021d40:	eb d8                	jmp    c0021d1a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021d42:	31 ed                	xor    ebp,ebp
c0021d44:	83 ec 0c             	sub    esp,0xc
c0021d47:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0021d4e:	e8 ed da fe ff       	call   c000f840 <malloc>
c0021d53:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0021d5a:	89 c6                	mov    esi,eax
c0021d5c:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021d62:	c1 ef 0b             	shr    edi,0xb
c0021d65:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0021d6c:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0021d70:	83 c4 10             	add    esp,0x10
c0021d73:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0021d78:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021d7c:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0021d83:	74 28                	je     c0021dad <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0021d85:	52                   	push   edx
c0021d86:	57                   	push   edi
c0021d87:	50                   	push   eax
c0021d88:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021d8c:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0021d93:	e8 9d f9 ff ff       	call   c0021735 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021d98:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021d9c:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0021da3:	05 00 08 00 00       	add    eax,0x800
c0021da8:	83 c4 10             	add    esp,0x10
c0021dab:	eb cb                	jmp    c0021d78 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0021dad:	83 ec 0c             	sub    esp,0xc
c0021db0:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0021db4:	57                   	push   edi
c0021db5:	e8 da e9 fd ff       	call   c0000794 <strlen>
c0021dba:	50                   	push   eax
c0021dbb:	57                   	push   edi
c0021dbc:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0021dc3:	56                   	push   esi
c0021dc4:	e8 2a f9 ff ff       	call   c00216f3 <__memmem(unsigned char*, int, unsigned char*, int)>
c0021dc9:	83 c4 20             	add    esp,0x20
c0021dcc:	85 c0                	test   eax,eax
c0021dce:	75 13                	jne    c0021de3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0021dd0:	83 ec 0c             	sub    esp,0xc
c0021dd3:	56                   	push   esi
c0021dd4:	e8 77 da fe ff       	call   c000f850 <free>
c0021dd9:	83 c4 10             	add    esp,0x10
c0021ddc:	31 c0                	xor    eax,eax
c0021dde:	e9 b3 00 00 00       	jmp    c0021e96 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021de3:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0021de7:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0021deb:	c1 e7 08             	shl    edi,0x8
c0021dee:	c1 e2 10             	shl    edx,0x10
c0021df1:	09 d7                	or     edi,edx
c0021df3:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0021df7:	09 d7                	or     edi,edx
c0021df9:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0021dfd:	c1 e2 18             	shl    edx,0x18
c0021e00:	09 d7                	or     edi,edx
c0021e02:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0021e06:	89 d1                	mov    ecx,edx
c0021e08:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0021e0c:	c1 e1 08             	shl    ecx,0x8
c0021e0f:	c1 e2 10             	shl    edx,0x10
c0021e12:	09 ca                	or     edx,ecx
c0021e14:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0021e18:	09 ca                	or     edx,ecx
c0021e1a:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0021e1e:	c1 e1 18             	shl    ecx,0x18
c0021e21:	09 ca                	or     edx,ecx
c0021e23:	89 e9                	mov    ecx,ebp
c0021e25:	84 c9                	test   cl,cl
c0021e27:	74 3c                	je     c0021e65 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0021e29:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021e2d:	83 ec 0c             	sub    esp,0xc
c0021e30:	56                   	push   esi
c0021e31:	e8 1a da fe ff       	call   c000f850 <free>
c0021e36:	83 c4 0c             	add    esp,0xc
c0021e39:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021e40:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0021e45:	50                   	push   eax
c0021e46:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021e4d:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021e54:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021e58:	52                   	push   edx
c0021e59:	57                   	push   edi
c0021e5a:	53                   	push   ebx
c0021e5b:	e8 6e fe ff ff       	call   c0021cce <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021e60:	83 c4 20             	add    esp,0x20
c0021e63:	eb 31                	jmp    c0021e96 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021e65:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0021e68:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0021e6f:	d0 e8                	shr    al,1
c0021e71:	89 3b                	mov    DWORD PTR [ebx],edi
c0021e73:	83 e0 01             	and    eax,0x1
c0021e76:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0021e7d:	83 ec 0c             	sub    esp,0xc
c0021e80:	89 13                	mov    DWORD PTR [ebx],edx
c0021e82:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0021e89:	89 03                	mov    DWORD PTR [ebx],eax
c0021e8b:	56                   	push   esi
c0021e8c:	e8 bf d9 fe ff       	call   c000f850 <free>
c0021e91:	83 c4 10             	add    esp,0x10
c0021e94:	b0 01                	mov    al,0x1
c0021e96:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021e9c:	5b                   	pop    ebx
c0021e9d:	5e                   	pop    esi
c0021e9e:	5f                   	pop    edi
c0021e9f:	5d                   	pop    ebp
c0021ea0:	c3                   	ret    

c0021ea1 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0021ea1:	55                   	push   ebp
c0021ea2:	57                   	push   edi
c0021ea3:	56                   	push   esi
c0021ea4:	53                   	push   ebx
c0021ea5:	83 ec 20             	sub    esp,0x20
c0021ea8:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021eac:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0021eb0:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0021eb4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021ebc:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021ec4:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0021ec9:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0021ecf:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0021ed5:	57                   	push   edi
c0021ed6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021eda:	50                   	push   eax
c0021edb:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021edf:	50                   	push   eax
c0021ee0:	e8 94 fd ff ff       	call   c0021c79 <readRoot(unsigned int*, unsigned int*, char)>
c0021ee5:	5a                   	pop    edx
c0021ee6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021eea:	e8 a5 e8 fd ff       	call   c0000794 <strlen>
c0021eef:	83 c4 10             	add    esp,0x10
c0021ef2:	83 f8 03             	cmp    eax,0x3
c0021ef5:	77 17                	ja     c0021f0e <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021ef7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021efb:	89 03                	mov    DWORD PTR [ebx],eax
c0021efd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021f01:	89 06                	mov    DWORD PTR [esi],eax
c0021f03:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0021f0a:	b0 01                	mov    al,0x1
c0021f0c:	eb 19                	jmp    c0021f27 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0021f0e:	50                   	push   eax
c0021f0f:	55                   	push   ebp
c0021f10:	57                   	push   edi
c0021f11:	56                   	push   esi
c0021f12:	53                   	push   ebx
c0021f13:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021f17:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021f1b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021f1f:	e8 aa fd ff ff       	call   c0021cce <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021f24:	83 c4 20             	add    esp,0x20
c0021f27:	83 c4 1c             	add    esp,0x1c
c0021f2a:	5b                   	pop    ebx
c0021f2b:	5e                   	pop    esi
c0021f2c:	5f                   	pop    edi
c0021f2d:	5d                   	pop    ebp
c0021f2e:	c3                   	ret    
c0021f2f:	90                   	nop

c0021f30 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0021f30:	57                   	push   edi
c0021f31:	56                   	push   esi
c0021f32:	53                   	push   ebx
c0021f33:	83 ec 10             	sub    esp,0x10
c0021f36:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021f3a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021f3e:	85 ff                	test   edi,edi
c0021f40:	0f 84 9d 00 00 00    	je     c0021fe3 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021f46:	85 f6                	test   esi,esi
c0021f48:	0f 84 95 00 00 00    	je     c0021fe3 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021f4e:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0021f53:	74 17                	je     c0021f6c <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c0021f55:	83 ec 0c             	sub    esp,0xc
c0021f58:	68 7b c8 02 c0       	push   0xc002c87b
c0021f5d:	e8 30 0f ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0021f62:	83 c4 10             	add    esp,0x10
c0021f65:	b8 03 00 00 00       	mov    eax,0x3
c0021f6a:	eb 7c                	jmp    c0021fe8 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021f6c:	83 ec 0c             	sub    esp,0xc
c0021f6f:	6a 1c                	push   0x1c
c0021f71:	e8 ca d8 fe ff       	call   c000f840 <malloc>
c0021f76:	89 07                	mov    DWORD PTR [edi],eax
c0021f78:	89 c3                	mov    ebx,eax
c0021f7a:	58                   	pop    eax
c0021f7b:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021f7f:	50                   	push   eax
c0021f80:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021f83:	50                   	push   eax
c0021f84:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021f88:	50                   	push   eax
c0021f89:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021f8d:	50                   	push   eax
c0021f8e:	56                   	push   esi
c0021f8f:	e8 0d ff ff ff       	call   c0021ea1 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021f94:	83 c4 20             	add    esp,0x20
c0021f97:	84 c0                	test   al,al
c0021f99:	74 07                	je     c0021fa2 <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c0021f9b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021fa0:	74 0b                	je     c0021fad <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c0021fa2:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021fa6:	b8 01 00 00 00       	mov    eax,0x1
c0021fab:	eb 3b                	jmp    c0021fe8 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021fad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021fb1:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021fb5:	89 03                	mov    DWORD PTR [ebx],eax
c0021fb7:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021fbe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021fc2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021fc9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021fd0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021fd3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021fda:	8a 06                	mov    al,BYTE PTR [esi]
c0021fdc:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021fdf:	31 c0                	xor    eax,eax
c0021fe1:	eb 05                	jmp    c0021fe8 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021fe3:	b8 04 00 00 00       	mov    eax,0x4
c0021fe8:	83 c4 10             	add    esp,0x10
c0021feb:	5b                   	pop    ebx
c0021fec:	5e                   	pop    esi
c0021fed:	5f                   	pop    edi
c0021fee:	c3                   	ret    
c0021fef:	90                   	nop

c0021ff0 <ISO9660::exists(char const*)>:
c0021ff0:	83 ec 28             	sub    esp,0x28
c0021ff3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021ff7:	8d 54 24 18          	lea    edx,[esp+0x18]
c0021ffb:	52                   	push   edx
c0021ffc:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0021fff:	52                   	push   edx
c0022000:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0022004:	52                   	push   edx
c0022005:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0022009:	52                   	push   edx
c002200a:	50                   	push   eax
c002200b:	e8 91 fe ff ff       	call   c0021ea1 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022010:	83 c4 3c             	add    esp,0x3c
c0022013:	c3                   	ret    

c0022014 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0022014:	56                   	push   esi
c0022015:	53                   	push   ebx
c0022016:	83 ec 14             	sub    esp,0x14
c0022019:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c002201d:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022021:	85 db                	test   ebx,ebx
c0022023:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0022027:	0f 94 c2             	sete   dl
c002202a:	85 f6                	test   esi,esi
c002202c:	0f 94 c0             	sete   al
c002202f:	08 c2                	or     dl,al
c0022031:	75 68                	jne    c002209b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0022033:	85 c9                	test   ecx,ecx
c0022035:	74 64                	je     c002209b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0022037:	83 ec 0c             	sub    esp,0xc
c002203a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c002203d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022041:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0022047:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002204e:	50                   	push   eax
c002204f:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0022052:	50                   	push   eax
c0022053:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022057:	50                   	push   eax
c0022058:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002205c:	50                   	push   eax
c002205d:	51                   	push   ecx
c002205e:	e8 3e fe ff ff       	call   c0021ea1 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022063:	83 c4 20             	add    esp,0x20
c0022066:	ba 01 00 00 00       	mov    edx,0x1
c002206b:	84 c0                	test   al,al
c002206d:	74 31                	je     c00220a0 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002206f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022073:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002207a:	89 03                	mov    DWORD PTR [ebx],eax
c002207c:	ba 00 00 00 00       	mov    edx,0x0
c0022081:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022085:	85 c0                	test   eax,eax
c0022087:	0f 95 06             	setne  BYTE PTR [esi]
c002208a:	74 14                	je     c00220a0 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002208c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0022092:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022099:	eb 05                	jmp    c00220a0 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002209b:	ba 04 00 00 00       	mov    edx,0x4
c00220a0:	83 c4 14             	add    esp,0x14
c00220a3:	89 d0                	mov    eax,edx
c00220a5:	5b                   	pop    ebx
c00220a6:	5e                   	pop    esi
c00220a7:	c3                   	ret    

c00220a8 <ISO9660::openDir(char const*, void**)>:
c00220a8:	57                   	push   edi
c00220a9:	56                   	push   esi
c00220aa:	53                   	push   ebx
c00220ab:	83 ec 10             	sub    esp,0x10
c00220ae:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00220b2:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00220b6:	85 ff                	test   edi,edi
c00220b8:	0f 84 95 00 00 00    	je     c0022153 <ISO9660::openDir(char const*, void**)+0xab>
c00220be:	85 f6                	test   esi,esi
c00220c0:	0f 84 8d 00 00 00    	je     c0022153 <ISO9660::openDir(char const*, void**)+0xab>
c00220c6:	83 ec 0c             	sub    esp,0xc
c00220c9:	6a 1c                	push   0x1c
c00220cb:	e8 70 d7 fe ff       	call   c000f840 <malloc>
c00220d0:	89 07                	mov    DWORD PTR [edi],eax
c00220d2:	89 c3                	mov    ebx,eax
c00220d4:	59                   	pop    ecx
c00220d5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00220d9:	50                   	push   eax
c00220da:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00220dd:	50                   	push   eax
c00220de:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00220e2:	50                   	push   eax
c00220e3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00220e7:	50                   	push   eax
c00220e8:	56                   	push   esi
c00220e9:	e8 b3 fd ff ff       	call   c0021ea1 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00220ee:	83 c4 20             	add    esp,0x20
c00220f1:	84 c0                	test   al,al
c00220f3:	74 07                	je     c00220fc <ISO9660::openDir(char const*, void**)+0x54>
c00220f5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00220fa:	75 21                	jne    c002211d <ISO9660::openDir(char const*, void**)+0x75>
c00220fc:	0f b6 c0             	movzx  eax,al
c00220ff:	52                   	push   edx
c0022100:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022104:	50                   	push   eax
c0022105:	68 a1 c8 02 c0       	push   0xc002c8a1
c002210a:	e8 83 0d ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c002210f:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0022113:	83 c4 10             	add    esp,0x10
c0022116:	b8 01 00 00 00       	mov    eax,0x1
c002211b:	eb 3b                	jmp    c0022158 <ISO9660::openDir(char const*, void**)+0xb0>
c002211d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022121:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022125:	89 03                	mov    DWORD PTR [ebx],eax
c0022127:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c002212e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022132:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0022139:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022140:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022143:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002214a:	8a 06                	mov    al,BYTE PTR [esi]
c002214c:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c002214f:	31 c0                	xor    eax,eax
c0022151:	eb 05                	jmp    c0022158 <ISO9660::openDir(char const*, void**)+0xb0>
c0022153:	b8 04 00 00 00       	mov    eax,0x4
c0022158:	83 c4 10             	add    esp,0x10
c002215b:	5b                   	pop    ebx
c002215c:	5e                   	pop    esi
c002215d:	5f                   	pop    edi
c002215e:	c3                   	ret    
c002215f:	90                   	nop

c0022160 <ISO9660::ISO9660()>:
c0022160:	83 ec 0c             	sub    esp,0xc
c0022163:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022167:	83 ec 0c             	sub    esp,0xc
c002216a:	50                   	push   eax
c002216b:	e8 26 10 ff ff       	call   c0013196 <Filesystem::Filesystem()>
c0022170:	83 c4 10             	add    esp,0x10
c0022173:	ba c4 c8 02 c0       	mov    edx,0xc002c8c4
c0022178:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002217c:	89 10                	mov    DWORD PTR [eax],edx
c002217e:	90                   	nop
c002217f:	83 c4 0c             	add    esp,0xc
c0022182:	c3                   	ret    
c0022183:	90                   	nop

c0022184 <SoundChannel::~SoundChannel()>:
c0022184:	83 ec 0c             	sub    esp,0xc
c0022187:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002218b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c002218e:	83 ec 0c             	sub    esp,0xc
c0022191:	50                   	push   eax
c0022192:	e8 b9 d6 fe ff       	call   c000f850 <free>
c0022197:	83 c4 10             	add    esp,0x10
c002219a:	90                   	nop
c002219b:	83 c4 0c             	add    esp,0xc
c002219e:	c3                   	ret    
c002219f:	90                   	nop

c00221a0 <SoundChannel::setSpeed(float)>:
c00221a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221a4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00221a8:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00221ab:	c3                   	ret    

c00221ac <SoundChannel::getSpeed()>:
c00221ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221b0:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00221b3:	c3                   	ret    

c00221b4 <SoundChannel::setVolume(int)>:
c00221b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00221b8:	83 f8 64             	cmp    eax,0x64
c00221bb:	7e 05                	jle    c00221c2 <SoundChannel::setVolume(int)+0xe>
c00221bd:	b8 64 00 00 00       	mov    eax,0x64
c00221c2:	85 c0                	test   eax,eax
c00221c4:	79 02                	jns    c00221c8 <SoundChannel::setVolume(int)+0x14>
c00221c6:	31 c0                	xor    eax,eax
c00221c8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00221cc:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c00221cf:	c3                   	ret    

c00221d0 <SoundChannel::getVolume()>:
c00221d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221d4:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00221d7:	c3                   	ret    

c00221d8 <SoundChannel::pause()>:
c00221d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221dc:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c00221e0:	c3                   	ret    
c00221e1:	90                   	nop

c00221e2 <SoundChannel::SoundChannel(int, int, int, int)>:
c00221e2:	83 ec 1c             	sub    esp,0x1c
c00221e5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00221e9:	e8 ea ff ff ff       	call   c00221d8 <SoundChannel::pause()>
c00221ee:	83 c4 04             	add    esp,0x4
c00221f1:	6a 50                	push   0x50
c00221f3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00221f7:	e8 b8 ff ff ff       	call   c00221b4 <SoundChannel::setVolume(int)>
c00221fc:	83 c4 08             	add    esp,0x8
c00221ff:	a1 3c c9 02 c0       	mov    eax,ds:0xc002c93c
c0022204:	50                   	push   eax
c0022205:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022209:	e8 92 ff ff ff       	call   c00221a0 <SoundChannel::setSpeed(float)>
c002220e:	83 c4 08             	add    esp,0x8
c0022211:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022215:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0022219:	89 10                	mov    DWORD PTR [eax],edx
c002221b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002221f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022223:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022226:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002222a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002222e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022231:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0022236:	75 23                	jne    c002225b <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c0022238:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002223c:	8b 10                	mov    edx,DWORD PTR [eax]
c002223e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022242:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022245:	0f af c2             	imul   eax,edx
c0022248:	85 c0                	test   eax,eax
c002224a:	79 03                	jns    c002224f <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c002224c:	83 c0 03             	add    eax,0x3
c002224f:	c1 f8 02             	sar    eax,0x2
c0022252:	05 a0 0f 00 00       	add    eax,0xfa0
c0022257:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002225b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002225f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0022263:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0022266:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002226a:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0022271:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022275:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c002227c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022280:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022283:	c1 e0 02             	shl    eax,0x2
c0022286:	83 ec 0c             	sub    esp,0xc
c0022289:	50                   	push   eax
c002228a:	e8 b1 d5 fe ff       	call   c000f840 <malloc>
c002228f:	83 c4 10             	add    esp,0x10
c0022292:	89 c2                	mov    edx,eax
c0022294:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022298:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c002229b:	83 ec 04             	sub    esp,0x4
c002229e:	8d 44 24 08          	lea    eax,[esp+0x8]
c00222a2:	50                   	push   eax
c00222a3:	6a 01                	push   0x1
c00222a5:	6a 04                	push   0x4
c00222a7:	e8 f3 68 fe ff       	call   c0008b9f <src_new>
c00222ac:	83 c4 10             	add    esp,0x10
c00222af:	89 c2                	mov    edx,eax
c00222b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222b5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00222b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222bc:	85 c0                	test   eax,eax
c00222be:	74 10                	je     c00222d0 <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c00222c0:	83 ec 0c             	sub    esp,0xc
c00222c3:	68 20 c9 02 c0       	push   0xc002c920
c00222c8:	e8 a0 82 ff ff       	call   c001a56d <Krnl::panic(char const*)>
c00222cd:	83 c4 10             	add    esp,0x10
c00222d0:	a0 e0 26 03 c0       	mov    al,ds:0xc00326e0
c00222d5:	83 f0 01             	xor    eax,0x1
c00222d8:	84 c0                	test   al,al
c00222da:	74 57                	je     c0022333 <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c00222dc:	a1 40 c9 02 c0       	mov    eax,ds:0xc002c940
c00222e1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00222e5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00222ed:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00222f5:	7f 35                	jg     c002232c <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c00222f7:	83 ec 0c             	sub    esp,0xc
c00222fa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00222fe:	e8 94 4f 00 00       	call   c0027297 <__floatsisf>
c0022303:	83 c4 10             	add    esp,0x10
c0022306:	8b 15 40 c9 02 c0    	mov    edx,DWORD PTR ds:0xc002c940
c002230c:	83 ec 08             	sub    esp,0x8
c002230f:	52                   	push   edx
c0022310:	50                   	push   eax
c0022311:	e8 93 4b 00 00       	call   c0026ea9 <__mulsf3>
c0022316:	83 c4 10             	add    esp,0x10
c0022319:	89 c2                	mov    edx,eax
c002231b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002231f:	89 14 85 e0 22 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdd20],edx
c0022326:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002232a:	eb c1                	jmp    c00222ed <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c002232c:	c6 05 e0 26 03 c0 01 	mov    BYTE PTR ds:0xc00326e0,0x1
c0022333:	90                   	nop
c0022334:	83 c4 1c             	add    esp,0x1c
c0022337:	c3                   	ret    

c0022338 <SoundChannel::play()>:
c0022338:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002233c:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c0022340:	c3                   	ret    
c0022341:	90                   	nop

c0022342 <SoundChannel::paused()>:
c0022342:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022346:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0022349:	c3                   	ret    

c002234a <SoundChannel::getSampleRate()>:
c002234a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002234e:	8b 00                	mov    eax,DWORD PTR [eax]
c0022350:	c3                   	ret    
c0022351:	90                   	nop

c0022352 <SoundChannel::getBits()>:
c0022352:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022356:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022359:	c3                   	ret    

c002235a <SoundChannel::getBufferUsed()>:
c002235a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002235e:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0022361:	c3                   	ret    

c0022362 <SoundChannel::getBufferSize()>:
c0022362:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022366:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022369:	c3                   	ret    

c002236a <SoundChannel::unbuffer(float*, int, int)>:
c002236a:	56                   	push   esi
c002236b:	53                   	push   ebx
c002236c:	83 ec 40             	sub    esp,0x40
c002236f:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0022373:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0022376:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002237a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c002237d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0022381:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0022385:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0022389:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002238d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022391:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022395:	e8 fd 4e 00 00       	call   c0027297 <__floatsisf>
c002239a:	5a                   	pop    edx
c002239b:	89 c6                	mov    esi,eax
c002239d:	ff 33                	push   DWORD PTR [ebx]
c002239f:	e8 f3 4e 00 00       	call   c0027297 <__floatsisf>
c00223a4:	59                   	pop    ecx
c00223a5:	5a                   	pop    edx
c00223a6:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00223a9:	50                   	push   eax
c00223aa:	e8 fa 4a 00 00       	call   c0026ea9 <__mulsf3>
c00223af:	59                   	pop    ecx
c00223b0:	5a                   	pop    edx
c00223b1:	50                   	push   eax
c00223b2:	56                   	push   esi
c00223b3:	e8 b4 4c 00 00       	call   c002706c <__divsf3>
c00223b8:	89 04 24             	mov    DWORD PTR [esp],eax
c00223bb:	e8 a7 61 00 00       	call   c0028567 <__extendsfdf2>
c00223c0:	59                   	pop    ecx
c00223c1:	5e                   	pop    esi
c00223c2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00223c6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00223ca:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00223d2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00223d6:	50                   	push   eax
c00223d7:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c00223da:	e8 b5 63 fe ff       	call   c0008794 <src_process>
c00223df:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00223e3:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00223e6:	83 c4 0c             	add    esp,0xc
c00223e9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00223ec:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c00223ef:	29 d0                	sub    eax,edx
c00223f1:	c1 e0 02             	shl    eax,0x2
c00223f4:	50                   	push   eax
c00223f5:	8d 04 91             	lea    eax,[ecx+edx*4]
c00223f8:	50                   	push   eax
c00223f9:	51                   	push   ecx
c00223fa:	e8 7d e2 fd ff       	call   c000067c <memmove>
c00223ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022403:	83 c4 44             	add    esp,0x44
c0022406:	5b                   	pop    ebx
c0022407:	5e                   	pop    esi
c0022408:	c3                   	ret    
c0022409:	90                   	nop

c002240a <SoundChannel::buffer8(unsigned char*, int)>:
c002240a:	55                   	push   ebp
c002240b:	57                   	push   edi
c002240c:	56                   	push   esi
c002240d:	53                   	push   ebx
c002240e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022412:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0022416:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022419:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002241d:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022420:	74 7a                	je     c002249c <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022422:	85 ff                	test   edi,edi
c0022424:	7e 76                	jle    c002249c <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022426:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c002242a:	8d 70 01             	lea    esi,[eax+0x1]
c002242d:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022430:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022433:	8b 1c 9d e0 22 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdd20]
c002243a:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c002243d:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022440:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022443:	74 5e                	je     c00224a3 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0022445:	83 ff 01             	cmp    edi,0x1
c0022448:	74 4b                	je     c0022495 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c002244a:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c002244e:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022451:	8d 70 01             	lea    esi,[eax+0x1]
c0022454:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022457:	8b 1c 9d e0 22 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdd20]
c002245e:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022461:	b8 02 00 00 00       	mov    eax,0x2
c0022466:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022469:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c002246c:	75 23                	jne    c0022491 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c002246e:	eb 27                	jmp    c0022497 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022470:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0022475:	8d 71 01             	lea    esi,[ecx+0x1]
c0022478:	40                   	inc    eax
c0022479:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c002247c:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c002247f:	8b 1c 9d e0 22 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdd20]
c0022486:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0022489:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c002248c:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c002248f:	74 06                	je     c0022497 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022491:	39 c7                	cmp    edi,eax
c0022493:	75 db                	jne    c0022470 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0022495:	89 f8                	mov    eax,edi
c0022497:	5b                   	pop    ebx
c0022498:	5e                   	pop    esi
c0022499:	5f                   	pop    edi
c002249a:	5d                   	pop    ebp
c002249b:	c3                   	ret    
c002249c:	5b                   	pop    ebx
c002249d:	31 c0                	xor    eax,eax
c002249f:	5e                   	pop    esi
c00224a0:	5f                   	pop    edi
c00224a1:	5d                   	pop    ebp
c00224a2:	c3                   	ret    
c00224a3:	b8 01 00 00 00       	mov    eax,0x1
c00224a8:	eb ed                	jmp    c0022497 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c00224aa <SoundDevice::SoundDevice(char const*)>:
c00224aa:	83 ec 1c             	sub    esp,0x1c
c00224ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00224b1:	83 ec 08             	sub    esp,0x8
c00224b4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00224b8:	50                   	push   eax
c00224b9:	e8 ea 1f ff ff       	call   c00144a8 <Device::Device(char const*)>
c00224be:	83 c4 10             	add    esp,0x10
c00224c1:	ba 4c c9 02 c0       	mov    edx,0xc002c94c
c00224c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00224ca:	89 10                	mov    DWORD PTR [eax],edx
c00224cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00224d0:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c00224da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00224de:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00224e8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00224f0:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00224f5:	7f 19                	jg     c0022510 <SoundDevice::SoundDevice(char const*)+0x66>
c00224f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00224fb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00224ff:	83 c2 54             	add    edx,0x54
c0022502:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c002250a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002250e:	eb e0                	jmp    c00224f0 <SoundDevice::SoundDevice(char const*)+0x46>
c0022510:	90                   	nop
c0022511:	83 c4 1c             	add    esp,0x1c
c0022514:	c3                   	ret    
c0022515:	90                   	nop

c0022516 <SoundDevice::~SoundDevice()>:
c0022516:	53                   	push   ebx
c0022517:	83 ec 18             	sub    esp,0x18
c002251a:	ba 4c c9 02 c0       	mov    edx,0xc002c94c
c002251f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022523:	89 10                	mov    DWORD PTR [eax],edx
c0022525:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002252d:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022532:	7f 46                	jg     c002257a <SoundDevice::~SoundDevice()+0x64>
c0022534:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022538:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002253c:	83 c2 54             	add    edx,0x54
c002253f:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0022543:	85 c0                	test   eax,eax
c0022545:	74 2d                	je     c0022574 <SoundDevice::~SoundDevice()+0x5e>
c0022547:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002254b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002254f:	83 c2 54             	add    edx,0x54
c0022552:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0022556:	85 db                	test   ebx,ebx
c0022558:	74 1a                	je     c0022574 <SoundDevice::~SoundDevice()+0x5e>
c002255a:	83 ec 0c             	sub    esp,0xc
c002255d:	53                   	push   ebx
c002255e:	e8 21 fc ff ff       	call   c0022184 <SoundChannel::~SoundChannel()>
c0022563:	83 c4 10             	add    esp,0x10
c0022566:	83 ec 08             	sub    esp,0x8
c0022569:	6a 2c                	push   0x2c
c002256b:	53                   	push   ebx
c002256c:	e8 41 08 ff ff       	call   c0012db2 <operator delete(void*, unsigned long)>
c0022571:	83 c4 10             	add    esp,0x10
c0022574:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022578:	eb b3                	jmp    c002252d <SoundDevice::~SoundDevice()+0x17>
c002257a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002257e:	83 ec 0c             	sub    esp,0xc
c0022581:	50                   	push   eax
c0022582:	e8 03 1c ff ff       	call   c001418a <Device::~Device()>
c0022587:	83 c4 10             	add    esp,0x10
c002258a:	90                   	nop
c002258b:	83 c4 18             	add    esp,0x18
c002258e:	5b                   	pop    ebx
c002258f:	c3                   	ret    

c0022590 <SoundDevice::~SoundDevice()>:
c0022590:	83 ec 0c             	sub    esp,0xc
c0022593:	83 ec 0c             	sub    esp,0xc
c0022596:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002259a:	e8 77 ff ff ff       	call   c0022516 <SoundDevice::~SoundDevice()>
c002259f:	83 c4 10             	add    esp,0x10
c00225a2:	83 ec 08             	sub    esp,0x8
c00225a5:	68 e4 01 00 00       	push   0x1e4
c00225aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00225ae:	e8 ff 07 ff ff       	call   c0012db2 <operator delete(void*, unsigned long)>
c00225b3:	83 c4 10             	add    esp,0x10
c00225b6:	83 c4 0c             	add    esp,0xc
c00225b9:	c3                   	ret    

c00225ba <SoundDevice::getFreeChannelNum()>:
c00225ba:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00225be:	31 c0                	xor    eax,eax
c00225c0:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c00225c8:	74 09                	je     c00225d3 <SoundDevice::getFreeChannelNum()+0x19>
c00225ca:	40                   	inc    eax
c00225cb:	83 f8 20             	cmp    eax,0x20
c00225ce:	75 f0                	jne    c00225c0 <SoundDevice::getFreeChannelNum()+0x6>
c00225d0:	83 c8 ff             	or     eax,0xffffffff
c00225d3:	c3                   	ret    

c00225d4 <SoundDevice::addChannel(SoundChannel*)>:
c00225d4:	56                   	push   esi
c00225d5:	53                   	push   ebx
c00225d6:	51                   	push   ecx
c00225d7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00225db:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00225df:	53                   	push   ebx
c00225e0:	e8 d5 ff ff ff       	call   c00225ba <SoundDevice::getFreeChannelNum()>
c00225e5:	5a                   	pop    edx
c00225e6:	83 f8 ff             	cmp    eax,0xffffffff
c00225e9:	74 51                	je     c002263c <SoundDevice::addChannel(SoundChannel*)+0x68>
c00225eb:	85 f6                	test   esi,esi
c00225ed:	74 4d                	je     c002263c <SoundDevice::addChannel(SoundChannel*)+0x68>
c00225ef:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c00225f6:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c00225fd:	75 30                	jne    c002262f <SoundDevice::addChannel(SoundChannel*)+0x5b>
c00225ff:	83 ec 0c             	sub    esp,0xc
c0022602:	56                   	push   esi
c0022603:	e8 42 fd ff ff       	call   c002234a <SoundChannel::getSampleRate()>
c0022608:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c002260e:	89 34 24             	mov    DWORD PTR [esp],esi
c0022611:	e8 3c fd ff ff       	call   c0022352 <SoundChannel::getBits()>
c0022616:	83 c4 0c             	add    esp,0xc
c0022619:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c002261f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0022621:	50                   	push   eax
c0022622:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0022628:	53                   	push   ebx
c0022629:	ff 52 28             	call   DWORD PTR [edx+0x28]
c002262c:	83 c4 10             	add    esp,0x10
c002262f:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0022635:	b8 01 00 00 00       	mov    eax,0x1
c002263a:	eb 03                	jmp    c002263f <SoundDevice::addChannel(SoundChannel*)+0x6b>
c002263c:	83 c8 ff             	or     eax,0xffffffff
c002263f:	5a                   	pop    edx
c0022640:	5b                   	pop    ebx
c0022641:	5e                   	pop    esi
c0022642:	c3                   	ret    
c0022643:	90                   	nop

c0022644 <SoundDevice::removeChannel(int)>:
c0022644:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022648:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002264c:	83 fa 1f             	cmp    edx,0x1f
c002264f:	77 23                	ja     c0022674 <SoundDevice::removeChannel(int)+0x30>
c0022651:	8d 14 90             	lea    edx,[eax+edx*4]
c0022654:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c002265b:	74 17                	je     c0022674 <SoundDevice::removeChannel(int)+0x30>
c002265d:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0022667:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c002266d:	75 05                	jne    c0022674 <SoundDevice::removeChannel(int)+0x30>
c002266f:	8b 00                	mov    eax,DWORD PTR [eax]
c0022671:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c0022674:	c3                   	ret    
c0022675:	90                   	nop

c0022676 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c0022676:	57                   	push   edi
c0022677:	56                   	push   esi
c0022678:	53                   	push   ebx
c0022679:	31 db                	xor    ebx,ebx
c002267b:	83 ec 10             	sub    esp,0x10
c002267e:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0022682:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0022686:	0f 8d cb 00 00 00    	jge    c0022757 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c002268c:	83 ec 0c             	sub    esp,0xc
c002268f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022693:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0022696:	e8 cc 5e 00 00       	call   c0028567 <__extendsfdf2>
c002269b:	83 c4 10             	add    esp,0x10
c002269e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00226a2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00226a6:	68 00 00 f0 3f       	push   0x3ff00000
c00226ab:	6a 00                	push   0x0
c00226ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00226b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00226b5:	e8 39 4e 00 00       	call   c00274f3 <__adddf3>
c00226ba:	83 c4 10             	add    esp,0x10
c00226bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00226c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00226c5:	68 00 00 e0 3f       	push   0x3fe00000
c00226ca:	6a 00                	push   0x0
c00226cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00226d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00226d4:	e8 97 54 00 00       	call   c0027b70 <__muldf3>
c00226d9:	83 c4 10             	add    esp,0x10
c00226dc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00226e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00226e4:	68 00 00 60 40       	push   0x40600000
c00226e9:	6a 00                	push   0x0
c00226eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00226ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00226f3:	e8 78 54 00 00       	call   c0027b70 <__muldf3>
c00226f8:	59                   	pop    ecx
c00226f9:	5f                   	pop    edi
c00226fa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00226fe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022702:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022706:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002270a:	e8 34 5d 00 00       	call   c0028443 <__truncdfsf2>
c002270f:	5a                   	pop    edx
c0022710:	89 c7                	mov    edi,eax
c0022712:	59                   	pop    ecx
c0022713:	68 00 00 fe 42       	push   0x42fe0000
c0022718:	50                   	push   eax
c0022719:	e8 cf 4d 00 00       	call   c00274ed <__gesf2>
c002271e:	83 c4 10             	add    esp,0x10
c0022721:	85 c0                	test   eax,eax
c0022723:	78 06                	js     c002272b <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0022725:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0022729:	eb 26                	jmp    c0022751 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c002272b:	50                   	push   eax
c002272c:	50                   	push   eax
c002272d:	6a 00                	push   0x0
c002272f:	57                   	push   edi
c0022730:	e8 bc 4d 00 00       	call   c00274f1 <__lesf2>
c0022735:	83 c4 10             	add    esp,0x10
c0022738:	85 c0                	test   eax,eax
c002273a:	7f 06                	jg     c0022742 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c002273c:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0022740:	eb 0f                	jmp    c0022751 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022742:	83 ec 0c             	sub    esp,0xc
c0022745:	57                   	push   edi
c0022746:	e8 b1 5e 00 00       	call   c00285fc <lrintf>
c002274b:	83 c4 10             	add    esp,0x10
c002274e:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0022751:	43                   	inc    ebx
c0022752:	e9 2b ff ff ff       	jmp    c0022682 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c0022757:	83 c4 10             	add    esp,0x10
c002275a:	5b                   	pop    ebx
c002275b:	5e                   	pop    esi
c002275c:	5f                   	pop    edi
c002275d:	c3                   	ret    

c002275e <SoundDevice::getAudio(int, float*, float*)>:
c002275e:	55                   	push   ebp
c002275f:	57                   	push   edi
c0022760:	56                   	push   esi
c0022761:	53                   	push   ebx
c0022762:	31 db                	xor    ebx,ebx
c0022764:	83 ec 20             	sub    esp,0x20
c0022767:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002276b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002276f:	c1 e0 02             	shl    eax,0x2
c0022772:	50                   	push   eax
c0022773:	6a 00                	push   0x0
c0022775:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0022779:	e8 fa df fd ff       	call   c0000778 <memset>
c002277e:	83 c4 10             	add    esp,0x10
c0022781:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0022785:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c002278c:	85 c0                	test   eax,eax
c002278e:	0f 84 d7 00 00 00    	je     c002286b <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022794:	83 ec 0c             	sub    esp,0xc
c0022797:	50                   	push   eax
c0022798:	e8 a5 fb ff ff       	call   c0022342 <SoundChannel::paused()>
c002279d:	83 c4 10             	add    esp,0x10
c00227a0:	84 c0                	test   al,al
c00227a2:	0f 85 c3 00 00 00    	jne    c002286b <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00227a8:	83 ec 0c             	sub    esp,0xc
c00227ab:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00227b2:	e8 19 fa ff ff       	call   c00221d0 <SoundChannel::getVolume()>
c00227b7:	83 c4 10             	add    esp,0x10
c00227ba:	85 c0                	test   eax,eax
c00227bc:	0f 84 a9 00 00 00    	je     c002286b <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00227c2:	83 ec 0c             	sub    esp,0xc
c00227c5:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00227cc:	e8 ff f9 ff ff       	call   c00221d0 <SoundChannel::getVolume()>
c00227d1:	83 ec 0c             	sub    esp,0xc
c00227d4:	50                   	push   eax
c00227d5:	e8 bd 4a 00 00       	call   c0027297 <__floatsisf>
c00227da:	59                   	pop    ecx
c00227db:	5d                   	pop    ebp
c00227dc:	31 ed                	xor    ebp,ebp
c00227de:	68 00 00 c8 42       	push   0x42c80000
c00227e3:	50                   	push   eax
c00227e4:	e8 83 48 00 00       	call   c002706c <__divsf3>
c00227e9:	83 c4 10             	add    esp,0x10
c00227ec:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00227f0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00227f4:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c00227fa:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00227fe:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022805:	e8 60 fb ff ff       	call   c002236a <SoundChannel::unbuffer(float*, int, int)>
c002280a:	83 c4 20             	add    esp,0x20
c002280d:	89 c1                	mov    ecx,eax
c002280f:	39 cd                	cmp    ebp,ecx
c0022811:	7d 52                	jge    c0022865 <SoundDevice::getAudio(int, float*, float*)+0x107>
c0022813:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0022817:	50                   	push   eax
c0022818:	50                   	push   eax
c0022819:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c002281d:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0022820:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022824:	e8 80 46 00 00       	call   c0026ea9 <__mulsf3>
c0022829:	5a                   	pop    edx
c002282a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002282e:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c0022834:	e8 5e 4a 00 00       	call   c0027297 <__floatsisf>
c0022839:	59                   	pop    ecx
c002283a:	5a                   	pop    edx
c002283b:	50                   	push   eax
c002283c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022840:	e8 27 48 00 00       	call   c002706c <__divsf3>
c0022845:	59                   	pop    ecx
c0022846:	5a                   	pop    edx
c0022847:	50                   	push   eax
c0022848:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002284c:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c002284f:	e8 32 43 00 00       	call   c0026b86 <__addsf3>
c0022854:	83 c4 10             	add    esp,0x10
c0022857:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002285b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002285f:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c0022862:	45                   	inc    ebp
c0022863:	eb aa                	jmp    c002280f <SoundDevice::getAudio(int, float*, float*)+0xb1>
c0022865:	39 cf                	cmp    edi,ecx
c0022867:	7e 02                	jle    c002286b <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022869:	89 cf                	mov    edi,ecx
c002286b:	43                   	inc    ebx
c002286c:	83 fb 20             	cmp    ebx,0x20
c002286f:	0f 85 10 ff ff ff    	jne    c0022785 <SoundDevice::getAudio(int, float*, float*)+0x27>
c0022875:	83 c4 1c             	add    esp,0x1c
c0022878:	89 f8                	mov    eax,edi
c002287a:	5b                   	pop    ebx
c002287b:	5e                   	pop    esi
c002287c:	5f                   	pop    edi
c002287d:	5d                   	pop    ebp
c002287e:	c3                   	ret    
c002287f:	90                   	nop

c0022880 <PCI::open(int, int, void*)>:
c0022880:	83 ec 18             	sub    esp,0x18
c0022883:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022887:	8b 10                	mov    edx,DWORD PTR [eax]
c0022889:	50                   	push   eax
c002288a:	ff 52 18             	call   DWORD PTR [edx+0x18]
c002288d:	31 c0                	xor    eax,eax
c002288f:	83 c4 1c             	add    esp,0x1c
c0022892:	c3                   	ret    
c0022893:	90                   	nop

c0022894 <PCI::close(int, int, void*)>:
c0022894:	31 c0                	xor    eax,eax
c0022896:	c3                   	ret    
c0022897:	90                   	nop

c0022898 <PCI::PCI()>:
c0022898:	83 ec 0c             	sub    esp,0xc
c002289b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002289f:	83 ec 08             	sub    esp,0x8
c00228a2:	68 7c c9 02 c0       	push   0xc002c97c
c00228a7:	50                   	push   eax
c00228a8:	e8 7f 12 ff ff       	call   c0013b2c <Bus::Bus(char const*)>
c00228ad:	83 c4 10             	add    esp,0x10
c00228b0:	ba e8 c9 02 c0       	mov    edx,0xc002c9e8
c00228b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228b9:	89 10                	mov    DWORD PTR [eax],edx
c00228bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228bf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00228c5:	0f b6 d0             	movzx  edx,al
c00228c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228cc:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c00228d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228d7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00228dd:	0f b6 d0             	movzx  edx,al
c00228e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228e4:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c00228e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228ed:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00228f3:	8d 50 01             	lea    edx,[eax+0x1]
c00228f6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00228fa:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022900:	0f b6 d0             	movzx  edx,al
c0022903:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022907:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002290b:	83 c9 c0             	or     ecx,0xffffffc0
c002290e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022912:	90                   	nop
c0022913:	83 c4 0c             	add    esp,0xc
c0022916:	c3                   	ret    
c0022917:	90                   	nop

c0022918 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022918:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002291c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022921:	89 ca                	mov    edx,ecx
c0022923:	c1 e0 10             	shl    eax,0x10
c0022926:	81 e2 fc 00 00 00    	and    edx,0xfc
c002292c:	09 d0                	or     eax,edx
c002292e:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0022933:	c1 e2 08             	shl    edx,0x8
c0022936:	09 d0                	or     eax,edx
c0022938:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c002293d:	c1 e2 0b             	shl    edx,0xb
c0022940:	09 d0                	or     eax,edx
c0022942:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022947:	0d 00 00 00 80       	or     eax,0x80000000
c002294c:	ef                   	out    dx,eax
c002294d:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022952:	ed                   	in     eax,dx
c0022953:	83 e1 02             	and    ecx,0x2
c0022956:	0f b6 c9             	movzx  ecx,cl
c0022959:	c1 e1 03             	shl    ecx,0x3
c002295c:	d3 e8                	shr    eax,cl
c002295e:	c3                   	ret    
c002295f:	90                   	nop

c0022960 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0022960:	6a 00                	push   0x0
c0022962:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022967:	50                   	push   eax
c0022968:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002296d:	50                   	push   eax
c002296e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022973:	50                   	push   eax
c0022974:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022978:	e8 9b ff ff ff       	call   c0022918 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002297d:	83 c4 14             	add    esp,0x14
c0022980:	c3                   	ret    
c0022981:	90                   	nop

c0022982 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0022982:	6a 0e                	push   0xe
c0022984:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022989:	50                   	push   eax
c002298a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002298f:	50                   	push   eax
c0022990:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022995:	50                   	push   eax
c0022996:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002299a:	e8 79 ff ff ff       	call   c0022918 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002299f:	83 c4 14             	add    esp,0x14
c00229a2:	0f b6 c0             	movzx  eax,al
c00229a5:	c3                   	ret    

c00229a6 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c00229a6:	55                   	push   ebp
c00229a7:	57                   	push   edi
c00229a8:	56                   	push   esi
c00229a9:	53                   	push   ebx
c00229aa:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c00229af:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c00229b4:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c00229b9:	6a 0a                	push   0xa
c00229bb:	56                   	push   esi
c00229bc:	55                   	push   ebp
c00229bd:	57                   	push   edi
c00229be:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00229c2:	e8 51 ff ff ff       	call   c0022918 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00229c7:	6a 0a                	push   0xa
c00229c9:	89 c3                	mov    ebx,eax
c00229cb:	56                   	push   esi
c00229cc:	0f b6 db             	movzx  ebx,bl
c00229cf:	55                   	push   ebp
c00229d0:	57                   	push   edi
c00229d1:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00229d5:	e8 3e ff ff ff       	call   c0022918 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00229da:	83 c4 28             	add    esp,0x28
c00229dd:	25 00 ff 00 00       	and    eax,0xff00
c00229e2:	09 d8                	or     eax,ebx
c00229e4:	5b                   	pop    ebx
c00229e5:	5e                   	pop    esi
c00229e6:	5f                   	pop    edi
c00229e7:	5d                   	pop    ebp
c00229e8:	c3                   	ret    
c00229e9:	90                   	nop

c00229ea <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c00229ea:	6a 08                	push   0x8
c00229ec:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229f1:	50                   	push   eax
c00229f2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229f7:	50                   	push   eax
c00229f8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229fd:	50                   	push   eax
c00229fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a02:	e8 11 ff ff ff       	call   c0022918 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a07:	83 c4 14             	add    esp,0x14
c0022a0a:	0f b6 c4             	movzx  eax,ah
c0022a0d:	c3                   	ret    

c0022a0e <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0022a0e:	6a 08                	push   0x8
c0022a10:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a15:	50                   	push   eax
c0022a16:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a1b:	50                   	push   eax
c0022a1c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a21:	50                   	push   eax
c0022a22:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a26:	e8 ed fe ff ff       	call   c0022918 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a2b:	83 c4 14             	add    esp,0x14
c0022a2e:	c3                   	ret    
c0022a2f:	90                   	nop

c0022a30 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0022a30:	6a 3c                	push   0x3c
c0022a32:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a37:	50                   	push   eax
c0022a38:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a3d:	50                   	push   eax
c0022a3e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a43:	50                   	push   eax
c0022a44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a48:	e8 cb fe ff ff       	call   c0022918 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a4d:	83 c4 14             	add    esp,0x14
c0022a50:	c3                   	ret    
c0022a51:	90                   	nop

c0022a52 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0022a52:	6a 18                	push   0x18
c0022a54:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a59:	50                   	push   eax
c0022a5a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a5f:	50                   	push   eax
c0022a60:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a65:	50                   	push   eax
c0022a66:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a6a:	e8 a9 fe ff ff       	call   c0022918 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a6f:	83 c4 14             	add    esp,0x14
c0022a72:	0f b6 c4             	movzx  eax,ah
c0022a75:	c3                   	ret    

c0022a76 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022a76:	55                   	push   ebp
c0022a77:	57                   	push   edi
c0022a78:	56                   	push   esi
c0022a79:	53                   	push   ebx
c0022a7a:	50                   	push   eax
c0022a7b:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0022a7f:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c0022a84:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022a89:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c0022a8e:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0022a95:	8d 43 12             	lea    eax,[ebx+0x12]
c0022a98:	83 c3 10             	add    ebx,0x10
c0022a9b:	0f b6 c0             	movzx  eax,al
c0022a9e:	0f b6 db             	movzx  ebx,bl
c0022aa1:	50                   	push   eax
c0022aa2:	51                   	push   ecx
c0022aa3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0022aa7:	57                   	push   edi
c0022aa8:	55                   	push   ebp
c0022aa9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0022aad:	e8 66 fe ff ff       	call   c0022918 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022ab2:	53                   	push   ebx
c0022ab3:	89 c6                	mov    esi,eax
c0022ab5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0022ab9:	c1 e6 10             	shl    esi,0x10
c0022abc:	51                   	push   ecx
c0022abd:	57                   	push   edi
c0022abe:	55                   	push   ebp
c0022abf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022ac3:	e8 50 fe ff ff       	call   c0022918 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022ac8:	83 c4 2c             	add    esp,0x2c
c0022acb:	0f b7 c0             	movzx  eax,ax
c0022ace:	5b                   	pop    ebx
c0022acf:	09 f0                	or     eax,esi
c0022ad1:	5e                   	pop    esi
c0022ad2:	5f                   	pop    edi
c0022ad3:	5d                   	pop    ebp
c0022ad4:	c3                   	ret    
c0022ad5:	90                   	nop

c0022ad6 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0022ad6:	53                   	push   ebx
c0022ad7:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022adc:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0022ae1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022ae5:	c1 e1 10             	shl    ecx,0x10
c0022ae8:	25 fc 00 00 00       	and    eax,0xfc
c0022aed:	09 c1                	or     ecx,eax
c0022aef:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022af4:	c1 e0 08             	shl    eax,0x8
c0022af7:	09 c1                	or     ecx,eax
c0022af9:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0022afe:	c1 e0 0b             	shl    eax,0xb
c0022b01:	09 c1                	or     ecx,eax
c0022b03:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0022b09:	89 c8                	mov    eax,ecx
c0022b0b:	ef                   	out    dx,eax
c0022b0c:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022b11:	ed                   	in     eax,dx
c0022b12:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0022b17:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0022b1c:	74 0a                	je     c0022b28 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0022b1e:	0f b7 d8             	movzx  ebx,ax
c0022b21:	89 d0                	mov    eax,edx
c0022b23:	c1 e0 10             	shl    eax,0x10
c0022b26:	eb 05                	jmp    c0022b2d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0022b28:	66 31 c0             	xor    ax,ax
c0022b2b:	89 d3                	mov    ebx,edx
c0022b2d:	09 c3                	or     ebx,eax
c0022b2f:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022b34:	89 c8                	mov    eax,ecx
c0022b36:	ef                   	out    dx,eax
c0022b37:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022b3c:	89 d8                	mov    eax,ebx
c0022b3e:	ef                   	out    dx,eax
c0022b3f:	5b                   	pop    ebx
c0022b40:	c3                   	ret    
c0022b41:	90                   	nop

c0022b42 <PCI::checkBus(unsigned char)>:
c0022b42:	56                   	push   esi
c0022b43:	53                   	push   ebx
c0022b44:	31 db                	xor    ebx,ebx
c0022b46:	51                   	push   ecx
c0022b47:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022b4c:	52                   	push   edx
c0022b4d:	53                   	push   ebx
c0022b4e:	43                   	inc    ebx
c0022b4f:	56                   	push   esi
c0022b50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022b54:	e8 2b 03 00 00       	call   c0022e84 <PCI::checkDevice(unsigned char, unsigned char)>
c0022b59:	83 c4 10             	add    esp,0x10
c0022b5c:	83 fb 20             	cmp    ebx,0x20
c0022b5f:	75 eb                	jne    c0022b4c <PCI::checkBus(unsigned char)+0xa>
c0022b61:	58                   	pop    eax
c0022b62:	5b                   	pop    ebx
c0022b63:	5e                   	pop    esi
c0022b64:	c3                   	ret    
c0022b65:	90                   	nop

c0022b66 <PCI::foundDevice(PCIDeviceInfo)>:
c0022b66:	55                   	push   ebp
c0022b67:	57                   	push   edi
c0022b68:	56                   	push   esi
c0022b69:	53                   	push   ebx
c0022b6a:	83 ec 1c             	sub    esp,0x1c
c0022b6d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022b71:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0022b77:	0f 84 52 01 00 00    	je     c0022ccf <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022b7d:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0022b81:	66 81 f9 06 04       	cmp    cx,0x406
c0022b86:	75 2c                	jne    c0022bb4 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0022b88:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0022b8d:	50                   	push   eax
c0022b8e:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0022b93:	50                   	push   eax
c0022b94:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0022b99:	50                   	push   eax
c0022b9a:	56                   	push   esi
c0022b9b:	e8 b2 fe ff ff       	call   c0022a52 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0022ba0:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022ba4:	0f b6 c0             	movzx  eax,al
c0022ba7:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0022bab:	83 c4 2c             	add    esp,0x2c
c0022bae:	5b                   	pop    ebx
c0022baf:	5e                   	pop    esi
c0022bb0:	5f                   	pop    edi
c0022bb1:	5d                   	pop    ebp
c0022bb2:	eb 8e                	jmp    c0022b42 <PCI::checkBus(unsigned char)>
c0022bb4:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022bb8:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0022bbe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022bc2:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0022bc6:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0022bca:	88 d3                	mov    bl,dl
c0022bcc:	85 c0                	test   eax,eax
c0022bce:	74 33                	je     c0022c03 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0022bd0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0022bd3:	85 d2                	test   edx,edx
c0022bd5:	74 28                	je     c0022bff <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022bd7:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0022bdd:	31 ef                	xor    edi,ebp
c0022bdf:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0022be5:	75 18                	jne    c0022bff <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022be7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022beb:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0022bf1:	75 0c                	jne    c0022bff <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022bf3:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0022bf9:	0f 84 d0 00 00 00    	je     c0022ccf <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022bff:	8b 00                	mov    eax,DWORD PTR [eax]
c0022c01:	eb c9                	jmp    c0022bcc <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0022c03:	66 81 f9 01 06       	cmp    cx,0x601
c0022c08:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0022c0c:	75 19                	jne    c0022c27 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0022c0e:	83 ec 0c             	sub    esp,0xc
c0022c11:	68 64 01 00 00       	push   0x164
c0022c16:	e8 25 cc fe ff       	call   c000f840 <malloc>
c0022c1b:	89 c5                	mov    ebp,eax
c0022c1d:	89 04 24             	mov    DWORD PTR [esp],eax
c0022c20:	e8 95 0f 00 00       	call   c0023bba <SATABus::SATABus()>
c0022c25:	eb 1e                	jmp    c0022c45 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0022c27:	66 81 f9 01 01       	cmp    cx,0x101
c0022c2c:	75 60                	jne    c0022c8e <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0022c2e:	83 ec 0c             	sub    esp,0xc
c0022c31:	68 70 02 00 00       	push   0x270
c0022c36:	e8 05 cc fe ff       	call   c000f840 <malloc>
c0022c3b:	89 c5                	mov    ebp,eax
c0022c3d:	89 04 24             	mov    DWORD PTR [esp],eax
c0022c40:	e8 03 03 00 00       	call   c0022f48 <IDE::IDE()>
c0022c45:	58                   	pop    eax
c0022c46:	5a                   	pop    edx
c0022c47:	55                   	push   ebp
c0022c48:	56                   	push   esi
c0022c49:	e8 6a 16 ff ff       	call   c00142b8 <Device::addChild(Device*)>
c0022c4e:	83 ec 1c             	sub    esp,0x1c
c0022c51:	b9 09 00 00 00       	mov    ecx,0x9
c0022c56:	fc                   	cld    
c0022c57:	89 e7                	mov    edi,esp
c0022c59:	89 de                	mov    esi,ebx
c0022c5b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022c5d:	55                   	push   ebp
c0022c5e:	e8 5f 15 ff ff       	call   c00141c2 <Device::preOpenPCI(PCIDeviceInfo)>
c0022c63:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022c66:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0022c6a:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0022c72:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0022c7a:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0022c82:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022c85:	83 c4 4c             	add    esp,0x4c
c0022c88:	5b                   	pop    ebx
c0022c89:	5e                   	pop    esi
c0022c8a:	5f                   	pop    edi
c0022c8b:	5d                   	pop    ebp
c0022c8c:	ff e0                	jmp    eax
c0022c8e:	83 ec 0c             	sub    esp,0xc
c0022c91:	68 58 01 00 00       	push   0x158
c0022c96:	e8 a5 cb fe ff       	call   c000f840 <malloc>
c0022c9b:	89 c5                	mov    ebp,eax
c0022c9d:	58                   	pop    eax
c0022c9e:	5a                   	pop    edx
c0022c9f:	68 84 c9 02 c0       	push   0xc002c984
c0022ca4:	55                   	push   ebp
c0022ca5:	e8 04 19 ff ff       	call   c00145ae <DriverlessDevice::DriverlessDevice(char const*)>
c0022caa:	59                   	pop    ecx
c0022cab:	5f                   	pop    edi
c0022cac:	55                   	push   ebp
c0022cad:	56                   	push   esi
c0022cae:	e8 05 16 ff ff       	call   c00142b8 <Device::addChild(Device*)>
c0022cb3:	b9 09 00 00 00       	mov    ecx,0x9
c0022cb8:	fc                   	cld    
c0022cb9:	89 df                	mov    edi,ebx
c0022cbb:	89 de                	mov    esi,ebx
c0022cbd:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022cbf:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0022cc3:	83 c4 2c             	add    esp,0x2c
c0022cc6:	5b                   	pop    ebx
c0022cc7:	5e                   	pop    esi
c0022cc8:	5f                   	pop    edi
c0022cc9:	5d                   	pop    ebp
c0022cca:	e9 f3 14 ff ff       	jmp    c00141c2 <Device::preOpenPCI(PCIDeviceInfo)>
c0022ccf:	83 c4 1c             	add    esp,0x1c
c0022cd2:	5b                   	pop    ebx
c0022cd3:	5e                   	pop    esi
c0022cd4:	5f                   	pop    edi
c0022cd5:	5d                   	pop    ebp
c0022cd6:	c3                   	ret    
c0022cd7:	90                   	nop

c0022cd8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0022cd8:	55                   	push   ebp
c0022cd9:	57                   	push   edi
c0022cda:	56                   	push   esi
c0022cdb:	53                   	push   ebx
c0022cdc:	83 ec 5c             	sub    esp,0x5c
c0022cdf:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0022ce3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022ce7:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0022ceb:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0022cf0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022cf4:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0022cf8:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0022cfd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022d01:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0022d06:	6a 0c                	push   0xc
c0022d08:	55                   	push   ebp
c0022d09:	53                   	push   ebx
c0022d0a:	57                   	push   edi
c0022d0b:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0022d12:	e8 01 fc ff ff       	call   c0022918 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022d17:	55                   	push   ebp
c0022d18:	53                   	push   ebx
c0022d19:	57                   	push   edi
c0022d1a:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022d21:	e8 80 fc ff ff       	call   c00229a6 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0022d26:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0022d2b:	83 c4 24             	add    esp,0x24
c0022d2e:	55                   	push   ebp
c0022d2f:	53                   	push   ebx
c0022d30:	57                   	push   edi
c0022d31:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022d35:	e8 f6 fc ff ff       	call   c0022a30 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0022d3a:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0022d3e:	6a 3c                	push   0x3c
c0022d40:	55                   	push   ebp
c0022d41:	53                   	push   ebx
c0022d42:	57                   	push   edi
c0022d43:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022d4a:	e8 c9 fb ff ff       	call   c0022918 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022d4f:	0f b6 c4             	movzx  eax,ah
c0022d52:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022d56:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0022d5a:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0022d5e:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0022d63:	83 c4 24             	add    esp,0x24
c0022d66:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022d6c:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0022d73:	74 6c                	je     c0022de1 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022d75:	31 f6                	xor    esi,esi
c0022d77:	8b 15 88 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e388
c0022d7d:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022d83:	39 b2 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],esi
c0022d89:	7e 56                	jle    c0022de1 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022d8b:	8d 14 f2             	lea    edx,[edx+esi*8]
c0022d8e:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0022d95:	39 cb                	cmp    ebx,ecx
c0022d97:	75 45                	jne    c0022dde <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022d99:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0022da0:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0022da4:	75 38                	jne    c0022dde <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022da6:	83 ec 0c             	sub    esp,0xc
c0022da9:	68 9e c9 02 c0       	push   0xc002c99e
c0022dae:	e8 df 00 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0022db3:	8b 15 88 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e388
c0022db9:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022dbf:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c0022dc7:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0022dcb:	52                   	push   edx
c0022dcc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022dd0:	53                   	push   ebx
c0022dd1:	68 c3 c9 02 c0       	push   0xc002c9c3
c0022dd6:	e8 b7 00 ff ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0022ddb:	83 c4 20             	add    esp,0x20
c0022dde:	46                   	inc    esi
c0022ddf:	eb 96                	jmp    c0022d77 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0022de1:	31 d2                	xor    edx,edx
c0022de3:	83 ec 0c             	sub    esp,0xc
c0022de6:	55                   	push   ebp
c0022de7:	53                   	push   ebx
c0022de8:	57                   	push   edi
c0022de9:	52                   	push   edx
c0022dea:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0022dee:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022df5:	e8 7c fc ff ff       	call   c0022a76 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022dfa:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0022dfe:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022e02:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0022e06:	42                   	inc    edx
c0022e07:	83 c4 20             	add    esp,0x20
c0022e0a:	83 fa 06             	cmp    edx,0x6
c0022e0d:	75 d4                	jne    c0022de3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0022e0f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0022e13:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0022e17:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0022e1b:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0022e1f:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0022e23:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0022e27:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0022e2c:	86 e0                	xchg   al,ah
c0022e2e:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0022e33:	55                   	push   ebp
c0022e34:	53                   	push   ebx
c0022e35:	57                   	push   edi
c0022e36:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022e3a:	e8 ab fb ff ff       	call   c00229ea <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0022e3f:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0022e43:	55                   	push   ebp
c0022e44:	53                   	push   ebx
c0022e45:	57                   	push   edi
c0022e46:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022e4d:	e8 0e fb ff ff       	call   c0022960 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022e52:	83 ec 0c             	sub    esp,0xc
c0022e55:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0022e5a:	b9 09 00 00 00       	mov    ecx,0x9
c0022e5f:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0022e63:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0022e67:	fc                   	cld    
c0022e68:	89 e7                	mov    edi,esp
c0022e6a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022e6c:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022e73:	e8 ee fc ff ff       	call   c0022b66 <PCI::foundDevice(PCIDeviceInfo)>
c0022e78:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022e7e:	5b                   	pop    ebx
c0022e7f:	5e                   	pop    esi
c0022e80:	5f                   	pop    edi
c0022e81:	5d                   	pop    ebp
c0022e82:	c3                   	ret    
c0022e83:	90                   	nop

c0022e84 <PCI::checkDevice(unsigned char, unsigned char)>:
c0022e84:	55                   	push   ebp
c0022e85:	57                   	push   edi
c0022e86:	56                   	push   esi
c0022e87:	53                   	push   ebx
c0022e88:	83 ec 0c             	sub    esp,0xc
c0022e8b:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0022e8f:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0022e94:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022e99:	6a 00                	push   0x0
c0022e9b:	56                   	push   esi
c0022e9c:	57                   	push   edi
c0022e9d:	55                   	push   ebp
c0022e9e:	e8 bd fa ff ff       	call   c0022960 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022ea3:	6a 00                	push   0x0
c0022ea5:	56                   	push   esi
c0022ea6:	57                   	push   edi
c0022ea7:	55                   	push   ebp
c0022ea8:	e8 2b fe ff ff       	call   c0022cd8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022ead:	83 c4 20             	add    esp,0x20
c0022eb0:	6a 00                	push   0x0
c0022eb2:	56                   	push   esi
c0022eb3:	57                   	push   edi
c0022eb4:	55                   	push   ebp
c0022eb5:	e8 c8 fa ff ff       	call   c0022982 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022eba:	83 c4 10             	add    esp,0x10
c0022ebd:	84 c0                	test   al,al
c0022ebf:	79 27                	jns    c0022ee8 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0022ec1:	bb 01 00 00 00       	mov    ebx,0x1
c0022ec6:	53                   	push   ebx
c0022ec7:	56                   	push   esi
c0022ec8:	57                   	push   edi
c0022ec9:	55                   	push   ebp
c0022eca:	e8 91 fa ff ff       	call   c0022960 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022ecf:	83 c4 10             	add    esp,0x10
c0022ed2:	66 40                	inc    ax
c0022ed4:	74 0c                	je     c0022ee2 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0022ed6:	53                   	push   ebx
c0022ed7:	56                   	push   esi
c0022ed8:	57                   	push   edi
c0022ed9:	55                   	push   ebp
c0022eda:	e8 f9 fd ff ff       	call   c0022cd8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022edf:	83 c4 10             	add    esp,0x10
c0022ee2:	43                   	inc    ebx
c0022ee3:	83 fb 08             	cmp    ebx,0x8
c0022ee6:	75 de                	jne    c0022ec6 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0022ee8:	83 c4 0c             	add    esp,0xc
c0022eeb:	5b                   	pop    ebx
c0022eec:	5e                   	pop    esi
c0022eed:	5f                   	pop    edi
c0022eee:	5d                   	pop    ebp
c0022eef:	c3                   	ret    

c0022ef0 <PCI::detect()>:
c0022ef0:	56                   	push   esi
c0022ef1:	53                   	push   ebx
c0022ef2:	53                   	push   ebx
c0022ef3:	31 db                	xor    ebx,ebx
c0022ef5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022ef9:	6a 00                	push   0x0
c0022efb:	6a 00                	push   0x0
c0022efd:	6a 00                	push   0x0
c0022eff:	56                   	push   esi
c0022f00:	e8 7d fa ff ff       	call   c0022982 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022f05:	83 c4 10             	add    esp,0x10
c0022f08:	a8 80                	test   al,0x80
c0022f0a:	75 21                	jne    c0022f2d <PCI::detect()+0x3d>
c0022f0c:	51                   	push   ecx
c0022f0d:	51                   	push   ecx
c0022f0e:	6a 00                	push   0x0
c0022f10:	56                   	push   esi
c0022f11:	e8 2c fc ff ff       	call   c0022b42 <PCI::checkBus(unsigned char)>
c0022f16:	83 c4 10             	add    esp,0x10
c0022f19:	eb 24                	jmp    c0022f3f <PCI::detect()+0x4f>
c0022f1b:	52                   	push   edx
c0022f1c:	52                   	push   edx
c0022f1d:	53                   	push   ebx
c0022f1e:	43                   	inc    ebx
c0022f1f:	56                   	push   esi
c0022f20:	e8 1d fc ff ff       	call   c0022b42 <PCI::checkBus(unsigned char)>
c0022f25:	83 c4 10             	add    esp,0x10
c0022f28:	83 fb 08             	cmp    ebx,0x8
c0022f2b:	74 12                	je     c0022f3f <PCI::detect()+0x4f>
c0022f2d:	53                   	push   ebx
c0022f2e:	6a 00                	push   0x0
c0022f30:	6a 00                	push   0x0
c0022f32:	56                   	push   esi
c0022f33:	e8 28 fa ff ff       	call   c0022960 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022f38:	83 c4 10             	add    esp,0x10
c0022f3b:	66 40                	inc    ax
c0022f3d:	74 dc                	je     c0022f1b <PCI::detect()+0x2b>
c0022f3f:	58                   	pop    eax
c0022f40:	5b                   	pop    ebx
c0022f41:	5e                   	pop    esi
c0022f42:	c3                   	ret    
c0022f43:	90                   	nop

c0022f44 <IDE::close(int, int, void*)>:
c0022f44:	83 c8 ff             	or     eax,0xffffffff
c0022f47:	c3                   	ret    

c0022f48 <IDE::IDE()>:
c0022f48:	83 ec 0c             	sub    esp,0xc
c0022f4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f4f:	83 ec 08             	sub    esp,0x8
c0022f52:	68 0c ca 02 c0       	push   0xc002ca0c
c0022f57:	50                   	push   eax
c0022f58:	e8 e7 16 ff ff       	call   c0014644 <HardDiskController::HardDiskController(char const*)>
c0022f5d:	83 c4 10             	add    esp,0x10
c0022f60:	ba 4c cc 02 c0       	mov    edx,0xc002cc4c
c0022f65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f69:	89 10                	mov    DWORD PTR [eax],edx
c0022f6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f6f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0022f76:	90                   	nop
c0022f77:	83 c4 0c             	add    esp,0xc
c0022f7a:	c3                   	ret    
c0022f7b:	90                   	nop

c0022f7c <IDE::prepareInterrupt(unsigned char)>:
c0022f7c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022f81:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022f85:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0022f8d:	c3                   	ret    

c0022f8e <selectDrive(unsigned char, unsigned char)>:
c0022f8e:	c3                   	ret    
c0022f8f:	90                   	nop

c0022f90 <IDE::getBase(unsigned char)>:
c0022f90:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0022f95:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022f99:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0022fa1:	c3                   	ret    

c0022fa2 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0022fa2:	55                   	push   ebp
c0022fa3:	57                   	push   edi
c0022fa4:	56                   	push   esi
c0022fa5:	53                   	push   ebx
c0022fa6:	83 ec 1c             	sub    esp,0x1c
c0022fa9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022fad:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022fb1:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0022fb4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022fb8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022fbc:	80 f9 03             	cmp    cl,0x3
c0022fbf:	77 51                	ja     c0023012 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0022fc1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022fc5:	0f b6 f2             	movzx  esi,dl
c0022fc8:	0f b6 db             	movzx  ebx,bl
c0022fcb:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0022fce:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0022fd2:	83 ca 80             	or     edx,0xffffff80
c0022fd5:	0f b6 d2             	movzx  edx,dl
c0022fd8:	52                   	push   edx
c0022fd9:	6a 0c                	push   0xc
c0022fdb:	56                   	push   esi
c0022fdc:	57                   	push   edi
c0022fdd:	e8 c0 ff ff ff       	call   c0022fa2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022fe2:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0022fe7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022feb:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0022fef:	ee                   	out    dx,al
c0022ff0:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0022ff5:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0022ff9:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0022ffd:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023001:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023009:	83 c4 2c             	add    esp,0x2c
c002300c:	5b                   	pop    ebx
c002300d:	5e                   	pop    esi
c002300e:	5f                   	pop    edi
c002300f:	5d                   	pop    ebp
c0023010:	eb 90                	jmp    c0022fa2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023012:	80 fb 07             	cmp    bl,0x7
c0023015:	77 12                	ja     c0023029 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0023017:	0f b6 d2             	movzx  edx,dl
c002301a:	0f b6 db             	movzx  ebx,bl
c002301d:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0023025:	89 da                	mov    edx,ebx
c0023027:	eb 2f                	jmp    c0023058 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023029:	80 fb 0d             	cmp    bl,0xd
c002302c:	77 13                	ja     c0023041 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c002302e:	0f b6 d2             	movzx  edx,dl
c0023031:	0f b6 db             	movzx  ebx,bl
c0023034:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c002303b:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c002303f:	eb 17                	jmp    c0023058 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023041:	80 fb 15             	cmp    bl,0x15
c0023044:	77 13                	ja     c0023059 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0023046:	0f b6 d2             	movzx  edx,dl
c0023049:	0f b6 db             	movzx  ebx,bl
c002304c:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0023054:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0023058:	ee                   	out    dx,al
c0023059:	83 c4 1c             	add    esp,0x1c
c002305c:	5b                   	pop    ebx
c002305d:	5e                   	pop    esi
c002305e:	5f                   	pop    edi
c002305f:	5d                   	pop    ebp
c0023060:	c3                   	ret    
c0023061:	90                   	nop

c0023062 <IDE::read(unsigned char, unsigned char)>:
c0023062:	55                   	push   ebp
c0023063:	57                   	push   edi
c0023064:	56                   	push   esi
c0023065:	53                   	push   ebx
c0023066:	83 ec 1c             	sub    esp,0x1c
c0023069:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002306d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023071:	8d 43 f8             	lea    eax,[ebx-0x8]
c0023074:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0023078:	3c 03                	cmp    al,0x3
c002307a:	77 43                	ja     c00230bf <IDE::read(unsigned char, unsigned char)+0x5d>
c002307c:	0f b6 f2             	movzx  esi,dl
c002307f:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023082:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0023086:	83 c8 80             	or     eax,0xffffff80
c0023089:	0f b6 c0             	movzx  eax,al
c002308c:	50                   	push   eax
c002308d:	6a 0c                	push   0xc
c002308f:	56                   	push   esi
c0023090:	57                   	push   edi
c0023091:	e8 0c ff ff ff       	call   c0022fa2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023096:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c002309b:	0f b6 c3             	movzx  eax,bl
c002309e:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c00230a2:	ec                   	in     al,dx
c00230a3:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00230a7:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c00230ac:	52                   	push   edx
c00230ad:	6a 0c                	push   0xc
c00230af:	56                   	push   esi
c00230b0:	57                   	push   edi
c00230b1:	e8 ec fe ff ff       	call   c0022fa2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00230b6:	83 c4 20             	add    esp,0x20
c00230b9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00230bd:	eb 49                	jmp    c0023108 <IDE::read(unsigned char, unsigned char)+0xa6>
c00230bf:	80 fb 07             	cmp    bl,0x7
c00230c2:	77 12                	ja     c00230d6 <IDE::read(unsigned char, unsigned char)+0x74>
c00230c4:	0f b6 d2             	movzx  edx,dl
c00230c7:	0f b6 c3             	movzx  eax,bl
c00230ca:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c00230d2:	89 c2                	mov    edx,eax
c00230d4:	eb 31                	jmp    c0023107 <IDE::read(unsigned char, unsigned char)+0xa5>
c00230d6:	80 fb 0d             	cmp    bl,0xd
c00230d9:	77 13                	ja     c00230ee <IDE::read(unsigned char, unsigned char)+0x8c>
c00230db:	0f b6 d2             	movzx  edx,dl
c00230de:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c00230e5:	0f b6 d3             	movzx  edx,bl
c00230e8:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c00230ec:	eb 19                	jmp    c0023107 <IDE::read(unsigned char, unsigned char)+0xa5>
c00230ee:	31 c0                	xor    eax,eax
c00230f0:	80 fb 15             	cmp    bl,0x15
c00230f3:	77 13                	ja     c0023108 <IDE::read(unsigned char, unsigned char)+0xa6>
c00230f5:	0f b6 d2             	movzx  edx,dl
c00230f8:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0023100:	0f b6 d3             	movzx  edx,bl
c0023103:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0023107:	ec                   	in     al,dx
c0023108:	83 c4 1c             	add    esp,0x1c
c002310b:	5b                   	pop    ebx
c002310c:	5e                   	pop    esi
c002310d:	5f                   	pop    edi
c002310e:	5d                   	pop    ebp
c002310f:	c3                   	ret    

c0023110 <IDE::waitInterrupt(unsigned char)>:
c0023110:	55                   	push   ebp
c0023111:	57                   	push   edi
c0023112:	56                   	push   esi
c0023113:	53                   	push   ebx
c0023114:	31 db                	xor    ebx,ebx
c0023116:	83 ec 0c             	sub    esp,0xc
c0023119:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002311d:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0023122:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c002312a:	89 e8                	mov    eax,ebp
c002312c:	84 c0                	test   al,al
c002312e:	75 34                	jne    c0023164 <IDE::waitInterrupt(unsigned char)+0x54>
c0023130:	52                   	push   edx
c0023131:	6a 0c                	push   0xc
c0023133:	56                   	push   esi
c0023134:	57                   	push   edi
c0023135:	e8 28 ff ff ff       	call   c0023062 <IDE::read(unsigned char, unsigned char)>
c002313a:	83 c4 10             	add    esp,0x10
c002313d:	a8 01                	test   al,0x1
c002313f:	75 2b                	jne    c002316c <IDE::waitInterrupt(unsigned char)+0x5c>
c0023141:	f6 c3 04             	test   bl,0x4
c0023144:	75 16                	jne    c002315c <IDE::waitInterrupt(unsigned char)+0x4c>
c0023146:	83 fb 32             	cmp    ebx,0x32
c0023149:	7e 11                	jle    c002315c <IDE::waitInterrupt(unsigned char)+0x4c>
c002314b:	50                   	push   eax
c002314c:	50                   	push   eax
c002314d:	6a 00                	push   0x0
c002314f:	68 80 96 98 00       	push   0x989680
c0023154:	e8 5d b1 ff ff       	call   c001e2b6 <nanoSleep(unsigned long long)>
c0023159:	83 c4 10             	add    esp,0x10
c002315c:	83 fb 3c             	cmp    ebx,0x3c
c002315f:	74 0b                	je     c002316c <IDE::waitInterrupt(unsigned char)+0x5c>
c0023161:	43                   	inc    ebx
c0023162:	eb be                	jmp    c0023122 <IDE::waitInterrupt(unsigned char)+0x12>
c0023164:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c002316c:	83 c4 0c             	add    esp,0xc
c002316f:	89 e8                	mov    eax,ebp
c0023171:	5b                   	pop    ebx
c0023172:	5e                   	pop    esi
c0023173:	5f                   	pop    edi
c0023174:	5d                   	pop    ebp
c0023175:	c3                   	ret    

c0023176 <ideChannel0IRQHandler(regs*, void*)>:
c0023176:	83 ec 10             	sub    esp,0x10
c0023179:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002317d:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0023184:	6a 07                	push   0x7
c0023186:	6a 00                	push   0x0
c0023188:	50                   	push   eax
c0023189:	e8 d4 fe ff ff       	call   c0023062 <IDE::read(unsigned char, unsigned char)>
c002318e:	83 c4 1c             	add    esp,0x1c
c0023191:	c3                   	ret    

c0023192 <ideChannel1IRQHandler(regs*, void*)>:
c0023192:	83 ec 10             	sub    esp,0x10
c0023195:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023199:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c00231a0:	6a 07                	push   0x7
c00231a2:	6a 01                	push   0x1
c00231a4:	50                   	push   eax
c00231a5:	e8 b8 fe ff ff       	call   c0023062 <IDE::read(unsigned char, unsigned char)>
c00231aa:	83 c4 1c             	add    esp,0x1c
c00231ad:	c3                   	ret    

c00231ae <IDE::enableIRQs(unsigned char, bool)>:
c00231ae:	57                   	push   edi
c00231af:	56                   	push   esi
c00231b0:	be 04 00 00 00       	mov    esi,0x4
c00231b5:	53                   	push   ebx
c00231b6:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00231bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00231bf:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c00231c4:	0f 94 c0             	sete   al
c00231c7:	d1 e0                	shl    eax,1
c00231c9:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c00231d0:	0f b6 c0             	movzx  eax,al
c00231d3:	50                   	push   eax
c00231d4:	6a 0c                	push   0xc
c00231d6:	57                   	push   edi
c00231d7:	53                   	push   ebx
c00231d8:	e8 c5 fd ff ff       	call   c0022fa2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00231dd:	83 c4 10             	add    esp,0x10
c00231e0:	50                   	push   eax
c00231e1:	6a 0c                	push   0xc
c00231e3:	57                   	push   edi
c00231e4:	53                   	push   ebx
c00231e5:	e8 78 fe ff ff       	call   c0023062 <IDE::read(unsigned char, unsigned char)>
c00231ea:	83 c4 10             	add    esp,0x10
c00231ed:	4e                   	dec    esi
c00231ee:	75 f0                	jne    c00231e0 <IDE::enableIRQs(unsigned char, bool)+0x32>
c00231f0:	5b                   	pop    ebx
c00231f1:	5e                   	pop    esi
c00231f2:	5f                   	pop    edi
c00231f3:	c3                   	ret    

c00231f4 <IDE::open(int, int, void*)>:
c00231f4:	55                   	push   ebp
c00231f5:	57                   	push   edi
c00231f6:	56                   	push   esi
c00231f7:	53                   	push   ebx
c00231f8:	83 ec 1c             	sub    esp,0x1c
c00231fb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00231ff:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0023208:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0023211:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0023218:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c002321f:	0f 85 b0 02 00 00    	jne    c00234d5 <IDE::open(int, int, void*)+0x2e1>
c0023225:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c002322b:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c002322f:	83 e0 7f             	and    eax,0x7f
c0023232:	3c 05                	cmp    al,0x5
c0023234:	74 04                	je     c002323a <IDE::open(int, int, void*)+0x46>
c0023236:	3c 0f                	cmp    al,0xf
c0023238:	75 32                	jne    c002326c <IDE::open(int, int, void*)+0x78>
c002323a:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0023240:	83 e0 fc             	and    eax,0xfffffffc
c0023243:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c002324a:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0023250:	83 e0 fc             	and    eax,0xfffffffc
c0023253:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c002325a:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0023260:	83 e0 fc             	and    eax,0xfffffffc
c0023263:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002326a:	eb 14                	jmp    c0023280 <IDE::open(int, int, void*)+0x8c>
c002326c:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023276:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023280:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0023287:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c002328e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023292:	89 c6                	mov    esi,eax
c0023294:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023299:	c1 e6 10             	shl    esi,0x10
c002329c:	89 e8                	mov    eax,ebp
c002329e:	89 fa                	mov    edx,edi
c00232a0:	c1 e0 0b             	shl    eax,0xb
c00232a3:	09 f0                	or     eax,esi
c00232a5:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c00232ac:	c1 e6 08             	shl    esi,0x8
c00232af:	09 c6                	or     esi,eax
c00232b1:	89 f0                	mov    eax,esi
c00232b3:	0d 08 00 00 80       	or     eax,0x80000008
c00232b8:	ef                   	out    dx,eax
c00232b9:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c00232be:	89 ca                	mov    edx,ecx
c00232c0:	ed                   	in     eax,dx
c00232c1:	c1 e8 10             	shr    eax,0x10
c00232c4:	3d ff ff 00 00       	cmp    eax,0xffff
c00232c9:	0f 84 f5 00 00 00    	je     c00233c4 <IDE::open(int, int, void*)+0x1d0>
c00232cf:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c00232d5:	89 fa                	mov    edx,edi
c00232d7:	89 f0                	mov    eax,esi
c00232d9:	ef                   	out    dx,eax
c00232da:	b0 fe                	mov    al,0xfe
c00232dc:	89 ca                	mov    edx,ecx
c00232de:	ee                   	out    dx,al
c00232df:	89 f0                	mov    eax,esi
c00232e1:	89 fa                	mov    edx,edi
c00232e3:	ef                   	out    dx,eax
c00232e4:	89 ca                	mov    edx,ecx
c00232e6:	ed                   	in     eax,dx
c00232e7:	3c fe                	cmp    al,0xfe
c00232e9:	0f 85 a9 00 00 00    	jne    c0023398 <IDE::open(int, int, void*)+0x1a4>
c00232ef:	8b 15 88 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e388
c00232f5:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c00232fc:	74 33                	je     c0023331 <IDE::open(int, int, void*)+0x13d>
c00232fe:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0023304:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0023308:	40                   	inc    eax
c0023309:	83 ec 0c             	sub    esp,0xc
c002330c:	0f b6 c0             	movzx  eax,al
c002330f:	50                   	push   eax
c0023310:	55                   	push   ebp
c0023311:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023315:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c002331b:	51                   	push   ecx
c002331c:	e8 a1 4e ff ff       	call   c00181c2 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0023321:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0023326:	83 c4 1c             	add    esp,0x1c
c0023329:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002332f:	eb 0a                	jmp    c002333b <IDE::open(int, int, void*)+0x147>
c0023331:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c002333b:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0023342:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0023349:	c1 e1 10             	shl    ecx,0x10
c002334c:	c1 e0 08             	shl    eax,0x8
c002334f:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023354:	09 c1                	or     ecx,eax
c0023356:	89 fa                	mov    edx,edi
c0023358:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c002335f:	c1 e0 0b             	shl    eax,0xb
c0023362:	09 c1                	or     ecx,eax
c0023364:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c002336a:	89 c8                	mov    eax,ecx
c002336c:	ef                   	out    dx,eax
c002336d:	be fc 0c 00 00       	mov    esi,0xcfc
c0023372:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0023378:	89 f2                	mov    edx,esi
c002337a:	ee                   	out    dx,al
c002337b:	89 c8                	mov    eax,ecx
c002337d:	89 fa                	mov    edx,edi
c002337f:	ef                   	out    dx,eax
c0023380:	89 f2                	mov    edx,esi
c0023382:	ed                   	in     eax,dx
c0023383:	0f b6 c0             	movzx  eax,al
c0023386:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c002338c:	74 46                	je     c00233d4 <IDE::open(int, int, void*)+0x1e0>
c002338e:	83 ec 0c             	sub    esp,0xc
c0023391:	68 24 ca 02 c0       	push   0xc002ca24
c0023396:	eb 34                	jmp    c00233cc <IDE::open(int, int, void*)+0x1d8>
c0023398:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c00233a1:	75 17                	jne    c00233ba <IDE::open(int, int, void*)+0x1c6>
c00233a3:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c00233a8:	74 07                	je     c00233b1 <IDE::open(int, int, void*)+0x1bd>
c00233aa:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c00233af:	75 09                	jne    c00233ba <IDE::open(int, int, void*)+0x1c6>
c00233b1:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00233b8:	eb 1a                	jmp    c00233d4 <IDE::open(int, int, void*)+0x1e0>
c00233ba:	83 ec 0c             	sub    esp,0xc
c00233bd:	68 2c ca 02 c0       	push   0xc002ca2c
c00233c2:	eb 08                	jmp    c00233cc <IDE::open(int, int, void*)+0x1d8>
c00233c4:	83 ec 0c             	sub    esp,0xc
c00233c7:	68 5d ca 02 c0       	push   0xc002ca5d
c00233cc:	e8 9c 71 ff ff       	call   c001a56d <Krnl::panic(char const*)>
c00233d1:	83 c4 10             	add    esp,0x10
c00233d4:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c00233db:	79 1a                	jns    c00233f7 <IDE::open(int, int, void*)+0x203>
c00233dd:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c00233e3:	83 e0 fc             	and    eax,0xfffffffc
c00233e6:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c00233ed:	83 c0 08             	add    eax,0x8
c00233f0:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c00233f7:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00233fd:	89 c2                	mov    edx,eax
c00233ff:	83 e2 0f             	and    edx,0xf
c0023402:	66 83 fa 08          	cmp    dx,0x8
c0023406:	75 0a                	jne    c0023412 <IDE::open(int, int, void*)+0x21e>
c0023408:	83 e8 02             	sub    eax,0x2
c002340b:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023412:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0023418:	89 c2                	mov    edx,eax
c002341a:	83 e2 0f             	and    edx,0xf
c002341d:	66 83 fa 08          	cmp    dx,0x8
c0023421:	75 0a                	jne    c002342d <IDE::open(int, int, void*)+0x239>
c0023423:	83 e8 02             	sub    eax,0x2
c0023426:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c002342d:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0023434:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c002343b:	89 d0                	mov    eax,edx
c002343d:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023440:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023444:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0023448:	8d 4a 01             	lea    ecx,[edx+0x1]
c002344b:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023450:	0f b6 c9             	movzx  ecx,cl
c0023453:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c002345a:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002345d:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023461:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0023465:	8d 50 02             	lea    edx,[eax+0x2]
c0023468:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c002346d:	0f b6 d2             	movzx  edx,dl
c0023470:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0023476:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023479:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002347d:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0023481:	8d 48 03             	lea    ecx,[eax+0x3]
c0023484:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023489:	0f b6 c9             	movzx  ecx,cl
c002348c:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0023492:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023495:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023499:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c002349d:	8d 50 04             	lea    edx,[eax+0x4]
c00234a0:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c00234a6:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00234ab:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c00234b2:	66 85 f6             	test   si,si
c00234b5:	74 3e                	je     c00234f5 <IDE::open(int, int, void*)+0x301>
c00234b7:	0f b6 d2             	movzx  edx,dl
c00234ba:	83 c0 05             	add    eax,0x5
c00234bd:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00234c0:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00234c4:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c00234c8:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00234ce:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00234d3:	eb 20                	jmp    c00234f5 <IDE::open(int, int, void*)+0x301>
c00234d5:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00234df:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00234e9:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00234f0:	e9 02 ff ff ff       	jmp    c00233f7 <IDE::open(int, int, void*)+0x203>
c00234f5:	52                   	push   edx
c00234f6:	52                   	push   edx
c00234f7:	6a 00                	push   0x0
c00234f9:	53                   	push   ebx
c00234fa:	e8 7d fa ff ff       	call   c0022f7c <IDE::prepareInterrupt(unsigned char)>
c00234ff:	59                   	pop    ecx
c0023500:	5e                   	pop    esi
c0023501:	6a 01                	push   0x1
c0023503:	53                   	push   ebx
c0023504:	e8 73 fa ff ff       	call   c0022f7c <IDE::prepareInterrupt(unsigned char)>
c0023509:	83 c4 0c             	add    esp,0xc
c002350c:	6a 00                	push   0x0
c002350e:	6a 00                	push   0x0
c0023510:	53                   	push   ebx
c0023511:	e8 98 fc ff ff       	call   c00231ae <IDE::enableIRQs(unsigned char, bool)>
c0023516:	83 c4 0c             	add    esp,0xc
c0023519:	6a 00                	push   0x0
c002351b:	6a 01                	push   0x1
c002351d:	53                   	push   ebx
c002351e:	e8 8b fc ff ff       	call   c00231ae <IDE::enableIRQs(unsigned char, bool)>
c0023523:	83 c4 10             	add    esp,0x10
c0023526:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c002352d:	74 40                	je     c002356f <IDE::open(int, int, void*)+0x37b>
c002352f:	83 ec 0c             	sub    esp,0xc
c0023532:	68 87 ca 02 c0       	push   0xc002ca87
c0023537:	e8 56 f9 fe ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c002353c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002353f:	6a 01                	push   0x1
c0023541:	68 76 31 02 c0       	push   0xc0023176
c0023546:	6a 0e                	push   0xe
c0023548:	53                   	push   ebx
c0023549:	e8 ee 0c ff ff       	call   c001423c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002354e:	83 c4 14             	add    esp,0x14
c0023551:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023557:	53                   	push   ebx
c0023558:	6a 01                	push   0x1
c002355a:	68 92 31 02 c0       	push   0xc0023192
c002355f:	6a 0f                	push   0xf
c0023561:	53                   	push   ebx
c0023562:	e8 d5 0c ff ff       	call   c001423c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023567:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c002356d:	eb 4a                	jmp    c00235b9 <IDE::open(int, int, void*)+0x3c5>
c002356f:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0023579:	50                   	push   eax
c002357a:	6a 0f                	push   0xf
c002357c:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023582:	68 a3 ca 02 c0       	push   0xc002caa3
c0023587:	e8 06 f9 fe ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c002358c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002358f:	6a 00                	push   0x0
c0023591:	68 76 31 02 c0       	push   0xc0023176
c0023596:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c002359c:	53                   	push   ebx
c002359d:	e8 9a 0c ff ff       	call   c001423c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00235a2:	83 c4 14             	add    esp,0x14
c00235a5:	53                   	push   ebx
c00235a6:	6a 00                	push   0x0
c00235a8:	68 92 31 02 c0       	push   0xc0023192
c00235ad:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c00235b3:	53                   	push   ebx
c00235b4:	e8 83 0c ff ff       	call   c001423c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00235b9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00235bb:	83 c4 20             	add    esp,0x20
c00235be:	83 ec 0c             	sub    esp,0xc
c00235c1:	53                   	push   ebx
c00235c2:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00235c5:	83 c4 0c             	add    esp,0xc
c00235c8:	6a 07                	push   0x7
c00235ca:	6a 00                	push   0x0
c00235cc:	53                   	push   ebx
c00235cd:	e8 90 fa ff ff       	call   c0023062 <IDE::read(unsigned char, unsigned char)>
c00235d2:	83 c4 0c             	add    esp,0xc
c00235d5:	6a 07                	push   0x7
c00235d7:	6a 01                	push   0x1
c00235d9:	53                   	push   ebx
c00235da:	e8 83 fa ff ff       	call   c0023062 <IDE::read(unsigned char, unsigned char)>
c00235df:	83 c4 0c             	add    esp,0xc
c00235e2:	6a 01                	push   0x1
c00235e4:	6a 00                	push   0x0
c00235e6:	53                   	push   ebx
c00235e7:	e8 c2 fb ff ff       	call   c00231ae <IDE::enableIRQs(unsigned char, bool)>
c00235ec:	83 c4 0c             	add    esp,0xc
c00235ef:	6a 01                	push   0x1
c00235f1:	6a 01                	push   0x1
c00235f3:	53                   	push   ebx
c00235f4:	e8 b5 fb ff ff       	call   c00231ae <IDE::enableIRQs(unsigned char, bool)>
c00235f9:	83 c4 2c             	add    esp,0x2c
c00235fc:	31 c0                	xor    eax,eax
c00235fe:	5b                   	pop    ebx
c00235ff:	5e                   	pop    esi
c0023600:	5f                   	pop    edi
c0023601:	5d                   	pop    ebp
c0023602:	c3                   	ret    
c0023603:	90                   	nop

c0023604 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0023604:	55                   	push   ebp
c0023605:	57                   	push   edi
c0023606:	56                   	push   esi
c0023607:	53                   	push   ebx
c0023608:	83 ec 1c             	sub    esp,0x1c
c002360b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002360f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023613:	8d 50 f8             	lea    edx,[eax-0x8]
c0023616:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002361a:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c002361e:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0023622:	80 fa 03             	cmp    dl,0x3
c0023625:	77 5d                	ja     c0023684 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0023627:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002362b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002362f:	0f b6 db             	movzx  ebx,bl
c0023632:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0023635:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0023639:	83 ca 80             	or     edx,0xffffff80
c002363c:	0f b6 d2             	movzx  edx,dl
c002363f:	52                   	push   edx
c0023640:	6a 0c                	push   0xc
c0023642:	53                   	push   ebx
c0023643:	56                   	push   esi
c0023644:	e8 59 f9 ff ff       	call   c0022fa2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023649:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c002364e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023652:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023656:	0f b6 c0             	movzx  eax,al
c0023659:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c002365d:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002365f:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0023664:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0023668:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c002366c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023670:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023678:	83 c4 2c             	add    esp,0x2c
c002367b:	5b                   	pop    ebx
c002367c:	5e                   	pop    esi
c002367d:	5f                   	pop    edi
c002367e:	5d                   	pop    ebp
c002367f:	e9 1e f9 ff ff       	jmp    c0022fa2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023684:	3c 07                	cmp    al,0x7
c0023686:	77 10                	ja     c0023698 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0023688:	0f b6 db             	movzx  ebx,bl
c002368b:	0f b6 d0             	movzx  edx,al
c002368e:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0023696:	eb 2d                	jmp    c00236c5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023698:	3c 0d                	cmp    al,0xd
c002369a:	77 13                	ja     c00236af <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c002369c:	0f b6 db             	movzx  ebx,bl
c002369f:	0f b6 c0             	movzx  eax,al
c00236a2:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c00236a9:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c00236ad:	eb 16                	jmp    c00236c5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00236af:	3c 15                	cmp    al,0x15
c00236b1:	77 14                	ja     c00236c7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c00236b3:	0f b6 db             	movzx  ebx,bl
c00236b6:	0f b6 c0             	movzx  eax,al
c00236b9:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c00236c1:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c00236c5:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00236c7:	83 c4 1c             	add    esp,0x1c
c00236ca:	5b                   	pop    ebx
c00236cb:	5e                   	pop    esi
c00236cc:	5f                   	pop    edi
c00236cd:	5d                   	pop    ebp
c00236ce:	c3                   	ret    
c00236cf:	90                   	nop

c00236d0 <IDE::detect()>:
c00236d0:	55                   	push   ebp
c00236d1:	57                   	push   edi
c00236d2:	56                   	push   esi
c00236d3:	53                   	push   ebx
c00236d4:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00236da:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c00236e1:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00236e8:	0f 85 be 02 00 00    	jne    c00239ac <IDE::detect()+0x2dc>
c00236ee:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c00236f5:	31 f6                	xor    esi,esi
c00236f7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00236ff:	31 ed                	xor    ebp,ebp
c0023701:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023705:	c1 e0 06             	shl    eax,0x6
c0023708:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0023710:	89 e8                	mov    eax,ebp
c0023712:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0023716:	c1 e0 04             	shl    eax,0x4
c0023719:	83 c8 a0             	or     eax,0xffffffa0
c002371c:	0f b6 c0             	movzx  eax,al
c002371f:	50                   	push   eax
c0023720:	6a 06                	push   0x6
c0023722:	56                   	push   esi
c0023723:	53                   	push   ebx
c0023724:	e8 79 f8 ff ff       	call   c0022fa2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023729:	83 c4 0c             	add    esp,0xc
c002372c:	6a 0c                	push   0xc
c002372e:	56                   	push   esi
c002372f:	53                   	push   ebx
c0023730:	e8 2d f9 ff ff       	call   c0023062 <IDE::read(unsigned char, unsigned char)>
c0023735:	83 c4 0c             	add    esp,0xc
c0023738:	6a 0c                	push   0xc
c002373a:	56                   	push   esi
c002373b:	53                   	push   ebx
c002373c:	e8 21 f9 ff ff       	call   c0023062 <IDE::read(unsigned char, unsigned char)>
c0023741:	83 c4 0c             	add    esp,0xc
c0023744:	6a 0c                	push   0xc
c0023746:	56                   	push   esi
c0023747:	53                   	push   ebx
c0023748:	e8 15 f9 ff ff       	call   c0023062 <IDE::read(unsigned char, unsigned char)>
c002374d:	83 c4 0c             	add    esp,0xc
c0023750:	6a 0c                	push   0xc
c0023752:	56                   	push   esi
c0023753:	53                   	push   ebx
c0023754:	e8 09 f9 ff ff       	call   c0023062 <IDE::read(unsigned char, unsigned char)>
c0023759:	68 ec 00 00 00       	push   0xec
c002375e:	6a 07                	push   0x7
c0023760:	56                   	push   esi
c0023761:	53                   	push   ebx
c0023762:	e8 3b f8 ff ff       	call   c0022fa2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023767:	83 c4 1c             	add    esp,0x1c
c002376a:	6a 0c                	push   0xc
c002376c:	56                   	push   esi
c002376d:	53                   	push   ebx
c002376e:	e8 ef f8 ff ff       	call   c0023062 <IDE::read(unsigned char, unsigned char)>
c0023773:	83 c4 0c             	add    esp,0xc
c0023776:	6a 0c                	push   0xc
c0023778:	56                   	push   esi
c0023779:	53                   	push   ebx
c002377a:	e8 e3 f8 ff ff       	call   c0023062 <IDE::read(unsigned char, unsigned char)>
c002377f:	83 c4 0c             	add    esp,0xc
c0023782:	6a 0c                	push   0xc
c0023784:	56                   	push   esi
c0023785:	53                   	push   ebx
c0023786:	e8 d7 f8 ff ff       	call   c0023062 <IDE::read(unsigned char, unsigned char)>
c002378b:	83 c4 0c             	add    esp,0xc
c002378e:	6a 0c                	push   0xc
c0023790:	56                   	push   esi
c0023791:	53                   	push   ebx
c0023792:	e8 cb f8 ff ff       	call   c0023062 <IDE::read(unsigned char, unsigned char)>
c0023797:	83 c4 0c             	add    esp,0xc
c002379a:	6a 0c                	push   0xc
c002379c:	56                   	push   esi
c002379d:	53                   	push   ebx
c002379e:	e8 bf f8 ff ff       	call   c0023062 <IDE::read(unsigned char, unsigned char)>
c00237a3:	83 c4 10             	add    esp,0x10
c00237a6:	84 c0                	test   al,al
c00237a8:	0f 84 8b 01 00 00    	je     c0023939 <IDE::detect()+0x269>
c00237ae:	31 ff                	xor    edi,edi
c00237b0:	50                   	push   eax
c00237b1:	6a 0c                	push   0xc
c00237b3:	56                   	push   esi
c00237b4:	53                   	push   ebx
c00237b5:	e8 a8 f8 ff ff       	call   c0023062 <IDE::read(unsigned char, unsigned char)>
c00237ba:	83 c4 10             	add    esp,0x10
c00237bd:	a8 01                	test   al,0x1
c00237bf:	0f 85 8e 01 00 00    	jne    c0023953 <IDE::detect()+0x283>
c00237c5:	84 c0                	test   al,al
c00237c7:	78 04                	js     c00237cd <IDE::detect()+0xfd>
c00237c9:	a8 08                	test   al,0x8
c00237cb:	75 27                	jne    c00237f4 <IDE::detect()+0x124>
c00237cd:	47                   	inc    edi
c00237ce:	81 ff 17 01 00 00    	cmp    edi,0x117
c00237d4:	7e da                	jle    c00237b0 <IDE::detect()+0xe0>
c00237d6:	50                   	push   eax
c00237d7:	50                   	push   eax
c00237d8:	6a 00                	push   0x0
c00237da:	68 40 4b 4c 00       	push   0x4c4b40
c00237df:	e8 d2 aa ff ff       	call   c001e2b6 <nanoSleep(unsigned long long)>
c00237e4:	83 c4 10             	add    esp,0x10
c00237e7:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c00237ed:	75 c1                	jne    c00237b0 <IDE::detect()+0xe0>
c00237ef:	e9 5f 01 00 00       	jmp    c0023953 <IDE::detect()+0x283>
c00237f4:	31 c9                	xor    ecx,ecx
c00237f6:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00237fa:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00237fe:	83 ec 0c             	sub    esp,0xc
c0023801:	68 80 00 00 00       	push   0x80
c0023806:	57                   	push   edi
c0023807:	6a 00                	push   0x0
c0023809:	56                   	push   esi
c002380a:	53                   	push   ebx
c002380b:	e8 f4 fd ff ff       	call   c0023604 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0023810:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0023815:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023819:	89 d1                	mov    ecx,edx
c002381b:	c1 e0 06             	shl    eax,0x6
c002381e:	01 d8                	add    eax,ebx
c0023820:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0023827:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c002382e:	89 f2                	mov    edx,esi
c0023830:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0023836:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c002383a:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0023840:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023844:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c002384b:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0023853:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c002385a:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0023862:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0023868:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c002386f:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0023875:	8d 54 24 58          	lea    edx,[esp+0x58]
c0023879:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c002387d:	83 c4 20             	add    esp,0x20
c0023880:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0023883:	83 c0 02             	add    eax,0x2
c0023886:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c002388c:	83 c7 02             	add    edi,0x2
c002388f:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0023892:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0023898:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c002389c:	75 e2                	jne    c0023880 <IDE::detect()+0x1b0>
c002389e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00238a2:	c1 e0 06             	shl    eax,0x6
c00238a5:	01 d8                	add    eax,ebx
c00238a7:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c00238ad:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c00238b4:	66 c1 ea 09          	shr    dx,0x9
c00238b8:	83 e2 01             	and    edx,0x1
c00238bb:	84 c9                	test   cl,cl
c00238bd:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c00238c3:	75 2f                	jne    c00238f4 <IDE::detect()+0x224>
c00238c5:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c00238cb:	85 c0                	test   eax,eax
c00238cd:	74 66                	je     c0023935 <IDE::detect()+0x265>
c00238cf:	50                   	push   eax
c00238d0:	55                   	push   ebp
c00238d1:	56                   	push   esi
c00238d2:	68 bf ca 02 c0       	push   0xc002cabf
c00238d7:	e8 b6 f5 fe ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c00238dc:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c00238e3:	e8 58 bf fe ff       	call   c000f840 <malloc>
c00238e8:	89 c7                	mov    edi,eax
c00238ea:	89 04 24             	mov    DWORD PTR [esp],eax
c00238ed:	e8 78 06 00 00       	call   c0023f6a <ATA::ATA()>
c00238f2:	eb 28                	jmp    c002391c <IDE::detect()+0x24c>
c00238f4:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c00238fa:	55                   	push   ebp
c00238fb:	56                   	push   esi
c00238fc:	68 ee ca 02 c0       	push   0xc002caee
c0023901:	e8 8c f5 fe ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0023906:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c002390d:	e8 2e bf fe ff       	call   c000f840 <malloc>
c0023912:	89 c7                	mov    edi,eax
c0023914:	89 04 24             	mov    DWORD PTR [esp],eax
c0023917:	e8 8e 0c 00 00       	call   c00245aa <ATAPI::ATAPI()>
c002391c:	5a                   	pop    edx
c002391d:	59                   	pop    ecx
c002391e:	57                   	push   edi
c002391f:	53                   	push   ebx
c0023920:	e8 93 09 ff ff       	call   c00142b8 <Device::addChild(Device*)>
c0023925:	8b 07                	mov    eax,DWORD PTR [edi]
c0023927:	53                   	push   ebx
c0023928:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002392c:	6a 00                	push   0x0
c002392e:	57                   	push   edi
c002392f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023932:	83 c4 20             	add    esp,0x20
c0023935:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0023939:	4d                   	dec    ebp
c002393a:	74 0a                	je     c0023946 <IDE::detect()+0x276>
c002393c:	bd 01 00 00 00       	mov    ebp,0x1
c0023941:	e9 bb fd ff ff       	jmp    c0023701 <IDE::detect()+0x31>
c0023946:	4e                   	dec    esi
c0023947:	74 63                	je     c00239ac <IDE::detect()+0x2dc>
c0023949:	be 01 00 00 00       	mov    esi,0x1
c002394e:	e9 ac fd ff ff       	jmp    c00236ff <IDE::detect()+0x2f>
c0023953:	50                   	push   eax
c0023954:	6a 04                	push   0x4
c0023956:	56                   	push   esi
c0023957:	53                   	push   ebx
c0023958:	e8 05 f7 ff ff       	call   c0023062 <IDE::read(unsigned char, unsigned char)>
c002395d:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023961:	83 c4 0c             	add    esp,0xc
c0023964:	6a 05                	push   0x5
c0023966:	56                   	push   esi
c0023967:	53                   	push   ebx
c0023968:	e8 f5 f6 ff ff       	call   c0023062 <IDE::read(unsigned char, unsigned char)>
c002396d:	83 c4 10             	add    esp,0x10
c0023970:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0023974:	80 fa 14             	cmp    dl,0x14
c0023977:	75 04                	jne    c002397d <IDE::detect()+0x2ad>
c0023979:	3c eb                	cmp    al,0xeb
c002397b:	eb 07                	jmp    c0023984 <IDE::detect()+0x2b4>
c002397d:	3c 96                	cmp    al,0x96
c002397f:	75 b8                	jne    c0023939 <IDE::detect()+0x269>
c0023981:	80 fa 69             	cmp    dl,0x69
c0023984:	75 b3                	jne    c0023939 <IDE::detect()+0x269>
c0023986:	68 a1 00 00 00       	push   0xa1
c002398b:	6a 07                	push   0x7
c002398d:	56                   	push   esi
c002398e:	53                   	push   ebx
c002398f:	e8 0e f6 ff ff       	call   c0022fa2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023994:	5f                   	pop    edi
c0023995:	58                   	pop    eax
c0023996:	6a 00                	push   0x0
c0023998:	68 40 42 0f 00       	push   0xf4240
c002399d:	e8 14 a9 ff ff       	call   c001e2b6 <nanoSleep(unsigned long long)>
c00239a2:	83 c4 10             	add    esp,0x10
c00239a5:	b1 01                	mov    cl,0x1
c00239a7:	e9 4a fe ff ff       	jmp    c00237f6 <IDE::detect()+0x126>
c00239ac:	81 c4 1c 02 00 00    	add    esp,0x21c
c00239b2:	5b                   	pop    ebx
c00239b3:	5e                   	pop    esi
c00239b4:	5f                   	pop    edi
c00239b5:	5d                   	pop    ebp
c00239b6:	c3                   	ret    
c00239b7:	90                   	nop

c00239b8 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c00239b8:	55                   	push   ebp
c00239b9:	57                   	push   edi
c00239ba:	56                   	push   esi
c00239bb:	53                   	push   ebx
c00239bc:	83 ec 1c             	sub    esp,0x1c
c00239bf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00239c3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00239c7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00239cb:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00239cf:	88 c3                	mov    bl,al
c00239d1:	84 c0                	test   al,al
c00239d3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00239d7:	0f 84 67 01 00 00    	je     c0023b44 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c00239dd:	83 ec 0c             	sub    esp,0xc
c00239e0:	68 1f cb 02 c0       	push   0xc002cb1f
c00239e5:	e8 a8 f4 fe ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c00239ea:	83 c4 10             	add    esp,0x10
c00239ed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00239f1:	3c 01                	cmp    al,0x1
c00239f3:	75 17                	jne    c0023a0c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c00239f5:	83 ec 0c             	sub    esp,0xc
c00239f8:	b3 13                	mov    bl,0x13
c00239fa:	68 2b cb 02 c0       	push   0xc002cb2b
c00239ff:	e8 8e f4 fe ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0023a04:	83 c4 10             	add    esp,0x10
c0023a07:	e9 25 01 00 00       	jmp    c0023b31 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023a0c:	3c 02                	cmp    al,0x2
c0023a0e:	0f 85 ef 00 00 00    	jne    c0023b03 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0023a14:	d1 e6                	shl    esi,1
c0023a16:	09 ee                	or     esi,ebp
c0023a18:	52                   	push   edx
c0023a19:	89 f0                	mov    eax,esi
c0023a1b:	6a 01                	push   0x1
c0023a1d:	0f b6 f0             	movzx  esi,al
c0023a20:	c1 e6 06             	shl    esi,0x6
c0023a23:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0023a2b:	50                   	push   eax
c0023a2c:	57                   	push   edi
c0023a2d:	e8 30 f6 ff ff       	call   c0023062 <IDE::read(unsigned char, unsigned char)>
c0023a32:	83 c4 10             	add    esp,0x10
c0023a35:	89 c6                	mov    esi,eax
c0023a37:	a8 01                	test   al,0x1
c0023a39:	74 12                	je     c0023a4d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0023a3b:	83 ec 0c             	sub    esp,0xc
c0023a3e:	b3 07                	mov    bl,0x7
c0023a40:	68 40 cb 02 c0       	push   0xc002cb40
c0023a45:	e8 48 f4 fe ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0023a4a:	83 c4 10             	add    esp,0x10
c0023a4d:	f7 c6 02 00 00 00    	test   esi,0x2
c0023a53:	74 12                	je     c0023a67 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0023a55:	83 ec 0c             	sub    esp,0xc
c0023a58:	b3 03                	mov    bl,0x3
c0023a5a:	68 5e cb 02 c0       	push   0xc002cb5e
c0023a5f:	e8 2e f4 fe ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0023a64:	83 c4 10             	add    esp,0x10
c0023a67:	f7 c6 04 00 00 00    	test   esi,0x4
c0023a6d:	74 12                	je     c0023a81 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0023a6f:	83 ec 0c             	sub    esp,0xc
c0023a72:	b3 14                	mov    bl,0x14
c0023a74:	68 7e cb 02 c0       	push   0xc002cb7e
c0023a79:	e8 14 f4 fe ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0023a7e:	83 c4 10             	add    esp,0x10
c0023a81:	f7 c6 08 00 00 00    	test   esi,0x8
c0023a87:	74 12                	je     c0023a9b <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c0023a89:	83 ec 0c             	sub    esp,0xc
c0023a8c:	b3 03                	mov    bl,0x3
c0023a8e:	68 5e cb 02 c0       	push   0xc002cb5e
c0023a93:	e8 fa f3 fe ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0023a98:	83 c4 10             	add    esp,0x10
c0023a9b:	f7 c6 10 00 00 00    	test   esi,0x10
c0023aa1:	74 12                	je     c0023ab5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c0023aa3:	83 ec 0c             	sub    esp,0xc
c0023aa6:	b3 15                	mov    bl,0x15
c0023aa8:	68 96 cb 02 c0       	push   0xc002cb96
c0023aad:	e8 e0 f3 fe ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0023ab2:	83 c4 10             	add    esp,0x10
c0023ab5:	f7 c6 20 00 00 00    	test   esi,0x20
c0023abb:	74 12                	je     c0023acf <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c0023abd:	83 ec 0c             	sub    esp,0xc
c0023ac0:	b3 03                	mov    bl,0x3
c0023ac2:	68 5e cb 02 c0       	push   0xc002cb5e
c0023ac7:	e8 c6 f3 fe ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0023acc:	83 c4 10             	add    esp,0x10
c0023acf:	f7 c6 40 00 00 00    	test   esi,0x40
c0023ad5:	74 12                	je     c0023ae9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c0023ad7:	83 ec 0c             	sub    esp,0xc
c0023ada:	b3 16                	mov    bl,0x16
c0023adc:	68 b0 cb 02 c0       	push   0xc002cbb0
c0023ae1:	e8 ac f3 fe ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0023ae6:	83 c4 10             	add    esp,0x10
c0023ae9:	89 f0                	mov    eax,esi
c0023aeb:	84 c0                	test   al,al
c0023aed:	79 42                	jns    c0023b31 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023aef:	83 ec 0c             	sub    esp,0xc
c0023af2:	b3 0d                	mov    bl,0xd
c0023af4:	68 d1 cb 02 c0       	push   0xc002cbd1
c0023af9:	e8 94 f3 fe ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0023afe:	83 c4 10             	add    esp,0x10
c0023b01:	eb 2e                	jmp    c0023b31 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023b03:	3c 03                	cmp    al,0x3
c0023b05:	75 14                	jne    c0023b1b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0023b07:	83 ec 0c             	sub    esp,0xc
c0023b0a:	b3 17                	mov    bl,0x17
c0023b0c:	68 e5 cb 02 c0       	push   0xc002cbe5
c0023b11:	e8 7c f3 fe ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0023b16:	83 c4 10             	add    esp,0x10
c0023b19:	eb 16                	jmp    c0023b31 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023b1b:	3c 04                	cmp    al,0x4
c0023b1d:	75 12                	jne    c0023b31 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023b1f:	83 ec 0c             	sub    esp,0xc
c0023b22:	b3 08                	mov    bl,0x8
c0023b24:	68 fb cb 02 c0       	push   0xc002cbfb
c0023b29:	e8 64 f3 fe ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0023b2e:	83 c4 10             	add    esp,0x10
c0023b31:	50                   	push   eax
c0023b32:	50                   	push   eax
c0023b33:	0f b6 c3             	movzx  eax,bl
c0023b36:	50                   	push   eax
c0023b37:	68 13 cc 02 c0       	push   0xc002cc13
c0023b3c:	e8 51 f3 fe ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0023b41:	83 c4 10             	add    esp,0x10
c0023b44:	83 c4 1c             	add    esp,0x1c
c0023b47:	88 d8                	mov    al,bl
c0023b49:	5b                   	pop    ebx
c0023b4a:	5e                   	pop    esi
c0023b4b:	5f                   	pop    edi
c0023b4c:	5d                   	pop    ebp
c0023b4d:	c3                   	ret    

c0023b4e <IDE::polling(unsigned char, unsigned int)>:
c0023b4e:	57                   	push   edi
c0023b4f:	56                   	push   esi
c0023b50:	53                   	push   ebx
c0023b51:	bb 04 00 00 00       	mov    ebx,0x4
c0023b56:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0023b5a:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023b5f:	52                   	push   edx
c0023b60:	6a 0c                	push   0xc
c0023b62:	56                   	push   esi
c0023b63:	57                   	push   edi
c0023b64:	e8 f9 f4 ff ff       	call   c0023062 <IDE::read(unsigned char, unsigned char)>
c0023b69:	83 c4 10             	add    esp,0x10
c0023b6c:	4b                   	dec    ebx
c0023b6d:	75 f0                	jne    c0023b5f <IDE::polling(unsigned char, unsigned int)+0x11>
c0023b6f:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023b74:	50                   	push   eax
c0023b75:	6a 0c                	push   0xc
c0023b77:	56                   	push   esi
c0023b78:	57                   	push   edi
c0023b79:	e8 e4 f4 ff ff       	call   c0023062 <IDE::read(unsigned char, unsigned char)>
c0023b7e:	83 c4 10             	add    esp,0x10
c0023b81:	a8 01                	test   al,0x1
c0023b83:	74 12                	je     c0023b97 <IDE::polling(unsigned char, unsigned int)+0x49>
c0023b85:	83 ec 0c             	sub    esp,0xc
c0023b88:	68 2d cc 02 c0       	push   0xc002cc2d
c0023b8d:	e8 00 f3 fe ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0023b92:	83 c4 10             	add    esp,0x10
c0023b95:	eb 17                	jmp    c0023bae <IDE::polling(unsigned char, unsigned int)+0x60>
c0023b97:	a8 20                	test   al,0x20
c0023b99:	75 0f                	jne    c0023baa <IDE::polling(unsigned char, unsigned int)+0x5c>
c0023b9b:	4b                   	dec    ebx
c0023b9c:	74 10                	je     c0023bae <IDE::polling(unsigned char, unsigned int)+0x60>
c0023b9e:	84 c0                	test   al,al
c0023ba0:	78 d2                	js     c0023b74 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023ba2:	a8 08                	test   al,0x8
c0023ba4:	74 ce                	je     c0023b74 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023ba6:	31 c0                	xor    eax,eax
c0023ba8:	eb 06                	jmp    c0023bb0 <IDE::polling(unsigned char, unsigned int)+0x62>
c0023baa:	b0 01                	mov    al,0x1
c0023bac:	eb 02                	jmp    c0023bb0 <IDE::polling(unsigned char, unsigned int)+0x62>
c0023bae:	b0 02                	mov    al,0x2
c0023bb0:	5b                   	pop    ebx
c0023bb1:	5e                   	pop    esi
c0023bb2:	5f                   	pop    edi
c0023bb3:	c3                   	ret    

c0023bb4 <SATABus::close(int, int, void*)>:
c0023bb4:	31 c0                	xor    eax,eax
c0023bb6:	c3                   	ret    
c0023bb7:	90                   	nop

c0023bb8 <SATABus::detect()>:
c0023bb8:	c3                   	ret    
c0023bb9:	90                   	nop

c0023bba <SATABus::SATABus()>:
c0023bba:	83 ec 0c             	sub    esp,0xc
c0023bbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023bc1:	83 ec 08             	sub    esp,0x8
c0023bc4:	68 70 cc 02 c0       	push   0xc002cc70
c0023bc9:	50                   	push   eax
c0023bca:	e8 75 0a ff ff       	call   c0014644 <HardDiskController::HardDiskController(char const*)>
c0023bcf:	83 c4 10             	add    esp,0x10
c0023bd2:	ba 2c cd 02 c0       	mov    edx,0xc002cd2c
c0023bd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023bdb:	89 10                	mov    DWORD PTR [eax],edx
c0023bdd:	83 ec 0c             	sub    esp,0xc
c0023be0:	6a 50                	push   0x50
c0023be2:	e8 db c3 fe ff       	call   c000ffc2 <Phys::allocateContiguousPages(int)>
c0023be7:	83 c4 10             	add    esp,0x10
c0023bea:	89 c2                	mov    edx,eax
c0023bec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023bf0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023bf6:	83 ec 0c             	sub    esp,0xc
c0023bf9:	6a 50                	push   0x50
c0023bfb:	e8 c1 e0 fe ff       	call   c0011cc1 <Virt::allocateKernelVirtualPages(int)>
c0023c00:	83 c4 10             	add    esp,0x10
c0023c03:	89 c2                	mov    edx,eax
c0023c05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c09:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023c0f:	e8 eb e2 fe ff       	call   c0011eff <Virt::getAKernelVAS()>
c0023c14:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023c18:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0023c1e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023c22:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0023c28:	83 ec 0c             	sub    esp,0xc
c0023c2b:	6a 03                	push   0x3
c0023c2d:	6a 50                	push   0x50
c0023c2f:	51                   	push   ecx
c0023c30:	52                   	push   edx
c0023c31:	50                   	push   eax
c0023c32:	e8 df e9 fe ff       	call   c0012616 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0023c37:	83 c4 20             	add    esp,0x20
c0023c3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c3e:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0023c44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c48:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0023c4e:	83 ec 04             	sub    esp,0x4
c0023c51:	52                   	push   edx
c0023c52:	50                   	push   eax
c0023c53:	68 94 cc 02 c0       	push   0xc002cc94
c0023c58:	e8 35 f2 fe ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0023c5d:	83 c4 10             	add    esp,0x10
c0023c60:	90                   	nop
c0023c61:	83 c4 0c             	add    esp,0xc
c0023c64:	c3                   	ret    
c0023c65:	90                   	nop

c0023c66 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0023c66:	83 ec 0c             	sub    esp,0xc
c0023c69:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023c6d:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0023c70:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0023c73:	09 c2                	or     edx,eax
c0023c75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c79:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023c7f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023c81:	31 c0                	xor    eax,eax
c0023c83:	c1 e9 08             	shr    ecx,0x8
c0023c86:	83 e1 0f             	and    ecx,0xf
c0023c89:	39 c8                	cmp    eax,ecx
c0023c8b:	74 0a                	je     c0023c97 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0023c8d:	f6 c2 01             	test   dl,0x1
c0023c90:	74 18                	je     c0023caa <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0023c92:	d1 ea                	shr    edx,1
c0023c94:	40                   	inc    eax
c0023c95:	eb f2                	jmp    c0023c89 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0023c97:	83 ec 0c             	sub    esp,0xc
c0023c9a:	68 b8 cc 02 c0       	push   0xc002ccb8
c0023c9f:	e8 c9 68 ff ff       	call   c001a56d <Krnl::panic(char const*)>
c0023ca4:	83 c4 10             	add    esp,0x10
c0023ca7:	83 c8 ff             	or     eax,0xffffffff
c0023caa:	83 c4 0c             	add    esp,0xc
c0023cad:	c3                   	ret    

c0023cae <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0023cae:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023cb2:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0023cb5:	89 c2                	mov    edx,eax
c0023cb7:	c1 ea 08             	shr    edx,0x8
c0023cba:	83 e2 0f             	and    edx,0xf
c0023cbd:	fe ca                	dec    dl
c0023cbf:	75 31                	jne    c0023cf2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023cc1:	83 e0 0f             	and    eax,0xf
c0023cc4:	3c 03                	cmp    al,0x3
c0023cc6:	75 2a                	jne    c0023cf2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023cc8:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0023ccb:	b8 02 00 00 00       	mov    eax,0x2
c0023cd0:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0023cd6:	74 1c                	je     c0023cf4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023cd8:	b8 04 00 00 00       	mov    eax,0x4
c0023cdd:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0023ce3:	74 0f                	je     c0023cf4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023ce5:	31 c0                	xor    eax,eax
c0023ce7:	83 fa 03             	cmp    edx,0x3
c0023cea:	0f 94 c0             	sete   al
c0023ced:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0023cf1:	c3                   	ret    
c0023cf2:	31 c0                	xor    eax,eax
c0023cf4:	c3                   	ret    
c0023cf5:	90                   	nop

c0023cf6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0023cf6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023cfa:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023cfd:	0f ba e2 0f          	bt     edx,0xf
c0023d01:	72 f7                	jb     c0023cfa <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0023d03:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d06:	83 ca 10             	or     edx,0x10
c0023d09:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023d0c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d0f:	83 ca 01             	or     edx,0x1
c0023d12:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023d15:	c3                   	ret    

c0023d16 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0023d16:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023d1a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d1d:	83 e2 fe             	and    edx,0xfffffffe
c0023d20:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023d23:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d26:	83 e2 ef             	and    edx,0xffffffef
c0023d29:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023d2c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d2f:	0f ba e2 0e          	bt     edx,0xe
c0023d33:	72 f7                	jb     c0023d2c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023d35:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d38:	0f ba e2 0f          	bt     edx,0xf
c0023d3c:	72 ee                	jb     c0023d2c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023d3e:	c3                   	ret    
c0023d3f:	90                   	nop

c0023d40 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0023d40:	55                   	push   ebp
c0023d41:	57                   	push   edi
c0023d42:	56                   	push   esi
c0023d43:	53                   	push   ebx
c0023d44:	83 ec 1c             	sub    esp,0x1c
c0023d47:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023d4b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023d4f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023d53:	53                   	push   ebx
c0023d54:	89 fd                	mov    ebp,edi
c0023d56:	56                   	push   esi
c0023d57:	c1 e5 0a             	shl    ebp,0xa
c0023d5a:	e8 b7 ff ff ff       	call   c0023d16 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0023d5f:	83 ec 0c             	sub    esp,0xc
c0023d62:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0023d68:	01 e8                	add    eax,ebp
c0023d6a:	89 03                	mov    DWORD PTR [ebx],eax
c0023d6c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023d6e:	68 00 04 00 00       	push   0x400
c0023d73:	6a 00                	push   0x0
c0023d75:	50                   	push   eax
c0023d76:	e8 fd c9 fd ff       	call   c0000778 <memset>
c0023d7b:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0023d81:	89 fa                	mov    edx,edi
c0023d83:	01 e8                	add    eax,ebp
c0023d85:	c1 e7 0d             	shl    edi,0xd
c0023d88:	89 03                	mov    DWORD PTR [ebx],eax
c0023d8a:	c1 e2 08             	shl    edx,0x8
c0023d8d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0023d94:	81 c2 00 80 00 00    	add    edx,0x8000
c0023d9a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0023d9e:	89 d0                	mov    eax,edx
c0023da0:	83 c4 1c             	add    esp,0x1c
c0023da3:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023da9:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0023dac:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023daf:	68 00 01 00 00       	push   0x100
c0023db4:	6a 00                	push   0x0
c0023db6:	50                   	push   eax
c0023db7:	e8 bc c9 fd ff       	call   c0000778 <memset>
c0023dbc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023dc0:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023dc6:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0023dcc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023dd0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0023dd3:	83 c4 10             	add    esp,0x10
c0023dd6:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023ddd:	31 ff                	xor    edi,edi
c0023ddf:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0023de5:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0023deb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023def:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023df5:	83 c5 20             	add    ebp,0x20
c0023df8:	01 f8                	add    eax,edi
c0023dfa:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023dfd:	52                   	push   edx
c0023dfe:	68 00 01 00 00       	push   0x100
c0023e03:	6a 00                	push   0x0
c0023e05:	50                   	push   eax
c0023e06:	e8 6d c9 fd ff       	call   c0000778 <memset>
c0023e0b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023e0f:	83 c4 10             	add    esp,0x10
c0023e12:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0023e18:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0023e1f:	01 f8                	add    eax,edi
c0023e21:	81 c7 00 01 00 00    	add    edi,0x100
c0023e27:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023e2a:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0023e30:	75 b3                	jne    c0023de5 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0023e32:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0023e36:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023e3a:	83 c4 1c             	add    esp,0x1c
c0023e3d:	5b                   	pop    ebx
c0023e3e:	5e                   	pop    esi
c0023e3f:	5f                   	pop    edi
c0023e40:	5d                   	pop    ebp
c0023e41:	e9 b0 fe ff ff       	jmp    c0023cf6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0023e46 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023e46:	55                   	push   ebp
c0023e47:	57                   	push   edi
c0023e48:	56                   	push   esi
c0023e49:	53                   	push   ebx
c0023e4a:	31 db                	xor    ebx,ebx
c0023e4c:	83 ec 0c             	sub    esp,0xc
c0023e4f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023e53:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023e57:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0023e5a:	f7 c7 01 00 00 00    	test   edi,0x1
c0023e60:	0f 84 aa 00 00 00    	je     c0023f10 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023e66:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023e6a:	89 d8                	mov    eax,ebx
c0023e6c:	c1 e0 07             	shl    eax,0x7
c0023e6f:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0023e76:	55                   	push   ebp
c0023e77:	56                   	push   esi
c0023e78:	e8 31 fe ff ff       	call   c0023cae <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0023e7d:	5a                   	pop    edx
c0023e7e:	83 f8 01             	cmp    eax,0x1
c0023e81:	59                   	pop    ecx
c0023e82:	75 30                	jne    c0023eb4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c0023e84:	50                   	push   eax
c0023e85:	50                   	push   eax
c0023e86:	53                   	push   ebx
c0023e87:	68 dd cc 02 c0       	push   0xc002ccdd
c0023e8c:	e8 01 f0 fe ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0023e91:	83 c4 0c             	add    esp,0xc
c0023e94:	53                   	push   ebx
c0023e95:	55                   	push   ebp
c0023e96:	56                   	push   esi
c0023e97:	e8 a4 fe ff ff       	call   c0023d40 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023e9c:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023ea3:	e8 98 b9 fe ff       	call   c000f840 <malloc>
c0023ea8:	89 c5                	mov    ebp,eax
c0023eaa:	89 04 24             	mov    DWORD PTR [esp],eax
c0023ead:	e8 60 0d 00 00       	call   c0024c12 <SATA::SATA()>
c0023eb2:	eb 33                	jmp    c0023ee7 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c0023eb4:	83 f8 04             	cmp    eax,0x4
c0023eb7:	75 47                	jne    c0023f00 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c0023eb9:	50                   	push   eax
c0023eba:	50                   	push   eax
c0023ebb:	53                   	push   ebx
c0023ebc:	68 f4 cc 02 c0       	push   0xc002ccf4
c0023ec1:	e8 cc ef fe ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0023ec6:	83 c4 0c             	add    esp,0xc
c0023ec9:	53                   	push   ebx
c0023eca:	55                   	push   ebp
c0023ecb:	56                   	push   esi
c0023ecc:	e8 6f fe ff ff       	call   c0023d40 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023ed1:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023ed8:	e8 63 b9 fe ff       	call   c000f840 <malloc>
c0023edd:	89 c5                	mov    ebp,eax
c0023edf:	89 04 24             	mov    DWORD PTR [esp],eax
c0023ee2:	e8 d7 10 00 00       	call   c0024fbe <SATAPI::SATAPI()>
c0023ee7:	5a                   	pop    edx
c0023ee8:	59                   	pop    ecx
c0023ee9:	55                   	push   ebp
c0023eea:	56                   	push   esi
c0023eeb:	e8 c8 03 ff ff       	call   c00142b8 <Device::addChild(Device*)>
c0023ef0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0023ef3:	56                   	push   esi
c0023ef4:	6a 00                	push   0x0
c0023ef6:	53                   	push   ebx
c0023ef7:	55                   	push   ebp
c0023ef8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023efb:	83 c4 20             	add    esp,0x20
c0023efe:	eb 10                	jmp    c0023f10 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023f00:	50                   	push   eax
c0023f01:	50                   	push   eax
c0023f02:	53                   	push   ebx
c0023f03:	68 0d cd 02 c0       	push   0xc002cd0d
c0023f08:	e8 85 ef fe ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0023f0d:	83 c4 10             	add    esp,0x10
c0023f10:	d1 ef                	shr    edi,1
c0023f12:	43                   	inc    ebx
c0023f13:	83 fb 20             	cmp    ebx,0x20
c0023f16:	0f 85 3e ff ff ff    	jne    c0023e5a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0023f1c:	83 c4 0c             	add    esp,0xc
c0023f1f:	5b                   	pop    ebx
c0023f20:	5e                   	pop    esi
c0023f21:	5f                   	pop    edi
c0023f22:	5d                   	pop    ebp
c0023f23:	c3                   	ret    

c0023f24 <SATABus::open(int, int, void*)>:
c0023f24:	83 ec 14             	sub    esp,0x14
c0023f27:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023f2b:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0023f31:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0023f37:	52                   	push   edx
c0023f38:	50                   	push   eax
c0023f39:	e8 08 ff ff ff       	call   c0023e46 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0023f3e:	31 c0                	xor    eax,eax
c0023f40:	83 c4 1c             	add    esp,0x1c
c0023f43:	c3                   	ret    

c0023f44 <ATA::close(int, int, void*)>:
c0023f44:	83 ec 0c             	sub    esp,0xc
c0023f47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023f4b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023f51:	85 c0                	test   eax,eax
c0023f53:	74 0c                	je     c0023f61 <ATA::close(int, int, void*)+0x1d>
c0023f55:	83 ec 0c             	sub    esp,0xc
c0023f58:	8b 10                	mov    edx,DWORD PTR [eax]
c0023f5a:	50                   	push   eax
c0023f5b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023f5e:	83 c4 10             	add    esp,0x10
c0023f61:	31 c0                	xor    eax,eax
c0023f63:	83 c4 0c             	add    esp,0xc
c0023f66:	c3                   	ret    
c0023f67:	90                   	nop

c0023f68 <ATA::powerSaving(PowerSavingLevel)>:
c0023f68:	c3                   	ret    
c0023f69:	90                   	nop

c0023f6a <ATA::ATA()>:
c0023f6a:	83 ec 0c             	sub    esp,0xc
c0023f6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023f71:	83 ec 04             	sub    esp,0x4
c0023f74:	68 00 02 00 00       	push   0x200
c0023f79:	68 f5 cd 02 c0       	push   0xc002cdf5
c0023f7e:	50                   	push   eax
c0023f7f:	e8 58 07 ff ff       	call   c00146dc <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023f84:	83 c4 10             	add    esp,0x10
c0023f87:	ba 78 cd 02 c0       	mov    edx,0xc002cd78
c0023f8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023f90:	89 10                	mov    DWORD PTR [eax],edx
c0023f92:	90                   	nop
c0023f93:	83 c4 0c             	add    esp,0xc
c0023f96:	c3                   	ret    
c0023f97:	90                   	nop

c0023f98 <ATA::flush(bool)>:
c0023f98:	53                   	push   ebx
c0023f99:	83 ec 08             	sub    esp,0x8
c0023f9c:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0023fa1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023fa5:	19 c0                	sbb    eax,eax
c0023fa7:	83 e0 fd             	and    eax,0xfffffffd
c0023faa:	05 ea 00 00 00       	add    eax,0xea
c0023faf:	50                   	push   eax
c0023fb0:	6a 07                	push   0x7
c0023fb2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023fb9:	50                   	push   eax
c0023fba:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023fc0:	e8 dd ef ff ff       	call   c0022fa2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023fc5:	83 c4 0c             	add    esp,0xc
c0023fc8:	6a 00                	push   0x0
c0023fca:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023fd1:	50                   	push   eax
c0023fd2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023fd8:	e8 71 fb ff ff       	call   c0023b4e <IDE::polling(unsigned char, unsigned int)>
c0023fdd:	83 c4 18             	add    esp,0x18
c0023fe0:	5b                   	pop    ebx
c0023fe1:	c3                   	ret    

c0023fe2 <ATA::readyForCommand()>:
c0023fe2:	56                   	push   esi
c0023fe3:	53                   	push   ebx
c0023fe4:	31 db                	xor    ebx,ebx
c0023fe6:	50                   	push   eax
c0023fe7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023feb:	50                   	push   eax
c0023fec:	6a 0c                	push   0xc
c0023fee:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0023ff5:	50                   	push   eax
c0023ff6:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0023ffc:	e8 61 f0 ff ff       	call   c0023062 <IDE::read(unsigned char, unsigned char)>
c0024001:	83 c4 10             	add    esp,0x10
c0024004:	a8 88                	test   al,0x88
c0024006:	74 23                	je     c002402b <ATA::readyForCommand()+0x49>
c0024008:	43                   	inc    ebx
c0024009:	83 fb 63             	cmp    ebx,0x63
c002400c:	7e dd                	jle    c0023feb <ATA::readyForCommand()+0x9>
c002400e:	51                   	push   ecx
c002400f:	51                   	push   ecx
c0024010:	6a 00                	push   0x0
c0024012:	68 40 42 0f 00       	push   0xf4240
c0024017:	e8 9a a2 ff ff       	call   c001e2b6 <nanoSleep(unsigned long long)>
c002401c:	83 c4 10             	add    esp,0x10
c002401f:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024025:	75 c4                	jne    c0023feb <ATA::readyForCommand()+0x9>
c0024027:	31 c0                	xor    eax,eax
c0024029:	eb 02                	jmp    c002402d <ATA::readyForCommand()+0x4b>
c002402b:	b0 01                	mov    al,0x1
c002402d:	5a                   	pop    edx
c002402e:	5b                   	pop    ebx
c002402f:	5e                   	pop    esi
c0024030:	c3                   	ret    
c0024031:	90                   	nop

c0024032 <ATA::access(unsigned long long, int, void*, bool)>:
c0024032:	55                   	push   ebp
c0024033:	57                   	push   edi
c0024034:	56                   	push   esi
c0024035:	53                   	push   ebx
c0024036:	83 ec 2c             	sub    esp,0x2c
c0024039:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002403d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024041:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024045:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024049:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c002404d:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0024051:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024055:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c002405b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002405f:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024065:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0024069:	c1 e0 06             	shl    eax,0x6
c002406c:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0024074:	74 5d                	je     c00240d3 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0024076:	89 fa                	mov    edx,edi
c0024078:	89 f0                	mov    eax,esi
c002407a:	0f ac d0 1c          	shrd   eax,edx,0x1c
c002407e:	c1 ea 1c             	shr    edx,0x1c
c0024081:	89 d1                	mov    ecx,edx
c0024083:	09 c1                	or     ecx,eax
c0024085:	74 25                	je     c00240ac <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0024087:	31 ed                	xor    ebp,ebp
c0024089:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0024090:	89 fa                	mov    edx,edi
c0024092:	89 f0                	mov    eax,esi
c0024094:	0f ad d0             	shrd   eax,edx,cl
c0024097:	d3 ea                	shr    edx,cl
c0024099:	f6 c1 20             	test   cl,0x20
c002409c:	74 02                	je     c00240a0 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c002409e:	89 d0                	mov    eax,edx
c00240a0:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c00240a4:	45                   	inc    ebp
c00240a5:	83 fd 06             	cmp    ebp,0x6
c00240a8:	75 df                	jne    c0024089 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c00240aa:	eb 76                	jmp    c0024122 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c00240ac:	89 f0                	mov    eax,esi
c00240ae:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c00240b3:	89 fa                	mov    edx,edi
c00240b5:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00240bc:	0f ac d0 10          	shrd   eax,edx,0x10
c00240c0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00240c5:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00240c9:	c1 ee 18             	shr    esi,0x18
c00240cc:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c00240d1:	eb 56                	jmp    c0024129 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c00240d3:	6a 00                	push   0x0
c00240d5:	6a 3f                	push   0x3f
c00240d7:	57                   	push   edi
c00240d8:	56                   	push   esi
c00240d9:	e8 8e 29 00 00       	call   c0026a6c <__umoddi3>
c00240de:	83 c4 10             	add    esp,0x10
c00240e1:	40                   	inc    eax
c00240e2:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c00240e6:	6a 00                	push   0x0
c00240e8:	68 f0 03 00 00       	push   0x3f0
c00240ed:	57                   	push   edi
c00240ee:	56                   	push   esi
c00240ef:	e8 78 28 00 00       	call   c002696c <__udivdi3>
c00240f4:	83 c4 10             	add    esp,0x10
c00240f7:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c00240fc:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024103:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024108:	6a 00                	push   0x0
c002410a:	6a 3f                	push   0x3f
c002410c:	57                   	push   edi
c002410d:	56                   	push   esi
c002410e:	e8 59 28 00 00       	call   c002696c <__udivdi3>
c0024113:	83 c4 10             	add    esp,0x10
c0024116:	89 c6                	mov    esi,eax
c0024118:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c002411d:	83 e6 0f             	and    esi,0xf
c0024120:	eb 07                	jmp    c0024129 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024122:	31 f6                	xor    esi,esi
c0024124:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0024129:	bf 01 00 00 00       	mov    edi,0x1
c002412e:	50                   	push   eax
c002412f:	6a 00                	push   0x0
c0024131:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024138:	50                   	push   eax
c0024139:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002413d:	e8 6c f0 ff ff       	call   c00231ae <IDE::enableIRQs(unsigned char, bool)>
c0024142:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024145:	e8 98 fe ff ff       	call   c0023fe2 <ATA::readyForCommand()>
c002414a:	83 c4 10             	add    esp,0x10
c002414d:	84 c0                	test   al,al
c002414f:	0f 84 5a 02 00 00    	je     c00243af <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024155:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c002415b:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024161:	c1 e0 04             	shl    eax,0x4
c0024164:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c002416b:	09 c6                	or     esi,eax
c002416d:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0024172:	75 05                	jne    c0024179 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0024174:	83 ce a0             	or     esi,0xffffffa0
c0024177:	eb 03                	jmp    c002417c <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0024179:	83 ce e0             	or     esi,0xffffffe0
c002417c:	89 f0                	mov    eax,esi
c002417e:	0f b6 f0             	movzx  esi,al
c0024181:	56                   	push   esi
c0024182:	6a 06                	push   0x6
c0024184:	51                   	push   ecx
c0024185:	52                   	push   edx
c0024186:	e8 17 ee ff ff       	call   c0022fa2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002418b:	83 c4 10             	add    esp,0x10
c002418e:	6a 00                	push   0x0
c0024190:	6a 01                	push   0x1
c0024192:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024199:	50                   	push   eax
c002419a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00241a0:	e8 fd ed ff ff       	call   c0022fa2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00241a5:	83 c4 10             	add    esp,0x10
c00241a8:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00241ad:	75 6e                	jne    c002421d <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c00241af:	6a 00                	push   0x0
c00241b1:	6a 08                	push   0x8
c00241b3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241ba:	50                   	push   eax
c00241bb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00241c1:	e8 dc ed ff ff       	call   c0022fa2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00241c6:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00241cb:	50                   	push   eax
c00241cc:	6a 09                	push   0x9
c00241ce:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241d5:	50                   	push   eax
c00241d6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00241dc:	e8 c1 ed ff ff       	call   c0022fa2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00241e1:	83 c4 20             	add    esp,0x20
c00241e4:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c00241e9:	50                   	push   eax
c00241ea:	6a 0a                	push   0xa
c00241ec:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241f3:	50                   	push   eax
c00241f4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00241fa:	e8 a3 ed ff ff       	call   c0022fa2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00241ff:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0024204:	50                   	push   eax
c0024205:	6a 0b                	push   0xb
c0024207:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002420e:	50                   	push   eax
c002420f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024215:	e8 88 ed ff ff       	call   c0022fa2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002421a:	83 c4 20             	add    esp,0x20
c002421d:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0024222:	50                   	push   eax
c0024223:	6a 02                	push   0x2
c0024225:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002422c:	50                   	push   eax
c002422d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024233:	e8 6a ed ff ff       	call   c0022fa2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024238:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c002423d:	50                   	push   eax
c002423e:	6a 03                	push   0x3
c0024240:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024247:	50                   	push   eax
c0024248:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002424e:	e8 4f ed ff ff       	call   c0022fa2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024253:	83 c4 20             	add    esp,0x20
c0024256:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c002425b:	50                   	push   eax
c002425c:	6a 04                	push   0x4
c002425e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024265:	50                   	push   eax
c0024266:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002426c:	e8 31 ed ff ff       	call   c0022fa2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024271:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0024276:	50                   	push   eax
c0024277:	6a 05                	push   0x5
c0024279:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024280:	50                   	push   eax
c0024281:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024287:	e8 16 ed ff ff       	call   c0022fa2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002428c:	83 c4 20             	add    esp,0x20
c002428f:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024294:	0f 94 c0             	sete   al
c0024297:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002429c:	74 09                	je     c00242a7 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c002429e:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c00242a5:	eb 07                	jmp    c00242ae <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c00242a7:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c00242ae:	0f b6 c0             	movzx  eax,al
c00242b1:	50                   	push   eax
c00242b2:	6a 07                	push   0x7
c00242b4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242bb:	50                   	push   eax
c00242bc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242c2:	e8 db ec ff ff       	call   c0022fa2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242c7:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c00242cb:	83 c4 10             	add    esp,0x10
c00242ce:	85 f6                	test   esi,esi
c00242d0:	0f 84 ba 00 00 00    	je     c0024390 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c00242d6:	50                   	push   eax
c00242d7:	6a 01                	push   0x1
c00242d9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242e0:	50                   	push   eax
c00242e1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242e7:	e8 62 f8 ff ff       	call   c0023b4e <IDE::polling(unsigned char, unsigned int)>
c00242ec:	83 c4 10             	add    esp,0x10
c00242ef:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c00242f5:	84 c0                	test   al,al
c00242f7:	74 2c                	je     c0024325 <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c00242f9:	0f b6 f8             	movzx  edi,al
c00242fc:	0f b6 d2             	movzx  edx,dl
c00242ff:	57                   	push   edi
c0024300:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0024307:	50                   	push   eax
c0024308:	52                   	push   edx
c0024309:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002430f:	e8 a4 f6 ff ff       	call   c00239b8 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024314:	c7 04 24 50 cd 02 c0 	mov    DWORD PTR [esp],0xc002cd50
c002431b:	e8 72 eb fe ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0024320:	e9 87 00 00 00       	jmp    c00243ac <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c0024325:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c002432a:	74 33                	je     c002435f <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c002432c:	31 ed                	xor    ebp,ebp
c002432e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024332:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0024336:	50                   	push   eax
c0024337:	50                   	push   eax
c0024338:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002433f:	50                   	push   eax
c0024340:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024346:	e8 45 ec ff ff       	call   c0022f90 <IDE::getBase(unsigned char)>
c002434b:	89 c2                	mov    edx,eax
c002434d:	89 f8                	mov    eax,edi
c002434f:	66 ef                	out    dx,ax
c0024351:	45                   	inc    ebp
c0024352:	83 c4 10             	add    esp,0x10
c0024355:	81 fd 00 01 00 00    	cmp    ebp,0x100
c002435b:	75 d1                	jne    c002432e <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c002435d:	eb 23                	jmp    c0024382 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c002435f:	0f b6 d2             	movzx  edx,dl
c0024362:	51                   	push   ecx
c0024363:	51                   	push   ecx
c0024364:	52                   	push   edx
c0024365:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002436b:	e8 20 ec ff ff       	call   c0022f90 <IDE::getBase(unsigned char)>
c0024370:	b9 00 01 00 00       	mov    ecx,0x100
c0024375:	89 c2                	mov    edx,eax
c0024377:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c002437b:	fc                   	cld    
c002437c:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c002437f:	83 c4 10             	add    esp,0x10
c0024382:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c002438a:	4e                   	dec    esi
c002438b:	e9 3e ff ff ff       	jmp    c00242ce <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c0024390:	31 ff                	xor    edi,edi
c0024392:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024397:	74 16                	je     c00243af <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024399:	50                   	push   eax
c002439a:	50                   	push   eax
c002439b:	31 c0                	xor    eax,eax
c002439d:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c00243a2:	0f 94 c0             	sete   al
c00243a5:	50                   	push   eax
c00243a6:	53                   	push   ebx
c00243a7:	e8 ec fb ff ff       	call   c0023f98 <ATA::flush(bool)>
c00243ac:	83 c4 10             	add    esp,0x10
c00243af:	83 c4 2c             	add    esp,0x2c
c00243b2:	89 f8                	mov    eax,edi
c00243b4:	5b                   	pop    ebx
c00243b5:	5e                   	pop    esi
c00243b6:	5f                   	pop    edi
c00243b7:	5d                   	pop    ebp
c00243b8:	c3                   	ret    
c00243b9:	90                   	nop

c00243ba <ATA::read(unsigned long long, int, void*)>:
c00243ba:	57                   	push   edi
c00243bb:	b8 04 00 00 00       	mov    eax,0x4
c00243c0:	56                   	push   esi
c00243c1:	53                   	push   ebx
c00243c2:	83 ec 10             	sub    esp,0x10
c00243c5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00243c9:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00243cd:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00243d0:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00243d4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00243d8:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00243de:	77 3b                	ja     c002441b <ATA::read(unsigned long long, int, void*)+0x61>
c00243e0:	b8 06 00 00 00       	mov    eax,0x6
c00243e5:	85 d2                	test   edx,edx
c00243e7:	74 32                	je     c002441b <ATA::read(unsigned long long, int, void*)+0x61>
c00243e9:	50                   	push   eax
c00243ea:	50                   	push   eax
c00243eb:	6a 00                	push   0x0
c00243ed:	52                   	push   edx
c00243ee:	53                   	push   ebx
c00243ef:	57                   	push   edi
c00243f0:	56                   	push   esi
c00243f1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00243f5:	e8 38 fc ff ff       	call   c0024032 <ATA::access(unsigned long long, int, void*, bool)>
c00243fa:	83 c4 20             	add    esp,0x20
c00243fd:	85 c0                	test   eax,eax
c00243ff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024403:	75 11                	jne    c0024416 <ATA::read(unsigned long long, int, void*)+0x5c>
c0024405:	01 1d e8 26 03 c0    	add    DWORD PTR ds:0xc00326e8,ebx
c002440b:	e8 80 c5 fe ff       	call   c0010990 <VgaText::updateDiskUsage()>
c0024410:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024414:	eb 05                	jmp    c002441b <ATA::read(unsigned long long, int, void*)+0x61>
c0024416:	b8 01 00 00 00       	mov    eax,0x1
c002441b:	83 c4 10             	add    esp,0x10
c002441e:	5b                   	pop    ebx
c002441f:	5e                   	pop    esi
c0024420:	5f                   	pop    edi
c0024421:	c3                   	ret    

c0024422 <ATA::write(unsigned long long, int, void*)>:
c0024422:	57                   	push   edi
c0024423:	b8 04 00 00 00       	mov    eax,0x4
c0024428:	56                   	push   esi
c0024429:	53                   	push   ebx
c002442a:	83 ec 10             	sub    esp,0x10
c002442d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024431:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024435:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024438:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002443c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024440:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024446:	77 3b                	ja     c0024483 <ATA::write(unsigned long long, int, void*)+0x61>
c0024448:	b8 06 00 00 00       	mov    eax,0x6
c002444d:	85 d2                	test   edx,edx
c002444f:	74 32                	je     c0024483 <ATA::write(unsigned long long, int, void*)+0x61>
c0024451:	50                   	push   eax
c0024452:	50                   	push   eax
c0024453:	6a 01                	push   0x1
c0024455:	52                   	push   edx
c0024456:	53                   	push   ebx
c0024457:	57                   	push   edi
c0024458:	56                   	push   esi
c0024459:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002445d:	e8 d0 fb ff ff       	call   c0024032 <ATA::access(unsigned long long, int, void*, bool)>
c0024462:	83 c4 20             	add    esp,0x20
c0024465:	85 c0                	test   eax,eax
c0024467:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002446b:	75 11                	jne    c002447e <ATA::write(unsigned long long, int, void*)+0x5c>
c002446d:	01 1d e4 26 03 c0    	add    DWORD PTR ds:0xc00326e4,ebx
c0024473:	e8 18 c5 fe ff       	call   c0010990 <VgaText::updateDiskUsage()>
c0024478:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002447c:	eb 05                	jmp    c0024483 <ATA::write(unsigned long long, int, void*)+0x61>
c002447e:	b8 01 00 00 00       	mov    eax,0x1
c0024483:	83 c4 10             	add    esp,0x10
c0024486:	5b                   	pop    ebx
c0024487:	5e                   	pop    esi
c0024488:	5f                   	pop    edi
c0024489:	c3                   	ret    

c002448a <ATA::detectCHS()>:
c002448a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002448e:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0024494:	c1 e0 06             	shl    eax,0x6
c0024497:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c002449d:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c00244a7:	c7 44 24 04 5b cd 02 c0 	mov    DWORD PTR [esp+0x4],0xc002cd5b
c00244af:	e9 b9 60 ff ff       	jmp    c001a56d <Krnl::panic(char const*)>

c00244b4 <ATA::open(int, int, void*)>:
c00244b4:	53                   	push   ebx
c00244b5:	83 ec 08             	sub    esp,0x8
c00244b8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00244bc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00244c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00244c4:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00244ca:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00244d0:	c1 e0 06             	shl    eax,0x6
c00244d3:	01 d0                	add    eax,edx
c00244d5:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c00244dc:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c00244e2:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c00244e9:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00244f3:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c00244f9:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024500:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0024507:	75 0c                	jne    c0024515 <ATA::open(int, int, void*)+0x61>
c0024509:	83 ec 0c             	sub    esp,0xc
c002450c:	53                   	push   ebx
c002450d:	e8 78 ff ff ff       	call   c002448a <ATA::detectCHS()>
c0024512:	83 c4 10             	add    esp,0x10
c0024515:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002451b:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024521:	c1 e0 06             	shl    eax,0x6
c0024524:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c002452b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024535:	d1 e8                	shr    eax,1
c0024537:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c002453d:	6a 04                	push   0x4
c002453f:	6a 0c                	push   0xc
c0024541:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024548:	50                   	push   eax
c0024549:	52                   	push   edx
c002454a:	e8 53 ea ff ff       	call   c0022fa2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002454f:	90                   	nop
c0024550:	90                   	nop
c0024551:	6a 00                	push   0x0
c0024553:	6a 0c                	push   0xc
c0024555:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002455c:	50                   	push   eax
c002455d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024563:	e8 3a ea ff ff       	call   c0022fa2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024568:	83 c4 14             	add    esp,0x14
c002456b:	53                   	push   ebx
c002456c:	e8 d3 01 ff ff       	call   c0014744 <PhysicalDisk::startCache()>
c0024571:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024574:	e8 77 23 ff ff       	call   c00168f0 <createPartitionsForDisk(PhysicalDisk*)>
c0024579:	31 c0                	xor    eax,eax
c002457b:	83 c4 18             	add    esp,0x18
c002457e:	5b                   	pop    ebx
c002457f:	c3                   	ret    

c0024580 <ATAPI::write(unsigned long long, int, void*)>:
c0024580:	b8 03 00 00 00       	mov    eax,0x3
c0024585:	c3                   	ret    

c0024586 <ATAPI::close(int, int, void*)>:
c0024586:	83 ec 0c             	sub    esp,0xc
c0024589:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002458d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024593:	85 c0                	test   eax,eax
c0024595:	74 0c                	je     c00245a3 <ATAPI::close(int, int, void*)+0x1d>
c0024597:	83 ec 0c             	sub    esp,0xc
c002459a:	8b 10                	mov    edx,DWORD PTR [eax]
c002459c:	50                   	push   eax
c002459d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00245a0:	83 c4 10             	add    esp,0x10
c00245a3:	31 c0                	xor    eax,eax
c00245a5:	83 c4 0c             	add    esp,0xc
c00245a8:	c3                   	ret    
c00245a9:	90                   	nop

c00245aa <ATAPI::ATAPI()>:
c00245aa:	83 ec 0c             	sub    esp,0xc
c00245ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00245b1:	83 ec 04             	sub    esp,0x4
c00245b4:	68 00 08 00 00       	push   0x800
c00245b9:	68 95 ce 02 c0       	push   0xc002ce95
c00245be:	50                   	push   eax
c00245bf:	e8 18 01 ff ff       	call   c00146dc <PhysicalDisk::PhysicalDisk(char const*, int)>
c00245c4:	83 c4 10             	add    esp,0x10
c00245c7:	ba b0 cd 02 c0       	mov    edx,0xc002cdb0
c00245cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00245d0:	89 10                	mov    DWORD PTR [eax],edx
c00245d2:	90                   	nop
c00245d3:	83 c4 0c             	add    esp,0xc
c00245d6:	c3                   	ret    
c00245d7:	90                   	nop

c00245d8 <ATAPI::readyForCommand()>:
c00245d8:	56                   	push   esi
c00245d9:	53                   	push   ebx
c00245da:	31 db                	xor    ebx,ebx
c00245dc:	50                   	push   eax
c00245dd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00245e1:	50                   	push   eax
c00245e2:	6a 0c                	push   0xc
c00245e4:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00245eb:	50                   	push   eax
c00245ec:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00245f2:	e8 6b ea ff ff       	call   c0023062 <IDE::read(unsigned char, unsigned char)>
c00245f7:	83 c4 10             	add    esp,0x10
c00245fa:	a8 88                	test   al,0x88
c00245fc:	74 23                	je     c0024621 <ATAPI::readyForCommand()+0x49>
c00245fe:	43                   	inc    ebx
c00245ff:	83 fb 63             	cmp    ebx,0x63
c0024602:	7e dd                	jle    c00245e1 <ATAPI::readyForCommand()+0x9>
c0024604:	51                   	push   ecx
c0024605:	51                   	push   ecx
c0024606:	6a 00                	push   0x0
c0024608:	68 40 42 0f 00       	push   0xf4240
c002460d:	e8 a4 9c ff ff       	call   c001e2b6 <nanoSleep(unsigned long long)>
c0024612:	83 c4 10             	add    esp,0x10
c0024615:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c002461b:	75 c4                	jne    c00245e1 <ATAPI::readyForCommand()+0x9>
c002461d:	31 c0                	xor    eax,eax
c002461f:	eb 02                	jmp    c0024623 <ATAPI::readyForCommand()+0x4b>
c0024621:	b0 01                	mov    al,0x1
c0024623:	5a                   	pop    edx
c0024624:	5b                   	pop    ebx
c0024625:	5e                   	pop    esi
c0024626:	c3                   	ret    
c0024627:	90                   	nop

c0024628 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0024628:	55                   	push   ebp
c0024629:	57                   	push   edi
c002462a:	56                   	push   esi
c002462b:	53                   	push   ebx
c002462c:	83 ec 20             	sub    esp,0x20
c002462f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0024633:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0024637:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c002463b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002463f:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024643:	6a 01                	push   0x1
c0024645:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002464c:	50                   	push   eax
c002464d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024653:	e8 56 eb ff ff       	call   c00231ae <IDE::enableIRQs(unsigned char, bool)>
c0024658:	5e                   	pop    esi
c0024659:	58                   	pop    eax
c002465a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024661:	50                   	push   eax
c0024662:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024668:	e8 0f e9 ff ff       	call   c0022f7c <IDE::prepareInterrupt(unsigned char)>
c002466d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024670:	e8 63 ff ff ff       	call   c00245d8 <ATAPI::readyForCommand()>
c0024675:	83 c4 10             	add    esp,0x10
c0024678:	84 c0                	test   al,al
c002467a:	75 0a                	jne    c0024686 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c002467c:	bb 01 00 00 00       	mov    ebx,0x1
c0024681:	e9 57 02 00 00       	jmp    c00248dd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024686:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c002468c:	c1 e0 04             	shl    eax,0x4
c002468f:	0f b6 c0             	movzx  eax,al
c0024692:	50                   	push   eax
c0024693:	6a 06                	push   0x6
c0024695:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002469c:	50                   	push   eax
c002469d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246a3:	e8 fa e8 ff ff       	call   c0022fa2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00246a8:	6a 00                	push   0x0
c00246aa:	6a 01                	push   0x1
c00246ac:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246b3:	50                   	push   eax
c00246b4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246ba:	e8 e3 e8 ff ff       	call   c0022fa2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00246bf:	83 c4 20             	add    esp,0x20
c00246c2:	0f b6 c3             	movzx  eax,bl
c00246c5:	0f b6 df             	movzx  ebx,bh
c00246c8:	50                   	push   eax
c00246c9:	6a 04                	push   0x4
c00246cb:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246d2:	50                   	push   eax
c00246d3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246d9:	e8 c4 e8 ff ff       	call   c0022fa2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00246de:	53                   	push   ebx
c00246df:	6a 05                	push   0x5
c00246e1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246e8:	50                   	push   eax
c00246e9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246ef:	e8 ae e8 ff ff       	call   c0022fa2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00246f4:	83 c4 20             	add    esp,0x20
c00246f7:	68 a0 00 00 00       	push   0xa0
c00246fc:	6a 07                	push   0x7
c00246fe:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024705:	50                   	push   eax
c0024706:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002470c:	e8 91 e8 ff ff       	call   c0022fa2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024711:	83 c4 0c             	add    esp,0xc
c0024714:	6a 01                	push   0x1
c0024716:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002471d:	50                   	push   eax
c002471e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024724:	e8 25 f4 ff ff       	call   c0023b4e <IDE::polling(unsigned char, unsigned int)>
c0024729:	83 c4 10             	add    esp,0x10
c002472c:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0024732:	84 c0                	test   al,al
c0024734:	74 23                	je     c0024759 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0024736:	0f b6 d8             	movzx  ebx,al
c0024739:	0f b6 d2             	movzx  edx,dl
c002473c:	53                   	push   ebx
c002473d:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0024744:	50                   	push   eax
c0024745:	52                   	push   edx
c0024746:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002474c:	e8 67 f2 ff ff       	call   c00239b8 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024751:	83 c4 10             	add    esp,0x10
c0024754:	e9 84 01 00 00       	jmp    c00248dd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024759:	0f b6 d2             	movzx  edx,dl
c002475c:	53                   	push   ebx
c002475d:	53                   	push   ebx
c002475e:	52                   	push   edx
c002475f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024765:	e8 26 e8 ff ff       	call   c0022f90 <IDE::getBase(unsigned char)>
c002476a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002476e:	b9 06 00 00 00       	mov    ecx,0x6
c0024773:	89 c2                	mov    edx,eax
c0024775:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0024778:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c002477c:	83 c4 10             	add    esp,0x10
c002477f:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024785:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002478c:	85 db                	test   ebx,ebx
c002478e:	0f 84 ec 00 00 00    	je     c0024880 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0024794:	51                   	push   ecx
c0024795:	51                   	push   ecx
c0024796:	52                   	push   edx
c0024797:	50                   	push   eax
c0024798:	e8 73 e9 ff ff       	call   c0023110 <IDE::waitInterrupt(unsigned char)>
c002479d:	83 c4 10             	add    esp,0x10
c00247a0:	84 c0                	test   al,al
c00247a2:	0f 84 d4 fe ff ff    	je     c002467c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00247a8:	56                   	push   esi
c00247a9:	56                   	push   esi
c00247aa:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247b1:	50                   	push   eax
c00247b2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247b8:	e8 bf e7 ff ff       	call   c0022f7c <IDE::prepareInterrupt(unsigned char)>
c00247bd:	83 c4 0c             	add    esp,0xc
c00247c0:	6a 04                	push   0x4
c00247c2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247c9:	50                   	push   eax
c00247ca:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247d0:	e8 8d e8 ff ff       	call   c0023062 <IDE::read(unsigned char, unsigned char)>
c00247d5:	83 c4 0c             	add    esp,0xc
c00247d8:	89 c6                	mov    esi,eax
c00247da:	6a 05                	push   0x5
c00247dc:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247e3:	50                   	push   eax
c00247e4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247ea:	e8 73 e8 ff ff       	call   c0023062 <IDE::read(unsigned char, unsigned char)>
c00247ef:	89 f1                	mov    ecx,esi
c00247f1:	0f b6 c0             	movzx  eax,al
c00247f4:	0f b6 f1             	movzx  esi,cl
c00247f7:	c1 e0 08             	shl    eax,0x8
c00247fa:	09 c6                	or     esi,eax
c00247fc:	d1 fe                	sar    esi,1
c00247fe:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0024802:	83 c4 10             	add    esp,0x10
c0024805:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c002480a:	74 41                	je     c002484d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c002480c:	31 c9                	xor    ecx,ecx
c002480e:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024814:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002481b:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c002481f:	75 0a                	jne    c002482b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0024821:	01 c9                	add    ecx,ecx
c0024823:	01 cd                	add    ebp,ecx
c0024825:	4b                   	dec    ebx
c0024826:	e9 54 ff ff ff       	jmp    c002477f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c002482b:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0024830:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0024834:	51                   	push   ecx
c0024835:	51                   	push   ecx
c0024836:	52                   	push   edx
c0024837:	50                   	push   eax
c0024838:	e8 53 e7 ff ff       	call   c0022f90 <IDE::getBase(unsigned char)>
c002483d:	89 c2                	mov    edx,eax
c002483f:	89 f0                	mov    eax,esi
c0024841:	66 ef                	out    dx,ax
c0024843:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0024847:	83 c4 10             	add    esp,0x10
c002484a:	41                   	inc    ecx
c002484b:	eb c1                	jmp    c002480e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c002484d:	31 f6                	xor    esi,esi
c002484f:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024855:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002485c:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0024860:	75 06                	jne    c0024868 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0024862:	01 f6                	add    esi,esi
c0024864:	01 f5                	add    ebp,esi
c0024866:	eb bd                	jmp    c0024825 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0024868:	51                   	push   ecx
c0024869:	51                   	push   ecx
c002486a:	52                   	push   edx
c002486b:	50                   	push   eax
c002486c:	e8 1f e7 ff ff       	call   c0022f90 <IDE::getBase(unsigned char)>
c0024871:	89 c2                	mov    edx,eax
c0024873:	66 ed                	in     ax,dx
c0024875:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c002487a:	83 c4 10             	add    esp,0x10
c002487d:	46                   	inc    esi
c002487e:	eb cf                	jmp    c002484f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0024880:	51                   	push   ecx
c0024881:	51                   	push   ecx
c0024882:	52                   	push   edx
c0024883:	50                   	push   eax
c0024884:	e8 87 e8 ff ff       	call   c0023110 <IDE::waitInterrupt(unsigned char)>
c0024889:	83 c4 10             	add    esp,0x10
c002488c:	84 c0                	test   al,al
c002488e:	0f 84 e8 fd ff ff    	je     c002467c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024894:	bb a0 86 01 00       	mov    ebx,0x186a0
c0024899:	52                   	push   edx
c002489a:	52                   	push   edx
c002489b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00248a2:	50                   	push   eax
c00248a3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00248a9:	e8 ce e6 ff ff       	call   c0022f7c <IDE::prepareInterrupt(unsigned char)>
c00248ae:	83 c4 10             	add    esp,0x10
c00248b1:	50                   	push   eax
c00248b2:	50                   	push   eax
c00248b3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00248ba:	50                   	push   eax
c00248bb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00248c1:	e8 ca e6 ff ff       	call   c0022f90 <IDE::getBase(unsigned char)>
c00248c6:	8d 50 07             	lea    edx,[eax+0x7]
c00248c9:	ec                   	in     al,dx
c00248ca:	83 c4 10             	add    esp,0x10
c00248cd:	a8 88                	test   al,0x88
c00248cf:	74 0a                	je     c00248db <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c00248d1:	4b                   	dec    ebx
c00248d2:	75 dd                	jne    c00248b1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c00248d4:	bb 02 00 00 00       	mov    ebx,0x2
c00248d9:	eb 02                	jmp    c00248dd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00248db:	31 db                	xor    ebx,ebx
c00248dd:	83 c4 1c             	add    esp,0x1c
c00248e0:	89 d8                	mov    eax,ebx
c00248e2:	5b                   	pop    ebx
c00248e3:	5e                   	pop    esi
c00248e4:	5f                   	pop    edi
c00248e5:	5d                   	pop    ebp
c00248e6:	c3                   	ret    
c00248e7:	90                   	nop

c00248e8 <ATAPI::diskRemoved()>:
c00248e8:	83 ec 18             	sub    esp,0x18
c00248eb:	68 a1 ce 02 c0       	push   0xc002cea1
c00248f0:	e8 9d e5 fe ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c00248f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00248f9:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0024900:	83 c4 1c             	add    esp,0x1c
c0024903:	c3                   	ret    

c0024904 <ATAPI::eject()>:
c0024904:	57                   	push   edi
c0024905:	b9 03 00 00 00       	mov    ecx,0x3
c002490a:	53                   	push   ebx
c002490b:	83 ec 14             	sub    esp,0x14
c002490e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0024912:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024916:	fc                   	cld    
c0024917:	31 c0                	xor    eax,eax
c0024919:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002491b:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0024920:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0024925:	50                   	push   eax
c0024926:	50                   	push   eax
c0024927:	6a 00                	push   0x0
c0024929:	6a 00                	push   0x0
c002492b:	6a 00                	push   0x0
c002492d:	6a 02                	push   0x2
c002492f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024933:	50                   	push   eax
c0024934:	53                   	push   ebx
c0024935:	e8 ee fc ff ff       	call   c0024628 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002493a:	83 c4 14             	add    esp,0x14
c002493d:	53                   	push   ebx
c002493e:	e8 a5 ff ff ff       	call   c00248e8 <ATAPI::diskRemoved()>
c0024943:	83 c4 24             	add    esp,0x24
c0024946:	31 c0                	xor    eax,eax
c0024948:	5b                   	pop    ebx
c0024949:	5f                   	pop    edi
c002494a:	c3                   	ret    
c002494b:	90                   	nop

c002494c <ATAPI::diskInserted()>:
c002494c:	53                   	push   ebx
c002494d:	83 ec 14             	sub    esp,0x14
c0024950:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024954:	68 b8 ce 02 c0       	push   0xc002ceb8
c0024959:	e8 34 e5 fe ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c002495e:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0024965:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024968:	e8 d7 fd fe ff       	call   c0014744 <PhysicalDisk::startCache()>
c002496d:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024971:	83 c4 18             	add    esp,0x18
c0024974:	5b                   	pop    ebx
c0024975:	e9 76 1f ff ff       	jmp    c00168f0 <createPartitionsForDisk(PhysicalDisk*)>

c002497a <ATAPI::detectMedia()>:
c002497a:	56                   	push   esi
c002497b:	53                   	push   ebx
c002497c:	83 ec 28             	sub    esp,0x28
c002497f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024983:	6a 0c                	push   0xc
c0024985:	6a 00                	push   0x0
c0024987:	8d 74 24 0e          	lea    esi,[esp+0xe]
c002498b:	56                   	push   esi
c002498c:	e8 e7 bd fd ff       	call   c0000778 <memset>
c0024991:	58                   	pop    eax
c0024992:	5a                   	pop    edx
c0024993:	6a 00                	push   0x0
c0024995:	6a 00                	push   0x0
c0024997:	6a 00                	push   0x0
c0024999:	6a 00                	push   0x0
c002499b:	56                   	push   esi
c002499c:	53                   	push   ebx
c002499d:	e8 86 fc ff ff       	call   c0024628 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00249a2:	83 c4 1c             	add    esp,0x1c
c00249a5:	6a 0c                	push   0xc
c00249a7:	6a 00                	push   0x0
c00249a9:	56                   	push   esi
c00249aa:	e8 c9 bd fd ff       	call   c0000778 <memset>
c00249af:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00249b4:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00249b9:	59                   	pop    ecx
c00249ba:	58                   	pop    eax
c00249bb:	6a 01                	push   0x1
c00249bd:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c00249c1:	50                   	push   eax
c00249c2:	6a 00                	push   0x0
c00249c4:	6a 12                	push   0x12
c00249c6:	56                   	push   esi
c00249c7:	53                   	push   ebx
c00249c8:	e8 5b fc ff ff       	call   c0024628 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00249cd:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00249d1:	83 c4 20             	add    esp,0x20
c00249d4:	83 e0 7f             	and    eax,0x7f
c00249d7:	3c 70                	cmp    al,0x70
c00249d9:	74 15                	je     c00249f0 <ATAPI::detectMedia()+0x76>
c00249db:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00249e2:	75 0c                	jne    c00249f0 <ATAPI::detectMedia()+0x76>
c00249e4:	83 ec 0c             	sub    esp,0xc
c00249e7:	53                   	push   ebx
c00249e8:	e8 5f ff ff ff       	call   c002494c <ATAPI::diskInserted()>
c00249ed:	83 c4 10             	add    esp,0x10
c00249f0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00249f4:	83 e0 0f             	and    eax,0xf
c00249f7:	3c 02                	cmp    al,0x2
c00249f9:	75 1b                	jne    c0024a16 <ATAPI::detectMedia()+0x9c>
c00249fb:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0024a00:	75 2d                	jne    c0024a2f <ATAPI::detectMedia()+0xb5>
c0024a02:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024a09:	74 24                	je     c0024a2f <ATAPI::detectMedia()+0xb5>
c0024a0b:	83 ec 0c             	sub    esp,0xc
c0024a0e:	53                   	push   ebx
c0024a0f:	e8 d4 fe ff ff       	call   c00248e8 <ATAPI::diskRemoved()>
c0024a14:	eb 16                	jmp    c0024a2c <ATAPI::detectMedia()+0xb2>
c0024a16:	84 c0                	test   al,al
c0024a18:	75 15                	jne    c0024a2f <ATAPI::detectMedia()+0xb5>
c0024a1a:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024a21:	75 0c                	jne    c0024a2f <ATAPI::detectMedia()+0xb5>
c0024a23:	83 ec 0c             	sub    esp,0xc
c0024a26:	53                   	push   ebx
c0024a27:	e8 20 ff ff ff       	call   c002494c <ATAPI::diskInserted()>
c0024a2c:	83 c4 10             	add    esp,0x10
c0024a2f:	83 c4 24             	add    esp,0x24
c0024a32:	5b                   	pop    ebx
c0024a33:	5e                   	pop    esi
c0024a34:	c3                   	ret    
c0024a35:	90                   	nop

c0024a36 <ATAPI::open(int, int, void*)>:
c0024a36:	53                   	push   ebx
c0024a37:	83 ec 08             	sub    esp,0x8
c0024a3a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024a3e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024a42:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024a46:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024a4c:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024a52:	c1 e0 06             	shl    eax,0x6
c0024a55:	01 d0                	add    eax,edx
c0024a57:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0024a5e:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0024a64:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0024a6b:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024a75:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024a7b:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024a82:	6a 04                	push   0x4
c0024a84:	6a 0c                	push   0xc
c0024a86:	51                   	push   ecx
c0024a87:	52                   	push   edx
c0024a88:	e8 15 e5 ff ff       	call   c0022fa2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024a8d:	90                   	nop
c0024a8e:	90                   	nop
c0024a8f:	6a 00                	push   0x0
c0024a91:	6a 0c                	push   0xc
c0024a93:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024a9a:	50                   	push   eax
c0024a9b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024aa1:	e8 fc e4 ff ff       	call   c0022fa2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024aa6:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0024aad:	83 c4 14             	add    esp,0x14
c0024ab0:	53                   	push   ebx
c0024ab1:	e8 c4 fe ff ff       	call   c002497a <ATAPI::detectMedia()>
c0024ab6:	31 c0                	xor    eax,eax
c0024ab8:	83 c4 18             	add    esp,0x18
c0024abb:	5b                   	pop    ebx
c0024abc:	c3                   	ret    
c0024abd:	90                   	nop

c0024abe <ATAPI::read(unsigned long long, int, void*)>:
c0024abe:	55                   	push   ebp
c0024abf:	57                   	push   edi
c0024ac0:	56                   	push   esi
c0024ac1:	53                   	push   ebx
c0024ac2:	83 ec 1c             	sub    esp,0x1c
c0024ac5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024ac9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024acd:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024ad1:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024ad8:	74 41                	je     c0024b1b <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0024ada:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024ade:	b9 03 00 00 00       	mov    ecx,0x3
c0024ae3:	fc                   	cld    
c0024ae4:	31 c0                	xor    eax,eax
c0024ae6:	86 fb                	xchg   bl,bh
c0024ae8:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024aea:	c1 c3 10             	rol    ebx,0x10
c0024aed:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0024af2:	89 e8                	mov    eax,ebp
c0024af4:	86 fb                	xchg   bl,bh
c0024af6:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0024afa:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0024afe:	50                   	push   eax
c0024aff:	50                   	push   eax
c0024b00:	55                   	push   ebp
c0024b01:	c1 e5 0b             	shl    ebp,0xb
c0024b04:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024b08:	6a 00                	push   0x0
c0024b0a:	55                   	push   ebp
c0024b0b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024b0f:	50                   	push   eax
c0024b10:	56                   	push   esi
c0024b11:	e8 12 fb ff ff       	call   c0024628 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024b16:	83 c4 20             	add    esp,0x20
c0024b19:	eb 1a                	jmp    c0024b35 <ATAPI::read(unsigned long long, int, void*)+0x77>
c0024b1b:	83 ec 0c             	sub    esp,0xc
c0024b1e:	56                   	push   esi
c0024b1f:	e8 56 fe ff ff       	call   c002497a <ATAPI::detectMedia()>
c0024b24:	83 c4 10             	add    esp,0x10
c0024b27:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024b2e:	75 aa                	jne    c0024ada <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0024b30:	b8 02 00 00 00       	mov    eax,0x2
c0024b35:	83 c4 1c             	add    esp,0x1c
c0024b38:	5b                   	pop    ebx
c0024b39:	5e                   	pop    esi
c0024b3a:	5f                   	pop    edi
c0024b3b:	5d                   	pop    ebp
c0024b3c:	c3                   	ret    
c0024b3d:	90                   	nop

c0024b3e <SATA::close(int, int, void*)>:
c0024b3e:	83 ec 0c             	sub    esp,0xc
c0024b41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024b45:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024b4b:	85 c0                	test   eax,eax
c0024b4d:	74 0c                	je     c0024b5b <SATA::close(int, int, void*)+0x1d>
c0024b4f:	83 ec 0c             	sub    esp,0xc
c0024b52:	8b 10                	mov    edx,DWORD PTR [eax]
c0024b54:	50                   	push   eax
c0024b55:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024b58:	83 c4 10             	add    esp,0x10
c0024b5b:	31 c0                	xor    eax,eax
c0024b5d:	83 c4 0c             	add    esp,0xc
c0024b60:	c3                   	ret    
c0024b61:	90                   	nop

c0024b62 <SATA::powerSaving(PowerSavingLevel)>:
c0024b62:	c3                   	ret    
c0024b63:	90                   	nop

c0024b64 <SATA::open(int, int, void*)>:
c0024b64:	56                   	push   esi
c0024b65:	53                   	push   ebx
c0024b66:	50                   	push   eax
c0024b67:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024b6b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024b6f:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024b79:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024b7f:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024b89:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024b8d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024b97:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024b9d:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024ba4:	e8 34 b3 fe ff       	call   c000fedd <Phys::allocatePage()>
c0024ba9:	89 c6                	mov    esi,eax
c0024bab:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024bb1:	81 c6 00 10 00 00    	add    esi,0x1000
c0024bb7:	e8 21 b3 fe ff       	call   c000fedd <Phys::allocatePage()>
c0024bbc:	39 c6                	cmp    esi,eax
c0024bbe:	74 10                	je     c0024bd0 <SATA::open(int, int, void*)+0x6c>
c0024bc0:	83 ec 0c             	sub    esp,0xc
c0024bc3:	68 e0 cd 02 c0       	push   0xc002cde0
c0024bc8:	e8 a0 59 ff ff       	call   c001a56d <Krnl::panic(char const*)>
c0024bcd:	83 c4 10             	add    esp,0x10
c0024bd0:	83 ec 0c             	sub    esp,0xc
c0024bd3:	6a 02                	push   0x2
c0024bd5:	e8 e7 d0 fe ff       	call   c0011cc1 <Virt::allocateKernelVirtualPages(int)>
c0024bda:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024be0:	e8 1a d3 fe ff       	call   c0011eff <Virt::getAKernelVAS()>
c0024be5:	6a 03                	push   0x3
c0024be7:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0024bed:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0024bf3:	50                   	push   eax
c0024bf4:	e8 29 d7 fe ff       	call   c0012322 <VAS::mapPage(unsigned long, unsigned long, int)>
c0024bf9:	83 c4 14             	add    esp,0x14
c0024bfc:	53                   	push   ebx
c0024bfd:	e8 42 fb fe ff       	call   c0014744 <PhysicalDisk::startCache()>
c0024c02:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024c05:	e8 e6 1c ff ff       	call   c00168f0 <createPartitionsForDisk(PhysicalDisk*)>
c0024c0a:	83 c4 14             	add    esp,0x14
c0024c0d:	31 c0                	xor    eax,eax
c0024c0f:	5b                   	pop    ebx
c0024c10:	5e                   	pop    esi
c0024c11:	c3                   	ret    

c0024c12 <SATA::SATA()>:
c0024c12:	83 ec 0c             	sub    esp,0xc
c0024c15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c19:	83 ec 04             	sub    esp,0x4
c0024c1c:	68 00 02 00 00       	push   0x200
c0024c21:	68 f4 cd 02 c0       	push   0xc002cdf4
c0024c26:	50                   	push   eax
c0024c27:	e8 b0 fa fe ff       	call   c00146dc <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024c2c:	83 c4 10             	add    esp,0x10
c0024c2f:	ba 64 ce 02 c0       	mov    edx,0xc002ce64
c0024c34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c38:	89 10                	mov    DWORD PTR [eax],edx
c0024c3a:	90                   	nop
c0024c3b:	83 c4 0c             	add    esp,0xc
c0024c3e:	c3                   	ret    
c0024c3f:	90                   	nop

c0024c40 <SATA::access(unsigned long long, int, void*, bool)>:
c0024c40:	55                   	push   ebp
c0024c41:	57                   	push   edi
c0024c42:	56                   	push   esi
c0024c43:	53                   	push   ebx
c0024c44:	83 ec 2c             	sub    esp,0x2c
c0024c47:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024c4b:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0024c4f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024c53:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0024c57:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024c5b:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0024c60:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024c64:	7e 10                	jle    c0024c76 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0024c66:	83 ec 0c             	sub    esp,0xc
c0024c69:	68 04 ce 02 c0       	push   0xc002ce04
c0024c6e:	e8 fa 58 ff ff       	call   c001a56d <Krnl::panic(char const*)>
c0024c73:	83 c4 10             	add    esp,0x10
c0024c76:	8b b5 6c 01 00 00    	mov    esi,DWORD PTR [ebp+0x16c]
c0024c7c:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0024c82:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024c88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024c8c:	89 f0                	mov    eax,esi
c0024c8e:	c1 e0 07             	shl    eax,0x7
c0024c91:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024c95:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024c9f:	53                   	push   ebx
c0024ca0:	8d 46 02             	lea    eax,[esi+0x2]
c0024ca3:	53                   	push   ebx
c0024ca4:	c1 e0 07             	shl    eax,0x7
c0024ca7:	bb 01 00 00 00       	mov    ebx,0x1
c0024cac:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0024cb0:	50                   	push   eax
c0024cb1:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0024cb7:	e8 aa ef ff ff       	call   c0023c66 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024cbc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0024cc0:	83 c4 10             	add    esp,0x10
c0024cc3:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
c0024cc8:	0f 84 ce 01 00 00    	je     c0024e9c <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024cce:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024cd2:	c1 e0 09             	shl    eax,0x9
c0024cd5:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024cda:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024cde:	74 17                	je     c0024cf7 <SATA::access(unsigned long long, int, void*, bool)+0xb7>
c0024ce0:	51                   	push   ecx
c0024ce1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024ce5:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0024ce9:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024cef:	e8 50 ba fd ff       	call   c0000744 <memcpy>
c0024cf4:	83 c4 10             	add    esp,0x10
c0024cf7:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024cfd:	8d 46 02             	lea    eax,[esi+0x2]
c0024d00:	c1 e0 07             	shl    eax,0x7
c0024d03:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024d07:	8b 00                	mov    eax,DWORD PTR [eax]
c0024d09:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024d0f:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024d15:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024d19:	c1 e1 05             	shl    ecx,0x5
c0024d1c:	01 c8                	add    eax,ecx
c0024d1e:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024d22:	8a 18                	mov    bl,BYTE PTR [eax]
c0024d24:	83 e1 01             	and    ecx,0x1
c0024d27:	83 e3 bf             	and    ebx,0xffffffbf
c0024d2a:	c1 e1 06             	shl    ecx,0x6
c0024d2d:	09 d9                	or     ecx,ebx
c0024d2f:	88 08                	mov    BYTE PTR [eax],cl
c0024d31:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024d33:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0024d39:	81 c9 05 00 01 00    	or     ecx,0x10005
c0024d3f:	89 08                	mov    DWORD PTR [eax],ecx
c0024d41:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024d47:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024d4d:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024d53:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024d56:	52                   	push   edx
c0024d57:	68 90 00 00 00       	push   0x90
c0024d5c:	6a 00                	push   0x0
c0024d5e:	53                   	push   ebx
c0024d5f:	e8 14 ba fd ff       	call   c0000778 <memset>
c0024d64:	8b 85 74 01 00 00    	mov    eax,DWORD PTR [ebp+0x174]
c0024d6a:	66 89 7b 04          	mov    WORD PTR [ebx+0x4],di
c0024d6e:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0024d74:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024d78:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024d7c:	83 c4 10             	add    esp,0x10
c0024d7f:	8d 48 ff             	lea    ecx,[eax-0x1]
c0024d82:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024d88:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0024d8e:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024d93:	09 c8                	or     eax,ecx
c0024d95:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024d9b:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024d9e:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024da5:	66 25 00 7f          	and    ax,0x7f00
c0024da9:	66 0d 27 80          	or     ax,0x8027
c0024dad:	80 7c 24 10 01       	cmp    BYTE PTR [esp+0x10],0x1
c0024db2:	66 89 03             	mov    WORD PTR [ebx],ax
c0024db5:	19 c0                	sbb    eax,eax
c0024db7:	83 e0 f0             	and    eax,0xfffffff0
c0024dba:	83 c0 35             	add    eax,0x35
c0024dbd:	88 43 02             	mov    BYTE PTR [ebx+0x2],al
c0024dc0:	89 f8                	mov    eax,edi
c0024dc2:	c1 e8 10             	shr    eax,0x10
c0024dc5:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024dc8:	89 f8                	mov    eax,edi
c0024dca:	c1 e8 18             	shr    eax,0x18
c0024dcd:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0024dd0:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0024dd4:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024dd7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024ddb:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024dde:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024de2:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024de6:	89 f3                	mov    ebx,esi
c0024de8:	31 c0                	xor    eax,eax
c0024dea:	c1 e3 07             	shl    ebx,0x7
c0024ded:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c0024df1:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c0024df7:	80 e1 88             	and    cl,0x88
c0024dfa:	74 0a                	je     c0024e06 <SATA::access(unsigned long long, int, void*, bool)+0x1c6>
c0024dfc:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024e01:	74 0a                	je     c0024e0d <SATA::access(unsigned long long, int, void*, bool)+0x1cd>
c0024e03:	40                   	inc    eax
c0024e04:	eb eb                	jmp    c0024df1 <SATA::access(unsigned long long, int, void*, bool)+0x1b1>
c0024e06:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024e0b:	75 0a                	jne    c0024e17 <SATA::access(unsigned long long, int, void*, bool)+0x1d7>
c0024e0d:	83 ec 0c             	sub    esp,0xc
c0024e10:	68 3d ce 02 c0       	push   0xc002ce3d
c0024e15:	eb 56                	jmp    c0024e6d <SATA::access(unsigned long long, int, void*, bool)+0x22d>
c0024e17:	b8 01 00 00 00       	mov    eax,0x1
c0024e1c:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
c0024e20:	c1 e6 07             	shl    esi,0x7
c0024e23:	d3 e0                	shl    eax,cl
c0024e25:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0024e29:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c0024e2f:	8b 8e 38 01 00 00    	mov    ecx,DWORD PTR [esi+0x138]
c0024e35:	85 c8                	test   eax,ecx
c0024e37:	74 20                	je     c0024e59 <SATA::access(unsigned long long, int, void*, bool)+0x219>
c0024e39:	8b 8e 10 01 00 00    	mov    ecx,DWORD PTR [esi+0x110]
c0024e3f:	0f ba e1 1e          	bt     ecx,0x1e
c0024e43:	73 ea                	jae    c0024e2f <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c0024e45:	83 ec 0c             	sub    esp,0xc
c0024e48:	31 db                	xor    ebx,ebx
c0024e4a:	68 4b ce 02 c0       	push   0xc002ce4b
c0024e4f:	e8 19 57 ff ff       	call   c001a56d <Krnl::panic(char const*)>
c0024e54:	83 c4 10             	add    esp,0x10
c0024e57:	eb 43                	jmp    c0024e9c <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024e59:	8b 86 10 01 00 00    	mov    eax,DWORD PTR [esi+0x110]
c0024e5f:	0f ba e0 1e          	bt     eax,0x1e
c0024e63:	73 17                	jae    c0024e7c <SATA::access(unsigned long long, int, void*, bool)+0x23c>
c0024e65:	83 ec 0c             	sub    esp,0xc
c0024e68:	68 4b ce 02 c0       	push   0xc002ce4b
c0024e6d:	e8 fb 56 ff ff       	call   c001a56d <Krnl::panic(char const*)>
c0024e72:	bb 01 00 00 00       	mov    ebx,0x1
c0024e77:	83 c4 10             	add    esp,0x10
c0024e7a:	eb 20                	jmp    c0024e9c <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024e7c:	31 db                	xor    ebx,ebx
c0024e7e:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024e83:	75 17                	jne    c0024e9c <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024e85:	50                   	push   eax
c0024e86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024e8a:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024e90:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0024e94:	e8 ab b8 fd ff       	call   c0000744 <memcpy>
c0024e99:	83 c4 10             	add    esp,0x10
c0024e9c:	83 c4 2c             	add    esp,0x2c
c0024e9f:	89 d8                	mov    eax,ebx
c0024ea1:	5b                   	pop    ebx
c0024ea2:	5e                   	pop    esi
c0024ea3:	5f                   	pop    edi
c0024ea4:	5d                   	pop    ebp
c0024ea5:	c3                   	ret    

c0024ea6 <SATA::read(unsigned long long, int, void*)>:
c0024ea6:	57                   	push   edi
c0024ea7:	b8 04 00 00 00       	mov    eax,0x4
c0024eac:	56                   	push   esi
c0024ead:	53                   	push   ebx
c0024eae:	83 ec 10             	sub    esp,0x10
c0024eb1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024eb5:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024eb9:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024ebc:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024ec0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024ec4:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024eca:	77 3b                	ja     c0024f07 <SATA::read(unsigned long long, int, void*)+0x61>
c0024ecc:	b8 06 00 00 00       	mov    eax,0x6
c0024ed1:	85 d2                	test   edx,edx
c0024ed3:	74 32                	je     c0024f07 <SATA::read(unsigned long long, int, void*)+0x61>
c0024ed5:	50                   	push   eax
c0024ed6:	50                   	push   eax
c0024ed7:	6a 00                	push   0x0
c0024ed9:	52                   	push   edx
c0024eda:	53                   	push   ebx
c0024edb:	57                   	push   edi
c0024edc:	56                   	push   esi
c0024edd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024ee1:	e8 5a fd ff ff       	call   c0024c40 <SATA::access(unsigned long long, int, void*, bool)>
c0024ee6:	83 c4 20             	add    esp,0x20
c0024ee9:	85 c0                	test   eax,eax
c0024eeb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024eef:	75 11                	jne    c0024f02 <SATA::read(unsigned long long, int, void*)+0x5c>
c0024ef1:	01 1d e8 26 03 c0    	add    DWORD PTR ds:0xc00326e8,ebx
c0024ef7:	e8 94 ba fe ff       	call   c0010990 <VgaText::updateDiskUsage()>
c0024efc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024f00:	eb 05                	jmp    c0024f07 <SATA::read(unsigned long long, int, void*)+0x61>
c0024f02:	b8 01 00 00 00       	mov    eax,0x1
c0024f07:	83 c4 10             	add    esp,0x10
c0024f0a:	5b                   	pop    ebx
c0024f0b:	5e                   	pop    esi
c0024f0c:	5f                   	pop    edi
c0024f0d:	c3                   	ret    

c0024f0e <SATA::write(unsigned long long, int, void*)>:
c0024f0e:	55                   	push   ebp
c0024f0f:	b8 04 00 00 00       	mov    eax,0x4
c0024f14:	57                   	push   edi
c0024f15:	56                   	push   esi
c0024f16:	53                   	push   ebx
c0024f17:	83 ec 1c             	sub    esp,0x1c
c0024f1a:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024f1e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0024f22:	8d 75 ff             	lea    esi,[ebp-0x1]
c0024f25:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0024f29:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0024f2d:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0024f33:	77 56                	ja     c0024f8b <SATA::write(unsigned long long, int, void*)+0x7d>
c0024f35:	b8 06 00 00 00       	mov    eax,0x6
c0024f3a:	85 ff                	test   edi,edi
c0024f3c:	74 4d                	je     c0024f8b <SATA::write(unsigned long long, int, void*)+0x7d>
c0024f3e:	89 ee                	mov    esi,ebp
c0024f40:	c1 e6 09             	shl    esi,0x9
c0024f43:	01 fe                	add    esi,edi
c0024f45:	89 c8                	mov    eax,ecx
c0024f47:	89 da                	mov    edx,ebx
c0024f49:	83 c0 01             	add    eax,0x1
c0024f4c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024f50:	83 d2 00             	adc    edx,0x0
c0024f53:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0024f57:	50                   	push   eax
c0024f58:	50                   	push   eax
c0024f59:	6a 01                	push   0x1
c0024f5b:	57                   	push   edi
c0024f5c:	81 c7 00 02 00 00    	add    edi,0x200
c0024f62:	6a 01                	push   0x1
c0024f64:	53                   	push   ebx
c0024f65:	51                   	push   ecx
c0024f66:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024f6a:	e8 d1 fc ff ff       	call   c0024c40 <SATA::access(unsigned long long, int, void*, bool)>
c0024f6f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0024f73:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024f77:	83 c4 20             	add    esp,0x20
c0024f7a:	39 f7                	cmp    edi,esi
c0024f7c:	75 c7                	jne    c0024f45 <SATA::write(unsigned long long, int, void*)+0x37>
c0024f7e:	01 2d e4 26 03 c0    	add    DWORD PTR ds:0xc00326e4,ebp
c0024f84:	e8 07 ba fe ff       	call   c0010990 <VgaText::updateDiskUsage()>
c0024f89:	31 c0                	xor    eax,eax
c0024f8b:	83 c4 1c             	add    esp,0x1c
c0024f8e:	5b                   	pop    ebx
c0024f8f:	5e                   	pop    esi
c0024f90:	5f                   	pop    edi
c0024f91:	5d                   	pop    ebp
c0024f92:	c3                   	ret    
c0024f93:	90                   	nop

c0024f94 <SATAPI::write(unsigned long long, int, void*)>:
c0024f94:	b8 03 00 00 00       	mov    eax,0x3
c0024f99:	c3                   	ret    

c0024f9a <SATAPI::close(int, int, void*)>:
c0024f9a:	83 ec 0c             	sub    esp,0xc
c0024f9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024fa1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024fa7:	85 c0                	test   eax,eax
c0024fa9:	74 0c                	je     c0024fb7 <SATAPI::close(int, int, void*)+0x1d>
c0024fab:	83 ec 0c             	sub    esp,0xc
c0024fae:	8b 10                	mov    edx,DWORD PTR [eax]
c0024fb0:	50                   	push   eax
c0024fb1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024fb4:	83 c4 10             	add    esp,0x10
c0024fb7:	31 c0                	xor    eax,eax
c0024fb9:	83 c4 0c             	add    esp,0xc
c0024fbc:	c3                   	ret    
c0024fbd:	90                   	nop

c0024fbe <SATAPI::SATAPI()>:
c0024fbe:	83 ec 0c             	sub    esp,0xc
c0024fc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024fc5:	83 ec 04             	sub    esp,0x4
c0024fc8:	68 00 08 00 00       	push   0x800
c0024fcd:	68 94 ce 02 c0       	push   0xc002ce94
c0024fd2:	50                   	push   eax
c0024fd3:	e8 04 f7 fe ff       	call   c00146dc <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024fd8:	83 c4 10             	add    esp,0x10
c0024fdb:	ba 40 cf 02 c0       	mov    edx,0xc002cf40
c0024fe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024fe4:	89 10                	mov    DWORD PTR [eax],edx
c0024fe6:	90                   	nop
c0024fe7:	83 c4 0c             	add    esp,0xc
c0024fea:	c3                   	ret    
c0024feb:	90                   	nop

c0024fec <SATAPI::diskRemoved()>:
c0024fec:	83 ec 18             	sub    esp,0x18
c0024fef:	68 a0 ce 02 c0       	push   0xc002cea0
c0024ff4:	e8 99 de fe ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0024ff9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024ffd:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0025004:	83 c4 1c             	add    esp,0x1c
c0025007:	c3                   	ret    

c0025008 <SATAPI::diskInserted()>:
c0025008:	53                   	push   ebx
c0025009:	83 ec 14             	sub    esp,0x14
c002500c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025010:	68 b7 ce 02 c0       	push   0xc002ceb7
c0025015:	e8 78 de fe ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c002501a:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0025021:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025024:	e8 1b f7 fe ff       	call   c0014744 <PhysicalDisk::startCache()>
c0025029:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c002502d:	83 c4 18             	add    esp,0x18
c0025030:	5b                   	pop    ebx
c0025031:	e9 ba 18 ff ff       	jmp    c00168f0 <createPartitionsForDisk(PhysicalDisk*)>

c0025036 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0025036:	55                   	push   ebp
c0025037:	57                   	push   edi
c0025038:	56                   	push   esi
c0025039:	53                   	push   ebx
c002503a:	83 ec 24             	sub    esp,0x24
c002503d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025041:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0025045:	8b be 6c 01 00 00    	mov    edi,DWORD PTR [esi+0x16c]
c002504b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002504f:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0025053:	8b 86 70 01 00 00    	mov    eax,DWORD PTR [esi+0x170]
c0025059:	8d 5f 02             	lea    ebx,[edi+0x2]
c002505c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025062:	c1 e3 07             	shl    ebx,0x7
c0025065:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025069:	89 f8                	mov    eax,edi
c002506b:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c002506f:	c1 e0 07             	shl    eax,0x7
c0025072:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0025076:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002507a:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0025084:	53                   	push   ebx
c0025085:	ff b6 70 01 00 00    	push   DWORD PTR [esi+0x170]
c002508b:	e8 d6 eb ff ff       	call   c0023c66 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0025090:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025094:	83 c4 10             	add    esp,0x10
c0025097:	b8 01 00 00 00       	mov    eax,0x1
c002509c:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00250a1:	0f 84 8a 01 00 00    	je     c0025231 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c00250a7:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c00250ad:	8b 03                	mov    eax,DWORD PTR [ebx]
c00250af:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c00250b5:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c00250bb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00250bf:	c1 e1 05             	shl    ecx,0x5
c00250c2:	01 c8                	add    eax,ecx
c00250c4:	8b 08                	mov    ecx,DWORD PTR [eax]
c00250c6:	81 e1 80 ff 00 00    	and    ecx,0xff80
c00250cc:	81 c9 25 00 01 00    	or     ecx,0x10025
c00250d2:	89 08                	mov    DWORD PTR [eax],ecx
c00250d4:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c00250da:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c00250e0:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c00250e6:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c00250e9:	52                   	push   edx
c00250ea:	68 90 00 00 00       	push   0x90
c00250ef:	6a 00                	push   0x0
c00250f1:	53                   	push   ebx
c00250f2:	e8 81 b6 fd ff       	call   c0000778 <memset>
c00250f7:	83 c4 0c             	add    esp,0xc
c00250fa:	8d 43 40             	lea    eax,[ebx+0x40]
c00250fd:	6a 0c                	push   0xc
c00250ff:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025103:	50                   	push   eax
c0025104:	e8 3b b6 fd ff       	call   c0000744 <memcpy>
c0025109:	8b 86 78 01 00 00    	mov    eax,DWORD PTR [esi+0x178]
c002510f:	89 ea                	mov    edx,ebp
c0025111:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0025117:	c1 ea 18             	shr    edx,0x18
c002511a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002511e:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0025121:	8d 48 ff             	lea    ecx,[eax-0x1]
c0025124:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0025128:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c002512e:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0025134:	25 00 00 c0 ff       	and    eax,0xffc00000
c0025139:	66 89 6b 04          	mov    WORD PTR [ebx+0x4],bp
c002513d:	09 c8                	or     eax,ecx
c002513f:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0025143:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0025149:	66 8b 03             	mov    ax,WORD PTR [ebx]
c002514c:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0025153:	66 25 00 7f          	and    ax,0x7f00
c0025157:	66 0d 27 80          	or     ax,0x8027
c002515b:	66 89 03             	mov    WORD PTR [ebx],ax
c002515e:	89 e8                	mov    eax,ebp
c0025160:	c1 e8 10             	shr    eax,0x10
c0025163:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0025166:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c002516a:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c002516d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025171:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0025174:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0025178:	83 c4 10             	add    esp,0x10
c002517b:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c002517f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0025183:	31 c0                	xor    eax,eax
c0025185:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c002518b:	80 e1 88             	and    cl,0x88
c002518e:	74 0a                	je     c002519a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x164>
c0025190:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025195:	74 0a                	je     c00251a1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0025197:	40                   	inc    eax
c0025198:	eb eb                	jmp    c0025185 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x14f>
c002519a:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002519f:	75 0f                	jne    c00251b0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17a>
c00251a1:	83 ec 0c             	sub    esp,0xc
c00251a4:	68 3d ce 02 c0       	push   0xc002ce3d
c00251a9:	e8 bf 53 ff ff       	call   c001a56d <Krnl::panic(char const*)>
c00251ae:	eb 3a                	jmp    c00251ea <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b4>
c00251b0:	b8 01 00 00 00       	mov    eax,0x1
c00251b5:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00251b9:	c1 e7 07             	shl    edi,0x7
c00251bc:	d3 e0                	shl    eax,cl
c00251be:	03 3c 24             	add    edi,DWORD PTR [esp]
c00251c1:	89 82 38 01 00 00    	mov    DWORD PTR [edx+0x138],eax
c00251c7:	8b 97 38 01 00 00    	mov    edx,DWORD PTR [edi+0x138]
c00251cd:	85 d0                	test   eax,edx
c00251cf:	74 23                	je     c00251f4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1be>
c00251d1:	8b 97 10 01 00 00    	mov    edx,DWORD PTR [edi+0x110]
c00251d7:	0f ba e2 1e          	bt     edx,0x1e
c00251db:	73 ea                	jae    c00251c7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x191>
c00251dd:	83 ec 0c             	sub    esp,0xc
c00251e0:	68 cf ce 02 c0       	push   0xc002cecf
c00251e5:	e8 a8 dc fe ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c00251ea:	83 c4 10             	add    esp,0x10
c00251ed:	b8 01 00 00 00       	mov    eax,0x1
c00251f2:	eb 3d                	jmp    c0025231 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c00251f4:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c00251fa:	0f ba e0 1e          	bt     eax,0x1e
c00251fe:	73 0a                	jae    c002520a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d4>
c0025200:	83 ec 0c             	sub    esp,0xc
c0025203:	68 e2 ce 02 c0       	push   0xc002cee2
c0025208:	eb db                	jmp    c00251e5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1af>
c002520a:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c002520f:	74 1e                	je     c002522f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c0025211:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0025216:	74 17                	je     c002522f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c0025218:	50                   	push   eax
c0025219:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002521d:	ff b6 7c 01 00 00    	push   DWORD PTR [esi+0x17c]
c0025223:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0025227:	e8 18 b5 fd ff       	call   c0000744 <memcpy>
c002522c:	83 c4 10             	add    esp,0x10
c002522f:	31 c0                	xor    eax,eax
c0025231:	83 c4 1c             	add    esp,0x1c
c0025234:	5b                   	pop    ebx
c0025235:	5e                   	pop    esi
c0025236:	5f                   	pop    edi
c0025237:	5d                   	pop    ebp
c0025238:	c3                   	ret    
c0025239:	90                   	nop

c002523a <SATAPI::eject()>:
c002523a:	57                   	push   edi
c002523b:	b9 03 00 00 00       	mov    ecx,0x3
c0025240:	53                   	push   ebx
c0025241:	83 ec 14             	sub    esp,0x14
c0025244:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0025248:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002524c:	fc                   	cld    
c002524d:	31 c0                	xor    eax,eax
c002524f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025251:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0025256:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002525b:	50                   	push   eax
c002525c:	6a 00                	push   0x0
c002525e:	6a 00                	push   0x0
c0025260:	6a 00                	push   0x0
c0025262:	6a 00                	push   0x0
c0025264:	6a 02                	push   0x2
c0025266:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002526a:	50                   	push   eax
c002526b:	53                   	push   ebx
c002526c:	e8 c5 fd ff ff       	call   c0025036 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025271:	83 c4 14             	add    esp,0x14
c0025274:	53                   	push   ebx
c0025275:	e8 72 fd ff ff       	call   c0024fec <SATAPI::diskRemoved()>
c002527a:	83 c4 24             	add    esp,0x24
c002527d:	31 c0                	xor    eax,eax
c002527f:	5b                   	pop    ebx
c0025280:	5f                   	pop    edi
c0025281:	c3                   	ret    

c0025282 <SATAPI::detectMedia()>:
c0025282:	56                   	push   esi
c0025283:	53                   	push   ebx
c0025284:	83 ec 28             	sub    esp,0x28
c0025287:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002528b:	6a 0c                	push   0xc
c002528d:	6a 00                	push   0x0
c002528f:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0025293:	56                   	push   esi
c0025294:	e8 df b4 fd ff       	call   c0000778 <memset>
c0025299:	83 c4 0c             	add    esp,0xc
c002529c:	6a 00                	push   0x0
c002529e:	6a 00                	push   0x0
c00252a0:	6a 00                	push   0x0
c00252a2:	6a 00                	push   0x0
c00252a4:	6a 00                	push   0x0
c00252a6:	56                   	push   esi
c00252a7:	53                   	push   ebx
c00252a8:	e8 89 fd ff ff       	call   c0025036 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00252ad:	83 c4 1c             	add    esp,0x1c
c00252b0:	6a 0c                	push   0xc
c00252b2:	6a 00                	push   0x0
c00252b4:	56                   	push   esi
c00252b5:	e8 be b4 fd ff       	call   c0000778 <memset>
c00252ba:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00252bf:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00252c4:	83 c4 0c             	add    esp,0xc
c00252c7:	6a 01                	push   0x1
c00252c9:	8d 44 24 16          	lea    eax,[esp+0x16]
c00252cd:	50                   	push   eax
c00252ce:	6a 00                	push   0x0
c00252d0:	6a 00                	push   0x0
c00252d2:	6a 12                	push   0x12
c00252d4:	56                   	push   esi
c00252d5:	53                   	push   ebx
c00252d6:	e8 5b fd ff ff       	call   c0025036 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00252db:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00252df:	83 c4 20             	add    esp,0x20
c00252e2:	83 e0 7f             	and    eax,0x7f
c00252e5:	3c 70                	cmp    al,0x70
c00252e7:	74 15                	je     c00252fe <SATAPI::detectMedia()+0x7c>
c00252e9:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00252f0:	75 0c                	jne    c00252fe <SATAPI::detectMedia()+0x7c>
c00252f2:	83 ec 0c             	sub    esp,0xc
c00252f5:	53                   	push   ebx
c00252f6:	e8 0d fd ff ff       	call   c0025008 <SATAPI::diskInserted()>
c00252fb:	83 c4 10             	add    esp,0x10
c00252fe:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0025302:	83 e0 0f             	and    eax,0xf
c0025305:	3c 02                	cmp    al,0x2
c0025307:	75 1b                	jne    c0025324 <SATAPI::detectMedia()+0xa2>
c0025309:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c002530e:	75 2d                	jne    c002533d <SATAPI::detectMedia()+0xbb>
c0025310:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025317:	74 24                	je     c002533d <SATAPI::detectMedia()+0xbb>
c0025319:	83 ec 0c             	sub    esp,0xc
c002531c:	53                   	push   ebx
c002531d:	e8 ca fc ff ff       	call   c0024fec <SATAPI::diskRemoved()>
c0025322:	eb 16                	jmp    c002533a <SATAPI::detectMedia()+0xb8>
c0025324:	84 c0                	test   al,al
c0025326:	75 15                	jne    c002533d <SATAPI::detectMedia()+0xbb>
c0025328:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c002532f:	75 0c                	jne    c002533d <SATAPI::detectMedia()+0xbb>
c0025331:	83 ec 0c             	sub    esp,0xc
c0025334:	53                   	push   ebx
c0025335:	e8 ce fc ff ff       	call   c0025008 <SATAPI::diskInserted()>
c002533a:	83 c4 10             	add    esp,0x10
c002533d:	83 c4 24             	add    esp,0x24
c0025340:	5b                   	pop    ebx
c0025341:	5e                   	pop    esi
c0025342:	c3                   	ret    
c0025343:	90                   	nop

c0025344 <SATAPI::open(int, int, void*)>:
c0025344:	56                   	push   esi
c0025345:	53                   	push   ebx
c0025346:	50                   	push   eax
c0025347:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002534b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002534f:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0025359:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002535f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0025369:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002536d:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0025377:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002537d:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0025384:	e8 54 ab fe ff       	call   c000fedd <Phys::allocatePage()>
c0025389:	89 c6                	mov    esi,eax
c002538b:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025391:	81 c6 00 10 00 00    	add    esi,0x1000
c0025397:	e8 41 ab fe ff       	call   c000fedd <Phys::allocatePage()>
c002539c:	39 c6                	cmp    esi,eax
c002539e:	74 10                	je     c00253b0 <SATAPI::open(int, int, void*)+0x6c>
c00253a0:	83 ec 0c             	sub    esp,0xc
c00253a3:	68 f7 ce 02 c0       	push   0xc002cef7
c00253a8:	e8 c0 51 ff ff       	call   c001a56d <Krnl::panic(char const*)>
c00253ad:	83 c4 10             	add    esp,0x10
c00253b0:	83 ec 0c             	sub    esp,0xc
c00253b3:	6a 02                	push   0x2
c00253b5:	e8 07 c9 fe ff       	call   c0011cc1 <Virt::allocateKernelVirtualPages(int)>
c00253ba:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c00253c0:	e8 3a cb fe ff       	call   c0011eff <Virt::getAKernelVAS()>
c00253c5:	6a 03                	push   0x3
c00253c7:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c00253cd:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c00253d3:	50                   	push   eax
c00253d4:	e8 49 cf fe ff       	call   c0012322 <VAS::mapPage(unsigned long, unsigned long, int)>
c00253d9:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c00253e0:	83 c4 14             	add    esp,0x14
c00253e3:	53                   	push   ebx
c00253e4:	e8 99 fe ff ff       	call   c0025282 <SATAPI::detectMedia()>
c00253e9:	83 c4 14             	add    esp,0x14
c00253ec:	31 c0                	xor    eax,eax
c00253ee:	5b                   	pop    ebx
c00253ef:	5e                   	pop    esi
c00253f0:	c3                   	ret    
c00253f1:	90                   	nop

c00253f2 <SATAPI::read(unsigned long long, int, void*)>:
c00253f2:	55                   	push   ebp
c00253f3:	57                   	push   edi
c00253f4:	56                   	push   esi
c00253f5:	53                   	push   ebx
c00253f6:	83 ec 1c             	sub    esp,0x1c
c00253f9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00253fd:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025401:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025405:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c002540c:	74 19                	je     c0025427 <SATAPI::read(unsigned long long, int, void*)+0x35>
c002540e:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c0025413:	7e 2e                	jle    c0025443 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025415:	83 ec 0c             	sub    esp,0xc
c0025418:	68 0d cf 02 c0       	push   0xc002cf0d
c002541d:	e8 4b 51 ff ff       	call   c001a56d <Krnl::panic(char const*)>
c0025422:	83 c4 10             	add    esp,0x10
c0025425:	eb 1c                	jmp    c0025443 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025427:	83 ec 0c             	sub    esp,0xc
c002542a:	55                   	push   ebp
c002542b:	e8 52 fe ff ff       	call   c0025282 <SATAPI::detectMedia()>
c0025430:	83 c4 10             	add    esp,0x10
c0025433:	b8 02 00 00 00       	mov    eax,0x2
c0025438:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c002543f:	75 cd                	jne    c002540e <SATAPI::read(unsigned long long, int, void*)+0x1c>
c0025441:	eb 49                	jmp    c002548c <SATAPI::read(unsigned long long, int, void*)+0x9a>
c0025443:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025447:	b9 03 00 00 00       	mov    ecx,0x3
c002544c:	fc                   	cld    
c002544d:	31 c0                	xor    eax,eax
c002544f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025451:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0025456:	89 d8                	mov    eax,ebx
c0025458:	86 e0                	xchg   al,ah
c002545a:	c1 c0 10             	rol    eax,0x10
c002545d:	86 e0                	xchg   al,ah
c002545f:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c0025463:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c0025467:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002546b:	50                   	push   eax
c002546c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0025470:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025474:	56                   	push   esi
c0025475:	53                   	push   ebx
c0025476:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002547a:	c1 e0 0b             	shl    eax,0xb
c002547d:	50                   	push   eax
c002547e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025482:	50                   	push   eax
c0025483:	55                   	push   ebp
c0025484:	e8 ad fb ff ff       	call   c0025036 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025489:	83 c4 20             	add    esp,0x20
c002548c:	83 c4 1c             	add    esp,0x1c
c002548f:	5b                   	pop    ebx
c0025490:	5e                   	pop    esi
c0025491:	5f                   	pop    edi
c0025492:	5d                   	pop    ebp
c0025493:	c3                   	ret    

c0025494 <AVX::open(int, int, void*)>:
c0025494:	83 ec 0c             	sub    esp,0xc
c0025497:	e8 3c 11 00 00       	call   c00265d8 <avxInit>
c002549c:	b8 00 00 00 00       	mov    eax,0x0
c00254a1:	83 c4 0c             	add    esp,0xc
c00254a4:	c3                   	ret    
c00254a5:	90                   	nop

c00254a6 <AVX::close(int, int, void*)>:
c00254a6:	83 ec 0c             	sub    esp,0xc
c00254a9:	e8 2b 11 00 00       	call   c00265d9 <avxClose>
c00254ae:	b8 00 00 00 00       	mov    eax,0x0
c00254b3:	83 c4 0c             	add    esp,0xc
c00254b6:	c3                   	ret    
c00254b7:	90                   	nop

c00254b8 <AVX::available()>:
c00254b8:	83 ec 0c             	sub    esp,0xc
c00254bb:	e8 10 11 00 00       	call   c00265d0 <avxDetect>
c00254c0:	85 c0                	test   eax,eax
c00254c2:	0f 95 c0             	setne  al
c00254c5:	83 c4 0c             	add    esp,0xc
c00254c8:	c3                   	ret    
c00254c9:	90                   	nop

c00254ca <AVX::save(void*)>:
c00254ca:	83 ec 0c             	sub    esp,0xc
c00254cd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00254d1:	83 ec 0c             	sub    esp,0xc
c00254d4:	50                   	push   eax
c00254d5:	e8 fc 10 00 00       	call   c00265d6 <avxSave>
c00254da:	83 c4 10             	add    esp,0x10
c00254dd:	90                   	nop
c00254de:	83 c4 0c             	add    esp,0xc
c00254e1:	c3                   	ret    

c00254e2 <AVX::load(void*)>:
c00254e2:	83 ec 0c             	sub    esp,0xc
c00254e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00254e9:	83 ec 0c             	sub    esp,0xc
c00254ec:	50                   	push   eax
c00254ed:	e8 e5 10 00 00       	call   c00265d7 <avxLoad>
c00254f2:	83 c4 10             	add    esp,0x10
c00254f5:	90                   	nop
c00254f6:	83 c4 0c             	add    esp,0xc
c00254f9:	c3                   	ret    

c00254fa <AVX::AVX()>:
c00254fa:	83 ec 0c             	sub    esp,0xc
c00254fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025501:	83 ec 08             	sub    esp,0x8
c0025504:	68 70 cf 02 c0       	push   0xc002cf70
c0025509:	50                   	push   eax
c002550a:	e8 ab f2 fe ff       	call   c00147ba <FPU::FPU(char const*)>
c002550f:	83 c4 10             	add    esp,0x10
c0025512:	ba 80 cf 02 c0       	mov    edx,0xc002cf80
c0025517:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002551b:	89 10                	mov    DWORD PTR [eax],edx
c002551d:	90                   	nop
c002551e:	83 c4 0c             	add    esp,0xc
c0025521:	c3                   	ret    

c0025522 <MMX::available()>:
c0025522:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0025527:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c002552d:	83 e0 20             	and    eax,0x20
c0025530:	84 c0                	test   al,al
c0025532:	0f 95 c0             	setne  al
c0025535:	c3                   	ret    

c0025536 <MMX::open(int, int, void*)>:
c0025536:	83 ec 0c             	sub    esp,0xc
c0025539:	e8 1e 11 00 00       	call   c002665c <x87Init>
c002553e:	b8 00 00 00 00       	mov    eax,0x0
c0025543:	83 c4 0c             	add    esp,0xc
c0025546:	c3                   	ret    
c0025547:	90                   	nop

c0025548 <MMX::close(int, int, void*)>:
c0025548:	83 ec 0c             	sub    esp,0xc
c002554b:	e8 26 11 00 00       	call   c0026676 <x87Close>
c0025550:	b8 00 00 00 00       	mov    eax,0x0
c0025555:	83 c4 0c             	add    esp,0xc
c0025558:	c3                   	ret    
c0025559:	90                   	nop

c002555a <MMX::save(void*)>:
c002555a:	83 ec 0c             	sub    esp,0xc
c002555d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025561:	83 ec 0c             	sub    esp,0xc
c0025564:	50                   	push   eax
c0025565:	e8 e7 10 00 00       	call   c0026651 <x87Save>
c002556a:	83 c4 10             	add    esp,0x10
c002556d:	90                   	nop
c002556e:	83 c4 0c             	add    esp,0xc
c0025571:	c3                   	ret    

c0025572 <MMX::load(void*)>:
c0025572:	83 ec 0c             	sub    esp,0xc
c0025575:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025579:	83 ec 0c             	sub    esp,0xc
c002557c:	50                   	push   eax
c002557d:	e8 d5 10 00 00       	call   c0026657 <x87Load>
c0025582:	83 c4 10             	add    esp,0x10
c0025585:	90                   	nop
c0025586:	83 c4 0c             	add    esp,0xc
c0025589:	c3                   	ret    

c002558a <MMX::MMX()>:
c002558a:	83 ec 0c             	sub    esp,0xc
c002558d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025591:	83 ec 08             	sub    esp,0x8
c0025594:	68 b0 cf 02 c0       	push   0xc002cfb0
c0025599:	50                   	push   eax
c002559a:	e8 1b f2 fe ff       	call   c00147ba <FPU::FPU(char const*)>
c002559f:	83 c4 10             	add    esp,0x10
c00255a2:	ba c0 cf 02 c0       	mov    edx,0xc002cfc0
c00255a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255ab:	89 10                	mov    DWORD PTR [eax],edx
c00255ad:	90                   	nop
c00255ae:	83 c4 0c             	add    esp,0xc
c00255b1:	c3                   	ret    

c00255b2 <SSE::open(int, int, void*)>:
c00255b2:	83 ec 0c             	sub    esp,0xc
c00255b5:	e8 5a 10 00 00       	call   c0026614 <sseInit>
c00255ba:	b8 00 00 00 00       	mov    eax,0x0
c00255bf:	83 c4 0c             	add    esp,0xc
c00255c2:	c3                   	ret    
c00255c3:	90                   	nop

c00255c4 <SSE::close(int, int, void*)>:
c00255c4:	83 ec 0c             	sub    esp,0xc
c00255c7:	e8 58 10 00 00       	call   c0026624 <sseClose>
c00255cc:	b8 00 00 00 00       	mov    eax,0x0
c00255d1:	83 c4 0c             	add    esp,0xc
c00255d4:	c3                   	ret    
c00255d5:	90                   	nop

c00255d6 <SSE::available()>:
c00255d6:	83 ec 1c             	sub    esp,0x1c
c00255d9:	e8 12 10 00 00       	call   c00265f0 <absolutelyNoChanceInHell>
c00255de:	85 c0                	test   eax,eax
c00255e0:	0f 95 c0             	setne  al
c00255e3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00255e7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00255eb:	83 c4 1c             	add    esp,0x1c
c00255ee:	c3                   	ret    
c00255ef:	90                   	nop

c00255f0 <SSE::save(void*)>:
c00255f0:	83 ec 0c             	sub    esp,0xc
c00255f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00255f7:	83 ec 0c             	sub    esp,0xc
c00255fa:	50                   	push   eax
c00255fb:	e8 08 10 00 00       	call   c0026608 <sseSave>
c0025600:	83 c4 10             	add    esp,0x10
c0025603:	90                   	nop
c0025604:	83 c4 0c             	add    esp,0xc
c0025607:	c3                   	ret    

c0025608 <SSE::load(void*)>:
c0025608:	83 ec 0c             	sub    esp,0xc
c002560b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002560f:	83 ec 0c             	sub    esp,0xc
c0025612:	50                   	push   eax
c0025613:	e8 f6 0f 00 00       	call   c002660e <sseLoad>
c0025618:	83 c4 10             	add    esp,0x10
c002561b:	90                   	nop
c002561c:	83 c4 0c             	add    esp,0xc
c002561f:	c3                   	ret    

c0025620 <SSE::SSE()>:
c0025620:	83 ec 0c             	sub    esp,0xc
c0025623:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025627:	83 ec 08             	sub    esp,0x8
c002562a:	68 f0 cf 02 c0       	push   0xc002cff0
c002562f:	50                   	push   eax
c0025630:	e8 85 f1 fe ff       	call   c00147ba <FPU::FPU(char const*)>
c0025635:	83 c4 10             	add    esp,0x10
c0025638:	ba 00 d0 02 c0       	mov    edx,0xc002d000
c002563d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025641:	89 10                	mov    DWORD PTR [eax],edx
c0025643:	90                   	nop
c0025644:	83 c4 0c             	add    esp,0xc
c0025647:	c3                   	ret    

c0025648 <x87::open(int, int, void*)>:
c0025648:	83 ec 0c             	sub    esp,0xc
c002564b:	e8 0c 10 00 00       	call   c002665c <x87Init>
c0025650:	b8 00 00 00 00       	mov    eax,0x0
c0025655:	83 c4 0c             	add    esp,0xc
c0025658:	c3                   	ret    
c0025659:	90                   	nop

c002565a <x87::close(int, int, void*)>:
c002565a:	83 ec 0c             	sub    esp,0xc
c002565d:	e8 14 10 00 00       	call   c0026676 <x87Close>
c0025662:	b8 00 00 00 00       	mov    eax,0x0
c0025667:	83 c4 0c             	add    esp,0xc
c002566a:	c3                   	ret    
c002566b:	90                   	nop

c002566c <x87::available()>:
c002566c:	83 ec 0c             	sub    esp,0xc
c002566f:	e8 c2 0f 00 00       	call   c0026636 <x87Detect>
c0025674:	85 c0                	test   eax,eax
c0025676:	0f 95 c0             	setne  al
c0025679:	83 c4 0c             	add    esp,0xc
c002567c:	c3                   	ret    
c002567d:	90                   	nop

c002567e <x87::save(void*)>:
c002567e:	83 ec 0c             	sub    esp,0xc
c0025681:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025685:	83 ec 0c             	sub    esp,0xc
c0025688:	50                   	push   eax
c0025689:	e8 c3 0f 00 00       	call   c0026651 <x87Save>
c002568e:	83 c4 10             	add    esp,0x10
c0025691:	90                   	nop
c0025692:	83 c4 0c             	add    esp,0xc
c0025695:	c3                   	ret    

c0025696 <x87::load(void*)>:
c0025696:	83 ec 0c             	sub    esp,0xc
c0025699:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002569d:	83 ec 0c             	sub    esp,0xc
c00256a0:	50                   	push   eax
c00256a1:	e8 b1 0f 00 00       	call   c0026657 <x87Load>
c00256a6:	83 c4 10             	add    esp,0x10
c00256a9:	90                   	nop
c00256aa:	83 c4 0c             	add    esp,0xc
c00256ad:	c3                   	ret    

c00256ae <x87::x87()>:
c00256ae:	83 ec 0c             	sub    esp,0xc
c00256b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256b5:	83 ec 08             	sub    esp,0x8
c00256b8:	68 30 d0 02 c0       	push   0xc002d030
c00256bd:	50                   	push   eax
c00256be:	e8 f7 f0 fe ff       	call   c00147ba <FPU::FPU(char const*)>
c00256c3:	83 c4 10             	add    esp,0x10
c00256c6:	ba 40 d0 02 c0       	mov    edx,0xc002d040
c00256cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256cf:	89 10                	mov    DWORD PTR [eax],edx
c00256d1:	90                   	nop
c00256d2:	83 c4 0c             	add    esp,0xc
c00256d5:	c3                   	ret    

c00256d6 <APIC::disable()>:
c00256d6:	90                   	nop
c00256d7:	c3                   	ret    

c00256d8 <APIC::close(int, int, void*)>:
c00256d8:	55                   	push   ebp
c00256d9:	89 e5                	mov    ebp,esp
c00256db:	83 ec 08             	sub    esp,0x8
c00256de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00256e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00256e3:	83 c0 3c             	add    eax,0x3c
c00256e6:	8b 00                	mov    eax,DWORD PTR [eax]
c00256e8:	83 ec 0c             	sub    esp,0xc
c00256eb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00256ee:	ff d0                	call   eax
c00256f0:	83 c4 10             	add    esp,0x10
c00256f3:	b8 00 00 00 00       	mov    eax,0x0
c00256f8:	c9                   	leave  
c00256f9:	c3                   	ret    

c00256fa <IOAPIC::close(int, int, void*)>:
c00256fa:	b8 00 00 00 00       	mov    eax,0x0
c00256ff:	c3                   	ret    

c0025700 <APIC::io_wait()>:
c0025700:	eb 00                	jmp    c0025702 <APIC::io_wait()+0x2>
c0025702:	eb 00                	jmp    c0025704 <APIC::io_wait()+0x4>
c0025704:	90                   	nop
c0025705:	c3                   	ret    

c0025706 <APIC::getBase()>:
c0025706:	55                   	push   ebp
c0025707:	89 e5                	mov    ebp,esp
c0025709:	83 ec 18             	sub    esp,0x18
c002570c:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0025711:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025717:	83 e0 08             	and    eax,0x8
c002571a:	84 c0                	test   al,al
c002571c:	75 07                	jne    c0025725 <APIC::getBase()+0x1f>
c002571e:	b8 00 00 00 00       	mov    eax,0x0
c0025723:	eb 21                	jmp    c0025746 <APIC::getBase()+0x40>
c0025725:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c002572a:	83 ec 08             	sub    esp,0x8
c002572d:	6a 1b                	push   0x1b
c002572f:	50                   	push   eax
c0025730:	e8 b3 96 fe ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0025735:	83 c4 10             	add    esp,0x10
c0025738:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002573b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002573e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025741:	25 00 f0 ff ff       	and    eax,0xfffff000
c0025746:	c9                   	leave  
c0025747:	c3                   	ret    

c0025748 <APIC::eoi(unsigned char)>:
c0025748:	55                   	push   ebp
c0025749:	89 e5                	mov    ebp,esp
c002574b:	83 ec 28             	sub    esp,0x28
c002574e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025751:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025754:	83 ec 0c             	sub    esp,0xc
c0025757:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002575a:	e8 a7 ff ff ff       	call   c0025706 <APIC::getBase()>
c002575f:	83 c4 10             	add    esp,0x10
c0025762:	05 b0 00 00 00       	add    eax,0xb0
c0025767:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002576a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c002576d:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0025773:	90                   	nop
c0025774:	c9                   	leave  
c0025775:	c3                   	ret    

c0025776 <APIC::open(int, int, void*)>:
c0025776:	55                   	push   ebp
c0025777:	89 e5                	mov    ebp,esp
c0025779:	57                   	push   edi
c002577a:	56                   	push   esi
c002577b:	53                   	push   ebx
c002577c:	83 ec 2c             	sub    esp,0x2c
c002577f:	83 ec 0c             	sub    esp,0xc
c0025782:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025785:	e8 7c ff ff ff       	call   c0025706 <APIC::getBase()>
c002578a:	83 c4 10             	add    esp,0x10
c002578d:	89 c2                	mov    edx,eax
c002578f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025792:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025798:	0f b6 f8             	movzx  edi,al
c002579b:	89 d0                	mov    eax,edx
c002579d:	ba 00 00 00 00       	mov    edx,0x0
c00257a2:	89 c1                	mov    ecx,eax
c00257a4:	80 e5 ff             	and    ch,0xff
c00257a7:	89 cb                	mov    ebx,ecx
c00257a9:	0f b6 f2             	movzx  esi,dl
c00257ac:	89 d8                	mov    eax,ebx
c00257ae:	89 f2                	mov    edx,esi
c00257b0:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00257b3:	8d 5f 08             	lea    ebx,[edi+0x8]
c00257b6:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00257ba:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00257be:	83 e0 00             	and    eax,0x0
c00257c1:	09 d0                	or     eax,edx
c00257c3:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00257c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257ca:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00257d0:	8d 50 01             	lea    edx,[eax+0x1]
c00257d3:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00257d6:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00257dc:	0f b6 d0             	movzx  edx,al
c00257df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257e2:	83 c2 08             	add    edx,0x8
c00257e5:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00257e9:	0f b6 c9             	movzx  ecx,cl
c00257ec:	81 c9 00 00 01 00    	or     ecx,0x10000
c00257f2:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00257f6:	83 ec 0c             	sub    esp,0xc
c00257f9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00257fc:	e8 05 ff ff ff       	call   c0025706 <APIC::getBase()>
c0025801:	83 c4 10             	add    esp,0x10
c0025804:	05 f0 00 00 00       	add    eax,0xf0
c0025809:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002580c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002580f:	8b 00                	mov    eax,DWORD PTR [eax]
c0025811:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025814:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c002581b:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0025822:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025825:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025828:	89 10                	mov    DWORD PTR [eax],edx
c002582a:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0025831:	a1 70 0c 03 c0       	mov    eax,ds:0xc0030c70
c0025836:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0025839:	7d 7c                	jge    c00258b7 <APIC::open(int, int, void*)+0x141>
c002583b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002583e:	8b 04 85 80 0c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf380]
c0025845:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0025848:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002584b:	8b 04 85 80 0c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf380]
c0025852:	c1 e8 08             	shr    eax,0x8
c0025855:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0025859:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002585c:	8b 04 85 80 0c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf380]
c0025863:	c1 e8 18             	shr    eax,0x18
c0025866:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0025869:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c002586d:	75 40                	jne    c00258af <APIC::open(int, int, void*)+0x139>
c002586f:	83 ec 0c             	sub    esp,0xc
c0025872:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025875:	e8 8c fe ff ff       	call   c0025706 <APIC::getBase()>
c002587a:	83 c4 10             	add    esp,0x10
c002587d:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0025881:	75 07                	jne    c002588a <APIC::open(int, int, void*)+0x114>
c0025883:	ba 60 03 00 00       	mov    edx,0x360
c0025888:	eb 05                	jmp    c002588f <APIC::open(int, int, void*)+0x119>
c002588a:	ba 50 03 00 00       	mov    edx,0x350
c002588f:	01 d0                	add    eax,edx
c0025891:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025894:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025897:	8b 00                	mov    eax,DWORD PTR [eax]
c0025899:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c002589c:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c00258a3:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c00258a7:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00258aa:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00258ad:	89 10                	mov    DWORD PTR [eax],edx
c00258af:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c00258b2:	e9 7a ff ff ff       	jmp    c0025831 <APIC::open(int, int, void*)+0xbb>
c00258b7:	b8 00 00 00 00       	mov    eax,0x0
c00258bc:	8d 65 f4             	lea    esp,[ebp-0xc]
c00258bf:	5b                   	pop    ebx
c00258c0:	5e                   	pop    esi
c00258c1:	5f                   	pop    edi
c00258c2:	5d                   	pop    ebp
c00258c3:	c3                   	ret    

c00258c4 <IOAPIC::IOAPIC()>:
c00258c4:	83 ec 0c             	sub    esp,0xc
c00258c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258cb:	83 ec 08             	sub    esp,0x8
c00258ce:	68 70 d0 02 c0       	push   0xc002d070
c00258d3:	50                   	push   eax
c00258d4:	e8 cf eb fe ff       	call   c00144a8 <Device::Device(char const*)>
c00258d9:	83 c4 10             	add    esp,0x10
c00258dc:	ba 98 d1 02 c0       	mov    edx,0xc002d198
c00258e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258e5:	89 10                	mov    DWORD PTR [eax],edx
c00258e7:	90                   	nop
c00258e8:	83 c4 0c             	add    esp,0xc
c00258eb:	c3                   	ret    

c00258ec <APIC::APIC()>:
c00258ec:	53                   	push   ebx
c00258ed:	83 ec 18             	sub    esp,0x18
c00258f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00258f4:	83 ec 08             	sub    esp,0x8
c00258f7:	68 78 d0 02 c0       	push   0xc002d078
c00258fc:	50                   	push   eax
c00258fd:	e8 12 f3 fe ff       	call   c0014c14 <InterruptController::InterruptController(char const*)>
c0025902:	83 c4 10             	add    esp,0x10
c0025905:	ba 50 d1 02 c0       	mov    edx,0xc002d150
c002590a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002590e:	89 10                	mov    DWORD PTR [eax],edx
c0025910:	a0 40 27 03 c0       	mov    al,ds:0xc0032740
c0025915:	83 f0 01             	xor    eax,0x1
c0025918:	84 c0                	test   al,al
c002591a:	0f 84 a1 00 00 00    	je     c00259c1 <APIC::APIC()+0xd5>
c0025920:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0025925:	a0 20 0d 03 c0       	mov    al,ds:0xc0030d20
c002592a:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c002592e:	0f 83 86 00 00 00    	jae    c00259ba <APIC::APIC()+0xce>
c0025934:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c002593c:	83 ec 0c             	sub    esp,0xc
c002593f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025943:	e8 f8 9e fe ff       	call   c000f840 <malloc>
c0025948:	83 c4 10             	add    esp,0x10
c002594b:	89 c3                	mov    ebx,eax
c002594d:	83 ec 0c             	sub    esp,0xc
c0025950:	53                   	push   ebx
c0025951:	e8 6e ff ff ff       	call   c00258c4 <IOAPIC::IOAPIC()>
c0025956:	83 c4 10             	add    esp,0x10
c0025959:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c002595d:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0025962:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0025966:	89 14 85 20 27 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd8e0],edx
c002596d:	a1 00 27 03 c0       	mov    eax,ds:0xc0032700
c0025972:	40                   	inc    eax
c0025973:	a3 00 27 03 c0       	mov    ds:0xc0032700,eax
c0025978:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c002597d:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0025983:	83 ec 08             	sub    esp,0x8
c0025986:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002598a:	50                   	push   eax
c002598b:	e8 28 e9 fe ff       	call   c00142b8 <Device::addChild(Device*)>
c0025990:	83 c4 10             	add    esp,0x10
c0025993:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025997:	8b 00                	mov    eax,DWORD PTR [eax]
c0025999:	83 c0 08             	add    eax,0x8
c002599c:	8b 00                	mov    eax,DWORD PTR [eax]
c002599e:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00259a3:	6a 00                	push   0x0
c00259a5:	6a 00                	push   0x0
c00259a7:	52                   	push   edx
c00259a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00259ac:	ff d0                	call   eax
c00259ae:	83 c4 10             	add    esp,0x10
c00259b1:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c00259b5:	e9 6b ff ff ff       	jmp    c0025925 <APIC::APIC()+0x39>
c00259ba:	c6 05 40 27 03 c0 01 	mov    BYTE PTR ds:0xc0032740,0x1
c00259c1:	90                   	nop
c00259c2:	83 c4 18             	add    esp,0x18
c00259c5:	5b                   	pop    ebx
c00259c6:	c3                   	ret    
c00259c7:	90                   	nop

c00259c8 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c00259c8:	55                   	push   ebp
c00259c9:	89 e5                	mov    ebp,esp
c00259cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00259ce:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00259d4:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00259d7:	72 1d                	jb     c00259f6 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00259d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00259dc:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c00259e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00259e5:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c00259eb:	01 d0                	add    eax,edx
c00259ed:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00259f0:	73 04                	jae    c00259f6 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00259f2:	b0 01                	mov    al,0x1
c00259f4:	eb 02                	jmp    c00259f8 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c00259f6:	b0 00                	mov    al,0x0
c00259f8:	5d                   	pop    ebp
c00259f9:	c3                   	ret    

c00259fa <IOAPIC::read(int)>:
c00259fa:	55                   	push   ebp
c00259fb:	89 e5                	mov    ebp,esp
c00259fd:	83 ec 10             	sub    esp,0x10
c0025a00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a03:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025a09:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025a0c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025a0f:	0f b6 d0             	movzx  edx,al
c0025a12:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025a15:	89 10                	mov    DWORD PTR [eax],edx
c0025a17:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025a1a:	83 c0 10             	add    eax,0x10
c0025a1d:	8b 00                	mov    eax,DWORD PTR [eax]
c0025a1f:	c9                   	leave  
c0025a20:	c3                   	ret    
c0025a21:	90                   	nop

c0025a22 <IOAPIC::open(int, int, void*)>:
c0025a22:	55                   	push   ebp
c0025a23:	89 e5                	mov    ebp,esp
c0025a25:	57                   	push   edi
c0025a26:	56                   	push   esi
c0025a27:	53                   	push   ebx
c0025a28:	83 ec 0c             	sub    esp,0xc
c0025a2b:	83 ec 0c             	sub    esp,0xc
c0025a2e:	68 a3 d0 02 c0       	push   0xc002d0a3
c0025a33:	e8 5a d4 fe ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0025a38:	83 c4 10             	add    esp,0x10
c0025a3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a3e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025a41:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025a47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a4a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025a50:	8b 14 85 60 0d 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf2a0]
c0025a57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a5a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025a60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a63:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025a69:	8b 14 85 e0 0d 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf220]
c0025a70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a73:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0025a79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a7c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0025a82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a85:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025a8b:	0f b6 f8             	movzx  edi,al
c0025a8e:	89 d0                	mov    eax,edx
c0025a90:	ba 00 00 00 00       	mov    edx,0x0
c0025a95:	89 c1                	mov    ecx,eax
c0025a97:	80 e5 ff             	and    ch,0xff
c0025a9a:	89 cb                	mov    ebx,ecx
c0025a9c:	0f b6 f2             	movzx  esi,dl
c0025a9f:	89 d8                	mov    eax,ebx
c0025aa1:	89 f2                	mov    edx,esi
c0025aa3:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025aa6:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025aa9:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025aad:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025ab1:	83 e0 00             	and    eax,0x0
c0025ab4:	09 d0                	or     eax,edx
c0025ab6:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025aba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025abd:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025ac3:	8d 50 01             	lea    edx,[eax+0x1]
c0025ac6:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025ac9:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025acf:	0f b6 d0             	movzx  edx,al
c0025ad2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ad5:	83 c2 08             	add    edx,0x8
c0025ad8:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025adc:	0f b6 c9             	movzx  ecx,cl
c0025adf:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0025ae5:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025ae9:	83 ec 08             	sub    esp,0x8
c0025aec:	6a 01                	push   0x1
c0025aee:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025af1:	e8 04 ff ff ff       	call   c00259fa <IOAPIC::read(int)>
c0025af6:	83 c4 10             	add    esp,0x10
c0025af9:	c1 f8 10             	sar    eax,0x10
c0025afc:	0f b6 c0             	movzx  eax,al
c0025aff:	8d 50 01             	lea    edx,[eax+0x1]
c0025b02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b05:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0025b0b:	b8 00 00 00 00       	mov    eax,0x0
c0025b10:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025b13:	5b                   	pop    ebx
c0025b14:	5e                   	pop    esi
c0025b15:	5f                   	pop    edi
c0025b16:	5d                   	pop    ebp
c0025b17:	c3                   	ret    

c0025b18 <IOAPIC::write(int, int)>:
c0025b18:	55                   	push   ebp
c0025b19:	89 e5                	mov    ebp,esp
c0025b1b:	83 ec 10             	sub    esp,0x10
c0025b1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b21:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025b27:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025b2a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b2d:	0f b6 d0             	movzx  edx,al
c0025b30:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025b33:	89 10                	mov    DWORD PTR [eax],edx
c0025b35:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025b38:	8d 50 10             	lea    edx,[eax+0x10]
c0025b3b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025b3e:	89 02                	mov    DWORD PTR [edx],eax
c0025b40:	90                   	nop
c0025b41:	c9                   	leave  
c0025b42:	c3                   	ret    
c0025b43:	90                   	nop

c0025b44 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0025b44:	55                   	push   ebp
c0025b45:	89 e5                	mov    ebp,esp
c0025b47:	53                   	push   ebx
c0025b48:	83 ec 2c             	sub    esp,0x2c
c0025b4b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b4e:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0025b51:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0025b54:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0025b57:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025b5a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025b5d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025b60:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025b63:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025b66:	88 d8                	mov    al,bl
c0025b68:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0025b6b:	88 c8                	mov    al,cl
c0025b6d:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025b70:	88 d0                	mov    al,dl
c0025b72:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0025b75:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025b79:	83 c0 08             	add    eax,0x8
c0025b7c:	01 c0                	add    eax,eax
c0025b7e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025b81:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025b85:	83 c0 08             	add    eax,0x8
c0025b88:	01 c0                	add    eax,eax
c0025b8a:	40                   	inc    eax
c0025b8b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025b8e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025b91:	50                   	push   eax
c0025b92:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025b95:	e8 60 fe ff ff       	call   c00259fa <IOAPIC::read(int)>
c0025b9a:	83 c4 08             	add    esp,0x8
c0025b9d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0025ba0:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0025ba7:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0025baa:	c1 e0 18             	shl    eax,0x18
c0025bad:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0025bb0:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025bb3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025bb6:	52                   	push   edx
c0025bb7:	50                   	push   eax
c0025bb8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025bbb:	e8 58 ff ff ff       	call   c0025b18 <IOAPIC::write(int, int)>
c0025bc0:	83 c4 0c             	add    esp,0xc
c0025bc3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025bc6:	50                   	push   eax
c0025bc7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025bca:	e8 2b fe ff ff       	call   c00259fa <IOAPIC::read(int)>
c0025bcf:	83 c4 08             	add    esp,0x8
c0025bd2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025bd5:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0025bdc:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0025be3:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0025bea:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025bee:	74 09                	je     c0025bf9 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0025bf0:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0025bf7:	eb 07                	jmp    c0025c00 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0025bf9:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0025c00:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0025c04:	74 09                	je     c0025c0f <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0025c06:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0025c0d:	eb 07                	jmp    c0025c16 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0025c0f:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0025c16:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0025c1d:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0025c21:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0025c24:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0025c27:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025c2a:	52                   	push   edx
c0025c2b:	50                   	push   eax
c0025c2c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c2f:	e8 e4 fe ff ff       	call   c0025b18 <IOAPIC::write(int, int)>
c0025c34:	83 c4 0c             	add    esp,0xc
c0025c37:	90                   	nop
c0025c38:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0025c3b:	c9                   	leave  
c0025c3c:	c3                   	ret    
c0025c3d:	90                   	nop

c0025c3e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0025c3e:	55                   	push   ebp
c0025c3f:	89 e5                	mov    ebp,esp
c0025c41:	57                   	push   edi
c0025c42:	56                   	push   esi
c0025c43:	53                   	push   ebx
c0025c44:	83 ec 2c             	sub    esp,0x2c
c0025c47:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025c4a:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025c4d:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025c51:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0025c55:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025c59:	74 5a                	je     c0025cb5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025c5b:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0025c5f:	7f 44                	jg     c0025ca5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0025c61:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025c64:	05 e0 d5 02 c0       	add    eax,0xc002d5e0
c0025c69:	8a 00                	mov    al,BYTE PTR [eax]
c0025c6b:	0f b6 c0             	movzx  eax,al
c0025c6e:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025c71:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025c74:	66 8b 84 00 00 0d 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf300]
c0025c7c:	0f b7 c0             	movzx  eax,ax
c0025c7f:	83 e0 02             	and    eax,0x2
c0025c82:	85 c0                	test   eax,eax
c0025c84:	74 04                	je     c0025c8a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0025c86:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0025c8a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025c8d:	66 8b 84 00 00 0d 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf300]
c0025c95:	0f b7 c0             	movzx  eax,ax
c0025c98:	83 e0 08             	and    eax,0x8
c0025c9b:	85 c0                	test   eax,eax
c0025c9d:	74 16                	je     c0025cb5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025c9f:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025ca3:	eb 10                	jmp    c0025cb5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025ca5:	83 ec 0c             	sub    esp,0xc
c0025ca8:	68 b4 d0 02 c0       	push   0xc002d0b4
c0025cad:	e8 bb 48 ff ff       	call   c001a56d <Krnl::panic(char const*)>
c0025cb2:	83 c4 10             	add    esp,0x10
c0025cb5:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0025cb9:	a1 00 27 03 c0       	mov    eax,ds:0xc0032700
c0025cbe:	83 ec 08             	sub    esp,0x8
c0025cc1:	50                   	push   eax
c0025cc2:	68 ec d0 02 c0       	push   0xc002d0ec
c0025cc7:	e8 c6 d1 fe ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0025ccc:	83 c4 10             	add    esp,0x10
c0025ccf:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0025cd6:	a1 00 27 03 c0       	mov    eax,ds:0xc0032700
c0025cdb:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0025cde:	7d 67                	jge    c0025d47 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025ce0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025ce3:	8b 04 85 20 27 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd8e0]
c0025cea:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025ced:	83 ec 08             	sub    esp,0x8
c0025cf0:	52                   	push   edx
c0025cf1:	50                   	push   eax
c0025cf2:	e8 d1 fc ff ff       	call   c00259c8 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0025cf7:	83 c4 10             	add    esp,0x10
c0025cfa:	84 c0                	test   al,al
c0025cfc:	74 44                	je     c0025d42 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0025cfe:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025d01:	8b 1c 85 20 27 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffcd8e0]
c0025d08:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0025d0c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025d0f:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0025d13:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d16:	83 c0 20             	add    eax,0x20
c0025d19:	0f b6 f0             	movzx  esi,al
c0025d1c:	b8 00 00 00 00       	mov    eax,0x0
c0025d21:	99                   	cdq    
c0025d22:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025d25:	0f b6 c9             	movzx  ecx,cl
c0025d28:	83 ec 04             	sub    esp,0x4
c0025d2b:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0025d2e:	57                   	push   edi
c0025d2f:	56                   	push   esi
c0025d30:	52                   	push   edx
c0025d31:	50                   	push   eax
c0025d32:	51                   	push   ecx
c0025d33:	53                   	push   ebx
c0025d34:	e8 0b fe ff ff       	call   c0025b44 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0025d39:	83 c4 20             	add    esp,0x20
c0025d3c:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0025d40:	eb 05                	jmp    c0025d47 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025d42:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0025d45:	eb 8f                	jmp    c0025cd6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0025d47:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0025d4a:	83 f0 01             	xor    eax,0x1
c0025d4d:	84 c0                	test   al,al
c0025d4f:	74 10                	je     c0025d61 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0025d51:	83 ec 0c             	sub    esp,0xc
c0025d54:	68 03 d1 02 c0       	push   0xc002d103
c0025d59:	e8 0f 48 ff ff       	call   c001a56d <Krnl::panic(char const*)>
c0025d5e:	83 c4 10             	add    esp,0x10
c0025d61:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0025d65:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0025d6c:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0025d70:	7f 65                	jg     c0025dd7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0025d72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025d75:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025d78:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025d7f:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025d82:	01 ca                	add    edx,ecx
c0025d84:	83 c2 54             	add    edx,0x54
c0025d87:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0025d8b:	85 c0                	test   eax,eax
c0025d8d:	75 43                	jne    c0025dd2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0025d8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025d92:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025d95:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025d9c:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025d9f:	01 ca                	add    edx,ecx
c0025da1:	8d 4a 54             	lea    ecx,[edx+0x54]
c0025da4:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0025da7:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025dab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025dae:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025db1:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025db8:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025dbb:	01 ca                	add    edx,ecx
c0025dbd:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0025dc3:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0025dc6:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025dca:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025dcd:	83 e8 20             	sub    eax,0x20
c0025dd0:	eb 1a                	jmp    c0025dec <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0025dd2:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0025dd5:	eb 95                	jmp    c0025d6c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0025dd7:	83 ec 0c             	sub    esp,0xc
c0025dda:	68 10 d1 02 c0       	push   0xc002d110
c0025ddf:	e8 89 47 ff ff       	call   c001a56d <Krnl::panic(char const*)>
c0025de4:	83 c4 10             	add    esp,0x10
c0025de7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025dec:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025def:	5b                   	pop    ebx
c0025df0:	5e                   	pop    esi
c0025df1:	5f                   	pop    edi
c0025df2:	5d                   	pop    ebp
c0025df3:	c3                   	ret    

c0025df4 <PIC::disable()>:
c0025df4:	55                   	push   ebp
c0025df5:	89 e5                	mov    ebp,esp
c0025df7:	83 ec 10             	sub    esp,0x10
c0025dfa:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0025e00:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0025e04:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025e07:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025e0b:	ee                   	out    dx,al
c0025e0c:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0025e12:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0025e16:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025e19:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0025e1d:	ee                   	out    dx,al
c0025e1e:	90                   	nop
c0025e1f:	c9                   	leave  
c0025e20:	c3                   	ret    
c0025e21:	90                   	nop

c0025e22 <PIC::close(int, int, void*)>:
c0025e22:	55                   	push   ebp
c0025e23:	89 e5                	mov    ebp,esp
c0025e25:	83 ec 08             	sub    esp,0x8
c0025e28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0025e2d:	83 c0 3c             	add    eax,0x3c
c0025e30:	8b 00                	mov    eax,DWORD PTR [eax]
c0025e32:	83 ec 0c             	sub    esp,0xc
c0025e35:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e38:	ff d0                	call   eax
c0025e3a:	83 c4 10             	add    esp,0x10
c0025e3d:	b8 00 00 00 00       	mov    eax,0x0
c0025e42:	c9                   	leave  
c0025e43:	c3                   	ret    

c0025e44 <PIC::PIC()>:
c0025e44:	83 ec 0c             	sub    esp,0xc
c0025e47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e4b:	83 ec 08             	sub    esp,0x8
c0025e4e:	68 bc d1 02 c0       	push   0xc002d1bc
c0025e53:	50                   	push   eax
c0025e54:	e8 bb ed fe ff       	call   c0014c14 <InterruptController::InterruptController(char const*)>
c0025e59:	83 c4 10             	add    esp,0x10
c0025e5c:	ba e8 d1 02 c0       	mov    edx,0xc002d1e8
c0025e61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e65:	89 10                	mov    DWORD PTR [eax],edx
c0025e67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e6b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025e71:	0f b6 d0             	movzx  edx,al
c0025e74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e78:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0025e7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e83:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025e89:	0f b6 d0             	movzx  edx,al
c0025e8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e90:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025e95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e99:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025e9f:	8d 50 01             	lea    edx,[eax+0x1]
c0025ea2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025ea6:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025eac:	0f b6 d0             	movzx  edx,al
c0025eaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025eb3:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025eb7:	83 e1 3f             	and    ecx,0x3f
c0025eba:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025ebe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ec2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025ec8:	0f b6 d0             	movzx  edx,al
c0025ecb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ecf:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0025ed6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025eda:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025ee0:	0f b6 d0             	movzx  edx,al
c0025ee3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ee7:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025eec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ef0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025ef6:	8d 50 01             	lea    edx,[eax+0x1]
c0025ef9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025efd:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025f03:	0f b6 d0             	movzx  edx,al
c0025f06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f0a:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025f0e:	83 e1 3f             	and    ecx,0x3f
c0025f11:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025f15:	90                   	nop
c0025f16:	83 c4 0c             	add    esp,0xc
c0025f19:	c3                   	ret    

c0025f1a <PIC::ioWait()>:
c0025f1a:	eb 00                	jmp    c0025f1c <PIC::ioWait()+0x2>
c0025f1c:	eb 00                	jmp    c0025f1e <PIC::ioWait()+0x4>
c0025f1e:	90                   	nop
c0025f1f:	c3                   	ret    

c0025f20 <PIC::getIRQReg(int)>:
c0025f20:	55                   	push   ebp
c0025f21:	89 e5                	mov    ebp,esp
c0025f23:	83 ec 10             	sub    esp,0x10
c0025f26:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025f29:	0f b6 c0             	movzx  eax,al
c0025f2c:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025f32:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0025f35:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025f38:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025f3c:	ee                   	out    dx,al
c0025f3d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025f40:	0f b6 c0             	movzx  eax,al
c0025f43:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025f49:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0025f4c:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025f4f:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025f53:	ee                   	out    dx,al
c0025f54:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0025f5a:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0025f5e:	89 c2                	mov    edx,eax
c0025f60:	ec                   	in     al,dx
c0025f61:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0025f64:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025f67:	0f b6 c0             	movzx  eax,al
c0025f6a:	c1 e0 08             	shl    eax,0x8
c0025f6d:	89 c1                	mov    ecx,eax
c0025f6f:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0025f75:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0025f79:	89 c2                	mov    edx,eax
c0025f7b:	ec                   	in     al,dx
c0025f7c:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0025f7f:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025f82:	0f b6 c0             	movzx  eax,al
c0025f85:	09 c8                	or     eax,ecx
c0025f87:	c9                   	leave  
c0025f88:	c3                   	ret    
c0025f89:	90                   	nop

c0025f8a <PIC::eoi(unsigned char)>:
c0025f8a:	55                   	push   ebp
c0025f8b:	89 e5                	mov    ebp,esp
c0025f8d:	83 ec 14             	sub    esp,0x14
c0025f90:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025f93:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0025f96:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025f9a:	75 1e                	jne    c0025fba <PIC::eoi(unsigned char)+0x30>
c0025f9c:	6a 0b                	push   0xb
c0025f9e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025fa1:	e8 7a ff ff ff       	call   c0025f20 <PIC::getIRQReg(int)>
c0025fa6:	83 c4 08             	add    esp,0x8
c0025fa9:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0025fad:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0025fb1:	25 80 00 00 00       	and    eax,0x80
c0025fb6:	85 c0                	test   eax,eax
c0025fb8:	74 5f                	je     c0026019 <PIC::eoi(unsigned char)+0x8f>
c0025fba:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0025fbe:	75 2d                	jne    c0025fed <PIC::eoi(unsigned char)+0x63>
c0025fc0:	6a 0b                	push   0xb
c0025fc2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025fc5:	e8 56 ff ff ff       	call   c0025f20 <PIC::getIRQReg(int)>
c0025fca:	83 c4 08             	add    esp,0x8
c0025fcd:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0025fd1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025fd4:	66 85 c0             	test   ax,ax
c0025fd7:	78 14                	js     c0025fed <PIC::eoi(unsigned char)+0x63>
c0025fd9:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0025fdf:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0025fe3:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025fe6:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025fea:	ee                   	out    dx,al
c0025feb:	eb 2d                	jmp    c002601a <PIC::eoi(unsigned char)+0x90>
c0025fed:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025ff1:	76 12                	jbe    c0026005 <PIC::eoi(unsigned char)+0x7b>
c0025ff3:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025ff9:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0025ffd:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026000:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026004:	ee                   	out    dx,al
c0026005:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c002600b:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c002600f:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026012:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026016:	ee                   	out    dx,al
c0026017:	eb 01                	jmp    c002601a <PIC::eoi(unsigned char)+0x90>
c0026019:	90                   	nop
c002601a:	c9                   	leave  
c002601b:	c3                   	ret    

c002601c <PIC::remap()>:
c002601c:	55                   	push   ebp
c002601d:	89 e5                	mov    ebp,esp
c002601f:	83 ec 48             	sub    esp,0x48
c0026022:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0026029:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0026030:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0026036:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0026039:	89 c2                	mov    edx,eax
c002603b:	ec                   	in     al,dx
c002603c:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c002603f:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0026042:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0026045:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c002604b:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c002604e:	89 c2                	mov    edx,eax
c0026050:	ec                   	in     al,dx
c0026051:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0026054:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0026057:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c002605a:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0026060:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0026064:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0026067:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c002606a:	ee                   	out    dx,al
c002606b:	83 ec 0c             	sub    esp,0xc
c002606e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026071:	e8 a4 fe ff ff       	call   c0025f1a <PIC::ioWait()>
c0026076:	83 c4 10             	add    esp,0x10
c0026079:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c002607f:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0026083:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0026086:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0026089:	ee                   	out    dx,al
c002608a:	83 ec 0c             	sub    esp,0xc
c002608d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026090:	e8 85 fe ff ff       	call   c0025f1a <PIC::ioWait()>
c0026095:	83 c4 10             	add    esp,0x10
c0026098:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c002609b:	0f b6 c0             	movzx  eax,al
c002609e:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c00260a4:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c00260a7:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c00260aa:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00260ad:	ee                   	out    dx,al
c00260ae:	83 ec 0c             	sub    esp,0xc
c00260b1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260b4:	e8 61 fe ff ff       	call   c0025f1a <PIC::ioWait()>
c00260b9:	83 c4 10             	add    esp,0x10
c00260bc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00260bf:	0f b6 c0             	movzx  eax,al
c00260c2:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c00260c8:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c00260cb:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c00260ce:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00260d1:	ee                   	out    dx,al
c00260d2:	83 ec 0c             	sub    esp,0xc
c00260d5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260d8:	e8 3d fe ff ff       	call   c0025f1a <PIC::ioWait()>
c00260dd:	83 c4 10             	add    esp,0x10
c00260e0:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c00260e6:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c00260ea:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c00260ed:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c00260f0:	ee                   	out    dx,al
c00260f1:	83 ec 0c             	sub    esp,0xc
c00260f4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260f7:	e8 1e fe ff ff       	call   c0025f1a <PIC::ioWait()>
c00260fc:	83 c4 10             	add    esp,0x10
c00260ff:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0026105:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0026109:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c002610c:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002610f:	ee                   	out    dx,al
c0026110:	83 ec 0c             	sub    esp,0xc
c0026113:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026116:	e8 ff fd ff ff       	call   c0025f1a <PIC::ioWait()>
c002611b:	83 c4 10             	add    esp,0x10
c002611e:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0026124:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0026128:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c002612b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002612e:	ee                   	out    dx,al
c002612f:	83 ec 0c             	sub    esp,0xc
c0026132:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026135:	e8 e0 fd ff ff       	call   c0025f1a <PIC::ioWait()>
c002613a:	83 c4 10             	add    esp,0x10
c002613d:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0026143:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0026147:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c002614a:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002614d:	ee                   	out    dx,al
c002614e:	83 ec 0c             	sub    esp,0xc
c0026151:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026154:	e8 c1 fd ff ff       	call   c0025f1a <PIC::ioWait()>
c0026159:	83 c4 10             	add    esp,0x10
c002615c:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0026160:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0026166:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0026169:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c002616c:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002616f:	ee                   	out    dx,al
c0026170:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0026174:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c002617a:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c002617d:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0026180:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0026183:	ee                   	out    dx,al
c0026184:	90                   	nop
c0026185:	c9                   	leave  
c0026186:	c3                   	ret    
c0026187:	90                   	nop

c0026188 <PIC::open(int, int, void*)>:
c0026188:	55                   	push   ebp
c0026189:	89 e5                	mov    ebp,esp
c002618b:	83 ec 18             	sub    esp,0x18
c002618e:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0026194:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0026198:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c002619b:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002619f:	ee                   	out    dx,al
c00261a0:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c00261a6:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c00261aa:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00261ad:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00261b1:	ee                   	out    dx,al
c00261b2:	83 ec 0c             	sub    esp,0xc
c00261b5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261b8:	e8 5f fe ff ff       	call   c002601c <PIC::remap()>
c00261bd:	83 c4 10             	add    esp,0x10
c00261c0:	b8 00 00 00 00       	mov    eax,0x0
c00261c5:	c9                   	leave  
c00261c6:	c3                   	ret    
c00261c7:	90                   	nop

c00261c8 <APICTimer::close(int, int, void*)>:
c00261c8:	b8 00 00 00 00       	mov    eax,0x0
c00261cd:	c3                   	ret    

c00261ce <apicTimerHandler(regs*, void*)>:
c00261ce:	83 ec 0c             	sub    esp,0xc
c00261d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00261d5:	8b 00                	mov    eax,DWORD PTR [eax]
c00261d7:	99                   	cdq    
c00261d8:	52                   	push   edx
c00261d9:	50                   	push   eax
c00261da:	6a 00                	push   0x0
c00261dc:	68 00 ca 9a 3b       	push   0x3b9aca00
c00261e1:	e8 86 07 00 00       	call   c002696c <__udivdi3>
c00261e6:	83 c4 10             	add    esp,0x10
c00261e9:	83 ec 08             	sub    esp,0x8
c00261ec:	52                   	push   edx
c00261ed:	50                   	push   eax
c00261ee:	e8 a2 0a ff ff       	call   c0016c95 <timerHandler(unsigned long long)>
c00261f3:	83 c4 10             	add    esp,0x10
c00261f6:	90                   	nop
c00261f7:	83 c4 0c             	add    esp,0xc
c00261fa:	c3                   	ret    
c00261fb:	90                   	nop

c00261fc <APICTimer::write(int)>:
c00261fc:	53                   	push   ebx
c00261fd:	83 ec 28             	sub    esp,0x28
c0026200:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026204:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0026208:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002620e:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0026213:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026219:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c002621f:	83 ec 0c             	sub    esp,0xc
c0026222:	50                   	push   eax
c0026223:	e8 de f4 ff ff       	call   c0025706 <APIC::getBase()>
c0026228:	83 c4 10             	add    esp,0x10
c002622b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002622f:	a1 10 ea 02 c0       	mov    eax,ds:0xc002ea10
c0026234:	8b 15 14 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea14
c002623a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002623e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0026242:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026246:	05 e0 03 00 00       	add    eax,0x3e0
c002624b:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026251:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026255:	05 80 03 00 00       	add    eax,0x380
c002625a:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0026260:	fb                   	sti    
c0026261:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026265:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026269:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c002626e:	83 d2 00             	adc    edx,0x0
c0026271:	89 c1                	mov    ecx,eax
c0026273:	89 d3                	mov    ebx,edx
c0026275:	a1 10 ea 02 c0       	mov    eax,ds:0xc002ea10
c002627a:	8b 15 14 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea14
c0026280:	39 c8                	cmp    eax,ecx
c0026282:	89 d0                	mov    eax,edx
c0026284:	19 d8                	sbb    eax,ebx
c0026286:	73 02                	jae    c002628a <APICTimer::write(int)+0x8e>
c0026288:	eb d7                	jmp    c0026261 <APICTimer::write(int)+0x65>
c002628a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002628e:	05 20 03 00 00       	add    eax,0x320
c0026293:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0026299:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002629d:	05 90 03 00 00       	add    eax,0x390
c00262a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00262a4:	f7 d0                	not    eax
c00262a6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00262aa:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00262ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00262b2:	ba 00 00 00 00       	mov    edx,0x0
c00262b7:	f7 f3                	div    ebx
c00262b9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00262bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00262c1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00262c7:	0d 00 00 02 00       	or     eax,0x20000
c00262cc:	89 c2                	mov    edx,eax
c00262ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00262d2:	05 20 03 00 00       	add    eax,0x320
c00262d7:	89 10                	mov    DWORD PTR [eax],edx
c00262d9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00262dd:	05 e0 03 00 00       	add    eax,0x3e0
c00262e2:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c00262e8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00262ec:	05 80 03 00 00       	add    eax,0x380
c00262f1:	89 c2                	mov    edx,eax
c00262f3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00262f7:	89 02                	mov    DWORD PTR [edx],eax
c00262f9:	90                   	nop
c00262fa:	83 c4 28             	add    esp,0x28
c00262fd:	5b                   	pop    ebx
c00262fe:	c3                   	ret    
c00262ff:	90                   	nop

c0026300 <APICTimer::open(int, int, void*)>:
c0026300:	57                   	push   edi
c0026301:	56                   	push   esi
c0026302:	53                   	push   ebx
c0026303:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026307:	8b 00                	mov    eax,DWORD PTR [eax]
c0026309:	83 c0 24             	add    eax,0x24
c002630c:	8b 00                	mov    eax,DWORD PTR [eax]
c002630e:	83 ec 08             	sub    esp,0x8
c0026311:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026315:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026319:	ff d0                	call   eax
c002631b:	83 c4 10             	add    esp,0x10
c002631e:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0026323:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026329:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c002632f:	83 ec 0c             	sub    esp,0xc
c0026332:	50                   	push   eax
c0026333:	e8 ce f3 ff ff       	call   c0025706 <APIC::getBase()>
c0026338:	83 c4 10             	add    esp,0x10
c002633b:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0026341:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026345:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002634b:	0f b6 f8             	movzx  edi,al
c002634e:	89 d0                	mov    eax,edx
c0026350:	ba 00 00 00 00       	mov    edx,0x0
c0026355:	89 c1                	mov    ecx,eax
c0026357:	80 e5 ff             	and    ch,0xff
c002635a:	89 cb                	mov    ebx,ecx
c002635c:	0f b6 f2             	movzx  esi,dl
c002635f:	89 d8                	mov    eax,ebx
c0026361:	89 f2                	mov    edx,esi
c0026363:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026367:	8d 5f 08             	lea    ebx,[edi+0x8]
c002636a:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002636e:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0026372:	83 e0 00             	and    eax,0x0
c0026375:	09 d0                	or     eax,edx
c0026377:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002637b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002637f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026385:	8d 50 01             	lea    edx,[eax+0x1]
c0026388:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002638c:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0026392:	0f b6 d0             	movzx  edx,al
c0026395:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026399:	83 c2 08             	add    edx,0x8
c002639c:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00263a0:	0f b6 c9             	movzx  ecx,cl
c00263a3:	81 c9 00 00 01 00    	or     ecx,0x10000
c00263a9:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00263ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263b1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00263b5:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00263bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263bf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00263c3:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c00263c9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00263cd:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00263d3:	83 ec 0c             	sub    esp,0xc
c00263d6:	51                   	push   ecx
c00263d7:	6a 01                	push   0x1
c00263d9:	68 ce 61 02 c0       	push   0xc00261ce
c00263de:	52                   	push   edx
c00263df:	50                   	push   eax
c00263e0:	e8 57 de fe ff       	call   c001423c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00263e5:	83 c4 20             	add    esp,0x20
c00263e8:	89 c2                	mov    edx,eax
c00263ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263ee:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00263f4:	b8 00 00 00 00       	mov    eax,0x0
c00263f9:	5b                   	pop    ebx
c00263fa:	5e                   	pop    esi
c00263fb:	5f                   	pop    edi
c00263fc:	c3                   	ret    
c00263fd:	90                   	nop

c00263fe <APICTimer::APICTimer()>:
c00263fe:	83 ec 0c             	sub    esp,0xc
c0026401:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026405:	83 ec 08             	sub    esp,0x8
c0026408:	68 28 d2 02 c0       	push   0xc002d228
c002640d:	50                   	push   eax
c002640e:	e8 f3 07 ff ff       	call   c0016c06 <Timer::Timer(char const*)>
c0026413:	83 c4 10             	add    esp,0x10
c0026416:	ba 3c d2 02 c0       	mov    edx,0xc002d23c
c002641b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002641f:	89 10                	mov    DWORD PTR [eax],edx
c0026421:	90                   	nop
c0026422:	83 c4 0c             	add    esp,0xc
c0026425:	c3                   	ret    

c0026426 <PIT::write(int)>:
c0026426:	83 ec 10             	sub    esp,0x10
c0026429:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002642d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026431:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026437:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002643b:	a3 44 27 03 c0       	mov    ds:0xc0032744,eax
c0026440:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0026445:	99                   	cdq    
c0026446:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c002644a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002644e:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0026455:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c002645a:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c002645e:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0026463:	ee                   	out    dx,al
c0026464:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026468:	0f b6 c0             	movzx  eax,al
c002646b:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0026472:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0026476:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c002647a:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c002647f:	ee                   	out    dx,al
c0026480:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026484:	c1 f8 08             	sar    eax,0x8
c0026487:	0f b6 c0             	movzx  eax,al
c002648a:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0026491:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0026495:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0026499:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c002649e:	ee                   	out    dx,al
c002649f:	90                   	nop
c00264a0:	83 c4 10             	add    esp,0x10
c00264a3:	c3                   	ret    

c00264a4 <pitHandler(regs*, void*)>:
c00264a4:	83 ec 0c             	sub    esp,0xc
c00264a7:	a1 44 27 03 c0       	mov    eax,ds:0xc0032744
c00264ac:	99                   	cdq    
c00264ad:	52                   	push   edx
c00264ae:	50                   	push   eax
c00264af:	6a 00                	push   0x0
c00264b1:	68 00 ca 9a 3b       	push   0x3b9aca00
c00264b6:	e8 b1 04 00 00       	call   c002696c <__udivdi3>
c00264bb:	83 c4 10             	add    esp,0x10
c00264be:	83 ec 08             	sub    esp,0x8
c00264c1:	52                   	push   edx
c00264c2:	50                   	push   eax
c00264c3:	e8 cd 07 ff ff       	call   c0016c95 <timerHandler(unsigned long long)>
c00264c8:	83 c4 10             	add    esp,0x10
c00264cb:	90                   	nop
c00264cc:	83 c4 0c             	add    esp,0xc
c00264cf:	c3                   	ret    

c00264d0 <PIT::open(int, int, void*)>:
c00264d0:	83 ec 0c             	sub    esp,0xc
c00264d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264d7:	8b 00                	mov    eax,DWORD PTR [eax]
c00264d9:	83 c0 24             	add    eax,0x24
c00264dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00264de:	83 ec 08             	sub    esp,0x8
c00264e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00264e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00264e9:	ff d0                	call   eax
c00264eb:	83 c4 10             	add    esp,0x10
c00264ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264f2:	83 ec 0c             	sub    esp,0xc
c00264f5:	6a 00                	push   0x0
c00264f7:	6a 01                	push   0x1
c00264f9:	68 a4 64 02 c0       	push   0xc00264a4
c00264fe:	6a 00                	push   0x0
c0026500:	50                   	push   eax
c0026501:	e8 36 dd fe ff       	call   c001423c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026506:	83 c4 20             	add    esp,0x20
c0026509:	89 c2                	mov    edx,eax
c002650b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002650f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026515:	b8 00 00 00 00       	mov    eax,0x0
c002651a:	83 c4 0c             	add    esp,0xc
c002651d:	c3                   	ret    

c002651e <PIT::close(int, int, void*)>:
c002651e:	83 ec 0c             	sub    esp,0xc
c0026521:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026525:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c002652f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026533:	6a 01                	push   0x1
c0026535:	68 a4 64 02 c0       	push   0xc00264a4
c002653a:	6a 00                	push   0x0
c002653c:	50                   	push   eax
c002653d:	e8 38 dd fe ff       	call   c001427a <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0026542:	83 c4 10             	add    esp,0x10
c0026545:	b8 00 00 00 00       	mov    eax,0x0
c002654a:	83 c4 0c             	add    esp,0xc
c002654d:	c3                   	ret    

c002654e <PIT::PIT()>:
c002654e:	83 ec 0c             	sub    esp,0xc
c0026551:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026555:	83 ec 08             	sub    esp,0x8
c0026558:	68 64 d2 02 c0       	push   0xc002d264
c002655d:	50                   	push   eax
c002655e:	e8 a3 06 ff ff       	call   c0016c06 <Timer::Timer(char const*)>
c0026563:	83 c4 10             	add    esp,0x10
c0026566:	ba 8c d2 02 c0       	mov    edx,0xc002d28c
c002656b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002656f:	89 10                	mov    DWORD PTR [eax],edx
c0026571:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026575:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002657b:	0f b6 d0             	movzx  edx,al
c002657e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026582:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0026589:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002658d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026593:	0f b6 d0             	movzx  edx,al
c0026596:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002659a:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c002659f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265a3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00265a9:	8d 50 01             	lea    edx,[eax+0x1]
c00265ac:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00265b0:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00265b6:	0f b6 d0             	movzx  edx,al
c00265b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265bd:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00265c1:	83 e1 3f             	and    ecx,0x3f
c00265c4:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00265c8:	90                   	nop
c00265c9:	83 c4 0c             	add    esp,0xc
c00265cc:	c3                   	ret    
c00265cd:	66 90                	xchg   ax,ax
c00265cf:	90                   	nop

c00265d0 <avxDetect>:
c00265d0:	b8 00 00 00 00       	mov    eax,0x0
c00265d5:	c3                   	ret    

c00265d6 <avxSave>:
c00265d6:	c3                   	ret    

c00265d7 <avxLoad>:
c00265d7:	c3                   	ret    

c00265d8 <avxInit>:
c00265d8:	c3                   	ret    

c00265d9 <avxClose>:
c00265d9:	c3                   	ret    

c00265da <wouldSheSayYes>:
c00265da:	c3                   	ret    
c00265db:	49                   	dec    ecx
c00265dc:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c00265e0:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c00265e4:	75 20                	jne    c0026606 <sseDetect.noSSE+0x1>
c00265e6:	4e                   	dec    esi
c00265e7:	79 61                	jns    c002664a <x87Detect+0x14>
c00265e9:	68 2e 2e 2e 00       	push   0x2e2e2e
c00265ee:	66 90                	xchg   ax,ax

c00265f0 <absolutelyNoChanceInHell>:
c00265f0:	b8 01 00 00 00       	mov    eax,0x1
c00265f5:	0f a2                	cpuid  
c00265f7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c00265fd:	74 06                	je     c0026605 <sseDetect.noSSE>
c00265ff:	b8 01 00 00 00       	mov    eax,0x1
c0026604:	c3                   	ret    

c0026605 <sseDetect.noSSE>:
c0026605:	31 c0                	xor    eax,eax
c0026607:	c3                   	ret    

c0026608 <sseSave>:
c0026608:	0f ae 44 24 08       	fxsave [esp+0x8]
c002660d:	c3                   	ret    

c002660e <sseLoad>:
c002660e:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c0026613:	c3                   	ret    

c0026614 <sseInit>:
c0026614:	e8 43 00 00 00       	call   c002665c <x87Init>
c0026619:	0f 20 e0             	mov    eax,cr4
c002661c:	66 0d 00 06          	or     ax,0x600
c0026620:	0f 22 e0             	mov    cr4,eax
c0026623:	c3                   	ret    

c0026624 <sseClose>:
c0026624:	c3                   	ret    
c0026625:	66 90                	xchg   ax,ax
c0026627:	66 90                	xchg   ax,ax
c0026629:	66 90                	xchg   ax,ax
c002662b:	66 90                	xchg   ax,ax
c002662d:	66 90                	xchg   ax,ax
c002662f:	90                   	nop

c0026630 <value_37F>:
c0026630:	7f 03                	jg     c0026635 <value_37A+0x1>

c0026632 <value_37E>:
c0026632:	7e 03                	jle    c0026637 <x87Detect+0x1>

c0026634 <value_37A>:
c0026634:	7a 03                	jp     c0026639 <x87Detect+0x3>

c0026636 <x87Detect>:
c0026636:	b8 01 00 00 00       	mov    eax,0x1
c002663b:	0f a2                	cpuid  
c002663d:	f7 c2 01 00 00 00    	test   edx,0x1
c0026643:	74 06                	je     c002664b <x87Detect.nox87>
c0026645:	b8 01 00 00 00       	mov    eax,0x1
c002664a:	c3                   	ret    

c002664b <x87Detect.nox87>:
c002664b:	b8 00 00 00 00       	mov    eax,0x0
c0026650:	c3                   	ret    

c0026651 <x87Save>:
c0026651:	9b dd 74 24 08       	fsave  [esp+0x8]
c0026656:	c3                   	ret    

c0026657 <x87Load>:
c0026657:	dd 64 24 08          	frstor [esp+0x8]
c002665b:	c3                   	ret    

c002665c <x87Init>:
c002665c:	9b db e3             	finit  
c002665f:	0f 20 c0             	mov    eax,cr0
c0026662:	66 25 fb ff          	and    ax,0xfffb
c0026666:	66 0d 22 00          	or     ax,0x22
c002666a:	0f 22 c0             	mov    cr0,eax
c002666d:	0f 06                	clts   
c002666f:	d9 2d 34 66 02 c0    	fldcw  WORD PTR ds:0xc0026634
c0026675:	c3                   	ret    

c0026676 <x87Close>:
c0026676:	c3                   	ret    
c0026677:	90                   	nop

c0026678 <__do_global_ctors_aux>:
c0026678:	a1 bc 91 02 c0       	mov    eax,ds:0xc00291bc
c002667d:	83 f8 ff             	cmp    eax,0xffffffff
c0026680:	74 1a                	je     c002669c <__do_global_ctors_aux+0x24>
c0026682:	55                   	push   ebp
c0026683:	89 e5                	mov    ebp,esp
c0026685:	53                   	push   ebx
c0026686:	52                   	push   edx
c0026687:	bb bc 91 02 c0       	mov    ebx,0xc00291bc
c002668c:	ff d0                	call   eax
c002668e:	83 eb 04             	sub    ebx,0x4
c0026691:	8b 03                	mov    eax,DWORD PTR [ebx]
c0026693:	83 f8 ff             	cmp    eax,0xffffffff
c0026696:	75 f4                	jne    c002668c <__do_global_ctors_aux+0x14>
c0026698:	58                   	pop    eax
c0026699:	5b                   	pop    ebx
c002669a:	5d                   	pop    ebp
c002669b:	c3                   	ret    
c002669c:	c3                   	ret    
c002669d:	66 90                	xchg   ax,ax
c002669f:	90                   	nop

c00266a0 <__divdi3>:
c00266a0:	55                   	push   ebp
c00266a1:	57                   	push   edi
c00266a2:	56                   	push   esi
c00266a3:	53                   	push   ebx
c00266a4:	83 ec 1c             	sub    esp,0x1c
c00266a7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00266ab:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00266af:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00266b2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00266b6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00266ba:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00266be:	85 db                	test   ebx,ebx
c00266c0:	0f 88 8e 00 00 00    	js     c0026754 <__divdi3+0xb4>
c00266c6:	89 dd                	mov    ebp,ebx
c00266c8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00266d0:	89 d3                	mov    ebx,edx
c00266d2:	85 d2                	test   edx,edx
c00266d4:	79 0d                	jns    c00266e3 <__divdi3+0x43>
c00266d6:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c00266da:	f7 d8                	neg    eax
c00266dc:	83 d2 00             	adc    edx,0x0
c00266df:	f7 da                	neg    edx
c00266e1:	89 d3                	mov    ebx,edx
c00266e3:	89 c7                	mov    edi,eax
c00266e5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00266e8:	85 db                	test   ebx,ebx
c00266ea:	75 48                	jne    c0026734 <__divdi3+0x94>
c00266ec:	39 ef                	cmp    edi,ebp
c00266ee:	76 24                	jbe    c0026714 <__divdi3+0x74>
c00266f0:	89 ea                	mov    edx,ebp
c00266f2:	f7 f7                	div    edi
c00266f4:	89 c1                	mov    ecx,eax
c00266f6:	31 f6                	xor    esi,esi
c00266f8:	89 c8                	mov    eax,ecx
c00266fa:	89 f2                	mov    edx,esi
c00266fc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026700:	85 c9                	test   ecx,ecx
c0026702:	74 07                	je     c002670b <__divdi3+0x6b>
c0026704:	f7 d8                	neg    eax
c0026706:	83 d2 00             	adc    edx,0x0
c0026709:	f7 da                	neg    edx
c002670b:	83 c4 1c             	add    esp,0x1c
c002670e:	5b                   	pop    ebx
c002670f:	5e                   	pop    esi
c0026710:	5f                   	pop    edi
c0026711:	5d                   	pop    ebp
c0026712:	c3                   	ret    
c0026713:	90                   	nop
c0026714:	85 ff                	test   edi,edi
c0026716:	75 0b                	jne    c0026723 <__divdi3+0x83>
c0026718:	b8 01 00 00 00       	mov    eax,0x1
c002671d:	31 d2                	xor    edx,edx
c002671f:	f7 f3                	div    ebx
c0026721:	89 c7                	mov    edi,eax
c0026723:	31 d2                	xor    edx,edx
c0026725:	89 e8                	mov    eax,ebp
c0026727:	f7 f7                	div    edi
c0026729:	89 c6                	mov    esi,eax
c002672b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002672e:	f7 f7                	div    edi
c0026730:	89 c1                	mov    ecx,eax
c0026732:	eb c4                	jmp    c00266f8 <__divdi3+0x58>
c0026734:	39 eb                	cmp    ebx,ebp
c0026736:	77 3c                	ja     c0026774 <__divdi3+0xd4>
c0026738:	0f bd f3             	bsr    esi,ebx
c002673b:	83 f6 1f             	xor    esi,0x1f
c002673e:	75 40                	jne    c0026780 <__divdi3+0xe0>
c0026740:	39 eb                	cmp    ebx,ebp
c0026742:	72 09                	jb     c002674d <__divdi3+0xad>
c0026744:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0026747:	0f 87 97 00 00 00    	ja     c00267e4 <__divdi3+0x144>
c002674d:	b9 01 00 00 00       	mov    ecx,0x1
c0026752:	eb a4                	jmp    c00266f8 <__divdi3+0x58>
c0026754:	f7 d9                	neg    ecx
c0026756:	83 d3 00             	adc    ebx,0x0
c0026759:	f7 db                	neg    ebx
c002675b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002675e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026762:	89 dd                	mov    ebp,ebx
c0026764:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c002676c:	e9 5f ff ff ff       	jmp    c00266d0 <__divdi3+0x30>
c0026771:	8d 76 00             	lea    esi,[esi+0x0]
c0026774:	31 f6                	xor    esi,esi
c0026776:	31 c9                	xor    ecx,ecx
c0026778:	e9 7b ff ff ff       	jmp    c00266f8 <__divdi3+0x58>
c002677d:	8d 76 00             	lea    esi,[esi+0x0]
c0026780:	b8 20 00 00 00       	mov    eax,0x20
c0026785:	29 f0                	sub    eax,esi
c0026787:	89 f1                	mov    ecx,esi
c0026789:	d3 e3                	shl    ebx,cl
c002678b:	89 fa                	mov    edx,edi
c002678d:	88 c1                	mov    cl,al
c002678f:	d3 ea                	shr    edx,cl
c0026791:	09 da                	or     edx,ebx
c0026793:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0026797:	89 f1                	mov    ecx,esi
c0026799:	d3 e7                	shl    edi,cl
c002679b:	89 eb                	mov    ebx,ebp
c002679d:	88 c1                	mov    cl,al
c002679f:	d3 eb                	shr    ebx,cl
c00267a1:	89 f1                	mov    ecx,esi
c00267a3:	d3 e5                	shl    ebp,cl
c00267a5:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00267a8:	88 c1                	mov    cl,al
c00267aa:	d3 ea                	shr    edx,cl
c00267ac:	09 d5                	or     ebp,edx
c00267ae:	89 e8                	mov    eax,ebp
c00267b0:	89 da                	mov    edx,ebx
c00267b2:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c00267b6:	89 d3                	mov    ebx,edx
c00267b8:	89 c5                	mov    ebp,eax
c00267ba:	f7 e7                	mul    edi
c00267bc:	39 d3                	cmp    ebx,edx
c00267be:	72 18                	jb     c00267d8 <__divdi3+0x138>
c00267c0:	74 0a                	je     c00267cc <__divdi3+0x12c>
c00267c2:	89 e9                	mov    ecx,ebp
c00267c4:	31 f6                	xor    esi,esi
c00267c6:	e9 2d ff ff ff       	jmp    c00266f8 <__divdi3+0x58>
c00267cb:	90                   	nop
c00267cc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00267cf:	89 f1                	mov    ecx,esi
c00267d1:	d3 e7                	shl    edi,cl
c00267d3:	39 c7                	cmp    edi,eax
c00267d5:	73 eb                	jae    c00267c2 <__divdi3+0x122>
c00267d7:	90                   	nop
c00267d8:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00267db:	31 f6                	xor    esi,esi
c00267dd:	e9 16 ff ff ff       	jmp    c00266f8 <__divdi3+0x58>
c00267e2:	66 90                	xchg   ax,ax
c00267e4:	31 c9                	xor    ecx,ecx
c00267e6:	e9 0d ff ff ff       	jmp    c00266f8 <__divdi3+0x58>
c00267eb:	90                   	nop

c00267ec <__moddi3>:
c00267ec:	55                   	push   ebp
c00267ed:	57                   	push   edi
c00267ee:	56                   	push   esi
c00267ef:	53                   	push   ebx
c00267f0:	83 ec 2c             	sub    esp,0x2c
c00267f3:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00267f7:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00267fb:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00267ff:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0026803:	85 db                	test   ebx,ebx
c0026805:	0f 88 85 00 00 00    	js     c0026890 <__moddi3+0xa4>
c002680b:	89 de                	mov    esi,ebx
c002680d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0026815:	89 d7                	mov    edi,edx
c0026817:	85 d2                	test   edx,edx
c0026819:	79 09                	jns    c0026824 <__moddi3+0x38>
c002681b:	f7 d8                	neg    eax
c002681d:	83 d2 00             	adc    edx,0x0
c0026820:	f7 da                	neg    edx
c0026822:	89 d7                	mov    edi,edx
c0026824:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026828:	89 cd                	mov    ebp,ecx
c002682a:	85 ff                	test   edi,edi
c002682c:	75 52                	jne    c0026880 <__moddi3+0x94>
c002682e:	89 c3                	mov    ebx,eax
c0026830:	39 f0                	cmp    eax,esi
c0026832:	76 24                	jbe    c0026858 <__moddi3+0x6c>
c0026834:	89 c8                	mov    eax,ecx
c0026836:	89 f2                	mov    edx,esi
c0026838:	f7 f3                	div    ebx
c002683a:	89 d6                	mov    esi,edx
c002683c:	89 f0                	mov    eax,esi
c002683e:	31 d2                	xor    edx,edx
c0026840:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026844:	85 c9                	test   ecx,ecx
c0026846:	74 07                	je     c002684f <__moddi3+0x63>
c0026848:	f7 d8                	neg    eax
c002684a:	83 d2 00             	adc    edx,0x0
c002684d:	f7 da                	neg    edx
c002684f:	83 c4 2c             	add    esp,0x2c
c0026852:	5b                   	pop    ebx
c0026853:	5e                   	pop    esi
c0026854:	5f                   	pop    edi
c0026855:	5d                   	pop    ebp
c0026856:	c3                   	ret    
c0026857:	90                   	nop
c0026858:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002685c:	85 db                	test   ebx,ebx
c002685e:	75 0d                	jne    c002686d <__moddi3+0x81>
c0026860:	b8 01 00 00 00       	mov    eax,0x1
c0026865:	31 d2                	xor    edx,edx
c0026867:	f7 f7                	div    edi
c0026869:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002686d:	89 f0                	mov    eax,esi
c002686f:	31 d2                	xor    edx,edx
c0026871:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026875:	f7 f7                	div    edi
c0026877:	89 e8                	mov    eax,ebp
c0026879:	f7 f7                	div    edi
c002687b:	89 d6                	mov    esi,edx
c002687d:	eb bd                	jmp    c002683c <__moddi3+0x50>
c002687f:	90                   	nop
c0026880:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026884:	39 f7                	cmp    edi,esi
c0026886:	76 20                	jbe    c00268a8 <__moddi3+0xbc>
c0026888:	89 c8                	mov    eax,ecx
c002688a:	89 f2                	mov    edx,esi
c002688c:	eb b2                	jmp    c0026840 <__moddi3+0x54>
c002688e:	66 90                	xchg   ax,ax
c0026890:	f7 d9                	neg    ecx
c0026892:	83 d3 00             	adc    ebx,0x0
c0026895:	f7 db                	neg    ebx
c0026897:	89 de                	mov    esi,ebx
c0026899:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c00268a1:	e9 6f ff ff ff       	jmp    c0026815 <__moddi3+0x29>
c00268a6:	66 90                	xchg   ax,ax
c00268a8:	0f bd c7             	bsr    eax,edi
c00268ab:	83 f0 1f             	xor    eax,0x1f
c00268ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00268b2:	75 24                	jne    c00268d8 <__moddi3+0xec>
c00268b4:	39 f7                	cmp    edi,esi
c00268b6:	72 06                	jb     c00268be <__moddi3+0xd2>
c00268b8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00268bc:	77 0c                	ja     c00268ca <__moddi3+0xde>
c00268be:	89 e9                	mov    ecx,ebp
c00268c0:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00268c4:	19 fe                	sbb    esi,edi
c00268c6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00268ca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00268ce:	89 f2                	mov    edx,esi
c00268d0:	e9 6b ff ff ff       	jmp    c0026840 <__moddi3+0x54>
c00268d5:	8d 76 00             	lea    esi,[esi+0x0]
c00268d8:	b8 20 00 00 00       	mov    eax,0x20
c00268dd:	89 c2                	mov    edx,eax
c00268df:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00268e3:	29 da                	sub    edx,ebx
c00268e5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00268e9:	88 d9                	mov    cl,bl
c00268eb:	d3 e7                	shl    edi,cl
c00268ed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00268f1:	88 d1                	mov    cl,dl
c00268f3:	d3 e8                	shr    eax,cl
c00268f5:	09 c7                	or     edi,eax
c00268f7:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c00268fb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00268ff:	89 d8                	mov    eax,ebx
c0026901:	88 d9                	mov    cl,bl
c0026903:	d3 e7                	shl    edi,cl
c0026905:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026909:	89 f3                	mov    ebx,esi
c002690b:	88 d1                	mov    cl,dl
c002690d:	d3 eb                	shr    ebx,cl
c002690f:	89 c7                	mov    edi,eax
c0026911:	88 c1                	mov    cl,al
c0026913:	d3 e6                	shl    esi,cl
c0026915:	89 e8                	mov    eax,ebp
c0026917:	88 d1                	mov    cl,dl
c0026919:	d3 e8                	shr    eax,cl
c002691b:	09 f0                	or     eax,esi
c002691d:	89 f9                	mov    ecx,edi
c002691f:	d3 e5                	shl    ebp,cl
c0026921:	89 da                	mov    edx,ebx
c0026923:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0026927:	89 d3                	mov    ebx,edx
c0026929:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002692d:	89 c6                	mov    esi,eax
c002692f:	89 d1                	mov    ecx,edx
c0026931:	39 d3                	cmp    ebx,edx
c0026933:	72 27                	jb     c002695c <__moddi3+0x170>
c0026935:	74 21                	je     c0026958 <__moddi3+0x16c>
c0026937:	29 f5                	sub    ebp,esi
c0026939:	19 cb                	sbb    ebx,ecx
c002693b:	89 de                	mov    esi,ebx
c002693d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0026941:	d3 e6                	shl    esi,cl
c0026943:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0026947:	89 f9                	mov    ecx,edi
c0026949:	d3 ed                	shr    ebp,cl
c002694b:	09 ee                	or     esi,ebp
c002694d:	89 f0                	mov    eax,esi
c002694f:	d3 eb                	shr    ebx,cl
c0026951:	89 da                	mov    edx,ebx
c0026953:	e9 e8 fe ff ff       	jmp    c0026840 <__moddi3+0x54>
c0026958:	39 c5                	cmp    ebp,eax
c002695a:	73 db                	jae    c0026937 <__moddi3+0x14b>
c002695c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026960:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0026964:	89 d1                	mov    ecx,edx
c0026966:	89 c6                	mov    esi,eax
c0026968:	eb cd                	jmp    c0026937 <__moddi3+0x14b>
c002696a:	66 90                	xchg   ax,ax

c002696c <__udivdi3>:
c002696c:	55                   	push   ebp
c002696d:	57                   	push   edi
c002696e:	56                   	push   esi
c002696f:	53                   	push   ebx
c0026970:	83 ec 1c             	sub    esp,0x1c
c0026973:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0026977:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002697b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002697f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026983:	85 d2                	test   edx,edx
c0026985:	75 41                	jne    c00269c8 <__udivdi3+0x5c>
c0026987:	39 f7                	cmp    edi,esi
c0026989:	76 15                	jbe    c00269a0 <__udivdi3+0x34>
c002698b:	89 e8                	mov    eax,ebp
c002698d:	89 f2                	mov    edx,esi
c002698f:	f7 f7                	div    edi
c0026991:	31 db                	xor    ebx,ebx
c0026993:	89 da                	mov    edx,ebx
c0026995:	83 c4 1c             	add    esp,0x1c
c0026998:	5b                   	pop    ebx
c0026999:	5e                   	pop    esi
c002699a:	5f                   	pop    edi
c002699b:	5d                   	pop    ebp
c002699c:	c3                   	ret    
c002699d:	8d 76 00             	lea    esi,[esi+0x0]
c00269a0:	89 f9                	mov    ecx,edi
c00269a2:	85 ff                	test   edi,edi
c00269a4:	75 0b                	jne    c00269b1 <__udivdi3+0x45>
c00269a6:	b8 01 00 00 00       	mov    eax,0x1
c00269ab:	31 d2                	xor    edx,edx
c00269ad:	f7 f7                	div    edi
c00269af:	89 c1                	mov    ecx,eax
c00269b1:	31 d2                	xor    edx,edx
c00269b3:	89 f0                	mov    eax,esi
c00269b5:	f7 f1                	div    ecx
c00269b7:	89 c3                	mov    ebx,eax
c00269b9:	89 e8                	mov    eax,ebp
c00269bb:	f7 f1                	div    ecx
c00269bd:	89 da                	mov    edx,ebx
c00269bf:	83 c4 1c             	add    esp,0x1c
c00269c2:	5b                   	pop    ebx
c00269c3:	5e                   	pop    esi
c00269c4:	5f                   	pop    edi
c00269c5:	5d                   	pop    ebp
c00269c6:	c3                   	ret    
c00269c7:	90                   	nop
c00269c8:	39 f2                	cmp    edx,esi
c00269ca:	77 1c                	ja     c00269e8 <__udivdi3+0x7c>
c00269cc:	0f bd da             	bsr    ebx,edx
c00269cf:	83 f3 1f             	xor    ebx,0x1f
c00269d2:	75 24                	jne    c00269f8 <__udivdi3+0x8c>
c00269d4:	39 f2                	cmp    edx,esi
c00269d6:	72 08                	jb     c00269e0 <__udivdi3+0x74>
c00269d8:	39 ef                	cmp    edi,ebp
c00269da:	0f 87 84 00 00 00    	ja     c0026a64 <__udivdi3+0xf8>
c00269e0:	b8 01 00 00 00       	mov    eax,0x1
c00269e5:	eb ac                	jmp    c0026993 <__udivdi3+0x27>
c00269e7:	90                   	nop
c00269e8:	31 db                	xor    ebx,ebx
c00269ea:	31 c0                	xor    eax,eax
c00269ec:	89 da                	mov    edx,ebx
c00269ee:	83 c4 1c             	add    esp,0x1c
c00269f1:	5b                   	pop    ebx
c00269f2:	5e                   	pop    esi
c00269f3:	5f                   	pop    edi
c00269f4:	5d                   	pop    ebp
c00269f5:	c3                   	ret    
c00269f6:	66 90                	xchg   ax,ax
c00269f8:	b8 20 00 00 00       	mov    eax,0x20
c00269fd:	29 d8                	sub    eax,ebx
c00269ff:	88 d9                	mov    cl,bl
c0026a01:	d3 e2                	shl    edx,cl
c0026a03:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0026a07:	89 fa                	mov    edx,edi
c0026a09:	88 c1                	mov    cl,al
c0026a0b:	d3 ea                	shr    edx,cl
c0026a0d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026a11:	09 d1                	or     ecx,edx
c0026a13:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026a17:	88 d9                	mov    cl,bl
c0026a19:	d3 e7                	shl    edi,cl
c0026a1b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026a1f:	89 f7                	mov    edi,esi
c0026a21:	88 c1                	mov    cl,al
c0026a23:	d3 ef                	shr    edi,cl
c0026a25:	88 d9                	mov    cl,bl
c0026a27:	d3 e6                	shl    esi,cl
c0026a29:	89 ea                	mov    edx,ebp
c0026a2b:	88 c1                	mov    cl,al
c0026a2d:	d3 ea                	shr    edx,cl
c0026a2f:	09 d6                	or     esi,edx
c0026a31:	89 f0                	mov    eax,esi
c0026a33:	89 fa                	mov    edx,edi
c0026a35:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026a39:	89 d7                	mov    edi,edx
c0026a3b:	89 c6                	mov    esi,eax
c0026a3d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026a41:	39 d7                	cmp    edi,edx
c0026a43:	72 13                	jb     c0026a58 <__udivdi3+0xec>
c0026a45:	74 09                	je     c0026a50 <__udivdi3+0xe4>
c0026a47:	89 f0                	mov    eax,esi
c0026a49:	31 db                	xor    ebx,ebx
c0026a4b:	e9 43 ff ff ff       	jmp    c0026993 <__udivdi3+0x27>
c0026a50:	88 d9                	mov    cl,bl
c0026a52:	d3 e5                	shl    ebp,cl
c0026a54:	39 c5                	cmp    ebp,eax
c0026a56:	73 ef                	jae    c0026a47 <__udivdi3+0xdb>
c0026a58:	8d 46 ff             	lea    eax,[esi-0x1]
c0026a5b:	31 db                	xor    ebx,ebx
c0026a5d:	e9 31 ff ff ff       	jmp    c0026993 <__udivdi3+0x27>
c0026a62:	66 90                	xchg   ax,ax
c0026a64:	31 c0                	xor    eax,eax
c0026a66:	e9 28 ff ff ff       	jmp    c0026993 <__udivdi3+0x27>
c0026a6b:	90                   	nop

c0026a6c <__umoddi3>:
c0026a6c:	55                   	push   ebp
c0026a6d:	57                   	push   edi
c0026a6e:	56                   	push   esi
c0026a6f:	53                   	push   ebx
c0026a70:	83 ec 1c             	sub    esp,0x1c
c0026a73:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0026a77:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026a7b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026a7f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0026a83:	89 da                	mov    edx,ebx
c0026a85:	85 c0                	test   eax,eax
c0026a87:	75 37                	jne    c0026ac0 <__umoddi3+0x54>
c0026a89:	39 df                	cmp    edi,ebx
c0026a8b:	76 13                	jbe    c0026aa0 <__umoddi3+0x34>
c0026a8d:	89 f0                	mov    eax,esi
c0026a8f:	f7 f7                	div    edi
c0026a91:	89 d0                	mov    eax,edx
c0026a93:	31 d2                	xor    edx,edx
c0026a95:	83 c4 1c             	add    esp,0x1c
c0026a98:	5b                   	pop    ebx
c0026a99:	5e                   	pop    esi
c0026a9a:	5f                   	pop    edi
c0026a9b:	5d                   	pop    ebp
c0026a9c:	c3                   	ret    
c0026a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0026aa0:	89 fd                	mov    ebp,edi
c0026aa2:	85 ff                	test   edi,edi
c0026aa4:	75 0b                	jne    c0026ab1 <__umoddi3+0x45>
c0026aa6:	b8 01 00 00 00       	mov    eax,0x1
c0026aab:	31 d2                	xor    edx,edx
c0026aad:	f7 f7                	div    edi
c0026aaf:	89 c5                	mov    ebp,eax
c0026ab1:	89 d8                	mov    eax,ebx
c0026ab3:	31 d2                	xor    edx,edx
c0026ab5:	f7 f5                	div    ebp
c0026ab7:	89 f0                	mov    eax,esi
c0026ab9:	f7 f5                	div    ebp
c0026abb:	89 d0                	mov    eax,edx
c0026abd:	eb d4                	jmp    c0026a93 <__umoddi3+0x27>
c0026abf:	90                   	nop
c0026ac0:	89 f1                	mov    ecx,esi
c0026ac2:	39 d8                	cmp    eax,ebx
c0026ac4:	76 0a                	jbe    c0026ad0 <__umoddi3+0x64>
c0026ac6:	89 f0                	mov    eax,esi
c0026ac8:	83 c4 1c             	add    esp,0x1c
c0026acb:	5b                   	pop    ebx
c0026acc:	5e                   	pop    esi
c0026acd:	5f                   	pop    edi
c0026ace:	5d                   	pop    ebp
c0026acf:	c3                   	ret    
c0026ad0:	0f bd e8             	bsr    ebp,eax
c0026ad3:	83 f5 1f             	xor    ebp,0x1f
c0026ad6:	75 1c                	jne    c0026af4 <__umoddi3+0x88>
c0026ad8:	39 d8                	cmp    eax,ebx
c0026ada:	72 04                	jb     c0026ae0 <__umoddi3+0x74>
c0026adc:	39 f7                	cmp    edi,esi
c0026ade:	77 08                	ja     c0026ae8 <__umoddi3+0x7c>
c0026ae0:	89 da                	mov    edx,ebx
c0026ae2:	29 fe                	sub    esi,edi
c0026ae4:	19 c2                	sbb    edx,eax
c0026ae6:	89 f1                	mov    ecx,esi
c0026ae8:	89 c8                	mov    eax,ecx
c0026aea:	83 c4 1c             	add    esp,0x1c
c0026aed:	5b                   	pop    ebx
c0026aee:	5e                   	pop    esi
c0026aef:	5f                   	pop    edi
c0026af0:	5d                   	pop    ebp
c0026af1:	c3                   	ret    
c0026af2:	66 90                	xchg   ax,ax
c0026af4:	ba 20 00 00 00       	mov    edx,0x20
c0026af9:	29 ea                	sub    edx,ebp
c0026afb:	89 e9                	mov    ecx,ebp
c0026afd:	d3 e0                	shl    eax,cl
c0026aff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026b03:	89 f8                	mov    eax,edi
c0026b05:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0026b09:	88 d1                	mov    cl,dl
c0026b0b:	d3 e8                	shr    eax,cl
c0026b0d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026b11:	09 c1                	or     ecx,eax
c0026b13:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026b17:	89 e9                	mov    ecx,ebp
c0026b19:	d3 e7                	shl    edi,cl
c0026b1b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026b1f:	89 d8                	mov    eax,ebx
c0026b21:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0026b25:	88 d1                	mov    cl,dl
c0026b27:	d3 e8                	shr    eax,cl
c0026b29:	89 c7                	mov    edi,eax
c0026b2b:	89 e9                	mov    ecx,ebp
c0026b2d:	d3 e3                	shl    ebx,cl
c0026b2f:	89 f0                	mov    eax,esi
c0026b31:	88 d1                	mov    cl,dl
c0026b33:	d3 e8                	shr    eax,cl
c0026b35:	09 d8                	or     eax,ebx
c0026b37:	89 e9                	mov    ecx,ebp
c0026b39:	d3 e6                	shl    esi,cl
c0026b3b:	89 f3                	mov    ebx,esi
c0026b3d:	89 fa                	mov    edx,edi
c0026b3f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026b43:	89 d1                	mov    ecx,edx
c0026b45:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026b49:	89 c6                	mov    esi,eax
c0026b4b:	89 d7                	mov    edi,edx
c0026b4d:	39 d1                	cmp    ecx,edx
c0026b4f:	72 27                	jb     c0026b78 <__umoddi3+0x10c>
c0026b51:	74 21                	je     c0026b74 <__umoddi3+0x108>
c0026b53:	89 ca                	mov    edx,ecx
c0026b55:	29 f3                	sub    ebx,esi
c0026b57:	19 fa                	sbb    edx,edi
c0026b59:	89 d0                	mov    eax,edx
c0026b5b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0026b5f:	d3 e0                	shl    eax,cl
c0026b61:	89 e9                	mov    ecx,ebp
c0026b63:	d3 eb                	shr    ebx,cl
c0026b65:	09 d8                	or     eax,ebx
c0026b67:	d3 ea                	shr    edx,cl
c0026b69:	83 c4 1c             	add    esp,0x1c
c0026b6c:	5b                   	pop    ebx
c0026b6d:	5e                   	pop    esi
c0026b6e:	5f                   	pop    edi
c0026b6f:	5d                   	pop    ebp
c0026b70:	c3                   	ret    
c0026b71:	8d 76 00             	lea    esi,[esi+0x0]
c0026b74:	39 c3                	cmp    ebx,eax
c0026b76:	73 db                	jae    c0026b53 <__umoddi3+0xe7>
c0026b78:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026b7c:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026b80:	89 d7                	mov    edi,edx
c0026b82:	89 c6                	mov    esi,eax
c0026b84:	eb cd                	jmp    c0026b53 <__umoddi3+0xe7>

c0026b86 <__addsf3>:
c0026b86:	55                   	push   ebp
c0026b87:	89 e5                	mov    ebp,esp
c0026b89:	57                   	push   edi
c0026b8a:	56                   	push   esi
c0026b8b:	53                   	push   ebx
c0026b8c:	83 ec 08             	sub    esp,0x8
c0026b8f:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026b92:	89 fa                	mov    edx,edi
c0026b94:	89 f8                	mov    eax,edi
c0026b96:	c1 f8 17             	sar    eax,0x17
c0026b99:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026b9c:	c1 e2 08             	shl    edx,0x8
c0026b9f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026ba5:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026ba8:	89 de                	mov    esi,ebx
c0026baa:	c1 fe 17             	sar    esi,0x17
c0026bad:	c1 e3 08             	shl    ebx,0x8
c0026bb0:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026bb6:	31 f0                	xor    eax,esi
c0026bb8:	0f 88 3b 01 00 00    	js     c0026cf9 <__addsf3+0x173>
c0026bbe:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0026bc1:	29 f1                	sub    ecx,esi
c0026bc3:	85 c9                	test   ecx,ecx
c0026bc5:	7e 54                	jle    c0026c1b <__addsf3+0x95>
c0026bc7:	89 f0                	mov    eax,esi
c0026bc9:	84 c0                	test   al,al
c0026bcb:	75 10                	jne    c0026bdd <__addsf3+0x57>
c0026bcd:	85 db                	test   ebx,ebx
c0026bcf:	0f 84 aa 02 00 00    	je     c0026e7f <__addsf3+0x2f9>
c0026bd5:	49                   	dec    ecx
c0026bd6:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026bd9:	74 38                	je     c0026c13 <__addsf3+0x8d>
c0026bdb:	eb 13                	jmp    c0026bf0 <__addsf3+0x6a>
c0026bdd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026be0:	f7 d0                	not    eax
c0026be2:	84 c0                	test   al,al
c0026be4:	0f 84 95 02 00 00    	je     c0026e7f <__addsf3+0x2f9>
c0026bea:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026bf0:	83 f9 1f             	cmp    ecx,0x1f
c0026bf3:	0f 8f 86 02 00 00    	jg     c0026e7f <__addsf3+0x2f9>
c0026bf9:	89 de                	mov    esi,ebx
c0026bfb:	d3 ee                	shr    esi,cl
c0026bfd:	b8 20 00 00 00       	mov    eax,0x20
c0026c02:	29 c8                	sub    eax,ecx
c0026c04:	89 c1                	mov    ecx,eax
c0026c06:	d3 e3                	shl    ebx,cl
c0026c08:	31 c0                	xor    eax,eax
c0026c0a:	85 db                	test   ebx,ebx
c0026c0c:	0f 95 c0             	setne  al
c0026c0f:	09 f0                	or     eax,esi
c0026c11:	01 d0                	add    eax,edx
c0026c13:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026c16:	e9 b6 00 00 00       	jmp    c0026cd1 <__addsf3+0x14b>
c0026c1b:	74 5c                	je     c0026c79 <__addsf3+0xf3>
c0026c1d:	89 f1                	mov    ecx,esi
c0026c1f:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0026c22:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026c25:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026c29:	75 14                	jne    c0026c3f <__addsf3+0xb9>
c0026c2b:	85 d2                	test   edx,edx
c0026c2d:	0f 84 4c 02 00 00    	je     c0026e7f <__addsf3+0x2f9>
c0026c33:	49                   	dec    ecx
c0026c34:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026c37:	0f 84 94 00 00 00    	je     c0026cd1 <__addsf3+0x14b>
c0026c3d:	eb 12                	jmp    c0026c51 <__addsf3+0xcb>
c0026c3f:	89 f0                	mov    eax,esi
c0026c41:	f7 d0                	not    eax
c0026c43:	84 c0                	test   al,al
c0026c45:	0f 84 34 02 00 00    	je     c0026e7f <__addsf3+0x2f9>
c0026c4b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026c51:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026c54:	83 f9 1f             	cmp    ecx,0x1f
c0026c57:	0f 8f 22 02 00 00    	jg     c0026e7f <__addsf3+0x2f9>
c0026c5d:	89 d7                	mov    edi,edx
c0026c5f:	d3 ef                	shr    edi,cl
c0026c61:	b8 20 00 00 00       	mov    eax,0x20
c0026c66:	29 c8                	sub    eax,ecx
c0026c68:	89 c1                	mov    ecx,eax
c0026c6a:	d3 e2                	shl    edx,cl
c0026c6c:	31 c0                	xor    eax,eax
c0026c6e:	85 d2                	test   edx,edx
c0026c70:	0f 95 c0             	setne  al
c0026c73:	09 f8                	or     eax,edi
c0026c75:	01 d8                	add    eax,ebx
c0026c77:	eb 58                	jmp    c0026cd1 <__addsf3+0x14b>
c0026c79:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026c7c:	8d 70 01             	lea    esi,[eax+0x1]
c0026c7f:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0026c85:	75 32                	jne    c0026cb9 <__addsf3+0x133>
c0026c87:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026c8b:	75 1f                	jne    c0026cac <__addsf3+0x126>
c0026c8d:	85 d2                	test   edx,edx
c0026c8f:	0f 84 e0 01 00 00    	je     c0026e75 <__addsf3+0x2ef>
c0026c95:	85 db                	test   ebx,ebx
c0026c97:	0f 84 e2 01 00 00    	je     c0026e7f <__addsf3+0x2f9>
c0026c9d:	89 d0                	mov    eax,edx
c0026c9f:	01 d8                	add    eax,ebx
c0026ca1:	0f 89 a9 01 00 00    	jns    c0026e50 <__addsf3+0x2ca>
c0026ca7:	e9 9d 01 00 00       	jmp    c0026e49 <__addsf3+0x2c3>
c0026cac:	85 d2                	test   edx,edx
c0026cae:	0f 85 cb 01 00 00    	jne    c0026e7f <__addsf3+0x2f9>
c0026cb4:	e9 bc 01 00 00       	jmp    c0026e75 <__addsf3+0x2ef>
c0026cb9:	31 c0                	xor    eax,eax
c0026cbb:	89 f1                	mov    ecx,esi
c0026cbd:	f7 d1                	not    ecx
c0026cbf:	84 c9                	test   cl,cl
c0026cc1:	0f 84 90 01 00 00    	je     c0026e57 <__addsf3+0x2d1>
c0026cc7:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026cca:	d1 e8                	shr    eax,1
c0026ccc:	e9 86 01 00 00       	jmp    c0026e57 <__addsf3+0x2d1>
c0026cd1:	85 c0                	test   eax,eax
c0026cd3:	0f 89 7e 01 00 00    	jns    c0026e57 <__addsf3+0x2d1>
c0026cd9:	46                   	inc    esi
c0026cda:	89 f2                	mov    edx,esi
c0026cdc:	f7 d2                	not    edx
c0026cde:	84 d2                	test   dl,dl
c0026ce0:	0f 84 6f 01 00 00    	je     c0026e55 <__addsf3+0x2cf>
c0026ce6:	89 c2                	mov    edx,eax
c0026ce8:	83 e2 01             	and    edx,0x1
c0026ceb:	d1 e8                	shr    eax,1
c0026ced:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0026cf2:	09 d0                	or     eax,edx
c0026cf4:	e9 5e 01 00 00       	jmp    c0026e57 <__addsf3+0x2d1>
c0026cf9:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0026cfd:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026d00:	89 f0                	mov    eax,esi
c0026d02:	0f b6 c0             	movzx  eax,al
c0026d05:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026d08:	29 c1                	sub    ecx,eax
c0026d0a:	85 c9                	test   ecx,ecx
c0026d0c:	7e 55                	jle    c0026d63 <__addsf3+0x1dd>
c0026d0e:	85 c0                	test   eax,eax
c0026d10:	75 11                	jne    c0026d23 <__addsf3+0x19d>
c0026d12:	85 db                	test   ebx,ebx
c0026d14:	0f 84 65 01 00 00    	je     c0026e7f <__addsf3+0x2f9>
c0026d1a:	49                   	dec    ecx
c0026d1b:	75 19                	jne    c0026d36 <__addsf3+0x1b0>
c0026d1d:	89 d0                	mov    eax,edx
c0026d1f:	29 d8                	sub    eax,ebx
c0026d21:	eb 38                	jmp    c0026d5b <__addsf3+0x1d5>
c0026d23:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026d26:	f7 d0                	not    eax
c0026d28:	84 c0                	test   al,al
c0026d2a:	0f 84 4f 01 00 00    	je     c0026e7f <__addsf3+0x2f9>
c0026d30:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026d36:	83 f9 1f             	cmp    ecx,0x1f
c0026d39:	0f 8f 40 01 00 00    	jg     c0026e7f <__addsf3+0x2f9>
c0026d3f:	89 de                	mov    esi,ebx
c0026d41:	d3 ee                	shr    esi,cl
c0026d43:	b8 20 00 00 00       	mov    eax,0x20
c0026d48:	29 c8                	sub    eax,ecx
c0026d4a:	89 c1                	mov    ecx,eax
c0026d4c:	d3 e3                	shl    ebx,cl
c0026d4e:	31 c0                	xor    eax,eax
c0026d50:	85 db                	test   ebx,ebx
c0026d52:	0f 95 c0             	setne  al
c0026d55:	09 f0                	or     eax,esi
c0026d57:	29 c2                	sub    edx,eax
c0026d59:	89 d0                	mov    eax,edx
c0026d5b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026d5e:	e9 af 00 00 00       	jmp    c0026e12 <__addsf3+0x28c>
c0026d63:	74 5c                	je     c0026dc1 <__addsf3+0x23b>
c0026d65:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026d68:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026d6b:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026d6f:	75 14                	jne    c0026d85 <__addsf3+0x1ff>
c0026d71:	85 d2                	test   edx,edx
c0026d73:	0f 84 06 01 00 00    	je     c0026e7f <__addsf3+0x2f9>
c0026d79:	48                   	dec    eax
c0026d7a:	75 1b                	jne    c0026d97 <__addsf3+0x211>
c0026d7c:	89 d8                	mov    eax,ebx
c0026d7e:	29 d0                	sub    eax,edx
c0026d80:	e9 8d 00 00 00       	jmp    c0026e12 <__addsf3+0x28c>
c0026d85:	89 f1                	mov    ecx,esi
c0026d87:	f7 d1                	not    ecx
c0026d89:	84 c9                	test   cl,cl
c0026d8b:	0f 84 ee 00 00 00    	je     c0026e7f <__addsf3+0x2f9>
c0026d91:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026d97:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026d9a:	83 f8 1f             	cmp    eax,0x1f
c0026d9d:	0f 8f dc 00 00 00    	jg     c0026e7f <__addsf3+0x2f9>
c0026da3:	89 d7                	mov    edi,edx
c0026da5:	88 c1                	mov    cl,al
c0026da7:	d3 ef                	shr    edi,cl
c0026da9:	b9 20 00 00 00       	mov    ecx,0x20
c0026dae:	29 c1                	sub    ecx,eax
c0026db0:	d3 e2                	shl    edx,cl
c0026db2:	31 c0                	xor    eax,eax
c0026db4:	85 d2                	test   edx,edx
c0026db6:	0f 95 c0             	setne  al
c0026db9:	09 f8                	or     eax,edi
c0026dbb:	29 c3                	sub    ebx,eax
c0026dbd:	89 d8                	mov    eax,ebx
c0026dbf:	eb 51                	jmp    c0026e12 <__addsf3+0x28c>
c0026dc1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026dc4:	40                   	inc    eax
c0026dc5:	a8 fe                	test   al,0xfe
c0026dc7:	75 3d                	jne    c0026e06 <__addsf3+0x280>
c0026dc9:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026dcd:	0f 85 a7 00 00 00    	jne    c0026e7a <__addsf3+0x2f4>
c0026dd3:	85 d2                	test   edx,edx
c0026dd5:	75 12                	jne    c0026de9 <__addsf3+0x263>
c0026dd7:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026dda:	85 db                	test   ebx,ebx
c0026ddc:	0f 85 9d 00 00 00    	jne    c0026e7f <__addsf3+0x2f9>
c0026de2:	31 ff                	xor    edi,edi
c0026de4:	e9 96 00 00 00       	jmp    c0026e7f <__addsf3+0x2f9>
c0026de9:	85 db                	test   ebx,ebx
c0026deb:	0f 84 8e 00 00 00    	je     c0026e7f <__addsf3+0x2f9>
c0026df1:	89 d0                	mov    eax,edx
c0026df3:	29 d8                	sub    eax,ebx
c0026df5:	79 06                	jns    c0026dfd <__addsf3+0x277>
c0026df7:	89 d8                	mov    eax,ebx
c0026df9:	29 d0                	sub    eax,edx
c0026dfb:	eb 5a                	jmp    c0026e57 <__addsf3+0x2d1>
c0026dfd:	bf 00 00 00 00       	mov    edi,0x0
c0026e02:	74 7b                	je     c0026e7f <__addsf3+0x2f9>
c0026e04:	eb 4a                	jmp    c0026e50 <__addsf3+0x2ca>
c0026e06:	89 d0                	mov    eax,edx
c0026e08:	29 d8                	sub    eax,ebx
c0026e0a:	79 12                	jns    c0026e1e <__addsf3+0x298>
c0026e0c:	89 d8                	mov    eax,ebx
c0026e0e:	29 d0                	sub    eax,edx
c0026e10:	eb 09                	jmp    c0026e1b <__addsf3+0x295>
c0026e12:	85 c0                	test   eax,eax
c0026e14:	79 41                	jns    c0026e57 <__addsf3+0x2d1>
c0026e16:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026e1b:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0026e1e:	31 f6                	xor    esi,esi
c0026e20:	85 c0                	test   eax,eax
c0026e22:	74 33                	je     c0026e57 <__addsf3+0x2d1>
c0026e24:	0f bd c8             	bsr    ecx,eax
c0026e27:	83 f1 1f             	xor    ecx,0x1f
c0026e2a:	d3 e0                	shl    eax,cl
c0026e2c:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0026e30:	39 ca                	cmp    edx,ecx
c0026e32:	7f 10                	jg     c0026e44 <__addsf3+0x2be>
c0026e34:	29 d1                	sub    ecx,edx
c0026e36:	41                   	inc    ecx
c0026e37:	d3 e8                	shr    eax,cl
c0026e39:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026e3c:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0026e42:	eb 13                	jmp    c0026e57 <__addsf3+0x2d1>
c0026e44:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026e47:	29 ce                	sub    esi,ecx
c0026e49:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026e4e:	eb 07                	jmp    c0026e57 <__addsf3+0x2d1>
c0026e50:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026e53:	eb 02                	jmp    c0026e57 <__addsf3+0x2d1>
c0026e55:	31 c0                	xor    eax,eax
c0026e57:	89 c2                	mov    edx,eax
c0026e59:	c1 ea 08             	shr    edx,0x8
c0026e5c:	a8 7f                	test   al,0x7f
c0026e5e:	0f 95 c1             	setne  cl
c0026e61:	09 d1                	or     ecx,edx
c0026e63:	83 e1 01             	and    ecx,0x1
c0026e66:	c1 e8 07             	shr    eax,0x7
c0026e69:	21 c8                	and    eax,ecx
c0026e6b:	c1 e6 17             	shl    esi,0x17
c0026e6e:	09 d6                	or     esi,edx
c0026e70:	8d 3c 30             	lea    edi,[eax+esi*1]
c0026e73:	eb 0a                	jmp    c0026e7f <__addsf3+0x2f9>
c0026e75:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026e78:	eb 05                	jmp    c0026e7f <__addsf3+0x2f9>
c0026e7a:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0026e7f:	89 f8                	mov    eax,edi
c0026e81:	5a                   	pop    edx
c0026e82:	59                   	pop    ecx
c0026e83:	5b                   	pop    ebx
c0026e84:	5e                   	pop    esi
c0026e85:	5f                   	pop    edi
c0026e86:	5d                   	pop    ebp
c0026e87:	c3                   	ret    

c0026e88 <__subsf3>:
c0026e88:	55                   	push   ebp
c0026e89:	89 e5                	mov    ebp,esp
c0026e8b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026e8e:	05 00 00 00 80       	add    eax,0x80000000
c0026e93:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026e96:	5d                   	pop    ebp
c0026e97:	e9 ea fc ff ff       	jmp    c0026b86 <__addsf3>

c0026e9c <__negsf2>:
c0026e9c:	55                   	push   ebp
c0026e9d:	89 e5                	mov    ebp,esp
c0026e9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026ea2:	05 00 00 00 80       	add    eax,0x80000000
c0026ea7:	5d                   	pop    ebp
c0026ea8:	c3                   	ret    

c0026ea9 <__mulsf3>:
c0026ea9:	55                   	push   ebp
c0026eaa:	89 e5                	mov    ebp,esp
c0026eac:	57                   	push   edi
c0026ead:	56                   	push   esi
c0026eae:	53                   	push   ebx
c0026eaf:	83 ec 1c             	sub    esp,0x1c
c0026eb2:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0026eb5:	89 f0                	mov    eax,esi
c0026eb7:	89 f1                	mov    ecx,esi
c0026eb9:	c1 f9 17             	sar    ecx,0x17
c0026ebc:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026ebf:	c1 e0 08             	shl    eax,0x8
c0026ec2:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026ec7:	89 c1                	mov    ecx,eax
c0026ec9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026ecc:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026ecf:	89 c7                	mov    edi,eax
c0026ed1:	c1 ff 17             	sar    edi,0x17
c0026ed4:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026ed8:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026edb:	89 f8                	mov    eax,edi
c0026edd:	0f b6 c0             	movzx  eax,al
c0026ee0:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026ee3:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0026ee7:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026eea:	42                   	inc    edx
c0026eeb:	80 e2 fe             	and    dl,0xfe
c0026eee:	75 7b                	jne    c0026f6b <__mulsf3+0xc2>
c0026ef0:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026ef4:	74 54                	je     c0026f4a <__mulsf3+0xa1>
c0026ef6:	85 c9                	test   ecx,ecx
c0026ef8:	0f 85 64 01 00 00    	jne    c0027062 <__mulsf3+0x1b9>
c0026efe:	8d 57 01             	lea    edx,[edi+0x1]
c0026f01:	80 e2 fe             	and    dl,0xfe
c0026f04:	75 1f                	jne    c0026f25 <__mulsf3+0x7c>
c0026f06:	85 c0                	test   eax,eax
c0026f08:	b8 00 00 00 00       	mov    eax,0x0
c0026f0d:	74 29                	je     c0026f38 <__mulsf3+0x8f>
c0026f0f:	53                   	push   ebx
c0026f10:	53                   	push   ebx
c0026f11:	50                   	push   eax
c0026f12:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026f15:	e8 96 05 00 00       	call   c00274b0 <__nesf2>
c0026f1a:	83 c4 10             	add    esp,0x10
c0026f1d:	85 c0                	test   eax,eax
c0026f1f:	0f 85 3a 01 00 00    	jne    c002705f <__mulsf3+0x1b6>
c0026f25:	85 ff                	test   edi,edi
c0026f27:	0f 89 35 01 00 00    	jns    c0027062 <__mulsf3+0x1b9>
c0026f2d:	81 c6 00 00 00 80    	add    esi,0x80000000
c0026f33:	e9 2a 01 00 00       	jmp    c0027062 <__mulsf3+0x1b9>
c0026f38:	51                   	push   ecx
c0026f39:	51                   	push   ecx
c0026f3a:	50                   	push   eax
c0026f3b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026f3e:	e8 6d 05 00 00       	call   c00274b0 <__nesf2>
c0026f43:	83 c4 10             	add    esp,0x10
c0026f46:	85 c0                	test   eax,eax
c0026f48:	eb 15                	jmp    c0026f5f <__mulsf3+0xb6>
c0026f4a:	85 c9                	test   ecx,ecx
c0026f4c:	74 0b                	je     c0026f59 <__mulsf3+0xb0>
c0026f4e:	8d 53 ff             	lea    edx,[ebx-0x1]
c0026f51:	01 c9                	add    ecx,ecx
c0026f53:	78 16                	js     c0026f6b <__mulsf3+0xc2>
c0026f55:	89 d3                	mov    ebx,edx
c0026f57:	eb f5                	jmp    c0026f4e <__mulsf3+0xa5>
c0026f59:	89 f8                	mov    eax,edi
c0026f5b:	f7 d0                	not    eax
c0026f5d:	84 c0                	test   al,al
c0026f5f:	75 c4                	jne    c0026f25 <__mulsf3+0x7c>
c0026f61:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0026f66:	e9 f7 00 00 00       	jmp    c0027062 <__mulsf3+0x1b9>
c0026f6b:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0026f6e:	c1 e6 08             	shl    esi,0x8
c0026f71:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0026f77:	8d 57 01             	lea    edx,[edi+0x1]
c0026f7a:	80 e2 fe             	and    dl,0xfe
c0026f7d:	75 63                	jne    c0026fe2 <__mulsf3+0x139>
c0026f7f:	85 c0                	test   eax,eax
c0026f81:	74 2f                	je     c0026fb2 <__mulsf3+0x109>
c0026f83:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026f87:	0f 89 d2 00 00 00    	jns    c002705f <__mulsf3+0x1b6>
c0026f8d:	52                   	push   edx
c0026f8e:	52                   	push   edx
c0026f8f:	6a 00                	push   0x0
c0026f91:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026f94:	e8 dc 04 00 00       	call   c0027475 <__eqsf2>
c0026f99:	83 c4 10             	add    esp,0x10
c0026f9c:	85 c0                	test   eax,eax
c0026f9e:	0f 85 bb 00 00 00    	jne    c002705f <__mulsf3+0x1b6>
c0026fa4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026fa7:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0026fad:	e9 b0 00 00 00       	jmp    c0027062 <__mulsf3+0x1b9>
c0026fb2:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026fb5:	50                   	push   eax
c0026fb6:	50                   	push   eax
c0026fb7:	6a 00                	push   0x0
c0026fb9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026fbc:	e8 b4 04 00 00       	call   c0027475 <__eqsf2>
c0026fc1:	83 c4 10             	add    esp,0x10
c0026fc4:	85 c0                	test   eax,eax
c0026fc6:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026fc9:	75 0c                	jne    c0026fd7 <__mulsf3+0x12e>
c0026fcb:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026fcf:	0f 89 8a 00 00 00    	jns    c002705f <__mulsf3+0x1b6>
c0026fd5:	eb cd                	jmp    c0026fa4 <__mulsf3+0xfb>
c0026fd7:	8d 43 ff             	lea    eax,[ebx-0x1]
c0026fda:	01 f6                	add    esi,esi
c0026fdc:	78 04                	js     c0026fe2 <__mulsf3+0x139>
c0026fde:	89 c3                	mov    ebx,eax
c0026fe0:	eb f5                	jmp    c0026fd7 <__mulsf3+0x12e>
c0026fe2:	89 c8                	mov    eax,ecx
c0026fe4:	0d 00 00 00 80       	or     eax,0x80000000
c0026fe9:	81 ce 00 00 00 80    	or     esi,0x80000000
c0026fef:	f7 e6                	mul    esi
c0026ff1:	85 c0                	test   eax,eax
c0026ff3:	0f 95 c0             	setne  al
c0026ff6:	0f b6 c0             	movzx  eax,al
c0026ff9:	09 c2                	or     edx,eax
c0026ffb:	78 03                	js     c0027000 <__mulsf3+0x157>
c0026ffd:	01 d2                	add    edx,edx
c0026fff:	4b                   	dec    ebx
c0027000:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0027006:	7f 22                	jg     c002702a <__mulsf3+0x181>
c0027008:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002700e:	85 db                	test   ebx,ebx
c0027010:	7f 23                	jg     c0027035 <__mulsf3+0x18c>
c0027012:	83 fb e9             	cmp    ebx,0xffffffe9
c0027015:	7c 1a                	jl     c0027031 <__mulsf3+0x188>
c0027017:	81 ca 00 00 00 80    	or     edx,0x80000000
c002701d:	b9 01 00 00 00       	mov    ecx,0x1
c0027022:	29 d9                	sub    ecx,ebx
c0027024:	d3 ea                	shr    edx,cl
c0027026:	31 db                	xor    ebx,ebx
c0027028:	eb 0b                	jmp    c0027035 <__mulsf3+0x18c>
c002702a:	bb ff 00 00 00       	mov    ebx,0xff
c002702f:	eb 02                	jmp    c0027033 <__mulsf3+0x18a>
c0027031:	31 db                	xor    ebx,ebx
c0027033:	31 d2                	xor    edx,edx
c0027035:	89 d0                	mov    eax,edx
c0027037:	c1 e8 08             	shr    eax,0x8
c002703a:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c002703d:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027043:	09 fb                	or     ebx,edi
c0027045:	c1 e3 17             	shl    ebx,0x17
c0027048:	09 c3                	or     ebx,eax
c002704a:	f6 c2 7f             	test   dl,0x7f
c002704d:	0f 95 c1             	setne  cl
c0027050:	09 c8                	or     eax,ecx
c0027052:	83 e0 01             	and    eax,0x1
c0027055:	c1 ea 07             	shr    edx,0x7
c0027058:	21 c2                	and    edx,eax
c002705a:	8d 34 13             	lea    esi,[ebx+edx*1]
c002705d:	eb 03                	jmp    c0027062 <__mulsf3+0x1b9>
c002705f:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0027062:	89 f0                	mov    eax,esi
c0027064:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027067:	5b                   	pop    ebx
c0027068:	5e                   	pop    esi
c0027069:	5f                   	pop    edi
c002706a:	5d                   	pop    ebp
c002706b:	c3                   	ret    

c002706c <__divsf3>:
c002706c:	55                   	push   ebp
c002706d:	89 e5                	mov    ebp,esp
c002706f:	57                   	push   edi
c0027070:	56                   	push   esi
c0027071:	53                   	push   ebx
c0027072:	83 ec 1c             	sub    esp,0x1c
c0027075:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027078:	89 d8                	mov    eax,ebx
c002707a:	89 d9                	mov    ecx,ebx
c002707c:	c1 f9 17             	sar    ecx,0x17
c002707f:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0027082:	c1 e0 08             	shl    eax,0x8
c0027085:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002708a:	89 c1                	mov    ecx,eax
c002708c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002708f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027092:	89 c7                	mov    edi,eax
c0027094:	c1 ff 17             	sar    edi,0x17
c0027097:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002709b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002709e:	89 f8                	mov    eax,edi
c00270a0:	0f b6 c0             	movzx  eax,al
c00270a3:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00270a6:	29 c6                	sub    esi,eax
c00270a8:	83 c6 7f             	add    esi,0x7f
c00270ab:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00270ae:	42                   	inc    edx
c00270af:	80 e2 fe             	and    dl,0xfe
c00270b2:	0f 85 9c 00 00 00    	jne    c0027154 <__divsf3+0xe8>
c00270b8:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00270bc:	74 33                	je     c00270f1 <__divsf3+0x85>
c00270be:	85 c9                	test   ecx,ecx
c00270c0:	0f 85 c7 01 00 00    	jne    c002728d <__divsf3+0x221>
c00270c6:	8d 57 01             	lea    edx,[edi+0x1]
c00270c9:	80 e2 fe             	and    dl,0xfe
c00270cc:	75 2f                	jne    c00270fd <__divsf3+0x91>
c00270ce:	85 c0                	test   eax,eax
c00270d0:	74 2b                	je     c00270fd <__divsf3+0x91>
c00270d2:	51                   	push   ecx
c00270d3:	51                   	push   ecx
c00270d4:	6a 00                	push   0x0
c00270d6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00270d9:	e8 d2 03 00 00       	call   c00274b0 <__nesf2>
c00270de:	83 c4 10             	add    esp,0x10
c00270e1:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00270e4:	85 c0                	test   eax,eax
c00270e6:	0f 85 a1 01 00 00    	jne    c002728d <__divsf3+0x221>
c00270ec:	e9 92 01 00 00       	jmp    c0027283 <__divsf3+0x217>
c00270f1:	85 c9                	test   ecx,ecx
c00270f3:	75 1b                	jne    c0027110 <__divsf3+0xa4>
c00270f5:	8d 57 01             	lea    edx,[edi+0x1]
c00270f8:	80 e2 fe             	and    dl,0xfe
c00270fb:	74 1e                	je     c002711b <__divsf3+0xaf>
c00270fd:	85 ff                	test   edi,edi
c00270ff:	0f 89 88 01 00 00    	jns    c002728d <__divsf3+0x221>
c0027105:	81 c3 00 00 00 80    	add    ebx,0x80000000
c002710b:	e9 7d 01 00 00       	jmp    c002728d <__divsf3+0x221>
c0027110:	8d 56 ff             	lea    edx,[esi-0x1]
c0027113:	01 c9                	add    ecx,ecx
c0027115:	78 3d                	js     c0027154 <__divsf3+0xe8>
c0027117:	89 d6                	mov    esi,edx
c0027119:	eb f5                	jmp    c0027110 <__divsf3+0xa4>
c002711b:	85 c0                	test   eax,eax
c002711d:	b8 00 00 00 00       	mov    eax,0x0
c0027122:	74 18                	je     c002713c <__divsf3+0xd0>
c0027124:	52                   	push   edx
c0027125:	52                   	push   edx
c0027126:	50                   	push   eax
c0027127:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002712a:	e8 81 03 00 00       	call   c00274b0 <__nesf2>
c002712f:	83 c4 10             	add    esp,0x10
c0027132:	85 c0                	test   eax,eax
c0027134:	0f 85 50 01 00 00    	jne    c002728a <__divsf3+0x21e>
c002713a:	eb c1                	jmp    c00270fd <__divsf3+0x91>
c002713c:	56                   	push   esi
c002713d:	56                   	push   esi
c002713e:	50                   	push   eax
c002713f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027142:	e8 69 03 00 00       	call   c00274b0 <__nesf2>
c0027147:	83 c4 10             	add    esp,0x10
c002714a:	85 c0                	test   eax,eax
c002714c:	0f 84 31 01 00 00    	je     c0027283 <__divsf3+0x217>
c0027152:	eb a9                	jmp    c00270fd <__divsf3+0x91>
c0027154:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0027157:	c1 e3 08             	shl    ebx,0x8
c002715a:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027160:	8d 57 01             	lea    edx,[edi+0x1]
c0027163:	80 e2 fe             	and    dl,0xfe
c0027166:	75 71                	jne    c00271d9 <__divsf3+0x16d>
c0027168:	85 c0                	test   eax,eax
c002716a:	ba 00 00 00 00       	mov    edx,0x0
c002716f:	74 2f                	je     c00271a0 <__divsf3+0x134>
c0027171:	51                   	push   ecx
c0027172:	51                   	push   ecx
c0027173:	52                   	push   edx
c0027174:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027177:	e8 f9 02 00 00       	call   c0027475 <__eqsf2>
c002717c:	83 c4 10             	add    esp,0x10
c002717f:	85 c0                	test   eax,eax
c0027181:	0f 85 03 01 00 00    	jne    c002728a <__divsf3+0x21e>
c0027187:	31 d2                	xor    edx,edx
c0027189:	89 d3                	mov    ebx,edx
c002718b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002718e:	31 f8                	xor    eax,edi
c0027190:	0f 89 f7 00 00 00    	jns    c002728d <__divsf3+0x221>
c0027196:	bb 00 00 00 80       	mov    ebx,0x80000000
c002719b:	e9 ed 00 00 00       	jmp    c002728d <__divsf3+0x221>
c00271a0:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00271a3:	50                   	push   eax
c00271a4:	50                   	push   eax
c00271a5:	52                   	push   edx
c00271a6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00271a9:	e8 c7 02 00 00       	call   c0027475 <__eqsf2>
c00271ae:	83 c4 10             	add    esp,0x10
c00271b1:	85 c0                	test   eax,eax
c00271b3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00271b6:	75 16                	jne    c00271ce <__divsf3+0x162>
c00271b8:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00271bb:	31 fb                	xor    ebx,edi
c00271bd:	81 e3 00 00 00 80    	and    ebx,0x80000000
c00271c3:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c00271c9:	e9 bf 00 00 00       	jmp    c002728d <__divsf3+0x221>
c00271ce:	8d 46 01             	lea    eax,[esi+0x1]
c00271d1:	01 db                	add    ebx,ebx
c00271d3:	78 04                	js     c00271d9 <__divsf3+0x16d>
c00271d5:	89 c6                	mov    esi,eax
c00271d7:	eb f5                	jmp    c00271ce <__divsf3+0x162>
c00271d9:	89 c8                	mov    eax,ecx
c00271db:	0d 00 00 00 80       	or     eax,0x80000000
c00271e0:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00271e6:	31 d2                	xor    edx,edx
c00271e8:	39 d8                	cmp    eax,ebx
c00271ea:	72 07                	jb     c00271f3 <__divsf3+0x187>
c00271ec:	29 d8                	sub    eax,ebx
c00271ee:	ba 01 00 00 00       	mov    edx,0x1
c00271f3:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c00271fa:	01 d2                	add    edx,edx
c00271fc:	89 c1                	mov    ecx,eax
c00271fe:	01 c0                	add    eax,eax
c0027200:	85 c9                	test   ecx,ecx
c0027202:	78 04                	js     c0027208 <__divsf3+0x19c>
c0027204:	39 c3                	cmp    ebx,eax
c0027206:	77 05                	ja     c002720d <__divsf3+0x1a1>
c0027208:	29 d8                	sub    eax,ebx
c002720a:	83 ca 01             	or     edx,0x1
c002720d:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0027210:	75 e8                	jne    c00271fa <__divsf3+0x18e>
c0027212:	85 c0                	test   eax,eax
c0027214:	0f 95 c0             	setne  al
c0027217:	0f b6 c0             	movzx  eax,al
c002721a:	c1 e2 06             	shl    edx,0x6
c002721d:	09 c2                	or     edx,eax
c002721f:	78 03                	js     c0027224 <__divsf3+0x1b8>
c0027221:	01 d2                	add    edx,edx
c0027223:	4e                   	dec    esi
c0027224:	81 fe fe 00 00 00    	cmp    esi,0xfe
c002722a:	7f 22                	jg     c002724e <__divsf3+0x1e2>
c002722c:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027232:	85 f6                	test   esi,esi
c0027234:	7f 23                	jg     c0027259 <__divsf3+0x1ed>
c0027236:	83 fe e9             	cmp    esi,0xffffffe9
c0027239:	7c 1a                	jl     c0027255 <__divsf3+0x1e9>
c002723b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027241:	b9 01 00 00 00       	mov    ecx,0x1
c0027246:	29 f1                	sub    ecx,esi
c0027248:	d3 ea                	shr    edx,cl
c002724a:	31 f6                	xor    esi,esi
c002724c:	eb 0b                	jmp    c0027259 <__divsf3+0x1ed>
c002724e:	be ff 00 00 00       	mov    esi,0xff
c0027253:	eb 02                	jmp    c0027257 <__divsf3+0x1eb>
c0027255:	31 f6                	xor    esi,esi
c0027257:	31 d2                	xor    edx,edx
c0027259:	89 d0                	mov    eax,edx
c002725b:	c1 e8 08             	shr    eax,0x8
c002725e:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027261:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027267:	09 fe                	or     esi,edi
c0027269:	c1 e6 17             	shl    esi,0x17
c002726c:	09 c6                	or     esi,eax
c002726e:	f6 c2 7f             	test   dl,0x7f
c0027271:	0f 95 c1             	setne  cl
c0027274:	09 c8                	or     eax,ecx
c0027276:	83 e0 01             	and    eax,0x1
c0027279:	c1 ea 07             	shr    edx,0x7
c002727c:	21 c2                	and    edx,eax
c002727e:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0027281:	eb 0a                	jmp    c002728d <__divsf3+0x221>
c0027283:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0027288:	eb 03                	jmp    c002728d <__divsf3+0x221>
c002728a:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c002728d:	89 d8                	mov    eax,ebx
c002728f:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027292:	5b                   	pop    ebx
c0027293:	5e                   	pop    esi
c0027294:	5f                   	pop    edi
c0027295:	5d                   	pop    ebp
c0027296:	c3                   	ret    

c0027297 <__floatsisf>:
c0027297:	55                   	push   ebp
c0027298:	89 e5                	mov    ebp,esp
c002729a:	53                   	push   ebx
c002729b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002729e:	85 d2                	test   edx,edx
c00272a0:	7e 2b                	jle    c00272cd <__floatsisf+0x36>
c00272a2:	0f bd ca             	bsr    ecx,edx
c00272a5:	83 f1 1f             	xor    ecx,0x1f
c00272a8:	d3 e2                	shl    edx,cl
c00272aa:	89 d0                	mov    eax,edx
c00272ac:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00272b1:	89 c3                	mov    ebx,eax
c00272b3:	c1 eb 08             	shr    ebx,0x8
c00272b6:	80 e2 7f             	and    dl,0x7f
c00272b9:	0f 95 c2             	setne  dl
c00272bc:	09 da                	or     edx,ebx
c00272be:	83 e2 01             	and    edx,0x1
c00272c1:	c1 e8 07             	shr    eax,0x7
c00272c4:	21 c2                	and    edx,eax
c00272c6:	b8 9e 00 00 00       	mov    eax,0x9e
c00272cb:	eb 32                	jmp    c00272ff <__floatsisf+0x68>
c00272cd:	b8 00 00 00 00       	mov    eax,0x0
c00272d2:	74 34                	je     c0027308 <__floatsisf+0x71>
c00272d4:	f7 da                	neg    edx
c00272d6:	0f bd ca             	bsr    ecx,edx
c00272d9:	83 f1 1f             	xor    ecx,0x1f
c00272dc:	d3 e2                	shl    edx,cl
c00272de:	89 d0                	mov    eax,edx
c00272e0:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00272e5:	89 c3                	mov    ebx,eax
c00272e7:	c1 eb 08             	shr    ebx,0x8
c00272ea:	80 e2 7f             	and    dl,0x7f
c00272ed:	0f 95 c2             	setne  dl
c00272f0:	09 da                	or     edx,ebx
c00272f2:	83 e2 01             	and    edx,0x1
c00272f5:	c1 e8 07             	shr    eax,0x7
c00272f8:	21 c2                	and    edx,eax
c00272fa:	b8 9e 01 00 00       	mov    eax,0x19e
c00272ff:	29 c8                	sub    eax,ecx
c0027301:	c1 e0 17             	shl    eax,0x17
c0027304:	09 d8                	or     eax,ebx
c0027306:	01 d0                	add    eax,edx
c0027308:	5b                   	pop    ebx
c0027309:	5d                   	pop    ebp
c002730a:	c3                   	ret    

c002730b <__floatunsisf>:
c002730b:	55                   	push   ebp
c002730c:	89 e5                	mov    ebp,esp
c002730e:	53                   	push   ebx
c002730f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027312:	31 c0                	xor    eax,eax
c0027314:	85 d2                	test   edx,edx
c0027316:	74 32                	je     c002734a <__floatunsisf+0x3f>
c0027318:	0f bd ca             	bsr    ecx,edx
c002731b:	83 f1 1f             	xor    ecx,0x1f
c002731e:	d3 e2                	shl    edx,cl
c0027320:	89 d0                	mov    eax,edx
c0027322:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027327:	89 c3                	mov    ebx,eax
c0027329:	c1 eb 08             	shr    ebx,0x8
c002732c:	80 e2 7f             	and    dl,0x7f
c002732f:	0f 95 c2             	setne  dl
c0027332:	09 da                	or     edx,ebx
c0027334:	83 e2 01             	and    edx,0x1
c0027337:	c1 e8 07             	shr    eax,0x7
c002733a:	21 c2                	and    edx,eax
c002733c:	b8 9e 00 00 00       	mov    eax,0x9e
c0027341:	29 c8                	sub    eax,ecx
c0027343:	c1 e0 17             	shl    eax,0x17
c0027346:	09 d8                	or     eax,ebx
c0027348:	01 d0                	add    eax,edx
c002734a:	5b                   	pop    ebx
c002734b:	5d                   	pop    ebp
c002734c:	c3                   	ret    

c002734d <__fixsfsi>:
c002734d:	55                   	push   ebp
c002734e:	89 e5                	mov    ebp,esp
c0027350:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027353:	89 d1                	mov    ecx,edx
c0027355:	c1 e1 08             	shl    ecx,0x8
c0027358:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c002735e:	c1 fa 17             	sar    edx,0x17
c0027361:	78 1c                	js     c002737f <__fixsfsi+0x32>
c0027363:	83 ea 7f             	sub    edx,0x7f
c0027366:	31 c0                	xor    eax,eax
c0027368:	83 fa 1e             	cmp    edx,0x1e
c002736b:	77 40                	ja     c00273ad <__fixsfsi+0x60>
c002736d:	89 c8                	mov    eax,ecx
c002736f:	0d 00 00 00 80       	or     eax,0x80000000
c0027374:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027379:	29 d1                	sub    ecx,edx
c002737b:	d3 e8                	shr    eax,cl
c002737d:	eb 2e                	jmp    c00273ad <__fixsfsi+0x60>
c002737f:	31 c0                	xor    eax,eax
c0027381:	81 c2 81 00 00 00    	add    edx,0x81
c0027387:	78 24                	js     c00273ad <__fixsfsi+0x60>
c0027389:	83 fa 1e             	cmp    edx,0x1e
c002738c:	7e 09                	jle    c0027397 <__fixsfsi+0x4a>
c002738e:	83 fa 1f             	cmp    edx,0x1f
c0027391:	75 18                	jne    c00273ab <__fixsfsi+0x5e>
c0027393:	85 c9                	test   ecx,ecx
c0027395:	75 14                	jne    c00273ab <__fixsfsi+0x5e>
c0027397:	89 c8                	mov    eax,ecx
c0027399:	0d 00 00 00 80       	or     eax,0x80000000
c002739e:	b9 1f 00 00 00       	mov    ecx,0x1f
c00273a3:	29 d1                	sub    ecx,edx
c00273a5:	d3 e8                	shr    eax,cl
c00273a7:	f7 d8                	neg    eax
c00273a9:	eb 02                	jmp    c00273ad <__fixsfsi+0x60>
c00273ab:	31 c0                	xor    eax,eax
c00273ad:	5d                   	pop    ebp
c00273ae:	c3                   	ret    

c00273af <__fixunssfsi>:
c00273af:	55                   	push   ebp
c00273b0:	89 e5                	mov    ebp,esp
c00273b2:	53                   	push   ebx
c00273b3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00273b6:	89 d3                	mov    ebx,edx
c00273b8:	c1 fb 17             	sar    ebx,0x17
c00273bb:	83 eb 7f             	sub    ebx,0x7f
c00273be:	31 c0                	xor    eax,eax
c00273c0:	83 fb 1f             	cmp    ebx,0x1f
c00273c3:	77 18                	ja     c00273dd <__fixunssfsi+0x2e>
c00273c5:	89 d0                	mov    eax,edx
c00273c7:	c1 e0 08             	shl    eax,0x8
c00273ca:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00273cf:	0d 00 00 00 80       	or     eax,0x80000000
c00273d4:	b9 1f 00 00 00       	mov    ecx,0x1f
c00273d9:	29 d9                	sub    ecx,ebx
c00273db:	d3 e8                	shr    eax,cl
c00273dd:	5b                   	pop    ebx
c00273de:	5d                   	pop    ebp
c00273df:	c3                   	ret    

c00273e0 <__cmpsf2>:
c00273e0:	55                   	push   ebp
c00273e1:	89 e5                	mov    ebp,esp
c00273e3:	57                   	push   edi
c00273e4:	56                   	push   esi
c00273e5:	53                   	push   ebx
c00273e6:	83 ec 24             	sub    esp,0x24
c00273e9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00273ec:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00273ef:	e8 4f 10 00 00       	call   c0028443 <__truncdfsf2>
c00273f4:	5a                   	pop    edx
c00273f5:	59                   	pop    ecx
c00273f6:	89 c3                	mov    ebx,eax
c00273f8:	c1 e8 17             	shr    eax,0x17
c00273fb:	0f b6 f0             	movzx  esi,al
c00273fe:	89 d8                	mov    eax,ebx
c0027400:	c1 e8 1f             	shr    eax,0x1f
c0027403:	31 c6                	xor    esi,eax
c0027405:	c1 e3 08             	shl    ebx,0x8
c0027408:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002740b:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002740e:	e8 30 10 00 00       	call   c0028443 <__truncdfsf2>
c0027413:	83 c4 10             	add    esp,0x10
c0027416:	89 c1                	mov    ecx,eax
c0027418:	c1 e9 17             	shr    ecx,0x17
c002741b:	0f b6 c9             	movzx  ecx,cl
c002741e:	89 c7                	mov    edi,eax
c0027420:	c1 ef 1f             	shr    edi,0x1f
c0027423:	89 ca                	mov    edx,ecx
c0027425:	31 fa                	xor    edx,edi
c0027427:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c002742a:	c1 e0 08             	shl    eax,0x8
c002742d:	89 c2                	mov    edx,eax
c002742f:	89 d8                	mov    eax,ebx
c0027431:	09 d0                	or     eax,edx
c0027433:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027438:	09 f0                	or     eax,esi
c002743a:	75 08                	jne    c0027444 <__cmpsf2+0x64>
c002743c:	31 c0                	xor    eax,eax
c002743e:	39 f9                	cmp    ecx,edi
c0027440:	75 0c                	jne    c002744e <__cmpsf2+0x6e>
c0027442:	eb 29                	jmp    c002746d <__cmpsf2+0x8d>
c0027444:	b8 01 00 00 00       	mov    eax,0x1
c0027449:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c002744c:	7f 1f                	jg     c002746d <__cmpsf2+0x8d>
c002744e:	83 c8 ff             	or     eax,0xffffffff
c0027451:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027454:	7c 17                	jl     c002746d <__cmpsf2+0x8d>
c0027456:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c002745c:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0027462:	b8 01 00 00 00       	mov    eax,0x1
c0027467:	39 d3                	cmp    ebx,edx
c0027469:	77 02                	ja     c002746d <__cmpsf2+0x8d>
c002746b:	19 c0                	sbb    eax,eax
c002746d:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027470:	5b                   	pop    ebx
c0027471:	5e                   	pop    esi
c0027472:	5f                   	pop    edi
c0027473:	5d                   	pop    ebp
c0027474:	c3                   	ret    

c0027475 <__eqsf2>:
c0027475:	55                   	push   ebp
c0027476:	89 e5                	mov    ebp,esp
c0027478:	83 ec 24             	sub    esp,0x24
c002747b:	6a 01                	push   0x1
c002747d:	83 ec 0c             	sub    esp,0xc
c0027480:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027483:	e8 df 10 00 00       	call   c0028567 <__extendsfdf2>
c0027488:	83 c4 10             	add    esp,0x10
c002748b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002748e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027491:	52                   	push   edx
c0027492:	50                   	push   eax
c0027493:	50                   	push   eax
c0027494:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027497:	e8 cb 10 00 00       	call   c0028567 <__extendsfdf2>
c002749c:	59                   	pop    ecx
c002749d:	59                   	pop    ecx
c002749e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00274a1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00274a4:	52                   	push   edx
c00274a5:	50                   	push   eax
c00274a6:	e8 35 ff ff ff       	call   c00273e0 <__cmpsf2>
c00274ab:	83 c4 20             	add    esp,0x20
c00274ae:	c9                   	leave  
c00274af:	c3                   	ret    

c00274b0 <__nesf2>:
c00274b0:	eb c3                	jmp    c0027475 <__eqsf2>

c00274b2 <__gtsf2>:
c00274b2:	55                   	push   ebp
c00274b3:	89 e5                	mov    ebp,esp
c00274b5:	83 ec 24             	sub    esp,0x24
c00274b8:	6a ff                	push   0xffffffff
c00274ba:	83 ec 0c             	sub    esp,0xc
c00274bd:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00274c0:	e8 a2 10 00 00       	call   c0028567 <__extendsfdf2>
c00274c5:	83 c4 10             	add    esp,0x10
c00274c8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00274cb:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00274ce:	52                   	push   edx
c00274cf:	50                   	push   eax
c00274d0:	50                   	push   eax
c00274d1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00274d4:	e8 8e 10 00 00       	call   c0028567 <__extendsfdf2>
c00274d9:	59                   	pop    ecx
c00274da:	59                   	pop    ecx
c00274db:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00274de:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00274e1:	52                   	push   edx
c00274e2:	50                   	push   eax
c00274e3:	e8 f8 fe ff ff       	call   c00273e0 <__cmpsf2>
c00274e8:	83 c4 20             	add    esp,0x20
c00274eb:	c9                   	leave  
c00274ec:	c3                   	ret    

c00274ed <__gesf2>:
c00274ed:	eb c3                	jmp    c00274b2 <__gtsf2>

c00274ef <__ltsf2>:
c00274ef:	eb 84                	jmp    c0027475 <__eqsf2>

c00274f1 <__lesf2>:
c00274f1:	eb 82                	jmp    c0027475 <__eqsf2>

c00274f3 <__adddf3>:
c00274f3:	55                   	push   ebp
c00274f4:	89 e5                	mov    ebp,esp
c00274f6:	57                   	push   edi
c00274f7:	56                   	push   esi
c00274f8:	53                   	push   ebx
c00274f9:	83 ec 24             	sub    esp,0x24
c00274fc:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00274ff:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027502:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027505:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027508:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002750b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002750e:	89 c8                	mov    eax,ecx
c0027510:	89 ce                	mov    esi,ecx
c0027512:	c1 fe 14             	sar    esi,0x14
c0027515:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0027518:	89 fb                	mov    ebx,edi
c002751a:	89 fa                	mov    edx,edi
c002751c:	c1 e2 0b             	shl    edx,0xb
c002751f:	c1 e0 0b             	shl    eax,0xb
c0027522:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027527:	c1 eb 15             	shr    ebx,0x15
c002752a:	09 d8                	or     eax,ebx
c002752c:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c002752f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027532:	c1 fe 14             	sar    esi,0x14
c0027535:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027538:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002753b:	89 f3                	mov    ebx,esi
c002753d:	c1 e3 0b             	shl    ebx,0xb
c0027540:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027543:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027546:	c1 e3 0b             	shl    ebx,0xb
c0027549:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c002754f:	c1 ee 15             	shr    esi,0x15
c0027552:	09 f3                	or     ebx,esi
c0027554:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0027557:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002755a:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c002755d:	0f 88 5f 02 00 00    	js     c00277c2 <__adddf3+0x2cf>
c0027563:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027566:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0027569:	85 db                	test   ebx,ebx
c002756b:	0f 8e c7 00 00 00    	jle    c0027638 <__adddf3+0x145>
c0027571:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0027578:	75 1a                	jne    c0027594 <__adddf3+0xa1>
c002757a:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002757d:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027580:	0f 84 b2 05 00 00    	je     c0027b38 <__adddf3+0x645>
c0027586:	4b                   	dec    ebx
c0027587:	75 23                	jne    c00275ac <__adddf3+0xb9>
c0027589:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002758c:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c002758f:	e9 99 00 00 00       	jmp    c002762d <__adddf3+0x13a>
c0027594:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027597:	f7 d6                	not    esi
c0027599:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002759f:	0f 84 93 05 00 00    	je     c0027b38 <__adddf3+0x645>
c00275a5:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00275ac:	83 fb 1f             	cmp    ebx,0x1f
c00275af:	7e 42                	jle    c00275f3 <__adddf3+0x100>
c00275b1:	83 fb 3f             	cmp    ebx,0x3f
c00275b4:	0f 8f 7e 05 00 00    	jg     c0027b38 <__adddf3+0x645>
c00275ba:	83 e3 1f             	and    ebx,0x1f
c00275bd:	89 d9                	mov    ecx,ebx
c00275bf:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00275c2:	d3 ef                	shr    edi,cl
c00275c4:	31 db                	xor    ebx,ebx
c00275c6:	85 c9                	test   ecx,ecx
c00275c8:	74 15                	je     c00275df <__adddf3+0xec>
c00275ca:	be 20 00 00 00       	mov    esi,0x20
c00275cf:	29 ce                	sub    esi,ecx
c00275d1:	89 f1                	mov    ecx,esi
c00275d3:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00275d6:	d3 e6                	shl    esi,cl
c00275d8:	31 db                	xor    ebx,ebx
c00275da:	85 f6                	test   esi,esi
c00275dc:	0f 95 c3             	setne  bl
c00275df:	31 c9                	xor    ecx,ecx
c00275e1:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00275e5:	0f 95 c1             	setne  cl
c00275e8:	09 cf                	or     edi,ecx
c00275ea:	09 fb                	or     ebx,edi
c00275ec:	01 da                	add    edx,ebx
c00275ee:	83 d0 00             	adc    eax,0x0
c00275f1:	eb 3a                	jmp    c002762d <__adddf3+0x13a>
c00275f3:	bf 20 00 00 00       	mov    edi,0x20
c00275f8:	29 df                	sub    edi,ebx
c00275fa:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00275fd:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027600:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027603:	d3 e6                	shl    esi,cl
c0027605:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027608:	88 d9                	mov    cl,bl
c002760a:	d3 ef                	shr    edi,cl
c002760c:	09 fe                	or     esi,edi
c002760e:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027611:	88 d9                	mov    cl,bl
c0027613:	d3 ef                	shr    edi,cl
c0027615:	89 fb                	mov    ebx,edi
c0027617:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002761a:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002761d:	d3 e7                	shl    edi,cl
c002761f:	85 ff                	test   edi,edi
c0027621:	0f 95 c1             	setne  cl
c0027624:	0f b6 c9             	movzx  ecx,cl
c0027627:	09 ce                	or     esi,ecx
c0027629:	01 f2                	add    edx,esi
c002762b:	11 d8                	adc    eax,ebx
c002762d:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027630:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027633:	e9 52 01 00 00       	jmp    c002778a <__adddf3+0x297>
c0027638:	0f 84 d5 00 00 00    	je     c0027713 <__adddf3+0x220>
c002763e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027641:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0027644:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027647:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002764a:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027651:	75 20                	jne    c0027673 <__adddf3+0x180>
c0027653:	89 d6                	mov    esi,edx
c0027655:	09 c6                	or     esi,eax
c0027657:	0f 84 db 04 00 00    	je     c0027b38 <__adddf3+0x645>
c002765d:	4b                   	dec    ebx
c002765e:	75 29                	jne    c0027689 <__adddf3+0x196>
c0027660:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027663:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027666:	01 d1                	add    ecx,edx
c0027668:	11 c6                	adc    esi,eax
c002766a:	89 f0                	mov    eax,esi
c002766c:	89 ca                	mov    edx,ecx
c002766e:	e9 17 01 00 00       	jmp    c002778a <__adddf3+0x297>
c0027673:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027676:	f7 d6                	not    esi
c0027678:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002767e:	0f 84 b4 04 00 00    	je     c0027b38 <__adddf3+0x645>
c0027684:	0d 00 00 00 80       	or     eax,0x80000000
c0027689:	83 fb 1f             	cmp    ebx,0x1f
c002768c:	7e 48                	jle    c00276d6 <__adddf3+0x1e3>
c002768e:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027691:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027694:	83 fb 3f             	cmp    ebx,0x3f
c0027697:	0f 8f 9b 04 00 00    	jg     c0027b38 <__adddf3+0x645>
c002769d:	83 e3 1f             	and    ebx,0x1f
c00276a0:	89 d9                	mov    ecx,ebx
c00276a2:	89 c7                	mov    edi,eax
c00276a4:	d3 ef                	shr    edi,cl
c00276a6:	31 db                	xor    ebx,ebx
c00276a8:	85 c9                	test   ecx,ecx
c00276aa:	74 12                	je     c00276be <__adddf3+0x1cb>
c00276ac:	be 20 00 00 00       	mov    esi,0x20
c00276b1:	29 ce                	sub    esi,ecx
c00276b3:	89 f1                	mov    ecx,esi
c00276b5:	d3 e0                	shl    eax,cl
c00276b7:	31 db                	xor    ebx,ebx
c00276b9:	85 c0                	test   eax,eax
c00276bb:	0f 95 c3             	setne  bl
c00276be:	31 c0                	xor    eax,eax
c00276c0:	85 d2                	test   edx,edx
c00276c2:	0f 95 c0             	setne  al
c00276c5:	09 c7                	or     edi,eax
c00276c7:	09 fb                	or     ebx,edi
c00276c9:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00276cc:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00276cf:	01 da                	add    edx,ebx
c00276d1:	83 d6 00             	adc    esi,0x0
c00276d4:	eb 39                	jmp    c002770f <__adddf3+0x21c>
c00276d6:	be 20 00 00 00       	mov    esi,0x20
c00276db:	29 de                	sub    esi,ebx
c00276dd:	89 c7                	mov    edi,eax
c00276df:	89 f1                	mov    ecx,esi
c00276e1:	d3 e7                	shl    edi,cl
c00276e3:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00276e6:	89 d7                	mov    edi,edx
c00276e8:	88 d9                	mov    cl,bl
c00276ea:	d3 ef                	shr    edi,cl
c00276ec:	89 f9                	mov    ecx,edi
c00276ee:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00276f1:	09 cf                	or     edi,ecx
c00276f3:	88 d9                	mov    cl,bl
c00276f5:	d3 e8                	shr    eax,cl
c00276f7:	89 f1                	mov    ecx,esi
c00276f9:	d3 e2                	shl    edx,cl
c00276fb:	85 d2                	test   edx,edx
c00276fd:	0f 95 c2             	setne  dl
c0027700:	0f b6 d2             	movzx  edx,dl
c0027703:	09 d7                	or     edi,edx
c0027705:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027708:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002770b:	01 fa                	add    edx,edi
c002770d:	11 c6                	adc    esi,eax
c002770f:	89 f0                	mov    eax,esi
c0027711:	eb 77                	jmp    c002778a <__adddf3+0x297>
c0027713:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027716:	46                   	inc    esi
c0027717:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c002771a:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027720:	75 41                	jne    c0027763 <__adddf3+0x270>
c0027722:	89 d3                	mov    ebx,edx
c0027724:	09 c3                	or     ebx,eax
c0027726:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c002772d:	75 27                	jne    c0027756 <__adddf3+0x263>
c002772f:	85 db                	test   ebx,ebx
c0027731:	0f 84 fb 03 00 00    	je     c0027b32 <__adddf3+0x63f>
c0027737:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002773a:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c002773d:	0f 84 f5 03 00 00    	je     c0027b38 <__adddf3+0x645>
c0027743:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027746:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027749:	85 c0                	test   eax,eax
c002774b:	0f 89 91 03 00 00    	jns    c0027ae2 <__adddf3+0x5ef>
c0027751:	e9 85 03 00 00       	jmp    c0027adb <__adddf3+0x5e8>
c0027756:	85 db                	test   ebx,ebx
c0027758:	0f 85 da 03 00 00    	jne    c0027b38 <__adddf3+0x645>
c002775e:	e9 cf 03 00 00       	jmp    c0027b32 <__adddf3+0x63f>
c0027763:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027766:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027769:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002776c:	f7 d1                	not    ecx
c002776e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027774:	0f 84 70 03 00 00    	je     c0027aea <__adddf3+0x5f7>
c002777a:	d1 ea                	shr    edx,1
c002777c:	89 c1                	mov    ecx,eax
c002777e:	c1 e1 1f             	shl    ecx,0x1f
c0027781:	09 ca                	or     edx,ecx
c0027783:	d1 e8                	shr    eax,1
c0027785:	e9 6f 03 00 00       	jmp    c0027af9 <__adddf3+0x606>
c002778a:	85 c0                	test   eax,eax
c002778c:	0f 89 67 03 00 00    	jns    c0027af9 <__adddf3+0x606>
c0027792:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c0027795:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027798:	f7 d1                	not    ecx
c002779a:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00277a0:	0f 84 44 03 00 00    	je     c0027aea <__adddf3+0x5f7>
c00277a6:	89 d1                	mov    ecx,edx
c00277a8:	d1 e9                	shr    ecx,1
c00277aa:	83 e2 01             	and    edx,0x1
c00277ad:	09 ca                	or     edx,ecx
c00277af:	89 c1                	mov    ecx,eax
c00277b1:	c1 e1 1f             	shl    ecx,0x1f
c00277b4:	09 ca                	or     edx,ecx
c00277b6:	d1 e8                	shr    eax,1
c00277b8:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00277bd:	e9 37 03 00 00       	jmp    c0027af9 <__adddf3+0x606>
c00277c2:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00277c5:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00277cb:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c00277ce:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00277d1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00277d7:	29 de                	sub    esi,ebx
c00277d9:	85 f6                	test   esi,esi
c00277db:	0f 8e bd 00 00 00    	jle    c002789e <__adddf3+0x3ab>
c00277e1:	85 db                	test   ebx,ebx
c00277e3:	75 17                	jne    c00277fc <__adddf3+0x309>
c00277e5:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00277e8:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00277eb:	0f 84 47 03 00 00    	je     c0027b38 <__adddf3+0x645>
c00277f1:	4e                   	dec    esi
c00277f2:	75 20                	jne    c0027814 <__adddf3+0x321>
c00277f4:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00277f7:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00277fa:	eb 5b                	jmp    c0027857 <__adddf3+0x364>
c00277fc:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00277ff:	f7 d3                	not    ebx
c0027801:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027807:	0f 84 2b 03 00 00    	je     c0027b38 <__adddf3+0x645>
c002780d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027814:	83 fe 1f             	cmp    esi,0x1f
c0027817:	7e 49                	jle    c0027862 <__adddf3+0x36f>
c0027819:	83 fe 3f             	cmp    esi,0x3f
c002781c:	0f 8f 16 03 00 00    	jg     c0027b38 <__adddf3+0x645>
c0027822:	83 e6 1f             	and    esi,0x1f
c0027825:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027828:	89 f1                	mov    ecx,esi
c002782a:	d3 ef                	shr    edi,cl
c002782c:	31 db                	xor    ebx,ebx
c002782e:	85 f6                	test   esi,esi
c0027830:	74 13                	je     c0027845 <__adddf3+0x352>
c0027832:	b9 20 00 00 00       	mov    ecx,0x20
c0027837:	29 f1                	sub    ecx,esi
c0027839:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002783c:	d3 e6                	shl    esi,cl
c002783e:	31 db                	xor    ebx,ebx
c0027840:	85 f6                	test   esi,esi
c0027842:	0f 95 c3             	setne  bl
c0027845:	31 c9                	xor    ecx,ecx
c0027847:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002784b:	0f 95 c1             	setne  cl
c002784e:	09 cf                	or     edi,ecx
c0027850:	09 fb                	or     ebx,edi
c0027852:	29 da                	sub    edx,ebx
c0027854:	83 d8 00             	sbb    eax,0x0
c0027857:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002785a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002785d:	e9 aa 01 00 00       	jmp    c0027a0c <__adddf3+0x519>
c0027862:	bf 20 00 00 00       	mov    edi,0x20
c0027867:	29 f7                	sub    edi,esi
c0027869:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002786c:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002786f:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027872:	d3 e3                	shl    ebx,cl
c0027874:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027877:	89 f1                	mov    ecx,esi
c0027879:	d3 ef                	shr    edi,cl
c002787b:	09 fb                	or     ebx,edi
c002787d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027880:	89 f1                	mov    ecx,esi
c0027882:	d3 ef                	shr    edi,cl
c0027884:	89 fe                	mov    esi,edi
c0027886:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027889:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002788c:	d3 e7                	shl    edi,cl
c002788e:	85 ff                	test   edi,edi
c0027890:	0f 95 c1             	setne  cl
c0027893:	0f b6 c9             	movzx  ecx,cl
c0027896:	09 cb                	or     ebx,ecx
c0027898:	29 da                	sub    edx,ebx
c002789a:	19 f0                	sbb    eax,esi
c002789c:	eb b9                	jmp    c0027857 <__adddf3+0x364>
c002789e:	0f 84 cd 00 00 00    	je     c0027971 <__adddf3+0x47e>
c00278a4:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c00278a7:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00278aa:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00278ad:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00278b1:	75 1b                	jne    c00278ce <__adddf3+0x3db>
c00278b3:	89 d6                	mov    esi,edx
c00278b5:	09 c6                	or     esi,eax
c00278b7:	0f 84 7b 02 00 00    	je     c0027b38 <__adddf3+0x645>
c00278bd:	4b                   	dec    ebx
c00278be:	75 24                	jne    c00278e4 <__adddf3+0x3f1>
c00278c0:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00278c3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00278c6:	29 d1                	sub    ecx,edx
c00278c8:	19 c6                	sbb    esi,eax
c00278ca:	89 ca                	mov    edx,ecx
c00278cc:	eb 61                	jmp    c002792f <__adddf3+0x43c>
c00278ce:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00278d1:	f7 d6                	not    esi
c00278d3:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00278d9:	0f 84 59 02 00 00    	je     c0027b38 <__adddf3+0x645>
c00278df:	0d 00 00 00 80       	or     eax,0x80000000
c00278e4:	83 fb 1f             	cmp    ebx,0x1f
c00278e7:	7e 4d                	jle    c0027936 <__adddf3+0x443>
c00278e9:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00278ec:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00278ef:	83 fb 3f             	cmp    ebx,0x3f
c00278f2:	0f 8f 40 02 00 00    	jg     c0027b38 <__adddf3+0x645>
c00278f8:	83 e3 1f             	and    ebx,0x1f
c00278fb:	89 d9                	mov    ecx,ebx
c00278fd:	89 c7                	mov    edi,eax
c00278ff:	d3 ef                	shr    edi,cl
c0027901:	31 db                	xor    ebx,ebx
c0027903:	85 c9                	test   ecx,ecx
c0027905:	74 12                	je     c0027919 <__adddf3+0x426>
c0027907:	be 20 00 00 00       	mov    esi,0x20
c002790c:	29 ce                	sub    esi,ecx
c002790e:	89 f1                	mov    ecx,esi
c0027910:	d3 e0                	shl    eax,cl
c0027912:	31 db                	xor    ebx,ebx
c0027914:	85 c0                	test   eax,eax
c0027916:	0f 95 c3             	setne  bl
c0027919:	31 c0                	xor    eax,eax
c002791b:	85 d2                	test   edx,edx
c002791d:	0f 95 c0             	setne  al
c0027920:	09 c7                	or     edi,eax
c0027922:	09 fb                	or     ebx,edi
c0027924:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027927:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002792a:	29 da                	sub    edx,ebx
c002792c:	83 de 00             	sbb    esi,0x0
c002792f:	89 f0                	mov    eax,esi
c0027931:	e9 d6 00 00 00       	jmp    c0027a0c <__adddf3+0x519>
c0027936:	be 20 00 00 00       	mov    esi,0x20
c002793b:	29 de                	sub    esi,ebx
c002793d:	89 c7                	mov    edi,eax
c002793f:	89 f1                	mov    ecx,esi
c0027941:	d3 e7                	shl    edi,cl
c0027943:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027946:	89 d7                	mov    edi,edx
c0027948:	88 d9                	mov    cl,bl
c002794a:	d3 ef                	shr    edi,cl
c002794c:	89 f9                	mov    ecx,edi
c002794e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027951:	09 cf                	or     edi,ecx
c0027953:	88 d9                	mov    cl,bl
c0027955:	d3 e8                	shr    eax,cl
c0027957:	89 f1                	mov    ecx,esi
c0027959:	d3 e2                	shl    edx,cl
c002795b:	85 d2                	test   edx,edx
c002795d:	0f 95 c2             	setne  dl
c0027960:	0f b6 d2             	movzx  edx,dl
c0027963:	09 d7                	or     edi,edx
c0027965:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027968:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002796b:	29 fa                	sub    edx,edi
c002796d:	19 c6                	sbb    esi,eax
c002796f:	eb be                	jmp    c002792f <__adddf3+0x43c>
c0027971:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027974:	8d 5e 01             	lea    ebx,[esi+0x1]
c0027977:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c002797d:	75 6a                	jne    c00279e9 <__adddf3+0x4f6>
c002797f:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027983:	75 58                	jne    c00279dd <__adddf3+0x4ea>
c0027985:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027988:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002798b:	89 d6                	mov    esi,edx
c002798d:	09 c6                	or     esi,eax
c002798f:	75 17                	jne    c00279a8 <__adddf3+0x4b5>
c0027991:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027994:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027997:	85 db                	test   ebx,ebx
c0027999:	0f 85 99 01 00 00    	jne    c0027b38 <__adddf3+0x645>
c002799f:	31 ff                	xor    edi,edi
c00279a1:	31 c9                	xor    ecx,ecx
c00279a3:	e9 90 01 00 00       	jmp    c0027b38 <__adddf3+0x645>
c00279a8:	85 db                	test   ebx,ebx
c00279aa:	0f 84 88 01 00 00    	je     c0027b38 <__adddf3+0x645>
c00279b0:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00279b3:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00279b6:	85 c0                	test   eax,eax
c00279b8:	79 10                	jns    c00279ca <__adddf3+0x4d7>
c00279ba:	31 c9                	xor    ecx,ecx
c00279bc:	f7 da                	neg    edx
c00279be:	0f 95 c1             	setne  cl
c00279c1:	01 c8                	add    eax,ecx
c00279c3:	f7 d8                	neg    eax
c00279c5:	e9 2f 01 00 00       	jmp    c0027af9 <__adddf3+0x606>
c00279ca:	31 ff                	xor    edi,edi
c00279cc:	31 c9                	xor    ecx,ecx
c00279ce:	89 c3                	mov    ebx,eax
c00279d0:	09 d3                	or     ebx,edx
c00279d2:	0f 84 60 01 00 00    	je     c0027b38 <__adddf3+0x645>
c00279d8:	e9 05 01 00 00       	jmp    c0027ae2 <__adddf3+0x5ef>
c00279dd:	31 ff                	xor    edi,edi
c00279df:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c00279e4:	e9 4f 01 00 00       	jmp    c0027b38 <__adddf3+0x645>
c00279e9:	89 c1                	mov    ecx,eax
c00279eb:	89 d0                	mov    eax,edx
c00279ed:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c00279f0:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c00279f3:	89 ca                	mov    edx,ecx
c00279f5:	85 c9                	test   ecx,ecx
c00279f7:	79 2c                	jns    c0027a25 <__adddf3+0x532>
c00279f9:	31 c9                	xor    ecx,ecx
c00279fb:	f7 d8                	neg    eax
c00279fd:	0f 95 c1             	setne  cl
c0027a00:	01 ca                	add    edx,ecx
c0027a02:	f7 da                	neg    edx
c0027a04:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027a07:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027a0a:	eb 19                	jmp    c0027a25 <__adddf3+0x532>
c0027a0c:	85 c0                	test   eax,eax
c0027a0e:	0f 89 e5 00 00 00    	jns    c0027af9 <__adddf3+0x606>
c0027a14:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027a19:	89 c1                	mov    ecx,eax
c0027a1b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027a1e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027a21:	89 d0                	mov    eax,edx
c0027a23:	89 ca                	mov    edx,ecx
c0027a25:	85 d2                	test   edx,edx
c0027a27:	74 59                	je     c0027a82 <__adddf3+0x58f>
c0027a29:	0f bd da             	bsr    ebx,edx
c0027a2c:	83 f3 1f             	xor    ebx,0x1f
c0027a2f:	88 d9                	mov    cl,bl
c0027a31:	d3 e2                	shl    edx,cl
c0027a33:	bf 20 00 00 00       	mov    edi,0x20
c0027a38:	89 f9                	mov    ecx,edi
c0027a3a:	29 d9                	sub    ecx,ebx
c0027a3c:	89 c6                	mov    esi,eax
c0027a3e:	d3 ee                	shr    esi,cl
c0027a40:	09 d6                	or     esi,edx
c0027a42:	88 d9                	mov    cl,bl
c0027a44:	d3 e0                	shl    eax,cl
c0027a46:	89 c2                	mov    edx,eax
c0027a48:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027a4b:	25 ff 07 00 00       	and    eax,0x7ff
c0027a50:	39 d8                	cmp    eax,ebx
c0027a52:	7f 22                	jg     c0027a76 <__adddf3+0x583>
c0027a54:	29 c3                	sub    ebx,eax
c0027a56:	43                   	inc    ebx
c0027a57:	88 d9                	mov    cl,bl
c0027a59:	d3 ea                	shr    edx,cl
c0027a5b:	29 df                	sub    edi,ebx
c0027a5d:	89 f9                	mov    ecx,edi
c0027a5f:	89 f0                	mov    eax,esi
c0027a61:	d3 e0                	shl    eax,cl
c0027a63:	09 c2                	or     edx,eax
c0027a65:	89 f0                	mov    eax,esi
c0027a67:	88 d9                	mov    cl,bl
c0027a69:	d3 e8                	shr    eax,cl
c0027a6b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027a6e:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0027a74:	eb 6f                	jmp    c0027ae5 <__adddf3+0x5f2>
c0027a76:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027a79:	29 d8                	sub    eax,ebx
c0027a7b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027a7e:	89 f0                	mov    eax,esi
c0027a80:	eb 59                	jmp    c0027adb <__adddf3+0x5e8>
c0027a82:	85 c0                	test   eax,eax
c0027a84:	74 6a                	je     c0027af0 <__adddf3+0x5fd>
c0027a86:	0f bd c8             	bsr    ecx,eax
c0027a89:	83 f1 1f             	xor    ecx,0x1f
c0027a8c:	d3 e0                	shl    eax,cl
c0027a8e:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027a91:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027a97:	83 c1 20             	add    ecx,0x20
c0027a9a:	39 cb                	cmp    ebx,ecx
c0027a9c:	7f 35                	jg     c0027ad3 <__adddf3+0x5e0>
c0027a9e:	29 d9                	sub    ecx,ebx
c0027aa0:	8d 71 01             	lea    esi,[ecx+0x1]
c0027aa3:	83 fe 1f             	cmp    esi,0x1f
c0027aa6:	7e 09                	jle    c0027ab1 <__adddf3+0x5be>
c0027aa8:	83 e9 1f             	sub    ecx,0x1f
c0027aab:	d3 e8                	shr    eax,cl
c0027aad:	89 c3                	mov    ebx,eax
c0027aaf:	eb 11                	jmp    c0027ac2 <__adddf3+0x5cf>
c0027ab1:	b9 20 00 00 00       	mov    ecx,0x20
c0027ab6:	29 f1                	sub    ecx,esi
c0027ab8:	89 c3                	mov    ebx,eax
c0027aba:	d3 e3                	shl    ebx,cl
c0027abc:	89 f1                	mov    ecx,esi
c0027abe:	d3 e8                	shr    eax,cl
c0027ac0:	89 c2                	mov    edx,eax
c0027ac2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027ac5:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027aca:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027acd:	89 d0                	mov    eax,edx
c0027acf:	89 da                	mov    edx,ebx
c0027ad1:	eb 26                	jmp    c0027af9 <__adddf3+0x606>
c0027ad3:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027ad6:	29 cf                	sub    edi,ecx
c0027ad8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027adb:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027ae0:	eb 17                	jmp    c0027af9 <__adddf3+0x606>
c0027ae2:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027ae5:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027ae8:	eb 0f                	jmp    c0027af9 <__adddf3+0x606>
c0027aea:	31 d2                	xor    edx,edx
c0027aec:	31 c0                	xor    eax,eax
c0027aee:	eb 09                	jmp    c0027af9 <__adddf3+0x606>
c0027af0:	89 c2                	mov    edx,eax
c0027af2:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0027af9:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027afc:	c1 e1 14             	shl    ecx,0x14
c0027aff:	89 c3                	mov    ebx,eax
c0027b01:	c1 eb 0b             	shr    ebx,0xb
c0027b04:	09 d9                	or     ecx,ebx
c0027b06:	89 d3                	mov    ebx,edx
c0027b08:	c1 eb 0b             	shr    ebx,0xb
c0027b0b:	c1 e0 15             	shl    eax,0x15
c0027b0e:	09 d8                	or     eax,ebx
c0027b10:	89 c7                	mov    edi,eax
c0027b12:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0027b18:	0f 95 c0             	setne  al
c0027b1b:	89 c6                	mov    esi,eax
c0027b1d:	09 f3                	or     ebx,esi
c0027b1f:	83 e3 01             	and    ebx,0x1
c0027b22:	c1 ea 0a             	shr    edx,0xa
c0027b25:	21 da                	and    edx,ebx
c0027b27:	89 f8                	mov    eax,edi
c0027b29:	01 d0                	add    eax,edx
c0027b2b:	83 d1 00             	adc    ecx,0x0
c0027b2e:	89 c7                	mov    edi,eax
c0027b30:	eb 06                	jmp    c0027b38 <__adddf3+0x645>
c0027b32:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027b35:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027b38:	89 f8                	mov    eax,edi
c0027b3a:	89 ca                	mov    edx,ecx
c0027b3c:	83 c4 24             	add    esp,0x24
c0027b3f:	5b                   	pop    ebx
c0027b40:	5e                   	pop    esi
c0027b41:	5f                   	pop    edi
c0027b42:	5d                   	pop    ebp
c0027b43:	c3                   	ret    

c0027b44 <__subdf3>:
c0027b44:	55                   	push   ebp
c0027b45:	89 e5                	mov    ebp,esp
c0027b47:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027b4a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027b4d:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027b53:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0027b56:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027b59:	5d                   	pop    ebp
c0027b5a:	e9 94 f9 ff ff       	jmp    c00274f3 <__adddf3>

c0027b5f <__negdf2>:
c0027b5f:	55                   	push   ebp
c0027b60:	89 e5                	mov    ebp,esp
c0027b62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027b65:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027b68:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027b6e:	5d                   	pop    ebp
c0027b6f:	c3                   	ret    

c0027b70 <__muldf3>:
c0027b70:	55                   	push   ebp
c0027b71:	89 e5                	mov    ebp,esp
c0027b73:	57                   	push   edi
c0027b74:	56                   	push   esi
c0027b75:	53                   	push   ebx
c0027b76:	83 ec 24             	sub    esp,0x24
c0027b79:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027b7c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027b7f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027b82:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027b85:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027b88:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0027b8b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027b8e:	89 c8                	mov    eax,ecx
c0027b90:	c1 f8 14             	sar    eax,0x14
c0027b93:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027b96:	89 f8                	mov    eax,edi
c0027b98:	89 fb                	mov    ebx,edi
c0027b9a:	c1 e3 0b             	shl    ebx,0xb
c0027b9d:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027ba0:	c1 e1 0b             	shl    ecx,0xb
c0027ba3:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027ba9:	c1 e8 15             	shr    eax,0x15
c0027bac:	09 c1                	or     ecx,eax
c0027bae:	89 d6                	mov    esi,edx
c0027bb0:	89 d0                	mov    eax,edx
c0027bb2:	c1 f8 14             	sar    eax,0x14
c0027bb5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027bb8:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0027bbb:	89 c3                	mov    ebx,eax
c0027bbd:	c1 e3 0b             	shl    ebx,0xb
c0027bc0:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027bc3:	c1 e6 0b             	shl    esi,0xb
c0027bc6:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027bcc:	c1 e8 15             	shr    eax,0x15
c0027bcf:	09 c6                	or     esi,eax
c0027bd1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027bd4:	25 ff 07 00 00       	and    eax,0x7ff
c0027bd9:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027bdc:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027bdf:	25 ff 07 00 00       	and    eax,0x7ff
c0027be4:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027be7:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027bea:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027bed:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0027bf4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027bf7:	40                   	inc    eax
c0027bf8:	a9 fe 07 00 00       	test   eax,0x7fe
c0027bfd:	0f 85 8d 00 00 00    	jne    c0027c90 <__muldf3+0x120>
c0027c03:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027c06:	09 c8                	or     eax,ecx
c0027c08:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0027c0c:	74 44                	je     c0027c52 <__muldf3+0xe2>
c0027c0e:	85 c0                	test   eax,eax
c0027c10:	0f 85 31 02 00 00    	jne    c0027e47 <__muldf3+0x2d7>
c0027c16:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027c19:	40                   	inc    eax
c0027c1a:	a9 fe 07 00 00       	test   eax,0x7fe
c0027c1f:	75 13                	jne    c0027c34 <__muldf3+0xc4>
c0027c21:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027c24:	09 f1                	or     ecx,esi
c0027c26:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027c2a:	74 22                	je     c0027c4e <__muldf3+0xde>
c0027c2c:	85 c9                	test   ecx,ecx
c0027c2e:	0f 85 0d 02 00 00    	jne    c0027e41 <__muldf3+0x2d1>
c0027c34:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0027c38:	0f 89 09 02 00 00    	jns    c0027e47 <__muldf3+0x2d7>
c0027c3e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027c41:	05 00 00 00 80       	add    eax,0x80000000
c0027c46:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027c49:	e9 f9 01 00 00       	jmp    c0027e47 <__muldf3+0x2d7>
c0027c4e:	85 c9                	test   ecx,ecx
c0027c50:	eb 2e                	jmp    c0027c80 <__muldf3+0x110>
c0027c52:	85 c0                	test   eax,eax
c0027c54:	74 20                	je     c0027c76 <__muldf3+0x106>
c0027c56:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0027c59:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027c5c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027c5f:	c1 ef 1f             	shr    edi,0x1f
c0027c62:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0027c65:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027c68:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027c6b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027c6e:	09 f9                	or     ecx,edi
c0027c70:	78 1e                	js     c0027c90 <__muldf3+0x120>
c0027c72:	89 c3                	mov    ebx,eax
c0027c74:	eb e0                	jmp    c0027c56 <__muldf3+0xe6>
c0027c76:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027c79:	f7 d0                	not    eax
c0027c7b:	a9 ff 07 00 00       	test   eax,0x7ff
c0027c80:	75 b2                	jne    c0027c34 <__muldf3+0xc4>
c0027c82:	31 ff                	xor    edi,edi
c0027c84:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0027c8b:	e9 b7 01 00 00       	jmp    c0027e47 <__muldf3+0x2d7>
c0027c90:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027c93:	40                   	inc    eax
c0027c94:	a9 fe 07 00 00       	test   eax,0x7fe
c0027c99:	75 57                	jne    c0027cf2 <__muldf3+0x182>
c0027c9b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0027c9e:	09 f0                	or     eax,esi
c0027ca0:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027ca4:	74 23                	je     c0027cc9 <__muldf3+0x159>
c0027ca6:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027caa:	0f 89 91 01 00 00    	jns    c0027e41 <__muldf3+0x2d1>
c0027cb0:	85 c0                	test   eax,eax
c0027cb2:	0f 85 89 01 00 00    	jne    c0027e41 <__muldf3+0x2d1>
c0027cb8:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027cbb:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0027cc1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027cc4:	e9 7e 01 00 00       	jmp    c0027e47 <__muldf3+0x2d7>
c0027cc9:	85 c0                	test   eax,eax
c0027ccb:	75 0c                	jne    c0027cd9 <__muldf3+0x169>
c0027ccd:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027cd1:	0f 89 6a 01 00 00    	jns    c0027e41 <__muldf3+0x2d1>
c0027cd7:	eb df                	jmp    c0027cb8 <__muldf3+0x148>
c0027cd9:	01 f6                	add    esi,esi
c0027cdb:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027cde:	c1 ea 1f             	shr    edx,0x1f
c0027ce1:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027ce4:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0027ce7:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027cea:	09 d6                	or     esi,edx
c0027cec:	78 04                	js     c0027cf2 <__muldf3+0x182>
c0027cee:	89 c3                	mov    ebx,eax
c0027cf0:	eb e7                	jmp    c0027cd9 <__muldf3+0x169>
c0027cf2:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0027cf8:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027cfe:	89 c8                	mov    eax,ecx
c0027d00:	f7 e6                	mul    esi
c0027d02:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0027d05:	89 c7                	mov    edi,eax
c0027d07:	89 c8                	mov    eax,ecx
c0027d09:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027d0c:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0027d0f:	89 c1                	mov    ecx,eax
c0027d11:	89 f0                	mov    eax,esi
c0027d13:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0027d16:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0027d19:	89 c6                	mov    esi,eax
c0027d1b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027d1e:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027d21:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027d24:	31 c0                	xor    eax,eax
c0027d26:	01 f1                	add    ecx,esi
c0027d28:	0f 92 c0             	setb   al
c0027d2b:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0027d2e:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027d31:	83 d6 00             	adc    esi,0x0
c0027d34:	01 c7                	add    edi,eax
c0027d36:	83 d6 00             	adc    esi,0x0
c0027d39:	01 ca                	add    edx,ecx
c0027d3b:	0f 92 c1             	setb   cl
c0027d3e:	0f b6 c9             	movzx  ecx,cl
c0027d41:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0027d44:	83 d6 00             	adc    esi,0x0
c0027d47:	01 cf                	add    edi,ecx
c0027d49:	83 d6 00             	adc    esi,0x0
c0027d4c:	31 c9                	xor    ecx,ecx
c0027d4e:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0027d51:	0f 95 c1             	setne  cl
c0027d54:	09 cf                	or     edi,ecx
c0027d56:	85 f6                	test   esi,esi
c0027d58:	78 0c                	js     c0027d66 <__muldf3+0x1f6>
c0027d5a:	01 f6                	add    esi,esi
c0027d5c:	89 f8                	mov    eax,edi
c0027d5e:	c1 e8 1f             	shr    eax,0x1f
c0027d61:	09 c6                	or     esi,eax
c0027d63:	01 ff                	add    edi,edi
c0027d65:	4b                   	dec    ebx
c0027d66:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0027d6c:	0f 8f 85 00 00 00    	jg     c0027df7 <__muldf3+0x287>
c0027d72:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027d78:	85 db                	test   ebx,ebx
c0027d7a:	0f 8f 84 00 00 00    	jg     c0027e04 <__muldf3+0x294>
c0027d80:	83 fb cc             	cmp    ebx,0xffffffcc
c0027d83:	7c 79                	jl     c0027dfe <__muldf3+0x28e>
c0027d85:	ba 01 00 00 00       	mov    edx,0x1
c0027d8a:	29 da                	sub    edx,ebx
c0027d8c:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027d92:	83 fa 1f             	cmp    edx,0x1f
c0027d95:	7e 30                	jle    c0027dc7 <__muldf3+0x257>
c0027d97:	83 fa 20             	cmp    edx,0x20
c0027d9a:	75 0b                	jne    c0027da7 <__muldf3+0x237>
c0027d9c:	31 c0                	xor    eax,eax
c0027d9e:	85 ff                	test   edi,edi
c0027da0:	0f 95 c0             	setne  al
c0027da3:	89 c7                	mov    edi,eax
c0027da5:	eb 1a                	jmp    c0027dc1 <__muldf3+0x251>
c0027da7:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0027daa:	89 f0                	mov    eax,esi
c0027dac:	d3 e0                	shl    eax,cl
c0027dae:	09 f8                	or     eax,edi
c0027db0:	0f 95 c0             	setne  al
c0027db3:	0f b6 c0             	movzx  eax,al
c0027db6:	89 c7                	mov    edi,eax
c0027db8:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027dbd:	29 d9                	sub    ecx,ebx
c0027dbf:	d3 ee                	shr    esi,cl
c0027dc1:	09 f7                	or     edi,esi
c0027dc3:	31 db                	xor    ebx,ebx
c0027dc5:	eb 3b                	jmp    c0027e02 <__muldf3+0x292>
c0027dc7:	83 c3 1f             	add    ebx,0x1f
c0027dca:	89 f0                	mov    eax,esi
c0027dcc:	88 d9                	mov    cl,bl
c0027dce:	d3 e0                	shl    eax,cl
c0027dd0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027dd3:	89 f8                	mov    eax,edi
c0027dd5:	88 d1                	mov    cl,dl
c0027dd7:	d3 e8                	shr    eax,cl
c0027dd9:	89 c1                	mov    ecx,eax
c0027ddb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027dde:	09 c8                	or     eax,ecx
c0027de0:	88 d9                	mov    cl,bl
c0027de2:	d3 e7                	shl    edi,cl
c0027de4:	31 db                	xor    ebx,ebx
c0027de6:	85 ff                	test   edi,edi
c0027de8:	0f 95 c3             	setne  bl
c0027deb:	89 df                	mov    edi,ebx
c0027ded:	09 c7                	or     edi,eax
c0027def:	88 d1                	mov    cl,dl
c0027df1:	d3 ee                	shr    esi,cl
c0027df3:	31 db                	xor    ebx,ebx
c0027df5:	eb 0d                	jmp    c0027e04 <__muldf3+0x294>
c0027df7:	bb ff 07 00 00       	mov    ebx,0x7ff
c0027dfc:	eb 02                	jmp    c0027e00 <__muldf3+0x290>
c0027dfe:	31 db                	xor    ebx,ebx
c0027e00:	31 ff                	xor    edi,edi
c0027e02:	31 f6                	xor    esi,esi
c0027e04:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027e07:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0027e0a:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027e0f:	09 c3                	or     ebx,eax
c0027e11:	c1 e3 14             	shl    ebx,0x14
c0027e14:	89 f0                	mov    eax,esi
c0027e16:	c1 e8 0b             	shr    eax,0xb
c0027e19:	09 c3                	or     ebx,eax
c0027e1b:	89 f8                	mov    eax,edi
c0027e1d:	c1 e8 0b             	shr    eax,0xb
c0027e20:	c1 e6 15             	shl    esi,0x15
c0027e23:	09 c6                	or     esi,eax
c0027e25:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0027e2b:	0f 95 c1             	setne  cl
c0027e2e:	09 c8                	or     eax,ecx
c0027e30:	83 e0 01             	and    eax,0x1
c0027e33:	c1 ef 0a             	shr    edi,0xa
c0027e36:	21 c7                	and    edi,eax
c0027e38:	01 f7                	add    edi,esi
c0027e3a:	83 d3 00             	adc    ebx,0x0
c0027e3d:	89 da                	mov    edx,ebx
c0027e3f:	eb 03                	jmp    c0027e44 <__muldf3+0x2d4>
c0027e41:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027e44:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027e47:	89 f8                	mov    eax,edi
c0027e49:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027e4c:	83 c4 24             	add    esp,0x24
c0027e4f:	5b                   	pop    ebx
c0027e50:	5e                   	pop    esi
c0027e51:	5f                   	pop    edi
c0027e52:	5d                   	pop    ebp
c0027e53:	c3                   	ret    

c0027e54 <__divdf3>:
c0027e54:	55                   	push   ebp
c0027e55:	89 e5                	mov    ebp,esp
c0027e57:	57                   	push   edi
c0027e58:	56                   	push   esi
c0027e59:	53                   	push   ebx
c0027e5a:	83 ec 2c             	sub    esp,0x2c
c0027e5d:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027e60:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027e63:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027e66:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027e69:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027e6c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027e6f:	89 ce                	mov    esi,ecx
c0027e71:	89 c8                	mov    eax,ecx
c0027e73:	c1 f8 14             	sar    eax,0x14
c0027e76:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027e79:	89 f8                	mov    eax,edi
c0027e7b:	89 fb                	mov    ebx,edi
c0027e7d:	c1 e3 0b             	shl    ebx,0xb
c0027e80:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0027e83:	c1 e6 0b             	shl    esi,0xb
c0027e86:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027e8c:	c1 e8 15             	shr    eax,0x15
c0027e8f:	09 c6                	or     esi,eax
c0027e91:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0027e94:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027e97:	89 c2                	mov    edx,eax
c0027e99:	c1 fa 14             	sar    edx,0x14
c0027e9c:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027e9f:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027ea2:	89 de                	mov    esi,ebx
c0027ea4:	c1 e6 0b             	shl    esi,0xb
c0027ea7:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027eaa:	c1 e0 0b             	shl    eax,0xb
c0027ead:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027eb2:	c1 eb 15             	shr    ebx,0x15
c0027eb5:	09 d8                	or     eax,ebx
c0027eb7:	89 c2                	mov    edx,eax
c0027eb9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027ebc:	25 ff 07 00 00       	and    eax,0x7ff
c0027ec1:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0027ec4:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027ec7:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027ecd:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0027ed0:	29 d8                	sub    eax,ebx
c0027ed2:	05 ff 03 00 00       	add    eax,0x3ff
c0027ed7:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027eda:	46                   	inc    esi
c0027edb:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027ee1:	0f 85 a5 00 00 00    	jne    c0027f8c <__divdf3+0x138>
c0027ee7:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027eea:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0027eed:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0027ef1:	74 2a                	je     c0027f1d <__divdf3+0xc9>
c0027ef3:	85 f6                	test   esi,esi
c0027ef5:	0f 85 cc 02 00 00    	jne    c00281c7 <__divdf3+0x373>
c0027efb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027efe:	40                   	inc    eax
c0027eff:	a9 fe 07 00 00       	test   eax,0x7fe
c0027f04:	75 26                	jne    c0027f2c <__divdf3+0xd8>
c0027f06:	85 db                	test   ebx,ebx
c0027f08:	74 22                	je     c0027f2c <__divdf3+0xd8>
c0027f0a:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027f0d:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027f10:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027f13:	09 d0                	or     eax,edx
c0027f15:	0f 85 ac 02 00 00    	jne    c00281c7 <__divdf3+0x373>
c0027f1b:	eb 63                	jmp    c0027f80 <__divdf3+0x12c>
c0027f1d:	85 f6                	test   esi,esi
c0027f1f:	75 22                	jne    c0027f43 <__divdf3+0xef>
c0027f21:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027f24:	40                   	inc    eax
c0027f25:	a9 fe 07 00 00       	test   eax,0x7fe
c0027f2a:	74 36                	je     c0027f62 <__divdf3+0x10e>
c0027f2c:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027f30:	0f 89 91 02 00 00    	jns    c00281c7 <__divdf3+0x373>
c0027f36:	89 f8                	mov    eax,edi
c0027f38:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027f3e:	e9 80 02 00 00       	jmp    c00281c3 <__divdf3+0x36f>
c0027f43:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027f46:	01 f6                	add    esi,esi
c0027f48:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027f4b:	c1 ef 1f             	shr    edi,0x1f
c0027f4e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027f51:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0027f54:	8d 48 ff             	lea    ecx,[eax-0x1]
c0027f57:	09 f7                	or     edi,esi
c0027f59:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0027f5c:	78 2e                	js     c0027f8c <__divdf3+0x138>
c0027f5e:	89 c8                	mov    eax,ecx
c0027f60:	eb e1                	jmp    c0027f43 <__divdf3+0xef>
c0027f62:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027f65:	09 d0                	or     eax,edx
c0027f67:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027f6b:	74 0f                	je     c0027f7c <__divdf3+0x128>
c0027f6d:	85 c0                	test   eax,eax
c0027f6f:	74 bb                	je     c0027f2c <__divdf3+0xd8>
c0027f71:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027f74:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027f77:	e9 4b 02 00 00       	jmp    c00281c7 <__divdf3+0x373>
c0027f7c:	85 c0                	test   eax,eax
c0027f7e:	75 ac                	jne    c0027f2c <__divdf3+0xd8>
c0027f80:	31 ff                	xor    edi,edi
c0027f82:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027f87:	e9 3b 02 00 00       	jmp    c00281c7 <__divdf3+0x373>
c0027f8c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027f8f:	8d 4f 01             	lea    ecx,[edi+0x1]
c0027f92:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0027f98:	75 6b                	jne    c0028005 <__divdf3+0x1b1>
c0027f9a:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027f9d:	09 d6                	or     esi,edx
c0027f9f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027fa3:	74 28                	je     c0027fcd <__divdf3+0x179>
c0027fa5:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027fa8:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027fab:	85 f6                	test   esi,esi
c0027fad:	0f 85 14 02 00 00    	jne    c00281c7 <__divdf3+0x373>
c0027fb3:	31 ff                	xor    edi,edi
c0027fb5:	31 c9                	xor    ecx,ecx
c0027fb7:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027fba:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027fbd:	0f 89 04 02 00 00    	jns    c00281c7 <__divdf3+0x373>
c0027fc3:	b9 00 00 00 80       	mov    ecx,0x80000000
c0027fc8:	e9 fa 01 00 00       	jmp    c00281c7 <__divdf3+0x373>
c0027fcd:	85 f6                	test   esi,esi
c0027fcf:	75 1b                	jne    c0027fec <__divdf3+0x198>
c0027fd1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027fd4:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027fd7:	25 00 00 00 80       	and    eax,0x80000000
c0027fdc:	31 c9                	xor    ecx,ecx
c0027fde:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0027fe3:	89 cf                	mov    edi,ecx
c0027fe5:	89 c1                	mov    ecx,eax
c0027fe7:	e9 db 01 00 00       	jmp    c00281c7 <__divdf3+0x373>
c0027fec:	01 d2                	add    edx,edx
c0027fee:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027ff1:	c1 eb 1f             	shr    ebx,0x1f
c0027ff4:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027ff7:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0027ffa:	8d 48 01             	lea    ecx,[eax+0x1]
c0027ffd:	09 da                	or     edx,ebx
c0027fff:	78 04                	js     c0028005 <__divdf3+0x1b1>
c0028001:	89 c8                	mov    eax,ecx
c0028003:	eb e7                	jmp    c0027fec <__divdf3+0x198>
c0028005:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028008:	81 ce 00 00 00 80    	or     esi,0x80000000
c002800e:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028014:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0028017:	39 d6                	cmp    esi,edx
c0028019:	77 0d                	ja     c0028028 <__divdf3+0x1d4>
c002801b:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002801e:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0028021:	72 1b                	jb     c002803e <__divdf3+0x1ea>
c0028023:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0028026:	75 16                	jne    c002803e <__divdf3+0x1ea>
c0028028:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c002802b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002802e:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0028031:	83 de 00             	sbb    esi,0x0
c0028034:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0028037:	ba 01 00 00 00       	mov    edx,0x1
c002803c:	eb 02                	jmp    c0028040 <__divdf3+0x1ec>
c002803e:	31 d2                	xor    edx,edx
c0028040:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0028047:	31 ff                	xor    edi,edi
c0028049:	01 ff                	add    edi,edi
c002804b:	89 d1                	mov    ecx,edx
c002804d:	c1 e9 1f             	shr    ecx,0x1f
c0028050:	09 cf                	or     edi,ecx
c0028052:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0028055:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0028058:	89 da                	mov    edx,ebx
c002805a:	89 f3                	mov    ebx,esi
c002805c:	8d 34 36             	lea    esi,[esi+esi*1]
c002805f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028062:	c1 e9 1f             	shr    ecx,0x1f
c0028065:	09 ce                	or     esi,ecx
c0028067:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002806a:	01 c9                	add    ecx,ecx
c002806c:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c002806f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0028072:	85 db                	test   ebx,ebx
c0028074:	78 29                	js     c002809f <__divdf3+0x24b>
c0028076:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0028079:	72 07                	jb     c0028082 <__divdf3+0x22e>
c002807b:	75 3c                	jne    c00280b9 <__divdf3+0x265>
c002807d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028080:	77 37                	ja     c00280b9 <__divdf3+0x265>
c0028082:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028085:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0028088:	31 d2                	xor    edx,edx
c002808a:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c002808d:	0f 97 c2             	seta   dl
c0028090:	29 d6                	sub    esi,edx
c0028092:	89 d9                	mov    ecx,ebx
c0028094:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0028097:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c002809a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c002809d:	eb 17                	jmp    c00280b6 <__divdf3+0x262>
c002809f:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00280a2:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00280a5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00280a8:	0f 97 c1             	seta   cl
c00280ab:	0f b6 c9             	movzx  ecx,cl
c00280ae:	29 ce                	sub    esi,ecx
c00280b0:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c00280b3:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c00280b6:	83 ca 01             	or     edx,0x1
c00280b9:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c00280bc:	75 8b                	jne    c0028049 <__divdf3+0x1f5>
c00280be:	c1 e7 09             	shl    edi,0x9
c00280c1:	89 d1                	mov    ecx,edx
c00280c3:	c1 e9 17             	shr    ecx,0x17
c00280c6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00280c9:	09 f3                	or     ebx,esi
c00280cb:	0f 95 c3             	setne  bl
c00280ce:	0f b6 db             	movzx  ebx,bl
c00280d1:	c1 e2 09             	shl    edx,0x9
c00280d4:	09 d3                	or     ebx,edx
c00280d6:	89 ca                	mov    edx,ecx
c00280d8:	09 fa                	or     edx,edi
c00280da:	78 0c                	js     c00280e8 <__divdf3+0x294>
c00280dc:	01 d2                	add    edx,edx
c00280de:	89 d9                	mov    ecx,ebx
c00280e0:	c1 e9 1f             	shr    ecx,0x1f
c00280e3:	09 ca                	or     edx,ecx
c00280e5:	01 db                	add    ebx,ebx
c00280e7:	48                   	dec    eax
c00280e8:	3d fe 07 00 00       	cmp    eax,0x7fe
c00280ed:	0f 8f 83 00 00 00    	jg     c0028176 <__divdf3+0x322>
c00280f3:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00280f9:	85 c0                	test   eax,eax
c00280fb:	0f 8f 82 00 00 00    	jg     c0028183 <__divdf3+0x32f>
c0028101:	83 f8 cc             	cmp    eax,0xffffffcc
c0028104:	7c 77                	jl     c002817d <__divdf3+0x329>
c0028106:	be 01 00 00 00       	mov    esi,0x1
c002810b:	29 c6                	sub    esi,eax
c002810d:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028113:	83 fe 1f             	cmp    esi,0x1f
c0028116:	7e 2f                	jle    c0028147 <__divdf3+0x2f3>
c0028118:	83 fe 20             	cmp    esi,0x20
c002811b:	75 0a                	jne    c0028127 <__divdf3+0x2d3>
c002811d:	85 db                	test   ebx,ebx
c002811f:	0f 95 c3             	setne  bl
c0028122:	0f b6 db             	movzx  ebx,bl
c0028125:	eb 1a                	jmp    c0028141 <__divdf3+0x2ed>
c0028127:	8d 48 3f             	lea    ecx,[eax+0x3f]
c002812a:	89 d7                	mov    edi,edx
c002812c:	d3 e7                	shl    edi,cl
c002812e:	89 f9                	mov    ecx,edi
c0028130:	09 d9                	or     ecx,ebx
c0028132:	0f 95 c3             	setne  bl
c0028135:	0f b6 db             	movzx  ebx,bl
c0028138:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c002813d:	29 c1                	sub    ecx,eax
c002813f:	d3 ea                	shr    edx,cl
c0028141:	09 d3                	or     ebx,edx
c0028143:	31 c0                	xor    eax,eax
c0028145:	eb 3a                	jmp    c0028181 <__divdf3+0x32d>
c0028147:	83 c0 1f             	add    eax,0x1f
c002814a:	89 d7                	mov    edi,edx
c002814c:	88 c1                	mov    cl,al
c002814e:	d3 e7                	shl    edi,cl
c0028150:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028153:	89 df                	mov    edi,ebx
c0028155:	89 f1                	mov    ecx,esi
c0028157:	d3 ef                	shr    edi,cl
c0028159:	89 f9                	mov    ecx,edi
c002815b:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002815e:	09 cf                	or     edi,ecx
c0028160:	88 c1                	mov    cl,al
c0028162:	d3 e3                	shl    ebx,cl
c0028164:	85 db                	test   ebx,ebx
c0028166:	0f 95 c3             	setne  bl
c0028169:	0f b6 db             	movzx  ebx,bl
c002816c:	09 fb                	or     ebx,edi
c002816e:	89 f1                	mov    ecx,esi
c0028170:	d3 ea                	shr    edx,cl
c0028172:	31 c0                	xor    eax,eax
c0028174:	eb 0d                	jmp    c0028183 <__divdf3+0x32f>
c0028176:	b8 ff 07 00 00       	mov    eax,0x7ff
c002817b:	eb 02                	jmp    c002817f <__divdf3+0x32b>
c002817d:	31 c0                	xor    eax,eax
c002817f:	31 db                	xor    ebx,ebx
c0028181:	31 d2                	xor    edx,edx
c0028183:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0028186:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0028189:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c002818f:	09 c8                	or     eax,ecx
c0028191:	c1 e0 14             	shl    eax,0x14
c0028194:	89 d1                	mov    ecx,edx
c0028196:	c1 e9 0b             	shr    ecx,0xb
c0028199:	09 c8                	or     eax,ecx
c002819b:	89 c6                	mov    esi,eax
c002819d:	89 d9                	mov    ecx,ebx
c002819f:	c1 e9 0b             	shr    ecx,0xb
c00281a2:	c1 e2 15             	shl    edx,0x15
c00281a5:	09 ca                	or     edx,ecx
c00281a7:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c00281ad:	0f 95 c0             	setne  al
c00281b0:	09 c1                	or     ecx,eax
c00281b2:	83 e1 01             	and    ecx,0x1
c00281b5:	c1 eb 0a             	shr    ebx,0xa
c00281b8:	21 cb                	and    ebx,ecx
c00281ba:	01 d3                	add    ebx,edx
c00281bc:	89 d8                	mov    eax,ebx
c00281be:	83 d6 00             	adc    esi,0x0
c00281c1:	89 f2                	mov    edx,esi
c00281c3:	89 c7                	mov    edi,eax
c00281c5:	89 d1                	mov    ecx,edx
c00281c7:	89 f8                	mov    eax,edi
c00281c9:	89 ca                	mov    edx,ecx
c00281cb:	83 c4 2c             	add    esp,0x2c
c00281ce:	5b                   	pop    ebx
c00281cf:	5e                   	pop    esi
c00281d0:	5f                   	pop    edi
c00281d1:	5d                   	pop    ebp
c00281d2:	c3                   	ret    

c00281d3 <__floatsidf>:
c00281d3:	55                   	push   ebp
c00281d4:	89 e5                	mov    ebp,esp
c00281d6:	56                   	push   esi
c00281d7:	53                   	push   ebx
c00281d8:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00281db:	85 db                	test   ebx,ebx
c00281dd:	7e 15                	jle    c00281f4 <__floatsidf+0x21>
c00281df:	0f bd cb             	bsr    ecx,ebx
c00281e2:	83 f1 1f             	xor    ecx,0x1f
c00281e5:	d3 e3                	shl    ebx,cl
c00281e7:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00281ed:	b8 1e 04 00 00       	mov    eax,0x41e
c00281f2:	eb 21                	jmp    c0028215 <__floatsidf+0x42>
c00281f4:	b8 00 00 00 00       	mov    eax,0x0
c00281f9:	ba 00 00 00 00       	mov    edx,0x0
c00281fe:	74 2a                	je     c002822a <__floatsidf+0x57>
c0028200:	f7 db                	neg    ebx
c0028202:	0f bd cb             	bsr    ecx,ebx
c0028205:	83 f1 1f             	xor    ecx,0x1f
c0028208:	d3 e3                	shl    ebx,cl
c002820a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028210:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0028215:	29 c8                	sub    eax,ecx
c0028217:	c1 e0 14             	shl    eax,0x14
c002821a:	89 c1                	mov    ecx,eax
c002821c:	89 de                	mov    esi,ebx
c002821e:	c1 ee 0b             	shr    esi,0xb
c0028221:	09 f1                	or     ecx,esi
c0028223:	89 ca                	mov    edx,ecx
c0028225:	c1 e3 15             	shl    ebx,0x15
c0028228:	89 d8                	mov    eax,ebx
c002822a:	5b                   	pop    ebx
c002822b:	5e                   	pop    esi
c002822c:	5d                   	pop    ebp
c002822d:	c3                   	ret    

c002822e <__floatunsidf>:
c002822e:	55                   	push   ebp
c002822f:	89 e5                	mov    ebp,esp
c0028231:	56                   	push   esi
c0028232:	53                   	push   ebx
c0028233:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028236:	85 db                	test   ebx,ebx
c0028238:	74 2a                	je     c0028264 <__floatunsidf+0x36>
c002823a:	0f bd cb             	bsr    ecx,ebx
c002823d:	83 f1 1f             	xor    ecx,0x1f
c0028240:	d3 e3                	shl    ebx,cl
c0028242:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028248:	b8 1e 04 00 00       	mov    eax,0x41e
c002824d:	29 c8                	sub    eax,ecx
c002824f:	c1 e0 14             	shl    eax,0x14
c0028252:	89 c1                	mov    ecx,eax
c0028254:	89 de                	mov    esi,ebx
c0028256:	c1 ee 0b             	shr    esi,0xb
c0028259:	09 f1                	or     ecx,esi
c002825b:	89 ca                	mov    edx,ecx
c002825d:	c1 e3 15             	shl    ebx,0x15
c0028260:	89 d8                	mov    eax,ebx
c0028262:	eb 04                	jmp    c0028268 <__floatunsidf+0x3a>
c0028264:	31 c0                	xor    eax,eax
c0028266:	31 d2                	xor    edx,edx
c0028268:	5b                   	pop    ebx
c0028269:	5e                   	pop    esi
c002826a:	5d                   	pop    ebp
c002826b:	c3                   	ret    

c002826c <__fixdfsi>:
c002826c:	55                   	push   ebp
c002826d:	89 e5                	mov    ebp,esp
c002826f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028272:	89 d1                	mov    ecx,edx
c0028274:	c1 e1 0b             	shl    ecx,0xb
c0028277:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c002827d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0028280:	c1 e8 15             	shr    eax,0x15
c0028283:	09 c1                	or     ecx,eax
c0028285:	c1 fa 14             	sar    edx,0x14
c0028288:	78 1f                	js     c00282a9 <__fixdfsi+0x3d>
c002828a:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0028290:	31 c0                	xor    eax,eax
c0028292:	83 fa 1e             	cmp    edx,0x1e
c0028295:	77 40                	ja     c00282d7 <__fixdfsi+0x6b>
c0028297:	89 c8                	mov    eax,ecx
c0028299:	0d 00 00 00 80       	or     eax,0x80000000
c002829e:	b9 1f 00 00 00       	mov    ecx,0x1f
c00282a3:	29 d1                	sub    ecx,edx
c00282a5:	d3 e8                	shr    eax,cl
c00282a7:	eb 2e                	jmp    c00282d7 <__fixdfsi+0x6b>
c00282a9:	31 c0                	xor    eax,eax
c00282ab:	81 c2 01 04 00 00    	add    edx,0x401
c00282b1:	78 24                	js     c00282d7 <__fixdfsi+0x6b>
c00282b3:	83 fa 1e             	cmp    edx,0x1e
c00282b6:	7e 09                	jle    c00282c1 <__fixdfsi+0x55>
c00282b8:	83 fa 1f             	cmp    edx,0x1f
c00282bb:	75 18                	jne    c00282d5 <__fixdfsi+0x69>
c00282bd:	85 c9                	test   ecx,ecx
c00282bf:	75 14                	jne    c00282d5 <__fixdfsi+0x69>
c00282c1:	89 c8                	mov    eax,ecx
c00282c3:	0d 00 00 00 80       	or     eax,0x80000000
c00282c8:	b9 1f 00 00 00       	mov    ecx,0x1f
c00282cd:	29 d1                	sub    ecx,edx
c00282cf:	d3 e8                	shr    eax,cl
c00282d1:	f7 d8                	neg    eax
c00282d3:	eb 02                	jmp    c00282d7 <__fixdfsi+0x6b>
c00282d5:	31 c0                	xor    eax,eax
c00282d7:	5d                   	pop    ebp
c00282d8:	c3                   	ret    

c00282d9 <__fixunsdfsi>:
c00282d9:	55                   	push   ebp
c00282da:	89 e5                	mov    ebp,esp
c00282dc:	53                   	push   ebx
c00282dd:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00282e0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00282e3:	89 d3                	mov    ebx,edx
c00282e5:	c1 fb 14             	sar    ebx,0x14
c00282e8:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c00282ee:	31 c0                	xor    eax,eax
c00282f0:	83 fb 1f             	cmp    ebx,0x1f
c00282f3:	77 1d                	ja     c0028312 <__fixunsdfsi+0x39>
c00282f5:	89 d0                	mov    eax,edx
c00282f7:	c1 e0 0b             	shl    eax,0xb
c00282fa:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00282ff:	c1 e9 15             	shr    ecx,0x15
c0028302:	09 c8                	or     eax,ecx
c0028304:	0d 00 00 00 80       	or     eax,0x80000000
c0028309:	b9 1f 00 00 00       	mov    ecx,0x1f
c002830e:	29 d9                	sub    ecx,ebx
c0028310:	d3 e8                	shr    eax,cl
c0028312:	5b                   	pop    ebx
c0028313:	5d                   	pop    ebp
c0028314:	c3                   	ret    

c0028315 <__cmpdf2>:
c0028315:	55                   	push   ebp
c0028316:	89 e5                	mov    ebp,esp
c0028318:	57                   	push   edi
c0028319:	56                   	push   esi
c002831a:	53                   	push   ebx
c002831b:	83 ec 0c             	sub    esp,0xc
c002831e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0028321:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0028324:	89 ca                	mov    edx,ecx
c0028326:	c1 ea 14             	shr    edx,0x14
c0028329:	81 e2 ff 07 00 00    	and    edx,0x7ff
c002832f:	89 cb                	mov    ebx,ecx
c0028331:	c1 fb 1f             	sar    ebx,0x1f
c0028334:	31 da                	xor    edx,ebx
c0028336:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028339:	89 df                	mov    edi,ebx
c002833b:	c1 e7 0b             	shl    edi,0xb
c002833e:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028341:	c1 e1 0b             	shl    ecx,0xb
c0028344:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c002834a:	c1 eb 15             	shr    ebx,0x15
c002834d:	09 d9                	or     ecx,ebx
c002834f:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0028352:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0028355:	89 ce                	mov    esi,ecx
c0028357:	c1 ee 14             	shr    esi,0x14
c002835a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028360:	89 cb                	mov    ebx,ecx
c0028362:	c1 fb 1f             	sar    ebx,0x1f
c0028365:	31 de                	xor    esi,ebx
c0028367:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c002836a:	89 df                	mov    edi,ebx
c002836c:	c1 e7 0b             	shl    edi,0xb
c002836f:	c1 e1 0b             	shl    ecx,0xb
c0028372:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028378:	c1 eb 15             	shr    ebx,0x15
c002837b:	09 d9                	or     ecx,ebx
c002837d:	89 d3                	mov    ebx,edx
c002837f:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028385:	43                   	inc    ebx
c0028386:	83 fb 01             	cmp    ebx,0x1
c0028389:	77 08                	ja     c0028393 <__cmpdf2+0x7e>
c002838b:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c002838e:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028391:	75 68                	jne    c00283fb <__cmpdf2+0xe6>
c0028393:	89 f3                	mov    ebx,esi
c0028395:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c002839b:	43                   	inc    ebx
c002839c:	83 fb 01             	cmp    ebx,0x1
c002839f:	77 06                	ja     c00283a7 <__cmpdf2+0x92>
c00283a1:	89 fb                	mov    ebx,edi
c00283a3:	09 cb                	or     ebx,ecx
c00283a5:	75 54                	jne    c00283fb <__cmpdf2+0xe6>
c00283a7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00283aa:	09 f8                	or     eax,edi
c00283ac:	09 c8                	or     eax,ecx
c00283ae:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c00283b1:	75 12                	jne    c00283c5 <__cmpdf2+0xb0>
c00283b3:	8d 42 01             	lea    eax,[edx+0x1]
c00283b6:	83 f8 01             	cmp    eax,0x1
c00283b9:	77 0a                	ja     c00283c5 <__cmpdf2+0xb0>
c00283bb:	8d 5e 01             	lea    ebx,[esi+0x1]
c00283be:	31 c0                	xor    eax,eax
c00283c0:	83 fb 01             	cmp    ebx,0x1
c00283c3:	76 36                	jbe    c00283fb <__cmpdf2+0xe6>
c00283c5:	b8 01 00 00 00       	mov    eax,0x1
c00283ca:	39 f2                	cmp    edx,esi
c00283cc:	7f 2d                	jg     c00283fb <__cmpdf2+0xe6>
c00283ce:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00283d3:	7c 26                	jl     c00283fb <__cmpdf2+0xe6>
c00283d5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00283d8:	77 07                	ja     c00283e1 <__cmpdf2+0xcc>
c00283da:	72 16                	jb     c00283f2 <__cmpdf2+0xdd>
c00283dc:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c00283df:	76 0a                	jbe    c00283eb <__cmpdf2+0xd6>
c00283e1:	89 d0                	mov    eax,edx
c00283e3:	c1 f8 1f             	sar    eax,0x1f
c00283e6:	83 c8 01             	or     eax,0x1
c00283e9:	eb 10                	jmp    c00283fb <__cmpdf2+0xe6>
c00283eb:	b8 00 00 00 00       	mov    eax,0x0
c00283f0:	73 09                	jae    c00283fb <__cmpdf2+0xe6>
c00283f2:	89 d0                	mov    eax,edx
c00283f4:	c1 f8 1f             	sar    eax,0x1f
c00283f7:	83 e0 02             	and    eax,0x2
c00283fa:	48                   	dec    eax
c00283fb:	83 c4 0c             	add    esp,0xc
c00283fe:	5b                   	pop    ebx
c00283ff:	5e                   	pop    esi
c0028400:	5f                   	pop    edi
c0028401:	5d                   	pop    ebp
c0028402:	c3                   	ret    

c0028403 <__eqdf2>:
c0028403:	55                   	push   ebp
c0028404:	89 e5                	mov    ebp,esp
c0028406:	50                   	push   eax
c0028407:	6a 01                	push   0x1
c0028409:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002840c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002840f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028412:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028415:	e8 fb fe ff ff       	call   c0028315 <__cmpdf2>
c002841a:	83 c4 18             	add    esp,0x18
c002841d:	c9                   	leave  
c002841e:	c3                   	ret    

c002841f <__nedf2>:
c002841f:	eb e2                	jmp    c0028403 <__eqdf2>

c0028421 <__gtdf2>:
c0028421:	55                   	push   ebp
c0028422:	89 e5                	mov    ebp,esp
c0028424:	50                   	push   eax
c0028425:	6a ff                	push   0xffffffff
c0028427:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002842a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002842d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028430:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028433:	e8 dd fe ff ff       	call   c0028315 <__cmpdf2>
c0028438:	83 c4 18             	add    esp,0x18
c002843b:	c9                   	leave  
c002843c:	c3                   	ret    

c002843d <__gedf2>:
c002843d:	eb e2                	jmp    c0028421 <__gtdf2>

c002843f <__ltdf2>:
c002843f:	eb c2                	jmp    c0028403 <__eqdf2>

c0028441 <__ledf2>:
c0028441:	eb c0                	jmp    c0028403 <__eqdf2>

c0028443 <__truncdfsf2>:
c0028443:	55                   	push   ebp
c0028444:	89 e5                	mov    ebp,esp
c0028446:	57                   	push   edi
c0028447:	56                   	push   esi
c0028448:	53                   	push   ebx
c0028449:	83 ec 0c             	sub    esp,0xc
c002844c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002844f:	89 d1                	mov    ecx,edx
c0028451:	c1 f9 14             	sar    ecx,0x14
c0028454:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028457:	89 df                	mov    edi,ebx
c0028459:	c1 e7 0b             	shl    edi,0xb
c002845c:	89 d0                	mov    eax,edx
c002845e:	c1 e0 0b             	shl    eax,0xb
c0028461:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028466:	c1 eb 15             	shr    ebx,0x15
c0028469:	09 d8                	or     eax,ebx
c002846b:	89 cb                	mov    ebx,ecx
c002846d:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028473:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0028479:	81 fe fd 00 00 00    	cmp    esi,0xfd
c002847f:	0f 86 9e 00 00 00    	jbe    c0028523 <__truncdfsf2+0xe0>
c0028485:	85 db                	test   ebx,ebx
c0028487:	75 0a                	jne    c0028493 <__truncdfsf2+0x50>
c0028489:	c1 fa 17             	sar    edx,0x17
c002848c:	30 d2                	xor    dl,dl
c002848e:	e9 84 00 00 00       	jmp    c0028517 <__truncdfsf2+0xd4>
c0028493:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0028499:	83 fe 83             	cmp    esi,0xffffff83
c002849c:	7d 4b                	jge    c00284e9 <__truncdfsf2+0xa6>
c002849e:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c00284a3:	29 f1                	sub    ecx,esi
c00284a5:	83 f9 1f             	cmp    ecx,0x1f
c00284a8:	7f 6b                	jg     c0028515 <__truncdfsf2+0xd2>
c00284aa:	0d 00 00 00 80       	or     eax,0x80000000
c00284af:	89 c3                	mov    ebx,eax
c00284b1:	d3 eb                	shr    ebx,cl
c00284b3:	be 01 00 00 00       	mov    esi,0x1
c00284b8:	d3 e6                	shl    esi,cl
c00284ba:	4e                   	dec    esi
c00284bb:	21 f0                	and    eax,esi
c00284bd:	09 f8                	or     eax,edi
c00284bf:	0f 95 c0             	setne  al
c00284c2:	0f b6 c0             	movzx  eax,al
c00284c5:	09 c3                	or     ebx,eax
c00284c7:	89 d9                	mov    ecx,ebx
c00284c9:	c1 e9 08             	shr    ecx,0x8
c00284cc:	f6 c3 7f             	test   bl,0x7f
c00284cf:	0f 95 c0             	setne  al
c00284d2:	09 c8                	or     eax,ecx
c00284d4:	83 e0 01             	and    eax,0x1
c00284d7:	c1 eb 07             	shr    ebx,0x7
c00284da:	21 c3                	and    ebx,eax
c00284dc:	81 e2 00 00 00 80    	and    edx,0x80000000
c00284e2:	09 d1                	or     ecx,edx
c00284e4:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c00284e7:	eb 76                	jmp    c002855f <__truncdfsf2+0x11c>
c00284e9:	83 c6 80             	add    esi,0xffffff80
c00284ec:	7e 1d                	jle    c002850b <__truncdfsf2+0xc8>
c00284ee:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c00284f4:	75 0b                	jne    c0028501 <__truncdfsf2+0xbe>
c00284f6:	09 f8                	or     eax,edi
c00284f8:	74 09                	je     c0028503 <__truncdfsf2+0xc0>
c00284fa:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c00284ff:	eb 02                	jmp    c0028503 <__truncdfsf2+0xc0>
c0028501:	31 c0                	xor    eax,eax
c0028503:	c1 fa 17             	sar    edx,0x17
c0028506:	80 ca ff             	or     dl,0xff
c0028509:	eb 0e                	jmp    c0028519 <__truncdfsf2+0xd6>
c002850b:	c1 fa 1f             	sar    edx,0x1f
c002850e:	c1 e2 08             	shl    edx,0x8
c0028511:	09 ca                	or     edx,ecx
c0028513:	eb 04                	jmp    c0028519 <__truncdfsf2+0xd6>
c0028515:	31 d2                	xor    edx,edx
c0028517:	31 c0                	xor    eax,eax
c0028519:	c1 e2 17             	shl    edx,0x17
c002851c:	c1 e8 08             	shr    eax,0x8
c002851f:	09 d0                	or     eax,edx
c0028521:	eb 3c                	jmp    c002855f <__truncdfsf2+0x11c>
c0028523:	81 e9 80 03 00 00    	sub    ecx,0x380
c0028529:	89 ca                	mov    edx,ecx
c002852b:	c1 fa 0b             	sar    edx,0xb
c002852e:	c1 e2 08             	shl    edx,0x8
c0028531:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0028534:	31 db                	xor    ebx,ebx
c0028536:	85 ff                	test   edi,edi
c0028538:	0f 95 c3             	setne  bl
c002853b:	09 d8                	or     eax,ebx
c002853d:	89 c3                	mov    ebx,eax
c002853f:	c1 eb 08             	shr    ebx,0x8
c0028542:	a8 7f                	test   al,0x7f
c0028544:	0f 95 c2             	setne  dl
c0028547:	89 d6                	mov    esi,edx
c0028549:	09 de                	or     esi,ebx
c002854b:	83 e6 01             	and    esi,0x1
c002854e:	c1 e8 07             	shr    eax,0x7
c0028551:	21 f0                	and    eax,esi
c0028553:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0028556:	09 ca                	or     edx,ecx
c0028558:	c1 e2 17             	shl    edx,0x17
c002855b:	09 da                	or     edx,ebx
c002855d:	01 d0                	add    eax,edx
c002855f:	83 c4 0c             	add    esp,0xc
c0028562:	5b                   	pop    ebx
c0028563:	5e                   	pop    esi
c0028564:	5f                   	pop    edi
c0028565:	5d                   	pop    ebp
c0028566:	c3                   	ret    

c0028567 <__extendsfdf2>:
c0028567:	55                   	push   ebp
c0028568:	89 e5                	mov    ebp,esp
c002856a:	57                   	push   edi
c002856b:	56                   	push   esi
c002856c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002856f:	89 d1                	mov    ecx,edx
c0028571:	c1 f9 17             	sar    ecx,0x17
c0028574:	c1 e2 08             	shl    edx,0x8
c0028577:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002857d:	89 c8                	mov    eax,ecx
c002857f:	80 e4 f8             	and    ah,0xf8
c0028582:	8d 71 01             	lea    esi,[ecx+0x1]
c0028585:	81 e6 fe 00 00 00    	and    esi,0xfe
c002858b:	75 27                	jne    c00285b4 <__extendsfdf2+0x4d>
c002858d:	81 e1 ff 00 00 00    	and    ecx,0xff
c0028593:	75 18                	jne    c00285ad <__extendsfdf2+0x46>
c0028595:	85 d2                	test   edx,edx
c0028597:	74 20                	je     c00285b9 <__extendsfdf2+0x52>
c0028599:	41                   	inc    ecx
c002859a:	01 d2                	add    edx,edx
c002859c:	79 fb                	jns    c0028599 <__extendsfdf2+0x32>
c002859e:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00285a4:	29 c8                	sub    eax,ecx
c00285a6:	05 81 03 00 00       	add    eax,0x381
c00285ab:	eb 0c                	jmp    c00285b9 <__extendsfdf2+0x52>
c00285ad:	05 00 07 00 00       	add    eax,0x700
c00285b2:	eb 05                	jmp    c00285b9 <__extendsfdf2+0x52>
c00285b4:	05 80 03 00 00       	add    eax,0x380
c00285b9:	c1 e0 14             	shl    eax,0x14
c00285bc:	89 c1                	mov    ecx,eax
c00285be:	89 d0                	mov    eax,edx
c00285c0:	c1 e8 0b             	shr    eax,0xb
c00285c3:	09 c1                	or     ecx,eax
c00285c5:	c1 e2 15             	shl    edx,0x15
c00285c8:	89 d0                	mov    eax,edx
c00285ca:	89 ca                	mov    edx,ecx
c00285cc:	5e                   	pop    esi
c00285cd:	5f                   	pop    edi
c00285ce:	5d                   	pop    ebp
c00285cf:	c3                   	ret    

c00285d0 <fabs>:
c00285d0:	83 ec 0c             	sub    esp,0xc
c00285d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00285da:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00285de:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00285e3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00285e7:	dd 04 24             	fld    QWORD PTR [esp]
c00285ea:	83 c4 0c             	add    esp,0xc
c00285ed:	c3                   	ret    
c00285ee:	66 90                	xchg   ax,ax

c00285f0 <lrint>:
c00285f0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c00285f4:	83 ec 04             	sub    esp,0x4
c00285f7:	db 1c 24             	fistp  DWORD PTR [esp]
c00285fa:	58                   	pop    eax
c00285fb:	c3                   	ret    

c00285fc <lrintf>:
c00285fc:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0028600:	83 ec 04             	sub    esp,0x4
c0028603:	db 1c 24             	fistp  DWORD PTR [esp]
c0028606:	58                   	pop    eax
c0028607:	c3                   	ret    

Disassembly of section .init:

c0028608 <_init>:
c0028608:	55                   	push   ebp
c0028609:	89 e5                	mov    ebp,esp
c002860b:	e8 08 7b fd ff       	call   c0000118 <frame_dummy>
c0028610:	e8 63 e0 ff ff       	call   c0026678 <__do_global_ctors_aux>
c0028615:	5d                   	pop    ebp
c0028616:	c3                   	ret    

Disassembly of section .fini:

c0028617 <_fini>:
c0028617:	55                   	push   ebp
c0028618:	89 e5                	mov    ebp,esp
c002861a:	e8 89 7a fd ff       	call   c00000a8 <__do_global_dtors_aux>
c002861f:	5d                   	pop    ebp
c0028620:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0028622 <Computer::~Computer()>:
c0028622:	83 ec 0c             	sub    esp,0xc
c0028625:	ba 68 a1 02 c0       	mov    edx,0xc002a168
c002862a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002862e:	89 10                	mov    DWORD PTR [eax],edx
c0028630:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028634:	83 ec 0c             	sub    esp,0xc
c0028637:	50                   	push   eax
c0028638:	e8 4d bb fe ff       	call   c001418a <Device::~Device()>
c002863d:	83 c4 10             	add    esp,0x10
c0028640:	90                   	nop
c0028641:	83 c4 0c             	add    esp,0xc
c0028644:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0028646 <Computer::~Computer()>:
c0028646:	83 ec 0c             	sub    esp,0xc
c0028649:	83 ec 0c             	sub    esp,0xc
c002864c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028650:	e8 cd ff ff ff       	call   c0028622 <Computer::~Computer()>
c0028655:	83 c4 10             	add    esp,0x10
c0028658:	83 ec 08             	sub    esp,0x8
c002865b:	68 ec 01 00 00       	push   0x1ec
c0028660:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028664:	e8 49 a7 fe ff       	call   c0012db2 <operator delete(void*, unsigned long)>
c0028669:	83 c4 10             	add    esp,0x10
c002866c:	83 c4 0c             	add    esp,0xc
c002866f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0028670 <idleCommon()>:
c0028670:	83 ec 0c             	sub    esp,0xc
c0028673:	e8 ef 56 ff ff       	call   c001dd67 <lockScheduler()>
c0028678:	e8 25 5a ff ff       	call   c001e0a2 <schedule()>
c002867d:	83 c4 0c             	add    esp,0xc
c0028680:	e9 e4 56 ff ff       	jmp    c001dd69 <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0028686 <LinkedList<UnixFile>::~LinkedList()>:
c0028686:	90                   	nop
c0028687:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0028688 <LinkedList<UnixFile>::LinkedList()>:
c0028688:	83 ec 0c             	sub    esp,0xc
c002868b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002868f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028695:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028699:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00286a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286a4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00286ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286af:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00286b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286b9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00286c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286c4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00286cb:	83 ec 0c             	sub    esp,0xc
c00286ce:	68 26 a4 02 c0       	push   0xc002a426
c00286d3:	e8 ba a7 fe ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c00286d8:	83 c4 10             	add    esp,0x10
c00286db:	90                   	nop
c00286dc:	83 c4 0c             	add    esp,0xc
c00286df:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c00286e0 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c00286e0:	83 ec 0c             	sub    esp,0xc
c00286e3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00286e8:	75 10                	jne    c00286fa <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c00286ea:	83 ec 0c             	sub    esp,0xc
c00286ed:	68 40 a4 02 c0       	push   0xc002a440
c00286f2:	e8 76 1e ff ff       	call   c001a56d <Krnl::panic(char const*)>
c00286f7:	83 c4 10             	add    esp,0x10
c00286fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286fe:	8b 00                	mov    eax,DWORD PTR [eax]
c0028700:	85 c0                	test   eax,eax
c0028702:	74 34                	je     c0028738 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028704:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028708:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002870b:	85 c0                	test   eax,eax
c002870d:	74 29                	je     c0028738 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002870f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028713:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028716:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002871a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002871d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028721:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028725:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028728:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002872c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002872f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028736:	eb 65                	jmp    c002879d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028738:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002873c:	8b 00                	mov    eax,DWORD PTR [eax]
c002873e:	85 c0                	test   eax,eax
c0028740:	75 4b                	jne    c002878d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028742:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028746:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028749:	85 c0                	test   eax,eax
c002874b:	75 40                	jne    c002878d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002874d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028751:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028755:	89 10                	mov    DWORD PTR [eax],edx
c0028757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002875b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002875f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028762:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028766:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028769:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028770:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028774:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028777:	85 c0                	test   eax,eax
c0028779:	74 22                	je     c002879d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002877b:	83 ec 0c             	sub    esp,0xc
c002877e:	68 62 a4 02 c0       	push   0xc002a462
c0028783:	e8 e5 1d ff ff       	call   c001a56d <Krnl::panic(char const*)>
c0028788:	83 c4 10             	add    esp,0x10
c002878b:	eb 10                	jmp    c002879d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002878d:	83 ec 0c             	sub    esp,0xc
c0028790:	68 6c a4 02 c0       	push   0xc002a46c
c0028795:	e8 d3 1d ff ff       	call   c001a56d <Krnl::panic(char const*)>
c002879a:	83 c4 10             	add    esp,0x10
c002879d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287a1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00287a4:	8d 50 01             	lea    edx,[eax+0x1]
c00287a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287ab:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00287ae:	90                   	nop
c00287af:	83 c4 0c             	add    esp,0xc
c00287b2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c00287b4 <LinkedList<UnixFile>::getFirstElement()>:
c00287b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00287b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00287ba:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c00287bc <LinkedList<UnixFile>::removeFirst()>:
c00287bc:	83 ec 0c             	sub    esp,0xc
c00287bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287c3:	8b 00                	mov    eax,DWORD PTR [eax]
c00287c5:	85 c0                	test   eax,eax
c00287c7:	75 12                	jne    c00287db <LinkedList<UnixFile>::removeFirst()+0x1f>
c00287c9:	83 ec 0c             	sub    esp,0xc
c00287cc:	68 78 a4 02 c0       	push   0xc002a478
c00287d1:	e8 97 1d ff ff       	call   c001a56d <Krnl::panic(char const*)>
c00287d6:	83 c4 10             	add    esp,0x10
c00287d9:	eb 7e                	jmp    c0028859 <LinkedList<UnixFile>::removeFirst()+0x9d>
c00287db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287df:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287e2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00287e5:	85 c0                	test   eax,eax
c00287e7:	74 10                	je     c00287f9 <LinkedList<UnixFile>::removeFirst()+0x3d>
c00287e9:	83 ec 0c             	sub    esp,0xc
c00287ec:	68 c3 a4 02 c0       	push   0xc002a4c3
c00287f1:	e8 77 1d ff ff       	call   c001a56d <Krnl::panic(char const*)>
c00287f6:	83 c4 10             	add    esp,0x10
c00287f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287fd:	8b 00                	mov    eax,DWORD PTR [eax]
c00287ff:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028802:	85 c0                	test   eax,eax
c0028804:	75 33                	jne    c0028839 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0028806:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002880a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028810:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028814:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002881b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002881f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028822:	83 f8 01             	cmp    eax,0x1
c0028825:	74 21                	je     c0028848 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028827:	83 ec 0c             	sub    esp,0xc
c002882a:	68 9c a4 02 c0       	push   0xc002a49c
c002882f:	e8 39 1d ff ff       	call   c001a56d <Krnl::panic(char const*)>
c0028834:	83 c4 10             	add    esp,0x10
c0028837:	eb 0f                	jmp    c0028848 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028839:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002883d:	8b 00                	mov    eax,DWORD PTR [eax]
c002883f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028842:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028846:	89 10                	mov    DWORD PTR [eax],edx
c0028848:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002884c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002884f:	8d 50 ff             	lea    edx,[eax-0x1]
c0028852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028856:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028859:	83 c4 0c             	add    esp,0xc
c002885c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002885e <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002885e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028862:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028865:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0028866 <DriverlessDevice::~DriverlessDevice()>:
c0028866:	ba 04 ac 02 c0       	mov    edx,0xc002ac04
c002886b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002886f:	89 10                	mov    DWORD PTR [eax],edx
c0028871:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028875:	50                   	push   eax
c0028876:	e8 0f b9 fe ff       	call   c001418a <Device::~Device()>
c002887b:	83 c4 04             	add    esp,0x4
c002887e:	90                   	nop
c002887f:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0028880 <DriverlessDevice::~DriverlessDevice()>:
c0028880:	83 ec 0c             	sub    esp,0xc
c0028883:	83 ec 0c             	sub    esp,0xc
c0028886:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002888a:	e8 d7 ff ff ff       	call   c0028866 <DriverlessDevice::~DriverlessDevice()>
c002888f:	83 c4 10             	add    esp,0x10
c0028892:	83 ec 08             	sub    esp,0x8
c0028895:	68 58 01 00 00       	push   0x158
c002889a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002889e:	e8 0f a5 fe ff       	call   c0012db2 <operator delete(void*, unsigned long)>
c00288a3:	83 c4 10             	add    esp,0x10
c00288a6:	83 c4 0c             	add    esp,0xc
c00288a9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c00288aa <LinkedList<Device>::addElement(Device*)>:
c00288aa:	83 ec 0c             	sub    esp,0xc
c00288ad:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00288b2:	75 10                	jne    c00288c4 <LinkedList<Device>::addElement(Device*)+0x1a>
c00288b4:	83 ec 0c             	sub    esp,0xc
c00288b7:	68 40 a4 02 c0       	push   0xc002a440
c00288bc:	e8 ac 1c ff ff       	call   c001a56d <Krnl::panic(char const*)>
c00288c1:	83 c4 10             	add    esp,0x10
c00288c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00288ca:	85 c0                	test   eax,eax
c00288cc:	74 3a                	je     c0028908 <LinkedList<Device>::addElement(Device*)+0x5e>
c00288ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288d2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00288d5:	85 c0                	test   eax,eax
c00288d7:	74 2f                	je     c0028908 <LinkedList<Device>::addElement(Device*)+0x5e>
c00288d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288dd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00288e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00288e4:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c00288ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288ee:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00288f2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00288f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288f9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00288fc:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028906:	eb 68                	jmp    c0028970 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028908:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002890c:	8b 00                	mov    eax,DWORD PTR [eax]
c002890e:	85 c0                	test   eax,eax
c0028910:	75 4e                	jne    c0028960 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028912:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028916:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028919:	85 c0                	test   eax,eax
c002891b:	75 43                	jne    c0028960 <LinkedList<Device>::addElement(Device*)+0xb6>
c002891d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028921:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028925:	89 10                	mov    DWORD PTR [eax],edx
c0028927:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002892b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002892f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028936:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028939:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028943:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028947:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002894a:	85 c0                	test   eax,eax
c002894c:	74 22                	je     c0028970 <LinkedList<Device>::addElement(Device*)+0xc6>
c002894e:	83 ec 0c             	sub    esp,0xc
c0028951:	68 62 a4 02 c0       	push   0xc002a462
c0028956:	e8 12 1c ff ff       	call   c001a56d <Krnl::panic(char const*)>
c002895b:	83 c4 10             	add    esp,0x10
c002895e:	eb 10                	jmp    c0028970 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028960:	83 ec 0c             	sub    esp,0xc
c0028963:	68 6c a4 02 c0       	push   0xc002a46c
c0028968:	e8 00 1c ff ff       	call   c001a56d <Krnl::panic(char const*)>
c002896d:	83 c4 10             	add    esp,0x10
c0028970:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028974:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028977:	8d 50 01             	lea    edx,[eax+0x1]
c002897a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002897e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028981:	90                   	nop
c0028982:	83 c4 0c             	add    esp,0xc
c0028985:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0028986 <LinkedList<Device>::LinkedList()>:
c0028986:	83 ec 0c             	sub    esp,0xc
c0028989:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002898d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028993:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028997:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002899e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289a2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00289a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289ad:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00289b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289b7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00289be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289c2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00289c9:	83 ec 0c             	sub    esp,0xc
c00289cc:	68 26 a4 02 c0       	push   0xc002a426
c00289d1:	e8 bc a4 fe ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c00289d6:	83 c4 10             	add    esp,0x10
c00289d9:	90                   	nop
c00289da:	83 c4 0c             	add    esp,0xc
c00289dd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c00289de <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c00289de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00289e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00289e4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c00289e6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c00289e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00289ea:	8b 00                	mov    eax,DWORD PTR [eax]
c00289ec:	85 c0                	test   eax,eax
c00289ee:	75 0e                	jne    c00289fe <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00289f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00289f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00289f7:	85 c0                	test   eax,eax
c00289f9:	75 03                	jne    c00289fe <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00289fb:	b0 01                	mov    al,0x1
c00289fd:	c3                   	ret    
c00289fe:	b0 00                	mov    al,0x0
c0028a00:	90                   	nop
c0028a01:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0028a02 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0028a02:	83 ec 0c             	sub    esp,0xc
c0028a05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a09:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a0b:	85 c0                	test   eax,eax
c0028a0d:	75 15                	jne    c0028a24 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c0028a0f:	83 ec 0c             	sub    esp,0xc
c0028a12:	68 78 a4 02 c0       	push   0xc002a478
c0028a17:	e8 51 1b ff ff       	call   c001a56d <Krnl::panic(char const*)>
c0028a1c:	83 c4 10             	add    esp,0x10
c0028a1f:	e9 88 00 00 00       	jmp    c0028aac <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0028a24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a28:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a2b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028a2e:	85 c0                	test   eax,eax
c0028a30:	0f 95 c0             	setne  al
c0028a33:	84 c0                	test   al,al
c0028a35:	74 10                	je     c0028a47 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0028a37:	83 ec 0c             	sub    esp,0xc
c0028a3a:	68 c3 a4 02 c0       	push   0xc002a4c3
c0028a3f:	e8 29 1b ff ff       	call   c001a56d <Krnl::panic(char const*)>
c0028a44:	83 c4 10             	add    esp,0x10
c0028a47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a4b:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a4d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028a50:	85 c0                	test   eax,eax
c0028a52:	0f 94 c0             	sete   al
c0028a55:	84 c0                	test   al,al
c0028a57:	74 33                	je     c0028a8c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0028a59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a5d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028a63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a67:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028a6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a72:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a75:	83 f8 01             	cmp    eax,0x1
c0028a78:	74 21                	je     c0028a9b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028a7a:	83 ec 0c             	sub    esp,0xc
c0028a7d:	68 9c a4 02 c0       	push   0xc002a49c
c0028a82:	e8 e6 1a ff ff       	call   c001a56d <Krnl::panic(char const*)>
c0028a87:	83 c4 10             	add    esp,0x10
c0028a8a:	eb 0f                	jmp    c0028a9b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028a8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a90:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a92:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0028a95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a99:	89 10                	mov    DWORD PTR [eax],edx
c0028a9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a9f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028aa2:	8d 50 ff             	lea    edx,[eax-0x1]
c0028aa5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aa9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028aac:	83 c4 0c             	add    esp,0xc
c0028aaf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028ab0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028ab0:	83 ec 0c             	sub    esp,0xc
c0028ab3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028ab8:	75 10                	jne    c0028aca <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c0028aba:	83 ec 0c             	sub    esp,0xc
c0028abd:	68 40 a4 02 c0       	push   0xc002a440
c0028ac2:	e8 a6 1a ff ff       	call   c001a56d <Krnl::panic(char const*)>
c0028ac7:	83 c4 10             	add    esp,0x10
c0028aca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ace:	8b 00                	mov    eax,DWORD PTR [eax]
c0028ad0:	85 c0                	test   eax,eax
c0028ad2:	74 34                	je     c0028b08 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028ad4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ad8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028adb:	85 c0                	test   eax,eax
c0028add:	74 29                	je     c0028b08 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028adf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ae3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028ae6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028aea:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0028aed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028af1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028af5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028af8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028afc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028aff:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028b06:	eb 65                	jmp    c0028b6d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028b08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b0c:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b0e:	85 c0                	test   eax,eax
c0028b10:	75 4b                	jne    c0028b5d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028b12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b16:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b19:	85 c0                	test   eax,eax
c0028b1b:	75 40                	jne    c0028b5d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028b1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b21:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b25:	89 10                	mov    DWORD PTR [eax],edx
c0028b27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b2b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b2f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028b32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b36:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b39:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028b40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b44:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028b47:	85 c0                	test   eax,eax
c0028b49:	74 22                	je     c0028b6d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028b4b:	83 ec 0c             	sub    esp,0xc
c0028b4e:	68 62 a4 02 c0       	push   0xc002a462
c0028b53:	e8 15 1a ff ff       	call   c001a56d <Krnl::panic(char const*)>
c0028b58:	83 c4 10             	add    esp,0x10
c0028b5b:	eb 10                	jmp    c0028b6d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028b5d:	83 ec 0c             	sub    esp,0xc
c0028b60:	68 6c a4 02 c0       	push   0xc002a46c
c0028b65:	e8 03 1a ff ff       	call   c001a56d <Krnl::panic(char const*)>
c0028b6a:	83 c4 10             	add    esp,0x10
c0028b6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b71:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028b74:	8d 50 01             	lea    edx,[eax+0x1]
c0028b77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b7b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028b7e:	90                   	nop
c0028b7f:	83 c4 0c             	add    esp,0xc
c0028b82:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028b84 <ACPI::~ACPI()>:
c0028b84:	83 ec 0c             	sub    esp,0xc
c0028b87:	ba 6c b5 02 c0       	mov    edx,0xc002b56c
c0028b8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b90:	89 10                	mov    DWORD PTR [eax],edx
c0028b92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b96:	83 ec 0c             	sub    esp,0xc
c0028b99:	50                   	push   eax
c0028b9a:	e8 eb b5 fe ff       	call   c001418a <Device::~Device()>
c0028b9f:	83 c4 10             	add    esp,0x10
c0028ba2:	90                   	nop
c0028ba3:	83 c4 0c             	add    esp,0xc
c0028ba6:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028ba8 <ACPI::~ACPI()>:
c0028ba8:	83 ec 0c             	sub    esp,0xc
c0028bab:	83 ec 0c             	sub    esp,0xc
c0028bae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028bb2:	e8 cd ff ff ff       	call   c0028b84 <ACPI::~ACPI()>
c0028bb7:	83 c4 10             	add    esp,0x10
c0028bba:	83 ec 08             	sub    esp,0x8
c0028bbd:	68 68 12 00 00       	push   0x1268
c0028bc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028bc6:	e8 e7 a1 fe ff       	call   c0012db2 <operator delete(void*, unsigned long)>
c0028bcb:	83 c4 10             	add    esp,0x10
c0028bce:	83 c4 0c             	add    esp,0xc
c0028bd1:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0028bd2 <CPU::~CPU()>:
c0028bd2:	83 ec 0c             	sub    esp,0xc
c0028bd5:	ba 5c b9 02 c0       	mov    edx,0xc002b95c
c0028bda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bde:	89 10                	mov    DWORD PTR [eax],edx
c0028be0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028be4:	83 ec 0c             	sub    esp,0xc
c0028be7:	50                   	push   eax
c0028be8:	e8 9d b5 fe ff       	call   c001418a <Device::~Device()>
c0028bed:	83 c4 10             	add    esp,0x10
c0028bf0:	90                   	nop
c0028bf1:	83 c4 0c             	add    esp,0xc
c0028bf4:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0028bf6 <CPU::~CPU()>:
c0028bf6:	83 ec 0c             	sub    esp,0xc
c0028bf9:	83 ec 0c             	sub    esp,0xc
c0028bfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c00:	e8 cd ff ff ff       	call   c0028bd2 <CPU::~CPU()>
c0028c05:	83 c4 10             	add    esp,0x10
c0028c08:	83 ec 08             	sub    esp,0x8
c0028c0b:	68 98 11 00 00       	push   0x1198
c0028c10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c14:	e8 99 a1 fe ff       	call   c0012db2 <operator delete(void*, unsigned long)>
c0028c19:	83 c4 10             	add    esp,0x10
c0028c1c:	83 c4 0c             	add    esp,0xc
c0028c1f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0028c20 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0028c20:	90                   	nop
c0028c21:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0028c22 <ThreadControlBlock::ThreadControlBlock()>:
c0028c22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c26:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028c2d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c31:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0028c38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c3c:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0028c43:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c47:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0028c4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c52:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0028c56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c5a:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0028c5e:	90                   	nop
c0028c5f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0028c60 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0028c60:	83 ec 0c             	sub    esp,0xc
c0028c63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c67:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028c6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c71:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028c78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c7c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028c83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c87:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028c8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c91:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028c98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c9c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028ca3:	83 ec 0c             	sub    esp,0xc
c0028ca6:	68 26 a4 02 c0       	push   0xc002a426
c0028cab:	e8 e2 a1 fe ff       	call   c0012e92 <Dbg::kprintf(char const*, ...)>
c0028cb0:	83 c4 10             	add    esp,0x10
c0028cb3:	90                   	nop
c0028cb4:	83 c4 0c             	add    esp,0xc
c0028cb7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028cb8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028cb8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028cbc:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028cbf:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0028cc0 <Vm::_FPUState::_FPUState()>:
c0028cc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028cc4:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0028ccb:	90                   	nop
c0028ccc:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0028cce <PCI::~PCI()>:
c0028cce:	83 ec 0c             	sub    esp,0xc
c0028cd1:	ba e8 c9 02 c0       	mov    edx,0xc002c9e8
c0028cd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cda:	89 10                	mov    DWORD PTR [eax],edx
c0028cdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ce0:	83 ec 0c             	sub    esp,0xc
c0028ce3:	50                   	push   eax
c0028ce4:	e8 79 ae fe ff       	call   c0013b62 <Bus::~Bus()>
c0028ce9:	83 c4 10             	add    esp,0x10
c0028cec:	90                   	nop
c0028ced:	83 c4 0c             	add    esp,0xc
c0028cf0:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0028cf2 <PCI::~PCI()>:
c0028cf2:	83 ec 0c             	sub    esp,0xc
c0028cf5:	83 ec 0c             	sub    esp,0xc
c0028cf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cfc:	e8 cd ff ff ff       	call   c0028cce <PCI::~PCI()>
c0028d01:	83 c4 10             	add    esp,0x10
c0028d04:	83 ec 08             	sub    esp,0x8
c0028d07:	68 58 01 00 00       	push   0x158
c0028d0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d10:	e8 9d a0 fe ff       	call   c0012db2 <operator delete(void*, unsigned long)>
c0028d15:	83 c4 10             	add    esp,0x10
c0028d18:	83 c4 0c             	add    esp,0xc
c0028d1b:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0028d1c <IDE::~IDE()>:
c0028d1c:	83 ec 0c             	sub    esp,0xc
c0028d1f:	ba 4c cc 02 c0       	mov    edx,0xc002cc4c
c0028d24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d28:	89 10                	mov    DWORD PTR [eax],edx
c0028d2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d2e:	83 ec 0c             	sub    esp,0xc
c0028d31:	50                   	push   eax
c0028d32:	e8 43 b9 fe ff       	call   c001467a <HardDiskController::~HardDiskController()>
c0028d37:	83 c4 10             	add    esp,0x10
c0028d3a:	90                   	nop
c0028d3b:	83 c4 0c             	add    esp,0xc
c0028d3e:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0028d40 <IDE::~IDE()>:
c0028d40:	83 ec 0c             	sub    esp,0xc
c0028d43:	83 ec 0c             	sub    esp,0xc
c0028d46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d4a:	e8 cd ff ff ff       	call   c0028d1c <IDE::~IDE()>
c0028d4f:	83 c4 10             	add    esp,0x10
c0028d52:	83 ec 08             	sub    esp,0x8
c0028d55:	68 70 02 00 00       	push   0x270
c0028d5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d5e:	e8 4f a0 fe ff       	call   c0012db2 <operator delete(void*, unsigned long)>
c0028d63:	83 c4 10             	add    esp,0x10
c0028d66:	83 c4 0c             	add    esp,0xc
c0028d69:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0028d6a <SATABus::~SATABus()>:
c0028d6a:	83 ec 0c             	sub    esp,0xc
c0028d6d:	ba 2c cd 02 c0       	mov    edx,0xc002cd2c
c0028d72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d76:	89 10                	mov    DWORD PTR [eax],edx
c0028d78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d7c:	83 ec 0c             	sub    esp,0xc
c0028d7f:	50                   	push   eax
c0028d80:	e8 f5 b8 fe ff       	call   c001467a <HardDiskController::~HardDiskController()>
c0028d85:	83 c4 10             	add    esp,0x10
c0028d88:	90                   	nop
c0028d89:	83 c4 0c             	add    esp,0xc
c0028d8c:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0028d8e <SATABus::~SATABus()>:
c0028d8e:	83 ec 0c             	sub    esp,0xc
c0028d91:	83 ec 0c             	sub    esp,0xc
c0028d94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d98:	e8 cd ff ff ff       	call   c0028d6a <SATABus::~SATABus()>
c0028d9d:	83 c4 10             	add    esp,0x10
c0028da0:	83 ec 08             	sub    esp,0x8
c0028da3:	68 64 01 00 00       	push   0x164
c0028da8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dac:	e8 01 a0 fe ff       	call   c0012db2 <operator delete(void*, unsigned long)>
c0028db1:	83 c4 10             	add    esp,0x10
c0028db4:	83 c4 0c             	add    esp,0xc
c0028db7:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028db8 <ATA::~ATA()>:
c0028db8:	83 ec 0c             	sub    esp,0xc
c0028dbb:	ba 78 cd 02 c0       	mov    edx,0xc002cd78
c0028dc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dc4:	89 10                	mov    DWORD PTR [eax],edx
c0028dc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dca:	83 ec 0c             	sub    esp,0xc
c0028dcd:	50                   	push   eax
c0028dce:	e8 99 b9 fe ff       	call   c001476c <PhysicalDisk::~PhysicalDisk()>
c0028dd3:	83 c4 10             	add    esp,0x10
c0028dd6:	90                   	nop
c0028dd7:	83 c4 0c             	add    esp,0xc
c0028dda:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0028ddc <ATA::~ATA()>:
c0028ddc:	83 ec 0c             	sub    esp,0xc
c0028ddf:	83 ec 0c             	sub    esp,0xc
c0028de2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028de6:	e8 cd ff ff ff       	call   c0028db8 <ATA::~ATA()>
c0028deb:	83 c4 10             	add    esp,0x10
c0028dee:	83 ec 08             	sub    esp,0x8
c0028df1:	68 7c 01 00 00       	push   0x17c
c0028df6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dfa:	e8 b3 9f fe ff       	call   c0012db2 <operator delete(void*, unsigned long)>
c0028dff:	83 c4 10             	add    esp,0x10
c0028e02:	83 c4 0c             	add    esp,0xc
c0028e05:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0028e06 <ATAPI::~ATAPI()>:
c0028e06:	83 ec 0c             	sub    esp,0xc
c0028e09:	ba b0 cd 02 c0       	mov    edx,0xc002cdb0
c0028e0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e12:	89 10                	mov    DWORD PTR [eax],edx
c0028e14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e18:	83 ec 0c             	sub    esp,0xc
c0028e1b:	50                   	push   eax
c0028e1c:	e8 4b b9 fe ff       	call   c001476c <PhysicalDisk::~PhysicalDisk()>
c0028e21:	83 c4 10             	add    esp,0x10
c0028e24:	90                   	nop
c0028e25:	83 c4 0c             	add    esp,0xc
c0028e28:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0028e2a <ATAPI::~ATAPI()>:
c0028e2a:	83 ec 0c             	sub    esp,0xc
c0028e2d:	83 ec 0c             	sub    esp,0xc
c0028e30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e34:	e8 cd ff ff ff       	call   c0028e06 <ATAPI::~ATAPI()>
c0028e39:	83 c4 10             	add    esp,0x10
c0028e3c:	83 ec 08             	sub    esp,0x8
c0028e3f:	68 80 01 00 00       	push   0x180
c0028e44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e48:	e8 65 9f fe ff       	call   c0012db2 <operator delete(void*, unsigned long)>
c0028e4d:	83 c4 10             	add    esp,0x10
c0028e50:	83 c4 0c             	add    esp,0xc
c0028e53:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0028e54 <SATA::~SATA()>:
c0028e54:	83 ec 0c             	sub    esp,0xc
c0028e57:	ba 64 ce 02 c0       	mov    edx,0xc002ce64
c0028e5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e60:	89 10                	mov    DWORD PTR [eax],edx
c0028e62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e66:	83 ec 0c             	sub    esp,0xc
c0028e69:	50                   	push   eax
c0028e6a:	e8 fd b8 fe ff       	call   c001476c <PhysicalDisk::~PhysicalDisk()>
c0028e6f:	83 c4 10             	add    esp,0x10
c0028e72:	90                   	nop
c0028e73:	83 c4 0c             	add    esp,0xc
c0028e76:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0028e78 <SATA::~SATA()>:
c0028e78:	83 ec 0c             	sub    esp,0xc
c0028e7b:	83 ec 0c             	sub    esp,0xc
c0028e7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e82:	e8 cd ff ff ff       	call   c0028e54 <SATA::~SATA()>
c0028e87:	83 c4 10             	add    esp,0x10
c0028e8a:	83 ec 08             	sub    esp,0x8
c0028e8d:	68 7c 01 00 00       	push   0x17c
c0028e92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e96:	e8 17 9f fe ff       	call   c0012db2 <operator delete(void*, unsigned long)>
c0028e9b:	83 c4 10             	add    esp,0x10
c0028e9e:	83 c4 0c             	add    esp,0xc
c0028ea1:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0028ea2 <SATAPI::~SATAPI()>:
c0028ea2:	83 ec 0c             	sub    esp,0xc
c0028ea5:	ba 40 cf 02 c0       	mov    edx,0xc002cf40
c0028eaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028eae:	89 10                	mov    DWORD PTR [eax],edx
c0028eb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028eb4:	83 ec 0c             	sub    esp,0xc
c0028eb7:	50                   	push   eax
c0028eb8:	e8 af b8 fe ff       	call   c001476c <PhysicalDisk::~PhysicalDisk()>
c0028ebd:	83 c4 10             	add    esp,0x10
c0028ec0:	90                   	nop
c0028ec1:	83 c4 0c             	add    esp,0xc
c0028ec4:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0028ec6 <SATAPI::~SATAPI()>:
c0028ec6:	83 ec 0c             	sub    esp,0xc
c0028ec9:	83 ec 0c             	sub    esp,0xc
c0028ecc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ed0:	e8 cd ff ff ff       	call   c0028ea2 <SATAPI::~SATAPI()>
c0028ed5:	83 c4 10             	add    esp,0x10
c0028ed8:	83 ec 08             	sub    esp,0x8
c0028edb:	68 80 01 00 00       	push   0x180
c0028ee0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ee4:	e8 c9 9e fe ff       	call   c0012db2 <operator delete(void*, unsigned long)>
c0028ee9:	83 c4 10             	add    esp,0x10
c0028eec:	83 c4 0c             	add    esp,0xc
c0028eef:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0028ef0 <AVX::~AVX()>:
c0028ef0:	83 ec 0c             	sub    esp,0xc
c0028ef3:	ba 80 cf 02 c0       	mov    edx,0xc002cf80
c0028ef8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028efc:	89 10                	mov    DWORD PTR [eax],edx
c0028efe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f02:	83 ec 0c             	sub    esp,0xc
c0028f05:	50                   	push   eax
c0028f06:	e8 e5 b8 fe ff       	call   c00147f0 <FPU::~FPU()>
c0028f0b:	83 c4 10             	add    esp,0x10
c0028f0e:	90                   	nop
c0028f0f:	83 c4 0c             	add    esp,0xc
c0028f12:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0028f14 <AVX::~AVX()>:
c0028f14:	83 ec 0c             	sub    esp,0xc
c0028f17:	83 ec 0c             	sub    esp,0xc
c0028f1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f1e:	e8 cd ff ff ff       	call   c0028ef0 <AVX::~AVX()>
c0028f23:	83 c4 10             	add    esp,0x10
c0028f26:	83 ec 08             	sub    esp,0x8
c0028f29:	68 58 01 00 00       	push   0x158
c0028f2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f32:	e8 7b 9e fe ff       	call   c0012db2 <operator delete(void*, unsigned long)>
c0028f37:	83 c4 10             	add    esp,0x10
c0028f3a:	83 c4 0c             	add    esp,0xc
c0028f3d:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0028f3e <MMX::~MMX()>:
c0028f3e:	83 ec 0c             	sub    esp,0xc
c0028f41:	ba c0 cf 02 c0       	mov    edx,0xc002cfc0
c0028f46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f4a:	89 10                	mov    DWORD PTR [eax],edx
c0028f4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f50:	83 ec 0c             	sub    esp,0xc
c0028f53:	50                   	push   eax
c0028f54:	e8 97 b8 fe ff       	call   c00147f0 <FPU::~FPU()>
c0028f59:	83 c4 10             	add    esp,0x10
c0028f5c:	90                   	nop
c0028f5d:	83 c4 0c             	add    esp,0xc
c0028f60:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0028f62 <MMX::~MMX()>:
c0028f62:	83 ec 0c             	sub    esp,0xc
c0028f65:	83 ec 0c             	sub    esp,0xc
c0028f68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f6c:	e8 cd ff ff ff       	call   c0028f3e <MMX::~MMX()>
c0028f71:	83 c4 10             	add    esp,0x10
c0028f74:	83 ec 08             	sub    esp,0x8
c0028f77:	68 58 01 00 00       	push   0x158
c0028f7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f80:	e8 2d 9e fe ff       	call   c0012db2 <operator delete(void*, unsigned long)>
c0028f85:	83 c4 10             	add    esp,0x10
c0028f88:	83 c4 0c             	add    esp,0xc
c0028f8b:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0028f8c <SSE::~SSE()>:
c0028f8c:	83 ec 0c             	sub    esp,0xc
c0028f8f:	ba 00 d0 02 c0       	mov    edx,0xc002d000
c0028f94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f98:	89 10                	mov    DWORD PTR [eax],edx
c0028f9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f9e:	83 ec 0c             	sub    esp,0xc
c0028fa1:	50                   	push   eax
c0028fa2:	e8 49 b8 fe ff       	call   c00147f0 <FPU::~FPU()>
c0028fa7:	83 c4 10             	add    esp,0x10
c0028faa:	90                   	nop
c0028fab:	83 c4 0c             	add    esp,0xc
c0028fae:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0028fb0 <SSE::~SSE()>:
c0028fb0:	83 ec 0c             	sub    esp,0xc
c0028fb3:	83 ec 0c             	sub    esp,0xc
c0028fb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fba:	e8 cd ff ff ff       	call   c0028f8c <SSE::~SSE()>
c0028fbf:	83 c4 10             	add    esp,0x10
c0028fc2:	83 ec 08             	sub    esp,0x8
c0028fc5:	68 58 01 00 00       	push   0x158
c0028fca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fce:	e8 df 9d fe ff       	call   c0012db2 <operator delete(void*, unsigned long)>
c0028fd3:	83 c4 10             	add    esp,0x10
c0028fd6:	83 c4 0c             	add    esp,0xc
c0028fd9:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0028fda <x87::~x87()>:
c0028fda:	83 ec 0c             	sub    esp,0xc
c0028fdd:	ba 40 d0 02 c0       	mov    edx,0xc002d040
c0028fe2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fe6:	89 10                	mov    DWORD PTR [eax],edx
c0028fe8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fec:	83 ec 0c             	sub    esp,0xc
c0028fef:	50                   	push   eax
c0028ff0:	e8 fb b7 fe ff       	call   c00147f0 <FPU::~FPU()>
c0028ff5:	83 c4 10             	add    esp,0x10
c0028ff8:	90                   	nop
c0028ff9:	83 c4 0c             	add    esp,0xc
c0028ffc:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0028ffe <x87::~x87()>:
c0028ffe:	83 ec 0c             	sub    esp,0xc
c0029001:	83 ec 0c             	sub    esp,0xc
c0029004:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029008:	e8 cd ff ff ff       	call   c0028fda <x87::~x87()>
c002900d:	83 c4 10             	add    esp,0x10
c0029010:	83 ec 08             	sub    esp,0x8
c0029013:	68 58 01 00 00       	push   0x158
c0029018:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002901c:	e8 91 9d fe ff       	call   c0012db2 <operator delete(void*, unsigned long)>
c0029021:	83 c4 10             	add    esp,0x10
c0029024:	83 c4 0c             	add    esp,0xc
c0029027:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0029028 <IOAPIC::~IOAPIC()>:
c0029028:	83 ec 0c             	sub    esp,0xc
c002902b:	ba 98 d1 02 c0       	mov    edx,0xc002d198
c0029030:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029034:	89 10                	mov    DWORD PTR [eax],edx
c0029036:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002903a:	83 ec 0c             	sub    esp,0xc
c002903d:	50                   	push   eax
c002903e:	e8 47 b1 fe ff       	call   c001418a <Device::~Device()>
c0029043:	83 c4 10             	add    esp,0x10
c0029046:	90                   	nop
c0029047:	83 c4 0c             	add    esp,0xc
c002904a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002904c <IOAPIC::~IOAPIC()>:
c002904c:	83 ec 0c             	sub    esp,0xc
c002904f:	83 ec 0c             	sub    esp,0xc
c0029052:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029056:	e8 cd ff ff ff       	call   c0029028 <IOAPIC::~IOAPIC()>
c002905b:	83 c4 10             	add    esp,0x10
c002905e:	83 ec 08             	sub    esp,0x8
c0029061:	68 68 01 00 00       	push   0x168
c0029066:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002906a:	e8 43 9d fe ff       	call   c0012db2 <operator delete(void*, unsigned long)>
c002906f:	83 c4 10             	add    esp,0x10
c0029072:	83 c4 0c             	add    esp,0xc
c0029075:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0029076 <APIC::~APIC()>:
c0029076:	83 ec 0c             	sub    esp,0xc
c0029079:	ba 50 d1 02 c0       	mov    edx,0xc002d150
c002907e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029082:	89 10                	mov    DWORD PTR [eax],edx
c0029084:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029088:	83 ec 0c             	sub    esp,0xc
c002908b:	50                   	push   eax
c002908c:	e8 29 bc fe ff       	call   c0014cba <InterruptController::~InterruptController()>
c0029091:	83 c4 10             	add    esp,0x10
c0029094:	90                   	nop
c0029095:	83 c4 0c             	add    esp,0xc
c0029098:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c002909a <APIC::~APIC()>:
c002909a:	83 ec 0c             	sub    esp,0xc
c002909d:	83 ec 0c             	sub    esp,0xc
c00290a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290a4:	e8 cd ff ff ff       	call   c0029076 <APIC::~APIC()>
c00290a9:	83 c4 10             	add    esp,0x10
c00290ac:	83 ec 08             	sub    esp,0x8
c00290af:	68 58 21 00 00       	push   0x2158
c00290b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290b8:	e8 f5 9c fe ff       	call   c0012db2 <operator delete(void*, unsigned long)>
c00290bd:	83 c4 10             	add    esp,0x10
c00290c0:	83 c4 0c             	add    esp,0xc
c00290c3:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c00290c4 <PIC::~PIC()>:
c00290c4:	83 ec 0c             	sub    esp,0xc
c00290c7:	ba e8 d1 02 c0       	mov    edx,0xc002d1e8
c00290cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290d0:	89 10                	mov    DWORD PTR [eax],edx
c00290d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290d6:	83 ec 0c             	sub    esp,0xc
c00290d9:	50                   	push   eax
c00290da:	e8 db bb fe ff       	call   c0014cba <InterruptController::~InterruptController()>
c00290df:	83 c4 10             	add    esp,0x10
c00290e2:	90                   	nop
c00290e3:	83 c4 0c             	add    esp,0xc
c00290e6:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c00290e8 <PIC::~PIC()>:
c00290e8:	83 ec 0c             	sub    esp,0xc
c00290eb:	83 ec 0c             	sub    esp,0xc
c00290ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290f2:	e8 cd ff ff ff       	call   c00290c4 <PIC::~PIC()>
c00290f7:	83 c4 10             	add    esp,0x10
c00290fa:	83 ec 08             	sub    esp,0x8
c00290fd:	68 58 21 00 00       	push   0x2158
c0029102:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029106:	e8 a7 9c fe ff       	call   c0012db2 <operator delete(void*, unsigned long)>
c002910b:	83 c4 10             	add    esp,0x10
c002910e:	83 c4 0c             	add    esp,0xc
c0029111:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0029112 <APICTimer::~APICTimer()>:
c0029112:	83 ec 0c             	sub    esp,0xc
c0029115:	ba 3c d2 02 c0       	mov    edx,0xc002d23c
c002911a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002911e:	89 10                	mov    DWORD PTR [eax],edx
c0029120:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029124:	83 ec 0c             	sub    esp,0xc
c0029127:	50                   	push   eax
c0029128:	e8 0f db fe ff       	call   c0016c3c <Timer::~Timer()>
c002912d:	83 c4 10             	add    esp,0x10
c0029130:	90                   	nop
c0029131:	83 c4 0c             	add    esp,0xc
c0029134:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0029136 <APICTimer::~APICTimer()>:
c0029136:	83 ec 0c             	sub    esp,0xc
c0029139:	83 ec 0c             	sub    esp,0xc
c002913c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029140:	e8 cd ff ff ff       	call   c0029112 <APICTimer::~APICTimer()>
c0029145:	83 c4 10             	add    esp,0x10
c0029148:	83 ec 08             	sub    esp,0x8
c002914b:	68 60 01 00 00       	push   0x160
c0029150:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029154:	e8 59 9c fe ff       	call   c0012db2 <operator delete(void*, unsigned long)>
c0029159:	83 c4 10             	add    esp,0x10
c002915c:	83 c4 0c             	add    esp,0xc
c002915f:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0029160 <PIT::~PIT()>:
c0029160:	83 ec 0c             	sub    esp,0xc
c0029163:	ba 8c d2 02 c0       	mov    edx,0xc002d28c
c0029168:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002916c:	89 10                	mov    DWORD PTR [eax],edx
c002916e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029172:	83 ec 0c             	sub    esp,0xc
c0029175:	50                   	push   eax
c0029176:	e8 c1 da fe ff       	call   c0016c3c <Timer::~Timer()>
c002917b:	83 c4 10             	add    esp,0x10
c002917e:	90                   	nop
c002917f:	83 c4 0c             	add    esp,0xc
c0029182:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0029184 <PIT::~PIT()>:
c0029184:	83 ec 0c             	sub    esp,0xc
c0029187:	83 ec 0c             	sub    esp,0xc
c002918a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002918e:	e8 cd ff ff ff       	call   c0029160 <PIT::~PIT()>
c0029193:	83 c4 10             	add    esp,0x10
c0029196:	83 ec 08             	sub    esp,0x8
c0029199:	68 5c 01 00 00       	push   0x15c
c002919e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291a2:	e8 0b 9c fe ff       	call   c0012db2 <operator delete(void*, unsigned long)>
c00291a7:	83 c4 10             	add    esp,0x10
c00291aa:	83 c4 0c             	add    esp,0xc
c00291ad:	c3                   	ret    
