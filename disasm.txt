
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 6c f8 00 00       	call   c000f88c <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 a3 70 02 00       	call   c00270c8 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 24 7c 02 c0       	mov    ebx,0xc0027c24
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 30 7c 02 c0    	cmp    ebx,0xc0027c30
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 78 bf 02 c0       	mov    eax,0xc002bf78
c0000049:	3d 78 bf 02 c0       	cmp    eax,0xc002bf78
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 78 bf 02 c0       	push   0xc002bf78
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 78 bf 02 c0       	mov    eax,0xc002bf78
c0000075:	2d 78 bf 02 c0       	sub    eax,0xc002bf78
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 78 bf 02 c0       	push   0xc002bf78
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d a8 c5 02 c0 00 	cmp    BYTE PTR ds:0xc002c5a8,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 38 7c 02 c0       	mov    ebx,0xc0027c38
c00000bb:	81 eb 34 7c 02 c0    	sub    ebx,0xc0027c34
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 34 7c 02 c0       	mov    esi,0xc0027c34
c00000ca:	a1 ac c5 02 c0       	mov    eax,ds:0xc002c5ac
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 ac c5 02 c0       	mov    ds:0xc002c5ac,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 ac c5 02 c0       	mov    eax,ds:0xc002c5ac
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 78 bf 02 c0       	push   0xc002bf78
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 a8 c5 02 c0 01 	mov    BYTE PTR ds:0xc002c5a8,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 b0 c5 02 c0       	push   0xc002c5b0
c000012c:	68 78 bf 02 c0       	push   0xc002bf78
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <prepareTramp>:
c0000150:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000157:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c000015e:	50                   	push   eax
c000015f:	0f 20 d8             	mov    eax,cr3
c0000162:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000167:	58                   	pop    eax
c0000168:	c3                   	ret    

c0000169 <voodooXADD>:
c0000169:	55                   	push   ebp
c000016a:	89 e5                	mov    ebp,esp
c000016c:	60                   	pusha  
c000016d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000170:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0000173:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0000176:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c0000179:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000017c:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c000017f:	0f 02 ff             	lar    edi,di
c0000182:	c1 ef 0d             	shr    edi,0xd
c0000185:	66 81 e7 03 00       	and    di,0x3
c000018a:	75 09                	jne    c0000195 <voodooXADD.usermode>
c000018c:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c000018f:	81 c4 14 00 00 00    	add    esp,0x14

c0000195 <voodooXADD.usermode>:
c0000195:	89 35 30 02 00 c0    	mov    DWORD PTR ds:0xc0000230,esi
c000019b:	89 25 2c 02 00 c0    	mov    DWORD PTR ds:0xc000022c,esp
c00001a1:	60                   	pusha  
c00001a2:	b0 90                	mov    al,0x90
c00001a4:	b9 20 00 00 00       	mov    ecx,0x20
c00001a9:	bf 03 02 00 c0       	mov    edi,0xc0000203
c00001ae:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001b0:	61                   	popa   
c00001b1:	60                   	pusha  
c00001b2:	89 d6                	mov    esi,edx
c00001b4:	bf 03 02 00 c0       	mov    edi,0xc0000203
c00001b9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00001bb:	61                   	popa   
c00001bc:	60                   	pusha  
c00001bd:	89 d6                	mov    esi,edx
c00001bf:	bf 13 02 00 c0       	mov    edi,0xc0000213
c00001c4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00001c6:	61                   	popa   
c00001c7:	b1 90                	mov    cl,0x90
c00001c9:	85 db                	test   ebx,ebx
c00001cb:	74 06                	je     c00001d3 <voodooXADD.skipChange>
c00001cd:	8a 8b 02 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdfe]

c00001d3 <voodooXADD.skipChange>:
c00001d3:	88 8b 03 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdfd],cl
c00001d9:	80 ab 04 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdfc],0x3a
c00001e0:	88 8b 13 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffded],cl
c00001e6:	80 ab 14 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffdec],0xbe
c00001ed:	89 c4                	mov    esp,eax
c00001ef:	81 c4 10 00 00 00    	add    esp,0x10
c00001f5:	5f                   	pop    edi
c00001f6:	5e                   	pop    esi
c00001f7:	5d                   	pop    ebp
c00001f8:	5b                   	pop    ebx
c00001f9:	5b                   	pop    ebx
c00001fa:	5a                   	pop    edx
c00001fb:	59                   	pop    ecx
c00001fc:	58                   	pop    eax
c00001fd:	8b 25 30 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000230

c0000203 <voodooXADD.helper>:
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	90                   	nop
c0000217:	90                   	nop
c0000218:	90                   	nop
c0000219:	90                   	nop
c000021a:	90                   	nop
c000021b:	90                   	nop
c000021c:	90                   	nop
c000021d:	90                   	nop
c000021e:	90                   	nop
c000021f:	90                   	nop
c0000220:	90                   	nop
c0000221:	90                   	nop
c0000222:	90                   	nop
c0000223:	8b 25 2c 02 00 c0    	mov    esp,DWORD PTR ds:0xc000022c
c0000229:	61                   	popa   
c000022a:	c9                   	leave  
c000022b:	c3                   	ret    

c000022c <voodooXADD.oldStack>:
c000022c:	00 00                	add    BYTE PTR [eax],al
	...

c0000230 <voodooXADD.newStack>:
c0000230:	00 00                	add    BYTE PTR [eax],al
	...

c0000234 <doTPAUSE>:
c0000234:	fb                   	sti    
c0000235:	31 c0                	xor    eax,eax
c0000237:	31 d2                	xor    edx,edx
c0000239:	66 0f ae f0          	tpause eax
c000023d:	c3                   	ret    

c000023e <hasLegacyFPU>:
c000023e:	0f 20 c2             	mov    edx,cr0
c0000241:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000247:	0f 22 c2             	mov    cr0,edx
c000024a:	db e3                	fninit 
c000024c:	dd 3d 61 02 00 c0    	fnstsw WORD PTR ds:0xc0000261
c0000252:	31 c0                	xor    eax,eax
c0000254:	66 81 3d 61 02 00 c0 00 00 	cmp    WORD PTR ds:0xc0000261,0x0
c000025d:	75 01                	jne    c0000260 <hasLegacyFPU.nofpu>

c000025f <hasLegacyFPU.hasfpu>:
c000025f:	40                   	inc    eax

c0000260 <hasLegacyFPU.nofpu>:
c0000260:	c3                   	ret    

c0000261 <testword>:
c0000261:	aa                   	stos   BYTE PTR es:[edi],al
c0000262:	55                   	push   ebp

c0000263 <is486>:
c0000263:	0f 09                	wbinvd 
c0000265:	31 c0                	xor    eax,eax
c0000267:	40                   	inc    eax
c0000268:	c3                   	ret    
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	90                   	nop
c000026f:	90                   	nop
c0000270:	90                   	nop
c0000271:	90                   	nop
c0000272:	90                   	nop
c0000273:	90                   	nop
c0000274:	90                   	nop
c0000275:	90                   	nop
c0000276:	90                   	nop
c0000277:	90                   	nop
c0000278:	90                   	nop
c0000279:	90                   	nop
c000027a:	90                   	nop
c000027b:	90                   	nop
c000027c:	90                   	nop
c000027d:	90                   	nop
c000027e:	90                   	nop
c000027f:	90                   	nop
c0000280:	90                   	nop
c0000281:	90                   	nop
c0000282:	90                   	nop
c0000283:	90                   	nop
c0000284:	90                   	nop
c0000285:	90                   	nop
c0000286:	90                   	nop
c0000287:	90                   	nop
c0000288:	90                   	nop
c0000289:	90                   	nop
c000028a:	90                   	nop
c000028b:	90                   	nop
c000028c:	90                   	nop
c000028d:	90                   	nop
c000028e:	90                   	nop
c000028f:	90                   	nop
c0000290:	90                   	nop
c0000291:	90                   	nop
c0000292:	90                   	nop
c0000293:	90                   	nop
c0000294:	90                   	nop
c0000295:	90                   	nop
c0000296:	31 c0                	xor    eax,eax
c0000298:	c3                   	ret    

c0000299 <detectCPUID>:
c0000299:	9c                   	pushf  
c000029a:	9c                   	pushf  
c000029b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002a2:	9d                   	popf   
c00002a3:	9c                   	pushf  
c00002a4:	58                   	pop    eax
c00002a5:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002a8:	9d                   	popf   
c00002a9:	25 00 00 20 00       	and    eax,0x200000
c00002ae:	c3                   	ret    

c00002af <goToVM86>:
c00002af:	55                   	push   ebp
c00002b0:	89 e5                	mov    ebp,esp
c00002b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00002b5:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00002b8:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00002bb:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00002be:	25 ff ff 00 00       	and    eax,0xffff
c00002c3:	81 e3 ff ff 00 00    	and    ebx,0xffff
c00002c9:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00002cf:	81 e2 ff ff 00 00    	and    edx,0xffff
c00002d5:	52                   	push   edx
c00002d6:	51                   	push   ecx
c00002d7:	68 02 02 02 00       	push   0x20202
c00002dc:	53                   	push   ebx
c00002dd:	50                   	push   eax
c00002de:	cf                   	iret   

c00002df <goToUsermode>:
c00002df:	55                   	push   ebp
c00002e0:	89 e5                	mov    ebp,esp
c00002e2:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00002e5:	66 b8 23 00          	mov    ax,0x23
c00002e9:	66 8e d8             	mov    ds,ax
c00002ec:	66 8e c0             	mov    es,ax
c00002ef:	66 8e e0             	mov    fs,ax
c00002f2:	66 8e e8             	mov    gs,ax
c00002f5:	89 e0                	mov    eax,esp
c00002f7:	68 23 00 00 00       	push   0x23
c00002fc:	50                   	push   eax
c00002fd:	68 02 02 00 00       	push   0x202
c0000302:	68 1b 00 00 00       	push   0x1b
c0000307:	53                   	push   ebx
c0000308:	cf                   	iret   

c0000309 <switchToThreadASMFirstTime>:
c0000309:	9c                   	pushf  
c000030a:	fa                   	cli    
c000030b:	50                   	push   eax
c000030c:	53                   	push   ebx
c000030d:	51                   	push   ecx
c000030e:	52                   	push   edx
c000030f:	56                   	push   esi
c0000310:	57                   	push   edi
c0000311:	55                   	push   ebp
c0000312:	e9 11 00 00 00       	jmp    c0000328 <commonThreadSwitch>

c0000317 <switchToThreadASM>:
c0000317:	9c                   	pushf  
c0000318:	50                   	push   eax
c0000319:	53                   	push   ebx
c000031a:	51                   	push   ecx
c000031b:	52                   	push   edx
c000031c:	56                   	push   esi
c000031d:	57                   	push   edi
c000031e:	55                   	push   ebp
c000031f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000325:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000328 <commonThreadSwitch>:
c0000328:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000032c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000332:	8b 06                	mov    eax,DWORD PTR [esi]
c0000334:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000337:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000033a:	0f 20 d9             	mov    ecx,cr3
c000033d:	39 c8                	cmp    eax,ecx
c000033f:	74 03                	je     c0000344 <commonThreadSwitch.doneVAS>
c0000341:	0f 22 d8             	mov    cr3,eax

c0000344 <commonThreadSwitch.doneVAS>:
c0000344:	85 d2                	test   edx,edx
c0000346:	75 11                	jne    c0000359 <commonThreadSwitch.firstTime>
c0000348:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000034b:	e8 30 c6 01 00       	call   c001c980 <changeTSS>
c0000350:	5d                   	pop    ebp
c0000351:	5f                   	pop    edi
c0000352:	5e                   	pop    esi
c0000353:	5a                   	pop    edx
c0000354:	59                   	pop    ecx
c0000355:	5b                   	pop    ebx
c0000356:	58                   	pop    eax
c0000357:	9d                   	popf   
c0000358:	c3                   	ret    

c0000359 <commonThreadSwitch.firstTime>:
c0000359:	fa                   	cli    
c000035a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000035d:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c0000362:	60                   	pusha  
c0000363:	e8 ef 21 01 00       	call   c0012557 <mapVASFirstTime>
c0000368:	61                   	popa   
c0000369:	89 c4                	mov    esp,eax
c000036b:	56                   	push   esi
c000036c:	52                   	push   edx
c000036d:	e8 0e c6 01 00       	call   c001c980 <changeTSS>
c0000372:	5a                   	pop    edx
c0000373:	5e                   	pop    esi
c0000374:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c000037b:	5d                   	pop    ebp
c000037c:	5f                   	pop    edi
c000037d:	5e                   	pop    esi
c000037e:	59                   	pop    ecx
c000037f:	59                   	pop    ecx
c0000380:	5b                   	pop    ebx
c0000381:	58                   	pop    eax
c0000382:	81 c4 04 00 00 00    	add    esp,0x4
c0000388:	6a 02                	push   0x2
c000038a:	9d                   	popf   
c000038b:	52                   	push   edx
c000038c:	e8 5c ca 01 00       	call   c001cded <taskStartupFunction>
c0000391:	5a                   	pop    edx
c0000392:	50                   	push   eax
c0000393:	ff d2                	call   edx
c0000395:	e8 0a d0 01 00       	call   c001d3a4 <taskReturned>
c000039a:	e9 fb ff ff ff       	jmp    c000039a <commonThreadSwitch.firstTime+0x41>

c000039f <asmQuickAcquireLock>:
c000039f:	55                   	push   ebp
c00003a0:	89 e5                	mov    ebp,esp
c00003a2:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003a5 <asmQuickAcquireLock.retry>:
c00003a5:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003aa:	72 02                	jb     c00003ae <asmQuickAcquireLock.spin_with_pause>
c00003ac:	fa                   	cli    
c00003ad:	c3                   	ret    

c00003ae <asmQuickAcquireLock.spin_with_pause>:
c00003ae:	f3 90                	pause  
c00003b0:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003b6:	75 f6                	jne    c00003ae <asmQuickAcquireLock.spin_with_pause>
c00003b8:	e9 e8 ff ff ff       	jmp    c00003a5 <asmQuickAcquireLock.retry>

c00003bd <asmQuickReleaseLock>:
c00003bd:	55                   	push   ebp
c00003be:	89 e5                	mov    ebp,esp
c00003c0:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00003c7:	5d                   	pop    ebp
c00003c8:	c3                   	ret    

c00003c9 <asmAcquireLock>:
c00003c9:	55                   	push   ebp
c00003ca:	89 e5                	mov    ebp,esp
c00003cc:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003cf <asmAcquireLock.retry>:
c00003cf:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003d4:	72 05                	jb     c00003db <asmAcquireLock.spin_with_pause>
c00003d6:	9c                   	pushf  
c00003d7:	58                   	pop    eax
c00003d8:	fa                   	cli    
c00003d9:	5d                   	pop    ebp
c00003da:	c3                   	ret    

c00003db <asmAcquireLock.spin_with_pause>:
c00003db:	f3 90                	pause  
c00003dd:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003e3:	75 f6                	jne    c00003db <asmAcquireLock.spin_with_pause>
c00003e5:	e9 e5 ff ff ff       	jmp    c00003cf <asmAcquireLock.retry>

c00003ea <asmReleaseLock>:
c00003ea:	55                   	push   ebp
c00003eb:	89 e5                	mov    ebp,esp
c00003ed:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00003f0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00003f3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00003f9:	52                   	push   edx
c00003fa:	9d                   	popf   
c00003fb:	5d                   	pop    ebp
c00003fc:	c3                   	ret    

c00003fd <loadGDT>:
c00003fd:	0f 01 15 f0 c9 02 c0 	lgdtd  ds:0xc002c9f0
c0000404:	66 b8 10 00          	mov    ax,0x10
c0000408:	66 8e d8             	mov    ds,ax
c000040b:	66 8e c0             	mov    es,ax
c000040e:	66 8e e0             	mov    fs,ax
c0000411:	66 8e e8             	mov    gs,ax
c0000414:	66 8e d0             	mov    ss,ax
c0000417:	e9 00 00 00 00       	jmp    c000041c <flush2>

c000041c <flush2>:
c000041c:	c3                   	ret    

c000041d <isr0>:
c000041d:	fa                   	cli    
c000041e:	68 00 00 00 00       	push   0x0
c0000423:	68 00 00 00 00       	push   0x0
c0000428:	e9 44 01 00 00       	jmp    c0000571 <int_common_stub>

c000042d <isr1>:
c000042d:	fa                   	cli    
c000042e:	6a 00                	push   0x0
c0000430:	6a 01                	push   0x1
c0000432:	e9 3a 01 00 00       	jmp    c0000571 <int_common_stub>

c0000437 <isr2>:
c0000437:	fa                   	cli    
c0000438:	6a 00                	push   0x0
c000043a:	6a 02                	push   0x2
c000043c:	e9 30 01 00 00       	jmp    c0000571 <int_common_stub>

c0000441 <isr3>:
c0000441:	fa                   	cli    
c0000442:	6a 00                	push   0x0
c0000444:	6a 03                	push   0x3
c0000446:	e9 26 01 00 00       	jmp    c0000571 <int_common_stub>

c000044b <isr4>:
c000044b:	fa                   	cli    
c000044c:	6a 00                	push   0x0
c000044e:	6a 04                	push   0x4
c0000450:	e9 1c 01 00 00       	jmp    c0000571 <int_common_stub>

c0000455 <isr5>:
c0000455:	fa                   	cli    
c0000456:	6a 00                	push   0x0
c0000458:	6a 05                	push   0x5
c000045a:	e9 12 01 00 00       	jmp    c0000571 <int_common_stub>

c000045f <isr6>:
c000045f:	fa                   	cli    
c0000460:	6a 00                	push   0x0
c0000462:	6a 06                	push   0x6
c0000464:	e9 08 01 00 00       	jmp    c0000571 <int_common_stub>

c0000469 <isr7>:
c0000469:	fa                   	cli    
c000046a:	6a 00                	push   0x0
c000046c:	6a 07                	push   0x7
c000046e:	e9 fe 00 00 00       	jmp    c0000571 <int_common_stub>

c0000473 <isr8>:
c0000473:	fa                   	cli    
c0000474:	6a 08                	push   0x8
c0000476:	e9 f6 00 00 00       	jmp    c0000571 <int_common_stub>

c000047b <isr9>:
c000047b:	fa                   	cli    
c000047c:	6a 00                	push   0x0
c000047e:	6a 09                	push   0x9
c0000480:	e9 ec 00 00 00       	jmp    c0000571 <int_common_stub>

c0000485 <isr10>:
c0000485:	fa                   	cli    
c0000486:	6a 0a                	push   0xa
c0000488:	e9 e4 00 00 00       	jmp    c0000571 <int_common_stub>

c000048d <isr11>:
c000048d:	fa                   	cli    
c000048e:	6a 0b                	push   0xb
c0000490:	e9 dc 00 00 00       	jmp    c0000571 <int_common_stub>

c0000495 <isr12>:
c0000495:	fa                   	cli    
c0000496:	6a 0c                	push   0xc
c0000498:	e9 d4 00 00 00       	jmp    c0000571 <int_common_stub>

c000049d <isr13>:
c000049d:	fa                   	cli    
c000049e:	6a 0d                	push   0xd
c00004a0:	e9 cc 00 00 00       	jmp    c0000571 <int_common_stub>

c00004a5 <isr14>:
c00004a5:	fa                   	cli    
c00004a6:	6a 0e                	push   0xe
c00004a8:	e9 c4 00 00 00       	jmp    c0000571 <int_common_stub>

c00004ad <isr15>:
c00004ad:	fa                   	cli    
c00004ae:	6a 00                	push   0x0
c00004b0:	6a 0f                	push   0xf
c00004b2:	e9 ba 00 00 00       	jmp    c0000571 <int_common_stub>

c00004b7 <isr16>:
c00004b7:	fa                   	cli    
c00004b8:	6a 00                	push   0x0
c00004ba:	6a 10                	push   0x10
c00004bc:	e9 b0 00 00 00       	jmp    c0000571 <int_common_stub>

c00004c1 <isr17>:
c00004c1:	fa                   	cli    
c00004c2:	6a 00                	push   0x0
c00004c4:	6a 11                	push   0x11
c00004c6:	e9 a6 00 00 00       	jmp    c0000571 <int_common_stub>

c00004cb <isr18>:
c00004cb:	fa                   	cli    
c00004cc:	6a 00                	push   0x0
c00004ce:	6a 12                	push   0x12
c00004d0:	e9 9c 00 00 00       	jmp    c0000571 <int_common_stub>

c00004d5 <irq3>:
c00004d5:	fa                   	cli    
c00004d6:	6a 00                	push   0x0
c00004d8:	6a 23                	push   0x23
c00004da:	e9 92 00 00 00       	jmp    c0000571 <int_common_stub>

c00004df <irq4>:
c00004df:	fa                   	cli    
c00004e0:	6a 00                	push   0x0
c00004e2:	6a 24                	push   0x24
c00004e4:	e9 88 00 00 00       	jmp    c0000571 <int_common_stub>

c00004e9 <irq5>:
c00004e9:	fa                   	cli    
c00004ea:	6a 00                	push   0x0
c00004ec:	6a 25                	push   0x25
c00004ee:	e9 7e 00 00 00       	jmp    c0000571 <int_common_stub>

c00004f3 <irq6>:
c00004f3:	fa                   	cli    
c00004f4:	6a 00                	push   0x0
c00004f6:	6a 26                	push   0x26
c00004f8:	e9 74 00 00 00       	jmp    c0000571 <int_common_stub>

c00004fd <irq7>:
c00004fd:	fa                   	cli    
c00004fe:	6a 00                	push   0x0
c0000500:	6a 27                	push   0x27
c0000502:	e9 6a 00 00 00       	jmp    c0000571 <int_common_stub>

c0000507 <irq8>:
c0000507:	fa                   	cli    
c0000508:	6a 00                	push   0x0
c000050a:	6a 28                	push   0x28
c000050c:	e9 60 00 00 00       	jmp    c0000571 <int_common_stub>

c0000511 <irq9>:
c0000511:	fa                   	cli    
c0000512:	6a 00                	push   0x0
c0000514:	6a 29                	push   0x29
c0000516:	e9 56 00 00 00       	jmp    c0000571 <int_common_stub>

c000051b <irq10>:
c000051b:	fa                   	cli    
c000051c:	6a 00                	push   0x0
c000051e:	6a 2a                	push   0x2a
c0000520:	e9 4c 00 00 00       	jmp    c0000571 <int_common_stub>

c0000525 <irq11>:
c0000525:	fa                   	cli    
c0000526:	6a 00                	push   0x0
c0000528:	6a 2b                	push   0x2b
c000052a:	e9 42 00 00 00       	jmp    c0000571 <int_common_stub>

c000052f <irq12>:
c000052f:	fa                   	cli    
c0000530:	6a 00                	push   0x0
c0000532:	6a 2c                	push   0x2c
c0000534:	e9 38 00 00 00       	jmp    c0000571 <int_common_stub>

c0000539 <irq13>:
c0000539:	fa                   	cli    
c000053a:	6a 00                	push   0x0
c000053c:	6a 2d                	push   0x2d
c000053e:	e9 2e 00 00 00       	jmp    c0000571 <int_common_stub>

c0000543 <irq14>:
c0000543:	fa                   	cli    
c0000544:	6a 00                	push   0x0
c0000546:	6a 2e                	push   0x2e
c0000548:	e9 24 00 00 00       	jmp    c0000571 <int_common_stub>

c000054d <irq15>:
c000054d:	fa                   	cli    
c000054e:	6a 00                	push   0x0
c0000550:	6a 2f                	push   0x2f
c0000552:	e9 1a 00 00 00       	jmp    c0000571 <int_common_stub>

c0000557 <irq1>:
c0000557:	fa                   	cli    
c0000558:	6a 00                	push   0x0
c000055a:	6a 21                	push   0x21
c000055c:	eb 13                	jmp    c0000571 <int_common_stub>

c000055e <irq2>:
c000055e:	fa                   	cli    
c000055f:	6a 00                	push   0x0
c0000561:	6a 22                	push   0x22
c0000563:	eb 0c                	jmp    c0000571 <int_common_stub>

c0000565 <isr96>:
c0000565:	6a 00                	push   0x0
c0000567:	6a 60                	push   0x60
c0000569:	fb                   	sti    
c000056a:	eb 05                	jmp    c0000571 <int_common_stub>

c000056c <irq0>:
c000056c:	fa                   	cli    
c000056d:	6a 00                	push   0x0
c000056f:	6a 20                	push   0x20

c0000571 <int_common_stub>:
c0000571:	60                   	pusha  
c0000572:	1e                   	push   ds
c0000573:	06                   	push   es
c0000574:	0f a0                	push   fs
c0000576:	0f a8                	push   gs
c0000578:	66 b8 10 00          	mov    ax,0x10
c000057c:	66 8e d8             	mov    ds,ax
c000057f:	66 8e c0             	mov    es,ax
c0000582:	66 8e e0             	mov    fs,ax
c0000585:	66 8e e8             	mov    gs,ax
c0000588:	54                   	push   esp
c0000589:	e8 81 3e 01 00       	call   c001440f <int_handler>
c000058e:	81 c4 04 00 00 00    	add    esp,0x4
c0000594:	0f a9                	pop    gs
c0000596:	0f a1                	pop    fs
c0000598:	07                   	pop    es
c0000599:	1f                   	pop    ds
c000059a:	61                   	popa   
c000059b:	81 c4 08 00 00 00    	add    esp,0x8
c00005a1:	cf                   	iret   

c00005a2 <irq16>:
c00005a2:	fa                   	cli    
c00005a3:	6a 00                	push   0x0
c00005a5:	6a 30                	push   0x30
c00005a7:	e9 c5 ff ff ff       	jmp    c0000571 <int_common_stub>

c00005ac <irq17>:
c00005ac:	fa                   	cli    
c00005ad:	6a 00                	push   0x0
c00005af:	6a 31                	push   0x31
c00005b1:	e9 bb ff ff ff       	jmp    c0000571 <int_common_stub>

c00005b6 <irq18>:
c00005b6:	fa                   	cli    
c00005b7:	6a 00                	push   0x0
c00005b9:	6a 32                	push   0x32
c00005bb:	e9 b1 ff ff ff       	jmp    c0000571 <int_common_stub>

c00005c0 <irq19>:
c00005c0:	fa                   	cli    
c00005c1:	6a 00                	push   0x0
c00005c3:	6a 33                	push   0x33
c00005c5:	e9 a7 ff ff ff       	jmp    c0000571 <int_common_stub>

c00005ca <irq20>:
c00005ca:	fa                   	cli    
c00005cb:	6a 00                	push   0x0
c00005cd:	6a 34                	push   0x34
c00005cf:	e9 9d ff ff ff       	jmp    c0000571 <int_common_stub>

c00005d4 <irq21>:
c00005d4:	fa                   	cli    
c00005d5:	6a 00                	push   0x0
c00005d7:	6a 35                	push   0x35
c00005d9:	e9 93 ff ff ff       	jmp    c0000571 <int_common_stub>

c00005de <irq22>:
c00005de:	fa                   	cli    
c00005df:	6a 00                	push   0x0
c00005e1:	6a 36                	push   0x36
c00005e3:	e9 89 ff ff ff       	jmp    c0000571 <int_common_stub>

c00005e8 <irq23>:
c00005e8:	fa                   	cli    
c00005e9:	6a 00                	push   0x0
c00005eb:	6a 37                	push   0x37
c00005ed:	e9 7f ff ff ff       	jmp    c0000571 <int_common_stub>

c00005f2 <memcmp>:
c00005f2:	56                   	push   esi
c00005f3:	53                   	push   ebx
c00005f4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00005f8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00005fc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000600:	01 d6                	add    esi,edx
c0000602:	39 f2                	cmp    edx,esi
c0000604:	74 0e                	je     c0000614 <memcmp+0x22>
c0000606:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000609:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000060c:	38 c8                	cmp    al,cl
c000060e:	75 08                	jne    c0000618 <memcmp+0x26>
c0000610:	42                   	inc    edx
c0000611:	43                   	inc    ebx
c0000612:	eb ee                	jmp    c0000602 <memcmp+0x10>
c0000614:	31 c0                	xor    eax,eax
c0000616:	eb 02                	jmp    c000061a <memcmp+0x28>
c0000618:	29 c8                	sub    eax,ecx
c000061a:	5b                   	pop    ebx
c000061b:	5e                   	pop    esi
c000061c:	c3                   	ret    

c000061d <memmove>:
c000061d:	56                   	push   esi
c000061e:	53                   	push   ebx
c000061f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000623:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000627:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000062b:	39 c8                	cmp    eax,ecx
c000062d:	73 12                	jae    c0000641 <memmove+0x24>
c000062f:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000632:	89 c3                	mov    ebx,eax
c0000634:	39 f1                	cmp    ecx,esi
c0000636:	74 1a                	je     c0000652 <memmove+0x35>
c0000638:	8a 11                	mov    dl,BYTE PTR [ecx]
c000063a:	43                   	inc    ebx
c000063b:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c000063e:	41                   	inc    ecx
c000063f:	eb f3                	jmp    c0000634 <memmove+0x17>
c0000641:	76 0f                	jbe    c0000652 <memmove+0x35>
c0000643:	85 d2                	test   edx,edx
c0000645:	74 0b                	je     c0000652 <memmove+0x35>
c0000647:	8a 5c 11 ff          	mov    bl,BYTE PTR [ecx+edx*1-0x1]
c000064b:	88 5c 10 ff          	mov    BYTE PTR [eax+edx*1-0x1],bl
c000064f:	4a                   	dec    edx
c0000650:	eb f1                	jmp    c0000643 <memmove+0x26>
c0000652:	5b                   	pop    ebx
c0000653:	5e                   	pop    esi
c0000654:	c3                   	ret    

c0000655 <memcpy>:
c0000655:	57                   	push   edi
c0000656:	56                   	push   esi
c0000657:	53                   	push   ebx
c0000658:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000065c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000660:	89 da                	mov    edx,ebx
c0000662:	89 d9                	mov    ecx,ebx
c0000664:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000668:	83 e2 fc             	and    edx,0xfffffffc
c000066b:	c1 e9 02             	shr    ecx,0x2
c000066e:	89 c7                	mov    edi,eax
c0000670:	fc                   	cld    
c0000671:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0000673:	8d 0c 16             	lea    ecx,[esi+edx*1]
c0000676:	01 c2                	add    edx,eax
c0000678:	01 de                	add    esi,ebx
c000067a:	39 f1                	cmp    ecx,esi
c000067c:	74 09                	je     c0000687 <memcpy+0x32>
c000067e:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000680:	42                   	inc    edx
c0000681:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000684:	41                   	inc    ecx
c0000685:	eb f3                	jmp    c000067a <memcpy+0x25>
c0000687:	5b                   	pop    ebx
c0000688:	5e                   	pop    esi
c0000689:	5f                   	pop    edi
c000068a:	c3                   	ret    

c000068b <memset>:
c000068b:	53                   	push   ebx
c000068c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000690:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000694:	89 c2                	mov    edx,eax
c0000696:	01 c1                	add    ecx,eax
c0000698:	39 ca                	cmp    edx,ecx
c000069a:	74 0a                	je     c00006a6 <memset+0x1b>
c000069c:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c00006a0:	42                   	inc    edx
c00006a1:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00006a4:	eb f2                	jmp    c0000698 <memset+0xd>
c00006a6:	5b                   	pop    ebx
c00006a7:	c3                   	ret    

c00006a8 <strlen>:
c00006a8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00006ac:	31 c0                	xor    eax,eax
c00006ae:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006b2:	74 03                	je     c00006b7 <strlen+0xf>
c00006b4:	40                   	inc    eax
c00006b5:	eb f7                	jmp    c00006ae <strlen+0x6>
c00006b7:	c3                   	ret    

c00006b8 <strpbrk>:
c00006b8:	53                   	push   ebx
c00006b9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006bd:	8a 08                	mov    cl,BYTE PTR [eax]
c00006bf:	84 c9                	test   cl,cl
c00006c1:	74 14                	je     c00006d7 <strpbrk+0x1f>
c00006c3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00006c7:	8a 1a                	mov    bl,BYTE PTR [edx]
c00006c9:	84 db                	test   bl,bl
c00006cb:	74 07                	je     c00006d4 <strpbrk+0x1c>
c00006cd:	38 cb                	cmp    bl,cl
c00006cf:	74 08                	je     c00006d9 <strpbrk+0x21>
c00006d1:	42                   	inc    edx
c00006d2:	eb f3                	jmp    c00006c7 <strpbrk+0xf>
c00006d4:	40                   	inc    eax
c00006d5:	eb e6                	jmp    c00006bd <strpbrk+0x5>
c00006d7:	31 c0                	xor    eax,eax
c00006d9:	5b                   	pop    ebx
c00006da:	c3                   	ret    

c00006db <strtok>:
c00006db:	56                   	push   esi
c00006dc:	53                   	push   ebx
c00006dd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00006e1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006e5:	85 db                	test   ebx,ebx
c00006e7:	75 0e                	jne    c00006f7 <strtok+0x1c>
c00006e9:	8b 1d c8 c5 02 c0    	mov    ebx,DWORD PTR ds:0xc002c5c8
c00006ef:	85 db                	test   ebx,ebx
c00006f1:	75 04                	jne    c00006f7 <strtok+0x1c>
c00006f3:	31 db                	xor    ebx,ebx
c00006f5:	eb 2e                	jmp    c0000725 <strtok+0x4a>
c00006f7:	56                   	push   esi
c00006f8:	53                   	push   ebx
c00006f9:	e8 ba ff ff ff       	call   c00006b8 <strpbrk>
c00006fe:	5a                   	pop    edx
c00006ff:	a3 c8 c5 02 c0       	mov    ds:0xc002c5c8,eax
c0000704:	59                   	pop    ecx
c0000705:	a1 c8 c5 02 c0       	mov    eax,ds:0xc002c5c8
c000070a:	39 d8                	cmp    eax,ebx
c000070c:	75 07                	jne    c0000715 <strtok+0x3a>
c000070e:	43                   	inc    ebx
c000070f:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000713:	eb e2                	jmp    c00006f7 <strtok+0x1c>
c0000715:	85 c0                	test   eax,eax
c0000717:	74 da                	je     c00006f3 <strtok+0x18>
c0000719:	8d 50 01             	lea    edx,[eax+0x1]
c000071c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000071f:	89 15 c8 c5 02 c0    	mov    DWORD PTR ds:0xc002c5c8,edx
c0000725:	89 d8                	mov    eax,ebx
c0000727:	5b                   	pop    ebx
c0000728:	5e                   	pop    esi
c0000729:	c3                   	ret    

c000072a <strcpy>:
c000072a:	53                   	push   ebx
c000072b:	31 d2                	xor    edx,edx
c000072d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000731:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000735:	8d 1c 10             	lea    ebx,[eax+edx*1]
c0000738:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c000073b:	84 c9                	test   cl,cl
c000073d:	74 06                	je     c0000745 <strcpy+0x1b>
c000073f:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0000742:	42                   	inc    edx
c0000743:	eb ec                	jmp    c0000731 <strcpy+0x7>
c0000745:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000748:	5b                   	pop    ebx
c0000749:	c3                   	ret    

c000074a <strncpy>:
c000074a:	56                   	push   esi
c000074b:	53                   	push   ebx
c000074c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000750:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000754:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0000758:	89 c3                	mov    ebx,eax
c000075a:	85 c9                	test   ecx,ecx
c000075c:	74 1a                	je     c0000778 <strncpy+0x2e>
c000075e:	46                   	inc    esi
c000075f:	43                   	inc    ebx
c0000760:	8a 56 ff             	mov    dl,BYTE PTR [esi-0x1]
c0000763:	49                   	dec    ecx
c0000764:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c0000767:	84 d2                	test   dl,dl
c0000769:	75 ef                	jne    c000075a <strncpy+0x10>
c000076b:	31 d2                	xor    edx,edx
c000076d:	39 d1                	cmp    ecx,edx
c000076f:	74 07                	je     c0000778 <strncpy+0x2e>
c0000771:	c6 04 13 00          	mov    BYTE PTR [ebx+edx*1],0x0
c0000775:	42                   	inc    edx
c0000776:	eb f5                	jmp    c000076d <strncpy+0x23>
c0000778:	5b                   	pop    ebx
c0000779:	5e                   	pop    esi
c000077a:	c3                   	ret    

c000077b <strcmp>:
c000077b:	31 c9                	xor    ecx,ecx
c000077d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000781:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0000785:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0000789:	0f b6 14 0a          	movzx  edx,BYTE PTR [edx+ecx*1]
c000078d:	38 d0                	cmp    al,dl
c000078f:	75 08                	jne    c0000799 <strcmp+0x1e>
c0000791:	41                   	inc    ecx
c0000792:	84 c0                	test   al,al
c0000794:	75 e7                	jne    c000077d <strcmp+0x2>
c0000796:	31 c0                	xor    eax,eax
c0000798:	c3                   	ret    
c0000799:	29 d0                	sub    eax,edx
c000079b:	c3                   	ret    

c000079c <strchr>:
c000079c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007a0:	8a 10                	mov    dl,BYTE PTR [eax]
c00007a2:	84 d2                	test   dl,dl
c00007a4:	74 09                	je     c00007af <strchr+0x13>
c00007a6:	3a 54 24 08          	cmp    dl,BYTE PTR [esp+0x8]
c00007aa:	74 05                	je     c00007b1 <strchr+0x15>
c00007ac:	40                   	inc    eax
c00007ad:	eb f1                	jmp    c00007a0 <strchr+0x4>
c00007af:	31 c0                	xor    eax,eax
c00007b1:	c3                   	ret    

c00007b2 <strncmp>:
c00007b2:	56                   	push   esi
c00007b3:	53                   	push   ebx
c00007b4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00007b8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007bc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007c0:	01 d6                	add    esi,edx
c00007c2:	39 f2                	cmp    edx,esi
c00007c4:	74 12                	je     c00007d8 <strncmp+0x26>
c00007c6:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c00007c9:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00007cc:	38 c8                	cmp    al,cl
c00007ce:	75 0c                	jne    c00007dc <strncmp+0x2a>
c00007d0:	42                   	inc    edx
c00007d1:	84 c0                	test   al,al
c00007d3:	74 03                	je     c00007d8 <strncmp+0x26>
c00007d5:	43                   	inc    ebx
c00007d6:	eb ea                	jmp    c00007c2 <strncmp+0x10>
c00007d8:	31 c0                	xor    eax,eax
c00007da:	eb 02                	jmp    c00007de <strncmp+0x2c>
c00007dc:	29 c8                	sub    eax,ecx
c00007de:	5b                   	pop    ebx
c00007df:	5e                   	pop    esi
c00007e0:	c3                   	ret    

c00007e1 <strcat>:
c00007e1:	53                   	push   ebx
c00007e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007e6:	89 c1                	mov    ecx,eax
c00007e8:	8d 51 01             	lea    edx,[ecx+0x1]
c00007eb:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007ef:	74 04                	je     c00007f5 <strcat+0x14>
c00007f1:	89 d1                	mov    ecx,edx
c00007f3:	eb f3                	jmp    c00007e8 <strcat+0x7>
c00007f5:	31 d2                	xor    edx,edx
c00007f7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007fb:	8a 1c 13             	mov    bl,BYTE PTR [ebx+edx*1]
c00007fe:	88 1c 11             	mov    BYTE PTR [ecx+edx*1],bl
c0000801:	42                   	inc    edx
c0000802:	84 db                	test   bl,bl
c0000804:	75 f1                	jne    c00007f7 <strcat+0x16>
c0000806:	5b                   	pop    ebx
c0000807:	c3                   	ret    

c0000808 <strncat>:
c0000808:	56                   	push   esi
c0000809:	53                   	push   ebx
c000080a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000080e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000812:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000816:	89 c2                	mov    edx,eax
c0000818:	85 db                	test   ebx,ebx
c000081a:	74 23                	je     c000083f <strncat+0x37>
c000081c:	8d 72 01             	lea    esi,[edx+0x1]
c000081f:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
c0000823:	74 04                	je     c0000829 <strncat+0x21>
c0000825:	89 f2                	mov    edx,esi
c0000827:	eb f3                	jmp    c000081c <strncat+0x14>
c0000829:	8d 34 19             	lea    esi,[ecx+ebx*1]
c000082c:	41                   	inc    ecx
c000082d:	42                   	inc    edx
c000082e:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000831:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000834:	84 db                	test   bl,bl
c0000836:	74 07                	je     c000083f <strncat+0x37>
c0000838:	39 f1                	cmp    ecx,esi
c000083a:	75 f0                	jne    c000082c <strncat+0x24>
c000083c:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000083f:	5b                   	pop    ebx
c0000840:	5e                   	pop    esi
c0000841:	c3                   	ret    

c0000842 <strstr>:
c0000842:	57                   	push   edi
c0000843:	56                   	push   esi
c0000844:	53                   	push   ebx
c0000845:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000849:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000084d:	57                   	push   edi
c000084e:	e8 55 fe ff ff       	call   c00006a8 <strlen>
c0000853:	59                   	pop    ecx
c0000854:	89 c6                	mov    esi,eax
c0000856:	85 c0                	test   eax,eax
c0000858:	74 1f                	je     c0000879 <strstr+0x37>
c000085a:	53                   	push   ebx
c000085b:	e8 48 fe ff ff       	call   c00006a8 <strlen>
c0000860:	5a                   	pop    edx
c0000861:	39 f0                	cmp    eax,esi
c0000863:	72 12                	jb     c0000877 <strstr+0x35>
c0000865:	56                   	push   esi
c0000866:	57                   	push   edi
c0000867:	53                   	push   ebx
c0000868:	e8 85 fd ff ff       	call   c00005f2 <memcmp>
c000086d:	83 c4 0c             	add    esp,0xc
c0000870:	85 c0                	test   eax,eax
c0000872:	74 05                	je     c0000879 <strstr+0x37>
c0000874:	43                   	inc    ebx
c0000875:	eb e3                	jmp    c000085a <strstr+0x18>
c0000877:	31 db                	xor    ebx,ebx
c0000879:	89 d8                	mov    eax,ebx
c000087b:	5b                   	pop    ebx
c000087c:	5e                   	pop    esi
c000087d:	5f                   	pop    edi
c000087e:	c3                   	ret    

c000087f <toupper>:
c000087f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000883:	0f b6 d0             	movzx  edx,al
c0000886:	f6 82 40 7c 02 c0 02 	test   BYTE PTR [edx-0x3ffd83c0],0x2
c000088d:	74 03                	je     c0000892 <toupper+0x13>
c000088f:	83 e8 20             	sub    eax,0x20
c0000892:	c3                   	ret    

c0000893 <tolower>:
c0000893:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000897:	0f b6 d0             	movzx  edx,al
c000089a:	f6 82 40 7c 02 c0 01 	test   BYTE PTR [edx-0x3ffd83c0],0x1
c00008a1:	74 03                	je     c00008a6 <tolower+0x13>
c00008a3:	83 c0 20             	add    eax,0x20
c00008a6:	c3                   	ret    

c00008a7 <simple_strtoul>:
c00008a7:	55                   	push   ebp
c00008a8:	57                   	push   edi
c00008a9:	56                   	push   esi
c00008aa:	53                   	push   ebx
c00008ab:	83 ec 08             	sub    esp,0x8
c00008ae:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008b2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008b6:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00008b9:	f6 82 40 7c 02 c0 08 	test   BYTE PTR [edx-0x3ffd83c0],0x8
c00008c0:	74 03                	je     c00008c5 <simple_strtoul+0x1e>
c00008c2:	41                   	inc    ecx
c00008c3:	eb f1                	jmp    c00008b6 <simple_strtoul+0xf>
c00008c5:	80 fa 09             	cmp    dl,0x9
c00008c8:	74 f8                	je     c00008c2 <simple_strtoul+0x1b>
c00008ca:	80 fa 2d             	cmp    dl,0x2d
c00008cd:	75 0b                	jne    c00008da <simple_strtoul+0x33>
c00008cf:	41                   	inc    ecx
c00008d0:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00008d8:	eb 0e                	jmp    c00008e8 <simple_strtoul+0x41>
c00008da:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00008e2:	80 fa 2b             	cmp    dl,0x2b
c00008e5:	75 01                	jne    c00008e8 <simple_strtoul+0x41>
c00008e7:	41                   	inc    ecx
c00008e8:	85 f6                	test   esi,esi
c00008ea:	75 22                	jne    c000090e <simple_strtoul+0x67>
c00008ec:	be 0a 00 00 00       	mov    esi,0xa
c00008f1:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c00008f4:	75 5a                	jne    c0000950 <simple_strtoul+0xa9>
c00008f6:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c00008fa:	50                   	push   eax
c00008fb:	e8 93 ff ff ff       	call   c0000893 <tolower>
c0000900:	5a                   	pop    edx
c0000901:	83 f8 78             	cmp    eax,0x78
c0000904:	74 03                	je     c0000909 <simple_strtoul+0x62>
c0000906:	41                   	inc    ecx
c0000907:	eb 16                	jmp    c000091f <simple_strtoul+0x78>
c0000909:	83 c1 02             	add    ecx,0x2
c000090c:	eb 22                	jmp    c0000930 <simple_strtoul+0x89>
c000090e:	8d 46 fe             	lea    eax,[esi-0x2]
c0000911:	83 f8 22             	cmp    eax,0x22
c0000914:	0f 87 b7 00 00 00    	ja     c00009d1 <simple_strtoul+0x12a>
c000091a:	83 fe 08             	cmp    esi,0x8
c000091d:	75 0c                	jne    c000092b <simple_strtoul+0x84>
c000091f:	be 08 00 00 00       	mov    esi,0x8
c0000924:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000927:	75 27                	jne    c0000950 <simple_strtoul+0xa9>
c0000929:	eb 1f                	jmp    c000094a <simple_strtoul+0xa3>
c000092b:	83 fe 10             	cmp    esi,0x10
c000092e:	75 20                	jne    c0000950 <simple_strtoul+0xa9>
c0000930:	be 10 00 00 00       	mov    esi,0x10
c0000935:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000938:	75 16                	jne    c0000950 <simple_strtoul+0xa9>
c000093a:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c000093e:	50                   	push   eax
c000093f:	e8 4f ff ff ff       	call   c0000893 <tolower>
c0000944:	5d                   	pop    ebp
c0000945:	83 f8 78             	cmp    eax,0x78
c0000948:	74 03                	je     c000094d <simple_strtoul+0xa6>
c000094a:	41                   	inc    ecx
c000094b:	eb 03                	jmp    c0000950 <simple_strtoul+0xa9>
c000094d:	83 c1 02             	add    ecx,0x2
c0000950:	31 ed                	xor    ebp,ebp
c0000952:	31 db                	xor    ebx,ebx
c0000954:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000095b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000095d:	84 d2                	test   dl,dl
c000095f:	74 27                	je     c0000988 <simple_strtoul+0xe1>
c0000961:	0f b6 fa             	movzx  edi,dl
c0000964:	f6 87 40 7c 02 c0 04 	test   BYTE PTR [edi-0x3ffd83c0],0x4
c000096b:	74 05                	je     c0000972 <simple_strtoul+0xcb>
c000096d:	83 ef 30             	sub    edi,0x30
c0000970:	eb 22                	jmp    c0000994 <simple_strtoul+0xed>
c0000972:	0f be d2             	movsx  edx,dl
c0000975:	52                   	push   edx
c0000976:	e8 04 ff ff ff       	call   c000087f <toupper>
c000097b:	5f                   	pop    edi
c000097c:	0f b6 d0             	movzx  edx,al
c000097f:	f6 82 40 7c 02 c0 01 	test   BYTE PTR [edx-0x3ffd83c0],0x1
c0000986:	75 09                	jne    c0000991 <simple_strtoul+0xea>
c0000988:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000098d:	75 2d                	jne    c00009bc <simple_strtoul+0x115>
c000098f:	eb 57                	jmp    c00009e8 <simple_strtoul+0x141>
c0000991:	8d 78 c9             	lea    edi,[eax-0x37]
c0000994:	39 f7                	cmp    edi,esi
c0000996:	73 f0                	jae    c0000988 <simple_strtoul+0xe1>
c0000998:	31 d2                	xor    edx,edx
c000099a:	89 f8                	mov    eax,edi
c000099c:	f7 d0                	not    eax
c000099e:	f7 f6                	div    esi
c00009a0:	39 d8                	cmp    eax,ebx
c00009a2:	72 0e                	jb     c00009b2 <simple_strtoul+0x10b>
c00009a4:	0f af de             	imul   ebx,esi
c00009a7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009ae:	01 fb                	add    ebx,edi
c00009b0:	eb 07                	jmp    c00009b9 <simple_strtoul+0x112>
c00009b2:	bd 01 00 00 00       	mov    ebp,0x1
c00009b7:	31 db                	xor    ebx,ebx
c00009b9:	41                   	inc    ecx
c00009ba:	eb 9f                	jmp    c000095b <simple_strtoul+0xb4>
c00009bc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009bf:	09 d8                	or     eax,ebx
c00009c1:	75 1f                	jne    c00009e2 <simple_strtoul+0x13b>
c00009c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009c7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00009cb:	31 db                	xor    ebx,ebx
c00009cd:	89 38                	mov    DWORD PTR [eax],edi
c00009cf:	eb 17                	jmp    c00009e8 <simple_strtoul+0x141>
c00009d1:	31 db                	xor    ebx,ebx
c00009d3:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00009d8:	74 14                	je     c00009ee <simple_strtoul+0x147>
c00009da:	31 ed                	xor    ebp,ebp
c00009dc:	85 c9                	test   ecx,ecx
c00009de:	75 e3                	jne    c00009c3 <simple_strtoul+0x11c>
c00009e0:	31 db                	xor    ebx,ebx
c00009e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009e6:	89 08                	mov    DWORD PTR [eax],ecx
c00009e8:	4d                   	dec    ebp
c00009e9:	75 03                	jne    c00009ee <simple_strtoul+0x147>
c00009eb:	83 cb ff             	or     ebx,0xffffffff
c00009ee:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00009f3:	75 02                	jne    c00009f7 <simple_strtoul+0x150>
c00009f5:	f7 db                	neg    ebx
c00009f7:	83 c4 08             	add    esp,0x8
c00009fa:	89 d8                	mov    eax,ebx
c00009fc:	5b                   	pop    ebx
c00009fd:	5e                   	pop    esi
c00009fe:	5f                   	pop    edi
c00009ff:	5d                   	pop    ebp
c0000a00:	c3                   	ret    

c0000a01 <largebin_index>:
c0000a01:	89 c2                	mov    edx,eax
c0000a03:	c1 ea 08             	shr    edx,0x8
c0000a06:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000a0c:	77 10                	ja     c0000a1e <largebin_index+0x1d>
c0000a0e:	0f bd d2             	bsr    edx,edx
c0000a11:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000a14:	d3 e8                	shr    eax,cl
c0000a16:	83 e0 03             	and    eax,0x3
c0000a19:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000a1d:	c3                   	ret    
c0000a1e:	b8 5f 00 00 00       	mov    eax,0x5f
c0000a23:	c3                   	ret    

c0000a24 <malloc_init_state>:
c0000a24:	53                   	push   ebx
c0000a25:	8d 50 34             	lea    edx,[eax+0x34]
c0000a28:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000a2e:	89 d1                	mov    ecx,edx
c0000a30:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000a33:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000a36:	83 c2 08             	add    edx,0x8
c0000a39:	39 da                	cmp    edx,ebx
c0000a3b:	75 f3                	jne    c0000a30 <malloc_init_state+0xc>
c0000a3d:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a3f:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000a49:	83 e2 03             	and    edx,0x3
c0000a4c:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000a56:	83 ca 48             	or     edx,0x48
c0000a59:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000a63:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000a6d:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000a74:	89 10                	mov    DWORD PTR [eax],edx
c0000a76:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000a79:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000a83:	5b                   	pop    ebx
c0000a84:	c3                   	ret    

c0000a85 <malloc_consolidate>:
c0000a85:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a87:	85 d2                	test   edx,edx
c0000a89:	0f 84 d8 00 00 00    	je     c0000b67 <malloc_consolidate+0xe2>
c0000a8f:	55                   	push   ebp
c0000a90:	83 e2 fd             	and    edx,0xfffffffd
c0000a93:	57                   	push   edi
c0000a94:	89 c5                	mov    ebp,eax
c0000a96:	56                   	push   esi
c0000a97:	8d 78 34             	lea    edi,[eax+0x34]
c0000a9a:	53                   	push   ebx
c0000a9b:	83 ec 10             	sub    esp,0x10
c0000a9e:	89 10                	mov    DWORD PTR [eax],edx
c0000aa0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000aa4:	c1 ea 03             	shr    edx,0x3
c0000aa7:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000aab:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000aaf:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ab2:	85 d2                	test   edx,edx
c0000ab4:	0f 84 98 00 00 00    	je     c0000b52 <malloc_consolidate+0xcd>
c0000aba:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ac1:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000ac4:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ac7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000acb:	89 f9                	mov    ecx,edi
c0000acd:	83 e1 fe             	and    ecx,0xfffffffe
c0000ad0:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ad3:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000ad6:	83 e3 fc             	and    ebx,0xfffffffc
c0000ad9:	83 e7 01             	and    edi,0x1
c0000adc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000adf:	75 14                	jne    c0000af5 <malloc_consolidate+0x70>
c0000ae1:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000ae3:	29 fa                	sub    edx,edi
c0000ae5:	01 f9                	add    ecx,edi
c0000ae7:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000aea:	89 fb                	mov    ebx,edi
c0000aec:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000aef:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000af2:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000af5:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000af8:	74 40                	je     c0000b3a <malloc_consolidate+0xb5>
c0000afa:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000afd:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000b00:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000b04:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000b07:	83 e7 01             	and    edi,0x1
c0000b0a:	75 0e                	jne    c0000b1a <malloc_consolidate+0x95>
c0000b0c:	01 d9                	add    ecx,ebx
c0000b0e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000b11:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000b14:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000b17:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000b1a:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000b1d:	89 ce                	mov    esi,ecx
c0000b1f:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000b22:	83 ce 01             	or     esi,0x1
c0000b25:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000b28:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000b2b:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000b2e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000b32:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000b35:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000b38:	eb 0c                	jmp    c0000b46 <malloc_consolidate+0xc1>
c0000b3a:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000b3d:	83 c9 01             	or     ecx,0x1
c0000b40:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000b43:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000b46:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000b4a:	85 d2                	test   edx,edx
c0000b4c:	0f 85 6f ff ff ff    	jne    c0000ac1 <malloc_consolidate+0x3c>
c0000b52:	83 c5 04             	add    ebp,0x4
c0000b55:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000b59:	0f 85 50 ff ff ff    	jne    c0000aaf <malloc_consolidate+0x2a>
c0000b5f:	83 c4 10             	add    esp,0x10
c0000b62:	5b                   	pop    ebx
c0000b63:	5e                   	pop    esi
c0000b64:	5f                   	pop    edi
c0000b65:	5d                   	pop    ebp
c0000b66:	c3                   	ret    
c0000b67:	e9 b8 fe ff ff       	jmp    c0000a24 <malloc_init_state>

c0000b6c <dlfree>:
c0000b6c:	57                   	push   edi
c0000b6d:	56                   	push   esi
c0000b6e:	53                   	push   ebx
c0000b6f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000b73:	85 db                	test   ebx,ebx
c0000b75:	0f 84 e2 00 00 00    	je     c0000c5d <dlfree+0xf1>
c0000b7b:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000b7e:	8b 0d e0 c5 02 c0    	mov    ecx,DWORD PTR ds:0xc002c5e0
c0000b84:	89 f0                	mov    eax,esi
c0000b86:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000b89:	83 e0 fc             	and    eax,0xfffffffc
c0000b8c:	39 c1                	cmp    ecx,eax
c0000b8e:	72 24                	jb     c0000bb4 <dlfree+0x48>
c0000b90:	83 c9 03             	or     ecx,0x3
c0000b93:	c1 e8 03             	shr    eax,0x3
c0000b96:	89 0d e0 c5 02 c0    	mov    DWORD PTR ds:0xc002c5e0,ecx
c0000b9c:	83 e8 02             	sub    eax,0x2
c0000b9f:	8b 0c 85 e4 c5 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd3a1c]
c0000ba6:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000ba8:	89 14 85 e4 c5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3a1c],edx
c0000baf:	e9 a9 00 00 00       	jmp    c0000c5d <dlfree+0xf1>
c0000bb4:	83 e6 02             	and    esi,0x2
c0000bb7:	0f 85 a0 00 00 00    	jne    c0000c5d <dlfree+0xf1>
c0000bbd:	83 c9 01             	or     ecx,0x1
c0000bc0:	8d 34 02             	lea    esi,[edx+eax*1]
c0000bc3:	89 0d e0 c5 02 c0    	mov    DWORD PTR ds:0xc002c5e0,ecx
c0000bc9:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000bcc:	83 e1 fc             	and    ecx,0xfffffffc
c0000bcf:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000bd3:	75 13                	jne    c0000be8 <dlfree+0x7c>
c0000bd5:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000bd8:	29 da                	sub    edx,ebx
c0000bda:	01 d8                	add    eax,ebx
c0000bdc:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000bdf:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000be2:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000be5:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000be8:	39 35 0c c6 02 c0    	cmp    DWORD PTR ds:0xc002c60c,esi
c0000bee:	74 40                	je     c0000c30 <dlfree+0xc4>
c0000bf0:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000bf4:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000bf7:	80 e3 01             	and    bl,0x1
c0000bfa:	75 0e                	jne    c0000c0a <dlfree+0x9e>
c0000bfc:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000bff:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000c02:	01 c8                	add    eax,ecx
c0000c04:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c07:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c0a:	8b 0d 1c c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c61c
c0000c10:	c7 42 0c 14 c6 02 c0 	mov    DWORD PTR [edx+0xc],0xc002c614
c0000c17:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000c1a:	89 15 1c c6 02 c0    	mov    DWORD PTR ds:0xc002c61c,edx
c0000c20:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000c23:	89 c1                	mov    ecx,eax
c0000c25:	83 c9 01             	or     ecx,0x1
c0000c28:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c2b:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000c2e:	eb 10                	jmp    c0000c40 <dlfree+0xd4>
c0000c30:	01 c8                	add    eax,ecx
c0000c32:	89 c1                	mov    ecx,eax
c0000c34:	83 c9 01             	or     ecx,0x1
c0000c37:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c3a:	89 15 0c c6 02 c0    	mov    DWORD PTR ds:0xc002c60c,edx
c0000c40:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000c45:	76 16                	jbe    c0000c5d <dlfree+0xf1>
c0000c47:	f6 05 e0 c5 02 c0 02 	test   BYTE PTR ds:0xc002c5e0,0x2
c0000c4e:	74 0d                	je     c0000c5d <dlfree+0xf1>
c0000c50:	5b                   	pop    ebx
c0000c51:	b8 e0 c5 02 c0       	mov    eax,0xc002c5e0
c0000c56:	5e                   	pop    esi
c0000c57:	5f                   	pop    edi
c0000c58:	e9 28 fe ff ff       	jmp    c0000a85 <malloc_consolidate>
c0000c5d:	5b                   	pop    ebx
c0000c5e:	5e                   	pop    esi
c0000c5f:	5f                   	pop    edi
c0000c60:	c3                   	ret    

c0000c61 <sYSMALLOc>:
c0000c61:	55                   	push   ebp
c0000c62:	57                   	push   edi
c0000c63:	56                   	push   esi
c0000c64:	53                   	push   ebx
c0000c65:	89 d3                	mov    ebx,edx
c0000c67:	83 ec 2c             	sub    esp,0x2c
c0000c6a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000c6e:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000c74:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000c77:	8d 42 ff             	lea    eax,[edx-0x1]
c0000c7a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000c7e:	74 1f                	je     c0000c9f <sYSMALLOc+0x3e>
c0000c80:	89 d8                	mov    eax,ebx
c0000c82:	e8 fe fd ff ff       	call   c0000a85 <malloc_consolidate>
c0000c87:	83 ec 0c             	sub    esp,0xc
c0000c8a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000c8e:	83 e8 07             	sub    eax,0x7
c0000c91:	50                   	push   eax
c0000c92:	e8 30 02 00 00       	call   c0000ec7 <dlmalloc>
c0000c97:	83 c4 10             	add    esp,0x10
c0000c9a:	e9 20 02 00 00       	jmp    c0000ebf <sYSMALLOc+0x25e>
c0000c9f:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000ca2:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ca8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000cab:	83 e0 fc             	and    eax,0xfffffffc
c0000cae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000cb2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000cb6:	83 c0 10             	add    eax,0x10
c0000cb9:	01 c1                	add    ecx,eax
c0000cbb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000cbf:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000cc6:	74 04                	je     c0000ccc <sYSMALLOc+0x6b>
c0000cc8:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000ccc:	f7 da                	neg    edx
c0000cce:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000cd2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000cd6:	21 d1                	and    ecx,edx
c0000cd8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000cdc:	7f 07                	jg     c0000ce5 <sYSMALLOc+0x84>
c0000cde:	31 c0                	xor    eax,eax
c0000ce0:	e9 da 01 00 00       	jmp    c0000ebf <sYSMALLOc+0x25e>
c0000ce5:	83 ec 0c             	sub    esp,0xc
c0000ce8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000cec:	e8 3a e6 00 00       	call   c000f32b <sbrk>
c0000cf1:	83 c4 10             	add    esp,0x10
c0000cf4:	89 c6                	mov    esi,eax
c0000cf6:	83 f8 ff             	cmp    eax,0xffffffff
c0000cf9:	74 e3                	je     c0000cde <sYSMALLOc+0x7d>
c0000cfb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000cff:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000d03:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000d06:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000d0c:	39 f1                	cmp    ecx,esi
c0000d0e:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000d14:	75 13                	jne    c0000d29 <sYSMALLOc+0xc8>
c0000d16:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d1a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d1e:	83 c8 01             	or     eax,0x1
c0000d21:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000d24:	e9 3e 01 00 00       	jmp    c0000e67 <sYSMALLOc+0x206>
c0000d29:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000d2f:	88 d0                	mov    al,dl
c0000d31:	83 e0 01             	and    eax,0x1
c0000d34:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000d39:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000d3d:	0f 95 c0             	setne  al
c0000d40:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000d44:	39 f1                	cmp    ecx,esi
c0000d46:	76 12                	jbe    c0000d5a <sYSMALLOc+0xf9>
c0000d48:	84 c0                	test   al,al
c0000d4a:	74 0e                	je     c0000d5a <sYSMALLOc+0xf9>
c0000d4c:	83 e2 fe             	and    edx,0xfffffffe
c0000d4f:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000d55:	e9 83 00 00 00       	jmp    c0000ddd <sYSMALLOc+0x17c>
c0000d5a:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000d5f:	74 7c                	je     c0000ddd <sYSMALLOc+0x17c>
c0000d61:	84 c0                	test   al,al
c0000d63:	74 0c                	je     c0000d71 <sYSMALLOc+0x110>
c0000d65:	89 f0                	mov    eax,esi
c0000d67:	29 c8                	sub    eax,ecx
c0000d69:	01 e8                	add    eax,ebp
c0000d6b:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000d71:	89 f2                	mov    edx,esi
c0000d73:	83 e2 07             	and    edx,0x7
c0000d76:	74 0c                	je     c0000d84 <sYSMALLOc+0x123>
c0000d78:	b8 08 00 00 00       	mov    eax,0x8
c0000d7d:	29 d0                	sub    eax,edx
c0000d7f:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000d82:	eb 04                	jmp    c0000d88 <sYSMALLOc+0x127>
c0000d84:	89 f5                	mov    ebp,esi
c0000d86:	31 c0                	xor    eax,eax
c0000d88:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d8c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000d90:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000d94:	01 c1                	add    ecx,eax
c0000d96:	83 ec 0c             	sub    esp,0xc
c0000d99:	01 f1                	add    ecx,esi
c0000d9b:	01 ca                	add    edx,ecx
c0000d9d:	29 c8                	sub    eax,ecx
c0000d9f:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000da3:	01 c2                	add    edx,eax
c0000da5:	52                   	push   edx
c0000da6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000daa:	e8 7c e5 00 00       	call   c000f32b <sbrk>
c0000daf:	83 c4 10             	add    esp,0x10
c0000db2:	83 f8 ff             	cmp    eax,0xffffffff
c0000db5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000db9:	75 0f                	jne    c0000dca <sYSMALLOc+0x169>
c0000dbb:	83 ec 0c             	sub    esp,0xc
c0000dbe:	6a 00                	push   0x0
c0000dc0:	e8 66 e5 00 00       	call   c000f32b <sbrk>
c0000dc5:	83 c4 10             	add    esp,0x10
c0000dc8:	eb 30                	jmp    c0000dfa <sYSMALLOc+0x199>
c0000dca:	39 c6                	cmp    esi,eax
c0000dcc:	76 33                	jbe    c0000e01 <sYSMALLOc+0x1a0>
c0000dce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000dd2:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000dd9:	01 f0                	add    eax,esi
c0000ddb:	eb 1d                	jmp    c0000dfa <sYSMALLOc+0x199>
c0000ddd:	83 ec 0c             	sub    esp,0xc
c0000de0:	89 f5                	mov    ebp,esi
c0000de2:	6a 00                	push   0x0
c0000de4:	e8 42 e5 00 00       	call   c000f32b <sbrk>
c0000de9:	89 c2                	mov    edx,eax
c0000deb:	29 f2                	sub    edx,esi
c0000ded:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000df1:	83 c4 10             	add    esp,0x10
c0000df4:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000dfa:	31 d2                	xor    edx,edx
c0000dfc:	83 f8 ff             	cmp    eax,0xffffffff
c0000dff:	74 66                	je     c0000e67 <sYSMALLOc+0x206>
c0000e01:	29 e8                	sub    eax,ebp
c0000e03:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000e06:	01 d0                	add    eax,edx
c0000e08:	83 c8 01             	or     eax,0x1
c0000e0b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000e0e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000e14:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e19:	74 4c                	je     c0000e67 <sYSMALLOc+0x206>
c0000e1b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e1f:	83 e8 0c             	sub    eax,0xc
c0000e22:	83 e0 f8             	and    eax,0xfffffff8
c0000e25:	89 c2                	mov    edx,eax
c0000e27:	83 ca 01             	or     edx,0x1
c0000e2a:	83 f8 0f             	cmp    eax,0xf
c0000e2d:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000e30:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000e38:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000e40:	76 25                	jbe    c0000e67 <sYSMALLOc+0x206>
c0000e42:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000e48:	83 ec 0c             	sub    esp,0xc
c0000e4b:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000e55:	83 c7 08             	add    edi,0x8
c0000e58:	57                   	push   edi
c0000e59:	e8 0e fd ff ff       	call   c0000b6c <dlfree>
c0000e5e:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000e64:	83 c4 10             	add    esp,0x10
c0000e67:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000e6d:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000e73:	73 06                	jae    c0000e7b <sYSMALLOc+0x21a>
c0000e75:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000e7b:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000e81:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000e87:	73 06                	jae    c0000e8f <sYSMALLOc+0x22e>
c0000e89:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000e8f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000e92:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000e95:	83 e2 fc             	and    edx,0xfffffffc
c0000e98:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000e9c:	0f 82 3c fe ff ff    	jb     c0000cde <sYSMALLOc+0x7d>
c0000ea2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000ea6:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000ea9:	29 fa                	sub    edx,edi
c0000eab:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000eae:	83 ca 01             	or     edx,0x1
c0000eb1:	89 fb                	mov    ebx,edi
c0000eb3:	83 c0 08             	add    eax,0x8
c0000eb6:	83 cb 01             	or     ebx,0x1
c0000eb9:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000ebc:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000ebf:	83 c4 2c             	add    esp,0x2c
c0000ec2:	5b                   	pop    ebx
c0000ec3:	5e                   	pop    esi
c0000ec4:	5f                   	pop    edi
c0000ec5:	5d                   	pop    ebp
c0000ec6:	c3                   	ret    

c0000ec7 <dlmalloc>:
c0000ec7:	55                   	push   ebp
c0000ec8:	57                   	push   edi
c0000ec9:	56                   	push   esi
c0000eca:	53                   	push   ebx
c0000ecb:	83 ec 1c             	sub    esp,0x1c
c0000ece:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000ed2:	83 f8 df             	cmp    eax,0xffffffdf
c0000ed5:	0f 87 70 03 00 00    	ja     c000124b <dlmalloc+0x384>
c0000edb:	83 c0 0b             	add    eax,0xb
c0000ede:	be 10 00 00 00       	mov    esi,0x10
c0000ee3:	83 f8 0f             	cmp    eax,0xf
c0000ee6:	76 05                	jbe    c0000eed <dlmalloc+0x26>
c0000ee8:	83 e0 f8             	and    eax,0xfffffff8
c0000eeb:	89 c6                	mov    esi,eax
c0000eed:	8b 3d e0 c5 02 c0    	mov    edi,DWORD PTR ds:0xc002c5e0
c0000ef3:	f7 c7 01 00 00 00    	test   edi,0x1
c0000ef9:	75 17                	jne    c0000f12 <dlmalloc+0x4b>
c0000efb:	85 ff                	test   edi,edi
c0000efd:	0f 85 05 03 00 00    	jne    c0001208 <dlmalloc+0x341>
c0000f03:	b8 e0 c5 02 c0       	mov    eax,0xc002c5e0
c0000f08:	e8 78 fb ff ff       	call   c0000a85 <malloc_consolidate>
c0000f0d:	e9 f6 02 00 00       	jmp    c0001208 <dlmalloc+0x341>
c0000f12:	39 f7                	cmp    edi,esi
c0000f14:	72 1f                	jb     c0000f35 <dlmalloc+0x6e>
c0000f16:	89 f2                	mov    edx,esi
c0000f18:	c1 ea 03             	shr    edx,0x3
c0000f1b:	83 ea 02             	sub    edx,0x2
c0000f1e:	8b 04 95 e4 c5 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd3a1c]
c0000f25:	85 c0                	test   eax,eax
c0000f27:	74 0c                	je     c0000f35 <dlmalloc+0x6e>
c0000f29:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000f2c:	89 0c 95 e4 c5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd3a1c],ecx
c0000f33:	eb 30                	jmp    c0000f65 <dlmalloc+0x9e>
c0000f35:	89 f0                	mov    eax,esi
c0000f37:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f3d:	77 2e                	ja     c0000f6d <dlmalloc+0xa6>
c0000f3f:	c1 e8 03             	shr    eax,0x3
c0000f42:	8d 14 c5 14 c6 02 c0 	lea    edx,[eax*8-0x3ffd39ec]
c0000f49:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f4d:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000f50:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000f53:	39 c3                	cmp    ebx,eax
c0000f55:	74 2e                	je     c0000f85 <dlmalloc+0xbe>
c0000f57:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000f5a:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000f5f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000f62:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000f65:	83 c0 08             	add    eax,0x8
c0000f68:	e9 e0 02 00 00       	jmp    c000124d <dlmalloc+0x386>
c0000f6d:	e8 8f fa ff ff       	call   c0000a01 <largebin_index>
c0000f72:	83 e7 02             	and    edi,0x2
c0000f75:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f79:	74 0a                	je     c0000f85 <dlmalloc+0xbe>
c0000f7b:	b8 e0 c5 02 c0       	mov    eax,0xc002c5e0
c0000f80:	e8 00 fb ff ff       	call   c0000a85 <malloc_consolidate>
c0000f85:	8d 46 10             	lea    eax,[esi+0x10]
c0000f88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000f8c:	8b 1d 20 c6 02 c0    	mov    ebx,DWORD PTR ds:0xc002c620
c0000f92:	81 fb 14 c6 02 c0    	cmp    ebx,0xc002c614
c0000f98:	0f 84 13 01 00 00    	je     c00010b1 <dlmalloc+0x1ea>
c0000f9e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000fa1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000fa4:	83 e7 fc             	and    edi,0xfffffffc
c0000fa7:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000fad:	77 4c                	ja     c0000ffb <dlmalloc+0x134>
c0000faf:	3d 14 c6 02 c0       	cmp    eax,0xc002c614
c0000fb4:	75 45                	jne    c0000ffb <dlmalloc+0x134>
c0000fb6:	39 1d 10 c6 02 c0    	cmp    DWORD PTR ds:0xc002c610,ebx
c0000fbc:	75 3d                	jne    c0000ffb <dlmalloc+0x134>
c0000fbe:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0000fc2:	73 37                	jae    c0000ffb <dlmalloc+0x134>
c0000fc4:	8d 04 33             	lea    eax,[ebx+esi*1]
c0000fc7:	89 fa                	mov    edx,edi
c0000fc9:	a3 1c c6 02 c0       	mov    ds:0xc002c61c,eax
c0000fce:	a3 20 c6 02 c0       	mov    ds:0xc002c620,eax
c0000fd3:	a3 10 c6 02 c0       	mov    ds:0xc002c610,eax
c0000fd8:	29 f2                	sub    edx,esi
c0000fda:	c7 40 08 14 c6 02 c0 	mov    DWORD PTR [eax+0x8],0xc002c614
c0000fe1:	c7 40 0c 14 c6 02 c0 	mov    DWORD PTR [eax+0xc],0xc002c614
c0000fe8:	83 ce 01             	or     esi,0x1
c0000feb:	89 d1                	mov    ecx,edx
c0000fed:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0000ff0:	83 c9 01             	or     ecx,0x1
c0000ff3:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0000ff6:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0000ff9:	eb 15                	jmp    c0001010 <dlmalloc+0x149>
c0000ffb:	a3 20 c6 02 c0       	mov    ds:0xc002c620,eax
c0001000:	39 fe                	cmp    esi,edi
c0001002:	c7 40 08 14 c6 02 c0 	mov    DWORD PTR [eax+0x8],0xc002c614
c0001009:	75 0d                	jne    c0001018 <dlmalloc+0x151>
c000100b:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001010:	8d 43 08             	lea    eax,[ebx+0x8]
c0001013:	e9 35 02 00 00       	jmp    c000124d <dlmalloc+0x386>
c0001018:	89 f8                	mov    eax,edi
c000101a:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001020:	77 19                	ja     c000103b <dlmalloc+0x174>
c0001022:	c1 e8 03             	shr    eax,0x3
c0001025:	8d 14 00             	lea    edx,[eax+eax*1]
c0001028:	83 c2 0d             	add    edx,0xd
c000102b:	8d 2c 95 d8 c5 02 c0 	lea    ebp,[edx*4-0x3ffd3a28]
c0001032:	8b 14 95 e0 c5 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3a20]
c0001039:	eb 46                	jmp    c0001081 <dlmalloc+0x1ba>
c000103b:	e8 c1 f9 ff ff       	call   c0000a01 <largebin_index>
c0001040:	8d 14 00             	lea    edx,[eax+eax*1]
c0001043:	83 c2 0d             	add    edx,0xd
c0001046:	8d 0c 95 e0 c5 02 c0 	lea    ecx,[edx*4-0x3ffd3a20]
c000104d:	8b 14 95 e0 c5 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3a20]
c0001054:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001057:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000105b:	89 d5                	mov    ebp,edx
c000105d:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001061:	74 1e                	je     c0001081 <dlmalloc+0x1ba>
c0001063:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001066:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001069:	77 12                	ja     c000107d <dlmalloc+0x1b6>
c000106b:	83 cf 01             	or     edi,0x1
c000106e:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001071:	76 05                	jbe    c0001078 <dlmalloc+0x1b1>
c0001073:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001076:	eb f6                	jmp    c000106e <dlmalloc+0x1a7>
c0001078:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c000107b:	eb 04                	jmp    c0001081 <dlmalloc+0x1ba>
c000107d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001081:	89 c7                	mov    edi,eax
c0001083:	88 c1                	mov    cl,al
c0001085:	c1 ff 05             	sar    edi,0x5
c0001088:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000108c:	bf 01 00 00 00       	mov    edi,0x1
c0001091:	d3 e7                	shl    edi,cl
c0001093:	89 f8                	mov    eax,edi
c0001095:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0001099:	09 04 bd 14 c9 02 c0 	or     DWORD PTR [edi*4-0x3ffd36ec],eax
c00010a0:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00010a3:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00010a6:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00010a9:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00010ac:	e9 db fe ff ff       	jmp    c0000f8c <dlmalloc+0xc5>
c00010b1:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010b7:	76 78                	jbe    c0001131 <dlmalloc+0x26a>
c00010b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00010bd:	8d 04 c5 14 c6 02 c0 	lea    eax,[eax*8-0x3ffd39ec]
c00010c4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00010c7:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010ca:	39 ca                	cmp    edx,ecx
c00010cc:	74 63                	je     c0001131 <dlmalloc+0x26a>
c00010ce:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00010d1:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00010d4:	83 e3 fc             	and    ebx,0xfffffffc
c00010d7:	39 de                	cmp    esi,ebx
c00010d9:	77 52                	ja     c000112d <dlmalloc+0x266>
c00010db:	89 df                	mov    edi,ebx
c00010dd:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00010e0:	29 f7                	sub    edi,esi
c00010e2:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00010e5:	01 d3                	add    ebx,edx
c00010e7:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c00010ea:	83 ff 0f             	cmp    edi,0xf
c00010ed:	8d 42 08             	lea    eax,[edx+0x8]
c00010f0:	77 09                	ja     c00010fb <dlmalloc+0x234>
c00010f2:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c00010f6:	e9 52 01 00 00       	jmp    c000124d <dlmalloc+0x386>
c00010fb:	8d 0c 32             	lea    ecx,[edx+esi*1]
c00010fe:	83 ce 01             	or     esi,0x1
c0001101:	89 0d 1c c6 02 c0    	mov    DWORD PTR ds:0xc002c61c,ecx
c0001107:	89 0d 20 c6 02 c0    	mov    DWORD PTR ds:0xc002c620,ecx
c000110d:	c7 41 08 14 c6 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002c614
c0001114:	c7 41 0c 14 c6 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002c614
c000111b:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000111e:	89 fa                	mov    edx,edi
c0001120:	83 ca 01             	or     edx,0x1
c0001123:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001126:	89 3b                	mov    DWORD PTR [ebx],edi
c0001128:	e9 20 01 00 00       	jmp    c000124d <dlmalloc+0x386>
c000112d:	89 c2                	mov    edx,eax
c000112f:	eb 99                	jmp    c00010ca <dlmalloc+0x203>
c0001131:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001135:	b8 01 00 00 00       	mov    eax,0x1
c000113a:	41                   	inc    ecx
c000113b:	89 cb                	mov    ebx,ecx
c000113d:	8d 14 cd 0c c6 02 c0 	lea    edx,[ecx*8-0x3ffd39f4]
c0001144:	c1 eb 05             	shr    ebx,0x5
c0001147:	d3 e0                	shl    eax,cl
c0001149:	8b 3c 9d 14 c9 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd36ec]
c0001150:	39 f8                	cmp    eax,edi
c0001152:	77 04                	ja     c0001158 <dlmalloc+0x291>
c0001154:	85 c0                	test   eax,eax
c0001156:	75 26                	jne    c000117e <dlmalloc+0x2b7>
c0001158:	43                   	inc    ebx
c0001159:	83 fb 02             	cmp    ebx,0x2
c000115c:	0f 87 a6 00 00 00    	ja     c0001208 <dlmalloc+0x341>
c0001162:	8b 3c 9d 14 c9 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd36ec]
c0001169:	85 ff                	test   edi,edi
c000116b:	74 eb                	je     c0001158 <dlmalloc+0x291>
c000116d:	89 d8                	mov    eax,ebx
c000116f:	c1 e0 06             	shl    eax,0x6
c0001172:	8d 14 85 0c c6 02 c0 	lea    edx,[eax*4-0x3ffd39f4]
c0001179:	b8 01 00 00 00       	mov    eax,0x1
c000117e:	85 f8                	test   eax,edi
c0001180:	75 07                	jne    c0001189 <dlmalloc+0x2c2>
c0001182:	83 c2 08             	add    edx,0x8
c0001185:	01 c0                	add    eax,eax
c0001187:	eb f5                	jmp    c000117e <dlmalloc+0x2b7>
c0001189:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c000118c:	39 ca                	cmp    edx,ecx
c000118e:	75 14                	jne    c00011a4 <dlmalloc+0x2dd>
c0001190:	89 c1                	mov    ecx,eax
c0001192:	83 c2 08             	add    edx,0x8
c0001195:	f7 d1                	not    ecx
c0001197:	01 c0                	add    eax,eax
c0001199:	21 cf                	and    edi,ecx
c000119b:	89 3c 9d 14 c9 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd36ec],edi
c00011a2:	eb ac                	jmp    c0001150 <dlmalloc+0x289>
c00011a4:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00011a7:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00011aa:	83 e0 fc             	and    eax,0xfffffffc
c00011ad:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00011b0:	89 c3                	mov    ebx,eax
c00011b2:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00011b5:	29 f3                	sub    ebx,esi
c00011b7:	8d 14 01             	lea    edx,[ecx+eax*1]
c00011ba:	83 fb 0f             	cmp    ebx,0xf
c00011bd:	8d 41 08             	lea    eax,[ecx+0x8]
c00011c0:	77 09                	ja     c00011cb <dlmalloc+0x304>
c00011c2:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00011c6:	e9 82 00 00 00       	jmp    c000124d <dlmalloc+0x386>
c00011cb:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00011ce:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011d4:	89 3d 1c c6 02 c0    	mov    DWORD PTR ds:0xc002c61c,edi
c00011da:	89 3d 20 c6 02 c0    	mov    DWORD PTR ds:0xc002c620,edi
c00011e0:	c7 47 08 14 c6 02 c0 	mov    DWORD PTR [edi+0x8],0xc002c614
c00011e7:	c7 47 0c 14 c6 02 c0 	mov    DWORD PTR [edi+0xc],0xc002c614
c00011ee:	77 06                	ja     c00011f6 <dlmalloc+0x32f>
c00011f0:	89 3d 10 c6 02 c0    	mov    DWORD PTR ds:0xc002c610,edi
c00011f6:	83 ce 01             	or     esi,0x1
c00011f9:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c00011fc:	89 d9                	mov    ecx,ebx
c00011fe:	83 c9 01             	or     ecx,0x1
c0001201:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001204:	89 1a                	mov    DWORD PTR [edx],ebx
c0001206:	eb 45                	jmp    c000124d <dlmalloc+0x386>
c0001208:	a1 0c c6 02 c0       	mov    eax,ds:0xc002c60c
c000120d:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001210:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001213:	83 e2 fc             	and    edx,0xfffffffc
c0001216:	39 d1                	cmp    ecx,edx
c0001218:	77 1e                	ja     c0001238 <dlmalloc+0x371>
c000121a:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000121d:	89 f3                	mov    ebx,esi
c000121f:	89 0d 0c c6 02 c0    	mov    DWORD PTR ds:0xc002c60c,ecx
c0001225:	83 cb 01             	or     ebx,0x1
c0001228:	29 f2                	sub    edx,esi
c000122a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000122d:	83 ca 01             	or     edx,0x1
c0001230:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001233:	e9 2d fd ff ff       	jmp    c0000f65 <dlmalloc+0x9e>
c0001238:	83 c4 1c             	add    esp,0x1c
c000123b:	89 f0                	mov    eax,esi
c000123d:	5b                   	pop    ebx
c000123e:	ba e0 c5 02 c0       	mov    edx,0xc002c5e0
c0001243:	5e                   	pop    esi
c0001244:	5f                   	pop    edi
c0001245:	5d                   	pop    ebp
c0001246:	e9 16 fa ff ff       	jmp    c0000c61 <sYSMALLOc>
c000124b:	31 c0                	xor    eax,eax
c000124d:	83 c4 1c             	add    esp,0x1c
c0001250:	5b                   	pop    ebx
c0001251:	5e                   	pop    esi
c0001252:	5f                   	pop    edi
c0001253:	5d                   	pop    ebp
c0001254:	c3                   	ret    

c0001255 <iALLOc>:
c0001255:	55                   	push   ebp
c0001256:	89 c5                	mov    ebp,eax
c0001258:	57                   	push   edi
c0001259:	56                   	push   esi
c000125a:	53                   	push   ebx
c000125b:	83 ec 2c             	sub    esp,0x2c
c000125e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001262:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001266:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000126a:	83 3d e0 c5 02 c0 00 	cmp    DWORD PTR ds:0xc002c5e0,0x0
c0001271:	75 12                	jne    c0001285 <iALLOc+0x30>
c0001273:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001277:	b8 e0 c5 02 c0       	mov    eax,0xc002c5e0
c000127c:	e8 04 f8 ff ff       	call   c0000a85 <malloc_consolidate>
c0001281:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001285:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000128a:	74 12                	je     c000129e <iALLOc+0x49>
c000128c:	85 ed                	test   ebp,ebp
c000128e:	0f 84 64 01 00 00    	je     c00013f8 <iALLOc+0x1a3>
c0001294:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000129c:	eb 33                	jmp    c00012d1 <iALLOc+0x7c>
c000129e:	85 ed                	test   ebp,ebp
c00012a0:	75 14                	jne    c00012b6 <iALLOc+0x61>
c00012a2:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00012aa:	83 c4 2c             	add    esp,0x2c
c00012ad:	5b                   	pop    ebx
c00012ae:	5e                   	pop    esi
c00012af:	5f                   	pop    edi
c00012b0:	5d                   	pop    ebp
c00012b1:	e9 11 fc ff ff       	jmp    c0000ec7 <dlmalloc>
c00012b6:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00012bd:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00012c5:	83 f8 0f             	cmp    eax,0xf
c00012c8:	76 07                	jbe    c00012d1 <iALLOc+0x7c>
c00012ca:	83 e0 f8             	and    eax,0xfffffff8
c00012cd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00012d1:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00012d6:	75 09                	jne    c00012e1 <iALLOc+0x8c>
c00012d8:	89 d0                	mov    eax,edx
c00012da:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00012dd:	31 f6                	xor    esi,esi
c00012df:	eb 3b                	jmp    c000131c <iALLOc+0xc7>
c00012e1:	8b 02                	mov    eax,DWORD PTR [edx]
c00012e3:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c00012eb:	83 c0 0b             	add    eax,0xb
c00012ee:	83 f8 0f             	cmp    eax,0xf
c00012f1:	76 07                	jbe    c00012fa <iALLOc+0xa5>
c00012f3:	83 e0 f8             	and    eax,0xfffffff8
c00012f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00012fa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00012fe:	0f af f5             	imul   esi,ebp
c0001301:	eb 25                	jmp    c0001328 <iALLOc+0xd3>
c0001303:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001305:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001308:	bb 10 00 00 00       	mov    ebx,0x10
c000130d:	83 f9 0f             	cmp    ecx,0xf
c0001310:	76 05                	jbe    c0001317 <iALLOc+0xc2>
c0001312:	83 e1 f8             	and    ecx,0xfffffff8
c0001315:	89 cb                	mov    ebx,ecx
c0001317:	01 de                	add    esi,ebx
c0001319:	83 c0 04             	add    eax,0x4
c000131c:	39 c7                	cmp    edi,eax
c000131e:	75 e3                	jne    c0001303 <iALLOc+0xae>
c0001320:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001328:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000132c:	8b 1d 34 c9 02 c0    	mov    ebx,DWORD PTR ds:0xc002c934
c0001332:	83 ec 0c             	sub    esp,0xc
c0001335:	c7 05 34 c9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c934,0x0
c000133f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001343:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001347:	50                   	push   eax
c0001348:	e8 7a fb ff ff       	call   c0000ec7 <dlmalloc>
c000134d:	83 c4 10             	add    esp,0x10
c0001350:	89 1d 34 c9 02 c0    	mov    DWORD PTR ds:0xc002c934,ebx
c0001356:	85 c0                	test   eax,eax
c0001358:	0f 84 92 00 00 00    	je     c00013f0 <iALLOc+0x19b>
c000135e:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001361:	8d 78 f8             	lea    edi,[eax-0x8]
c0001364:	83 e3 fc             	and    ebx,0xfffffffc
c0001367:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000136b:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001370:	74 1e                	je     c0001390 <iALLOc+0x13b>
c0001372:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0001376:	89 d9                	mov    ecx,ebx
c0001378:	52                   	push   edx
c0001379:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000137d:	83 e9 04             	sub    ecx,0x4
c0001380:	51                   	push   ecx
c0001381:	6a 00                	push   0x0
c0001383:	50                   	push   eax
c0001384:	e8 02 f3 ff ff       	call   c000068b <memset>
c0001389:	83 c4 10             	add    esp,0x10
c000138c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001390:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001395:	75 14                	jne    c00013ab <iALLOc+0x156>
c0001397:	8d 04 37             	lea    eax,[edi+esi*1]
c000139a:	29 f3                	sub    ebx,esi
c000139c:	8d 48 08             	lea    ecx,[eax+0x8]
c000139f:	83 cb 01             	or     ebx,0x1
c00013a2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00013a6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00013a9:	89 f3                	mov    ebx,esi
c00013ab:	31 c0                	xor    eax,eax
c00013ad:	4d                   	dec    ebp
c00013ae:	8d 4f 08             	lea    ecx,[edi+0x8]
c00013b1:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00013b5:	39 c5                	cmp    ebp,eax
c00013b7:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00013ba:	74 2c                	je     c00013e8 <iALLOc+0x193>
c00013bc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00013c0:	85 c9                	test   ecx,ecx
c00013c2:	75 15                	jne    c00013d9 <iALLOc+0x184>
c00013c4:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00013c7:	8d 71 0b             	lea    esi,[ecx+0xb]
c00013ca:	b9 10 00 00 00       	mov    ecx,0x10
c00013cf:	83 fe 0f             	cmp    esi,0xf
c00013d2:	76 05                	jbe    c00013d9 <iALLOc+0x184>
c00013d4:	83 e6 f8             	and    esi,0xfffffff8
c00013d7:	89 f1                	mov    ecx,esi
c00013d9:	89 ce                	mov    esi,ecx
c00013db:	29 cb                	sub    ebx,ecx
c00013dd:	83 ce 01             	or     esi,0x1
c00013e0:	40                   	inc    eax
c00013e1:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00013e4:	01 cf                	add    edi,ecx
c00013e6:	eb c6                	jmp    c00013ae <iALLOc+0x159>
c00013e8:	83 cb 01             	or     ebx,0x1
c00013eb:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c00013ee:	eb 08                	jmp    c00013f8 <iALLOc+0x1a3>
c00013f0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00013f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00013fc:	83 c4 2c             	add    esp,0x2c
c00013ff:	5b                   	pop    ebx
c0001400:	5e                   	pop    esi
c0001401:	5f                   	pop    edi
c0001402:	5d                   	pop    ebp
c0001403:	c3                   	ret    

c0001404 <dlrealloc>:
c0001404:	55                   	push   ebp
c0001405:	57                   	push   edi
c0001406:	56                   	push   esi
c0001407:	53                   	push   ebx
c0001408:	83 ec 1c             	sub    esp,0x1c
c000140b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000140f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001413:	85 db                	test   ebx,ebx
c0001415:	75 10                	jne    c0001427 <dlrealloc+0x23>
c0001417:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000141b:	83 c4 1c             	add    esp,0x1c
c000141e:	5b                   	pop    ebx
c000141f:	5e                   	pop    esi
c0001420:	5f                   	pop    edi
c0001421:	5d                   	pop    ebp
c0001422:	e9 a0 fa ff ff       	jmp    c0000ec7 <dlmalloc>
c0001427:	83 f8 df             	cmp    eax,0xffffffdf
c000142a:	76 07                	jbe    c0001433 <dlrealloc+0x2f>
c000142c:	31 db                	xor    ebx,ebx
c000142e:	e9 7c 01 00 00       	jmp    c00015af <dlrealloc+0x1ab>
c0001433:	83 c0 0b             	add    eax,0xb
c0001436:	bf 10 00 00 00       	mov    edi,0x10
c000143b:	83 f8 0f             	cmp    eax,0xf
c000143e:	76 05                	jbe    c0001445 <dlrealloc+0x41>
c0001440:	83 e0 f8             	and    eax,0xfffffff8
c0001443:	89 c7                	mov    edi,eax
c0001445:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001448:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000144b:	89 c6                	mov    esi,eax
c000144d:	83 e6 fc             	and    esi,0xfffffffc
c0001450:	a8 02                	test   al,0x2
c0001452:	75 d8                	jne    c000142c <dlrealloc+0x28>
c0001454:	39 f7                	cmp    edi,esi
c0001456:	0f 86 15 01 00 00    	jbe    c0001571 <dlrealloc+0x16d>
c000145c:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c0001460:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0001463:	39 15 0c c6 02 c0    	cmp    DWORD PTR ds:0xc002c60c,edx
c0001469:	75 33                	jne    c000149e <dlrealloc+0x9a>
c000146b:	83 e1 fc             	and    ecx,0xfffffffc
c000146e:	01 f1                	add    ecx,esi
c0001470:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001474:	8d 4f 10             	lea    ecx,[edi+0x10]
c0001477:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000147b:	77 49                	ja     c00014c6 <dlrealloc+0xc2>
c000147d:	01 fd                	add    ebp,edi
c000147f:	83 e0 01             	and    eax,0x1
c0001482:	09 f8                	or     eax,edi
c0001484:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c0001487:	89 2d 0c c6 02 c0    	mov    DWORD PTR ds:0xc002c60c,ebp
c000148d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001491:	29 f8                	sub    eax,edi
c0001493:	83 c8 01             	or     eax,0x1
c0001496:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001499:	e9 11 01 00 00       	jmp    c00015af <dlrealloc+0x1ab>
c000149e:	89 c8                	mov    eax,ecx
c00014a0:	83 e0 fe             	and    eax,0xfffffffe
c00014a3:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00014a8:	75 1c                	jne    c00014c6 <dlrealloc+0xc2>
c00014aa:	83 e1 fc             	and    ecx,0xfffffffc
c00014ad:	01 f1                	add    ecx,esi
c00014af:	39 cf                	cmp    edi,ecx
c00014b1:	77 13                	ja     c00014c6 <dlrealloc+0xc2>
c00014b3:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00014b6:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00014b9:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00014bc:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00014bf:	89 ce                	mov    esi,ecx
c00014c1:	e9 ab 00 00 00       	jmp    c0001571 <dlrealloc+0x16d>
c00014c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00014ca:	8d 47 f9             	lea    eax,[edi-0x7]
c00014cd:	83 ec 0c             	sub    esp,0xc
c00014d0:	50                   	push   eax
c00014d1:	e8 f1 f9 ff ff       	call   c0000ec7 <dlmalloc>
c00014d6:	83 c4 10             	add    esp,0x10
c00014d9:	89 c1                	mov    ecx,eax
c00014db:	85 c0                	test   eax,eax
c00014dd:	0f 84 49 ff ff ff    	je     c000142c <dlrealloc+0x28>
c00014e3:	8d 40 f8             	lea    eax,[eax-0x8]
c00014e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00014ea:	39 c2                	cmp    edx,eax
c00014ec:	75 0a                	jne    c00014f8 <dlrealloc+0xf4>
c00014ee:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00014f1:	83 e0 fc             	and    eax,0xfffffffc
c00014f4:	01 c6                	add    esi,eax
c00014f6:	eb 79                	jmp    c0001571 <dlrealloc+0x16d>
c00014f8:	83 ee 04             	sub    esi,0x4
c00014fb:	83 fe 27             	cmp    esi,0x27
c00014fe:	76 16                	jbe    c0001516 <dlrealloc+0x112>
c0001500:	50                   	push   eax
c0001501:	56                   	push   esi
c0001502:	53                   	push   ebx
c0001503:	51                   	push   ecx
c0001504:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001508:	e8 48 f1 ff ff       	call   c0000655 <memcpy>
c000150d:	83 c4 10             	add    esp,0x10
c0001510:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001514:	eb 43                	jmp    c0001559 <dlrealloc+0x155>
c0001516:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001518:	83 fe 13             	cmp    esi,0x13
c000151b:	89 01                	mov    DWORD PTR [ecx],eax
c000151d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001520:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001523:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001526:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001529:	76 2e                	jbe    c0001559 <dlrealloc+0x155>
c000152b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000152e:	83 fe 1b             	cmp    esi,0x1b
c0001531:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001534:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001537:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c000153a:	76 1d                	jbe    c0001559 <dlrealloc+0x155>
c000153c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000153f:	83 fe 23             	cmp    esi,0x23
c0001542:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001545:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001548:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c000154b:	76 0c                	jbe    c0001559 <dlrealloc+0x155>
c000154d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0001550:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c0001553:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0001556:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c0001559:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000155d:	83 ec 0c             	sub    esp,0xc
c0001560:	53                   	push   ebx
c0001561:	e8 06 f6 ff ff       	call   c0000b6c <dlfree>
c0001566:	83 c4 10             	add    esp,0x10
c0001569:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000156d:	89 cb                	mov    ebx,ecx
c000156f:	eb 3e                	jmp    c00015af <dlrealloc+0x1ab>
c0001571:	89 f2                	mov    edx,esi
c0001573:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001576:	29 fa                	sub    edx,edi
c0001578:	83 e1 01             	and    ecx,0x1
c000157b:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c000157f:	83 fa 0f             	cmp    edx,0xf
c0001582:	77 0b                	ja     c000158f <dlrealloc+0x18b>
c0001584:	09 ce                	or     esi,ecx
c0001586:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001589:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000158d:	eb 20                	jmp    c00015af <dlrealloc+0x1ab>
c000158f:	01 fd                	add    ebp,edi
c0001591:	83 ec 0c             	sub    esp,0xc
c0001594:	09 cf                	or     edi,ecx
c0001596:	83 ca 01             	or     edx,0x1
c0001599:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c000159c:	83 c5 08             	add    ebp,0x8
c000159f:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00015a2:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00015a6:	55                   	push   ebp
c00015a7:	e8 c0 f5 ff ff       	call   c0000b6c <dlfree>
c00015ac:	83 c4 10             	add    esp,0x10
c00015af:	83 c4 1c             	add    esp,0x1c
c00015b2:	89 d8                	mov    eax,ebx
c00015b4:	5b                   	pop    ebx
c00015b5:	5e                   	pop    esi
c00015b6:	5f                   	pop    edi
c00015b7:	5d                   	pop    ebp
c00015b8:	c3                   	ret    

c00015b9 <dlmemalign>:
c00015b9:	55                   	push   ebp
c00015ba:	57                   	push   edi
c00015bb:	56                   	push   esi
c00015bc:	53                   	push   ebx
c00015bd:	83 ec 0c             	sub    esp,0xc
c00015c0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00015c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00015c8:	83 fa 08             	cmp    edx,0x8
c00015cb:	77 10                	ja     c00015dd <dlmemalign+0x24>
c00015cd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00015d1:	83 c4 0c             	add    esp,0xc
c00015d4:	5b                   	pop    ebx
c00015d5:	5e                   	pop    esi
c00015d6:	5f                   	pop    edi
c00015d7:	5d                   	pop    ebp
c00015d8:	e9 ea f8 ff ff       	jmp    c0000ec7 <dlmalloc>
c00015dd:	bf 10 00 00 00       	mov    edi,0x10
c00015e2:	83 fa 0f             	cmp    edx,0xf
c00015e5:	76 13                	jbe    c00015fa <dlmemalign+0x41>
c00015e7:	8d 4a ff             	lea    ecx,[edx-0x1]
c00015ea:	85 d1                	test   ecx,edx
c00015ec:	75 04                	jne    c00015f2 <dlmemalign+0x39>
c00015ee:	89 d7                	mov    edi,edx
c00015f0:	eb 08                	jmp    c00015fa <dlmemalign+0x41>
c00015f2:	39 d7                	cmp    edi,edx
c00015f4:	73 04                	jae    c00015fa <dlmemalign+0x41>
c00015f6:	01 ff                	add    edi,edi
c00015f8:	eb f8                	jmp    c00015f2 <dlmemalign+0x39>
c00015fa:	83 f8 df             	cmp    eax,0xffffffdf
c00015fd:	76 07                	jbe    c0001606 <dlmemalign+0x4d>
c00015ff:	31 c0                	xor    eax,eax
c0001601:	e9 ce 00 00 00       	jmp    c00016d4 <dlmemalign+0x11b>
c0001606:	83 c0 0b             	add    eax,0xb
c0001609:	bd 10 00 00 00       	mov    ebp,0x10
c000160e:	83 f8 0f             	cmp    eax,0xf
c0001611:	76 05                	jbe    c0001618 <dlmemalign+0x5f>
c0001613:	83 e0 f8             	and    eax,0xfffffff8
c0001616:	89 c5                	mov    ebp,eax
c0001618:	83 ec 0c             	sub    esp,0xc
c000161b:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000161f:	50                   	push   eax
c0001620:	e8 a2 f8 ff ff       	call   c0000ec7 <dlmalloc>
c0001625:	83 c4 10             	add    esp,0x10
c0001628:	89 c1                	mov    ecx,eax
c000162a:	85 c0                	test   eax,eax
c000162c:	74 d1                	je     c00015ff <dlmemalign+0x46>
c000162e:	31 d2                	xor    edx,edx
c0001630:	8d 70 f8             	lea    esi,[eax-0x8]
c0001633:	f7 f7                	div    edi
c0001635:	85 d2                	test   edx,edx
c0001637:	74 62                	je     c000169b <dlmemalign+0xe2>
c0001639:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000163d:	89 f8                	mov    eax,edi
c000163f:	f7 d8                	neg    eax
c0001641:	21 c3                	and    ebx,eax
c0001643:	83 eb 08             	sub    ebx,0x8
c0001646:	89 d8                	mov    eax,ebx
c0001648:	29 f0                	sub    eax,esi
c000164a:	83 f8 0f             	cmp    eax,0xf
c000164d:	77 02                	ja     c0001651 <dlmemalign+0x98>
c000164f:	01 fb                	add    ebx,edi
c0001651:	89 d8                	mov    eax,ebx
c0001653:	29 f0                	sub    eax,esi
c0001655:	89 c6                	mov    esi,eax
c0001657:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000165a:	89 c2                	mov    edx,eax
c000165c:	83 e2 fc             	and    edx,0xfffffffc
c000165f:	29 f2                	sub    edx,esi
c0001661:	a8 02                	test   al,0x2
c0001663:	74 10                	je     c0001675 <dlmemalign+0xbc>
c0001665:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001668:	83 ca 02             	or     edx,0x2
c000166b:	8d 43 08             	lea    eax,[ebx+0x8]
c000166e:	89 33                	mov    DWORD PTR [ebx],esi
c0001670:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001673:	eb 5f                	jmp    c00016d4 <dlmemalign+0x11b>
c0001675:	83 ec 0c             	sub    esp,0xc
c0001678:	89 d0                	mov    eax,edx
c000167a:	83 c8 01             	or     eax,0x1
c000167d:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001680:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001685:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001688:	83 e0 01             	and    eax,0x1
c000168b:	09 f0                	or     eax,esi
c000168d:	89 de                	mov    esi,ebx
c000168f:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001692:	51                   	push   ecx
c0001693:	e8 d4 f4 ff ff       	call   c0000b6c <dlfree>
c0001698:	83 c4 10             	add    esp,0x10
c000169b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000169e:	a8 02                	test   al,0x2
c00016a0:	75 2f                	jne    c00016d1 <dlmemalign+0x118>
c00016a2:	83 e0 fc             	and    eax,0xfffffffc
c00016a5:	8d 55 10             	lea    edx,[ebp+0x10]
c00016a8:	39 c2                	cmp    edx,eax
c00016aa:	73 25                	jae    c00016d1 <dlmemalign+0x118>
c00016ac:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00016af:	83 ec 0c             	sub    esp,0xc
c00016b2:	29 e8                	sub    eax,ebp
c00016b4:	83 c2 08             	add    edx,0x8
c00016b7:	83 c8 01             	or     eax,0x1
c00016ba:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00016bd:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00016c0:	83 e0 01             	and    eax,0x1
c00016c3:	09 c5                	or     ebp,eax
c00016c5:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00016c8:	52                   	push   edx
c00016c9:	e8 9e f4 ff ff       	call   c0000b6c <dlfree>
c00016ce:	83 c4 10             	add    esp,0x10
c00016d1:	8d 46 08             	lea    eax,[esi+0x8]
c00016d4:	83 c4 0c             	add    esp,0xc
c00016d7:	5b                   	pop    ebx
c00016d8:	5e                   	pop    esi
c00016d9:	5f                   	pop    edi
c00016da:	5d                   	pop    ebp
c00016db:	c3                   	ret    

c00016dc <dlcalloc>:
c00016dc:	53                   	push   ebx
c00016dd:	83 ec 14             	sub    esp,0x14
c00016e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00016e4:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00016e9:	50                   	push   eax
c00016ea:	e8 d8 f7 ff ff       	call   c0000ec7 <dlmalloc>
c00016ef:	83 c4 10             	add    esp,0x10
c00016f2:	89 c3                	mov    ebx,eax
c00016f4:	85 c0                	test   eax,eax
c00016f6:	74 77                	je     c000176f <dlcalloc+0x93>
c00016f8:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c00016fb:	89 d0                	mov    eax,edx
c00016fd:	83 e0 fc             	and    eax,0xfffffffc
c0001700:	80 e2 02             	and    dl,0x2
c0001703:	75 5a                	jne    c000175f <dlcalloc+0x83>
c0001705:	83 e8 04             	sub    eax,0x4
c0001708:	83 f8 27             	cmp    eax,0x27
c000170b:	76 03                	jbe    c0001710 <dlcalloc+0x34>
c000170d:	51                   	push   ecx
c000170e:	eb 53                	jmp    c0001763 <dlcalloc+0x87>
c0001710:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001716:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000171d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001724:	83 f8 13             	cmp    eax,0x13
c0001727:	76 46                	jbe    c000176f <dlcalloc+0x93>
c0001729:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001730:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001737:	83 f8 1b             	cmp    eax,0x1b
c000173a:	76 33                	jbe    c000176f <dlcalloc+0x93>
c000173c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001743:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000174a:	83 f8 23             	cmp    eax,0x23
c000174d:	76 20                	jbe    c000176f <dlcalloc+0x93>
c000174f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001756:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000175d:	eb 10                	jmp    c000176f <dlcalloc+0x93>
c000175f:	83 e8 08             	sub    eax,0x8
c0001762:	52                   	push   edx
c0001763:	50                   	push   eax
c0001764:	6a 00                	push   0x0
c0001766:	53                   	push   ebx
c0001767:	e8 1f ef ff ff       	call   c000068b <memset>
c000176c:	83 c4 10             	add    esp,0x10
c000176f:	89 d8                	mov    eax,ebx
c0001771:	83 c4 08             	add    esp,0x8
c0001774:	5b                   	pop    ebx
c0001775:	c3                   	ret    

c0001776 <dlcfree>:
c0001776:	e9 f1 f3 ff ff       	jmp    c0000b6c <dlfree>

c000177b <dlindependent_calloc>:
c000177b:	83 ec 28             	sub    esp,0x28
c000177e:	b9 03 00 00 00       	mov    ecx,0x3
c0001783:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001787:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000178b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000178f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001793:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001797:	e8 b9 fa ff ff       	call   c0001255 <iALLOc>
c000179c:	83 c4 2c             	add    esp,0x2c
c000179f:	c3                   	ret    

c00017a0 <dlindependent_comalloc>:
c00017a0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00017a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00017a8:	31 c9                	xor    ecx,ecx
c00017aa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00017ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00017b2:	e9 9e fa ff ff       	jmp    c0001255 <iALLOc>

c00017b7 <dlvalloc>:
c00017b7:	83 ec 0c             	sub    esp,0xc
c00017ba:	83 3d e0 c5 02 c0 00 	cmp    DWORD PTR ds:0xc002c5e0,0x0
c00017c1:	75 0a                	jne    c00017cd <dlvalloc+0x16>
c00017c3:	b8 e0 c5 02 c0       	mov    eax,0xc002c5e0
c00017c8:	e8 b8 f2 ff ff       	call   c0000a85 <malloc_consolidate>
c00017cd:	50                   	push   eax
c00017ce:	50                   	push   eax
c00017cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00017d3:	ff 35 3c c9 02 c0    	push   DWORD PTR ds:0xc002c93c
c00017d9:	e8 db fd ff ff       	call   c00015b9 <dlmemalign>
c00017de:	83 c4 1c             	add    esp,0x1c
c00017e1:	c3                   	ret    

c00017e2 <dlpvalloc>:
c00017e2:	83 ec 0c             	sub    esp,0xc
c00017e5:	83 3d e0 c5 02 c0 00 	cmp    DWORD PTR ds:0xc002c5e0,0x0
c00017ec:	75 0a                	jne    c00017f8 <dlpvalloc+0x16>
c00017ee:	b8 e0 c5 02 c0       	mov    eax,0xc002c5e0
c00017f3:	e8 8d f2 ff ff       	call   c0000a85 <malloc_consolidate>
c00017f8:	a1 3c c9 02 c0       	mov    eax,ds:0xc002c93c
c00017fd:	89 c1                	mov    ecx,eax
c00017ff:	52                   	push   edx
c0001800:	f7 d9                	neg    ecx
c0001802:	52                   	push   edx
c0001803:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001807:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c000180b:	21 ca                	and    edx,ecx
c000180d:	52                   	push   edx
c000180e:	50                   	push   eax
c000180f:	e8 a5 fd ff ff       	call   c00015b9 <dlmemalign>
c0001814:	83 c4 1c             	add    esp,0x1c
c0001817:	c3                   	ret    

c0001818 <dlmalloc_trim>:
c0001818:	b8 e0 c5 02 c0       	mov    eax,0xc002c5e0
c000181d:	e8 63 f2 ff ff       	call   c0000a85 <malloc_consolidate>
c0001822:	31 c0                	xor    eax,eax
c0001824:	c3                   	ret    

c0001825 <dlmalloc_usable_size>:
c0001825:	53                   	push   ebx
c0001826:	31 c0                	xor    eax,eax
c0001828:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000182c:	85 c9                	test   ecx,ecx
c000182e:	74 24                	je     c0001854 <dlmalloc_usable_size+0x2f>
c0001830:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001833:	f6 c2 02             	test   dl,0x2
c0001836:	74 08                	je     c0001840 <dlmalloc_usable_size+0x1b>
c0001838:	83 e2 fc             	and    edx,0xfffffffc
c000183b:	8d 42 f8             	lea    eax,[edx-0x8]
c000183e:	eb 14                	jmp    c0001854 <dlmalloc_usable_size+0x2f>
c0001840:	89 d3                	mov    ebx,edx
c0001842:	31 c0                	xor    eax,eax
c0001844:	83 e3 fe             	and    ebx,0xfffffffe
c0001847:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c000184c:	74 06                	je     c0001854 <dlmalloc_usable_size+0x2f>
c000184e:	83 e2 fc             	and    edx,0xfffffffc
c0001851:	8d 42 fc             	lea    eax,[edx-0x4]
c0001854:	5b                   	pop    ebx
c0001855:	c3                   	ret    

c0001856 <dlmallinfo>:
c0001856:	55                   	push   ebp
c0001857:	57                   	push   edi
c0001858:	56                   	push   esi
c0001859:	53                   	push   ebx
c000185a:	83 ec 08             	sub    esp,0x8
c000185d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001861:	83 3d 0c c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c60c,0x0
c0001868:	75 0a                	jne    c0001874 <dlmallinfo+0x1e>
c000186a:	b8 e0 c5 02 c0       	mov    eax,0xc002c5e0
c000186f:	e8 11 f2 ff ff       	call   c0000a85 <malloc_consolidate>
c0001874:	a1 0c c6 02 c0       	mov    eax,ds:0xc002c60c
c0001879:	31 ed                	xor    ebp,ebp
c000187b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000187e:	31 c9                	xor    ecx,ecx
c0001880:	83 e0 fc             	and    eax,0xfffffffc
c0001883:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001887:	31 c0                	xor    eax,eax
c0001889:	8b 14 85 e4 c5 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3a1c]
c0001890:	85 d2                	test   edx,edx
c0001892:	74 0e                	je     c00018a2 <dlmallinfo+0x4c>
c0001894:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001897:	45                   	inc    ebp
c0001898:	83 e6 fc             	and    esi,0xfffffffc
c000189b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000189e:	01 f1                	add    ecx,esi
c00018a0:	eb ee                	jmp    c0001890 <dlmallinfo+0x3a>
c00018a2:	40                   	inc    eax
c00018a3:	83 f8 0a             	cmp    eax,0xa
c00018a6:	75 e1                	jne    c0001889 <dlmallinfo+0x33>
c00018a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018ac:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00018b3:	8d 14 01             	lea    edx,[ecx+eax*1]
c00018b6:	b8 14 c6 02 c0       	mov    eax,0xc002c614
c00018bb:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00018be:	39 f0                	cmp    eax,esi
c00018c0:	74 10                	je     c00018d2 <dlmallinfo+0x7c>
c00018c2:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00018c5:	ff 04 24             	inc    DWORD PTR [esp]
c00018c8:	83 e7 fc             	and    edi,0xfffffffc
c00018cb:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c00018ce:	01 fa                	add    edx,edi
c00018d0:	eb ec                	jmp    c00018be <dlmallinfo+0x68>
c00018d2:	83 c0 08             	add    eax,0x8
c00018d5:	3d 0c c9 02 c0       	cmp    eax,0xc002c90c
c00018da:	75 df                	jne    c00018bb <dlmallinfo+0x65>
c00018dc:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c00018df:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00018e2:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c00018e5:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c00018ea:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00018ed:	89 03                	mov    DWORD PTR [ebx],eax
c00018ef:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c00018f2:	8b 35 30 c9 02 c0    	mov    esi,DWORD PTR ds:0xc002c930
c00018f8:	29 d0                	sub    eax,edx
c00018fa:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c00018fd:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001900:	8b 35 44 c9 02 c0    	mov    esi,DWORD PTR ds:0xc002c944
c0001906:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000190a:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c000190d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001910:	8b 35 54 c9 02 c0    	mov    esi,DWORD PTR ds:0xc002c954
c0001916:	89 d8                	mov    eax,ebx
c0001918:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000191b:	83 c4 08             	add    esp,0x8
c000191e:	5b                   	pop    ebx
c000191f:	5e                   	pop    esi
c0001920:	5f                   	pop    edi
c0001921:	5d                   	pop    ebp
c0001922:	c2 04 00             	ret    0x4

c0001925 <dlmalloc_stats>:
c0001925:	83 ec 30             	sub    esp,0x30
c0001928:	8d 44 24 08          	lea    eax,[esp+0x8]
c000192c:	50                   	push   eax
c000192d:	e8 24 ff ff ff       	call   c0001856 <dlmallinfo>
c0001932:	83 c4 30             	add    esp,0x30
c0001935:	c3                   	ret    

c0001936 <dlmallopt>:
c0001936:	56                   	push   esi
c0001937:	b8 e0 c5 02 c0       	mov    eax,0xc002c5e0
c000193c:	53                   	push   ebx
c000193d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001941:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001945:	e8 3b f1 ff ff       	call   c0000a85 <malloc_consolidate>
c000194a:	8d 46 04             	lea    eax,[esi+0x4]
c000194d:	83 f8 05             	cmp    eax,0x5
c0001950:	77 67                	ja     c00019b9 <dlmallopt+0x83>
c0001952:	ff 24 85 44 7d 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd82bc]
c0001959:	83 fb 50             	cmp    ebx,0x50
c000195c:	77 5b                	ja     c00019b9 <dlmallopt+0x83>
c000195e:	ba 08 00 00 00       	mov    edx,0x8
c0001963:	85 db                	test   ebx,ebx
c0001965:	74 12                	je     c0001979 <dlmallopt+0x43>
c0001967:	83 c3 0b             	add    ebx,0xb
c000196a:	ba 10 00 00 00       	mov    edx,0x10
c000196f:	83 fb 0f             	cmp    ebx,0xf
c0001972:	76 05                	jbe    c0001979 <dlmallopt+0x43>
c0001974:	89 da                	mov    edx,ebx
c0001976:	83 e2 f8             	and    edx,0xfffffff8
c0001979:	a1 e0 c5 02 c0       	mov    eax,ds:0xc002c5e0
c000197e:	83 e0 03             	and    eax,0x3
c0001981:	09 d0                	or     eax,edx
c0001983:	a3 e0 c5 02 c0       	mov    ds:0xc002c5e0,eax
c0001988:	eb 31                	jmp    c00019bb <dlmallopt+0x85>
c000198a:	89 1d 24 c9 02 c0    	mov    DWORD PTR ds:0xc002c924,ebx
c0001990:	eb 06                	jmp    c0001998 <dlmallopt+0x62>
c0001992:	89 1d 28 c9 02 c0    	mov    DWORD PTR ds:0xc002c928,ebx
c0001998:	be 01 00 00 00       	mov    esi,0x1
c000199d:	eb 1c                	jmp    c00019bb <dlmallopt+0x85>
c000199f:	89 1d 2c c9 02 c0    	mov    DWORD PTR ds:0xc002c92c,ebx
c00019a5:	eb f1                	jmp    c0001998 <dlmallopt+0x62>
c00019a7:	31 f6                	xor    esi,esi
c00019a9:	85 db                	test   ebx,ebx
c00019ab:	75 0e                	jne    c00019bb <dlmallopt+0x85>
c00019ad:	c7 05 34 c9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c934,0x0
c00019b7:	eb df                	jmp    c0001998 <dlmallopt+0x62>
c00019b9:	31 f6                	xor    esi,esi
c00019bb:	89 f0                	mov    eax,esi
c00019bd:	5b                   	pop    ebx
c00019be:	5e                   	pop    esi
c00019bf:	c3                   	ret    

c00019c0 <disk_status>:
c00019c0:	31 c0                	xor    eax,eax
c00019c2:	c3                   	ret    

c00019c3 <disk_initialize>:
c00019c3:	31 c0                	xor    eax,eax
c00019c5:	c3                   	ret    

c00019c6 <disk_read>:
c00019c6:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00019cb:	0f b6 04 85 a0 e0 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd1f60]
c00019d3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019d7:	e9 c0 e3 01 00       	jmp    c001fd9c <fatWrapperReadDisk>

c00019dc <disk_write>:
c00019dc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00019e1:	0f b6 04 85 a0 e0 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd1f60]
c00019e9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019ed:	e9 f1 e3 01 00       	jmp    c001fde3 <fatWrapperWriteDisk>

c00019f2 <disk_ioctl>:
c00019f2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00019f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00019fb:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a00:	0f b6 04 85 a0 e0 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd1f60]
c0001a08:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a0c:	e9 19 e4 01 00       	jmp    c001fe2a <fatWrapperIoctl>

c0001a11 <ld_word>:
c0001a11:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a15:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a18:	c1 e2 08             	shl    edx,0x8
c0001a1b:	09 d0                	or     eax,edx
c0001a1d:	c3                   	ret    

c0001a1e <ld_dword>:
c0001a1e:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001a22:	89 d1                	mov    ecx,edx
c0001a24:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a28:	c1 e1 08             	shl    ecx,0x8
c0001a2b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a2e:	09 ca                	or     edx,ecx
c0001a30:	c1 e2 08             	shl    edx,0x8
c0001a33:	09 d0                	or     eax,edx
c0001a35:	c3                   	ret    

c0001a36 <ld_qword>:
c0001a36:	57                   	push   edi
c0001a37:	56                   	push   esi
c0001a38:	53                   	push   ebx
c0001a39:	31 db                	xor    ebx,ebx
c0001a3b:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001a3e:	89 df                	mov    edi,ebx
c0001a40:	89 ce                	mov    esi,ecx
c0001a42:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001a46:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a4a:	c1 e6 08             	shl    esi,0x8
c0001a4d:	09 f2                	or     edx,esi
c0001a4f:	89 d6                	mov    esi,edx
c0001a51:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001a55:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a59:	c1 e6 08             	shl    esi,0x8
c0001a5c:	09 f2                	or     edx,esi
c0001a5e:	89 d6                	mov    esi,edx
c0001a60:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a64:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a68:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a6b:	c1 e6 08             	shl    esi,0x8
c0001a6e:	89 fb                	mov    ebx,edi
c0001a70:	09 f2                	or     edx,esi
c0001a72:	89 d1                	mov    ecx,edx
c0001a74:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001a78:	c1 e1 08             	shl    ecx,0x8
c0001a7b:	89 da                	mov    edx,ebx
c0001a7d:	09 c8                	or     eax,ecx
c0001a7f:	5b                   	pop    ebx
c0001a80:	5e                   	pop    esi
c0001a81:	5f                   	pop    edi
c0001a82:	c3                   	ret    

c0001a83 <st_word>:
c0001a83:	66 89 10             	mov    WORD PTR [eax],dx
c0001a86:	c3                   	ret    

c0001a87 <st_dword>:
c0001a87:	89 10                	mov    DWORD PTR [eax],edx
c0001a89:	c3                   	ret    

c0001a8a <st_qword>:
c0001a8a:	89 10                	mov    DWORD PTR [eax],edx
c0001a8c:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001a8f:	c3                   	ret    

c0001a90 <mem_cpy>:
c0001a90:	85 c9                	test   ecx,ecx
c0001a92:	74 10                	je     c0001aa4 <mem_cpy+0x14>
c0001a94:	57                   	push   edi
c0001a95:	01 c1                	add    ecx,eax
c0001a97:	56                   	push   esi
c0001a98:	89 c7                	mov    edi,eax
c0001a9a:	89 d6                	mov    esi,edx
c0001a9c:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001a9d:	39 f9                	cmp    ecx,edi
c0001a9f:	75 fb                	jne    c0001a9c <mem_cpy+0xc>
c0001aa1:	5e                   	pop    esi
c0001aa2:	5f                   	pop    edi
c0001aa3:	c3                   	ret    
c0001aa4:	c3                   	ret    

c0001aa5 <mem_set>:
c0001aa5:	01 c1                	add    ecx,eax
c0001aa7:	40                   	inc    eax
c0001aa8:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001aab:	39 c8                	cmp    eax,ecx
c0001aad:	75 f8                	jne    c0001aa7 <mem_set+0x2>
c0001aaf:	c3                   	ret    

c0001ab0 <mem_cmp>:
c0001ab0:	57                   	push   edi
c0001ab1:	56                   	push   esi
c0001ab2:	89 c6                	mov    esi,eax
c0001ab4:	53                   	push   ebx
c0001ab5:	46                   	inc    esi
c0001ab6:	42                   	inc    edx
c0001ab7:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001abb:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001abf:	29 fb                	sub    ebx,edi
c0001ac1:	89 cf                	mov    edi,ecx
c0001ac3:	29 f7                	sub    edi,esi
c0001ac5:	01 c7                	add    edi,eax
c0001ac7:	74 04                	je     c0001acd <mem_cmp+0x1d>
c0001ac9:	85 db                	test   ebx,ebx
c0001acb:	74 e8                	je     c0001ab5 <mem_cmp+0x5>
c0001acd:	89 d8                	mov    eax,ebx
c0001acf:	5b                   	pop    ebx
c0001ad0:	5e                   	pop    esi
c0001ad1:	5f                   	pop    edi
c0001ad2:	c3                   	ret    

c0001ad3 <chk_chr>:
c0001ad3:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001ad6:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001ad9:	74 07                	je     c0001ae2 <chk_chr+0xf>
c0001adb:	39 d1                	cmp    ecx,edx
c0001add:	74 03                	je     c0001ae2 <chk_chr+0xf>
c0001adf:	40                   	inc    eax
c0001ae0:	eb f1                	jmp    c0001ad3 <chk_chr>
c0001ae2:	89 c8                	mov    eax,ecx
c0001ae4:	c3                   	ret    

c0001ae5 <dbc_1st>:
c0001ae5:	31 c0                	xor    eax,eax
c0001ae7:	c3                   	ret    

c0001ae8 <dbc_2nd>:
c0001ae8:	31 c0                	xor    eax,eax
c0001aea:	c3                   	ret    

c0001aeb <tchar2uni>:
c0001aeb:	57                   	push   edi
c0001aec:	89 c7                	mov    edi,eax
c0001aee:	56                   	push   esi
c0001aef:	53                   	push   ebx
c0001af0:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001af2:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001af4:	8d 73 01             	lea    esi,[ebx+0x1]
c0001af7:	84 c9                	test   cl,cl
c0001af9:	78 0a                	js     c0001b05 <tchar2uni+0x1a>
c0001afb:	0f b6 d1             	movzx  edx,cl
c0001afe:	89 f3                	mov    ebx,esi
c0001b00:	e9 9f 00 00 00       	jmp    c0001ba4 <tchar2uni+0xb9>
c0001b05:	88 ca                	mov    dl,cl
c0001b07:	83 e2 e0             	and    edx,0xffffffe0
c0001b0a:	80 fa c0             	cmp    dl,0xc0
c0001b0d:	75 0c                	jne    c0001b1b <tchar2uni+0x30>
c0001b0f:	89 ca                	mov    edx,ecx
c0001b11:	b9 01 00 00 00       	mov    ecx,0x1
c0001b16:	83 e2 1f             	and    edx,0x1f
c0001b19:	eb 2e                	jmp    c0001b49 <tchar2uni+0x5e>
c0001b1b:	88 ca                	mov    dl,cl
c0001b1d:	83 e2 f0             	and    edx,0xfffffff0
c0001b20:	80 fa e0             	cmp    dl,0xe0
c0001b23:	75 0c                	jne    c0001b31 <tchar2uni+0x46>
c0001b25:	89 ca                	mov    edx,ecx
c0001b27:	b9 02 00 00 00       	mov    ecx,0x2
c0001b2c:	83 e2 0f             	and    edx,0xf
c0001b2f:	eb 18                	jmp    c0001b49 <tchar2uni+0x5e>
c0001b31:	88 ca                	mov    dl,cl
c0001b33:	83 e2 f8             	and    edx,0xfffffff8
c0001b36:	88 d0                	mov    al,dl
c0001b38:	83 ca ff             	or     edx,0xffffffff
c0001b3b:	3c f0                	cmp    al,0xf0
c0001b3d:	75 6c                	jne    c0001bab <tchar2uni+0xc0>
c0001b3f:	89 ca                	mov    edx,ecx
c0001b41:	b9 03 00 00 00       	mov    ecx,0x3
c0001b46:	83 e2 07             	and    edx,0x7
c0001b49:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001b4d:	46                   	inc    esi
c0001b4e:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001b51:	88 c8                	mov    al,cl
c0001b53:	83 e0 c0             	and    eax,0xffffffc0
c0001b56:	3c 80                	cmp    al,0x80
c0001b58:	75 4e                	jne    c0001ba8 <tchar2uni+0xbd>
c0001b5a:	c1 e2 06             	shl    edx,0x6
c0001b5d:	83 e1 3f             	and    ecx,0x3f
c0001b60:	09 ca                	or     edx,ecx
c0001b62:	39 de                	cmp    esi,ebx
c0001b64:	75 e7                	jne    c0001b4d <tchar2uni+0x62>
c0001b66:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001b69:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001b6f:	77 37                	ja     c0001ba8 <tchar2uni+0xbd>
c0001b71:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001b77:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001b7d:	76 29                	jbe    c0001ba8 <tchar2uni+0xbd>
c0001b7f:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001b85:	76 1d                	jbe    c0001ba4 <tchar2uni+0xb9>
c0001b87:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001b8d:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001b93:	c1 e1 06             	shl    ecx,0x6
c0001b96:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001b9c:	09 ca                	or     edx,ecx
c0001b9e:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001ba4:	89 1f                	mov    DWORD PTR [edi],ebx
c0001ba6:	eb 03                	jmp    c0001bab <tchar2uni+0xc0>
c0001ba8:	83 ca ff             	or     edx,0xffffffff
c0001bab:	5b                   	pop    ebx
c0001bac:	89 d0                	mov    eax,edx
c0001bae:	5e                   	pop    esi
c0001baf:	5f                   	pop    edi
c0001bb0:	c3                   	ret    

c0001bb1 <put_utf>:
c0001bb1:	53                   	push   ebx
c0001bb2:	83 f8 7f             	cmp    eax,0x7f
c0001bb5:	89 c3                	mov    ebx,eax
c0001bb7:	b0 00                	mov    al,0x0
c0001bb9:	77 11                	ja     c0001bcc <put_utf+0x1b>
c0001bbb:	85 c9                	test   ecx,ecx
c0001bbd:	0f 84 e5 00 00 00    	je     c0001ca8 <put_utf+0xf7>
c0001bc3:	88 1a                	mov    BYTE PTR [edx],bl
c0001bc5:	b0 01                	mov    al,0x1
c0001bc7:	e9 dc 00 00 00       	jmp    c0001ca8 <put_utf+0xf7>
c0001bcc:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001bd2:	77 23                	ja     c0001bf7 <put_utf+0x46>
c0001bd4:	83 f9 01             	cmp    ecx,0x1
c0001bd7:	0f 86 cb 00 00 00    	jbe    c0001ca8 <put_utf+0xf7>
c0001bdd:	89 d8                	mov    eax,ebx
c0001bdf:	83 e3 3f             	and    ebx,0x3f
c0001be2:	c1 e8 06             	shr    eax,0x6
c0001be5:	83 cb 80             	or     ebx,0xffffff80
c0001be8:	83 c8 c0             	or     eax,0xffffffc0
c0001beb:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001bee:	88 02                	mov    BYTE PTR [edx],al
c0001bf0:	b0 02                	mov    al,0x2
c0001bf2:	e9 b1 00 00 00       	jmp    c0001ca8 <put_utf+0xf7>
c0001bf7:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001bfd:	77 40                	ja     c0001c3f <put_utf+0x8e>
c0001bff:	83 f9 02             	cmp    ecx,0x2
c0001c02:	0f 86 a0 00 00 00    	jbe    c0001ca8 <put_utf+0xf7>
c0001c08:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001c0e:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001c14:	0f 86 8e 00 00 00    	jbe    c0001ca8 <put_utf+0xf7>
c0001c1a:	89 d8                	mov    eax,ebx
c0001c1c:	c1 e8 0c             	shr    eax,0xc
c0001c1f:	83 c8 e0             	or     eax,0xffffffe0
c0001c22:	88 02                	mov    BYTE PTR [edx],al
c0001c24:	89 d8                	mov    eax,ebx
c0001c26:	83 e3 3f             	and    ebx,0x3f
c0001c29:	c1 e8 06             	shr    eax,0x6
c0001c2c:	83 cb 80             	or     ebx,0xffffff80
c0001c2f:	83 e0 3f             	and    eax,0x3f
c0001c32:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001c35:	83 c8 80             	or     eax,0xffffff80
c0001c38:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c3b:	b0 03                	mov    al,0x3
c0001c3d:	eb 69                	jmp    c0001ca8 <put_utf+0xf7>
c0001c3f:	83 f9 03             	cmp    ecx,0x3
c0001c42:	76 64                	jbe    c0001ca8 <put_utf+0xf7>
c0001c44:	89 d9                	mov    ecx,ebx
c0001c46:	0f b7 c3             	movzx  eax,bx
c0001c49:	66 31 c9             	xor    cx,cx
c0001c4c:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001c52:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001c58:	c1 e9 06             	shr    ecx,0x6
c0001c5b:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001c61:	77 43                	ja     c0001ca6 <put_utf+0xf5>
c0001c63:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001c69:	77 3b                	ja     c0001ca6 <put_utf+0xf5>
c0001c6b:	09 cb                	or     ebx,ecx
c0001c6d:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001c73:	89 d8                	mov    eax,ebx
c0001c75:	c1 e8 12             	shr    eax,0x12
c0001c78:	83 c8 f0             	or     eax,0xfffffff0
c0001c7b:	88 02                	mov    BYTE PTR [edx],al
c0001c7d:	89 d8                	mov    eax,ebx
c0001c7f:	c1 e8 0c             	shr    eax,0xc
c0001c82:	83 e0 3f             	and    eax,0x3f
c0001c85:	83 c8 80             	or     eax,0xffffff80
c0001c88:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c8b:	89 d8                	mov    eax,ebx
c0001c8d:	83 e3 3f             	and    ebx,0x3f
c0001c90:	c1 e8 06             	shr    eax,0x6
c0001c93:	83 cb 80             	or     ebx,0xffffff80
c0001c96:	83 e0 3f             	and    eax,0x3f
c0001c99:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001c9c:	83 c8 80             	or     eax,0xffffff80
c0001c9f:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001ca2:	b0 04                	mov    al,0x4
c0001ca4:	eb 02                	jmp    c0001ca8 <put_utf+0xf7>
c0001ca6:	31 c0                	xor    eax,eax
c0001ca8:	5b                   	pop    ebx
c0001ca9:	c3                   	ret    

c0001caa <clst2sect>:
c0001caa:	89 c1                	mov    ecx,eax
c0001cac:	83 ea 02             	sub    edx,0x2
c0001caf:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001cb2:	83 e8 02             	sub    eax,0x2
c0001cb5:	39 d0                	cmp    eax,edx
c0001cb7:	76 0d                	jbe    c0001cc6 <clst2sect+0x1c>
c0001cb9:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001cbd:	f7 e2                	mul    edx
c0001cbf:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001cc2:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001cc5:	c3                   	ret    
c0001cc6:	31 c0                	xor    eax,eax
c0001cc8:	31 d2                	xor    edx,edx
c0001cca:	c3                   	ret    

c0001ccb <clmt_clust>:
c0001ccb:	57                   	push   edi
c0001ccc:	89 cf                	mov    edi,ecx
c0001cce:	56                   	push   esi
c0001ccf:	89 d6                	mov    esi,edx
c0001cd1:	53                   	push   ebx
c0001cd2:	0f ac fe 09          	shrd   esi,edi,0x9
c0001cd6:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001cd9:	89 f2                	mov    edx,esi
c0001cdb:	8b 00                	mov    eax,DWORD PTR [eax]
c0001cdd:	c1 ef 09             	shr    edi,0x9
c0001ce0:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001ce4:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001ce7:	89 f9                	mov    ecx,edi
c0001ce9:	31 ff                	xor    edi,edi
c0001ceb:	57                   	push   edi
c0001cec:	56                   	push   esi
c0001ced:	51                   	push   ecx
c0001cee:	52                   	push   edx
c0001cef:	e8 38 37 02 00       	call   c002542c <__udivdi3>
c0001cf4:	83 c4 10             	add    esp,0x10
c0001cf7:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001cf9:	85 d2                	test   edx,edx
c0001cfb:	74 10                	je     c0001d0d <clmt_clust+0x42>
c0001cfd:	39 d0                	cmp    eax,edx
c0001cff:	72 07                	jb     c0001d08 <clmt_clust+0x3d>
c0001d01:	29 d0                	sub    eax,edx
c0001d03:	83 c3 08             	add    ebx,0x8
c0001d06:	eb ef                	jmp    c0001cf7 <clmt_clust+0x2c>
c0001d08:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001d0b:	89 c2                	mov    edx,eax
c0001d0d:	5b                   	pop    ebx
c0001d0e:	89 d0                	mov    eax,edx
c0001d10:	5e                   	pop    esi
c0001d11:	5f                   	pop    edi
c0001d12:	c3                   	ret    

c0001d13 <pick_lfn>:
c0001d13:	55                   	push   ebp
c0001d14:	57                   	push   edi
c0001d15:	56                   	push   esi
c0001d16:	89 d6                	mov    esi,edx
c0001d18:	53                   	push   ebx
c0001d19:	89 c3                	mov    ebx,eax
c0001d1b:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d1e:	e8 ee fc ff ff       	call   c0001a11 <ld_word>
c0001d23:	66 85 c0             	test   ax,ax
c0001d26:	74 04                	je     c0001d2c <pick_lfn+0x19>
c0001d28:	31 c0                	xor    eax,eax
c0001d2a:	eb 5c                	jmp    c0001d88 <pick_lfn+0x75>
c0001d2c:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001d2f:	bd 01 00 00 00       	mov    ebp,0x1
c0001d34:	83 e1 bf             	and    ecx,0xffffffbf
c0001d37:	31 ff                	xor    edi,edi
c0001d39:	49                   	dec    ecx
c0001d3a:	6b c9 0d             	imul   ecx,ecx,0xd
c0001d3d:	0f b6 87 60 7e 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd81a0]
c0001d44:	01 f0                	add    eax,esi
c0001d46:	e8 c6 fc ff ff       	call   c0001a11 <ld_word>
c0001d4b:	66 85 ed             	test   bp,bp
c0001d4e:	74 11                	je     c0001d61 <pick_lfn+0x4e>
c0001d50:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001d56:	77 d0                	ja     c0001d28 <pick_lfn+0x15>
c0001d58:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001d5c:	89 c5                	mov    ebp,eax
c0001d5e:	41                   	inc    ecx
c0001d5f:	eb 04                	jmp    c0001d65 <pick_lfn+0x52>
c0001d61:	66 40                	inc    ax
c0001d63:	75 c3                	jne    c0001d28 <pick_lfn+0x15>
c0001d65:	47                   	inc    edi
c0001d66:	83 ff 0d             	cmp    edi,0xd
c0001d69:	75 d2                	jne    c0001d3d <pick_lfn+0x2a>
c0001d6b:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001d6e:	74 13                	je     c0001d83 <pick_lfn+0x70>
c0001d70:	66 85 ed             	test   bp,bp
c0001d73:	74 0e                	je     c0001d83 <pick_lfn+0x70>
c0001d75:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001d7b:	77 ab                	ja     c0001d28 <pick_lfn+0x15>
c0001d7d:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001d83:	b8 01 00 00 00       	mov    eax,0x1
c0001d88:	5b                   	pop    ebx
c0001d89:	5e                   	pop    esi
c0001d8a:	5f                   	pop    edi
c0001d8b:	5d                   	pop    ebp
c0001d8c:	c3                   	ret    

c0001d8d <put_lfn>:
c0001d8d:	55                   	push   ebp
c0001d8e:	31 ed                	xor    ebp,ebp
c0001d90:	57                   	push   edi
c0001d91:	89 d7                	mov    edi,edx
c0001d93:	56                   	push   esi
c0001d94:	31 f6                	xor    esi,esi
c0001d96:	53                   	push   ebx
c0001d97:	83 ec 08             	sub    esp,0x8
c0001d9a:	89 04 24             	mov    DWORD PTR [esp],eax
c0001d9d:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001da1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001da5:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001dab:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001dae:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001db1:	31 d2                	xor    edx,edx
c0001db3:	e8 cb fc ff ff       	call   c0001a83 <st_word>
c0001db8:	0f b6 d9             	movzx  ebx,cl
c0001dbb:	4b                   	dec    ebx
c0001dbc:	6b db 0d             	imul   ebx,ebx,0xd
c0001dbf:	66 83 fe ff          	cmp    si,0xffff
c0001dc3:	74 08                	je     c0001dcd <put_lfn+0x40>
c0001dc5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001dc8:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001dcc:	43                   	inc    ebx
c0001dcd:	0f b6 85 60 7e 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd81a0]
c0001dd4:	0f b7 d6             	movzx  edx,si
c0001dd7:	01 f8                	add    eax,edi
c0001dd9:	e8 a5 fc ff ff       	call   c0001a83 <st_word>
c0001dde:	66 85 f6             	test   si,si
c0001de1:	75 03                	jne    c0001de6 <put_lfn+0x59>
c0001de3:	83 ce ff             	or     esi,0xffffffff
c0001de6:	45                   	inc    ebp
c0001de7:	83 fd 0d             	cmp    ebp,0xd
c0001dea:	75 d3                	jne    c0001dbf <put_lfn+0x32>
c0001dec:	66 46                	inc    si
c0001dee:	74 0a                	je     c0001dfa <put_lfn+0x6d>
c0001df0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001df3:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001df8:	75 09                	jne    c0001e03 <put_lfn+0x76>
c0001dfa:	88 c8                	mov    al,cl
c0001dfc:	83 c8 40             	or     eax,0x40
c0001dff:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001e03:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001e07:	88 07                	mov    BYTE PTR [edi],al
c0001e09:	83 c4 08             	add    esp,0x8
c0001e0c:	5b                   	pop    ebx
c0001e0d:	5e                   	pop    esi
c0001e0e:	5f                   	pop    edi
c0001e0f:	5d                   	pop    ebp
c0001e10:	c3                   	ret    

c0001e11 <gen_numname>:
c0001e11:	57                   	push   edi
c0001e12:	89 cf                	mov    edi,ecx
c0001e14:	56                   	push   esi
c0001e15:	b9 0b 00 00 00       	mov    ecx,0xb
c0001e1a:	53                   	push   ebx
c0001e1b:	89 c6                	mov    esi,eax
c0001e1d:	83 ec 10             	sub    esp,0x10
c0001e20:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001e24:	e8 67 fc ff ff       	call   c0001a90 <mem_cpy>
c0001e29:	83 fb 05             	cmp    ebx,0x5
c0001e2c:	76 2d                	jbe    c0001e5b <gen_numname+0x4a>
c0001e2e:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001e31:	66 85 c0             	test   ax,ax
c0001e34:	74 25                	je     c0001e5b <gen_numname+0x4a>
c0001e36:	83 c7 02             	add    edi,0x2
c0001e39:	ba 10 00 00 00       	mov    edx,0x10
c0001e3e:	01 db                	add    ebx,ebx
c0001e40:	89 c1                	mov    ecx,eax
c0001e42:	66 d1 e8             	shr    ax,1
c0001e45:	83 e1 01             	and    ecx,0x1
c0001e48:	01 cb                	add    ebx,ecx
c0001e4a:	0f ba e3 10          	bt     ebx,0x10
c0001e4e:	73 06                	jae    c0001e56 <gen_numname+0x45>
c0001e50:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001e56:	4a                   	dec    edx
c0001e57:	75 e5                	jne    c0001e3e <gen_numname+0x2d>
c0001e59:	eb d3                	jmp    c0001e2e <gen_numname+0x1d>
c0001e5b:	b8 07 00 00 00       	mov    eax,0x7
c0001e60:	88 d9                	mov    cl,bl
c0001e62:	83 e1 0f             	and    ecx,0xf
c0001e65:	8d 51 30             	lea    edx,[ecx+0x30]
c0001e68:	80 fa 39             	cmp    dl,0x39
c0001e6b:	76 03                	jbe    c0001e70 <gen_numname+0x5f>
c0001e6d:	8d 51 37             	lea    edx,[ecx+0x37]
c0001e70:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001e73:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001e77:	89 da                	mov    edx,ebx
c0001e79:	c1 ea 04             	shr    edx,0x4
c0001e7c:	83 fb 0f             	cmp    ebx,0xf
c0001e7f:	76 06                	jbe    c0001e87 <gen_numname+0x76>
c0001e81:	89 c8                	mov    eax,ecx
c0001e83:	89 d3                	mov    ebx,edx
c0001e85:	eb d9                	jmp    c0001e60 <gen_numname+0x4f>
c0001e87:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001e8c:	31 d2                	xor    edx,edx
c0001e8e:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001e91:	8d 04 16             	lea    eax,[esi+edx*1]
c0001e94:	39 ca                	cmp    edx,ecx
c0001e96:	73 18                	jae    c0001eb0 <gen_numname+0x9f>
c0001e98:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e9b:	3c 20                	cmp    al,0x20
c0001e9d:	74 11                	je     c0001eb0 <gen_numname+0x9f>
c0001e9f:	e8 41 fc ff ff       	call   c0001ae5 <dbc_1st>
c0001ea4:	85 c0                	test   eax,eax
c0001ea6:	74 05                	je     c0001ead <gen_numname+0x9c>
c0001ea8:	39 d3                	cmp    ebx,edx
c0001eaa:	74 04                	je     c0001eb0 <gen_numname+0x9f>
c0001eac:	42                   	inc    edx
c0001ead:	42                   	inc    edx
c0001eae:	eb e1                	jmp    c0001e91 <gen_numname+0x80>
c0001eb0:	b0 20                	mov    al,0x20
c0001eb2:	83 f9 07             	cmp    ecx,0x7
c0001eb5:	77 05                	ja     c0001ebc <gen_numname+0xab>
c0001eb7:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001ebb:	41                   	inc    ecx
c0001ebc:	42                   	inc    edx
c0001ebd:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001ec1:	83 fa 07             	cmp    edx,0x7
c0001ec4:	76 ea                	jbe    c0001eb0 <gen_numname+0x9f>
c0001ec6:	83 c4 10             	add    esp,0x10
c0001ec9:	5b                   	pop    ebx
c0001eca:	5e                   	pop    esi
c0001ecb:	5f                   	pop    edi
c0001ecc:	c3                   	ret    

c0001ecd <sum_sfn>:
c0001ecd:	31 c9                	xor    ecx,ecx
c0001ecf:	31 d2                	xor    edx,edx
c0001ed1:	d0 ca                	ror    dl,1
c0001ed3:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001ed6:	41                   	inc    ecx
c0001ed7:	83 f9 0b             	cmp    ecx,0xb
c0001eda:	75 f5                	jne    c0001ed1 <sum_sfn+0x4>
c0001edc:	88 d0                	mov    al,dl
c0001ede:	c3                   	ret    

c0001edf <xdir_sum>:
c0001edf:	56                   	push   esi
c0001ee0:	31 c9                	xor    ecx,ecx
c0001ee2:	53                   	push   ebx
c0001ee3:	31 d2                	xor    edx,edx
c0001ee5:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001ee9:	43                   	inc    ebx
c0001eea:	c1 e3 05             	shl    ebx,0x5
c0001eed:	83 fa 02             	cmp    edx,0x2
c0001ef0:	74 0b                	je     c0001efd <xdir_sum+0x1e>
c0001ef2:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001ef6:	66 d1 c9             	ror    cx,1
c0001ef9:	01 f1                	add    ecx,esi
c0001efb:	eb 05                	jmp    c0001f02 <xdir_sum+0x23>
c0001efd:	ba 03 00 00 00       	mov    edx,0x3
c0001f02:	42                   	inc    edx
c0001f03:	39 d3                	cmp    ebx,edx
c0001f05:	77 e6                	ja     c0001eed <xdir_sum+0xe>
c0001f07:	89 c8                	mov    eax,ecx
c0001f09:	5b                   	pop    ebx
c0001f0a:	5e                   	pop    esi
c0001f0b:	c3                   	ret    

c0001f0c <xsum32>:
c0001f0c:	d1 ca                	ror    edx,1
c0001f0e:	0f b6 c0             	movzx  eax,al
c0001f11:	01 d0                	add    eax,edx
c0001f13:	c3                   	ret    

c0001f14 <get_xfileinfo>:
c0001f14:	55                   	push   ebp
c0001f15:	31 c9                	xor    ecx,ecx
c0001f17:	57                   	push   edi
c0001f18:	bd 40 00 00 00       	mov    ebp,0x40
c0001f1d:	56                   	push   esi
c0001f1e:	31 ff                	xor    edi,edi
c0001f20:	53                   	push   ebx
c0001f21:	89 c6                	mov    esi,eax
c0001f23:	83 ec 0c             	sub    esp,0xc
c0001f26:	89 d3                	mov    ebx,edx
c0001f28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001f2f:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001f33:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001f36:	76 6d                	jbe    c0001fa5 <get_xfileinfo+0x91>
c0001f38:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001f3e:	76 0b                	jbe    c0001f4b <get_xfileinfo+0x37>
c0001f40:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001f44:	bf 01 00 00 00       	mov    edi,0x1
c0001f49:	eb 63                	jmp    c0001fae <get_xfileinfo+0x9a>
c0001f4b:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001f51:	75 03                	jne    c0001f56 <get_xfileinfo+0x42>
c0001f53:	83 c5 02             	add    ebp,0x2
c0001f56:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001f59:	83 c5 02             	add    ebp,0x2
c0001f5c:	e8 b0 fa ff ff       	call   c0001a11 <ld_word>
c0001f61:	ff 04 24             	inc    DWORD PTR [esp]
c0001f64:	66 85 c9             	test   cx,cx
c0001f67:	75 0d                	jne    c0001f76 <get_xfileinfo+0x62>
c0001f69:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001f6f:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001f74:	76 2b                	jbe    c0001fa1 <get_xfileinfo+0x8d>
c0001f76:	c1 e1 10             	shl    ecx,0x10
c0001f79:	ba ff 00 00 00       	mov    edx,0xff
c0001f7e:	0f b7 c0             	movzx  eax,ax
c0001f81:	29 fa                	sub    edx,edi
c0001f83:	09 c8                	or     eax,ecx
c0001f85:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001f89:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001f8d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001f91:	e8 1b fc ff ff       	call   c0001bb1 <put_utf>
c0001f96:	84 c0                	test   al,al
c0001f98:	74 a6                	je     c0001f40 <get_xfileinfo+0x2c>
c0001f9a:	0f b6 c0             	movzx  eax,al
c0001f9d:	01 c7                	add    edi,eax
c0001f9f:	31 c0                	xor    eax,eax
c0001fa1:	89 c1                	mov    ecx,eax
c0001fa3:	eb 8a                	jmp    c0001f2f <get_xfileinfo+0x1b>
c0001fa5:	85 ff                	test   edi,edi
c0001fa7:	74 97                	je     c0001f40 <get_xfileinfo+0x2c>
c0001fa9:	66 85 c9             	test   cx,cx
c0001fac:	75 92                	jne    c0001f40 <get_xfileinfo+0x2c>
c0001fae:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0001fb3:	31 c0                	xor    eax,eax
c0001fb5:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0001fb9:	31 d2                	xor    edx,edx
c0001fbb:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0001fbe:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0001fc1:	80 e1 10             	and    cl,0x10
c0001fc4:	75 08                	jne    c0001fce <get_xfileinfo+0xba>
c0001fc6:	8d 46 38             	lea    eax,[esi+0x38]
c0001fc9:	e8 68 fa ff ff       	call   c0001a36 <ld_qword>
c0001fce:	89 03                	mov    DWORD PTR [ebx],eax
c0001fd0:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001fd3:	8d 46 0c             	lea    eax,[esi+0xc]
c0001fd6:	e8 36 fa ff ff       	call   c0001a11 <ld_word>
c0001fdb:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0001fdf:	8d 46 0e             	lea    eax,[esi+0xe]
c0001fe2:	e8 2a fa ff ff       	call   c0001a11 <ld_word>
c0001fe7:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0001feb:	83 c4 0c             	add    esp,0xc
c0001fee:	5b                   	pop    ebx
c0001fef:	5e                   	pop    esi
c0001ff0:	5f                   	pop    edi
c0001ff1:	5d                   	pop    ebp
c0001ff2:	c3                   	ret    

c0001ff3 <get_ldnumber>:
c0001ff3:	8b 10                	mov    edx,DWORD PTR [eax]
c0001ff5:	85 d2                	test   edx,edx
c0001ff7:	74 14                	je     c000200d <get_ldnumber+0x1a>
c0001ff9:	56                   	push   esi
c0001ffa:	53                   	push   ebx
c0001ffb:	89 d3                	mov    ebx,edx
c0001ffd:	43                   	inc    ebx
c0001ffe:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002001:	80 f9 1f             	cmp    cl,0x1f
c0002004:	76 0d                	jbe    c0002013 <get_ldnumber+0x20>
c0002006:	80 f9 3a             	cmp    cl,0x3a
c0002009:	75 f2                	jne    c0001ffd <get_ldnumber+0xa>
c000200b:	eb 0a                	jmp    c0002017 <get_ldnumber+0x24>
c000200d:	83 c9 ff             	or     ecx,0xffffffff
c0002010:	89 c8                	mov    eax,ecx
c0002012:	c3                   	ret    
c0002013:	31 c9                	xor    ecx,ecx
c0002015:	eb 24                	jmp    c000203b <get_ldnumber+0x48>
c0002017:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000201a:	8d 4e d0             	lea    ecx,[esi-0x30]
c000201d:	80 f9 09             	cmp    cl,0x9
c0002020:	77 16                	ja     c0002038 <get_ldnumber+0x45>
c0002022:	83 c2 02             	add    edx,0x2
c0002025:	83 c9 ff             	or     ecx,0xffffffff
c0002028:	39 d3                	cmp    ebx,edx
c000202a:	75 0f                	jne    c000203b <get_ldnumber+0x48>
c000202c:	89 f2                	mov    edx,esi
c000202e:	89 18                	mov    DWORD PTR [eax],ebx
c0002030:	0f be ca             	movsx  ecx,dl
c0002033:	83 e9 30             	sub    ecx,0x30
c0002036:	eb 03                	jmp    c000203b <get_ldnumber+0x48>
c0002038:	83 c9 ff             	or     ecx,0xffffffff
c000203b:	89 c8                	mov    eax,ecx
c000203d:	5b                   	pop    ebx
c000203e:	5e                   	pop    esi
c000203f:	c3                   	ret    

c0002040 <crc32>:
c0002040:	56                   	push   esi
c0002041:	89 d6                	mov    esi,edx
c0002043:	53                   	push   ebx
c0002044:	b2 01                	mov    dl,0x1
c0002046:	bb 08 00 00 00       	mov    ebx,0x8
c000204b:	89 f1                	mov    ecx,esi
c000204d:	84 d1                	test   cl,dl
c000204f:	0f 95 c1             	setne  cl
c0002052:	0f b6 c9             	movzx  ecx,cl
c0002055:	31 c1                	xor    ecx,eax
c0002057:	89 c8                	mov    eax,ecx
c0002059:	d1 e8                	shr    eax,1
c000205b:	80 e1 01             	and    cl,0x1
c000205e:	74 05                	je     c0002065 <crc32+0x25>
c0002060:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0002065:	d1 e2                	shl    edx,1
c0002067:	4b                   	dec    ebx
c0002068:	75 e1                	jne    c000204b <crc32+0xb>
c000206a:	5b                   	pop    ebx
c000206b:	5e                   	pop    esi
c000206c:	c3                   	ret    

c000206d <test_gpt_header>:
c000206d:	55                   	push   ebp
c000206e:	b9 10 00 00 00       	mov    ecx,0x10
c0002073:	57                   	push   edi
c0002074:	ba 60 7d 02 c0       	mov    edx,0xc0027d60
c0002079:	56                   	push   esi
c000207a:	31 ff                	xor    edi,edi
c000207c:	53                   	push   ebx
c000207d:	89 c3                	mov    ebx,eax
c000207f:	e8 2c fa ff ff       	call   c0001ab0 <mem_cmp>
c0002084:	85 c0                	test   eax,eax
c0002086:	75 55                	jne    c00020dd <test_gpt_header+0x70>
c0002088:	89 c7                	mov    edi,eax
c000208a:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c000208f:	83 ce ff             	or     esi,0xffffffff
c0002092:	31 d2                	xor    edx,edx
c0002094:	83 fd 03             	cmp    ebp,0x3
c0002097:	76 05                	jbe    c000209e <test_gpt_header+0x31>
c0002099:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c000209e:	89 f0                	mov    eax,esi
c00020a0:	45                   	inc    ebp
c00020a1:	e8 9a ff ff ff       	call   c0002040 <crc32>
c00020a6:	83 fd 4c             	cmp    ebp,0x4c
c00020a9:	89 c6                	mov    esi,eax
c00020ab:	75 e5                	jne    c0002092 <test_gpt_header+0x25>
c00020ad:	8d 43 10             	lea    eax,[ebx+0x10]
c00020b0:	f7 d6                	not    esi
c00020b2:	e8 67 f9 ff ff       	call   c0001a1e <ld_dword>
c00020b7:	39 c6                	cmp    esi,eax
c00020b9:	75 22                	jne    c00020dd <test_gpt_header+0x70>
c00020bb:	8d 43 54             	lea    eax,[ebx+0x54]
c00020be:	e8 5b f9 ff ff       	call   c0001a1e <ld_dword>
c00020c3:	83 c0 80             	add    eax,0xffffff80
c00020c6:	75 15                	jne    c00020dd <test_gpt_header+0x70>
c00020c8:	8d 43 50             	lea    eax,[ebx+0x50]
c00020cb:	e8 4e f9 ff ff       	call   c0001a1e <ld_dword>
c00020d0:	3d 80 00 00 00       	cmp    eax,0x80
c00020d5:	0f 96 c0             	setbe  al
c00020d8:	0f b6 c0             	movzx  eax,al
c00020db:	89 c7                	mov    edi,eax
c00020dd:	5b                   	pop    ebx
c00020de:	89 f8                	mov    eax,edi
c00020e0:	5e                   	pop    esi
c00020e1:	5f                   	pop    edi
c00020e2:	5d                   	pop    ebp
c00020e3:	c3                   	ret    

c00020e4 <make_rand>:
c00020e4:	56                   	push   esi
c00020e5:	85 c0                	test   eax,eax
c00020e7:	53                   	push   ebx
c00020e8:	75 05                	jne    c00020ef <make_rand+0xb>
c00020ea:	b8 01 00 00 00       	mov    eax,0x1
c00020ef:	01 d1                	add    ecx,edx
c00020f1:	bb 08 00 00 00       	mov    ebx,0x8
c00020f6:	89 c6                	mov    esi,eax
c00020f8:	d1 e8                	shr    eax,1
c00020fa:	83 e6 01             	and    esi,0x1
c00020fd:	85 f6                	test   esi,esi
c00020ff:	74 05                	je     c0002106 <make_rand+0x22>
c0002101:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002106:	4b                   	dec    ebx
c0002107:	75 ed                	jne    c00020f6 <make_rand+0x12>
c0002109:	42                   	inc    edx
c000210a:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000210d:	39 ca                	cmp    edx,ecx
c000210f:	75 e0                	jne    c00020f1 <make_rand+0xd>
c0002111:	5b                   	pop    ebx
c0002112:	5e                   	pop    esi
c0002113:	c3                   	ret    

c0002114 <validate>:
c0002114:	56                   	push   esi
c0002115:	53                   	push   ebx
c0002116:	89 d6                	mov    esi,edx
c0002118:	51                   	push   ecx
c0002119:	85 c0                	test   eax,eax
c000211b:	75 09                	jne    c0002126 <validate+0x12>
c000211d:	b8 09 00 00 00       	mov    eax,0x9
c0002122:	31 c9                	xor    ecx,ecx
c0002124:	eb 2f                	jmp    c0002155 <validate+0x41>
c0002126:	89 c3                	mov    ebx,eax
c0002128:	8b 00                	mov    eax,DWORD PTR [eax]
c000212a:	85 c0                	test   eax,eax
c000212c:	74 ef                	je     c000211d <validate+0x9>
c000212e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002131:	74 ea                	je     c000211d <validate+0x9>
c0002133:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002137:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000213b:	75 e0                	jne    c000211d <validate+0x9>
c000213d:	83 ec 0c             	sub    esp,0xc
c0002140:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002144:	50                   	push   eax
c0002145:	e8 76 f8 ff ff       	call   c00019c0 <disk_status>
c000214a:	83 c4 10             	add    esp,0x10
c000214d:	a8 01                	test   al,0x1
c000214f:	75 cc                	jne    c000211d <validate+0x9>
c0002151:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002153:	31 c0                	xor    eax,eax
c0002155:	89 0e                	mov    DWORD PTR [esi],ecx
c0002157:	5a                   	pop    edx
c0002158:	5b                   	pop    ebx
c0002159:	5e                   	pop    esi
c000215a:	c3                   	ret    

c000215b <sync_window>:
c000215b:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c000215f:	0f 84 85 00 00 00    	je     c00021ea <sync_window+0x8f>
c0002165:	55                   	push   ebp
c0002166:	8d 68 54             	lea    ebp,[eax+0x54]
c0002169:	57                   	push   edi
c000216a:	56                   	push   esi
c000216b:	53                   	push   ebx
c000216c:	89 c3                	mov    ebx,eax
c000216e:	83 ec 28             	sub    esp,0x28
c0002171:	6a 01                	push   0x1
c0002173:	ff 70 50             	push   DWORD PTR [eax+0x50]
c0002176:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c0002179:	55                   	push   ebp
c000217a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000217e:	50                   	push   eax
c000217f:	e8 58 f8 ff ff       	call   c00019dc <disk_write>
c0002184:	83 c4 20             	add    esp,0x20
c0002187:	ba 01 00 00 00       	mov    edx,0x1
c000218c:	85 c0                	test   eax,eax
c000218e:	75 50                	jne    c00021e0 <sync_window+0x85>
c0002190:	31 ff                	xor    edi,edi
c0002192:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0002195:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0002199:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000219d:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00021a0:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00021a3:	89 c6                	mov    esi,eax
c00021a5:	89 d7                	mov    edi,edx
c00021a7:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00021aa:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00021ae:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00021b1:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00021b5:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00021b9:	73 23                	jae    c00021de <sync_window+0x83>
c00021bb:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00021bf:	75 1d                	jne    c00021de <sync_window+0x83>
c00021c1:	83 ec 0c             	sub    esp,0xc
c00021c4:	6a 01                	push   0x1
c00021c6:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00021ca:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00021ce:	52                   	push   edx
c00021cf:	50                   	push   eax
c00021d0:	55                   	push   ebp
c00021d1:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00021d5:	50                   	push   eax
c00021d6:	e8 01 f8 ff ff       	call   c00019dc <disk_write>
c00021db:	83 c4 20             	add    esp,0x20
c00021de:	31 d2                	xor    edx,edx
c00021e0:	83 c4 1c             	add    esp,0x1c
c00021e3:	89 d0                	mov    eax,edx
c00021e5:	5b                   	pop    ebx
c00021e6:	5e                   	pop    esi
c00021e7:	5f                   	pop    edi
c00021e8:	5d                   	pop    ebp
c00021e9:	c3                   	ret    
c00021ea:	31 d2                	xor    edx,edx
c00021ec:	89 d0                	mov    eax,edx
c00021ee:	c3                   	ret    

c00021ef <move_window>:
c00021ef:	56                   	push   esi
c00021f0:	53                   	push   ebx
c00021f1:	89 c3                	mov    ebx,eax
c00021f3:	83 ec 14             	sub    esp,0x14
c00021f6:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c00021f9:	75 07                	jne    c0002202 <move_window+0x13>
c00021fb:	31 f6                	xor    esi,esi
c00021fd:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002200:	74 59                	je     c000225b <move_window+0x6c>
c0002202:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002206:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000220a:	89 d8                	mov    eax,ebx
c000220c:	e8 4a ff ff ff       	call   c000215b <sync_window>
c0002211:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002215:	89 c6                	mov    esi,eax
c0002217:	85 c0                	test   eax,eax
c0002219:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000221d:	75 3c                	jne    c000225b <move_window+0x6c>
c000221f:	83 ec 0c             	sub    esp,0xc
c0002222:	8d 43 54             	lea    eax,[ebx+0x54]
c0002225:	6a 01                	push   0x1
c0002227:	51                   	push   ecx
c0002228:	52                   	push   edx
c0002229:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000222d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002231:	50                   	push   eax
c0002232:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002236:	50                   	push   eax
c0002237:	e8 8a f7 ff ff       	call   c00019c6 <disk_read>
c000223c:	83 c4 20             	add    esp,0x20
c000223f:	85 c0                	test   eax,eax
c0002241:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002245:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002249:	74 0a                	je     c0002255 <move_window+0x66>
c000224b:	83 ca ff             	or     edx,0xffffffff
c000224e:	be 01 00 00 00       	mov    esi,0x1
c0002253:	89 d1                	mov    ecx,edx
c0002255:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c0002258:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c000225b:	89 f0                	mov    eax,esi
c000225d:	83 c4 14             	add    esp,0x14
c0002260:	5b                   	pop    ebx
c0002261:	5e                   	pop    esi
c0002262:	c3                   	ret    

c0002263 <check_fs>:
c0002263:	53                   	push   ebx
c0002264:	89 c3                	mov    ebx,eax
c0002266:	83 ec 08             	sub    esp,0x8
c0002269:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000226d:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c0002274:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c000227b:	e8 6f ff ff ff       	call   c00021ef <move_window>
c0002280:	ba 04 00 00 00       	mov    edx,0x4
c0002285:	85 c0                	test   eax,eax
c0002287:	0f 85 89 00 00 00    	jne    c0002316 <check_fs+0xb3>
c000228d:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0002293:	e8 79 f7 ff ff       	call   c0001a11 <ld_word>
c0002298:	ba 03 00 00 00       	mov    edx,0x3
c000229d:	66 3d 55 aa          	cmp    ax,0xaa55
c00022a1:	75 73                	jne    c0002316 <check_fs+0xb3>
c00022a3:	ba 80 7e 02 c0       	mov    edx,0xc0027e80
c00022a8:	8d 43 54             	lea    eax,[ebx+0x54]
c00022ab:	b9 0b 00 00 00       	mov    ecx,0xb
c00022b0:	e8 fb f7 ff ff       	call   c0001ab0 <mem_cmp>
c00022b5:	ba 01 00 00 00       	mov    edx,0x1
c00022ba:	85 c0                	test   eax,eax
c00022bc:	74 58                	je     c0002316 <check_fs+0xb3>
c00022be:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00022c1:	8d 50 18             	lea    edx,[eax+0x18]
c00022c4:	80 fa 01             	cmp    dl,0x1
c00022c7:	76 09                	jbe    c00022d2 <check_fs+0x6f>
c00022c9:	ba 02 00 00 00       	mov    edx,0x2
c00022ce:	3c eb                	cmp    al,0xeb
c00022d0:	75 44                	jne    c0002316 <check_fs+0xb3>
c00022d2:	ba 30 ae 02 c0       	mov    edx,0xc002ae30
c00022d7:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c00022dd:	b9 03 00 00 00       	mov    ecx,0x3
c00022e2:	e8 c9 f7 ff ff       	call   c0001ab0 <mem_cmp>
c00022e7:	31 d2                	xor    edx,edx
c00022e9:	85 c0                	test   eax,eax
c00022eb:	74 29                	je     c0002316 <check_fs+0xb3>
c00022ed:	ba 8c 7e 02 c0       	mov    edx,0xc0027e8c
c00022f2:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c00022f8:	b9 05 00 00 00       	mov    ecx,0x5
c00022fd:	e8 ae f7 ff ff       	call   c0001ab0 <mem_cmp>
c0002302:	31 d2                	xor    edx,edx
c0002304:	85 c0                	test   eax,eax
c0002306:	74 0e                	je     c0002316 <check_fs+0xb3>
c0002308:	31 d2                	xor    edx,edx
c000230a:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002311:	0f 95 c2             	setne  dl
c0002314:	01 d2                	add    edx,edx
c0002316:	89 d0                	mov    eax,edx
c0002318:	83 c4 08             	add    esp,0x8
c000231b:	5b                   	pop    ebx
c000231c:	c3                   	ret    

c000231d <find_volume>:
c000231d:	55                   	push   ebp
c000231e:	31 c9                	xor    ecx,ecx
c0002320:	57                   	push   edi
c0002321:	56                   	push   esi
c0002322:	89 d6                	mov    esi,edx
c0002324:	53                   	push   ebx
c0002325:	31 d2                	xor    edx,edx
c0002327:	83 ec 3c             	sub    esp,0x3c
c000232a:	89 c3                	mov    ebx,eax
c000232c:	e8 32 ff ff ff       	call   c0002263 <check_fs>
c0002331:	83 f8 02             	cmp    eax,0x2
c0002334:	74 0e                	je     c0002344 <find_volume+0x27>
c0002336:	0f 87 5d 01 00 00    	ja     c0002499 <find_volume+0x17c>
c000233c:	85 f6                	test   esi,esi
c000233e:	0f 84 55 01 00 00    	je     c0002499 <find_volume+0x17c>
c0002344:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000234b:	0f 85 dd 00 00 00    	jne    c000242e <find_volume+0x111>
c0002351:	31 c9                	xor    ecx,ecx
c0002353:	ba 01 00 00 00       	mov    edx,0x1
c0002358:	89 d8                	mov    eax,ebx
c000235a:	e8 90 fe ff ff       	call   c00021ef <move_window>
c000235f:	85 c0                	test   eax,eax
c0002361:	74 0a                	je     c000236d <find_volume+0x50>
c0002363:	b8 04 00 00 00       	mov    eax,0x4
c0002368:	e9 2c 01 00 00       	jmp    c0002499 <find_volume+0x17c>
c000236d:	8d 6b 54             	lea    ebp,[ebx+0x54]
c0002370:	89 e8                	mov    eax,ebp
c0002372:	e8 f6 fc ff ff       	call   c000206d <test_gpt_header>
c0002377:	85 c0                	test   eax,eax
c0002379:	75 0a                	jne    c0002385 <find_volume+0x68>
c000237b:	b8 03 00 00 00       	mov    eax,0x3
c0002380:	e9 14 01 00 00       	jmp    c0002499 <find_volume+0x17c>
c0002385:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c000238b:	e8 8e f6 ff ff       	call   c0001a1e <ld_dword>
c0002390:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002394:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c000239a:	e8 97 f6 ff ff       	call   c0001a36 <ld_qword>
c000239f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00023a7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00023ab:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00023af:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00023b7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00023bb:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00023bf:	74 ba                	je     c000237b <find_volume+0x5e>
c00023c1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00023c5:	31 c9                	xor    ecx,ecx
c00023c7:	c1 e7 07             	shl    edi,0x7
c00023ca:	89 d8                	mov    eax,ebx
c00023cc:	89 fa                	mov    edx,edi
c00023ce:	c1 ea 09             	shr    edx,0x9
c00023d1:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c00023d5:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c00023d9:	e8 11 fe ff ff       	call   c00021ef <move_window>
c00023de:	85 c0                	test   eax,eax
c00023e0:	75 81                	jne    c0002363 <find_volume+0x46>
c00023e2:	81 e7 80 01 00 00    	and    edi,0x180
c00023e8:	b9 10 00 00 00       	mov    ecx,0x10
c00023ed:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c00023f1:	ba 70 7e 02 c0       	mov    edx,0xc0027e70
c00023f6:	e8 b5 f6 ff ff       	call   c0001ab0 <mem_cmp>
c00023fb:	85 c0                	test   eax,eax
c00023fd:	75 29                	jne    c0002428 <find_volume+0x10b>
c00023ff:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002403:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002407:	e8 2a f6 ff ff       	call   c0001a36 <ld_qword>
c000240c:	89 d1                	mov    ecx,edx
c000240e:	89 c2                	mov    edx,eax
c0002410:	89 d8                	mov    eax,ebx
c0002412:	e8 4c fe ff ff       	call   c0002263 <check_fs>
c0002417:	85 f6                	test   esi,esi
c0002419:	75 07                	jne    c0002422 <find_volume+0x105>
c000241b:	83 f8 01             	cmp    eax,0x1
c000241e:	77 08                	ja     c0002428 <find_volume+0x10b>
c0002420:	eb 77                	jmp    c0002499 <find_volume+0x17c>
c0002422:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002426:	74 71                	je     c0002499 <find_volume+0x17c>
c0002428:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000242c:	eb 89                	jmp    c00023b7 <find_volume+0x9a>
c000242e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002432:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002438:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c000243e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002442:	89 cd                	mov    ebp,ecx
c0002444:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002448:	89 f8                	mov    eax,edi
c000244a:	83 c7 10             	add    edi,0x10
c000244d:	e8 cc f5 ff ff       	call   c0001a1e <ld_dword>
c0002452:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0002456:	89 01                	mov    DWORD PTR [ecx],eax
c0002458:	83 c1 04             	add    ecx,0x4
c000245b:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000245f:	75 e3                	jne    c0002444 <find_volume+0x127>
c0002461:	31 ff                	xor    edi,edi
c0002463:	85 f6                	test   esi,esi
c0002465:	74 03                	je     c000246a <find_volume+0x14d>
c0002467:	8d 7e ff             	lea    edi,[esi-0x1]
c000246a:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c000246e:	85 d2                	test   edx,edx
c0002470:	74 14                	je     c0002486 <find_volume+0x169>
c0002472:	31 c9                	xor    ecx,ecx
c0002474:	89 d8                	mov    eax,ebx
c0002476:	e8 e8 fd ff ff       	call   c0002263 <check_fs>
c000247b:	83 f8 01             	cmp    eax,0x1
c000247e:	76 19                	jbe    c0002499 <find_volume+0x17c>
c0002480:	85 f6                	test   esi,esi
c0002482:	74 0f                	je     c0002493 <find_volume+0x176>
c0002484:	eb 13                	jmp    c0002499 <find_volume+0x17c>
c0002486:	85 f6                	test   esi,esi
c0002488:	0f 85 ed fe ff ff    	jne    c000237b <find_volume+0x5e>
c000248e:	b8 03 00 00 00       	mov    eax,0x3
c0002493:	47                   	inc    edi
c0002494:	83 ff 03             	cmp    edi,0x3
c0002497:	76 d1                	jbe    c000246a <find_volume+0x14d>
c0002499:	83 c4 3c             	add    esp,0x3c
c000249c:	5b                   	pop    ebx
c000249d:	5e                   	pop    esi
c000249e:	5f                   	pop    edi
c000249f:	5d                   	pop    ebp
c00024a0:	c3                   	ret    

c00024a1 <mount_volume>:
c00024a1:	55                   	push   ebp
c00024a2:	57                   	push   edi
c00024a3:	89 cf                	mov    edi,ecx
c00024a5:	56                   	push   esi
c00024a6:	53                   	push   ebx
c00024a7:	bb 0b 00 00 00       	mov    ebx,0xb
c00024ac:	83 ec 3c             	sub    esp,0x3c
c00024af:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024b5:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00024b9:	e8 35 fb ff ff       	call   c0001ff3 <get_ldnumber>
c00024be:	85 c0                	test   eax,eax
c00024c0:	0f 88 3a 05 00 00    	js     c0002a00 <mount_volume+0x55f>
c00024c6:	8b 2c 85 80 c9 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd3680]
c00024cd:	89 c6                	mov    esi,eax
c00024cf:	bb 0c 00 00 00       	mov    ebx,0xc
c00024d4:	85 ed                	test   ebp,ebp
c00024d6:	0f 84 24 05 00 00    	je     c0002a00 <mount_volume+0x55f>
c00024dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00024e0:	83 e7 fe             	and    edi,0xfffffffe
c00024e3:	89 2a                	mov    DWORD PTR [edx],ebp
c00024e5:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c00024e9:	74 32                	je     c000251d <mount_volume+0x7c>
c00024eb:	83 ec 0c             	sub    esp,0xc
c00024ee:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00024f2:	50                   	push   eax
c00024f3:	e8 c8 f4 ff ff       	call   c00019c0 <disk_status>
c00024f8:	83 c4 10             	add    esp,0x10
c00024fb:	a8 01                	test   al,0x1
c00024fd:	75 1e                	jne    c000251d <mount_volume+0x7c>
c00024ff:	31 db                	xor    ebx,ebx
c0002501:	89 f9                	mov    ecx,edi
c0002503:	84 c9                	test   cl,cl
c0002505:	0f 84 f5 04 00 00    	je     c0002a00 <mount_volume+0x55f>
c000250b:	a8 04                	test   al,0x4
c000250d:	0f 84 ed 04 00 00    	je     c0002a00 <mount_volume+0x55f>
c0002513:	bb 0a 00 00 00       	mov    ebx,0xa
c0002518:	e9 e3 04 00 00       	jmp    c0002a00 <mount_volume+0x55f>
c000251d:	83 ec 0c             	sub    esp,0xc
c0002520:	89 f0                	mov    eax,esi
c0002522:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002526:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002529:	0f b6 f0             	movzx  esi,al
c000252c:	bb 03 00 00 00       	mov    ebx,0x3
c0002531:	56                   	push   esi
c0002532:	e8 8c f4 ff ff       	call   c00019c3 <disk_initialize>
c0002537:	83 c4 10             	add    esp,0x10
c000253a:	a8 01                	test   al,0x1
c000253c:	0f 85 be 04 00 00    	jne    c0002a00 <mount_volume+0x55f>
c0002542:	89 f9                	mov    ecx,edi
c0002544:	84 c9                	test   cl,cl
c0002546:	74 04                	je     c000254c <mount_volume+0xab>
c0002548:	a8 04                	test   al,0x4
c000254a:	75 c7                	jne    c0002513 <mount_volume+0x72>
c000254c:	31 d2                	xor    edx,edx
c000254e:	89 e8                	mov    eax,ebp
c0002550:	e8 c8 fd ff ff       	call   c000231d <find_volume>
c0002555:	83 f8 04             	cmp    eax,0x4
c0002558:	75 0a                	jne    c0002564 <mount_volume+0xc3>
c000255a:	bb 01 00 00 00       	mov    ebx,0x1
c000255f:	e9 9c 04 00 00       	jmp    c0002a00 <mount_volume+0x55f>
c0002564:	83 f8 01             	cmp    eax,0x1
c0002567:	76 0a                	jbe    c0002573 <mount_volume+0xd2>
c0002569:	bb 0d 00 00 00       	mov    ebx,0xd
c000256e:	e9 8d 04 00 00       	jmp    c0002a00 <mount_volume+0x55f>
c0002573:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c0002576:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c0002579:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000257d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002581:	75 17                	jne    c000259a <mount_volume+0xf9>
c0002583:	b8 0b 00 00 00       	mov    eax,0xb
c0002588:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c000258d:	75 da                	jne    c0002569 <mount_volume+0xc8>
c000258f:	40                   	inc    eax
c0002590:	83 f8 40             	cmp    eax,0x40
c0002593:	75 f3                	jne    c0002588 <mount_volume+0xe7>
c0002595:	e9 5a 02 00 00       	jmp    c00027f4 <mount_volume+0x353>
c000259a:	8d 45 5f             	lea    eax,[ebp+0x5f]
c000259d:	e8 6f f4 ff ff       	call   c0001a11 <ld_word>
c00025a2:	66 3d 00 02          	cmp    ax,0x200
c00025a6:	75 c1                	jne    c0002569 <mount_volume+0xc8>
c00025a8:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00025ab:	e8 61 f4 ff ff       	call   c0001a11 <ld_word>
c00025b0:	0f b7 c0             	movzx  eax,ax
c00025b3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025b7:	85 c0                	test   eax,eax
c00025b9:	75 0c                	jne    c00025c7 <mount_volume+0x126>
c00025bb:	8d 45 78             	lea    eax,[ebp+0x78]
c00025be:	e8 5b f4 ff ff       	call   c0001a1e <ld_dword>
c00025c3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00025cb:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00025ce:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00025d1:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00025d5:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00025d8:	48                   	dec    eax
c00025d9:	3c 01                	cmp    al,0x1
c00025db:	77 8c                	ja     c0002569 <mount_volume+0xc8>
c00025dd:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c00025e1:	89 c3                	mov    ebx,eax
c00025e3:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c00025e7:	66 85 c0             	test   ax,ax
c00025ea:	0f 84 79 ff ff ff    	je     c0002569 <mount_volume+0xc8>
c00025f0:	8d 40 ff             	lea    eax,[eax-0x1]
c00025f3:	85 d8                	test   eax,ebx
c00025f5:	0f 85 6e ff ff ff    	jne    c0002569 <mount_volume+0xc8>
c00025fb:	8d 45 65             	lea    eax,[ebp+0x65]
c00025fe:	e8 0e f4 ff ff       	call   c0001a11 <ld_word>
c0002603:	89 c7                	mov    edi,eax
c0002605:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002609:	a8 0f                	test   al,0xf
c000260b:	0f 85 58 ff ff ff    	jne    c0002569 <mount_volume+0xc8>
c0002611:	8d 45 67             	lea    eax,[ebp+0x67]
c0002614:	e8 f8 f3 ff ff       	call   c0001a11 <ld_word>
c0002619:	0f b7 f0             	movzx  esi,ax
c000261c:	85 f6                	test   esi,esi
c000261e:	75 0a                	jne    c000262a <mount_volume+0x189>
c0002620:	8d 45 74             	lea    eax,[ebp+0x74]
c0002623:	e8 f6 f3 ff ff       	call   c0001a1e <ld_dword>
c0002628:	89 c6                	mov    esi,eax
c000262a:	8d 45 62             	lea    eax,[ebp+0x62]
c000262d:	e8 df f3 ff ff       	call   c0001a11 <ld_word>
c0002632:	66 85 c0             	test   ax,ax
c0002635:	0f 84 2e ff ff ff    	je     c0002569 <mount_volume+0xc8>
c000263b:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002640:	0f b7 c8             	movzx  ecx,ax
c0002643:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002648:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000264c:	89 fa                	mov    edx,edi
c000264e:	66 c1 ea 04          	shr    dx,0x4
c0002652:	0f b7 d2             	movzx  edx,dx
c0002655:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c0002659:	8d 04 0a             	lea    eax,[edx+ecx*1]
c000265c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002660:	39 c6                	cmp    esi,eax
c0002662:	0f 82 01 ff ff ff    	jb     c0002569 <mount_volume+0xc8>
c0002668:	29 c6                	sub    esi,eax
c000266a:	31 d2                	xor    edx,edx
c000266c:	89 f0                	mov    eax,esi
c000266e:	f7 f3                	div    ebx
c0002670:	39 de                	cmp    esi,ebx
c0002672:	0f 82 f1 fe ff ff    	jb     c0002569 <mount_volume+0xc8>
c0002678:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c000267d:	0f 87 e6 fe ff ff    	ja     c0002569 <mount_volume+0xc8>
c0002683:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002688:	0f 86 63 03 00 00    	jbe    c00029f1 <mount_volume+0x550>
c000268e:	bb 03 00 00 00       	mov    ebx,0x3
c0002693:	8d 70 02             	lea    esi,[eax+0x2]
c0002696:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000269a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000269e:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00026a1:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00026a4:	31 d2                	xor    edx,edx
c00026a6:	89 c8                	mov    eax,ecx
c00026a8:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00026ab:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026af:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026b3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00026b7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00026bb:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00026be:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00026c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00026c5:	31 d2                	xor    edx,edx
c00026c7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026cb:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026cf:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00026d2:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00026d5:	83 fb 03             	cmp    ebx,0x3
c00026d8:	75 2b                	jne    c0002705 <mount_volume+0x264>
c00026da:	8d 45 7e             	lea    eax,[ebp+0x7e]
c00026dd:	e8 2f f3 ff ff       	call   c0001a11 <ld_word>
c00026e2:	66 09 c7             	or     di,ax
c00026e5:	0f 85 7e fe ff ff    	jne    c0002569 <mount_volume+0xc8>
c00026eb:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c00026f1:	c1 e6 02             	shl    esi,0x2
c00026f4:	e8 25 f3 ff ff       	call   c0001a1e <ld_dword>
c00026f9:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002700:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002703:	eb 30                	jmp    c0002735 <mount_volume+0x294>
c0002705:	66 85 ff             	test   di,di
c0002708:	0f 84 5b fe ff ff    	je     c0002569 <mount_volume+0xc8>
c000270e:	31 d2                	xor    edx,edx
c0002710:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002714:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002718:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000271c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000271f:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002722:	83 fb 02             	cmp    ebx,0x2
c0002725:	75 04                	jne    c000272b <mount_volume+0x28a>
c0002727:	01 f6                	add    esi,esi
c0002729:	eb 0a                	jmp    c0002735 <mount_volume+0x294>
c000272b:	8d 04 76             	lea    eax,[esi+esi*2]
c000272e:	83 e6 01             	and    esi,0x1
c0002731:	d1 e8                	shr    eax,1
c0002733:	01 c6                	add    esi,eax
c0002735:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000273b:	c1 ee 09             	shr    esi,0x9
c000273e:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002742:	0f 87 21 fe ff ff    	ja     c0002569 <mount_volume+0xc8>
c0002748:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000274f:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002756:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c000275a:	83 fb 03             	cmp    ebx,0x3
c000275d:	75 7a                	jne    c00027d9 <mount_volume+0x338>
c000275f:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c0002765:	e8 a7 f2 ff ff       	call   c0001a11 <ld_word>
c000276a:	66 48                	dec    ax
c000276c:	75 6b                	jne    c00027d9 <mount_volume+0x338>
c000276e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002772:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002776:	83 c2 01             	add    edx,0x1
c0002779:	89 e8                	mov    eax,ebp
c000277b:	83 d1 00             	adc    ecx,0x0
c000277e:	e8 6c fa ff ff       	call   c00021ef <move_window>
c0002783:	85 c0                	test   eax,eax
c0002785:	75 52                	jne    c00027d9 <mount_volume+0x338>
c0002787:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c000278b:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c0002791:	e8 7b f2 ff ff       	call   c0001a11 <ld_word>
c0002796:	66 3d 55 aa          	cmp    ax,0xaa55
c000279a:	75 3d                	jne    c00027d9 <mount_volume+0x338>
c000279c:	8d 45 54             	lea    eax,[ebp+0x54]
c000279f:	e8 7a f2 ff ff       	call   c0001a1e <ld_dword>
c00027a4:	3d 52 52 61 41       	cmp    eax,0x41615252
c00027a9:	75 2e                	jne    c00027d9 <mount_volume+0x338>
c00027ab:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00027b1:	e8 68 f2 ff ff       	call   c0001a1e <ld_dword>
c00027b6:	3d 72 72 41 61       	cmp    eax,0x61417272
c00027bb:	75 1c                	jne    c00027d9 <mount_volume+0x338>
c00027bd:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00027c3:	e8 56 f2 ff ff       	call   c0001a1e <ld_dword>
c00027c8:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00027cb:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00027d1:	e8 48 f2 ff ff       	call   c0001a1e <ld_dword>
c00027d6:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c00027d9:	66 a1 60 c9 02 c0    	mov    ax,ds:0xc002c960
c00027df:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00027e2:	40                   	inc    eax
c00027e3:	31 db                	xor    ebx,ebx
c00027e5:	66 a3 60 c9 02 c0    	mov    ds:0xc002c960,ax
c00027eb:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c00027ef:	e9 0c 02 00 00       	jmp    c0002a00 <mount_volume+0x55f>
c00027f4:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c00027fa:	e8 12 f2 ff ff       	call   c0001a11 <ld_word>
c00027ff:	66 3d 00 01          	cmp    ax,0x100
c0002803:	0f 85 60 fd ff ff    	jne    c0002569 <mount_volume+0xc8>
c0002809:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002810:	0f 85 53 fd ff ff    	jne    c0002569 <mount_volume+0xc8>
c0002816:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c000281c:	e8 15 f2 ff ff       	call   c0001a36 <ld_qword>
c0002821:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002825:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002829:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c000282f:	e8 ea f1 ff ff       	call   c0001a1e <ld_dword>
c0002834:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002837:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c000283d:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002840:	fe c8                	dec    al
c0002842:	0f 85 21 fd ff ff    	jne    c0002569 <mount_volume+0xc8>
c0002848:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c000284f:	bb 01 00 00 00       	mov    ebx,0x1
c0002854:	d3 e3                	shl    ebx,cl
c0002856:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c000285a:	66 85 db             	test   bx,bx
c000285d:	0f 84 06 fd ff ff    	je     c0002569 <mount_volume+0xc8>
c0002863:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002869:	e8 b0 f1 ff ff       	call   c0001a1e <ld_dword>
c000286e:	89 c6                	mov    esi,eax
c0002870:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002875:	0f 87 ee fc ff ff    	ja     c0002569 <mount_volume+0xc8>
c000287b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000287f:	8d 40 02             	lea    eax,[eax+0x2]
c0002882:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002885:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002888:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000288c:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c000288f:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002895:	e8 84 f1 ff ff       	call   c0001a1e <ld_dword>
c000289a:	31 d2                	xor    edx,edx
c000289c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028a0:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00028a8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00028ac:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028af:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028b2:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c00028b8:	e8 61 f1 ff ff       	call   c0001a1e <ld_dword>
c00028bd:	31 d2                	xor    edx,edx
c00028bf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00028c3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028c7:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028cb:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028ce:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028d1:	0f b7 c3             	movzx  eax,bx
c00028d4:	31 d2                	xor    edx,edx
c00028d6:	0f af f0             	imul   esi,eax
c00028d9:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00028dd:	89 f0                	mov    eax,esi
c00028df:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00028e3:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c00028e7:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c00028eb:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c00028ef:	39 c1                	cmp    ecx,eax
c00028f1:	89 df                	mov    edi,ebx
c00028f3:	19 d7                	sbb    edi,edx
c00028f5:	0f 82 6e fc ff ff    	jb     c0002569 <mount_volume+0xc8>
c00028fb:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002901:	31 db                	xor    ebx,ebx
c0002903:	e8 16 f1 ff ff       	call   c0001a1e <ld_dword>
c0002908:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000290f:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002912:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000291a:	85 db                	test   ebx,ebx
c000291c:	75 39                	jne    c0002957 <mount_volume+0x4b6>
c000291e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002922:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002926:	0f 86 3d fc ff ff    	jbe    c0002569 <mount_volume+0xc8>
c000292c:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c000292f:	31 ff                	xor    edi,edi
c0002931:	89 e8                	mov    eax,ebp
c0002933:	e8 72 f3 ff ff       	call   c0001caa <clst2sect>
c0002938:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000293c:	01 c6                	add    esi,eax
c000293e:	89 e8                	mov    eax,ebp
c0002940:	11 d7                	adc    edi,edx
c0002942:	89 f2                	mov    edx,esi
c0002944:	89 f9                	mov    ecx,edi
c0002946:	e8 a4 f8 ff ff       	call   c00021ef <move_window>
c000294b:	85 c0                	test   eax,eax
c000294d:	0f 85 07 fc ff ff    	jne    c000255a <mount_volume+0xb9>
c0002953:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002957:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c000295c:	74 0b                	je     c0002969 <mount_volume+0x4c8>
c000295e:	83 c3 20             	add    ebx,0x20
c0002961:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002967:	eb b1                	jmp    c000291a <mount_volume+0x479>
c0002969:	8d 75 54             	lea    esi,[ebp+0x54]
c000296c:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002970:	e8 a9 f0 ff ff       	call   c0001a1e <ld_dword>
c0002975:	89 c3                	mov    ebx,eax
c0002977:	83 f8 01             	cmp    eax,0x1
c000297a:	0f 86 e9 fb ff ff    	jbe    c0002569 <mount_volume+0xc8>
c0002980:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002983:	0f 86 e0 fb ff ff    	jbe    c0002569 <mount_volume+0xc8>
c0002989:	8d 53 fe             	lea    edx,[ebx-0x2]
c000298c:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002990:	0f af c2             	imul   eax,edx
c0002993:	31 d2                	xor    edx,edx
c0002995:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002998:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c000299b:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c000299e:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c00029a1:	31 c9                	xor    ecx,ecx
c00029a3:	89 da                	mov    edx,ebx
c00029a5:	89 e8                	mov    eax,ebp
c00029a7:	c1 ea 07             	shr    edx,0x7
c00029aa:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c00029ad:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c00029b0:	e8 3a f8 ff ff       	call   c00021ef <move_window>
c00029b5:	85 c0                	test   eax,eax
c00029b7:	0f 85 9d fb ff ff    	jne    c000255a <mount_volume+0xb9>
c00029bd:	89 d8                	mov    eax,ebx
c00029bf:	83 e0 7f             	and    eax,0x7f
c00029c2:	8d 04 86             	lea    eax,[esi+eax*4]
c00029c5:	e8 54 f0 ff ff       	call   c0001a1e <ld_dword>
c00029ca:	83 f8 ff             	cmp    eax,0xffffffff
c00029cd:	74 0a                	je     c00029d9 <mount_volume+0x538>
c00029cf:	43                   	inc    ebx
c00029d0:	39 d8                	cmp    eax,ebx
c00029d2:	74 cd                	je     c00029a1 <mount_volume+0x500>
c00029d4:	e9 90 fb ff ff       	jmp    c0002569 <mount_volume+0xc8>
c00029d9:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c00029e0:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029e7:	bb 04 00 00 00       	mov    ebx,0x4
c00029ec:	e9 e8 fd ff ff       	jmp    c00027d9 <mount_volume+0x338>
c00029f1:	3d f6 0f 00 00       	cmp    eax,0xff6
c00029f6:	19 db                	sbb    ebx,ebx
c00029f8:	83 c3 02             	add    ebx,0x2
c00029fb:	e9 93 fc ff ff       	jmp    c0002693 <mount_volume+0x1f2>
c0002a00:	83 c4 3c             	add    esp,0x3c
c0002a03:	89 d8                	mov    eax,ebx
c0002a05:	5b                   	pop    ebx
c0002a06:	5e                   	pop    esi
c0002a07:	5f                   	pop    edi
c0002a08:	5d                   	pop    ebp
c0002a09:	c3                   	ret    

c0002a0a <find_bitmap>:
c0002a0a:	55                   	push   ebp
c0002a0b:	57                   	push   edi
c0002a0c:	89 c7                	mov    edi,eax
c0002a0e:	56                   	push   esi
c0002a0f:	8d 72 fe             	lea    esi,[edx-0x2]
c0002a12:	53                   	push   ebx
c0002a13:	83 ec 1c             	sub    esp,0x1c
c0002a16:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002a19:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002a1d:	83 e8 02             	sub    eax,0x2
c0002a20:	39 f0                	cmp    eax,esi
c0002a22:	77 02                	ja     c0002a26 <find_bitmap+0x1c>
c0002a24:	31 f6                	xor    esi,esi
c0002a26:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002a2a:	89 f3                	mov    ebx,esi
c0002a2c:	31 ed                	xor    ebp,ebp
c0002a2e:	31 c9                	xor    ecx,ecx
c0002a30:	89 da                	mov    edx,ebx
c0002a32:	89 f8                	mov    eax,edi
c0002a34:	c1 ea 0c             	shr    edx,0xc
c0002a37:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002a3a:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002a3d:	e8 ad f7 ff ff       	call   c00021ef <move_window>
c0002a42:	85 c0                	test   eax,eax
c0002a44:	75 68                	jne    c0002aae <find_bitmap+0xa4>
c0002a46:	89 da                	mov    edx,ebx
c0002a48:	89 d9                	mov    ecx,ebx
c0002a4a:	c1 ea 03             	shr    edx,0x3
c0002a4d:	83 e1 07             	and    ecx,0x7
c0002a50:	b8 01 00 00 00       	mov    eax,0x1
c0002a55:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002a5b:	d3 e0                	shl    eax,cl
c0002a5d:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002a60:	83 e9 02             	sub    ecx,0x2
c0002a63:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002a67:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002a6b:	43                   	inc    ebx
c0002a6c:	21 c1                	and    ecx,eax
c0002a6e:	d1 e0                	shl    eax,1
c0002a70:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002a74:	77 09                	ja     c0002a7f <find_bitmap+0x75>
c0002a76:	31 db                	xor    ebx,ebx
c0002a78:	ba 00 02 00 00       	mov    edx,0x200
c0002a7d:	31 c0                	xor    eax,eax
c0002a7f:	84 c9                	test   cl,cl
c0002a81:	75 10                	jne    c0002a93 <find_bitmap+0x89>
c0002a83:	45                   	inc    ebp
c0002a84:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002a88:	75 0f                	jne    c0002a99 <find_bitmap+0x8f>
c0002a8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002a8e:	83 c0 02             	add    eax,0x2
c0002a91:	eb 22                	jmp    c0002ab5 <find_bitmap+0xab>
c0002a93:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002a97:	31 ed                	xor    ebp,ebp
c0002a99:	39 de                	cmp    esi,ebx
c0002a9b:	74 16                	je     c0002ab3 <find_bitmap+0xa9>
c0002a9d:	84 c0                	test   al,al
c0002a9f:	75 c6                	jne    c0002a67 <find_bitmap+0x5d>
c0002aa1:	42                   	inc    edx
c0002aa2:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002aa8:	77 84                	ja     c0002a2e <find_bitmap+0x24>
c0002aaa:	b0 01                	mov    al,0x1
c0002aac:	eb b9                	jmp    c0002a67 <find_bitmap+0x5d>
c0002aae:	83 c8 ff             	or     eax,0xffffffff
c0002ab1:	eb 02                	jmp    c0002ab5 <find_bitmap+0xab>
c0002ab3:	31 c0                	xor    eax,eax
c0002ab5:	83 c4 1c             	add    esp,0x1c
c0002ab8:	5b                   	pop    ebx
c0002ab9:	5e                   	pop    esi
c0002aba:	5f                   	pop    edi
c0002abb:	5d                   	pop    ebp
c0002abc:	c3                   	ret    

c0002abd <change_bitmap>:
c0002abd:	55                   	push   ebp
c0002abe:	89 cd                	mov    ebp,ecx
c0002ac0:	57                   	push   edi
c0002ac1:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002ac4:	56                   	push   esi
c0002ac5:	89 c7                	mov    edi,eax
c0002ac7:	53                   	push   ebx
c0002ac8:	89 c8                	mov    eax,ecx
c0002aca:	83 ec 1c             	sub    esp,0x1c
c0002acd:	31 d2                	xor    edx,edx
c0002acf:	89 ce                	mov    esi,ecx
c0002ad1:	c1 e8 0c             	shr    eax,0xc
c0002ad4:	bb 01 00 00 00       	mov    ebx,0x1
c0002ad9:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002adc:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002adf:	c1 ee 03             	shr    esi,0x3
c0002ae2:	83 e1 07             	and    ecx,0x7
c0002ae5:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002aeb:	d3 e3                	shl    ebx,cl
c0002aed:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002af1:	89 c1                	mov    ecx,eax
c0002af3:	89 d3                	mov    ebx,edx
c0002af5:	83 c1 01             	add    ecx,0x1
c0002af8:	83 d3 00             	adc    ebx,0x0
c0002afb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002aff:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002b03:	89 d1                	mov    ecx,edx
c0002b05:	89 c2                	mov    edx,eax
c0002b07:	89 f8                	mov    eax,edi
c0002b09:	e8 e1 f6 ff ff       	call   c00021ef <move_window>
c0002b0e:	89 c1                	mov    ecx,eax
c0002b10:	85 c0                	test   eax,eax
c0002b12:	75 48                	jne    c0002b5c <change_bitmap+0x9f>
c0002b14:	31 d2                	xor    edx,edx
c0002b16:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002b1a:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002b1e:	0f 95 c2             	setne  dl
c0002b21:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002b25:	74 3c                	je     c0002b63 <change_bitmap+0xa6>
c0002b27:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002b2b:	4d                   	dec    ebp
c0002b2c:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002b30:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002b34:	74 32                	je     c0002b68 <change_bitmap+0xab>
c0002b36:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002b3a:	75 d8                	jne    c0002b14 <change_bitmap+0x57>
c0002b3c:	8d 46 01             	lea    eax,[esi+0x1]
c0002b3f:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002b44:	89 c3                	mov    ebx,eax
c0002b46:	31 f6                	xor    esi,esi
c0002b48:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002b4c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b50:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b56:	74 99                	je     c0002af1 <change_bitmap+0x34>
c0002b58:	89 de                	mov    esi,ebx
c0002b5a:	eb b8                	jmp    c0002b14 <change_bitmap+0x57>
c0002b5c:	b9 01 00 00 00       	mov    ecx,0x1
c0002b61:	eb 05                	jmp    c0002b68 <change_bitmap+0xab>
c0002b63:	b9 02 00 00 00       	mov    ecx,0x2
c0002b68:	83 c4 1c             	add    esp,0x1c
c0002b6b:	89 c8                	mov    eax,ecx
c0002b6d:	5b                   	pop    ebx
c0002b6e:	5e                   	pop    esi
c0002b6f:	5f                   	pop    edi
c0002b70:	5d                   	pop    ebp
c0002b71:	c3                   	ret    

c0002b72 <put_fat>:
c0002b72:	83 fa 01             	cmp    edx,0x1
c0002b75:	0f 86 7b 01 00 00    	jbe    c0002cf6 <put_fat+0x184>
c0002b7b:	55                   	push   ebp
c0002b7c:	57                   	push   edi
c0002b7d:	89 cf                	mov    edi,ecx
c0002b7f:	56                   	push   esi
c0002b80:	b9 02 00 00 00       	mov    ecx,0x2
c0002b85:	53                   	push   ebx
c0002b86:	89 c6                	mov    esi,eax
c0002b88:	83 ec 1c             	sub    esp,0x1c
c0002b8b:	89 d3                	mov    ebx,edx
c0002b8d:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002b90:	0f 86 68 01 00 00    	jbe    c0002cfe <put_fat+0x18c>
c0002b96:	8a 00                	mov    al,BYTE PTR [eax]
c0002b98:	3c 02                	cmp    al,0x2
c0002b9a:	0f 84 c7 00 00 00    	je     c0002c67 <put_fat+0xf5>
c0002ba0:	77 09                	ja     c0002bab <put_fat+0x39>
c0002ba2:	fe c8                	dec    al
c0002ba4:	74 17                	je     c0002bbd <put_fat+0x4b>
c0002ba6:	e9 53 01 00 00       	jmp    c0002cfe <put_fat+0x18c>
c0002bab:	b9 02 00 00 00       	mov    ecx,0x2
c0002bb0:	3c 04                	cmp    al,0x4
c0002bb2:	0f 86 e1 00 00 00    	jbe    c0002c99 <put_fat+0x127>
c0002bb8:	e9 41 01 00 00       	jmp    c0002cfe <put_fat+0x18c>
c0002bbd:	89 d5                	mov    ebp,edx
c0002bbf:	31 c9                	xor    ecx,ecx
c0002bc1:	d1 ed                	shr    ebp,1
c0002bc3:	89 f0                	mov    eax,esi
c0002bc5:	01 d5                	add    ebp,edx
c0002bc7:	89 ea                	mov    edx,ebp
c0002bc9:	c1 ea 09             	shr    edx,0x9
c0002bcc:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002bcf:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002bd2:	e8 18 f6 ff ff       	call   c00021ef <move_window>
c0002bd7:	89 c1                	mov    ecx,eax
c0002bd9:	85 c0                	test   eax,eax
c0002bdb:	0f 85 1d 01 00 00    	jne    c0002cfe <put_fat+0x18c>
c0002be1:	8d 46 54             	lea    eax,[esi+0x54]
c0002be4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002be8:	8d 45 01             	lea    eax,[ebp+0x1]
c0002beb:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002bf1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002bf5:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002bf9:	89 f8                	mov    eax,edi
c0002bfb:	83 e3 01             	and    ebx,0x1
c0002bfe:	74 0d                	je     c0002c0d <put_fat+0x9b>
c0002c00:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002c03:	89 fa                	mov    edx,edi
c0002c05:	83 e0 0f             	and    eax,0xf
c0002c08:	c1 e2 04             	shl    edx,0x4
c0002c0b:	09 d0                	or     eax,edx
c0002c0d:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002c10:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c14:	31 c9                	xor    ecx,ecx
c0002c16:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c1a:	c1 ea 09             	shr    edx,0x9
c0002c1d:	89 f0                	mov    eax,esi
c0002c1f:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c22:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c25:	e8 c5 f5 ff ff       	call   c00021ef <move_window>
c0002c2a:	89 c1                	mov    ecx,eax
c0002c2c:	85 c0                	test   eax,eax
c0002c2e:	0f 85 ca 00 00 00    	jne    c0002cfe <put_fat+0x18c>
c0002c34:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002c38:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c3e:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c42:	85 db                	test   ebx,ebx
c0002c44:	74 07                	je     c0002c4d <put_fat+0xdb>
c0002c46:	c1 ef 04             	shr    edi,0x4
c0002c49:	89 fa                	mov    edx,edi
c0002c4b:	eb 0e                	jmp    c0002c5b <put_fat+0xe9>
c0002c4d:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002c50:	c1 ef 08             	shr    edi,0x8
c0002c53:	83 e2 f0             	and    edx,0xfffffff0
c0002c56:	83 e7 0f             	and    edi,0xf
c0002c59:	09 fa                	or     edx,edi
c0002c5b:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002c5e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c62:	e9 97 00 00 00       	jmp    c0002cfe <put_fat+0x18c>
c0002c67:	31 c9                	xor    ecx,ecx
c0002c69:	c1 ea 08             	shr    edx,0x8
c0002c6c:	89 f0                	mov    eax,esi
c0002c6e:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c71:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c74:	e8 76 f5 ff ff       	call   c00021ef <move_window>
c0002c79:	89 c1                	mov    ecx,eax
c0002c7b:	85 c0                	test   eax,eax
c0002c7d:	75 7f                	jne    c0002cfe <put_fat+0x18c>
c0002c7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c83:	01 db                	add    ebx,ebx
c0002c85:	0f b7 d7             	movzx  edx,di
c0002c88:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002c8e:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002c92:	e8 ec ed ff ff       	call   c0001a83 <st_word>
c0002c97:	eb 53                	jmp    c0002cec <put_fat+0x17a>
c0002c99:	31 c9                	xor    ecx,ecx
c0002c9b:	c1 ea 07             	shr    edx,0x7
c0002c9e:	89 f0                	mov    eax,esi
c0002ca0:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ca3:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ca6:	e8 44 f5 ff ff       	call   c00021ef <move_window>
c0002cab:	89 c1                	mov    ecx,eax
c0002cad:	85 c0                	test   eax,eax
c0002caf:	75 4d                	jne    c0002cfe <put_fat+0x18c>
c0002cb1:	c1 e3 02             	shl    ebx,0x2
c0002cb4:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002cba:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002cbd:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002cc1:	74 1c                	je     c0002cdf <put_fat+0x16d>
c0002cc3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cc7:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ccd:	89 d8                	mov    eax,ebx
c0002ccf:	e8 4a ed ff ff       	call   c0001a1e <ld_dword>
c0002cd4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002cd8:	25 00 00 00 f0       	and    eax,0xf0000000
c0002cdd:	09 c7                	or     edi,eax
c0002cdf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ce3:	89 fa                	mov    edx,edi
c0002ce5:	89 d8                	mov    eax,ebx
c0002ce7:	e8 9b ed ff ff       	call   c0001a87 <st_dword>
c0002cec:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002cf0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002cf4:	eb 08                	jmp    c0002cfe <put_fat+0x18c>
c0002cf6:	b9 02 00 00 00       	mov    ecx,0x2
c0002cfb:	89 c8                	mov    eax,ecx
c0002cfd:	c3                   	ret    
c0002cfe:	83 c4 1c             	add    esp,0x1c
c0002d01:	89 c8                	mov    eax,ecx
c0002d03:	5b                   	pop    ebx
c0002d04:	5e                   	pop    esi
c0002d05:	5f                   	pop    edi
c0002d06:	5d                   	pop    ebp
c0002d07:	c3                   	ret    

c0002d08 <fill_last_frag>:
c0002d08:	57                   	push   edi
c0002d09:	89 cf                	mov    edi,ecx
c0002d0b:	56                   	push   esi
c0002d0c:	89 d6                	mov    esi,edx
c0002d0e:	53                   	push   ebx
c0002d0f:	89 c3                	mov    ebx,eax
c0002d11:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002d14:	85 c0                	test   eax,eax
c0002d16:	74 21                	je     c0002d39 <fill_last_frag+0x31>
c0002d18:	89 f9                	mov    ecx,edi
c0002d1a:	83 f8 01             	cmp    eax,0x1
c0002d1d:	76 05                	jbe    c0002d24 <fill_last_frag+0x1c>
c0002d1f:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002d22:	29 c1                	sub    ecx,eax
c0002d24:	8d 56 01             	lea    edx,[esi+0x1]
c0002d27:	29 c2                	sub    edx,eax
c0002d29:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d2b:	e8 42 fe ff ff       	call   c0002b72 <put_fat>
c0002d30:	85 c0                	test   eax,eax
c0002d32:	75 05                	jne    c0002d39 <fill_last_frag+0x31>
c0002d34:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002d37:	eb d8                	jmp    c0002d11 <fill_last_frag+0x9>
c0002d39:	5b                   	pop    ebx
c0002d3a:	5e                   	pop    esi
c0002d3b:	5f                   	pop    edi
c0002d3c:	c3                   	ret    

c0002d3d <fill_first_frag>:
c0002d3d:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002d41:	75 2d                	jne    c0002d70 <fill_first_frag+0x33>
c0002d43:	57                   	push   edi
c0002d44:	56                   	push   esi
c0002d45:	53                   	push   ebx
c0002d46:	89 c3                	mov    ebx,eax
c0002d48:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002d4b:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002d4e:	01 d7                	add    edi,edx
c0002d50:	39 fa                	cmp    edx,edi
c0002d52:	74 14                	je     c0002d68 <fill_first_frag+0x2b>
c0002d54:	8d 72 01             	lea    esi,[edx+0x1]
c0002d57:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d59:	89 f1                	mov    ecx,esi
c0002d5b:	e8 12 fe ff ff       	call   c0002b72 <put_fat>
c0002d60:	89 f2                	mov    edx,esi
c0002d62:	85 c0                	test   eax,eax
c0002d64:	74 ea                	je     c0002d50 <fill_first_frag+0x13>
c0002d66:	eb 0b                	jmp    c0002d73 <fill_first_frag+0x36>
c0002d68:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002d6c:	31 c0                	xor    eax,eax
c0002d6e:	eb 03                	jmp    c0002d73 <fill_first_frag+0x36>
c0002d70:	31 c0                	xor    eax,eax
c0002d72:	c3                   	ret    
c0002d73:	5b                   	pop    ebx
c0002d74:	5e                   	pop    esi
c0002d75:	5f                   	pop    edi
c0002d76:	c3                   	ret    

c0002d77 <get_fat>:
c0002d77:	83 fa 01             	cmp    edx,0x1
c0002d7a:	0f 86 db 01 00 00    	jbe    c0002f5b <get_fat+0x1e4>
c0002d80:	55                   	push   ebp
c0002d81:	b9 01 00 00 00       	mov    ecx,0x1
c0002d86:	57                   	push   edi
c0002d87:	56                   	push   esi
c0002d88:	53                   	push   ebx
c0002d89:	83 ec 1c             	sub    esp,0x1c
c0002d8c:	8b 38                	mov    edi,DWORD PTR [eax]
c0002d8e:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002d91:	0f 86 cc 01 00 00    	jbe    c0002f63 <get_fat+0x1ec>
c0002d97:	89 c3                	mov    ebx,eax
c0002d99:	89 d6                	mov    esi,edx
c0002d9b:	8a 07                	mov    al,BYTE PTR [edi]
c0002d9d:	3c 02                	cmp    al,0x2
c0002d9f:	0f 84 99 00 00 00    	je     c0002e3e <get_fat+0xc7>
c0002da5:	77 09                	ja     c0002db0 <get_fat+0x39>
c0002da7:	fe c8                	dec    al
c0002da9:	74 1a                	je     c0002dc5 <get_fat+0x4e>
c0002dab:	e9 b3 01 00 00       	jmp    c0002f63 <get_fat+0x1ec>
c0002db0:	3c 03                	cmp    al,0x3
c0002db2:	0f 84 b5 00 00 00    	je     c0002e6d <get_fat+0xf6>
c0002db8:	3c 04                	cmp    al,0x4
c0002dba:	0f 84 e3 00 00 00    	je     c0002ea3 <get_fat+0x12c>
c0002dc0:	e9 9e 01 00 00       	jmp    c0002f63 <get_fat+0x1ec>
c0002dc5:	89 d3                	mov    ebx,edx
c0002dc7:	31 c9                	xor    ecx,ecx
c0002dc9:	d1 eb                	shr    ebx,1
c0002dcb:	89 f8                	mov    eax,edi
c0002dcd:	01 d3                	add    ebx,edx
c0002dcf:	89 da                	mov    edx,ebx
c0002dd1:	c1 ea 09             	shr    edx,0x9
c0002dd4:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002dd7:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002dda:	e8 10 f4 ff ff       	call   c00021ef <move_window>
c0002ddf:	85 c0                	test   eax,eax
c0002de1:	74 08                	je     c0002deb <get_fat+0x74>
c0002de3:	83 c9 ff             	or     ecx,0xffffffff
c0002de6:	e9 78 01 00 00       	jmp    c0002f63 <get_fat+0x1ec>
c0002deb:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002dee:	31 c9                	xor    ecx,ecx
c0002df0:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002df6:	89 ea                	mov    edx,ebp
c0002df8:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002dfc:	c1 ea 09             	shr    edx,0x9
c0002dff:	89 f8                	mov    eax,edi
c0002e01:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e04:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e07:	e8 e3 f3 ff ff       	call   c00021ef <move_window>
c0002e0c:	85 c0                	test   eax,eax
c0002e0e:	75 d3                	jne    c0002de3 <get_fat+0x6c>
c0002e10:	0f b6 c3             	movzx  eax,bl
c0002e13:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e19:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002e1e:	c1 e3 08             	shl    ebx,0x8
c0002e21:	09 c3                	or     ebx,eax
c0002e23:	89 d9                	mov    ecx,ebx
c0002e25:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002e2b:	83 e6 01             	and    esi,0x1
c0002e2e:	0f 84 2f 01 00 00    	je     c0002f63 <get_fat+0x1ec>
c0002e34:	89 d9                	mov    ecx,ebx
c0002e36:	c1 e9 04             	shr    ecx,0x4
c0002e39:	e9 25 01 00 00       	jmp    c0002f63 <get_fat+0x1ec>
c0002e3e:	31 c9                	xor    ecx,ecx
c0002e40:	c1 ea 08             	shr    edx,0x8
c0002e43:	89 f8                	mov    eax,edi
c0002e45:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e48:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e4b:	e8 9f f3 ff ff       	call   c00021ef <move_window>
c0002e50:	85 c0                	test   eax,eax
c0002e52:	75 8f                	jne    c0002de3 <get_fat+0x6c>
c0002e54:	01 f6                	add    esi,esi
c0002e56:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002e5c:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e60:	e8 ac eb ff ff       	call   c0001a11 <ld_word>
c0002e65:	0f b7 c8             	movzx  ecx,ax
c0002e68:	e9 f6 00 00 00       	jmp    c0002f63 <get_fat+0x1ec>
c0002e6d:	31 c9                	xor    ecx,ecx
c0002e6f:	c1 ea 07             	shr    edx,0x7
c0002e72:	89 f8                	mov    eax,edi
c0002e74:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e77:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e7a:	e8 70 f3 ff ff       	call   c00021ef <move_window>
c0002e7f:	85 c0                	test   eax,eax
c0002e81:	0f 85 5c ff ff ff    	jne    c0002de3 <get_fat+0x6c>
c0002e87:	c1 e6 02             	shl    esi,0x2
c0002e8a:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002e90:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e94:	e8 85 eb ff ff       	call   c0001a1e <ld_dword>
c0002e99:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002e9e:	e9 b4 00 00 00       	jmp    c0002f57 <get_fat+0x1e0>
c0002ea3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002ea6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ea9:	89 d1                	mov    ecx,edx
c0002eab:	09 c1                	or     ecx,eax
c0002ead:	74 06                	je     c0002eb5 <get_fat+0x13e>
c0002eaf:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002eb3:	75 0f                	jne    c0002ec4 <get_fat+0x14d>
c0002eb5:	b9 01 00 00 00       	mov    ecx,0x1
c0002eba:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002ebe:	0f 85 9f 00 00 00    	jne    c0002f63 <get_fat+0x1ec>
c0002ec4:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002ec8:	89 f5                	mov    ebp,esi
c0002eca:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002ecf:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002ed2:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002ed5:	80 f9 02             	cmp    cl,0x2
c0002ed8:	75 35                	jne    c0002f0f <get_fat+0x198>
c0002eda:	83 c0 ff             	add    eax,0xffffffff
c0002edd:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002ee2:	83 d2 ff             	adc    edx,0xffffffff
c0002ee5:	31 db                	xor    ebx,ebx
c0002ee7:	0f ac d0 09          	shrd   eax,edx,0x9
c0002eeb:	53                   	push   ebx
c0002eec:	c1 ea 09             	shr    edx,0x9
c0002eef:	51                   	push   ecx
c0002ef0:	52                   	push   edx
c0002ef1:	50                   	push   eax
c0002ef2:	e8 35 25 02 00       	call   c002542c <__udivdi3>
c0002ef7:	83 c4 10             	add    esp,0x10
c0002efa:	b9 01 00 00 00       	mov    ecx,0x1
c0002eff:	39 c5                	cmp    ebp,eax
c0002f01:	77 60                	ja     c0002f63 <get_fat+0x1ec>
c0002f03:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f08:	74 59                	je     c0002f63 <get_fat+0x1ec>
c0002f0a:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002f0d:	eb 54                	jmp    c0002f63 <get_fat+0x1ec>
c0002f0f:	80 f9 03             	cmp    cl,0x3
c0002f12:	75 05                	jne    c0002f19 <get_fat+0x1a2>
c0002f14:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002f17:	77 f1                	ja     c0002f0a <get_fat+0x193>
c0002f19:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f1e:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002f22:	75 3f                	jne    c0002f63 <get_fat+0x1ec>
c0002f24:	31 c9                	xor    ecx,ecx
c0002f26:	89 f2                	mov    edx,esi
c0002f28:	89 f8                	mov    eax,edi
c0002f2a:	c1 ea 07             	shr    edx,0x7
c0002f2d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f30:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f33:	e8 b7 f2 ff ff       	call   c00021ef <move_window>
c0002f38:	85 c0                	test   eax,eax
c0002f3a:	0f 85 a3 fe ff ff    	jne    c0002de3 <get_fat+0x6c>
c0002f40:	c1 e6 02             	shl    esi,0x2
c0002f43:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002f49:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002f4d:	e8 cc ea ff ff       	call   c0001a1e <ld_dword>
c0002f52:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002f57:	89 c1                	mov    ecx,eax
c0002f59:	eb 08                	jmp    c0002f63 <get_fat+0x1ec>
c0002f5b:	b9 01 00 00 00       	mov    ecx,0x1
c0002f60:	89 c8                	mov    eax,ecx
c0002f62:	c3                   	ret    
c0002f63:	83 c4 1c             	add    esp,0x1c
c0002f66:	89 c8                	mov    eax,ecx
c0002f68:	5b                   	pop    ebx
c0002f69:	5e                   	pop    esi
c0002f6a:	5f                   	pop    edi
c0002f6b:	5d                   	pop    ebp
c0002f6c:	c3                   	ret    

c0002f6d <dir_sdi>:
c0002f6d:	55                   	push   ebp
c0002f6e:	57                   	push   edi
c0002f6f:	56                   	push   esi
c0002f70:	53                   	push   ebx
c0002f71:	89 c3                	mov    ebx,eax
c0002f73:	83 ec 1c             	sub    esp,0x1c
c0002f76:	8b 38                	mov    edi,DWORD PTR [eax]
c0002f78:	31 c0                	xor    eax,eax
c0002f7a:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002f7d:	0f 94 c0             	sete   al
c0002f80:	48                   	dec    eax
c0002f81:	25 00 00 20 f0       	and    eax,0xf0200000
c0002f86:	05 00 00 00 10       	add    eax,0x10000000
c0002f8b:	39 d0                	cmp    eax,edx
c0002f8d:	77 0a                	ja     c0002f99 <dir_sdi+0x2c>
c0002f8f:	b8 02 00 00 00       	mov    eax,0x2
c0002f94:	e9 c4 00 00 00       	jmp    c000305d <dir_sdi+0xf0>
c0002f99:	89 d6                	mov    esi,edx
c0002f9b:	f6 c2 1f             	test   dl,0x1f
c0002f9e:	75 ef                	jne    c0002f8f <dir_sdi+0x22>
c0002fa0:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0002fa3:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0002fa6:	85 c9                	test   ecx,ecx
c0002fa8:	75 2d                	jne    c0002fd7 <dir_sdi+0x6a>
c0002faa:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0002fad:	77 1b                	ja     c0002fca <dir_sdi+0x5d>
c0002faf:	89 f2                	mov    edx,esi
c0002fb1:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0002fb5:	c1 ea 05             	shr    edx,0x5
c0002fb8:	39 c2                	cmp    edx,eax
c0002fba:	73 d3                	jae    c0002f8f <dir_sdi+0x22>
c0002fbc:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002fbf:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0002fc2:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fc5:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002fc8:	eb 4b                	jmp    c0003015 <dir_sdi+0xa8>
c0002fca:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002fcd:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fd1:	85 c0                	test   eax,eax
c0002fd3:	74 da                	je     c0002faf <dir_sdi+0x42>
c0002fd5:	89 c1                	mov    ecx,eax
c0002fd7:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0002fdb:	c1 e5 09             	shl    ebp,0x9
c0002fde:	89 ca                	mov    edx,ecx
c0002fe0:	39 ee                	cmp    esi,ebp
c0002fe2:	72 1c                	jb     c0003000 <dir_sdi+0x93>
c0002fe4:	89 d8                	mov    eax,ebx
c0002fe6:	e8 8c fd ff ff       	call   c0002d77 <get_fat>
c0002feb:	89 c1                	mov    ecx,eax
c0002fed:	83 f8 ff             	cmp    eax,0xffffffff
c0002ff0:	74 66                	je     c0003058 <dir_sdi+0xeb>
c0002ff2:	83 f8 01             	cmp    eax,0x1
c0002ff5:	76 98                	jbe    c0002f8f <dir_sdi+0x22>
c0002ff7:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0002ffa:	76 93                	jbe    c0002f8f <dir_sdi+0x22>
c0002ffc:	29 ee                	sub    esi,ebp
c0002ffe:	eb de                	jmp    c0002fde <dir_sdi+0x71>
c0003000:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003004:	89 f8                	mov    eax,edi
c0003006:	e8 9f ec ff ff       	call   c0001caa <clst2sect>
c000300b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000300f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003012:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003015:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003018:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000301b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000301e:	89 d1                	mov    ecx,edx
c0003020:	09 c1                	or     ecx,eax
c0003022:	0f 84 67 ff ff ff    	je     c0002f8f <dir_sdi+0x22>
c0003028:	89 f1                	mov    ecx,esi
c000302a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003032:	c1 e9 09             	shr    ecx,0x9
c0003035:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003039:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000303d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003041:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003044:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000304a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000304d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003051:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003054:	31 c0                	xor    eax,eax
c0003056:	eb 05                	jmp    c000305d <dir_sdi+0xf0>
c0003058:	b8 01 00 00 00       	mov    eax,0x1
c000305d:	83 c4 1c             	add    esp,0x1c
c0003060:	5b                   	pop    ebx
c0003061:	5e                   	pop    esi
c0003062:	5f                   	pop    edi
c0003063:	5d                   	pop    ebp
c0003064:	c3                   	ret    

c0003065 <create_chain>:
c0003065:	55                   	push   ebp
c0003066:	89 c5                	mov    ebp,eax
c0003068:	57                   	push   edi
c0003069:	56                   	push   esi
c000306a:	53                   	push   ebx
c000306b:	83 ec 1c             	sub    esp,0x1c
c000306e:	85 d2                	test   edx,edx
c0003070:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003074:	8b 30                	mov    esi,DWORD PTR [eax]
c0003076:	75 0e                	jne    c0003086 <create_chain+0x21>
c0003078:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c000307b:	85 ff                	test   edi,edi
c000307d:	74 39                	je     c00030b8 <create_chain+0x53>
c000307f:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0003082:	77 39                	ja     c00030bd <create_chain+0x58>
c0003084:	eb 32                	jmp    c00030b8 <create_chain+0x53>
c0003086:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000308a:	e8 e8 fc ff ff       	call   c0002d77 <get_fat>
c000308f:	89 c3                	mov    ebx,eax
c0003091:	83 f8 01             	cmp    eax,0x1
c0003094:	77 0a                	ja     c00030a0 <create_chain+0x3b>
c0003096:	bb 01 00 00 00       	mov    ebx,0x1
c000309b:	e9 ba 01 00 00       	jmp    c000325a <create_chain+0x1f5>
c00030a0:	83 f8 ff             	cmp    eax,0xffffffff
c00030a3:	0f 84 62 01 00 00    	je     c000320b <create_chain+0x1a6>
c00030a9:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00030ac:	0f 87 a8 01 00 00    	ja     c000325a <create_chain+0x1f5>
c00030b2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00030b6:	eb 05                	jmp    c00030bd <create_chain+0x58>
c00030b8:	bf 01 00 00 00       	mov    edi,0x1
c00030bd:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00030c1:	75 07                	jne    c00030ca <create_chain+0x65>
c00030c3:	31 db                	xor    ebx,ebx
c00030c5:	e9 90 01 00 00       	jmp    c000325a <create_chain+0x1f5>
c00030ca:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00030cd:	75 74                	jne    c0003143 <create_chain+0xde>
c00030cf:	b9 01 00 00 00       	mov    ecx,0x1
c00030d4:	89 fa                	mov    edx,edi
c00030d6:	89 f0                	mov    eax,esi
c00030d8:	e8 2d f9 ff ff       	call   c0002a0a <find_bitmap>
c00030dd:	89 c3                	mov    ebx,eax
c00030df:	8d 40 ff             	lea    eax,[eax-0x1]
c00030e2:	83 f8 fd             	cmp    eax,0xfffffffd
c00030e5:	0f 87 6f 01 00 00    	ja     c000325a <create_chain+0x1f5>
c00030eb:	83 ec 0c             	sub    esp,0xc
c00030ee:	b9 01 00 00 00       	mov    ecx,0x1
c00030f3:	6a 01                	push   0x1
c00030f5:	89 da                	mov    edx,ebx
c00030f7:	89 f0                	mov    eax,esi
c00030f9:	e8 bf f9 ff ff       	call   c0002abd <change_bitmap>
c00030fe:	83 c4 10             	add    esp,0x10
c0003101:	83 f8 02             	cmp    eax,0x2
c0003104:	74 90                	je     c0003096 <create_chain+0x31>
c0003106:	83 f8 01             	cmp    eax,0x1
c0003109:	0f 84 fc 00 00 00    	je     c000320b <create_chain+0x1a6>
c000310f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003114:	75 09                	jne    c000311f <create_chain+0xba>
c0003116:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000311a:	e9 0c 01 00 00       	jmp    c000322b <create_chain+0x1c6>
c000311f:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003123:	0f 85 e7 00 00 00    	jne    c0003210 <create_chain+0x1ab>
c0003129:	8d 57 01             	lea    edx,[edi+0x1]
c000312c:	39 da                	cmp    edx,ebx
c000312e:	0f 84 f7 00 00 00    	je     c000322b <create_chain+0x1c6>
c0003134:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003137:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000313b:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c000313e:	e9 cd 00 00 00       	jmp    c0003210 <create_chain+0x1ab>
c0003143:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003147:	75 41                	jne    c000318a <create_chain+0x125>
c0003149:	8d 5f 01             	lea    ebx,[edi+0x1]
c000314c:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000314f:	77 05                	ja     c0003156 <create_chain+0xf1>
c0003151:	bb 02 00 00 00       	mov    ebx,0x2
c0003156:	89 da                	mov    edx,ebx
c0003158:	89 e8                	mov    eax,ebp
c000315a:	e8 18 fc ff ff       	call   c0002d77 <get_fat>
c000315f:	83 f8 01             	cmp    eax,0x1
c0003162:	0f 84 2e ff ff ff    	je     c0003096 <create_chain+0x31>
c0003168:	83 f8 ff             	cmp    eax,0xffffffff
c000316b:	0f 84 9a 00 00 00    	je     c000320b <create_chain+0x1a6>
c0003171:	85 c0                	test   eax,eax
c0003173:	74 11                	je     c0003186 <create_chain+0x121>
c0003175:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0003178:	83 f8 01             	cmp    eax,0x1
c000317b:	76 0d                	jbe    c000318a <create_chain+0x125>
c000317d:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003180:	76 08                	jbe    c000318a <create_chain+0x125>
c0003182:	89 c7                	mov    edi,eax
c0003184:	eb 04                	jmp    c000318a <create_chain+0x125>
c0003186:	85 db                	test   ebx,ebx
c0003188:	75 38                	jne    c00031c2 <create_chain+0x15d>
c000318a:	89 fb                	mov    ebx,edi
c000318c:	43                   	inc    ebx
c000318d:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003190:	77 0e                	ja     c00031a0 <create_chain+0x13b>
c0003192:	83 ff 01             	cmp    edi,0x1
c0003195:	0f 86 28 ff ff ff    	jbe    c00030c3 <create_chain+0x5e>
c000319b:	bb 02 00 00 00       	mov    ebx,0x2
c00031a0:	89 da                	mov    edx,ebx
c00031a2:	89 e8                	mov    eax,ebp
c00031a4:	e8 ce fb ff ff       	call   c0002d77 <get_fat>
c00031a9:	85 c0                	test   eax,eax
c00031ab:	74 15                	je     c00031c2 <create_chain+0x15d>
c00031ad:	83 f8 01             	cmp    eax,0x1
c00031b0:	0f 84 e0 fe ff ff    	je     c0003096 <create_chain+0x31>
c00031b6:	40                   	inc    eax
c00031b7:	74 52                	je     c000320b <create_chain+0x1a6>
c00031b9:	39 fb                	cmp    ebx,edi
c00031bb:	75 cf                	jne    c000318c <create_chain+0x127>
c00031bd:	e9 01 ff ff ff       	jmp    c00030c3 <create_chain+0x5e>
c00031c2:	83 c9 ff             	or     ecx,0xffffffff
c00031c5:	89 da                	mov    edx,ebx
c00031c7:	89 f0                	mov    eax,esi
c00031c9:	e8 a4 f9 ff ff       	call   c0002b72 <put_fat>
c00031ce:	85 c0                	test   eax,eax
c00031d0:	75 32                	jne    c0003204 <create_chain+0x19f>
c00031d2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00031d7:	74 11                	je     c00031ea <create_chain+0x185>
c00031d9:	89 d9                	mov    ecx,ebx
c00031db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031df:	89 f0                	mov    eax,esi
c00031e1:	e8 8c f9 ff ff       	call   c0002b72 <put_fat>
c00031e6:	85 c0                	test   eax,eax
c00031e8:	75 1a                	jne    c0003204 <create_chain+0x19f>
c00031ea:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00031ed:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c00031f0:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c00031f3:	8d 51 fe             	lea    edx,[ecx-0x2]
c00031f6:	39 d0                	cmp    eax,edx
c00031f8:	77 04                	ja     c00031fe <create_chain+0x199>
c00031fa:	48                   	dec    eax
c00031fb:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00031fe:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003202:	eb 56                	jmp    c000325a <create_chain+0x1f5>
c0003204:	48                   	dec    eax
c0003205:	0f 85 8b fe ff ff    	jne    c0003096 <create_chain+0x31>
c000320b:	83 cb ff             	or     ebx,0xffffffff
c000320e:	eb 4a                	jmp    c000325a <create_chain+0x1f5>
c0003210:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003214:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003217:	41                   	inc    ecx
c0003218:	39 d9                	cmp    ecx,ebx
c000321a:	75 19                	jne    c0003235 <create_chain+0x1d0>
c000321c:	b9 02 00 00 00       	mov    ecx,0x2
c0003221:	85 d2                	test   edx,edx
c0003223:	74 03                	je     c0003228 <create_chain+0x1c3>
c0003225:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003228:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000322b:	85 c0                	test   eax,eax
c000322d:	0f 85 63 fe ff ff    	jne    c0003096 <create_chain+0x31>
c0003233:	eb b5                	jmp    c00031ea <create_chain+0x185>
c0003235:	85 d2                	test   edx,edx
c0003237:	75 07                	jne    c0003240 <create_chain+0x1db>
c0003239:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003240:	89 d9                	mov    ecx,ebx
c0003242:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003246:	89 e8                	mov    eax,ebp
c0003248:	e8 bb fa ff ff       	call   c0002d08 <fill_last_frag>
c000324d:	85 c0                	test   eax,eax
c000324f:	75 b3                	jne    c0003204 <create_chain+0x19f>
c0003251:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003258:	eb 90                	jmp    c00031ea <create_chain+0x185>
c000325a:	83 c4 1c             	add    esp,0x1c
c000325d:	89 d8                	mov    eax,ebx
c000325f:	5b                   	pop    ebx
c0003260:	5e                   	pop    esi
c0003261:	5f                   	pop    edi
c0003262:	5d                   	pop    ebp
c0003263:	c3                   	ret    

c0003264 <remove_chain>:
c0003264:	55                   	push   ebp
c0003265:	57                   	push   edi
c0003266:	56                   	push   esi
c0003267:	53                   	push   ebx
c0003268:	83 ec 1c             	sub    esp,0x1c
c000326b:	83 fa 01             	cmp    edx,0x1
c000326e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003272:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003274:	77 0a                	ja     c0003280 <remove_chain+0x1c>
c0003276:	b8 02 00 00 00       	mov    eax,0x2
c000327b:	e9 24 01 00 00       	jmp    c00033a4 <remove_chain+0x140>
c0003280:	89 d6                	mov    esi,edx
c0003282:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c0003285:	76 ef                	jbe    c0003276 <remove_chain+0x12>
c0003287:	89 c7                	mov    edi,eax
c0003289:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000328e:	75 06                	jne    c0003296 <remove_chain+0x32>
c0003290:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003294:	eb 54                	jmp    c00032ea <remove_chain+0x86>
c0003296:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003299:	75 06                	jne    c00032a1 <remove_chain+0x3d>
c000329b:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c000329f:	74 ef                	je     c0003290 <remove_chain+0x2c>
c00032a1:	83 c9 ff             	or     ecx,0xffffffff
c00032a4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00032a8:	89 d8                	mov    eax,ebx
c00032aa:	e8 c3 f8 ff ff       	call   c0002b72 <put_fat>
c00032af:	85 c0                	test   eax,eax
c00032b1:	74 dd                	je     c0003290 <remove_chain+0x2c>
c00032b3:	e9 ec 00 00 00       	jmp    c00033a4 <remove_chain+0x140>
c00032b8:	83 f8 01             	cmp    eax,0x1
c00032bb:	74 b9                	je     c0003276 <remove_chain+0x12>
c00032bd:	83 f8 ff             	cmp    eax,0xffffffff
c00032c0:	74 6d                	je     c000332f <remove_chain+0xcb>
c00032c2:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032c5:	75 6f                	jne    c0003336 <remove_chain+0xd2>
c00032c7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00032ca:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00032cd:	8d 51 fe             	lea    edx,[ecx-0x2]
c00032d0:	39 d0                	cmp    eax,edx
c00032d2:	73 08                	jae    c00032dc <remove_chain+0x78>
c00032d4:	40                   	inc    eax
c00032d5:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00032d9:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00032dc:	8d 4e 01             	lea    ecx,[esi+0x1]
c00032df:	39 e9                	cmp    ecx,ebp
c00032e1:	75 64                	jne    c0003347 <remove_chain+0xe3>
c00032e3:	89 ee                	mov    esi,ebp
c00032e5:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c00032e8:	76 0f                	jbe    c00032f9 <remove_chain+0x95>
c00032ea:	89 f2                	mov    edx,esi
c00032ec:	89 f8                	mov    eax,edi
c00032ee:	e8 84 fa ff ff       	call   c0002d77 <get_fat>
c00032f3:	89 c5                	mov    ebp,eax
c00032f5:	85 c0                	test   eax,eax
c00032f7:	75 bf                	jne    c00032b8 <remove_chain+0x54>
c00032f9:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032fc:	0f 85 a0 00 00 00    	jne    c00033a2 <remove_chain+0x13e>
c0003302:	eb 6c                	jmp    c0003370 <remove_chain+0x10c>
c0003304:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003307:	84 c0                	test   al,al
c0003309:	75 7d                	jne    c0003388 <remove_chain+0x124>
c000330b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000330e:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003312:	0f 84 86 00 00 00    	je     c000339e <remove_chain+0x13a>
c0003318:	89 da                	mov    edx,ebx
c000331a:	89 f8                	mov    eax,edi
c000331c:	e8 56 fa ff ff       	call   c0002d77 <get_fat>
c0003321:	83 f8 01             	cmp    eax,0x1
c0003324:	0f 86 4c ff ff ff    	jbe    c0003276 <remove_chain+0x12>
c000332a:	83 f8 ff             	cmp    eax,0xffffffff
c000332d:	75 4e                	jne    c000337d <remove_chain+0x119>
c000332f:	b8 01 00 00 00       	mov    eax,0x1
c0003334:	eb 6e                	jmp    c00033a4 <remove_chain+0x140>
c0003336:	31 c9                	xor    ecx,ecx
c0003338:	89 f2                	mov    edx,esi
c000333a:	89 d8                	mov    eax,ebx
c000333c:	e8 31 f8 ff ff       	call   c0002b72 <put_fat>
c0003341:	85 c0                	test   eax,eax
c0003343:	74 82                	je     c00032c7 <remove_chain+0x63>
c0003345:	eb 5d                	jmp    c00033a4 <remove_chain+0x140>
c0003347:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000334a:	75 1b                	jne    c0003367 <remove_chain+0x103>
c000334c:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003350:	89 d8                	mov    eax,ebx
c0003352:	83 ec 0c             	sub    esp,0xc
c0003355:	6a 00                	push   0x0
c0003357:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000335b:	e8 5d f7 ff ff       	call   c0002abd <change_bitmap>
c0003360:	83 c4 10             	add    esp,0x10
c0003363:	85 c0                	test   eax,eax
c0003365:	75 3d                	jne    c00033a4 <remove_chain+0x140>
c0003367:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c000336b:	e9 73 ff ff ff       	jmp    c00032e3 <remove_chain+0x7f>
c0003370:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003375:	75 8d                	jne    c0003304 <remove_chain+0xa0>
c0003377:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c000337b:	eb 25                	jmp    c00033a2 <remove_chain+0x13e>
c000337d:	8d 53 01             	lea    edx,[ebx+0x1]
c0003380:	89 c3                	mov    ebx,eax
c0003382:	39 c2                	cmp    edx,eax
c0003384:	74 88                	je     c000330e <remove_chain+0xaa>
c0003386:	eb 1a                	jmp    c00033a2 <remove_chain+0x13e>
c0003388:	3c 03                	cmp    al,0x3
c000338a:	75 16                	jne    c00033a2 <remove_chain+0x13e>
c000338c:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000338f:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0003393:	77 0d                	ja     c00033a2 <remove_chain+0x13e>
c0003395:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c0003398:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000339c:	72 04                	jb     c00033a2 <remove_chain+0x13e>
c000339e:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00033a2:	31 c0                	xor    eax,eax
c00033a4:	83 c4 1c             	add    esp,0x1c
c00033a7:	5b                   	pop    ebx
c00033a8:	5e                   	pop    esi
c00033a9:	5f                   	pop    edi
c00033aa:	5d                   	pop    ebp
c00033ab:	c3                   	ret    

c00033ac <dir_clear>:
c00033ac:	55                   	push   ebp
c00033ad:	57                   	push   edi
c00033ae:	56                   	push   esi
c00033af:	89 c6                	mov    esi,eax
c00033b1:	53                   	push   ebx
c00033b2:	83 ec 1c             	sub    esp,0x1c
c00033b5:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00033b9:	e8 9d ed ff ff       	call   c000215b <sync_window>
c00033be:	85 c0                	test   eax,eax
c00033c0:	0f 85 de 00 00 00    	jne    c00034a4 <dir_clear+0xf8>
c00033c6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00033ca:	89 f0                	mov    eax,esi
c00033cc:	8d 6e 54             	lea    ebp,[esi+0x54]
c00033cf:	e8 d6 e8 ff ff       	call   c0001caa <clst2sect>
c00033d4:	b9 00 02 00 00       	mov    ecx,0x200
c00033d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00033dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00033e1:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c00033e4:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c00033e7:	89 e8                	mov    eax,ebp
c00033e9:	31 d2                	xor    edx,edx
c00033eb:	e8 b5 e6 ff ff       	call   c0001aa5 <mem_set>
c00033f0:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c00033f4:	c1 e3 09             	shl    ebx,0x9
c00033f7:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c00033fd:	76 1f                	jbe    c000341e <dir_clear+0x72>
c00033ff:	bb 00 80 00 00       	mov    ebx,0x8000
c0003404:	eb 18                	jmp    c000341e <dir_clear+0x72>
c0003406:	83 ec 0c             	sub    esp,0xc
c0003409:	53                   	push   ebx
c000340a:	e8 35 4e 00 00       	call   c0008244 <ff_memalloc>
c000340f:	83 c4 10             	add    esp,0x10
c0003412:	89 c7                	mov    edi,eax
c0003414:	85 c0                	test   eax,eax
c0003416:	0f 85 8f 00 00 00    	jne    c00034ab <dir_clear+0xff>
c000341c:	d1 eb                	shr    ebx,1
c000341e:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003424:	77 e0                	ja     c0003406 <dir_clear+0x5a>
c0003426:	31 db                	xor    ebx,ebx
c0003428:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000342c:	39 d8                	cmp    eax,ebx
c000342e:	76 66                	jbe    c0003496 <dir_clear+0xea>
c0003430:	83 ec 0c             	sub    esp,0xc
c0003433:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003437:	6a 01                	push   0x1
c0003439:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000343d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003441:	55                   	push   ebp
c0003442:	50                   	push   eax
c0003443:	e8 94 e5 ff ff       	call   c00019dc <disk_write>
c0003448:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000344d:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003452:	83 c4 20             	add    esp,0x20
c0003455:	85 c0                	test   eax,eax
c0003457:	75 3d                	jne    c0003496 <dir_clear+0xea>
c0003459:	43                   	inc    ebx
c000345a:	eb cc                	jmp    c0003428 <dir_clear+0x7c>
c000345c:	83 ec 0c             	sub    esp,0xc
c000345f:	31 d2                	xor    edx,edx
c0003461:	55                   	push   ebp
c0003462:	89 d8                	mov    eax,ebx
c0003464:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0003468:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000346c:	52                   	push   edx
c000346d:	50                   	push   eax
c000346e:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003472:	57                   	push   edi
c0003473:	50                   	push   eax
c0003474:	e8 63 e5 ff ff       	call   c00019dc <disk_write>
c0003479:	83 c4 20             	add    esp,0x20
c000347c:	85 c0                	test   eax,eax
c000347e:	75 0a                	jne    c000348a <dir_clear+0xde>
c0003480:	01 eb                	add    ebx,ebp
c0003482:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003486:	39 d8                	cmp    eax,ebx
c0003488:	77 d2                	ja     c000345c <dir_clear+0xb0>
c000348a:	83 ec 0c             	sub    esp,0xc
c000348d:	57                   	push   edi
c000348e:	e8 c7 4d 00 00       	call   c000825a <ff_memfree>
c0003493:	83 c4 10             	add    esp,0x10
c0003496:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000349a:	39 d8                	cmp    eax,ebx
c000349c:	0f 95 c0             	setne  al
c000349f:	0f b6 c0             	movzx  eax,al
c00034a2:	eb 19                	jmp    c00034bd <dir_clear+0x111>
c00034a4:	b8 01 00 00 00       	mov    eax,0x1
c00034a9:	eb 12                	jmp    c00034bd <dir_clear+0x111>
c00034ab:	89 d9                	mov    ecx,ebx
c00034ad:	31 d2                	xor    edx,edx
c00034af:	c1 eb 09             	shr    ebx,0x9
c00034b2:	e8 ee e5 ff ff       	call   c0001aa5 <mem_set>
c00034b7:	89 dd                	mov    ebp,ebx
c00034b9:	31 db                	xor    ebx,ebx
c00034bb:	eb c5                	jmp    c0003482 <dir_clear+0xd6>
c00034bd:	83 c4 1c             	add    esp,0x1c
c00034c0:	5b                   	pop    ebx
c00034c1:	5e                   	pop    esi
c00034c2:	5f                   	pop    edi
c00034c3:	5d                   	pop    ebp
c00034c4:	c3                   	ret    

c00034c5 <dir_next>:
c00034c5:	55                   	push   ebp
c00034c6:	57                   	push   edi
c00034c7:	56                   	push   esi
c00034c8:	53                   	push   ebx
c00034c9:	89 c3                	mov    ebx,eax
c00034cb:	83 ec 1c             	sub    esp,0x1c
c00034ce:	8b 28                	mov    ebp,DWORD PTR [eax]
c00034d0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00034d4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00034d7:	8d 78 20             	lea    edi,[eax+0x20]
c00034da:	31 c0                	xor    eax,eax
c00034dc:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00034e0:	0f 94 c0             	sete   al
c00034e3:	48                   	dec    eax
c00034e4:	25 00 00 20 f0       	and    eax,0xf0200000
c00034e9:	05 00 00 00 10       	add    eax,0x10000000
c00034ee:	39 f8                	cmp    eax,edi
c00034f0:	77 0e                	ja     c0003500 <dir_next+0x3b>
c00034f2:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00034f9:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003500:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003503:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003506:	b8 04 00 00 00       	mov    eax,0x4
c000350b:	89 ce                	mov    esi,ecx
c000350d:	09 d6                	or     esi,edx
c000350f:	0f 84 da 00 00 00    	je     c00035ef <dir_next+0x12a>
c0003515:	89 f8                	mov    eax,edi
c0003517:	25 ff 01 00 00       	and    eax,0x1ff
c000351c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003520:	0f 85 b9 00 00 00    	jne    c00035df <dir_next+0x11a>
c0003526:	83 c2 01             	add    edx,0x1
c0003529:	83 d1 00             	adc    ecx,0x0
c000352c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000352f:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003532:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003535:	85 d2                	test   edx,edx
c0003537:	75 29                	jne    c0003562 <dir_next+0x9d>
c0003539:	89 fa                	mov    edx,edi
c000353b:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000353f:	c1 ea 05             	shr    edx,0x5
c0003542:	39 c2                	cmp    edx,eax
c0003544:	0f 82 95 00 00 00    	jb     c00035df <dir_next+0x11a>
c000354a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003551:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003558:	b8 04 00 00 00       	mov    eax,0x4
c000355d:	e9 8d 00 00 00       	jmp    c00035ef <dir_next+0x12a>
c0003562:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003566:	89 f9                	mov    ecx,edi
c0003568:	48                   	dec    eax
c0003569:	c1 e9 09             	shr    ecx,0x9
c000356c:	85 c8                	test   eax,ecx
c000356e:	75 6f                	jne    c00035df <dir_next+0x11a>
c0003570:	89 d8                	mov    eax,ebx
c0003572:	e8 00 f8 ff ff       	call   c0002d77 <get_fat>
c0003577:	89 c6                	mov    esi,eax
c0003579:	83 f8 01             	cmp    eax,0x1
c000357c:	77 07                	ja     c0003585 <dir_next+0xc0>
c000357e:	b8 02 00 00 00       	mov    eax,0x2
c0003583:	eb 6a                	jmp    c00035ef <dir_next+0x12a>
c0003585:	83 f8 ff             	cmp    eax,0xffffffff
c0003588:	75 07                	jne    c0003591 <dir_next+0xcc>
c000358a:	b8 01 00 00 00       	mov    eax,0x1
c000358f:	eb 5e                	jmp    c00035ef <dir_next+0x12a>
c0003591:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0003594:	77 37                	ja     c00035cd <dir_next+0x108>
c0003596:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000359b:	74 ad                	je     c000354a <dir_next+0x85>
c000359d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00035a0:	89 d8                	mov    eax,ebx
c00035a2:	e8 be fa ff ff       	call   c0003065 <create_chain>
c00035a7:	89 c6                	mov    esi,eax
c00035a9:	b8 07 00 00 00       	mov    eax,0x7
c00035ae:	85 f6                	test   esi,esi
c00035b0:	74 3d                	je     c00035ef <dir_next+0x12a>
c00035b2:	83 fe 01             	cmp    esi,0x1
c00035b5:	74 c7                	je     c000357e <dir_next+0xb9>
c00035b7:	83 fe ff             	cmp    esi,0xffffffff
c00035ba:	74 ce                	je     c000358a <dir_next+0xc5>
c00035bc:	89 f2                	mov    edx,esi
c00035be:	89 e8                	mov    eax,ebp
c00035c0:	e8 e7 fd ff ff       	call   c00033ac <dir_clear>
c00035c5:	85 c0                	test   eax,eax
c00035c7:	75 c1                	jne    c000358a <dir_next+0xc5>
c00035c9:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00035cd:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00035d0:	89 f2                	mov    edx,esi
c00035d2:	89 e8                	mov    eax,ebp
c00035d4:	e8 d1 e6 ff ff       	call   c0001caa <clst2sect>
c00035d9:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00035dc:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00035df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00035e3:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c00035e6:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c00035ea:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00035ed:	31 c0                	xor    eax,eax
c00035ef:	83 c4 1c             	add    esp,0x1c
c00035f2:	5b                   	pop    ebx
c00035f3:	5e                   	pop    esi
c00035f4:	5f                   	pop    edi
c00035f5:	5d                   	pop    ebp
c00035f6:	c3                   	ret    

c00035f7 <load_xdir>:
c00035f7:	55                   	push   ebp
c00035f8:	57                   	push   edi
c00035f9:	56                   	push   esi
c00035fa:	89 c6                	mov    esi,eax
c00035fc:	53                   	push   ebx
c00035fd:	83 ec 1c             	sub    esp,0x1c
c0003600:	8b 00                	mov    eax,DWORD PTR [eax]
c0003602:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003605:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003608:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000360b:	e8 df eb ff ff       	call   c00021ef <move_window>
c0003610:	89 c3                	mov    ebx,eax
c0003612:	85 c0                	test   eax,eax
c0003614:	0f 85 0c 01 00 00    	jne    c0003726 <load_xdir+0x12f>
c000361a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000361d:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003620:	0f 85 fb 00 00 00    	jne    c0003721 <load_xdir+0x12a>
c0003626:	89 f8                	mov    eax,edi
c0003628:	b9 20 00 00 00       	mov    ecx,0x20
c000362d:	e8 5e e4 ff ff       	call   c0001a90 <mem_cpy>
c0003632:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003636:	40                   	inc    eax
c0003637:	c1 e0 05             	shl    eax,0x5
c000363a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000363e:	83 e8 60             	sub    eax,0x60
c0003641:	3d 00 02 00 00       	cmp    eax,0x200
c0003646:	0f 87 d5 00 00 00    	ja     c0003721 <load_xdir+0x12a>
c000364c:	31 d2                	xor    edx,edx
c000364e:	89 f0                	mov    eax,esi
c0003650:	e8 70 fe ff ff       	call   c00034c5 <dir_next>
c0003655:	89 c3                	mov    ebx,eax
c0003657:	83 f8 04             	cmp    eax,0x4
c000365a:	0f 84 c1 00 00 00    	je     c0003721 <load_xdir+0x12a>
c0003660:	85 c0                	test   eax,eax
c0003662:	0f 85 be 00 00 00    	jne    c0003726 <load_xdir+0x12f>
c0003668:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000366b:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000366e:	8b 06                	mov    eax,DWORD PTR [esi]
c0003670:	e8 7a eb ff ff       	call   c00021ef <move_window>
c0003675:	89 c3                	mov    ebx,eax
c0003677:	85 c0                	test   eax,eax
c0003679:	0f 85 a7 00 00 00    	jne    c0003726 <load_xdir+0x12f>
c000367f:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003682:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c0003685:	0f 85 96 00 00 00    	jne    c0003721 <load_xdir+0x12a>
c000368b:	8d 47 20             	lea    eax,[edi+0x20]
c000368e:	b9 20 00 00 00       	mov    ecx,0x20
c0003693:	e8 f8 e3 ff ff       	call   c0001a90 <mem_cpy>
c0003698:	31 d2                	xor    edx,edx
c000369a:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c000369e:	b9 0f 00 00 00       	mov    ecx,0xf
c00036a3:	83 c0 2c             	add    eax,0x2c
c00036a6:	f7 f1                	div    ecx
c00036a8:	c1 e0 05             	shl    eax,0x5
c00036ab:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00036af:	77 70                	ja     c0003721 <load_xdir+0x12a>
c00036b1:	bd 40 00 00 00       	mov    ebp,0x40
c00036b6:	31 d2                	xor    edx,edx
c00036b8:	89 f0                	mov    eax,esi
c00036ba:	e8 06 fe ff ff       	call   c00034c5 <dir_next>
c00036bf:	89 c3                	mov    ebx,eax
c00036c1:	83 f8 04             	cmp    eax,0x4
c00036c4:	74 5b                	je     c0003721 <load_xdir+0x12a>
c00036c6:	85 c0                	test   eax,eax
c00036c8:	75 5c                	jne    c0003726 <load_xdir+0x12f>
c00036ca:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00036cd:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00036d0:	8b 06                	mov    eax,DWORD PTR [esi]
c00036d2:	e8 18 eb ff ff       	call   c00021ef <move_window>
c00036d7:	89 c3                	mov    ebx,eax
c00036d9:	85 c0                	test   eax,eax
c00036db:	75 49                	jne    c0003726 <load_xdir+0x12f>
c00036dd:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00036e0:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c00036e3:	75 3c                	jne    c0003721 <load_xdir+0x12a>
c00036e5:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c00036eb:	77 0d                	ja     c00036fa <load_xdir+0x103>
c00036ed:	8d 04 2f             	lea    eax,[edi+ebp*1]
c00036f0:	b9 20 00 00 00       	mov    ecx,0x20
c00036f5:	e8 96 e3 ff ff       	call   c0001a90 <mem_cpy>
c00036fa:	83 c5 20             	add    ebp,0x20
c00036fd:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003701:	77 b3                	ja     c00036b6 <load_xdir+0xbf>
c0003703:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003709:	77 1b                	ja     c0003726 <load_xdir+0x12f>
c000370b:	89 f8                	mov    eax,edi
c000370d:	e8 cd e7 ff ff       	call   c0001edf <xdir_sum>
c0003712:	89 c1                	mov    ecx,eax
c0003714:	8d 47 02             	lea    eax,[edi+0x2]
c0003717:	e8 f5 e2 ff ff       	call   c0001a11 <ld_word>
c000371c:	66 39 c1             	cmp    cx,ax
c000371f:	74 05                	je     c0003726 <load_xdir+0x12f>
c0003721:	bb 02 00 00 00       	mov    ebx,0x2
c0003726:	83 c4 1c             	add    esp,0x1c
c0003729:	89 d8                	mov    eax,ebx
c000372b:	5b                   	pop    ebx
c000372c:	5e                   	pop    esi
c000372d:	5f                   	pop    edi
c000372e:	5d                   	pop    ebp
c000372f:	c3                   	ret    

c0003730 <load_obj_xdir>:
c0003730:	53                   	push   ebx
c0003731:	89 c3                	mov    ebx,eax
c0003733:	83 ec 08             	sub    esp,0x8
c0003736:	8b 02                	mov    eax,DWORD PTR [edx]
c0003738:	89 03                	mov    DWORD PTR [ebx],eax
c000373a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000373d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003740:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003743:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003746:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003749:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003750:	30 c0                	xor    al,al
c0003752:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003759:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000375c:	89 d8                	mov    eax,ebx
c000375e:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003761:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c0003764:	e8 04 f8 ff ff       	call   c0002f6d <dir_sdi>
c0003769:	85 c0                	test   eax,eax
c000376b:	75 0b                	jne    c0003778 <load_obj_xdir+0x48>
c000376d:	89 d8                	mov    eax,ebx
c000376f:	83 c4 08             	add    esp,0x8
c0003772:	5b                   	pop    ebx
c0003773:	e9 7f fe ff ff       	jmp    c00035f7 <load_xdir>
c0003778:	83 c4 08             	add    esp,0x8
c000377b:	5b                   	pop    ebx
c000377c:	c3                   	ret    

c000377d <dir_read>:
c000377d:	55                   	push   ebp
c000377e:	bd 04 00 00 00       	mov    ebp,0x4
c0003783:	57                   	push   edi
c0003784:	56                   	push   esi
c0003785:	be ff ff ff ff       	mov    esi,0xffffffff
c000378a:	53                   	push   ebx
c000378b:	89 c3                	mov    ebx,eax
c000378d:	83 ec 1c             	sub    esp,0x1c
c0003790:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003794:	8b 38                	mov    edi,DWORD PTR [eax]
c0003796:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000379b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000379e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00037a1:	89 c8                	mov    eax,ecx
c00037a3:	09 d0                	or     eax,edx
c00037a5:	0f 84 25 01 00 00    	je     c00038d0 <dir_read+0x153>
c00037ab:	89 f8                	mov    eax,edi
c00037ad:	e8 3d ea ff ff       	call   c00021ef <move_window>
c00037b2:	89 c5                	mov    ebp,eax
c00037b4:	85 c0                	test   eax,eax
c00037b6:	0f 85 23 01 00 00    	jne    c00038df <dir_read+0x162>
c00037bc:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00037bf:	8a 0a                	mov    cl,BYTE PTR [edx]
c00037c1:	84 c9                	test   cl,cl
c00037c3:	0f 84 11 01 00 00    	je     c00038da <dir_read+0x15d>
c00037c9:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00037cc:	75 48                	jne    c0003816 <dir_read+0x99>
c00037ce:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037d3:	74 10                	je     c00037e5 <dir_read+0x68>
c00037d5:	80 f9 83             	cmp    cl,0x83
c00037d8:	0f 85 dd 00 00 00    	jne    c00038bb <dir_read+0x13e>
c00037de:	31 ed                	xor    ebp,ebp
c00037e0:	e9 08 01 00 00       	jmp    c00038ed <dir_read+0x170>
c00037e5:	80 f9 85             	cmp    cl,0x85
c00037e8:	0f 85 cd 00 00 00    	jne    c00038bb <dir_read+0x13e>
c00037ee:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00037f1:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00037f4:	89 d8                	mov    eax,ebx
c00037f6:	e8 fc fd ff ff       	call   c00035f7 <load_xdir>
c00037fb:	89 c5                	mov    ebp,eax
c00037fd:	85 c0                	test   eax,eax
c00037ff:	0f 85 da 00 00 00    	jne    c00038df <dir_read+0x162>
c0003805:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003808:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c000380b:	83 e0 3f             	and    eax,0x3f
c000380e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003811:	e9 d7 00 00 00       	jmp    c00038ed <dir_read+0x170>
c0003816:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003819:	83 e0 3f             	and    eax,0x3f
c000381c:	80 f9 2e             	cmp    cl,0x2e
c000381f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003823:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003826:	0f 84 8a 00 00 00    	je     c00038b6 <dir_read+0x139>
c000382c:	80 f9 e5             	cmp    cl,0xe5
c000382f:	0f 84 81 00 00 00    	je     c00038b6 <dir_read+0x139>
c0003835:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003839:	83 e0 1f             	and    eax,0x1f
c000383c:	83 f8 08             	cmp    eax,0x8
c000383f:	0f 94 c0             	sete   al
c0003842:	0f b6 c0             	movzx  eax,al
c0003845:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003849:	75 6b                	jne    c00038b6 <dir_read+0x139>
c000384b:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003850:	75 44                	jne    c0003896 <dir_read+0x119>
c0003852:	f6 c1 40             	test   cl,0x40
c0003855:	74 12                	je     c0003869 <dir_read+0xec>
c0003857:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c000385a:	83 e1 bf             	and    ecx,0xffffffbf
c000385d:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003861:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003864:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003867:	eb 06                	jmp    c000386f <dir_read+0xf2>
c0003869:	89 f0                	mov    eax,esi
c000386b:	38 c8                	cmp    al,cl
c000386d:	75 47                	jne    c00038b6 <dir_read+0x139>
c000386f:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003873:	be ff ff ff ff       	mov    esi,0xffffffff
c0003878:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c000387b:	75 3e                	jne    c00038bb <dir_read+0x13e>
c000387d:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003881:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003884:	e8 8a e4 ff ff       	call   c0001d13 <pick_lfn>
c0003889:	85 c0                	test   eax,eax
c000388b:	74 2e                	je     c00038bb <dir_read+0x13e>
c000388d:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003891:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003894:	eb 25                	jmp    c00038bb <dir_read+0x13e>
c0003896:	89 f0                	mov    eax,esi
c0003898:	84 c0                	test   al,al
c000389a:	75 11                	jne    c00038ad <dir_read+0x130>
c000389c:	89 d0                	mov    eax,edx
c000389e:	e8 2a e6 ff ff       	call   c0001ecd <sum_sfn>
c00038a3:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00038a7:	0f 84 31 ff ff ff    	je     c00037de <dir_read+0x61>
c00038ad:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00038b4:	eb 37                	jmp    c00038ed <dir_read+0x170>
c00038b6:	be ff ff ff ff       	mov    esi,0xffffffff
c00038bb:	31 d2                	xor    edx,edx
c00038bd:	89 d8                	mov    eax,ebx
c00038bf:	e8 01 fc ff ff       	call   c00034c5 <dir_next>
c00038c4:	89 c5                	mov    ebp,eax
c00038c6:	85 c0                	test   eax,eax
c00038c8:	0f 84 cd fe ff ff    	je     c000379b <dir_read+0x1e>
c00038ce:	eb 0f                	jmp    c00038df <dir_read+0x162>
c00038d0:	85 ed                	test   ebp,ebp
c00038d2:	0f 84 06 ff ff ff    	je     c00037de <dir_read+0x61>
c00038d8:	eb 05                	jmp    c00038df <dir_read+0x162>
c00038da:	bd 04 00 00 00       	mov    ebp,0x4
c00038df:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00038e6:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00038ed:	83 c4 1c             	add    esp,0x1c
c00038f0:	89 e8                	mov    eax,ebp
c00038f2:	5b                   	pop    ebx
c00038f3:	5e                   	pop    esi
c00038f4:	5f                   	pop    edi
c00038f5:	5d                   	pop    ebp
c00038f6:	c3                   	ret    

c00038f7 <dir_alloc>:
c00038f7:	55                   	push   ebp
c00038f8:	89 d5                	mov    ebp,edx
c00038fa:	57                   	push   edi
c00038fb:	31 d2                	xor    edx,edx
c00038fd:	56                   	push   esi
c00038fe:	53                   	push   ebx
c00038ff:	89 c3                	mov    ebx,eax
c0003901:	83 ec 0c             	sub    esp,0xc
c0003904:	8b 38                	mov    edi,DWORD PTR [eax]
c0003906:	e8 62 f6 ff ff       	call   c0002f6d <dir_sdi>
c000390b:	85 c0                	test   eax,eax
c000390d:	75 4e                	jne    c000395d <dir_alloc+0x66>
c000390f:	31 f6                	xor    esi,esi
c0003911:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003914:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003917:	89 f8                	mov    eax,edi
c0003919:	e8 d1 e8 ff ff       	call   c00021ef <move_window>
c000391e:	85 c0                	test   eax,eax
c0003920:	75 3b                	jne    c000395d <dir_alloc+0x66>
c0003922:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003925:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003928:	8a 12                	mov    dl,BYTE PTR [edx]
c000392a:	75 07                	jne    c0003933 <dir_alloc+0x3c>
c000392c:	f7 d2                	not    edx
c000392e:	c0 ea 07             	shr    dl,0x7
c0003931:	eb 0d                	jmp    c0003940 <dir_alloc+0x49>
c0003933:	84 d2                	test   dl,dl
c0003935:	0f 94 c1             	sete   cl
c0003938:	80 fa e5             	cmp    dl,0xe5
c000393b:	0f 94 c2             	sete   dl
c000393e:	09 ca                	or     edx,ecx
c0003940:	84 d2                	test   dl,dl
c0003942:	74 07                	je     c000394b <dir_alloc+0x54>
c0003944:	46                   	inc    esi
c0003945:	39 ee                	cmp    esi,ebp
c0003947:	75 04                	jne    c000394d <dir_alloc+0x56>
c0003949:	eb 1c                	jmp    c0003967 <dir_alloc+0x70>
c000394b:	31 f6                	xor    esi,esi
c000394d:	ba 01 00 00 00       	mov    edx,0x1
c0003952:	89 d8                	mov    eax,ebx
c0003954:	e8 6c fb ff ff       	call   c00034c5 <dir_next>
c0003959:	85 c0                	test   eax,eax
c000395b:	74 b4                	je     c0003911 <dir_alloc+0x1a>
c000395d:	83 f8 04             	cmp    eax,0x4
c0003960:	75 05                	jne    c0003967 <dir_alloc+0x70>
c0003962:	b8 07 00 00 00       	mov    eax,0x7
c0003967:	83 c4 0c             	add    esp,0xc
c000396a:	5b                   	pop    ebx
c000396b:	5e                   	pop    esi
c000396c:	5f                   	pop    edi
c000396d:	5d                   	pop    ebp
c000396e:	c3                   	ret    

c000396f <store_xdir>:
c000396f:	55                   	push   ebp
c0003970:	57                   	push   edi
c0003971:	89 c7                	mov    edi,eax
c0003973:	56                   	push   esi
c0003974:	53                   	push   ebx
c0003975:	83 ec 0c             	sub    esp,0xc
c0003978:	8b 00                	mov    eax,DWORD PTR [eax]
c000397a:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c000397d:	89 e8                	mov    eax,ebp
c000397f:	e8 5b e5 ff ff       	call   c0001edf <xdir_sum>
c0003984:	0f b7 d0             	movzx  edx,ax
c0003987:	8d 45 02             	lea    eax,[ebp+0x2]
c000398a:	e8 f4 e0 ff ff       	call   c0001a83 <st_word>
c000398f:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003993:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003996:	89 f8                	mov    eax,edi
c0003998:	e8 d0 f5 ff ff       	call   c0002f6d <dir_sdi>
c000399d:	89 c6                	mov    esi,eax
c000399f:	85 f6                	test   esi,esi
c00039a1:	75 3d                	jne    c00039e0 <store_xdir+0x71>
c00039a3:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c00039a6:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c00039a9:	8b 07                	mov    eax,DWORD PTR [edi]
c00039ab:	e8 3f e8 ff ff       	call   c00021ef <move_window>
c00039b0:	89 c6                	mov    esi,eax
c00039b2:	85 c0                	test   eax,eax
c00039b4:	75 2a                	jne    c00039e0 <store_xdir+0x71>
c00039b6:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c00039b9:	b9 20 00 00 00       	mov    ecx,0x20
c00039be:	89 ea                	mov    edx,ebp
c00039c0:	e8 cb e0 ff ff       	call   c0001a90 <mem_cpy>
c00039c5:	8b 07                	mov    eax,DWORD PTR [edi]
c00039c7:	85 db                	test   ebx,ebx
c00039c9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00039cd:	74 11                	je     c00039e0 <store_xdir+0x71>
c00039cf:	31 d2                	xor    edx,edx
c00039d1:	89 f8                	mov    eax,edi
c00039d3:	83 c5 20             	add    ebp,0x20
c00039d6:	e8 ea fa ff ff       	call   c00034c5 <dir_next>
c00039db:	4b                   	dec    ebx
c00039dc:	89 c6                	mov    esi,eax
c00039de:	eb bf                	jmp    c000399f <store_xdir+0x30>
c00039e0:	89 f0                	mov    eax,esi
c00039e2:	83 fe 02             	cmp    esi,0x2
c00039e5:	76 05                	jbe    c00039ec <store_xdir+0x7d>
c00039e7:	b8 02 00 00 00       	mov    eax,0x2
c00039ec:	83 c4 0c             	add    esp,0xc
c00039ef:	5b                   	pop    ebx
c00039f0:	5e                   	pop    esi
c00039f1:	5f                   	pop    edi
c00039f2:	5d                   	pop    ebp
c00039f3:	c3                   	ret    

c00039f4 <dir_remove>:
c00039f4:	57                   	push   edi
c00039f5:	56                   	push   esi
c00039f6:	53                   	push   ebx
c00039f7:	89 c3                	mov    ebx,eax
c00039f9:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00039fc:	8b 30                	mov    esi,DWORD PTR [eax]
c00039fe:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003a01:	83 fa ff             	cmp    edx,0xffffffff
c0003a04:	74 09                	je     c0003a0f <dir_remove+0x1b>
c0003a06:	e8 62 f5 ff ff       	call   c0002f6d <dir_sdi>
c0003a0b:	85 c0                	test   eax,eax
c0003a0d:	75 41                	jne    c0003a50 <dir_remove+0x5c>
c0003a0f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a12:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a15:	89 f0                	mov    eax,esi
c0003a17:	e8 d3 e7 ff ff       	call   c00021ef <move_window>
c0003a1c:	85 c0                	test   eax,eax
c0003a1e:	75 26                	jne    c0003a46 <dir_remove+0x52>
c0003a20:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a23:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003a26:	75 05                	jne    c0003a2d <dir_remove+0x39>
c0003a28:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003a2b:	eb 03                	jmp    c0003a30 <dir_remove+0x3c>
c0003a2d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a30:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a34:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003a37:	73 17                	jae    c0003a50 <dir_remove+0x5c>
c0003a39:	31 d2                	xor    edx,edx
c0003a3b:	89 d8                	mov    eax,ebx
c0003a3d:	e8 83 fa ff ff       	call   c00034c5 <dir_next>
c0003a42:	85 c0                	test   eax,eax
c0003a44:	74 c9                	je     c0003a0f <dir_remove+0x1b>
c0003a46:	83 f8 04             	cmp    eax,0x4
c0003a49:	75 05                	jne    c0003a50 <dir_remove+0x5c>
c0003a4b:	b8 02 00 00 00       	mov    eax,0x2
c0003a50:	5b                   	pop    ebx
c0003a51:	5e                   	pop    esi
c0003a52:	5f                   	pop    edi
c0003a53:	c3                   	ret    

c0003a54 <create_name>:
c0003a54:	55                   	push   ebp
c0003a55:	89 d5                	mov    ebp,edx
c0003a57:	57                   	push   edi
c0003a58:	89 c7                	mov    edi,eax
c0003a5a:	56                   	push   esi
c0003a5b:	31 f6                	xor    esi,esi
c0003a5d:	53                   	push   ebx
c0003a5e:	83 ec 3c             	sub    esp,0x3c
c0003a61:	8b 02                	mov    eax,DWORD PTR [edx]
c0003a63:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003a67:	8b 07                	mov    eax,DWORD PTR [edi]
c0003a69:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003a6c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003a70:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003a74:	e8 72 e0 ff ff       	call   c0001aeb <tchar2uni>
c0003a79:	89 c3                	mov    ebx,eax
c0003a7b:	83 f8 ff             	cmp    eax,0xffffffff
c0003a7e:	75 0a                	jne    c0003a8a <create_name+0x36>
c0003a80:	b8 06 00 00 00       	mov    eax,0x6
c0003a85:	e9 9e 02 00 00       	jmp    c0003d28 <create_name+0x2d4>
c0003a8a:	3d ff ff 00 00       	cmp    eax,0xffff
c0003a8f:	76 0c                	jbe    c0003a9d <create_name+0x49>
c0003a91:	c1 e8 10             	shr    eax,0x10
c0003a94:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003a98:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003a9c:	46                   	inc    esi
c0003a9d:	66 83 fb 1f          	cmp    bx,0x1f
c0003aa1:	76 4f                	jbe    c0003af2 <create_name+0x9e>
c0003aa3:	66 83 fb 5c          	cmp    bx,0x5c
c0003aa7:	74 35                	je     c0003ade <create_name+0x8a>
c0003aa9:	66 83 fb 2f          	cmp    bx,0x2f
c0003aad:	74 2f                	je     c0003ade <create_name+0x8a>
c0003aaf:	66 83 fb 7f          	cmp    bx,0x7f
c0003ab3:	77 11                	ja     c0003ac6 <create_name+0x72>
c0003ab5:	0f b7 d3             	movzx  edx,bx
c0003ab8:	b8 92 7e 02 c0       	mov    eax,0xc0027e92
c0003abd:	e8 11 e0 ff ff       	call   c0001ad3 <chk_chr>
c0003ac2:	85 c0                	test   eax,eax
c0003ac4:	75 ba                	jne    c0003a80 <create_name+0x2c>
c0003ac6:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003acc:	77 b2                	ja     c0003a80 <create_name+0x2c>
c0003ace:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ad2:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003ad6:	46                   	inc    esi
c0003ad7:	eb 97                	jmp    c0003a70 <create_name+0x1c>
c0003ad9:	40                   	inc    eax
c0003ada:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ade:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003ae2:	8a 10                	mov    dl,BYTE PTR [eax]
c0003ae4:	80 fa 2f             	cmp    dl,0x2f
c0003ae7:	74 f0                	je     c0003ad9 <create_name+0x85>
c0003ae9:	80 fa 5c             	cmp    dl,0x5c
c0003aec:	74 eb                	je     c0003ad9 <create_name+0x85>
c0003aee:	31 db                	xor    ebx,ebx
c0003af0:	eb 02                	jmp    c0003af4 <create_name+0xa0>
c0003af2:	b3 04                	mov    bl,0x4
c0003af4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003af8:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003afb:	85 f6                	test   esi,esi
c0003afd:	74 18                	je     c0003b17 <create_name+0xc3>
c0003aff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b03:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003b08:	66 83 f8 20          	cmp    ax,0x20
c0003b0c:	74 06                	je     c0003b14 <create_name+0xc0>
c0003b0e:	66 83 f8 2e          	cmp    ax,0x2e
c0003b12:	75 03                	jne    c0003b17 <create_name+0xc3>
c0003b14:	4e                   	dec    esi
c0003b15:	eb e4                	jmp    c0003afb <create_name+0xa7>
c0003b17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b1b:	31 ed                	xor    ebp,ebp
c0003b1d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003b23:	85 f6                	test   esi,esi
c0003b25:	0f 84 55 ff ff ff    	je     c0003a80 <create_name+0x2c>
c0003b2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b2f:	8d 55 01             	lea    edx,[ebp+0x1]
c0003b32:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003b36:	66 83 f8 20          	cmp    ax,0x20
c0003b3a:	75 04                	jne    c0003b40 <create_name+0xec>
c0003b3c:	89 d5                	mov    ebp,edx
c0003b3e:	eb eb                	jmp    c0003b2b <create_name+0xd7>
c0003b40:	85 ed                	test   ebp,ebp
c0003b42:	75 06                	jne    c0003b4a <create_name+0xf6>
c0003b44:	66 83 f8 2e          	cmp    ax,0x2e
c0003b48:	75 08                	jne    c0003b52 <create_name+0xfe>
c0003b4a:	83 cb 03             	or     ebx,0x3
c0003b4d:	eb 03                	jmp    c0003b52 <create_name+0xfe>
c0003b4f:	4e                   	dec    esi
c0003b50:	74 0c                	je     c0003b5e <create_name+0x10a>
c0003b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b56:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003b5c:	75 f1                	jne    c0003b4f <create_name+0xfb>
c0003b5e:	b9 0b 00 00 00       	mov    ecx,0xb
c0003b63:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003b66:	ba 20 00 00 00       	mov    edx,0x20
c0003b6b:	e8 35 df ff ff       	call   c0001aa5 <mem_set>
c0003b70:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003b78:	31 c9                	xor    ecx,ecx
c0003b7a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003b7f:	8d 45 01             	lea    eax,[ebp+0x1]
c0003b82:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003b86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b8a:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003b8e:	66 85 ed             	test   bp,bp
c0003b91:	0f 84 30 01 00 00    	je     c0003cc7 <create_name+0x273>
c0003b97:	66 83 fd 20          	cmp    bp,0x20
c0003b9b:	74 10                	je     c0003bad <create_name+0x159>
c0003b9d:	66 83 fd 2e          	cmp    bp,0x2e
c0003ba1:	75 13                	jne    c0003bb6 <create_name+0x162>
c0003ba3:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003ba7:	0f 84 6b 01 00 00    	je     c0003d18 <create_name+0x2c4>
c0003bad:	83 cb 03             	or     ebx,0x3
c0003bb0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003bb4:	eb c9                	jmp    c0003b7f <create_name+0x12b>
c0003bb6:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003bba:	73 0b                	jae    c0003bc7 <create_name+0x173>
c0003bbc:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003bc0:	75 47                	jne    c0003c09 <create_name+0x1b5>
c0003bc2:	e9 51 01 00 00       	jmp    c0003d18 <create_name+0x2c4>
c0003bc7:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003bcc:	75 10                	jne    c0003bde <create_name+0x18a>
c0003bce:	83 cb 03             	or     ebx,0x3
c0003bd1:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003bd9:	e9 e9 00 00 00       	jmp    c0003cc7 <create_name+0x273>
c0003bde:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003be2:	74 0d                	je     c0003bf1 <create_name+0x19d>
c0003be4:	83 cb 03             	or     ebx,0x3
c0003be7:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003beb:	0f 87 d6 00 00 00    	ja     c0003cc7 <create_name+0x273>
c0003bf1:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003bf6:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003bfa:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003c02:	b9 08 00 00 00       	mov    ecx,0x8
c0003c07:	eb a7                	jmp    c0003bb0 <create_name+0x15c>
c0003c09:	66 83 fd 7f          	cmp    bp,0x7f
c0003c0d:	76 68                	jbe    c0003c77 <create_name+0x223>
c0003c0f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003c13:	88 da                	mov    dl,bl
c0003c15:	83 ca 02             	or     edx,0x2
c0003c18:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003c1c:	50                   	push   eax
c0003c1d:	50                   	push   eax
c0003c1e:	68 b5 01 00 00       	push   0x1b5
c0003c23:	55                   	push   ebp
c0003c24:	e8 48 46 00 00       	call   c0008271 <ff_uni2oem>
c0003c29:	83 c4 10             	add    esp,0x10
c0003c2c:	89 c5                	mov    ebp,eax
c0003c2e:	a8 80                	test   al,0x80
c0003c30:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003c34:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003c38:	74 0c                	je     c0003c46 <create_name+0x1f2>
c0003c3a:	83 e5 7f             	and    ebp,0x7f
c0003c3d:	0f b6 ad e0 7d 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd8220]
c0003c44:	eb 2a                	jmp    c0003c70 <create_name+0x21c>
c0003c46:	66 3d ff 00          	cmp    ax,0xff
c0003c4a:	76 24                	jbe    c0003c70 <create_name+0x21c>
c0003c4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003c50:	48                   	dec    eax
c0003c51:	39 c8                	cmp    eax,ecx
c0003c53:	77 0c                	ja     c0003c61 <create_name+0x20d>
c0003c55:	83 cb 03             	or     ebx,0x3
c0003c58:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003c5c:	e9 4f ff ff ff       	jmp    c0003bb0 <create_name+0x15c>
c0003c61:	89 e8                	mov    eax,ebp
c0003c63:	88 d3                	mov    bl,dl
c0003c65:	66 c1 e8 08          	shr    ax,0x8
c0003c69:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003c6d:	41                   	inc    ecx
c0003c6e:	eb 4b                	jmp    c0003cbb <create_name+0x267>
c0003c70:	88 d3                	mov    bl,dl
c0003c72:	66 85 ed             	test   bp,bp
c0003c75:	74 19                	je     c0003c90 <create_name+0x23c>
c0003c77:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003c7b:	0f b7 d5             	movzx  edx,bp
c0003c7e:	b8 9b 7e 02 c0       	mov    eax,0xc0027e9b
c0003c83:	e8 4b de ff ff       	call   c0001ad3 <chk_chr>
c0003c88:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003c8c:	85 c0                	test   eax,eax
c0003c8e:	74 0a                	je     c0003c9a <create_name+0x246>
c0003c90:	83 cb 03             	or     ebx,0x3
c0003c93:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003c98:	eb 21                	jmp    c0003cbb <create_name+0x267>
c0003c9a:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003c9d:	66 83 f8 19          	cmp    ax,0x19
c0003ca1:	77 07                	ja     c0003caa <create_name+0x256>
c0003ca3:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ca8:	eb 11                	jmp    c0003cbb <create_name+0x267>
c0003caa:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003cad:	66 83 f8 19          	cmp    ax,0x19
c0003cb1:	77 08                	ja     c0003cbb <create_name+0x267>
c0003cb3:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003cb8:	83 ed 20             	sub    ebp,0x20
c0003cbb:	89 e8                	mov    eax,ebp
c0003cbd:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003cc1:	41                   	inc    ecx
c0003cc2:	e9 e9 fe ff ff       	jmp    c0003bb0 <create_name+0x15c>
c0003cc7:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003ccb:	75 04                	jne    c0003cd1 <create_name+0x27d>
c0003ccd:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003cd1:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003cd6:	75 05                	jne    c0003cdd <create_name+0x289>
c0003cd8:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003cdd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003ce1:	83 e0 0c             	and    eax,0xc
c0003ce4:	3c 0c                	cmp    al,0xc
c0003ce6:	74 0b                	je     c0003cf3 <create_name+0x29f>
c0003ce8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003cec:	83 e0 03             	and    eax,0x3
c0003cef:	3c 03                	cmp    al,0x3
c0003cf1:	75 05                	jne    c0003cf8 <create_name+0x2a4>
c0003cf3:	83 cb 02             	or     ebx,0x2
c0003cf6:	eb 19                	jmp    c0003d11 <create_name+0x2bd>
c0003cf8:	f6 c3 02             	test   bl,0x2
c0003cfb:	75 14                	jne    c0003d11 <create_name+0x2bd>
c0003cfd:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003d02:	74 03                	je     c0003d07 <create_name+0x2b3>
c0003d04:	83 cb 10             	or     ebx,0x10
c0003d07:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003d0c:	74 03                	je     c0003d11 <create_name+0x2bd>
c0003d0e:	83 cb 08             	or     ebx,0x8
c0003d11:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003d14:	31 c0                	xor    eax,eax
c0003d16:	eb 10                	jmp    c0003d28 <create_name+0x2d4>
c0003d18:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d1d:	0f 85 ce fe ff ff    	jne    c0003bf1 <create_name+0x19d>
c0003d23:	e9 a6 fe ff ff       	jmp    c0003bce <create_name+0x17a>
c0003d28:	83 c4 3c             	add    esp,0x3c
c0003d2b:	5b                   	pop    ebx
c0003d2c:	5e                   	pop    esi
c0003d2d:	5f                   	pop    edi
c0003d2e:	5d                   	pop    ebp
c0003d2f:	c3                   	ret    

c0003d30 <xname_sum>:
c0003d30:	56                   	push   esi
c0003d31:	53                   	push   ebx
c0003d32:	89 c6                	mov    esi,eax
c0003d34:	51                   	push   ecx
c0003d35:	31 db                	xor    ebx,ebx
c0003d37:	83 c6 02             	add    esi,0x2
c0003d3a:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003d3e:	66 85 c0             	test   ax,ax
c0003d41:	74 1f                	je     c0003d62 <xname_sum+0x32>
c0003d43:	83 ec 0c             	sub    esp,0xc
c0003d46:	66 d1 cb             	ror    bx,1
c0003d49:	50                   	push   eax
c0003d4a:	e8 1e 46 00 00       	call   c000836d <ff_wtoupper>
c0003d4f:	83 c4 10             	add    esp,0x10
c0003d52:	0f b6 d0             	movzx  edx,al
c0003d55:	66 c1 e8 08          	shr    ax,0x8
c0003d59:	01 d3                	add    ebx,edx
c0003d5b:	66 d1 cb             	ror    bx,1
c0003d5e:	01 c3                	add    ebx,eax
c0003d60:	eb d5                	jmp    c0003d37 <xname_sum+0x7>
c0003d62:	89 d8                	mov    eax,ebx
c0003d64:	5a                   	pop    edx
c0003d65:	5b                   	pop    ebx
c0003d66:	5e                   	pop    esi
c0003d67:	c3                   	ret    

c0003d68 <create_xdir>:
c0003d68:	55                   	push   ebp
c0003d69:	b9 40 00 00 00       	mov    ecx,0x40
c0003d6e:	57                   	push   edi
c0003d6f:	bd 01 00 00 00       	mov    ebp,0x1
c0003d74:	56                   	push   esi
c0003d75:	31 ff                	xor    edi,edi
c0003d77:	53                   	push   ebx
c0003d78:	be 40 00 00 00       	mov    esi,0x40
c0003d7d:	89 c3                	mov    ebx,eax
c0003d7f:	83 ec 1c             	sub    esp,0x1c
c0003d82:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003d86:	31 d2                	xor    edx,edx
c0003d88:	e8 18 dd ff ff       	call   c0001aa5 <mem_set>
c0003d8d:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003d90:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003d94:	31 c9                	xor    ecx,ecx
c0003d96:	8d 46 01             	lea    eax,[esi+0x1]
c0003d99:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003d9d:	83 c6 02             	add    esi,0x2
c0003da0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003da4:	66 85 ed             	test   bp,bp
c0003da7:	74 12                	je     c0003dbb <create_xdir+0x53>
c0003da9:	0f b6 c1             	movzx  eax,cl
c0003dac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003db0:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003db4:	66 83 fd 01          	cmp    bp,0x1
c0003db8:	80 d9 ff             	sbb    cl,0xff
c0003dbb:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003dbe:	0f b7 d5             	movzx  edx,bp
c0003dc1:	83 c6 02             	add    esi,0x2
c0003dc4:	e8 ba dc ff ff       	call   c0001a83 <st_word>
c0003dc9:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003dcf:	75 d3                	jne    c0003da4 <create_xdir+0x3c>
c0003dd1:	8d 47 01             	lea    eax,[edi+0x1]
c0003dd4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003dd8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003ddc:	0f b6 c1             	movzx  eax,cl
c0003ddf:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003de4:	74 07                	je     c0003ded <create_xdir+0x85>
c0003de6:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003deb:	eb a9                	jmp    c0003d96 <create_xdir+0x2e>
c0003ded:	8d 47 02             	lea    eax,[edi+0x2]
c0003df0:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003df3:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003df6:	89 d0                	mov    eax,edx
c0003df8:	e8 33 ff ff ff       	call   c0003d30 <xname_sum>
c0003dfd:	83 c4 1c             	add    esp,0x1c
c0003e00:	0f b7 d0             	movzx  edx,ax
c0003e03:	8d 43 24             	lea    eax,[ebx+0x24]
c0003e06:	5b                   	pop    ebx
c0003e07:	5e                   	pop    esi
c0003e08:	5f                   	pop    edi
c0003e09:	5d                   	pop    ebp
c0003e0a:	e9 74 dc ff ff       	jmp    c0001a83 <st_word>

c0003e0f <cmp_lfn>:
c0003e0f:	55                   	push   ebp
c0003e10:	57                   	push   edi
c0003e11:	89 d7                	mov    edi,edx
c0003e13:	56                   	push   esi
c0003e14:	53                   	push   ebx
c0003e15:	83 ec 1c             	sub    esp,0x1c
c0003e18:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e1c:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003e1f:	e8 ed db ff ff       	call   c0001a11 <ld_word>
c0003e24:	66 85 c0             	test   ax,ax
c0003e27:	74 07                	je     c0003e30 <cmp_lfn+0x21>
c0003e29:	31 c0                	xor    eax,eax
c0003e2b:	e9 9a 00 00 00       	jmp    c0003eca <cmp_lfn+0xbb>
c0003e30:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003e32:	bd 01 00 00 00       	mov    ebp,0x1
c0003e37:	83 e3 3f             	and    ebx,0x3f
c0003e3a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003e42:	4b                   	dec    ebx
c0003e43:	6b db 0d             	imul   ebx,ebx,0xd
c0003e46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003e4a:	0f b6 80 60 7e 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd81a0]
c0003e51:	01 f8                	add    eax,edi
c0003e53:	e8 b9 db ff ff       	call   c0001a11 <ld_word>
c0003e58:	66 85 ed             	test   bp,bp
c0003e5b:	89 c6                	mov    esi,eax
c0003e5d:	74 3c                	je     c0003e9b <cmp_lfn+0x8c>
c0003e5f:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003e65:	77 c2                	ja     c0003e29 <cmp_lfn+0x1a>
c0003e67:	83 ec 0c             	sub    esp,0xc
c0003e6a:	0f b7 c0             	movzx  eax,ax
c0003e6d:	50                   	push   eax
c0003e6e:	e8 fa 44 00 00       	call   c000836d <ff_wtoupper>
c0003e73:	89 c5                	mov    ebp,eax
c0003e75:	8d 43 01             	lea    eax,[ebx+0x1]
c0003e78:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003e7c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003e80:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003e84:	89 04 24             	mov    DWORD PTR [esp],eax
c0003e87:	e8 e1 44 00 00       	call   c000836d <ff_wtoupper>
c0003e8c:	83 c4 10             	add    esp,0x10
c0003e8f:	39 c5                	cmp    ebp,eax
c0003e91:	75 96                	jne    c0003e29 <cmp_lfn+0x1a>
c0003e93:	89 f5                	mov    ebp,esi
c0003e95:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003e99:	eb 04                	jmp    c0003e9f <cmp_lfn+0x90>
c0003e9b:	66 46                	inc    si
c0003e9d:	75 8a                	jne    c0003e29 <cmp_lfn+0x1a>
c0003e9f:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003ea3:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003ea8:	75 9c                	jne    c0003e46 <cmp_lfn+0x37>
c0003eaa:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003ead:	74 16                	je     c0003ec5 <cmp_lfn+0xb6>
c0003eaf:	66 85 ed             	test   bp,bp
c0003eb2:	74 11                	je     c0003ec5 <cmp_lfn+0xb6>
c0003eb4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003eb8:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003ebd:	0f 94 c0             	sete   al
c0003ec0:	0f b6 c0             	movzx  eax,al
c0003ec3:	eb 05                	jmp    c0003eca <cmp_lfn+0xbb>
c0003ec5:	b8 01 00 00 00       	mov    eax,0x1
c0003eca:	83 c4 1c             	add    esp,0x1c
c0003ecd:	5b                   	pop    ebx
c0003ece:	5e                   	pop    esi
c0003ecf:	5f                   	pop    edi
c0003ed0:	5d                   	pop    ebp
c0003ed1:	c3                   	ret    

c0003ed2 <dir_find>:
c0003ed2:	55                   	push   ebp
c0003ed3:	31 d2                	xor    edx,edx
c0003ed5:	57                   	push   edi
c0003ed6:	56                   	push   esi
c0003ed7:	53                   	push   ebx
c0003ed8:	89 c3                	mov    ebx,eax
c0003eda:	83 ec 1c             	sub    esp,0x1c
c0003edd:	8b 30                	mov    esi,DWORD PTR [eax]
c0003edf:	e8 89 f0 ff ff       	call   c0002f6d <dir_sdi>
c0003ee4:	89 04 24             	mov    DWORD PTR [esp],eax
c0003ee7:	85 c0                	test   eax,eax
c0003ee9:	0f 85 9e 01 00 00    	jne    c000408d <dir_find+0x1bb>
c0003eef:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003ef2:	0f 85 8d 00 00 00    	jne    c0003f85 <dir_find+0xb3>
c0003ef8:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003efb:	e8 30 fe ff ff       	call   c0003d30 <xname_sum>
c0003f00:	89 c7                	mov    edi,eax
c0003f02:	31 d2                	xor    edx,edx
c0003f04:	89 d8                	mov    eax,ebx
c0003f06:	e8 72 f8 ff ff       	call   c000377d <dir_read>
c0003f0b:	85 c0                	test   eax,eax
c0003f0d:	0f 85 5e 01 00 00    	jne    c0004071 <dir_find+0x19f>
c0003f13:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003f16:	8d 41 24             	lea    eax,[ecx+0x24]
c0003f19:	e8 f3 da ff ff       	call   c0001a11 <ld_word>
c0003f1e:	66 39 f8             	cmp    ax,di
c0003f21:	75 df                	jne    c0003f02 <dir_find+0x30>
c0003f23:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0003f26:	31 ed                	xor    ebp,ebp
c0003f28:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003f2c:	ba 40 00 00 00       	mov    edx,0x40
c0003f31:	89 e9                	mov    ecx,ebp
c0003f33:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0003f37:	0f 84 42 01 00 00    	je     c000407f <dir_find+0x1ad>
c0003f3d:	f6 c2 1f             	test   dl,0x1f
c0003f40:	75 03                	jne    c0003f45 <dir_find+0x73>
c0003f42:	83 c2 02             	add    edx,0x2
c0003f45:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003f49:	89 d0                	mov    eax,edx
c0003f4b:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003f4e:	e8 be da ff ff       	call   c0001a11 <ld_word>
c0003f53:	83 ec 0c             	sub    esp,0xc
c0003f56:	0f b7 c0             	movzx  eax,ax
c0003f59:	50                   	push   eax
c0003f5a:	e8 0e 44 00 00       	call   c000836d <ff_wtoupper>
c0003f5f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003f63:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f66:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0003f6a:	89 04 24             	mov    DWORD PTR [esp],eax
c0003f6d:	e8 fb 43 00 00       	call   c000836d <ff_wtoupper>
c0003f72:	83 c4 10             	add    esp,0x10
c0003f75:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003f79:	75 87                	jne    c0003f02 <dir_find+0x30>
c0003f7b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003f7f:	45                   	inc    ebp
c0003f80:	83 c2 02             	add    edx,0x2
c0003f83:	eb ac                	jmp    c0003f31 <dir_find+0x5f>
c0003f85:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003f8c:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003f91:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003f96:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003f99:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003f9c:	89 f0                	mov    eax,esi
c0003f9e:	e8 4c e2 ff ff       	call   c00021ef <move_window>
c0003fa3:	85 c0                	test   eax,eax
c0003fa5:	0f 85 c6 00 00 00    	jne    c0004071 <dir_find+0x19f>
c0003fab:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0003fae:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0003fb1:	84 c9                	test   cl,cl
c0003fb3:	0f 84 bd 00 00 00    	je     c0004076 <dir_find+0x1a4>
c0003fb9:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003fbc:	88 d0                	mov    al,dl
c0003fbe:	83 e0 3f             	and    eax,0x3f
c0003fc1:	80 f9 e5             	cmp    cl,0xe5
c0003fc4:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003fc7:	0f 84 87 00 00 00    	je     c0004054 <dir_find+0x182>
c0003fcd:	80 e2 08             	and    dl,0x8
c0003fd0:	74 06                	je     c0003fd8 <dir_find+0x106>
c0003fd2:	3c 0f                	cmp    al,0xf
c0003fd4:	75 7e                	jne    c0004054 <dir_find+0x182>
c0003fd6:	eb 04                	jmp    c0003fdc <dir_find+0x10a>
c0003fd8:	3c 0f                	cmp    al,0xf
c0003fda:	75 4c                	jne    c0004028 <dir_find+0x156>
c0003fdc:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0003fe0:	75 7e                	jne    c0004060 <dir_find+0x18e>
c0003fe2:	f6 c1 40             	test   cl,0x40
c0003fe5:	74 12                	je     c0003ff9 <dir_find+0x127>
c0003fe7:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003fea:	83 e1 bf             	and    ecx,0xffffffbf
c0003fed:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0003ff1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003ff4:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003ff7:	eb 06                	jmp    c0003fff <dir_find+0x12d>
c0003ff9:	89 f8                	mov    eax,edi
c0003ffb:	38 c8                	cmp    al,cl
c0003ffd:	75 5c                	jne    c000405b <dir_find+0x189>
c0003fff:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004003:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004008:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000400b:	75 53                	jne    c0004060 <dir_find+0x18e>
c000400d:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004011:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004014:	89 ea                	mov    edx,ebp
c0004016:	e8 f4 fd ff ff       	call   c0003e0f <cmp_lfn>
c000401b:	85 c0                	test   eax,eax
c000401d:	74 41                	je     c0004060 <dir_find+0x18e>
c000401f:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004023:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004026:	eb 38                	jmp    c0004060 <dir_find+0x18e>
c0004028:	89 f8                	mov    eax,edi
c000402a:	84 c0                	test   al,al
c000402c:	75 0d                	jne    c000403b <dir_find+0x169>
c000402e:	89 e8                	mov    eax,ebp
c0004030:	e8 98 de ff ff       	call   c0001ecd <sum_sfn>
c0004035:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004039:	74 52                	je     c000408d <dir_find+0x1bb>
c000403b:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c000403f:	75 13                	jne    c0004054 <dir_find+0x182>
c0004041:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004044:	b9 0b 00 00 00       	mov    ecx,0xb
c0004049:	89 e8                	mov    eax,ebp
c000404b:	e8 60 da ff ff       	call   c0001ab0 <mem_cmp>
c0004050:	85 c0                	test   eax,eax
c0004052:	74 39                	je     c000408d <dir_find+0x1bb>
c0004054:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c000405b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004060:	31 d2                	xor    edx,edx
c0004062:	89 d8                	mov    eax,ebx
c0004064:	e8 5c f4 ff ff       	call   c00034c5 <dir_next>
c0004069:	85 c0                	test   eax,eax
c000406b:	0f 84 25 ff ff ff    	je     c0003f96 <dir_find+0xc4>
c0004071:	89 04 24             	mov    DWORD PTR [esp],eax
c0004074:	eb 17                	jmp    c000408d <dir_find+0x1bb>
c0004076:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000407d:	eb 0e                	jmp    c000408d <dir_find+0x1bb>
c000407f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004082:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c0004087:	0f 85 75 fe ff ff    	jne    c0003f02 <dir_find+0x30>
c000408d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004090:	83 c4 1c             	add    esp,0x1c
c0004093:	5b                   	pop    ebx
c0004094:	5e                   	pop    esi
c0004095:	5f                   	pop    edi
c0004096:	5d                   	pop    ebp
c0004097:	c3                   	ret    

c0004098 <dir_register>:
c0004098:	55                   	push   ebp
c0004099:	57                   	push   edi
c000409a:	56                   	push   esi
c000409b:	be 06 00 00 00       	mov    esi,0x6
c00040a0:	53                   	push   ebx
c00040a1:	83 ec 6c             	sub    esp,0x6c
c00040a4:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00040a8:	0f 85 62 02 00 00    	jne    c0004310 <dir_register+0x278>
c00040ae:	8b 28                	mov    ebp,DWORD PTR [eax]
c00040b0:	31 ff                	xor    edi,edi
c00040b2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00040b5:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00040ba:	74 03                	je     c00040bf <dir_register+0x27>
c00040bc:	47                   	inc    edi
c00040bd:	eb f6                	jmp    c00040b5 <dir_register+0x1d>
c00040bf:	89 c3                	mov    ebx,eax
c00040c1:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00040c5:	0f 85 e1 00 00 00    	jne    c00041ac <dir_register+0x114>
c00040cb:	83 c7 0e             	add    edi,0xe
c00040ce:	b9 0f 00 00 00       	mov    ecx,0xf
c00040d3:	89 f8                	mov    eax,edi
c00040d5:	31 d2                	xor    edx,edx
c00040d7:	f7 f1                	div    ecx
c00040d9:	8d 50 02             	lea    edx,[eax+0x2]
c00040dc:	89 c7                	mov    edi,eax
c00040de:	89 d8                	mov    eax,ebx
c00040e0:	e8 12 f8 ff ff       	call   c00038f7 <dir_alloc>
c00040e5:	89 c6                	mov    esi,eax
c00040e7:	85 c0                	test   eax,eax
c00040e9:	0f 85 21 02 00 00    	jne    c0004310 <dir_register+0x278>
c00040ef:	81 c7 01 00 00 08    	add    edi,0x8000001
c00040f5:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00040f8:	c1 e7 05             	shl    edi,0x5
c00040fb:	29 f8                	sub    eax,edi
c00040fd:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004100:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004103:	a8 04                	test   al,0x4
c0004105:	0f 84 91 00 00 00    	je     c000419c <dir_register+0x104>
c000410b:	83 e0 fb             	and    eax,0xfffffffb
c000410e:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004111:	89 d8                	mov    eax,ebx
c0004113:	e8 25 ec ff ff       	call   c0002d3d <fill_first_frag>
c0004118:	85 c0                	test   eax,eax
c000411a:	0f 85 ee 01 00 00    	jne    c000430e <dir_register+0x276>
c0004120:	83 c9 ff             	or     ecx,0xffffffff
c0004123:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004126:	89 d8                	mov    eax,ebx
c0004128:	e8 db eb ff ff       	call   c0002d08 <fill_last_frag>
c000412d:	85 c0                	test   eax,eax
c000412f:	0f 85 d9 01 00 00    	jne    c000430e <dir_register+0x276>
c0004135:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004139:	74 61                	je     c000419c <dir_register+0x104>
c000413b:	89 da                	mov    edx,ebx
c000413d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004141:	e8 ea f5 ff ff       	call   c0003730 <load_obj_xdir>
c0004146:	85 c0                	test   eax,eax
c0004148:	0f 85 c0 01 00 00    	jne    c000430e <dir_register+0x276>
c000414e:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004152:	31 c9                	xor    ecx,ecx
c0004154:	c1 e2 09             	shl    edx,0x9
c0004157:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c000415a:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c000415d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004160:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004163:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004166:	83 c0 38             	add    eax,0x38
c0004169:	e8 1c d9 ff ff       	call   c0001a8a <st_qword>
c000416e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004171:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004174:	83 c0 28             	add    eax,0x28
c0004177:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000417a:	e8 0b d9 ff ff       	call   c0001a8a <st_qword>
c000417f:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004182:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0004185:	83 c8 01             	or     eax,0x1
c0004188:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c000418b:	8d 44 24 14          	lea    eax,[esp+0x14]
c000418f:	e8 db f7 ff ff       	call   c000396f <store_xdir>
c0004194:	85 c0                	test   eax,eax
c0004196:	0f 85 72 01 00 00    	jne    c000430e <dir_register+0x276>
c000419c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000419f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00041a2:	e8 c1 fb ff ff       	call   c0003d68 <create_xdir>
c00041a7:	e9 64 01 00 00       	jmp    c0004310 <dir_register+0x278>
c00041ac:	8d 40 3c             	lea    eax,[eax+0x3c]
c00041af:	b9 0c 00 00 00       	mov    ecx,0xc
c00041b4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00041b8:	89 c2                	mov    edx,eax
c00041ba:	8d 44 24 14          	lea    eax,[esp+0x14]
c00041be:	e8 cd d8 ff ff       	call   c0001a90 <mem_cpy>
c00041c3:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00041c8:	74 58                	je     c0004222 <dir_register+0x18a>
c00041ca:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00041ce:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00041d6:	83 ec 0c             	sub    esp,0xc
c00041d9:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00041dc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00041e0:	8d 54 24 24          	lea    edx,[esp+0x24]
c00041e4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00041e8:	e8 24 dc ff ff       	call   c0001e11 <gen_numname>
c00041ed:	89 d8                	mov    eax,ebx
c00041ef:	e8 de fc ff ff       	call   c0003ed2 <dir_find>
c00041f4:	83 c4 10             	add    esp,0x10
c00041f7:	89 c6                	mov    esi,eax
c00041f9:	85 c0                	test   eax,eax
c00041fb:	75 15                	jne    c0004212 <dir_register+0x17a>
c00041fd:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004201:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004206:	75 ce                	jne    c00041d6 <dir_register+0x13e>
c0004208:	be 07 00 00 00       	mov    esi,0x7
c000420d:	e9 fe 00 00 00       	jmp    c0004310 <dir_register+0x278>
c0004212:	83 f8 04             	cmp    eax,0x4
c0004215:	0f 85 f5 00 00 00    	jne    c0004310 <dir_register+0x278>
c000421b:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000421f:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004222:	b9 01 00 00 00       	mov    ecx,0x1
c0004227:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000422c:	74 0f                	je     c000423d <dir_register+0x1a5>
c000422e:	b9 0d 00 00 00       	mov    ecx,0xd
c0004233:	8d 47 0c             	lea    eax,[edi+0xc]
c0004236:	31 d2                	xor    edx,edx
c0004238:	f7 f1                	div    ecx
c000423a:	8d 48 01             	lea    ecx,[eax+0x1]
c000423d:	89 ca                	mov    edx,ecx
c000423f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004243:	89 d8                	mov    eax,ebx
c0004245:	e8 ad f6 ff ff       	call   c00038f7 <dir_alloc>
c000424a:	89 c6                	mov    esi,eax
c000424c:	85 c0                	test   eax,eax
c000424e:	0f 85 bc 00 00 00    	jne    c0004310 <dir_register+0x278>
c0004254:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004258:	49                   	dec    ecx
c0004259:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000425d:	74 6a                	je     c00042c9 <dir_register+0x231>
c000425f:	89 c8                	mov    eax,ecx
c0004261:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004264:	c1 e0 05             	shl    eax,0x5
c0004267:	29 c2                	sub    edx,eax
c0004269:	89 d8                	mov    eax,ebx
c000426b:	e8 fd ec ff ff       	call   c0002f6d <dir_sdi>
c0004270:	89 c6                	mov    esi,eax
c0004272:	85 c0                	test   eax,eax
c0004274:	0f 85 96 00 00 00    	jne    c0004310 <dir_register+0x278>
c000427a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000427e:	e8 4a dc ff ff       	call   c0001ecd <sum_sfn>
c0004283:	0f b6 f8             	movzx  edi,al
c0004286:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004289:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000428c:	89 e8                	mov    eax,ebp
c000428e:	e8 5c df ff ff       	call   c00021ef <move_window>
c0004293:	89 c6                	mov    esi,eax
c0004295:	85 c0                	test   eax,eax
c0004297:	75 77                	jne    c0004310 <dir_register+0x278>
c0004299:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c000429e:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00042a1:	83 ec 0c             	sub    esp,0xc
c00042a4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00042a7:	57                   	push   edi
c00042a8:	e8 e0 da ff ff       	call   c0001d8d <put_lfn>
c00042ad:	31 d2                	xor    edx,edx
c00042af:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00042b3:	89 d8                	mov    eax,ebx
c00042b5:	e8 0b f2 ff ff       	call   c00034c5 <dir_next>
c00042ba:	83 c4 10             	add    esp,0x10
c00042bd:	89 c6                	mov    esi,eax
c00042bf:	85 c0                	test   eax,eax
c00042c1:	75 4d                	jne    c0004310 <dir_register+0x278>
c00042c3:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00042c7:	75 bd                	jne    c0004286 <dir_register+0x1ee>
c00042c9:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00042cc:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00042cf:	89 e8                	mov    eax,ebp
c00042d1:	e8 19 df ff ff       	call   c00021ef <move_window>
c00042d6:	89 c6                	mov    esi,eax
c00042d8:	85 c0                	test   eax,eax
c00042da:	75 34                	jne    c0004310 <dir_register+0x278>
c00042dc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00042df:	b9 20 00 00 00       	mov    ecx,0x20
c00042e4:	31 d2                	xor    edx,edx
c00042e6:	e8 ba d7 ff ff       	call   c0001aa5 <mem_set>
c00042eb:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00042ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00042f2:	b9 0b 00 00 00       	mov    ecx,0xb
c00042f7:	e8 94 d7 ff ff       	call   c0001a90 <mem_cpy>
c00042fc:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c00042ff:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004302:	83 e0 18             	and    eax,0x18
c0004305:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004308:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000430c:	eb 02                	jmp    c0004310 <dir_register+0x278>
c000430e:	89 c6                	mov    esi,eax
c0004310:	83 c4 6c             	add    esp,0x6c
c0004313:	89 f0                	mov    eax,esi
c0004315:	5b                   	pop    ebx
c0004316:	5e                   	pop    esi
c0004317:	5f                   	pop    edi
c0004318:	5d                   	pop    ebp
c0004319:	c3                   	ret    

c000431a <sync_fs>:
c000431a:	56                   	push   esi
c000431b:	53                   	push   ebx
c000431c:	53                   	push   ebx
c000431d:	89 c3                	mov    ebx,eax
c000431f:	e8 37 de ff ff       	call   c000215b <sync_window>
c0004324:	85 c0                	test   eax,eax
c0004326:	0f 85 b1 00 00 00    	jne    c00043dd <sync_fs+0xc3>
c000432c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000432f:	0f 85 8e 00 00 00    	jne    c00043c3 <sync_fs+0xa9>
c0004335:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004339:	0f 85 84 00 00 00    	jne    c00043c3 <sync_fs+0xa9>
c000433f:	b9 00 02 00 00       	mov    ecx,0x200
c0004344:	8d 73 54             	lea    esi,[ebx+0x54]
c0004347:	31 d2                	xor    edx,edx
c0004349:	89 f0                	mov    eax,esi
c000434b:	e8 55 d7 ff ff       	call   c0001aa5 <mem_set>
c0004350:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0004356:	ba 55 aa 00 00       	mov    edx,0xaa55
c000435b:	e8 23 d7 ff ff       	call   c0001a83 <st_word>
c0004360:	ba 52 52 61 41       	mov    edx,0x41615252
c0004365:	89 f0                	mov    eax,esi
c0004367:	e8 1b d7 ff ff       	call   c0001a87 <st_dword>
c000436c:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004372:	ba 72 72 41 61       	mov    edx,0x61417272
c0004377:	e8 0b d7 ff ff       	call   c0001a87 <st_dword>
c000437c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000437f:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c0004385:	e8 fd d6 ff ff       	call   c0001a87 <st_dword>
c000438a:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000438d:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c0004393:	e8 ef d6 ff ff       	call   c0001a87 <st_dword>
c0004398:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000439b:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000439e:	83 c0 01             	add    eax,0x1
c00043a1:	83 d2 00             	adc    edx,0x0
c00043a4:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00043a7:	83 ec 0c             	sub    esp,0xc
c00043aa:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00043ad:	6a 01                	push   0x1
c00043af:	52                   	push   edx
c00043b0:	50                   	push   eax
c00043b1:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043b5:	56                   	push   esi
c00043b6:	50                   	push   eax
c00043b7:	e8 20 d6 ff ff       	call   c00019dc <disk_write>
c00043bc:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00043c0:	83 c4 20             	add    esp,0x20
c00043c3:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043c7:	51                   	push   ecx
c00043c8:	6a 00                	push   0x0
c00043ca:	6a 00                	push   0x0
c00043cc:	50                   	push   eax
c00043cd:	e8 20 d6 ff ff       	call   c00019f2 <disk_ioctl>
c00043d2:	83 c4 10             	add    esp,0x10
c00043d5:	85 c0                	test   eax,eax
c00043d7:	0f 95 c0             	setne  al
c00043da:	0f b6 c0             	movzx  eax,al
c00043dd:	5a                   	pop    edx
c00043de:	5b                   	pop    ebx
c00043df:	5e                   	pop    esi
c00043e0:	c3                   	ret    

c00043e1 <create_partition>:
c00043e1:	55                   	push   ebp
c00043e2:	0f b6 c0             	movzx  eax,al
c00043e5:	57                   	push   edi
c00043e6:	56                   	push   esi
c00043e7:	53                   	push   ebx
c00043e8:	83 ec 60             	sub    esp,0x60
c00043eb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00043ef:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c00043f3:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00043f7:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c00043fb:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c00043ff:	50                   	push   eax
c0004400:	6a 01                	push   0x1
c0004402:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004406:	e8 e7 d5 ff ff       	call   c00019f2 <disk_ioctl>
c000440b:	83 c4 10             	add    esp,0x10
c000440e:	85 c0                	test   eax,eax
c0004410:	74 0a                	je     c000441c <create_partition+0x3b>
c0004412:	b8 01 00 00 00       	mov    eax,0x1
c0004417:	e9 67 05 00 00       	jmp    c0004983 <create_partition+0x5a2>
c000441c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004420:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004424:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004428:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000442c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004431:	0f 86 ed 03 00 00    	jbe    c0004824 <create_partition+0x443>
c0004437:	83 c0 df             	add    eax,0xffffffdf
c000443a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004442:	83 d2 ff             	adc    edx,0xffffffff
c0004445:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004449:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000444d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004451:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004455:	83 c0 bd             	add    eax,0xffffffbd
c0004458:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000445f:	83 d2 ff             	adc    edx,0xffffffff
c0004462:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0004466:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000446a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004472:	be 22 00 00 00       	mov    esi,0x22
c0004477:	31 ff                	xor    edi,edi
c0004479:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004481:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c0004489:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0004491:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004495:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000449b:	75 0e                	jne    c00044ab <create_partition+0xca>
c000449d:	b9 00 02 00 00       	mov    ecx,0x200
c00044a2:	31 d2                	xor    edx,edx
c00044a4:	89 d8                	mov    eax,ebx
c00044a6:	e8 fa d5 ff ff       	call   c0001aa5 <mem_set>
c00044ab:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00044af:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00044b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00044b7:	0b 04 24             	or     eax,DWORD PTR [esp]
c00044ba:	0f 84 23 01 00 00    	je     c00045e3 <create_partition+0x202>
c00044c0:	89 f0                	mov    eax,esi
c00044c2:	89 fa                	mov    edx,edi
c00044c4:	05 ff 07 00 00       	add    eax,0x7ff
c00044c9:	83 d2 00             	adc    edx,0x0
c00044cc:	89 c1                	mov    ecx,eax
c00044ce:	89 d7                	mov    edi,edx
c00044d0:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00044d6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00044da:	89 ce                	mov    esi,ecx
c00044dc:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00044e0:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00044e4:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00044e8:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c00044eb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00044ef:	89 04 24             	mov    DWORD PTR [esp],eax
c00044f2:	b8 64 00 00 00       	mov    eax,0x64
c00044f7:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00044fa:	b8 00 00 00 00       	mov    eax,0x0
c00044ff:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004503:	72 41                	jb     c0004546 <create_partition+0x165>
c0004505:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004509:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000450d:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004511:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004516:	01 c1                	add    ecx,eax
c0004518:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000451c:	f7 24 24             	mul    DWORD PTR [esp]
c000451f:	6a 00                	push   0x0
c0004521:	01 ca                	add    edx,ecx
c0004523:	6a 64                	push   0x64
c0004525:	52                   	push   edx
c0004526:	50                   	push   eax
c0004527:	e8 00 0f 02 00       	call   c002542c <__udivdi3>
c000452c:	83 c4 10             	add    esp,0x10
c000452f:	05 ff 07 00 00       	add    eax,0x7ff
c0004534:	83 d2 00             	adc    edx,0x0
c0004537:	89 c1                	mov    ecx,eax
c0004539:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000453d:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004543:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004546:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004549:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000454d:	01 f0                	add    eax,esi
c000454f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004553:	11 fa                	adc    edx,edi
c0004555:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0004559:	19 d1                	sbb    ecx,edx
c000455b:	73 2e                	jae    c000458b <create_partition+0x1aa>
c000455d:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004561:	89 f8                	mov    eax,edi
c0004563:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000456a:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c000456e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004576:	73 6b                	jae    c00045e3 <create_partition+0x202>
c0004578:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000457c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004580:	29 f0                	sub    eax,esi
c0004582:	19 fa                	sbb    edx,edi
c0004584:	89 04 24             	mov    DWORD PTR [esp],eax
c0004587:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000458b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000458f:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004592:	74 4f                	je     c00045e3 <create_partition+0x202>
c0004594:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0004597:	b9 10 00 00 00       	mov    ecx,0x10
c000459c:	ba 70 7e 02 c0       	mov    edx,0xc0027e70
c00045a1:	e8 ea d4 ff ff       	call   c0001a90 <mem_cpy>
c00045a6:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00045aa:	b9 10 00 00 00       	mov    ecx,0x10
c00045af:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00045b3:	e8 2c db ff ff       	call   c00020e4 <make_rand>
c00045b8:	89 f2                	mov    edx,esi
c00045ba:	89 f9                	mov    ecx,edi
c00045bc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00045c0:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00045c4:	e8 c1 d4 ff ff       	call   c0001a8a <st_qword>
c00045c9:	03 34 24             	add    esi,DWORD PTR [esp]
c00045cc:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00045d0:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00045d4:	89 f2                	mov    edx,esi
c00045d6:	89 f9                	mov    ecx,edi
c00045d8:	83 c2 ff             	add    edx,0xffffffff
c00045db:	83 d1 ff             	adc    ecx,0xffffffff
c00045de:	e8 a7 d4 ff ff       	call   c0001a8a <st_qword>
c00045e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00045e7:	83 e8 80             	sub    eax,0xffffff80
c00045ea:	89 c5                	mov    ebp,eax
c00045ec:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00045f0:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00045f6:	75 6b                	jne    c0004663 <create_partition+0x282>
c00045f8:	45                   	inc    ebp
c00045f9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045fd:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004602:	e8 39 da ff ff       	call   c0002040 <crc32>
c0004607:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000460d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004611:	75 e5                	jne    c00045f8 <create_partition+0x217>
c0004613:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004617:	31 d2                	xor    edx,edx
c0004619:	83 ec 0c             	sub    esp,0xc
c000461c:	c1 ed 09             	shr    ebp,0x9
c000461f:	6a 01                	push   0x1
c0004621:	8d 45 02             	lea    eax,[ebp+0x2]
c0004624:	52                   	push   edx
c0004625:	50                   	push   eax
c0004626:	53                   	push   ebx
c0004627:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000462b:	e8 ac d3 ff ff       	call   c00019dc <disk_write>
c0004630:	83 c4 20             	add    esp,0x20
c0004633:	85 c0                	test   eax,eax
c0004635:	0f 85 d7 fd ff ff    	jne    c0004412 <create_partition+0x31>
c000463b:	83 ec 0c             	sub    esp,0xc
c000463e:	31 d2                	xor    edx,edx
c0004640:	6a 01                	push   0x1
c0004642:	89 e8                	mov    eax,ebp
c0004644:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004648:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000464c:	52                   	push   edx
c000464d:	50                   	push   eax
c000464e:	53                   	push   ebx
c000464f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004653:	e8 84 d3 ff ff       	call   c00019dc <disk_write>
c0004658:	83 c4 20             	add    esp,0x20
c000465b:	85 c0                	test   eax,eax
c000465d:	0f 85 af fd ff ff    	jne    c0004412 <create_partition+0x31>
c0004663:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004667:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000466b:	3d 00 40 00 00       	cmp    eax,0x4000
c0004670:	74 0d                	je     c000467f <create_partition+0x29e>
c0004672:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0004676:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000467a:	e9 12 fe ff ff       	jmp    c0004491 <create_partition+0xb0>
c000467f:	31 d2                	xor    edx,edx
c0004681:	b9 00 02 00 00       	mov    ecx,0x200
c0004686:	89 d8                	mov    eax,ebx
c0004688:	8d 6b 20             	lea    ebp,[ebx+0x20]
c000468b:	e8 15 d4 ff ff       	call   c0001aa5 <mem_set>
c0004690:	8d 7b 48             	lea    edi,[ebx+0x48]
c0004693:	b9 10 00 00 00       	mov    ecx,0x10
c0004698:	ba 60 7d 02 c0       	mov    edx,0xc0027d60
c000469d:	89 d8                	mov    eax,ebx
c000469f:	e8 ec d3 ff ff       	call   c0001a90 <mem_cpy>
c00046a4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00046a8:	8d 43 58             	lea    eax,[ebx+0x58]
c00046ab:	f7 d2                	not    edx
c00046ad:	e8 d5 d3 ff ff       	call   c0001a87 <st_dword>
c00046b2:	8d 43 18             	lea    eax,[ebx+0x18]
c00046b5:	31 c9                	xor    ecx,ecx
c00046b7:	89 04 24             	mov    DWORD PTR [esp],eax
c00046ba:	ba 01 00 00 00       	mov    edx,0x1
c00046bf:	e8 c6 d3 ff ff       	call   c0001a8a <st_qword>
c00046c4:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00046c8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00046cc:	83 c2 ff             	add    edx,0xffffffff
c00046cf:	89 e8                	mov    eax,ebp
c00046d1:	83 d1 ff             	adc    ecx,0xffffffff
c00046d4:	e8 b1 d3 ff ff       	call   c0001a8a <st_qword>
c00046d9:	31 c9                	xor    ecx,ecx
c00046db:	8d 43 28             	lea    eax,[ebx+0x28]
c00046de:	ba 22 00 00 00       	mov    edx,0x22
c00046e3:	e8 a2 d3 ff ff       	call   c0001a8a <st_qword>
c00046e8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00046ec:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00046f0:	83 c2 de             	add    edx,0xffffffde
c00046f3:	8d 43 30             	lea    eax,[ebx+0x30]
c00046f6:	83 d1 ff             	adc    ecx,0xffffffff
c00046f9:	31 f6                	xor    esi,esi
c00046fb:	e8 8a d3 ff ff       	call   c0001a8a <st_qword>
c0004700:	8d 43 54             	lea    eax,[ebx+0x54]
c0004703:	ba 80 00 00 00       	mov    edx,0x80
c0004708:	e8 7a d3 ff ff       	call   c0001a87 <st_dword>
c000470d:	8d 43 50             	lea    eax,[ebx+0x50]
c0004710:	ba 80 00 00 00       	mov    edx,0x80
c0004715:	e8 6d d3 ff ff       	call   c0001a87 <st_dword>
c000471a:	ba 02 00 00 00       	mov    edx,0x2
c000471f:	89 f8                	mov    eax,edi
c0004721:	e8 61 d3 ff ff       	call   c0001a87 <st_dword>
c0004726:	8d 53 38             	lea    edx,[ebx+0x38]
c0004729:	b9 10 00 00 00       	mov    ecx,0x10
c000472e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004732:	e8 ad d9 ff ff       	call   c00020e4 <make_rand>
c0004737:	83 c8 ff             	or     eax,0xffffffff
c000473a:	46                   	inc    esi
c000473b:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004740:	e8 fb d8 ff ff       	call   c0002040 <crc32>
c0004745:	83 fe 5c             	cmp    esi,0x5c
c0004748:	75 f0                	jne    c000473a <create_partition+0x359>
c000474a:	f7 d0                	not    eax
c000474c:	8d 73 10             	lea    esi,[ebx+0x10]
c000474f:	89 c2                	mov    edx,eax
c0004751:	89 f0                	mov    eax,esi
c0004753:	e8 2f d3 ff ff       	call   c0001a87 <st_dword>
c0004758:	83 ec 0c             	sub    esp,0xc
c000475b:	6a 01                	push   0x1
c000475d:	6a 00                	push   0x0
c000475f:	6a 01                	push   0x1
c0004761:	53                   	push   ebx
c0004762:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004766:	e8 71 d2 ff ff       	call   c00019dc <disk_write>
c000476b:	83 c4 20             	add    esp,0x20
c000476e:	85 c0                	test   eax,eax
c0004770:	0f 85 9c fc ff ff    	jne    c0004412 <create_partition+0x31>
c0004776:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000477a:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000477e:	83 c2 ff             	add    edx,0xffffffff
c0004781:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004784:	83 d1 ff             	adc    ecx,0xffffffff
c0004787:	e8 fe d2 ff ff       	call   c0001a8a <st_qword>
c000478c:	ba 01 00 00 00       	mov    edx,0x1
c0004791:	31 c9                	xor    ecx,ecx
c0004793:	89 e8                	mov    eax,ebp
c0004795:	e8 f0 d2 ff ff       	call   c0001a8a <st_qword>
c000479a:	89 f8                	mov    eax,edi
c000479c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00047a0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047a4:	31 ff                	xor    edi,edi
c00047a6:	e8 df d2 ff ff       	call   c0001a8a <st_qword>
c00047ab:	89 f0                	mov    eax,esi
c00047ad:	31 d2                	xor    edx,edx
c00047af:	e8 d3 d2 ff ff       	call   c0001a87 <st_dword>
c00047b4:	83 c8 ff             	or     eax,0xffffffff
c00047b7:	47                   	inc    edi
c00047b8:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00047bd:	e8 7e d8 ff ff       	call   c0002040 <crc32>
c00047c2:	83 ff 5c             	cmp    edi,0x5c
c00047c5:	75 f0                	jne    c00047b7 <create_partition+0x3d6>
c00047c7:	f7 d0                	not    eax
c00047c9:	89 c2                	mov    edx,eax
c00047cb:	89 f0                	mov    eax,esi
c00047cd:	e8 b5 d2 ff ff       	call   c0001a87 <st_dword>
c00047d2:	83 ec 0c             	sub    esp,0xc
c00047d5:	6a 01                	push   0x1
c00047d7:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00047db:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00047df:	83 c0 ff             	add    eax,0xffffffff
c00047e2:	83 d2 ff             	adc    edx,0xffffffff
c00047e5:	52                   	push   edx
c00047e6:	50                   	push   eax
c00047e7:	53                   	push   ebx
c00047e8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00047ec:	e8 eb d1 ff ff       	call   c00019dc <disk_write>
c00047f1:	83 c4 20             	add    esp,0x20
c00047f4:	85 c0                	test   eax,eax
c00047f6:	0f 85 16 fc ff ff    	jne    c0004412 <create_partition+0x31>
c00047fc:	31 d2                	xor    edx,edx
c00047fe:	89 d8                	mov    eax,ebx
c0004800:	b9 00 02 00 00       	mov    ecx,0x200
c0004805:	e8 9b d2 ff ff       	call   c0001aa5 <mem_set>
c000480a:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004810:	b9 10 00 00 00       	mov    ecx,0x10
c0004815:	ba 70 7d 02 c0       	mov    edx,0xc0027d70
c000481a:	e8 71 d2 ff ff       	call   c0001a90 <mem_cpy>
c000481f:	e9 21 01 00 00       	jmp    c0004945 <create_partition+0x564>
c0004824:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004828:	b9 05 00 00 00       	mov    ecx,0x5
c000482d:	89 04 24             	mov    DWORD PTR [esp],eax
c0004830:	bf 08 00 00 00       	mov    edi,0x8
c0004835:	89 f8                	mov    eax,edi
c0004837:	31 d2                	xor    edx,edx
c0004839:	0f b6 f0             	movzx  esi,al
c000483c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000483f:	f7 f6                	div    esi
c0004841:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004846:	76 0a                	jbe    c0004852 <create_partition+0x471>
c0004848:	d1 e7                	shl    edi,1
c000484a:	49                   	dec    ecx
c000484b:	75 e8                	jne    c0004835 <create_partition+0x454>
c000484d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004852:	b9 00 02 00 00       	mov    ecx,0x200
c0004857:	31 d2                	xor    edx,edx
c0004859:	89 d8                	mov    eax,ebx
c000485b:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004861:	e8 3f d2 ff ff       	call   c0001aa5 <mem_set>
c0004866:	b9 64 00 00 00       	mov    ecx,0x64
c000486b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000486e:	31 d2                	xor    edx,edx
c0004870:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004878:	f7 f1                	div    ecx
c000487a:	b9 3f 00 00 00       	mov    ecx,0x3f
c000487f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004883:	89 f8                	mov    eax,edi
c0004885:	0f b6 c0             	movzx  eax,al
c0004888:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000488c:	e9 80 00 00 00       	jmp    c0004911 <create_partition+0x530>
c0004891:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004894:	29 cf                	sub    edi,ecx
c0004896:	89 ca                	mov    edx,ecx
c0004898:	89 f0                	mov    eax,esi
c000489a:	bd 3f 00 00 00       	mov    ebp,0x3f
c000489f:	e8 e3 d1 ff ff       	call   c0001a87 <st_dword>
c00048a4:	8d 46 04             	lea    eax,[esi+0x4]
c00048a7:	89 fa                	mov    edx,edi
c00048a9:	83 c6 10             	add    esi,0x10
c00048ac:	e8 d6 d1 ff ff       	call   c0001a87 <st_dword>
c00048b1:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00048b5:	31 d2                	xor    edx,edx
c00048b7:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c00048ba:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c00048be:	89 c8                	mov    eax,ecx
c00048c0:	01 f9                	add    ecx,edi
c00048c2:	f7 f5                	div    ebp
c00048c4:	89 d5                	mov    ebp,edx
c00048c6:	31 d2                	xor    edx,edx
c00048c8:	45                   	inc    ebp
c00048c9:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c00048cd:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c00048d0:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c00048d3:	89 c2                	mov    edx,eax
c00048d5:	8d 41 ff             	lea    eax,[ecx-0x1]
c00048d8:	c1 ea 02             	shr    edx,0x2
c00048db:	83 e2 c0             	and    edx,0xffffffc0
c00048de:	09 ea                	or     edx,ebp
c00048e0:	bd 3f 00 00 00       	mov    ebp,0x3f
c00048e5:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c00048e8:	31 d2                	xor    edx,edx
c00048ea:	f7 f5                	div    ebp
c00048ec:	89 d7                	mov    edi,edx
c00048ee:	31 d2                	xor    edx,edx
c00048f0:	47                   	inc    edi
c00048f1:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c00048f5:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c00048f8:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c00048fb:	89 c5                	mov    ebp,eax
c00048fd:	c1 ed 02             	shr    ebp,0x2
c0004900:	83 e5 c0             	and    ebp,0xffffffc0
c0004903:	09 ef                	or     edi,ebp
c0004905:	89 fa                	mov    edx,edi
c0004907:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c000490a:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c000490f:	74 34                	je     c0004945 <create_partition+0x564>
c0004911:	85 c9                	test   ecx,ecx
c0004913:	74 30                	je     c0004945 <create_partition+0x564>
c0004915:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004918:	76 2b                	jbe    c0004945 <create_partition+0x564>
c000491a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000491e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004922:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004925:	83 ff 64             	cmp    edi,0x64
c0004928:	76 4b                	jbe    c0004975 <create_partition+0x594>
c000492a:	89 f8                	mov    eax,edi
c000492c:	01 c8                	add    eax,ecx
c000492e:	0f 82 5d ff ff ff    	jb     c0004891 <create_partition+0x4b0>
c0004934:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004937:	0f 87 54 ff ff ff    	ja     c0004891 <create_partition+0x4b0>
c000493d:	85 ff                	test   edi,edi
c000493f:	0f 85 51 ff ff ff    	jne    c0004896 <create_partition+0x4b5>
c0004945:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c000494b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004950:	e8 2e d1 ff ff       	call   c0001a83 <st_word>
c0004955:	83 ec 0c             	sub    esp,0xc
c0004958:	6a 01                	push   0x1
c000495a:	6a 00                	push   0x0
c000495c:	6a 00                	push   0x0
c000495e:	53                   	push   ebx
c000495f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004963:	e8 74 d0 ff ff       	call   c00019dc <disk_write>
c0004968:	83 c4 20             	add    esp,0x20
c000496b:	85 c0                	test   eax,eax
c000496d:	0f 95 c0             	setne  al
c0004970:	0f b6 c0             	movzx  eax,al
c0004973:	eb 0e                	jmp    c0004983 <create_partition+0x5a2>
c0004975:	74 07                	je     c000497e <create_partition+0x59d>
c0004977:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c000497c:	eb ac                	jmp    c000492a <create_partition+0x549>
c000497e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004981:	eb a7                	jmp    c000492a <create_partition+0x549>
c0004983:	83 c4 5c             	add    esp,0x5c
c0004986:	5b                   	pop    ebx
c0004987:	5e                   	pop    esi
c0004988:	5f                   	pop    edi
c0004989:	5d                   	pop    ebp
c000498a:	c3                   	ret    

c000498b <get_fileinfo>:
c000498b:	55                   	push   ebp
c000498c:	57                   	push   edi
c000498d:	56                   	push   esi
c000498e:	53                   	push   ebx
c000498f:	83 ec 1c             	sub    esp,0x1c
c0004992:	8b 30                	mov    esi,DWORD PTR [eax]
c0004994:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004998:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000499c:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c000499f:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c00049a2:	0f 84 dc 01 00 00    	je     c0004b84 <get_fileinfo+0x1f9>
c00049a8:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00049ab:	75 0f                	jne    c00049bc <get_fileinfo+0x31>
c00049ad:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00049b0:	83 c4 1c             	add    esp,0x1c
c00049b3:	5b                   	pop    ebx
c00049b4:	5e                   	pop    esi
c00049b5:	5f                   	pop    edi
c00049b6:	5d                   	pop    ebp
c00049b7:	e9 58 d5 ff ff       	jmp    c0001f14 <get_xfileinfo>
c00049bc:	89 d3                	mov    ebx,edx
c00049be:	89 c6                	mov    esi,eax
c00049c0:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c00049c4:	74 6a                	je     c0004a30 <get_fileinfo+0xa5>
c00049c6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00049ce:	31 ed                	xor    ebp,ebp
c00049d0:	31 ff                	xor    edi,edi
c00049d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00049d6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00049da:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00049dd:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c00049e1:	66 85 d2             	test   dx,dx
c00049e4:	74 3e                	je     c0004a24 <get_fileinfo+0x99>
c00049e6:	66 85 ed             	test   bp,bp
c00049e9:	75 0c                	jne    c00049f7 <get_fileinfo+0x6c>
c00049eb:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c00049f1:	66 3d ff 07          	cmp    ax,0x7ff
c00049f5:	76 22                	jbe    c0004a19 <get_fileinfo+0x8e>
c00049f7:	b9 ff 00 00 00       	mov    ecx,0xff
c00049fc:	89 e8                	mov    eax,ebp
c00049fe:	29 f9                	sub    ecx,edi
c0004a00:	c1 e0 10             	shl    eax,0x10
c0004a03:	09 d0                	or     eax,edx
c0004a05:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004a09:	e8 a3 d1 ff ff       	call   c0001bb1 <put_utf>
c0004a0e:	84 c0                	test   al,al
c0004a10:	74 10                	je     c0004a22 <get_fileinfo+0x97>
c0004a12:	0f b6 c0             	movzx  eax,al
c0004a15:	31 d2                	xor    edx,edx
c0004a17:	01 c7                	add    edi,eax
c0004a19:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004a1e:	89 d5                	mov    ebp,edx
c0004a20:	eb b0                	jmp    c00049d2 <get_fileinfo+0x47>
c0004a22:	31 ff                	xor    edi,edi
c0004a24:	66 85 ed             	test   bp,bp
c0004a27:	74 02                	je     c0004a2b <get_fileinfo+0xa0>
c0004a29:	31 ff                	xor    edi,edi
c0004a2b:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004a30:	31 ff                	xor    edi,edi
c0004a32:	31 c9                	xor    ecx,ecx
c0004a34:	83 f9 0a             	cmp    ecx,0xa
c0004a37:	0f 87 ad 00 00 00    	ja     c0004aea <get_fileinfo+0x15f>
c0004a3d:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a40:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004a43:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004a47:	66 83 fa 20          	cmp    dx,0x20
c0004a4b:	0f 84 92 00 00 00    	je     c0004ae3 <get_fileinfo+0x158>
c0004a51:	66 83 fa 05          	cmp    dx,0x5
c0004a55:	75 05                	jne    c0004a5c <get_fileinfo+0xd1>
c0004a57:	ba e5 00 00 00       	mov    edx,0xe5
c0004a5c:	83 ff 0b             	cmp    edi,0xb
c0004a5f:	77 0b                	ja     c0004a6c <get_fileinfo+0xe1>
c0004a61:	83 fd 09             	cmp    ebp,0x9
c0004a64:	75 06                	jne    c0004a6c <get_fileinfo+0xe1>
c0004a66:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004a6b:	47                   	inc    edi
c0004a6c:	0f b7 c2             	movzx  eax,dx
c0004a6f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a73:	e8 6d d0 ff ff       	call   c0001ae5 <dbc_1st>
c0004a78:	85 c0                	test   eax,eax
c0004a7a:	74 2f                	je     c0004aab <get_fileinfo+0x120>
c0004a7c:	83 fd 08             	cmp    ebp,0x8
c0004a7f:	74 2a                	je     c0004aab <get_fileinfo+0x120>
c0004a81:	83 fd 0b             	cmp    ebp,0xb
c0004a84:	74 25                	je     c0004aab <get_fileinfo+0x120>
c0004a86:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a89:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004a8d:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004a91:	e8 52 d0 ff ff       	call   c0001ae8 <dbc_2nd>
c0004a96:	85 c0                	test   eax,eax
c0004a98:	74 11                	je     c0004aab <get_fileinfo+0x120>
c0004a9a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004a9e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004aa3:	c1 e2 08             	shl    edx,0x8
c0004aa6:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004aa9:	09 c2                	or     edx,eax
c0004aab:	0f b7 d2             	movzx  edx,dx
c0004aae:	50                   	push   eax
c0004aaf:	50                   	push   eax
c0004ab0:	68 b5 01 00 00       	push   0x1b5
c0004ab5:	52                   	push   edx
c0004ab6:	e8 46 38 00 00       	call   c0008301 <ff_oem2uni>
c0004abb:	83 c4 10             	add    esp,0x10
c0004abe:	66 85 c0             	test   ax,ax
c0004ac1:	75 04                	jne    c0004ac7 <get_fileinfo+0x13c>
c0004ac3:	31 ff                	xor    edi,edi
c0004ac5:	eb 23                	jmp    c0004aea <get_fileinfo+0x15f>
c0004ac7:	b9 0c 00 00 00       	mov    ecx,0xc
c0004acc:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004ad0:	29 f9                	sub    ecx,edi
c0004ad2:	0f b7 c0             	movzx  eax,ax
c0004ad5:	e8 d7 d0 ff ff       	call   c0001bb1 <put_utf>
c0004ada:	84 c0                	test   al,al
c0004adc:	74 e5                	je     c0004ac3 <get_fileinfo+0x138>
c0004ade:	0f b6 c0             	movzx  eax,al
c0004ae1:	01 c7                	add    edi,eax
c0004ae3:	89 e9                	mov    ecx,ebp
c0004ae5:	e9 4a ff ff ff       	jmp    c0004a34 <get_fileinfo+0xa9>
c0004aea:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004aef:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004af3:	75 54                	jne    c0004b49 <get_fileinfo+0x1be>
c0004af5:	85 ff                	test   edi,edi
c0004af7:	75 0b                	jne    c0004b04 <get_fileinfo+0x179>
c0004af9:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004afd:	ba 01 00 00 00       	mov    edx,0x1
c0004b02:	eb 33                	jmp    c0004b37 <get_fileinfo+0x1ac>
c0004b04:	b1 08                	mov    cl,0x8
c0004b06:	31 d2                	xor    edx,edx
c0004b08:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004b0e:	84 c0                	test   al,al
c0004b10:	74 25                	je     c0004b37 <get_fileinfo+0x1ac>
c0004b12:	66 83 f8 2e          	cmp    ax,0x2e
c0004b16:	74 16                	je     c0004b2e <get_fileinfo+0x1a3>
c0004b18:	8d 78 bf             	lea    edi,[eax-0x41]
c0004b1b:	66 83 ff 19          	cmp    di,0x19
c0004b1f:	77 0f                	ja     c0004b30 <get_fileinfo+0x1a5>
c0004b21:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004b24:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004b27:	74 07                	je     c0004b30 <get_fileinfo+0x1a5>
c0004b29:	83 c0 20             	add    eax,0x20
c0004b2c:	eb 02                	jmp    c0004b30 <get_fileinfo+0x1a5>
c0004b2e:	b1 10                	mov    cl,0x10
c0004b30:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004b34:	42                   	inc    edx
c0004b35:	eb d1                	jmp    c0004b08 <get_fileinfo+0x17d>
c0004b37:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004b3c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b3f:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004b43:	75 04                	jne    c0004b49 <get_fileinfo+0x1be>
c0004b45:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004b49:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b4c:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004b4f:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004b52:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b55:	83 c0 1c             	add    eax,0x1c
c0004b58:	e8 c1 ce ff ff       	call   c0001a1e <ld_dword>
c0004b5d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004b64:	89 03                	mov    DWORD PTR [ebx],eax
c0004b66:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b69:	83 c0 16             	add    eax,0x16
c0004b6c:	e8 a0 ce ff ff       	call   c0001a11 <ld_word>
c0004b71:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004b75:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b78:	83 c0 18             	add    eax,0x18
c0004b7b:	e8 91 ce ff ff       	call   c0001a11 <ld_word>
c0004b80:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004b84:	83 c4 1c             	add    esp,0x1c
c0004b87:	5b                   	pop    ebx
c0004b88:	5e                   	pop    esi
c0004b89:	5f                   	pop    edi
c0004b8a:	5d                   	pop    ebp
c0004b8b:	c3                   	ret    

c0004b8c <ld_clust.isra.0>:
c0004b8c:	56                   	push   esi
c0004b8d:	89 c6                	mov    esi,eax
c0004b8f:	53                   	push   ebx
c0004b90:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004b93:	89 d3                	mov    ebx,edx
c0004b95:	e8 77 ce ff ff       	call   c0001a11 <ld_word>
c0004b9a:	0f b7 c8             	movzx  ecx,ax
c0004b9d:	89 f0                	mov    eax,esi
c0004b9f:	3c 03                	cmp    al,0x3
c0004ba1:	75 0d                	jne    c0004bb0 <ld_clust.isra.0+0x24>
c0004ba3:	8d 43 14             	lea    eax,[ebx+0x14]
c0004ba6:	e8 66 ce ff ff       	call   c0001a11 <ld_word>
c0004bab:	c1 e0 10             	shl    eax,0x10
c0004bae:	09 c1                	or     ecx,eax
c0004bb0:	89 c8                	mov    eax,ecx
c0004bb2:	5b                   	pop    ebx
c0004bb3:	5e                   	pop    esi
c0004bb4:	c3                   	ret    

c0004bb5 <st_clust.isra.1>:
c0004bb5:	56                   	push   esi
c0004bb6:	89 c6                	mov    esi,eax
c0004bb8:	53                   	push   ebx
c0004bb9:	89 d3                	mov    ebx,edx
c0004bbb:	0f b7 d1             	movzx  edx,cx
c0004bbe:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004bc1:	e8 bd ce ff ff       	call   c0001a83 <st_word>
c0004bc6:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004bc9:	75 0f                	jne    c0004bda <st_clust.isra.1+0x25>
c0004bcb:	c1 e9 10             	shr    ecx,0x10
c0004bce:	8d 43 14             	lea    eax,[ebx+0x14]
c0004bd1:	89 ca                	mov    edx,ecx
c0004bd3:	5b                   	pop    ebx
c0004bd4:	5e                   	pop    esi
c0004bd5:	e9 a9 ce ff ff       	jmp    c0001a83 <st_word>
c0004bda:	5b                   	pop    ebx
c0004bdb:	5e                   	pop    esi
c0004bdc:	c3                   	ret    

c0004bdd <init_alloc_info.isra.2>:
c0004bdd:	56                   	push   esi
c0004bde:	53                   	push   ebx
c0004bdf:	89 c6                	mov    esi,eax
c0004be1:	89 d3                	mov    ebx,edx
c0004be3:	51                   	push   ecx
c0004be4:	8b 00                	mov    eax,DWORD PTR [eax]
c0004be6:	83 c0 34             	add    eax,0x34
c0004be9:	e8 30 ce ff ff       	call   c0001a1e <ld_dword>
c0004bee:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004bf1:	8b 06                	mov    eax,DWORD PTR [esi]
c0004bf3:	83 c0 38             	add    eax,0x38
c0004bf6:	e8 3b ce ff ff       	call   c0001a36 <ld_qword>
c0004bfb:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004bfe:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004c01:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c03:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004c06:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c0d:	83 e0 02             	and    eax,0x2
c0004c10:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004c13:	5b                   	pop    ebx
c0004c14:	5b                   	pop    ebx
c0004c15:	5e                   	pop    esi
c0004c16:	c3                   	ret    

c0004c17 <follow_path>:
c0004c17:	56                   	push   esi
c0004c18:	53                   	push   ebx
c0004c19:	89 c3                	mov    ebx,eax
c0004c1b:	83 ec 14             	sub    esp,0x14
c0004c1e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004c22:	8b 30                	mov    esi,DWORD PTR [eax]
c0004c24:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c28:	8a 10                	mov    dl,BYTE PTR [eax]
c0004c2a:	80 fa 5c             	cmp    dl,0x5c
c0004c2d:	75 07                	jne    c0004c36 <follow_path+0x1f>
c0004c2f:	40                   	inc    eax
c0004c30:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c34:	eb ee                	jmp    c0004c24 <follow_path+0xd>
c0004c36:	80 fa 2f             	cmp    dl,0x2f
c0004c39:	74 f4                	je     c0004c2f <follow_path+0x18>
c0004c3b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004c42:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c49:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004c4c:	77 52                	ja     c0004ca0 <follow_path+0x89>
c0004c4e:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004c52:	31 d2                	xor    edx,edx
c0004c54:	89 d8                	mov    eax,ebx
c0004c56:	e8 12 e3 ff ff       	call   c0002f6d <dir_sdi>
c0004c5b:	eb 7c                	jmp    c0004cd9 <follow_path+0xc2>
c0004c5d:	89 d8                	mov    eax,ebx
c0004c5f:	e8 6e f2 ff ff       	call   c0003ed2 <dir_find>
c0004c64:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004c67:	85 c0                	test   eax,eax
c0004c69:	75 46                	jne    c0004cb1 <follow_path+0x9a>
c0004c6b:	80 e2 04             	and    dl,0x4
c0004c6e:	75 69                	jne    c0004cd9 <follow_path+0xc2>
c0004c70:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004c74:	74 5e                	je     c0004cd4 <follow_path+0xbd>
c0004c76:	8a 06                	mov    al,BYTE PTR [esi]
c0004c78:	3c 04                	cmp    al,0x4
c0004c7a:	75 41                	jne    c0004cbd <follow_path+0xa6>
c0004c7c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004c7f:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004c83:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004c86:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004c89:	30 c0                	xor    al,al
c0004c8b:	09 d0                	or     eax,edx
c0004c8d:	89 da                	mov    edx,ebx
c0004c8f:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004c92:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004c95:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004c98:	8d 46 10             	lea    eax,[esi+0x10]
c0004c9b:	e8 3d ff ff ff       	call   c0004bdd <init_alloc_info.isra.2>
c0004ca0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004ca4:	89 d8                	mov    eax,ebx
c0004ca6:	e8 a9 ed ff ff       	call   c0003a54 <create_name>
c0004cab:	85 c0                	test   eax,eax
c0004cad:	74 ae                	je     c0004c5d <follow_path+0x46>
c0004caf:	eb 28                	jmp    c0004cd9 <follow_path+0xc2>
c0004cb1:	83 f8 04             	cmp    eax,0x4
c0004cb4:	75 23                	jne    c0004cd9 <follow_path+0xc2>
c0004cb6:	80 e2 04             	and    dl,0x4
c0004cb9:	74 19                	je     c0004cd4 <follow_path+0xbd>
c0004cbb:	eb 1c                	jmp    c0004cd9 <follow_path+0xc2>
c0004cbd:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004cc0:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004cc6:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004cca:	e8 bd fe ff ff       	call   c0004b8c <ld_clust.isra.0>
c0004ccf:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004cd2:	eb cc                	jmp    c0004ca0 <follow_path+0x89>
c0004cd4:	b8 05 00 00 00       	mov    eax,0x5
c0004cd9:	83 c4 14             	add    esp,0x14
c0004cdc:	5b                   	pop    ebx
c0004cdd:	5e                   	pop    esi
c0004cde:	c3                   	ret    

c0004cdf <f_mount>:
c0004cdf:	53                   	push   ebx
c0004ce0:	83 ec 18             	sub    esp,0x18
c0004ce3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004ce7:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004ceb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cef:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004cf3:	e8 fb d2 ff ff       	call   c0001ff3 <get_ldnumber>
c0004cf8:	89 c2                	mov    edx,eax
c0004cfa:	b8 0b 00 00 00       	mov    eax,0xb
c0004cff:	85 d2                	test   edx,edx
c0004d01:	78 39                	js     c0004d3c <f_mount+0x5d>
c0004d03:	8b 04 95 80 c9 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd3680]
c0004d0a:	85 c0                	test   eax,eax
c0004d0c:	74 03                	je     c0004d11 <f_mount+0x32>
c0004d0e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d15:	85 c0                	test   eax,eax
c0004d17:	74 03                	je     c0004d1c <f_mount+0x3d>
c0004d19:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d20:	89 04 95 80 c9 02 c0 	mov    DWORD PTR [edx*4-0x3ffd3680],eax
c0004d27:	31 c0                	xor    eax,eax
c0004d29:	84 db                	test   bl,bl
c0004d2b:	74 0f                	je     c0004d3c <f_mount+0x5d>
c0004d2d:	31 c9                	xor    ecx,ecx
c0004d2f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d33:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d37:	e8 65 d7 ff ff       	call   c00024a1 <mount_volume>
c0004d3c:	83 c4 18             	add    esp,0x18
c0004d3f:	5b                   	pop    ebx
c0004d40:	c3                   	ret    

c0004d41 <f_open>:
c0004d41:	55                   	push   ebp
c0004d42:	bd 09 00 00 00       	mov    ebp,0x9
c0004d47:	57                   	push   edi
c0004d48:	56                   	push   esi
c0004d49:	53                   	push   ebx
c0004d4a:	83 ec 7c             	sub    esp,0x7c
c0004d4d:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004d54:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004d5b:	85 db                	test   ebx,ebx
c0004d5d:	0f 84 10 04 00 00    	je     c0005173 <f_open+0x432>
c0004d63:	89 fe                	mov    esi,edi
c0004d65:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d69:	83 e6 3f             	and    esi,0x3f
c0004d6c:	89 f0                	mov    eax,esi
c0004d6e:	0f b6 c8             	movzx  ecx,al
c0004d71:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004d78:	e8 24 d7 ff ff       	call   c00024a1 <mount_volume>
c0004d7d:	89 c5                	mov    ebp,eax
c0004d7f:	85 c0                	test   eax,eax
c0004d81:	0f 85 e6 03 00 00    	jne    c000516d <f_open+0x42c>
c0004d87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d8b:	bd 11 00 00 00       	mov    ebp,0x11
c0004d90:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004d94:	83 ec 0c             	sub    esp,0xc
c0004d97:	68 60 04 00 00       	push   0x460
c0004d9c:	e8 a3 34 00 00       	call   c0008244 <ff_memalloc>
c0004da1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004da5:	83 c4 10             	add    esp,0x10
c0004da8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004dad:	0f 84 c0 03 00 00    	je     c0005173 <f_open+0x432>
c0004db3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004db7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004dbb:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004dc1:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004dc4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004dc7:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004dce:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004dd2:	e8 40 fe ff ff       	call   c0004c17 <follow_path>
c0004dd7:	89 c5                	mov    ebp,eax
c0004dd9:	85 c0                	test   eax,eax
c0004ddb:	75 0c                	jne    c0004de9 <f_open+0xa8>
c0004ddd:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004de2:	79 05                	jns    c0004de9 <f_open+0xa8>
c0004de4:	bd 06 00 00 00       	mov    ebp,0x6
c0004de9:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004def:	0f 84 84 01 00 00    	je     c0004f79 <f_open+0x238>
c0004df5:	85 ed                	test   ebp,ebp
c0004df7:	74 20                	je     c0004e19 <f_open+0xd8>
c0004df9:	83 fd 04             	cmp    ebp,0x4
c0004dfc:	0f 85 58 03 00 00    	jne    c000515a <f_open+0x419>
c0004e02:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e06:	83 ce 08             	or     esi,0x8
c0004e09:	e8 8a f2 ff ff       	call   c0004098 <dir_register>
c0004e0e:	89 c5                	mov    ebp,eax
c0004e10:	85 c0                	test   eax,eax
c0004e12:	74 2f                	je     c0004e43 <f_open+0x102>
c0004e14:	e9 41 03 00 00       	jmp    c000515a <f_open+0x419>
c0004e19:	bd 07 00 00 00       	mov    ebp,0x7
c0004e1e:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004e23:	0f 85 31 03 00 00    	jne    c000515a <f_open+0x419>
c0004e29:	bd 08 00 00 00       	mov    ebp,0x8
c0004e2e:	f7 c7 04 00 00 00    	test   edi,0x4
c0004e34:	0f 85 20 03 00 00    	jne    c000515a <f_open+0x419>
c0004e3a:	83 e7 08             	and    edi,0x8
c0004e3d:	0f 84 65 01 00 00    	je     c0004fa8 <f_open+0x267>
c0004e43:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004e47:	8a 02                	mov    al,BYTE PTR [edx]
c0004e49:	3c 04                	cmp    al,0x4
c0004e4b:	0f 85 97 00 00 00    	jne    c0004ee8 <f_open+0x1a7>
c0004e51:	8d 42 10             	lea    eax,[edx+0x10]
c0004e54:	89 13                	mov    DWORD PTR [ebx],edx
c0004e56:	89 da                	mov    edx,ebx
c0004e58:	e8 80 fd ff ff       	call   c0004bdd <init_alloc_info.isra.2>
c0004e5d:	31 d2                	xor    edx,edx
c0004e5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e63:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004e68:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e6b:	83 c0 02             	add    eax,0x2
c0004e6e:	e8 32 cc ff ff       	call   c0001aa5 <mem_set>
c0004e73:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004e78:	31 d2                	xor    edx,edx
c0004e7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e7e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e81:	83 c0 26             	add    eax,0x26
c0004e84:	e8 1c cc ff ff       	call   c0001aa5 <mem_set>
c0004e89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e8d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004e90:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004e94:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e99:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e9c:	83 c0 08             	add    eax,0x8
c0004e9f:	e8 e3 cb ff ff       	call   c0001a87 <st_dword>
c0004ea4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ea8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004eab:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004eaf:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004eb3:	e8 b7 ea ff ff       	call   c000396f <store_xdir>
c0004eb8:	89 c5                	mov    ebp,eax
c0004eba:	85 c0                	test   eax,eax
c0004ebc:	0f 85 98 02 00 00    	jne    c000515a <f_open+0x419>
c0004ec2:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004ec5:	85 d2                	test   edx,edx
c0004ec7:	0f 84 db 00 00 00    	je     c0004fa8 <f_open+0x267>
c0004ecd:	31 c9                	xor    ecx,ecx
c0004ecf:	89 d8                	mov    eax,ebx
c0004ed1:	e8 8e e3 ff ff       	call   c0003264 <remove_chain>
c0004ed6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004eda:	89 c5                	mov    ebp,eax
c0004edc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004edf:	48                   	dec    eax
c0004ee0:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004ee3:	e9 b8 00 00 00       	jmp    c0004fa0 <f_open+0x25f>
c0004ee8:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004eec:	89 ea                	mov    edx,ebp
c0004eee:	e8 99 fc ff ff       	call   c0004b8c <ld_clust.isra.0>
c0004ef3:	ba 00 00 21 50       	mov    edx,0x50210000
c0004ef8:	89 c7                	mov    edi,eax
c0004efa:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004efd:	e8 85 cb ff ff       	call   c0001a87 <st_dword>
c0004f02:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f06:	31 c9                	xor    ecx,ecx
c0004f08:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004f0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f10:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f14:	e8 9c fc ff ff       	call   c0004bb5 <st_clust.isra.1>
c0004f19:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f1d:	31 d2                	xor    edx,edx
c0004f1f:	83 c0 1c             	add    eax,0x1c
c0004f22:	e8 60 cb ff ff       	call   c0001a87 <st_dword>
c0004f27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f2b:	85 ff                	test   edi,edi
c0004f2d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f31:	74 75                	je     c0004fa8 <f_open+0x267>
c0004f33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f37:	31 c9                	xor    ecx,ecx
c0004f39:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004f3c:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004f3f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004f43:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004f47:	89 fa                	mov    edx,edi
c0004f49:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f4d:	e8 12 e3 ff ff       	call   c0003264 <remove_chain>
c0004f52:	89 c5                	mov    ebp,eax
c0004f54:	85 c0                	test   eax,eax
c0004f56:	0f 85 fe 01 00 00    	jne    c000515a <f_open+0x419>
c0004f5c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004f60:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004f64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f68:	4f                   	dec    edi
c0004f69:	e8 81 d2 ff ff       	call   c00021ef <move_window>
c0004f6e:	89 c5                	mov    ebp,eax
c0004f70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f74:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004f77:	eb 27                	jmp    c0004fa0 <f_open+0x25f>
c0004f79:	85 ed                	test   ebp,ebp
c0004f7b:	0f 85 d9 01 00 00    	jne    c000515a <f_open+0x419>
c0004f81:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004f85:	bd 04 00 00 00       	mov    ebp,0x4
c0004f8a:	a8 10                	test   al,0x10
c0004f8c:	0f 85 c8 01 00 00    	jne    c000515a <f_open+0x419>
c0004f92:	83 e7 02             	and    edi,0x2
c0004f95:	74 11                	je     c0004fa8 <f_open+0x267>
c0004f97:	bd 07 00 00 00       	mov    ebp,0x7
c0004f9c:	a8 01                	test   al,0x1
c0004f9e:	eb 02                	jmp    c0004fa2 <f_open+0x261>
c0004fa0:	85 ed                	test   ebp,ebp
c0004fa2:	0f 85 b2 01 00 00    	jne    c000515a <f_open+0x419>
c0004fa8:	f7 c6 08 00 00 00    	test   esi,0x8
c0004fae:	74 03                	je     c0004fb3 <f_open+0x272>
c0004fb0:	83 ce 40             	or     esi,0x40
c0004fb3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004fb7:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0004fba:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0004fbd:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0004fc0:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0004fc3:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0004fc7:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0004fca:	8a 02                	mov    al,BYTE PTR [edx]
c0004fcc:	3c 04                	cmp    al,0x4
c0004fce:	75 2a                	jne    c0004ffa <f_open+0x2b9>
c0004fd0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004fd4:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0004fd9:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004fdc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004fe0:	30 c0                	xor    al,al
c0004fe2:	09 c8                	or     eax,ecx
c0004fe4:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004fe7:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0004feb:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004fee:	8d 42 10             	lea    eax,[edx+0x10]
c0004ff1:	89 da                	mov    edx,ebx
c0004ff3:	e8 e5 fb ff ff       	call   c0004bdd <init_alloc_info.isra.2>
c0004ff8:	eb 1c                	jmp    c0005016 <f_open+0x2d5>
c0004ffa:	89 fa                	mov    edx,edi
c0004ffc:	e8 8b fb ff ff       	call   c0004b8c <ld_clust.isra.0>
c0005001:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005004:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005007:	e8 12 ca ff ff       	call   c0001a1e <ld_dword>
c000500c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005013:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005016:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000501a:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005021:	89 03                	mov    DWORD PTR [ebx],eax
c0005023:	31 d2                	xor    edx,edx
c0005025:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005029:	b9 00 02 00 00       	mov    ecx,0x200
c000502e:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005032:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005036:	89 f0                	mov    eax,esi
c0005038:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000503f:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005042:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005049:	8d 43 50             	lea    eax,[ebx+0x50]
c000504c:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005053:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000505a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000505e:	e8 42 ca ff ff       	call   c0001aa5 <mem_set>
c0005063:	83 e6 20             	and    esi,0x20
c0005066:	75 07                	jne    c000506f <f_open+0x32e>
c0005068:	31 ed                	xor    ebp,ebp
c000506a:	e9 eb 00 00 00       	jmp    c000515a <f_open+0x419>
c000506f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005072:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005075:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005079:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000507d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005081:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005085:	74 e1                	je     c0005068 <f_open+0x327>
c0005087:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000508b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000508f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005092:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005095:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005099:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000509c:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00050a0:	31 ff                	xor    edi,edi
c00050a2:	c1 e5 09             	shl    ebp,0x9
c00050a5:	89 ee                	mov    esi,ebp
c00050a7:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00050ab:	89 f8                	mov    eax,edi
c00050ad:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00050b1:	73 22                	jae    c00050d5 <f_open+0x394>
c00050b3:	89 d8                	mov    eax,ebx
c00050b5:	e8 bd dc ff ff       	call   c0002d77 <get_fat>
c00050ba:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00050be:	89 c2                	mov    edx,eax
c00050c0:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00050c4:	83 f8 01             	cmp    eax,0x1
c00050c7:	76 10                	jbe    c00050d9 <f_open+0x398>
c00050c9:	83 f8 ff             	cmp    eax,0xffffffff
c00050cc:	75 d9                	jne    c00050a7 <f_open+0x366>
c00050ce:	bd 01 00 00 00       	mov    ebp,0x1
c00050d3:	eb 09                	jmp    c00050de <f_open+0x39d>
c00050d5:	31 ed                	xor    ebp,ebp
c00050d7:	eb 05                	jmp    c00050de <f_open+0x39d>
c00050d9:	bd 02 00 00 00       	mov    ebp,0x2
c00050de:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00050e1:	85 ed                	test   ebp,ebp
c00050e3:	75 75                	jne    c000515a <f_open+0x419>
c00050e5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00050e9:	25 ff 01 00 00       	and    eax,0x1ff
c00050ee:	0f 84 74 ff ff ff    	je     c0005068 <f_open+0x327>
c00050f4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00050f8:	bd 02 00 00 00       	mov    ebp,0x2
c00050fd:	89 c8                	mov    eax,ecx
c00050ff:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005103:	e8 a2 cb ff ff       	call   c0001caa <clst2sect>
c0005108:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000510c:	89 d7                	mov    edi,edx
c000510e:	09 c7                	or     edi,eax
c0005110:	74 48                	je     c000515a <f_open+0x419>
c0005112:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005116:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000511a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005122:	0f ac fe 09          	shrd   esi,edi,0x9
c0005126:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000512a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000512e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005131:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005135:	83 ec 0c             	sub    esp,0xc
c0005138:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000513b:	6a 01                	push   0x1
c000513d:	52                   	push   edx
c000513e:	50                   	push   eax
c000513f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005143:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005147:	50                   	push   eax
c0005148:	e8 79 c8 ff ff       	call   c00019c6 <disk_read>
c000514d:	83 c4 20             	add    esp,0x20
c0005150:	85 c0                	test   eax,eax
c0005152:	0f 95 c0             	setne  al
c0005155:	0f b6 c0             	movzx  eax,al
c0005158:	89 c5                	mov    ebp,eax
c000515a:	83 ec 0c             	sub    esp,0xc
c000515d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005161:	e8 f4 30 00 00       	call   c000825a <ff_memfree>
c0005166:	83 c4 10             	add    esp,0x10
c0005169:	85 ed                	test   ebp,ebp
c000516b:	74 06                	je     c0005173 <f_open+0x432>
c000516d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005173:	83 c4 7c             	add    esp,0x7c
c0005176:	89 e8                	mov    eax,ebp
c0005178:	5b                   	pop    ebx
c0005179:	5e                   	pop    esi
c000517a:	5f                   	pop    edi
c000517b:	5d                   	pop    ebp
c000517c:	c3                   	ret    

c000517d <f_read>:
c000517d:	55                   	push   ebp
c000517e:	57                   	push   edi
c000517f:	56                   	push   esi
c0005180:	53                   	push   ebx
c0005181:	83 ec 2c             	sub    esp,0x2c
c0005184:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005188:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000518c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005192:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005196:	89 d8                	mov    eax,ebx
c0005198:	e8 77 cf ff ff       	call   c0002114 <validate>
c000519d:	89 c5                	mov    ebp,eax
c000519f:	85 c0                	test   eax,eax
c00051a1:	0f 85 4c 02 00 00    	jne    c00053f3 <f_read+0x276>
c00051a7:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00051ab:	85 ed                	test   ebp,ebp
c00051ad:	0f 85 40 02 00 00    	jne    c00053f3 <f_read+0x276>
c00051b3:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00051b7:	0f 84 31 02 00 00    	je     c00053ee <f_read+0x271>
c00051bd:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051c0:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051c3:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00051c6:	bf 00 00 00 00       	mov    edi,0x0
c00051cb:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00051ce:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00051d2:	89 d1                	mov    ecx,edx
c00051d4:	19 f9                	sbb    ecx,edi
c00051d6:	0f 83 cf 00 00 00    	jae    c00052ab <f_read+0x12e>
c00051dc:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00051e0:	e9 c6 00 00 00       	jmp    c00052ab <f_read+0x12e>
c00051e5:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00051e8:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00051eb:	89 d0                	mov    eax,edx
c00051ed:	25 ff 01 00 00       	and    eax,0x1ff
c00051f2:	0f 85 c9 01 00 00    	jne    c00053c1 <f_read+0x244>
c00051f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051fc:	89 d6                	mov    esi,edx
c00051fe:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005202:	89 cf                	mov    edi,ecx
c0005204:	48                   	dec    eax
c0005205:	0f ac fe 09          	shrd   esi,edi,0x9
c0005209:	21 f0                	and    eax,esi
c000520b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000520f:	0f 84 a6 00 00 00    	je     c00052bb <f_read+0x13e>
c0005215:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005219:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000521c:	89 c8                	mov    eax,ecx
c000521e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005221:	e8 84 ca ff ff       	call   c0001caa <clst2sect>
c0005226:	89 d7                	mov    edi,edx
c0005228:	09 c7                	or     edi,eax
c000522a:	0f 84 b4 00 00 00    	je     c00052e4 <f_read+0x167>
c0005230:	31 ff                	xor    edi,edi
c0005232:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005236:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005239:	01 c6                	add    esi,eax
c000523b:	11 d7                	adc    edi,edx
c000523d:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005245:	0f 86 fd 00 00 00    	jbe    c0005348 <f_read+0x1cb>
c000524b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000524f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005253:	c1 e8 09             	shr    eax,0x9
c0005256:	89 04 24             	mov    DWORD PTR [esp],eax
c0005259:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000525d:	03 14 24             	add    edx,DWORD PTR [esp]
c0005260:	39 c2                	cmp    edx,eax
c0005262:	76 07                	jbe    c000526b <f_read+0xee>
c0005264:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005268:	89 04 24             	mov    DWORD PTR [esp],eax
c000526b:	83 ec 0c             	sub    esp,0xc
c000526e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005272:	57                   	push   edi
c0005273:	56                   	push   esi
c0005274:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005278:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000527c:	50                   	push   eax
c000527d:	e8 44 c7 ff ff       	call   c00019c6 <disk_read>
c0005282:	83 c4 20             	add    esp,0x20
c0005285:	85 c0                	test   eax,eax
c0005287:	75 6e                	jne    c00052f7 <f_read+0x17a>
c0005289:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000528d:	78 7e                	js     c000530d <f_read+0x190>
c000528f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005292:	c1 e6 09             	shl    esi,0x9
c0005295:	31 ff                	xor    edi,edi
c0005297:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000529b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000529f:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00052a3:	01 30                	add    DWORD PTR [eax],esi
c00052a5:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00052a8:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00052ab:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00052b0:	0f 85 2f ff ff ff    	jne    c00051e5 <f_read+0x68>
c00052b6:	e9 38 01 00 00       	jmp    c00053f3 <f_read+0x276>
c00052bb:	89 c8                	mov    eax,ecx
c00052bd:	09 d0                	or     eax,edx
c00052bf:	75 05                	jne    c00052c6 <f_read+0x149>
c00052c1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00052c4:	eb 19                	jmp    c00052df <f_read+0x162>
c00052c6:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00052ca:	74 09                	je     c00052d5 <f_read+0x158>
c00052cc:	89 d8                	mov    eax,ebx
c00052ce:	e8 f8 c9 ff ff       	call   c0001ccb <clmt_clust>
c00052d3:	eb 0a                	jmp    c00052df <f_read+0x162>
c00052d5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00052d8:	89 d8                	mov    eax,ebx
c00052da:	e8 98 da ff ff       	call   c0002d77 <get_fat>
c00052df:	83 f8 01             	cmp    eax,0x1
c00052e2:	77 0e                	ja     c00052f2 <f_read+0x175>
c00052e4:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00052e8:	bd 02 00 00 00       	mov    ebp,0x2
c00052ed:	e9 01 01 00 00       	jmp    c00053f3 <f_read+0x276>
c00052f2:	83 f8 ff             	cmp    eax,0xffffffff
c00052f5:	75 0e                	jne    c0005305 <f_read+0x188>
c00052f7:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00052fb:	bd 01 00 00 00       	mov    ebp,0x1
c0005300:	e9 ee 00 00 00       	jmp    c00053f3 <f_read+0x276>
c0005305:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005308:	e9 08 ff ff ff       	jmp    c0005215 <f_read+0x98>
c000530d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005310:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005313:	29 f0                	sub    eax,esi
c0005315:	19 fa                	sbb    edx,edi
c0005317:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000531a:	89 d7                	mov    edi,edx
c000531c:	ba 00 00 00 00       	mov    edx,0x0
c0005321:	89 f9                	mov    ecx,edi
c0005323:	19 d1                	sbb    ecx,edx
c0005325:	0f 83 64 ff ff ff    	jae    c000528f <f_read+0x112>
c000532b:	89 c7                	mov    edi,eax
c000532d:	8d 53 50             	lea    edx,[ebx+0x50]
c0005330:	c1 e7 09             	shl    edi,0x9
c0005333:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005337:	b9 00 02 00 00       	mov    ecx,0x200
c000533c:	01 f8                	add    eax,edi
c000533e:	e8 4d c7 ff ff       	call   c0001a90 <mem_cpy>
c0005343:	e9 47 ff ff ff       	jmp    c000528f <f_read+0x112>
c0005348:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000534b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000534e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005351:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005355:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c0005359:	75 05                	jne    c0005360 <f_read+0x1e3>
c000535b:	39 34 24             	cmp    DWORD PTR [esp],esi
c000535e:	74 5b                	je     c00053bb <f_read+0x23e>
c0005360:	8d 43 50             	lea    eax,[ebx+0x50]
c0005363:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005367:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000536b:	79 2a                	jns    c0005397 <f_read+0x21a>
c000536d:	83 ec 0c             	sub    esp,0xc
c0005370:	6a 01                	push   0x1
c0005372:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005376:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000537a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000537e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005382:	50                   	push   eax
c0005383:	e8 54 c6 ff ff       	call   c00019dc <disk_write>
c0005388:	83 c4 20             	add    esp,0x20
c000538b:	85 c0                	test   eax,eax
c000538d:	0f 85 64 ff ff ff    	jne    c00052f7 <f_read+0x17a>
c0005393:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005397:	83 ec 0c             	sub    esp,0xc
c000539a:	6a 01                	push   0x1
c000539c:	57                   	push   edi
c000539d:	56                   	push   esi
c000539e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00053a2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00053a6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00053aa:	50                   	push   eax
c00053ab:	e8 16 c6 ff ff       	call   c00019c6 <disk_read>
c00053b0:	83 c4 20             	add    esp,0x20
c00053b3:	85 c0                	test   eax,eax
c00053b5:	0f 85 3c ff ff ff    	jne    c00052f7 <f_read+0x17a>
c00053bb:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00053be:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00053c1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00053c4:	ba 00 02 00 00       	mov    edx,0x200
c00053c9:	25 ff 01 00 00       	and    eax,0x1ff
c00053ce:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00053d2:	29 c2                	sub    edx,eax
c00053d4:	39 d6                	cmp    esi,edx
c00053d6:	76 02                	jbe    c00053da <f_read+0x25d>
c00053d8:	89 d6                	mov    esi,edx
c00053da:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00053de:	89 f1                	mov    ecx,esi
c00053e0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00053e4:	e8 a7 c6 ff ff       	call   c0001a90 <mem_cpy>
c00053e9:	e9 a7 fe ff ff       	jmp    c0005295 <f_read+0x118>
c00053ee:	bd 07 00 00 00       	mov    ebp,0x7
c00053f3:	83 c4 2c             	add    esp,0x2c
c00053f6:	89 e8                	mov    eax,ebp
c00053f8:	5b                   	pop    ebx
c00053f9:	5e                   	pop    esi
c00053fa:	5f                   	pop    edi
c00053fb:	5d                   	pop    ebp
c00053fc:	c3                   	ret    

c00053fd <f_write>:
c00053fd:	55                   	push   ebp
c00053fe:	57                   	push   edi
c00053ff:	56                   	push   esi
c0005400:	53                   	push   ebx
c0005401:	83 ec 2c             	sub    esp,0x2c
c0005404:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005408:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000540c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005412:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005416:	89 d8                	mov    eax,ebx
c0005418:	e8 f7 cc ff ff       	call   c0002114 <validate>
c000541d:	89 c5                	mov    ebp,eax
c000541f:	85 c0                	test   eax,eax
c0005421:	0f 85 86 02 00 00    	jne    c00056ad <f_write+0x2b0>
c0005427:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000542b:	85 ed                	test   ebp,ebp
c000542d:	0f 85 7a 02 00 00    	jne    c00056ad <f_write+0x2b0>
c0005433:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005437:	0f 84 6b 02 00 00    	je     c00056a8 <f_write+0x2ab>
c000543d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005441:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005444:	0f 84 43 01 00 00    	je     c000558d <f_write+0x190>
c000544a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000544d:	89 c1                	mov    ecx,eax
c000544f:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005453:	0f 83 34 01 00 00    	jae    c000558d <f_write+0x190>
c0005459:	f7 d0                	not    eax
c000545b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000545f:	e9 29 01 00 00       	jmp    c000558d <f_write+0x190>
c0005464:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005467:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000546a:	89 d0                	mov    eax,edx
c000546c:	25 ff 01 00 00       	and    eax,0x1ff
c0005471:	0f 85 00 02 00 00    	jne    c0005677 <f_write+0x27a>
c0005477:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000547b:	89 d6                	mov    esi,edx
c000547d:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005481:	89 cf                	mov    edi,ecx
c0005483:	48                   	dec    eax
c0005484:	0f ac fe 09          	shrd   esi,edi,0x9
c0005488:	21 f0                	and    eax,esi
c000548a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000548e:	0f 84 06 01 00 00    	je     c000559a <f_write+0x19d>
c0005494:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005498:	0f 88 6e 01 00 00    	js     c000560c <f_write+0x20f>
c000549e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00054a2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054a5:	89 c8                	mov    eax,ecx
c00054a7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00054ab:	e8 fa c7 ff ff       	call   c0001caa <clst2sect>
c00054b0:	89 d1                	mov    ecx,edx
c00054b2:	09 c1                	or     ecx,eax
c00054b4:	0f 84 1c 01 00 00    	je     c00055d6 <f_write+0x1d9>
c00054ba:	31 ff                	xor    edi,edi
c00054bc:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00054c0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00054c4:	01 c6                	add    esi,eax
c00054c6:	11 d7                	adc    edi,edx
c00054c8:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00054d0:	0f 86 63 01 00 00    	jbe    c0005639 <f_write+0x23c>
c00054d6:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054da:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054de:	c1 e8 09             	shr    eax,0x9
c00054e1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054e5:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054e9:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c00054ed:	39 c2                	cmp    edx,eax
c00054ef:	76 08                	jbe    c00054f9 <f_write+0xfc>
c00054f1:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054f5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054f9:	83 ec 0c             	sub    esp,0xc
c00054fc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005500:	57                   	push   edi
c0005501:	56                   	push   esi
c0005502:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005506:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000550a:	50                   	push   eax
c000550b:	e8 cc c4 ff ff       	call   c00019dc <disk_write>
c0005510:	83 c4 20             	add    esp,0x20
c0005513:	85 c0                	test   eax,eax
c0005515:	0f 85 ce 00 00 00    	jne    c00055e9 <f_write+0x1ec>
c000551b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000551e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005521:	29 f0                	sub    eax,esi
c0005523:	19 fa                	sbb    edx,edi
c0005525:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005529:	89 d7                	mov    edi,edx
c000552b:	ba 00 00 00 00       	mov    edx,0x0
c0005530:	89 f9                	mov    ecx,edi
c0005532:	19 d1                	sbb    ecx,edx
c0005534:	73 1c                	jae    c0005552 <f_write+0x155>
c0005536:	89 c7                	mov    edi,eax
c0005538:	b9 00 02 00 00       	mov    ecx,0x200
c000553d:	c1 e7 09             	shl    edi,0x9
c0005540:	8d 43 50             	lea    eax,[ebx+0x50]
c0005543:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005547:	89 fa                	mov    edx,edi
c0005549:	e8 42 c5 ff ff       	call   c0001a90 <mem_cpy>
c000554e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005552:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005556:	c1 e6 09             	shl    esi,0x9
c0005559:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000555d:	31 ff                	xor    edi,edi
c000555f:	01 30                	add    DWORD PTR [eax],esi
c0005561:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0005565:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0005569:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000556c:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c000556f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005572:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c0005575:	89 c1                	mov    ecx,eax
c0005577:	39 f2                	cmp    edx,esi
c0005579:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000557c:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c000557f:	19 f9                	sbb    ecx,edi
c0005581:	73 04                	jae    c0005587 <f_write+0x18a>
c0005583:	89 f2                	mov    edx,esi
c0005585:	89 f8                	mov    eax,edi
c0005587:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000558a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000558d:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005592:	0f 85 cc fe ff ff    	jne    c0005464 <f_write+0x67>
c0005598:	eb 2e                	jmp    c00055c8 <f_write+0x1cb>
c000559a:	89 c8                	mov    eax,ecx
c000559c:	09 d0                	or     eax,edx
c000559e:	75 0b                	jne    c00055ab <f_write+0x1ae>
c00055a0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00055a3:	31 d2                	xor    edx,edx
c00055a5:	85 c0                	test   eax,eax
c00055a7:	75 28                	jne    c00055d1 <f_write+0x1d4>
c00055a9:	eb 12                	jmp    c00055bd <f_write+0x1c0>
c00055ab:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00055af:	74 09                	je     c00055ba <f_write+0x1bd>
c00055b1:	89 d8                	mov    eax,ebx
c00055b3:	e8 13 c7 ff ff       	call   c0001ccb <clmt_clust>
c00055b8:	eb 0a                	jmp    c00055c4 <f_write+0x1c7>
c00055ba:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055bd:	89 d8                	mov    eax,ebx
c00055bf:	e8 a1 da ff ff       	call   c0003065 <create_chain>
c00055c4:	85 c0                	test   eax,eax
c00055c6:	75 09                	jne    c00055d1 <f_write+0x1d4>
c00055c8:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00055cc:	e9 dc 00 00 00       	jmp    c00056ad <f_write+0x2b0>
c00055d1:	83 f8 01             	cmp    eax,0x1
c00055d4:	75 0e                	jne    c00055e4 <f_write+0x1e7>
c00055d6:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00055da:	bd 02 00 00 00       	mov    ebp,0x2
c00055df:	e9 c9 00 00 00       	jmp    c00056ad <f_write+0x2b0>
c00055e4:	83 f8 ff             	cmp    eax,0xffffffff
c00055e7:	75 0e                	jne    c00055f7 <f_write+0x1fa>
c00055e9:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00055ed:	bd 01 00 00 00       	mov    ebp,0x1
c00055f2:	e9 b6 00 00 00       	jmp    c00056ad <f_write+0x2b0>
c00055f7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00055fa:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00055fe:	0f 85 90 fe ff ff    	jne    c0005494 <f_write+0x97>
c0005604:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005607:	e9 88 fe ff ff       	jmp    c0005494 <f_write+0x97>
c000560c:	83 ec 0c             	sub    esp,0xc
c000560f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005612:	6a 01                	push   0x1
c0005614:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005617:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000561a:	50                   	push   eax
c000561b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000561f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005623:	50                   	push   eax
c0005624:	e8 b3 c3 ff ff       	call   c00019dc <disk_write>
c0005629:	83 c4 20             	add    esp,0x20
c000562c:	85 c0                	test   eax,eax
c000562e:	75 b9                	jne    c00055e9 <f_write+0x1ec>
c0005630:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005634:	e9 65 fe ff ff       	jmp    c000549e <f_write+0xa1>
c0005639:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000563c:	75 05                	jne    c0005643 <f_write+0x246>
c000563e:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005641:	74 2e                	je     c0005671 <f_write+0x274>
c0005643:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005646:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005649:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000564c:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c000564f:	73 20                	jae    c0005671 <f_write+0x274>
c0005651:	83 ec 0c             	sub    esp,0xc
c0005654:	8d 43 50             	lea    eax,[ebx+0x50]
c0005657:	6a 01                	push   0x1
c0005659:	57                   	push   edi
c000565a:	56                   	push   esi
c000565b:	50                   	push   eax
c000565c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005660:	50                   	push   eax
c0005661:	e8 60 c3 ff ff       	call   c00019c6 <disk_read>
c0005666:	83 c4 20             	add    esp,0x20
c0005669:	85 c0                	test   eax,eax
c000566b:	0f 85 78 ff ff ff    	jne    c00055e9 <f_write+0x1ec>
c0005671:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005674:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005677:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000567a:	ba 00 02 00 00       	mov    edx,0x200
c000567f:	25 ff 01 00 00       	and    eax,0x1ff
c0005684:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005688:	29 c2                	sub    edx,eax
c000568a:	39 d6                	cmp    esi,edx
c000568c:	76 02                	jbe    c0005690 <f_write+0x293>
c000568e:	89 d6                	mov    esi,edx
c0005690:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c0005694:	89 f1                	mov    ecx,esi
c0005696:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000569a:	e8 f1 c3 ff ff       	call   c0001a90 <mem_cpy>
c000569f:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00056a3:	e9 b1 fe ff ff       	jmp    c0005559 <f_write+0x15c>
c00056a8:	bd 07 00 00 00       	mov    ebp,0x7
c00056ad:	83 c4 2c             	add    esp,0x2c
c00056b0:	89 e8                	mov    eax,ebp
c00056b2:	5b                   	pop    ebx
c00056b3:	5e                   	pop    esi
c00056b4:	5f                   	pop    edi
c00056b5:	5d                   	pop    ebp
c00056b6:	c3                   	ret    

c00056b7 <f_sync>:
c00056b7:	56                   	push   esi
c00056b8:	53                   	push   ebx
c00056b9:	83 ec 64             	sub    esp,0x64
c00056bc:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00056c0:	8d 54 24 10          	lea    edx,[esp+0x10]
c00056c4:	89 d8                	mov    eax,ebx
c00056c6:	e8 49 ca ff ff       	call   c0002114 <validate>
c00056cb:	85 c0                	test   eax,eax
c00056cd:	0f 85 ba 01 00 00    	jne    c000588d <f_sync+0x1d6>
c00056d3:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00056d6:	f6 c2 40             	test   dl,0x40
c00056d9:	0f 84 ae 01 00 00    	je     c000588d <f_sync+0x1d6>
c00056df:	84 d2                	test   dl,dl
c00056e1:	79 33                	jns    c0005716 <f_sync+0x5f>
c00056e3:	83 ec 0c             	sub    esp,0xc
c00056e6:	8d 43 50             	lea    eax,[ebx+0x50]
c00056e9:	6a 01                	push   0x1
c00056eb:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00056ee:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00056f1:	50                   	push   eax
c00056f2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00056f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00056fa:	50                   	push   eax
c00056fb:	e8 dc c2 ff ff       	call   c00019dc <disk_write>
c0005700:	83 c4 20             	add    esp,0x20
c0005703:	89 c2                	mov    edx,eax
c0005705:	b8 01 00 00 00       	mov    eax,0x1
c000570a:	85 d2                	test   edx,edx
c000570c:	0f 85 7b 01 00 00    	jne    c000588d <f_sync+0x1d6>
c0005712:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005716:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000571a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000571d:	0f 85 11 01 00 00    	jne    c0005834 <f_sync+0x17d>
c0005723:	89 d8                	mov    eax,ebx
c0005725:	e8 13 d6 ff ff       	call   c0002d3d <fill_first_frag>
c000572a:	85 c0                	test   eax,eax
c000572c:	0f 85 5b 01 00 00    	jne    c000588d <f_sync+0x1d6>
c0005732:	83 c9 ff             	or     ecx,0xffffffff
c0005735:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005738:	89 d8                	mov    eax,ebx
c000573a:	e8 c9 d5 ff ff       	call   c0002d08 <fill_last_frag>
c000573f:	85 c0                	test   eax,eax
c0005741:	0f 85 46 01 00 00    	jne    c000588d <f_sync+0x1d6>
c0005747:	83 ec 0c             	sub    esp,0xc
c000574a:	68 60 04 00 00       	push   0x460
c000574f:	e8 f0 2a 00 00       	call   c0008244 <ff_memalloc>
c0005754:	83 c4 10             	add    esp,0x10
c0005757:	89 c6                	mov    esi,eax
c0005759:	b8 11 00 00 00       	mov    eax,0x11
c000575e:	85 f6                	test   esi,esi
c0005760:	0f 84 27 01 00 00    	je     c000588d <f_sync+0x1d6>
c0005766:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000576a:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005770:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005773:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005776:	89 da                	mov    edx,ebx
c0005778:	8d 44 24 14          	lea    eax,[esp+0x14]
c000577c:	e8 af df ff ff       	call   c0003730 <load_obj_xdir>
c0005781:	85 c0                	test   eax,eax
c0005783:	0f 85 95 00 00 00    	jne    c000581e <f_sync+0x167>
c0005789:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000578d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005790:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c0005794:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c0005797:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c000579a:	83 ca 01             	or     edx,0x1
c000579d:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00057a0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00057a3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057a6:	83 c0 34             	add    eax,0x34
c00057a9:	e8 d9 c2 ff ff       	call   c0001a87 <st_dword>
c00057ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057b2:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057b5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057b8:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057bb:	83 c0 38             	add    eax,0x38
c00057be:	e8 c7 c2 ff ff       	call   c0001a8a <st_qword>
c00057c3:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057ca:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057cd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057d0:	83 c0 28             	add    eax,0x28
c00057d3:	e8 b2 c2 ff ff       	call   c0001a8a <st_qword>
c00057d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057dc:	ba 00 00 21 50       	mov    edx,0x50210000
c00057e1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057e4:	83 c0 0c             	add    eax,0xc
c00057e7:	e8 9b c2 ff ff       	call   c0001a87 <st_dword>
c00057ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057f0:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00057f3:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c00057f7:	31 d2                	xor    edx,edx
c00057f9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057fc:	83 c0 10             	add    eax,0x10
c00057ff:	e8 83 c2 ff ff       	call   c0001a87 <st_dword>
c0005804:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005808:	e8 62 e1 ff ff       	call   c000396f <store_xdir>
c000580d:	85 c0                	test   eax,eax
c000580f:	75 0d                	jne    c000581e <f_sync+0x167>
c0005811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005815:	e8 00 eb ff ff       	call   c000431a <sync_fs>
c000581a:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000581e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005822:	83 ec 0c             	sub    esp,0xc
c0005825:	56                   	push   esi
c0005826:	e8 2f 2a 00 00       	call   c000825a <ff_memfree>
c000582b:	83 c4 10             	add    esp,0x10
c000582e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005832:	eb 59                	jmp    c000588d <f_sync+0x1d6>
c0005834:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005837:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c000583a:	e8 b0 c9 ff ff       	call   c00021ef <move_window>
c000583f:	85 c0                	test   eax,eax
c0005841:	75 4a                	jne    c000588d <f_sync+0x1d6>
c0005843:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005846:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c000584a:	89 f2                	mov    edx,esi
c000584c:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000584f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005851:	e8 5f f3 ff ff       	call   c0004bb5 <st_clust.isra.1>
c0005856:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005859:	8d 46 1c             	lea    eax,[esi+0x1c]
c000585c:	e8 26 c2 ff ff       	call   c0001a87 <st_dword>
c0005861:	8d 46 16             	lea    eax,[esi+0x16]
c0005864:	ba 00 00 21 50       	mov    edx,0x50210000
c0005869:	e8 19 c2 ff ff       	call   c0001a87 <st_dword>
c000586e:	8d 46 12             	lea    eax,[esi+0x12]
c0005871:	31 d2                	xor    edx,edx
c0005873:	e8 0b c2 ff ff       	call   c0001a83 <st_word>
c0005878:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000587c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005884:	e8 91 ea ff ff       	call   c000431a <sync_fs>
c0005889:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000588d:	83 c4 64             	add    esp,0x64
c0005890:	5b                   	pop    ebx
c0005891:	5e                   	pop    esi
c0005892:	c3                   	ret    

c0005893 <f_close>:
c0005893:	53                   	push   ebx
c0005894:	83 ec 24             	sub    esp,0x24
c0005897:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000589b:	53                   	push   ebx
c000589c:	e8 16 fe ff ff       	call   c00056b7 <f_sync>
c00058a1:	83 c4 10             	add    esp,0x10
c00058a4:	85 c0                	test   eax,eax
c00058a6:	75 15                	jne    c00058bd <f_close+0x2a>
c00058a8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00058ac:	89 d8                	mov    eax,ebx
c00058ae:	e8 61 c8 ff ff       	call   c0002114 <validate>
c00058b3:	85 c0                	test   eax,eax
c00058b5:	75 06                	jne    c00058bd <f_close+0x2a>
c00058b7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00058bd:	83 c4 18             	add    esp,0x18
c00058c0:	5b                   	pop    ebx
c00058c1:	c3                   	ret    

c00058c2 <f_lseek>:
c00058c2:	55                   	push   ebp
c00058c3:	57                   	push   edi
c00058c4:	56                   	push   esi
c00058c5:	53                   	push   ebx
c00058c6:	83 ec 3c             	sub    esp,0x3c
c00058c9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00058cd:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00058d1:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00058d5:	89 04 24             	mov    DWORD PTR [esp],eax
c00058d8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00058dc:	89 d8                	mov    eax,ebx
c00058de:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00058e2:	e8 2d c8 ff ff       	call   c0002114 <validate>
c00058e7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00058eb:	85 c0                	test   eax,eax
c00058ed:	0f 85 7a 04 00 00    	jne    c0005d6d <f_lseek+0x4ab>
c00058f3:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c00058f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00058fb:	85 c0                	test   eax,eax
c00058fd:	0f 85 6a 04 00 00    	jne    c0005d6d <f_lseek+0x4ab>
c0005903:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005907:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000590a:	74 0c                	je     c0005918 <f_lseek+0x56>
c000590c:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000590f:	85 c0                	test   eax,eax
c0005911:	75 1f                	jne    c0005932 <f_lseek+0x70>
c0005913:	e9 b5 01 00 00       	jmp    c0005acd <f_lseek+0x20b>
c0005918:	83 c9 ff             	or     ecx,0xffffffff
c000591b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000591e:	89 d8                	mov    eax,ebx
c0005920:	e8 e3 d3 ff ff       	call   c0002d08 <fill_last_frag>
c0005925:	85 c0                	test   eax,eax
c0005927:	74 e3                	je     c000590c <f_lseek+0x4a>
c0005929:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000592d:	e9 3b 04 00 00       	jmp    c0005d6d <f_lseek+0x4ab>
c0005932:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005937:	0f 85 ac 00 00 00    	jne    c00059e9 <f_lseek+0x127>
c000593d:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005941:	0f 85 a2 00 00 00    	jne    c00059e9 <f_lseek+0x127>
c0005947:	8d 78 04             	lea    edi,[eax+0x4]
c000594a:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c000594d:	8b 00                	mov    eax,DWORD PTR [eax]
c000594f:	be 02 00 00 00       	mov    esi,0x2
c0005954:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005958:	85 ed                	test   ebp,ebp
c000595a:	74 73                	je     c00059cf <f_lseek+0x10d>
c000595c:	89 e9                	mov    ecx,ebp
c000595e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005965:	ff 04 24             	inc    DWORD PTR [esp]
c0005968:	89 ca                	mov    edx,ecx
c000596a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000596e:	89 d8                	mov    eax,ebx
c0005970:	e8 02 d4 ff ff       	call   c0002d77 <get_fat>
c0005975:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005979:	83 f8 01             	cmp    eax,0x1
c000597c:	77 11                	ja     c000598f <f_lseek+0xcd>
c000597e:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005982:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c000598a:	e9 de 03 00 00       	jmp    c0005d6d <f_lseek+0x4ab>
c000598f:	83 f8 ff             	cmp    eax,0xffffffff
c0005992:	75 11                	jne    c00059a5 <f_lseek+0xe3>
c0005994:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005998:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c00059a0:	e9 c8 03 00 00       	jmp    c0005d6d <f_lseek+0x4ab>
c00059a5:	8d 51 01             	lea    edx,[ecx+0x1]
c00059a8:	89 c1                	mov    ecx,eax
c00059aa:	39 c2                	cmp    edx,eax
c00059ac:	74 b7                	je     c0005965 <f_lseek+0xa3>
c00059ae:	83 c6 02             	add    esi,0x2
c00059b1:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c00059b5:	72 0b                	jb     c00059c2 <f_lseek+0x100>
c00059b7:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00059ba:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c00059bd:	89 0f                	mov    DWORD PTR [edi],ecx
c00059bf:	83 c7 08             	add    edi,0x8
c00059c2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00059c6:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c00059c9:	76 04                	jbe    c00059cf <f_lseek+0x10d>
c00059cb:	89 c5                	mov    ebp,eax
c00059cd:	eb 8d                	jmp    c000595c <f_lseek+0x9a>
c00059cf:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00059d2:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00059d6:	89 30                	mov    DWORD PTR [eax],esi
c00059d8:	0f 87 87 03 00 00    	ja     c0005d65 <f_lseek+0x4a3>
c00059de:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c00059e4:	e9 84 03 00 00       	jmp    c0005d6d <f_lseek+0x4ab>
c00059e9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00059ec:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00059ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00059f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00059f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00059fb:	39 04 24             	cmp    DWORD PTR [esp],eax
c00059fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005a02:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005a06:	73 0f                	jae    c0005a17 <f_lseek+0x155>
c0005a08:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005a0b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005a0f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005a13:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005a17:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005a1b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005a1f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005a22:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005a25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a29:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005a2d:	0f 84 3a 03 00 00    	je     c0005d6d <f_lseek+0x4ab>
c0005a33:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005a37:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005a3b:	83 c6 ff             	add    esi,0xffffffff
c0005a3e:	89 d8                	mov    eax,ebx
c0005a40:	83 d7 ff             	adc    edi,0xffffffff
c0005a43:	89 f2                	mov    edx,esi
c0005a45:	89 f9                	mov    ecx,edi
c0005a47:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005a4b:	89 34 24             	mov    DWORD PTR [esp],esi
c0005a4e:	e8 78 c2 ff ff       	call   c0001ccb <clmt_clust>
c0005a53:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005a57:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005a5a:	89 c2                	mov    edx,eax
c0005a5c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005a60:	89 c8                	mov    eax,ecx
c0005a62:	e8 43 c2 ff ff       	call   c0001caa <clst2sect>
c0005a67:	89 d7                	mov    edi,edx
c0005a69:	09 c7                	or     edi,eax
c0005a6b:	0f 84 0d ff ff ff    	je     c000597e <f_lseek+0xbc>
c0005a71:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005a75:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005a7b:	0f 84 ec 02 00 00    	je     c0005d6d <f_lseek+0x4ab>
c0005a81:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a85:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005a89:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005a8c:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005a90:	0f ac fe 09          	shrd   esi,edi,0x9
c0005a94:	4d                   	dec    ebp
c0005a95:	31 ff                	xor    edi,edi
c0005a97:	21 ee                	and    esi,ebp
c0005a99:	01 c6                	add    esi,eax
c0005a9b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005a9e:	11 d7                	adc    edi,edx
c0005aa0:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005aa3:	39 fa                	cmp    edx,edi
c0005aa5:	75 08                	jne    c0005aaf <f_lseek+0x1ed>
c0005aa7:	39 f0                	cmp    eax,esi
c0005aa9:	0f 84 be 02 00 00    	je     c0005d6d <f_lseek+0x4ab>
c0005aaf:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005ab2:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ab6:	0f 89 80 02 00 00    	jns    c0005d3c <f_lseek+0x47a>
c0005abc:	83 ec 0c             	sub    esp,0xc
c0005abf:	6a 01                	push   0x1
c0005ac1:	52                   	push   edx
c0005ac2:	50                   	push   eax
c0005ac3:	55                   	push   ebp
c0005ac4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005ac8:	e9 5a 02 00 00       	jmp    c0005d27 <f_lseek+0x465>
c0005acd:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ad1:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005ad4:	74 16                	je     c0005aec <f_lseek+0x22a>
c0005ad6:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005adb:	76 0f                	jbe    c0005aec <f_lseek+0x22a>
c0005add:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005ae4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005aec:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005aef:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005af2:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005af5:	89 c7                	mov    edi,eax
c0005af7:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005afb:	73 0d                	jae    c0005b0a <f_lseek+0x248>
c0005afd:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005b01:	75 07                	jne    c0005b0a <f_lseek+0x248>
c0005b03:	89 14 24             	mov    DWORD PTR [esp],edx
c0005b06:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005b0a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005b0d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005b10:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005b14:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005b1b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005b22:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005b25:	75 09                	jne    c0005b30 <f_lseek+0x26e>
c0005b27:	31 f6                	xor    esi,esi
c0005b29:	31 ff                	xor    edi,edi
c0005b2b:	e9 af 01 00 00       	jmp    c0005cdf <f_lseek+0x41d>
c0005b30:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005b34:	89 d7                	mov    edi,edx
c0005b36:	c1 e1 09             	shl    ecx,0x9
c0005b39:	09 c7                	or     edi,eax
c0005b3b:	89 cd                	mov    ebp,ecx
c0005b3d:	74 6d                	je     c0005bac <f_lseek+0x2ea>
c0005b3f:	83 c0 ff             	add    eax,0xffffffff
c0005b42:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b46:	83 d2 ff             	adc    edx,0xffffffff
c0005b49:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b4c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b50:	83 c0 ff             	add    eax,0xffffffff
c0005b53:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b57:	83 d2 ff             	adc    edx,0xffffffff
c0005b5a:	31 ff                	xor    edi,edi
c0005b5c:	57                   	push   edi
c0005b5d:	51                   	push   ecx
c0005b5e:	52                   	push   edx
c0005b5f:	50                   	push   eax
c0005b60:	e8 c7 f8 01 00       	call   c002542c <__udivdi3>
c0005b65:	83 c4 10             	add    esp,0x10
c0005b68:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005b6c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005b70:	57                   	push   edi
c0005b71:	55                   	push   ebp
c0005b72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b7a:	e8 ad f8 01 00       	call   c002542c <__udivdi3>
c0005b7f:	83 c4 10             	add    esp,0x10
c0005b82:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005b86:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005b8a:	19 d1                	sbb    ecx,edx
c0005b8c:	72 1e                	jb     c0005bac <f_lseek+0x2ea>
c0005b8e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b92:	89 e9                	mov    ecx,ebp
c0005b94:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b97:	f7 d9                	neg    ecx
c0005b99:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005b9c:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005ba0:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005ba3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005ba6:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005baa:	eb 28                	jmp    c0005bd4 <f_lseek+0x312>
c0005bac:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005baf:	85 c0                	test   eax,eax
c0005bb1:	75 1e                	jne    c0005bd1 <f_lseek+0x30f>
c0005bb3:	31 d2                	xor    edx,edx
c0005bb5:	89 d8                	mov    eax,ebx
c0005bb7:	e8 a9 d4 ff ff       	call   c0003065 <create_chain>
c0005bbc:	83 f8 01             	cmp    eax,0x1
c0005bbf:	0f 84 b9 fd ff ff    	je     c000597e <f_lseek+0xbc>
c0005bc5:	83 f8 ff             	cmp    eax,0xffffffff
c0005bc8:	0f 84 c6 fd ff ff    	je     c0005994 <f_lseek+0xd2>
c0005bce:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005bd1:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005bd4:	85 c0                	test   eax,eax
c0005bd6:	0f 84 4b ff ff ff    	je     c0005b27 <f_lseek+0x265>
c0005bdc:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005be0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005be8:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005beb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005bef:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005bf2:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005bf5:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005bf9:	0f 83 9d 00 00 00    	jae    c0005c9c <f_lseek+0x3da>
c0005bff:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005c03:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005c07:	29 34 24             	sub    DWORD PTR [esp],esi
c0005c0a:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005c0e:	01 f2                	add    edx,esi
c0005c10:	11 f9                	adc    ecx,edi
c0005c12:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005c16:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005c1a:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005c1d:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005c20:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005c23:	f6 c1 02             	test   cl,0x2
c0005c26:	74 35                	je     c0005c5d <f_lseek+0x39b>
c0005c28:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005c2c:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005c2f:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005c32:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005c36:	73 16                	jae    c0005c4e <f_lseek+0x38c>
c0005c38:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c3c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c40:	88 ca                	mov    dl,cl
c0005c42:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005c45:	83 ca 40             	or     edx,0x40
c0005c48:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005c4b:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005c4e:	89 c2                	mov    edx,eax
c0005c50:	89 d8                	mov    eax,ebx
c0005c52:	e8 0e d4 ff ff       	call   c0003065 <create_chain>
c0005c57:	85 c0                	test   eax,eax
c0005c59:	75 0b                	jne    c0005c66 <f_lseek+0x3a4>
c0005c5b:	eb 30                	jmp    c0005c8d <f_lseek+0x3cb>
c0005c5d:	89 c2                	mov    edx,eax
c0005c5f:	89 d8                	mov    eax,ebx
c0005c61:	e8 11 d1 ff ff       	call   c0002d77 <get_fat>
c0005c66:	83 f8 ff             	cmp    eax,0xffffffff
c0005c69:	0f 84 25 fd ff ff    	je     c0005994 <f_lseek+0xd2>
c0005c6f:	83 f8 01             	cmp    eax,0x1
c0005c72:	0f 86 06 fd ff ff    	jbe    c000597e <f_lseek+0xbc>
c0005c78:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c7c:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c7f:	0f 86 f9 fc ff ff    	jbe    c000597e <f_lseek+0xbc>
c0005c85:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c88:	e9 5b ff ff ff       	jmp    c0005be8 <f_lseek+0x326>
c0005c8d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005c94:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c9c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005c9f:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ca3:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ca6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ca9:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005cac:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005cb2:	0f 84 6f fe ff ff    	je     c0005b27 <f_lseek+0x265>
c0005cb8:	89 c2                	mov    edx,eax
c0005cba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005cbe:	e8 e7 bf ff ff       	call   c0001caa <clst2sect>
c0005cc3:	89 d7                	mov    edi,edx
c0005cc5:	09 c7                	or     edi,eax
c0005cc7:	0f 84 b1 fc ff ff    	je     c000597e <f_lseek+0xbc>
c0005ccd:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cd1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cd4:	0f ac fe 09          	shrd   esi,edi,0x9
c0005cd8:	c1 ef 09             	shr    edi,0x9
c0005cdb:	01 c6                	add    esi,eax
c0005cdd:	11 d7                	adc    edi,edx
c0005cdf:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005ce2:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005ce5:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005ce8:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005ceb:	19 d1                	sbb    ecx,edx
c0005ced:	73 0a                	jae    c0005cf9 <f_lseek+0x437>
c0005cef:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005cf2:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005cf5:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005cf9:	a9 ff 01 00 00       	test   eax,0x1ff
c0005cfe:	74 6d                	je     c0005d6d <f_lseek+0x4ab>
c0005d00:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005d03:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005d06:	39 fa                	cmp    edx,edi
c0005d08:	75 04                	jne    c0005d0e <f_lseek+0x44c>
c0005d0a:	39 f0                	cmp    eax,esi
c0005d0c:	74 5f                	je     c0005d6d <f_lseek+0x4ab>
c0005d0e:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d11:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d15:	79 25                	jns    c0005d3c <f_lseek+0x47a>
c0005d17:	83 ec 0c             	sub    esp,0xc
c0005d1a:	6a 01                	push   0x1
c0005d1c:	52                   	push   edx
c0005d1d:	50                   	push   eax
c0005d1e:	55                   	push   ebp
c0005d1f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d23:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d27:	50                   	push   eax
c0005d28:	e8 af bc ff ff       	call   c00019dc <disk_write>
c0005d2d:	83 c4 20             	add    esp,0x20
c0005d30:	85 c0                	test   eax,eax
c0005d32:	0f 85 5c fc ff ff    	jne    c0005994 <f_lseek+0xd2>
c0005d38:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005d3c:	83 ec 0c             	sub    esp,0xc
c0005d3f:	6a 01                	push   0x1
c0005d41:	57                   	push   edi
c0005d42:	56                   	push   esi
c0005d43:	55                   	push   ebp
c0005d44:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d48:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d4c:	50                   	push   eax
c0005d4d:	e8 74 bc ff ff       	call   c00019c6 <disk_read>
c0005d52:	83 c4 20             	add    esp,0x20
c0005d55:	85 c0                	test   eax,eax
c0005d57:	0f 85 37 fc ff ff    	jne    c0005994 <f_lseek+0xd2>
c0005d5d:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005d60:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005d63:	eb 08                	jmp    c0005d6d <f_lseek+0x4ab>
c0005d65:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005d6d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005d71:	83 c4 3c             	add    esp,0x3c
c0005d74:	5b                   	pop    ebx
c0005d75:	5e                   	pop    esi
c0005d76:	5f                   	pop    edi
c0005d77:	5d                   	pop    ebp
c0005d78:	c3                   	ret    

c0005d79 <f_opendir>:
c0005d79:	56                   	push   esi
c0005d7a:	b8 09 00 00 00       	mov    eax,0x9
c0005d7f:	53                   	push   ebx
c0005d80:	83 ec 24             	sub    esp,0x24
c0005d83:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005d87:	85 db                	test   ebx,ebx
c0005d89:	0f 84 e6 00 00 00    	je     c0005e75 <f_opendir+0xfc>
c0005d8f:	31 c9                	xor    ecx,ecx
c0005d91:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005d95:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005d99:	e8 03 c7 ff ff       	call   c00024a1 <mount_volume>
c0005d9e:	85 c0                	test   eax,eax
c0005da0:	0f 85 c9 00 00 00    	jne    c0005e6f <f_opendir+0xf6>
c0005da6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005daa:	83 ec 0c             	sub    esp,0xc
c0005dad:	89 03                	mov    DWORD PTR [ebx],eax
c0005daf:	68 60 04 00 00       	push   0x460
c0005db4:	e8 8b 24 00 00       	call   c0008244 <ff_memalloc>
c0005db9:	83 c4 10             	add    esp,0x10
c0005dbc:	89 c6                	mov    esi,eax
c0005dbe:	b8 11 00 00 00       	mov    eax,0x11
c0005dc3:	85 f6                	test   esi,esi
c0005dc5:	0f 84 aa 00 00 00    	je     c0005e75 <f_opendir+0xfc>
c0005dcb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005dcf:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005dd5:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005dd8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ddb:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005ddf:	89 d8                	mov    eax,ebx
c0005de1:	e8 31 ee ff ff       	call   c0004c17 <follow_path>
c0005de6:	85 c0                	test   eax,eax
c0005de8:	75 61                	jne    c0005e4b <f_opendir+0xd2>
c0005dea:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005dee:	78 46                	js     c0005e36 <f_opendir+0xbd>
c0005df0:	b8 05 00 00 00       	mov    eax,0x5
c0005df5:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005df9:	74 50                	je     c0005e4b <f_opendir+0xd2>
c0005dfb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dff:	8a 01                	mov    al,BYTE PTR [ecx]
c0005e01:	3c 04                	cmp    al,0x4
c0005e03:	75 26                	jne    c0005e2b <f_opendir+0xb2>
c0005e05:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005e08:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005e0b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005e0e:	30 d2                	xor    dl,dl
c0005e10:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005e14:	09 c2                	or     edx,eax
c0005e16:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005e19:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005e1c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005e1f:	89 da                	mov    edx,ebx
c0005e21:	8d 41 10             	lea    eax,[ecx+0x10]
c0005e24:	e8 b4 ed ff ff       	call   c0004bdd <init_alloc_info.isra.2>
c0005e29:	eb 0b                	jmp    c0005e36 <f_opendir+0xbd>
c0005e2b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005e2e:	e8 59 ed ff ff       	call   c0004b8c <ld_clust.isra.0>
c0005e33:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e36:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e3a:	31 d2                	xor    edx,edx
c0005e3c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005e40:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005e44:	89 d8                	mov    eax,ebx
c0005e46:	e8 22 d1 ff ff       	call   c0002f6d <dir_sdi>
c0005e4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005e4f:	83 ec 0c             	sub    esp,0xc
c0005e52:	56                   	push   esi
c0005e53:	e8 02 24 00 00       	call   c000825a <ff_memfree>
c0005e58:	83 c4 10             	add    esp,0x10
c0005e5b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e5f:	83 f8 04             	cmp    eax,0x4
c0005e62:	74 06                	je     c0005e6a <f_opendir+0xf1>
c0005e64:	85 c0                	test   eax,eax
c0005e66:	74 0d                	je     c0005e75 <f_opendir+0xfc>
c0005e68:	eb 05                	jmp    c0005e6f <f_opendir+0xf6>
c0005e6a:	b8 05 00 00 00       	mov    eax,0x5
c0005e6f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e75:	83 c4 24             	add    esp,0x24
c0005e78:	5b                   	pop    ebx
c0005e79:	5e                   	pop    esi
c0005e7a:	c3                   	ret    

c0005e7b <f_closedir>:
c0005e7b:	53                   	push   ebx
c0005e7c:	83 ec 18             	sub    esp,0x18
c0005e7f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005e83:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005e87:	89 d8                	mov    eax,ebx
c0005e89:	e8 86 c2 ff ff       	call   c0002114 <validate>
c0005e8e:	85 c0                	test   eax,eax
c0005e90:	75 06                	jne    c0005e98 <f_closedir+0x1d>
c0005e92:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e98:	83 c4 18             	add    esp,0x18
c0005e9b:	5b                   	pop    ebx
c0005e9c:	c3                   	ret    

c0005e9d <f_readdir>:
c0005e9d:	57                   	push   edi
c0005e9e:	56                   	push   esi
c0005e9f:	53                   	push   ebx
c0005ea0:	83 ec 20             	sub    esp,0x20
c0005ea3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ea7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005eab:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005eaf:	89 d8                	mov    eax,ebx
c0005eb1:	e8 5e c2 ff ff       	call   c0002114 <validate>
c0005eb6:	85 c0                	test   eax,eax
c0005eb8:	75 77                	jne    c0005f31 <f_readdir+0x94>
c0005eba:	85 ff                	test   edi,edi
c0005ebc:	75 0b                	jne    c0005ec9 <f_readdir+0x2c>
c0005ebe:	31 d2                	xor    edx,edx
c0005ec0:	89 d8                	mov    eax,ebx
c0005ec2:	e8 a6 d0 ff ff       	call   c0002f6d <dir_sdi>
c0005ec7:	eb 68                	jmp    c0005f31 <f_readdir+0x94>
c0005ec9:	83 ec 0c             	sub    esp,0xc
c0005ecc:	68 60 04 00 00       	push   0x460
c0005ed1:	e8 6e 23 00 00       	call   c0008244 <ff_memalloc>
c0005ed6:	83 c4 10             	add    esp,0x10
c0005ed9:	89 c6                	mov    esi,eax
c0005edb:	b8 11 00 00 00       	mov    eax,0x11
c0005ee0:	85 f6                	test   esi,esi
c0005ee2:	74 4d                	je     c0005f31 <f_readdir+0x94>
c0005ee4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ee8:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005eee:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005ef1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ef4:	31 d2                	xor    edx,edx
c0005ef6:	89 d8                	mov    eax,ebx
c0005ef8:	e8 80 d8 ff ff       	call   c000377d <dir_read>
c0005efd:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005f02:	75 19                	jne    c0005f1d <f_readdir+0x80>
c0005f04:	89 fa                	mov    edx,edi
c0005f06:	89 d8                	mov    eax,ebx
c0005f08:	e8 7e ea ff ff       	call   c000498b <get_fileinfo>
c0005f0d:	31 d2                	xor    edx,edx
c0005f0f:	89 d8                	mov    eax,ebx
c0005f11:	e8 af d5 ff ff       	call   c00034c5 <dir_next>
c0005f16:	83 f8 04             	cmp    eax,0x4
c0005f19:	75 02                	jne    c0005f1d <f_readdir+0x80>
c0005f1b:	31 c0                	xor    eax,eax
c0005f1d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f21:	83 ec 0c             	sub    esp,0xc
c0005f24:	56                   	push   esi
c0005f25:	e8 30 23 00 00       	call   c000825a <ff_memfree>
c0005f2a:	83 c4 10             	add    esp,0x10
c0005f2d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f31:	83 c4 20             	add    esp,0x20
c0005f34:	5b                   	pop    ebx
c0005f35:	5e                   	pop    esi
c0005f36:	5f                   	pop    edi
c0005f37:	c3                   	ret    

c0005f38 <f_stat>:
c0005f38:	57                   	push   edi
c0005f39:	31 c9                	xor    ecx,ecx
c0005f3b:	56                   	push   esi
c0005f3c:	53                   	push   ebx
c0005f3d:	83 ec 50             	sub    esp,0x50
c0005f40:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005f44:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005f48:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005f4c:	e8 50 c5 ff ff       	call   c00024a1 <mount_volume>
c0005f51:	89 c3                	mov    ebx,eax
c0005f53:	85 c0                	test   eax,eax
c0005f55:	75 67                	jne    c0005fbe <f_stat+0x86>
c0005f57:	83 ec 0c             	sub    esp,0xc
c0005f5a:	bb 11 00 00 00       	mov    ebx,0x11
c0005f5f:	68 60 04 00 00       	push   0x460
c0005f64:	e8 db 22 00 00       	call   c0008244 <ff_memalloc>
c0005f69:	83 c4 10             	add    esp,0x10
c0005f6c:	89 c6                	mov    esi,eax
c0005f6e:	85 c0                	test   eax,eax
c0005f70:	74 4c                	je     c0005fbe <f_stat+0x86>
c0005f72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f76:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f7c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f7f:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f82:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005f86:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f8a:	e8 88 ec ff ff       	call   c0004c17 <follow_path>
c0005f8f:	89 c3                	mov    ebx,eax
c0005f91:	85 c0                	test   eax,eax
c0005f93:	75 1d                	jne    c0005fb2 <f_stat+0x7a>
c0005f95:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005f9a:	78 11                	js     c0005fad <f_stat+0x75>
c0005f9c:	85 ff                	test   edi,edi
c0005f9e:	74 12                	je     c0005fb2 <f_stat+0x7a>
c0005fa0:	89 fa                	mov    edx,edi
c0005fa2:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005fa6:	e8 e0 e9 ff ff       	call   c000498b <get_fileinfo>
c0005fab:	eb 05                	jmp    c0005fb2 <f_stat+0x7a>
c0005fad:	bb 06 00 00 00       	mov    ebx,0x6
c0005fb2:	83 ec 0c             	sub    esp,0xc
c0005fb5:	56                   	push   esi
c0005fb6:	e8 9f 22 00 00       	call   c000825a <ff_memfree>
c0005fbb:	83 c4 10             	add    esp,0x10
c0005fbe:	83 c4 50             	add    esp,0x50
c0005fc1:	89 d8                	mov    eax,ebx
c0005fc3:	5b                   	pop    ebx
c0005fc4:	5e                   	pop    esi
c0005fc5:	5f                   	pop    edi
c0005fc6:	c3                   	ret    

c0005fc7 <f_getfree>:
c0005fc7:	55                   	push   ebp
c0005fc8:	31 c9                	xor    ecx,ecx
c0005fca:	57                   	push   edi
c0005fcb:	56                   	push   esi
c0005fcc:	53                   	push   ebx
c0005fcd:	83 ec 5c             	sub    esp,0x5c
c0005fd0:	8d 54 24 24          	lea    edx,[esp+0x24]
c0005fd4:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005fd8:	e8 c4 c4 ff ff       	call   c00024a1 <mount_volume>
c0005fdd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005fe1:	85 c0                	test   eax,eax
c0005fe3:	0f 85 9d 01 00 00    	jne    c0006186 <f_getfree+0x1bf>
c0005fe9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005fed:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0005ff1:	89 02                	mov    DWORD PTR [edx],eax
c0005ff3:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0005ff6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0005ff9:	8d 71 fe             	lea    esi,[ecx-0x2]
c0005ffc:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006000:	39 f2                	cmp    edx,esi
c0006002:	77 0b                	ja     c000600f <f_getfree+0x48>
c0006004:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006008:	89 10                	mov    DWORD PTR [eax],edx
c000600a:	e9 77 01 00 00       	jmp    c0006186 <f_getfree+0x1bf>
c000600f:	8a 10                	mov    dl,BYTE PTR [eax]
c0006011:	80 fa 01             	cmp    dl,0x1
c0006014:	75 3a                	jne    c0006050 <f_getfree+0x89>
c0006016:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000601a:	be 02 00 00 00       	mov    esi,0x2
c000601f:	31 db                	xor    ebx,ebx
c0006021:	89 f2                	mov    edx,esi
c0006023:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006027:	e8 4b cd ff ff       	call   c0002d77 <get_fat>
c000602c:	83 f8 ff             	cmp    eax,0xffffffff
c000602f:	0f 84 28 01 00 00    	je     c000615d <f_getfree+0x196>
c0006035:	83 f8 01             	cmp    eax,0x1
c0006038:	0f 84 29 01 00 00    	je     c0006167 <f_getfree+0x1a0>
c000603e:	83 d3 00             	adc    ebx,0x0
c0006041:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006045:	46                   	inc    esi
c0006046:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006049:	77 d6                	ja     c0006021 <f_getfree+0x5a>
c000604b:	e9 25 01 00 00       	jmp    c0006175 <f_getfree+0x1ae>
c0006050:	80 fa 04             	cmp    dl,0x4
c0006053:	0f 85 88 00 00 00    	jne    c00060e1 <f_getfree+0x11a>
c0006059:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c000605c:	31 ed                	xor    ebp,ebp
c000605e:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006061:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006065:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006069:	31 db                	xor    ebx,ebx
c000606b:	85 ed                	test   ebp,ebp
c000606d:	75 3f                	jne    c00060ae <f_getfree+0xe7>
c000606f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006073:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0006077:	83 c0 01             	add    eax,0x1
c000607a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000607e:	83 d2 00             	adc    edx,0x0
c0006081:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0006085:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006089:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000608d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006091:	e8 59 c1 ff ff       	call   c00021ef <move_window>
c0006096:	85 c0                	test   eax,eax
c0006098:	0f 85 d3 00 00 00    	jne    c0006171 <f_getfree+0x1aa>
c000609e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00060a2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00060a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00060aa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00060ae:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060b2:	8d 4e f8             	lea    ecx,[esi-0x8]
c00060b5:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00060b9:	89 cf                	mov    edi,ecx
c00060bb:	85 f6                	test   esi,esi
c00060bd:	74 12                	je     c00060d1 <f_getfree+0x10a>
c00060bf:	88 c1                	mov    cl,al
c00060c1:	83 e1 01             	and    ecx,0x1
c00060c4:	80 f9 01             	cmp    cl,0x1
c00060c7:	83 d3 00             	adc    ebx,0x0
c00060ca:	d0 e8                	shr    al,1
c00060cc:	4e                   	dec    esi
c00060cd:	39 fe                	cmp    esi,edi
c00060cf:	75 ea                	jne    c00060bb <f_getfree+0xf4>
c00060d1:	45                   	inc    ebp
c00060d2:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00060d8:	85 f6                	test   esi,esi
c00060da:	75 8f                	jne    c000606b <f_getfree+0xa4>
c00060dc:	e9 94 00 00 00       	jmp    c0006175 <f_getfree+0x1ae>
c00060e1:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00060e4:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00060e7:	31 f6                	xor    esi,esi
c00060e9:	31 db                	xor    ebx,ebx
c00060eb:	85 f6                	test   esi,esi
c00060ed:	75 1b                	jne    c000610a <f_getfree+0x143>
c00060ef:	89 d7                	mov    edi,edx
c00060f1:	89 cd                	mov    ebp,ecx
c00060f3:	83 c7 01             	add    edi,0x1
c00060f6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060fa:	83 d5 00             	adc    ebp,0x0
c00060fd:	e8 ed c0 ff ff       	call   c00021ef <move_window>
c0006102:	85 c0                	test   eax,eax
c0006104:	75 6b                	jne    c0006171 <f_getfree+0x1aa>
c0006106:	89 fa                	mov    edx,edi
c0006108:	89 e9                	mov    ecx,ebp
c000610a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000610e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006112:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006116:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006119:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000611d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006121:	75 11                	jne    c0006134 <f_getfree+0x16d>
c0006123:	e8 e9 b8 ff ff       	call   c0001a11 <ld_word>
c0006128:	66 83 f8 01          	cmp    ax,0x1
c000612c:	83 d3 00             	adc    ebx,0x0
c000612f:	83 c6 02             	add    esi,0x2
c0006132:	eb 13                	jmp    c0006147 <f_getfree+0x180>
c0006134:	e8 e5 b8 ff ff       	call   c0001a1e <ld_dword>
c0006139:	25 ff ff ff 0f       	and    eax,0xfffffff
c000613e:	83 f8 01             	cmp    eax,0x1
c0006141:	83 d3 00             	adc    ebx,0x0
c0006144:	83 c6 04             	add    esi,0x4
c0006147:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000614d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006151:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006155:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c0006159:	75 90                	jne    c00060eb <f_getfree+0x124>
c000615b:	eb 18                	jmp    c0006175 <f_getfree+0x1ae>
c000615d:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0006165:	eb 0e                	jmp    c0006175 <f_getfree+0x1ae>
c0006167:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c000616f:	eb 04                	jmp    c0006175 <f_getfree+0x1ae>
c0006171:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006175:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006179:	89 18                	mov    DWORD PTR [eax],ebx
c000617b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000617f:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0006182:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0006186:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000618a:	83 c4 5c             	add    esp,0x5c
c000618d:	5b                   	pop    ebx
c000618e:	5e                   	pop    esi
c000618f:	5f                   	pop    edi
c0006190:	5d                   	pop    ebp
c0006191:	c3                   	ret    

c0006192 <f_truncate>:
c0006192:	56                   	push   esi
c0006193:	53                   	push   ebx
c0006194:	83 ec 14             	sub    esp,0x14
c0006197:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000619b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000619f:	89 d8                	mov    eax,ebx
c00061a1:	e8 6e bf ff ff       	call   c0002114 <validate>
c00061a6:	89 c6                	mov    esi,eax
c00061a8:	85 c0                	test   eax,eax
c00061aa:	0f 85 d2 00 00 00    	jne    c0006282 <f_truncate+0xf0>
c00061b0:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00061b4:	85 f6                	test   esi,esi
c00061b6:	0f 85 c6 00 00 00    	jne    c0006282 <f_truncate+0xf0>
c00061bc:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00061c0:	0f 84 b7 00 00 00    	je     c000627d <f_truncate+0xeb>
c00061c6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00061c9:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00061cc:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00061cf:	89 d1                	mov    ecx,edx
c00061d1:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00061d4:	0f 83 a8 00 00 00    	jae    c0006282 <f_truncate+0xf0>
c00061da:	09 c2                	or     edx,eax
c00061dc:	75 15                	jne    c00061f3 <f_truncate+0x61>
c00061de:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00061e1:	31 c9                	xor    ecx,ecx
c00061e3:	89 d8                	mov    eax,ebx
c00061e5:	e8 7a d0 ff ff       	call   c0003264 <remove_chain>
c00061ea:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00061f1:	eb 35                	jmp    c0006228 <f_truncate+0x96>
c00061f3:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00061f6:	89 d8                	mov    eax,ebx
c00061f8:	e8 7a cb ff ff       	call   c0002d77 <get_fat>
c00061fd:	89 c2                	mov    edx,eax
c00061ff:	b8 01 00 00 00       	mov    eax,0x1
c0006204:	83 fa ff             	cmp    edx,0xffffffff
c0006207:	74 1f                	je     c0006228 <f_truncate+0x96>
c0006209:	b8 02 00 00 00       	mov    eax,0x2
c000620e:	83 fa 01             	cmp    edx,0x1
c0006211:	74 15                	je     c0006228 <f_truncate+0x96>
c0006213:	31 c0                	xor    eax,eax
c0006215:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006219:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000621c:	76 0a                	jbe    c0006228 <f_truncate+0x96>
c000621e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006221:	89 d8                	mov    eax,ebx
c0006223:	e8 3c d0 ff ff       	call   c0003264 <remove_chain>
c0006228:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000622b:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000622e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006231:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006234:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006237:	83 ca 40             	or     edx,0x40
c000623a:	85 c0                	test   eax,eax
c000623c:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c000623f:	75 35                	jne    c0006276 <f_truncate+0xe4>
c0006241:	84 d2                	test   dl,dl
c0006243:	79 3d                	jns    c0006282 <f_truncate+0xf0>
c0006245:	83 ec 0c             	sub    esp,0xc
c0006248:	8d 43 50             	lea    eax,[ebx+0x50]
c000624b:	6a 01                	push   0x1
c000624d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006250:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006253:	50                   	push   eax
c0006254:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0006258:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000625c:	50                   	push   eax
c000625d:	e8 7a b7 ff ff       	call   c00019dc <disk_write>
c0006262:	83 c4 20             	add    esp,0x20
c0006265:	85 c0                	test   eax,eax
c0006267:	75 08                	jne    c0006271 <f_truncate+0xdf>
c0006269:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000626d:	31 f6                	xor    esi,esi
c000626f:	eb 11                	jmp    c0006282 <f_truncate+0xf0>
c0006271:	b8 01 00 00 00       	mov    eax,0x1
c0006276:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c0006279:	89 c6                	mov    esi,eax
c000627b:	eb 05                	jmp    c0006282 <f_truncate+0xf0>
c000627d:	be 07 00 00 00       	mov    esi,0x7
c0006282:	89 f0                	mov    eax,esi
c0006284:	83 c4 14             	add    esp,0x14
c0006287:	5b                   	pop    ebx
c0006288:	5e                   	pop    esi
c0006289:	c3                   	ret    

c000628a <f_unlink>:
c000628a:	56                   	push   esi
c000628b:	b9 02 00 00 00       	mov    ecx,0x2
c0006290:	53                   	push   ebx
c0006291:	81 ec e4 00 00 00    	sub    esp,0xe4
c0006297:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000629b:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00062a2:	e8 fa c1 ff ff       	call   c00024a1 <mount_volume>
c00062a7:	85 c0                	test   eax,eax
c00062a9:	0f 85 55 01 00 00    	jne    c0006404 <f_unlink+0x17a>
c00062af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062b3:	83 ec 0c             	sub    esp,0xc
c00062b6:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00062ba:	68 60 04 00 00       	push   0x460
c00062bf:	e8 80 1f 00 00       	call   c0008244 <ff_memalloc>
c00062c4:	83 c4 10             	add    esp,0x10
c00062c7:	89 c3                	mov    ebx,eax
c00062c9:	b8 11 00 00 00       	mov    eax,0x11
c00062ce:	85 db                	test   ebx,ebx
c00062d0:	0f 84 2e 01 00 00    	je     c0006404 <f_unlink+0x17a>
c00062d6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062da:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00062e0:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00062e3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00062e6:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c00062ed:	8d 44 24 48          	lea    eax,[esp+0x48]
c00062f1:	e8 21 e9 ff ff       	call   c0004c17 <follow_path>
c00062f6:	85 c0                	test   eax,eax
c00062f8:	0f 85 f2 00 00 00    	jne    c00063f0 <f_unlink+0x166>
c00062fe:	b8 06 00 00 00       	mov    eax,0x6
c0006303:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000630b:	0f 88 df 00 00 00    	js     c00063f0 <f_unlink+0x166>
c0006311:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006316:	74 0a                	je     c0006322 <f_unlink+0x98>
c0006318:	b8 07 00 00 00       	mov    eax,0x7
c000631d:	e9 ce 00 00 00       	jmp    c00063f0 <f_unlink+0x166>
c0006322:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006326:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000632a:	8a 02                	mov    al,BYTE PTR [edx]
c000632c:	3c 04                	cmp    al,0x4
c000632e:	75 12                	jne    c0006342 <f_unlink+0xb8>
c0006330:	8d 42 10             	lea    eax,[edx+0x10]
c0006333:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006337:	e8 a1 e8 ff ff       	call   c0004bdd <init_alloc_info.isra.2>
c000633c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006340:	eb 0e                	jmp    c0006350 <f_unlink+0xc6>
c0006342:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006349:	e8 3e e8 ff ff       	call   c0004b8c <ld_clust.isra.0>
c000634e:	89 c6                	mov    esi,eax
c0006350:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c0006355:	75 12                	jne    c0006369 <f_unlink+0xdf>
c0006357:	8d 44 24 48          	lea    eax,[esp+0x48]
c000635b:	e8 94 d6 ff ff       	call   c00039f4 <dir_remove>
c0006360:	85 c0                	test   eax,eax
c0006362:	74 6c                	je     c00063d0 <f_unlink+0x146>
c0006364:	e9 87 00 00 00       	jmp    c00063f0 <f_unlink+0x166>
c0006369:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000636d:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c0006374:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c000637b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000637e:	75 21                	jne    c00063a1 <f_unlink+0x117>
c0006380:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0006384:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0006388:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c000638f:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c0006396:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c000639a:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00063a1:	31 d2                	xor    edx,edx
c00063a3:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063aa:	e8 be cb ff ff       	call   c0002f6d <dir_sdi>
c00063af:	85 c0                	test   eax,eax
c00063b1:	75 3d                	jne    c00063f0 <f_unlink+0x166>
c00063b3:	31 d2                	xor    edx,edx
c00063b5:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063bc:	e8 bc d3 ff ff       	call   c000377d <dir_read>
c00063c1:	85 c0                	test   eax,eax
c00063c3:	0f 84 4f ff ff ff    	je     c0006318 <f_unlink+0x8e>
c00063c9:	83 f8 04             	cmp    eax,0x4
c00063cc:	75 22                	jne    c00063f0 <f_unlink+0x166>
c00063ce:	eb 87                	jmp    c0006357 <f_unlink+0xcd>
c00063d0:	85 f6                	test   esi,esi
c00063d2:	75 0b                	jne    c00063df <f_unlink+0x155>
c00063d4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063d8:	e8 3d df ff ff       	call   c000431a <sync_fs>
c00063dd:	eb 11                	jmp    c00063f0 <f_unlink+0x166>
c00063df:	31 c9                	xor    ecx,ecx
c00063e1:	89 f2                	mov    edx,esi
c00063e3:	8d 44 24 20          	lea    eax,[esp+0x20]
c00063e7:	e8 78 ce ff ff       	call   c0003264 <remove_chain>
c00063ec:	85 c0                	test   eax,eax
c00063ee:	74 e4                	je     c00063d4 <f_unlink+0x14a>
c00063f0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063f4:	83 ec 0c             	sub    esp,0xc
c00063f7:	53                   	push   ebx
c00063f8:	e8 5d 1e 00 00       	call   c000825a <ff_memfree>
c00063fd:	83 c4 10             	add    esp,0x10
c0006400:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006404:	81 c4 e4 00 00 00    	add    esp,0xe4
c000640a:	5b                   	pop    ebx
c000640b:	5e                   	pop    esi
c000640c:	c3                   	ret    

c000640d <f_mkdir>:
c000640d:	57                   	push   edi
c000640e:	b9 02 00 00 00       	mov    ecx,0x2
c0006413:	56                   	push   esi
c0006414:	53                   	push   ebx
c0006415:	83 c4 80             	add    esp,0xffffff80
c0006418:	8d 54 24 08          	lea    edx,[esp+0x8]
c000641c:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006423:	e8 79 c0 ff ff       	call   c00024a1 <mount_volume>
c0006428:	89 c3                	mov    ebx,eax
c000642a:	85 c0                	test   eax,eax
c000642c:	0f 85 fe 01 00 00    	jne    c0006630 <f_mkdir+0x223>
c0006432:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006436:	bb 11 00 00 00       	mov    ebx,0x11
c000643b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000643f:	83 ec 0c             	sub    esp,0xc
c0006442:	68 60 04 00 00       	push   0x460
c0006447:	e8 f8 1d 00 00       	call   c0008244 <ff_memalloc>
c000644c:	83 c4 10             	add    esp,0x10
c000644f:	89 c7                	mov    edi,eax
c0006451:	85 c0                	test   eax,eax
c0006453:	0f 84 d7 01 00 00    	je     c0006630 <f_mkdir+0x223>
c0006459:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000645d:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006463:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0006466:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006469:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006470:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006474:	e8 9e e7 ff ff       	call   c0004c17 <follow_path>
c0006479:	89 c3                	mov    ebx,eax
c000647b:	85 c0                	test   eax,eax
c000647d:	74 3e                	je     c00064bd <f_mkdir+0xb0>
c000647f:	83 f8 04             	cmp    eax,0x4
c0006482:	75 3e                	jne    c00064c2 <f_mkdir+0xb5>
c0006484:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006488:	31 d2                	xor    edx,edx
c000648a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000648e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006492:	e8 ce cb ff ff       	call   c0003065 <create_chain>
c0006497:	89 c6                	mov    esi,eax
c0006499:	85 c0                	test   eax,eax
c000649b:	74 0c                	je     c00064a9 <f_mkdir+0x9c>
c000649d:	bb 02 00 00 00       	mov    ebx,0x2
c00064a2:	83 f8 01             	cmp    eax,0x1
c00064a5:	74 07                	je     c00064ae <f_mkdir+0xa1>
c00064a7:	eb 2a                	jmp    c00064d3 <f_mkdir+0xc6>
c00064a9:	bb 07 00 00 00       	mov    ebx,0x7
c00064ae:	31 c9                	xor    ecx,ecx
c00064b0:	89 f2                	mov    edx,esi
c00064b2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00064b6:	e8 a9 cd ff ff       	call   c0003264 <remove_chain>
c00064bb:	eb 05                	jmp    c00064c2 <f_mkdir+0xb5>
c00064bd:	bb 08 00 00 00       	mov    ebx,0x8
c00064c2:	83 ec 0c             	sub    esp,0xc
c00064c5:	57                   	push   edi
c00064c6:	e8 8f 1d 00 00       	call   c000825a <ff_memfree>
c00064cb:	83 c4 10             	add    esp,0x10
c00064ce:	e9 5d 01 00 00       	jmp    c0006630 <f_mkdir+0x223>
c00064d3:	bb 01 00 00 00       	mov    ebx,0x1
c00064d8:	83 f8 ff             	cmp    eax,0xffffffff
c00064db:	74 d1                	je     c00064ae <f_mkdir+0xa1>
c00064dd:	89 f2                	mov    edx,esi
c00064df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064e3:	e8 c4 ce ff ff       	call   c00033ac <dir_clear>
c00064e8:	89 c3                	mov    ebx,eax
c00064ea:	85 c0                	test   eax,eax
c00064ec:	75 c0                	jne    c00064ae <f_mkdir+0xa1>
c00064ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064f2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064f5:	74 69                	je     c0006560 <f_mkdir+0x153>
c00064f7:	b9 0b 00 00 00       	mov    ecx,0xb
c00064fc:	83 c0 54             	add    eax,0x54
c00064ff:	ba 20 00 00 00       	mov    edx,0x20
c0006504:	e8 9c b5 ff ff       	call   c0001aa5 <mem_set>
c0006509:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000650d:	ba 00 00 21 50       	mov    edx,0x50210000
c0006512:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006516:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000651a:	83 c0 6a             	add    eax,0x6a
c000651d:	e8 65 b5 ff ff       	call   c0001a87 <st_dword>
c0006522:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006526:	89 f1                	mov    ecx,esi
c0006528:	8d 50 54             	lea    edx,[eax+0x54]
c000652b:	e8 85 e6 ff ff       	call   c0004bb5 <st_clust.isra.1>
c0006530:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006534:	b9 20 00 00 00       	mov    ecx,0x20
c0006539:	8d 50 54             	lea    edx,[eax+0x54]
c000653c:	83 c0 74             	add    eax,0x74
c000653f:	e8 4c b5 ff ff       	call   c0001a90 <mem_cpy>
c0006544:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006548:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000654c:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006550:	8d 50 74             	lea    edx,[eax+0x74]
c0006553:	e8 5d e6 ff ff       	call   c0004bb5 <st_clust.isra.1>
c0006558:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000655c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006560:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006564:	e8 2f db ff ff       	call   c0004098 <dir_register>
c0006569:	89 c3                	mov    ebx,eax
c000656b:	85 c0                	test   eax,eax
c000656d:	0f 85 3b ff ff ff    	jne    c00064ae <f_mkdir+0xa1>
c0006573:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006577:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000657a:	75 74                	jne    c00065f0 <f_mkdir+0x1e3>
c000657c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000657f:	ba 00 00 21 50       	mov    edx,0x50210000
c0006584:	83 c0 0c             	add    eax,0xc
c0006587:	e8 fb b4 ff ff       	call   c0001a87 <st_dword>
c000658c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006590:	89 f2                	mov    edx,esi
c0006592:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006595:	83 c0 34             	add    eax,0x34
c0006598:	e8 ea b4 ff ff       	call   c0001a87 <st_dword>
c000659d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a1:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065a5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065a8:	c1 e2 09             	shl    edx,0x9
c00065ab:	83 c0 38             	add    eax,0x38
c00065ae:	e8 d4 b4 ff ff       	call   c0001a87 <st_dword>
c00065b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065b7:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065bb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065be:	c1 e2 09             	shl    edx,0x9
c00065c1:	83 c0 28             	add    eax,0x28
c00065c4:	e8 be b4 ff ff       	call   c0001a87 <st_dword>
c00065c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065cd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00065d0:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00065d4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065d7:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00065db:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065df:	e8 8b d3 ff ff       	call   c000396f <store_xdir>
c00065e4:	89 c3                	mov    ebx,eax
c00065e6:	85 c0                	test   eax,eax
c00065e8:	0f 85 d4 fe ff ff    	jne    c00064c2 <f_mkdir+0xb5>
c00065ee:	eb 30                	jmp    c0006620 <f_mkdir+0x213>
c00065f0:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00065f4:	ba 00 00 21 50       	mov    edx,0x50210000
c00065f9:	83 c0 16             	add    eax,0x16
c00065fc:	e8 86 b4 ff ff       	call   c0001a87 <st_dword>
c0006601:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006605:	89 f1                	mov    ecx,esi
c0006607:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000660b:	e8 a5 e5 ff ff       	call   c0004bb5 <st_clust.isra.1>
c0006610:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006614:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006618:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000661c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006620:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006624:	e8 f1 dc ff ff       	call   c000431a <sync_fs>
c0006629:	89 c3                	mov    ebx,eax
c000662b:	e9 92 fe ff ff       	jmp    c00064c2 <f_mkdir+0xb5>
c0006630:	83 ec 80             	sub    esp,0xffffff80
c0006633:	89 d8                	mov    eax,ebx
c0006635:	5b                   	pop    ebx
c0006636:	5e                   	pop    esi
c0006637:	5f                   	pop    edi
c0006638:	c3                   	ret    

c0006639 <f_rename>:
c0006639:	55                   	push   ebp
c000663a:	57                   	push   edi
c000663b:	56                   	push   esi
c000663c:	53                   	push   ebx
c000663d:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006643:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000664a:	e8 a4 b9 ff ff       	call   c0001ff3 <get_ldnumber>
c000664f:	b9 02 00 00 00       	mov    ecx,0x2
c0006654:	8d 54 24 14          	lea    edx,[esp+0x14]
c0006658:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c000665f:	e8 3d be ff ff       	call   c00024a1 <mount_volume>
c0006664:	85 c0                	test   eax,eax
c0006666:	0f 85 b5 02 00 00    	jne    c0006921 <f_rename+0x2e8>
c000666c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006670:	83 ec 0c             	sub    esp,0xc
c0006673:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0006677:	68 60 04 00 00       	push   0x460
c000667c:	e8 c3 1b 00 00       	call   c0008244 <ff_memalloc>
c0006681:	83 c4 10             	add    esp,0x10
c0006684:	89 c3                	mov    ebx,eax
c0006686:	b8 11 00 00 00       	mov    eax,0x11
c000668b:	85 db                	test   ebx,ebx
c000668d:	0f 84 8e 02 00 00    	je     c0006921 <f_rename+0x2e8>
c0006693:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006697:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000669d:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00066a0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066a3:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00066aa:	8d 44 24 58          	lea    eax,[esp+0x58]
c00066ae:	e8 64 e5 ff ff       	call   c0004c17 <follow_path>
c00066b3:	85 c0                	test   eax,eax
c00066b5:	0f 85 52 02 00 00    	jne    c000690d <f_rename+0x2d4>
c00066bb:	b8 06 00 00 00       	mov    eax,0x6
c00066c0:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00066c8:	0f 85 3f 02 00 00    	jne    c000690d <f_rename+0x2d4>
c00066ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066d2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00066d5:	0f 85 05 01 00 00    	jne    c00067e0 <f_rename+0x1a7>
c00066db:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00066de:	b9 40 00 00 00       	mov    ecx,0x40
c00066e3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00066e7:	e8 a4 b3 ff ff       	call   c0001a90 <mem_cpy>
c00066ec:	b9 4c 00 00 00       	mov    ecx,0x4c
c00066f1:	8d 54 24 58          	lea    edx,[esp+0x58]
c00066f5:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00066fc:	e8 8f b3 ff ff       	call   c0001a90 <mem_cpy>
c0006701:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006708:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000670f:	e8 03 e5 ff ff       	call   c0004c17 <follow_path>
c0006714:	85 c0                	test   eax,eax
c0006716:	75 29                	jne    c0006741 <f_rename+0x108>
c0006718:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000671c:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006723:	74 0a                	je     c000672f <f_rename+0xf6>
c0006725:	b8 08 00 00 00       	mov    eax,0x8
c000672a:	e9 de 01 00 00       	jmp    c000690d <f_rename+0x2d4>
c000672f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006736:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000673d:	75 e6                	jne    c0006725 <f_rename+0xec>
c000673f:	eb 09                	jmp    c000674a <f_rename+0x111>
c0006741:	83 f8 04             	cmp    eax,0x4
c0006744:	0f 85 c3 01 00 00    	jne    c000690d <f_rename+0x2d4>
c000674a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006751:	e8 42 d9 ff ff       	call   c0004098 <dir_register>
c0006756:	85 c0                	test   eax,eax
c0006758:	0f 85 af 01 00 00    	jne    c000690d <f_rename+0x2d4>
c000675e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006762:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c0006765:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0006768:	89 c5                	mov    ebp,eax
c000676a:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c000676d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006771:	8d 46 24             	lea    eax,[esi+0x24]
c0006774:	e8 98 b2 ff ff       	call   c0001a11 <ld_word>
c0006779:	b9 40 00 00 00       	mov    ecx,0x40
c000677e:	89 c7                	mov    edi,eax
c0006780:	8d 54 24 18          	lea    edx,[esp+0x18]
c0006784:	89 f0                	mov    eax,esi
c0006786:	e8 05 b3 ff ff       	call   c0001a90 <mem_cpy>
c000678b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000678f:	89 e9                	mov    ecx,ebp
c0006791:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006794:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c0006797:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c000679b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000679f:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067a2:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00067a5:	0f b7 d7             	movzx  edx,di
c00067a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ab:	83 c0 24             	add    eax,0x24
c00067ae:	e8 d0 b2 ff ff       	call   c0001a83 <st_word>
c00067b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067b7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067ba:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00067bd:	a8 10                	test   al,0x10
c00067bf:	75 06                	jne    c00067c7 <f_rename+0x18e>
c00067c1:	83 c8 20             	or     eax,0x20
c00067c4:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00067c7:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067ce:	e8 9c d1 ff ff       	call   c000396f <store_xdir>
c00067d3:	85 c0                	test   eax,eax
c00067d5:	0f 84 1c 01 00 00    	je     c00068f7 <f_rename+0x2be>
c00067db:	e9 2d 01 00 00       	jmp    c000690d <f_rename+0x2d4>
c00067e0:	b9 20 00 00 00       	mov    ecx,0x20
c00067e5:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00067ec:	8d 44 24 18          	lea    eax,[esp+0x18]
c00067f0:	e8 9b b2 ff ff       	call   c0001a90 <mem_cpy>
c00067f5:	b9 4c 00 00 00       	mov    ecx,0x4c
c00067fa:	8d 54 24 58          	lea    edx,[esp+0x58]
c00067fe:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006805:	e8 86 b2 ff ff       	call   c0001a90 <mem_cpy>
c000680a:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006811:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006818:	e8 fa e3 ff ff       	call   c0004c17 <follow_path>
c000681d:	85 c0                	test   eax,eax
c000681f:	75 27                	jne    c0006848 <f_rename+0x20f>
c0006821:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006825:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000682c:	0f 85 f3 fe ff ff    	jne    c0006725 <f_rename+0xec>
c0006832:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006839:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006840:	0f 85 df fe ff ff    	jne    c0006725 <f_rename+0xec>
c0006846:	eb 09                	jmp    c0006851 <f_rename+0x218>
c0006848:	83 f8 04             	cmp    eax,0x4
c000684b:	0f 85 bc 00 00 00    	jne    c000690d <f_rename+0x2d4>
c0006851:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006858:	e8 3b d8 ff ff       	call   c0004098 <dir_register>
c000685d:	85 c0                	test   eax,eax
c000685f:	0f 85 a8 00 00 00    	jne    c000690d <f_rename+0x2d4>
c0006865:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c000686c:	b9 13 00 00 00       	mov    ecx,0x13
c0006871:	8d 46 0d             	lea    eax,[esi+0xd]
c0006874:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006878:	e8 13 b2 ff ff       	call   c0001a90 <mem_cpy>
c000687d:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006881:	a8 10                	test   al,0x10
c0006883:	75 03                	jne    c0006888 <f_rename+0x24f>
c0006885:	83 c8 20             	or     eax,0x20
c0006888:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c000688b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000688f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006893:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006897:	74 5e                	je     c00068f7 <f_rename+0x2be>
c0006899:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c00068a0:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c00068a4:	74 51                	je     c00068f7 <f_rename+0x2be>
c00068a6:	89 f2                	mov    edx,esi
c00068a8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00068ac:	8a 07                	mov    al,BYTE PTR [edi]
c00068ae:	e8 d9 e2 ff ff       	call   c0004b8c <ld_clust.isra.0>
c00068b3:	89 c2                	mov    edx,eax
c00068b5:	89 f8                	mov    eax,edi
c00068b7:	e8 ee b3 ff ff       	call   c0001caa <clst2sect>
c00068bc:	89 c6                	mov    esi,eax
c00068be:	89 d1                	mov    ecx,edx
c00068c0:	b8 02 00 00 00       	mov    eax,0x2
c00068c5:	09 f2                	or     edx,esi
c00068c7:	74 44                	je     c000690d <f_rename+0x2d4>
c00068c9:	89 f2                	mov    edx,esi
c00068cb:	89 f8                	mov    eax,edi
c00068cd:	e8 1d b9 ff ff       	call   c00021ef <move_window>
c00068d2:	85 c0                	test   eax,eax
c00068d4:	75 37                	jne    c000690d <f_rename+0x2d4>
c00068d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068da:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c00068de:	75 17                	jne    c00068f7 <f_rename+0x2be>
c00068e0:	8d 50 74             	lea    edx,[eax+0x74]
c00068e3:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c00068ea:	e8 c6 e2 ff ff       	call   c0004bb5 <st_clust.isra.1>
c00068ef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068f3:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00068f7:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068fb:	e8 f4 d0 ff ff       	call   c00039f4 <dir_remove>
c0006900:	85 c0                	test   eax,eax
c0006902:	75 09                	jne    c000690d <f_rename+0x2d4>
c0006904:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006908:	e8 0d da ff ff       	call   c000431a <sync_fs>
c000690d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006911:	83 ec 0c             	sub    esp,0xc
c0006914:	53                   	push   ebx
c0006915:	e8 40 19 00 00       	call   c000825a <ff_memfree>
c000691a:	83 c4 10             	add    esp,0x10
c000691d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006921:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006927:	5b                   	pop    ebx
c0006928:	5e                   	pop    esi
c0006929:	5f                   	pop    edi
c000692a:	5d                   	pop    ebp
c000692b:	c3                   	ret    

c000692c <f_chmod>:
c000692c:	57                   	push   edi
c000692d:	b9 02 00 00 00       	mov    ecx,0x2
c0006932:	56                   	push   esi
c0006933:	53                   	push   ebx
c0006934:	83 ec 60             	sub    esp,0x60
c0006937:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000693b:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000693f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006943:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006947:	e8 55 bb ff ff       	call   c00024a1 <mount_volume>
c000694c:	85 c0                	test   eax,eax
c000694e:	0f 85 af 00 00 00    	jne    c0006a03 <f_chmod+0xd7>
c0006954:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006958:	83 ec 0c             	sub    esp,0xc
c000695b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000695f:	68 60 04 00 00       	push   0x460
c0006964:	e8 db 18 00 00       	call   c0008244 <ff_memalloc>
c0006969:	83 c4 10             	add    esp,0x10
c000696c:	89 c6                	mov    esi,eax
c000696e:	b8 11 00 00 00       	mov    eax,0x11
c0006973:	85 f6                	test   esi,esi
c0006975:	0f 84 88 00 00 00    	je     c0006a03 <f_chmod+0xd7>
c000697b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000697f:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006985:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006988:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000698b:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c000698f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006993:	e8 7f e2 ff ff       	call   c0004c17 <follow_path>
c0006998:	85 c0                	test   eax,eax
c000699a:	75 53                	jne    c00069ef <f_chmod+0xc3>
c000699c:	b8 06 00 00 00       	mov    eax,0x6
c00069a1:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c00069a6:	75 47                	jne    c00069ef <f_chmod+0xc3>
c00069a8:	89 f9                	mov    ecx,edi
c00069aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069ae:	83 e1 27             	and    ecx,0x27
c00069b1:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00069b4:	75 1d                	jne    c00069d3 <f_chmod+0xa7>
c00069b6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069b9:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069bc:	21 cb                	and    ebx,ecx
c00069be:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069c1:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c00069c4:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069c8:	e8 a2 cf ff ff       	call   c000396f <store_xdir>
c00069cd:	85 c0                	test   eax,eax
c00069cf:	75 1e                	jne    c00069ef <f_chmod+0xc3>
c00069d1:	eb 13                	jmp    c00069e6 <f_chmod+0xba>
c00069d3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00069d7:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c00069da:	21 cb                	and    ebx,ecx
c00069dc:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c00069df:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c00069e2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00069e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069ea:	e8 2b d9 ff ff       	call   c000431a <sync_fs>
c00069ef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00069f3:	83 ec 0c             	sub    esp,0xc
c00069f6:	56                   	push   esi
c00069f7:	e8 5e 18 00 00       	call   c000825a <ff_memfree>
c00069fc:	83 c4 10             	add    esp,0x10
c00069ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a03:	83 c4 60             	add    esp,0x60
c0006a06:	5b                   	pop    ebx
c0006a07:	5e                   	pop    esi
c0006a08:	5f                   	pop    edi
c0006a09:	c3                   	ret    

c0006a0a <f_utime>:
c0006a0a:	56                   	push   esi
c0006a0b:	b9 02 00 00 00       	mov    ecx,0x2
c0006a10:	53                   	push   ebx
c0006a11:	83 ec 64             	sub    esp,0x64
c0006a14:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006a18:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a1c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a20:	e8 7c ba ff ff       	call   c00024a1 <mount_volume>
c0006a25:	85 c0                	test   eax,eax
c0006a27:	0f 85 b5 00 00 00    	jne    c0006ae2 <f_utime+0xd8>
c0006a2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a31:	83 ec 0c             	sub    esp,0xc
c0006a34:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006a38:	68 60 04 00 00       	push   0x460
c0006a3d:	e8 02 18 00 00       	call   c0008244 <ff_memalloc>
c0006a42:	83 c4 10             	add    esp,0x10
c0006a45:	89 c3                	mov    ebx,eax
c0006a47:	b8 11 00 00 00       	mov    eax,0x11
c0006a4c:	85 db                	test   ebx,ebx
c0006a4e:	0f 84 8e 00 00 00    	je     c0006ae2 <f_utime+0xd8>
c0006a54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a58:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006a5e:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006a61:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006a64:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006a68:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a6c:	e8 a6 e1 ff ff       	call   c0004c17 <follow_path>
c0006a71:	85 c0                	test   eax,eax
c0006a73:	75 59                	jne    c0006ace <f_utime+0xc4>
c0006a75:	b8 06 00 00 00       	mov    eax,0x6
c0006a7a:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006a7f:	75 4d                	jne    c0006ace <f_utime+0xc4>
c0006a81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a85:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006a89:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006a8d:	c1 e2 10             	shl    edx,0x10
c0006a90:	09 ca                	or     edx,ecx
c0006a92:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006a95:	75 1a                	jne    c0006ab1 <f_utime+0xa7>
c0006a97:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a9a:	83 c0 0c             	add    eax,0xc
c0006a9d:	e8 e5 af ff ff       	call   c0001a87 <st_dword>
c0006aa2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006aa6:	e8 c4 ce ff ff       	call   c000396f <store_xdir>
c0006aab:	85 c0                	test   eax,eax
c0006aad:	75 1f                	jne    c0006ace <f_utime+0xc4>
c0006aaf:	eb 14                	jmp    c0006ac5 <f_utime+0xbb>
c0006ab1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ab5:	83 c0 16             	add    eax,0x16
c0006ab8:	e8 ca af ff ff       	call   c0001a87 <st_dword>
c0006abd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ac1:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ac5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ac9:	e8 4c d8 ff ff       	call   c000431a <sync_fs>
c0006ace:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ad2:	83 ec 0c             	sub    esp,0xc
c0006ad5:	53                   	push   ebx
c0006ad6:	e8 7f 17 00 00       	call   c000825a <ff_memfree>
c0006adb:	83 c4 10             	add    esp,0x10
c0006ade:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006ae2:	83 c4 64             	add    esp,0x64
c0006ae5:	5b                   	pop    ebx
c0006ae6:	5e                   	pop    esi
c0006ae7:	c3                   	ret    

c0006ae8 <f_getlabel>:
c0006ae8:	55                   	push   ebp
c0006ae9:	31 c9                	xor    ecx,ecx
c0006aeb:	57                   	push   edi
c0006aec:	56                   	push   esi
c0006aed:	53                   	push   ebx
c0006aee:	83 ec 6c             	sub    esp,0x6c
c0006af1:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006af5:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006afc:	e8 a0 b9 ff ff       	call   c00024a1 <mount_volume>
c0006b01:	89 c6                	mov    esi,eax
c0006b03:	85 c0                	test   eax,eax
c0006b05:	0f 85 c1 01 00 00    	jne    c0006ccc <f_getlabel+0x1e4>
c0006b0b:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006b13:	0f 84 5f 01 00 00    	je     c0006c78 <f_getlabel+0x190>
c0006b19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b1d:	31 d2                	xor    edx,edx
c0006b1f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006b23:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006b2b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b2f:	e8 39 c4 ff ff       	call   c0002f6d <dir_sdi>
c0006b34:	85 c0                	test   eax,eax
c0006b36:	0f 85 2d 01 00 00    	jne    c0006c69 <f_getlabel+0x181>
c0006b3c:	ba 01 00 00 00       	mov    edx,0x1
c0006b41:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b45:	e8 33 cc ff ff       	call   c000377d <dir_read>
c0006b4a:	85 c0                	test   eax,eax
c0006b4c:	0f 85 17 01 00 00    	jne    c0006c69 <f_getlabel+0x181>
c0006b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b56:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006b59:	74 09                	je     c0006b64 <f_getlabel+0x7c>
c0006b5b:	31 db                	xor    ebx,ebx
c0006b5d:	31 c9                	xor    ecx,ecx
c0006b5f:	e9 c8 00 00 00       	jmp    c0006c2c <f_getlabel+0x144>
c0006b64:	31 ed                	xor    ebp,ebp
c0006b66:	31 db                	xor    ebx,ebx
c0006b68:	31 ff                	xor    edi,edi
c0006b6a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006b6e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006b72:	39 fa                	cmp    edx,edi
c0006b74:	76 4b                	jbe    c0006bc1 <f_getlabel+0xd9>
c0006b76:	47                   	inc    edi
c0006b77:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006b7a:	01 d0                	add    eax,edx
c0006b7c:	e8 90 ae ff ff       	call   c0001a11 <ld_word>
c0006b81:	66 85 ed             	test   bp,bp
c0006b84:	75 0d                	jne    c0006b93 <f_getlabel+0xab>
c0006b86:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006b8c:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006b91:	76 28                	jbe    c0006bbb <f_getlabel+0xd3>
c0006b93:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006b9a:	89 e9                	mov    ecx,ebp
c0006b9c:	01 da                	add    edx,ebx
c0006b9e:	c1 e1 10             	shl    ecx,0x10
c0006ba1:	0f b7 c0             	movzx  eax,ax
c0006ba4:	09 c8                	or     eax,ecx
c0006ba6:	b9 04 00 00 00       	mov    ecx,0x4
c0006bab:	e8 01 b0 ff ff       	call   c0001bb1 <put_utf>
c0006bb0:	84 c0                	test   al,al
c0006bb2:	74 0b                	je     c0006bbf <f_getlabel+0xd7>
c0006bb4:	0f b6 c0             	movzx  eax,al
c0006bb7:	01 c3                	add    ebx,eax
c0006bb9:	31 c0                	xor    eax,eax
c0006bbb:	89 c5                	mov    ebp,eax
c0006bbd:	eb ab                	jmp    c0006b6a <f_getlabel+0x82>
c0006bbf:	31 db                	xor    ebx,ebx
c0006bc1:	66 85 ed             	test   bp,bp
c0006bc4:	74 02                	je     c0006bc8 <f_getlabel+0xe0>
c0006bc6:	31 db                	xor    ebx,ebx
c0006bc8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006bcf:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006bd3:	e9 a0 00 00 00       	jmp    c0006c78 <f_getlabel+0x190>
c0006bd8:	83 ff 0b             	cmp    edi,0xb
c0006bdb:	74 11                	je     c0006bee <f_getlabel+0x106>
c0006bdd:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006be2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006be6:	8d 79 02             	lea    edi,[ecx+0x2]
c0006be9:	c1 e0 08             	shl    eax,0x8
c0006bec:	09 c2                	or     edx,eax
c0006bee:	0f b7 d2             	movzx  edx,dx
c0006bf1:	50                   	push   eax
c0006bf2:	50                   	push   eax
c0006bf3:	68 b5 01 00 00       	push   0x1b5
c0006bf8:	52                   	push   edx
c0006bf9:	e8 03 17 00 00       	call   c0008301 <ff_oem2uni>
c0006bfe:	83 c4 10             	add    esp,0x10
c0006c01:	66 85 c0             	test   ax,ax
c0006c04:	74 46                	je     c0006c4c <f_getlabel+0x164>
c0006c06:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006c0d:	0f b7 c0             	movzx  eax,ax
c0006c10:	01 da                	add    edx,ebx
c0006c12:	b9 04 00 00 00       	mov    ecx,0x4
c0006c17:	e8 95 af ff ff       	call   c0001bb1 <put_utf>
c0006c1c:	84 c0                	test   al,al
c0006c1e:	74 2c                	je     c0006c4c <f_getlabel+0x164>
c0006c20:	0f b6 c0             	movzx  eax,al
c0006c23:	01 c3                	add    ebx,eax
c0006c25:	83 ff 0b             	cmp    edi,0xb
c0006c28:	74 24                	je     c0006c4e <f_getlabel+0x166>
c0006c2a:	89 f9                	mov    ecx,edi
c0006c2c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006c30:	8d 79 01             	lea    edi,[ecx+0x1]
c0006c33:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006c38:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006c3d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c41:	e8 9f ae ff ff       	call   c0001ae5 <dbc_1st>
c0006c46:	85 c0                	test   eax,eax
c0006c48:	74 a4                	je     c0006bee <f_getlabel+0x106>
c0006c4a:	eb 8c                	jmp    c0006bd8 <f_getlabel+0xf0>
c0006c4c:	31 db                	xor    ebx,ebx
c0006c4e:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006c55:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006c58:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006c5f:	74 17                	je     c0006c78 <f_getlabel+0x190>
c0006c61:	4b                   	dec    ebx
c0006c62:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006c65:	74 ee                	je     c0006c55 <f_getlabel+0x16d>
c0006c67:	eb 0f                	jmp    c0006c78 <f_getlabel+0x190>
c0006c69:	83 f8 04             	cmp    eax,0x4
c0006c6c:	75 5c                	jne    c0006cca <f_getlabel+0x1e2>
c0006c6e:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006c75:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006c78:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006c80:	74 4a                	je     c0006ccc <f_getlabel+0x1e4>
c0006c82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c86:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006c89:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006c8c:	e8 5e b5 ff ff       	call   c00021ef <move_window>
c0006c91:	89 c6                	mov    esi,eax
c0006c93:	85 c0                	test   eax,eax
c0006c95:	75 35                	jne    c0006ccc <f_getlabel+0x1e4>
c0006c97:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006c9b:	b8 43 00 00 00       	mov    eax,0x43
c0006ca0:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006ca2:	80 f9 03             	cmp    cl,0x3
c0006ca5:	74 0f                	je     c0006cb6 <f_getlabel+0x1ce>
c0006ca7:	31 c0                	xor    eax,eax
c0006ca9:	80 f9 04             	cmp    cl,0x4
c0006cac:	0f 94 c0             	sete   al
c0006caf:	48                   	dec    eax
c0006cb0:	83 e0 c3             	and    eax,0xffffffc3
c0006cb3:	83 c0 64             	add    eax,0x64
c0006cb6:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006cba:	e8 5f ad ff ff       	call   c0001a1e <ld_dword>
c0006cbf:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006cc6:	89 07                	mov    DWORD PTR [edi],eax
c0006cc8:	eb 02                	jmp    c0006ccc <f_getlabel+0x1e4>
c0006cca:	89 c6                	mov    esi,eax
c0006ccc:	83 c4 6c             	add    esp,0x6c
c0006ccf:	89 f0                	mov    eax,esi
c0006cd1:	5b                   	pop    ebx
c0006cd2:	5e                   	pop    esi
c0006cd3:	5f                   	pop    edi
c0006cd4:	5d                   	pop    ebp
c0006cd5:	c3                   	ret    

c0006cd6 <f_setlabel>:
c0006cd6:	56                   	push   esi
c0006cd7:	b9 02 00 00 00       	mov    ecx,0x2
c0006cdc:	53                   	push   ebx
c0006cdd:	83 ec 74             	sub    esp,0x74
c0006ce0:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006ce4:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006ceb:	e8 b1 b7 ff ff       	call   c00024a1 <mount_volume>
c0006cf0:	89 c6                	mov    esi,eax
c0006cf2:	85 c0                	test   eax,eax
c0006cf4:	0f 85 41 02 00 00    	jne    c0006f3b <f_setlabel+0x265>
c0006cfa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006cfe:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d01:	0f 85 8e 00 00 00    	jne    c0006d95 <f_setlabel+0xbf>
c0006d07:	b9 16 00 00 00       	mov    ecx,0x16
c0006d0c:	31 d2                	xor    edx,edx
c0006d0e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d12:	31 db                	xor    ebx,ebx
c0006d14:	e8 8c ad ff ff       	call   c0001aa5 <mem_set>
c0006d19:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d20:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d23:	0f 86 0a 01 00 00    	jbe    c0006e33 <f_setlabel+0x15d>
c0006d29:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d30:	e8 b6 ad ff ff       	call   c0001aeb <tchar2uni>
c0006d35:	89 c6                	mov    esi,eax
c0006d37:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d3c:	76 2a                	jbe    c0006d68 <f_setlabel+0x92>
c0006d3e:	83 f8 ff             	cmp    eax,0xffffffff
c0006d41:	74 05                	je     c0006d48 <f_setlabel+0x72>
c0006d43:	83 fb 09             	cmp    ebx,0x9
c0006d46:	76 0a                	jbe    c0006d52 <f_setlabel+0x7c>
c0006d48:	be 06 00 00 00       	mov    esi,0x6
c0006d4d:	e9 e9 01 00 00       	jmp    c0006f3b <f_setlabel+0x265>
c0006d52:	89 c2                	mov    edx,eax
c0006d54:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d58:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d5b:	c1 ea 10             	shr    edx,0x10
c0006d5e:	01 c8                	add    eax,ecx
c0006d60:	43                   	inc    ebx
c0006d61:	e8 1d ad ff ff       	call   c0001a83 <st_word>
c0006d66:	eb 04                	jmp    c0006d6c <f_setlabel+0x96>
c0006d68:	85 c0                	test   eax,eax
c0006d6a:	74 dc                	je     c0006d48 <f_setlabel+0x72>
c0006d6c:	89 f2                	mov    edx,esi
c0006d6e:	b8 b7 7d 02 c0       	mov    eax,0xc0027db7
c0006d73:	e8 5b ad ff ff       	call   c0001ad3 <chk_chr>
c0006d78:	85 c0                	test   eax,eax
c0006d7a:	75 cc                	jne    c0006d48 <f_setlabel+0x72>
c0006d7c:	83 fb 0a             	cmp    ebx,0xa
c0006d7f:	77 c7                	ja     c0006d48 <f_setlabel+0x72>
c0006d81:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d84:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d88:	0f b7 d6             	movzx  edx,si
c0006d8b:	01 c8                	add    eax,ecx
c0006d8d:	43                   	inc    ebx
c0006d8e:	e8 f0 ac ff ff       	call   c0001a83 <st_word>
c0006d93:	eb 84                	jmp    c0006d19 <f_setlabel+0x43>
c0006d95:	b9 0b 00 00 00       	mov    ecx,0xb
c0006d9a:	ba 20 00 00 00       	mov    edx,0x20
c0006d9f:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006da3:	31 db                	xor    ebx,ebx
c0006da5:	e8 fb ac ff ff       	call   c0001aa5 <mem_set>
c0006daa:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006db1:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006db4:	76 60                	jbe    c0006e16 <f_setlabel+0x140>
c0006db6:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006dbd:	e8 29 ad ff ff       	call   c0001aeb <tchar2uni>
c0006dc2:	3d ff ff 00 00       	cmp    eax,0xffff
c0006dc7:	0f 87 7b ff ff ff    	ja     c0006d48 <f_setlabel+0x72>
c0006dcd:	83 ec 0c             	sub    esp,0xc
c0006dd0:	50                   	push   eax
c0006dd1:	e8 97 15 00 00       	call   c000836d <ff_wtoupper>
c0006dd6:	5a                   	pop    edx
c0006dd7:	59                   	pop    ecx
c0006dd8:	68 b5 01 00 00       	push   0x1b5
c0006ddd:	50                   	push   eax
c0006dde:	e8 8e 14 00 00       	call   c0008271 <ff_uni2oem>
c0006de3:	83 c4 10             	add    esp,0x10
c0006de6:	89 c6                	mov    esi,eax
c0006de8:	66 85 c0             	test   ax,ax
c0006deb:	0f 84 57 ff ff ff    	je     c0006d48 <f_setlabel+0x72>
c0006df1:	0f b7 d0             	movzx  edx,ax
c0006df4:	b8 b0 7d 02 c0       	mov    eax,0xc0027db0
c0006df9:	e8 d5 ac ff ff       	call   c0001ad3 <chk_chr>
c0006dfe:	85 c0                	test   eax,eax
c0006e00:	0f 85 42 ff ff ff    	jne    c0006d48 <f_setlabel+0x72>
c0006e06:	66 81 fe ff 00       	cmp    si,0xff
c0006e0b:	0f 87 14 01 00 00    	ja     c0006f25 <f_setlabel+0x24f>
c0006e11:	e9 fa 00 00 00       	jmp    c0006f10 <f_setlabel+0x23a>
c0006e16:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006e1b:	0f 84 27 ff ff ff    	je     c0006d48 <f_setlabel+0x72>
c0006e21:	85 db                	test   ebx,ebx
c0006e23:	74 0e                	je     c0006e33 <f_setlabel+0x15d>
c0006e25:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006e28:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006e2d:	75 04                	jne    c0006e33 <f_setlabel+0x15d>
c0006e2f:	89 c3                	mov    ebx,eax
c0006e31:	eb ee                	jmp    c0006e21 <f_setlabel+0x14b>
c0006e33:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e37:	31 d2                	xor    edx,edx
c0006e39:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006e3d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006e45:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e49:	e8 1f c1 ff ff       	call   c0002f6d <dir_sdi>
c0006e4e:	89 c6                	mov    esi,eax
c0006e50:	85 c0                	test   eax,eax
c0006e52:	0f 85 e3 00 00 00    	jne    c0006f3b <f_setlabel+0x265>
c0006e58:	ba 01 00 00 00       	mov    edx,0x1
c0006e5d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e61:	e8 17 c9 ff ff       	call   c000377d <dir_read>
c0006e66:	85 c0                	test   eax,eax
c0006e68:	75 21                	jne    c0006e8b <f_setlabel+0x1b5>
c0006e6a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006e6e:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e72:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006e75:	74 5d                	je     c0006ed4 <f_setlabel+0x1fe>
c0006e77:	85 db                	test   ebx,ebx
c0006e79:	74 0b                	je     c0006e86 <f_setlabel+0x1b0>
c0006e7b:	b9 0b 00 00 00       	mov    ecx,0xb
c0006e80:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006e84:	eb 70                	jmp    c0006ef6 <f_setlabel+0x220>
c0006e86:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006e89:	eb 70                	jmp    c0006efb <f_setlabel+0x225>
c0006e8b:	83 f8 04             	cmp    eax,0x4
c0006e8e:	75 7c                	jne    c0006f0c <f_setlabel+0x236>
c0006e90:	85 db                	test   ebx,ebx
c0006e92:	0f 84 a3 00 00 00    	je     c0006f3b <f_setlabel+0x265>
c0006e98:	ba 01 00 00 00       	mov    edx,0x1
c0006e9d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006ea1:	e8 51 ca ff ff       	call   c00038f7 <dir_alloc>
c0006ea6:	89 c6                	mov    esi,eax
c0006ea8:	85 c0                	test   eax,eax
c0006eaa:	0f 85 8b 00 00 00    	jne    c0006f3b <f_setlabel+0x265>
c0006eb0:	31 d2                	xor    edx,edx
c0006eb2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006eb6:	b9 20 00 00 00       	mov    ecx,0x20
c0006ebb:	e8 e5 ab ff ff       	call   c0001aa5 <mem_set>
c0006ec0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006ec4:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ec7:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ecb:	75 18                	jne    c0006ee5 <f_setlabel+0x20f>
c0006ecd:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006ed0:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ed4:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006ed7:	b9 16 00 00 00       	mov    ecx,0x16
c0006edc:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ee0:	83 c0 02             	add    eax,0x2
c0006ee3:	eb 9b                	jmp    c0006e80 <f_setlabel+0x1aa>
c0006ee5:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006ee9:	b9 0b 00 00 00       	mov    ecx,0xb
c0006eee:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006ef2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ef6:	e8 95 ab ff ff       	call   c0001a90 <mem_cpy>
c0006efb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006eff:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006f03:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f07:	e8 0e d4 ff ff       	call   c000431a <sync_fs>
c0006f0c:	89 c6                	mov    esi,eax
c0006f0e:	eb 2b                	jmp    c0006f3b <f_setlabel+0x265>
c0006f10:	83 fb 0a             	cmp    ebx,0xa
c0006f13:	0f 87 2f fe ff ff    	ja     c0006d48 <f_setlabel+0x72>
c0006f19:	89 f0                	mov    eax,esi
c0006f1b:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f1f:	43                   	inc    ebx
c0006f20:	e9 85 fe ff ff       	jmp    c0006daa <f_setlabel+0xd4>
c0006f25:	83 fb 09             	cmp    ebx,0x9
c0006f28:	0f 87 1a fe ff ff    	ja     c0006d48 <f_setlabel+0x72>
c0006f2e:	89 f0                	mov    eax,esi
c0006f30:	66 c1 e8 08          	shr    ax,0x8
c0006f34:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f38:	43                   	inc    ebx
c0006f39:	eb de                	jmp    c0006f19 <f_setlabel+0x243>
c0006f3b:	89 f0                	mov    eax,esi
c0006f3d:	83 c4 74             	add    esp,0x74
c0006f40:	5b                   	pop    ebx
c0006f41:	5e                   	pop    esi
c0006f42:	c3                   	ret    

c0006f43 <f_forward>:
c0006f43:	55                   	push   ebp
c0006f44:	57                   	push   edi
c0006f45:	56                   	push   esi
c0006f46:	53                   	push   ebx
c0006f47:	83 ec 2c             	sub    esp,0x2c
c0006f4a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006f4e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0006f52:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0006f58:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006f5c:	89 d8                	mov    eax,ebx
c0006f5e:	e8 b1 b1 ff ff       	call   c0002114 <validate>
c0006f63:	89 c5                	mov    ebp,eax
c0006f65:	85 c0                	test   eax,eax
c0006f67:	0f 85 aa 01 00 00    	jne    c0007117 <f_forward+0x1d4>
c0006f6d:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006f71:	85 ed                	test   ebp,ebp
c0006f73:	0f 85 9e 01 00 00    	jne    c0007117 <f_forward+0x1d4>
c0006f79:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0006f7d:	0f 84 8f 01 00 00    	je     c0007112 <f_forward+0x1cf>
c0006f83:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0006f86:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0006f89:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0006f8c:	bf 00 00 00 00       	mov    edi,0x0
c0006f91:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0006f94:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0006f98:	89 d1                	mov    ecx,edx
c0006f9a:	19 f9                	sbb    ecx,edi
c0006f9c:	0f 83 cf 00 00 00    	jae    c0007071 <f_forward+0x12e>
c0006fa2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0006fa6:	e9 c6 00 00 00       	jmp    c0007071 <f_forward+0x12e>
c0006fab:	50                   	push   eax
c0006fac:	50                   	push   eax
c0006fad:	6a 00                	push   0x0
c0006faf:	6a 00                	push   0x0
c0006fb1:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006fb5:	83 c4 10             	add    esp,0x10
c0006fb8:	85 c0                	test   eax,eax
c0006fba:	0f 84 57 01 00 00    	je     c0007117 <f_forward+0x1d4>
c0006fc0:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006fc3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006fc7:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006fca:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0006fce:	89 d7                	mov    edi,edx
c0006fd0:	8d 4e ff             	lea    ecx,[esi-0x1]
c0006fd3:	89 c6                	mov    esi,eax
c0006fd5:	0f ac fe 09          	shrd   esi,edi,0x9
c0006fd9:	21 ce                	and    esi,ecx
c0006fdb:	89 c1                	mov    ecx,eax
c0006fdd:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0006fe3:	0f 84 98 00 00 00    	je     c0007081 <f_forward+0x13e>
c0006fe9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006fed:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006ff0:	89 c8                	mov    eax,ecx
c0006ff2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006ff6:	e8 af ac ff ff       	call   c0001caa <clst2sect>
c0006ffb:	89 d7                	mov    edi,edx
c0006ffd:	09 c7                	or     edi,eax
c0006fff:	0f 84 9e 00 00 00    	je     c00070a3 <f_forward+0x160>
c0007005:	31 ff                	xor    edi,edi
c0007007:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000700a:	01 c6                	add    esi,eax
c000700c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007010:	11 d7                	adc    edi,edx
c0007012:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007015:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007018:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000701c:	39 fa                	cmp    edx,edi
c000701e:	0f 85 a2 00 00 00    	jne    c00070c6 <f_forward+0x183>
c0007024:	39 f0                	cmp    eax,esi
c0007026:	0f 85 9a 00 00 00    	jne    c00070c6 <f_forward+0x183>
c000702c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000702f:	ba 00 02 00 00       	mov    edx,0x200
c0007034:	25 ff 01 00 00       	and    eax,0x1ff
c0007039:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000703d:	29 c2                	sub    edx,eax
c000703f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007042:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007045:	39 d1                	cmp    ecx,edx
c0007047:	76 02                	jbe    c000704b <f_forward+0x108>
c0007049:	89 d1                	mov    ecx,edx
c000704b:	8d 73 50             	lea    esi,[ebx+0x50]
c000704e:	52                   	push   edx
c000704f:	01 c6                	add    esi,eax
c0007051:	52                   	push   edx
c0007052:	51                   	push   ecx
c0007053:	56                   	push   esi
c0007054:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007058:	83 c4 10             	add    esp,0x10
c000705b:	85 c0                	test   eax,eax
c000705d:	74 44                	je     c00070a3 <f_forward+0x160>
c000705f:	31 ff                	xor    edi,edi
c0007061:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c0007064:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0007067:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c000706b:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c000706f:	01 07                	add    DWORD PTR [edi],eax
c0007071:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0007076:	0f 85 2f ff ff ff    	jne    c0006fab <f_forward+0x68>
c000707c:	e9 96 00 00 00       	jmp    c0007117 <f_forward+0x1d4>
c0007081:	85 f6                	test   esi,esi
c0007083:	0f 85 60 ff ff ff    	jne    c0006fe9 <f_forward+0xa6>
c0007089:	89 d7                	mov    edi,edx
c000708b:	09 c7                	or     edi,eax
c000708d:	75 05                	jne    c0007094 <f_forward+0x151>
c000708f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007092:	eb 0a                	jmp    c000709e <f_forward+0x15b>
c0007094:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007097:	89 d8                	mov    eax,ebx
c0007099:	e8 d9 bc ff ff       	call   c0002d77 <get_fat>
c000709e:	83 f8 01             	cmp    eax,0x1
c00070a1:	77 0b                	ja     c00070ae <f_forward+0x16b>
c00070a3:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00070a7:	bd 02 00 00 00       	mov    ebp,0x2
c00070ac:	eb 69                	jmp    c0007117 <f_forward+0x1d4>
c00070ae:	83 f8 ff             	cmp    eax,0xffffffff
c00070b1:	75 0b                	jne    c00070be <f_forward+0x17b>
c00070b3:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00070b7:	bd 01 00 00 00       	mov    ebp,0x1
c00070bc:	eb 59                	jmp    c0007117 <f_forward+0x1d4>
c00070be:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00070c1:	e9 23 ff ff ff       	jmp    c0006fe9 <f_forward+0xa6>
c00070c6:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00070ca:	79 20                	jns    c00070ec <f_forward+0x1a9>
c00070cc:	83 ec 0c             	sub    esp,0xc
c00070cf:	6a 01                	push   0x1
c00070d1:	52                   	push   edx
c00070d2:	50                   	push   eax
c00070d3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00070d7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00070db:	50                   	push   eax
c00070dc:	e8 fb a8 ff ff       	call   c00019dc <disk_write>
c00070e1:	83 c4 20             	add    esp,0x20
c00070e4:	85 c0                	test   eax,eax
c00070e6:	75 cb                	jne    c00070b3 <f_forward+0x170>
c00070e8:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00070ec:	83 ec 0c             	sub    esp,0xc
c00070ef:	6a 01                	push   0x1
c00070f1:	57                   	push   edi
c00070f2:	56                   	push   esi
c00070f3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00070f7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00070fb:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00070ff:	50                   	push   eax
c0007100:	e8 c1 a8 ff ff       	call   c00019c6 <disk_read>
c0007105:	83 c4 20             	add    esp,0x20
c0007108:	85 c0                	test   eax,eax
c000710a:	0f 84 1c ff ff ff    	je     c000702c <f_forward+0xe9>
c0007110:	eb a1                	jmp    c00070b3 <f_forward+0x170>
c0007112:	bd 07 00 00 00       	mov    ebp,0x7
c0007117:	83 c4 2c             	add    esp,0x2c
c000711a:	89 e8                	mov    eax,ebp
c000711c:	5b                   	pop    ebx
c000711d:	5e                   	pop    esi
c000711e:	5f                   	pop    edi
c000711f:	5d                   	pop    ebp
c0007120:	c3                   	ret    

c0007121 <f_mkfs>:
c0007121:	55                   	push   ebp
c0007122:	57                   	push   edi
c0007123:	56                   	push   esi
c0007124:	53                   	push   ebx
c0007125:	bb 0b 00 00 00       	mov    ebx,0xb
c000712a:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007130:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007137:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000713e:	e8 b0 ae ff ff       	call   c0001ff3 <get_ldnumber>
c0007143:	85 c0                	test   eax,eax
c0007145:	0f 88 ec 10 00 00    	js     c0008237 <f_mkfs+0x1116>
c000714b:	8b 14 85 80 c9 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3680]
c0007152:	85 d2                	test   edx,edx
c0007154:	74 03                	je     c0007159 <f_mkfs+0x38>
c0007156:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0007159:	85 f6                	test   esi,esi
c000715b:	75 05                	jne    c0007162 <f_mkfs+0x41>
c000715d:	be a0 7d 02 c0       	mov    esi,0xc0027da0
c0007162:	83 ec 0c             	sub    esp,0xc
c0007165:	0f b6 c0             	movzx  eax,al
c0007168:	bb 03 00 00 00       	mov    ebx,0x3
c000716d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007171:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007175:	e8 49 a8 ff ff       	call   c00019c3 <disk_initialize>
c000717a:	83 c4 10             	add    esp,0x10
c000717d:	a8 01                	test   al,0x1
c000717f:	0f 85 b2 10 00 00    	jne    c0008237 <f_mkfs+0x1116>
c0007185:	bb 0a 00 00 00       	mov    ebx,0xa
c000718a:	a8 04                	test   al,0x4
c000718c:	0f 85 a5 10 00 00    	jne    c0008237 <f_mkfs+0x1116>
c0007192:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007195:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007199:	85 c0                	test   eax,eax
c000719b:	75 20                	jne    c00071bd <f_mkfs+0x9c>
c000719d:	51                   	push   ecx
c000719e:	8d 44 24 78          	lea    eax,[esp+0x78]
c00071a2:	50                   	push   eax
c00071a3:	6a 03                	push   0x3
c00071a5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071a9:	e8 44 a8 ff ff       	call   c00019f2 <disk_ioctl>
c00071ae:	83 c4 10             	add    esp,0x10
c00071b1:	85 c0                	test   eax,eax
c00071b3:	74 08                	je     c00071bd <f_mkfs+0x9c>
c00071b5:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071bd:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00071c1:	8d 42 ff             	lea    eax,[edx-0x1]
c00071c4:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00071c9:	77 04                	ja     c00071cf <f_mkfs+0xae>
c00071cb:	85 c2                	test   edx,eax
c00071cd:	74 08                	je     c00071d7 <f_mkfs+0xb6>
c00071cf:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071d7:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00071da:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00071de:	48                   	dec    eax
c00071df:	3c 01                	cmp    al,0x1
c00071e1:	76 05                	jbe    c00071e8 <f_mkfs+0xc7>
c00071e3:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c00071e8:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c00071eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00071ef:	48                   	dec    eax
c00071f0:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00071f5:	77 07                	ja     c00071fe <f_mkfs+0xdd>
c00071f7:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c00071fc:	74 08                	je     c0007206 <f_mkfs+0xe5>
c00071fe:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007206:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007209:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000720f:	77 07                	ja     c0007218 <f_mkfs+0xf7>
c0007211:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007214:	85 d8                	test   eax,ebx
c0007216:	74 02                	je     c000721a <f_mkfs+0xf9>
c0007218:	31 db                	xor    ebx,ebx
c000721a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007225:	77 0a                	ja     c0007231 <f_mkfs+0x110>
c0007227:	bb 11 00 00 00       	mov    ebx,0x11
c000722c:	e9 06 10 00 00       	jmp    c0008237 <f_mkfs+0x1116>
c0007231:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007238:	8b 36                	mov    esi,DWORD PTR [esi]
c000723a:	85 ed                	test   ebp,ebp
c000723c:	75 1e                	jne    c000725c <f_mkfs+0x13b>
c000723e:	83 ec 0c             	sub    esp,0xc
c0007241:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007248:	25 00 fe ff ff       	and    eax,0xfffffe00
c000724d:	50                   	push   eax
c000724e:	e8 f1 0f 00 00       	call   c0008244 <ff_memalloc>
c0007253:	83 c4 10             	add    esp,0x10
c0007256:	89 c5                	mov    ebp,eax
c0007258:	85 c0                	test   eax,eax
c000725a:	74 cb                	je     c0007227 <f_mkfs+0x106>
c000725c:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c0007264:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c000726c:	52                   	push   edx
c000726d:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007271:	50                   	push   eax
c0007272:	6a 01                	push   0x1
c0007274:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007278:	e8 75 a7 ff ff       	call   c00019f2 <disk_ioctl>
c000727d:	83 c4 10             	add    esp,0x10
c0007280:	85 c0                	test   eax,eax
c0007282:	0f 85 4a 0f 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007288:	89 f1                	mov    ecx,esi
c000728a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0007292:	83 e1 0f             	and    ecx,0xf
c0007295:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000729d:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00072a1:	83 e6 08             	and    esi,0x8
c00072a4:	75 56                	jne    c00072fc <f_mkfs+0x1db>
c00072a6:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00072aa:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00072ae:	83 ff 00             	cmp    edi,0x0
c00072b1:	76 20                	jbe    c00072d3 <f_mkfs+0x1b2>
c00072b3:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00072b8:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00072c0:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00072c6:	83 d7 ff             	adc    edi,0xffffffff
c00072c9:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00072cd:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00072d1:	eb 21                	jmp    c00072f4 <f_mkfs+0x1d3>
c00072d3:	ba 3f 00 00 00       	mov    edx,0x3f
c00072d8:	39 f2                	cmp    edx,esi
c00072da:	19 f8                	sbb    eax,edi
c00072dc:	73 1e                	jae    c00072fc <f_mkfs+0x1db>
c00072de:	83 c6 c1             	add    esi,0xffffffc1
c00072e1:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00072e9:	83 d7 ff             	adc    edi,0xffffffff
c00072ec:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00072f0:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00072f4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00072fc:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007300:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007304:	89 04 24             	mov    DWORD PTR [esp],eax
c0007307:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000730b:	31 c0                	xor    eax,eax
c000730d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007312:	89 c7                	mov    edi,eax
c0007314:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007317:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000731b:	0f 83 c5 0a 00 00    	jae    c0007de6 <f_mkfs+0xcc5>
c0007321:	89 df                	mov    edi,ebx
c0007323:	c1 ef 09             	shr    edi,0x9
c0007326:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000732a:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007331:	c1 ef 09             	shr    edi,0x9
c0007334:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007339:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000733d:	74 29                	je     c0007368 <f_mkfs+0x247>
c000733f:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007345:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000734a:	0f 97 c2             	seta   dl
c000734d:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007350:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007354:	0f 92 c0             	setb   al
c0007357:	08 c2                	or     dl,al
c0007359:	75 5b                	jne    c00073b6 <f_mkfs+0x295>
c000735b:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c000735f:	83 e0 07             	and    eax,0x7
c0007362:	3c 04                	cmp    al,0x4
c0007364:	74 50                	je     c00073b6 <f_mkfs+0x295>
c0007366:	eb 1b                	jmp    c0007383 <f_mkfs+0x262>
c0007368:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000736d:	0f 87 73 0a 00 00    	ja     c0007de6 <f_mkfs+0xcc5>
c0007373:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007379:	76 08                	jbe    c0007383 <f_mkfs+0x262>
c000737b:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007383:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007387:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c000738b:	83 e0 01             	and    eax,0x1
c000738e:	80 e1 02             	and    cl,0x2
c0007391:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007395:	74 0d                	je     c00073a4 <f_mkfs+0x283>
c0007397:	84 c0                	test   al,al
c0007399:	0f 84 53 09 00 00    	je     c0007cf2 <f_mkfs+0xbd1>
c000739f:	e9 12 08 00 00       	jmp    c0007bb6 <f_mkfs+0xa95>
c00073a4:	bb 13 00 00 00       	mov    ebx,0x13
c00073a9:	84 c0                	test   al,al
c00073ab:	0f 85 05 08 00 00    	jne    c0007bb6 <f_mkfs+0xa95>
c00073b1:	e9 39 0e 00 00       	jmp    c00081ef <f_mkfs+0x10ce>
c00073b6:	31 c0                	xor    eax,eax
c00073b8:	ba ff 0f 00 00       	mov    edx,0xfff
c00073bd:	89 c7                	mov    edi,eax
c00073bf:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073c2:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00073c6:	0f 83 1a 0a 00 00    	jae    c0007de6 <f_mkfs+0xcc5>
c00073cc:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c00073d2:	77 39                	ja     c000740d <f_mkfs+0x2ec>
c00073d4:	ba ff ff 07 00       	mov    edx,0x7ffff
c00073d9:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00073e1:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073e4:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00073e8:	73 08                	jae    c00073f2 <f_mkfs+0x2d1>
c00073ea:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c00073f2:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c00073f7:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00073fa:	b8 00 00 00 00       	mov    eax,0x0
c00073ff:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007403:	73 08                	jae    c000740d <f_mkfs+0x2ec>
c0007405:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000740d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007411:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007415:	83 c0 20             	add    eax,0x20
c0007418:	83 d2 00             	adc    edx,0x0
c000741b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000741f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007423:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007427:	31 d2                	xor    edx,edx
c0007429:	31 ff                	xor    edi,edi
c000742b:	52                   	push   edx
c000742c:	89 fb                	mov    ebx,edi
c000742e:	50                   	push   eax
c000742f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007433:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007437:	e8 f0 df 01 00       	call   c002542c <__udivdi3>
c000743c:	83 c4 10             	add    esp,0x10
c000743f:	c1 e0 02             	shl    eax,0x2
c0007442:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007446:	05 07 02 00 00       	add    eax,0x207
c000744b:	89 f1                	mov    ecx,esi
c000744d:	c1 e8 09             	shr    eax,0x9
c0007450:	83 c1 ff             	add    ecx,0xffffffff
c0007453:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0007457:	83 d3 ff             	adc    ebx,0xffffffff
c000745a:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000745e:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c0007462:	31 d2                	xor    edx,edx
c0007464:	01 c8                	add    eax,ecx
c0007466:	11 da                	adc    edx,ebx
c0007468:	89 c1                	mov    ecx,eax
c000746a:	f7 de                	neg    esi
c000746c:	89 d0                	mov    eax,edx
c000746e:	83 d7 00             	adc    edi,0x0
c0007471:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007475:	f7 df                	neg    edi
c0007477:	21 f1                	and    ecx,esi
c0007479:	21 f8                	and    eax,edi
c000747b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000747f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007483:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007487:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000748b:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c000748f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007492:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007496:	0f ac d0 01          	shrd   eax,edx,0x1
c000749a:	89 df                	mov    edi,ebx
c000749c:	d1 ea                	shr    edx,1
c000749e:	39 c1                	cmp    ecx,eax
c00074a0:	19 d7                	sbb    edi,edx
c00074a2:	0f 83 3e 09 00 00    	jae    c0007de6 <f_mkfs+0xcc5>
c00074a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074ac:	31 d2                	xor    edx,edx
c00074ae:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00074b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00074b6:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00074ba:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00074bd:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00074c1:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00074c5:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00074c9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00074cd:	83 f8 0f             	cmp    eax,0xf
c00074d0:	0f 86 10 09 00 00    	jbe    c0007de6 <f_mkfs+0xcc5>
c00074d6:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c00074de:	0f 87 02 09 00 00    	ja     c0007de6 <f_mkfs+0xcc5>
c00074e4:	31 d2                	xor    edx,edx
c00074e6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00074ea:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00074f2:	83 c0 07             	add    eax,0x7
c00074f5:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c00074fd:	c1 e8 03             	shr    eax,0x3
c0007500:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007507:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000750b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000750f:	c1 e0 09             	shl    eax,0x9
c0007512:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007516:	48                   	dec    eax
c0007517:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000751b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000751f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007523:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007527:	31 d2                	xor    edx,edx
c0007529:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000752d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007534:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007538:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000753d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007541:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007545:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007549:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000754d:	31 ff                	xor    edi,edi
c000754f:	31 f6                	xor    esi,esi
c0007551:	31 db                	xor    ebx,ebx
c0007553:	85 ff                	test   edi,edi
c0007555:	74 05                	je     c000755c <f_mkfs+0x43b>
c0007557:	4f                   	dec    edi
c0007558:	74 44                	je     c000759e <f_mkfs+0x47d>
c000755a:	eb 4f                	jmp    c00075ab <f_mkfs+0x48a>
c000755c:	83 ec 0c             	sub    esp,0xc
c000755f:	0f b7 c3             	movzx  eax,bx
c0007562:	50                   	push   eax
c0007563:	e8 05 0e 00 00       	call   c000836d <ff_wtoupper>
c0007568:	83 c4 10             	add    esp,0x10
c000756b:	89 c1                	mov    ecx,eax
c000756d:	8d 53 01             	lea    edx,[ebx+0x1]
c0007570:	66 39 c3             	cmp    bx,ax
c0007573:	75 3e                	jne    c00075b3 <f_mkfs+0x492>
c0007575:	be 01 00 00 00       	mov    esi,0x1
c000757a:	89 df                	mov    edi,ebx
c000757c:	66 01 f7             	add    di,si
c000757f:	75 07                	jne    c0007588 <f_mkfs+0x467>
c0007581:	83 fe 7f             	cmp    esi,0x7f
c0007584:	77 31                	ja     c00075b7 <f_mkfs+0x496>
c0007586:	eb 16                	jmp    c000759e <f_mkfs+0x47d>
c0007588:	83 ec 0c             	sub    esp,0xc
c000758b:	0f b7 ff             	movzx  edi,di
c000758e:	57                   	push   edi
c000758f:	e8 d9 0d 00 00       	call   c000836d <ff_wtoupper>
c0007594:	83 c4 10             	add    esp,0x10
c0007597:	39 c7                	cmp    edi,eax
c0007599:	75 e6                	jne    c0007581 <f_mkfs+0x460>
c000759b:	46                   	inc    esi
c000759c:	eb dc                	jmp    c000757a <f_mkfs+0x459>
c000759e:	31 c0                	xor    eax,eax
c00075a0:	89 d9                	mov    ecx,ebx
c00075a2:	4e                   	dec    esi
c00075a3:	0f 95 c0             	setne  al
c00075a6:	43                   	inc    ebx
c00075a7:	89 c7                	mov    edi,eax
c00075a9:	eb 14                	jmp    c00075bf <f_mkfs+0x49e>
c00075ab:	89 f1                	mov    ecx,esi
c00075ad:	01 f3                	add    ebx,esi
c00075af:	31 ff                	xor    edi,edi
c00075b1:	eb 0c                	jmp    c00075bf <f_mkfs+0x49e>
c00075b3:	89 d3                	mov    ebx,edx
c00075b5:	eb 08                	jmp    c00075bf <f_mkfs+0x49e>
c00075b7:	bf 02 00 00 00       	mov    edi,0x2
c00075bc:	83 c9 ff             	or     ecx,0xffffffff
c00075bf:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00075c3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075c6:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00075ca:	0f b6 c1             	movzx  eax,cl
c00075cd:	e8 3a a9 ff ff       	call   c0001f0c <xsum32>
c00075d2:	66 c1 e9 08          	shr    cx,0x8
c00075d6:	89 c2                	mov    edx,eax
c00075d8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075db:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c00075df:	0f b7 c1             	movzx  eax,cx
c00075e2:	e8 25 a9 ff ff       	call   c0001f0c <xsum32>
c00075e7:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c00075ec:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00075f0:	66 85 db             	test   bx,bx
c00075f3:	74 1f                	je     c0007614 <f_mkfs+0x4f3>
c00075f5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075f8:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c00075ff:	83 c0 02             	add    eax,0x2
c0007602:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007608:	39 c2                	cmp    edx,eax
c000760a:	74 08                	je     c0007614 <f_mkfs+0x4f3>
c000760c:	89 04 24             	mov    DWORD PTR [esp],eax
c000760f:	e9 3f ff ff ff       	jmp    c0007553 <f_mkfs+0x432>
c0007614:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007617:	83 ec 0c             	sub    esp,0xc
c000761a:	05 01 02 00 00       	add    eax,0x201
c000761f:	c1 e8 09             	shr    eax,0x9
c0007622:	50                   	push   eax
c0007623:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007627:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000762b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000762f:	55                   	push   ebp
c0007630:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007634:	e8 a3 a3 ff ff       	call   c00019dc <disk_write>
c0007639:	83 c4 20             	add    esp,0x20
c000763c:	85 c0                	test   eax,eax
c000763e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007641:	0f 85 8b 0b 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007647:	89 d0                	mov    eax,edx
c0007649:	31 d2                	xor    edx,edx
c000764b:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c000764f:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007653:	66 85 db             	test   bx,bx
c0007656:	74 04                	je     c000765c <f_mkfs+0x53b>
c0007658:	31 c0                	xor    eax,eax
c000765a:	eb b0                	jmp    c000760c <f_mkfs+0x4eb>
c000765c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007660:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0007664:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c0007668:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c000766e:	31 d2                	xor    edx,edx
c0007670:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c000767b:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000767f:	c1 eb 09             	shr    ebx,0x9
c0007682:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007689:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000768d:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007691:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007695:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007699:	8d 70 01             	lea    esi,[eax+0x1]
c000769c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076a0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00076a4:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00076ab:	31 d2                	xor    edx,edx
c00076ad:	25 00 fe ff ff       	and    eax,0xfffffe00
c00076b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00076b5:	89 c1                	mov    ecx,eax
c00076b7:	89 e8                	mov    eax,ebp
c00076b9:	e8 e7 a3 ff ff       	call   c0001aa5 <mem_set>
c00076be:	31 c0                	xor    eax,eax
c00076c0:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076c3:	76 10                	jbe    c00076d5 <f_mkfs+0x5b4>
c00076c5:	83 fe 07             	cmp    esi,0x7
c00076c8:	76 0b                	jbe    c00076d5 <f_mkfs+0x5b4>
c00076ca:	40                   	inc    eax
c00076cb:	83 ee 08             	sub    esi,0x8
c00076ce:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c00076d3:	eb eb                	jmp    c00076c0 <f_mkfs+0x59f>
c00076d5:	b2 01                	mov    dl,0x1
c00076d7:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c00076db:	85 f6                	test   esi,esi
c00076dd:	74 0c                	je     c00076eb <f_mkfs+0x5ca>
c00076df:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076e2:	76 07                	jbe    c00076eb <f_mkfs+0x5ca>
c00076e4:	08 11                	or     BYTE PTR [ecx],dl
c00076e6:	4e                   	dec    esi
c00076e7:	d1 e2                	shl    edx,1
c00076e9:	eb f0                	jmp    c00076db <f_mkfs+0x5ba>
c00076eb:	89 df                	mov    edi,ebx
c00076ed:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00076f1:	76 04                	jbe    c00076f7 <f_mkfs+0x5d6>
c00076f3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00076f7:	83 ec 0c             	sub    esp,0xc
c00076fa:	57                   	push   edi
c00076fb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00076ff:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007703:	55                   	push   ebp
c0007704:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007708:	e8 cf a2 ff ff       	call   c00019dc <disk_write>
c000770d:	83 c4 20             	add    esp,0x20
c0007710:	85 c0                	test   eax,eax
c0007712:	0f 85 ba 0a 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007718:	31 d2                	xor    edx,edx
c000771a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000771e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007722:	29 fb                	sub    ebx,edi
c0007724:	0f 85 7a ff ff ff    	jne    c00076a4 <f_mkfs+0x583>
c000772a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000772e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007736:	31 f6                	xor    esi,esi
c0007738:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000773c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000773f:	31 d2                	xor    edx,edx
c0007741:	89 e8                	mov    eax,ebp
c0007743:	e8 5d a3 ff ff       	call   c0001aa5 <mem_set>
c0007748:	31 c9                	xor    ecx,ecx
c000774a:	85 db                	test   ebx,ebx
c000774c:	75 40                	jne    c000778e <f_mkfs+0x66d>
c000774e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007753:	89 e8                	mov    eax,ebp
c0007755:	bb 02 00 00 00       	mov    ebx,0x2
c000775a:	e8 28 a3 ff ff       	call   c0001a87 <st_dword>
c000775f:	8d 45 04             	lea    eax,[ebp+0x4]
c0007762:	83 ca ff             	or     edx,0xffffffff
c0007765:	e8 1d a3 ff ff       	call   c0001a87 <st_dword>
c000776a:	b9 08 00 00 00       	mov    ecx,0x8
c000776f:	eb 1d                	jmp    c000778e <f_mkfs+0x66d>
c0007771:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007774:	76 3b                	jbe    c00077b1 <f_mkfs+0x690>
c0007776:	43                   	inc    ebx
c0007777:	83 fe 01             	cmp    esi,0x1
c000777a:	89 da                	mov    edx,ebx
c000777c:	77 03                	ja     c0007781 <f_mkfs+0x660>
c000777e:	83 ca ff             	or     edx,0xffffffff
c0007781:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007785:	4e                   	dec    esi
c0007786:	e8 fc a2 ff ff       	call   c0001a87 <st_dword>
c000778b:	83 c1 04             	add    ecx,0x4
c000778e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007792:	85 f6                	test   esi,esi
c0007794:	75 db                	jne    c0007771 <f_mkfs+0x650>
c0007796:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c000779b:	77 14                	ja     c00077b1 <f_mkfs+0x690>
c000779d:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00077a1:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00077a8:	85 f6                	test   esi,esi
c00077aa:	74 05                	je     c00077b1 <f_mkfs+0x690>
c00077ac:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00077af:	77 dd                	ja     c000778e <f_mkfs+0x66d>
c00077b1:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00077b5:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00077b9:	39 cf                	cmp    edi,ecx
c00077bb:	76 02                	jbe    c00077bf <f_mkfs+0x69e>
c00077bd:	89 cf                	mov    edi,ecx
c00077bf:	83 ec 0c             	sub    esp,0xc
c00077c2:	57                   	push   edi
c00077c3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00077c7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00077cb:	55                   	push   ebp
c00077cc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00077d0:	e8 07 a2 ff ff       	call   c00019dc <disk_write>
c00077d5:	83 c4 20             	add    esp,0x20
c00077d8:	85 c0                	test   eax,eax
c00077da:	0f 85 f2 09 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c00077e0:	31 d2                	xor    edx,edx
c00077e2:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c00077e6:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c00077ea:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c00077ee:	0f 85 48 ff ff ff    	jne    c000773c <f_mkfs+0x61b>
c00077f4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00077f7:	31 d2                	xor    edx,edx
c00077f9:	89 e8                	mov    eax,ebp
c00077fb:	31 ff                	xor    edi,edi
c00077fd:	e8 a3 a2 ff ff       	call   c0001aa5 <mem_set>
c0007802:	8d 45 34             	lea    eax,[ebp+0x34]
c0007805:	ba 02 00 00 00       	mov    edx,0x2
c000780a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c000780e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007812:	e8 70 a2 ff ff       	call   c0001a87 <st_dword>
c0007817:	8d 45 38             	lea    eax,[ebp+0x38]
c000781a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c000781e:	e8 64 a2 ff ff       	call   c0001a87 <st_dword>
c0007823:	8d 45 44             	lea    eax,[ebp+0x44]
c0007826:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000782a:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c000782e:	e8 54 a2 ff ff       	call   c0001a87 <st_dword>
c0007833:	8d 45 54             	lea    eax,[ebp+0x54]
c0007836:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000783a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000783e:	83 c2 02             	add    edx,0x2
c0007841:	e8 41 a2 ff ff       	call   c0001a87 <st_dword>
c0007846:	8d 45 58             	lea    eax,[ebp+0x58]
c0007849:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c000784d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007851:	e8 31 a2 ff ff       	call   c0001a87 <st_dword>
c0007856:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000785a:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000785f:	89 c6                	mov    esi,eax
c0007861:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007865:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007869:	89 04 24             	mov    DWORD PTR [esp],eax
c000786c:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007870:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007873:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007877:	39 cb                	cmp    ebx,ecx
c0007879:	76 02                	jbe    c000787d <f_mkfs+0x75c>
c000787b:	89 cb                	mov    ebx,ecx
c000787d:	83 ec 0c             	sub    esp,0xc
c0007880:	53                   	push   ebx
c0007881:	57                   	push   edi
c0007882:	56                   	push   esi
c0007883:	55                   	push   ebp
c0007884:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007888:	e8 4f a1 ff ff       	call   c00019dc <disk_write>
c000788d:	83 c4 20             	add    esp,0x20
c0007890:	85 c0                	test   eax,eax
c0007892:	0f 85 3a 09 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007898:	31 d2                	xor    edx,edx
c000789a:	b9 00 02 00 00       	mov    ecx,0x200
c000789f:	89 e8                	mov    eax,ebp
c00078a1:	e8 ff a1 ff ff       	call   c0001aa5 <mem_set>
c00078a6:	31 d2                	xor    edx,edx
c00078a8:	01 de                	add    esi,ebx
c00078aa:	11 d7                	adc    edi,edx
c00078ac:	29 1c 24             	sub    DWORD PTR [esp],ebx
c00078af:	75 bf                	jne    c0007870 <f_mkfs+0x74f>
c00078b1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00078b5:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00078b9:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c00078c1:	b9 00 02 00 00       	mov    ecx,0x200
c00078c6:	31 d2                	xor    edx,edx
c00078c8:	89 e8                	mov    eax,ebp
c00078ca:	e8 d6 a1 ff ff       	call   c0001aa5 <mem_set>
c00078cf:	b9 0b 00 00 00       	mov    ecx,0xb
c00078d4:	ba 80 7e 02 c0       	mov    edx,0xc0027e80
c00078d9:	89 e8                	mov    eax,ebp
c00078db:	e8 b0 a1 ff ff       	call   c0001a90 <mem_cpy>
c00078e0:	8d 45 40             	lea    eax,[ebp+0x40]
c00078e3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00078e7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00078eb:	e8 9a a1 ff ff       	call   c0001a8a <st_qword>
c00078f0:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c00078f4:	8d 45 48             	lea    eax,[ebp+0x48]
c00078f7:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00078fb:	e8 8a a1 ff ff       	call   c0001a8a <st_qword>
c0007900:	8d 45 50             	lea    eax,[ebp+0x50]
c0007903:	ba 20 00 00 00       	mov    edx,0x20
c0007908:	e8 7a a1 ff ff       	call   c0001a87 <st_dword>
c000790d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007911:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007915:	e8 6d a1 ff ff       	call   c0001a87 <st_dword>
c000791a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000791e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007922:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007926:	e8 5c a1 ff ff       	call   c0001a87 <st_dword>
c000792b:	8d 45 5c             	lea    eax,[ebp+0x5c]
c000792e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007932:	e8 50 a1 ff ff       	call   c0001a87 <st_dword>
c0007937:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000793b:	8d 50 02             	lea    edx,[eax+0x2]
c000793e:	8d 45 60             	lea    eax,[ebp+0x60]
c0007941:	e8 41 a1 ff ff       	call   c0001a87 <st_dword>
c0007946:	8d 45 64             	lea    eax,[ebp+0x64]
c0007949:	ba 00 00 21 50       	mov    edx,0x50210000
c000794e:	e8 34 a1 ff ff       	call   c0001a87 <st_dword>
c0007953:	8d 45 68             	lea    eax,[ebp+0x68]
c0007956:	ba 00 01 00 00       	mov    edx,0x100
c000795b:	e8 23 a1 ff ff       	call   c0001a83 <st_word>
c0007960:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007964:	b8 0a 00 00 00       	mov    eax,0xa
c0007969:	48                   	dec    eax
c000796a:	74 05                	je     c0007971 <f_mkfs+0x850>
c000796c:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c000796f:	eb f8                	jmp    c0007969 <f_mkfs+0x848>
c0007971:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007975:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007979:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000797d:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007981:	74 05                	je     c0007988 <f_mkfs+0x867>
c0007983:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007986:	eb f5                	jmp    c000797d <f_mkfs+0x85c>
c0007988:	8d 45 78             	lea    eax,[ebp+0x78]
c000798b:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007990:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007996:	31 db                	xor    ebx,ebx
c0007998:	e8 e6 a0 ff ff       	call   c0001a83 <st_word>
c000799d:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c00079a3:	ba 55 aa 00 00       	mov    edx,0xaa55
c00079a8:	89 04 24             	mov    DWORD PTR [esp],eax
c00079ab:	e8 d3 a0 ff ff       	call   c0001a83 <st_word>
c00079b0:	31 c9                	xor    ecx,ecx
c00079b2:	8d 41 96             	lea    eax,[ecx-0x6a]
c00079b5:	83 f8 01             	cmp    eax,0x1
c00079b8:	76 13                	jbe    c00079cd <f_mkfs+0x8ac>
c00079ba:	83 f9 70             	cmp    ecx,0x70
c00079bd:	74 0e                	je     c00079cd <f_mkfs+0x8ac>
c00079bf:	89 da                	mov    edx,ebx
c00079c1:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c00079c6:	e8 41 a5 ff ff       	call   c0001f0c <xsum32>
c00079cb:	89 c3                	mov    ebx,eax
c00079cd:	41                   	inc    ecx
c00079ce:	81 f9 00 02 00 00    	cmp    ecx,0x200
c00079d4:	75 dc                	jne    c00079b2 <f_mkfs+0x891>
c00079d6:	89 f0                	mov    eax,esi
c00079d8:	89 fa                	mov    edx,edi
c00079da:	83 c0 01             	add    eax,0x1
c00079dd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00079e1:	83 d2 00             	adc    edx,0x0
c00079e4:	83 ec 0c             	sub    esp,0xc
c00079e7:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00079eb:	6a 01                	push   0x1
c00079ed:	57                   	push   edi
c00079ee:	56                   	push   esi
c00079ef:	55                   	push   ebp
c00079f0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079f4:	e8 e3 9f ff ff       	call   c00019dc <disk_write>
c00079f9:	83 c4 20             	add    esp,0x20
c00079fc:	85 c0                	test   eax,eax
c00079fe:	0f 85 ce 07 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007a04:	31 d2                	xor    edx,edx
c0007a06:	b9 00 02 00 00       	mov    ecx,0x200
c0007a0b:	89 e8                	mov    eax,ebp
c0007a0d:	e8 93 a0 ff ff       	call   c0001aa5 <mem_set>
c0007a12:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007a17:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a1a:	e8 64 a0 ff ff       	call   c0001a83 <st_word>
c0007a1f:	89 f0                	mov    eax,esi
c0007a21:	89 fa                	mov    edx,edi
c0007a23:	83 c0 09             	add    eax,0x9
c0007a26:	83 d2 00             	adc    edx,0x0
c0007a29:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a2c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007a30:	31 c9                	xor    ecx,ecx
c0007a32:	41                   	inc    ecx
c0007a33:	89 da                	mov    edx,ebx
c0007a35:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007a3a:	e8 cd a4 ff ff       	call   c0001f0c <xsum32>
c0007a3f:	89 c3                	mov    ebx,eax
c0007a41:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a47:	75 e9                	jne    c0007a32 <f_mkfs+0x911>
c0007a49:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007a4d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007a51:	83 c0 01             	add    eax,0x1
c0007a54:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007a58:	83 d2 00             	adc    edx,0x0
c0007a5b:	83 ec 0c             	sub    esp,0xc
c0007a5e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007a62:	6a 01                	push   0x1
c0007a64:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a68:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a6c:	55                   	push   ebp
c0007a6d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a71:	e8 66 9f ff ff       	call   c00019dc <disk_write>
c0007a76:	83 c4 20             	add    esp,0x20
c0007a79:	85 c0                	test   eax,eax
c0007a7b:	0f 85 51 07 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007a81:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007a85:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007a89:	75 09                	jne    c0007a94 <f_mkfs+0x973>
c0007a8b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a8e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007a92:	74 12                	je     c0007aa6 <f_mkfs+0x985>
c0007a94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007a98:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007a9c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007aa0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007aa4:	eb 8a                	jmp    c0007a30 <f_mkfs+0x90f>
c0007aa6:	31 d2                	xor    edx,edx
c0007aa8:	b9 00 02 00 00       	mov    ecx,0x200
c0007aad:	89 e8                	mov    eax,ebp
c0007aaf:	e8 f1 9f ff ff       	call   c0001aa5 <mem_set>
c0007ab4:	83 c6 0b             	add    esi,0xb
c0007ab7:	83 d7 00             	adc    edi,0x0
c0007aba:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007abe:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007ac2:	31 c9                	xor    ecx,ecx
c0007ac4:	41                   	inc    ecx
c0007ac5:	89 da                	mov    edx,ebx
c0007ac7:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007acc:	e8 3b a4 ff ff       	call   c0001f0c <xsum32>
c0007ad1:	89 c3                	mov    ebx,eax
c0007ad3:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007ad9:	75 e9                	jne    c0007ac4 <f_mkfs+0x9a3>
c0007adb:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007ade:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007ae2:	83 c6 01             	add    esi,0x1
c0007ae5:	83 d7 00             	adc    edi,0x0
c0007ae8:	83 ec 0c             	sub    esp,0xc
c0007aeb:	6a 01                	push   0x1
c0007aed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007af1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007af5:	55                   	push   ebp
c0007af6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007afa:	e8 dd 9e ff ff       	call   c00019dc <disk_write>
c0007aff:	83 c4 20             	add    esp,0x20
c0007b02:	85 c0                	test   eax,eax
c0007b04:	0f 85 c8 06 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007b0a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007b0e:	75 06                	jne    c0007b16 <f_mkfs+0x9f5>
c0007b10:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007b14:	74 09                	je     c0007b1f <f_mkfs+0x9fe>
c0007b16:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b19:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007b1d:	eb a3                	jmp    c0007ac2 <f_mkfs+0x9a1>
c0007b1f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007b23:	89 da                	mov    edx,ebx
c0007b25:	01 e8                	add    eax,ebp
c0007b27:	e8 5b 9f ff ff       	call   c0001a87 <st_dword>
c0007b2c:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007b31:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007b39:	75 e4                	jne    c0007b1f <f_mkfs+0x9fe>
c0007b3b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007b3e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007b42:	83 c6 02             	add    esi,0x2
c0007b45:	83 d7 00             	adc    edi,0x0
c0007b48:	83 ec 0c             	sub    esp,0xc
c0007b4b:	6a 01                	push   0x1
c0007b4d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b51:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b55:	55                   	push   ebp
c0007b56:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b5a:	e8 7d 9e ff ff       	call   c00019dc <disk_write>
c0007b5f:	83 c4 20             	add    esp,0x20
c0007b62:	85 c0                	test   eax,eax
c0007b64:	0f 85 68 06 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007b6a:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007b6f:	74 0d                	je     c0007b7e <f_mkfs+0xa5d>
c0007b71:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007b79:	e9 43 fd ff ff       	jmp    c00078c1 <f_mkfs+0x7a0>
c0007b7e:	b1 07                	mov    cl,0x7
c0007b80:	e9 e3 05 00 00       	jmp    c0008168 <f_mkfs+0x1047>
c0007b85:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007b8a:	0f 85 4f 02 00 00    	jne    c0007ddf <f_mkfs+0xcbe>
c0007b90:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007b95:	0f 86 22 02 00 00    	jbe    c0007dbd <f_mkfs+0xc9c>
c0007b9b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007ba0:	0f 85 81 06 00 00    	jne    c0008227 <f_mkfs+0x1106>
c0007ba6:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007ba9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007bad:	83 f8 40             	cmp    eax,0x40
c0007bb0:	0f 87 51 06 00 00    	ja     c0008207 <f_mkfs+0x10e6>
c0007bb6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007bba:	85 ff                	test   edi,edi
c0007bbc:	75 1c                	jne    c0007bda <f_mkfs+0xab9>
c0007bbe:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007bc1:	ba 80 7d 02 c0       	mov    edx,0xc0027d80
c0007bc6:	c1 e9 0c             	shr    ecx,0xc
c0007bc9:	bf 01 00 00 00       	mov    edi,0x1
c0007bce:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007bd1:	66 85 c0             	test   ax,ax
c0007bd4:	0f 85 95 01 00 00    	jne    c0007d6f <f_mkfs+0xc4e>
c0007bda:	31 d2                	xor    edx,edx
c0007bdc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007bdf:	f7 f7                	div    edi
c0007be1:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007be6:	0f 86 95 01 00 00    	jbe    c0007d81 <f_mkfs+0xc60>
c0007bec:	83 c0 02             	add    eax,0x2
c0007bef:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007bf4:	01 c0                	add    eax,eax
c0007bf6:	05 ff 01 00 00       	add    eax,0x1ff
c0007bfb:	be 01 00 00 00       	mov    esi,0x1
c0007c00:	c1 e8 09             	shr    eax,0x9
c0007c03:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007c07:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c0b:	c1 e0 05             	shl    eax,0x5
c0007c0e:	c1 e8 09             	shr    eax,0x9
c0007c11:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007c15:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007c1a:	31 d2                	xor    edx,edx
c0007c1c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007c20:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007c24:	89 f0                	mov    eax,esi
c0007c26:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007c2a:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007c2e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007c32:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007c36:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007c3a:	31 d2                	xor    edx,edx
c0007c3c:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007c41:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007c45:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007c49:	31 db                	xor    ebx,ebx
c0007c4b:	01 c8                	add    eax,ecx
c0007c4d:	11 da                	adc    edx,ebx
c0007c4f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007c53:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007c57:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007c5b:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007c5f:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007c63:	f7 da                	neg    edx
c0007c65:	21 d1                	and    ecx,edx
c0007c67:	29 d9                	sub    ecx,ebx
c0007c69:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007c6e:	0f 85 20 01 00 00    	jne    c0007d94 <f_mkfs+0xc73>
c0007c74:	31 db                	xor    ebx,ebx
c0007c76:	01 ce                	add    esi,ecx
c0007c78:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007c7c:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007c80:	31 d2                	xor    edx,edx
c0007c82:	89 f8                	mov    eax,edi
c0007c84:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007c88:	c1 e0 04             	shl    eax,0x4
c0007c8b:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007c8f:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007c93:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007c97:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007c9b:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007c9e:	19 d3                	sbb    ebx,edx
c0007ca0:	0f 82 40 01 00 00    	jb     c0007de6 <f_mkfs+0xcc5>
c0007ca6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ca9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007cad:	89 c8                	mov    eax,ecx
c0007caf:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007cb4:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007cb8:	29 f0                	sub    eax,esi
c0007cba:	29 d0                	sub    eax,edx
c0007cbc:	31 d2                	xor    edx,edx
c0007cbe:	f7 f7                	div    edi
c0007cc0:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007cc5:	89 c3                	mov    ebx,eax
c0007cc7:	0f 85 b8 fe ff ff    	jne    c0007b85 <f_mkfs+0xa64>
c0007ccd:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007cd2:	0f 87 1d 01 00 00    	ja     c0007df5 <f_mkfs+0xcd4>
c0007cd8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007cdd:	0f 85 03 01 00 00    	jne    c0007de6 <f_mkfs+0xcc5>
c0007ce3:	83 ff 01             	cmp    edi,0x1
c0007ce6:	0f 86 fa 00 00 00    	jbe    c0007de6 <f_mkfs+0xcc5>
c0007cec:	d1 ef                	shr    edi,1
c0007cee:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007cf2:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007cf6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007cf9:	85 db                	test   ebx,ebx
c0007cfb:	75 2d                	jne    c0007d2a <f_mkfs+0xc09>
c0007cfd:	89 cb                	mov    ebx,ecx
c0007cff:	ba 90 7d 02 c0       	mov    edx,0xc0027d90
c0007d04:	c1 eb 11             	shr    ebx,0x11
c0007d07:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007d0f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007d12:	66 85 c0             	test   ax,ax
c0007d15:	74 11                	je     c0007d28 <f_mkfs+0xc07>
c0007d17:	83 c2 02             	add    edx,0x2
c0007d1a:	39 d8                	cmp    eax,ebx
c0007d1c:	77 0a                	ja     c0007d28 <f_mkfs+0xc07>
c0007d1e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007d22:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007d26:	eb e7                	jmp    c0007d0f <f_mkfs+0xbee>
c0007d28:	31 db                	xor    ebx,ebx
c0007d2a:	31 d2                	xor    edx,edx
c0007d2c:	89 c8                	mov    eax,ecx
c0007d2e:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007d32:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007d39:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007d3e:	c1 ea 09             	shr    edx,0x9
c0007d41:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007d46:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d4a:	0f 87 96 00 00 00    	ja     c0007de6 <f_mkfs+0xcc5>
c0007d50:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d54:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007d5c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007d60:	be 20 00 00 00       	mov    esi,0x20
c0007d65:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007d6a:	e9 a6 fe ff ff       	jmp    c0007c15 <f_mkfs+0xaf4>
c0007d6f:	83 c2 02             	add    edx,0x2
c0007d72:	39 c8                	cmp    eax,ecx
c0007d74:	0f 87 60 fe ff ff    	ja     c0007bda <f_mkfs+0xab9>
c0007d7a:	01 ff                	add    edi,edi
c0007d7c:	e9 4d fe ff ff       	jmp    c0007bce <f_mkfs+0xaad>
c0007d81:	8d 04 40             	lea    eax,[eax+eax*2]
c0007d84:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007d89:	40                   	inc    eax
c0007d8a:	d1 e8                	shr    eax,1
c0007d8c:	83 c0 03             	add    eax,0x3
c0007d8f:	e9 62 fe ff ff       	jmp    c0007bf6 <f_mkfs+0xad5>
c0007d94:	31 d2                	xor    edx,edx
c0007d96:	89 c8                	mov    eax,ecx
c0007d98:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007d9c:	85 d2                	test   edx,edx
c0007d9e:	74 0c                	je     c0007dac <f_mkfs+0xc8b>
c0007da0:	49                   	dec    ecx
c0007da1:	46                   	inc    esi
c0007da2:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007da7:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007dac:	89 c8                	mov    eax,ecx
c0007dae:	31 d2                	xor    edx,edx
c0007db0:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007db4:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007db8:	e9 c3 fe ff ff       	jmp    c0007c80 <f_mkfs+0xb5f>
c0007dbd:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dc2:	77 31                	ja     c0007df5 <f_mkfs+0xcd4>
c0007dc4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007dc9:	75 1b                	jne    c0007de6 <f_mkfs+0xcc5>
c0007dcb:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007dce:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dd2:	3d 80 00 00 00       	cmp    eax,0x80
c0007dd7:	0f 86 d9 fd ff ff    	jbe    c0007bb6 <f_mkfs+0xa95>
c0007ddd:	eb 07                	jmp    c0007de6 <f_mkfs+0xcc5>
c0007ddf:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007de4:	76 0a                	jbe    c0007df0 <f_mkfs+0xccf>
c0007de6:	bb 0e 00 00 00       	mov    ebx,0xe
c0007deb:	e9 ff 03 00 00       	jmp    c00081ef <f_mkfs+0x10ce>
c0007df0:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007df5:	31 d2                	xor    edx,edx
c0007df7:	b9 00 02 00 00       	mov    ecx,0x200
c0007dfc:	89 e8                	mov    eax,ebp
c0007dfe:	e8 a2 9c ff ff       	call   c0001aa5 <mem_set>
c0007e03:	b9 0b 00 00 00       	mov    ecx,0xb
c0007e08:	ba a2 7e 02 c0       	mov    edx,0xc0027ea2
c0007e0d:	89 e8                	mov    eax,ebp
c0007e0f:	e8 7c 9c ff ff       	call   c0001a90 <mem_cpy>
c0007e14:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007e17:	ba 00 02 00 00       	mov    edx,0x200
c0007e1c:	e8 62 9c ff ff       	call   c0001a83 <st_word>
c0007e21:	89 f8                	mov    eax,edi
c0007e23:	0f b7 d6             	movzx  edx,si
c0007e26:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007e29:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007e2c:	e8 52 9c ff ff       	call   c0001a83 <st_word>
c0007e31:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0007e35:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e3a:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007e3d:	75 08                	jne    c0007e47 <f_mkfs+0xd26>
c0007e3f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007e47:	8d 45 11             	lea    eax,[ebp+0x11]
c0007e4a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007e4e:	e8 30 9c ff ff       	call   c0001a83 <st_word>
c0007e53:	b8 ff ff 00 00       	mov    eax,0xffff
c0007e58:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007e5c:	39 d0                	cmp    eax,edx
c0007e5e:	b8 00 00 00 00       	mov    eax,0x0
c0007e63:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0007e67:	72 0a                	jb     c0007e73 <f_mkfs+0xd52>
c0007e69:	8d 45 13             	lea    eax,[ebp+0x13]
c0007e6c:	e8 12 9c ff ff       	call   c0001a83 <st_word>
c0007e71:	eb 08                	jmp    c0007e7b <f_mkfs+0xd5a>
c0007e73:	8d 45 20             	lea    eax,[ebp+0x20]
c0007e76:	e8 0c 9c ff ff       	call   c0001a87 <st_dword>
c0007e7b:	8d 45 18             	lea    eax,[ebp+0x18]
c0007e7e:	ba 3f 00 00 00       	mov    edx,0x3f
c0007e83:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0007e87:	e8 f7 9b ff ff       	call   c0001a83 <st_word>
c0007e8c:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0007e8f:	ba ff 00 00 00       	mov    edx,0xff
c0007e94:	e8 ea 9b ff ff       	call   c0001a83 <st_word>
c0007e99:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0007e9c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007ea0:	e8 e2 9b ff ff       	call   c0001a87 <st_dword>
c0007ea5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007eaa:	75 57                	jne    c0007f03 <f_mkfs+0xde2>
c0007eac:	8d 45 43             	lea    eax,[ebp+0x43]
c0007eaf:	ba 00 00 21 50       	mov    edx,0x50210000
c0007eb4:	e8 ce 9b ff ff       	call   c0001a87 <st_dword>
c0007eb9:	8d 45 24             	lea    eax,[ebp+0x24]
c0007ebc:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ec0:	e8 c2 9b ff ff       	call   c0001a87 <st_dword>
c0007ec5:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0007ec8:	ba 02 00 00 00       	mov    edx,0x2
c0007ecd:	e8 b5 9b ff ff       	call   c0001a87 <st_dword>
c0007ed2:	8d 45 30             	lea    eax,[ebp+0x30]
c0007ed5:	ba 01 00 00 00       	mov    edx,0x1
c0007eda:	e8 a4 9b ff ff       	call   c0001a83 <st_word>
c0007edf:	8d 45 32             	lea    eax,[ebp+0x32]
c0007ee2:	ba 06 00 00 00       	mov    edx,0x6
c0007ee7:	e8 97 9b ff ff       	call   c0001a83 <st_word>
c0007eec:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0007ef0:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0007ef4:	8d 45 47             	lea    eax,[ebp+0x47]
c0007ef7:	b9 13 00 00 00       	mov    ecx,0x13
c0007efc:	ba ae 7e 02 c0       	mov    edx,0xc0027eae
c0007f01:	eb 2f                	jmp    c0007f32 <f_mkfs+0xe11>
c0007f03:	8d 45 27             	lea    eax,[ebp+0x27]
c0007f06:	ba 00 00 21 50       	mov    edx,0x50210000
c0007f0b:	e8 77 9b ff ff       	call   c0001a87 <st_dword>
c0007f10:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0007f15:	8d 45 16             	lea    eax,[ebp+0x16]
c0007f18:	e8 66 9b ff ff       	call   c0001a83 <st_word>
c0007f1d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0007f21:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0007f25:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0007f28:	b9 13 00 00 00       	mov    ecx,0x13
c0007f2d:	ba c2 7e 02 c0       	mov    edx,0xc0027ec2
c0007f32:	e8 59 9b ff ff       	call   c0001a90 <mem_cpy>
c0007f37:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0007f3d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007f42:	89 f0                	mov    eax,esi
c0007f44:	e8 3a 9b ff ff       	call   c0001a83 <st_word>
c0007f49:	83 ec 0c             	sub    esp,0xc
c0007f4c:	6a 01                	push   0x1
c0007f4e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f52:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f56:	55                   	push   ebp
c0007f57:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f5b:	e8 7c 9a ff ff       	call   c00019dc <disk_write>
c0007f60:	83 c4 20             	add    esp,0x20
c0007f63:	85 c0                	test   eax,eax
c0007f65:	0f 85 67 02 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007f6b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f70:	0f 85 b7 00 00 00    	jne    c000802d <f_mkfs+0xf0c>
c0007f76:	83 ec 0c             	sub    esp,0xc
c0007f79:	6a 01                	push   0x1
c0007f7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007f7f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f83:	83 c0 06             	add    eax,0x6
c0007f86:	83 d2 00             	adc    edx,0x0
c0007f89:	52                   	push   edx
c0007f8a:	50                   	push   eax
c0007f8b:	55                   	push   ebp
c0007f8c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f90:	e8 47 9a ff ff       	call   c00019dc <disk_write>
c0007f95:	83 c4 20             	add    esp,0x20
c0007f98:	b9 00 02 00 00       	mov    ecx,0x200
c0007f9d:	31 d2                	xor    edx,edx
c0007f9f:	89 e8                	mov    eax,ebp
c0007fa1:	e8 ff 9a ff ff       	call   c0001aa5 <mem_set>
c0007fa6:	ba 52 52 61 41       	mov    edx,0x41615252
c0007fab:	89 e8                	mov    eax,ebp
c0007fad:	e8 d5 9a ff ff       	call   c0001a87 <st_dword>
c0007fb2:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0007fb8:	ba 72 72 41 61       	mov    edx,0x61417272
c0007fbd:	e8 c5 9a ff ff       	call   c0001a87 <st_dword>
c0007fc2:	8d 53 ff             	lea    edx,[ebx-0x1]
c0007fc5:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0007fcb:	e8 b7 9a ff ff       	call   c0001a87 <st_dword>
c0007fd0:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0007fd6:	ba 02 00 00 00       	mov    edx,0x2
c0007fdb:	e8 a7 9a ff ff       	call   c0001a87 <st_dword>
c0007fe0:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007fe5:	89 f0                	mov    eax,esi
c0007fe7:	e8 97 9a ff ff       	call   c0001a83 <st_word>
c0007fec:	83 ec 0c             	sub    esp,0xc
c0007fef:	6a 01                	push   0x1
c0007ff1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ff5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007ff9:	83 c0 07             	add    eax,0x7
c0007ffc:	83 d2 00             	adc    edx,0x0
c0007fff:	52                   	push   edx
c0008000:	50                   	push   eax
c0008001:	55                   	push   ebp
c0008002:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008006:	e8 d1 99 ff ff       	call   c00019dc <disk_write>
c000800b:	83 c4 14             	add    esp,0x14
c000800e:	6a 01                	push   0x1
c0008010:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008014:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008018:	83 c0 01             	add    eax,0x1
c000801b:	83 d2 00             	adc    edx,0x0
c000801e:	52                   	push   edx
c000801f:	50                   	push   eax
c0008020:	55                   	push   ebp
c0008021:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008025:	e8 b2 99 ff ff       	call   c00019dc <disk_write>
c000802a:	83 c4 20             	add    esp,0x20
c000802d:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008034:	31 d2                	xor    edx,edx
c0008036:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000803c:	31 db                	xor    ebx,ebx
c000803e:	89 e8                	mov    eax,ebp
c0008040:	e8 60 9a ff ff       	call   c0001aa5 <mem_set>
c0008045:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000804a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008051:	0f 94 c3             	sete   bl
c0008054:	4b                   	dec    ebx
c0008055:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c000805b:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008061:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008066:	75 21                	jne    c0008089 <f_mkfs+0xf68>
c0008068:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c000806d:	89 e8                	mov    eax,ebp
c000806f:	e8 13 9a ff ff       	call   c0001a87 <st_dword>
c0008074:	8d 45 04             	lea    eax,[ebp+0x4]
c0008077:	83 ca ff             	or     edx,0xffffffff
c000807a:	e8 08 9a ff ff       	call   c0001a87 <st_dword>
c000807f:	8d 45 08             	lea    eax,[ebp+0x8]
c0008082:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008087:	eb 04                	jmp    c000808d <f_mkfs+0xf6c>
c0008089:	89 da                	mov    edx,ebx
c000808b:	89 e8                	mov    eax,ebp
c000808d:	e8 f5 99 ff ff       	call   c0001a87 <st_dword>
c0008092:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008096:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000809a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000809e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00080a2:	39 ce                	cmp    esi,ecx
c00080a4:	76 02                	jbe    c00080a8 <f_mkfs+0xf87>
c00080a6:	89 ce                	mov    esi,ecx
c00080a8:	83 ec 0c             	sub    esp,0xc
c00080ab:	56                   	push   esi
c00080ac:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080b0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080b4:	55                   	push   ebp
c00080b5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00080b9:	e8 1e 99 ff ff       	call   c00019dc <disk_write>
c00080be:	83 c4 20             	add    esp,0x20
c00080c1:	85 c0                	test   eax,eax
c00080c3:	0f 85 09 01 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c00080c9:	31 d2                	xor    edx,edx
c00080cb:	b9 00 02 00 00       	mov    ecx,0x200
c00080d0:	89 e8                	mov    eax,ebp
c00080d2:	e8 ce 99 ff ff       	call   c0001aa5 <mem_set>
c00080d7:	31 d2                	xor    edx,edx
c00080d9:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c00080dd:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00080e1:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00080e5:	75 b3                	jne    c000809a <f_mkfs+0xf79>
c00080e7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00080ea:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00080f1:	40                   	inc    eax
c00080f2:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c00080f6:	0f 87 65 ff ff ff    	ja     c0008061 <f_mkfs+0xf40>
c00080fc:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008101:	74 04                	je     c0008107 <f_mkfs+0xfe6>
c0008103:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008107:	89 fb                	mov    ebx,edi
c0008109:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000810d:	76 04                	jbe    c0008113 <f_mkfs+0xff2>
c000810f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008113:	83 ec 0c             	sub    esp,0xc
c0008116:	53                   	push   ebx
c0008117:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000811b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000811f:	55                   	push   ebp
c0008120:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008124:	e8 b3 98 ff ff       	call   c00019dc <disk_write>
c0008129:	83 c4 20             	add    esp,0x20
c000812c:	85 c0                	test   eax,eax
c000812e:	0f 85 9e 00 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0008134:	31 d2                	xor    edx,edx
c0008136:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000813a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000813e:	29 df                	sub    edi,ebx
c0008140:	75 c5                	jne    c0008107 <f_mkfs+0xfe6>
c0008142:	b1 0c                	mov    cl,0xc
c0008144:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008149:	74 1d                	je     c0008168 <f_mkfs+0x1047>
c000814b:	b8 ff ff 00 00       	mov    eax,0xffff
c0008150:	b1 06                	mov    cl,0x6
c0008152:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c0008156:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c000815a:	72 0c                	jb     c0008168 <f_mkfs+0x1047>
c000815c:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008161:	0f 94 c1             	sete   cl
c0008164:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c0008168:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c000816d:	75 4c                	jne    c00081bb <f_mkfs+0x109a>
c000816f:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0008173:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0008177:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000817e:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0008185:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008190:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c000819b:	0f b6 c9             	movzx  ecx,cl
c000819e:	83 ec 0c             	sub    esp,0xc
c00081a1:	55                   	push   ebp
c00081a2:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00081a9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00081ad:	e8 2f c2 ff ff       	call   c00043e1 <create_partition>
c00081b2:	83 c4 10             	add    esp,0x10
c00081b5:	89 c3                	mov    ebx,eax
c00081b7:	85 c0                	test   eax,eax
c00081b9:	75 34                	jne    c00081ef <f_mkfs+0x10ce>
c00081bb:	31 db                	xor    ebx,ebx
c00081bd:	50                   	push   eax
c00081be:	6a 00                	push   0x0
c00081c0:	6a 00                	push   0x0
c00081c2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00081c6:	e8 27 98 ff ff       	call   c00019f2 <disk_ioctl>
c00081cb:	83 c4 10             	add    esp,0x10
c00081ce:	85 c0                	test   eax,eax
c00081d0:	74 1d                	je     c00081ef <f_mkfs+0x10ce>
c00081d2:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00081da:	75 0c                	jne    c00081e8 <f_mkfs+0x10c7>
c00081dc:	83 ec 0c             	sub    esp,0xc
c00081df:	55                   	push   ebp
c00081e0:	e8 75 00 00 00       	call   c000825a <ff_memfree>
c00081e5:	83 c4 10             	add    esp,0x10
c00081e8:	bb 01 00 00 00       	mov    ebx,0x1
c00081ed:	eb 48                	jmp    c0008237 <f_mkfs+0x1116>
c00081ef:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00081f7:	75 3e                	jne    c0008237 <f_mkfs+0x1116>
c00081f9:	83 ec 0c             	sub    esp,0xc
c00081fc:	55                   	push   ebp
c00081fd:	e8 58 00 00 00       	call   c000825a <ff_memfree>
c0008202:	83 c4 10             	add    esp,0x10
c0008205:	eb 30                	jmp    c0008237 <f_mkfs+0x1116>
c0008207:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000820c:	0f 85 eb fa ff ff    	jne    c0007cfd <f_mkfs+0xbdc>
c0008212:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008216:	81 ff 80 00 00 00    	cmp    edi,0x80
c000821c:	0f 86 b8 f9 ff ff    	jbe    c0007bda <f_mkfs+0xab9>
c0008222:	e9 bf fb ff ff       	jmp    c0007de6 <f_mkfs+0xcc5>
c0008227:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000822c:	0f 85 c0 fa ff ff    	jne    c0007cf2 <f_mkfs+0xbd1>
c0008232:	e9 af fb ff ff       	jmp    c0007de6 <f_mkfs+0xcc5>
c0008237:	81 c4 9c 00 00 00    	add    esp,0x9c
c000823d:	89 d8                	mov    eax,ebx
c000823f:	5b                   	pop    ebx
c0008240:	5e                   	pop    esi
c0008241:	5f                   	pop    edi
c0008242:	5d                   	pop    ebp
c0008243:	c3                   	ret    

c0008244 <ff_memalloc>:
c0008244:	83 ec 0c             	sub    esp,0xc
c0008247:	83 ec 0c             	sub    esp,0xc
c000824a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000824e:	e8 81 72 00 00       	call   c000f4d4 <malloc>
c0008253:	83 c4 10             	add    esp,0x10
c0008256:	83 c4 0c             	add    esp,0xc
c0008259:	c3                   	ret    

c000825a <ff_memfree>:
c000825a:	83 ec 0c             	sub    esp,0xc
c000825d:	83 ec 0c             	sub    esp,0xc
c0008260:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008264:	e8 7b 72 00 00       	call   c000f4e4 <free>
c0008269:	83 c4 10             	add    esp,0x10
c000826c:	90                   	nop
c000826d:	83 c4 0c             	add    esp,0xc
c0008270:	c3                   	ret    

c0008271 <ff_uni2oem>:
c0008271:	83 ec 14             	sub    esp,0x14
c0008274:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008278:	66 89 04 24          	mov    WORD PTR [esp],ax
c000827c:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008283:	c7 44 24 0c e0 81 02 c0 	mov    DWORD PTR [esp+0xc],0xc00281e0
c000828b:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0008290:	77 0b                	ja     c000829d <ff_uni2oem+0x2c>
c0008292:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008296:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000829b:	eb 5b                	jmp    c00082f8 <ff_uni2oem+0x87>
c000829d:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00082a5:	77 51                	ja     c00082f8 <ff_uni2oem+0x87>
c00082a7:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00082ad:	75 49                	jne    c00082f8 <ff_uni2oem+0x87>
c00082af:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00082b6:	eb 0b                	jmp    c00082c3 <ff_uni2oem+0x52>
c00082b8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082bd:	40                   	inc    eax
c00082be:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082c3:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00082c9:	77 1b                	ja     c00082e6 <ff_uni2oem+0x75>
c00082cb:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00082d0:	01 c0                	add    eax,eax
c00082d2:	89 c2                	mov    edx,eax
c00082d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082d8:	01 d0                	add    eax,edx
c00082da:	66 8b 00             	mov    ax,WORD PTR [eax]
c00082dd:	0f b7 c0             	movzx  eax,ax
c00082e0:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00082e4:	75 d2                	jne    c00082b8 <ff_uni2oem+0x47>
c00082e6:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082eb:	83 e8 80             	sub    eax,0xffffff80
c00082ee:	25 ff 00 00 00       	and    eax,0xff
c00082f3:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082f8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082fd:	83 c4 14             	add    esp,0x14
c0008300:	c3                   	ret    

c0008301 <ff_oem2uni>:
c0008301:	83 ec 18             	sub    esp,0x18
c0008304:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008308:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000830c:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008311:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008315:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000831c:	c7 44 24 10 e0 81 02 c0 	mov    DWORD PTR [esp+0x10],0xc00281e0
c0008324:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000832a:	77 0b                	ja     c0008337 <ff_oem2uni+0x36>
c000832c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008330:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008335:	eb 2d                	jmp    c0008364 <ff_oem2uni+0x63>
c0008337:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000833d:	75 25                	jne    c0008364 <ff_oem2uni+0x63>
c000833f:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008346:	77 1c                	ja     c0008364 <ff_oem2uni+0x63>
c0008348:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000834d:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008352:	01 c0                	add    eax,eax
c0008354:	89 c2                	mov    edx,eax
c0008356:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000835a:	01 d0                	add    eax,edx
c000835c:	66 8b 00             	mov    ax,WORD PTR [eax]
c000835f:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008364:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0008369:	83 c4 18             	add    esp,0x18
c000836c:	c3                   	ret    

c000836d <ff_wtoupper>:
c000836d:	83 ec 10             	sub    esp,0x10
c0008370:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0008378:	0f 87 3e 01 00 00    	ja     c00084bc <ff_wtoupper+0x14f>
c000837e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008382:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008387:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c000838e:	77 07                	ja     c0008397 <ff_wtoupper+0x2a>
c0008390:	b8 e0 7f 02 c0       	mov    eax,0xc0027fe0
c0008395:	eb 05                	jmp    c000839c <ff_wtoupper+0x2f>
c0008397:	b8 20 7f 02 c0       	mov    eax,0xc0027f20
c000839c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00083a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083a4:	8d 50 02             	lea    edx,[eax+0x2]
c00083a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083ab:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083ae:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00083b3:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00083b9:	0f 84 f4 00 00 00    	je     c00084b3 <ff_wtoupper+0x146>
c00083bf:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00083c4:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00083c9:	0f 82 e4 00 00 00    	jb     c00084b3 <ff_wtoupper+0x146>
c00083cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083d3:	8d 50 02             	lea    edx,[eax+0x2]
c00083d6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083da:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083dd:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00083e2:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00083e7:	66 c1 e8 08          	shr    ax,0x8
c00083eb:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c00083f0:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c00083f7:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00083fc:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008401:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008406:	01 ca                	add    edx,ecx
c0008408:	39 d0                	cmp    eax,edx
c000840a:	0f 8d 86 00 00 00    	jge    c0008496 <ff_wtoupper+0x129>
c0008410:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008415:	83 f8 08             	cmp    eax,0x8
c0008418:	0f 87 94 00 00 00    	ja     c00084b2 <ff_wtoupper+0x145>
c000841e:	8b 04 85 e0 7e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8120]
c0008425:	ff e0                	jmp    eax
c0008427:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000842c:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008431:	29 c2                	sub    edx,eax
c0008433:	89 d0                	mov    eax,edx
c0008435:	01 c0                	add    eax,eax
c0008437:	89 c2                	mov    edx,eax
c0008439:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000843d:	01 d0                	add    eax,edx
c000843f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008442:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008447:	eb 4b                	jmp    c0008494 <ff_wtoupper+0x127>
c0008449:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000844e:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008452:	83 e0 01             	and    eax,0x1
c0008455:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c000845a:	eb 38                	jmp    c0008494 <ff_wtoupper+0x127>
c000845c:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008462:	eb 30                	jmp    c0008494 <ff_wtoupper+0x127>
c0008464:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c000846a:	eb 28                	jmp    c0008494 <ff_wtoupper+0x127>
c000846c:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008472:	eb 20                	jmp    c0008494 <ff_wtoupper+0x127>
c0008474:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c000847a:	eb 18                	jmp    c0008494 <ff_wtoupper+0x127>
c000847c:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008482:	eb 10                	jmp    c0008494 <ff_wtoupper+0x127>
c0008484:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c000848a:	eb 08                	jmp    c0008494 <ff_wtoupper+0x127>
c000848c:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0008493:	90                   	nop
c0008494:	eb 1c                	jmp    c00084b2 <ff_wtoupper+0x145>
c0008496:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c000849c:	0f 85 fe fe ff ff    	jne    c00083a0 <ff_wtoupper+0x33>
c00084a2:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00084a7:	01 c0                	add    eax,eax
c00084a9:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00084ad:	e9 ee fe ff ff       	jmp    c00083a0 <ff_wtoupper+0x33>
c00084b2:	90                   	nop
c00084b3:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00084b8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00084bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084c0:	83 c4 10             	add    esp,0x10
c00084c3:	c3                   	ret    

c00084c4 <psrc_set_converter>:
c00084c4:	56                   	push   esi
c00084c5:	89 d6                	mov    esi,edx
c00084c7:	53                   	push   ebx
c00084c8:	89 c3                	mov    ebx,eax
c00084ca:	83 ec 0c             	sub    esp,0xc
c00084cd:	52                   	push   edx
c00084ce:	50                   	push   eax
c00084cf:	e8 6f 55 00 00       	call   c000da43 <sinc_set_converter>
c00084d4:	83 c4 10             	add    esp,0x10
c00084d7:	85 c0                	test   eax,eax
c00084d9:	74 25                	je     c0008500 <psrc_set_converter+0x3c>
c00084db:	50                   	push   eax
c00084dc:	50                   	push   eax
c00084dd:	56                   	push   esi
c00084de:	53                   	push   ebx
c00084df:	e8 17 5d 00 00       	call   c000e1fb <zoh_set_converter>
c00084e4:	83 c4 10             	add    esp,0x10
c00084e7:	85 c0                	test   eax,eax
c00084e9:	74 15                	je     c0008500 <psrc_set_converter+0x3c>
c00084eb:	51                   	push   ecx
c00084ec:	51                   	push   ecx
c00084ed:	56                   	push   esi
c00084ee:	53                   	push   ebx
c00084ef:	e8 0f 11 00 00       	call   c0009603 <linear_set_converter>
c00084f4:	83 c4 10             	add    esp,0x10
c00084f7:	ba 0a 00 00 00       	mov    edx,0xa
c00084fc:	85 c0                	test   eax,eax
c00084fe:	75 02                	jne    c0008502 <psrc_set_converter+0x3e>
c0008500:	31 d2                	xor    edx,edx
c0008502:	89 d0                	mov    eax,edx
c0008504:	5a                   	pop    edx
c0008505:	5b                   	pop    ebx
c0008506:	5e                   	pop    esi
c0008507:	c3                   	ret    

c0008508 <src_delete>:
c0008508:	53                   	push   ebx
c0008509:	83 ec 08             	sub    esp,0x8
c000850c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008510:	85 db                	test   ebx,ebx
c0008512:	74 29                	je     c000853d <src_delete+0x35>
c0008514:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008517:	85 c0                	test   eax,eax
c0008519:	74 0c                	je     c0008527 <src_delete+0x1f>
c000851b:	83 ec 0c             	sub    esp,0xc
c000851e:	50                   	push   eax
c000851f:	e8 c0 6f 00 00       	call   c000f4e4 <free>
c0008524:	83 c4 10             	add    esp,0x10
c0008527:	50                   	push   eax
c0008528:	6a 3c                	push   0x3c
c000852a:	6a 00                	push   0x0
c000852c:	53                   	push   ebx
c000852d:	e8 59 81 ff ff       	call   c000068b <memset>
c0008532:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008535:	e8 aa 6f 00 00       	call   c000f4e4 <free>
c000853a:	83 c4 10             	add    esp,0x10
c000853d:	31 c0                	xor    eax,eax
c000853f:	83 c4 08             	add    esp,0x8
c0008542:	5b                   	pop    ebx
c0008543:	c3                   	ret    

c0008544 <src_process>:
c0008544:	55                   	push   ebp
c0008545:	57                   	push   edi
c0008546:	56                   	push   esi
c0008547:	53                   	push   ebx
c0008548:	83 ec 1c             	sub    esp,0x1c
c000854b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000854f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008553:	85 ed                	test   ebp,ebp
c0008555:	0f 84 6f 01 00 00    	je     c00086ca <src_process+0x186>
c000855b:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c000855f:	0f 84 6c 01 00 00    	je     c00086d1 <src_process+0x18d>
c0008565:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c0008569:	0f 84 62 01 00 00    	je     c00086d1 <src_process+0x18d>
c000856f:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c0008576:	0f 85 5c 01 00 00    	jne    c00086d8 <src_process+0x194>
c000857c:	85 db                	test   ebx,ebx
c000857e:	0f 84 5b 01 00 00    	je     c00086df <src_process+0x19b>
c0008584:	8b 33                	mov    esi,DWORD PTR [ebx]
c0008586:	85 f6                	test   esi,esi
c0008588:	0f 84 58 01 00 00    	je     c00086e6 <src_process+0x1a2>
c000858e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0008591:	85 ff                	test   edi,edi
c0008593:	0f 84 4d 01 00 00    	je     c00086e6 <src_process+0x1a2>
c0008599:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000859c:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000859f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00085a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085a7:	68 00 00 70 3f       	push   0x3f700000
c00085ac:	6a 00                	push   0x0
c00085ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085b6:	e8 44 e9 01 00       	call   c0026eff <__ltdf2>
c00085bb:	83 c4 10             	add    esp,0x10
c00085be:	85 c0                	test   eax,eax
c00085c0:	0f 88 27 01 00 00    	js     c00086ed <src_process+0x1a9>
c00085c6:	68 00 00 70 40       	push   0x40700000
c00085cb:	6a 00                	push   0x0
c00085cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085d5:	e8 07 e9 01 00       	call   c0026ee1 <__gtdf2>
c00085da:	83 c4 10             	add    esp,0x10
c00085dd:	85 c0                	test   eax,eax
c00085df:	0f 8f 08 01 00 00    	jg     c00086ed <src_process+0x1a9>
c00085e5:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00085e9:	79 07                	jns    c00085f2 <src_process+0xae>
c00085eb:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00085f2:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00085f5:	85 c0                	test   eax,eax
c00085f7:	79 50                	jns    c0008649 <src_process+0x105>
c00085f9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008600:	39 fe                	cmp    esi,edi
c0008602:	72 37                	jb     c000863b <src_process+0xf7>
c0008604:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000860b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008612:	68 00 00 70 3f       	push   0x3f700000
c0008617:	6a 00                	push   0x0
c0008619:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000861c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000861f:	e8 db e8 01 00       	call   c0026eff <__ltdf2>
c0008624:	83 c4 10             	add    esp,0x10
c0008627:	85 c0                	test   eax,eax
c0008629:	79 37                	jns    c0008662 <src_process+0x11e>
c000862b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000862f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008633:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008636:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008639:	eb 27                	jmp    c0008662 <src_process+0x11e>
c000863b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000863e:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008642:	8d 04 86             	lea    eax,[esi+eax*4]
c0008645:	39 c7                	cmp    edi,eax
c0008647:	eb 0d                	jmp    c0008656 <src_process+0x112>
c0008649:	39 fe                	cmp    esi,edi
c000864b:	72 ee                	jb     c000863b <src_process+0xf7>
c000864d:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008651:	8d 04 87             	lea    eax,[edi+eax*4]
c0008654:	39 c6                	cmp    esi,eax
c0008656:	73 ac                	jae    c0008604 <src_process+0xc0>
c0008658:	b8 10 00 00 00       	mov    eax,0x10
c000865d:	e9 90 00 00 00       	jmp    c00086f2 <src_process+0x1ae>
c0008662:	83 ec 10             	sub    esp,0x10
c0008665:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0008668:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000866b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000866e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008671:	e8 8e df 01 00       	call   c0026604 <__subdf3>
c0008676:	83 c4 18             	add    esp,0x18
c0008679:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000867d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008681:	52                   	push   edx
c0008682:	50                   	push   eax
c0008683:	e8 08 ea 01 00       	call   c0027090 <fabs>
c0008688:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000868c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008690:	83 c4 10             	add    esp,0x10
c0008693:	68 af 03 d2 3c       	push   0x3cd203af
c0008698:	68 16 56 e7 9e       	push   0x9ee75616
c000869d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00086a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00086a5:	e8 55 e8 01 00       	call   c0026eff <__ltdf2>
c00086aa:	83 c4 10             	add    esp,0x10
c00086ad:	85 c0                	test   eax,eax
c00086af:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00086b3:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00086b7:	79 05                	jns    c00086be <src_process+0x17a>
c00086b9:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c00086bc:	eb 03                	jmp    c00086c1 <src_process+0x17d>
c00086be:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00086c1:	83 c4 1c             	add    esp,0x1c
c00086c4:	5b                   	pop    ebx
c00086c5:	5e                   	pop    esi
c00086c6:	5f                   	pop    edi
c00086c7:	5d                   	pop    ebp
c00086c8:	ff e0                	jmp    eax
c00086ca:	b8 02 00 00 00       	mov    eax,0x2
c00086cf:	eb 21                	jmp    c00086f2 <src_process+0x1ae>
c00086d1:	b8 07 00 00 00       	mov    eax,0x7
c00086d6:	eb 1a                	jmp    c00086f2 <src_process+0x1ae>
c00086d8:	b8 12 00 00 00       	mov    eax,0x12
c00086dd:	eb 13                	jmp    c00086f2 <src_process+0x1ae>
c00086df:	b8 03 00 00 00       	mov    eax,0x3
c00086e4:	eb 0c                	jmp    c00086f2 <src_process+0x1ae>
c00086e6:	b8 04 00 00 00       	mov    eax,0x4
c00086eb:	eb 05                	jmp    c00086f2 <src_process+0x1ae>
c00086ed:	b8 06 00 00 00       	mov    eax,0x6
c00086f2:	83 c4 1c             	add    esp,0x1c
c00086f5:	5b                   	pop    ebx
c00086f6:	5e                   	pop    esi
c00086f7:	5f                   	pop    edi
c00086f8:	5d                   	pop    ebp
c00086f9:	c3                   	ret    

c00086fa <src_callback_read>:
c00086fa:	55                   	push   ebp
c00086fb:	57                   	push   edi
c00086fc:	56                   	push   esi
c00086fd:	53                   	push   ebx
c00086fe:	83 ec 3c             	sub    esp,0x3c
c0008701:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008705:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008709:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000870d:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008711:	85 ed                	test   ebp,ebp
c0008713:	0f 8e 52 01 00 00    	jle    c000886b <src_callback_read+0x171>
c0008719:	85 db                	test   ebx,ebx
c000871b:	0f 84 4a 01 00 00    	je     c000886b <src_callback_read+0x171>
c0008721:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008728:	74 0c                	je     c0008736 <src_callback_read+0x3c>
c000872a:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008731:	e9 35 01 00 00       	jmp    c000886b <src_callback_read+0x171>
c0008736:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000873a:	75 0c                	jne    c0008748 <src_callback_read+0x4e>
c000873c:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008743:	e9 23 01 00 00       	jmp    c000886b <src_callback_read+0x171>
c0008748:	51                   	push   ecx
c0008749:	6a 24                	push   0x24
c000874b:	6a 00                	push   0x0
c000874d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008751:	50                   	push   eax
c0008752:	e8 34 7f ff ff       	call   c000068b <memset>
c0008757:	83 c4 10             	add    esp,0x10
c000875a:	68 00 00 70 3f       	push   0x3f700000
c000875f:	6a 00                	push   0x0
c0008761:	57                   	push   edi
c0008762:	56                   	push   esi
c0008763:	e8 97 e7 01 00       	call   c0026eff <__ltdf2>
c0008768:	83 c4 10             	add    esp,0x10
c000876b:	85 c0                	test   eax,eax
c000876d:	78 3e                	js     c00087ad <src_callback_read+0xb3>
c000876f:	68 00 00 70 40       	push   0x40700000
c0008774:	6a 00                	push   0x0
c0008776:	57                   	push   edi
c0008777:	56                   	push   esi
c0008778:	e8 64 e7 01 00       	call   c0026ee1 <__gtdf2>
c000877d:	83 c4 10             	add    esp,0x10
c0008780:	85 c0                	test   eax,eax
c0008782:	7f 29                	jg     c00087ad <src_callback_read+0xb3>
c0008784:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0008788:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000878c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008790:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c0008794:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0008797:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000879b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000879f:	31 f6                	xor    esi,esi
c00087a1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00087a4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00087a8:	e9 97 00 00 00       	jmp    c0008844 <src_callback_read+0x14a>
c00087ad:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00087b4:	e9 b2 00 00 00       	jmp    c000886b <src_callback_read+0x171>
c00087b9:	8d 44 24 04          	lea    eax,[esp+0x4]
c00087bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087c1:	52                   	push   edx
c00087c2:	52                   	push   edx
c00087c3:	8d 44 24 10          	lea    eax,[esp+0x10]
c00087c7:	50                   	push   eax
c00087c8:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087cb:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00087ce:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00087d2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00087d6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00087da:	83 c4 10             	add    esp,0x10
c00087dd:	85 c0                	test   eax,eax
c00087df:	75 08                	jne    c00087e9 <src_callback_read+0xef>
c00087e1:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c00087e9:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c00087f0:	50                   	push   eax
c00087f1:	50                   	push   eax
c00087f2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00087f6:	50                   	push   eax
c00087f7:	53                   	push   ebx
c00087f8:	e8 47 fd ff ff       	call   c0008544 <src_process>
c00087fd:	83 c4 10             	add    esp,0x10
c0008800:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008807:	85 c0                	test   eax,eax
c0008809:	75 49                	jne    c0008854 <src_callback_read+0x15a>
c000880b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000880f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008812:	89 f9                	mov    ecx,edi
c0008814:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008818:	0f af ca             	imul   ecx,edx
c000881b:	c1 e1 02             	shl    ecx,0x2
c000881e:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008822:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008826:	0f af d1             	imul   edx,ecx
c0008829:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c000882d:	c1 e2 02             	shl    edx,0x2
c0008830:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008834:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008837:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000883c:	74 12                	je     c0008850 <src_callback_read+0x156>
c000883e:	39 d5                	cmp    ebp,edx
c0008840:	7e 14                	jle    c0008856 <src_callback_read+0x15c>
c0008842:	89 d6                	mov    esi,edx
c0008844:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008849:	75 9e                	jne    c00087e9 <src_callback_read+0xef>
c000884b:	e9 69 ff ff ff       	jmp    c00087b9 <src_callback_read+0xbf>
c0008850:	85 c9                	test   ecx,ecx
c0008852:	75 ea                	jne    c000883e <src_callback_read+0x144>
c0008854:	89 f2                	mov    edx,esi
c0008856:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000885a:	85 c0                	test   eax,eax
c000885c:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c000885f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008863:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008866:	74 05                	je     c000886d <src_callback_read+0x173>
c0008868:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000886b:	31 d2                	xor    edx,edx
c000886d:	83 c4 3c             	add    esp,0x3c
c0008870:	89 d0                	mov    eax,edx
c0008872:	5b                   	pop    ebx
c0008873:	5e                   	pop    esi
c0008874:	5f                   	pop    edi
c0008875:	5d                   	pop    ebp
c0008876:	c3                   	ret    

c0008877 <src_set_ratio>:
c0008877:	57                   	push   edi
c0008878:	ba 02 00 00 00       	mov    edx,0x2
c000887d:	56                   	push   esi
c000887e:	53                   	push   ebx
c000887f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008883:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008887:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000888b:	85 db                	test   ebx,ebx
c000888d:	74 4c                	je     c00088db <src_set_ratio+0x64>
c000888f:	ba 07 00 00 00       	mov    edx,0x7
c0008894:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008898:	74 41                	je     c00088db <src_set_ratio+0x64>
c000889a:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c000889e:	74 3b                	je     c00088db <src_set_ratio+0x64>
c00088a0:	68 00 00 70 3f       	push   0x3f700000
c00088a5:	6a 00                	push   0x0
c00088a7:	57                   	push   edi
c00088a8:	56                   	push   esi
c00088a9:	e8 51 e6 01 00       	call   c0026eff <__ltdf2>
c00088ae:	83 c4 10             	add    esp,0x10
c00088b1:	ba 06 00 00 00       	mov    edx,0x6
c00088b6:	85 c0                	test   eax,eax
c00088b8:	78 21                	js     c00088db <src_set_ratio+0x64>
c00088ba:	68 00 00 70 40       	push   0x40700000
c00088bf:	6a 00                	push   0x0
c00088c1:	57                   	push   edi
c00088c2:	56                   	push   esi
c00088c3:	e8 19 e6 01 00       	call   c0026ee1 <__gtdf2>
c00088c8:	83 c4 10             	add    esp,0x10
c00088cb:	ba 06 00 00 00       	mov    edx,0x6
c00088d0:	85 c0                	test   eax,eax
c00088d2:	7f 07                	jg     c00088db <src_set_ratio+0x64>
c00088d4:	89 33                	mov    DWORD PTR [ebx],esi
c00088d6:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c00088d9:	31 d2                	xor    edx,edx
c00088db:	5b                   	pop    ebx
c00088dc:	89 d0                	mov    eax,edx
c00088de:	5e                   	pop    esi
c00088df:	5f                   	pop    edi
c00088e0:	c3                   	ret    

c00088e1 <src_get_channels>:
c00088e1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00088e5:	b8 02 00 00 00       	mov    eax,0x2
c00088ea:	85 d2                	test   edx,edx
c00088ec:	74 14                	je     c0008902 <src_get_channels+0x21>
c00088ee:	b8 07 00 00 00       	mov    eax,0x7
c00088f3:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c00088f7:	74 09                	je     c0008902 <src_get_channels+0x21>
c00088f9:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c00088fd:	74 03                	je     c0008902 <src_get_channels+0x21>
c00088ff:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008902:	c3                   	ret    

c0008903 <src_reset>:
c0008903:	53                   	push   ebx
c0008904:	b8 02 00 00 00       	mov    eax,0x2
c0008909:	83 ec 08             	sub    esp,0x8
c000890c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008910:	85 db                	test   ebx,ebx
c0008912:	74 36                	je     c000894a <src_reset+0x47>
c0008914:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008917:	85 c0                	test   eax,eax
c0008919:	74 09                	je     c0008924 <src_reset+0x21>
c000891b:	83 ec 0c             	sub    esp,0xc
c000891e:	53                   	push   ebx
c000891f:	ff d0                	call   eax
c0008921:	83 c4 10             	add    esp,0x10
c0008924:	31 c0                	xor    eax,eax
c0008926:	31 d2                	xor    edx,edx
c0008928:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000892b:	89 03                	mov    DWORD PTR [ebx],eax
c000892d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008930:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008933:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000893a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008941:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008948:	31 c0                	xor    eax,eax
c000894a:	83 c4 08             	add    esp,0x8
c000894d:	5b                   	pop    ebx
c000894e:	c3                   	ret    

c000894f <src_new>:
c000894f:	57                   	push   edi
c0008950:	56                   	push   esi
c0008951:	53                   	push   ebx
c0008952:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008956:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000895a:	85 f6                	test   esi,esi
c000895c:	74 73                	je     c00089d1 <src_new+0x82>
c000895e:	85 ff                	test   edi,edi
c0008960:	7f 08                	jg     c000896a <src_new+0x1b>
c0008962:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008968:	eb 1e                	jmp    c0008988 <src_new+0x39>
c000896a:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008970:	50                   	push   eax
c0008971:	50                   	push   eax
c0008972:	6a 3c                	push   0x3c
c0008974:	6a 01                	push   0x1
c0008976:	e8 89 6b 00 00       	call   c000f504 <calloc>
c000897b:	83 c4 10             	add    esp,0x10
c000897e:	89 c3                	mov    ebx,eax
c0008980:	85 c0                	test   eax,eax
c0008982:	75 10                	jne    c0008994 <src_new+0x45>
c0008984:	85 f6                	test   esi,esi
c0008986:	75 04                	jne    c000898c <src_new+0x3d>
c0008988:	31 db                	xor    ebx,ebx
c000898a:	eb 4b                	jmp    c00089d7 <src_new+0x88>
c000898c:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008992:	eb 43                	jmp    c00089d7 <src_new+0x88>
c0008994:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008997:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c000899e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00089a2:	e8 1d fb ff ff       	call   c00084c4 <psrc_set_converter>
c00089a7:	85 c0                	test   eax,eax
c00089a9:	74 18                	je     c00089c3 <src_new+0x74>
c00089ab:	85 f6                	test   esi,esi
c00089ad:	74 06                	je     c00089b5 <src_new+0x66>
c00089af:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c00089b5:	83 ec 0c             	sub    esp,0xc
c00089b8:	53                   	push   ebx
c00089b9:	31 db                	xor    ebx,ebx
c00089bb:	e8 24 6b 00 00       	call   c000f4e4 <free>
c00089c0:	83 c4 10             	add    esp,0x10
c00089c3:	83 ec 0c             	sub    esp,0xc
c00089c6:	53                   	push   ebx
c00089c7:	e8 37 ff ff ff       	call   c0008903 <src_reset>
c00089cc:	83 c4 10             	add    esp,0x10
c00089cf:	eb 06                	jmp    c00089d7 <src_new+0x88>
c00089d1:	85 ff                	test   edi,edi
c00089d3:	7f 9b                	jg     c0008970 <src_new+0x21>
c00089d5:	eb b1                	jmp    c0008988 <src_new+0x39>
c00089d7:	89 d8                	mov    eax,ebx
c00089d9:	5b                   	pop    ebx
c00089da:	5e                   	pop    esi
c00089db:	5f                   	pop    edi
c00089dc:	c3                   	ret    

c00089dd <src_callback_new>:
c00089dd:	56                   	push   esi
c00089de:	53                   	push   ebx
c00089df:	53                   	push   ebx
c00089e0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00089e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00089e8:	85 f6                	test   esi,esi
c00089ea:	75 0e                	jne    c00089fa <src_callback_new+0x1d>
c00089ec:	31 db                	xor    ebx,ebx
c00089ee:	85 c0                	test   eax,eax
c00089f0:	74 47                	je     c0008a39 <src_callback_new+0x5c>
c00089f2:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c00089f8:	eb 3f                	jmp    c0008a39 <src_callback_new+0x5c>
c00089fa:	85 c0                	test   eax,eax
c00089fc:	74 06                	je     c0008a04 <src_callback_new+0x27>
c00089fe:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008a04:	51                   	push   ecx
c0008a05:	50                   	push   eax
c0008a06:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008a0a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008a0e:	e8 3c ff ff ff       	call   c000894f <src_new>
c0008a13:	83 c4 10             	add    esp,0x10
c0008a16:	89 c3                	mov    ebx,eax
c0008a18:	85 c0                	test   eax,eax
c0008a1a:	74 1d                	je     c0008a39 <src_callback_new+0x5c>
c0008a1c:	83 ec 0c             	sub    esp,0xc
c0008a1f:	50                   	push   eax
c0008a20:	e8 de fe ff ff       	call   c0008903 <src_reset>
c0008a25:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008a29:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a30:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008a33:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008a36:	83 c4 10             	add    esp,0x10
c0008a39:	89 d8                	mov    eax,ebx
c0008a3b:	5a                   	pop    edx
c0008a3c:	5b                   	pop    ebx
c0008a3d:	5e                   	pop    esi
c0008a3e:	c3                   	ret    

c0008a3f <src_get_name>:
c0008a3f:	53                   	push   ebx
c0008a40:	83 ec 14             	sub    esp,0x14
c0008a43:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a47:	53                   	push   ebx
c0008a48:	e8 d0 4f 00 00       	call   c000da1d <sinc_get_name>
c0008a4d:	83 c4 10             	add    esp,0x10
c0008a50:	85 c0                	test   eax,eax
c0008a52:	75 1d                	jne    c0008a71 <src_get_name+0x32>
c0008a54:	83 ec 0c             	sub    esp,0xc
c0008a57:	53                   	push   ebx
c0008a58:	e8 80 57 00 00       	call   c000e1dd <zoh_get_name>
c0008a5d:	83 c4 10             	add    esp,0x10
c0008a60:	85 c0                	test   eax,eax
c0008a62:	75 0d                	jne    c0008a71 <src_get_name+0x32>
c0008a64:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a68:	83 c4 08             	add    esp,0x8
c0008a6b:	5b                   	pop    ebx
c0008a6c:	e9 74 0b 00 00       	jmp    c00095e5 <linear_get_name>
c0008a71:	83 c4 08             	add    esp,0x8
c0008a74:	5b                   	pop    ebx
c0008a75:	c3                   	ret    

c0008a76 <src_get_description>:
c0008a76:	53                   	push   ebx
c0008a77:	83 ec 14             	sub    esp,0x14
c0008a7a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a7e:	53                   	push   ebx
c0008a7f:	e8 ac 4f 00 00       	call   c000da30 <sinc_get_description>
c0008a84:	83 c4 10             	add    esp,0x10
c0008a87:	85 c0                	test   eax,eax
c0008a89:	75 1d                	jne    c0008aa8 <src_get_description+0x32>
c0008a8b:	83 ec 0c             	sub    esp,0xc
c0008a8e:	53                   	push   ebx
c0008a8f:	e8 58 57 00 00       	call   c000e1ec <zoh_get_description>
c0008a94:	83 c4 10             	add    esp,0x10
c0008a97:	85 c0                	test   eax,eax
c0008a99:	75 0d                	jne    c0008aa8 <src_get_description+0x32>
c0008a9b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a9f:	83 c4 08             	add    esp,0x8
c0008aa2:	5b                   	pop    ebx
c0008aa3:	e9 4c 0b 00 00       	jmp    c00095f4 <linear_get_description>
c0008aa8:	83 c4 08             	add    esp,0x8
c0008aab:	5b                   	pop    ebx
c0008aac:	c3                   	ret    

c0008aad <src_get_version>:
c0008aad:	b8 e0 82 02 c0       	mov    eax,0xc00282e0
c0008ab2:	c3                   	ret    

c0008ab3 <src_is_valid_ratio>:
c0008ab3:	83 ec 1c             	sub    esp,0x1c
c0008ab6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008aba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008abe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008ac2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ac6:	68 00 00 70 3f       	push   0x3f700000
c0008acb:	6a 00                	push   0x0
c0008acd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ad1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ad5:	e8 25 e4 01 00       	call   c0026eff <__ltdf2>
c0008ada:	83 c4 10             	add    esp,0x10
c0008add:	31 d2                	xor    edx,edx
c0008adf:	85 c0                	test   eax,eax
c0008ae1:	78 1e                	js     c0008b01 <src_is_valid_ratio+0x4e>
c0008ae3:	68 00 00 70 40       	push   0x40700000
c0008ae8:	6a 00                	push   0x0
c0008aea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008aee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008af2:	e8 ea e3 01 00       	call   c0026ee1 <__gtdf2>
c0008af7:	31 d2                	xor    edx,edx
c0008af9:	83 c4 10             	add    esp,0x10
c0008afc:	85 c0                	test   eax,eax
c0008afe:	0f 9e c2             	setle  dl
c0008b01:	89 d0                	mov    eax,edx
c0008b03:	83 c4 1c             	add    esp,0x1c
c0008b06:	c3                   	ret    

c0008b07 <src_error>:
c0008b07:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b0b:	31 c0                	xor    eax,eax
c0008b0d:	85 d2                	test   edx,edx
c0008b0f:	74 03                	je     c0008b14 <src_error+0xd>
c0008b11:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008b14:	c3                   	ret    

c0008b15 <src_strerror>:
c0008b15:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b19:	31 c0                	xor    eax,eax
c0008b1b:	83 fa 17             	cmp    edx,0x17
c0008b1e:	77 07                	ja     c0008b27 <src_strerror+0x12>
c0008b20:	8b 04 95 40 87 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd78c0]
c0008b27:	c3                   	ret    

c0008b28 <src_simple>:
c0008b28:	56                   	push   esi
c0008b29:	53                   	push   ebx
c0008b2a:	83 ec 18             	sub    esp,0x18
c0008b2d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008b31:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008b35:	50                   	push   eax
c0008b36:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008b3a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008b3e:	e8 0c fe ff ff       	call   c000894f <src_new>
c0008b43:	83 c4 10             	add    esp,0x10
c0008b46:	85 c0                	test   eax,eax
c0008b48:	75 06                	jne    c0008b50 <src_simple+0x28>
c0008b4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b4e:	eb 25                	jmp    c0008b75 <src_simple+0x4d>
c0008b50:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008b57:	89 c3                	mov    ebx,eax
c0008b59:	50                   	push   eax
c0008b5a:	50                   	push   eax
c0008b5b:	56                   	push   esi
c0008b5c:	53                   	push   ebx
c0008b5d:	e8 e2 f9 ff ff       	call   c0008544 <src_process>
c0008b62:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008b65:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008b69:	e8 9a f9 ff ff       	call   c0008508 <src_delete>
c0008b6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008b72:	83 c4 10             	add    esp,0x10
c0008b75:	83 c4 14             	add    esp,0x14
c0008b78:	5b                   	pop    ebx
c0008b79:	5e                   	pop    esi
c0008b7a:	c3                   	ret    

c0008b7b <src_short_to_float_array>:
c0008b7b:	53                   	push   ebx
c0008b7c:	83 ec 18             	sub    esp,0x18
c0008b7f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008b83:	85 db                	test   ebx,ebx
c0008b85:	74 54                	je     c0008bdb <src_short_to_float_array+0x60>
c0008b87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008b8b:	4b                   	dec    ebx
c0008b8c:	83 ec 0c             	sub    esp,0xc
c0008b8f:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008b93:	50                   	push   eax
c0008b94:	e8 fa e0 01 00       	call   c0026c93 <__floatsidf>
c0008b99:	83 c4 10             	add    esp,0x10
c0008b9c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ba0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008ba4:	68 00 00 00 3f       	push   0x3f000000
c0008ba9:	6a 00                	push   0x0
c0008bab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008baf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bb3:	e8 78 da 01 00       	call   c0026630 <__muldf3>
c0008bb8:	59                   	pop    ecx
c0008bb9:	59                   	pop    ecx
c0008bba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008bbe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008bc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bc6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bca:	e8 34 e3 01 00       	call   c0026f03 <__truncdfsf2>
c0008bcf:	83 c4 10             	add    esp,0x10
c0008bd2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008bd6:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008bd9:	eb a8                	jmp    c0008b83 <src_short_to_float_array+0x8>
c0008bdb:	83 c4 18             	add    esp,0x18
c0008bde:	5b                   	pop    ebx
c0008bdf:	c3                   	ret    

c0008be0 <src_float_to_short_array>:
c0008be0:	56                   	push   esi
c0008be1:	53                   	push   ebx
c0008be2:	83 ec 14             	sub    esp,0x14
c0008be5:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008be9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008bed:	85 db                	test   ebx,ebx
c0008bef:	0f 84 a4 00 00 00    	je     c0008c99 <src_float_to_short_array+0xb9>
c0008bf5:	83 ec 0c             	sub    esp,0xc
c0008bf8:	4b                   	dec    ebx
c0008bf9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008bfd:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008c00:	e8 22 e4 01 00       	call   c0027027 <__extendsfdf2>
c0008c05:	83 c4 10             	add    esp,0x10
c0008c08:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c0c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008c10:	68 00 00 e0 41       	push   0x41e00000
c0008c15:	6a 00                	push   0x0
c0008c17:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c1b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c1f:	e8 0c da 01 00       	call   c0026630 <__muldf3>
c0008c24:	83 c4 10             	add    esp,0x10
c0008c27:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c2b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008c2f:	68 ff ff df 41       	push   0x41dfffff
c0008c34:	68 00 00 c0 ff       	push   0xffc00000
c0008c39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c41:	e8 b7 e2 01 00       	call   c0026efd <__gedf2>
c0008c46:	83 c4 10             	add    esp,0x10
c0008c49:	85 c0                	test   eax,eax
c0008c4b:	78 08                	js     c0008c55 <src_float_to_short_array+0x75>
c0008c4d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008c53:	eb 98                	jmp    c0008bed <src_float_to_short_array+0xd>
c0008c55:	68 00 00 e0 c1       	push   0xc1e00000
c0008c5a:	6a 00                	push   0x0
c0008c5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c64:	e8 98 e2 01 00       	call   c0026f01 <__ledf2>
c0008c69:	83 c4 10             	add    esp,0x10
c0008c6c:	85 c0                	test   eax,eax
c0008c6e:	7f 0b                	jg     c0008c7b <src_float_to_short_array+0x9b>
c0008c70:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008c76:	e9 72 ff ff ff       	jmp    c0008bed <src_float_to_short_array+0xd>
c0008c7b:	50                   	push   eax
c0008c7c:	50                   	push   eax
c0008c7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c85:	e8 26 e4 01 00       	call   c00270b0 <lrint>
c0008c8a:	83 c4 10             	add    esp,0x10
c0008c8d:	c1 f8 10             	sar    eax,0x10
c0008c90:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008c94:	e9 54 ff ff ff       	jmp    c0008bed <src_float_to_short_array+0xd>
c0008c99:	83 c4 14             	add    esp,0x14
c0008c9c:	5b                   	pop    ebx
c0008c9d:	5e                   	pop    esi
c0008c9e:	c3                   	ret    

c0008c9f <src_int_to_float_array>:
c0008c9f:	53                   	push   ebx
c0008ca0:	83 ec 18             	sub    esp,0x18
c0008ca3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ca7:	85 db                	test   ebx,ebx
c0008ca9:	74 52                	je     c0008cfd <src_int_to_float_array+0x5e>
c0008cab:	83 ec 0c             	sub    esp,0xc
c0008cae:	4b                   	dec    ebx
c0008caf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008cb3:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008cb6:	e8 d8 df 01 00       	call   c0026c93 <__floatsidf>
c0008cbb:	83 c4 10             	add    esp,0x10
c0008cbe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cc2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cc6:	68 00 00 00 3e       	push   0x3e000000
c0008ccb:	6a 00                	push   0x0
c0008ccd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cd1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cd5:	e8 56 d9 01 00       	call   c0026630 <__muldf3>
c0008cda:	59                   	pop    ecx
c0008cdb:	59                   	pop    ecx
c0008cdc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008ce0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008ce4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ce8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cec:	e8 12 e2 01 00       	call   c0026f03 <__truncdfsf2>
c0008cf1:	83 c4 10             	add    esp,0x10
c0008cf4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008cf8:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008cfb:	eb aa                	jmp    c0008ca7 <src_int_to_float_array+0x8>
c0008cfd:	83 c4 18             	add    esp,0x18
c0008d00:	5b                   	pop    ebx
c0008d01:	c3                   	ret    

c0008d02 <src_float_to_int_array>:
c0008d02:	56                   	push   esi
c0008d03:	53                   	push   ebx
c0008d04:	83 ec 14             	sub    esp,0x14
c0008d07:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d0b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008d0f:	85 db                	test   ebx,ebx
c0008d11:	0f 84 a2 00 00 00    	je     c0008db9 <src_float_to_int_array+0xb7>
c0008d17:	83 ec 0c             	sub    esp,0xc
c0008d1a:	4b                   	dec    ebx
c0008d1b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008d1f:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008d22:	e8 00 e3 01 00       	call   c0027027 <__extendsfdf2>
c0008d27:	83 c4 10             	add    esp,0x10
c0008d2a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d2e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d32:	68 00 00 e0 41       	push   0x41e00000
c0008d37:	6a 00                	push   0x0
c0008d39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d41:	e8 ea d8 01 00       	call   c0026630 <__muldf3>
c0008d46:	83 c4 10             	add    esp,0x10
c0008d49:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d4d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d51:	68 ff ff df 41       	push   0x41dfffff
c0008d56:	68 00 00 c0 ff       	push   0xffc00000
c0008d5b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d63:	e8 95 e1 01 00       	call   c0026efd <__gedf2>
c0008d68:	83 c4 10             	add    esp,0x10
c0008d6b:	85 c0                	test   eax,eax
c0008d6d:	78 09                	js     c0008d78 <src_float_to_int_array+0x76>
c0008d6f:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008d76:	eb 97                	jmp    c0008d0f <src_float_to_int_array+0xd>
c0008d78:	68 00 00 e0 c1       	push   0xc1e00000
c0008d7d:	6a 00                	push   0x0
c0008d7f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d83:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d87:	e8 75 e1 01 00       	call   c0026f01 <__ledf2>
c0008d8c:	83 c4 10             	add    esp,0x10
c0008d8f:	85 c0                	test   eax,eax
c0008d91:	7f 0c                	jg     c0008d9f <src_float_to_int_array+0x9d>
c0008d93:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008d9a:	e9 70 ff ff ff       	jmp    c0008d0f <src_float_to_int_array+0xd>
c0008d9f:	50                   	push   eax
c0008da0:	50                   	push   eax
c0008da1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008da5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008da9:	e8 02 e3 01 00       	call   c00270b0 <lrint>
c0008dae:	83 c4 10             	add    esp,0x10
c0008db1:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008db4:	e9 56 ff ff ff       	jmp    c0008d0f <src_float_to_int_array+0xd>
c0008db9:	83 c4 14             	add    esp,0x14
c0008dbc:	5b                   	pop    ebx
c0008dbd:	5e                   	pop    esi
c0008dbe:	c3                   	ret    

c0008dbf <linear_vari_process>:
c0008dbf:	55                   	push   ebp
c0008dc0:	31 d2                	xor    edx,edx
c0008dc2:	57                   	push   edi
c0008dc3:	56                   	push   esi
c0008dc4:	53                   	push   ebx
c0008dc5:	83 ec 3c             	sub    esp,0x3c
c0008dc8:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008dcc:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008dd0:	0f 8e d3 07 00 00    	jle    c00095a9 <linear_vari_process+0x7ea>
c0008dd6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008dda:	ba 05 00 00 00       	mov    edx,0x5
c0008ddf:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008de2:	85 db                	test   ebx,ebx
c0008de4:	0f 84 bf 07 00 00    	je     c00095a9 <linear_vari_process+0x7ea>
c0008dea:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008ded:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008df1:	74 19                	je     c0008e0c <linear_vari_process+0x4d>
c0008df3:	31 d2                	xor    edx,edx
c0008df5:	39 c2                	cmp    edx,eax
c0008df7:	7d 0c                	jge    c0008e05 <linear_vari_process+0x46>
c0008df9:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008dfb:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0008dfe:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0008e02:	42                   	inc    edx
c0008e03:	eb f0                	jmp    c0008df5 <linear_vari_process+0x36>
c0008e05:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008e0c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008e0f:	0f af d0             	imul   edx,eax
c0008e12:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008e15:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008e19:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008e20:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008e23:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008e2a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008e2e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008e31:	8b 00                	mov    eax,DWORD PTR [eax]
c0008e33:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e37:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e3b:	68 00 00 70 3f       	push   0x3f700000
c0008e40:	6a 00                	push   0x0
c0008e42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e4a:	e8 b0 e0 01 00       	call   c0026eff <__ltdf2>
c0008e4f:	83 c4 10             	add    esp,0x10
c0008e52:	ba 16 00 00 00       	mov    edx,0x16
c0008e57:	85 c0                	test   eax,eax
c0008e59:	0f 88 4a 07 00 00    	js     c00095a9 <linear_vari_process+0x7ea>
c0008e5f:	68 00 00 70 40       	push   0x40700000
c0008e64:	6a 00                	push   0x0
c0008e66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e6e:	e8 6e e0 01 00       	call   c0026ee1 <__gtdf2>
c0008e73:	83 c4 10             	add    esp,0x10
c0008e76:	ba 16 00 00 00       	mov    edx,0x16
c0008e7b:	85 c0                	test   eax,eax
c0008e7d:	0f 8f 26 07 00 00    	jg     c00095a9 <linear_vari_process+0x7ea>
c0008e83:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008e87:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0008e8a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008e8d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e91:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e95:	68 00 00 f0 3f       	push   0x3ff00000
c0008e9a:	6a 00                	push   0x0
c0008e9c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ea0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ea4:	e8 56 e0 01 00       	call   c0026eff <__ltdf2>
c0008ea9:	83 c4 10             	add    esp,0x10
c0008eac:	85 c0                	test   eax,eax
c0008eae:	0f 89 89 02 00 00    	jns    c000913d <linear_vari_process+0x37e>
c0008eb4:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0008eb7:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c0008eba:	0f 8d 7d 02 00 00    	jge    c000913d <linear_vari_process+0x37e>
c0008ec0:	83 ec 0c             	sub    esp,0xc
c0008ec3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0008ec6:	e8 c8 dd 01 00       	call   c0026c93 <__floatsidf>
c0008ecb:	83 c4 10             	add    esp,0x10
c0008ece:	89 04 24             	mov    DWORD PTR [esp],eax
c0008ed1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008ed5:	68 00 00 f0 3f       	push   0x3ff00000
c0008eda:	6a 00                	push   0x0
c0008edc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ee0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ee4:	e8 ca d0 01 00       	call   c0025fb3 <__adddf3>
c0008ee9:	83 c4 10             	add    esp,0x10
c0008eec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008ef0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008ef4:	52                   	push   edx
c0008ef5:	50                   	push   eax
c0008ef6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008efa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008efe:	e8 2d d7 01 00       	call   c0026630 <__muldf3>
c0008f03:	5d                   	pop    ebp
c0008f04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008f08:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008f0c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0008f0f:	e8 7f dd 01 00       	call   c0026c93 <__floatsidf>
c0008f14:	83 c4 10             	add    esp,0x10
c0008f17:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008f1b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008f1f:	52                   	push   edx
c0008f20:	50                   	push   eax
c0008f21:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f25:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f29:	e8 85 d0 01 00       	call   c0025fb3 <__adddf3>
c0008f2e:	59                   	pop    ecx
c0008f2f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008f33:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008f37:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0008f3a:	e8 54 dd 01 00       	call   c0026c93 <__floatsidf>
c0008f3f:	83 c4 10             	add    esp,0x10
c0008f42:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008f46:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008f4a:	52                   	push   edx
c0008f4b:	50                   	push   eax
c0008f4c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f50:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f54:	e8 a4 df 01 00       	call   c0026efd <__gedf2>
c0008f59:	83 c4 10             	add    esp,0x10
c0008f5c:	85 c0                	test   eax,eax
c0008f5e:	0f 89 d9 01 00 00    	jns    c000913d <linear_vari_process+0x37e>
c0008f64:	85 ff                	test   edi,edi
c0008f66:	0f 8e f4 00 00 00    	jle    c0009060 <linear_vari_process+0x2a1>
c0008f6c:	83 ec 10             	sub    esp,0x10
c0008f6f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0008f72:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0008f75:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0008f79:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0008f7c:	ff 30                	push   DWORD PTR [eax]
c0008f7e:	e8 81 d6 01 00       	call   c0026604 <__subdf3>
c0008f83:	83 c4 18             	add    esp,0x18
c0008f86:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f8a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f8e:	52                   	push   edx
c0008f8f:	50                   	push   eax
c0008f90:	e8 fb e0 01 00       	call   c0027090 <fabs>
c0008f95:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f99:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f9d:	83 c4 10             	add    esp,0x10
c0008fa0:	68 a1 9c c7 3b       	push   0x3bc79ca1
c0008fa5:	68 23 42 92 0c       	push   0xc924223
c0008faa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008fae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008fb2:	e8 2a df 01 00       	call   c0026ee1 <__gtdf2>
c0008fb7:	83 c4 10             	add    esp,0x10
c0008fba:	85 c0                	test   eax,eax
c0008fbc:	0f 8e 9e 00 00 00    	jle    c0009060 <linear_vari_process+0x2a1>
c0008fc2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008fc6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008fc9:	8b 00                	mov    eax,DWORD PTR [eax]
c0008fcb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008fcf:	89 04 24             	mov    DWORD PTR [esp],eax
c0008fd2:	52                   	push   edx
c0008fd3:	50                   	push   eax
c0008fd4:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0008fd7:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0008fda:	e8 25 d6 01 00       	call   c0026604 <__subdf3>
c0008fdf:	59                   	pop    ecx
c0008fe0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008fe4:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0008fe8:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008feb:	e8 a3 dc 01 00       	call   c0026c93 <__floatsidf>
c0008ff0:	83 c4 10             	add    esp,0x10
c0008ff3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008ff7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008ffb:	52                   	push   edx
c0008ffc:	50                   	push   eax
c0008ffd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009001:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009005:	e8 26 d6 01 00       	call   c0026630 <__muldf3>
c000900a:	5f                   	pop    edi
c000900b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000900f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009013:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009016:	e8 78 dc 01 00       	call   c0026c93 <__floatsidf>
c000901b:	83 c4 10             	add    esp,0x10
c000901e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009022:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009026:	52                   	push   edx
c0009027:	50                   	push   eax
c0009028:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000902c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009030:	e8 df d8 01 00       	call   c0026914 <__divdf3>
c0009035:	83 c4 10             	add    esp,0x10
c0009038:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000903c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009040:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009044:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009048:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000904c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009050:	e8 5e cf 01 00       	call   c0025fb3 <__adddf3>
c0009055:	83 c4 10             	add    esp,0x10
c0009058:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000905c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009060:	31 ff                	xor    edi,edi
c0009062:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c0009065:	0f 8e 9d 00 00 00    	jle    c0009108 <linear_vari_process+0x349>
c000906b:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c000906e:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c0009072:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009075:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0009079:	89 04 24             	mov    DWORD PTR [esp],eax
c000907c:	8b 06                	mov    eax,DWORD PTR [esi]
c000907e:	52                   	push   edx
c000907f:	52                   	push   edx
c0009080:	55                   	push   ebp
c0009081:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c0009084:	47                   	inc    edi
c0009085:	e8 be c8 01 00       	call   c0025948 <__subsf3>
c000908a:	89 04 24             	mov    DWORD PTR [esp],eax
c000908d:	e8 95 df 01 00       	call   c0027027 <__extendsfdf2>
c0009092:	83 c4 10             	add    esp,0x10
c0009095:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009099:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000909d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00090a1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00090a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090ad:	e8 7e d5 01 00       	call   c0026630 <__muldf3>
c00090b2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00090b5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00090b9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00090bd:	e8 65 df 01 00       	call   c0027027 <__extendsfdf2>
c00090c2:	83 c4 10             	add    esp,0x10
c00090c5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00090c9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00090cd:	52                   	push   edx
c00090ce:	50                   	push   eax
c00090cf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090d3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090d7:	e8 d7 ce 01 00       	call   c0025fb3 <__adddf3>
c00090dc:	59                   	pop    ecx
c00090dd:	5d                   	pop    ebp
c00090de:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00090e2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00090e6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090ea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090ee:	e8 10 de 01 00       	call   c0026f03 <__truncdfsf2>
c00090f3:	83 c4 10             	add    esp,0x10
c00090f6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00090f9:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00090fd:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009100:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009103:	e9 5a ff ff ff       	jmp    c0009062 <linear_vari_process+0x2a3>
c0009108:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000910c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009110:	68 00 00 f0 3f       	push   0x3ff00000
c0009115:	6a 00                	push   0x0
c0009117:	e8 f8 d7 01 00       	call   c0026914 <__divdf3>
c000911c:	83 c4 10             	add    esp,0x10
c000911f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009122:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009126:	52                   	push   edx
c0009127:	50                   	push   eax
c0009128:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000912c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009130:	e8 7e ce 01 00       	call   c0025fb3 <__adddf3>
c0009135:	83 c4 10             	add    esp,0x10
c0009138:	e9 50 fd ff ff       	jmp    c0008e8d <linear_vari_process+0xce>
c000913d:	50                   	push   eax
c000913e:	50                   	push   eax
c000913f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009143:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009147:	e8 64 df 01 00       	call   c00270b0 <lrint>
c000914c:	83 ec 0c             	sub    esp,0xc
c000914f:	50                   	push   eax
c0009150:	e8 3e db 01 00       	call   c0026c93 <__floatsidf>
c0009155:	83 c4 10             	add    esp,0x10
c0009158:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000915c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009160:	52                   	push   edx
c0009161:	50                   	push   eax
c0009162:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009166:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000916a:	e8 95 d4 01 00       	call   c0026604 <__subdf3>
c000916f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009173:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009177:	83 c4 20             	add    esp,0x20
c000917a:	6a 00                	push   0x0
c000917c:	6a 00                	push   0x0
c000917e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009182:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009186:	e8 74 dd 01 00       	call   c0026eff <__ltdf2>
c000918b:	83 c4 10             	add    esp,0x10
c000918e:	85 c0                	test   eax,eax
c0009190:	79 1e                	jns    c00091b0 <linear_vari_process+0x3f1>
c0009192:	68 00 00 f0 3f       	push   0x3ff00000
c0009197:	6a 00                	push   0x0
c0009199:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000919d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a1:	e8 0d ce 01 00       	call   c0025fb3 <__adddf3>
c00091a6:	83 c4 10             	add    esp,0x10
c00091a9:	89 04 24             	mov    DWORD PTR [esp],eax
c00091ac:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00091b0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00091b3:	83 ec 10             	sub    esp,0x10
c00091b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091be:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091c6:	e8 39 d4 01 00       	call   c0026604 <__subdf3>
c00091cb:	83 c4 18             	add    esp,0x18
c00091ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091d2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091d6:	52                   	push   edx
c00091d7:	50                   	push   eax
c00091d8:	e8 d3 de 01 00       	call   c00270b0 <lrint>
c00091dd:	83 c4 10             	add    esp,0x10
c00091e0:	0f af f8             	imul   edi,eax
c00091e3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00091e6:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c00091e9:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00091ec:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c00091ef:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c00091f2:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c00091f6:	0f 8d 13 03 00 00    	jge    c000950f <linear_vari_process+0x750>
c00091fc:	83 ec 0c             	sub    esp,0xc
c00091ff:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009202:	e8 8c da 01 00       	call   c0026c93 <__floatsidf>
c0009207:	83 c4 10             	add    esp,0x10
c000920a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000920e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009212:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009216:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000921a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000921e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009222:	e8 09 d4 01 00       	call   c0026630 <__muldf3>
c0009227:	89 3c 24             	mov    DWORD PTR [esp],edi
c000922a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000922e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009232:	e8 5c da 01 00       	call   c0026c93 <__floatsidf>
c0009237:	83 c4 10             	add    esp,0x10
c000923a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000923e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009242:	52                   	push   edx
c0009243:	50                   	push   eax
c0009244:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009248:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000924c:	e8 62 cd 01 00       	call   c0025fb3 <__adddf3>
c0009251:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009254:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009258:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000925c:	e8 32 da 01 00       	call   c0026c93 <__floatsidf>
c0009261:	83 c4 10             	add    esp,0x10
c0009264:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009268:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000926c:	52                   	push   edx
c000926d:	50                   	push   eax
c000926e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009272:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009276:	e8 84 dc 01 00       	call   c0026eff <__ltdf2>
c000927b:	83 c4 10             	add    esp,0x10
c000927e:	85 c0                	test   eax,eax
c0009280:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0009284:	0f 89 85 02 00 00    	jns    c000950f <linear_vari_process+0x750>
c000928a:	85 c9                	test   ecx,ecx
c000928c:	0f 8e f5 00 00 00    	jle    c0009387 <linear_vari_process+0x5c8>
c0009292:	83 ec 10             	sub    esp,0x10
c0009295:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009298:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000929b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000929f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00092a2:	ff 30                	push   DWORD PTR [eax]
c00092a4:	e8 5b d3 01 00       	call   c0026604 <__subdf3>
c00092a9:	83 c4 18             	add    esp,0x18
c00092ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092b0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092b4:	52                   	push   edx
c00092b5:	50                   	push   eax
c00092b6:	e8 d5 dd 01 00       	call   c0027090 <fabs>
c00092bb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092bf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092c3:	83 c4 10             	add    esp,0x10
c00092c6:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00092cb:	68 23 42 92 0c       	push   0xc924223
c00092d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092d8:	e8 04 dc 01 00       	call   c0026ee1 <__gtdf2>
c00092dd:	83 c4 10             	add    esp,0x10
c00092e0:	85 c0                	test   eax,eax
c00092e2:	0f 8e 9f 00 00 00    	jle    c0009387 <linear_vari_process+0x5c8>
c00092e8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00092ec:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00092ef:	8b 00                	mov    eax,DWORD PTR [eax]
c00092f1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00092f5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00092f9:	52                   	push   edx
c00092fa:	50                   	push   eax
c00092fb:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00092fe:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009301:	e8 fe d2 01 00       	call   c0026604 <__subdf3>
c0009306:	5f                   	pop    edi
c0009307:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000930b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000930f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009312:	e8 7c d9 01 00       	call   c0026c93 <__floatsidf>
c0009317:	83 c4 10             	add    esp,0x10
c000931a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000931e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009322:	52                   	push   edx
c0009323:	50                   	push   eax
c0009324:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009328:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000932c:	e8 ff d2 01 00       	call   c0026630 <__muldf3>
c0009331:	5d                   	pop    ebp
c0009332:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009336:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000933a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000933d:	e8 51 d9 01 00       	call   c0026c93 <__floatsidf>
c0009342:	83 c4 10             	add    esp,0x10
c0009345:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009349:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000934d:	52                   	push   edx
c000934e:	50                   	push   eax
c000934f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009353:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009357:	e8 b8 d5 01 00       	call   c0026914 <__divdf3>
c000935c:	83 c4 10             	add    esp,0x10
c000935f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009363:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009367:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000936b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000936f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009373:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009377:	e8 37 cc 01 00       	call   c0025fb3 <__adddf3>
c000937c:	83 c4 10             	add    esp,0x10
c000937f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009383:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009387:	31 ff                	xor    edi,edi
c0009389:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000938c:	39 f8                	cmp    eax,edi
c000938e:	0f 8e ac 00 00 00    	jle    c0009440 <linear_vari_process+0x681>
c0009394:	8b 16                	mov    edx,DWORD PTR [esi]
c0009396:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0009399:	29 c1                	sub    ecx,eax
c000939b:	89 c8                	mov    eax,ecx
c000939d:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00093a0:	01 f8                	add    eax,edi
c00093a2:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00093a6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00093a9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00093ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093b0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00093b3:	51                   	push   ecx
c00093b4:	01 f8                	add    eax,edi
c00093b6:	51                   	push   ecx
c00093b7:	47                   	inc    edi
c00093b8:	55                   	push   ebp
c00093b9:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c00093bc:	e8 87 c5 01 00       	call   c0025948 <__subsf3>
c00093c1:	89 04 24             	mov    DWORD PTR [esp],eax
c00093c4:	e8 5e dc 01 00       	call   c0027027 <__extendsfdf2>
c00093c9:	83 c4 10             	add    esp,0x10
c00093cc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00093d0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00093d4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00093d8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00093dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093e0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093e4:	e8 47 d2 01 00       	call   c0026630 <__muldf3>
c00093e9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00093ec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00093f0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00093f4:	e8 2e dc 01 00       	call   c0027027 <__extendsfdf2>
c00093f9:	83 c4 10             	add    esp,0x10
c00093fc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009400:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009404:	52                   	push   edx
c0009405:	50                   	push   eax
c0009406:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000940a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000940e:	e8 a0 cb 01 00       	call   c0025fb3 <__adddf3>
c0009413:	5d                   	pop    ebp
c0009414:	59                   	pop    ecx
c0009415:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009419:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000941d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009421:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009425:	e8 d9 da 01 00       	call   c0026f03 <__truncdfsf2>
c000942a:	83 c4 10             	add    esp,0x10
c000942d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009431:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009435:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009438:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000943b:	e9 49 ff ff ff       	jmp    c0009389 <linear_vari_process+0x5ca>
c0009440:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009444:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009448:	68 00 00 f0 3f       	push   0x3ff00000
c000944d:	6a 00                	push   0x0
c000944f:	e8 c0 d4 01 00       	call   c0026914 <__divdf3>
c0009454:	83 c4 10             	add    esp,0x10
c0009457:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000945b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000945f:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009463:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009467:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000946b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000946f:	e8 3f cb 01 00       	call   c0025fb3 <__adddf3>
c0009474:	59                   	pop    ecx
c0009475:	5f                   	pop    edi
c0009476:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000947a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000947e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009482:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009486:	e8 25 dc 01 00       	call   c00270b0 <lrint>
c000948b:	83 ec 0c             	sub    esp,0xc
c000948e:	50                   	push   eax
c000948f:	e8 ff d7 01 00       	call   c0026c93 <__floatsidf>
c0009494:	83 c4 10             	add    esp,0x10
c0009497:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000949b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000949f:	52                   	push   edx
c00094a0:	50                   	push   eax
c00094a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094a9:	e8 56 d1 01 00       	call   c0026604 <__subdf3>
c00094ae:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00094b2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00094b6:	83 c4 20             	add    esp,0x20
c00094b9:	6a 00                	push   0x0
c00094bb:	6a 00                	push   0x0
c00094bd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094c1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094c5:	e8 35 da 01 00       	call   c0026eff <__ltdf2>
c00094ca:	83 c4 10             	add    esp,0x10
c00094cd:	85 c0                	test   eax,eax
c00094cf:	79 1e                	jns    c00094ef <linear_vari_process+0x730>
c00094d1:	68 00 00 f0 3f       	push   0x3ff00000
c00094d6:	6a 00                	push   0x0
c00094d8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094dc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094e0:	e8 ce ca 01 00       	call   c0025fb3 <__adddf3>
c00094e5:	83 c4 10             	add    esp,0x10
c00094e8:	89 04 24             	mov    DWORD PTR [esp],eax
c00094eb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00094ef:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00094f2:	83 ec 10             	sub    esp,0x10
c00094f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094fd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009501:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009505:	e8 fa d0 01 00       	call   c0026604 <__subdf3>
c000950a:	e9 bc fc ff ff       	jmp    c00091cb <linear_vari_process+0x40c>
c000950f:	39 fd                	cmp    ebp,edi
c0009511:	7d 38                	jge    c000954b <linear_vari_process+0x78c>
c0009513:	83 ec 0c             	sub    esp,0xc
c0009516:	89 f8                	mov    eax,edi
c0009518:	29 e8                	sub    eax,ebp
c000951a:	99                   	cdq    
c000951b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000951e:	50                   	push   eax
c000951f:	e8 6f d7 01 00       	call   c0026c93 <__floatsidf>
c0009524:	83 c4 10             	add    esp,0x10
c0009527:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000952b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000952f:	52                   	push   edx
c0009530:	50                   	push   eax
c0009531:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009535:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009539:	e8 75 ca 01 00       	call   c0025fb3 <__adddf3>
c000953e:	83 c4 10             	add    esp,0x10
c0009541:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009544:	89 04 24             	mov    DWORD PTR [esp],eax
c0009547:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000954b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000954f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009552:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009556:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0009559:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000955c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000955f:	85 c0                	test   eax,eax
c0009561:	7f 29                	jg     c000958c <linear_vari_process+0x7cd>
c0009563:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009567:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000956b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000956f:	89 01                	mov    DWORD PTR [ecx],eax
c0009571:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0009574:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009577:	99                   	cdq    
c0009578:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000957b:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000957e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009581:	99                   	cdq    
c0009582:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009585:	31 d2                	xor    edx,edx
c0009587:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000958a:	eb 1d                	jmp    c00095a9 <linear_vari_process+0x7ea>
c000958c:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000958f:	31 d2                	xor    edx,edx
c0009591:	29 c8                	sub    eax,ecx
c0009593:	c1 e0 02             	shl    eax,0x2
c0009596:	39 d1                	cmp    ecx,edx
c0009598:	7e c9                	jle    c0009563 <linear_vari_process+0x7a4>
c000959a:	8b 3e                	mov    edi,DWORD PTR [esi]
c000959c:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c000959f:	83 c0 04             	add    eax,0x4
c00095a2:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00095a6:	42                   	inc    edx
c00095a7:	eb ed                	jmp    c0009596 <linear_vari_process+0x7d7>
c00095a9:	83 c4 3c             	add    esp,0x3c
c00095ac:	89 d0                	mov    eax,edx
c00095ae:	5b                   	pop    ebx
c00095af:	5e                   	pop    esi
c00095b0:	5f                   	pop    edi
c00095b1:	5d                   	pop    ebp
c00095b2:	c3                   	ret    

c00095b3 <linear_reset>:
c00095b3:	83 ec 0c             	sub    esp,0xc
c00095b6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00095ba:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00095bd:	85 c0                	test   eax,eax
c00095bf:	74 20                	je     c00095e1 <linear_reset+0x2e>
c00095c1:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00095c4:	83 c0 1c             	add    eax,0x1c
c00095c7:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00095ca:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c00095d1:	c1 e2 02             	shl    edx,0x2
c00095d4:	51                   	push   ecx
c00095d5:	52                   	push   edx
c00095d6:	6a 00                	push   0x0
c00095d8:	50                   	push   eax
c00095d9:	e8 ad 70 ff ff       	call   c000068b <memset>
c00095de:	83 c4 10             	add    esp,0x10
c00095e1:	83 c4 0c             	add    esp,0xc
c00095e4:	c3                   	ret    

c00095e5 <linear_get_name>:
c00095e5:	31 c0                	xor    eax,eax
c00095e7:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c00095ec:	75 05                	jne    c00095f3 <linear_get_name+0xe>
c00095ee:	b8 a0 87 02 c0       	mov    eax,0xc00287a0
c00095f3:	c3                   	ret    

c00095f4 <linear_get_description>:
c00095f4:	31 c0                	xor    eax,eax
c00095f6:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c00095fb:	75 05                	jne    c0009602 <linear_get_description+0xe>
c00095fd:	b8 b4 87 02 c0       	mov    eax,0xc00287b4
c0009602:	c3                   	ret    

c0009603 <linear_set_converter>:
c0009603:	53                   	push   ebx
c0009604:	b8 0a 00 00 00       	mov    eax,0xa
c0009609:	83 ec 08             	sub    esp,0x8
c000960c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009610:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009615:	75 6e                	jne    c0009685 <linear_set_converter+0x82>
c0009617:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000961a:	85 c0                	test   eax,eax
c000961c:	74 13                	je     c0009631 <linear_set_converter+0x2e>
c000961e:	83 ec 0c             	sub    esp,0xc
c0009621:	50                   	push   eax
c0009622:	e8 bd 5e 00 00       	call   c000f4e4 <free>
c0009627:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000962e:	83 c4 10             	add    esp,0x10
c0009631:	50                   	push   eax
c0009632:	50                   	push   eax
c0009633:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009636:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000963d:	50                   	push   eax
c000963e:	6a 01                	push   0x1
c0009640:	e8 bf 5e 00 00       	call   c000f504 <calloc>
c0009645:	83 c4 10             	add    esp,0x10
c0009648:	89 c2                	mov    edx,eax
c000964a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000964d:	85 d2                	test   edx,edx
c000964f:	b8 01 00 00 00       	mov    eax,0x1
c0009654:	74 2f                	je     c0009685 <linear_set_converter+0x82>
c0009656:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009659:	83 ec 0c             	sub    esp,0xc
c000965c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000965f:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0009665:	c7 43 24 bf 8d 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008dbf
c000966c:	c7 43 20 bf 8d 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008dbf
c0009673:	c7 43 28 b3 95 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00095b3
c000967a:	53                   	push   ebx
c000967b:	e8 33 ff ff ff       	call   c00095b3 <linear_reset>
c0009680:	83 c4 10             	add    esp,0x10
c0009683:	31 c0                	xor    eax,eax
c0009685:	83 c4 08             	add    esp,0x8
c0009688:	5b                   	pop    ebx
c0009689:	c3                   	ret    

c000968a <int_to_fp>:
c000968a:	c1 e0 0c             	shl    eax,0xc
c000968d:	c3                   	ret    

c000968e <fp_to_int>:
c000968e:	c1 f8 0c             	sar    eax,0xc
c0009691:	c3                   	ret    

c0009692 <fp_fraction_part>:
c0009692:	25 ff 0f 00 00       	and    eax,0xfff
c0009697:	c3                   	ret    

c0009698 <fp_to_double>:
c0009698:	83 ec 1c             	sub    esp,0x1c
c000969b:	e8 f2 ff ff ff       	call   c0009692 <fp_fraction_part>
c00096a0:	83 ec 0c             	sub    esp,0xc
c00096a3:	50                   	push   eax
c00096a4:	e8 ea d5 01 00       	call   c0026c93 <__floatsidf>
c00096a9:	83 c4 10             	add    esp,0x10
c00096ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096b0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096b4:	68 00 00 30 3f       	push   0x3f300000
c00096b9:	6a 00                	push   0x0
c00096bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096c3:	e8 68 cf 01 00       	call   c0026630 <__muldf3>
c00096c8:	83 c4 2c             	add    esp,0x2c
c00096cb:	c3                   	ret    

c00096cc <calc_output_single>:
c00096cc:	55                   	push   ebp
c00096cd:	57                   	push   edi
c00096ce:	56                   	push   esi
c00096cf:	89 c6                	mov    esi,eax
c00096d1:	53                   	push   ebx
c00096d2:	89 d3                	mov    ebx,edx
c00096d4:	83 ec 4c             	sub    esp,0x4c
c00096d7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00096db:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00096de:	e8 a7 ff ff ff       	call   c000968a <int_to_fp>
c00096e3:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c00096e6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00096ea:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00096ee:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c00096f2:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c00096f5:	99                   	cdq    
c00096f6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00096fe:	f7 fb                	idiv   ebx
c0009700:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009708:	89 da                	mov    edx,ebx
c000970a:	0f af d0             	imul   edx,eax
c000970d:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009711:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009715:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009719:	29 c2                	sub    edx,eax
c000971b:	8d 2c 96             	lea    ebp,[esi+edx*4]
c000971e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009722:	83 c5 04             	add    ebp,0x4
c0009725:	e8 6e ff ff ff       	call   c0009698 <fp_to_double>
c000972a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000972e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009732:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009736:	e8 53 ff ff ff       	call   c000968e <fp_to_int>
c000973b:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c000973e:	52                   	push   edx
c000973f:	52                   	push   edx
c0009740:	51                   	push   ecx
c0009741:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009745:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009749:	e8 fa c1 01 00       	call   c0025948 <__subsf3>
c000974e:	89 04 24             	mov    DWORD PTR [esp],eax
c0009751:	e8 d1 d8 01 00       	call   c0027027 <__extendsfdf2>
c0009756:	83 c4 10             	add    esp,0x10
c0009759:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000975d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009761:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009765:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009769:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000976d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009771:	e8 ba ce 01 00       	call   c0026630 <__muldf3>
c0009776:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000977a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000977e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009781:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009785:	e8 9d d8 01 00       	call   c0027027 <__extendsfdf2>
c000978a:	83 c4 10             	add    esp,0x10
c000978d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009791:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009795:	52                   	push   edx
c0009796:	50                   	push   eax
c0009797:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000979b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000979f:	e8 0f c8 01 00       	call   c0025fb3 <__adddf3>
c00097a4:	59                   	pop    ecx
c00097a5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00097a9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00097ad:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00097b3:	e8 6f d8 01 00       	call   c0027027 <__extendsfdf2>
c00097b8:	83 c4 10             	add    esp,0x10
c00097bb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00097bf:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00097c3:	52                   	push   edx
c00097c4:	50                   	push   eax
c00097c5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00097c9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00097cd:	e8 5e ce 01 00       	call   c0026630 <__muldf3>
c00097d2:	83 c4 10             	add    esp,0x10
c00097d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00097d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00097dd:	52                   	push   edx
c00097de:	50                   	push   eax
c00097df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00097e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00097e7:	e8 c7 c7 01 00       	call   c0025fb3 <__adddf3>
c00097ec:	83 c4 10             	add    esp,0x10
c00097ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00097f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00097f7:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c00097fb:	0f 89 1d ff ff ff    	jns    c000971e <calc_output_single+0x52>
c0009801:	89 d9                	mov    ecx,ebx
c0009803:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009807:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000980b:	89 dd                	mov    ebp,ebx
c000980d:	29 c8                	sub    eax,ecx
c000980f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009817:	99                   	cdq    
c0009818:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009820:	f7 fb                	idiv   ebx
c0009822:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009826:	0f af e8             	imul   ebp,eax
c0009829:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c000982d:	01 cd                	add    ebp,ecx
c000982f:	8d 34 86             	lea    esi,[esi+eax*4]
c0009832:	89 e8                	mov    eax,ebp
c0009834:	83 ee 04             	sub    esi,0x4
c0009837:	e8 5c fe ff ff       	call   c0009698 <fp_to_double>
c000983c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009840:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009844:	89 e8                	mov    eax,ebp
c0009846:	29 dd                	sub    ebp,ebx
c0009848:	e8 41 fe ff ff       	call   c000968e <fp_to_int>
c000984d:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009850:	52                   	push   edx
c0009851:	52                   	push   edx
c0009852:	51                   	push   ecx
c0009853:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009857:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c000985b:	e8 e8 c0 01 00       	call   c0025948 <__subsf3>
c0009860:	89 04 24             	mov    DWORD PTR [esp],eax
c0009863:	e8 bf d7 01 00       	call   c0027027 <__extendsfdf2>
c0009868:	83 c4 10             	add    esp,0x10
c000986b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000986f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009873:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009877:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000987b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000987f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009883:	e8 a8 cd 01 00       	call   c0026630 <__muldf3>
c0009888:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000988c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009890:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009893:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009897:	e8 8b d7 01 00       	call   c0027027 <__extendsfdf2>
c000989c:	83 c4 10             	add    esp,0x10
c000989f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00098a3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00098a7:	52                   	push   edx
c00098a8:	50                   	push   eax
c00098a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098ad:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098b1:	e8 fd c6 01 00       	call   c0025fb3 <__adddf3>
c00098b6:	59                   	pop    ecx
c00098b7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00098bb:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00098bf:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c00098c5:	e8 5d d7 01 00       	call   c0027027 <__extendsfdf2>
c00098ca:	83 c4 10             	add    esp,0x10
c00098cd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00098d1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00098d5:	52                   	push   edx
c00098d6:	50                   	push   eax
c00098d7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098db:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098df:	e8 4c cd 01 00       	call   c0026630 <__muldf3>
c00098e4:	83 c4 10             	add    esp,0x10
c00098e7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00098eb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00098ef:	52                   	push   edx
c00098f0:	50                   	push   eax
c00098f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00098f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00098f9:	e8 b5 c6 01 00       	call   c0025fb3 <__adddf3>
c00098fe:	83 c4 10             	add    esp,0x10
c0009901:	85 ed                	test   ebp,ebp
c0009903:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009907:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000990b:	0f 8f 21 ff ff ff    	jg     c0009832 <calc_output_single+0x166>
c0009911:	52                   	push   edx
c0009912:	50                   	push   eax
c0009913:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009917:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000991b:	e8 93 c6 01 00       	call   c0025fb3 <__adddf3>
c0009920:	83 c4 5c             	add    esp,0x5c
c0009923:	5b                   	pop    ebx
c0009924:	5e                   	pop    esi
c0009925:	5f                   	pop    edi
c0009926:	5d                   	pop    ebp
c0009927:	c3                   	ret    

c0009928 <calc_output_stereo>:
c0009928:	55                   	push   ebp
c0009929:	89 cd                	mov    ebp,ecx
c000992b:	57                   	push   edi
c000992c:	56                   	push   esi
c000992d:	53                   	push   ebx
c000992e:	89 c3                	mov    ebx,eax
c0009930:	83 ec 6c             	sub    esp,0x6c
c0009933:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009937:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000993e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009945:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009949:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000994d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009950:	e8 35 fd ff ff       	call   c000968a <int_to_fp>
c0009955:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000995d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009961:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009969:	29 c8                	sub    eax,ecx
c000996b:	99                   	cdq    
c000996c:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009970:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009974:	0f af d0             	imul   edx,eax
c0009977:	8d 34 0a             	lea    esi,[edx+ecx*1]
c000997a:	31 d2                	xor    edx,edx
c000997c:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009980:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009984:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009987:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000998b:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c000998e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009992:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009996:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009999:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000999e:	29 c1                	sub    ecx,eax
c00099a0:	31 c0                	xor    eax,eax
c00099a2:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c00099a5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00099a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00099ad:	83 c7 08             	add    edi,0x8
c00099b0:	e8 e3 fc ff ff       	call   c0009698 <fp_to_double>
c00099b5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00099b9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00099bd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00099c1:	e8 c8 fc ff ff       	call   c000968e <fp_to_int>
c00099c6:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c00099c9:	52                   	push   edx
c00099ca:	52                   	push   edx
c00099cb:	51                   	push   ecx
c00099cc:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c00099d0:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c00099d4:	e8 6f bf 01 00       	call   c0025948 <__subsf3>
c00099d9:	89 04 24             	mov    DWORD PTR [esp],eax
c00099dc:	e8 46 d6 01 00       	call   c0027027 <__extendsfdf2>
c00099e1:	83 c4 10             	add    esp,0x10
c00099e4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00099e8:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c00099ec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00099f0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00099f4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00099f8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00099fc:	e8 2f cc 01 00       	call   c0026630 <__muldf3>
c0009a01:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009a05:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009a09:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009a0c:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009a10:	e8 12 d6 01 00       	call   c0027027 <__extendsfdf2>
c0009a15:	83 c4 10             	add    esp,0x10
c0009a18:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a1c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a20:	52                   	push   edx
c0009a21:	50                   	push   eax
c0009a22:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009a26:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009a2a:	e8 84 c5 01 00       	call   c0025fb3 <__adddf3>
c0009a2f:	59                   	pop    ecx
c0009a30:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009a34:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009a38:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009a3e:	e8 e4 d5 01 00       	call   c0027027 <__extendsfdf2>
c0009a43:	83 c4 10             	add    esp,0x10
c0009a46:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a4a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a4e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a52:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a56:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a5a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a5e:	e8 cd cb 01 00       	call   c0026630 <__muldf3>
c0009a63:	83 c4 10             	add    esp,0x10
c0009a66:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a6a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a6e:	52                   	push   edx
c0009a6f:	50                   	push   eax
c0009a70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a78:	e8 36 c5 01 00       	call   c0025fb3 <__adddf3>
c0009a7d:	59                   	pop    ecx
c0009a7e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009a82:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009a86:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009a8c:	e8 96 d5 01 00       	call   c0027027 <__extendsfdf2>
c0009a91:	83 c4 10             	add    esp,0x10
c0009a94:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a98:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a9c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009aa0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009aa4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009aa8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009aac:	e8 7f cb 01 00       	call   c0026630 <__muldf3>
c0009ab1:	83 c4 10             	add    esp,0x10
c0009ab4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009ab8:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009abc:	52                   	push   edx
c0009abd:	50                   	push   eax
c0009abe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ac2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ac6:	e8 e8 c4 01 00       	call   c0025fb3 <__adddf3>
c0009acb:	83 c4 10             	add    esp,0x10
c0009ace:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009ad2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ad6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009ada:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009ade:	0f 89 c5 fe ff ff    	jns    c00099a9 <calc_output_stereo+0x81>
c0009ae4:	29 e9                	sub    ecx,ebp
c0009ae6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009aea:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009aee:	29 c8                	sub    eax,ecx
c0009af0:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009af8:	99                   	cdq    
c0009af9:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009afd:	31 d2                	xor    edx,edx
c0009aff:	0f af f8             	imul   edi,eax
c0009b02:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b06:	40                   	inc    eax
c0009b07:	01 cf                	add    edi,ecx
c0009b09:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009b0e:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009b12:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009b1a:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009b1d:	31 c0                	xor    eax,eax
c0009b1f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b23:	89 f8                	mov    eax,edi
c0009b25:	83 eb 08             	sub    ebx,0x8
c0009b28:	e8 6b fb ff ff       	call   c0009698 <fp_to_double>
c0009b2d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009b31:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009b35:	89 f8                	mov    eax,edi
c0009b37:	e8 52 fb ff ff       	call   c000968e <fp_to_int>
c0009b3c:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009b3f:	52                   	push   edx
c0009b40:	52                   	push   edx
c0009b41:	55                   	push   ebp
c0009b42:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009b46:	e8 fd bd 01 00       	call   c0025948 <__subsf3>
c0009b4b:	89 04 24             	mov    DWORD PTR [esp],eax
c0009b4e:	e8 d4 d4 01 00       	call   c0027027 <__extendsfdf2>
c0009b53:	83 c4 10             	add    esp,0x10
c0009b56:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b5a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009b5e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009b62:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009b66:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009b6a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009b6e:	e8 bd ca 01 00       	call   c0026630 <__muldf3>
c0009b73:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009b76:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b7a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b7e:	e8 a4 d4 01 00       	call   c0027027 <__extendsfdf2>
c0009b83:	83 c4 10             	add    esp,0x10
c0009b86:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b8a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009b8e:	52                   	push   edx
c0009b8f:	50                   	push   eax
c0009b90:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009b94:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009b98:	e8 16 c4 01 00       	call   c0025fb3 <__adddf3>
c0009b9d:	59                   	pop    ecx
c0009b9e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009ba2:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009ba6:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009bac:	e8 76 d4 01 00       	call   c0027027 <__extendsfdf2>
c0009bb1:	83 c4 10             	add    esp,0x10
c0009bb4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bb8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bbc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009bc0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009bc4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009bc8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009bcc:	e8 5f ca 01 00       	call   c0026630 <__muldf3>
c0009bd1:	83 c4 10             	add    esp,0x10
c0009bd4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bd8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bdc:	52                   	push   edx
c0009bdd:	50                   	push   eax
c0009bde:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009be2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009be6:	e8 c8 c3 01 00       	call   c0025fb3 <__adddf3>
c0009beb:	5d                   	pop    ebp
c0009bec:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009bf0:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009bf4:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009bfa:	e8 28 d4 01 00       	call   c0027027 <__extendsfdf2>
c0009bff:	83 c4 10             	add    esp,0x10
c0009c02:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009c06:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009c0a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c0e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c12:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c16:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c1a:	e8 11 ca 01 00       	call   c0026630 <__muldf3>
c0009c1f:	83 c4 10             	add    esp,0x10
c0009c22:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009c26:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009c2a:	52                   	push   edx
c0009c2b:	50                   	push   eax
c0009c2c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c30:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c34:	e8 7a c3 01 00       	call   c0025fb3 <__adddf3>
c0009c39:	83 c4 10             	add    esp,0x10
c0009c3c:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009c40:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009c44:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009c48:	85 ff                	test   edi,edi
c0009c4a:	0f 8f d3 fe ff ff    	jg     c0009b23 <calc_output_stereo+0x1fb>
c0009c50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c60:	e8 4e c3 01 00       	call   c0025fb3 <__adddf3>
c0009c65:	83 c4 10             	add    esp,0x10
c0009c68:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c6c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009c70:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c74:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c78:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c80:	e8 ab c9 01 00       	call   c0026630 <__muldf3>
c0009c85:	59                   	pop    ecx
c0009c86:	5b                   	pop    ebx
c0009c87:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009c8b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009c8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c97:	e8 67 d2 01 00       	call   c0026f03 <__truncdfsf2>
c0009c9c:	83 c4 10             	add    esp,0x10
c0009c9f:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ca6:	89 03                	mov    DWORD PTR [ebx],eax
c0009ca8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cb0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cb4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cb8:	e8 f6 c2 01 00       	call   c0025fb3 <__adddf3>
c0009cbd:	83 c4 10             	add    esp,0x10
c0009cc0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009cc4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009cc8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ccc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009cd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cd4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cd8:	e8 53 c9 01 00       	call   c0026630 <__muldf3>
c0009cdd:	5e                   	pop    esi
c0009cde:	5f                   	pop    edi
c0009cdf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ce3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009ce7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ceb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cef:	e8 0f d2 01 00       	call   c0026f03 <__truncdfsf2>
c0009cf4:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009cfb:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009cfe:	83 c4 7c             	add    esp,0x7c
c0009d01:	5b                   	pop    ebx
c0009d02:	5e                   	pop    esi
c0009d03:	5f                   	pop    edi
c0009d04:	5d                   	pop    ebp
c0009d05:	c3                   	ret    

c0009d06 <calc_output_quad>:
c0009d06:	55                   	push   ebp
c0009d07:	57                   	push   edi
c0009d08:	56                   	push   esi
c0009d09:	89 c6                	mov    esi,eax
c0009d0b:	53                   	push   ebx
c0009d0c:	83 ec 7c             	sub    esp,0x7c
c0009d0f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009d13:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009d17:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009d1e:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009d25:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009d29:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009d2d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009d30:	e8 55 f9 ff ff       	call   c000968a <int_to_fp>
c0009d35:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009d38:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009d3b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009d3f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009d43:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009d47:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009d4b:	99                   	cdq    
c0009d4c:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009d50:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d54:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009d57:	31 d2                	xor    edx,edx
c0009d59:	0f af d8             	imul   ebx,eax
c0009d5c:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009d64:	0f af c7             	imul   eax,edi
c0009d67:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009d6b:	29 c1                	sub    ecx,eax
c0009d6d:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009d75:	31 c0                	xor    eax,eax
c0009d77:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009d7a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d7e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d82:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009d86:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009d8a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d8e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d92:	89 d8                	mov    eax,ebx
c0009d94:	83 c7 10             	add    edi,0x10
c0009d97:	e8 fc f8 ff ff       	call   c0009698 <fp_to_double>
c0009d9c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009da0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009da4:	89 d8                	mov    eax,ebx
c0009da6:	e8 e3 f8 ff ff       	call   c000968e <fp_to_int>
c0009dab:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009daf:	52                   	push   edx
c0009db0:	52                   	push   edx
c0009db1:	51                   	push   ecx
c0009db2:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009db6:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009dba:	e8 89 bb 01 00       	call   c0025948 <__subsf3>
c0009dbf:	89 04 24             	mov    DWORD PTR [esp],eax
c0009dc2:	e8 60 d2 01 00       	call   c0027027 <__extendsfdf2>
c0009dc7:	83 c4 10             	add    esp,0x10
c0009dca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009dce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009dd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dda:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009dde:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009de2:	e8 49 c8 01 00       	call   c0026630 <__muldf3>
c0009de7:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0009deb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009def:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009df2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009df6:	e8 2c d2 01 00       	call   c0027027 <__extendsfdf2>
c0009dfb:	83 c4 10             	add    esp,0x10
c0009dfe:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e02:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e06:	52                   	push   edx
c0009e07:	50                   	push   eax
c0009e08:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e0c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e10:	e8 9e c1 01 00       	call   c0025fb3 <__adddf3>
c0009e15:	59                   	pop    ecx
c0009e16:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e1a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e1e:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c0009e24:	e8 fe d1 01 00       	call   c0027027 <__extendsfdf2>
c0009e29:	83 c4 10             	add    esp,0x10
c0009e2c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e30:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e3c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e40:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e44:	e8 e7 c7 01 00       	call   c0026630 <__muldf3>
c0009e49:	83 c4 10             	add    esp,0x10
c0009e4c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e50:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e54:	52                   	push   edx
c0009e55:	50                   	push   eax
c0009e56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009e5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009e5e:	e8 50 c1 01 00       	call   c0025fb3 <__adddf3>
c0009e63:	59                   	pop    ecx
c0009e64:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0009e68:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0009e6c:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c0009e72:	e8 b0 d1 01 00       	call   c0027027 <__extendsfdf2>
c0009e77:	83 c4 10             	add    esp,0x10
c0009e7a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e7e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e8a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e8e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e92:	e8 99 c7 01 00       	call   c0026630 <__muldf3>
c0009e97:	83 c4 10             	add    esp,0x10
c0009e9a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e9e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ea2:	52                   	push   edx
c0009ea3:	50                   	push   eax
c0009ea4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ea8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009eac:	e8 02 c1 01 00       	call   c0025fb3 <__adddf3>
c0009eb1:	59                   	pop    ecx
c0009eb2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0009eb6:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0009eba:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009ec0:	e8 62 d1 01 00       	call   c0027027 <__extendsfdf2>
c0009ec5:	83 c4 10             	add    esp,0x10
c0009ec8:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009ecc:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ed0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ed4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ed8:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009edc:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ee0:	e8 4b c7 01 00       	call   c0026630 <__muldf3>
c0009ee5:	83 c4 10             	add    esp,0x10
c0009ee8:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009eec:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ef0:	52                   	push   edx
c0009ef1:	50                   	push   eax
c0009ef2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009ef6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009efa:	e8 b4 c0 01 00       	call   c0025fb3 <__adddf3>
c0009eff:	59                   	pop    ecx
c0009f00:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009f04:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009f08:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009f0e:	e8 14 d1 01 00       	call   c0027027 <__extendsfdf2>
c0009f13:	83 c4 10             	add    esp,0x10
c0009f16:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f1a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f26:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f2a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f2e:	e8 fd c6 01 00       	call   c0026630 <__muldf3>
c0009f33:	83 c4 10             	add    esp,0x10
c0009f36:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009f3a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009f3e:	52                   	push   edx
c0009f3f:	50                   	push   eax
c0009f40:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009f44:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009f48:	e8 66 c0 01 00       	call   c0025fb3 <__adddf3>
c0009f4d:	83 c4 10             	add    esp,0x10
c0009f50:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009f54:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009f58:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c0009f5c:	0f 89 30 fe ff ff    	jns    c0009d92 <calc_output_quad+0x8c>
c0009f62:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0009f66:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009f6a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f6e:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0009f72:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0009f7a:	29 c8                	sub    eax,ecx
c0009f7c:	99                   	cdq    
c0009f7d:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009f81:	31 d2                	xor    edx,edx
c0009f83:	0f af d8             	imul   ebx,eax
c0009f86:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009f8a:	40                   	inc    eax
c0009f8b:	01 cb                	add    ebx,ecx
c0009f8d:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0009f92:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009f96:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c0009f9a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009f9e:	8d 34 86             	lea    esi,[esi+eax*4]
c0009fa1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0009fa9:	31 c0                	xor    eax,eax
c0009fab:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009faf:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009fb3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009fb7:	89 d8                	mov    eax,ebx
c0009fb9:	83 ee 10             	sub    esi,0x10
c0009fbc:	e8 d7 f6 ff ff       	call   c0009698 <fp_to_double>
c0009fc1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009fc5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fc9:	89 d8                	mov    eax,ebx
c0009fcb:	e8 be f6 ff ff       	call   c000968e <fp_to_int>
c0009fd0:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c0009fd4:	52                   	push   edx
c0009fd5:	52                   	push   edx
c0009fd6:	57                   	push   edi
c0009fd7:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009fdb:	e8 68 b9 01 00       	call   c0025948 <__subsf3>
c0009fe0:	89 04 24             	mov    DWORD PTR [esp],eax
c0009fe3:	e8 3f d0 01 00       	call   c0027027 <__extendsfdf2>
c0009fe8:	83 c4 10             	add    esp,0x10
c0009feb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009fef:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ff3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ff7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ffb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009fff:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a003:	e8 28 c6 01 00       	call   c0026630 <__muldf3>
c000a008:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a00b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a00f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a013:	e8 0f d0 01 00       	call   c0027027 <__extendsfdf2>
c000a018:	83 c4 10             	add    esp,0x10
c000a01b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a01f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a023:	52                   	push   edx
c000a024:	50                   	push   eax
c000a025:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a029:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a02d:	e8 81 bf 01 00       	call   c0025fb3 <__adddf3>
c000a032:	59                   	pop    ecx
c000a033:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a037:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a03b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a041:	e8 e1 cf 01 00       	call   c0027027 <__extendsfdf2>
c000a046:	83 c4 10             	add    esp,0x10
c000a049:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a04d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a051:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a055:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a059:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a05d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a061:	e8 ca c5 01 00       	call   c0026630 <__muldf3>
c000a066:	83 c4 10             	add    esp,0x10
c000a069:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a06d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a071:	52                   	push   edx
c000a072:	50                   	push   eax
c000a073:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a077:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a07b:	e8 33 bf 01 00       	call   c0025fb3 <__adddf3>
c000a080:	5f                   	pop    edi
c000a081:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a085:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a089:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a08f:	e8 93 cf 01 00       	call   c0027027 <__extendsfdf2>
c000a094:	83 c4 10             	add    esp,0x10
c000a097:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a09b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a09f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0ab:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0af:	e8 7c c5 01 00       	call   c0026630 <__muldf3>
c000a0b4:	83 c4 10             	add    esp,0x10
c000a0b7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0bb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0bf:	52                   	push   edx
c000a0c0:	50                   	push   eax
c000a0c1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a0c5:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a0c9:	e8 e5 be 01 00       	call   c0025fb3 <__adddf3>
c000a0ce:	59                   	pop    ecx
c000a0cf:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a0d3:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a0d7:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a0dd:	e8 45 cf 01 00       	call   c0027027 <__extendsfdf2>
c000a0e2:	83 c4 10             	add    esp,0x10
c000a0e5:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0e9:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0f5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0fd:	e8 2e c5 01 00       	call   c0026630 <__muldf3>
c000a102:	83 c4 10             	add    esp,0x10
c000a105:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a109:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a10d:	52                   	push   edx
c000a10e:	50                   	push   eax
c000a10f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a113:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a117:	e8 97 be 01 00       	call   c0025fb3 <__adddf3>
c000a11c:	5f                   	pop    edi
c000a11d:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a121:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a125:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a12b:	e8 f7 ce 01 00       	call   c0027027 <__extendsfdf2>
c000a130:	83 c4 10             	add    esp,0x10
c000a133:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a137:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a13b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a13f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a143:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a147:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a14b:	e8 e0 c4 01 00       	call   c0026630 <__muldf3>
c000a150:	83 c4 10             	add    esp,0x10
c000a153:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a157:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a15b:	52                   	push   edx
c000a15c:	50                   	push   eax
c000a15d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a161:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a165:	e8 49 be 01 00       	call   c0025fb3 <__adddf3>
c000a16a:	83 c4 10             	add    esp,0x10
c000a16d:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a171:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a175:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a179:	85 db                	test   ebx,ebx
c000a17b:	0f 8f 36 fe ff ff    	jg     c0009fb7 <calc_output_quad+0x2b1>
c000a181:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a185:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a189:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a18d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a191:	e8 1d be 01 00       	call   c0025fb3 <__adddf3>
c000a196:	83 c4 10             	add    esp,0x10
c000a199:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a19d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a1a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1a5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1b1:	e8 7a c4 01 00       	call   c0026630 <__muldf3>
c000a1b6:	59                   	pop    ecx
c000a1b7:	5b                   	pop    ebx
c000a1b8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a1bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a1c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1c8:	e8 36 cd 01 00       	call   c0026f03 <__truncdfsf2>
c000a1cd:	83 c4 10             	add    esp,0x10
c000a1d0:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a1d7:	89 06                	mov    DWORD PTR [esi],eax
c000a1d9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a1dd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a1e1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a1e5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a1e9:	e8 c5 bd 01 00       	call   c0025fb3 <__adddf3>
c000a1ee:	83 c4 10             	add    esp,0x10
c000a1f1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a1f5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a1f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a201:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a205:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a209:	e8 22 c4 01 00       	call   c0026630 <__muldf3>
c000a20e:	5e                   	pop    esi
c000a20f:	5f                   	pop    edi
c000a210:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a214:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a218:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a21c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a220:	e8 de cc 01 00       	call   c0026f03 <__truncdfsf2>
c000a225:	83 c4 10             	add    esp,0x10
c000a228:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a22f:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a232:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a236:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a23a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a23e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a242:	e8 6c bd 01 00       	call   c0025fb3 <__adddf3>
c000a247:	83 c4 10             	add    esp,0x10
c000a24a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a24e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a252:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a256:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a25a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a25e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a262:	e8 c9 c3 01 00       	call   c0026630 <__muldf3>
c000a267:	5d                   	pop    ebp
c000a268:	59                   	pop    ecx
c000a269:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a26d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a271:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a275:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a279:	e8 85 cc 01 00       	call   c0026f03 <__truncdfsf2>
c000a27e:	83 c4 10             	add    esp,0x10
c000a281:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a288:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a28b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a28f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a293:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a297:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a29b:	e8 13 bd 01 00       	call   c0025fb3 <__adddf3>
c000a2a0:	83 c4 10             	add    esp,0x10
c000a2a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a2a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a2ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2bb:	e8 70 c3 01 00       	call   c0026630 <__muldf3>
c000a2c0:	5b                   	pop    ebx
c000a2c1:	5e                   	pop    esi
c000a2c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a2c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a2ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2d2:	e8 2c cc 01 00       	call   c0026f03 <__truncdfsf2>
c000a2d7:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a2de:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a2e1:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a2e7:	5b                   	pop    ebx
c000a2e8:	5e                   	pop    esi
c000a2e9:	5f                   	pop    edi
c000a2ea:	5d                   	pop    ebp
c000a2eb:	c3                   	ret    

c000a2ec <calc_output_hex>:
c000a2ec:	55                   	push   ebp
c000a2ed:	89 cd                	mov    ebp,ecx
c000a2ef:	57                   	push   edi
c000a2f0:	56                   	push   esi
c000a2f1:	53                   	push   ebx
c000a2f2:	89 c3                	mov    ebx,eax
c000a2f4:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a2fa:	89 14 24             	mov    DWORD PTR [esp],edx
c000a2fd:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a304:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a30b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a30f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a313:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a316:	e8 6f f3 ff ff       	call   c000968a <int_to_fp>
c000a31b:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a31e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a322:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a325:	29 c8                	sub    eax,ecx
c000a327:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a32b:	99                   	cdq    
c000a32c:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a334:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a337:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a33f:	0f af f8             	imul   edi,eax
c000a342:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a345:	01 cf                	add    edi,ecx
c000a347:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a34b:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a34e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a352:	0f af c2             	imul   eax,edx
c000a355:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a359:	29 c1                	sub    ecx,eax
c000a35b:	31 d2                	xor    edx,edx
c000a35d:	31 c0                	xor    eax,eax
c000a35f:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a362:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a366:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a36a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a36e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a372:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a376:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a37a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a37e:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a382:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a386:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a38a:	89 f8                	mov    eax,edi
c000a38c:	e8 07 f3 ff ff       	call   c0009698 <fp_to_double>
c000a391:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a395:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a399:	89 f8                	mov    eax,edi
c000a39b:	e8 ee f2 ff ff       	call   c000968e <fp_to_int>
c000a3a0:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a3a4:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a3a7:	52                   	push   edx
c000a3a8:	52                   	push   edx
c000a3a9:	51                   	push   ecx
c000a3aa:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a3ae:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a3b5:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a3b9:	e8 8a b5 01 00       	call   c0025948 <__subsf3>
c000a3be:	89 04 24             	mov    DWORD PTR [esp],eax
c000a3c1:	e8 61 cc 01 00       	call   c0027027 <__extendsfdf2>
c000a3c6:	83 c4 10             	add    esp,0x10
c000a3c9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a3cd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a3d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3d9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a3dd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a3e1:	e8 4a c2 01 00       	call   c0026630 <__muldf3>
c000a3e6:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a3ea:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a3ee:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a3f1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a3f5:	e8 2d cc 01 00       	call   c0027027 <__extendsfdf2>
c000a3fa:	83 c4 10             	add    esp,0x10
c000a3fd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a401:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a405:	52                   	push   edx
c000a406:	50                   	push   eax
c000a407:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a40b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a40f:	e8 9f bb 01 00       	call   c0025fb3 <__adddf3>
c000a414:	59                   	pop    ecx
c000a415:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a419:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a41d:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a423:	e8 ff cb 01 00       	call   c0027027 <__extendsfdf2>
c000a428:	83 c4 10             	add    esp,0x10
c000a42b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a42f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a433:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a437:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a43b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a43f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a443:	e8 e8 c1 01 00       	call   c0026630 <__muldf3>
c000a448:	83 c4 10             	add    esp,0x10
c000a44b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a44f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a453:	52                   	push   edx
c000a454:	50                   	push   eax
c000a455:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a459:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a45d:	e8 51 bb 01 00       	call   c0025fb3 <__adddf3>
c000a462:	59                   	pop    ecx
c000a463:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a467:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a46b:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a471:	e8 b1 cb 01 00       	call   c0027027 <__extendsfdf2>
c000a476:	83 c4 10             	add    esp,0x10
c000a479:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a47d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a481:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a485:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a489:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a48d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a491:	e8 9a c1 01 00       	call   c0026630 <__muldf3>
c000a496:	83 c4 10             	add    esp,0x10
c000a499:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a49d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4a1:	52                   	push   edx
c000a4a2:	50                   	push   eax
c000a4a3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4ab:	e8 03 bb 01 00       	call   c0025fb3 <__adddf3>
c000a4b0:	59                   	pop    ecx
c000a4b1:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a4b5:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a4b9:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a4bf:	e8 63 cb 01 00       	call   c0027027 <__extendsfdf2>
c000a4c4:	83 c4 10             	add    esp,0x10
c000a4c7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4cb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4db:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4df:	e8 4c c1 01 00       	call   c0026630 <__muldf3>
c000a4e4:	83 c4 10             	add    esp,0x10
c000a4e7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4eb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4ef:	52                   	push   edx
c000a4f0:	50                   	push   eax
c000a4f1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a4f5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a4f9:	e8 b5 ba 01 00       	call   c0025fb3 <__adddf3>
c000a4fe:	59                   	pop    ecx
c000a4ff:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a503:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a507:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a50d:	e8 15 cb 01 00       	call   c0027027 <__extendsfdf2>
c000a512:	83 c4 10             	add    esp,0x10
c000a515:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a519:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a51d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a521:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a525:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a529:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a52d:	e8 fe c0 01 00       	call   c0026630 <__muldf3>
c000a532:	83 c4 10             	add    esp,0x10
c000a535:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a539:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a53d:	52                   	push   edx
c000a53e:	50                   	push   eax
c000a53f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a543:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a547:	e8 67 ba 01 00       	call   c0025fb3 <__adddf3>
c000a54c:	59                   	pop    ecx
c000a54d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a551:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a555:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a55b:	e8 c7 ca 01 00       	call   c0027027 <__extendsfdf2>
c000a560:	83 c4 10             	add    esp,0x10
c000a563:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a567:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a56b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a56f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a573:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a577:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a57b:	e8 b0 c0 01 00       	call   c0026630 <__muldf3>
c000a580:	83 c4 10             	add    esp,0x10
c000a583:	83 c6 18             	add    esi,0x18
c000a586:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a58a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a58e:	52                   	push   edx
c000a58f:	50                   	push   eax
c000a590:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a594:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a598:	e8 16 ba 01 00       	call   c0025fb3 <__adddf3>
c000a59d:	59                   	pop    ecx
c000a59e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a5a2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a5a6:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a5ac:	e8 76 ca 01 00       	call   c0027027 <__extendsfdf2>
c000a5b1:	83 c4 10             	add    esp,0x10
c000a5b4:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5b8:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5c4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5c8:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5cc:	e8 5f c0 01 00       	call   c0026630 <__muldf3>
c000a5d1:	83 c4 10             	add    esp,0x10
c000a5d4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5d8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5dc:	52                   	push   edx
c000a5dd:	50                   	push   eax
c000a5de:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a5e2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a5e6:	e8 c8 b9 01 00       	call   c0025fb3 <__adddf3>
c000a5eb:	83 c4 10             	add    esp,0x10
c000a5ee:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a5f2:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a5f6:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a5f9:	0f 89 8b fd ff ff    	jns    c000a38a <calc_output_hex+0x9e>
c000a5ff:	31 f6                	xor    esi,esi
c000a601:	31 ff                	xor    edi,edi
c000a603:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a607:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a60a:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a60e:	29 e9                	sub    ecx,ebp
c000a610:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a614:	29 c8                	sub    eax,ecx
c000a616:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a619:	99                   	cdq    
c000a61a:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a61e:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a621:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a625:	0f af e8             	imul   ebp,eax
c000a628:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a62c:	40                   	inc    eax
c000a62d:	01 cd                	add    ebp,ecx
c000a62f:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a634:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a638:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a63c:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a640:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a643:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a647:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a64b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a64f:	89 e8                	mov    eax,ebp
c000a651:	e8 42 f0 ff ff       	call   c0009698 <fp_to_double>
c000a656:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a65a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a65e:	89 e8                	mov    eax,ebp
c000a660:	e8 29 f0 ff ff       	call   c000968e <fp_to_int>
c000a665:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a669:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a66c:	52                   	push   edx
c000a66d:	52                   	push   edx
c000a66e:	51                   	push   ecx
c000a66f:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a676:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a67d:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a681:	e8 c2 b2 01 00       	call   c0025948 <__subsf3>
c000a686:	89 04 24             	mov    DWORD PTR [esp],eax
c000a689:	e8 99 c9 01 00       	call   c0027027 <__extendsfdf2>
c000a68e:	83 c4 10             	add    esp,0x10
c000a691:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a695:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a699:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6a1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a6a5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a6a9:	e8 82 bf 01 00       	call   c0026630 <__muldf3>
c000a6ae:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a6b5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a6b9:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a6bc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a6c0:	e8 62 c9 01 00       	call   c0027027 <__extendsfdf2>
c000a6c5:	83 c4 10             	add    esp,0x10
c000a6c8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a6cc:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a6d0:	52                   	push   edx
c000a6d1:	50                   	push   eax
c000a6d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6da:	e8 d4 b8 01 00       	call   c0025fb3 <__adddf3>
c000a6df:	59                   	pop    ecx
c000a6e0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a6e4:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a6e8:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a6ee:	e8 34 c9 01 00       	call   c0027027 <__extendsfdf2>
c000a6f3:	83 c4 10             	add    esp,0x10
c000a6f6:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a6fa:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a6fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a702:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a706:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a70a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a70e:	e8 1d bf 01 00       	call   c0026630 <__muldf3>
c000a713:	83 c4 10             	add    esp,0x10
c000a716:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a71a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a71e:	52                   	push   edx
c000a71f:	50                   	push   eax
c000a720:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a724:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a728:	e8 86 b8 01 00       	call   c0025fb3 <__adddf3>
c000a72d:	59                   	pop    ecx
c000a72e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a732:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a736:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a73c:	e8 e6 c8 01 00       	call   c0027027 <__extendsfdf2>
c000a741:	83 c4 10             	add    esp,0x10
c000a744:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a748:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a74c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a750:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a754:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a758:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a75c:	e8 cf be 01 00       	call   c0026630 <__muldf3>
c000a761:	83 c4 10             	add    esp,0x10
c000a764:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a768:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a76c:	52                   	push   edx
c000a76d:	50                   	push   eax
c000a76e:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a772:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a776:	e8 38 b8 01 00       	call   c0025fb3 <__adddf3>
c000a77b:	59                   	pop    ecx
c000a77c:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a780:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a784:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a78a:	e8 98 c8 01 00       	call   c0027027 <__extendsfdf2>
c000a78f:	83 c4 10             	add    esp,0x10
c000a792:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a796:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a79a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a79e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7a2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7a6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7aa:	e8 81 be 01 00       	call   c0026630 <__muldf3>
c000a7af:	83 c4 10             	add    esp,0x10
c000a7b2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7b6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7ba:	52                   	push   edx
c000a7bb:	50                   	push   eax
c000a7bc:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7c0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7c4:	e8 ea b7 01 00       	call   c0025fb3 <__adddf3>
c000a7c9:	59                   	pop    ecx
c000a7ca:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a7ce:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a7d2:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a7d8:	e8 4a c8 01 00       	call   c0027027 <__extendsfdf2>
c000a7dd:	83 c4 10             	add    esp,0x10
c000a7e0:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7e4:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7f0:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7f4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7f8:	e8 33 be 01 00       	call   c0026630 <__muldf3>
c000a7fd:	83 c4 10             	add    esp,0x10
c000a800:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a804:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a808:	52                   	push   edx
c000a809:	50                   	push   eax
c000a80a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a80e:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a812:	e8 9c b7 01 00       	call   c0025fb3 <__adddf3>
c000a817:	59                   	pop    ecx
c000a818:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a81c:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a820:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000a826:	e8 fc c7 01 00       	call   c0027027 <__extendsfdf2>
c000a82b:	83 c4 10             	add    esp,0x10
c000a82e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a832:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a836:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a83a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a83e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a842:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a846:	e8 e5 bd 01 00       	call   c0026630 <__muldf3>
c000a84b:	83 c4 10             	add    esp,0x10
c000a84e:	83 eb 18             	sub    ebx,0x18
c000a851:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a855:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a859:	52                   	push   edx
c000a85a:	50                   	push   eax
c000a85b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a85f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a863:	e8 4b b7 01 00       	call   c0025fb3 <__adddf3>
c000a868:	59                   	pop    ecx
c000a869:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a86d:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000a871:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000a877:	e8 ab c7 01 00       	call   c0027027 <__extendsfdf2>
c000a87c:	83 c4 10             	add    esp,0x10
c000a87f:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a883:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a887:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a88b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a88f:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a893:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a897:	e8 94 bd 01 00       	call   c0026630 <__muldf3>
c000a89c:	83 c4 10             	add    esp,0x10
c000a89f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8a3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8a7:	52                   	push   edx
c000a8a8:	50                   	push   eax
c000a8a9:	57                   	push   edi
c000a8aa:	56                   	push   esi
c000a8ab:	e8 03 b7 01 00       	call   c0025fb3 <__adddf3>
c000a8b0:	83 c4 10             	add    esp,0x10
c000a8b3:	89 c6                	mov    esi,eax
c000a8b5:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000a8b8:	89 d7                	mov    edi,edx
c000a8ba:	85 ed                	test   ebp,ebp
c000a8bc:	0f 8f 8d fd ff ff    	jg     c000a64f <calc_output_hex+0x363>
c000a8c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8c6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8ce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8d2:	e8 dc b6 01 00       	call   c0025fb3 <__adddf3>
c000a8d7:	83 c4 10             	add    esp,0x10
c000a8da:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8dd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a8e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8f1:	e8 3a bd 01 00       	call   c0026630 <__muldf3>
c000a8f6:	59                   	pop    ecx
c000a8f7:	5b                   	pop    ebx
c000a8f8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a8fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a900:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a904:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a908:	e8 f6 c5 01 00       	call   c0026f03 <__truncdfsf2>
c000a90d:	83 c4 10             	add    esp,0x10
c000a910:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a917:	89 03                	mov    DWORD PTR [ebx],eax
c000a919:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a91d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a921:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a925:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a929:	e8 85 b6 01 00       	call   c0025fb3 <__adddf3>
c000a92e:	83 c4 10             	add    esp,0x10
c000a931:	89 04 24             	mov    DWORD PTR [esp],eax
c000a934:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a938:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a93c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a940:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a944:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a948:	e8 e3 bc 01 00       	call   c0026630 <__muldf3>
c000a94d:	5d                   	pop    ebp
c000a94e:	59                   	pop    ecx
c000a94f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a953:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a957:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a95b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a95f:	e8 9f c5 01 00       	call   c0026f03 <__truncdfsf2>
c000a964:	83 c4 10             	add    esp,0x10
c000a967:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a96e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000a971:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a975:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a979:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a97d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a981:	e8 2d b6 01 00       	call   c0025fb3 <__adddf3>
c000a986:	83 c4 10             	add    esp,0x10
c000a989:	89 04 24             	mov    DWORD PTR [esp],eax
c000a98c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a990:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a994:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a998:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a99c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9a0:	e8 8b bc 01 00       	call   c0026630 <__muldf3>
c000a9a5:	5b                   	pop    ebx
c000a9a6:	5d                   	pop    ebp
c000a9a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a9ab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a9af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9b7:	e8 47 c5 01 00       	call   c0026f03 <__truncdfsf2>
c000a9bc:	83 c4 10             	add    esp,0x10
c000a9bf:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a9c6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000a9c9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a9cd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a9d1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a9d5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a9d9:	e8 d5 b5 01 00       	call   c0025fb3 <__adddf3>
c000a9de:	83 c4 10             	add    esp,0x10
c000a9e1:	89 04 24             	mov    DWORD PTR [esp],eax
c000a9e4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9e8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9ec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9f4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9f8:	e8 33 bc 01 00       	call   c0026630 <__muldf3>
c000a9fd:	59                   	pop    ecx
c000a9fe:	5b                   	pop    ebx
c000a9ff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aa03:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa07:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa0b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa0f:	e8 ef c4 01 00       	call   c0026f03 <__truncdfsf2>
c000aa14:	83 c4 10             	add    esp,0x10
c000aa17:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aa1e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000aa21:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aa25:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aa29:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aa2d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aa31:	e8 7d b5 01 00       	call   c0025fb3 <__adddf3>
c000aa36:	83 c4 10             	add    esp,0x10
c000aa39:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa48:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa4c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa50:	e8 db bb 01 00       	call   c0026630 <__muldf3>
c000aa55:	5d                   	pop    ebp
c000aa56:	59                   	pop    ecx
c000aa57:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aa5b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa5f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa63:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa67:	e8 97 c4 01 00       	call   c0026f03 <__truncdfsf2>
c000aa6c:	83 c4 10             	add    esp,0x10
c000aa6f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aa76:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000aa79:	57                   	push   edi
c000aa7a:	56                   	push   esi
c000aa7b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa7f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa83:	e8 2b b5 01 00       	call   c0025fb3 <__adddf3>
c000aa88:	83 c4 10             	add    esp,0x10
c000aa8b:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa8e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa92:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa96:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa9a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa9e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaa2:	e8 89 bb 01 00       	call   c0026630 <__muldf3>
c000aaa7:	5b                   	pop    ebx
c000aaa8:	5e                   	pop    esi
c000aaa9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aaad:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aab1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aab5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aab9:	e8 45 c4 01 00       	call   c0026f03 <__truncdfsf2>
c000aabe:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000aac5:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000aac8:	81 c4 9c 00 00 00    	add    esp,0x9c
c000aace:	5b                   	pop    ebx
c000aacf:	5e                   	pop    esi
c000aad0:	5f                   	pop    edi
c000aad1:	5d                   	pop    ebp
c000aad2:	c3                   	ret    

c000aad3 <sinc_reset>:
c000aad3:	56                   	push   esi
c000aad4:	53                   	push   ebx
c000aad5:	51                   	push   ecx
c000aad6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aada:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000aadd:	85 db                	test   ebx,ebx
c000aadf:	74 59                	je     c000ab3a <sinc_reset+0x67>
c000aae1:	31 d2                	xor    edx,edx
c000aae3:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000aaea:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000aaed:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000aaf0:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000aaf7:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000aafe:	31 c0                	xor    eax,eax
c000ab00:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ab06:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ab09:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ab0c:	52                   	push   edx
c000ab0d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ab10:	c1 e0 02             	shl    eax,0x2
c000ab13:	50                   	push   eax
c000ab14:	6a 00                	push   0x0
c000ab16:	56                   	push   esi
c000ab17:	e8 6f 5b ff ff       	call   c000068b <memset>
c000ab1c:	83 c4 0c             	add    esp,0xc
c000ab1f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ab22:	c1 e0 02             	shl    eax,0x2
c000ab25:	50                   	push   eax
c000ab26:	68 aa 00 00 00       	push   0xaa
c000ab2b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ab2e:	8d 04 86             	lea    eax,[esi+eax*4]
c000ab31:	50                   	push   eax
c000ab32:	e8 54 5b ff ff       	call   c000068b <memset>
c000ab37:	83 c4 10             	add    esp,0x10
c000ab3a:	58                   	pop    eax
c000ab3b:	5b                   	pop    ebx
c000ab3c:	5e                   	pop    esi
c000ab3d:	c3                   	ret    

c000ab3e <calc_output_multi>:
c000ab3e:	55                   	push   ebp
c000ab3f:	57                   	push   edi
c000ab40:	56                   	push   esi
c000ab41:	89 c6                	mov    esi,eax
c000ab43:	53                   	push   ebx
c000ab44:	83 ec 4c             	sub    esp,0x4c
c000ab47:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ab4b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ab4f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ab53:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ab57:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000ab5b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ab5f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ab63:	8d 46 44             	lea    eax,[esi+0x44]
c000ab66:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab69:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000ab6f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ab73:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000ab76:	e8 0f eb ff ff       	call   c000968a <int_to_fp>
c000ab7b:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000ab7e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ab82:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ab86:	99                   	cdq    
c000ab87:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000ab8b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ab8f:	0f af d0             	imul   edx,eax
c000ab92:	0f af c3             	imul   eax,ebx
c000ab95:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000ab99:	29 c1                	sub    ecx,eax
c000ab9b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ab9f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000aba3:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000abaa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000abae:	57                   	push   edi
c000abaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000abb3:	6a 00                	push   0x0
c000abb5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb9:	e8 cd 5a ff ff       	call   c000068b <memset>
c000abbe:	83 c4 10             	add    esp,0x10
c000abc1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000abc5:	89 df                	mov    edi,ebx
c000abc7:	e8 cc ea ff ff       	call   c0009698 <fp_to_double>
c000abcc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000abd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000abd4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000abd8:	e8 b1 ea ff ff       	call   c000968e <fp_to_int>
c000abdd:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000abe0:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000abe3:	51                   	push   ecx
c000abe4:	51                   	push   ecx
c000abe5:	55                   	push   ebp
c000abe6:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000abea:	e8 59 ad 01 00       	call   c0025948 <__subsf3>
c000abef:	89 04 24             	mov    DWORD PTR [esp],eax
c000abf2:	e8 30 c4 01 00       	call   c0027027 <__extendsfdf2>
c000abf7:	83 c4 10             	add    esp,0x10
c000abfa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000abfe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac0a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac0e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac12:	e8 19 ba 01 00       	call   c0026630 <__muldf3>
c000ac17:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ac1a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ac1e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ac22:	e8 00 c4 01 00       	call   c0027027 <__extendsfdf2>
c000ac27:	83 c4 10             	add    esp,0x10
c000ac2a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac2e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac32:	52                   	push   edx
c000ac33:	50                   	push   eax
c000ac34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac3c:	e8 72 b3 01 00       	call   c0025fb3 <__adddf3>
c000ac41:	83 c4 10             	add    esp,0x10
c000ac44:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ac48:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ac4c:	89 f8                	mov    eax,edi
c000ac4e:	b9 08 00 00 00       	mov    ecx,0x8
c000ac53:	99                   	cdq    
c000ac54:	f7 f9                	idiv   ecx
c000ac56:	4a                   	dec    edx
c000ac57:	83 fa 06             	cmp    edx,0x6
c000ac5a:	77 07                	ja     c000ac63 <calc_output_multi+0x125>
c000ac5c:	ff 24 95 e4 87 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd781c]
c000ac63:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ac66:	4f                   	dec    edi
c000ac67:	83 ec 0c             	sub    esp,0xc
c000ac6a:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ac6d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ac71:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ac78:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ac7c:	e8 a6 c3 01 00       	call   c0027027 <__extendsfdf2>
c000ac81:	83 c4 10             	add    esp,0x10
c000ac84:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac88:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac90:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac94:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac98:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac9c:	e8 8f b9 01 00       	call   c0026630 <__muldf3>
c000aca1:	83 c4 10             	add    esp,0x10
c000aca4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aca8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000acac:	52                   	push   edx
c000acad:	50                   	push   eax
c000acae:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000acb1:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000acb4:	e8 fa b2 01 00       	call   c0025fb3 <__adddf3>
c000acb9:	83 c4 10             	add    esp,0x10
c000acbc:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000acbf:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000acc2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000acc5:	4f                   	dec    edi
c000acc6:	83 ec 0c             	sub    esp,0xc
c000acc9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000accc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000acd0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000acd7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000acdb:	e8 47 c3 01 00       	call   c0027027 <__extendsfdf2>
c000ace0:	83 c4 10             	add    esp,0x10
c000ace3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ace7:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aceb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000acef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000acf3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000acf7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000acfb:	e8 30 b9 01 00       	call   c0026630 <__muldf3>
c000ad00:	83 c4 10             	add    esp,0x10
c000ad03:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad07:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad0b:	52                   	push   edx
c000ad0c:	50                   	push   eax
c000ad0d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ad10:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ad13:	e8 9b b2 01 00       	call   c0025fb3 <__adddf3>
c000ad18:	83 c4 10             	add    esp,0x10
c000ad1b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ad1e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ad21:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ad24:	4f                   	dec    edi
c000ad25:	83 ec 0c             	sub    esp,0xc
c000ad28:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ad2b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ad2f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ad36:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ad3a:	e8 e8 c2 01 00       	call   c0027027 <__extendsfdf2>
c000ad3f:	83 c4 10             	add    esp,0x10
c000ad42:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad46:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad4a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad4e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad52:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad56:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad5a:	e8 d1 b8 01 00       	call   c0026630 <__muldf3>
c000ad5f:	83 c4 10             	add    esp,0x10
c000ad62:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad66:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad6a:	52                   	push   edx
c000ad6b:	50                   	push   eax
c000ad6c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ad6f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ad72:	e8 3c b2 01 00       	call   c0025fb3 <__adddf3>
c000ad77:	83 c4 10             	add    esp,0x10
c000ad7a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ad7d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ad80:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ad83:	4f                   	dec    edi
c000ad84:	83 ec 0c             	sub    esp,0xc
c000ad87:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ad8a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ad8e:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ad95:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ad99:	e8 89 c2 01 00       	call   c0027027 <__extendsfdf2>
c000ad9e:	83 c4 10             	add    esp,0x10
c000ada1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ada5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ada9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000adad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000adb1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000adb5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000adb9:	e8 72 b8 01 00       	call   c0026630 <__muldf3>
c000adbe:	83 c4 10             	add    esp,0x10
c000adc1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000adc5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000adc9:	52                   	push   edx
c000adca:	50                   	push   eax
c000adcb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000adce:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000add1:	e8 dd b1 01 00       	call   c0025fb3 <__adddf3>
c000add6:	83 c4 10             	add    esp,0x10
c000add9:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000addc:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000addf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ade2:	4f                   	dec    edi
c000ade3:	83 ec 0c             	sub    esp,0xc
c000ade6:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ade9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aded:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000adf4:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000adf8:	e8 2a c2 01 00       	call   c0027027 <__extendsfdf2>
c000adfd:	83 c4 10             	add    esp,0x10
c000ae00:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae04:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae10:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae14:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae18:	e8 13 b8 01 00       	call   c0026630 <__muldf3>
c000ae1d:	83 c4 10             	add    esp,0x10
c000ae20:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae24:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae28:	52                   	push   edx
c000ae29:	50                   	push   eax
c000ae2a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ae2d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ae30:	e8 7e b1 01 00       	call   c0025fb3 <__adddf3>
c000ae35:	83 c4 10             	add    esp,0x10
c000ae38:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ae3b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ae3e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae41:	4f                   	dec    edi
c000ae42:	83 ec 0c             	sub    esp,0xc
c000ae45:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae48:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae4c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae53:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae57:	e8 cb c1 01 00       	call   c0027027 <__extendsfdf2>
c000ae5c:	83 c4 10             	add    esp,0x10
c000ae5f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae63:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae6f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae73:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae77:	e8 b4 b7 01 00       	call   c0026630 <__muldf3>
c000ae7c:	83 c4 10             	add    esp,0x10
c000ae7f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae83:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae87:	52                   	push   edx
c000ae88:	50                   	push   eax
c000ae89:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ae8c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ae8f:	e8 1f b1 01 00       	call   c0025fb3 <__adddf3>
c000ae94:	83 c4 10             	add    esp,0x10
c000ae97:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ae9a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ae9d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aea0:	4f                   	dec    edi
c000aea1:	83 ec 0c             	sub    esp,0xc
c000aea4:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aea7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aeab:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aeb2:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aeb6:	e8 6c c1 01 00       	call   c0027027 <__extendsfdf2>
c000aebb:	83 c4 10             	add    esp,0x10
c000aebe:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aec2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aec6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aeca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aece:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aed2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aed6:	e8 55 b7 01 00       	call   c0026630 <__muldf3>
c000aedb:	83 c4 10             	add    esp,0x10
c000aede:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aee2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aee6:	52                   	push   edx
c000aee7:	50                   	push   eax
c000aee8:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aeeb:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aeee:	e8 c0 b0 01 00       	call   c0025fb3 <__adddf3>
c000aef3:	83 c4 10             	add    esp,0x10
c000aef6:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aef9:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aefc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aeff:	4f                   	dec    edi
c000af00:	83 ec 0c             	sub    esp,0xc
c000af03:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af06:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af0a:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af11:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af15:	e8 0d c1 01 00       	call   c0027027 <__extendsfdf2>
c000af1a:	83 c4 10             	add    esp,0x10
c000af1d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af21:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af2d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af31:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af35:	e8 f6 b6 01 00       	call   c0026630 <__muldf3>
c000af3a:	83 c4 10             	add    esp,0x10
c000af3d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af41:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af45:	52                   	push   edx
c000af46:	50                   	push   eax
c000af47:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af4a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af4d:	e8 61 b0 01 00       	call   c0025fb3 <__adddf3>
c000af52:	83 c4 10             	add    esp,0x10
c000af55:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af58:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af5b:	85 ff                	test   edi,edi
c000af5d:	0f 8f e9 fc ff ff    	jg     c000ac4c <calc_output_multi+0x10e>
c000af63:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000af67:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000af6b:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000af6f:	0f 89 4c fc ff ff    	jns    c000abc1 <calc_output_multi+0x83>
c000af75:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000af79:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000af7d:	29 c8                	sub    eax,ecx
c000af7f:	99                   	cdq    
c000af80:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000af84:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000af88:	0f af d0             	imul   edx,eax
c000af8b:	40                   	inc    eax
c000af8c:	01 d1                	add    ecx,edx
c000af8e:	0f af c3             	imul   eax,ebx
c000af91:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000af95:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000af98:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000af9c:	55                   	push   ebp
c000af9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000afa1:	6a 00                	push   0x0
c000afa3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000afa7:	e8 df 56 ff ff       	call   c000068b <memset>
c000afac:	83 c4 10             	add    esp,0x10
c000afaf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000afb3:	e8 e0 e6 ff ff       	call   c0009698 <fp_to_double>
c000afb8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000afbc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000afc0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000afc4:	e8 c5 e6 ff ff       	call   c000968e <fp_to_int>
c000afc9:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000afcc:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000afcf:	57                   	push   edi
c000afd0:	57                   	push   edi
c000afd1:	89 df                	mov    edi,ebx
c000afd3:	55                   	push   ebp
c000afd4:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000afd8:	e8 6b a9 01 00       	call   c0025948 <__subsf3>
c000afdd:	89 04 24             	mov    DWORD PTR [esp],eax
c000afe0:	e8 42 c0 01 00       	call   c0027027 <__extendsfdf2>
c000afe5:	83 c4 10             	add    esp,0x10
c000afe8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000afec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000aff0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aff4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aff8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000affc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b000:	e8 2b b6 01 00       	call   c0026630 <__muldf3>
c000b005:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b008:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b00c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b010:	e8 12 c0 01 00       	call   c0027027 <__extendsfdf2>
c000b015:	83 c4 10             	add    esp,0x10
c000b018:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b01c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b020:	52                   	push   edx
c000b021:	50                   	push   eax
c000b022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b02a:	e8 84 af 01 00       	call   c0025fb3 <__adddf3>
c000b02f:	83 c4 10             	add    esp,0x10
c000b032:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b036:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b03a:	89 f8                	mov    eax,edi
c000b03c:	b9 08 00 00 00       	mov    ecx,0x8
c000b041:	99                   	cdq    
c000b042:	f7 f9                	idiv   ecx
c000b044:	4a                   	dec    edx
c000b045:	83 fa 06             	cmp    edx,0x6
c000b048:	77 07                	ja     c000b051 <calc_output_multi+0x513>
c000b04a:	ff 24 95 00 88 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd7800]
c000b051:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b055:	4f                   	dec    edi
c000b056:	83 ec 0c             	sub    esp,0xc
c000b059:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b05c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b060:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b067:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b06b:	e8 b7 bf 01 00       	call   c0027027 <__extendsfdf2>
c000b070:	83 c4 10             	add    esp,0x10
c000b073:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b077:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b07b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b07f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b083:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b087:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b08b:	e8 a0 b5 01 00       	call   c0026630 <__muldf3>
c000b090:	83 c4 10             	add    esp,0x10
c000b093:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b097:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b09b:	52                   	push   edx
c000b09c:	50                   	push   eax
c000b09d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0a0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0a3:	e8 0b af 01 00       	call   c0025fb3 <__adddf3>
c000b0a8:	83 c4 10             	add    esp,0x10
c000b0ab:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0ae:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b0b5:	4f                   	dec    edi
c000b0b6:	83 ec 0c             	sub    esp,0xc
c000b0b9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0c0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0c7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0cb:	e8 57 bf 01 00       	call   c0027027 <__extendsfdf2>
c000b0d0:	83 c4 10             	add    esp,0x10
c000b0d3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0d7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b0e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b0eb:	e8 40 b5 01 00       	call   c0026630 <__muldf3>
c000b0f0:	83 c4 10             	add    esp,0x10
c000b0f3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0fb:	52                   	push   edx
c000b0fc:	50                   	push   eax
c000b0fd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b100:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b103:	e8 ab ae 01 00       	call   c0025fb3 <__adddf3>
c000b108:	83 c4 10             	add    esp,0x10
c000b10b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b10e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b111:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b115:	4f                   	dec    edi
c000b116:	83 ec 0c             	sub    esp,0xc
c000b119:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b11c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b120:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b127:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b12b:	e8 f7 be 01 00       	call   c0027027 <__extendsfdf2>
c000b130:	83 c4 10             	add    esp,0x10
c000b133:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b137:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b13b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b13f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b143:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b147:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b14b:	e8 e0 b4 01 00       	call   c0026630 <__muldf3>
c000b150:	83 c4 10             	add    esp,0x10
c000b153:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b157:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b15b:	52                   	push   edx
c000b15c:	50                   	push   eax
c000b15d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b160:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b163:	e8 4b ae 01 00       	call   c0025fb3 <__adddf3>
c000b168:	83 c4 10             	add    esp,0x10
c000b16b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b16e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b171:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b175:	4f                   	dec    edi
c000b176:	83 ec 0c             	sub    esp,0xc
c000b179:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b17c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b180:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b187:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b18b:	e8 97 be 01 00       	call   c0027027 <__extendsfdf2>
c000b190:	83 c4 10             	add    esp,0x10
c000b193:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b197:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b19b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b19f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1a3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1a7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1ab:	e8 80 b4 01 00       	call   c0026630 <__muldf3>
c000b1b0:	83 c4 10             	add    esp,0x10
c000b1b3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1b7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1bb:	52                   	push   edx
c000b1bc:	50                   	push   eax
c000b1bd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b1c0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b1c3:	e8 eb ad 01 00       	call   c0025fb3 <__adddf3>
c000b1c8:	83 c4 10             	add    esp,0x10
c000b1cb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1ce:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b1d5:	4f                   	dec    edi
c000b1d6:	83 ec 0c             	sub    esp,0xc
c000b1d9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b1dc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b1e0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b1e7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b1eb:	e8 37 be 01 00       	call   c0027027 <__extendsfdf2>
c000b1f0:	83 c4 10             	add    esp,0x10
c000b1f3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b203:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b207:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b20b:	e8 20 b4 01 00       	call   c0026630 <__muldf3>
c000b210:	83 c4 10             	add    esp,0x10
c000b213:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b217:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b21b:	52                   	push   edx
c000b21c:	50                   	push   eax
c000b21d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b220:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b223:	e8 8b ad 01 00       	call   c0025fb3 <__adddf3>
c000b228:	83 c4 10             	add    esp,0x10
c000b22b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b22e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b231:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b235:	4f                   	dec    edi
c000b236:	83 ec 0c             	sub    esp,0xc
c000b239:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b23c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b240:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b247:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b24b:	e8 d7 bd 01 00       	call   c0027027 <__extendsfdf2>
c000b250:	83 c4 10             	add    esp,0x10
c000b253:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b257:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b25b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b25f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b263:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b267:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b26b:	e8 c0 b3 01 00       	call   c0026630 <__muldf3>
c000b270:	83 c4 10             	add    esp,0x10
c000b273:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b277:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b27b:	52                   	push   edx
c000b27c:	50                   	push   eax
c000b27d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b280:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b283:	e8 2b ad 01 00       	call   c0025fb3 <__adddf3>
c000b288:	83 c4 10             	add    esp,0x10
c000b28b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b28e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b291:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b295:	4f                   	dec    edi
c000b296:	83 ec 0c             	sub    esp,0xc
c000b299:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b29c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2a0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2a7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2ab:	e8 77 bd 01 00       	call   c0027027 <__extendsfdf2>
c000b2b0:	83 c4 10             	add    esp,0x10
c000b2b3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2b7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2cb:	e8 60 b3 01 00       	call   c0026630 <__muldf3>
c000b2d0:	83 c4 10             	add    esp,0x10
c000b2d3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2d7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2db:	52                   	push   edx
c000b2dc:	50                   	push   eax
c000b2dd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2e0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2e3:	e8 cb ac 01 00       	call   c0025fb3 <__adddf3>
c000b2e8:	83 c4 10             	add    esp,0x10
c000b2eb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2ee:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2f5:	4f                   	dec    edi
c000b2f6:	83 ec 0c             	sub    esp,0xc
c000b2f9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2fc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b300:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b307:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b30b:	e8 17 bd 01 00       	call   c0027027 <__extendsfdf2>
c000b310:	83 c4 10             	add    esp,0x10
c000b313:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b317:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b31b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b31f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b323:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b327:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b32b:	e8 00 b3 01 00       	call   c0026630 <__muldf3>
c000b330:	83 c4 10             	add    esp,0x10
c000b333:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b337:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b33b:	52                   	push   edx
c000b33c:	50                   	push   eax
c000b33d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b340:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b343:	e8 6b ac 01 00       	call   c0025fb3 <__adddf3>
c000b348:	83 c4 10             	add    esp,0x10
c000b34b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b34e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b351:	85 ff                	test   edi,edi
c000b353:	0f 8f e1 fc ff ff    	jg     c000b03a <calc_output_multi+0x4fc>
c000b359:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b35d:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b361:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b365:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b36a:	0f 8f 3f fc ff ff    	jg     c000afaf <calc_output_multi+0x471>
c000b370:	be 08 00 00 00       	mov    esi,0x8
c000b375:	89 d8                	mov    eax,ebx
c000b377:	99                   	cdq    
c000b378:	f7 fe                	idiv   esi
c000b37a:	4a                   	dec    edx
c000b37b:	83 fa 06             	cmp    edx,0x6
c000b37e:	77 07                	ja     c000b387 <calc_output_multi+0x849>
c000b380:	ff 24 95 1c 88 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd77e4]
c000b387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b38b:	4b                   	dec    ebx
c000b38c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b390:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b393:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b397:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b39b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b39e:	e8 10 ac 01 00       	call   c0025fb3 <__adddf3>
c000b3a3:	83 c4 10             	add    esp,0x10
c000b3a6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b3aa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b3ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3be:	e8 6d b2 01 00       	call   c0026630 <__muldf3>
c000b3c3:	5d                   	pop    ebp
c000b3c4:	59                   	pop    ecx
c000b3c5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b3c9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b3cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3d5:	e8 29 bb 01 00       	call   c0026f03 <__truncdfsf2>
c000b3da:	83 c4 10             	add    esp,0x10
c000b3dd:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b3e1:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b3e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3e8:	4b                   	dec    ebx
c000b3e9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b3ed:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b3f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b3f4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b3f8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b3fb:	e8 b3 ab 01 00       	call   c0025fb3 <__adddf3>
c000b400:	83 c4 10             	add    esp,0x10
c000b403:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b407:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b40b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b40f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b413:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b417:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b41b:	e8 10 b2 01 00       	call   c0026630 <__muldf3>
c000b420:	59                   	pop    ecx
c000b421:	5f                   	pop    edi
c000b422:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b426:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b42a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b42e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b432:	e8 cc ba 01 00       	call   c0026f03 <__truncdfsf2>
c000b437:	83 c4 10             	add    esp,0x10
c000b43a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b43e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b441:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b445:	4b                   	dec    ebx
c000b446:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b44a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b44d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b451:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b455:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b458:	e8 56 ab 01 00       	call   c0025fb3 <__adddf3>
c000b45d:	83 c4 10             	add    esp,0x10
c000b460:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b464:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b468:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b46c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b470:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b474:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b478:	e8 b3 b1 01 00       	call   c0026630 <__muldf3>
c000b47d:	5f                   	pop    edi
c000b47e:	5d                   	pop    ebp
c000b47f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b483:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b487:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b48b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b48f:	e8 6f ba 01 00       	call   c0026f03 <__truncdfsf2>
c000b494:	83 c4 10             	add    esp,0x10
c000b497:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b49b:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b49e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4a2:	4b                   	dec    ebx
c000b4a3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4a7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b4aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b4ae:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4b2:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b4b5:	e8 f9 aa 01 00       	call   c0025fb3 <__adddf3>
c000b4ba:	83 c4 10             	add    esp,0x10
c000b4bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b4c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b4c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d5:	e8 56 b1 01 00       	call   c0026630 <__muldf3>
c000b4da:	5d                   	pop    ebp
c000b4db:	59                   	pop    ecx
c000b4dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b4e0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b4e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4ec:	e8 12 ba 01 00       	call   c0026f03 <__truncdfsf2>
c000b4f1:	83 c4 10             	add    esp,0x10
c000b4f4:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b4f8:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b4fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4ff:	4b                   	dec    ebx
c000b500:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b504:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b507:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b50b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b50f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b512:	e8 9c aa 01 00       	call   c0025fb3 <__adddf3>
c000b517:	83 c4 10             	add    esp,0x10
c000b51a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b51e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b522:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b526:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b52a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b52e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b532:	e8 f9 b0 01 00       	call   c0026630 <__muldf3>
c000b537:	59                   	pop    ecx
c000b538:	5f                   	pop    edi
c000b539:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b53d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b541:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b545:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b549:	e8 b5 b9 01 00       	call   c0026f03 <__truncdfsf2>
c000b54e:	83 c4 10             	add    esp,0x10
c000b551:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b555:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b558:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b55c:	4b                   	dec    ebx
c000b55d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b561:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b564:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b568:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b56c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b56f:	e8 3f aa 01 00       	call   c0025fb3 <__adddf3>
c000b574:	83 c4 10             	add    esp,0x10
c000b577:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b57b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b57f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b583:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b587:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b58b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b58f:	e8 9c b0 01 00       	call   c0026630 <__muldf3>
c000b594:	5f                   	pop    edi
c000b595:	5d                   	pop    ebp
c000b596:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b59a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b59e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5a6:	e8 58 b9 01 00       	call   c0026f03 <__truncdfsf2>
c000b5ab:	83 c4 10             	add    esp,0x10
c000b5ae:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5b2:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5b5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5b9:	4b                   	dec    ebx
c000b5ba:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5be:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5c5:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5c9:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5cc:	e8 e2 a9 01 00       	call   c0025fb3 <__adddf3>
c000b5d1:	83 c4 10             	add    esp,0x10
c000b5d4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5d8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5ec:	e8 3f b0 01 00       	call   c0026630 <__muldf3>
c000b5f1:	5d                   	pop    ebp
c000b5f2:	59                   	pop    ecx
c000b5f3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5f7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b603:	e8 fb b8 01 00       	call   c0026f03 <__truncdfsf2>
c000b608:	83 c4 10             	add    esp,0x10
c000b60b:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b60f:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b612:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b616:	4b                   	dec    ebx
c000b617:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b61b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b61e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b622:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b626:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b629:	e8 85 a9 01 00       	call   c0025fb3 <__adddf3>
c000b62e:	83 c4 10             	add    esp,0x10
c000b631:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b635:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b639:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b63d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b641:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b645:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b649:	e8 e2 af 01 00       	call   c0026630 <__muldf3>
c000b64e:	59                   	pop    ecx
c000b64f:	5f                   	pop    edi
c000b650:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b654:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b658:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b65c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b660:	e8 9e b8 01 00       	call   c0026f03 <__truncdfsf2>
c000b665:	83 c4 10             	add    esp,0x10
c000b668:	85 db                	test   ebx,ebx
c000b66a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b66e:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b671:	0f 8f fe fc ff ff    	jg     c000b375 <calc_output_multi+0x837>
c000b677:	83 c4 4c             	add    esp,0x4c
c000b67a:	5b                   	pop    ebx
c000b67b:	5e                   	pop    esi
c000b67c:	5f                   	pop    edi
c000b67d:	5d                   	pop    ebp
c000b67e:	c3                   	ret    

c000b67f <double_to_fp>:
c000b67f:	83 ec 0c             	sub    esp,0xc
c000b682:	68 00 00 b0 40       	push   0x40b00000
c000b687:	6a 00                	push   0x0
c000b689:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b68d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b691:	e8 9a af 01 00       	call   c0026630 <__muldf3>
c000b696:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b69a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b69e:	83 c4 1c             	add    esp,0x1c
c000b6a1:	e9 0a ba 01 00       	jmp    c00270b0 <lrint>

c000b6a6 <prepare_data>:
c000b6a6:	55                   	push   ebp
c000b6a7:	57                   	push   edi
c000b6a8:	56                   	push   esi
c000b6a9:	53                   	push   ebx
c000b6aa:	83 ec 1c             	sub    esp,0x1c
c000b6ad:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b6b1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b6b5:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b6b9:	0f 89 57 01 00 00    	jns    c000b816 <prepare_data+0x170>
c000b6bf:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b6c2:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b6c5:	85 d2                	test   edx,edx
c000b6c7:	75 0d                	jne    c000b6d6 <prepare_data+0x30>
c000b6c9:	8d 14 36             	lea    edx,[esi+esi*1]
c000b6cc:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b6cf:	29 d0                	sub    eax,edx
c000b6d1:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b6d4:	eb 44                	jmp    c000b71a <prepare_data+0x74>
c000b6d6:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b6d9:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b6dc:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b6df:	39 c1                	cmp    ecx,eax
c000b6e1:	7d 04                	jge    c000b6e7 <prepare_data+0x41>
c000b6e3:	29 d0                	sub    eax,edx
c000b6e5:	eb 2d                	jmp    c000b714 <prepare_data+0x6e>
c000b6e7:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b6ed:	29 d7                	sub    edi,edx
c000b6ef:	01 f7                	add    edi,esi
c000b6f1:	51                   	push   ecx
c000b6f2:	29 f2                	sub    edx,esi
c000b6f4:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b6fb:	8d 14 90             	lea    edx,[eax+edx*4]
c000b6fe:	51                   	push   ecx
c000b6ff:	52                   	push   edx
c000b700:	50                   	push   eax
c000b701:	e8 17 4f ff ff       	call   c000061d <memmove>
c000b706:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b709:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b70c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b70f:	29 f0                	sub    eax,esi
c000b711:	83 c4 10             	add    esp,0x10
c000b714:	29 f0                	sub    eax,esi
c000b716:	79 02                	jns    c000b71a <prepare_data+0x74>
c000b718:	31 c0                	xor    eax,eax
c000b71a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b71d:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b720:	29 ef                	sub    edi,ebp
c000b722:	39 c7                	cmp    edi,eax
c000b724:	7e 02                	jle    c000b728 <prepare_data+0x82>
c000b726:	89 c7                	mov    edi,eax
c000b728:	89 f8                	mov    eax,edi
c000b72a:	99                   	cdq    
c000b72b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b72e:	b8 15 00 00 00       	mov    eax,0x15
c000b733:	29 d7                	sub    edi,edx
c000b735:	0f 88 dd 00 00 00    	js     c000b818 <prepare_data+0x172>
c000b73b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b73e:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b741:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b744:	0f 8f ce 00 00 00    	jg     c000b818 <prepare_data+0x172>
c000b74a:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b750:	50                   	push   eax
c000b751:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b758:	50                   	push   eax
c000b759:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b75d:	8b 00                	mov    eax,DWORD PTR [eax]
c000b75f:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b762:	50                   	push   eax
c000b763:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b766:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b76a:	50                   	push   eax
c000b76b:	e8 e5 4e ff ff       	call   c0000655 <memcpy>
c000b770:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b773:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b776:	01 fd                	add    ebp,edi
c000b778:	01 f9                	add    ecx,edi
c000b77a:	83 c4 10             	add    esp,0x10
c000b77d:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b780:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b783:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b786:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b78a:	0f 85 86 00 00 00    	jne    c000b816 <prepare_data+0x170>
c000b790:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b793:	89 e8                	mov    eax,ebp
c000b795:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b798:	29 c8                	sub    eax,ecx
c000b79a:	39 f8                	cmp    eax,edi
c000b79c:	7d 78                	jge    c000b816 <prepare_data+0x170>
c000b79e:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b7a2:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b7a6:	74 6e                	je     c000b816 <prepare_data+0x170>
c000b7a8:	8d 7e 04             	lea    edi,[esi+0x4]
c000b7ab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b7af:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b7b2:	29 ef                	sub    edi,ebp
c000b7b4:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b7b8:	7c 29                	jl     c000b7e3 <prepare_data+0x13d>
c000b7ba:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b7bd:	29 f1                	sub    ecx,esi
c000b7bf:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b7c6:	55                   	push   ebp
c000b7c7:	50                   	push   eax
c000b7c8:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b7cb:	50                   	push   eax
c000b7cc:	52                   	push   edx
c000b7cd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b7d1:	e8 47 4e ff ff       	call   c000061d <memmove>
c000b7d6:	83 c4 10             	add    esp,0x10
c000b7d9:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b7dc:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b7df:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b7e3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b7e6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b7e9:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000b7ec:	83 c6 05             	add    esi,0x5
c000b7ef:	78 07                	js     c000b7f8 <prepare_data+0x152>
c000b7f1:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b7f4:	39 cf                	cmp    edi,ecx
c000b7f6:	7e 04                	jle    c000b7fc <prepare_data+0x156>
c000b7f8:	89 ce                	mov    esi,ecx
c000b7fa:	29 c6                	sub    esi,eax
c000b7fc:	8d 04 82             	lea    eax,[edx+eax*4]
c000b7ff:	51                   	push   ecx
c000b800:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000b807:	51                   	push   ecx
c000b808:	6a 00                	push   0x0
c000b80a:	50                   	push   eax
c000b80b:	e8 7b 4e ff ff       	call   c000068b <memset>
c000b810:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000b813:	83 c4 10             	add    esp,0x10
c000b816:	31 c0                	xor    eax,eax
c000b818:	83 c4 1c             	add    esp,0x1c
c000b81b:	5b                   	pop    ebx
c000b81c:	5e                   	pop    esi
c000b81d:	5f                   	pop    edi
c000b81e:	5d                   	pop    ebp
c000b81f:	c3                   	ret    

c000b820 <sinc_multichan_vari_process>:
c000b820:	55                   	push   ebp
c000b821:	ba 05 00 00 00       	mov    edx,0x5
c000b826:	57                   	push   edi
c000b827:	56                   	push   esi
c000b828:	53                   	push   ebx
c000b829:	83 ec 4c             	sub    esp,0x4c
c000b82c:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000b830:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000b834:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000b837:	85 db                	test   ebx,ebx
c000b839:	0f 84 9b 06 00 00    	je     c000beda <sinc_multichan_vari_process+0x6ba>
c000b83f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000b842:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000b845:	0f af c5             	imul   eax,ebp
c000b848:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000b84b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000b84e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000b855:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000b85c:	0f af c5             	imul   eax,ebp
c000b85f:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000b862:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000b865:	8b 06                	mov    eax,DWORD PTR [esi]
c000b867:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b86b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b86f:	68 00 00 70 3f       	push   0x3f700000
c000b874:	6a 00                	push   0x0
c000b876:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b87a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b87e:	e8 7c b6 01 00       	call   c0026eff <__ltdf2>
c000b883:	83 c4 10             	add    esp,0x10
c000b886:	ba 16 00 00 00       	mov    edx,0x16
c000b88b:	85 c0                	test   eax,eax
c000b88d:	0f 88 47 06 00 00    	js     c000beda <sinc_multichan_vari_process+0x6ba>
c000b893:	68 00 00 70 40       	push   0x40700000
c000b898:	6a 00                	push   0x0
c000b89a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b89e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a2:	e8 3a b6 01 00       	call   c0026ee1 <__gtdf2>
c000b8a7:	83 c4 10             	add    esp,0x10
c000b8aa:	ba 16 00 00 00       	mov    edx,0x16
c000b8af:	85 c0                	test   eax,eax
c000b8b1:	0f 8f 23 06 00 00    	jg     c000beda <sinc_multichan_vari_process+0x6ba>
c000b8b7:	83 ec 0c             	sub    esp,0xc
c000b8ba:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b8bd:	e8 d1 b3 01 00       	call   c0026c93 <__floatsidf>
c000b8c2:	83 c4 10             	add    esp,0x10
c000b8c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b8c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b8cd:	68 00 00 00 40       	push   0x40000000
c000b8d2:	6a 00                	push   0x0
c000b8d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8dc:	e8 d2 a6 01 00       	call   c0025fb3 <__adddf3>
c000b8e1:	59                   	pop    ecx
c000b8e2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b8e6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b8ea:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000b8ed:	e8 a1 b3 01 00       	call   c0026c93 <__floatsidf>
c000b8f2:	83 c4 10             	add    esp,0x10
c000b8f5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b8f9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b8fd:	52                   	push   edx
c000b8fe:	50                   	push   eax
c000b8ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b903:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b907:	e8 08 b0 01 00       	call   c0026914 <__divdf3>
c000b90c:	83 c4 10             	add    esp,0x10
c000b90f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b913:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b917:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000b91a:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000b91d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b921:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b925:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b929:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b92d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b931:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b935:	e8 a7 b5 01 00       	call   c0026ee1 <__gtdf2>
c000b93a:	83 c4 10             	add    esp,0x10
c000b93d:	85 c0                	test   eax,eax
c000b93f:	7e 2d                	jle    c000b96e <sinc_multichan_vari_process+0x14e>
c000b941:	68 00 00 f0 3f       	push   0x3ff00000
c000b946:	6a 00                	push   0x0
c000b948:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b94c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b950:	e8 aa b5 01 00       	call   c0026eff <__ltdf2>
c000b955:	83 c4 10             	add    esp,0x10
c000b958:	85 c0                	test   eax,eax
c000b95a:	79 4d                	jns    c000b9a9 <sinc_multichan_vari_process+0x189>
c000b95c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b960:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b964:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b968:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b96c:	eb 1b                	jmp    c000b989 <sinc_multichan_vari_process+0x169>
c000b96e:	68 00 00 f0 3f       	push   0x3ff00000
c000b973:	6a 00                	push   0x0
c000b975:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b979:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b97d:	e8 7d b5 01 00       	call   c0026eff <__ltdf2>
c000b982:	83 c4 10             	add    esp,0x10
c000b985:	85 c0                	test   eax,eax
c000b987:	79 20                	jns    c000b9a9 <sinc_multichan_vari_process+0x189>
c000b989:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b98d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b991:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b995:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b999:	e8 76 af 01 00       	call   c0026914 <__divdf3>
c000b99e:	83 c4 10             	add    esp,0x10
c000b9a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b9a5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9a9:	50                   	push   eax
c000b9aa:	50                   	push   eax
c000b9ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9af:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9b3:	e8 f8 b6 01 00       	call   c00270b0 <lrint>
c000b9b8:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000b9bb:	40                   	inc    eax
c000b9bc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b9c0:	0f af c5             	imul   eax,ebp
c000b9c3:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000b9c7:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000b9ca:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b9ce:	58                   	pop    eax
c000b9cf:	5a                   	pop    edx
c000b9d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9d8:	e8 d3 b6 01 00       	call   c00270b0 <lrint>
c000b9dd:	83 ec 0c             	sub    esp,0xc
c000b9e0:	50                   	push   eax
c000b9e1:	e8 ad b2 01 00       	call   c0026c93 <__floatsidf>
c000b9e6:	83 c4 10             	add    esp,0x10
c000b9e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b9ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9f1:	52                   	push   edx
c000b9f2:	50                   	push   eax
c000b9f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b9f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b9fb:	e8 04 ac 01 00       	call   c0026604 <__subdf3>
c000ba00:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ba04:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ba08:	83 c4 20             	add    esp,0x20
c000ba0b:	6a 00                	push   0x0
c000ba0d:	6a 00                	push   0x0
c000ba0f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba13:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba17:	e8 e3 b4 01 00       	call   c0026eff <__ltdf2>
c000ba1c:	83 c4 10             	add    esp,0x10
c000ba1f:	85 c0                	test   eax,eax
c000ba21:	79 1f                	jns    c000ba42 <sinc_multichan_vari_process+0x222>
c000ba23:	68 00 00 f0 3f       	push   0x3ff00000
c000ba28:	6a 00                	push   0x0
c000ba2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba32:	e8 7c a5 01 00       	call   c0025fb3 <__adddf3>
c000ba37:	83 c4 10             	add    esp,0x10
c000ba3a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ba3e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ba42:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ba45:	83 ec 10             	sub    esp,0x10
c000ba48:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ba4c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba4f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba53:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba57:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba5b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba5f:	e8 a0 ab 01 00       	call   c0026604 <__subdf3>
c000ba64:	83 c4 18             	add    esp,0x18
c000ba67:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ba6b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ba6f:	52                   	push   edx
c000ba70:	50                   	push   eax
c000ba71:	e8 3a b6 01 00       	call   c00270b0 <lrint>
c000ba76:	0f af e8             	imul   ebp,eax
c000ba79:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ba7d:	01 e8                	add    eax,ebp
c000ba7f:	99                   	cdq    
c000ba80:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ba83:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ba86:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba8a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba8e:	68 00 00 f0 3f       	push   0x3ff00000
c000ba93:	6a 00                	push   0x0
c000ba95:	e8 7a ae 01 00       	call   c0026914 <__divdf3>
c000ba9a:	83 c4 10             	add    esp,0x10
c000ba9d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000baa1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000baa5:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000baaa:	68 23 42 92 0c       	push   0xc924223
c000baaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bab3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bab7:	e8 f7 a4 01 00       	call   c0025fb3 <__adddf3>
c000babc:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bac0:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bac4:	83 c4 20             	add    esp,0x20
c000bac7:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bacf:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bad7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bada:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000badd:	7d 50                	jge    c000bb2f <sinc_multichan_vari_process+0x30f>
c000badf:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bae2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bae5:	01 c8                	add    eax,ecx
c000bae7:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000baea:	99                   	cdq    
c000baeb:	f7 f9                	idiv   ecx
c000baed:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000baf1:	7d 0c                	jge    c000baff <sinc_multichan_vari_process+0x2df>
c000baf3:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000baf6:	85 ed                	test   ebp,ebp
c000baf8:	79 6b                	jns    c000bb65 <sinc_multichan_vari_process+0x345>
c000bafa:	e9 e6 00 00 00       	jmp    c000bbe5 <sinc_multichan_vari_process+0x3c5>
c000baff:	50                   	push   eax
c000bb00:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bb04:	57                   	push   edi
c000bb05:	53                   	push   ebx
c000bb06:	e8 9b fb ff ff       	call   c000b6a6 <prepare_data>
c000bb0b:	83 c4 10             	add    esp,0x10
c000bb0e:	89 c2                	mov    edx,eax
c000bb10:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bb13:	85 c0                	test   eax,eax
c000bb15:	0f 85 bf 03 00 00    	jne    c000beda <sinc_multichan_vari_process+0x6ba>
c000bb1b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bb1e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bb21:	01 c8                	add    eax,ecx
c000bb23:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bb26:	99                   	cdq    
c000bb27:	f7 f9                	idiv   ecx
c000bb29:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bb2d:	7c c4                	jl     c000baf3 <sinc_multichan_vari_process+0x2d3>
c000bb2f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bb33:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bb37:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bb3a:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bb3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb41:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb45:	89 06                	mov    DWORD PTR [esi],eax
c000bb47:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bb4a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bb4d:	99                   	cdq    
c000bb4e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bb51:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bb54:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bb57:	99                   	cdq    
c000bb58:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bb5b:	31 d2                	xor    edx,edx
c000bb5d:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bb60:	e9 75 03 00 00       	jmp    c000beda <sinc_multichan_vari_process+0x6ba>
c000bb65:	83 ec 0c             	sub    esp,0xc
c000bb68:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bb6b:	e8 23 b1 01 00       	call   c0026c93 <__floatsidf>
c000bb70:	83 c4 10             	add    esp,0x10
c000bb73:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bb77:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bb7b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bb7f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bb83:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb87:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb8b:	e8 23 a4 01 00       	call   c0025fb3 <__adddf3>
c000bb90:	83 c4 10             	add    esp,0x10
c000bb93:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bb97:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bb9b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bb9f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bba3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bba7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbab:	e8 03 a4 01 00       	call   c0025fb3 <__adddf3>
c000bbb0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bbb3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bbb7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bbbb:	e8 d3 b0 01 00       	call   c0026c93 <__floatsidf>
c000bbc0:	83 c4 10             	add    esp,0x10
c000bbc3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bbc7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbcb:	52                   	push   edx
c000bbcc:	50                   	push   eax
c000bbcd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbd1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbd5:	e8 23 b3 01 00       	call   c0026efd <__gedf2>
c000bbda:	83 c4 10             	add    esp,0x10
c000bbdd:	85 c0                	test   eax,eax
c000bbdf:	0f 89 4a ff ff ff    	jns    c000bb2f <sinc_multichan_vari_process+0x30f>
c000bbe5:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bbe9:	0f 8e ed 00 00 00    	jle    c000bcdc <sinc_multichan_vari_process+0x4bc>
c000bbef:	83 ec 10             	sub    esp,0x10
c000bbf2:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bbf5:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bbf8:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000bbfb:	ff 36                	push   DWORD PTR [esi]
c000bbfd:	e8 02 aa 01 00       	call   c0026604 <__subdf3>
c000bc02:	83 c4 18             	add    esp,0x18
c000bc05:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc09:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc0d:	52                   	push   edx
c000bc0e:	50                   	push   eax
c000bc0f:	e8 7c b4 01 00       	call   c0027090 <fabs>
c000bc14:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc18:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bc1c:	83 c4 10             	add    esp,0x10
c000bc1f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000bc24:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000bc29:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc2d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc31:	e8 ab b2 01 00       	call   c0026ee1 <__gtdf2>
c000bc36:	83 c4 10             	add    esp,0x10
c000bc39:	85 c0                	test   eax,eax
c000bc3b:	0f 8e 9b 00 00 00    	jle    c000bcdc <sinc_multichan_vari_process+0x4bc>
c000bc41:	8b 06                	mov    eax,DWORD PTR [esi]
c000bc43:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bc46:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bc4a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bc4e:	52                   	push   edx
c000bc4f:	50                   	push   eax
c000bc50:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bc53:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bc56:	e8 a9 a9 01 00       	call   c0026604 <__subdf3>
c000bc5b:	59                   	pop    ecx
c000bc5c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bc60:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bc64:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000bc67:	e8 27 b0 01 00       	call   c0026c93 <__floatsidf>
c000bc6c:	83 c4 10             	add    esp,0x10
c000bc6f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc73:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc77:	52                   	push   edx
c000bc78:	50                   	push   eax
c000bc79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc81:	e8 aa a9 01 00       	call   c0026630 <__muldf3>
c000bc86:	5d                   	pop    ebp
c000bc87:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bc8b:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bc8f:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bc92:	e8 fc af 01 00       	call   c0026c93 <__floatsidf>
c000bc97:	83 c4 10             	add    esp,0x10
c000bc9a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc9e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bca2:	52                   	push   edx
c000bca3:	50                   	push   eax
c000bca4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bca8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bcac:	e8 63 ac 01 00       	call   c0026914 <__divdf3>
c000bcb1:	83 c4 10             	add    esp,0x10
c000bcb4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcb8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcbc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bcc0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bcc4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bcc8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bccc:	e8 e2 a2 01 00       	call   c0025fb3 <__adddf3>
c000bcd1:	83 c4 10             	add    esp,0x10
c000bcd4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bcd8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bcdc:	83 ec 0c             	sub    esp,0xc
c000bcdf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bce2:	e8 ac af 01 00       	call   c0026c93 <__floatsidf>
c000bce7:	83 c4 10             	add    esp,0x10
c000bcea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd02:	e8 f8 b1 01 00       	call   c0026eff <__ltdf2>
c000bd07:	83 c4 10             	add    esp,0x10
c000bd0a:	85 c0                	test   eax,eax
c000bd0c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd10:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bd14:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bd18:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bd1c:	78 10                	js     c000bd2e <sinc_multichan_vari_process+0x50e>
c000bd1e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bd22:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bd26:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bd2a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bd2e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd32:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd36:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd3a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd3e:	e8 ed a8 01 00       	call   c0026630 <__muldf3>
c000bd43:	59                   	pop    ecx
c000bd44:	5d                   	pop    ebp
c000bd45:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bd49:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bd4d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd51:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd55:	e8 25 f9 ff ff       	call   c000b67f <double_to_fp>
c000bd5a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd5e:	89 c5                	mov    ebp,eax
c000bd60:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd64:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd68:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd6c:	e8 bf a8 01 00       	call   c0026630 <__muldf3>
c000bd71:	83 c4 18             	add    esp,0x18
c000bd74:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bd78:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bd7c:	52                   	push   edx
c000bd7d:	50                   	push   eax
c000bd7e:	e8 fc f8 ff ff       	call   c000b67f <double_to_fp>
c000bd83:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bd86:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bd8a:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bd8d:	8d 04 90             	lea    eax,[eax+edx*4]
c000bd90:	50                   	push   eax
c000bd91:	50                   	push   eax
c000bd92:	50                   	push   eax
c000bd93:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bd96:	e8 f8 ae 01 00       	call   c0026c93 <__floatsidf>
c000bd9b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bd9f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bda3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bda7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bdab:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bdaf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bdb3:	e8 5c ab 01 00       	call   c0026914 <__divdf3>
c000bdb8:	83 c4 1c             	add    esp,0x1c
c000bdbb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bdbf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000bdc3:	52                   	push   edx
c000bdc4:	89 ea                	mov    edx,ebp
c000bdc6:	50                   	push   eax
c000bdc7:	89 d8                	mov    eax,ebx
c000bdc9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bdcc:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000bdd0:	e8 69 ed ff ff       	call   c000ab3e <calc_output_multi>
c000bdd5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000bdd8:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000bddb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bddf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bde3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bde7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bdeb:	e8 24 ab 01 00       	call   c0026914 <__divdf3>
c000bdf0:	83 c4 10             	add    esp,0x10
c000bdf3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000bdf7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000bdfb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be03:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be07:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be0b:	e8 a3 a1 01 00       	call   c0025fb3 <__adddf3>
c000be10:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000be14:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000be18:	83 c4 28             	add    esp,0x28
c000be1b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be1f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be23:	e8 88 b2 01 00       	call   c00270b0 <lrint>
c000be28:	83 ec 0c             	sub    esp,0xc
c000be2b:	50                   	push   eax
c000be2c:	e8 62 ae 01 00       	call   c0026c93 <__floatsidf>
c000be31:	83 c4 10             	add    esp,0x10
c000be34:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000be38:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000be3c:	52                   	push   edx
c000be3d:	50                   	push   eax
c000be3e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000be42:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000be46:	e8 b9 a7 01 00       	call   c0026604 <__subdf3>
c000be4b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be4f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be53:	83 c4 20             	add    esp,0x20
c000be56:	6a 00                	push   0x0
c000be58:	6a 00                	push   0x0
c000be5a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be5e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be62:	e8 98 b0 01 00       	call   c0026eff <__ltdf2>
c000be67:	83 c4 10             	add    esp,0x10
c000be6a:	85 c0                	test   eax,eax
c000be6c:	79 20                	jns    c000be8e <sinc_multichan_vari_process+0x66e>
c000be6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be7e:	e8 30 a1 01 00       	call   c0025fb3 <__adddf3>
c000be83:	83 c4 10             	add    esp,0x10
c000be86:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000be8a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000be8e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000be91:	83 ec 10             	sub    esp,0x10
c000be94:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000be98:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000be9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bea3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bea7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000beab:	e8 54 a7 01 00       	call   c0026604 <__subdf3>
c000beb0:	83 c4 18             	add    esp,0x18
c000beb3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000beb7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bebb:	52                   	push   edx
c000bebc:	50                   	push   eax
c000bebd:	e8 ee b1 01 00       	call   c00270b0 <lrint>
c000bec2:	0f af e8             	imul   ebp,eax
c000bec5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000bec9:	83 c4 10             	add    esp,0x10
c000becc:	01 e8                	add    eax,ebp
c000bece:	99                   	cdq    
c000becf:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bed2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bed5:	e9 fd fb ff ff       	jmp    c000bad7 <sinc_multichan_vari_process+0x2b7>
c000beda:	83 c4 4c             	add    esp,0x4c
c000bedd:	89 d0                	mov    eax,edx
c000bedf:	5b                   	pop    ebx
c000bee0:	5e                   	pop    esi
c000bee1:	5f                   	pop    edi
c000bee2:	5d                   	pop    ebp
c000bee3:	c3                   	ret    

c000bee4 <sinc_hex_vari_process>:
c000bee4:	55                   	push   ebp
c000bee5:	ba 05 00 00 00       	mov    edx,0x5
c000beea:	57                   	push   edi
c000beeb:	56                   	push   esi
c000beec:	53                   	push   ebx
c000beed:	83 ec 4c             	sub    esp,0x4c
c000bef0:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000bef4:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000bef8:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000befb:	85 db                	test   ebx,ebx
c000befd:	0f 84 9c 06 00 00    	je     c000c59f <sinc_hex_vari_process+0x6bb>
c000bf03:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bf06:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000bf09:	0f af c7             	imul   eax,edi
c000bf0c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000bf0f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000bf12:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000bf19:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000bf20:	0f af c7             	imul   eax,edi
c000bf23:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bf26:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000bf29:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000bf2c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf30:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf34:	68 00 00 70 3f       	push   0x3f700000
c000bf39:	6a 00                	push   0x0
c000bf3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf43:	e8 b7 af 01 00       	call   c0026eff <__ltdf2>
c000bf48:	83 c4 10             	add    esp,0x10
c000bf4b:	ba 16 00 00 00       	mov    edx,0x16
c000bf50:	85 c0                	test   eax,eax
c000bf52:	0f 88 47 06 00 00    	js     c000c59f <sinc_hex_vari_process+0x6bb>
c000bf58:	68 00 00 70 40       	push   0x40700000
c000bf5d:	6a 00                	push   0x0
c000bf5f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf63:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf67:	e8 75 af 01 00       	call   c0026ee1 <__gtdf2>
c000bf6c:	83 c4 10             	add    esp,0x10
c000bf6f:	ba 16 00 00 00       	mov    edx,0x16
c000bf74:	85 c0                	test   eax,eax
c000bf76:	0f 8f 23 06 00 00    	jg     c000c59f <sinc_hex_vari_process+0x6bb>
c000bf7c:	83 ec 0c             	sub    esp,0xc
c000bf7f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bf82:	e8 0c ad 01 00       	call   c0026c93 <__floatsidf>
c000bf87:	83 c4 10             	add    esp,0x10
c000bf8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bf8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bf92:	68 00 00 00 40       	push   0x40000000
c000bf97:	6a 00                	push   0x0
c000bf99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfa1:	e8 0d a0 01 00       	call   c0025fb3 <__adddf3>
c000bfa6:	59                   	pop    ecx
c000bfa7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bfab:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bfaf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfb2:	e8 dc ac 01 00       	call   c0026c93 <__floatsidf>
c000bfb7:	83 c4 10             	add    esp,0x10
c000bfba:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bfbe:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bfc2:	52                   	push   edx
c000bfc3:	50                   	push   eax
c000bfc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfcc:	e8 43 a9 01 00       	call   c0026914 <__divdf3>
c000bfd1:	83 c4 10             	add    esp,0x10
c000bfd4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bfd8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bfdc:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000bfdf:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000bfe2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bfe6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bfea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bff2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bff6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bffa:	e8 e2 ae 01 00       	call   c0026ee1 <__gtdf2>
c000bfff:	83 c4 10             	add    esp,0x10
c000c002:	85 c0                	test   eax,eax
c000c004:	7e 2d                	jle    c000c033 <sinc_hex_vari_process+0x14f>
c000c006:	68 00 00 f0 3f       	push   0x3ff00000
c000c00b:	6a 00                	push   0x0
c000c00d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c011:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c015:	e8 e5 ae 01 00       	call   c0026eff <__ltdf2>
c000c01a:	83 c4 10             	add    esp,0x10
c000c01d:	85 c0                	test   eax,eax
c000c01f:	79 4d                	jns    c000c06e <sinc_hex_vari_process+0x18a>
c000c021:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c025:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c029:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c02d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c031:	eb 1b                	jmp    c000c04e <sinc_hex_vari_process+0x16a>
c000c033:	68 00 00 f0 3f       	push   0x3ff00000
c000c038:	6a 00                	push   0x0
c000c03a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c03e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c042:	e8 b8 ae 01 00       	call   c0026eff <__ltdf2>
c000c047:	83 c4 10             	add    esp,0x10
c000c04a:	85 c0                	test   eax,eax
c000c04c:	79 20                	jns    c000c06e <sinc_hex_vari_process+0x18a>
c000c04e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c052:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c056:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c05a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c05e:	e8 b1 a8 01 00       	call   c0026914 <__divdf3>
c000c063:	83 c4 10             	add    esp,0x10
c000c066:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c06a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c06e:	50                   	push   eax
c000c06f:	50                   	push   eax
c000c070:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c074:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c078:	e8 33 b0 01 00       	call   c00270b0 <lrint>
c000c07d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c080:	40                   	inc    eax
c000c081:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c085:	0f af c7             	imul   eax,edi
c000c088:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c08c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c08f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c093:	58                   	pop    eax
c000c094:	5a                   	pop    edx
c000c095:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c099:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c09d:	e8 0e b0 01 00       	call   c00270b0 <lrint>
c000c0a2:	83 ec 0c             	sub    esp,0xc
c000c0a5:	50                   	push   eax
c000c0a6:	e8 e8 ab 01 00       	call   c0026c93 <__floatsidf>
c000c0ab:	83 c4 10             	add    esp,0x10
c000c0ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c0b2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c0b6:	52                   	push   edx
c000c0b7:	50                   	push   eax
c000c0b8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0bc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0c0:	e8 3f a5 01 00       	call   c0026604 <__subdf3>
c000c0c5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0cd:	83 c4 20             	add    esp,0x20
c000c0d0:	6a 00                	push   0x0
c000c0d2:	6a 00                	push   0x0
c000c0d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0dc:	e8 1e ae 01 00       	call   c0026eff <__ltdf2>
c000c0e1:	83 c4 10             	add    esp,0x10
c000c0e4:	85 c0                	test   eax,eax
c000c0e6:	79 1f                	jns    c000c107 <sinc_hex_vari_process+0x223>
c000c0e8:	68 00 00 f0 3f       	push   0x3ff00000
c000c0ed:	6a 00                	push   0x0
c000c0ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0f7:	e8 b7 9e 01 00       	call   c0025fb3 <__adddf3>
c000c0fc:	83 c4 10             	add    esp,0x10
c000c0ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c103:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c107:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c10a:	83 ec 10             	sub    esp,0x10
c000c10d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c111:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c118:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c11c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c120:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c124:	e8 db a4 01 00       	call   c0026604 <__subdf3>
c000c129:	83 c4 18             	add    esp,0x18
c000c12c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c130:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c134:	52                   	push   edx
c000c135:	50                   	push   eax
c000c136:	e8 75 af 01 00       	call   c00270b0 <lrint>
c000c13b:	0f af f8             	imul   edi,eax
c000c13e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c142:	01 f8                	add    eax,edi
c000c144:	99                   	cdq    
c000c145:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c148:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c14b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c14f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c153:	68 00 00 f0 3f       	push   0x3ff00000
c000c158:	6a 00                	push   0x0
c000c15a:	e8 b5 a7 01 00       	call   c0026914 <__divdf3>
c000c15f:	83 c4 10             	add    esp,0x10
c000c162:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c166:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c16a:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c16f:	68 23 42 92 0c       	push   0xc924223
c000c174:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c178:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c17c:	e8 32 9e 01 00       	call   c0025fb3 <__adddf3>
c000c181:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c185:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c189:	83 c4 20             	add    esp,0x20
c000c18c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c194:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c19c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c19f:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c1a2:	7d 50                	jge    c000c1f4 <sinc_hex_vari_process+0x310>
c000c1a4:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c1a7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c1aa:	01 c8                	add    eax,ecx
c000c1ac:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c1af:	99                   	cdq    
c000c1b0:	f7 f9                	idiv   ecx
c000c1b2:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c1b6:	7d 0c                	jge    c000c1c4 <sinc_hex_vari_process+0x2e0>
c000c1b8:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c1bb:	85 ff                	test   edi,edi
c000c1bd:	79 6c                	jns    c000c22b <sinc_hex_vari_process+0x347>
c000c1bf:	e9 e7 00 00 00       	jmp    c000c2ab <sinc_hex_vari_process+0x3c7>
c000c1c4:	50                   	push   eax
c000c1c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c1c9:	56                   	push   esi
c000c1ca:	53                   	push   ebx
c000c1cb:	e8 d6 f4 ff ff       	call   c000b6a6 <prepare_data>
c000c1d0:	83 c4 10             	add    esp,0x10
c000c1d3:	89 c2                	mov    edx,eax
c000c1d5:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c1d8:	85 c0                	test   eax,eax
c000c1da:	0f 85 bf 03 00 00    	jne    c000c59f <sinc_hex_vari_process+0x6bb>
c000c1e0:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c1e3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c1e6:	01 c8                	add    eax,ecx
c000c1e8:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c1eb:	99                   	cdq    
c000c1ec:	f7 f9                	idiv   ecx
c000c1ee:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c1f2:	7c c4                	jl     c000c1b8 <sinc_hex_vari_process+0x2d4>
c000c1f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c1f8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c1fc:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c1ff:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c202:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c206:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c20a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c20d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c210:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c213:	99                   	cdq    
c000c214:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c217:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c21a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c21d:	99                   	cdq    
c000c21e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c221:	31 d2                	xor    edx,edx
c000c223:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c226:	e9 74 03 00 00       	jmp    c000c59f <sinc_hex_vari_process+0x6bb>
c000c22b:	83 ec 0c             	sub    esp,0xc
c000c22e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c231:	e8 5d aa 01 00       	call   c0026c93 <__floatsidf>
c000c236:	83 c4 10             	add    esp,0x10
c000c239:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c23d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c241:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c245:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c249:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c24d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c251:	e8 5d 9d 01 00       	call   c0025fb3 <__adddf3>
c000c256:	83 c4 10             	add    esp,0x10
c000c259:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c25d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c261:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c265:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c269:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c26d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c271:	e8 3d 9d 01 00       	call   c0025fb3 <__adddf3>
c000c276:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c279:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c27d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c281:	e8 0d aa 01 00       	call   c0026c93 <__floatsidf>
c000c286:	83 c4 10             	add    esp,0x10
c000c289:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c28d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c291:	52                   	push   edx
c000c292:	50                   	push   eax
c000c293:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c297:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c29b:	e8 5d ac 01 00       	call   c0026efd <__gedf2>
c000c2a0:	83 c4 10             	add    esp,0x10
c000c2a3:	85 c0                	test   eax,eax
c000c2a5:	0f 89 49 ff ff ff    	jns    c000c1f4 <sinc_hex_vari_process+0x310>
c000c2ab:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c2af:	0f 8e ef 00 00 00    	jle    c000c3a4 <sinc_hex_vari_process+0x4c0>
c000c2b5:	83 ec 10             	sub    esp,0x10
c000c2b8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c2bb:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c2be:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c2c1:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c2c4:	e8 3b a3 01 00       	call   c0026604 <__subdf3>
c000c2c9:	83 c4 18             	add    esp,0x18
c000c2cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2d0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2d4:	52                   	push   edx
c000c2d5:	50                   	push   eax
c000c2d6:	e8 b5 ad 01 00       	call   c0027090 <fabs>
c000c2db:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c2df:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c2e3:	83 c4 10             	add    esp,0x10
c000c2e6:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c2eb:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c2f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c2f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c2f8:	e8 e4 ab 01 00       	call   c0026ee1 <__gtdf2>
c000c2fd:	83 c4 10             	add    esp,0x10
c000c300:	85 c0                	test   eax,eax
c000c302:	0f 8e 9c 00 00 00    	jle    c000c3a4 <sinc_hex_vari_process+0x4c0>
c000c308:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c30b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c30e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c312:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c316:	52                   	push   edx
c000c317:	50                   	push   eax
c000c318:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c31b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c31e:	e8 e1 a2 01 00       	call   c0026604 <__subdf3>
c000c323:	59                   	pop    ecx
c000c324:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c328:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c32c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c32f:	e8 5f a9 01 00       	call   c0026c93 <__floatsidf>
c000c334:	83 c4 10             	add    esp,0x10
c000c337:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c33b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c33f:	52                   	push   edx
c000c340:	50                   	push   eax
c000c341:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c345:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c349:	e8 e2 a2 01 00       	call   c0026630 <__muldf3>
c000c34e:	5f                   	pop    edi
c000c34f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c353:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c357:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c35a:	e8 34 a9 01 00       	call   c0026c93 <__floatsidf>
c000c35f:	83 c4 10             	add    esp,0x10
c000c362:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c366:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c36a:	52                   	push   edx
c000c36b:	50                   	push   eax
c000c36c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c370:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c374:	e8 9b a5 01 00       	call   c0026914 <__divdf3>
c000c379:	83 c4 10             	add    esp,0x10
c000c37c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c380:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c384:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c388:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c38c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c390:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c394:	e8 1a 9c 01 00       	call   c0025fb3 <__adddf3>
c000c399:	83 c4 10             	add    esp,0x10
c000c39c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c3a0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c3a4:	83 ec 0c             	sub    esp,0xc
c000c3a7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c3aa:	e8 e4 a8 01 00       	call   c0026c93 <__floatsidf>
c000c3af:	83 c4 10             	add    esp,0x10
c000c3b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3ca:	e8 30 ab 01 00       	call   c0026eff <__ltdf2>
c000c3cf:	83 c4 10             	add    esp,0x10
c000c3d2:	85 c0                	test   eax,eax
c000c3d4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c3d8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c3dc:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c3e0:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c3e4:	78 10                	js     c000c3f6 <sinc_hex_vari_process+0x512>
c000c3e6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c3ea:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c3ee:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c3f2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c3f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3fa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3fe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c402:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c406:	e8 25 a2 01 00       	call   c0026630 <__muldf3>
c000c40b:	59                   	pop    ecx
c000c40c:	5f                   	pop    edi
c000c40d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c411:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c415:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c419:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c41d:	e8 5d f2 ff ff       	call   c000b67f <double_to_fp>
c000c422:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c426:	89 c7                	mov    edi,eax
c000c428:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c42c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c430:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c434:	e8 f7 a1 01 00       	call   c0026630 <__muldf3>
c000c439:	83 c4 18             	add    esp,0x18
c000c43c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c440:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c444:	52                   	push   edx
c000c445:	50                   	push   eax
c000c446:	e8 34 f2 ff ff       	call   c000b67f <double_to_fp>
c000c44b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c44e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c452:	83 c4 0c             	add    esp,0xc
c000c455:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c458:	8d 04 90             	lea    eax,[eax+edx*4]
c000c45b:	50                   	push   eax
c000c45c:	50                   	push   eax
c000c45d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c460:	e8 2e a8 01 00       	call   c0026c93 <__floatsidf>
c000c465:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c469:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c46d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c471:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c475:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c479:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c47d:	e8 92 a4 01 00       	call   c0026914 <__divdf3>
c000c482:	83 c4 18             	add    esp,0x18
c000c485:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c489:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c48d:	52                   	push   edx
c000c48e:	89 fa                	mov    edx,edi
c000c490:	50                   	push   eax
c000c491:	89 d8                	mov    eax,ebx
c000c493:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c497:	e8 50 de ff ff       	call   c000a2ec <calc_output_hex>
c000c49c:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c4a0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4a4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4a8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4ac:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b0:	e8 5f a4 01 00       	call   c0026914 <__divdf3>
c000c4b5:	83 c4 10             	add    esp,0x10
c000c4b8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4bc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4c8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4cc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4d0:	e8 de 9a 01 00       	call   c0025fb3 <__adddf3>
c000c4d5:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c4d9:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c4dd:	83 c4 18             	add    esp,0x18
c000c4e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4e4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4e8:	e8 c3 ab 01 00       	call   c00270b0 <lrint>
c000c4ed:	83 ec 0c             	sub    esp,0xc
c000c4f0:	50                   	push   eax
c000c4f1:	e8 9d a7 01 00       	call   c0026c93 <__floatsidf>
c000c4f6:	83 c4 10             	add    esp,0x10
c000c4f9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c4fd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c501:	52                   	push   edx
c000c502:	50                   	push   eax
c000c503:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c507:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c50b:	e8 f4 a0 01 00       	call   c0026604 <__subdf3>
c000c510:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c514:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c518:	83 c4 20             	add    esp,0x20
c000c51b:	6a 00                	push   0x0
c000c51d:	6a 00                	push   0x0
c000c51f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c523:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c527:	e8 d3 a9 01 00       	call   c0026eff <__ltdf2>
c000c52c:	83 c4 10             	add    esp,0x10
c000c52f:	85 c0                	test   eax,eax
c000c531:	79 20                	jns    c000c553 <sinc_hex_vari_process+0x66f>
c000c533:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c537:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c53b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c53f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c543:	e8 6b 9a 01 00       	call   c0025fb3 <__adddf3>
c000c548:	83 c4 10             	add    esp,0x10
c000c54b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c54f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c553:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c556:	83 ec 10             	sub    esp,0x10
c000c559:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c55d:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c560:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c564:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c568:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c56c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c570:	e8 8f a0 01 00       	call   c0026604 <__subdf3>
c000c575:	83 c4 18             	add    esp,0x18
c000c578:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c57c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c580:	52                   	push   edx
c000c581:	50                   	push   eax
c000c582:	e8 29 ab 01 00       	call   c00270b0 <lrint>
c000c587:	0f af f8             	imul   edi,eax
c000c58a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c58e:	83 c4 10             	add    esp,0x10
c000c591:	01 f8                	add    eax,edi
c000c593:	99                   	cdq    
c000c594:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c597:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c59a:	e9 fd fb ff ff       	jmp    c000c19c <sinc_hex_vari_process+0x2b8>
c000c59f:	83 c4 4c             	add    esp,0x4c
c000c5a2:	89 d0                	mov    eax,edx
c000c5a4:	5b                   	pop    ebx
c000c5a5:	5e                   	pop    esi
c000c5a6:	5f                   	pop    edi
c000c5a7:	5d                   	pop    ebp
c000c5a8:	c3                   	ret    

c000c5a9 <sinc_quad_vari_process>:
c000c5a9:	55                   	push   ebp
c000c5aa:	ba 05 00 00 00       	mov    edx,0x5
c000c5af:	57                   	push   edi
c000c5b0:	56                   	push   esi
c000c5b1:	53                   	push   ebx
c000c5b2:	83 ec 4c             	sub    esp,0x4c
c000c5b5:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c5b9:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c5bd:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c5c0:	85 db                	test   ebx,ebx
c000c5c2:	0f 84 9c 06 00 00    	je     c000cc64 <sinc_quad_vari_process+0x6bb>
c000c5c8:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c5cb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c5ce:	0f af c7             	imul   eax,edi
c000c5d1:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c5d4:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c5d7:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c5de:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c5e5:	0f af c7             	imul   eax,edi
c000c5e8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c5eb:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c5ee:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c5f1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5f5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5f9:	68 00 00 70 3f       	push   0x3f700000
c000c5fe:	6a 00                	push   0x0
c000c600:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c604:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c608:	e8 f2 a8 01 00       	call   c0026eff <__ltdf2>
c000c60d:	83 c4 10             	add    esp,0x10
c000c610:	ba 16 00 00 00       	mov    edx,0x16
c000c615:	85 c0                	test   eax,eax
c000c617:	0f 88 47 06 00 00    	js     c000cc64 <sinc_quad_vari_process+0x6bb>
c000c61d:	68 00 00 70 40       	push   0x40700000
c000c622:	6a 00                	push   0x0
c000c624:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c628:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c62c:	e8 b0 a8 01 00       	call   c0026ee1 <__gtdf2>
c000c631:	83 c4 10             	add    esp,0x10
c000c634:	ba 16 00 00 00       	mov    edx,0x16
c000c639:	85 c0                	test   eax,eax
c000c63b:	0f 8f 23 06 00 00    	jg     c000cc64 <sinc_quad_vari_process+0x6bb>
c000c641:	83 ec 0c             	sub    esp,0xc
c000c644:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c647:	e8 47 a6 01 00       	call   c0026c93 <__floatsidf>
c000c64c:	83 c4 10             	add    esp,0x10
c000c64f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c653:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c657:	68 00 00 00 40       	push   0x40000000
c000c65c:	6a 00                	push   0x0
c000c65e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c662:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c666:	e8 48 99 01 00       	call   c0025fb3 <__adddf3>
c000c66b:	59                   	pop    ecx
c000c66c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c670:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c674:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c677:	e8 17 a6 01 00       	call   c0026c93 <__floatsidf>
c000c67c:	83 c4 10             	add    esp,0x10
c000c67f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c683:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c687:	52                   	push   edx
c000c688:	50                   	push   eax
c000c689:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c68d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c691:	e8 7e a2 01 00       	call   c0026914 <__divdf3>
c000c696:	83 c4 10             	add    esp,0x10
c000c699:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c69d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c6a1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c6a4:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c6a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c6ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c6af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6bf:	e8 1d a8 01 00       	call   c0026ee1 <__gtdf2>
c000c6c4:	83 c4 10             	add    esp,0x10
c000c6c7:	85 c0                	test   eax,eax
c000c6c9:	7e 2d                	jle    c000c6f8 <sinc_quad_vari_process+0x14f>
c000c6cb:	68 00 00 f0 3f       	push   0x3ff00000
c000c6d0:	6a 00                	push   0x0
c000c6d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6da:	e8 20 a8 01 00       	call   c0026eff <__ltdf2>
c000c6df:	83 c4 10             	add    esp,0x10
c000c6e2:	85 c0                	test   eax,eax
c000c6e4:	79 4d                	jns    c000c733 <sinc_quad_vari_process+0x18a>
c000c6e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6ea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c6ee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c6f2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c6f6:	eb 1b                	jmp    c000c713 <sinc_quad_vari_process+0x16a>
c000c6f8:	68 00 00 f0 3f       	push   0x3ff00000
c000c6fd:	6a 00                	push   0x0
c000c6ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c703:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c707:	e8 f3 a7 01 00       	call   c0026eff <__ltdf2>
c000c70c:	83 c4 10             	add    esp,0x10
c000c70f:	85 c0                	test   eax,eax
c000c711:	79 20                	jns    c000c733 <sinc_quad_vari_process+0x18a>
c000c713:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c717:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c71b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c71f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c723:	e8 ec a1 01 00       	call   c0026914 <__divdf3>
c000c728:	83 c4 10             	add    esp,0x10
c000c72b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c72f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c733:	50                   	push   eax
c000c734:	50                   	push   eax
c000c735:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c739:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c73d:	e8 6e a9 01 00       	call   c00270b0 <lrint>
c000c742:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c745:	40                   	inc    eax
c000c746:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c74a:	0f af c7             	imul   eax,edi
c000c74d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c751:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c754:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c758:	58                   	pop    eax
c000c759:	5a                   	pop    edx
c000c75a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c75e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c762:	e8 49 a9 01 00       	call   c00270b0 <lrint>
c000c767:	83 ec 0c             	sub    esp,0xc
c000c76a:	50                   	push   eax
c000c76b:	e8 23 a5 01 00       	call   c0026c93 <__floatsidf>
c000c770:	83 c4 10             	add    esp,0x10
c000c773:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c777:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c77b:	52                   	push   edx
c000c77c:	50                   	push   eax
c000c77d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c781:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c785:	e8 7a 9e 01 00       	call   c0026604 <__subdf3>
c000c78a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c78e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c792:	83 c4 20             	add    esp,0x20
c000c795:	6a 00                	push   0x0
c000c797:	6a 00                	push   0x0
c000c799:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c79d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7a1:	e8 59 a7 01 00       	call   c0026eff <__ltdf2>
c000c7a6:	83 c4 10             	add    esp,0x10
c000c7a9:	85 c0                	test   eax,eax
c000c7ab:	79 1f                	jns    c000c7cc <sinc_quad_vari_process+0x223>
c000c7ad:	68 00 00 f0 3f       	push   0x3ff00000
c000c7b2:	6a 00                	push   0x0
c000c7b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7bc:	e8 f2 97 01 00       	call   c0025fb3 <__adddf3>
c000c7c1:	83 c4 10             	add    esp,0x10
c000c7c4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c7c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c7cc:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c7cf:	83 ec 10             	sub    esp,0x10
c000c7d2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c7d6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7e1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c7e5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c7e9:	e8 16 9e 01 00       	call   c0026604 <__subdf3>
c000c7ee:	83 c4 18             	add    esp,0x18
c000c7f1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c7f5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c7f9:	52                   	push   edx
c000c7fa:	50                   	push   eax
c000c7fb:	e8 b0 a8 01 00       	call   c00270b0 <lrint>
c000c800:	0f af f8             	imul   edi,eax
c000c803:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c807:	01 f8                	add    eax,edi
c000c809:	99                   	cdq    
c000c80a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c80d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c810:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c814:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c818:	68 00 00 f0 3f       	push   0x3ff00000
c000c81d:	6a 00                	push   0x0
c000c81f:	e8 f0 a0 01 00       	call   c0026914 <__divdf3>
c000c824:	83 c4 10             	add    esp,0x10
c000c827:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c82b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c82f:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c834:	68 23 42 92 0c       	push   0xc924223
c000c839:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c83d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c841:	e8 6d 97 01 00       	call   c0025fb3 <__adddf3>
c000c846:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c84a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c84e:	83 c4 20             	add    esp,0x20
c000c851:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c859:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c861:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c864:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c867:	7d 50                	jge    c000c8b9 <sinc_quad_vari_process+0x310>
c000c869:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c86c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c86f:	01 c8                	add    eax,ecx
c000c871:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c874:	99                   	cdq    
c000c875:	f7 f9                	idiv   ecx
c000c877:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c87b:	7d 0c                	jge    c000c889 <sinc_quad_vari_process+0x2e0>
c000c87d:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c880:	85 ff                	test   edi,edi
c000c882:	79 6c                	jns    c000c8f0 <sinc_quad_vari_process+0x347>
c000c884:	e9 e7 00 00 00       	jmp    c000c970 <sinc_quad_vari_process+0x3c7>
c000c889:	50                   	push   eax
c000c88a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c88e:	56                   	push   esi
c000c88f:	53                   	push   ebx
c000c890:	e8 11 ee ff ff       	call   c000b6a6 <prepare_data>
c000c895:	83 c4 10             	add    esp,0x10
c000c898:	89 c2                	mov    edx,eax
c000c89a:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c89d:	85 c0                	test   eax,eax
c000c89f:	0f 85 bf 03 00 00    	jne    c000cc64 <sinc_quad_vari_process+0x6bb>
c000c8a5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c8a8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c8ab:	01 c8                	add    eax,ecx
c000c8ad:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c8b0:	99                   	cdq    
c000c8b1:	f7 f9                	idiv   ecx
c000c8b3:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c8b7:	7c c4                	jl     c000c87d <sinc_quad_vari_process+0x2d4>
c000c8b9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c8bd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c8c1:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c8c4:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c8c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8cb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c8cf:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c8d2:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c8d5:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c8d8:	99                   	cdq    
c000c8d9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c8dc:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c8df:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c8e2:	99                   	cdq    
c000c8e3:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c8e6:	31 d2                	xor    edx,edx
c000c8e8:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c8eb:	e9 74 03 00 00       	jmp    c000cc64 <sinc_quad_vari_process+0x6bb>
c000c8f0:	83 ec 0c             	sub    esp,0xc
c000c8f3:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c8f6:	e8 98 a3 01 00       	call   c0026c93 <__floatsidf>
c000c8fb:	83 c4 10             	add    esp,0x10
c000c8fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c902:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c906:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c90a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c90e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c912:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c916:	e8 98 96 01 00       	call   c0025fb3 <__adddf3>
c000c91b:	83 c4 10             	add    esp,0x10
c000c91e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c922:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c926:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c92a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c92e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c932:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c936:	e8 78 96 01 00       	call   c0025fb3 <__adddf3>
c000c93b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c93e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c942:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c946:	e8 48 a3 01 00       	call   c0026c93 <__floatsidf>
c000c94b:	83 c4 10             	add    esp,0x10
c000c94e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c952:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c956:	52                   	push   edx
c000c957:	50                   	push   eax
c000c958:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c95c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c960:	e8 98 a5 01 00       	call   c0026efd <__gedf2>
c000c965:	83 c4 10             	add    esp,0x10
c000c968:	85 c0                	test   eax,eax
c000c96a:	0f 89 49 ff ff ff    	jns    c000c8b9 <sinc_quad_vari_process+0x310>
c000c970:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c974:	0f 8e ef 00 00 00    	jle    c000ca69 <sinc_quad_vari_process+0x4c0>
c000c97a:	83 ec 10             	sub    esp,0x10
c000c97d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c980:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c983:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c986:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c989:	e8 76 9c 01 00       	call   c0026604 <__subdf3>
c000c98e:	83 c4 18             	add    esp,0x18
c000c991:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c995:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c999:	52                   	push   edx
c000c99a:	50                   	push   eax
c000c99b:	e8 f0 a6 01 00       	call   c0027090 <fabs>
c000c9a0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c9a4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c9a8:	83 c4 10             	add    esp,0x10
c000c9ab:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c9b0:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c9b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9bd:	e8 1f a5 01 00       	call   c0026ee1 <__gtdf2>
c000c9c2:	83 c4 10             	add    esp,0x10
c000c9c5:	85 c0                	test   eax,eax
c000c9c7:	0f 8e 9c 00 00 00    	jle    c000ca69 <sinc_quad_vari_process+0x4c0>
c000c9cd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c9d0:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c9d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c9d7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c9db:	52                   	push   edx
c000c9dc:	50                   	push   eax
c000c9dd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c9e0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c9e3:	e8 1c 9c 01 00       	call   c0026604 <__subdf3>
c000c9e8:	59                   	pop    ecx
c000c9e9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c9ed:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c9f1:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c9f4:	e8 9a a2 01 00       	call   c0026c93 <__floatsidf>
c000c9f9:	83 c4 10             	add    esp,0x10
c000c9fc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca00:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca04:	52                   	push   edx
c000ca05:	50                   	push   eax
c000ca06:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca0a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca0e:	e8 1d 9c 01 00       	call   c0026630 <__muldf3>
c000ca13:	5f                   	pop    edi
c000ca14:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ca18:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000ca1c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000ca1f:	e8 6f a2 01 00       	call   c0026c93 <__floatsidf>
c000ca24:	83 c4 10             	add    esp,0x10
c000ca27:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca2b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca2f:	52                   	push   edx
c000ca30:	50                   	push   eax
c000ca31:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca35:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca39:	e8 d6 9e 01 00       	call   c0026914 <__divdf3>
c000ca3e:	83 c4 10             	add    esp,0x10
c000ca41:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca45:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca49:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca4d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca51:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca55:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca59:	e8 55 95 01 00       	call   c0025fb3 <__adddf3>
c000ca5e:	83 c4 10             	add    esp,0x10
c000ca61:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ca65:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ca69:	83 ec 0c             	sub    esp,0xc
c000ca6c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ca6f:	e8 1f a2 01 00       	call   c0026c93 <__floatsidf>
c000ca74:	83 c4 10             	add    esp,0x10
c000ca77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca7f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca83:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca87:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca8f:	e8 6b a4 01 00       	call   c0026eff <__ltdf2>
c000ca94:	83 c4 10             	add    esp,0x10
c000ca97:	85 c0                	test   eax,eax
c000ca99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ca9d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000caa1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000caa5:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000caa9:	78 10                	js     c000cabb <sinc_quad_vari_process+0x512>
c000caab:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000caaf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cab3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cab7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cabb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cabf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cac3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cac7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cacb:	e8 60 9b 01 00       	call   c0026630 <__muldf3>
c000cad0:	59                   	pop    ecx
c000cad1:	5f                   	pop    edi
c000cad2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cad6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cada:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cade:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cae2:	e8 98 eb ff ff       	call   c000b67f <double_to_fp>
c000cae7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000caeb:	89 c7                	mov    edi,eax
c000caed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000caf1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000caf5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000caf9:	e8 32 9b 01 00       	call   c0026630 <__muldf3>
c000cafe:	83 c4 18             	add    esp,0x18
c000cb01:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb05:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb09:	52                   	push   edx
c000cb0a:	50                   	push   eax
c000cb0b:	e8 6f eb ff ff       	call   c000b67f <double_to_fp>
c000cb10:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cb13:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cb17:	83 c4 0c             	add    esp,0xc
c000cb1a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cb1d:	8d 04 90             	lea    eax,[eax+edx*4]
c000cb20:	50                   	push   eax
c000cb21:	50                   	push   eax
c000cb22:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cb25:	e8 69 a1 01 00       	call   c0026c93 <__floatsidf>
c000cb2a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cb2e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cb32:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb36:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb3a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb3e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb42:	e8 cd 9d 01 00       	call   c0026914 <__divdf3>
c000cb47:	83 c4 18             	add    esp,0x18
c000cb4a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb4e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb52:	52                   	push   edx
c000cb53:	89 fa                	mov    edx,edi
c000cb55:	50                   	push   eax
c000cb56:	89 d8                	mov    eax,ebx
c000cb58:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cb5c:	e8 a5 d1 ff ff       	call   c0009d06 <calc_output_quad>
c000cb61:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cb65:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb69:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb6d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb75:	e8 9a 9d 01 00       	call   c0026914 <__divdf3>
c000cb7a:	83 c4 10             	add    esp,0x10
c000cb7d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb81:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb85:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb8d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb91:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb95:	e8 19 94 01 00       	call   c0025fb3 <__adddf3>
c000cb9a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cb9e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cba2:	83 c4 18             	add    esp,0x18
c000cba5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cba9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbad:	e8 fe a4 01 00       	call   c00270b0 <lrint>
c000cbb2:	83 ec 0c             	sub    esp,0xc
c000cbb5:	50                   	push   eax
c000cbb6:	e8 d8 a0 01 00       	call   c0026c93 <__floatsidf>
c000cbbb:	83 c4 10             	add    esp,0x10
c000cbbe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cbc2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cbc6:	52                   	push   edx
c000cbc7:	50                   	push   eax
c000cbc8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cbcc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cbd0:	e8 2f 9a 01 00       	call   c0026604 <__subdf3>
c000cbd5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbd9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbdd:	83 c4 20             	add    esp,0x20
c000cbe0:	6a 00                	push   0x0
c000cbe2:	6a 00                	push   0x0
c000cbe4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbe8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbec:	e8 0e a3 01 00       	call   c0026eff <__ltdf2>
c000cbf1:	83 c4 10             	add    esp,0x10
c000cbf4:	85 c0                	test   eax,eax
c000cbf6:	79 20                	jns    c000cc18 <sinc_quad_vari_process+0x66f>
c000cbf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc08:	e8 a6 93 01 00       	call   c0025fb3 <__adddf3>
c000cc0d:	83 c4 10             	add    esp,0x10
c000cc10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cc14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cc18:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000cc1b:	83 ec 10             	sub    esp,0x10
c000cc1e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cc22:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cc25:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc2d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cc31:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cc35:	e8 ca 99 01 00       	call   c0026604 <__subdf3>
c000cc3a:	83 c4 18             	add    esp,0x18
c000cc3d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc41:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc45:	52                   	push   edx
c000cc46:	50                   	push   eax
c000cc47:	e8 64 a4 01 00       	call   c00270b0 <lrint>
c000cc4c:	0f af f8             	imul   edi,eax
c000cc4f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cc53:	83 c4 10             	add    esp,0x10
c000cc56:	01 f8                	add    eax,edi
c000cc58:	99                   	cdq    
c000cc59:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000cc5c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000cc5f:	e9 fd fb ff ff       	jmp    c000c861 <sinc_quad_vari_process+0x2b8>
c000cc64:	83 c4 4c             	add    esp,0x4c
c000cc67:	89 d0                	mov    eax,edx
c000cc69:	5b                   	pop    ebx
c000cc6a:	5e                   	pop    esi
c000cc6b:	5f                   	pop    edi
c000cc6c:	5d                   	pop    ebp
c000cc6d:	c3                   	ret    

c000cc6e <sinc_stereo_vari_process>:
c000cc6e:	55                   	push   ebp
c000cc6f:	ba 05 00 00 00       	mov    edx,0x5
c000cc74:	57                   	push   edi
c000cc75:	56                   	push   esi
c000cc76:	53                   	push   ebx
c000cc77:	83 ec 4c             	sub    esp,0x4c
c000cc7a:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cc7e:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000cc82:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000cc85:	85 db                	test   ebx,ebx
c000cc87:	0f 84 9c 06 00 00    	je     c000d329 <sinc_stereo_vari_process+0x6bb>
c000cc8d:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cc90:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cc93:	0f af c7             	imul   eax,edi
c000cc96:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cc99:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000cc9c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cca3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000ccaa:	0f af c7             	imul   eax,edi
c000ccad:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ccb0:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000ccb3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ccb6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccbe:	68 00 00 70 3f       	push   0x3f700000
c000ccc3:	6a 00                	push   0x0
c000ccc5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccc9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cccd:	e8 2d a2 01 00       	call   c0026eff <__ltdf2>
c000ccd2:	83 c4 10             	add    esp,0x10
c000ccd5:	ba 16 00 00 00       	mov    edx,0x16
c000ccda:	85 c0                	test   eax,eax
c000ccdc:	0f 88 47 06 00 00    	js     c000d329 <sinc_stereo_vari_process+0x6bb>
c000cce2:	68 00 00 70 40       	push   0x40700000
c000cce7:	6a 00                	push   0x0
c000cce9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cced:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccf1:	e8 eb a1 01 00       	call   c0026ee1 <__gtdf2>
c000ccf6:	83 c4 10             	add    esp,0x10
c000ccf9:	ba 16 00 00 00       	mov    edx,0x16
c000ccfe:	85 c0                	test   eax,eax
c000cd00:	0f 8f 23 06 00 00    	jg     c000d329 <sinc_stereo_vari_process+0x6bb>
c000cd06:	83 ec 0c             	sub    esp,0xc
c000cd09:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cd0c:	e8 82 9f 01 00       	call   c0026c93 <__floatsidf>
c000cd11:	83 c4 10             	add    esp,0x10
c000cd14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cd18:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cd1c:	68 00 00 00 40       	push   0x40000000
c000cd21:	6a 00                	push   0x0
c000cd23:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd27:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd2b:	e8 83 92 01 00       	call   c0025fb3 <__adddf3>
c000cd30:	59                   	pop    ecx
c000cd31:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cd35:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cd39:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd3c:	e8 52 9f 01 00       	call   c0026c93 <__floatsidf>
c000cd41:	83 c4 10             	add    esp,0x10
c000cd44:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cd48:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cd4c:	52                   	push   edx
c000cd4d:	50                   	push   eax
c000cd4e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd56:	e8 b9 9b 01 00       	call   c0026914 <__divdf3>
c000cd5b:	83 c4 10             	add    esp,0x10
c000cd5e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cd62:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cd66:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cd69:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cd6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cd70:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cd74:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd78:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd84:	e8 58 a1 01 00       	call   c0026ee1 <__gtdf2>
c000cd89:	83 c4 10             	add    esp,0x10
c000cd8c:	85 c0                	test   eax,eax
c000cd8e:	7e 2d                	jle    c000cdbd <sinc_stereo_vari_process+0x14f>
c000cd90:	68 00 00 f0 3f       	push   0x3ff00000
c000cd95:	6a 00                	push   0x0
c000cd97:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd9f:	e8 5b a1 01 00       	call   c0026eff <__ltdf2>
c000cda4:	83 c4 10             	add    esp,0x10
c000cda7:	85 c0                	test   eax,eax
c000cda9:	79 4d                	jns    c000cdf8 <sinc_stereo_vari_process+0x18a>
c000cdab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdaf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cdb3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cdb7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cdbb:	eb 1b                	jmp    c000cdd8 <sinc_stereo_vari_process+0x16a>
c000cdbd:	68 00 00 f0 3f       	push   0x3ff00000
c000cdc2:	6a 00                	push   0x0
c000cdc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdcc:	e8 2e a1 01 00       	call   c0026eff <__ltdf2>
c000cdd1:	83 c4 10             	add    esp,0x10
c000cdd4:	85 c0                	test   eax,eax
c000cdd6:	79 20                	jns    c000cdf8 <sinc_stereo_vari_process+0x18a>
c000cdd8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cddc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cde0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cde4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cde8:	e8 27 9b 01 00       	call   c0026914 <__divdf3>
c000cded:	83 c4 10             	add    esp,0x10
c000cdf0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cdf4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cdf8:	50                   	push   eax
c000cdf9:	50                   	push   eax
c000cdfa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdfe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce02:	e8 a9 a2 01 00       	call   c00270b0 <lrint>
c000ce07:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000ce0a:	40                   	inc    eax
c000ce0b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce0f:	0f af c7             	imul   eax,edi
c000ce12:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000ce16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce19:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce1d:	58                   	pop    eax
c000ce1e:	5a                   	pop    edx
c000ce1f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce23:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce27:	e8 84 a2 01 00       	call   c00270b0 <lrint>
c000ce2c:	83 ec 0c             	sub    esp,0xc
c000ce2f:	50                   	push   eax
c000ce30:	e8 5e 9e 01 00       	call   c0026c93 <__floatsidf>
c000ce35:	83 c4 10             	add    esp,0x10
c000ce38:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce3c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce40:	52                   	push   edx
c000ce41:	50                   	push   eax
c000ce42:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ce46:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ce4a:	e8 b5 97 01 00       	call   c0026604 <__subdf3>
c000ce4f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce53:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce57:	83 c4 20             	add    esp,0x20
c000ce5a:	6a 00                	push   0x0
c000ce5c:	6a 00                	push   0x0
c000ce5e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce62:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce66:	e8 94 a0 01 00       	call   c0026eff <__ltdf2>
c000ce6b:	83 c4 10             	add    esp,0x10
c000ce6e:	85 c0                	test   eax,eax
c000ce70:	79 1f                	jns    c000ce91 <sinc_stereo_vari_process+0x223>
c000ce72:	68 00 00 f0 3f       	push   0x3ff00000
c000ce77:	6a 00                	push   0x0
c000ce79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce81:	e8 2d 91 01 00       	call   c0025fb3 <__adddf3>
c000ce86:	83 c4 10             	add    esp,0x10
c000ce89:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce8d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce91:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce94:	83 ec 10             	sub    esp,0x10
c000ce97:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ce9b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cea2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cea6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ceaa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ceae:	e8 51 97 01 00       	call   c0026604 <__subdf3>
c000ceb3:	83 c4 18             	add    esp,0x18
c000ceb6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ceba:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cebe:	52                   	push   edx
c000cebf:	50                   	push   eax
c000cec0:	e8 eb a1 01 00       	call   c00270b0 <lrint>
c000cec5:	0f af f8             	imul   edi,eax
c000cec8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cecc:	01 f8                	add    eax,edi
c000cece:	99                   	cdq    
c000cecf:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ced2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ced5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ced9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cedd:	68 00 00 f0 3f       	push   0x3ff00000
c000cee2:	6a 00                	push   0x0
c000cee4:	e8 2b 9a 01 00       	call   c0026914 <__divdf3>
c000cee9:	83 c4 10             	add    esp,0x10
c000ceec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cef0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cef4:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000cef9:	68 23 42 92 0c       	push   0xc924223
c000cefe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf02:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf06:	e8 a8 90 01 00       	call   c0025fb3 <__adddf3>
c000cf0b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000cf0f:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000cf13:	83 c4 20             	add    esp,0x20
c000cf16:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000cf1e:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cf26:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cf29:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cf2c:	7d 50                	jge    c000cf7e <sinc_stereo_vari_process+0x310>
c000cf2e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cf31:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cf34:	01 c8                	add    eax,ecx
c000cf36:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cf39:	99                   	cdq    
c000cf3a:	f7 f9                	idiv   ecx
c000cf3c:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cf40:	7d 0c                	jge    c000cf4e <sinc_stereo_vari_process+0x2e0>
c000cf42:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cf45:	85 ff                	test   edi,edi
c000cf47:	79 6c                	jns    c000cfb5 <sinc_stereo_vari_process+0x347>
c000cf49:	e9 e7 00 00 00       	jmp    c000d035 <sinc_stereo_vari_process+0x3c7>
c000cf4e:	50                   	push   eax
c000cf4f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cf53:	56                   	push   esi
c000cf54:	53                   	push   ebx
c000cf55:	e8 4c e7 ff ff       	call   c000b6a6 <prepare_data>
c000cf5a:	83 c4 10             	add    esp,0x10
c000cf5d:	89 c2                	mov    edx,eax
c000cf5f:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cf62:	85 c0                	test   eax,eax
c000cf64:	0f 85 bf 03 00 00    	jne    c000d329 <sinc_stereo_vari_process+0x6bb>
c000cf6a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cf6d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cf70:	01 c8                	add    eax,ecx
c000cf72:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cf75:	99                   	cdq    
c000cf76:	f7 f9                	idiv   ecx
c000cf78:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cf7c:	7c c4                	jl     c000cf42 <sinc_stereo_vari_process+0x2d4>
c000cf7e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cf82:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cf86:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cf89:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cf8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf90:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cf94:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cf97:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cf9a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cf9d:	99                   	cdq    
c000cf9e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cfa1:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cfa4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cfa7:	99                   	cdq    
c000cfa8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cfab:	31 d2                	xor    edx,edx
c000cfad:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cfb0:	e9 74 03 00 00       	jmp    c000d329 <sinc_stereo_vari_process+0x6bb>
c000cfb5:	83 ec 0c             	sub    esp,0xc
c000cfb8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cfbb:	e8 d3 9c 01 00       	call   c0026c93 <__floatsidf>
c000cfc0:	83 c4 10             	add    esp,0x10
c000cfc3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cfc7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cfcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cfcf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cfd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cfd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cfdb:	e8 d3 8f 01 00       	call   c0025fb3 <__adddf3>
c000cfe0:	83 c4 10             	add    esp,0x10
c000cfe3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cfe7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cfeb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cfef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cff3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cff7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cffb:	e8 b3 8f 01 00       	call   c0025fb3 <__adddf3>
c000d000:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d003:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d007:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d00b:	e8 83 9c 01 00       	call   c0026c93 <__floatsidf>
c000d010:	83 c4 10             	add    esp,0x10
c000d013:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d017:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d01b:	52                   	push   edx
c000d01c:	50                   	push   eax
c000d01d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d021:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d025:	e8 d3 9e 01 00       	call   c0026efd <__gedf2>
c000d02a:	83 c4 10             	add    esp,0x10
c000d02d:	85 c0                	test   eax,eax
c000d02f:	0f 89 49 ff ff ff    	jns    c000cf7e <sinc_stereo_vari_process+0x310>
c000d035:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d039:	0f 8e ef 00 00 00    	jle    c000d12e <sinc_stereo_vari_process+0x4c0>
c000d03f:	83 ec 10             	sub    esp,0x10
c000d042:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d045:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d048:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d04b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d04e:	e8 b1 95 01 00       	call   c0026604 <__subdf3>
c000d053:	83 c4 18             	add    esp,0x18
c000d056:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d05a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d05e:	52                   	push   edx
c000d05f:	50                   	push   eax
c000d060:	e8 2b a0 01 00       	call   c0027090 <fabs>
c000d065:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d069:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d06d:	83 c4 10             	add    esp,0x10
c000d070:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d075:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d07a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d07e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d082:	e8 5a 9e 01 00       	call   c0026ee1 <__gtdf2>
c000d087:	83 c4 10             	add    esp,0x10
c000d08a:	85 c0                	test   eax,eax
c000d08c:	0f 8e 9c 00 00 00    	jle    c000d12e <sinc_stereo_vari_process+0x4c0>
c000d092:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d095:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d098:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d09c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d0a0:	52                   	push   edx
c000d0a1:	50                   	push   eax
c000d0a2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d0a5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d0a8:	e8 57 95 01 00       	call   c0026604 <__subdf3>
c000d0ad:	59                   	pop    ecx
c000d0ae:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d0b2:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d0b6:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d0b9:	e8 d5 9b 01 00       	call   c0026c93 <__floatsidf>
c000d0be:	83 c4 10             	add    esp,0x10
c000d0c1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0c5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0c9:	52                   	push   edx
c000d0ca:	50                   	push   eax
c000d0cb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0cf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0d3:	e8 58 95 01 00       	call   c0026630 <__muldf3>
c000d0d8:	5f                   	pop    edi
c000d0d9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d0dd:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d0e1:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d0e4:	e8 aa 9b 01 00       	call   c0026c93 <__floatsidf>
c000d0e9:	83 c4 10             	add    esp,0x10
c000d0ec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0f0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0f4:	52                   	push   edx
c000d0f5:	50                   	push   eax
c000d0f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0fe:	e8 11 98 01 00       	call   c0026914 <__divdf3>
c000d103:	83 c4 10             	add    esp,0x10
c000d106:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d10a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d10e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d112:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d116:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d11a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d11e:	e8 90 8e 01 00       	call   c0025fb3 <__adddf3>
c000d123:	83 c4 10             	add    esp,0x10
c000d126:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d12a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d12e:	83 ec 0c             	sub    esp,0xc
c000d131:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d134:	e8 5a 9b 01 00       	call   c0026c93 <__floatsidf>
c000d139:	83 c4 10             	add    esp,0x10
c000d13c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d140:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d144:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d148:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d14c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d150:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d154:	e8 a6 9d 01 00       	call   c0026eff <__ltdf2>
c000d159:	83 c4 10             	add    esp,0x10
c000d15c:	85 c0                	test   eax,eax
c000d15e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d162:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d166:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d16a:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d16e:	78 10                	js     c000d180 <sinc_stereo_vari_process+0x512>
c000d170:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d174:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d178:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d17c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d180:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d184:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d188:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d18c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d190:	e8 9b 94 01 00       	call   c0026630 <__muldf3>
c000d195:	59                   	pop    ecx
c000d196:	5f                   	pop    edi
c000d197:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d19b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d19f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1a7:	e8 d3 e4 ff ff       	call   c000b67f <double_to_fp>
c000d1ac:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d1b0:	89 c7                	mov    edi,eax
c000d1b2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d1b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1be:	e8 6d 94 01 00       	call   c0026630 <__muldf3>
c000d1c3:	83 c4 18             	add    esp,0x18
c000d1c6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d1ca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d1ce:	52                   	push   edx
c000d1cf:	50                   	push   eax
c000d1d0:	e8 aa e4 ff ff       	call   c000b67f <double_to_fp>
c000d1d5:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d1d8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d1dc:	83 c4 0c             	add    esp,0xc
c000d1df:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d1e2:	8d 04 90             	lea    eax,[eax+edx*4]
c000d1e5:	50                   	push   eax
c000d1e6:	50                   	push   eax
c000d1e7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d1ea:	e8 a4 9a 01 00       	call   c0026c93 <__floatsidf>
c000d1ef:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d1f3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d1f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1fb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1ff:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d203:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d207:	e8 08 97 01 00       	call   c0026914 <__divdf3>
c000d20c:	83 c4 18             	add    esp,0x18
c000d20f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d213:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d217:	52                   	push   edx
c000d218:	89 fa                	mov    edx,edi
c000d21a:	50                   	push   eax
c000d21b:	89 d8                	mov    eax,ebx
c000d21d:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d221:	e8 02 c7 ff ff       	call   c0009928 <calc_output_stereo>
c000d226:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d22a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d22e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d232:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d236:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d23a:	e8 d5 96 01 00       	call   c0026914 <__divdf3>
c000d23f:	83 c4 10             	add    esp,0x10
c000d242:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d246:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d24a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d24e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d252:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d256:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d25a:	e8 54 8d 01 00       	call   c0025fb3 <__adddf3>
c000d25f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d263:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d267:	83 c4 18             	add    esp,0x18
c000d26a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d26e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d272:	e8 39 9e 01 00       	call   c00270b0 <lrint>
c000d277:	83 ec 0c             	sub    esp,0xc
c000d27a:	50                   	push   eax
c000d27b:	e8 13 9a 01 00       	call   c0026c93 <__floatsidf>
c000d280:	83 c4 10             	add    esp,0x10
c000d283:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d287:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d28b:	52                   	push   edx
c000d28c:	50                   	push   eax
c000d28d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d291:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d295:	e8 6a 93 01 00       	call   c0026604 <__subdf3>
c000d29a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d29e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2a2:	83 c4 20             	add    esp,0x20
c000d2a5:	6a 00                	push   0x0
c000d2a7:	6a 00                	push   0x0
c000d2a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2b1:	e8 49 9c 01 00       	call   c0026eff <__ltdf2>
c000d2b6:	83 c4 10             	add    esp,0x10
c000d2b9:	85 c0                	test   eax,eax
c000d2bb:	79 20                	jns    c000d2dd <sinc_stereo_vari_process+0x66f>
c000d2bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2cd:	e8 e1 8c 01 00       	call   c0025fb3 <__adddf3>
c000d2d2:	83 c4 10             	add    esp,0x10
c000d2d5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d2d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d2dd:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d2e0:	83 ec 10             	sub    esp,0x10
c000d2e3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d2e7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d2ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2f2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d2f6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d2fa:	e8 05 93 01 00       	call   c0026604 <__subdf3>
c000d2ff:	83 c4 18             	add    esp,0x18
c000d302:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d306:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d30a:	52                   	push   edx
c000d30b:	50                   	push   eax
c000d30c:	e8 9f 9d 01 00       	call   c00270b0 <lrint>
c000d311:	0f af f8             	imul   edi,eax
c000d314:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d318:	83 c4 10             	add    esp,0x10
c000d31b:	01 f8                	add    eax,edi
c000d31d:	99                   	cdq    
c000d31e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d321:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d324:	e9 fd fb ff ff       	jmp    c000cf26 <sinc_stereo_vari_process+0x2b8>
c000d329:	83 c4 4c             	add    esp,0x4c
c000d32c:	89 d0                	mov    eax,edx
c000d32e:	5b                   	pop    ebx
c000d32f:	5e                   	pop    esi
c000d330:	5f                   	pop    edi
c000d331:	5d                   	pop    ebp
c000d332:	c3                   	ret    

c000d333 <sinc_mono_vari_process>:
c000d333:	55                   	push   ebp
c000d334:	ba 05 00 00 00       	mov    edx,0x5
c000d339:	57                   	push   edi
c000d33a:	56                   	push   esi
c000d33b:	53                   	push   ebx
c000d33c:	83 ec 4c             	sub    esp,0x4c
c000d33f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d343:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d347:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d34a:	85 db                	test   ebx,ebx
c000d34c:	0f 84 c1 06 00 00    	je     c000da13 <sinc_mono_vari_process+0x6e0>
c000d352:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d355:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d358:	0f af c7             	imul   eax,edi
c000d35b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d35e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d361:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d368:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d36f:	0f af c7             	imul   eax,edi
c000d372:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d375:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d379:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d37c:	8b 00                	mov    eax,DWORD PTR [eax]
c000d37e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d382:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d386:	68 00 00 70 3f       	push   0x3f700000
c000d38b:	6a 00                	push   0x0
c000d38d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d391:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d395:	e8 65 9b 01 00       	call   c0026eff <__ltdf2>
c000d39a:	83 c4 10             	add    esp,0x10
c000d39d:	ba 16 00 00 00       	mov    edx,0x16
c000d3a2:	85 c0                	test   eax,eax
c000d3a4:	0f 88 69 06 00 00    	js     c000da13 <sinc_mono_vari_process+0x6e0>
c000d3aa:	68 00 00 70 40       	push   0x40700000
c000d3af:	6a 00                	push   0x0
c000d3b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3b9:	e8 23 9b 01 00       	call   c0026ee1 <__gtdf2>
c000d3be:	83 c4 10             	add    esp,0x10
c000d3c1:	ba 16 00 00 00       	mov    edx,0x16
c000d3c6:	85 c0                	test   eax,eax
c000d3c8:	0f 8f 45 06 00 00    	jg     c000da13 <sinc_mono_vari_process+0x6e0>
c000d3ce:	83 ec 0c             	sub    esp,0xc
c000d3d1:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d3d4:	e8 ba 98 01 00       	call   c0026c93 <__floatsidf>
c000d3d9:	83 c4 10             	add    esp,0x10
c000d3dc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d3e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d3e4:	68 00 00 00 40       	push   0x40000000
c000d3e9:	6a 00                	push   0x0
c000d3eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d3ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d3f3:	e8 bb 8b 01 00       	call   c0025fb3 <__adddf3>
c000d3f8:	59                   	pop    ecx
c000d3f9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d3fd:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d401:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d404:	e8 8a 98 01 00       	call   c0026c93 <__floatsidf>
c000d409:	83 c4 10             	add    esp,0x10
c000d40c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d410:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d414:	52                   	push   edx
c000d415:	50                   	push   eax
c000d416:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d41a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d41e:	e8 f1 94 01 00       	call   c0026914 <__divdf3>
c000d423:	83 c4 10             	add    esp,0x10
c000d426:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d42a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d42e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d431:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d434:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d438:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d43c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d440:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d444:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d448:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d44c:	e8 90 9a 01 00       	call   c0026ee1 <__gtdf2>
c000d451:	83 c4 10             	add    esp,0x10
c000d454:	85 c0                	test   eax,eax
c000d456:	7e 2d                	jle    c000d485 <sinc_mono_vari_process+0x152>
c000d458:	68 00 00 f0 3f       	push   0x3ff00000
c000d45d:	6a 00                	push   0x0
c000d45f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d463:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d467:	e8 93 9a 01 00       	call   c0026eff <__ltdf2>
c000d46c:	83 c4 10             	add    esp,0x10
c000d46f:	85 c0                	test   eax,eax
c000d471:	79 4d                	jns    c000d4c0 <sinc_mono_vari_process+0x18d>
c000d473:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d477:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d47b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d47f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d483:	eb 1b                	jmp    c000d4a0 <sinc_mono_vari_process+0x16d>
c000d485:	68 00 00 f0 3f       	push   0x3ff00000
c000d48a:	6a 00                	push   0x0
c000d48c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d490:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d494:	e8 66 9a 01 00       	call   c0026eff <__ltdf2>
c000d499:	83 c4 10             	add    esp,0x10
c000d49c:	85 c0                	test   eax,eax
c000d49e:	79 20                	jns    c000d4c0 <sinc_mono_vari_process+0x18d>
c000d4a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d4a4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d4a8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4ac:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4b0:	e8 5f 94 01 00       	call   c0026914 <__divdf3>
c000d4b5:	83 c4 10             	add    esp,0x10
c000d4b8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4bc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4c0:	50                   	push   eax
c000d4c1:	50                   	push   eax
c000d4c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4c6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4ca:	e8 e1 9b 01 00       	call   c00270b0 <lrint>
c000d4cf:	40                   	inc    eax
c000d4d0:	0f af c7             	imul   eax,edi
c000d4d3:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d4d7:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d4db:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d4de:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d4e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4e5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4e9:	58                   	pop    eax
c000d4ea:	5a                   	pop    edx
c000d4eb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4ef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4f3:	e8 b8 9b 01 00       	call   c00270b0 <lrint>
c000d4f8:	83 ec 0c             	sub    esp,0xc
c000d4fb:	50                   	push   eax
c000d4fc:	e8 92 97 01 00       	call   c0026c93 <__floatsidf>
c000d501:	83 c4 10             	add    esp,0x10
c000d504:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d508:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d50c:	52                   	push   edx
c000d50d:	50                   	push   eax
c000d50e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d512:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d516:	e8 e9 90 01 00       	call   c0026604 <__subdf3>
c000d51b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d51f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d523:	83 c4 20             	add    esp,0x20
c000d526:	6a 00                	push   0x0
c000d528:	6a 00                	push   0x0
c000d52a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d52e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d532:	e8 c8 99 01 00       	call   c0026eff <__ltdf2>
c000d537:	83 c4 10             	add    esp,0x10
c000d53a:	85 c0                	test   eax,eax
c000d53c:	79 1f                	jns    c000d55d <sinc_mono_vari_process+0x22a>
c000d53e:	68 00 00 f0 3f       	push   0x3ff00000
c000d543:	6a 00                	push   0x0
c000d545:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d549:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d54d:	e8 61 8a 01 00       	call   c0025fb3 <__adddf3>
c000d552:	83 c4 10             	add    esp,0x10
c000d555:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d559:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d55d:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d560:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d563:	83 ec 10             	sub    esp,0x10
c000d566:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d56a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d56e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d572:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d576:	e8 89 90 01 00       	call   c0026604 <__subdf3>
c000d57b:	83 c4 18             	add    esp,0x18
c000d57e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d582:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d586:	52                   	push   edx
c000d587:	50                   	push   eax
c000d588:	e8 23 9b 01 00       	call   c00270b0 <lrint>
c000d58d:	0f af f8             	imul   edi,eax
c000d590:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d593:	31 ff                	xor    edi,edi
c000d595:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d59a:	99                   	cdq    
c000d59b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d59e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d5a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d5a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d5a9:	55                   	push   ebp
c000d5aa:	57                   	push   edi
c000d5ab:	e8 64 93 01 00       	call   c0026914 <__divdf3>
c000d5b0:	83 c4 10             	add    esp,0x10
c000d5b3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d5b7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d5bb:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d5c0:	68 23 42 92 0c       	push   0xc924223
c000d5c5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5c9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5cd:	e8 e1 89 01 00       	call   c0025fb3 <__adddf3>
c000d5d2:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d5d6:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d5da:	83 c4 20             	add    esp,0x20
c000d5dd:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d5e1:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d5e5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d5e8:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d5eb:	7d 54                	jge    c000d641 <sinc_mono_vari_process+0x30e>
c000d5ed:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d5f0:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d5f3:	01 c8                	add    eax,ecx
c000d5f5:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d5f8:	99                   	cdq    
c000d5f9:	f7 f9                	idiv   ecx
c000d5fb:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d5ff:	7d 0c                	jge    c000d60d <sinc_mono_vari_process+0x2da>
c000d601:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d604:	85 ff                	test   edi,edi
c000d606:	79 73                	jns    c000d67b <sinc_mono_vari_process+0x348>
c000d608:	e9 ee 00 00 00       	jmp    c000d6fb <sinc_mono_vari_process+0x3c8>
c000d60d:	50                   	push   eax
c000d60e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d612:	56                   	push   esi
c000d613:	53                   	push   ebx
c000d614:	e8 8d e0 ff ff       	call   c000b6a6 <prepare_data>
c000d619:	89 c2                	mov    edx,eax
c000d61b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d61f:	83 c4 10             	add    esp,0x10
c000d622:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d625:	85 d2                	test   edx,edx
c000d627:	0f 85 e6 03 00 00    	jne    c000da13 <sinc_mono_vari_process+0x6e0>
c000d62d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d630:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d633:	01 c8                	add    eax,ecx
c000d635:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d638:	99                   	cdq    
c000d639:	f7 f9                	idiv   ecx
c000d63b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d63f:	7c c0                	jl     c000d601 <sinc_mono_vari_process+0x2ce>
c000d641:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d645:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d649:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d64d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d650:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d653:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d657:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d65b:	89 01                	mov    DWORD PTR [ecx],eax
c000d65d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d660:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d663:	99                   	cdq    
c000d664:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d667:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d66a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d66d:	99                   	cdq    
c000d66e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d671:	31 d2                	xor    edx,edx
c000d673:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d676:	e9 98 03 00 00       	jmp    c000da13 <sinc_mono_vari_process+0x6e0>
c000d67b:	83 ec 0c             	sub    esp,0xc
c000d67e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d681:	e8 0d 96 01 00       	call   c0026c93 <__floatsidf>
c000d686:	83 c4 10             	add    esp,0x10
c000d689:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d68d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d691:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d695:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d699:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d69d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6a1:	e8 0d 89 01 00       	call   c0025fb3 <__adddf3>
c000d6a6:	83 c4 10             	add    esp,0x10
c000d6a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6b1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6b5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6bd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6c1:	e8 ed 88 01 00       	call   c0025fb3 <__adddf3>
c000d6c6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d6c9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d6cd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d6d1:	e8 bd 95 01 00       	call   c0026c93 <__floatsidf>
c000d6d6:	83 c4 10             	add    esp,0x10
c000d6d9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d6dd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d6e1:	52                   	push   edx
c000d6e2:	50                   	push   eax
c000d6e3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6eb:	e8 f1 97 01 00       	call   c0026ee1 <__gtdf2>
c000d6f0:	83 c4 10             	add    esp,0x10
c000d6f3:	85 c0                	test   eax,eax
c000d6f5:	0f 8f 46 ff ff ff    	jg     c000d641 <sinc_mono_vari_process+0x30e>
c000d6fb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d6ff:	0f 8e f5 00 00 00    	jle    c000d7fa <sinc_mono_vari_process+0x4c7>
c000d705:	83 ec 10             	sub    esp,0x10
c000d708:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d70b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d70e:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d712:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d715:	ff 30                	push   DWORD PTR [eax]
c000d717:	e8 e8 8e 01 00       	call   c0026604 <__subdf3>
c000d71c:	83 c4 18             	add    esp,0x18
c000d71f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d723:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d727:	52                   	push   edx
c000d728:	50                   	push   eax
c000d729:	e8 62 99 01 00       	call   c0027090 <fabs>
c000d72e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d732:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d736:	83 c4 10             	add    esp,0x10
c000d739:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d73e:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d743:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d747:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d74b:	e8 91 97 01 00       	call   c0026ee1 <__gtdf2>
c000d750:	83 c4 10             	add    esp,0x10
c000d753:	85 c0                	test   eax,eax
c000d755:	0f 8e 9f 00 00 00    	jle    c000d7fa <sinc_mono_vari_process+0x4c7>
c000d75b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d75f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d762:	8b 00                	mov    eax,DWORD PTR [eax]
c000d764:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d768:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d76c:	52                   	push   edx
c000d76d:	50                   	push   eax
c000d76e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d771:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d774:	e8 8b 8e 01 00       	call   c0026604 <__subdf3>
c000d779:	5f                   	pop    edi
c000d77a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d77e:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d782:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d785:	e8 09 95 01 00       	call   c0026c93 <__floatsidf>
c000d78a:	83 c4 10             	add    esp,0x10
c000d78d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d791:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d795:	52                   	push   edx
c000d796:	50                   	push   eax
c000d797:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d79b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d79f:	e8 8c 8e 01 00       	call   c0026630 <__muldf3>
c000d7a4:	5d                   	pop    ebp
c000d7a5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d7a9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d7ad:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d7b0:	e8 de 94 01 00       	call   c0026c93 <__floatsidf>
c000d7b5:	83 c4 10             	add    esp,0x10
c000d7b8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d7bc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d7c0:	52                   	push   edx
c000d7c1:	50                   	push   eax
c000d7c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7ca:	e8 45 91 01 00       	call   c0026914 <__divdf3>
c000d7cf:	83 c4 10             	add    esp,0x10
c000d7d2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d7d6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d7da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7e2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7e6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7ea:	e8 c4 87 01 00       	call   c0025fb3 <__adddf3>
c000d7ef:	83 c4 10             	add    esp,0x10
c000d7f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d7f6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d7fa:	83 ec 0c             	sub    esp,0xc
c000d7fd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d800:	e8 8e 94 01 00       	call   c0026c93 <__floatsidf>
c000d805:	83 c4 10             	add    esp,0x10
c000d808:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d80c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d810:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d814:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d818:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d81c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d820:	e8 da 96 01 00       	call   c0026eff <__ltdf2>
c000d825:	83 c4 10             	add    esp,0x10
c000d828:	85 c0                	test   eax,eax
c000d82a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000d82e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000d832:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000d836:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000d83a:	78 10                	js     c000d84c <sinc_mono_vari_process+0x519>
c000d83c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d840:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d844:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d848:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d84c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d850:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d854:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d858:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d85c:	e8 cf 8d 01 00       	call   c0026630 <__muldf3>
c000d861:	59                   	pop    ecx
c000d862:	5f                   	pop    edi
c000d863:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d867:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d86b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d86f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d873:	e8 07 de ff ff       	call   c000b67f <double_to_fp>
c000d878:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d87c:	89 c7                	mov    edi,eax
c000d87e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d882:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d886:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d88a:	e8 a1 8d 01 00       	call   c0026630 <__muldf3>
c000d88f:	83 c4 18             	add    esp,0x18
c000d892:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d896:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d89a:	52                   	push   edx
c000d89b:	50                   	push   eax
c000d89c:	e8 de dd ff ff       	call   c000b67f <double_to_fp>
c000d8a1:	83 ec 0c             	sub    esp,0xc
c000d8a4:	89 c5                	mov    ebp,eax
c000d8a6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d8a9:	e8 e5 93 01 00       	call   c0026c93 <__floatsidf>
c000d8ae:	83 c4 10             	add    esp,0x10
c000d8b1:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d8b5:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d8b9:	52                   	push   edx
c000d8ba:	50                   	push   eax
c000d8bb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d8bf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d8c3:	e8 4c 90 01 00       	call   c0026914 <__divdf3>
c000d8c8:	83 c4 10             	add    esp,0x10
c000d8cb:	89 e9                	mov    ecx,ebp
c000d8cd:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d8d1:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d8d5:	89 d8                	mov    eax,ebx
c000d8d7:	89 fa                	mov    edx,edi
c000d8d9:	e8 ee bd ff ff       	call   c00096cc <calc_output_single>
c000d8de:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000d8e1:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000d8e4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d8e8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d8ec:	52                   	push   edx
c000d8ed:	50                   	push   eax
c000d8ee:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d8f2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d8f6:	e8 35 8d 01 00       	call   c0026630 <__muldf3>
c000d8fb:	59                   	pop    ecx
c000d8fc:	59                   	pop    ecx
c000d8fd:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d901:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d905:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d909:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d90d:	e8 f1 95 01 00       	call   c0026f03 <__truncdfsf2>
c000d912:	83 c4 10             	add    esp,0x10
c000d915:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000d918:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000d91b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d91f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d923:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d927:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d92b:	e8 e4 8f 01 00       	call   c0026914 <__divdf3>
c000d930:	83 c4 10             	add    esp,0x10
c000d933:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d937:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d93b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d93f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d943:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d947:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d94b:	e8 63 86 01 00       	call   c0025fb3 <__adddf3>
c000d950:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000d954:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d958:	83 c4 18             	add    esp,0x18
c000d95b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d95f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d963:	e8 48 97 01 00       	call   c00270b0 <lrint>
c000d968:	83 ec 0c             	sub    esp,0xc
c000d96b:	50                   	push   eax
c000d96c:	e8 22 93 01 00       	call   c0026c93 <__floatsidf>
c000d971:	83 c4 10             	add    esp,0x10
c000d974:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d978:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d97c:	52                   	push   edx
c000d97d:	50                   	push   eax
c000d97e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d982:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d986:	e8 79 8c 01 00       	call   c0026604 <__subdf3>
c000d98b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d98f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d993:	83 c4 20             	add    esp,0x20
c000d996:	6a 00                	push   0x0
c000d998:	6a 00                	push   0x0
c000d99a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d99e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9a2:	e8 58 95 01 00       	call   c0026eff <__ltdf2>
c000d9a7:	83 c4 10             	add    esp,0x10
c000d9aa:	85 c0                	test   eax,eax
c000d9ac:	79 20                	jns    c000d9ce <sinc_mono_vari_process+0x69b>
c000d9ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9be:	e8 f0 85 01 00       	call   c0025fb3 <__adddf3>
c000d9c3:	83 c4 10             	add    esp,0x10
c000d9c6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d9ca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d9ce:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d9d1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d9d4:	83 ec 10             	sub    esp,0x10
c000d9d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9df:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d9e3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d9e7:	e8 18 8c 01 00       	call   c0026604 <__subdf3>
c000d9ec:	83 c4 18             	add    esp,0x18
c000d9ef:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9f3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9f7:	52                   	push   edx
c000d9f8:	50                   	push   eax
c000d9f9:	e8 b2 96 01 00       	call   c00270b0 <lrint>
c000d9fe:	83 c4 10             	add    esp,0x10
c000da01:	0f af f8             	imul   edi,eax
c000da04:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000da07:	99                   	cdq    
c000da08:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000da0b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000da0e:	e9 d2 fb ff ff       	jmp    c000d5e5 <sinc_mono_vari_process+0x2b2>
c000da13:	83 c4 4c             	add    esp,0x4c
c000da16:	89 d0                	mov    eax,edx
c000da18:	5b                   	pop    ebx
c000da19:	5e                   	pop    esi
c000da1a:	5f                   	pop    edi
c000da1b:	5d                   	pop    ebp
c000da1c:	c3                   	ret    

c000da1d <sinc_get_name>:
c000da1d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000da21:	31 c0                	xor    eax,eax
c000da23:	83 fa 02             	cmp    edx,0x2
c000da26:	77 07                	ja     c000da2f <sinc_get_name+0x12>
c000da28:	8b 04 95 44 88 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd77bc]
c000da2f:	c3                   	ret    

c000da30 <sinc_get_description>:
c000da30:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000da34:	31 c0                	xor    eax,eax
c000da36:	83 fa 02             	cmp    edx,0x2
c000da39:	77 07                	ja     c000da42 <sinc_get_description+0x12>
c000da3b:	8b 04 95 38 88 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd77c8]
c000da42:	c3                   	ret    

c000da43 <sinc_set_converter>:
c000da43:	53                   	push   ebx
c000da44:	81 ec 58 08 00 00    	sub    esp,0x858
c000da4a:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000da51:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000da54:	85 c0                	test   eax,eax
c000da56:	74 13                	je     c000da6b <sinc_set_converter+0x28>
c000da58:	83 ec 0c             	sub    esp,0xc
c000da5b:	50                   	push   eax
c000da5c:	e8 83 1a 00 00       	call   c000f4e4 <free>
c000da61:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000da68:	83 c4 10             	add    esp,0x10
c000da6b:	50                   	push   eax
c000da6c:	68 44 08 00 00       	push   0x844
c000da71:	6a 00                	push   0x0
c000da73:	8d 44 24 18          	lea    eax,[esp+0x18]
c000da77:	50                   	push   eax
c000da78:	e8 0e 2c ff ff       	call   c000068b <memset>
c000da7d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000da80:	83 c4 10             	add    esp,0x10
c000da83:	b8 0b 00 00 00       	mov    eax,0xb
c000da88:	81 fa 80 00 00 00    	cmp    edx,0x80
c000da8e:	7f 6e                	jg     c000dafe <sinc_set_converter+0xbb>
c000da90:	83 fa 01             	cmp    edx,0x1
c000da93:	75 10                	jne    c000daa5 <sinc_set_converter+0x62>
c000da95:	c7 43 24 33 d3 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d333
c000da9c:	c7 43 20 33 d3 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d333
c000daa3:	eb 4d                	jmp    c000daf2 <sinc_set_converter+0xaf>
c000daa5:	83 fa 02             	cmp    edx,0x2
c000daa8:	75 10                	jne    c000daba <sinc_set_converter+0x77>
c000daaa:	c7 43 24 6e cc 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cc6e
c000dab1:	c7 43 20 6e cc 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cc6e
c000dab8:	eb 38                	jmp    c000daf2 <sinc_set_converter+0xaf>
c000daba:	83 fa 04             	cmp    edx,0x4
c000dabd:	75 10                	jne    c000dacf <sinc_set_converter+0x8c>
c000dabf:	c7 43 24 a9 c5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c5a9
c000dac6:	c7 43 20 a9 c5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c5a9
c000dacd:	eb 23                	jmp    c000daf2 <sinc_set_converter+0xaf>
c000dacf:	83 fa 06             	cmp    edx,0x6
c000dad2:	75 10                	jne    c000dae4 <sinc_set_converter+0xa1>
c000dad4:	c7 43 24 e4 be 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000bee4
c000dadb:	c7 43 20 e4 be 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000bee4
c000dae2:	eb 0e                	jmp    c000daf2 <sinc_set_converter+0xaf>
c000dae4:	c7 43 24 20 b8 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000b820
c000daeb:	c7 43 20 20 b8 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000b820
c000daf2:	c7 43 28 d3 aa 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000aad3
c000daf9:	b8 0a 00 00 00       	mov    eax,0xa
c000dafe:	81 c4 58 08 00 00    	add    esp,0x858
c000db04:	5b                   	pop    ebx
c000db05:	c3                   	ret    

c000db06 <zoh_vari_process>:
c000db06:	55                   	push   ebp
c000db07:	31 d2                	xor    edx,edx
c000db09:	57                   	push   edi
c000db0a:	56                   	push   esi
c000db0b:	53                   	push   ebx
c000db0c:	83 ec 3c             	sub    esp,0x3c
c000db0f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000db13:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000db17:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000db1b:	0f 8e 80 06 00 00    	jle    c000e1a1 <zoh_vari_process+0x69b>
c000db21:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000db24:	ba 05 00 00 00       	mov    edx,0x5
c000db29:	85 db                	test   ebx,ebx
c000db2b:	0f 84 70 06 00 00    	je     c000e1a1 <zoh_vari_process+0x69b>
c000db31:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000db34:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000db38:	74 19                	je     c000db53 <zoh_vari_process+0x4d>
c000db3a:	31 d2                	xor    edx,edx
c000db3c:	39 c2                	cmp    edx,eax
c000db3e:	7d 0c                	jge    c000db4c <zoh_vari_process+0x46>
c000db40:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000db42:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000db45:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000db49:	42                   	inc    edx
c000db4a:	eb f0                	jmp    c000db3c <zoh_vari_process+0x36>
c000db4c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000db53:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000db56:	0f af d0             	imul   edx,eax
c000db59:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000db5c:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000db60:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000db67:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000db6a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000db71:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000db74:	8b 07                	mov    eax,DWORD PTR [edi]
c000db76:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000db7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000db7e:	68 00 00 70 3f       	push   0x3f700000
c000db83:	6a 00                	push   0x0
c000db85:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000db89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000db8d:	e8 6d 93 01 00       	call   c0026eff <__ltdf2>
c000db92:	83 c4 10             	add    esp,0x10
c000db95:	ba 16 00 00 00       	mov    edx,0x16
c000db9a:	85 c0                	test   eax,eax
c000db9c:	0f 88 ff 05 00 00    	js     c000e1a1 <zoh_vari_process+0x69b>
c000dba2:	68 00 00 70 40       	push   0x40700000
c000dba7:	6a 00                	push   0x0
c000dba9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb1:	e8 2b 93 01 00       	call   c0026ee1 <__gtdf2>
c000dbb6:	83 c4 10             	add    esp,0x10
c000dbb9:	ba 16 00 00 00       	mov    edx,0x16
c000dbbe:	85 c0                	test   eax,eax
c000dbc0:	0f 8f db 05 00 00    	jg     c000e1a1 <zoh_vari_process+0x69b>
c000dbc6:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dbc9:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000dbcc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dbd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dbd4:	68 00 00 f0 3f       	push   0x3ff00000
c000dbd9:	6a 00                	push   0x0
c000dbdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbdf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbe3:	e8 17 93 01 00       	call   c0026eff <__ltdf2>
c000dbe8:	83 c4 10             	add    esp,0x10
c000dbeb:	85 c0                	test   eax,eax
c000dbed:	0f 89 da 01 00 00    	jns    c000ddcd <zoh_vari_process+0x2c7>
c000dbf3:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000dbf6:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000dbf9:	0f 8d ce 01 00 00    	jge    c000ddcd <zoh_vari_process+0x2c7>
c000dbff:	83 ec 0c             	sub    esp,0xc
c000dc02:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dc05:	e8 89 90 01 00       	call   c0026c93 <__floatsidf>
c000dc0a:	83 c4 10             	add    esp,0x10
c000dc0d:	89 04 24             	mov    DWORD PTR [esp],eax
c000dc10:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dc14:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc24:	e8 07 8a 01 00       	call   c0026630 <__muldf3>
c000dc29:	59                   	pop    ecx
c000dc2a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc2e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dc32:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000dc35:	e8 59 90 01 00       	call   c0026c93 <__floatsidf>
c000dc3a:	83 c4 10             	add    esp,0x10
c000dc3d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dc41:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dc45:	52                   	push   edx
c000dc46:	50                   	push   eax
c000dc47:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc4b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc4f:	e8 5f 83 01 00       	call   c0025fb3 <__adddf3>
c000dc54:	59                   	pop    ecx
c000dc55:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc59:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dc5d:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000dc60:	e8 2e 90 01 00       	call   c0026c93 <__floatsidf>
c000dc65:	83 c4 10             	add    esp,0x10
c000dc68:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dc6c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dc70:	52                   	push   edx
c000dc71:	50                   	push   eax
c000dc72:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc76:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc7a:	e8 7e 92 01 00       	call   c0026efd <__gedf2>
c000dc7f:	83 c4 10             	add    esp,0x10
c000dc82:	85 c0                	test   eax,eax
c000dc84:	0f 89 43 01 00 00    	jns    c000ddcd <zoh_vari_process+0x2c7>
c000dc8a:	85 ed                	test   ebp,ebp
c000dc8c:	0f 8e ec 00 00 00    	jle    c000dd7e <zoh_vari_process+0x278>
c000dc92:	83 ec 10             	sub    esp,0x10
c000dc95:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dc98:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dc9b:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000dc9e:	ff 37                	push   DWORD PTR [edi]
c000dca0:	e8 5f 89 01 00       	call   c0026604 <__subdf3>
c000dca5:	83 c4 18             	add    esp,0x18
c000dca8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dcac:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dcb0:	52                   	push   edx
c000dcb1:	50                   	push   eax
c000dcb2:	e8 d9 93 01 00       	call   c0027090 <fabs>
c000dcb7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dcbb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dcbf:	83 c4 10             	add    esp,0x10
c000dcc2:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dcc7:	68 23 42 92 0c       	push   0xc924223
c000dccc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dcd0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dcd4:	e8 08 92 01 00       	call   c0026ee1 <__gtdf2>
c000dcd9:	83 c4 10             	add    esp,0x10
c000dcdc:	85 c0                	test   eax,eax
c000dcde:	0f 8e 9a 00 00 00    	jle    c000dd7e <zoh_vari_process+0x278>
c000dce4:	8b 07                	mov    eax,DWORD PTR [edi]
c000dce6:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dce9:	89 04 24             	mov    DWORD PTR [esp],eax
c000dcec:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dcf0:	52                   	push   edx
c000dcf1:	50                   	push   eax
c000dcf2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dcf5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dcf8:	e8 07 89 01 00       	call   c0026604 <__subdf3>
c000dcfd:	59                   	pop    ecx
c000dcfe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dd02:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dd06:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000dd09:	e8 85 8f 01 00       	call   c0026c93 <__floatsidf>
c000dd0e:	83 c4 10             	add    esp,0x10
c000dd11:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dd15:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dd19:	52                   	push   edx
c000dd1a:	50                   	push   eax
c000dd1b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd1f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd23:	e8 08 89 01 00       	call   c0026630 <__muldf3>
c000dd28:	5d                   	pop    ebp
c000dd29:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dd2d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dd31:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000dd34:	e8 5a 8f 01 00       	call   c0026c93 <__floatsidf>
c000dd39:	83 c4 10             	add    esp,0x10
c000dd3c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dd40:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dd44:	52                   	push   edx
c000dd45:	50                   	push   eax
c000dd46:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd4a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd4e:	e8 c1 8b 01 00       	call   c0026914 <__divdf3>
c000dd53:	83 c4 10             	add    esp,0x10
c000dd56:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd5a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd5e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dd62:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dd66:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd6a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd6e:	e8 40 82 01 00       	call   c0025fb3 <__adddf3>
c000dd73:	83 c4 10             	add    esp,0x10
c000dd76:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd7a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd7e:	31 c0                	xor    eax,eax
c000dd80:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dd83:	7e 13                	jle    c000dd98 <zoh_vari_process+0x292>
c000dd85:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dd89:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dd8c:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dd8f:	40                   	inc    eax
c000dd90:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dd93:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dd96:	eb e8                	jmp    c000dd80 <zoh_vari_process+0x27a>
c000dd98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dda0:	68 00 00 f0 3f       	push   0x3ff00000
c000dda5:	6a 00                	push   0x0
c000dda7:	e8 68 8b 01 00       	call   c0026914 <__divdf3>
c000ddac:	83 c4 10             	add    esp,0x10
c000ddaf:	89 04 24             	mov    DWORD PTR [esp],eax
c000ddb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ddb6:	52                   	push   edx
c000ddb7:	50                   	push   eax
c000ddb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddc0:	e8 ee 81 01 00       	call   c0025fb3 <__adddf3>
c000ddc5:	83 c4 10             	add    esp,0x10
c000ddc8:	e9 ff fd ff ff       	jmp    c000dbcc <zoh_vari_process+0xc6>
c000ddcd:	55                   	push   ebp
c000ddce:	55                   	push   ebp
c000ddcf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddd7:	e8 d4 92 01 00       	call   c00270b0 <lrint>
c000dddc:	83 ec 0c             	sub    esp,0xc
c000dddf:	50                   	push   eax
c000dde0:	e8 ae 8e 01 00       	call   c0026c93 <__floatsidf>
c000dde5:	83 c4 10             	add    esp,0x10
c000dde8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ddec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ddf0:	52                   	push   edx
c000ddf1:	50                   	push   eax
c000ddf2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ddf6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ddfa:	e8 05 88 01 00       	call   c0026604 <__subdf3>
c000ddff:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000de03:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000de07:	83 c4 20             	add    esp,0x20
c000de0a:	6a 00                	push   0x0
c000de0c:	6a 00                	push   0x0
c000de0e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de12:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de16:	e8 e4 90 01 00       	call   c0026eff <__ltdf2>
c000de1b:	83 c4 10             	add    esp,0x10
c000de1e:	85 c0                	test   eax,eax
c000de20:	79 1e                	jns    c000de40 <zoh_vari_process+0x33a>
c000de22:	68 00 00 f0 3f       	push   0x3ff00000
c000de27:	6a 00                	push   0x0
c000de29:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de2d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de31:	e8 7d 81 01 00       	call   c0025fb3 <__adddf3>
c000de36:	83 c4 10             	add    esp,0x10
c000de39:	89 04 24             	mov    DWORD PTR [esp],eax
c000de3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de40:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000de43:	83 ec 10             	sub    esp,0x10
c000de46:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de4a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de4e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de52:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de56:	e8 a9 87 01 00       	call   c0026604 <__subdf3>
c000de5b:	83 c4 18             	add    esp,0x18
c000de5e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de62:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de66:	52                   	push   edx
c000de67:	50                   	push   eax
c000de68:	e8 43 92 01 00       	call   c00270b0 <lrint>
c000de6d:	83 c4 10             	add    esp,0x10
c000de70:	0f af e8             	imul   ebp,eax
c000de73:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000de76:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000de79:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000de7d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000de80:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000de83:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de87:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000de8a:	0f 8d 7a 02 00 00    	jge    c000e10a <zoh_vari_process+0x604>
c000de90:	83 ec 0c             	sub    esp,0xc
c000de93:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de96:	e8 f8 8d 01 00       	call   c0026c93 <__floatsidf>
c000de9b:	83 c4 10             	add    esp,0x10
c000de9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dea2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dea6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000deaa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000deae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000deb2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000deb6:	e8 75 87 01 00       	call   c0026630 <__muldf3>
c000debb:	59                   	pop    ecx
c000debc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000dec0:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000dec4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dec8:	e8 c6 8d 01 00       	call   c0026c93 <__floatsidf>
c000decd:	83 c4 10             	add    esp,0x10
c000ded0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ded4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ded8:	52                   	push   edx
c000ded9:	50                   	push   eax
c000deda:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dede:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dee2:	e8 cc 80 01 00       	call   c0025fb3 <__adddf3>
c000dee7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000deea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000deee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000def2:	e8 9c 8d 01 00       	call   c0026c93 <__floatsidf>
c000def7:	83 c4 10             	add    esp,0x10
c000defa:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000defe:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000df02:	52                   	push   edx
c000df03:	50                   	push   eax
c000df04:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000df08:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000df0c:	e8 f0 8f 01 00       	call   c0026f01 <__ledf2>
c000df11:	83 c4 10             	add    esp,0x10
c000df14:	85 c0                	test   eax,eax
c000df16:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000df1a:	0f 8f ea 01 00 00    	jg     c000e10a <zoh_vari_process+0x604>
c000df20:	85 c9                	test   ecx,ecx
c000df22:	0f 8e ed 00 00 00    	jle    c000e015 <zoh_vari_process+0x50f>
c000df28:	83 ec 10             	sub    esp,0x10
c000df2b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df2e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df31:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000df34:	ff 37                	push   DWORD PTR [edi]
c000df36:	e8 c9 86 01 00       	call   c0026604 <__subdf3>
c000df3b:	83 c4 18             	add    esp,0x18
c000df3e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df42:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df46:	52                   	push   edx
c000df47:	50                   	push   eax
c000df48:	e8 43 91 01 00       	call   c0027090 <fabs>
c000df4d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000df51:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000df55:	83 c4 10             	add    esp,0x10
c000df58:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df5d:	68 23 42 92 0c       	push   0xc924223
c000df62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df6a:	e8 72 8f 01 00       	call   c0026ee1 <__gtdf2>
c000df6f:	83 c4 10             	add    esp,0x10
c000df72:	85 c0                	test   eax,eax
c000df74:	0f 8e 9b 00 00 00    	jle    c000e015 <zoh_vari_process+0x50f>
c000df7a:	8b 07                	mov    eax,DWORD PTR [edi]
c000df7c:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df83:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df87:	52                   	push   edx
c000df88:	50                   	push   eax
c000df89:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df8c:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df8f:	e8 70 86 01 00       	call   c0026604 <__subdf3>
c000df94:	5d                   	pop    ebp
c000df95:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000df99:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000df9d:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000dfa0:	e8 ee 8c 01 00       	call   c0026c93 <__floatsidf>
c000dfa5:	83 c4 10             	add    esp,0x10
c000dfa8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dfac:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dfb0:	52                   	push   edx
c000dfb1:	50                   	push   eax
c000dfb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfba:	e8 71 86 01 00       	call   c0026630 <__muldf3>
c000dfbf:	59                   	pop    ecx
c000dfc0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dfc4:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000dfc8:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000dfcb:	e8 c3 8c 01 00       	call   c0026c93 <__floatsidf>
c000dfd0:	83 c4 10             	add    esp,0x10
c000dfd3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dfd7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dfdb:	52                   	push   edx
c000dfdc:	50                   	push   eax
c000dfdd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfe1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfe5:	e8 2a 89 01 00       	call   c0026914 <__divdf3>
c000dfea:	83 c4 10             	add    esp,0x10
c000dfed:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dff1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dff5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dff9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dffd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e001:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e005:	e8 a9 7f 01 00       	call   c0025fb3 <__adddf3>
c000e00a:	83 c4 10             	add    esp,0x10
c000e00d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e011:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e015:	31 d2                	xor    edx,edx
c000e017:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e01a:	39 d0                	cmp    eax,edx
c000e01c:	7e 1d                	jle    c000e03b <zoh_vari_process+0x535>
c000e01e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e021:	29 c1                	sub    ecx,eax
c000e023:	89 c8                	mov    eax,ecx
c000e025:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e027:	01 d0                	add    eax,edx
c000e029:	42                   	inc    edx
c000e02a:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e02d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e030:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e033:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e036:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e039:	eb dc                	jmp    c000e017 <zoh_vari_process+0x511>
c000e03b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e03f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e043:	68 00 00 f0 3f       	push   0x3ff00000
c000e048:	6a 00                	push   0x0
c000e04a:	e8 c5 88 01 00       	call   c0026914 <__divdf3>
c000e04f:	83 c4 10             	add    esp,0x10
c000e052:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e056:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e05a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e05e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e062:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e066:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e06a:	e8 44 7f 01 00       	call   c0025fb3 <__adddf3>
c000e06f:	5d                   	pop    ebp
c000e070:	59                   	pop    ecx
c000e071:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e075:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e079:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e07d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e081:	e8 2a 90 01 00       	call   c00270b0 <lrint>
c000e086:	83 ec 0c             	sub    esp,0xc
c000e089:	50                   	push   eax
c000e08a:	e8 04 8c 01 00       	call   c0026c93 <__floatsidf>
c000e08f:	83 c4 10             	add    esp,0x10
c000e092:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e096:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e09a:	52                   	push   edx
c000e09b:	50                   	push   eax
c000e09c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a4:	e8 5b 85 01 00       	call   c0026604 <__subdf3>
c000e0a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e0ad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e0b1:	83 c4 20             	add    esp,0x20
c000e0b4:	6a 00                	push   0x0
c000e0b6:	6a 00                	push   0x0
c000e0b8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0bc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0c0:	e8 3a 8e 01 00       	call   c0026eff <__ltdf2>
c000e0c5:	83 c4 10             	add    esp,0x10
c000e0c8:	85 c0                	test   eax,eax
c000e0ca:	79 1e                	jns    c000e0ea <zoh_vari_process+0x5e4>
c000e0cc:	68 00 00 f0 3f       	push   0x3ff00000
c000e0d1:	6a 00                	push   0x0
c000e0d3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0d7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0db:	e8 d3 7e 01 00       	call   c0025fb3 <__adddf3>
c000e0e0:	83 c4 10             	add    esp,0x10
c000e0e3:	89 04 24             	mov    DWORD PTR [esp],eax
c000e0e6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e0ea:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e0ed:	83 ec 10             	sub    esp,0x10
c000e0f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e0f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e0f8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e100:	e8 ff 84 01 00       	call   c0026604 <__subdf3>
c000e105:	e9 51 fd ff ff       	jmp    c000de5b <zoh_vari_process+0x355>
c000e10a:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e10e:	7d 3a                	jge    c000e14a <zoh_vari_process+0x644>
c000e110:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e114:	83 ec 0c             	sub    esp,0xc
c000e117:	29 e8                	sub    eax,ebp
c000e119:	99                   	cdq    
c000e11a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e11d:	50                   	push   eax
c000e11e:	e8 70 8b 01 00       	call   c0026c93 <__floatsidf>
c000e123:	83 c4 10             	add    esp,0x10
c000e126:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e12a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e12e:	52                   	push   edx
c000e12f:	50                   	push   eax
c000e130:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e134:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e138:	e8 76 7e 01 00       	call   c0025fb3 <__adddf3>
c000e13d:	83 c4 10             	add    esp,0x10
c000e140:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e143:	89 04 24             	mov    DWORD PTR [esp],eax
c000e146:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e14a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e14d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e151:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e154:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e157:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e15a:	85 c0                	test   eax,eax
c000e15c:	7f 25                	jg     c000e183 <zoh_vari_process+0x67d>
c000e15e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e162:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e166:	89 07                	mov    DWORD PTR [edi],eax
c000e168:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e16b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e16e:	99                   	cdq    
c000e16f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e172:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e175:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e178:	99                   	cdq    
c000e179:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e17c:	31 d2                	xor    edx,edx
c000e17e:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e181:	eb 1e                	jmp    c000e1a1 <zoh_vari_process+0x69b>
c000e183:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e186:	31 d2                	xor    edx,edx
c000e188:	29 c8                	sub    eax,ecx
c000e18a:	c1 e0 02             	shl    eax,0x2
c000e18d:	39 d1                	cmp    ecx,edx
c000e18f:	7e cd                	jle    c000e15e <zoh_vari_process+0x658>
c000e191:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e193:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e197:	83 c0 04             	add    eax,0x4
c000e19a:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e19e:	42                   	inc    edx
c000e19f:	eb ec                	jmp    c000e18d <zoh_vari_process+0x687>
c000e1a1:	83 c4 3c             	add    esp,0x3c
c000e1a4:	89 d0                	mov    eax,edx
c000e1a6:	5b                   	pop    ebx
c000e1a7:	5e                   	pop    esi
c000e1a8:	5f                   	pop    edi
c000e1a9:	5d                   	pop    ebp
c000e1aa:	c3                   	ret    

c000e1ab <zoh_reset>:
c000e1ab:	83 ec 0c             	sub    esp,0xc
c000e1ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e1b2:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e1b5:	85 c0                	test   eax,eax
c000e1b7:	74 20                	je     c000e1d9 <zoh_reset+0x2e>
c000e1b9:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e1bc:	83 c0 1c             	add    eax,0x1c
c000e1bf:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e1c2:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e1c9:	c1 e2 02             	shl    edx,0x2
c000e1cc:	51                   	push   ecx
c000e1cd:	52                   	push   edx
c000e1ce:	6a 00                	push   0x0
c000e1d0:	50                   	push   eax
c000e1d1:	e8 b5 24 ff ff       	call   c000068b <memset>
c000e1d6:	83 c4 10             	add    esp,0x10
c000e1d9:	83 c4 0c             	add    esp,0xc
c000e1dc:	c3                   	ret    

c000e1dd <zoh_get_name>:
c000e1dd:	31 c0                	xor    eax,eax
c000e1df:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e1e4:	75 05                	jne    c000e1eb <zoh_get_name+0xe>
c000e1e6:	b8 5e 89 02 c0       	mov    eax,0xc002895e
c000e1eb:	c3                   	ret    

c000e1ec <zoh_get_description>:
c000e1ec:	31 c0                	xor    eax,eax
c000e1ee:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e1f3:	75 05                	jne    c000e1fa <zoh_get_description+0xe>
c000e1f5:	b8 6f 89 02 c0       	mov    eax,0xc002896f
c000e1fa:	c3                   	ret    

c000e1fb <zoh_set_converter>:
c000e1fb:	53                   	push   ebx
c000e1fc:	b8 0a 00 00 00       	mov    eax,0xa
c000e201:	83 ec 08             	sub    esp,0x8
c000e204:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e208:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e20d:	75 6e                	jne    c000e27d <zoh_set_converter+0x82>
c000e20f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e212:	85 c0                	test   eax,eax
c000e214:	74 13                	je     c000e229 <zoh_set_converter+0x2e>
c000e216:	83 ec 0c             	sub    esp,0xc
c000e219:	50                   	push   eax
c000e21a:	e8 c5 12 00 00       	call   c000f4e4 <free>
c000e21f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e226:	83 c4 10             	add    esp,0x10
c000e229:	50                   	push   eax
c000e22a:	50                   	push   eax
c000e22b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e22e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e235:	50                   	push   eax
c000e236:	6a 01                	push   0x1
c000e238:	e8 c7 12 00 00       	call   c000f504 <calloc>
c000e23d:	83 c4 10             	add    esp,0x10
c000e240:	89 c2                	mov    edx,eax
c000e242:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e245:	85 d2                	test   edx,edx
c000e247:	b8 01 00 00 00       	mov    eax,0x1
c000e24c:	74 2f                	je     c000e27d <zoh_set_converter+0x82>
c000e24e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e251:	83 ec 0c             	sub    esp,0xc
c000e254:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e257:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e25d:	c7 43 24 06 db 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000db06
c000e264:	c7 43 20 06 db 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000db06
c000e26b:	c7 43 28 ab e1 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e1ab
c000e272:	53                   	push   ebx
c000e273:	e8 33 ff ff ff       	call   c000e1ab <zoh_reset>
c000e278:	83 c4 10             	add    esp,0x10
c000e27b:	31 c0                	xor    eax,eax
c000e27d:	83 c4 08             	add    esp,0x8
c000e280:	5b                   	pop    ebx
c000e281:	c3                   	ret    

c000e282 <CPU::current()>:
c000e282:	a1 e8 c9 02 c0       	mov    eax,ds:0xc002c9e8
c000e287:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e28d:	90                   	nop
c000e28e:	c3                   	ret    

c000e28f <operator new(unsigned long)>:
c000e28f:	83 ec 0c             	sub    esp,0xc
c000e292:	83 ec 0c             	sub    esp,0xc
c000e295:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e299:	e8 36 12 00 00       	call   c000f4d4 <malloc>
c000e29e:	83 c4 10             	add    esp,0x10
c000e2a1:	83 c4 0c             	add    esp,0xc
c000e2a4:	c3                   	ret    
c000e2a5:	90                   	nop

c000e2a6 <Computer::close(int, int, void*)>:
c000e2a6:	57                   	push   edi
c000e2a7:	56                   	push   esi
c000e2a8:	53                   	push   ebx
c000e2a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e2ad:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e2b1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e2b5:	83 ec 0c             	sub    esp,0xc
c000e2b8:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e2be:	e8 1b 5a 00 00       	call   c0013cde <Device::closeAll()>
c000e2c3:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e2c9:	83 c4 10             	add    esp,0x10
c000e2cc:	8b 10                	mov    edx,DWORD PTR [eax]
c000e2ce:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e2d2:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e2da:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e2de:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2e2:	5b                   	pop    ebx
c000e2e3:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e2e6:	5e                   	pop    esi
c000e2e7:	5f                   	pop    edi
c000e2e8:	ff e0                	jmp    eax

c000e2ea <Computer::Computer()>:
c000e2ea:	83 ec 0c             	sub    esp,0xc
c000e2ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2f1:	83 ec 08             	sub    esp,0x8
c000e2f4:	68 a6 89 02 c0       	push   0xc00289a6
c000e2f9:	50                   	push   eax
c000e2fa:	e8 59 5a 00 00       	call   c0013d58 <Device::Device(char const*)>
c000e2ff:	83 c4 10             	add    esp,0x10
c000e302:	ba 70 8b 02 c0       	mov    edx,0xc0028b70
c000e307:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e30b:	89 10                	mov    DWORD PTR [eax],edx
c000e30d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e311:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e31b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e31f:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e329:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e32d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e333:	83 ca 04             	or     edx,0x4
c000e336:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e33c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e340:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e346:	0f b6 d0             	movzx  edx,al
c000e349:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e34d:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e354:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e358:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e35e:	0f b6 d0             	movzx  edx,al
c000e361:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e365:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e36a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e36e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e374:	8d 50 01             	lea    edx,[eax+0x1]
c000e377:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e37b:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e381:	0f b6 d0             	movzx  edx,al
c000e384:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e388:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e38c:	83 e1 3f             	and    ecx,0x3f
c000e38f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e393:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e397:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e39d:	0f b6 d0             	movzx  edx,al
c000e3a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3a4:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e3ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3af:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e3b5:	0f b6 d0             	movzx  edx,al
c000e3b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3bc:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e3c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3c5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e3cb:	8d 50 01             	lea    edx,[eax+0x1]
c000e3ce:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e3d2:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e3d8:	0f b6 d0             	movzx  edx,al
c000e3db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3df:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e3e3:	83 e1 3f             	and    ecx,0x3f
c000e3e6:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e3ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3ee:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e3f4:	0f b6 d0             	movzx  edx,al
c000e3f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3fb:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e402:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e406:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e40c:	0f b6 d0             	movzx  edx,al
c000e40f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e413:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e41c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e422:	8d 50 01             	lea    edx,[eax+0x1]
c000e425:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e429:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e42f:	0f b6 d0             	movzx  edx,al
c000e432:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e436:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e43a:	83 e1 3f             	and    ecx,0x3f
c000e43d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e441:	90                   	nop
c000e442:	83 c4 0c             	add    esp,0xc
c000e445:	c3                   	ret    

c000e446 <Computer::setBootMessage(char const*)>:
c000e446:	c3                   	ret    
c000e447:	90                   	nop

c000e448 <Computer::start()>:
c000e448:	56                   	push   esi
c000e449:	53                   	push   ebx
c000e44a:	83 ec 10             	sub    esp,0x10
c000e44d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e451:	fb                   	sti    
c000e452:	68 3f 07 00 00       	push   0x73f
c000e457:	e8 78 10 00 00       	call   c000f4d4 <malloc>
c000e45c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e463:	89 c6                	mov    esi,eax
c000e465:	ff 35 34 df 02 c0    	push   DWORD PTR ds:0xc002df34
c000e46b:	68 af 89 02 c0       	push   0xc00289af
c000e470:	6a 01                	push   0x1
c000e472:	50                   	push   eax
c000e473:	e8 76 e7 00 00       	call   c001cbee <Process::Process(bool, char const*, Process*, char**)>
c000e478:	83 c4 20             	add    esp,0x20
c000e47b:	68 ff 00 00 00       	push   0xff
c000e480:	6a 00                	push   0x0
c000e482:	68 69 ee 00 c0       	push   0xc000ee69
c000e487:	56                   	push   esi
c000e488:	e8 5f ea 00 00       	call   c001ceec <Process::createThread(void (*)(void*), void*, int)>
c000e48d:	6a 7a                	push   0x7a
c000e48f:	6a 00                	push   0x0
c000e491:	68 4a d7 01 c0       	push   0xc001d74a
c000e496:	ff 35 34 df 02 c0    	push   DWORD PTR ds:0xc002df34
c000e49c:	e8 4b ea 00 00       	call   c001ceec <Process::createThread(void (*)(void*), void*, int)>
c000e4a1:	83 c4 20             	add    esp,0x20
c000e4a4:	a3 e8 de 02 c0       	mov    ds:0xc002dee8,eax
c000e4a9:	e8 1d f6 00 00       	call   c001dacb <Vm::initialise8086()>
c000e4ae:	c6 05 ed c9 02 c0 01 	mov    BYTE PTR ds:0xc002c9ed,0x1
c000e4b5:	e8 1a 46 00 00       	call   c0012ad4 <initVFS()>
c000e4ba:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e4c0:	8b 10                	mov    edx,DWORD PTR [eax]
c000e4c2:	6a 00                	push   0x0
c000e4c4:	6a 00                	push   0x0
c000e4c6:	6a 00                	push   0x0
c000e4c8:	50                   	push   eax
c000e4c9:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e4cc:	e8 89 b2 00 00       	call   c001975a <Krnl::loadSystemEnv()>
c000e4d1:	e8 b6 d0 00 00       	call   c001b58c <setupSystemCalls()>
c000e4d6:	e8 0b 51 00 00       	call   c00135e6 <loadClockSettings()>
c000e4db:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e4de:	e8 cf 57 00 00       	call   c0013cb2 <Device::loadDriversForAll()>
c000e4e3:	58                   	pop    eax
c000e4e4:	8b 1d e8 c9 02 c0    	mov    ebx,DWORD PTR ds:0xc002c9e8
c000e4ea:	5a                   	pop    edx
c000e4eb:	6a 01                	push   0x1
c000e4ed:	68 bc 89 02 c0       	push   0xc00289bc
c000e4f2:	e8 4f e2 00 00       	call   c001c746 <Thr::loadDLL(char const*, bool)>
c000e4f7:	59                   	pop    ecx
c000e4f8:	5e                   	pop    esi
c000e4f9:	53                   	push   ebx
c000e4fa:	50                   	push   eax
c000e4fb:	e8 55 e4 00 00       	call   c001c955 <Thr::executeDLL(unsigned long, void*)>
c000e500:	c7 04 24 38 9c 02 c0 	mov    DWORD PTR [esp],0xc0029c38
c000e507:	e8 6d 42 00 00       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c000e50c:	83 c4 10             	add    esp,0x10
c000e50f:	83 ec 0c             	sub    esp,0xc
c000e512:	6a 02                	push   0x2
c000e514:	e8 37 ed 00 00       	call   c001d250 <blockTask(TaskState)>
c000e519:	83 c4 10             	add    esp,0x10
c000e51c:	eb f1                	jmp    c000e50f <Computer::start()+0xc7>

c000e51e <firstTask()>:
c000e51e:	83 ec 18             	sub    esp,0x18
c000e521:	ff 35 e8 c9 02 c0    	push   DWORD PTR ds:0xc002c9e8
c000e527:	e8 1c ff ff ff       	call   c000e448 <Computer::start()>

c000e52c <Computer::detectFeatures()>:
c000e52c:	55                   	push   ebp
c000e52d:	57                   	push   edi
c000e52e:	56                   	push   esi
c000e52f:	53                   	push   ebx
c000e530:	83 ec 1c             	sub    esp,0x1c
c000e533:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e537:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e541:	e8 53 1d ff ff       	call   c0000299 <detectCPUID>
c000e546:	85 c0                	test   eax,eax
c000e548:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e54e:	0f 95 c2             	setne  dl
c000e551:	83 e0 fd             	and    eax,0xfffffffd
c000e554:	d1 e2                	shl    edx,1
c000e556:	09 d0                	or     eax,edx
c000e558:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e55e:	a8 02                	test   al,0x2
c000e560:	75 46                	jne    c000e5a8 <Computer::detectFeatures()+0x7c>
c000e562:	f6 05 01 ca 02 c0 04 	test   BYTE PTR ds:0xc002ca01,0x4
c000e569:	74 07                	je     c000e572 <Computer::detectFeatures()+0x46>
c000e56b:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e572:	e8 7f 6b 01 00       	call   c00250f6 <x87Detect>
c000e577:	83 e0 01             	and    eax,0x1
c000e57a:	c1 e0 04             	shl    eax,0x4
c000e57d:	88 c2                	mov    dl,al
c000e57f:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e585:	83 e0 ef             	and    eax,0xffffffef
c000e588:	09 d0                	or     eax,edx
c000e58a:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e590:	a8 10                	test   al,0x10
c000e592:	0f 85 2a 01 00 00    	jne    c000e6c2 <Computer::detectFeatures()+0x196>
c000e598:	84 c0                	test   al,al
c000e59a:	0f 88 45 01 00 00    	js     c000e6e5 <Computer::detectFeatures()+0x1b9>
c000e5a0:	83 c4 1c             	add    esp,0x1c
c000e5a3:	5b                   	pop    ebx
c000e5a4:	5e                   	pop    esi
c000e5a5:	5f                   	pop    edi
c000e5a6:	5d                   	pop    ebp
c000e5a7:	c3                   	ret    
c000e5a8:	83 ec 0c             	sub    esp,0xc
c000e5ab:	6a 20                	push   0x20
c000e5ad:	e8 6a 9b 00 00       	call   c001811c <CPU::cpuidCheckEDX(unsigned int)>
c000e5b2:	83 e0 01             	and    eax,0x1
c000e5b5:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e5bc:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e5c2:	83 e0 f7             	and    eax,0xfffffff7
c000e5c5:	09 d0                	or     eax,edx
c000e5c7:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e5cd:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e5d4:	e8 43 9b 00 00       	call   c001811c <CPU::cpuidCheckEDX(unsigned int)>
c000e5d9:	83 e0 01             	and    eax,0x1
c000e5dc:	88 c2                	mov    dl,al
c000e5de:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e5e4:	83 e0 fe             	and    eax,0xfffffffe
c000e5e7:	09 d0                	or     eax,edx
c000e5e9:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e5ef:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e5f6:	e8 21 9b 00 00       	call   c001811c <CPU::cpuidCheckEDX(unsigned int)>
c000e5fb:	c1 e0 07             	shl    eax,0x7
c000e5fe:	88 c2                	mov    dl,al
c000e600:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e606:	83 e0 7f             	and    eax,0x7f
c000e609:	09 d0                	or     eax,edx
c000e60b:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e611:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e618:	e8 ff 9a 00 00       	call   c001811c <CPU::cpuidCheckEDX(unsigned int)>
c000e61d:	83 c4 10             	add    esp,0x10
c000e620:	83 e0 01             	and    eax,0x1
c000e623:	c1 e0 05             	shl    eax,0x5
c000e626:	88 c2                	mov    dl,al
c000e628:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e62e:	83 e0 df             	and    eax,0xffffffdf
c000e631:	09 d0                	or     eax,edx
c000e633:	f7 05 00 ca 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002ca00,0x401
c000e63d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e643:	0f 84 c2 00 00 00    	je     c000e70b <Computer::detectFeatures()+0x1df>
c000e649:	83 e0 fe             	and    eax,0xfffffffe
c000e64c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e652:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e658:	88 c2                	mov    dl,al
c000e65a:	83 e2 09             	and    edx,0x9
c000e65d:	fe ca                	dec    dl
c000e65f:	75 09                	jne    c000e66a <Computer::detectFeatures()+0x13e>
c000e661:	83 e0 fe             	and    eax,0xfffffffe
c000e664:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e66a:	83 ec 0c             	sub    esp,0xc
c000e66d:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e671:	50                   	push   eax
c000e672:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e676:	55                   	push   ebp
c000e677:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e67b:	57                   	push   edi
c000e67c:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e680:	56                   	push   esi
c000e681:	68 00 00 00 80       	push   0x80000000
c000e686:	e8 0d 9a 00 00       	call   c0018098 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e68b:	83 c4 20             	add    esp,0x20
c000e68e:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000e695:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e699:	0f 86 c3 fe ff ff    	jbe    c000e562 <Computer::detectFeatures()+0x36>
c000e69f:	83 ec 0c             	sub    esp,0xc
c000e6a2:	50                   	push   eax
c000e6a3:	55                   	push   ebp
c000e6a4:	57                   	push   edi
c000e6a5:	56                   	push   esi
c000e6a6:	68 01 00 00 80       	push   0x80000001
c000e6ab:	e8 e8 99 00 00       	call   c0018098 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e6b0:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000e6ba:	83 c4 20             	add    esp,0x20
c000e6bd:	e9 a0 fe ff ff       	jmp    c000e562 <Computer::detectFeatures()+0x36>
c000e6c2:	e8 e9 69 01 00       	call   c00250b0 <absolutelyNoChanceInHell>
c000e6c7:	88 c2                	mov    dl,al
c000e6c9:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e6cf:	c1 e2 07             	shl    edx,0x7
c000e6d2:	83 e0 7f             	and    eax,0x7f
c000e6d5:	09 d0                	or     eax,edx
c000e6d7:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e6dd:	84 c0                	test   al,al
c000e6df:	0f 89 bb fe ff ff    	jns    c000e5a0 <Computer::detectFeatures()+0x74>
c000e6e5:	e8 a6 69 01 00       	call   c0025090 <avxDetect>
c000e6ea:	83 e0 01             	and    eax,0x1
c000e6ed:	c1 e0 05             	shl    eax,0x5
c000e6f0:	88 c2                	mov    dl,al
c000e6f2:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e6f8:	83 e0 df             	and    eax,0xffffffdf
c000e6fb:	09 d0                	or     eax,edx
c000e6fd:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e703:	83 c4 1c             	add    esp,0x1c
c000e706:	5b                   	pop    ebx
c000e707:	5e                   	pop    esi
c000e708:	5f                   	pop    edi
c000e709:	5d                   	pop    ebp
c000e70a:	c3                   	ret    
c000e70b:	83 ec 0c             	sub    esp,0xc
c000e70e:	68 00 02 00 00       	push   0x200
c000e713:	e8 04 9a 00 00       	call   c001811c <CPU::cpuidCheckEDX(unsigned int)>
c000e718:	83 c4 10             	add    esp,0x10
c000e71b:	83 e0 01             	and    eax,0x1
c000e71e:	88 c2                	mov    dl,al
c000e720:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e726:	83 e0 fe             	and    eax,0xfffffffe
c000e729:	09 d0                	or     eax,edx
c000e72b:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e731:	e9 1c ff ff ff       	jmp    c000e652 <Computer::detectFeatures()+0x126>

c000e736 <Computer::displayFeatures()>:
c000e736:	53                   	push   ebx
c000e737:	83 ec 14             	sub    esp,0x14
c000e73a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e73e:	68 df 89 02 c0       	push   0xc00289df
c000e743:	e8 31 40 00 00       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c000e748:	83 c4 10             	add    esp,0x10
c000e74b:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000e752:	0f 85 73 02 00 00    	jne    c000e9cb <Computer::displayFeatures()+0x295>
c000e758:	b8 dc 89 02 c0       	mov    eax,0xc00289dc
c000e75d:	83 ec 08             	sub    esp,0x8
c000e760:	50                   	push   eax
c000e761:	68 f2 89 02 c0       	push   0xc00289f2
c000e766:	e8 0e 40 00 00       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c000e76b:	83 c4 10             	add    esp,0x10
c000e76e:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000e775:	0f 85 8c 02 00 00    	jne    c000ea07 <Computer::displayFeatures()+0x2d1>
c000e77b:	b8 dc 89 02 c0       	mov    eax,0xc00289dc
c000e780:	83 ec 08             	sub    esp,0x8
c000e783:	50                   	push   eax
c000e784:	68 03 8a 02 c0       	push   0xc0028a03
c000e789:	e8 eb 3f 00 00       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c000e78e:	83 c4 10             	add    esp,0x10
c000e791:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000e798:	0f 85 5f 02 00 00    	jne    c000e9fd <Computer::displayFeatures()+0x2c7>
c000e79e:	b8 dc 89 02 c0       	mov    eax,0xc00289dc
c000e7a3:	83 ec 08             	sub    esp,0x8
c000e7a6:	50                   	push   eax
c000e7a7:	68 14 8a 02 c0       	push   0xc0028a14
c000e7ac:	e8 c8 3f 00 00       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c000e7b1:	83 c4 10             	add    esp,0x10
c000e7b4:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000e7bb:	0f 85 32 02 00 00    	jne    c000e9f3 <Computer::displayFeatures()+0x2bd>
c000e7c1:	b8 dc 89 02 c0       	mov    eax,0xc00289dc
c000e7c6:	83 ec 08             	sub    esp,0x8
c000e7c9:	50                   	push   eax
c000e7ca:	68 25 8a 02 c0       	push   0xc0028a25
c000e7cf:	e8 a5 3f 00 00       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c000e7d4:	83 c4 10             	add    esp,0x10
c000e7d7:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000e7de:	0f 85 05 02 00 00    	jne    c000e9e9 <Computer::displayFeatures()+0x2b3>
c000e7e4:	b8 dc 89 02 c0       	mov    eax,0xc00289dc
c000e7e9:	83 ec 08             	sub    esp,0x8
c000e7ec:	50                   	push   eax
c000e7ed:	68 36 8a 02 c0       	push   0xc0028a36
c000e7f2:	e8 82 3f 00 00       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c000e7f7:	83 c4 10             	add    esp,0x10
c000e7fa:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000e801:	0f 85 d8 01 00 00    	jne    c000e9df <Computer::displayFeatures()+0x2a9>
c000e807:	b8 dc 89 02 c0       	mov    eax,0xc00289dc
c000e80c:	83 ec 08             	sub    esp,0x8
c000e80f:	50                   	push   eax
c000e810:	68 47 8a 02 c0       	push   0xc0028a47
c000e815:	e8 5f 3f 00 00       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c000e81a:	83 c4 10             	add    esp,0x10
c000e81d:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000e824:	0f 85 ab 01 00 00    	jne    c000e9d5 <Computer::displayFeatures()+0x29f>
c000e82a:	b8 dc 89 02 c0       	mov    eax,0xc00289dc
c000e82f:	83 ec 08             	sub    esp,0x8
c000e832:	50                   	push   eax
c000e833:	68 58 8a 02 c0       	push   0xc0028a58
c000e838:	e8 3c 3f 00 00       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c000e83d:	83 c4 10             	add    esp,0x10
c000e840:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000e847:	0f 88 1b 02 00 00    	js     c000ea68 <Computer::displayFeatures()+0x332>
c000e84d:	b8 dc 89 02 c0       	mov    eax,0xc00289dc
c000e852:	83 ec 08             	sub    esp,0x8
c000e855:	50                   	push   eax
c000e856:	68 69 8a 02 c0       	push   0xc0028a69
c000e85b:	e8 19 3f 00 00       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c000e860:	83 c4 10             	add    esp,0x10
c000e863:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000e86a:	0f 85 a1 01 00 00    	jne    c000ea11 <Computer::displayFeatures()+0x2db>
c000e870:	b8 dc 89 02 c0       	mov    eax,0xc00289dc
c000e875:	83 ec 08             	sub    esp,0x8
c000e878:	50                   	push   eax
c000e879:	68 7a 8a 02 c0       	push   0xc0028a7a
c000e87e:	e8 f6 3e 00 00       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c000e883:	83 c4 10             	add    esp,0x10
c000e886:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000e88d:	0f 85 cb 01 00 00    	jne    c000ea5e <Computer::displayFeatures()+0x328>
c000e893:	b8 dc 89 02 c0       	mov    eax,0xc00289dc
c000e898:	83 ec 08             	sub    esp,0x8
c000e89b:	50                   	push   eax
c000e89c:	68 8b 8a 02 c0       	push   0xc0028a8b
c000e8a1:	e8 d3 3e 00 00       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c000e8a6:	83 c4 10             	add    esp,0x10
c000e8a9:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000e8b0:	0f 85 9e 01 00 00    	jne    c000ea54 <Computer::displayFeatures()+0x31e>
c000e8b6:	b8 dc 89 02 c0       	mov    eax,0xc00289dc
c000e8bb:	83 ec 08             	sub    esp,0x8
c000e8be:	50                   	push   eax
c000e8bf:	68 9c 8a 02 c0       	push   0xc0028a9c
c000e8c4:	e8 b0 3e 00 00       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c000e8c9:	83 c4 10             	add    esp,0x10
c000e8cc:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000e8d3:	0f 85 71 01 00 00    	jne    c000ea4a <Computer::displayFeatures()+0x314>
c000e8d9:	b8 dc 89 02 c0       	mov    eax,0xc00289dc
c000e8de:	83 ec 08             	sub    esp,0x8
c000e8e1:	50                   	push   eax
c000e8e2:	68 ad 8a 02 c0       	push   0xc0028aad
c000e8e7:	e8 8d 3e 00 00       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c000e8ec:	83 c4 10             	add    esp,0x10
c000e8ef:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000e8f6:	0f 85 44 01 00 00    	jne    c000ea40 <Computer::displayFeatures()+0x30a>
c000e8fc:	b8 dc 89 02 c0       	mov    eax,0xc00289dc
c000e901:	83 ec 08             	sub    esp,0x8
c000e904:	50                   	push   eax
c000e905:	68 be 8a 02 c0       	push   0xc0028abe
c000e90a:	e8 6a 3e 00 00       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c000e90f:	83 c4 10             	add    esp,0x10
c000e912:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000e919:	0f 85 17 01 00 00    	jne    c000ea36 <Computer::displayFeatures()+0x300>
c000e91f:	b8 dc 89 02 c0       	mov    eax,0xc00289dc
c000e924:	83 ec 08             	sub    esp,0x8
c000e927:	50                   	push   eax
c000e928:	68 cf 8a 02 c0       	push   0xc0028acf
c000e92d:	e8 47 3e 00 00       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c000e932:	83 c4 10             	add    esp,0x10
c000e935:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000e93c:	0f 85 ea 00 00 00    	jne    c000ea2c <Computer::displayFeatures()+0x2f6>
c000e942:	b8 dc 89 02 c0       	mov    eax,0xc00289dc
c000e947:	83 ec 08             	sub    esp,0x8
c000e94a:	50                   	push   eax
c000e94b:	68 e0 8a 02 c0       	push   0xc0028ae0
c000e950:	e8 24 3e 00 00       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c000e955:	83 c4 10             	add    esp,0x10
c000e958:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000e95f:	0f 88 0d 01 00 00    	js     c000ea72 <Computer::displayFeatures()+0x33c>
c000e965:	b8 dc 89 02 c0       	mov    eax,0xc00289dc
c000e96a:	83 ec 08             	sub    esp,0x8
c000e96d:	50                   	push   eax
c000e96e:	68 f1 8a 02 c0       	push   0xc0028af1
c000e973:	e8 01 3e 00 00       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c000e978:	83 c4 10             	add    esp,0x10
c000e97b:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000e982:	0f 85 9a 00 00 00    	jne    c000ea22 <Computer::displayFeatures()+0x2ec>
c000e988:	b8 dc 89 02 c0       	mov    eax,0xc00289dc
c000e98d:	83 ec 08             	sub    esp,0x8
c000e990:	50                   	push   eax
c000e991:	68 02 8b 02 c0       	push   0xc0028b02
c000e996:	e8 de 3d 00 00       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c000e99b:	83 c4 10             	add    esp,0x10
c000e99e:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000e9a5:	75 74                	jne    c000ea1b <Computer::displayFeatures()+0x2e5>
c000e9a7:	b8 dc 89 02 c0       	mov    eax,0xc00289dc
c000e9ac:	83 ec 08             	sub    esp,0x8
c000e9af:	50                   	push   eax
c000e9b0:	68 13 8b 02 c0       	push   0xc0028b13
c000e9b5:	e8 bf 3d 00 00       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c000e9ba:	c7 44 24 20 db a2 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a2db
c000e9c2:	83 c4 18             	add    esp,0x18
c000e9c5:	5b                   	pop    ebx
c000e9c6:	e9 ae 3d 00 00       	jmp    c0012779 <Dbg::kprintf(char const*, ...)>
c000e9cb:	b8 d8 89 02 c0       	mov    eax,0xc00289d8
c000e9d0:	e9 88 fd ff ff       	jmp    c000e75d <Computer::displayFeatures()+0x27>
c000e9d5:	b8 d8 89 02 c0       	mov    eax,0xc00289d8
c000e9da:	e9 50 fe ff ff       	jmp    c000e82f <Computer::displayFeatures()+0xf9>
c000e9df:	b8 d8 89 02 c0       	mov    eax,0xc00289d8
c000e9e4:	e9 23 fe ff ff       	jmp    c000e80c <Computer::displayFeatures()+0xd6>
c000e9e9:	b8 d8 89 02 c0       	mov    eax,0xc00289d8
c000e9ee:	e9 f6 fd ff ff       	jmp    c000e7e9 <Computer::displayFeatures()+0xb3>
c000e9f3:	b8 d8 89 02 c0       	mov    eax,0xc00289d8
c000e9f8:	e9 c9 fd ff ff       	jmp    c000e7c6 <Computer::displayFeatures()+0x90>
c000e9fd:	b8 d8 89 02 c0       	mov    eax,0xc00289d8
c000ea02:	e9 9c fd ff ff       	jmp    c000e7a3 <Computer::displayFeatures()+0x6d>
c000ea07:	b8 d8 89 02 c0       	mov    eax,0xc00289d8
c000ea0c:	e9 6f fd ff ff       	jmp    c000e780 <Computer::displayFeatures()+0x4a>
c000ea11:	b8 d8 89 02 c0       	mov    eax,0xc00289d8
c000ea16:	e9 5a fe ff ff       	jmp    c000e875 <Computer::displayFeatures()+0x13f>
c000ea1b:	b8 d8 89 02 c0       	mov    eax,0xc00289d8
c000ea20:	eb 8a                	jmp    c000e9ac <Computer::displayFeatures()+0x276>
c000ea22:	b8 d8 89 02 c0       	mov    eax,0xc00289d8
c000ea27:	e9 61 ff ff ff       	jmp    c000e98d <Computer::displayFeatures()+0x257>
c000ea2c:	b8 d8 89 02 c0       	mov    eax,0xc00289d8
c000ea31:	e9 11 ff ff ff       	jmp    c000e947 <Computer::displayFeatures()+0x211>
c000ea36:	b8 d8 89 02 c0       	mov    eax,0xc00289d8
c000ea3b:	e9 e4 fe ff ff       	jmp    c000e924 <Computer::displayFeatures()+0x1ee>
c000ea40:	b8 d8 89 02 c0       	mov    eax,0xc00289d8
c000ea45:	e9 b7 fe ff ff       	jmp    c000e901 <Computer::displayFeatures()+0x1cb>
c000ea4a:	b8 d8 89 02 c0       	mov    eax,0xc00289d8
c000ea4f:	e9 8a fe ff ff       	jmp    c000e8de <Computer::displayFeatures()+0x1a8>
c000ea54:	b8 d8 89 02 c0       	mov    eax,0xc00289d8
c000ea59:	e9 5d fe ff ff       	jmp    c000e8bb <Computer::displayFeatures()+0x185>
c000ea5e:	b8 d8 89 02 c0       	mov    eax,0xc00289d8
c000ea63:	e9 30 fe ff ff       	jmp    c000e898 <Computer::displayFeatures()+0x162>
c000ea68:	b8 d8 89 02 c0       	mov    eax,0xc00289d8
c000ea6d:	e9 e0 fd ff ff       	jmp    c000e852 <Computer::displayFeatures()+0x11c>
c000ea72:	b8 d8 89 02 c0       	mov    eax,0xc00289d8
c000ea77:	e9 ee fe ff ff       	jmp    c000e96a <Computer::displayFeatures()+0x234>

c000ea7c <Computer::rdmsr(unsigned int)>:
c000ea7c:	83 ec 0c             	sub    esp,0xc
c000ea7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea83:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ea8a:	74 0a                	je     c000ea96 <Computer::rdmsr(unsigned int)+0x1a>
c000ea8c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ea90:	0f 32                	rdmsr  
c000ea92:	83 c4 0c             	add    esp,0xc
c000ea95:	c3                   	ret    
c000ea96:	83 ec 0c             	sub    esp,0xc
c000ea99:	68 24 8b 02 c0       	push   0xc0028b24
c000ea9e:	e8 f0 ad 00 00       	call   c0019893 <Krnl::panic(char const*)>
c000eaa3:	83 c4 10             	add    esp,0x10
c000eaa6:	eb e4                	jmp    c000ea8c <Computer::rdmsr(unsigned int)+0x10>

c000eaa8 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000eaa8:	57                   	push   edi
c000eaa9:	56                   	push   esi
c000eaaa:	52                   	push   edx
c000eaab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eaaf:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000eab3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000eab7:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eabe:	74 0e                	je     c000eace <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000eac0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eac4:	89 f0                	mov    eax,esi
c000eac6:	89 fa                	mov    edx,edi
c000eac8:	0f 30                	wrmsr  
c000eaca:	58                   	pop    eax
c000eacb:	5e                   	pop    esi
c000eacc:	5f                   	pop    edi
c000eacd:	c3                   	ret    
c000eace:	83 ec 0c             	sub    esp,0xc
c000ead1:	68 2a 8b 02 c0       	push   0xc0028b2a
c000ead6:	e8 b8 ad 00 00       	call   c0019893 <Krnl::panic(char const*)>
c000eadb:	83 c4 10             	add    esp,0x10
c000eade:	eb e0                	jmp    c000eac0 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000eae0 <Computer::nmiEnabled()>:
c000eae0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eae4:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000eaea:	c3                   	ret    
c000eaeb:	90                   	nop

c000eaec <Computer::readCMOS(unsigned char)>:
c000eaec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eaf0:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000eaf7:	19 c0                	sbb    eax,eax
c000eaf9:	83 e0 80             	and    eax,0xffffff80
c000eafc:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000eb00:	e6 70                	out    0x70,al
c000eb02:	e4 71                	in     al,0x71
c000eb04:	c3                   	ret    
c000eb05:	90                   	nop

c000eb06 <Computer::enableNMI(bool)>:
c000eb06:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000eb0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eb0e:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000eb14:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000eb1c:	eb ce                	jmp    c000eaec <Computer::readCMOS(unsigned char)>

c000eb1e <Computer::open(int, int, void*)>:
c000eb1e:	56                   	push   esi
c000eb1f:	53                   	push   ebx
c000eb20:	83 ec 10             	sub    esp,0x10
c000eb23:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eb27:	f6 05 00 ca 02 c0 04 	test   BYTE PTR ds:0xc002ca00,0x4
c000eb2e:	68 68 22 00 00       	push   0x2268
c000eb33:	0f 94 05 24 b9 02 c0 	sete   BYTE PTR ds:0xc002b924
c000eb3a:	e8 95 09 00 00       	call   c000f4d4 <malloc>
c000eb3f:	89 04 24             	mov    DWORD PTR [esp],eax
c000eb42:	89 c6                	mov    esi,eax
c000eb44:	e8 df 8b 00 00       	call   c0017728 <ACPI::ACPI()>
c000eb49:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000eb4f:	58                   	pop    eax
c000eb50:	5a                   	pop    edx
c000eb51:	56                   	push   esi
c000eb52:	53                   	push   ebx
c000eb53:	e8 10 50 00 00       	call   c0013b68 <Device::addChild(Device*)>
c000eb58:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eb5b:	e8 cc f9 ff ff       	call   c000e52c <Computer::detectFeatures()>
c000eb60:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eb63:	e8 ce fb ff ff       	call   c000e736 <Computer::displayFeatures()>
c000eb68:	59                   	pop    ecx
c000eb69:	5e                   	pop    esi
c000eb6a:	6a 01                	push   0x1
c000eb6c:	53                   	push   ebx
c000eb6d:	e8 94 ff ff ff       	call   c000eb06 <Computer::enableNMI(bool)>
c000eb72:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000eb79:	e8 56 09 00 00       	call   c000f4d4 <malloc>
c000eb7e:	89 04 24             	mov    DWORD PTR [esp],eax
c000eb81:	89 c6                	mov    esi,eax
c000eb83:	e8 4c 96 00 00       	call   c00181d4 <CPU::CPU()>
c000eb88:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000eb8e:	58                   	pop    eax
c000eb8f:	5a                   	pop    edx
c000eb90:	56                   	push   esi
c000eb91:	53                   	push   ebx
c000eb92:	e8 d1 4f 00 00       	call   c0013b68 <Device::addChild(Device*)>
c000eb97:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000eb9d:	8b 10                	mov    edx,DWORD PTR [eax]
c000eb9f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000eba3:	6a 00                	push   0x0
c000eba5:	6a 00                	push   0x0
c000eba7:	50                   	push   eax
c000eba8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ebab:	83 c4 20             	add    esp,0x20
c000ebae:	e8 27 55 00 00       	call   c00140da <setupFPU()>
c000ebb3:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ebb9:	85 c0                	test   eax,eax
c000ebbb:	74 1f                	je     c000ebdc <Computer::open(int, int, void*)+0xbe>
c000ebbd:	83 ec 08             	sub    esp,0x8
c000ebc0:	50                   	push   eax
c000ebc1:	53                   	push   ebx
c000ebc2:	e8 a1 4f 00 00       	call   c0013b68 <Device::addChild(Device*)>
c000ebc7:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ebcd:	8b 10                	mov    edx,DWORD PTR [eax]
c000ebcf:	6a 00                	push   0x0
c000ebd1:	6a 00                	push   0x0
c000ebd3:	6a 00                	push   0x0
c000ebd5:	50                   	push   eax
c000ebd6:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ebd9:	83 c4 20             	add    esp,0x20
c000ebdc:	83 ec 0c             	sub    esp,0xc
c000ebdf:	68 1e e5 00 c0       	push   0xc000e51e
c000ebe4:	e8 03 e4 00 00       	call   c001cfec <setupMultitasking(void (*)())>
c000ebe9:	83 c4 14             	add    esp,0x14
c000ebec:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ebf1:	5b                   	pop    ebx
c000ebf2:	5e                   	pop    esi
c000ebf3:	c3                   	ret    

c000ebf4 <Computer::disableNMI()>:
c000ebf4:	6a 00                	push   0x0
c000ebf6:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ebfa:	e8 07 ff ff ff       	call   c000eb06 <Computer::enableNMI(bool)>
c000ebff:	58                   	pop    eax
c000ec00:	5a                   	pop    edx
c000ec01:	c3                   	ret    

c000ec02 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ec02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec06:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ec0d:	19 c0                	sbb    eax,eax
c000ec0f:	83 e0 80             	and    eax,0xffffff80
c000ec12:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ec16:	e6 70                	out    0x70,al
c000ec18:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ec1c:	e6 71                	out    0x71,al
c000ec1e:	c3                   	ret    
c000ec1f:	90                   	nop

c000ec20 <Computer::handleNMI()>:
c000ec20:	56                   	push   esi
c000ec21:	53                   	push   ebx
c000ec22:	83 ec 10             	sub    esp,0x10
c000ec25:	e4 92                	in     al,0x92
c000ec27:	89 c6                	mov    esi,eax
c000ec29:	e4 61                	in     al,0x61
c000ec2b:	68 30 8b 02 c0       	push   0xc0028b30
c000ec30:	88 c3                	mov    bl,al
c000ec32:	e8 42 3b 00 00       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c000ec37:	83 c4 10             	add    esp,0x10
c000ec3a:	83 e6 10             	and    esi,0x10
c000ec3d:	75 0d                	jne    c000ec4c <Computer::handleNMI()+0x2c>
c000ec3f:	f6 c3 40             	test   bl,0x40
c000ec42:	75 1d                	jne    c000ec61 <Computer::handleNMI()+0x41>
c000ec44:	84 db                	test   bl,bl
c000ec46:	78 2d                	js     c000ec75 <Computer::handleNMI()+0x55>
c000ec48:	58                   	pop    eax
c000ec49:	5b                   	pop    ebx
c000ec4a:	5e                   	pop    esi
c000ec4b:	c3                   	ret    
c000ec4c:	83 ec 0c             	sub    esp,0xc
c000ec4f:	68 41 8b 02 c0       	push   0xc0028b41
c000ec54:	e8 3a ac 00 00       	call   c0019893 <Krnl::panic(char const*)>
c000ec59:	83 c4 10             	add    esp,0x10
c000ec5c:	f6 c3 40             	test   bl,0x40
c000ec5f:	74 e3                	je     c000ec44 <Computer::handleNMI()+0x24>
c000ec61:	83 ec 0c             	sub    esp,0xc
c000ec64:	68 4e 8b 02 c0       	push   0xc0028b4e
c000ec69:	e8 25 ac 00 00       	call   c0019893 <Krnl::panic(char const*)>
c000ec6e:	83 c4 10             	add    esp,0x10
c000ec71:	84 db                	test   bl,bl
c000ec73:	79 d3                	jns    c000ec48 <Computer::handleNMI()+0x28>
c000ec75:	c7 44 24 10 58 8b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0028b58
c000ec7d:	5a                   	pop    edx
c000ec7e:	5b                   	pop    ebx
c000ec7f:	5e                   	pop    esi
c000ec80:	e9 0e ac 00 00       	jmp    c0019893 <Krnl::panic(char const*)>
c000ec85:	90                   	nop

c000ec86 <Computer::setDiskActivityLight(int, bool)>:
c000ec86:	56                   	push   esi
c000ec87:	53                   	push   ebx
c000ec88:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ec8c:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000ec91:	77 1b                	ja     c000ecae <Computer::setDiskActivityLight(int, bool)+0x28>
c000ec93:	e4 92                	in     al,0x92
c000ec95:	bb 40 00 00 00       	mov    ebx,0x40
c000ec9a:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000ec9e:	89 da                	mov    edx,ebx
c000eca0:	d3 e2                	shl    edx,cl
c000eca2:	89 f1                	mov    ecx,esi
c000eca4:	f7 d2                	not    edx
c000eca6:	d3 e3                	shl    ebx,cl
c000eca8:	21 d0                	and    eax,edx
c000ecaa:	09 d8                	or     eax,ebx
c000ecac:	e6 92                	out    0x92,al
c000ecae:	5b                   	pop    ebx
c000ecaf:	5e                   	pop    esi
c000ecb0:	c3                   	ret    
c000ecb1:	90                   	nop

c000ecb2 <GDTEntry::setBase(unsigned int)>:
c000ecb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ecb6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ecba:	89 c1                	mov    ecx,eax
c000ecbc:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000ecc0:	c1 e9 10             	shr    ecx,0x10
c000ecc3:	c1 e8 18             	shr    eax,0x18
c000ecc6:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000ecc9:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000eccc:	c3                   	ret    
c000eccd:	90                   	nop

c000ecce <GDTEntry::setLimit(unsigned int)>:
c000ecce:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ecd2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ecd6:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000ecd9:	66 89 01             	mov    WORD PTR [ecx],ax
c000ecdc:	83 e2 f0             	and    edx,0xfffffff0
c000ecdf:	c1 e8 10             	shr    eax,0x10
c000ece2:	83 e0 0f             	and    eax,0xf
c000ece5:	09 d0                	or     eax,edx
c000ece7:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000ecea:	c3                   	ret    
c000eceb:	90                   	nop

c000ecec <GDT::GDT()>:
c000ecec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ecf0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ecf6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ecfa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ed00:	90                   	nop
c000ed01:	c3                   	ret    

c000ed02 <GDT::addEntry(GDTEntry)>:
c000ed02:	53                   	push   ebx
c000ed03:	83 ec 0c             	sub    esp,0xc
c000ed06:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ed0a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ed0c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000ed13:	52                   	push   edx
c000ed14:	50                   	push   eax
c000ed15:	68 94 8b 02 c0       	push   0xc0028b94
c000ed1a:	e8 5a 3a 00 00       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c000ed1f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ed21:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ed25:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ed29:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000ed2d:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000ed31:	8d 50 01             	lea    edx,[eax+0x1]
c000ed34:	c1 e0 03             	shl    eax,0x3
c000ed37:	89 13                	mov    DWORD PTR [ebx],edx
c000ed39:	83 c4 18             	add    esp,0x18
c000ed3c:	5b                   	pop    ebx
c000ed3d:	c3                   	ret    

c000ed3e <GDT::getNumberOfEntries()>:
c000ed3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed42:	8b 00                	mov    eax,DWORD PTR [eax]
c000ed44:	c3                   	ret    
c000ed45:	90                   	nop

c000ed46 <GDT::flush()>:
c000ed46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed4a:	8b 10                	mov    edx,DWORD PTR [eax]
c000ed4c:	83 c0 04             	add    eax,0x4
c000ed4f:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000ed56:	a3 f2 c9 02 c0       	mov    ds:0xc002c9f2,eax
c000ed5b:	66 89 15 f0 c9 02 c0 	mov    WORD PTR ds:0xc002c9f0,dx
c000ed62:	e9 96 16 ff ff       	jmp    c00003fd <loadGDT>
c000ed67:	90                   	nop

c000ed68 <GDT::setup()>:
c000ed68:	55                   	push   ebp
c000ed69:	57                   	push   edi
c000ed6a:	56                   	push   esi
c000ed6b:	53                   	push   ebx
c000ed6c:	83 ec 3c             	sub    esp,0x3c
c000ed6f:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000ed73:	6a 00                	push   0x0
c000ed75:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000ed79:	53                   	push   ebx
c000ed7a:	e8 33 ff ff ff       	call   c000ecb2 <GDTEntry::setBase(unsigned int)>
c000ed7f:	6a 00                	push   0x0
c000ed81:	53                   	push   ebx
c000ed82:	e8 47 ff ff ff       	call   c000ecce <GDTEntry::setLimit(unsigned int)>
c000ed87:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000ed8f:	6a 00                	push   0x0
c000ed91:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000ed95:	53                   	push   ebx
c000ed96:	e8 17 ff ff ff       	call   c000ecb2 <GDTEntry::setBase(unsigned int)>
c000ed9b:	68 ff ff ff 00       	push   0xffffff
c000eda0:	53                   	push   ebx
c000eda1:	e8 28 ff ff ff       	call   c000ecce <GDTEntry::setLimit(unsigned int)>
c000eda6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000edaa:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000edaf:	0d 00 9a c0 00       	or     eax,0xc09a00
c000edb4:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000edb8:	83 c4 20             	add    esp,0x20
c000edbb:	6a 00                	push   0x0
c000edbd:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000edc1:	53                   	push   ebx
c000edc2:	e8 eb fe ff ff       	call   c000ecb2 <GDTEntry::setBase(unsigned int)>
c000edc7:	68 ff ff ff 00       	push   0xffffff
c000edcc:	53                   	push   ebx
c000edcd:	e8 fc fe ff ff       	call   c000ecce <GDTEntry::setLimit(unsigned int)>
c000edd2:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000edd6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000edda:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000edde:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000ede2:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000ede6:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000edeb:	0d 00 92 c0 00       	or     eax,0xc09200
c000edf0:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000edf4:	89 d8                	mov    eax,ebx
c000edf6:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000edfa:	80 cc 60             	or     ah,0x60
c000edfd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ee01:	83 c4 0c             	add    esp,0xc
c000ee04:	89 f8                	mov    eax,edi
c000ee06:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ee0a:	80 cc 60             	or     ah,0x60
c000ee0d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ee11:	89 c7                	mov    edi,eax
c000ee13:	55                   	push   ebp
c000ee14:	e8 e9 fe ff ff       	call   c000ed02 <GDT::addEntry(GDTEntry)>
c000ee19:	83 c4 0c             	add    esp,0xc
c000ee1c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ee20:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ee24:	55                   	push   ebp
c000ee25:	e8 d8 fe ff ff       	call   c000ed02 <GDT::addEntry(GDTEntry)>
c000ee2a:	83 c4 0c             	add    esp,0xc
c000ee2d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ee31:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ee35:	55                   	push   ebp
c000ee36:	e8 c7 fe ff ff       	call   c000ed02 <GDT::addEntry(GDTEntry)>
c000ee3b:	83 c4 0c             	add    esp,0xc
c000ee3e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ee42:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ee46:	53                   	push   ebx
c000ee47:	51                   	push   ecx
c000ee48:	55                   	push   ebp
c000ee49:	e8 b4 fe ff ff       	call   c000ed02 <GDT::addEntry(GDTEntry)>
c000ee4e:	83 c4 0c             	add    esp,0xc
c000ee51:	57                   	push   edi
c000ee52:	56                   	push   esi
c000ee53:	55                   	push   ebp
c000ee54:	e8 a9 fe ff ff       	call   c000ed02 <GDT::addEntry(GDTEntry)>
c000ee59:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ee5c:	e8 e5 fe ff ff       	call   c000ed46 <GDT::flush()>
c000ee61:	83 c4 4c             	add    esp,0x4c
c000ee64:	5b                   	pop    ebx
c000ee65:	5e                   	pop    esi
c000ee66:	5f                   	pop    edi
c000ee67:	5d                   	pop    ebp
c000ee68:	c3                   	ret    

c000ee69 <idleFunction(void*)>:
c000ee69:	53                   	push   ebx
c000ee6a:	83 ec 08             	sub    esp,0x8
c000ee6d:	e8 4a df 00 00       	call   c001cdbc <unlockScheduler()>
c000ee72:	a1 e8 c9 02 c0       	mov    eax,ds:0xc002c9e8
c000ee77:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000ee7d:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000ee84:	74 3c                	je     c000eec2 <idleFunction(void*)+0x59>
c000ee86:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee8d:	74 33                	je     c000eec2 <idleFunction(void*)+0x59>
c000ee8f:	31 db                	xor    ebx,ebx
c000ee91:	52                   	push   edx
c000ee92:	52                   	push   edx
c000ee93:	68 e1 00 00 00       	push   0xe1
c000ee98:	50                   	push   eax
c000ee99:	e8 de fb ff ff       	call   c000ea7c <Computer::rdmsr(unsigned int)>
c000ee9e:	53                   	push   ebx
c000ee9f:	83 e0 02             	and    eax,0x2
c000eea2:	50                   	push   eax
c000eea3:	68 e1 00 00 00       	push   0xe1
c000eea8:	ff 35 e8 c9 02 c0    	push   DWORD PTR ds:0xc002c9e8
c000eeae:	e8 f5 fb ff ff       	call   c000eaa8 <Computer::wrmsr(unsigned int, unsigned long long)>
c000eeb3:	83 c4 20             	add    esp,0x20
c000eeb6:	e8 79 13 ff ff       	call   c0000234 <doTPAUSE>
c000eebb:	e8 70 82 01 00       	call   c0027130 <idleCommon()>
c000eec0:	eb f4                	jmp    c000eeb6 <idleFunction(void*)+0x4d>
c000eec2:	fb                   	sti    
c000eec3:	f4                   	hlt    
c000eec4:	e8 67 82 01 00       	call   c0027130 <idleCommon()>
c000eec9:	eb f7                	jmp    c000eec2 <idleFunction(void*)+0x59>
c000eecb:	90                   	nop

c000eecc <IDTEntry::IDTEntry(bool)>:
c000eecc:	83 ec 04             	sub    esp,0x4
c000eecf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eed3:	88 04 24             	mov    BYTE PTR [esp],al
c000eed6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eeda:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000eee0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eee4:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000eee8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eeec:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eeef:	83 e2 f0             	and    edx,0xfffffff0
c000eef2:	83 ca 0e             	or     edx,0xe
c000eef5:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eef8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eefc:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eeff:	83 e2 ef             	and    edx,0xffffffef
c000ef02:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ef05:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000ef09:	74 04                	je     c000ef0f <IDTEntry::IDTEntry(bool)+0x43>
c000ef0b:	b2 03                	mov    dl,0x3
c000ef0d:	eb 02                	jmp    c000ef11 <IDTEntry::IDTEntry(bool)+0x45>
c000ef0f:	b2 00                	mov    dl,0x0
c000ef11:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef15:	83 e2 03             	and    edx,0x3
c000ef18:	88 d1                	mov    cl,dl
c000ef1a:	c1 e1 05             	shl    ecx,0x5
c000ef1d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ef20:	83 e2 9f             	and    edx,0xffffff9f
c000ef23:	09 ca                	or     edx,ecx
c000ef25:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ef28:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef2c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ef2f:	83 ca 80             	or     edx,0xffffff80
c000ef32:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ef35:	90                   	nop
c000ef36:	83 c4 04             	add    esp,0x4
c000ef39:	c3                   	ret    

c000ef3a <IDTEntry::setOffset(unsigned int)>:
c000ef3a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ef3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef42:	66 89 02             	mov    WORD PTR [edx],ax
c000ef45:	c1 e8 10             	shr    eax,0x10
c000ef48:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000ef4c:	c3                   	ret    
c000ef4d:	90                   	nop

c000ef4e <IDT::IDT()>:
c000ef4e:	90                   	nop
c000ef4f:	c3                   	ret    

c000ef50 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000ef50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef54:	83 c0 30             	add    eax,0x30
c000ef57:	c3                   	ret    

c000ef58 <IDT::addEntry(IDTEntry, int)>:
c000ef58:	53                   	push   ebx
c000ef59:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef5d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ef61:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ef65:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ef69:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000ef6c:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000ef70:	5b                   	pop    ebx
c000ef71:	c3                   	ret    

c000ef72 <IDT::addEntry(int, void (*)(), bool)>:
c000ef72:	53                   	push   ebx
c000ef73:	83 ec 10             	sub    esp,0x10
c000ef76:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000ef7b:	50                   	push   eax
c000ef7c:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000ef80:	53                   	push   ebx
c000ef81:	e8 46 ff ff ff       	call   c000eecc <IDTEntry::IDTEntry(bool)>
c000ef86:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ef8a:	53                   	push   ebx
c000ef8b:	e8 aa ff ff ff       	call   c000ef3a <IDTEntry::setOffset(unsigned int)>
c000ef90:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef94:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ef98:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ef9c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000efa0:	e8 b3 ff ff ff       	call   c000ef58 <IDT::addEntry(IDTEntry, int)>
c000efa5:	83 c4 30             	add    esp,0x30
c000efa8:	5b                   	pop    ebx
c000efa9:	c3                   	ret    

c000efaa <IDT::flush()>:
c000efaa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000efae:	66 c7 05 f8 c9 02 c0 ff 07 	mov    WORD PTR ds:0xc002c9f8,0x7ff
c000efb7:	a3 fa c9 02 c0       	mov    ds:0xc002c9fa,eax
c000efbc:	0f 01 1d f8 c9 02 c0 	lidtd  ds:0xc002c9f8
c000efc3:	c3                   	ret    

c000efc4 <IDT::setup()>:
c000efc4:	57                   	push   edi
c000efc5:	56                   	push   esi
c000efc6:	53                   	push   ebx
c000efc7:	83 ec 10             	sub    esp,0x10
c000efca:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000efce:	6a 00                	push   0x0
c000efd0:	68 1d 04 00 c0       	push   0xc000041d
c000efd5:	6a 00                	push   0x0
c000efd7:	53                   	push   ebx
c000efd8:	e8 95 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000efdd:	6a 00                	push   0x0
c000efdf:	68 2d 04 00 c0       	push   0xc000042d
c000efe4:	6a 01                	push   0x1
c000efe6:	53                   	push   ebx
c000efe7:	e8 86 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000efec:	83 c4 20             	add    esp,0x20
c000efef:	6a 00                	push   0x0
c000eff1:	68 37 04 00 c0       	push   0xc0000437
c000eff6:	6a 02                	push   0x2
c000eff8:	53                   	push   ebx
c000eff9:	e8 74 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000effe:	6a 00                	push   0x0
c000f000:	68 41 04 00 c0       	push   0xc0000441
c000f005:	6a 03                	push   0x3
c000f007:	53                   	push   ebx
c000f008:	e8 65 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f00d:	83 c4 20             	add    esp,0x20
c000f010:	6a 00                	push   0x0
c000f012:	68 4b 04 00 c0       	push   0xc000044b
c000f017:	6a 04                	push   0x4
c000f019:	53                   	push   ebx
c000f01a:	e8 53 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f01f:	6a 00                	push   0x0
c000f021:	68 55 04 00 c0       	push   0xc0000455
c000f026:	6a 05                	push   0x5
c000f028:	53                   	push   ebx
c000f029:	e8 44 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f02e:	83 c4 20             	add    esp,0x20
c000f031:	6a 00                	push   0x0
c000f033:	68 5f 04 00 c0       	push   0xc000045f
c000f038:	6a 06                	push   0x6
c000f03a:	53                   	push   ebx
c000f03b:	e8 32 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f040:	6a 00                	push   0x0
c000f042:	68 69 04 00 c0       	push   0xc0000469
c000f047:	6a 07                	push   0x7
c000f049:	53                   	push   ebx
c000f04a:	e8 23 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f04f:	83 c4 20             	add    esp,0x20
c000f052:	6a 00                	push   0x0
c000f054:	68 73 04 00 c0       	push   0xc0000473
c000f059:	6a 08                	push   0x8
c000f05b:	53                   	push   ebx
c000f05c:	e8 11 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f061:	6a 00                	push   0x0
c000f063:	68 7b 04 00 c0       	push   0xc000047b
c000f068:	6a 09                	push   0x9
c000f06a:	53                   	push   ebx
c000f06b:	e8 02 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f070:	83 c4 20             	add    esp,0x20
c000f073:	6a 00                	push   0x0
c000f075:	68 85 04 00 c0       	push   0xc0000485
c000f07a:	6a 0a                	push   0xa
c000f07c:	53                   	push   ebx
c000f07d:	e8 f0 fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f082:	6a 00                	push   0x0
c000f084:	68 8d 04 00 c0       	push   0xc000048d
c000f089:	6a 0b                	push   0xb
c000f08b:	53                   	push   ebx
c000f08c:	e8 e1 fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f091:	83 c4 20             	add    esp,0x20
c000f094:	6a 00                	push   0x0
c000f096:	68 95 04 00 c0       	push   0xc0000495
c000f09b:	6a 0c                	push   0xc
c000f09d:	53                   	push   ebx
c000f09e:	e8 cf fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f0a3:	6a 00                	push   0x0
c000f0a5:	68 9d 04 00 c0       	push   0xc000049d
c000f0aa:	6a 0d                	push   0xd
c000f0ac:	53                   	push   ebx
c000f0ad:	e8 c0 fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f0b2:	83 c4 20             	add    esp,0x20
c000f0b5:	6a 00                	push   0x0
c000f0b7:	68 a5 04 00 c0       	push   0xc00004a5
c000f0bc:	6a 0e                	push   0xe
c000f0be:	53                   	push   ebx
c000f0bf:	e8 ae fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f0c4:	6a 00                	push   0x0
c000f0c6:	68 ad 04 00 c0       	push   0xc00004ad
c000f0cb:	6a 0f                	push   0xf
c000f0cd:	53                   	push   ebx
c000f0ce:	e8 9f fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f0d3:	83 c4 20             	add    esp,0x20
c000f0d6:	6a 00                	push   0x0
c000f0d8:	68 b7 04 00 c0       	push   0xc00004b7
c000f0dd:	6a 10                	push   0x10
c000f0df:	53                   	push   ebx
c000f0e0:	e8 8d fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f0e5:	6a 00                	push   0x0
c000f0e7:	68 c1 04 00 c0       	push   0xc00004c1
c000f0ec:	6a 11                	push   0x11
c000f0ee:	53                   	push   ebx
c000f0ef:	e8 7e fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f0f4:	83 c4 20             	add    esp,0x20
c000f0f7:	6a 00                	push   0x0
c000f0f9:	68 cb 04 00 c0       	push   0xc00004cb
c000f0fe:	6a 12                	push   0x12
c000f100:	53                   	push   ebx
c000f101:	e8 6c fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f106:	6a 01                	push   0x1
c000f108:	68 65 05 00 c0       	push   0xc0000565
c000f10d:	6a 60                	push   0x60
c000f10f:	53                   	push   ebx
c000f110:	e8 5d fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f115:	83 c4 20             	add    esp,0x20
c000f118:	6a 00                	push   0x0
c000f11a:	68 6c 05 00 c0       	push   0xc000056c
c000f11f:	6a 20                	push   0x20
c000f121:	53                   	push   ebx
c000f122:	e8 4b fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f127:	6a 00                	push   0x0
c000f129:	68 57 05 00 c0       	push   0xc0000557
c000f12e:	6a 21                	push   0x21
c000f130:	53                   	push   ebx
c000f131:	e8 3c fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f136:	83 c4 20             	add    esp,0x20
c000f139:	6a 00                	push   0x0
c000f13b:	68 5e 05 00 c0       	push   0xc000055e
c000f140:	6a 22                	push   0x22
c000f142:	53                   	push   ebx
c000f143:	e8 2a fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f148:	6a 00                	push   0x0
c000f14a:	68 d5 04 00 c0       	push   0xc00004d5
c000f14f:	6a 23                	push   0x23
c000f151:	53                   	push   ebx
c000f152:	e8 1b fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f157:	83 c4 20             	add    esp,0x20
c000f15a:	6a 00                	push   0x0
c000f15c:	68 df 04 00 c0       	push   0xc00004df
c000f161:	6a 24                	push   0x24
c000f163:	53                   	push   ebx
c000f164:	e8 09 fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f169:	6a 00                	push   0x0
c000f16b:	68 e9 04 00 c0       	push   0xc00004e9
c000f170:	6a 25                	push   0x25
c000f172:	53                   	push   ebx
c000f173:	e8 fa fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f178:	83 c4 20             	add    esp,0x20
c000f17b:	6a 00                	push   0x0
c000f17d:	68 f3 04 00 c0       	push   0xc00004f3
c000f182:	6a 26                	push   0x26
c000f184:	53                   	push   ebx
c000f185:	e8 e8 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f18a:	6a 00                	push   0x0
c000f18c:	68 fd 04 00 c0       	push   0xc00004fd
c000f191:	6a 27                	push   0x27
c000f193:	53                   	push   ebx
c000f194:	e8 d9 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f199:	83 c4 20             	add    esp,0x20
c000f19c:	6a 00                	push   0x0
c000f19e:	68 07 05 00 c0       	push   0xc0000507
c000f1a3:	6a 28                	push   0x28
c000f1a5:	53                   	push   ebx
c000f1a6:	e8 c7 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f1ab:	6a 00                	push   0x0
c000f1ad:	68 11 05 00 c0       	push   0xc0000511
c000f1b2:	6a 29                	push   0x29
c000f1b4:	53                   	push   ebx
c000f1b5:	e8 b8 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f1ba:	83 c4 20             	add    esp,0x20
c000f1bd:	6a 00                	push   0x0
c000f1bf:	68 1b 05 00 c0       	push   0xc000051b
c000f1c4:	6a 2a                	push   0x2a
c000f1c6:	53                   	push   ebx
c000f1c7:	e8 a6 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f1cc:	6a 00                	push   0x0
c000f1ce:	68 25 05 00 c0       	push   0xc0000525
c000f1d3:	6a 2b                	push   0x2b
c000f1d5:	53                   	push   ebx
c000f1d6:	e8 97 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f1db:	83 c4 20             	add    esp,0x20
c000f1de:	6a 00                	push   0x0
c000f1e0:	68 2f 05 00 c0       	push   0xc000052f
c000f1e5:	6a 2c                	push   0x2c
c000f1e7:	53                   	push   ebx
c000f1e8:	e8 85 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f1ed:	6a 00                	push   0x0
c000f1ef:	68 39 05 00 c0       	push   0xc0000539
c000f1f4:	6a 2d                	push   0x2d
c000f1f6:	53                   	push   ebx
c000f1f7:	e8 76 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f1fc:	83 c4 20             	add    esp,0x20
c000f1ff:	6a 00                	push   0x0
c000f201:	68 43 05 00 c0       	push   0xc0000543
c000f206:	6a 2e                	push   0x2e
c000f208:	53                   	push   ebx
c000f209:	e8 64 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f20e:	6a 00                	push   0x0
c000f210:	68 4d 05 00 c0       	push   0xc000054d
c000f215:	6a 2f                	push   0x2f
c000f217:	53                   	push   ebx
c000f218:	e8 55 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f21d:	83 c4 20             	add    esp,0x20
c000f220:	6a 00                	push   0x0
c000f222:	68 a2 05 00 c0       	push   0xc00005a2
c000f227:	6a 30                	push   0x30
c000f229:	53                   	push   ebx
c000f22a:	e8 43 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f22f:	6a 00                	push   0x0
c000f231:	68 ac 05 00 c0       	push   0xc00005ac
c000f236:	6a 31                	push   0x31
c000f238:	53                   	push   ebx
c000f239:	e8 34 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f23e:	83 c4 20             	add    esp,0x20
c000f241:	6a 00                	push   0x0
c000f243:	68 b6 05 00 c0       	push   0xc00005b6
c000f248:	6a 32                	push   0x32
c000f24a:	53                   	push   ebx
c000f24b:	e8 22 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f250:	6a 00                	push   0x0
c000f252:	68 c0 05 00 c0       	push   0xc00005c0
c000f257:	6a 33                	push   0x33
c000f259:	53                   	push   ebx
c000f25a:	e8 13 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f25f:	83 c4 20             	add    esp,0x20
c000f262:	6a 00                	push   0x0
c000f264:	68 ca 05 00 c0       	push   0xc00005ca
c000f269:	6a 34                	push   0x34
c000f26b:	53                   	push   ebx
c000f26c:	e8 01 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f271:	6a 00                	push   0x0
c000f273:	68 d4 05 00 c0       	push   0xc00005d4
c000f278:	6a 35                	push   0x35
c000f27a:	53                   	push   ebx
c000f27b:	e8 f2 fc ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f280:	83 c4 20             	add    esp,0x20
c000f283:	6a 00                	push   0x0
c000f285:	68 de 05 00 c0       	push   0xc00005de
c000f28a:	6a 36                	push   0x36
c000f28c:	53                   	push   ebx
c000f28d:	e8 e0 fc ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f292:	6a 00                	push   0x0
c000f294:	68 e8 05 00 c0       	push   0xc00005e8
c000f299:	6a 37                	push   0x37
c000f29b:	53                   	push   ebx
c000f29c:	e8 d1 fc ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f2a1:	83 c4 20             	add    esp,0x20
c000f2a4:	e8 70 26 00 00       	call   c0011919 <Virt::getAKernelVAS()>
c000f2a9:	52                   	push   edx
c000f2aa:	6a 03                	push   0x3
c000f2ac:	6a 02                	push   0x2
c000f2ae:	50                   	push   eax
c000f2af:	e8 a0 2c 00 00       	call   c0011f54 <VAS::allocatePages(int, int)>
c000f2b4:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f2bb:	89 c6                	mov    esi,eax
c000f2bd:	e8 12 02 00 00       	call   c000f4d4 <malloc>
c000f2c2:	81 c6 00 20 00 00    	add    esi,0x2000
c000f2c8:	89 04 24             	mov    DWORD PTR [esp],eax
c000f2cb:	89 c7                	mov    edi,eax
c000f2cd:	e8 e8 1d 00 00       	call   c00110ba <TSS::TSS()>
c000f2d2:	83 c4 0c             	add    esp,0xc
c000f2d5:	68 73 04 00 c0       	push   0xc0000473
c000f2da:	56                   	push   esi
c000f2db:	57                   	push   edi
c000f2dc:	e8 19 1e 00 00       	call   c00110fa <TSS::setup(unsigned long, unsigned long)>
c000f2e1:	59                   	pop    ecx
c000f2e2:	89 c6                	mov    esi,eax
c000f2e4:	5f                   	pop    edi
c000f2e5:	6a 00                	push   0x0
c000f2e7:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f2eb:	50                   	push   eax
c000f2ec:	e8 db fb ff ff       	call   c000eecc <IDTEntry::IDTEntry(bool)>
c000f2f1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f2f5:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f2fa:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f301:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f307:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f30b:	80 ce 05             	or     dh,0x5
c000f30e:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f311:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f315:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f319:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f31c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f31f:	e8 86 fc ff ff       	call   c000efaa <IDT::flush()>
c000f324:	83 c4 20             	add    esp,0x20
c000f327:	5b                   	pop    ebx
c000f328:	5e                   	pop    esi
c000f329:	5f                   	pop    edi
c000f32a:	c3                   	ret    

c000f32b <sbrk>:
c000f32b:	55                   	push   ebp
c000f32c:	57                   	push   edi
c000f32d:	56                   	push   esi
c000f32e:	53                   	push   ebx
c000f32f:	83 ec 1c             	sub    esp,0x1c
c000f332:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f336:	85 c0                	test   eax,eax
c000f338:	74 3e                	je     c000f378 <sbrk+0x4d>
c000f33a:	78 43                	js     c000f37f <sbrk+0x54>
c000f33c:	8b 15 e8 c9 02 c0    	mov    edx,DWORD PTR ds:0xc002c9e8
c000f342:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f348:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f34e:	83 e2 01             	and    edx,0x1
c000f351:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f355:	8b 0d fc b8 02 c0    	mov    ecx,DWORD PTR ds:0xc002b8fc
c000f35b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f35f:	05 ff 0f 00 00       	add    eax,0xfff
c000f364:	89 c2                	mov    edx,eax
c000f366:	78 2f                	js     c000f397 <sbrk+0x6c>
c000f368:	c1 fa 0c             	sar    edx,0xc
c000f36b:	89 d7                	mov    edi,edx
c000f36d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f371:	be 00 00 00 00       	mov    esi,0x0
c000f376:	eb 36                	jmp    c000f3ae <sbrk+0x83>
c000f378:	a1 fc b8 02 c0       	mov    eax,ds:0xc002b8fc
c000f37d:	eb 74                	jmp    c000f3f3 <sbrk+0xc8>
c000f37f:	83 ec 08             	sub    esp,0x8
c000f382:	50                   	push   eax
c000f383:	68 b0 8b 02 c0       	push   0xc0028bb0
c000f388:	e8 ec 33 00 00       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c000f38d:	83 c4 10             	add    esp,0x10
c000f390:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f395:	eb 5c                	jmp    c000f3f3 <sbrk+0xc8>
c000f397:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f39d:	eb c9                	jmp    c000f368 <sbrk+0x3d>
c000f39f:	81 05 fc b8 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002b8fc,0x1000
c000f3a9:	46                   	inc    esi
c000f3aa:	39 f7                	cmp    edi,esi
c000f3ac:	74 34                	je     c000f3e2 <sbrk+0xb7>
c000f3ae:	e8 66 25 00 00       	call   c0011919 <Virt::getAKernelVAS()>
c000f3b3:	89 c3                	mov    ebx,eax
c000f3b5:	8b 2d fc b8 02 c0    	mov    ebp,DWORD PTR ds:0xc002b8fc
c000f3bb:	e8 87 07 00 00       	call   c000fb47 <Phys::allocatePage()>
c000f3c0:	68 01 04 00 00       	push   0x401
c000f3c5:	55                   	push   ebp
c000f3c6:	50                   	push   eax
c000f3c7:	53                   	push   ebx
c000f3c8:	e8 87 2a 00 00       	call   c0011e54 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f3cd:	83 c4 10             	add    esp,0x10
c000f3d0:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f3d5:	74 c8                	je     c000f39f <sbrk+0x74>
c000f3d7:	8b 1d fc b8 02 c0    	mov    ebx,DWORD PTR ds:0xc002b8fc
c000f3dd:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f3e0:	eb bd                	jmp    c000f39f <sbrk+0x74>
c000f3e2:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f3e7:	75 12                	jne    c000f3fb <sbrk+0xd0>
c000f3e9:	0f 20 d8             	mov    eax,cr3
c000f3ec:	0f 22 d8             	mov    cr3,eax
c000f3ef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f3f3:	83 c4 1c             	add    esp,0x1c
c000f3f6:	5b                   	pop    ebx
c000f3f7:	5e                   	pop    esi
c000f3f8:	5f                   	pop    edi
c000f3f9:	5d                   	pop    ebp
c000f3fa:	c3                   	ret    
c000f3fb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f3ff:	89 cb                	mov    ebx,ecx
c000f401:	c1 eb 0a             	shr    ebx,0xa
c000f404:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f40a:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f410:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f414:	c1 e0 0c             	shl    eax,0xc
c000f417:	01 c8                	add    eax,ecx
c000f419:	c1 e8 0a             	shr    eax,0xa
c000f41c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f421:	2d 00 00 40 00       	sub    eax,0x400000
c000f426:	39 c3                	cmp    ebx,eax
c000f428:	77 c5                	ja     c000f3ef <sbrk+0xc4>
c000f42a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f42d:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f433:	39 d8                	cmp    eax,ebx
c000f435:	73 f3                	jae    c000f42a <sbrk+0xff>
c000f437:	eb b6                	jmp    c000f3ef <sbrk+0xc4>

c000f439 <mmap>:
c000f439:	83 ec 18             	sub    esp,0x18
c000f43c:	68 e0 8b 02 c0       	push   0xc0028be0
c000f441:	e8 4d a4 00 00       	call   c0019893 <Krnl::panic(char const*)>
c000f446:	b8 00 00 00 00       	mov    eax,0x0
c000f44b:	83 c4 1c             	add    esp,0x1c
c000f44e:	c3                   	ret    

c000f44f <munmap>:
c000f44f:	83 ec 18             	sub    esp,0x18
c000f452:	68 e5 8b 02 c0       	push   0xc0028be5
c000f457:	e8 37 a4 00 00       	call   c0019893 <Krnl::panic(char const*)>
c000f45c:	b8 00 00 00 00       	mov    eax,0x0
c000f461:	83 c4 1c             	add    esp,0x1c
c000f464:	c3                   	ret    

c000f465 <liballoc_lock()>:
c000f465:	83 ec 0c             	sub    esp,0xc
c000f468:	e8 4d d9 00 00       	call   c001cdba <lockScheduler()>
c000f46d:	b8 00 00 00 00       	mov    eax,0x0
c000f472:	83 c4 0c             	add    esp,0xc
c000f475:	c3                   	ret    

c000f476 <liballoc_unlock()>:
c000f476:	83 ec 0c             	sub    esp,0xc
c000f479:	e8 3e d9 00 00       	call   c001cdbc <unlockScheduler()>
c000f47e:	b8 00 00 00 00       	mov    eax,0x0
c000f483:	83 c4 0c             	add    esp,0xc
c000f486:	c3                   	ret    

c000f487 <liballoc_alloc(int)>:
c000f487:	83 ec 0c             	sub    esp,0xc
c000f48a:	e8 8a 24 00 00       	call   c0011919 <Virt::getAKernelVAS()>
c000f48f:	83 ec 04             	sub    esp,0x4
c000f492:	6a 01                	push   0x1
c000f494:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f498:	50                   	push   eax
c000f499:	e8 b6 2a 00 00       	call   c0011f54 <VAS::allocatePages(int, int)>
c000f49e:	83 c4 1c             	add    esp,0x1c
c000f4a1:	c3                   	ret    

c000f4a2 <liballoc_free(void*, int)>:
c000f4a2:	83 ec 0c             	sub    esp,0xc
c000f4a5:	e8 6f 24 00 00       	call   c0011919 <Virt::getAKernelVAS()>
c000f4aa:	83 ec 08             	sub    esp,0x8
c000f4ad:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f4b1:	50                   	push   eax
c000f4b2:	e8 59 27 00 00       	call   c0011c10 <VAS::freeAllocatedPages(unsigned long)>
c000f4b7:	b8 00 00 00 00       	mov    eax,0x0
c000f4bc:	83 c4 1c             	add    esp,0x1c
c000f4bf:	c3                   	ret    

c000f4c0 <realloc>:
c000f4c0:	83 ec 14             	sub    esp,0x14
c000f4c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4cb:	e8 34 1f ff ff       	call   c0001404 <dlrealloc>
c000f4d0:	83 c4 1c             	add    esp,0x1c
c000f4d3:	c3                   	ret    

c000f4d4 <malloc>:
c000f4d4:	83 ec 18             	sub    esp,0x18
c000f4d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4db:	e8 e7 19 ff ff       	call   c0000ec7 <dlmalloc>
c000f4e0:	83 c4 1c             	add    esp,0x1c
c000f4e3:	c3                   	ret    

c000f4e4 <free>:
c000f4e4:	83 ec 18             	sub    esp,0x18
c000f4e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4eb:	e8 7c 16 ff ff       	call   c0000b6c <dlfree>
c000f4f0:	83 c4 1c             	add    esp,0x1c
c000f4f3:	c3                   	ret    

c000f4f4 <rfree>:
c000f4f4:	83 ec 18             	sub    esp,0x18
c000f4f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4fb:	e8 6c 16 ff ff       	call   c0000b6c <dlfree>
c000f500:	83 c4 1c             	add    esp,0x1c
c000f503:	c3                   	ret    

c000f504 <calloc>:
c000f504:	56                   	push   esi
c000f505:	53                   	push   ebx
c000f506:	83 ec 10             	sub    esp,0x10
c000f509:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f50d:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f512:	53                   	push   ebx
c000f513:	e8 bc ff ff ff       	call   c000f4d4 <malloc>
c000f518:	89 c6                	mov    esi,eax
c000f51a:	83 c4 0c             	add    esp,0xc
c000f51d:	53                   	push   ebx
c000f51e:	6a 00                	push   0x0
c000f520:	50                   	push   eax
c000f521:	e8 65 11 ff ff       	call   c000068b <memset>
c000f526:	89 f0                	mov    eax,esi
c000f528:	83 c4 14             	add    esp,0x14
c000f52b:	5b                   	pop    ebx
c000f52c:	5e                   	pop    esi
c000f52d:	c3                   	ret    

c000f52e <hwTextMode_loadInData(VgaText*)>:
c000f52e:	55                   	push   ebp
c000f52f:	a1 20 b9 02 c0       	mov    eax,ds:0xc002b920
c000f534:	57                   	push   edi
c000f535:	56                   	push   esi
c000f536:	53                   	push   ebx
c000f537:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f53b:	8b 97 ac 0f 00 00    	mov    edx,DWORD PTR [edi+0xfac]
c000f541:	85 d2                	test   edx,edx
c000f543:	7e 2f                	jle    c000f574 <hwTextMode_loadInData(VgaText*)+0x46>
c000f545:	8d a8 94 00 00 00    	lea    ebp,[eax+0x94]
c000f54b:	8d 4f 0c             	lea    ecx,[edi+0xc]
c000f54e:	31 f6                	xor    esi,esi
c000f550:	29 fd                	sub    ebp,edi
c000f552:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f555:	31 c0                	xor    eax,eax
c000f557:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f55b:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f55f:	40                   	inc    eax
c000f560:	83 f8 50             	cmp    eax,0x50
c000f563:	75 f2                	jne    c000f557 <hwTextMode_loadInData(VgaText*)+0x29>
c000f565:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f56b:	46                   	inc    esi
c000f56c:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f572:	7f de                	jg     c000f552 <hwTextMode_loadInData(VgaText*)+0x24>
c000f574:	5b                   	pop    ebx
c000f575:	5e                   	pop    esi
c000f576:	5f                   	pop    edi
c000f577:	5d                   	pop    ebp
c000f578:	c3                   	ret    

c000f579 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f579:	55                   	push   ebp
c000f57a:	80 3d 80 ca 02 c0 00 	cmp    BYTE PTR ds:0xc002ca80,0x0
c000f581:	57                   	push   edi
c000f582:	56                   	push   esi
c000f583:	53                   	push   ebx
c000f584:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f588:	75 50                	jne    c000f5da <hwTextMode_loadInTitle(VgaText*, char*)+0x61>
c000f58a:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f590:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f596:	8b 15 20 b9 02 c0    	mov    edx,DWORD PTR ds:0xc002b920
c000f59c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f5a0:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f5a6:	eb 0e                	jmp    c000f5b6 <hwTextMode_loadInTitle(VgaText*, char*)+0x3d>
c000f5a8:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f5ae:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f5b4:	89 da                	mov    edx,ebx
c000f5b6:	83 e5 0f             	and    ebp,0xf
c000f5b9:	c1 e0 04             	shl    eax,0x4
c000f5bc:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f5bf:	0f b6 c0             	movzx  eax,al
c000f5c2:	41                   	inc    ecx
c000f5c3:	09 e8                	or     eax,ebp
c000f5c5:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f5c9:	c1 e0 08             	shl    eax,0x8
c000f5cc:	09 e8                	or     eax,ebp
c000f5ce:	39 fb                	cmp    ebx,edi
c000f5d0:	66 89 02             	mov    WORD PTR [edx],ax
c000f5d3:	75 d3                	jne    c000f5a8 <hwTextMode_loadInTitle(VgaText*, char*)+0x2f>
c000f5d5:	5b                   	pop    ebx
c000f5d6:	5e                   	pop    esi
c000f5d7:	5f                   	pop    edi
c000f5d8:	5d                   	pop    ebp
c000f5d9:	c3                   	ret    
c000f5da:	c7 86 d8 0f 00 00 02 00 00 00 	mov    DWORD PTR [esi+0xfd8],0x2
c000f5e4:	c7 86 d4 0f 00 00 00 00 00 00 	mov    DWORD PTR [esi+0xfd4],0x0
c000f5ee:	31 c0                	xor    eax,eax
c000f5f0:	bd 02 00 00 00       	mov    ebp,0x2
c000f5f5:	eb 9f                	jmp    c000f596 <hwTextMode_loadInTitle(VgaText*, char*)+0x1d>

c000f5f7 <hwTextMode_showCursor(VgaText*, bool)>:
c000f5f7:	56                   	push   esi
c000f5f8:	80 3d 80 ca 02 c0 00 	cmp    BYTE PTR ds:0xc002ca80,0x0
c000f5ff:	53                   	push   ebx
c000f600:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f604:	75 39                	jne    c000f63f <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000f606:	84 c0                	test   al,al
c000f608:	74 38                	je     c000f642 <hwTextMode_showCursor(VgaText*, bool)+0x4b>
c000f60a:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f60f:	b0 0a                	mov    al,0xa
c000f611:	89 da                	mov    edx,ebx
c000f613:	ee                   	out    dx,al
c000f614:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f619:	89 ca                	mov    edx,ecx
c000f61b:	ec                   	in     al,dx
c000f61c:	b2 0f                	mov    dl,0xf
c000f61e:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f622:	83 e0 c0             	and    eax,0xffffffc0
c000f625:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f62b:	09 d0                	or     eax,edx
c000f62d:	89 ca                	mov    edx,ecx
c000f62f:	ee                   	out    dx,al
c000f630:	b0 0b                	mov    al,0xb
c000f632:	89 da                	mov    edx,ebx
c000f634:	ee                   	out    dx,al
c000f635:	89 ca                	mov    edx,ecx
c000f637:	ec                   	in     al,dx
c000f638:	83 e0 e0             	and    eax,0xffffffe0
c000f63b:	83 c8 0f             	or     eax,0xf
c000f63e:	ee                   	out    dx,al
c000f63f:	5b                   	pop    ebx
c000f640:	5e                   	pop    esi
c000f641:	c3                   	ret    
c000f642:	b0 0a                	mov    al,0xa
c000f644:	ba d4 03 00 00       	mov    edx,0x3d4
c000f649:	ee                   	out    dx,al
c000f64a:	b0 20                	mov    al,0x20
c000f64c:	ba d5 03 00 00       	mov    edx,0x3d5
c000f651:	ee                   	out    dx,al
c000f652:	5b                   	pop    ebx
c000f653:	5e                   	pop    esi
c000f654:	c3                   	ret    

c000f655 <hwTextMode_update(VgaText*)>:
c000f655:	c3                   	ret    

c000f656 <hwTextMode_updateCursor(VgaText*)>:
c000f656:	56                   	push   esi
c000f657:	80 3d 80 ca 02 c0 00 	cmp    BYTE PTR ds:0xc002ca80,0x0
c000f65e:	53                   	push   ebx
c000f65f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f663:	75 3f                	jne    c000f6a4 <hwTextMode_updateCursor(VgaText*)+0x4e>
c000f665:	be d4 03 00 00       	mov    esi,0x3d4
c000f66a:	b9 19 00 00 00       	mov    ecx,0x19
c000f66f:	89 f2                	mov    edx,esi
c000f671:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f677:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f67d:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f680:	c1 e1 04             	shl    ecx,0x4
c000f683:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f689:	b0 0f                	mov    al,0xf
c000f68b:	ee                   	out    dx,al
c000f68c:	bb d5 03 00 00       	mov    ebx,0x3d5
c000f691:	88 c8                	mov    al,cl
c000f693:	89 da                	mov    edx,ebx
c000f695:	ee                   	out    dx,al
c000f696:	b0 0e                	mov    al,0xe
c000f698:	89 f2                	mov    edx,esi
c000f69a:	ee                   	out    dx,al
c000f69b:	89 c8                	mov    eax,ecx
c000f69d:	89 da                	mov    edx,ebx
c000f69f:	66 c1 e8 08          	shr    ax,0x8
c000f6a3:	ee                   	out    dx,al
c000f6a4:	5b                   	pop    ebx
c000f6a5:	5e                   	pop    esi
c000f6a6:	c3                   	ret    

c000f6a7 <hwTextMode_disableBlink(VgaText*, bool)>:
c000f6a7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f6ab:	80 3d 80 ca 02 c0 00 	cmp    BYTE PTR ds:0xc002ca80,0x0
c000f6b2:	75 38                	jne    c000f6ec <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000f6b4:	ba da 03 00 00       	mov    edx,0x3da
c000f6b9:	84 c0                	test   al,al
c000f6bb:	75 18                	jne    c000f6d5 <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000f6bd:	ec                   	in     al,dx
c000f6be:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000f6c3:	b0 30                	mov    al,0x30
c000f6c5:	89 ca                	mov    edx,ecx
c000f6c7:	ee                   	out    dx,al
c000f6c8:	ba c1 03 00 00       	mov    edx,0x3c1
c000f6cd:	ec                   	in     al,dx
c000f6ce:	83 c8 08             	or     eax,0x8
c000f6d1:	89 ca                	mov    edx,ecx
c000f6d3:	ee                   	out    dx,al
c000f6d4:	c3                   	ret    
c000f6d5:	ec                   	in     al,dx
c000f6d6:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000f6db:	b0 30                	mov    al,0x30
c000f6dd:	89 ca                	mov    edx,ecx
c000f6df:	ee                   	out    dx,al
c000f6e0:	ba c1 03 00 00       	mov    edx,0x3c1
c000f6e5:	ec                   	in     al,dx
c000f6e6:	83 e0 f7             	and    eax,0xfffffff7
c000f6e9:	89 ca                	mov    edx,ecx
c000f6eb:	ee                   	out    dx,al
c000f6ec:	c3                   	ret    

c000f6ed <hwTextMode_scrollScreen(VgaText*)>:
c000f6ed:	55                   	push   ebp
c000f6ee:	57                   	push   edi
c000f6ef:	56                   	push   esi
c000f6f0:	53                   	push   ebx
c000f6f1:	83 ec 1c             	sub    esp,0x1c
c000f6f4:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f6f8:	80 3d 80 ca 02 c0 00 	cmp    BYTE PTR ds:0xc002ca80,0x0
c000f6ff:	74 14                	je     c000f715 <hwTextMode_scrollScreen(VgaText*)+0x28>
c000f701:	c7 81 d0 0f 00 00 02 00 00 00 	mov    DWORD PTR [ecx+0xfd0],0x2
c000f70b:	c7 81 cc 0f 00 00 00 00 00 00 	mov    DWORD PTR [ecx+0xfcc],0x0
c000f715:	a1 20 b9 02 c0       	mov    eax,ds:0xc002b920
c000f71a:	bd 02 00 00 00       	mov    ebp,0x2
c000f71f:	05 a0 00 00 00       	add    eax,0xa0
c000f724:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f728:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f72c:	31 c0                	xor    eax,eax
c000f72e:	eb 0b                	jmp    c000f73b <hwTextMode_scrollScreen(VgaText*)+0x4e>
c000f730:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f736:	74 57                	je     c000f78f <hwTextMode_scrollScreen(VgaText*)+0xa2>
c000f738:	43                   	inc    ebx
c000f739:	89 f0                	mov    eax,esi
c000f73b:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000f741:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000f747:	88 13                	mov    BYTE PTR [ebx],dl
c000f749:	8d 70 01             	lea    esi,[eax+0x1]
c000f74c:	83 fd 18             	cmp    ebp,0x18
c000f74f:	75 df                	jne    c000f730 <hwTextMode_scrollScreen(VgaText*)+0x43>
c000f751:	a8 01                	test   al,0x1
c000f753:	75 13                	jne    c000f768 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000f755:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000f758:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f75e:	75 d8                	jne    c000f738 <hwTextMode_scrollScreen(VgaText*)+0x4b>
c000f760:	83 c4 1c             	add    esp,0x1c
c000f763:	5b                   	pop    ebx
c000f764:	5e                   	pop    esi
c000f765:	5f                   	pop    edi
c000f766:	5d                   	pop    ebp
c000f767:	c3                   	ret    
c000f768:	83 ec 08             	sub    esp,0x8
c000f76b:	0f b6 81 cc 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfcc]
c000f772:	50                   	push   eax
c000f773:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000f777:	0f b6 81 d0 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfd0]
c000f77e:	50                   	push   eax
c000f77f:	e8 08 0c 00 00       	call   c001038c <VgaText::combineColours(unsigned char, unsigned char)>
c000f784:	83 c4 10             	add    esp,0x10
c000f787:	88 07                	mov    BYTE PTR [edi],al
c000f789:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f78d:	eb c9                	jmp    c000f758 <hwTextMode_scrollScreen(VgaText*)+0x6b>
c000f78f:	45                   	inc    ebp
c000f790:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000f798:	eb 8e                	jmp    c000f728 <hwTextMode_scrollScreen(VgaText*)+0x3b>

c000f79a <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000f79a:	57                   	push   edi
c000f79b:	80 3d 80 ca 02 c0 00 	cmp    BYTE PTR ds:0xc002ca80,0x0
c000f7a2:	56                   	push   esi
c000f7a3:	53                   	push   ebx
c000f7a4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f7a8:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000f7ac:	75 65                	jne    c000f813 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x79>
c000f7ae:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000f7b3:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000f7b8:	83 ec 08             	sub    esp,0x8
c000f7bb:	52                   	push   edx
c000f7bc:	50                   	push   eax
c000f7bd:	e8 ca 0b 00 00       	call   c001038c <VgaText::combineColours(unsigned char, unsigned char)>
c000f7c2:	5a                   	pop    edx
c000f7c3:	0f b6 c0             	movzx  eax,al
c000f7c6:	59                   	pop    ecx
c000f7c7:	50                   	push   eax
c000f7c8:	0f be c3             	movsx  eax,bl
c000f7cb:	50                   	push   eax
c000f7cc:	e8 61 0c 00 00       	call   c0010432 <VgaText::combineCharAndColour(char, unsigned char)>
c000f7d1:	83 c4 10             	add    esp,0x10
c000f7d4:	8b 35 20 b9 02 c0    	mov    esi,DWORD PTR ds:0xc002b920
c000f7da:	80 3d 80 ca 02 c0 00 	cmp    BYTE PTR ds:0xc002ca80,0x0
c000f7e1:	74 07                	je     c000f7ea <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000f7e3:	66 0f be c3          	movsx  ax,bl
c000f7e7:	80 cc 02             	or     ah,0x2
c000f7ea:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f7ee:	ba 19 00 00 00       	mov    edx,0x19
c000f7f3:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000f7f9:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000f7fc:	8d 14 92             	lea    edx,[edx+edx*4]
c000f7ff:	c1 e1 04             	shl    ecx,0x4
c000f802:	c1 e2 04             	shl    edx,0x4
c000f805:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000f809:	01 ca                	add    edx,ecx
c000f80b:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000f80f:	5b                   	pop    ebx
c000f810:	5e                   	pop    esi
c000f811:	5f                   	pop    edi
c000f812:	c3                   	ret    
c000f813:	b8 02 00 00 00       	mov    eax,0x2
c000f818:	31 d2                	xor    edx,edx
c000f81a:	eb 9c                	jmp    c000f7b8 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000f81c <setupTextMode()>:
c000f81c:	a1 10 04 00 00       	mov    eax,ds:0x410
c000f821:	83 e0 30             	and    eax,0x30
c000f824:	66 83 f8 30          	cmp    ax,0x30
c000f828:	75 11                	jne    c000f83b <setupTextMode()+0x1f>
c000f82a:	81 2d 20 b9 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002b920,0x8000
c000f834:	c6 05 80 ca 02 c0 01 	mov    BYTE PTR ds:0xc002ca80,0x1
c000f83b:	c7 05 b8 ca 02 c0 a7 f6 00 c0 	mov    DWORD PTR ds:0xc002cab8,0xc000f6a7
c000f845:	c7 05 a4 ca 02 c0 2e f5 00 c0 	mov    DWORD PTR ds:0xc002caa4,0xc000f52e
c000f84f:	c7 05 a0 ca 02 c0 79 f5 00 c0 	mov    DWORD PTR ds:0xc002caa0,0xc000f579
c000f859:	c7 05 ac ca 02 c0 ed f6 00 c0 	mov    DWORD PTR ds:0xc002caac,0xc000f6ed
c000f863:	c7 05 b4 ca 02 c0 f7 f5 00 c0 	mov    DWORD PTR ds:0xc002cab4,0xc000f5f7
c000f86d:	c7 05 a8 ca 02 c0 55 f6 00 c0 	mov    DWORD PTR ds:0xc002caa8,0xc000f655
c000f877:	c7 05 b0 ca 02 c0 56 f6 00 c0 	mov    DWORD PTR ds:0xc002cab0,0xc000f656
c000f881:	c7 05 bc ca 02 c0 9a f7 00 c0 	mov    DWORD PTR ds:0xc002cabc,0xc000f79a
c000f88b:	c3                   	ret    

c000f88c <kernel_main>:
c000f88c:	57                   	push   edi
c000f88d:	bf f9 03 00 00       	mov    edi,0x3f9
c000f892:	56                   	push   esi
c000f893:	31 f6                	xor    esi,esi
c000f895:	53                   	push   ebx
c000f896:	83 ec 10             	sub    esp,0x10
c000f899:	e8 48 09 00 00       	call   c00101e6 <installVgaTextImplementation()>
c000f89e:	e8 79 ff ff ff       	call   c000f81c <setupTextMode()>
c000f8a3:	89 f0                	mov    eax,esi
c000f8a5:	89 fa                	mov    edx,edi
c000f8a7:	ee                   	out    dx,al
c000f8a8:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f8ad:	b0 80                	mov    al,0x80
c000f8af:	89 da                	mov    edx,ebx
c000f8b1:	ee                   	out    dx,al
c000f8b2:	b1 03                	mov    cl,0x3
c000f8b4:	ba f8 03 00 00       	mov    edx,0x3f8
c000f8b9:	88 c8                	mov    al,cl
c000f8bb:	ee                   	out    dx,al
c000f8bc:	89 f0                	mov    eax,esi
c000f8be:	89 fa                	mov    edx,edi
c000f8c0:	ee                   	out    dx,al
c000f8c1:	88 c8                	mov    al,cl
c000f8c3:	89 da                	mov    edx,ebx
c000f8c5:	ee                   	out    dx,al
c000f8c6:	b0 c7                	mov    al,0xc7
c000f8c8:	ba fa 03 00 00       	mov    edx,0x3fa
c000f8cd:	ee                   	out    dx,al
c000f8ce:	b0 0b                	mov    al,0xb
c000f8d0:	ba fc 03 00 00       	mov    edx,0x3fc
c000f8d5:	ee                   	out    dx,al
c000f8d6:	a1 24 05 00 00       	mov    eax,ds:0x524
c000f8db:	83 ec 0c             	sub    esp,0xc
c000f8de:	05 ff 0f 00 00       	add    eax,0xfff
c000f8e3:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f8e8:	50                   	push   eax
c000f8e9:	e8 b3 03 00 00       	call   c000fca1 <Phys::physicalMemorySetup(unsigned int)>
c000f8ee:	e8 a7 1f 00 00       	call   c001189a <Virt::virtualMemorySetup()>
c000f8f3:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000f8f9:	83 c4 10             	add    esp,0x10
c000f8fc:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000f902:	75 0e                	jne    c000f912 <kernel_main+0x86>
c000f904:	89 d8                	mov    eax,ebx
c000f906:	25 48 03 00 00       	and    eax,0x348
c000f90b:	3d 00 03 00 00       	cmp    eax,0x300
c000f910:	74 10                	je     c000f922 <kernel_main+0x96>
c000f912:	83 ec 0c             	sub    esp,0xc
c000f915:	68 dc a2 02 c0       	push   0xc002a2dc
c000f91a:	e8 74 9f 00 00       	call   c0019893 <Krnl::panic(char const*)>
c000f91f:	83 c4 10             	add    esp,0x10
c000f922:	83 ec 0c             	sub    esp,0xc
c000f925:	89 1d 00 ca 02 c0    	mov    DWORD PTR ds:0xc002ca00,ebx
c000f92b:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f92f:	53                   	push   ebx
c000f930:	e8 19 21 00 00       	call   c0011a4e <VAS::VAS()>
c000f935:	89 1d 64 cb 02 c0    	mov    DWORD PTR ds:0xc002cb64,ebx
c000f93b:	e8 e0 06 ff ff       	call   c0000020 <callGlobalConstructors>
c000f940:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000f947:	e8 88 fb ff ff       	call   c000f4d4 <malloc>
c000f94c:	89 04 24             	mov    DWORD PTR [esp],eax
c000f94f:	89 c6                	mov    esi,eax
c000f951:	e8 94 e9 ff ff       	call   c000e2ea <Computer::Computer()>
c000f956:	6a 00                	push   0x0
c000f958:	89 35 e8 c9 02 c0    	mov    DWORD PTR ds:0xc002c9e8,esi
c000f95e:	6a 00                	push   0x0
c000f960:	6a 00                	push   0x0
c000f962:	56                   	push   esi
c000f963:	e8 b6 f1 ff ff       	call   c000eb1e <Computer::open(int, int, void*)>
c000f968:	83 c4 14             	add    esp,0x14
c000f96b:	53                   	push   ebx
c000f96c:	e8 77 23 00 00       	call   c0011ce8 <VAS::~VAS()>
c000f971:	c7 04 24 ec 8b 02 c0 	mov    DWORD PTR [esp],0xc0028bec
c000f978:	e8 16 9f 00 00       	call   c0019893 <Krnl::panic(char const*)>
c000f97d:	83 c4 20             	add    esp,0x20
c000f980:	5b                   	pop    ebx
c000f981:	5e                   	pop    esi
c000f982:	5f                   	pop    edi
c000f983:	c3                   	ret    

c000f984 <Phys::allocateDMA(unsigned long)>:
c000f984:	55                   	push   ebp
c000f985:	31 d2                	xor    edx,edx
c000f987:	57                   	push   edi
c000f988:	31 ed                	xor    ebp,ebp
c000f98a:	56                   	push   esi
c000f98b:	31 c9                	xor    ecx,ecx
c000f98d:	53                   	push   ebx
c000f98e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f992:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000f998:	31 c0                	xor    eax,eax
c000f99a:	c1 ee 0c             	shr    esi,0xc
c000f99d:	eb 17                	jmp    c000f9b6 <Phys::allocateDMA(unsigned long)+0x32>
c000f99f:	85 c9                	test   ecx,ecx
c000f9a1:	75 04                	jne    c000f9a7 <Phys::allocateDMA(unsigned long)+0x23>
c000f9a3:	89 d5                	mov    ebp,edx
c000f9a5:	89 d0                	mov    eax,edx
c000f9a7:	8d 59 01             	lea    ebx,[ecx+0x1]
c000f9aa:	39 de                	cmp    esi,ebx
c000f9ac:	74 20                	je     c000f9ce <Phys::allocateDMA(unsigned long)+0x4a>
c000f9ae:	42                   	inc    edx
c000f9af:	89 d9                	mov    ecx,ebx
c000f9b1:	83 fa 2f             	cmp    edx,0x2f
c000f9b4:	7f 11                	jg     c000f9c7 <Phys::allocateDMA(unsigned long)+0x43>
c000f9b6:	80 ba 40 ca 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd35c0],0x0
c000f9bd:	74 e0                	je     c000f99f <Phys::allocateDMA(unsigned long)+0x1b>
c000f9bf:	31 c9                	xor    ecx,ecx
c000f9c1:	42                   	inc    edx
c000f9c2:	83 fa 2f             	cmp    edx,0x2f
c000f9c5:	7e ef                	jle    c000f9b6 <Phys::allocateDMA(unsigned long)+0x32>
c000f9c7:	5b                   	pop    ebx
c000f9c8:	31 c0                	xor    eax,eax
c000f9ca:	5e                   	pop    esi
c000f9cb:	5f                   	pop    edi
c000f9cc:	5d                   	pop    ebp
c000f9cd:	c3                   	ret    
c000f9ce:	8d 14 30             	lea    edx,[eax+esi*1]
c000f9d1:	89 d7                	mov    edi,edx
c000f9d3:	4f                   	dec    edi
c000f9d4:	79 03                	jns    c000f9d9 <Phys::allocateDMA(unsigned long)+0x55>
c000f9d6:	8d 7a 0e             	lea    edi,[edx+0xe]
c000f9d9:	c1 ff 04             	sar    edi,0x4
c000f9dc:	89 c2                	mov    edx,eax
c000f9de:	c1 fa 04             	sar    edx,0x4
c000f9e1:	39 fa                	cmp    edx,edi
c000f9e3:	75 2f                	jne    c000fa14 <Phys::allocateDMA(unsigned long)+0x90>
c000f9e5:	85 db                	test   ebx,ebx
c000f9e7:	74 1a                	je     c000fa03 <Phys::allocateDMA(unsigned long)+0x7f>
c000f9e9:	be 40 ca 02 c0       	mov    esi,0xc002ca40
c000f9ee:	8d 90 40 ca 02 c0    	lea    edx,[eax-0x3ffd35c0]
c000f9f4:	f7 d6                	not    esi
c000f9f6:	29 c6                	sub    esi,eax
c000f9f8:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000f9fb:	42                   	inc    edx
c000f9fc:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000f9ff:	39 d9                	cmp    ecx,ebx
c000fa01:	7f f5                	jg     c000f9f8 <Phys::allocateDMA(unsigned long)+0x74>
c000fa03:	85 ff                	test   edi,edi
c000fa05:	74 13                	je     c000fa1a <Phys::allocateDMA(unsigned long)+0x96>
c000fa07:	5b                   	pop    ebx
c000fa08:	05 50 20 0c 00       	add    eax,0xc2050
c000fa0d:	5e                   	pop    esi
c000fa0e:	c1 e0 0c             	shl    eax,0xc
c000fa11:	5f                   	pop    edi
c000fa12:	5d                   	pop    ebp
c000fa13:	c3                   	ret    
c000fa14:	89 ea                	mov    edx,ebp
c000fa16:	31 c9                	xor    ecx,ecx
c000fa18:	eb a7                	jmp    c000f9c1 <Phys::allocateDMA(unsigned long)+0x3d>
c000fa1a:	5b                   	pop    ebx
c000fa1b:	c1 e0 0c             	shl    eax,0xc
c000fa1e:	5e                   	pop    esi
c000fa1f:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fa24:	5f                   	pop    edi
c000fa25:	5d                   	pop    ebp
c000fa26:	c3                   	ret    

c000fa27 <Phys::freeDMA(unsigned long, unsigned long)>:
c000fa27:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fa2b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fa2f:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fa35:	c1 e9 0c             	shr    ecx,0xc
c000fa38:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fa3d:	76 25                	jbe    c000fa64 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fa3f:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fa44:	c1 e8 0c             	shr    eax,0xc
c000fa47:	8d 50 10             	lea    edx,[eax+0x10]
c000fa4a:	85 c9                	test   ecx,ecx
c000fa4c:	74 15                	je     c000fa63 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fa4e:	8d 82 40 ca 02 c0    	lea    eax,[edx-0x3ffd35c0]
c000fa54:	8d 94 11 40 ca 02 c0 	lea    edx,[ecx+edx*1-0x3ffd35c0]
c000fa5b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fa5e:	40                   	inc    eax
c000fa5f:	39 d0                	cmp    eax,edx
c000fa61:	75 f8                	jne    c000fa5b <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fa63:	c3                   	ret    
c000fa64:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fa6a:	c1 ea 0c             	shr    edx,0xc
c000fa6d:	eb db                	jmp    c000fa4a <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fa6f <Phys::setPageState(unsigned long, bool)>:
c000fa6f:	56                   	push   esi
c000fa70:	ba 01 00 00 00       	mov    edx,0x1
c000fa75:	53                   	push   ebx
c000fa76:	8b 35 00 b9 02 c0    	mov    esi,DWORD PTR ds:0xc002b900
c000fa7c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fa80:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fa84:	89 c8                	mov    eax,ecx
c000fa86:	83 e1 07             	and    ecx,0x7
c000fa89:	c1 e8 03             	shr    eax,0x3
c000fa8c:	d3 e3                	shl    ebx,cl
c000fa8e:	01 c6                	add    esi,eax
c000fa90:	d3 e2                	shl    edx,cl
c000fa92:	f7 d2                	not    edx
c000fa94:	20 16                	and    BYTE PTR [esi],dl
c000fa96:	03 05 00 b9 02 c0    	add    eax,DWORD PTR ds:0xc002b900
c000fa9c:	08 18                	or     BYTE PTR [eax],bl
c000fa9e:	5b                   	pop    ebx
c000fa9f:	5e                   	pop    esi
c000faa0:	c3                   	ret    

c000faa1 <Phys::getPageState(unsigned long)>:
c000faa1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000faa5:	8b 15 00 b9 02 c0    	mov    edx,DWORD PTR ds:0xc002b900
c000faab:	89 c8                	mov    eax,ecx
c000faad:	83 e1 07             	and    ecx,0x7
c000fab0:	c1 e8 03             	shr    eax,0x3
c000fab3:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fab7:	d3 f8                	sar    eax,cl
c000fab9:	83 e0 01             	and    eax,0x1
c000fabc:	c3                   	ret    

c000fabd <Phys::freePage(unsigned long)>:
c000fabd:	53                   	push   ebx
c000fabe:	83 ec 08             	sub    esp,0x8
c000fac1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fac5:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000facb:	76 57                	jbe    c000fb24 <Phys::freePage(unsigned long)+0x67>
c000facd:	c1 eb 0c             	shr    ebx,0xc
c000fad0:	53                   	push   ebx
c000fad1:	e8 cb ff ff ff       	call   c000faa1 <Phys::getPageState(unsigned long)>
c000fad6:	5a                   	pop    edx
c000fad7:	84 c0                	test   al,al
c000fad9:	74 5b                	je     c000fb36 <Phys::freePage(unsigned long)+0x79>
c000fadb:	a1 2c ca 02 c0       	mov    eax,ds:0xc002ca2c
c000fae0:	48                   	dec    eax
c000fae1:	a3 2c ca 02 c0       	mov    ds:0xc002ca2c,eax
c000fae6:	8d 04 80             	lea    eax,[eax+eax*4]
c000fae9:	8d 04 80             	lea    eax,[eax+eax*4]
c000faec:	c1 e0 02             	shl    eax,0x2
c000faef:	99                   	cdq    
c000faf0:	f7 3d 30 ca 02 c0    	idiv   DWORD PTR ds:0xc002ca30
c000faf6:	39 05 28 ca 02 c0    	cmp    DWORD PTR ds:0xc002ca28,eax
c000fafc:	75 13                	jne    c000fb11 <Phys::freePage(unsigned long)+0x54>
c000fafe:	83 ec 08             	sub    esp,0x8
c000fb01:	6a 00                	push   0x0
c000fb03:	53                   	push   ebx
c000fb04:	e8 66 ff ff ff       	call   c000fa6f <Phys::setPageState(unsigned long, bool)>
c000fb09:	83 c4 10             	add    esp,0x10
c000fb0c:	83 c4 08             	add    esp,0x8
c000fb0f:	5b                   	pop    ebx
c000fb10:	c3                   	ret    
c000fb11:	83 ec 0c             	sub    esp,0xc
c000fb14:	a3 28 ca 02 c0       	mov    ds:0xc002ca28,eax
c000fb19:	50                   	push   eax
c000fb1a:	e8 5b 0a 00 00       	call   c001057a <VgaText::updateRAMUsageDisplay(int)>
c000fb1f:	83 c4 10             	add    esp,0x10
c000fb22:	eb da                	jmp    c000fafe <Phys::freePage(unsigned long)+0x41>
c000fb24:	68 00 10 00 00       	push   0x1000
c000fb29:	53                   	push   ebx
c000fb2a:	e8 f8 fe ff ff       	call   c000fa27 <Phys::freeDMA(unsigned long, unsigned long)>
c000fb2f:	59                   	pop    ecx
c000fb30:	5b                   	pop    ebx
c000fb31:	83 c4 08             	add    esp,0x8
c000fb34:	5b                   	pop    ebx
c000fb35:	c3                   	ret    
c000fb36:	c7 44 24 10 07 8c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0028c07
c000fb3e:	83 c4 08             	add    esp,0x8
c000fb41:	5b                   	pop    ebx
c000fb42:	e9 4c 9d 00 00       	jmp    c0019893 <Krnl::panic(char const*)>

c000fb47 <Phys::allocatePage()>:
c000fb47:	56                   	push   esi
c000fb48:	53                   	push   ebx
c000fb49:	51                   	push   ecx
c000fb4a:	8b 35 20 ca 02 c0    	mov    esi,DWORD PTR ds:0xc002ca20
c000fb50:	89 f3                	mov    ebx,esi
c000fb52:	eb 0a                	jmp    c000fb5e <Phys::allocatePage()+0x17>
c000fb54:	89 1d 20 ca 02 c0    	mov    DWORD PTR ds:0xc002ca20,ebx
c000fb5a:	39 de                	cmp    esi,ebx
c000fb5c:	74 24                	je     c000fb82 <Phys::allocatePage()+0x3b>
c000fb5e:	53                   	push   ebx
c000fb5f:	e8 3d ff ff ff       	call   c000faa1 <Phys::getPageState(unsigned long)>
c000fb64:	5a                   	pop    edx
c000fb65:	84 c0                	test   al,al
c000fb67:	74 5a                	je     c000fbc3 <Phys::allocatePage()+0x7c>
c000fb69:	43                   	inc    ebx
c000fb6a:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fb70:	75 e2                	jne    c000fb54 <Phys::allocatePage()+0xd>
c000fb72:	31 db                	xor    ebx,ebx
c000fb74:	c7 05 20 ca 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ca20,0x0
c000fb7e:	39 de                	cmp    esi,ebx
c000fb80:	75 dc                	jne    c000fb5e <Phys::allocatePage()+0x17>
c000fb82:	83 ec 0c             	sub    esp,0xc
c000fb85:	68 1d 8c 02 c0       	push   0xc0028c1d
c000fb8a:	e8 ea 2b 00 00       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c000fb8f:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000fb96:	e8 e9 fd ff ff       	call   c000f984 <Phys::allocateDMA(unsigned long)>
c000fb9b:	83 c4 10             	add    esp,0x10
c000fb9e:	85 c0                	test   eax,eax
c000fba0:	75 56                	jne    c000fbf8 <Phys::allocatePage()+0xb1>
c000fba2:	83 ec 0c             	sub    esp,0xc
c000fba5:	68 2e 8c 02 c0       	push   0xc0028c2e
c000fbaa:	e8 e4 9c 00 00       	call   c0019893 <Krnl::panic(char const*)>
c000fbaf:	83 c4 10             	add    esp,0x10
c000fbb2:	8b 1d 20 ca 02 c0    	mov    ebx,DWORD PTR ds:0xc002ca20
c000fbb8:	53                   	push   ebx
c000fbb9:	e8 e3 fe ff ff       	call   c000faa1 <Phys::getPageState(unsigned long)>
c000fbbe:	5a                   	pop    edx
c000fbbf:	84 c0                	test   al,al
c000fbc1:	75 a6                	jne    c000fb69 <Phys::allocatePage()+0x22>
c000fbc3:	6a 01                	push   0x1
c000fbc5:	53                   	push   ebx
c000fbc6:	e8 a4 fe ff ff       	call   c000fa6f <Phys::setPageState(unsigned long, bool)>
c000fbcb:	a1 2c ca 02 c0       	mov    eax,ds:0xc002ca2c
c000fbd0:	59                   	pop    ecx
c000fbd1:	40                   	inc    eax
c000fbd2:	5b                   	pop    ebx
c000fbd3:	a3 2c ca 02 c0       	mov    ds:0xc002ca2c,eax
c000fbd8:	8d 04 80             	lea    eax,[eax+eax*4]
c000fbdb:	8d 04 80             	lea    eax,[eax+eax*4]
c000fbde:	c1 e0 02             	shl    eax,0x2
c000fbe1:	99                   	cdq    
c000fbe2:	f7 3d 30 ca 02 c0    	idiv   DWORD PTR ds:0xc002ca30
c000fbe8:	39 05 28 ca 02 c0    	cmp    DWORD PTR ds:0xc002ca28,eax
c000fbee:	75 0c                	jne    c000fbfc <Phys::allocatePage()+0xb5>
c000fbf0:	a1 20 ca 02 c0       	mov    eax,ds:0xc002ca20
c000fbf5:	c1 e0 0c             	shl    eax,0xc
c000fbf8:	5a                   	pop    edx
c000fbf9:	5b                   	pop    ebx
c000fbfa:	5e                   	pop    esi
c000fbfb:	c3                   	ret    
c000fbfc:	83 ec 0c             	sub    esp,0xc
c000fbff:	a3 28 ca 02 c0       	mov    ds:0xc002ca28,eax
c000fc04:	50                   	push   eax
c000fc05:	e8 70 09 00 00       	call   c001057a <VgaText::updateRAMUsageDisplay(int)>
c000fc0a:	83 c4 10             	add    esp,0x10
c000fc0d:	eb e1                	jmp    c000fbf0 <Phys::allocatePage()+0xa9>

c000fc0f <Phys::allocateContiguousPages(int)>:
c000fc0f:	57                   	push   edi
c000fc10:	56                   	push   esi
c000fc11:	53                   	push   ebx
c000fc12:	31 db                	xor    ebx,ebx
c000fc14:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000fc18:	e8 9d d1 00 00       	call   c001cdba <lockScheduler()>
c000fc1d:	85 db                	test   ebx,ebx
c000fc1f:	75 11                	jne    c000fc32 <Phys::allocateContiguousPages(int)+0x23>
c000fc21:	e8 21 ff ff ff       	call   c000fb47 <Phys::allocatePage()>
c000fc26:	83 ff 01             	cmp    edi,0x1
c000fc29:	89 c6                	mov    esi,eax
c000fc2b:	74 21                	je     c000fc4e <Phys::allocateContiguousPages(int)+0x3f>
c000fc2d:	bb 01 00 00 00       	mov    ebx,0x1
c000fc32:	e8 10 ff ff ff       	call   c000fb47 <Phys::allocatePage()>
c000fc37:	89 da                	mov    edx,ebx
c000fc39:	c1 e2 0c             	shl    edx,0xc
c000fc3c:	01 f2                	add    edx,esi
c000fc3e:	39 c2                	cmp    edx,eax
c000fc40:	74 17                	je     c000fc59 <Phys::allocateContiguousPages(int)+0x4a>
c000fc42:	bb 01 00 00 00       	mov    ebx,0x1
c000fc47:	89 c6                	mov    esi,eax
c000fc49:	83 ff 01             	cmp    edi,0x1
c000fc4c:	75 e4                	jne    c000fc32 <Phys::allocateContiguousPages(int)+0x23>
c000fc4e:	e8 69 d1 00 00       	call   c001cdbc <unlockScheduler()>
c000fc53:	89 f0                	mov    eax,esi
c000fc55:	5b                   	pop    ebx
c000fc56:	5e                   	pop    esi
c000fc57:	5f                   	pop    edi
c000fc58:	c3                   	ret    
c000fc59:	43                   	inc    ebx
c000fc5a:	39 fb                	cmp    ebx,edi
c000fc5c:	75 bf                	jne    c000fc1d <Phys::allocateContiguousPages(int)+0xe>
c000fc5e:	e8 59 d1 00 00       	call   c001cdbc <unlockScheduler()>
c000fc63:	89 f0                	mov    eax,esi
c000fc65:	5b                   	pop    ebx
c000fc66:	5e                   	pop    esi
c000fc67:	5f                   	pop    edi
c000fc68:	c3                   	ret    

c000fc69 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000fc69:	56                   	push   esi
c000fc6a:	53                   	push   ebx
c000fc6b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fc6f:	39 1d 24 ca 02 c0    	cmp    DWORD PTR ds:0xc002ca24,ebx
c000fc75:	73 06                	jae    c000fc7d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000fc77:	89 1d 24 ca 02 c0    	mov    DWORD PTR ds:0xc002ca24,ebx
c000fc7d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fc81:	c1 eb 0c             	shr    ebx,0xc
c000fc84:	c1 e8 0c             	shr    eax,0xc
c000fc87:	39 d8                	cmp    eax,ebx
c000fc89:	73 13                	jae    c000fc9e <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000fc8b:	6a 00                	push   0x0
c000fc8d:	8d 70 01             	lea    esi,[eax+0x1]
c000fc90:	50                   	push   eax
c000fc91:	e8 d9 fd ff ff       	call   c000fa6f <Phys::setPageState(unsigned long, bool)>
c000fc96:	5a                   	pop    edx
c000fc97:	89 f0                	mov    eax,esi
c000fc99:	59                   	pop    ecx
c000fc9a:	39 f3                	cmp    ebx,esi
c000fc9c:	75 ed                	jne    c000fc8b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000fc9e:	5b                   	pop    ebx
c000fc9f:	5e                   	pop    esi
c000fca0:	c3                   	ret    

c000fca1 <Phys::physicalMemorySetup(unsigned int)>:
c000fca1:	55                   	push   ebp
c000fca2:	57                   	push   edi
c000fca3:	56                   	push   esi
c000fca4:	53                   	push   ebx
c000fca5:	31 db                	xor    ebx,ebx
c000fca7:	83 ec 40             	sub    esp,0x40
c000fcaa:	6a 30                	push   0x30
c000fcac:	6a 00                	push   0x0
c000fcae:	68 40 ca 02 c0       	push   0xc002ca40
c000fcb3:	e8 d3 09 ff ff       	call   c000068b <memset>
c000fcb8:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000fcbc:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fcc1:	05 00 10 00 00       	add    eax,0x1000
c000fcc6:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000fcca:	83 c4 10             	add    esp,0x10
c000fccd:	83 ec 08             	sub    esp,0x8
c000fcd0:	6a 01                	push   0x1
c000fcd2:	53                   	push   ebx
c000fcd3:	43                   	inc    ebx
c000fcd4:	e8 96 fd ff ff       	call   c000fa6f <Phys::setPageState(unsigned long, bool)>
c000fcd9:	83 c4 10             	add    esp,0x10
c000fcdc:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fce2:	75 e9                	jne    c000fccd <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000fce4:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000fceb:	66 85 c0             	test   ax,ax
c000fcee:	0f 84 8e 01 00 00    	je     c000fe82 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c000fcf4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000fcf8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000fd00:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fd04:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000fd09:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fd0d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000fd15:	eb 15                	jmp    c000fd2c <Phys::physicalMemorySetup(unsigned int)+0x8b>
c000fd17:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000fd1b:	83 c3 18             	add    ebx,0x18
c000fd1e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd22:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000fd26:	0f 84 66 01 00 00    	je     c000fe92 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000fd2c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000fd2f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000fd32:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000fd35:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fd39:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fd3d:	8b 33                	mov    esi,DWORD PTR [ebx]
c000fd3f:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000fd42:	01 f0                	add    eax,esi
c000fd44:	55                   	push   ebp
c000fd45:	11 fa                	adc    edx,edi
c000fd47:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fd4b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000fd4f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fd53:	56                   	push   esi
c000fd54:	68 68 8c 02 c0       	push   0xc0028c68
c000fd59:	e8 1b 2a 00 00       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c000fd5e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fd62:	83 c4 10             	add    esp,0x10
c000fd65:	09 f8                	or     eax,edi
c000fd67:	0f 85 25 01 00 00    	jne    c000fe92 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000fd6d:	4d                   	dec    ebp
c000fd6e:	75 a7                	jne    c000fd17 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fd70:	ba 00 00 08 00       	mov    edx,0x80000
c000fd75:	89 c1                	mov    ecx,eax
c000fd77:	39 f2                	cmp    edx,esi
c000fd79:	19 f9                	sbb    ecx,edi
c000fd7b:	0f 82 a7 00 00 00    	jb     c000fe28 <Phys::physicalMemorySetup(unsigned int)+0x187>
c000fd81:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000fd85:	89 c1                	mov    ecx,eax
c000fd87:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000fd8b:	0f 83 97 00 00 00    	jae    c000fe28 <Phys::physicalMemorySetup(unsigned int)+0x187>
c000fd91:	ba 00 00 0a 00       	mov    edx,0xa0000
c000fd96:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fd9a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fd9e:	39 fa                	cmp    edx,edi
c000fda0:	19 e8                	sbb    eax,ebp
c000fda2:	0f 82 14 01 00 00    	jb     c000febc <Phys::physicalMemorySetup(unsigned int)+0x21b>
c000fda8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fdac:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fdb0:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000fdb6:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fdbb:	83 d5 ff             	adc    ebp,0xffffffff
c000fdbe:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000fdc2:	31 c0                	xor    eax,eax
c000fdc4:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000fdc8:	39 fa                	cmp    edx,edi
c000fdca:	89 c1                	mov    ecx,eax
c000fdcc:	19 e9                	sbb    ecx,ebp
c000fdce:	0f 83 43 ff ff ff    	jae    c000fd17 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fdd4:	be 00 00 08 00       	mov    esi,0x80000
c000fdd9:	50                   	push   eax
c000fdda:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000fdde:	57                   	push   edi
c000fddf:	56                   	push   esi
c000fde0:	68 8c 8c 02 c0       	push   0xc0028c8c
c000fde5:	e8 8f 29 00 00       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c000fdea:	5a                   	pop    edx
c000fdeb:	59                   	pop    ecx
c000fdec:	57                   	push   edi
c000fded:	56                   	push   esi
c000fdee:	e8 76 fe ff ff       	call   c000fc69 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000fdf3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000fdf7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fdfb:	83 c4 0c             	add    esp,0xc
c000fdfe:	0f ac d0 0c          	shrd   eax,edx,0xc
c000fe02:	03 05 30 ca 02 c0    	add    eax,DWORD PTR ds:0xc002ca30
c000fe08:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fe0f:	a3 30 ca 02 c0       	mov    ds:0xc002ca30,eax
c000fe14:	52                   	push   edx
c000fe15:	50                   	push   eax
c000fe16:	68 4a 8c 02 c0       	push   0xc0028c4a
c000fe1b:	e8 59 29 00 00       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c000fe20:	83 c4 10             	add    esp,0x10
c000fe23:	e9 ef fe ff ff       	jmp    c000fd17 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fe28:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000fe2c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fe30:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe34:	39 ea                	cmp    edx,ebp
c000fe36:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000fe3a:	0f 82 d7 fe ff ff    	jb     c000fd17 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fe40:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fe45:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000fe49:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000fe4d:	0f 83 c4 fe ff ff    	jae    c000fd17 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fe53:	39 ee                	cmp    esi,ebp
c000fe55:	89 f8                	mov    eax,edi
c000fe57:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000fe5b:	0f 83 78 ff ff ff    	jae    c000fdd9 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000fe61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fe65:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fe69:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000fe6d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000fe71:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000fe75:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fe79:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fe7d:	e9 57 ff ff ff       	jmp    c000fdd9 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000fe82:	83 ec 0c             	sub    esp,0xc
c000fe85:	68 3c 8c 02 c0       	push   0xc0028c3c
c000fe8a:	e8 04 9a 00 00       	call   c0019893 <Krnl::panic(char const*)>
c000fe8f:	83 c4 10             	add    esp,0x10
c000fe92:	bb 40 01 00 00       	mov    ebx,0x140
c000fe97:	83 ec 08             	sub    esp,0x8
c000fe9a:	6a 00                	push   0x0
c000fe9c:	53                   	push   ebx
c000fe9d:	43                   	inc    ebx
c000fe9e:	e8 cc fb ff ff       	call   c000fa6f <Phys::setPageState(unsigned long, bool)>
c000fea3:	ff 05 30 ca 02 c0    	inc    DWORD PTR ds:0xc002ca30
c000fea9:	83 c4 10             	add    esp,0x10
c000feac:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000feb2:	75 e3                	jne    c000fe97 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c000feb4:	83 c4 3c             	add    esp,0x3c
c000feb7:	5b                   	pop    ebx
c000feb8:	5e                   	pop    esi
c000feb9:	5f                   	pop    edi
c000feba:	5d                   	pop    ebp
c000febb:	c3                   	ret    
c000febc:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000fec4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000fecc:	e9 d7 fe ff ff       	jmp    c000fda8 <Phys::physicalMemorySetup(unsigned int)+0x107>
c000fed1:	90                   	nop

c000fed2 <Pipe::isAtty()>:
c000fed2:	31 c0                	xor    eax,eax
c000fed4:	c3                   	ret    
c000fed5:	90                   	nop

c000fed6 <Pipe::~Pipe()>:
c000fed6:	83 ec 0c             	sub    esp,0xc
c000fed9:	ba f8 8c 02 c0       	mov    edx,0xc0028cf8
c000fede:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fee2:	89 10                	mov    DWORD PTR [eax],edx
c000fee4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fee8:	83 ec 0c             	sub    esp,0xc
c000feeb:	50                   	push   eax
c000feec:	e8 37 16 00 00       	call   c0011528 <UnixFile::~UnixFile()>
c000fef1:	83 c4 10             	add    esp,0x10
c000fef4:	90                   	nop
c000fef5:	83 c4 0c             	add    esp,0xc
c000fef8:	c3                   	ret    
c000fef9:	90                   	nop

c000fefa <Pipe::~Pipe()>:
c000fefa:	83 ec 0c             	sub    esp,0xc
c000fefd:	83 ec 0c             	sub    esp,0xc
c000ff00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff04:	e8 cd ff ff ff       	call   c000fed6 <Pipe::~Pipe()>
c000ff09:	83 c4 10             	add    esp,0x10
c000ff0c:	83 ec 08             	sub    esp,0x8
c000ff0f:	6a 20                	push   0x20
c000ff11:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff15:	e8 7f 27 00 00       	call   c0012699 <operator delete(void*, unsigned long)>
c000ff1a:	83 c4 10             	add    esp,0x10
c000ff1d:	83 c4 0c             	add    esp,0xc
c000ff20:	c3                   	ret    
c000ff21:	90                   	nop

c000ff22 <Pipe::read(unsigned long long, void*, int*)>:
c000ff22:	55                   	push   ebp
c000ff23:	57                   	push   edi
c000ff24:	56                   	push   esi
c000ff25:	53                   	push   ebx
c000ff26:	83 ec 1c             	sub    esp,0x1c
c000ff29:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000ff2d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000ff31:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000ff35:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000ff38:	89 c8                	mov    eax,ecx
c000ff3a:	99                   	cdq    
c000ff3b:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000ff3f:	74 19                	je     c000ff5a <Pipe::read(unsigned long long, void*, int*)+0x38>
c000ff41:	39 f9                	cmp    ecx,edi
c000ff43:	89 d1                	mov    ecx,edx
c000ff45:	19 f1                	sbb    ecx,esi
c000ff47:	73 11                	jae    c000ff5a <Pipe::read(unsigned long long, void*, int*)+0x38>
c000ff49:	e8 6c ce 00 00       	call   c001cdba <lockScheduler()>
c000ff4e:	e8 a3 d1 00 00       	call   c001d0f6 <schedule()>
c000ff53:	e8 64 ce 00 00       	call   c001cdbc <unlockScheduler()>
c000ff58:	eb db                	jmp    c000ff35 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000ff5a:	39 f8                	cmp    eax,edi
c000ff5c:	89 d1                	mov    ecx,edx
c000ff5e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000ff62:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000ff66:	19 f1                	sbb    ecx,esi
c000ff68:	73 08                	jae    c000ff72 <Pipe::read(unsigned long long, void*, int*)+0x50>
c000ff6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ff6e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ff72:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ff75:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000ff78:	29 c6                	sub    esi,eax
c000ff7a:	89 f1                	mov    ecx,esi
c000ff7c:	c1 f9 1f             	sar    ecx,0x1f
c000ff7f:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c000ff83:	89 ca                	mov    edx,ecx
c000ff85:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ff89:	19 d1                	sbb    ecx,edx
c000ff8b:	73 04                	jae    c000ff91 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c000ff8d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000ff91:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000ff95:	89 fd                	mov    ebp,edi
c000ff97:	29 f5                	sub    ebp,esi
c000ff99:	85 f6                	test   esi,esi
c000ff9b:	74 12                	je     c000ffaf <Pipe::read(unsigned long long, void*, int*)+0x8d>
c000ff9d:	52                   	push   edx
c000ff9e:	56                   	push   esi
c000ff9f:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c000ffa2:	50                   	push   eax
c000ffa3:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000ffa7:	e8 a9 06 ff ff       	call   c0000655 <memcpy>
c000ffac:	83 c4 10             	add    esp,0x10
c000ffaf:	85 ed                	test   ebp,ebp
c000ffb1:	74 12                	je     c000ffc5 <Pipe::read(unsigned long long, void*, int*)+0xa3>
c000ffb3:	50                   	push   eax
c000ffb4:	55                   	push   ebp
c000ffb5:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000ffb8:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c000ffbc:	56                   	push   esi
c000ffbd:	e8 93 06 ff ff       	call   c0000655 <memcpy>
c000ffc2:	83 c4 10             	add    esp,0x10
c000ffc5:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c000ffc8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ffcb:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000ffce:	99                   	cdq    
c000ffcf:	89 f7                	mov    edi,esi
c000ffd1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000ffd5:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000ffd9:	c1 ff 1f             	sar    edi,0x1f
c000ffdc:	57                   	push   edi
c000ffdd:	56                   	push   esi
c000ffde:	52                   	push   edx
c000ffdf:	50                   	push   eax
c000ffe0:	e8 47 55 01 00       	call   c002552c <__umoddi3>
c000ffe5:	83 c4 10             	add    esp,0x10
c000ffe8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ffeb:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000fff0:	75 10                	jne    c0010002 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c000fff2:	83 ec 0c             	sub    esp,0xc
c000fff5:	68 b5 8c 02 c0       	push   0xc0028cb5
c000fffa:	e8 94 98 00 00       	call   c0019893 <Krnl::panic(char const*)>
c000ffff:	83 c4 10             	add    esp,0x10
c0010002:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010006:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001000a:	89 10                	mov    DWORD PTR [eax],edx
c001000c:	83 c4 1c             	add    esp,0x1c
c001000f:	31 c0                	xor    eax,eax
c0010011:	5b                   	pop    ebx
c0010012:	5e                   	pop    esi
c0010013:	5f                   	pop    edi
c0010014:	5d                   	pop    ebp
c0010015:	c3                   	ret    

c0010016 <Pipe::write(unsigned long long, void*, int*)>:
c0010016:	55                   	push   ebp
c0010017:	57                   	push   edi
c0010018:	56                   	push   esi
c0010019:	53                   	push   ebx
c001001a:	83 ec 1c             	sub    esp,0x1c
c001001d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010021:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0010025:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010029:	89 04 24             	mov    DWORD PTR [esp],eax
c001002c:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001002f:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c0010032:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010036:	89 de                	mov    esi,ebx
c0010038:	89 df                	mov    edi,ebx
c001003a:	c1 ff 1f             	sar    edi,0x1f
c001003d:	01 c6                	add    esi,eax
c001003f:	89 c8                	mov    eax,ecx
c0010041:	11 d7                	adc    edi,edx
c0010043:	99                   	cdq    
c0010044:	39 f1                	cmp    ecx,esi
c0010046:	89 d0                	mov    eax,edx
c0010048:	19 f8                	sbb    eax,edi
c001004a:	b8 01 00 00 00       	mov    eax,0x1
c001004f:	0f 82 80 00 00 00    	jb     c00100d5 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c0010055:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0010058:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001005b:	01 d8                	add    eax,ebx
c001005d:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0010061:	99                   	cdq    
c0010062:	f7 f9                	idiv   ecx
c0010064:	29 d1                	sub    ecx,edx
c0010066:	89 d7                	mov    edi,edx
c0010068:	89 c8                	mov    eax,ecx
c001006a:	99                   	cdq    
c001006b:	39 ce                	cmp    esi,ecx
c001006d:	19 d3                	sbb    ebx,edx
c001006f:	bb 00 00 00 00       	mov    ebx,0x0
c0010074:	72 04                	jb     c001007a <Pipe::write(unsigned long long, void*, int*)+0x64>
c0010076:	89 f3                	mov    ebx,esi
c0010078:	29 cb                	sub    ebx,ecx
c001007a:	89 f1                	mov    ecx,esi
c001007c:	29 d9                	sub    ecx,ebx
c001007e:	74 1a                	je     c001009a <Pipe::write(unsigned long long, void*, int*)+0x84>
c0010080:	52                   	push   edx
c0010081:	51                   	push   ecx
c0010082:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010086:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001008a:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c001008d:	57                   	push   edi
c001008e:	e8 c2 05 ff ff       	call   c0000655 <memcpy>
c0010093:	83 c4 10             	add    esp,0x10
c0010096:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001009a:	85 db                	test   ebx,ebx
c001009c:	74 12                	je     c00100b0 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c001009e:	50                   	push   eax
c001009f:	53                   	push   ebx
c00100a0:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c00100a4:	51                   	push   ecx
c00100a5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00100a8:	e8 a8 05 ff ff       	call   c0000655 <memcpy>
c00100ad:	83 c4 10             	add    esp,0x10
c00100b0:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c00100b3:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00100b8:	75 10                	jne    c00100ca <Pipe::write(unsigned long long, void*, int*)+0xb4>
c00100ba:	83 ec 0c             	sub    esp,0xc
c00100bd:	68 d1 8c 02 c0       	push   0xc0028cd1
c00100c2:	e8 cc 97 00 00       	call   c0019893 <Krnl::panic(char const*)>
c00100c7:	83 c4 10             	add    esp,0x10
c00100ca:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00100ce:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00100d1:	89 38                	mov    DWORD PTR [eax],edi
c00100d3:	31 c0                	xor    eax,eax
c00100d5:	83 c4 1c             	add    esp,0x1c
c00100d8:	5b                   	pop    ebx
c00100d9:	5e                   	pop    esi
c00100da:	5f                   	pop    edi
c00100db:	5d                   	pop    ebp
c00100dc:	c3                   	ret    
c00100dd:	90                   	nop

c00100de <Pipe::Pipe(int)>:
c00100de:	83 ec 0c             	sub    esp,0xc
c00100e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100e5:	83 ec 08             	sub    esp,0x8
c00100e8:	6a 00                	push   0x0
c00100ea:	50                   	push   eax
c00100eb:	e8 56 12 00 00       	call   c0011346 <UnixFile::UnixFile(int)>
c00100f0:	83 c4 10             	add    esp,0x10
c00100f3:	ba f8 8c 02 c0       	mov    edx,0xc0028cf8
c00100f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100fc:	89 10                	mov    DWORD PTR [eax],edx
c00100fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010102:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010106:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0010109:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001010d:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0010114:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010118:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001011f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010123:	83 ec 0c             	sub    esp,0xc
c0010126:	50                   	push   eax
c0010127:	e8 a8 f3 ff ff       	call   c000f4d4 <malloc>
c001012c:	83 c4 10             	add    esp,0x10
c001012f:	89 c2                	mov    edx,eax
c0010131:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010135:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010138:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001013c:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0010140:	90                   	nop
c0010141:	83 c4 0c             	add    esp,0xc
c0010144:	c3                   	ret    
c0010145:	90                   	nop

c0010146 <VgaText::isAtty()>:
c0010146:	b0 01                	mov    al,0x1
c0010148:	c3                   	ret    
c0010149:	90                   	nop

c001014a <VgaText::~VgaText()>:
c001014a:	83 ec 0c             	sub    esp,0xc
c001014d:	ba b4 8d 02 c0       	mov    edx,0xc0028db4
c0010152:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010156:	89 10                	mov    DWORD PTR [eax],edx
c0010158:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001015c:	83 ec 0c             	sub    esp,0xc
c001015f:	50                   	push   eax
c0010160:	e8 c3 13 00 00       	call   c0011528 <UnixFile::~UnixFile()>
c0010165:	83 c4 10             	add    esp,0x10
c0010168:	90                   	nop
c0010169:	83 c4 0c             	add    esp,0xc
c001016c:	c3                   	ret    
c001016d:	90                   	nop

c001016e <VgaText::~VgaText()>:
c001016e:	83 ec 0c             	sub    esp,0xc
c0010171:	83 ec 0c             	sub    esp,0xc
c0010174:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010178:	e8 cd ff ff ff       	call   c001014a <VgaText::~VgaText()>
c001017d:	83 c4 10             	add    esp,0x10
c0010180:	83 ec 08             	sub    esp,0x8
c0010183:	68 60 12 00 00       	push   0x1260
c0010188:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001018c:	e8 08 25 00 00       	call   c0012699 <operator delete(void*, unsigned long)>
c0010191:	83 c4 10             	add    esp,0x10
c0010194:	83 c4 0c             	add    esp,0xc
c0010197:	c3                   	ret    

c0010198 <VgaText::read(unsigned long long, void*, int*)>:
c0010198:	83 ec 10             	sub    esp,0x10
c001019b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001019f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00101a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00101a7:	e8 01 58 00 00       	call   c00159ad <readKeyboard(VgaText*, char*, unsigned long)>
c00101ac:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00101b0:	89 02                	mov    DWORD PTR [edx],eax
c00101b2:	31 c0                	xor    eax,eax
c00101b4:	83 c4 1c             	add    esp,0x1c
c00101b7:	c3                   	ret    

c00101b8 <setTerminalScrollLock(bool)>:
c00101b8:	c3                   	ret    

c00101b9 <addToTerminalCycle(VgaText*)>:
c00101b9:	8b 15 c0 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002cac0
c00101bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101c3:	85 d2                	test   edx,edx
c00101c5:	75 0c                	jne    c00101d3 <addToTerminalCycle(VgaText*)+0x1a>
c00101c7:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c00101cd:	a3 c0 ca 02 c0       	mov    ds:0xc002cac0,eax
c00101d2:	c3                   	ret    
c00101d3:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c00101d9:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c00101df:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c00101e5:	c3                   	ret    

c00101e6 <installVgaTextImplementation()>:
c00101e6:	83 ec 10             	sub    esp,0x10
c00101e9:	6a 20                	push   0x20
c00101eb:	6a 00                	push   0x0
c00101ed:	68 a0 ca 02 c0       	push   0xc002caa0
c00101f2:	e8 94 04 ff ff       	call   c000068b <memset>
c00101f7:	83 c4 1c             	add    esp,0x1c
c00101fa:	c3                   	ret    

c00101fb <scrollTerminalScrollLock(int)>:
c00101fb:	c3                   	ret    

c00101fc <VgaText::load()>:
c00101fc:	53                   	push   ebx
c00101fd:	31 c0                	xor    eax,eax
c00101ff:	83 ec 58             	sub    esp,0x58
c0010202:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0010206:	89 e2                	mov    edx,esp
c0010208:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c001020c:	40                   	inc    eax
c001020d:	83 f8 50             	cmp    eax,0x50
c0010210:	75 f6                	jne    c0010208 <VgaText::load()+0xc>
c0010212:	31 c0                	xor    eax,eax
c0010214:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c001021b:	84 c9                	test   cl,cl
c001021d:	74 06                	je     c0010225 <VgaText::load()+0x29>
c001021f:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0010222:	40                   	inc    eax
c0010223:	eb ef                	jmp    c0010214 <VgaText::load()+0x18>
c0010225:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c001022b:	85 c0                	test   eax,eax
c001022d:	74 09                	je     c0010238 <VgaText::load()+0x3c>
c001022f:	51                   	push   ecx
c0010230:	51                   	push   ecx
c0010231:	52                   	push   edx
c0010232:	53                   	push   ebx
c0010233:	ff d0                	call   eax
c0010235:	83 c4 10             	add    esp,0x10
c0010238:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c001023e:	85 c0                	test   eax,eax
c0010240:	74 09                	je     c001024b <VgaText::load()+0x4f>
c0010242:	83 ec 0c             	sub    esp,0xc
c0010245:	53                   	push   ebx
c0010246:	ff d0                	call   eax
c0010248:	83 c4 10             	add    esp,0x10
c001024b:	83 c4 58             	add    esp,0x58
c001024e:	5b                   	pop    ebx
c001024f:	c3                   	ret    

c0010250 <VgaText::updateCursor()>:
c0010250:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010254:	39 05 c4 ca 02 c0    	cmp    DWORD PTR ds:0xc002cac4,eax
c001025a:	75 0c                	jne    c0010268 <VgaText::updateCursor()+0x18>
c001025c:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c0010262:	85 c0                	test   eax,eax
c0010264:	74 02                	je     c0010268 <VgaText::updateCursor()+0x18>
c0010266:	ff e0                	jmp    eax
c0010268:	c3                   	ret    
c0010269:	90                   	nop

c001026a <VgaText::showCursor(bool)>:
c001026a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001026e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010272:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c0010278:	c3                   	ret    
c0010279:	90                   	nop

c001027a <VgaText::disableBlink(bool)>:
c001027a:	56                   	push   esi
c001027b:	53                   	push   ebx
c001027c:	51                   	push   ecx
c001027d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010281:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010285:	39 1d c4 ca 02 c0    	cmp    DWORD PTR ds:0xc002cac4,ebx
c001028b:	75 18                	jne    c00102a5 <VgaText::disableBlink(bool)+0x2b>
c001028d:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c0010293:	85 c0                	test   eax,eax
c0010295:	74 0e                	je     c00102a5 <VgaText::disableBlink(bool)+0x2b>
c0010297:	89 f1                	mov    ecx,esi
c0010299:	52                   	push   edx
c001029a:	52                   	push   edx
c001029b:	0f b6 d1             	movzx  edx,cl
c001029e:	52                   	push   edx
c001029f:	53                   	push   ebx
c00102a0:	ff d0                	call   eax
c00102a2:	83 c4 10             	add    esp,0x10
c00102a5:	89 f0                	mov    eax,esi
c00102a7:	83 f0 01             	xor    eax,0x1
c00102aa:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c00102b0:	58                   	pop    eax
c00102b1:	5b                   	pop    ebx
c00102b2:	5e                   	pop    esi
c00102b3:	c3                   	ret    

c00102b4 <VgaText::doANSI_SGR(int)>:
c00102b4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00102b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102bc:	85 d2                	test   edx,edx
c00102be:	75 14                	jne    c00102d4 <VgaText::doANSI_SGR(int)+0x20>
c00102c0:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c00102c6:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00102cc:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c00102d2:	eb 65                	jmp    c0010339 <VgaText::doANSI_SGR(int)+0x85>
c00102d4:	83 fa 07             	cmp    edx,0x7
c00102d7:	75 14                	jne    c00102ed <VgaText::doANSI_SGR(int)+0x39>
c00102d9:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c00102df:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c00102e5:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c00102eb:	eb 4c                	jmp    c0010339 <VgaText::doANSI_SGR(int)+0x85>
c00102ed:	83 fa 1b             	cmp    edx,0x1b
c00102f0:	74 ce                	je     c00102c0 <VgaText::doANSI_SGR(int)+0xc>
c00102f2:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00102f5:	83 f9 07             	cmp    ecx,0x7
c00102f8:	77 09                	ja     c0010303 <VgaText::doANSI_SGR(int)+0x4f>
c00102fa:	8b 14 8d 40 b9 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd46c0]
c0010301:	eb 20                	jmp    c0010323 <VgaText::doANSI_SGR(int)+0x6f>
c0010303:	8d 4a d8             	lea    ecx,[edx-0x28]
c0010306:	83 f9 07             	cmp    ecx,0x7
c0010309:	77 09                	ja     c0010314 <VgaText::doANSI_SGR(int)+0x60>
c001030b:	8b 14 8d 40 b9 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd46c0]
c0010312:	eb 25                	jmp    c0010339 <VgaText::doANSI_SGR(int)+0x85>
c0010314:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0010317:	83 f9 07             	cmp    ecx,0x7
c001031a:	77 0e                	ja     c001032a <VgaText::doANSI_SGR(int)+0x76>
c001031c:	8b 14 95 f8 b7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4808]
c0010323:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010329:	c3                   	ret    
c001032a:	8d 4a 9c             	lea    ecx,[edx-0x64]
c001032d:	83 f9 07             	cmp    ecx,0x7
c0010330:	77 0d                	ja     c001033f <VgaText::doANSI_SGR(int)+0x8b>
c0010332:	8b 14 95 d0 b7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4830]
c0010339:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c001033f:	c3                   	ret    

c0010340 <VgaText::setDefaultBgColour(VgaColour)>:
c0010340:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010344:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010348:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c001034e:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c0010354:	c3                   	ret    
c0010355:	90                   	nop

c0010356 <VgaText::setDefaultFgColour(VgaColour)>:
c0010356:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001035a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001035e:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c0010364:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c001036a:	c3                   	ret    
c001036b:	90                   	nop

c001036c <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c001036c:	53                   	push   ebx
c001036d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010371:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010375:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010379:	51                   	push   ecx
c001037a:	e8 c1 ff ff ff       	call   c0010340 <VgaText::setDefaultBgColour(VgaColour)>
c001037f:	58                   	pop    eax
c0010380:	5a                   	pop    edx
c0010381:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0010385:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010389:	5b                   	pop    ebx
c001038a:	eb ca                	jmp    c0010356 <VgaText::setDefaultFgColour(VgaColour)>

c001038c <VgaText::combineColours(unsigned char, unsigned char)>:
c001038c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0010390:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0010395:	83 e0 0f             	and    eax,0xf
c0010398:	c1 e2 04             	shl    edx,0x4
c001039b:	09 d0                	or     eax,edx
c001039d:	c3                   	ret    

c001039e <VgaText::scrollScreen()>:
c001039e:	57                   	push   edi
c001039f:	56                   	push   esi
c00103a0:	be 01 00 00 00       	mov    esi,0x1
c00103a5:	53                   	push   ebx
c00103a6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00103aa:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c00103b0:	31 ff                	xor    edi,edi
c00103b2:	01 d9                	add    ecx,ebx
c00103b4:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c00103b7:	83 fe 17             	cmp    esi,0x17
c00103ba:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c00103c0:	75 28                	jne    c00103ea <VgaText::scrollScreen()+0x4c>
c00103c2:	f7 c7 01 00 00 00    	test   edi,0x1
c00103c8:	74 1c                	je     c00103e6 <VgaText::scrollScreen()+0x48>
c00103ca:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c00103d1:	50                   	push   eax
c00103d2:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c00103d9:	50                   	push   eax
c00103da:	e8 ad ff ff ff       	call   c001038c <VgaText::combineColours(unsigned char, unsigned char)>
c00103df:	5a                   	pop    edx
c00103e0:	5a                   	pop    edx
c00103e1:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c00103e4:	eb 04                	jmp    c00103ea <VgaText::scrollScreen()+0x4c>
c00103e6:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c00103ea:	47                   	inc    edi
c00103eb:	41                   	inc    ecx
c00103ec:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00103f2:	75 c0                	jne    c00103b4 <VgaText::scrollScreen()+0x16>
c00103f4:	46                   	inc    esi
c00103f5:	83 fe 18             	cmp    esi,0x18
c00103f8:	75 b0                	jne    c00103aa <VgaText::scrollScreen()+0xc>
c00103fa:	39 1d c4 ca 02 c0    	cmp    DWORD PTR ds:0xc002cac4,ebx
c0010400:	75 24                	jne    c0010426 <VgaText::scrollScreen()+0x88>
c0010402:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010409:	74 08                	je     c0010413 <VgaText::scrollScreen()+0x75>
c001040b:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c0010411:	eb 13                	jmp    c0010426 <VgaText::scrollScreen()+0x88>
c0010413:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c0010419:	85 c0                	test   eax,eax
c001041b:	74 09                	je     c0010426 <VgaText::scrollScreen()+0x88>
c001041d:	83 ec 0c             	sub    esp,0xc
c0010420:	53                   	push   ebx
c0010421:	ff d0                	call   eax
c0010423:	83 c4 10             	add    esp,0x10
c0010426:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001042a:	5b                   	pop    ebx
c001042b:	5e                   	pop    esi
c001042c:	5f                   	pop    edi
c001042d:	e9 1e fe ff ff       	jmp    c0010250 <VgaText::updateCursor()>

c0010432 <VgaText::combineCharAndColour(char, unsigned char)>:
c0010432:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0010437:	c1 e0 08             	shl    eax,0x8
c001043a:	89 c2                	mov    edx,eax
c001043c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0010441:	09 d0                	or     eax,edx
c0010443:	c3                   	ret    

c0010444 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0010444:	53                   	push   ebx
c0010445:	83 ec 08             	sub    esp,0x8
c0010448:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001044c:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010451:	50                   	push   eax
c0010452:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010457:	50                   	push   eax
c0010458:	e8 2f ff ff ff       	call   c001038c <VgaText::combineColours(unsigned char, unsigned char)>
c001045d:	5a                   	pop    edx
c001045e:	0f b6 c0             	movzx  eax,al
c0010461:	5b                   	pop    ebx
c0010462:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0010467:	50                   	push   eax
c0010468:	53                   	push   ebx
c0010469:	e8 c4 ff ff ff       	call   c0010432 <VgaText::combineCharAndColour(char, unsigned char)>
c001046e:	5a                   	pop    edx
c001046f:	5a                   	pop    edx
c0010470:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c0010476:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c001047a:	0f b7 d2             	movzx  edx,dx
c001047d:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c0010482:	39 0d c4 ca 02 c0    	cmp    DWORD PTR ds:0xc002cac4,ecx
c0010488:	75 14                	jne    c001049e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c001048a:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c0010490:	85 c0                	test   eax,eax
c0010492:	74 0a                	je     c001049e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c0010494:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010498:	83 c4 08             	add    esp,0x8
c001049b:	5b                   	pop    ebx
c001049c:	ff e0                	jmp    eax
c001049e:	83 c4 08             	add    esp,0x8
c00104a1:	5b                   	pop    ebx
c00104a2:	c3                   	ret    
c00104a3:	90                   	nop

c00104a4 <VgaText::getCursorX()>:
c00104a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104a8:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c00104ae:	c3                   	ret    
c00104af:	90                   	nop

c00104b0 <VgaText::getCursorY()>:
c00104b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104b4:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c00104ba:	c3                   	ret    
c00104bb:	90                   	nop

c00104bc <VgaText::setCursor(int, int)>:
c00104bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104c0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00104c4:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c00104ca:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00104ce:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c00104d4:	e9 77 fd ff ff       	jmp    c0010250 <VgaText::updateCursor()>
c00104d9:	90                   	nop

c00104da <VgaText::setCursorX(int)>:
c00104da:	83 ec 10             	sub    esp,0x10
c00104dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00104e1:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c00104e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00104eb:	50                   	push   eax
c00104ec:	e8 cb ff ff ff       	call   c00104bc <VgaText::setCursor(int, int)>
c00104f1:	83 c4 1c             	add    esp,0x1c
c00104f4:	c3                   	ret    
c00104f5:	90                   	nop

c00104f6 <VgaText::setCursorY(int)>:
c00104f6:	83 ec 10             	sub    esp,0x10
c00104f9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00104fd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010501:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c0010507:	50                   	push   eax
c0010508:	e8 af ff ff ff       	call   c00104bc <VgaText::setCursor(int, int)>
c001050d:	83 c4 1c             	add    esp,0x1c
c0010510:	c3                   	ret    
c0010511:	90                   	nop

c0010512 <VgaText::incrementCursor(bool)>:
c0010512:	56                   	push   esi
c0010513:	53                   	push   ebx
c0010514:	51                   	push   ecx
c0010515:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010519:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001051d:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c0010523:	40                   	inc    eax
c0010524:	83 f8 50             	cmp    eax,0x50
c0010527:	74 08                	je     c0010531 <VgaText::incrementCursor(bool)+0x1f>
c0010529:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c001052f:	eb 33                	jmp    c0010564 <VgaText::incrementCursor(bool)+0x52>
c0010531:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010537:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010541:	8d 50 01             	lea    edx,[eax+0x1]
c0010544:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c001054a:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010550:	75 12                	jne    c0010564 <VgaText::incrementCursor(bool)+0x52>
c0010552:	83 ec 0c             	sub    esp,0xc
c0010555:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c001055b:	53                   	push   ebx
c001055c:	e8 3d fe ff ff       	call   c001039e <VgaText::scrollScreen()>
c0010561:	83 c4 10             	add    esp,0x10
c0010564:	89 f0                	mov    eax,esi
c0010566:	84 c0                	test   al,al
c0010568:	74 0c                	je     c0010576 <VgaText::incrementCursor(bool)+0x64>
c001056a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001056e:	5a                   	pop    edx
c001056f:	5b                   	pop    ebx
c0010570:	5e                   	pop    esi
c0010571:	e9 da fc ff ff       	jmp    c0010250 <VgaText::updateCursor()>
c0010576:	58                   	pop    eax
c0010577:	5b                   	pop    ebx
c0010578:	5e                   	pop    esi
c0010579:	c3                   	ret    

c001057a <VgaText::updateRAMUsageDisplay(int)>:
c001057a:	56                   	push   esi
c001057b:	8b 35 20 b9 02 c0    	mov    esi,DWORD PTR ds:0xc002b920
c0010581:	53                   	push   ebx
c0010582:	bb 0a 00 00 00       	mov    ebx,0xa
c0010587:	6a 0f                	push   0xf
c0010589:	6a 00                	push   0x0
c001058b:	e8 fc fd ff ff       	call   c001038c <VgaText::combineColours(unsigned char, unsigned char)>
c0010590:	5a                   	pop    edx
c0010591:	59                   	pop    ecx
c0010592:	0f b6 c8             	movzx  ecx,al
c0010595:	51                   	push   ecx
c0010596:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001059a:	99                   	cdq    
c001059b:	f7 fb                	idiv   ebx
c001059d:	89 d3                	mov    ebx,edx
c001059f:	83 c0 30             	add    eax,0x30
c00105a2:	83 c3 30             	add    ebx,0x30
c00105a5:	0f be c0             	movsx  eax,al
c00105a8:	0f b6 db             	movzx  ebx,bl
c00105ab:	50                   	push   eax
c00105ac:	e8 81 fe ff ff       	call   c0010432 <VgaText::combineCharAndColour(char, unsigned char)>
c00105b1:	5a                   	pop    edx
c00105b2:	5a                   	pop    edx
c00105b3:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c00105ba:	51                   	push   ecx
c00105bb:	53                   	push   ebx
c00105bc:	e8 71 fe ff ff       	call   c0010432 <VgaText::combineCharAndColour(char, unsigned char)>
c00105c1:	5b                   	pop    ebx
c00105c2:	5a                   	pop    edx
c00105c3:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c00105ca:	51                   	push   ecx
c00105cb:	6a 25                	push   0x25
c00105cd:	e8 60 fe ff ff       	call   c0010432 <VgaText::combineCharAndColour(char, unsigned char)>
c00105d2:	59                   	pop    ecx
c00105d3:	5b                   	pop    ebx
c00105d4:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c00105db:	5b                   	pop    ebx
c00105dc:	5e                   	pop    esi
c00105dd:	c3                   	ret    

c00105de <VgaText::updateDiskUsage()>:
c00105de:	55                   	push   ebp
c00105df:	bd 10 27 00 00       	mov    ebp,0x2710
c00105e4:	57                   	push   edi
c00105e5:	8b 3d 20 b9 02 c0    	mov    edi,DWORD PTR ds:0xc002b920
c00105eb:	56                   	push   esi
c00105ec:	53                   	push   ebx
c00105ed:	6a 0f                	push   0xf
c00105ef:	6a 00                	push   0x0
c00105f1:	e8 96 fd ff ff       	call   c001038c <VgaText::combineColours(unsigned char, unsigned char)>
c00105f6:	5a                   	pop    edx
c00105f7:	0f b6 d8             	movzx  ebx,al
c00105fa:	59                   	pop    ecx
c00105fb:	8b 35 28 ed 02 c0    	mov    esi,DWORD PTR ds:0xc002ed28
c0010601:	53                   	push   ebx
c0010602:	b9 0a 00 00 00       	mov    ecx,0xa
c0010607:	89 f0                	mov    eax,esi
c0010609:	99                   	cdq    
c001060a:	f7 fd                	idiv   ebp
c001060c:	99                   	cdq    
c001060d:	f7 f9                	idiv   ecx
c001060f:	8d 42 30             	lea    eax,[edx+0x30]
c0010612:	0f b6 c0             	movzx  eax,al
c0010615:	50                   	push   eax
c0010616:	e8 17 fe ff ff       	call   c0010432 <VgaText::combineCharAndColour(char, unsigned char)>
c001061b:	5d                   	pop    ebp
c001061c:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010621:	5a                   	pop    edx
c0010622:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c0010626:	53                   	push   ebx
c0010627:	89 f0                	mov    eax,esi
c0010629:	99                   	cdq    
c001062a:	f7 fd                	idiv   ebp
c001062c:	99                   	cdq    
c001062d:	f7 f9                	idiv   ecx
c001062f:	8d 42 30             	lea    eax,[edx+0x30]
c0010632:	0f b6 c0             	movzx  eax,al
c0010635:	50                   	push   eax
c0010636:	e8 f7 fd ff ff       	call   c0010432 <VgaText::combineCharAndColour(char, unsigned char)>
c001063b:	5d                   	pop    ebp
c001063c:	bd 64 00 00 00       	mov    ebp,0x64
c0010641:	5a                   	pop    edx
c0010642:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c0010649:	53                   	push   ebx
c001064a:	89 f0                	mov    eax,esi
c001064c:	99                   	cdq    
c001064d:	f7 fd                	idiv   ebp
c001064f:	99                   	cdq    
c0010650:	f7 f9                	idiv   ecx
c0010652:	8d 42 30             	lea    eax,[edx+0x30]
c0010655:	0f b6 c0             	movzx  eax,al
c0010658:	50                   	push   eax
c0010659:	e8 d4 fd ff ff       	call   c0010432 <VgaText::combineCharAndColour(char, unsigned char)>
c001065e:	5d                   	pop    ebp
c001065f:	5a                   	pop    edx
c0010660:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c0010667:	53                   	push   ebx
c0010668:	89 f0                	mov    eax,esi
c001066a:	99                   	cdq    
c001066b:	f7 f9                	idiv   ecx
c001066d:	89 d6                	mov    esi,edx
c001066f:	99                   	cdq    
c0010670:	f7 f9                	idiv   ecx
c0010672:	8d 42 30             	lea    eax,[edx+0x30]
c0010675:	0f b6 c0             	movzx  eax,al
c0010678:	50                   	push   eax
c0010679:	e8 b4 fd ff ff       	call   c0010432 <VgaText::combineCharAndColour(char, unsigned char)>
c001067e:	5d                   	pop    ebp
c001067f:	5a                   	pop    edx
c0010680:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c0010687:	53                   	push   ebx
c0010688:	8d 46 30             	lea    eax,[esi+0x30]
c001068b:	0f b6 f0             	movzx  esi,al
c001068e:	56                   	push   esi
c001068f:	e8 9e fd ff ff       	call   c0010432 <VgaText::combineCharAndColour(char, unsigned char)>
c0010694:	5e                   	pop    esi
c0010695:	8b 35 24 ed 02 c0    	mov    esi,DWORD PTR ds:0xc002ed24
c001069b:	5d                   	pop    ebp
c001069c:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c00106a3:	bd 10 27 00 00       	mov    ebp,0x2710
c00106a8:	53                   	push   ebx
c00106a9:	89 f0                	mov    eax,esi
c00106ab:	99                   	cdq    
c00106ac:	f7 fd                	idiv   ebp
c00106ae:	99                   	cdq    
c00106af:	f7 f9                	idiv   ecx
c00106b1:	8d 42 30             	lea    eax,[edx+0x30]
c00106b4:	0f b6 c0             	movzx  eax,al
c00106b7:	50                   	push   eax
c00106b8:	e8 75 fd ff ff       	call   c0010432 <VgaText::combineCharAndColour(char, unsigned char)>
c00106bd:	5a                   	pop    edx
c00106be:	5d                   	pop    ebp
c00106bf:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c00106c6:	bd e8 03 00 00       	mov    ebp,0x3e8
c00106cb:	53                   	push   ebx
c00106cc:	89 f0                	mov    eax,esi
c00106ce:	99                   	cdq    
c00106cf:	f7 fd                	idiv   ebp
c00106d1:	99                   	cdq    
c00106d2:	f7 f9                	idiv   ecx
c00106d4:	8d 42 30             	lea    eax,[edx+0x30]
c00106d7:	0f b6 c0             	movzx  eax,al
c00106da:	50                   	push   eax
c00106db:	e8 52 fd ff ff       	call   c0010432 <VgaText::combineCharAndColour(char, unsigned char)>
c00106e0:	5a                   	pop    edx
c00106e1:	5d                   	pop    ebp
c00106e2:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c00106e9:	bd 64 00 00 00       	mov    ebp,0x64
c00106ee:	53                   	push   ebx
c00106ef:	89 f0                	mov    eax,esi
c00106f1:	99                   	cdq    
c00106f2:	f7 fd                	idiv   ebp
c00106f4:	99                   	cdq    
c00106f5:	f7 f9                	idiv   ecx
c00106f7:	83 c2 30             	add    edx,0x30
c00106fa:	0f b6 d2             	movzx  edx,dl
c00106fd:	52                   	push   edx
c00106fe:	e8 2f fd ff ff       	call   c0010432 <VgaText::combineCharAndColour(char, unsigned char)>
c0010703:	5a                   	pop    edx
c0010704:	5d                   	pop    ebp
c0010705:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c001070c:	53                   	push   ebx
c001070d:	89 f0                	mov    eax,esi
c001070f:	99                   	cdq    
c0010710:	f7 f9                	idiv   ecx
c0010712:	89 d6                	mov    esi,edx
c0010714:	99                   	cdq    
c0010715:	f7 f9                	idiv   ecx
c0010717:	8d 42 30             	lea    eax,[edx+0x30]
c001071a:	0f b6 c0             	movzx  eax,al
c001071d:	50                   	push   eax
c001071e:	e8 0f fd ff ff       	call   c0010432 <VgaText::combineCharAndColour(char, unsigned char)>
c0010723:	5a                   	pop    edx
c0010724:	59                   	pop    ecx
c0010725:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c001072c:	53                   	push   ebx
c001072d:	8d 46 30             	lea    eax,[esi+0x30]
c0010730:	0f b6 f0             	movzx  esi,al
c0010733:	56                   	push   esi
c0010734:	e8 f9 fc ff ff       	call   c0010432 <VgaText::combineCharAndColour(char, unsigned char)>
c0010739:	5b                   	pop    ebx
c001073a:	5e                   	pop    esi
c001073b:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010742:	5b                   	pop    ebx
c0010743:	5e                   	pop    esi
c0010744:	5f                   	pop    edi
c0010745:	5d                   	pop    ebp
c0010746:	c3                   	ret    
c0010747:	90                   	nop

c0010748 <VgaText::updateTitle()>:
c0010748:	53                   	push   ebx
c0010749:	31 c0                	xor    eax,eax
c001074b:	83 ec 58             	sub    esp,0x58
c001074e:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010752:	89 e1                	mov    ecx,esp
c0010754:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010758:	40                   	inc    eax
c0010759:	83 f8 50             	cmp    eax,0x50
c001075c:	75 f6                	jne    c0010754 <VgaText::updateTitle()+0xc>
c001075e:	31 c0                	xor    eax,eax
c0010760:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c0010767:	84 db                	test   bl,bl
c0010769:	74 06                	je     c0010771 <VgaText::updateTitle()+0x29>
c001076b:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c001076e:	40                   	inc    eax
c001076f:	eb ef                	jmp    c0010760 <VgaText::updateTitle()+0x18>
c0010771:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c0010777:	85 c0                	test   eax,eax
c0010779:	74 09                	je     c0010784 <VgaText::updateTitle()+0x3c>
c001077b:	53                   	push   ebx
c001077c:	53                   	push   ebx
c001077d:	51                   	push   ecx
c001077e:	52                   	push   edx
c001077f:	ff d0                	call   eax
c0010781:	83 c4 10             	add    esp,0x10
c0010784:	e8 55 fe ff ff       	call   c00105de <VgaText::updateDiskUsage()>
c0010789:	83 c4 58             	add    esp,0x58
c001078c:	5b                   	pop    ebx
c001078d:	c3                   	ret    

c001078e <VgaText::setTitleTextColour(VgaColour)>:
c001078e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010792:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010796:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c001079c:	eb aa                	jmp    c0010748 <VgaText::updateTitle()>

c001079e <VgaText::setTitleColour(VgaColour)>:
c001079e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107a2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00107a6:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c00107ac:	eb 9a                	jmp    c0010748 <VgaText::updateTitle()>

c00107ae <VgaText::setTitle(char*)>:
c00107ae:	53                   	push   ebx
c00107af:	83 ec 10             	sub    esp,0x10
c00107b2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00107b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00107ba:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c00107c0:	50                   	push   eax
c00107c1:	e8 64 ff fe ff       	call   c000072a <strcpy>
c00107c6:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00107ca:	83 c4 18             	add    esp,0x18
c00107cd:	5b                   	pop    ebx
c00107ce:	e9 75 ff ff ff       	jmp    c0010748 <VgaText::updateTitle()>
c00107d3:	90                   	nop

c00107d4 <VgaText::decrementCursor(bool)>:
c00107d4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00107d8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00107dc:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c00107e2:	85 c0                	test   eax,eax
c00107e4:	74 07                	je     c00107ed <VgaText::decrementCursor(bool)+0x19>
c00107e6:	48                   	dec    eax
c00107e7:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c00107ed:	84 c9                	test   cl,cl
c00107ef:	74 09                	je     c00107fa <VgaText::decrementCursor(bool)+0x26>
c00107f1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00107f5:	e9 56 fa ff ff       	jmp    c0010250 <VgaText::updateCursor()>
c00107fa:	c3                   	ret    
c00107fb:	90                   	nop

c00107fc <VgaText::putchar(char, VgaColour, VgaColour)>:
c00107fc:	53                   	push   ebx
c00107fd:	83 ec 08             	sub    esp,0x8
c0010800:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010804:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010808:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001080c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010810:	3c 07                	cmp    al,0x7
c0010812:	75 2a                	jne    c001083e <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010814:	a1 6c cb 02 c0       	mov    eax,ds:0xc002cb6c
c0010819:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010821:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010829:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010831:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010835:	83 c4 08             	add    esp,0x8
c0010838:	5b                   	pop    ebx
c0010839:	e9 3a 2d 00 00       	jmp    c0013578 <Buzzer::beep(int, int, bool)>
c001083e:	3c 0d                	cmp    al,0xd
c0010840:	75 0c                	jne    c001084e <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c0010842:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c001084c:	eb 3b                	jmp    c0010889 <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c001084e:	3c 0a                	cmp    al,0xa
c0010850:	75 40                	jne    c0010892 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c0010852:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010858:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010862:	8d 50 01             	lea    edx,[eax+0x1]
c0010865:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c001086b:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010871:	75 12                	jne    c0010885 <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c0010873:	83 ec 0c             	sub    esp,0xc
c0010876:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c001087c:	53                   	push   ebx
c001087d:	e8 1c fb ff ff       	call   c001039e <VgaText::scrollScreen()>
c0010882:	83 c4 10             	add    esp,0x10
c0010885:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010889:	83 c4 08             	add    esp,0x8
c001088c:	5b                   	pop    ebx
c001088d:	e9 be f9 ff ff       	jmp    c0010250 <VgaText::updateCursor()>
c0010892:	3c 08                	cmp    al,0x8
c0010894:	75 31                	jne    c00108c7 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c0010896:	50                   	push   eax
c0010897:	50                   	push   eax
c0010898:	6a 01                	push   0x1
c001089a:	53                   	push   ebx
c001089b:	e8 34 ff ff ff       	call   c00107d4 <VgaText::decrementCursor(bool)>
c00108a0:	5a                   	pop    edx
c00108a1:	59                   	pop    ecx
c00108a2:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c00108a8:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c00108ae:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c00108b4:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c00108ba:	6a 20                	push   0x20
c00108bc:	53                   	push   ebx
c00108bd:	e8 82 fb ff ff       	call   c0010444 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00108c2:	83 c4 28             	add    esp,0x28
c00108c5:	5b                   	pop    ebx
c00108c6:	c3                   	ret    
c00108c7:	83 ec 08             	sub    esp,0x8
c00108ca:	0f be c0             	movsx  eax,al
c00108cd:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c00108d3:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c00108d9:	51                   	push   ecx
c00108da:	52                   	push   edx
c00108db:	50                   	push   eax
c00108dc:	53                   	push   ebx
c00108dd:	e8 62 fb ff ff       	call   c0010444 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00108e2:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00108e6:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00108ee:	83 c4 28             	add    esp,0x28
c00108f1:	5b                   	pop    ebx
c00108f2:	e9 1b fc ff ff       	jmp    c0010512 <VgaText::incrementCursor(bool)>
c00108f7:	90                   	nop

c00108f8 <VgaText::isShowingCursor()>:
c00108f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108fc:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c0010902:	c3                   	ret    
c0010903:	90                   	nop

c0010904 <VgaText::isBlinkDisabled()>:
c0010904:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010908:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c001090e:	83 f0 01             	xor    eax,0x1
c0010911:	c3                   	ret    

c0010912 <VgaText::setCursorHeight(int)>:
c0010912:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010916:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001091a:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010920:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c0010927:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001092b:	e9 3a f9 ff ff       	jmp    c001026a <VgaText::showCursor(bool)>

c0010930 <VgaText::getCursorHeight()>:
c0010930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010934:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c001093a:	c3                   	ret    

c001093b <setActiveTerminal(VgaText*)>:
c001093b:	53                   	push   ebx
c001093c:	83 ec 08             	sub    esp,0x8
c001093f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010943:	85 db                	test   ebx,ebx
c0010945:	75 11                	jne    c0010958 <setActiveTerminal(VgaText*)+0x1d>
c0010947:	c7 44 24 10 0c 8d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0028d0c
c001094f:	83 c4 08             	add    esp,0x8
c0010952:	5b                   	pop    ebx
c0010953:	e9 3b 8f 00 00       	jmp    c0019893 <Krnl::panic(char const*)>
c0010958:	50                   	push   eax
c0010959:	50                   	push   eax
c001095a:	53                   	push   ebx
c001095b:	68 1a 8d 02 c0       	push   0xc0028d1a
c0010960:	e8 14 1e 00 00       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c0010965:	a1 c4 ca 02 c0       	mov    eax,ds:0xc002cac4
c001096a:	83 c4 10             	add    esp,0x10
c001096d:	85 c0                	test   eax,eax
c001096f:	74 0c                	je     c001097d <setActiveTerminal(VgaText*)+0x42>
c0010971:	83 ec 0c             	sub    esp,0xc
c0010974:	50                   	push   eax
c0010975:	e8 d6 f8 ff ff       	call   c0010250 <VgaText::updateCursor()>
c001097a:	83 c4 10             	add    esp,0x10
c001097d:	89 1d c4 ca 02 c0    	mov    DWORD PTR ds:0xc002cac4,ebx
c0010983:	51                   	push   ecx
c0010984:	51                   	push   ecx
c0010985:	53                   	push   ebx
c0010986:	68 32 8d 02 c0       	push   0xc0028d32
c001098b:	e8 e9 1d 00 00       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c0010990:	83 c4 0c             	add    esp,0xc
c0010993:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010999:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c001099f:	53                   	push   ebx
c00109a0:	e8 17 fb ff ff       	call   c00104bc <VgaText::setCursor(int, int)>
c00109a5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00109a8:	e8 57 ff ff ff       	call   c0010904 <VgaText::isBlinkDisabled()>
c00109ad:	5a                   	pop    edx
c00109ae:	0f b6 c0             	movzx  eax,al
c00109b1:	59                   	pop    ecx
c00109b2:	50                   	push   eax
c00109b3:	53                   	push   ebx
c00109b4:	e8 c1 f8 ff ff       	call   c001027a <VgaText::disableBlink(bool)>
c00109b9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00109bc:	e8 6f ff ff ff       	call   c0010930 <VgaText::getCursorHeight()>
c00109c1:	5a                   	pop    edx
c00109c2:	59                   	pop    ecx
c00109c3:	50                   	push   eax
c00109c4:	53                   	push   ebx
c00109c5:	e8 48 ff ff ff       	call   c0010912 <VgaText::setCursorHeight(int)>
c00109ca:	83 c4 10             	add    esp,0x10
c00109cd:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c00109d4:	75 0a                	jne    c00109e0 <setActiveTerminal(VgaText*)+0xa5>
c00109d6:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c00109e0:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00109e4:	83 c4 08             	add    esp,0x8
c00109e7:	5b                   	pop    ebx
c00109e8:	e9 0f f8 ff ff       	jmp    c00101fc <VgaText::load()>

c00109ed <doTerminalCycle()>:
c00109ed:	83 ec 18             	sub    esp,0x18
c00109f0:	a1 c0 ca 02 c0       	mov    eax,ds:0xc002cac0
c00109f5:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c00109fb:	50                   	push   eax
c00109fc:	a3 c0 ca 02 c0       	mov    ds:0xc002cac0,eax
c0010a01:	e8 35 ff ff ff       	call   c001093b <setActiveTerminal(VgaText*)>
c0010a06:	83 c4 1c             	add    esp,0x1c
c0010a09:	c3                   	ret    

c0010a0a <VgaText::doUpdate()>:
c0010a0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010a0e:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c0010a14:	85 c0                	test   eax,eax
c0010a16:	74 02                	je     c0010a1a <VgaText::doUpdate()+0x10>
c0010a18:	ff e0                	jmp    eax
c0010a1a:	c3                   	ret    
c0010a1b:	90                   	nop

c0010a1c <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010a1c:	55                   	push   ebp
c0010a1d:	57                   	push   edi
c0010a1e:	56                   	push   esi
c0010a1f:	53                   	push   ebx
c0010a20:	83 ec 1c             	sub    esp,0x1c
c0010a23:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010a27:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010a2c:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010a33:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010a36:	50                   	push   eax
c0010a37:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010a3c:	50                   	push   eax
c0010a3d:	e8 4a f9 ff ff       	call   c001038c <VgaText::combineColours(unsigned char, unsigned char)>
c0010a42:	59                   	pop    ecx
c0010a43:	0f b6 c0             	movzx  eax,al
c0010a46:	5b                   	pop    ebx
c0010a47:	31 c9                	xor    ecx,ecx
c0010a49:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010a51:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010a55:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010a5b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010a5f:	0f b7 db             	movzx  ebx,bx
c0010a62:	01 db                	add    ebx,ebx
c0010a64:	01 fb                	add    ebx,edi
c0010a66:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010a69:	84 c0                	test   al,al
c0010a6b:	0f 84 38 01 00 00    	je     c0010ba9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c0010a71:	3c 0d                	cmp    al,0xd
c0010a73:	75 0f                	jne    c0010a84 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010a75:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010a7f:	e9 1f 01 00 00       	jmp    c0010ba3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010a84:	3c 0a                	cmp    al,0xa
c0010a86:	75 5b                	jne    c0010ae3 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c0010a88:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c0010a8e:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010a98:	8d 48 01             	lea    ecx,[eax+0x1]
c0010a9b:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c0010aa1:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c0010aa7:	75 12                	jne    c0010abb <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010aa9:	83 ec 0c             	sub    esp,0xc
c0010aac:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c0010ab2:	55                   	push   ebp
c0010ab3:	e8 e6 f8 ff ff       	call   c001039e <VgaText::scrollScreen()>
c0010ab8:	83 c4 10             	add    esp,0x10
c0010abb:	83 ec 0c             	sub    esp,0xc
c0010abe:	55                   	push   ebp
c0010abf:	e8 8c f7 ff ff       	call   c0010250 <VgaText::updateCursor()>
c0010ac4:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010acc:	83 c4 10             	add    esp,0x10
c0010acf:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010ad5:	31 c9                	xor    ecx,ecx
c0010ad7:	0f b7 db             	movzx  ebx,bx
c0010ada:	01 db                	add    ebx,ebx
c0010adc:	01 fb                	add    ebx,edi
c0010ade:	e9 c0 00 00 00       	jmp    c0010ba3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010ae3:	3c 08                	cmp    al,0x8
c0010ae5:	75 4e                	jne    c0010b35 <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c0010ae7:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010aeb:	53                   	push   ebx
c0010aec:	53                   	push   ebx
c0010aed:	6a 01                	push   0x1
c0010aef:	55                   	push   ebp
c0010af0:	e8 df fc ff ff       	call   c00107d4 <VgaText::decrementCursor(bool)>
c0010af5:	58                   	pop    eax
c0010af6:	5a                   	pop    edx
c0010af7:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010afd:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010b03:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010b09:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010b0f:	6a 20                	push   0x20
c0010b11:	55                   	push   ebp
c0010b12:	e8 2d f9 ff ff       	call   c0010444 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010b17:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010b1f:	83 c4 20             	add    esp,0x20
c0010b22:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010b28:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010b2c:	0f b7 db             	movzx  ebx,bx
c0010b2f:	01 db                	add    ebx,ebx
c0010b31:	01 fb                	add    ebx,edi
c0010b33:	eb 6e                	jmp    c0010ba3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010b35:	51                   	push   ecx
c0010b36:	51                   	push   ecx
c0010b37:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010b3b:	50                   	push   eax
c0010b3c:	e8 f1 f8 ff ff       	call   c0010432 <VgaText::combineCharAndColour(char, unsigned char)>
c0010b41:	83 c4 10             	add    esp,0x10
c0010b44:	66 89 03             	mov    WORD PTR [ebx],ax
c0010b47:	39 2d c4 ca 02 c0    	cmp    DWORD PTR ds:0xc002cac4,ebp
c0010b4d:	75 2a                	jne    c0010b79 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010b4f:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010b55:	85 c0                	test   eax,eax
c0010b57:	74 20                	je     c0010b79 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010b59:	52                   	push   edx
c0010b5a:	52                   	push   edx
c0010b5b:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010b61:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010b67:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010b6b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010b6f:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010b72:	51                   	push   ecx
c0010b73:	55                   	push   ebp
c0010b74:	ff d0                	call   eax
c0010b76:	83 c4 20             	add    esp,0x20
c0010b79:	83 c3 02             	add    ebx,0x2
c0010b7c:	50                   	push   eax
c0010b7d:	50                   	push   eax
c0010b7e:	6a 00                	push   0x0
c0010b80:	55                   	push   ebp
c0010b81:	e8 8c f9 ff ff       	call   c0010512 <VgaText::incrementCursor(bool)>
c0010b86:	83 c4 10             	add    esp,0x10
c0010b89:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c0010b90:	75 0f                	jne    c0010ba1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c0010b92:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010b9a:	0f b7 db             	movzx  ebx,bx
c0010b9d:	01 db                	add    ebx,ebx
c0010b9f:	01 fb                	add    ebx,edi
c0010ba1:	b1 01                	mov    cl,0x1
c0010ba3:	46                   	inc    esi
c0010ba4:	e9 bd fe ff ff       	jmp    c0010a66 <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010ba9:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010bad:	83 ec 0c             	sub    esp,0xc
c0010bb0:	55                   	push   ebp
c0010bb1:	e8 9a f6 ff ff       	call   c0010250 <VgaText::updateCursor()>
c0010bb6:	83 c4 10             	add    esp,0x10
c0010bb9:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010bbd:	84 c9                	test   cl,cl
c0010bbf:	74 0c                	je     c0010bcd <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c0010bc1:	83 ec 0c             	sub    esp,0xc
c0010bc4:	55                   	push   ebp
c0010bc5:	e8 40 fe ff ff       	call   c0010a0a <VgaText::doUpdate()>
c0010bca:	83 c4 10             	add    esp,0x10
c0010bcd:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0010bd4:	83 c4 1c             	add    esp,0x1c
c0010bd7:	5b                   	pop    ebx
c0010bd8:	5e                   	pop    esi
c0010bd9:	5f                   	pop    edi
c0010bda:	5d                   	pop    ebp
c0010bdb:	c3                   	ret    

c0010bdc <VgaText::clearScreen()>:
c0010bdc:	57                   	push   edi
c0010bdd:	56                   	push   esi
c0010bde:	31 f6                	xor    esi,esi
c0010be0:	53                   	push   ebx
c0010be1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010be5:	52                   	push   edx
c0010be6:	6a 00                	push   0x0
c0010be8:	6a 00                	push   0x0
c0010bea:	53                   	push   ebx
c0010beb:	e8 cc f8 ff ff       	call   c00104bc <VgaText::setCursor(int, int)>
c0010bf0:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c0010bf7:	83 c4 10             	add    esp,0x10
c0010bfa:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c0010c00:	7e 26                	jle    c0010c28 <VgaText::clearScreen()+0x4c>
c0010c02:	31 ff                	xor    edi,edi
c0010c04:	50                   	push   eax
c0010c05:	50                   	push   eax
c0010c06:	56                   	push   esi
c0010c07:	57                   	push   edi
c0010c08:	47                   	inc    edi
c0010c09:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010c0f:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010c15:	6a 20                	push   0x20
c0010c17:	53                   	push   ebx
c0010c18:	e8 27 f8 ff ff       	call   c0010444 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010c1d:	83 c4 20             	add    esp,0x20
c0010c20:	83 ff 50             	cmp    edi,0x50
c0010c23:	75 df                	jne    c0010c04 <VgaText::clearScreen()+0x28>
c0010c25:	46                   	inc    esi
c0010c26:	eb d2                	jmp    c0010bfa <VgaText::clearScreen()+0x1e>
c0010c28:	83 ec 0c             	sub    esp,0xc
c0010c2b:	53                   	push   ebx
c0010c2c:	e8 d9 fd ff ff       	call   c0010a0a <VgaText::doUpdate()>
c0010c31:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c0010c38:	83 c4 10             	add    esp,0x10
c0010c3b:	5b                   	pop    ebx
c0010c3c:	5e                   	pop    esi
c0010c3d:	5f                   	pop    edi
c0010c3e:	c3                   	ret    
c0010c3f:	90                   	nop

c0010c40 <VgaText::putchar(char)>:
c0010c40:	56                   	push   esi
c0010c41:	53                   	push   ebx
c0010c42:	83 ec 14             	sub    esp,0x14
c0010c45:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010c49:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010c4d:	3c 5b                	cmp    al,0x5b
c0010c4f:	75 21                	jne    c0010c72 <VgaText::putchar(char)+0x32>
c0010c51:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c0010c58:	74 28                	je     c0010c82 <VgaText::putchar(char)+0x42>
c0010c5a:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c0010c63:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c0010c6d:	e9 e2 00 00 00       	jmp    c0010d54 <VgaText::putchar(char)+0x114>
c0010c72:	3c 1b                	cmp    al,0x1b
c0010c74:	75 0c                	jne    c0010c82 <VgaText::putchar(char)+0x42>
c0010c76:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c0010c7d:	e9 d2 00 00 00       	jmp    c0010d54 <VgaText::putchar(char)+0x114>
c0010c82:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c0010c88:	84 c9                	test   cl,cl
c0010c8a:	0f 84 ab 00 00 00    	je     c0010d3b <VgaText::putchar(char)+0xfb>
c0010c90:	8d 50 c0             	lea    edx,[eax-0x40]
c0010c93:	80 fa 3e             	cmp    dl,0x3e
c0010c96:	0f 87 82 00 00 00    	ja     c0010d1e <VgaText::putchar(char)+0xde>
c0010c9c:	3c 6d                	cmp    al,0x6d
c0010c9e:	75 4d                	jne    c0010ced <VgaText::putchar(char)+0xad>
c0010ca0:	31 f6                	xor    esi,esi
c0010ca2:	31 d2                	xor    edx,edx
c0010ca4:	31 c0                	xor    eax,eax
c0010ca6:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c0010cac:	7e 30                	jle    c0010cde <VgaText::putchar(char)+0x9e>
c0010cae:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c0010cb6:	80 fa 3b             	cmp    dl,0x3b
c0010cb9:	75 17                	jne    c0010cd2 <VgaText::putchar(char)+0x92>
c0010cbb:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010cbf:	50                   	push   eax
c0010cc0:	53                   	push   ebx
c0010cc1:	e8 ee f5 ff ff       	call   c00102b4 <VgaText::doANSI_SGR(int)>
c0010cc6:	59                   	pop    ecx
c0010cc7:	31 d2                	xor    edx,edx
c0010cc9:	58                   	pop    eax
c0010cca:	31 c0                	xor    eax,eax
c0010ccc:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010cd0:	eb 09                	jmp    c0010cdb <VgaText::putchar(char)+0x9b>
c0010cd2:	6b c0 0a             	imul   eax,eax,0xa
c0010cd5:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010cd9:	88 ca                	mov    dl,cl
c0010cdb:	46                   	inc    esi
c0010cdc:	eb c8                	jmp    c0010ca6 <VgaText::putchar(char)+0x66>
c0010cde:	84 d2                	test   dl,dl
c0010ce0:	74 31                	je     c0010d13 <VgaText::putchar(char)+0xd3>
c0010ce2:	50                   	push   eax
c0010ce3:	53                   	push   ebx
c0010ce4:	e8 cb f5 ff ff       	call   c00102b4 <VgaText::doANSI_SGR(int)>
c0010ce9:	58                   	pop    eax
c0010cea:	5a                   	pop    edx
c0010ceb:	eb 26                	jmp    c0010d13 <VgaText::putchar(char)+0xd3>
c0010ced:	3c 4a                	cmp    al,0x4a
c0010cef:	75 22                	jne    c0010d13 <VgaText::putchar(char)+0xd3>
c0010cf1:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c0010cf8:	75 19                	jne    c0010d13 <VgaText::putchar(char)+0xd3>
c0010cfa:	83 ec 0c             	sub    esp,0xc
c0010cfd:	53                   	push   ebx
c0010cfe:	e8 d9 fe ff ff       	call   c0010bdc <VgaText::clearScreen()>
c0010d03:	83 c4 0c             	add    esp,0xc
c0010d06:	6a 00                	push   0x0
c0010d08:	6a 00                	push   0x0
c0010d0a:	53                   	push   ebx
c0010d0b:	e8 ac f7 ff ff       	call   c00104bc <VgaText::setCursor(int, int)>
c0010d10:	83 c4 10             	add    esp,0x10
c0010d13:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c0010d1c:	eb 36                	jmp    c0010d54 <VgaText::putchar(char)+0x114>
c0010d1e:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c0010d24:	83 fa 0e             	cmp    edx,0xe
c0010d27:	7f 2b                	jg     c0010d54 <VgaText::putchar(char)+0x114>
c0010d29:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010d2c:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c0010d32:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c0010d39:	eb 19                	jmp    c0010d54 <VgaText::putchar(char)+0x114>
c0010d3b:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010d41:	0f be c0             	movsx  eax,al
c0010d44:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010d4a:	50                   	push   eax
c0010d4b:	53                   	push   ebx
c0010d4c:	e8 ab fa ff ff       	call   c00107fc <VgaText::putchar(char, VgaColour, VgaColour)>
c0010d51:	83 c4 10             	add    esp,0x10
c0010d54:	83 c4 14             	add    esp,0x14
c0010d57:	5b                   	pop    ebx
c0010d58:	5e                   	pop    esi
c0010d59:	c3                   	ret    

c0010d5a <VgaText::puts(char const*)>:
c0010d5a:	53                   	push   ebx
c0010d5b:	83 ec 08             	sub    esp,0x8
c0010d5e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010d62:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0010d65:	84 c0                	test   al,al
c0010d67:	74 12                	je     c0010d7b <VgaText::puts(char const*)+0x21>
c0010d69:	43                   	inc    ebx
c0010d6a:	51                   	push   ecx
c0010d6b:	51                   	push   ecx
c0010d6c:	50                   	push   eax
c0010d6d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010d71:	e8 ca fe ff ff       	call   c0010c40 <VgaText::putchar(char)>
c0010d76:	83 c4 10             	add    esp,0x10
c0010d79:	eb e7                	jmp    c0010d62 <VgaText::puts(char const*)+0x8>
c0010d7b:	83 c4 08             	add    esp,0x8
c0010d7e:	5b                   	pop    ebx
c0010d7f:	c3                   	ret    

c0010d80 <VgaText::putx(unsigned int)>:
c0010d80:	57                   	push   edi
c0010d81:	b9 11 00 00 00       	mov    ecx,0x11
c0010d86:	56                   	push   esi
c0010d87:	be 4e 8d 02 c0       	mov    esi,0xc0028d4e
c0010d8c:	53                   	push   ebx
c0010d8d:	83 ec 20             	sub    esp,0x20
c0010d90:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010d94:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0010d98:	fc                   	cld    
c0010d99:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010d9b:	be 08 00 00 00       	mov    esi,0x8
c0010da0:	50                   	push   eax
c0010da1:	50                   	push   eax
c0010da2:	89 d8                	mov    eax,ebx
c0010da4:	c1 e3 04             	shl    ebx,0x4
c0010da7:	c1 e8 1c             	shr    eax,0x1c
c0010daa:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0010daf:	50                   	push   eax
c0010db0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010db4:	e8 87 fe ff ff       	call   c0010c40 <VgaText::putchar(char)>
c0010db9:	83 c4 10             	add    esp,0x10
c0010dbc:	4e                   	dec    esi
c0010dbd:	75 e1                	jne    c0010da0 <VgaText::putx(unsigned int)+0x20>
c0010dbf:	83 c4 20             	add    esp,0x20
c0010dc2:	5b                   	pop    ebx
c0010dc3:	5e                   	pop    esi
c0010dc4:	5f                   	pop    edi
c0010dc5:	c3                   	ret    

c0010dc6 <VgaText::VgaText(char const*)>:
c0010dc6:	57                   	push   edi
c0010dc7:	56                   	push   esi
c0010dc8:	53                   	push   ebx
c0010dc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010dcd:	83 ec 08             	sub    esp,0x8
c0010dd0:	6a 00                	push   0x0
c0010dd2:	50                   	push   eax
c0010dd3:	e8 6e 05 00 00       	call   c0011346 <UnixFile::UnixFile(int)>
c0010dd8:	83 c4 10             	add    esp,0x10
c0010ddb:	ba b4 8d 02 c0       	mov    edx,0xc0028db4
c0010de0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010de4:	89 10                	mov    DWORD PTR [eax],edx
c0010de6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010dea:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c0010df4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010df8:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c0010e02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e06:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c0010e0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e11:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c0010e18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e1c:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c0010e26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e2a:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c0010e34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e38:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c0010e3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e43:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c0010e4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e4e:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c0010e54:	bb a0 ca 02 c0       	mov    ebx,0xc002caa0
c0010e59:	b8 08 00 00 00       	mov    eax,0x8
c0010e5e:	fc                   	cld    
c0010e5f:	89 d7                	mov    edi,edx
c0010e61:	89 de                	mov    esi,ebx
c0010e63:	89 c1                	mov    ecx,eax
c0010e65:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010e67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e6b:	05 1e 10 00 00       	add    eax,0x101e
c0010e70:	83 ec 08             	sub    esp,0x8
c0010e73:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e77:	50                   	push   eax
c0010e78:	e8 ad f8 fe ff       	call   c000072a <strcpy>
c0010e7d:	83 c4 10             	add    esp,0x10
c0010e80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e84:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c0010e8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e92:	83 c0 0c             	add    eax,0xc
c0010e95:	83 ec 04             	sub    esp,0x4
c0010e98:	68 00 0f 00 00       	push   0xf00
c0010e9d:	6a 00                	push   0x0
c0010e9f:	50                   	push   eax
c0010ea0:	e8 e6 f7 fe ff       	call   c000068b <memset>
c0010ea5:	83 c4 10             	add    esp,0x10
c0010ea8:	83 ec 04             	sub    esp,0x4
c0010eab:	6a 00                	push   0x0
c0010ead:	6a 07                	push   0x7
c0010eaf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010eb3:	e8 b4 f4 ff ff       	call   c001036c <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0010eb8:	83 c4 10             	add    esp,0x10
c0010ebb:	83 ec 08             	sub    esp,0x8
c0010ebe:	6a 02                	push   0x2
c0010ec0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ec4:	e8 49 fa ff ff       	call   c0010912 <VgaText::setCursorHeight(int)>
c0010ec9:	83 c4 10             	add    esp,0x10
c0010ecc:	83 ec 04             	sub    esp,0x4
c0010ecf:	6a 00                	push   0x0
c0010ed1:	6a 00                	push   0x0
c0010ed3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ed7:	e8 e0 f5 ff ff       	call   c00104bc <VgaText::setCursor(int, int)>
c0010edc:	83 c4 10             	add    esp,0x10
c0010edf:	83 ec 08             	sub    esp,0x8
c0010ee2:	6a 01                	push   0x1
c0010ee4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ee8:	e8 7d f3 ff ff       	call   c001026a <VgaText::showCursor(bool)>
c0010eed:	83 c4 10             	add    esp,0x10
c0010ef0:	83 ec 08             	sub    esp,0x8
c0010ef3:	6a 01                	push   0x1
c0010ef5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ef9:	e8 7c f3 ff ff       	call   c001027a <VgaText::disableBlink(bool)>
c0010efe:	83 c4 10             	add    esp,0x10
c0010f01:	83 ec 0c             	sub    esp,0xc
c0010f04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f08:	e8 cf fc ff ff       	call   c0010bdc <VgaText::clearScreen()>
c0010f0d:	83 c4 10             	add    esp,0x10
c0010f10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f14:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c0010f1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f1f:	05 9e 10 00 00       	add    eax,0x109e
c0010f24:	83 ec 04             	sub    esp,0x4
c0010f27:	68 96 00 00 00       	push   0x96
c0010f2c:	6a 00                	push   0x0
c0010f2e:	50                   	push   eax
c0010f2f:	e8 57 f7 fe ff       	call   c000068b <memset>
c0010f34:	83 c4 10             	add    esp,0x10
c0010f37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f3b:	05 34 11 00 00       	add    eax,0x1134
c0010f40:	83 ec 04             	sub    esp,0x4
c0010f43:	68 2c 01 00 00       	push   0x12c
c0010f48:	6a 00                	push   0x0
c0010f4a:	50                   	push   eax
c0010f4b:	e8 3b f7 fe ff       	call   c000068b <memset>
c0010f50:	83 c4 10             	add    esp,0x10
c0010f53:	90                   	nop
c0010f54:	5b                   	pop    ebx
c0010f55:	5e                   	pop    esi
c0010f56:	5f                   	pop    edi
c0010f57:	c3                   	ret    

c0010f58 <VgaText::receiveKey(unsigned char)>:
c0010f58:	55                   	push   ebp
c0010f59:	57                   	push   edi
c0010f5a:	56                   	push   esi
c0010f5b:	53                   	push   ebx
c0010f5c:	83 ec 1c             	sub    esp,0x1c
c0010f5f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010f63:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010f67:	84 db                	test   bl,bl
c0010f69:	0f 84 c9 00 00 00    	je     c0011038 <VgaText::receiveKey(unsigned char)+0xe0>
c0010f6f:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c0010f75:	80 fb 08             	cmp    bl,0x8
c0010f78:	75 2c                	jne    c0010fa6 <VgaText::receiveKey(unsigned char)+0x4e>
c0010f7a:	83 ec 0c             	sub    esp,0xc
c0010f7d:	57                   	push   edi
c0010f7e:	e8 25 f7 fe ff       	call   c00006a8 <strlen>
c0010f83:	83 c4 10             	add    esp,0x10
c0010f86:	85 c0                	test   eax,eax
c0010f88:	74 41                	je     c0010fcb <VgaText::receiveKey(unsigned char)+0x73>
c0010f8a:	50                   	push   eax
c0010f8b:	50                   	push   eax
c0010f8c:	6a 08                	push   0x8
c0010f8e:	56                   	push   esi
c0010f8f:	e8 ac fc ff ff       	call   c0010c40 <VgaText::putchar(char)>
c0010f94:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010f97:	e8 0c f7 fe ff       	call   c00006a8 <strlen>
c0010f9c:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c0010fa4:	eb 22                	jmp    c0010fc8 <VgaText::receiveKey(unsigned char)+0x70>
c0010fa6:	0f be c3             	movsx  eax,bl
c0010fa9:	52                   	push   edx
c0010faa:	52                   	push   edx
c0010fab:	50                   	push   eax
c0010fac:	56                   	push   esi
c0010fad:	e8 8e fc ff ff       	call   c0010c40 <VgaText::putchar(char)>
c0010fb2:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0010fb6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010fbb:	59                   	pop    ecx
c0010fbc:	5d                   	pop    ebp
c0010fbd:	8d 44 24 16          	lea    eax,[esp+0x16]
c0010fc1:	50                   	push   eax
c0010fc2:	57                   	push   edi
c0010fc3:	e8 19 f8 fe ff       	call   c00007e1 <strcat>
c0010fc8:	83 c4 10             	add    esp,0x10
c0010fcb:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c0010fd2:	75 05                	jne    c0010fd9 <VgaText::receiveKey(unsigned char)+0x81>
c0010fd4:	80 fb 0a             	cmp    bl,0xa
c0010fd7:	75 53                	jne    c001102c <VgaText::receiveKey(unsigned char)+0xd4>
c0010fd9:	83 ec 0c             	sub    esp,0xc
c0010fdc:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c0010fe2:	53                   	push   ebx
c0010fe3:	e8 c0 f6 fe ff       	call   c00006a8 <strlen>
c0010fe8:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010feb:	89 c5                	mov    ebp,eax
c0010fed:	e8 b6 f6 fe ff       	call   c00006a8 <strlen>
c0010ff2:	83 c4 10             	add    esp,0x10
c0010ff5:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0010ff9:	3d 2c 01 00 00       	cmp    eax,0x12c
c0010ffe:	76 10                	jbe    c0011010 <VgaText::receiveKey(unsigned char)+0xb8>
c0011000:	83 ec 0c             	sub    esp,0xc
c0011003:	68 5f 8d 02 c0       	push   0xc0028d5f
c0011008:	e8 86 88 00 00       	call   c0019893 <Krnl::panic(char const*)>
c001100d:	83 c4 10             	add    esp,0x10
c0011010:	50                   	push   eax
c0011011:	50                   	push   eax
c0011012:	57                   	push   edi
c0011013:	53                   	push   ebx
c0011014:	e8 c8 f7 fe ff       	call   c00007e1 <strcat>
c0011019:	83 c4 0c             	add    esp,0xc
c001101c:	68 96 00 00 00       	push   0x96
c0011021:	6a 00                	push   0x0
c0011023:	57                   	push   edi
c0011024:	e8 62 f6 fe ff       	call   c000068b <memset>
c0011029:	83 c4 10             	add    esp,0x10
c001102c:	83 ec 0c             	sub    esp,0xc
c001102f:	56                   	push   esi
c0011030:	e8 d5 f9 ff ff       	call   c0010a0a <VgaText::doUpdate()>
c0011035:	83 c4 10             	add    esp,0x10
c0011038:	83 c4 1c             	add    esp,0x1c
c001103b:	5b                   	pop    ebx
c001103c:	5e                   	pop    esi
c001103d:	5f                   	pop    edi
c001103e:	5d                   	pop    ebp
c001103f:	c3                   	ret    

c0011040 <VgaText::write(unsigned long long, void*, int*)>:
c0011040:	55                   	push   ebp
c0011041:	57                   	push   edi
c0011042:	56                   	push   esi
c0011043:	53                   	push   ebx
c0011044:	83 ec 0c             	sub    esp,0xc
c0011047:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001104b:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001104f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011053:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c001105a:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c001105d:	39 eb                	cmp    ebx,ebp
c001105f:	74 13                	je     c0011074 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0011061:	43                   	inc    ebx
c0011062:	50                   	push   eax
c0011063:	50                   	push   eax
c0011064:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0011068:	50                   	push   eax
c0011069:	56                   	push   esi
c001106a:	e8 d1 fb ff ff       	call   c0010c40 <VgaText::putchar(char)>
c001106f:	83 c4 10             	add    esp,0x10
c0011072:	eb e9                	jmp    c001105d <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0011074:	83 ec 0c             	sub    esp,0xc
c0011077:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c001107e:	56                   	push   esi
c001107f:	e8 86 f9 ff ff       	call   c0010a0a <VgaText::doUpdate()>
c0011084:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011088:	89 38                	mov    DWORD PTR [eax],edi
c001108a:	83 c4 1c             	add    esp,0x1c
c001108d:	31 c0                	xor    eax,eax
c001108f:	5b                   	pop    ebx
c0011090:	5e                   	pop    esi
c0011091:	5f                   	pop    edi
c0011092:	5d                   	pop    ebp
c0011093:	c3                   	ret    

c0011094 <newTerminal(char*)>:
c0011094:	83 ec 28             	sub    esp,0x28
c0011097:	68 60 12 00 00       	push   0x1260
c001109c:	e8 33 e4 ff ff       	call   c000f4d4 <malloc>
c00110a1:	5a                   	pop    edx
c00110a2:	59                   	pop    ecx
c00110a3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00110a7:	50                   	push   eax
c00110a8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00110ac:	e8 15 fd ff ff       	call   c0010dc6 <VgaText::VgaText(char const*)>
c00110b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00110b5:	83 c4 2c             	add    esp,0x2c
c00110b8:	c3                   	ret    
c00110b9:	90                   	nop

c00110ba <TSS::TSS()>:
c00110ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00110be:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00110c5:	90                   	nop
c00110c6:	c3                   	ret    
c00110c7:	90                   	nop

c00110c8 <TSS::setESP(unsigned long)>:
c00110c8:	55                   	push   ebp
c00110c9:	89 e5                	mov    ebp,esp
c00110cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110d1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00110d4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00110d7:	90                   	nop
c00110d8:	5d                   	pop    ebp
c00110d9:	c3                   	ret    

c00110da <TSS::flush()>:
c00110da:	55                   	push   ebp
c00110db:	89 e5                	mov    ebp,esp
c00110dd:	83 ec 10             	sub    esp,0x10
c00110e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00110e5:	83 c8 03             	or     eax,0x3
c00110e8:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00110ec:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00110f0:	66 89 d0             	mov    ax,dx
c00110f3:	0f 00 d8             	ltr    ax
c00110f6:	90                   	nop
c00110f7:	c9                   	leave  
c00110f8:	c3                   	ret    
c00110f9:	90                   	nop

c00110fa <TSS::setup(unsigned long, unsigned long)>:
c00110fa:	55                   	push   ebp
c00110fb:	89 e5                	mov    ebp,esp
c00110fd:	83 ec 18             	sub    esp,0x18
c0011100:	83 ec 0c             	sub    esp,0xc
c0011103:	6a 68                	push   0x68
c0011105:	e8 ca e3 ff ff       	call   c000f4d4 <malloc>
c001110a:	83 c4 10             	add    esp,0x10
c001110d:	89 c2                	mov    edx,eax
c001110f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011112:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011115:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011118:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001111b:	83 ec 04             	sub    esp,0x4
c001111e:	6a 68                	push   0x68
c0011120:	6a 00                	push   0x0
c0011122:	50                   	push   eax
c0011123:	e8 63 f5 fe ff       	call   c000068b <memset>
c0011128:	83 c4 10             	add    esp,0x10
c001112b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001112e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011131:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0011137:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001113a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001113d:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0011143:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011146:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011149:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001114c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001114f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011152:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011155:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c001115b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001115e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011161:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0011167:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001116a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001116d:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0011173:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011176:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011179:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c001117f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011182:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011185:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c001118b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001118e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011191:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0011197:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001119a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001119d:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00111a0:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00111a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00111a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00111a9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00111ac:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00111af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00111b2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00111b5:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c00111bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00111bf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00111c2:	0f 20 da             	mov    edx,cr3
c00111c5:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00111c8:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00111cb:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00111ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00111d1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00111d4:	83 ec 08             	sub    esp,0x8
c00111d7:	50                   	push   eax
c00111d8:	8d 45 ec             	lea    eax,[ebp-0x14]
c00111db:	50                   	push   eax
c00111dc:	e8 d1 da ff ff       	call   c000ecb2 <GDTEntry::setBase(unsigned int)>
c00111e1:	83 c4 10             	add    esp,0x10
c00111e4:	83 ec 08             	sub    esp,0x8
c00111e7:	6a 68                	push   0x68
c00111e9:	8d 45 ec             	lea    eax,[ebp-0x14]
c00111ec:	50                   	push   eax
c00111ed:	e8 dc da ff ff       	call   c000ecce <GDTEntry::setLimit(unsigned int)>
c00111f2:	83 c4 10             	add    esp,0x10
c00111f5:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c00111f9:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00111fc:	83 e0 0f             	and    eax,0xf
c00111ff:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011202:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011205:	83 c8 40             	or     eax,0x40
c0011208:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c001120b:	a1 e8 c9 02 c0       	mov    eax,ds:0xc002c9e8
c0011210:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011216:	05 78 01 00 00       	add    eax,0x178
c001121b:	83 ec 04             	sub    esp,0x4
c001121e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011221:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0011224:	50                   	push   eax
c0011225:	e8 d8 da ff ff       	call   c000ed02 <GDT::addEntry(GDTEntry)>
c001122a:	83 c4 10             	add    esp,0x10
c001122d:	89 c2                	mov    edx,eax
c001122f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011232:	89 10                	mov    DWORD PTR [eax],edx
c0011234:	a1 e8 c9 02 c0       	mov    eax,ds:0xc002c9e8
c0011239:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001123f:	05 78 01 00 00       	add    eax,0x178
c0011244:	83 ec 0c             	sub    esp,0xc
c0011247:	50                   	push   eax
c0011248:	e8 f9 da ff ff       	call   c000ed46 <GDT::flush()>
c001124d:	83 c4 10             	add    esp,0x10
c0011250:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011253:	8b 00                	mov    eax,DWORD PTR [eax]
c0011255:	83 ec 08             	sub    esp,0x8
c0011258:	50                   	push   eax
c0011259:	68 c8 8d 02 c0       	push   0xc0028dc8
c001125e:	e8 16 15 00 00       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c0011263:	83 c4 10             	add    esp,0x10
c0011266:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011269:	8b 00                	mov    eax,DWORD PTR [eax]
c001126b:	c9                   	leave  
c001126c:	c3                   	ret    
c001126d:	90                   	nop

c001126e <ReservedFilename::read(unsigned long long, void*, int*)>:
c001126e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011272:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011276:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011279:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c001127e:	75 08                	jne    c0011288 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0011280:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011286:	eb 38                	jmp    c00112c0 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0011288:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001128d:	75 17                	jne    c00112a6 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c001128f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011294:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011297:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001129d:	8b 10                	mov    edx,DWORD PTR [eax]
c001129f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00112a3:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c00112a6:	89 c1                	mov    ecx,eax
c00112a8:	83 e1 fd             	and    ecx,0xfffffffd
c00112ab:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c00112b1:	74 cd                	je     c0011280 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00112b3:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00112b8:	83 e0 ef             	and    eax,0xffffffef
c00112bb:	83 f8 08             	cmp    eax,0x8
c00112be:	76 c0                	jbe    c0011280 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00112c0:	31 c0                	xor    eax,eax
c00112c2:	c3                   	ret    
c00112c3:	90                   	nop

c00112c4 <ReservedFilename::isAtty()>:
c00112c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00112c8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00112cb:	31 c0                	xor    eax,eax
c00112cd:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c00112d3:	74 09                	je     c00112de <ReservedFilename::isAtty()+0x1a>
c00112d5:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c00112db:	0f 94 c0             	sete   al
c00112de:	c3                   	ret    
c00112df:	90                   	nop

c00112e0 <ReservedFilename::write(unsigned long long, void*, int*)>:
c00112e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00112e4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00112e8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112eb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00112ef:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00112f4:	75 08                	jne    c00112fe <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c00112f6:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00112fc:	eb 3d                	jmp    c001133b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00112fe:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011303:	75 17                	jne    c001131c <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0011305:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001130a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001130d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011313:	8b 10                	mov    edx,DWORD PTR [eax]
c0011315:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011319:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c001131c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011321:	75 04                	jne    c0011327 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0011323:	89 0a                	mov    DWORD PTR [edx],ecx
c0011325:	eb 14                	jmp    c001133b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011327:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c001132c:	74 c8                	je     c00112f6 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c001132e:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011333:	83 e0 ef             	and    eax,0xffffffef
c0011336:	83 f8 08             	cmp    eax,0x8
c0011339:	76 bb                	jbe    c00112f6 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c001133b:	31 c0                	xor    eax,eax
c001133d:	c3                   	ret    

c001133e <UnixFile::getFileDescriptor()>:
c001133e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011342:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011345:	c3                   	ret    

c0011346 <UnixFile::UnixFile(int)>:
c0011346:	53                   	push   ebx
c0011347:	83 ec 28             	sub    esp,0x28
c001134a:	ba b4 8e 02 c0       	mov    edx,0xc0028eb4
c001134f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011353:	89 10                	mov    DWORD PTR [eax],edx
c0011355:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c001135d:	0f 8f 8c 01 00 00    	jg     c00114ef <UnixFile::UnixFile(int)+0x1a9>
c0011363:	a1 80 b9 02 c0       	mov    eax,ds:0xc002b980
c0011368:	8d 50 01             	lea    edx,[eax+0x1]
c001136b:	89 15 80 b9 02 c0    	mov    DWORD PTR ds:0xc002b980,edx
c0011371:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011375:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011378:	83 ec 08             	sub    esp,0x8
c001137b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001137f:	68 58 cb 02 c0       	push   0xc002cb58
c0011384:	e8 17 5e 01 00       	call   c00271a0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011389:	83 c4 10             	add    esp,0x10
c001138c:	a0 54 cb 02 c0       	mov    al,ds:0xc002cb54
c0011391:	83 f0 01             	xor    eax,0x1
c0011394:	84 c0                	test   al,al
c0011396:	0f 84 54 01 00 00    	je     c00114f0 <UnixFile::UnixFile(int)+0x1aa>
c001139c:	c6 05 54 cb 02 c0 01 	mov    BYTE PTR ds:0xc002cb54,0x1
c00113a3:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c00113ab:	83 ec 0c             	sub    esp,0xc
c00113ae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00113b2:	e8 1d e1 ff ff       	call   c000f4d4 <malloc>
c00113b7:	83 c4 10             	add    esp,0x10
c00113ba:	89 c3                	mov    ebx,eax
c00113bc:	83 ec 08             	sub    esp,0x8
c00113bf:	68 03 ff ff 0f       	push   0xfffff03
c00113c4:	53                   	push   ebx
c00113c5:	e8 2c 01 00 00       	call   c00114f6 <ReservedFilename::ReservedFilename(int)>
c00113ca:	83 c4 10             	add    esp,0x10
c00113cd:	89 1d 4c cb 02 c0    	mov    DWORD PTR ds:0xc002cb4c,ebx
c00113d3:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c00113db:	83 ec 0c             	sub    esp,0xc
c00113de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00113e2:	e8 ed e0 ff ff       	call   c000f4d4 <malloc>
c00113e7:	83 c4 10             	add    esp,0x10
c00113ea:	89 c3                	mov    ebx,eax
c00113ec:	83 ec 08             	sub    esp,0x8
c00113ef:	68 01 ff ff 0f       	push   0xfffff01
c00113f4:	53                   	push   ebx
c00113f5:	e8 fc 00 00 00       	call   c00114f6 <ReservedFilename::ReservedFilename(int)>
c00113fa:	83 c4 10             	add    esp,0x10
c00113fd:	89 1d 50 cb 02 c0    	mov    DWORD PTR ds:0xc002cb50,ebx
c0011403:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c001140b:	83 ec 0c             	sub    esp,0xc
c001140e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011412:	e8 bd e0 ff ff       	call   c000f4d4 <malloc>
c0011417:	83 c4 10             	add    esp,0x10
c001141a:	89 c3                	mov    ebx,eax
c001141c:	83 ec 08             	sub    esp,0x8
c001141f:	68 00 ff ff 0f       	push   0xfffff00
c0011424:	53                   	push   ebx
c0011425:	e8 cc 00 00 00       	call   c00114f6 <ReservedFilename::ReservedFilename(int)>
c001142a:	83 c4 10             	add    esp,0x10
c001142d:	89 1d 44 cb 02 c0    	mov    DWORD PTR ds:0xc002cb44,ebx
c0011433:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c001143b:	83 ec 0c             	sub    esp,0xc
c001143e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011442:	e8 8d e0 ff ff       	call   c000f4d4 <malloc>
c0011447:	83 c4 10             	add    esp,0x10
c001144a:	89 c3                	mov    ebx,eax
c001144c:	83 ec 08             	sub    esp,0x8
c001144f:	68 02 ff ff 0f       	push   0xfffff02
c0011454:	53                   	push   ebx
c0011455:	e8 9c 00 00 00       	call   c00114f6 <ReservedFilename::ReservedFilename(int)>
c001145a:	83 c4 10             	add    esp,0x10
c001145d:	89 1d 48 cb 02 c0    	mov    DWORD PTR ds:0xc002cb48,ebx
c0011463:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001146b:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0011470:	7f 7e                	jg     c00114f0 <UnixFile::UnixFile(int)+0x1aa>
c0011472:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c001147a:	83 ec 0c             	sub    esp,0xc
c001147d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011481:	e8 4e e0 ff ff       	call   c000f4d4 <malloc>
c0011486:	83 c4 10             	add    esp,0x10
c0011489:	89 c3                	mov    ebx,eax
c001148b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001148f:	05 10 ff ff 0f       	add    eax,0xfffff10
c0011494:	83 ec 08             	sub    esp,0x8
c0011497:	50                   	push   eax
c0011498:	53                   	push   ebx
c0011499:	e8 58 00 00 00       	call   c00114f6 <ReservedFilename::ReservedFilename(int)>
c001149e:	83 c4 10             	add    esp,0x10
c00114a1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00114a5:	89 1c 85 20 cb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd34e0],ebx
c00114ac:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c00114b4:	83 ec 0c             	sub    esp,0xc
c00114b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00114bb:	e8 14 e0 ff ff       	call   c000f4d4 <malloc>
c00114c0:	83 c4 10             	add    esp,0x10
c00114c3:	89 c3                	mov    ebx,eax
c00114c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00114c9:	05 20 ff ff 0f       	add    eax,0xfffff20
c00114ce:	83 ec 08             	sub    esp,0x8
c00114d1:	50                   	push   eax
c00114d2:	53                   	push   ebx
c00114d3:	e8 1e 00 00 00       	call   c00114f6 <ReservedFilename::ReservedFilename(int)>
c00114d8:	83 c4 10             	add    esp,0x10
c00114db:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00114df:	89 1c 85 e0 ca 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3520],ebx
c00114e6:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00114ea:	e9 7c ff ff ff       	jmp    c001146b <UnixFile::UnixFile(int)+0x125>
c00114ef:	90                   	nop
c00114f0:	83 c4 28             	add    esp,0x28
c00114f3:	5b                   	pop    ebx
c00114f4:	c3                   	ret    
c00114f5:	90                   	nop

c00114f6 <ReservedFilename::ReservedFilename(int)>:
c00114f6:	83 ec 0c             	sub    esp,0xc
c00114f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00114fd:	83 ec 08             	sub    esp,0x8
c0011500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011504:	50                   	push   eax
c0011505:	e8 3c fe ff ff       	call   c0011346 <UnixFile::UnixFile(int)>
c001150a:	83 c4 10             	add    esp,0x10
c001150d:	ba d0 8e 02 c0       	mov    edx,0xc0028ed0
c0011512:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011516:	89 10                	mov    DWORD PTR [eax],edx
c0011518:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001151c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011520:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011523:	90                   	nop
c0011524:	83 c4 0c             	add    esp,0xc
c0011527:	c3                   	ret    

c0011528 <UnixFile::~UnixFile()>:
c0011528:	83 ec 1c             	sub    esp,0x1c
c001152b:	ba b4 8e 02 c0       	mov    edx,0xc0028eb4
c0011530:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011534:	89 10                	mov    DWORD PTR [eax],edx
c0011536:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001153a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001153d:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0011542:	7f 73                	jg     c00115b7 <UnixFile::~UnixFile()+0x8f>
c0011544:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001154c:	83 ec 0c             	sub    esp,0xc
c001154f:	68 58 cb 02 c0       	push   0xc002cb58
c0011554:	e8 1b 5d 01 00       	call   c0027274 <LinkedList<UnixFile>::getFirstElement()>
c0011559:	83 c4 10             	add    esp,0x10
c001155c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011560:	83 ec 0c             	sub    esp,0xc
c0011563:	68 58 cb 02 c0       	push   0xc002cb58
c0011568:	e8 0f 5d 01 00       	call   c002727c <LinkedList<UnixFile>::removeFirst()>
c001156d:	83 c4 10             	add    esp,0x10
c0011570:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011574:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0011578:	74 40                	je     c00115ba <UnixFile::~UnixFile()+0x92>
c001157a:	83 ec 08             	sub    esp,0x8
c001157d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011581:	68 58 cb 02 c0       	push   0xc002cb58
c0011586:	e8 15 5c 01 00       	call   c00271a0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c001158b:	83 c4 10             	add    esp,0x10
c001158e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011592:	8d 50 01             	lea    edx,[eax+0x1]
c0011595:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011599:	3d 88 13 00 00       	cmp    eax,0x1388
c001159e:	0f 94 c0             	sete   al
c00115a1:	84 c0                	test   al,al
c00115a3:	74 a7                	je     c001154c <UnixFile::~UnixFile()+0x24>
c00115a5:	83 ec 0c             	sub    esp,0xc
c00115a8:	68 8c 8e 02 c0       	push   0xc0028e8c
c00115ad:	e8 e1 82 00 00       	call   c0019893 <Krnl::panic(char const*)>
c00115b2:	83 c4 10             	add    esp,0x10
c00115b5:	eb 95                	jmp    c001154c <UnixFile::~UnixFile()+0x24>
c00115b7:	90                   	nop
c00115b8:	eb 01                	jmp    c00115bb <UnixFile::~UnixFile()+0x93>
c00115ba:	90                   	nop
c00115bb:	90                   	nop
c00115bc:	83 c4 1c             	add    esp,0x1c
c00115bf:	c3                   	ret    

c00115c0 <UnixFile::~UnixFile()>:
c00115c0:	83 ec 0c             	sub    esp,0xc
c00115c3:	83 ec 0c             	sub    esp,0xc
c00115c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00115ca:	e8 59 ff ff ff       	call   c0011528 <UnixFile::~UnixFile()>
c00115cf:	83 c4 10             	add    esp,0x10
c00115d2:	83 ec 08             	sub    esp,0x8
c00115d5:	6a 0c                	push   0xc
c00115d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00115db:	e8 b9 10 00 00       	call   c0012699 <operator delete(void*, unsigned long)>
c00115e0:	83 c4 10             	add    esp,0x10
c00115e3:	83 c4 0c             	add    esp,0xc
c00115e6:	c3                   	ret    
c00115e7:	90                   	nop

c00115e8 <ReservedFilename::~ReservedFilename()>:
c00115e8:	83 ec 0c             	sub    esp,0xc
c00115eb:	ba d0 8e 02 c0       	mov    edx,0xc0028ed0
c00115f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115f4:	89 10                	mov    DWORD PTR [eax],edx
c00115f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115fa:	83 ec 0c             	sub    esp,0xc
c00115fd:	50                   	push   eax
c00115fe:	e8 25 ff ff ff       	call   c0011528 <UnixFile::~UnixFile()>
c0011603:	83 c4 10             	add    esp,0x10
c0011606:	90                   	nop
c0011607:	83 c4 0c             	add    esp,0xc
c001160a:	c3                   	ret    
c001160b:	90                   	nop

c001160c <ReservedFilename::~ReservedFilename()>:
c001160c:	83 ec 0c             	sub    esp,0xc
c001160f:	83 ec 0c             	sub    esp,0xc
c0011612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011616:	e8 cd ff ff ff       	call   c00115e8 <ReservedFilename::~ReservedFilename()>
c001161b:	83 c4 10             	add    esp,0x10
c001161e:	83 ec 08             	sub    esp,0x8
c0011621:	6a 0c                	push   0xc
c0011623:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011627:	e8 6d 10 00 00       	call   c0012699 <operator delete(void*, unsigned long)>
c001162c:	83 c4 10             	add    esp,0x10
c001162f:	83 c4 0c             	add    esp,0xc
c0011632:	c3                   	ret    

c0011633 <getFromFileDescriptor(int)>:
c0011633:	53                   	push   ebx
c0011634:	83 ec 08             	sub    esp,0x8
c0011637:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001163b:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011641:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0011647:	7f 2c                	jg     c0011675 <getFromFileDescriptor(int)+0x42>
c0011649:	83 ec 0c             	sub    esp,0xc
c001164c:	68 58 cb 02 c0       	push   0xc002cb58
c0011651:	e8 1e 5c 01 00       	call   c0027274 <LinkedList<UnixFile>::getFirstElement()>
c0011656:	83 c4 10             	add    esp,0x10
c0011659:	85 c0                	test   eax,eax
c001165b:	75 04                	jne    c0011661 <getFromFileDescriptor(int)+0x2e>
c001165d:	31 c0                	xor    eax,eax
c001165f:	eb 6e                	jmp    c00116cf <getFromFileDescriptor(int)+0x9c>
c0011661:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011664:	74 69                	je     c00116cf <getFromFileDescriptor(int)+0x9c>
c0011666:	52                   	push   edx
c0011667:	52                   	push   edx
c0011668:	50                   	push   eax
c0011669:	68 58 cb 02 c0       	push   0xc002cb58
c001166e:	e8 ab 5c 01 00       	call   c002731e <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011673:	eb e1                	jmp    c0011656 <getFromFileDescriptor(int)+0x23>
c0011675:	a1 4c cb 02 c0       	mov    eax,ds:0xc002cb4c
c001167a:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011680:	74 4d                	je     c00116cf <getFromFileDescriptor(int)+0x9c>
c0011682:	a1 50 cb 02 c0       	mov    eax,ds:0xc002cb50
c0011687:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c001168d:	74 40                	je     c00116cf <getFromFileDescriptor(int)+0x9c>
c001168f:	a1 48 cb 02 c0       	mov    eax,ds:0xc002cb48
c0011694:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c001169a:	74 33                	je     c00116cf <getFromFileDescriptor(int)+0x9c>
c001169c:	a1 44 cb 02 c0       	mov    eax,ds:0xc002cb44
c00116a1:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00116a7:	74 26                	je     c00116cf <getFromFileDescriptor(int)+0x9c>
c00116a9:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00116af:	83 f8 08             	cmp    eax,0x8
c00116b2:	77 09                	ja     c00116bd <getFromFileDescriptor(int)+0x8a>
c00116b4:	8b 04 85 20 cb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd34e0]
c00116bb:	eb 12                	jmp    c00116cf <getFromFileDescriptor(int)+0x9c>
c00116bd:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00116c3:	83 fb 08             	cmp    ebx,0x8
c00116c6:	77 95                	ja     c001165d <getFromFileDescriptor(int)+0x2a>
c00116c8:	8b 04 9d e0 ca 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd3520]
c00116cf:	83 c4 08             	add    esp,0x8
c00116d2:	5b                   	pop    ebx
c00116d3:	c3                   	ret    

c00116d4 <__static_initialization_and_destruction_0(int, int)>:
c00116d4:	83 ec 0c             	sub    esp,0xc
c00116d7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00116dc:	75 34                	jne    c0011712 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00116de:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00116e6:	75 2a                	jne    c0011712 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00116e8:	83 ec 0c             	sub    esp,0xc
c00116eb:	68 58 cb 02 c0       	push   0xc002cb58
c00116f0:	e8 53 5a 01 00       	call   c0027148 <LinkedList<UnixFile>::LinkedList()>
c00116f5:	83 c4 10             	add    esp,0x10
c00116f8:	83 ec 04             	sub    esp,0x4
c00116fb:	68 f8 b8 02 c0       	push   0xc002b8f8
c0011700:	68 58 cb 02 c0       	push   0xc002cb58
c0011705:	68 46 71 02 c0       	push   0xc0027146
c001170a:	e8 04 0f 00 00       	call   c0012613 <__cxa_atexit>
c001170f:	83 c4 10             	add    esp,0x10
c0011712:	90                   	nop
c0011713:	83 c4 0c             	add    esp,0xc
c0011716:	c3                   	ret    

c0011717 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011717:	83 ec 0c             	sub    esp,0xc
c001171a:	83 ec 08             	sub    esp,0x8
c001171d:	68 ff ff 00 00       	push   0xffff
c0011722:	6a 01                	push   0x1
c0011724:	e8 ab ff ff ff       	call   c00116d4 <__static_initialization_and_destruction_0(int, int)>
c0011729:	83 c4 10             	add    esp,0x10
c001172c:	83 c4 0c             	add    esp,0xc
c001172f:	c3                   	ret    

c0011730 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011730:	53                   	push   ebx
c0011731:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011735:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011739:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c001173f:	89 c8                	mov    eax,ecx
c0011741:	d1 e8                	shr    eax,1
c0011743:	03 05 88 b9 02 c0    	add    eax,DWORD PTR ds:0xc002b988
c0011749:	83 e1 01             	and    ecx,0x1
c001174c:	8a 10                	mov    dl,BYTE PTR [eax]
c001174e:	75 09                	jne    c0011759 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011750:	83 e2 f0             	and    edx,0xfffffff0
c0011753:	09 da                	or     edx,ebx
c0011755:	88 10                	mov    BYTE PTR [eax],dl
c0011757:	5b                   	pop    ebx
c0011758:	c3                   	ret    
c0011759:	c1 e3 04             	shl    ebx,0x4
c001175c:	83 e2 0f             	and    edx,0xf
c001175f:	09 da                	or     edx,ebx
c0011761:	88 10                	mov    BYTE PTR [eax],dl
c0011763:	5b                   	pop    ebx
c0011764:	c3                   	ret    

c0011765 <Virt::getPageState(unsigned long)>:
c0011765:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011769:	8b 0d 88 b9 02 c0    	mov    ecx,DWORD PTR ds:0xc002b988
c001176f:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011775:	89 d0                	mov    eax,edx
c0011777:	d1 e8                	shr    eax,1
c0011779:	83 e2 01             	and    edx,0x1
c001177c:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c001177f:	75 04                	jne    c0011785 <Virt::getPageState(unsigned long)+0x20>
c0011781:	83 e0 0f             	and    eax,0xf
c0011784:	c3                   	ret    
c0011785:	c0 e8 04             	shr    al,0x4
c0011788:	c3                   	ret    

c0011789 <Virt::allocateKernelVirtualPages(int)>:
c0011789:	55                   	push   ebp
c001178a:	31 ed                	xor    ebp,ebp
c001178c:	57                   	push   edi
c001178d:	56                   	push   esi
c001178e:	53                   	push   ebx
c001178f:	31 db                	xor    ebx,ebx
c0011791:	83 ec 1c             	sub    esp,0x1c
c0011794:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011798:	8b 3d 84 b9 02 c0    	mov    edi,DWORD PTR ds:0xc002b984
c001179e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00117a3:	57                   	push   edi
c00117a4:	e8 bc ff ff ff       	call   c0011765 <Virt::getPageState(unsigned long)>
c00117a9:	5a                   	pop    edx
c00117aa:	84 c0                	test   al,al
c00117ac:	75 3a                	jne    c00117e8 <Virt::allocateKernelVirtualPages(int)+0x5f>
c00117ae:	85 db                	test   ebx,ebx
c00117b0:	75 02                	jne    c00117b4 <Virt::allocateKernelVirtualPages(int)+0x2b>
c00117b2:	89 fd                	mov    ebp,edi
c00117b4:	43                   	inc    ebx
c00117b5:	39 f3                	cmp    ebx,esi
c00117b7:	74 5a                	je     c0011813 <Virt::allocateKernelVirtualPages(int)+0x8a>
c00117b9:	47                   	inc    edi
c00117ba:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00117c0:	76 31                	jbe    c00117f3 <Virt::allocateKernelVirtualPages(int)+0x6a>
c00117c2:	c7 05 84 b9 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002b984,0xc8000
c00117cc:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00117d1:	75 28                	jne    c00117fb <Virt::allocateKernelVirtualPages(int)+0x72>
c00117d3:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00117d8:	bf 00 80 0c 00       	mov    edi,0xc8000
c00117dd:	57                   	push   edi
c00117de:	e8 82 ff ff ff       	call   c0011765 <Virt::getPageState(unsigned long)>
c00117e3:	5a                   	pop    edx
c00117e4:	84 c0                	test   al,al
c00117e6:	74 c6                	je     c00117ae <Virt::allocateKernelVirtualPages(int)+0x25>
c00117e8:	31 db                	xor    ebx,ebx
c00117ea:	47                   	inc    edi
c00117eb:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00117f1:	77 cf                	ja     c00117c2 <Virt::allocateKernelVirtualPages(int)+0x39>
c00117f3:	89 3d 84 b9 02 c0    	mov    DWORD PTR ds:0xc002b984,edi
c00117f9:	eb a8                	jmp    c00117a3 <Virt::allocateKernelVirtualPages(int)+0x1a>
c00117fb:	83 ec 0c             	sub    esp,0xc
c00117fe:	68 e4 8e 02 c0       	push   0xc0028ee4
c0011803:	e8 8b 80 00 00       	call   c0019893 <Krnl::panic(char const*)>
c0011808:	8b 3d 84 b9 02 c0    	mov    edi,DWORD PTR ds:0xc002b984
c001180e:	83 c4 10             	add    esp,0x10
c0011811:	eb 90                	jmp    c00117a3 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011813:	89 2d 84 b9 02 c0    	mov    DWORD PTR ds:0xc002b984,ebp
c0011819:	4b                   	dec    ebx
c001181a:	74 5f                	je     c001187b <Virt::allocateKernelVirtualPages(int)+0xf2>
c001181c:	85 f6                	test   esi,esi
c001181e:	74 3d                	je     c001185d <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011820:	89 e8                	mov    eax,ebp
c0011822:	31 db                	xor    ebx,ebx
c0011824:	8d 7e ff             	lea    edi,[esi-0x1]
c0011827:	eb 14                	jmp    c001183d <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011829:	6a 01                	push   0x1
c001182b:	43                   	inc    ebx
c001182c:	50                   	push   eax
c001182d:	e8 fe fe ff ff       	call   c0011730 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011832:	58                   	pop    eax
c0011833:	39 f3                	cmp    ebx,esi
c0011835:	5a                   	pop    edx
c0011836:	74 25                	je     c001185d <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011838:	a1 84 b9 02 c0       	mov    eax,ds:0xc002b984
c001183d:	8d 50 01             	lea    edx,[eax+0x1]
c0011840:	85 db                	test   ebx,ebx
c0011842:	89 15 84 b9 02 c0    	mov    DWORD PTR ds:0xc002b984,edx
c0011848:	74 20                	je     c001186a <Virt::allocateKernelVirtualPages(int)+0xe1>
c001184a:	39 df                	cmp    edi,ebx
c001184c:	75 db                	jne    c0011829 <Virt::allocateKernelVirtualPages(int)+0xa0>
c001184e:	6a 03                	push   0x3
c0011850:	43                   	inc    ebx
c0011851:	50                   	push   eax
c0011852:	e8 d9 fe ff ff       	call   c0011730 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011857:	59                   	pop    ecx
c0011858:	39 f3                	cmp    ebx,esi
c001185a:	58                   	pop    eax
c001185b:	75 db                	jne    c0011838 <Virt::allocateKernelVirtualPages(int)+0xaf>
c001185d:	83 c4 1c             	add    esp,0x1c
c0011860:	89 e8                	mov    eax,ebp
c0011862:	5b                   	pop    ebx
c0011863:	c1 e0 0c             	shl    eax,0xc
c0011866:	5e                   	pop    esi
c0011867:	5f                   	pop    edi
c0011868:	5d                   	pop    ebp
c0011869:	c3                   	ret    
c001186a:	6a 02                	push   0x2
c001186c:	bb 01 00 00 00       	mov    ebx,0x1
c0011871:	50                   	push   eax
c0011872:	e8 b9 fe ff ff       	call   c0011730 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011877:	58                   	pop    eax
c0011878:	5a                   	pop    edx
c0011879:	eb bd                	jmp    c0011838 <Virt::allocateKernelVirtualPages(int)+0xaf>
c001187b:	6a 04                	push   0x4
c001187d:	8d 45 01             	lea    eax,[ebp+0x1]
c0011880:	55                   	push   ebp
c0011881:	a3 84 b9 02 c0       	mov    ds:0xc002b984,eax
c0011886:	e8 a5 fe ff ff       	call   c0011730 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001188b:	59                   	pop    ecx
c001188c:	89 e8                	mov    eax,ebp
c001188e:	5b                   	pop    ebx
c001188f:	c1 e0 0c             	shl    eax,0xc
c0011892:	83 c4 1c             	add    esp,0x1c
c0011895:	5b                   	pop    ebx
c0011896:	5e                   	pop    esi
c0011897:	5f                   	pop    edi
c0011898:	5d                   	pop    ebp
c0011899:	c3                   	ret    

c001189a <Virt::virtualMemorySetup()>:
c001189a:	53                   	push   ebx
c001189b:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00118a0:	83 ec 08             	sub    esp,0x8
c00118a3:	6a 0f                	push   0xf
c00118a5:	53                   	push   ebx
c00118a6:	43                   	inc    ebx
c00118a7:	e8 84 fe ff ff       	call   c0011730 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00118ac:	59                   	pop    ecx
c00118ad:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00118b3:	58                   	pop    eax
c00118b4:	75 ed                	jne    c00118a3 <Virt::virtualMemorySetup()+0x9>
c00118b6:	83 ec 08             	sub    esp,0x8
c00118b9:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00118be:	68 00 00 00 c8       	push   0xc8000000
c00118c3:	68 6b 90 02 c0       	push   0xc002906b
c00118c8:	e8 ac 0e 00 00       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c00118cd:	58                   	pop    eax
c00118ce:	5a                   	pop    edx
c00118cf:	68 00 f0 ff ef       	push   0xeffff000
c00118d4:	68 7f 90 02 c0       	push   0xc002907f
c00118d9:	e8 9b 0e 00 00       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c00118de:	83 c4 10             	add    esp,0x10
c00118e1:	83 ec 08             	sub    esp,0x8
c00118e4:	6a 00                	push   0x0
c00118e6:	53                   	push   ebx
c00118e7:	43                   	inc    ebx
c00118e8:	e8 43 fe ff ff       	call   c0011730 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00118ed:	83 c4 10             	add    esp,0x10
c00118f0:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00118f6:	75 e9                	jne    c00118e1 <Virt::virtualMemorySetup()+0x47>
c00118f8:	bb 00 00 0d 00       	mov    ebx,0xd0000
c00118fd:	83 ec 08             	sub    esp,0x8
c0011900:	6a 0f                	push   0xf
c0011902:	53                   	push   ebx
c0011903:	43                   	inc    ebx
c0011904:	e8 27 fe ff ff       	call   c0011730 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011909:	83 c4 10             	add    esp,0x10
c001190c:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011912:	75 e9                	jne    c00118fd <Virt::virtualMemorySetup()+0x63>
c0011914:	83 c4 08             	add    esp,0x8
c0011917:	5b                   	pop    ebx
c0011918:	c3                   	ret    

c0011919 <Virt::getAKernelVAS()>:
c0011919:	a1 64 cb 02 c0       	mov    eax,ds:0xc002cb64
c001191e:	c3                   	ret    

c001191f <Virt::setupPageSwapping(int)>:
c001191f:	57                   	push   edi
c0011920:	56                   	push   esi
c0011921:	53                   	push   ebx
c0011922:	83 ec 1c             	sub    esp,0x1c
c0011925:	68 14 01 00 00       	push   0x114
c001192a:	e8 a5 db ff ff       	call   c000f4d4 <malloc>
c001192f:	83 c4 0c             	add    esp,0xc
c0011932:	89 c6                	mov    esi,eax
c0011934:	ff 35 34 df 02 c0    	push   DWORD PTR ds:0xc002df34
c001193a:	68 93 90 02 c0       	push   0xc0029093
c001193f:	50                   	push   eax
c0011940:	e8 63 13 00 00       	call   c0012ca8 <File::File(char const*, Process*)>
c0011945:	89 34 24             	mov    DWORD PTR [esp],esi
c0011948:	e8 37 15 00 00       	call   c0012e84 <File::unlink()>
c001194d:	58                   	pop    eax
c001194e:	5a                   	pop    edx
c001194f:	6a 12                	push   0x12
c0011951:	56                   	push   esi
c0011952:	e8 b5 13 00 00       	call   c0012d0c <File::open(FileOpenMode)>
c0011957:	83 c4 10             	add    esp,0x10
c001195a:	85 c0                	test   eax,eax
c001195c:	0f 85 ca 00 00 00    	jne    c0011a2c <Virt::setupPageSwapping(int)+0x10d>
c0011962:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011966:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001196e:	c1 e3 08             	shl    ebx,0x8
c0011971:	83 ec 0c             	sub    esp,0xc
c0011974:	68 00 00 01 00       	push   0x10000
c0011979:	e8 56 db ff ff       	call   c000f4d4 <malloc>
c001197e:	83 c4 0c             	add    esp,0xc
c0011981:	89 c7                	mov    edi,eax
c0011983:	68 00 00 01 00       	push   0x10000
c0011988:	6a 00                	push   0x0
c001198a:	50                   	push   eax
c001198b:	e8 fb ec fe ff       	call   c000068b <memset>
c0011990:	83 c4 10             	add    esp,0x10
c0011993:	85 db                	test   ebx,ebx
c0011995:	79 03                	jns    c001199a <Virt::setupPageSwapping(int)+0x7b>
c0011997:	83 c3 0f             	add    ebx,0xf
c001199a:	c1 fb 04             	sar    ebx,0x4
c001199d:	4b                   	dec    ebx
c001199e:	83 fb ff             	cmp    ebx,0xffffffff
c00119a1:	74 4b                	je     c00119ee <Virt::setupPageSwapping(int)+0xcf>
c00119a3:	83 ec 0c             	sub    esp,0xc
c00119a6:	8b 06                	mov    eax,DWORD PTR [esi]
c00119a8:	8d 54 24 18          	lea    edx,[esp+0x18]
c00119ac:	52                   	push   edx
c00119ad:	57                   	push   edi
c00119ae:	6a 00                	push   0x0
c00119b0:	68 00 00 01 00       	push   0x10000
c00119b5:	56                   	push   esi
c00119b6:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00119b9:	83 c4 20             	add    esp,0x20
c00119bc:	85 c0                	test   eax,eax
c00119be:	75 59                	jne    c0011a19 <Virt::setupPageSwapping(int)+0xfa>
c00119c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00119c4:	3d 00 00 01 00       	cmp    eax,0x10000
c00119c9:	74 d2                	je     c001199d <Virt::setupPageSwapping(int)+0x7e>
c00119cb:	83 ec 08             	sub    esp,0x8
c00119ce:	4b                   	dec    ebx
c00119cf:	50                   	push   eax
c00119d0:	68 e6 90 02 c0       	push   0xc00290e6
c00119d5:	e8 9f 0d 00 00       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c00119da:	c7 04 24 ef 90 02 c0 	mov    DWORD PTR [esp],0xc00290ef
c00119e1:	e8 ad 7e 00 00       	call   c0019893 <Krnl::panic(char const*)>
c00119e6:	83 c4 10             	add    esp,0x10
c00119e9:	83 fb ff             	cmp    ebx,0xffffffff
c00119ec:	75 b5                	jne    c00119a3 <Virt::setupPageSwapping(int)+0x84>
c00119ee:	83 ec 0c             	sub    esp,0xc
c00119f1:	56                   	push   esi
c00119f2:	e8 73 13 00 00       	call   c0012d6a <File::close()>
c00119f7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00119fa:	e8 f5 da ff ff       	call   c000f4f4 <rfree>
c00119ff:	83 c4 10             	add    esp,0x10
c0011a02:	85 f6                	test   esi,esi
c0011a04:	74 0c                	je     c0011a12 <Virt::setupPageSwapping(int)+0xf3>
c0011a06:	83 ec 0c             	sub    esp,0xc
c0011a09:	8b 06                	mov    eax,DWORD PTR [esi]
c0011a0b:	56                   	push   esi
c0011a0c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011a0f:	83 c4 10             	add    esp,0x10
c0011a12:	83 c4 10             	add    esp,0x10
c0011a15:	5b                   	pop    ebx
c0011a16:	5e                   	pop    esi
c0011a17:	5f                   	pop    edi
c0011a18:	c3                   	ret    
c0011a19:	83 ec 08             	sub    esp,0x8
c0011a1c:	50                   	push   eax
c0011a1d:	68 ce 90 02 c0       	push   0xc00290ce
c0011a22:	e8 52 0d 00 00       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c0011a27:	83 c4 10             	add    esp,0x10
c0011a2a:	eb 94                	jmp    c00119c0 <Virt::setupPageSwapping(int)+0xa1>
c0011a2c:	83 ec 08             	sub    esp,0x8
c0011a2f:	50                   	push   eax
c0011a30:	68 aa 90 02 c0       	push   0xc00290aa
c0011a35:	e8 3f 0d 00 00       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c0011a3a:	c7 04 24 b3 90 02 c0 	mov    DWORD PTR [esp],0xc00290b3
c0011a41:	e8 4d 7e 00 00       	call   c0019893 <Krnl::panic(char const*)>
c0011a46:	83 c4 10             	add    esp,0x10
c0011a49:	e9 14 ff ff ff       	jmp    c0011962 <Virt::setupPageSwapping(int)+0x43>

c0011a4e <VAS::VAS()>:
c0011a4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a52:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011a59:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a5d:	a3 64 cb 02 c0       	mov    ds:0xc002cb64,eax
c0011a62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a66:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011a6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a6e:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011a71:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a75:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c0011a7c:	90                   	nop
c0011a7d:	c3                   	ret    

c0011a7e <VAS::VAS(VAS*)>:
c0011a7e:	83 ec 0c             	sub    esp,0xc
c0011a81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a85:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011a8c:	83 ec 0c             	sub    esp,0xc
c0011a8f:	68 04 8f 02 c0       	push   0xc0028f04
c0011a94:	e8 fa 7d 00 00       	call   c0019893 <Krnl::panic(char const*)>
c0011a99:	83 c4 10             	add    esp,0x10
c0011a9c:	90                   	nop
c0011a9d:	83 c4 0c             	add    esp,0xc
c0011aa0:	c3                   	ret    
c0011aa1:	90                   	nop

c0011aa2 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011aa2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011aa6:	89 c2                	mov    edx,eax
c0011aa8:	c1 e8 0a             	shr    eax,0xa
c0011aab:	c1 ea 16             	shr    edx,0x16
c0011aae:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011ab3:	19 c9                	sbb    ecx,ecx
c0011ab5:	c1 e2 0c             	shl    edx,0xc
c0011ab8:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011abe:	25 fc 0f 00 00       	and    eax,0xffc
c0011ac3:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011aca:	01 d0                	add    eax,edx
c0011acc:	c3                   	ret    
c0011acd:	90                   	nop

c0011ace <VAS::getPageTableEntry(unsigned long)>:
c0011ace:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011ad2:	89 ca                	mov    edx,ecx
c0011ad4:	c1 e9 0a             	shr    ecx,0xa
c0011ad7:	c1 ea 16             	shr    edx,0x16
c0011ada:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011ae0:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011ae6:	c1 e0 0c             	shl    eax,0xc
c0011ae9:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011aec:	c3                   	ret    

c0011aed <Virt::freeKernelVirtualPages(unsigned long)>:
c0011aed:	57                   	push   edi
c0011aee:	56                   	push   esi
c0011aef:	be 01 00 00 00       	mov    esi,0x1
c0011af4:	53                   	push   ebx
c0011af5:	83 ec 10             	sub    esp,0x10
c0011af8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011afc:	c1 eb 0c             	shr    ebx,0xc
c0011aff:	eb 3f                	jmp    c0011b40 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011b01:	e8 13 fe ff ff       	call   c0011919 <Virt::getAKernelVAS()>
c0011b06:	83 ec 08             	sub    esp,0x8
c0011b09:	57                   	push   edi
c0011b0a:	50                   	push   eax
c0011b0b:	e8 be ff ff ff       	call   c0011ace <VAS::getPageTableEntry(unsigned long)>
c0011b10:	83 c4 10             	add    esp,0x10
c0011b13:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b15:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011b19:	f6 c4 04             	test   ah,0x4
c0011b1c:	75 5f                	jne    c0011b7d <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011b1e:	80 fa 04             	cmp    dl,0x4
c0011b21:	74 78                	je     c0011b9b <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011b23:	80 fa 02             	cmp    dl,0x2
c0011b26:	0f 84 88 00 00 00    	je     c0011bb4 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011b2c:	80 fa 03             	cmp    dl,0x3
c0011b2f:	0f 84 ad 00 00 00    	je     c0011be2 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011b35:	fe ca                	dec    dl
c0011b37:	0f 84 92 00 00 00    	je     c0011bcf <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011b3d:	43                   	inc    ebx
c0011b3e:	31 f6                	xor    esi,esi
c0011b40:	53                   	push   ebx
c0011b41:	e8 1f fc ff ff       	call   c0011765 <Virt::getPageState(unsigned long)>
c0011b46:	5f                   	pop    edi
c0011b47:	89 df                	mov    edi,ebx
c0011b49:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011b4d:	c1 e7 0c             	shl    edi,0xc
c0011b50:	84 c0                	test   al,al
c0011b52:	75 ad                	jne    c0011b01 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011b54:	83 ec 0c             	sub    esp,0xc
c0011b57:	68 f5 90 02 c0       	push   0xc00290f5
c0011b5c:	e8 32 7d 00 00       	call   c0019893 <Krnl::panic(char const*)>
c0011b61:	e8 b3 fd ff ff       	call   c0011919 <Virt::getAKernelVAS()>
c0011b66:	5a                   	pop    edx
c0011b67:	59                   	pop    ecx
c0011b68:	57                   	push   edi
c0011b69:	50                   	push   eax
c0011b6a:	e8 5f ff ff ff       	call   c0011ace <VAS::getPageTableEntry(unsigned long)>
c0011b6f:	83 c4 10             	add    esp,0x10
c0011b72:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b74:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011b78:	f6 c4 04             	test   ah,0x4
c0011b7b:	74 c0                	je     c0011b3d <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011b7d:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011b81:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011b86:	83 ec 0c             	sub    esp,0xc
c0011b89:	50                   	push   eax
c0011b8a:	e8 2e df ff ff       	call   c000fabd <Phys::freePage(unsigned long)>
c0011b8f:	83 c4 10             	add    esp,0x10
c0011b92:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011b96:	80 fa 04             	cmp    dl,0x4
c0011b99:	75 88                	jne    c0011b23 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011b9b:	89 f0                	mov    eax,esi
c0011b9d:	84 c0                	test   al,al
c0011b9f:	75 47                	jne    c0011be8 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011ba1:	c7 44 24 20 28 8f 02 c0 	mov    DWORD PTR [esp+0x20],0xc0028f28
c0011ba9:	83 c4 10             	add    esp,0x10
c0011bac:	5b                   	pop    ebx
c0011bad:	5e                   	pop    esi
c0011bae:	5f                   	pop    edi
c0011baf:	e9 df 7c 00 00       	jmp    c0019893 <Krnl::panic(char const*)>
c0011bb4:	89 f0                	mov    eax,esi
c0011bb6:	84 c0                	test   al,al
c0011bb8:	75 15                	jne    c0011bcf <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011bba:	83 ec 0c             	sub    esp,0xc
c0011bbd:	68 11 91 02 c0       	push   0xc0029111
c0011bc2:	e8 cc 7c 00 00       	call   c0019893 <Krnl::panic(char const*)>
c0011bc7:	83 c4 10             	add    esp,0x10
c0011bca:	e9 6e ff ff ff       	jmp    c0011b3d <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011bcf:	83 ec 08             	sub    esp,0x8
c0011bd2:	6a 00                	push   0x0
c0011bd4:	53                   	push   ebx
c0011bd5:	e8 56 fb ff ff       	call   c0011730 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011bda:	83 c4 10             	add    esp,0x10
c0011bdd:	e9 5b ff ff ff       	jmp    c0011b3d <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011be2:	89 f0                	mov    eax,esi
c0011be4:	84 c0                	test   al,al
c0011be6:	75 15                	jne    c0011bfd <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011be8:	83 ec 08             	sub    esp,0x8
c0011beb:	6a 00                	push   0x0
c0011bed:	53                   	push   ebx
c0011bee:	e8 3d fb ff ff       	call   c0011730 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011bf3:	83 c4 10             	add    esp,0x10
c0011bf6:	83 c4 10             	add    esp,0x10
c0011bf9:	5b                   	pop    ebx
c0011bfa:	5e                   	pop    esi
c0011bfb:	5f                   	pop    edi
c0011bfc:	c3                   	ret    
c0011bfd:	c7 44 24 20 2d 91 02 c0 	mov    DWORD PTR [esp+0x20],0xc002912d
c0011c05:	83 c4 10             	add    esp,0x10
c0011c08:	5b                   	pop    ebx
c0011c09:	5e                   	pop    esi
c0011c0a:	5f                   	pop    edi
c0011c0b:	e9 83 7c 00 00       	jmp    c0019893 <Krnl::panic(char const*)>

c0011c10 <VAS::freeAllocatedPages(unsigned long)>:
c0011c10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c14:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011c18:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011c1c:	74 09                	je     c0011c27 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011c1e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011c22:	e9 c6 fe ff ff       	jmp    c0011aed <Virt::freeKernelVirtualPages(unsigned long)>
c0011c27:	c7 44 24 04 4c 8f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0028f4c
c0011c2f:	e9 45 0b 00 00       	jmp    c0012779 <Dbg::kprintf(char const*, ...)>

c0011c34 <VAS::virtualToPhysical(unsigned long)>:
c0011c34:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011c38:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011c3c:	e8 8d fe ff ff       	call   c0011ace <VAS::getPageTableEntry(unsigned long)>
c0011c41:	5a                   	pop    edx
c0011c42:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c44:	59                   	pop    ecx
c0011c45:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011c4a:	c3                   	ret    
c0011c4b:	90                   	nop

c0011c4c <VAS::reflagRange(unsigned long, int, int, int)>:
c0011c4c:	55                   	push   ebp
c0011c4d:	57                   	push   edi
c0011c4e:	56                   	push   esi
c0011c4f:	53                   	push   ebx
c0011c50:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011c54:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0011c58:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011c5c:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011c60:	85 db                	test   ebx,ebx
c0011c62:	7e 22                	jle    c0011c86 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0011c64:	c1 e3 0c             	shl    ebx,0xc
c0011c67:	01 f3                	add    ebx,esi
c0011c69:	56                   	push   esi
c0011c6a:	81 c6 00 10 00 00    	add    esi,0x1000
c0011c70:	55                   	push   ebp
c0011c71:	e8 58 fe ff ff       	call   c0011ace <VAS::getPageTableEntry(unsigned long)>
c0011c76:	5a                   	pop    edx
c0011c77:	59                   	pop    ecx
c0011c78:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011c7a:	21 f9                	and    ecx,edi
c0011c7c:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0011c80:	39 f3                	cmp    ebx,esi
c0011c82:	89 08                	mov    DWORD PTR [eax],ecx
c0011c84:	75 e3                	jne    c0011c69 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0011c86:	5b                   	pop    ebx
c0011c87:	5e                   	pop    esi
c0011c88:	5f                   	pop    edi
c0011c89:	5d                   	pop    ebp
c0011c8a:	c3                   	ret    
c0011c8b:	90                   	nop

c0011c8c <VAS::setToWriteCombining(unsigned long, int)>:
c0011c8c:	a1 e8 c9 02 c0       	mov    eax,ds:0xc002c9e8
c0011c91:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011c97:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0011c9e:	75 01                	jne    c0011ca1 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0011ca0:	c3                   	ret    
c0011ca1:	68 80 00 00 00       	push   0x80
c0011ca6:	6a ff                	push   0xffffffff
c0011ca8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011cac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011cb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011cb4:	e8 93 ff ff ff       	call   c0011c4c <VAS::reflagRange(unsigned long, int, int, int)>
c0011cb9:	83 c4 14             	add    esp,0x14
c0011cbc:	c3                   	ret    
c0011cbd:	90                   	nop

c0011cbe <VAS::mapOtherVASIn(bool, VAS*)>:
c0011cbe:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011cc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011cc7:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0011cca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011cce:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0011cd1:	19 c0                	sbb    eax,eax
c0011cd3:	83 ca 03             	or     edx,0x3
c0011cd6:	83 e0 fc             	and    eax,0xfffffffc
c0011cd9:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0011ce0:	0f 20 d8             	mov    eax,cr3
c0011ce3:	0f 22 d8             	mov    cr3,eax
c0011ce6:	c3                   	ret    
c0011ce7:	90                   	nop

c0011ce8 <VAS::~VAS()>:
c0011ce8:	83 ec 2c             	sub    esp,0x2c
c0011ceb:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011cf3:	e8 c2 b0 00 00       	call   c001cdba <lockScheduler()>
c0011cf8:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011cfd:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cff:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011d02:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011d08:	83 ec 04             	sub    esp,0x4
c0011d0b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011d0f:	6a 01                	push   0x1
c0011d11:	50                   	push   eax
c0011d12:	e8 a7 ff ff ff       	call   c0011cbe <VAS::mapOtherVASIn(bool, VAS*)>
c0011d17:	83 c4 10             	add    esp,0x10
c0011d1a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011d22:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0011d2a:	0f 8f d7 00 00 00    	jg     c0011e07 <VAS::~VAS()+0x11f>
c0011d30:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011d34:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011d37:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011d3b:	c1 e2 02             	shl    edx,0x2
c0011d3e:	01 d0                	add    eax,edx
c0011d40:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d42:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011d46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d4a:	83 e0 01             	and    eax,0x1
c0011d4d:	0f 84 ab 00 00 00    	je     c0011dfe <VAS::~VAS()+0x116>
c0011d53:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011d5b:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0011d63:	7f 75                	jg     c0011dda <VAS::~VAS()+0xf2>
c0011d65:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011d69:	c1 e0 0a             	shl    eax,0xa
c0011d6c:	89 c2                	mov    edx,eax
c0011d6e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011d72:	01 d0                	add    eax,edx
c0011d74:	c1 e0 0c             	shl    eax,0xc
c0011d77:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011d7b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011d80:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d82:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011d85:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011d8b:	83 ec 04             	sub    esp,0x4
c0011d8e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011d92:	6a 01                	push   0x1
c0011d94:	50                   	push   eax
c0011d95:	e8 08 fd ff ff       	call   c0011aa2 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011d9a:	83 c4 10             	add    esp,0x10
c0011d9d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011da1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011da5:	8b 00                	mov    eax,DWORD PTR [eax]
c0011da7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011dab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011daf:	25 01 04 00 00       	and    eax,0x401
c0011db4:	3d 01 04 00 00       	cmp    eax,0x401
c0011db9:	75 19                	jne    c0011dd4 <VAS::~VAS()+0xec>
c0011dbb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011dbf:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011dc4:	83 ec 0c             	sub    esp,0xc
c0011dc7:	50                   	push   eax
c0011dc8:	e8 f0 dc ff ff       	call   c000fabd <Phys::freePage(unsigned long)>
c0011dcd:	83 c4 10             	add    esp,0x10
c0011dd0:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011dd4:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0011dd8:	eb 81                	jmp    c0011d5b <VAS::~VAS()+0x73>
c0011dda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011dde:	25 00 04 00 00       	and    eax,0x400
c0011de3:	74 19                	je     c0011dfe <VAS::~VAS()+0x116>
c0011de5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011de9:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011dee:	83 ec 0c             	sub    esp,0xc
c0011df1:	50                   	push   eax
c0011df2:	e8 c6 dc ff ff       	call   c000fabd <Phys::freePage(unsigned long)>
c0011df7:	83 c4 10             	add    esp,0x10
c0011dfa:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011dfe:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011e02:	e9 1b ff ff ff       	jmp    c0011d22 <VAS::~VAS()+0x3a>
c0011e07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e0b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011e0e:	83 ec 0c             	sub    esp,0xc
c0011e11:	50                   	push   eax
c0011e12:	e8 d6 fc ff ff       	call   c0011aed <Virt::freeKernelVirtualPages(unsigned long)>
c0011e17:	83 c4 10             	add    esp,0x10
c0011e1a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e1e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011e21:	83 ec 0c             	sub    esp,0xc
c0011e24:	50                   	push   eax
c0011e25:	e8 93 dc ff ff       	call   c000fabd <Phys::freePage(unsigned long)>
c0011e2a:	83 c4 10             	add    esp,0x10
c0011e2d:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011e31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011e35:	c1 e0 02             	shl    eax,0x2
c0011e38:	83 ec 08             	sub    esp,0x8
c0011e3b:	50                   	push   eax
c0011e3c:	68 70 8f 02 c0       	push   0xc0028f70
c0011e41:	e8 33 09 00 00       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c0011e46:	83 c4 10             	add    esp,0x10
c0011e49:	e8 6e af 00 00       	call   c001cdbc <unlockScheduler()>
c0011e4e:	90                   	nop
c0011e4f:	83 c4 2c             	add    esp,0x2c
c0011e52:	c3                   	ret    
c0011e53:	90                   	nop

c0011e54 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0011e54:	55                   	push   ebp
c0011e55:	57                   	push   edi
c0011e56:	56                   	push   esi
c0011e57:	53                   	push   ebx
c0011e58:	83 ec 1c             	sub    esp,0x1c
c0011e5b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011e5f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011e63:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0011e69:	77 08                	ja     c0011e73 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0011e6b:	0f 20 d8             	mov    eax,cr3
c0011e6e:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c0011e71:	75 47                	jne    c0011eba <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0011e73:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e77:	09 d8                	or     eax,ebx
c0011e79:	a9 ff 0f 00 00       	test   eax,0xfff
c0011e7e:	75 57                	jne    c0011ed7 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0011e80:	89 de                	mov    esi,ebx
c0011e82:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011e85:	c1 ee 16             	shr    esi,0x16
c0011e88:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0011e8f:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0011e93:	74 54                	je     c0011ee9 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0011e95:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011e99:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0011e9f:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0011ea3:	c1 e6 0c             	shl    esi,0xc
c0011ea6:	c1 eb 0a             	shr    ebx,0xa
c0011ea9:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0011eaf:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0011eb2:	83 c4 1c             	add    esp,0x1c
c0011eb5:	5b                   	pop    ebx
c0011eb6:	5e                   	pop    esi
c0011eb7:	5f                   	pop    edi
c0011eb8:	5d                   	pop    ebp
c0011eb9:	c3                   	ret    
c0011eba:	83 ec 0c             	sub    esp,0xc
c0011ebd:	68 90 8f 02 c0       	push   0xc0028f90
c0011ec2:	e8 b2 08 00 00       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c0011ec7:	83 c4 10             	add    esp,0x10
c0011eca:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011ece:	09 d8                	or     eax,ebx
c0011ed0:	a9 ff 0f 00 00       	test   eax,0xfff
c0011ed5:	74 a9                	je     c0011e80 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011ed7:	83 ec 0c             	sub    esp,0xc
c0011eda:	68 f8 8f 02 c0       	push   0xc0028ff8
c0011edf:	e8 af 79 00 00       	call   c0019893 <Krnl::panic(char const*)>
c0011ee4:	83 c4 10             	add    esp,0x10
c0011ee7:	eb 97                	jmp    c0011e80 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011ee9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011eed:	e8 55 dc ff ff       	call   c000fb47 <Phys::allocatePage()>
c0011ef2:	89 c5                	mov    ebp,eax
c0011ef4:	e8 20 fa ff ff       	call   c0011919 <Virt::getAKernelVAS()>
c0011ef9:	83 ec 0c             	sub    esp,0xc
c0011efc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011f00:	6a 01                	push   0x1
c0011f02:	e8 82 f8 ff ff       	call   c0011789 <Virt::allocateKernelVirtualPages(int)>
c0011f07:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011f0e:	6a 01                	push   0x1
c0011f10:	50                   	push   eax
c0011f11:	55                   	push   ebp
c0011f12:	81 cd 07 04 00 00    	or     ebp,0x407
c0011f18:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011f1c:	51                   	push   ecx
c0011f1d:	e8 26 02 00 00       	call   c0012148 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011f22:	83 c4 1c             	add    esp,0x1c
c0011f25:	68 00 10 00 00       	push   0x1000
c0011f2a:	6a 00                	push   0x0
c0011f2c:	50                   	push   eax
c0011f2d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011f31:	e8 55 e7 fe ff       	call   c000068b <memset>
c0011f36:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011f3a:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011f3d:	e8 ab fb ff ff       	call   c0011aed <Virt::freeKernelVirtualPages(unsigned long)>
c0011f42:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011f46:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011f49:	83 c4 10             	add    esp,0x10
c0011f4c:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0011f4f:	e9 41 ff ff ff       	jmp    c0011e95 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c0011f54 <VAS::allocatePages(int, int)>:
c0011f54:	55                   	push   ebp
c0011f55:	57                   	push   edi
c0011f56:	56                   	push   esi
c0011f57:	53                   	push   ebx
c0011f58:	83 ec 1c             	sub    esp,0x1c
c0011f5b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011f5f:	a1 e8 c9 02 c0       	mov    eax,ds:0xc002c9e8
c0011f64:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011f6a:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011f70:	83 e0 01             	and    eax,0x1
c0011f73:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0011f77:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011f7b:	0f 85 cc 00 00 00    	jne    c001204d <VAS::allocatePages(int, int)+0xf9>
c0011f81:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011f84:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011f88:	85 c0                	test   eax,eax
c0011f8a:	0f 84 a1 00 00 00    	je     c0012031 <VAS::allocatePages(int, int)+0xdd>
c0011f90:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011f94:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011f98:	c1 e6 0c             	shl    esi,0xc
c0011f9b:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0011f9f:	85 c0                	test   eax,eax
c0011fa1:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011fa4:	7e 33                	jle    c0011fd9 <VAS::allocatePages(int, int)+0x85>
c0011fa6:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011faa:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011fae:	81 cd 00 04 00 00    	or     ebp,0x400
c0011fb4:	e8 8e db ff ff       	call   c000fb47 <Phys::allocatePage()>
c0011fb9:	55                   	push   ebp
c0011fba:	53                   	push   ebx
c0011fbb:	50                   	push   eax
c0011fbc:	57                   	push   edi
c0011fbd:	e8 92 fe ff ff       	call   c0011e54 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011fc2:	83 c4 10             	add    esp,0x10
c0011fc5:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011fca:	74 03                	je     c0011fcf <VAS::allocatePages(int, int)+0x7b>
c0011fcc:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011fcf:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011fd5:	39 de                	cmp    esi,ebx
c0011fd7:	75 db                	jne    c0011fb4 <VAS::allocatePages(int, int)+0x60>
c0011fd9:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011fde:	75 12                	jne    c0011ff2 <VAS::allocatePages(int, int)+0x9e>
c0011fe0:	0f 20 d8             	mov    eax,cr3
c0011fe3:	0f 22 d8             	mov    cr3,eax
c0011fe6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011fea:	83 c4 1c             	add    esp,0x1c
c0011fed:	5b                   	pop    ebx
c0011fee:	5e                   	pop    esi
c0011fef:	5f                   	pop    edi
c0011ff0:	5d                   	pop    ebp
c0011ff1:	c3                   	ret    
c0011ff2:	c1 ee 0a             	shr    esi,0xa
c0011ff5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011ff9:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0011fff:	c1 eb 0a             	shr    ebx,0xa
c0012002:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0012008:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001200e:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012014:	39 c3                	cmp    ebx,eax
c0012016:	77 ce                	ja     c0011fe6 <VAS::allocatePages(int, int)+0x92>
c0012018:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001201b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012021:	39 d8                	cmp    eax,ebx
c0012023:	73 f3                	jae    c0012018 <VAS::allocatePages(int, int)+0xc4>
c0012025:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012029:	83 c4 1c             	add    esp,0x1c
c001202c:	5b                   	pop    ebx
c001202d:	5e                   	pop    esi
c001202e:	5f                   	pop    edi
c001202f:	5d                   	pop    ebp
c0012030:	c3                   	ret    
c0012031:	83 ec 0c             	sub    esp,0xc
c0012034:	68 1c 90 02 c0       	push   0xc002901c
c0012039:	e8 55 78 00 00       	call   c0019893 <Krnl::panic(char const*)>
c001203e:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012041:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012045:	83 c4 10             	add    esp,0x10
c0012048:	e9 43 ff ff ff       	jmp    c0011f90 <VAS::allocatePages(int, int)+0x3c>
c001204d:	83 ec 0c             	sub    esp,0xc
c0012050:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012054:	e8 30 f7 ff ff       	call   c0011789 <Virt::allocateKernelVirtualPages(int)>
c0012059:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001205d:	83 c4 10             	add    esp,0x10
c0012060:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0012065:	0f 87 9b 00 00 00    	ja     c0012106 <VAS::allocatePages(int, int)+0x1b2>
c001206b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001206f:	85 d2                	test   edx,edx
c0012071:	7e 3c                	jle    c00120af <VAS::allocatePages(int, int)+0x15b>
c0012073:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012077:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001207b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001207f:	c1 e5 0c             	shl    ebp,0xc
c0012082:	81 ce 00 04 00 00    	or     esi,0x400
c0012088:	01 dd                	add    ebp,ebx
c001208a:	e8 b8 da ff ff       	call   c000fb47 <Phys::allocatePage()>
c001208f:	56                   	push   esi
c0012090:	53                   	push   ebx
c0012091:	50                   	push   eax
c0012092:	57                   	push   edi
c0012093:	e8 bc fd ff ff       	call   c0011e54 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012098:	83 c4 10             	add    esp,0x10
c001209b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00120a0:	74 03                	je     c00120a5 <VAS::allocatePages(int, int)+0x151>
c00120a2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00120a5:	81 c3 00 10 00 00    	add    ebx,0x1000
c00120ab:	39 dd                	cmp    ebp,ebx
c00120ad:	75 db                	jne    c001208a <VAS::allocatePages(int, int)+0x136>
c00120af:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00120b4:	0f 84 26 ff ff ff    	je     c0011fe0 <VAS::allocatePages(int, int)+0x8c>
c00120ba:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00120be:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00120c2:	89 d3                	mov    ebx,edx
c00120c4:	c1 e0 0c             	shl    eax,0xc
c00120c7:	c1 eb 0a             	shr    ebx,0xa
c00120ca:	01 d0                	add    eax,edx
c00120cc:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00120d2:	c1 e8 0a             	shr    eax,0xa
c00120d5:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00120db:	25 00 f0 ff ff       	and    eax,0xfffff000
c00120e0:	2d 00 00 40 00       	sub    eax,0x400000
c00120e5:	39 c3                	cmp    ebx,eax
c00120e7:	0f 87 f9 fe ff ff    	ja     c0011fe6 <VAS::allocatePages(int, int)+0x92>
c00120ed:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00120f0:	81 c3 00 10 00 00    	add    ebx,0x1000
c00120f6:	39 d8                	cmp    eax,ebx
c00120f8:	73 f3                	jae    c00120ed <VAS::allocatePages(int, int)+0x199>
c00120fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00120fe:	83 c4 1c             	add    esp,0x1c
c0012101:	5b                   	pop    ebx
c0012102:	5e                   	pop    esi
c0012103:	5f                   	pop    edi
c0012104:	5d                   	pop    ebp
c0012105:	c3                   	ret    
c0012106:	a1 e8 c9 02 c0       	mov    eax,ds:0xc002c9e8
c001210b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012111:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0012118:	0f 84 4d ff ff ff    	je     c001206b <VAS::allocatePages(int, int)+0x117>
c001211e:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0012126:	e9 40 ff ff ff       	jmp    c001206b <VAS::allocatePages(int, int)+0x117>
c001212b:	90                   	nop

c001212c <VAS::setCPUSpecific(unsigned long)>:
c001212c:	83 ec 0c             	sub    esp,0xc
c001212f:	6a 05                	push   0x5
c0012131:	68 00 00 40 c2       	push   0xc2400000
c0012136:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001213a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001213e:	e8 11 fd ff ff       	call   c0011e54 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012143:	83 c4 1c             	add    esp,0x1c
c0012146:	c3                   	ret    
c0012147:	90                   	nop

c0012148 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0012148:	55                   	push   ebp
c0012149:	57                   	push   edi
c001214a:	56                   	push   esi
c001214b:	53                   	push   ebx
c001214c:	83 ec 1c             	sub    esp,0x1c
c001214f:	a1 e8 c9 02 c0       	mov    eax,ds:0xc002c9e8
c0012154:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012158:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001215e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012162:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012168:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001216c:	83 e0 01             	and    eax,0x1
c001216f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012173:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012177:	85 c0                	test   eax,eax
c0012179:	7e 39                	jle    c00121b4 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c001217b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001217f:	89 f3                	mov    ebx,esi
c0012181:	c1 e0 0c             	shl    eax,0xc
c0012184:	01 f0                	add    eax,esi
c0012186:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001218a:	55                   	push   ebp
c001218b:	53                   	push   ebx
c001218c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012190:	29 f0                	sub    eax,esi
c0012192:	01 d8                	add    eax,ebx
c0012194:	50                   	push   eax
c0012195:	57                   	push   edi
c0012196:	e8 b9 fc ff ff       	call   c0011e54 <VAS::mapPage(unsigned long, unsigned long, int)>
c001219b:	83 c4 10             	add    esp,0x10
c001219e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00121a3:	74 03                	je     c00121a8 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c00121a5:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00121a8:	81 c3 00 10 00 00    	add    ebx,0x1000
c00121ae:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c00121b2:	75 d6                	jne    c001218a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c00121b4:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00121b9:	75 10                	jne    c00121cb <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c00121bb:	0f 20 d8             	mov    eax,cr3
c00121be:	0f 22 d8             	mov    cr3,eax
c00121c1:	83 c4 1c             	add    esp,0x1c
c00121c4:	89 f0                	mov    eax,esi
c00121c6:	5b                   	pop    ebx
c00121c7:	5e                   	pop    esi
c00121c8:	5f                   	pop    edi
c00121c9:	5d                   	pop    ebp
c00121ca:	c3                   	ret    
c00121cb:	89 f3                	mov    ebx,esi
c00121cd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00121d1:	c1 eb 0a             	shr    ebx,0xa
c00121d4:	c1 e0 0c             	shl    eax,0xc
c00121d7:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00121dd:	01 f0                	add    eax,esi
c00121df:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00121e5:	c1 e8 0a             	shr    eax,0xa
c00121e8:	25 00 f0 ff ff       	and    eax,0xfffff000
c00121ed:	2d 00 00 40 00       	sub    eax,0x400000
c00121f2:	39 c3                	cmp    ebx,eax
c00121f4:	77 cb                	ja     c00121c1 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c00121f6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00121f9:	81 c3 00 10 00 00    	add    ebx,0x1000
c00121ff:	39 d8                	cmp    eax,ebx
c0012201:	73 f3                	jae    c00121f6 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0012203:	83 c4 1c             	add    esp,0x1c
c0012206:	89 f0                	mov    eax,esi
c0012208:	5b                   	pop    ebx
c0012209:	5e                   	pop    esi
c001220a:	5f                   	pop    edi
c001220b:	5d                   	pop    ebp
c001220c:	c3                   	ret    
c001220d:	90                   	nop

c001220e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c001220e:	55                   	push   ebp
c001220f:	57                   	push   edi
c0012210:	56                   	push   esi
c0012211:	53                   	push   ebx
c0012212:	83 ec 1c             	sub    esp,0x1c
c0012215:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012219:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001221d:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0012221:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0012225:	a9 ff 0f 00 00       	test   eax,0xfff
c001222a:	75 4a                	jne    c0012276 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c001222c:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012230:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012233:	c1 eb 16             	shr    ebx,0x16
c0012236:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c001223d:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0012241:	74 4d                	je     c0012290 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0012243:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012247:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001224b:	c1 e8 0a             	shr    eax,0xa
c001224e:	80 fa 01             	cmp    dl,0x1
c0012251:	19 d2                	sbb    edx,edx
c0012253:	c1 e3 0c             	shl    ebx,0xc
c0012256:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c001225a:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0012260:	25 fc 0f 00 00       	and    eax,0xffc
c0012265:	01 d8                	add    eax,ebx
c0012267:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c001226e:	83 c4 1c             	add    esp,0x1c
c0012271:	5b                   	pop    ebx
c0012272:	5e                   	pop    esi
c0012273:	5f                   	pop    edi
c0012274:	5d                   	pop    ebp
c0012275:	c3                   	ret    
c0012276:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001227a:	83 ec 0c             	sub    esp,0xc
c001227d:	68 48 90 02 c0       	push   0xc0029048
c0012282:	e8 0c 76 00 00       	call   c0019893 <Krnl::panic(char const*)>
c0012287:	83 c4 10             	add    esp,0x10
c001228a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001228e:	eb 9c                	jmp    c001222c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0012290:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012294:	e8 ae d8 ff ff       	call   c000fb47 <Phys::allocatePage()>
c0012299:	89 c5                	mov    ebp,eax
c001229b:	e8 79 f6 ff ff       	call   c0011919 <Virt::getAKernelVAS()>
c00122a0:	83 ec 0c             	sub    esp,0xc
c00122a3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00122a7:	6a 01                	push   0x1
c00122a9:	e8 db f4 ff ff       	call   c0011789 <Virt::allocateKernelVirtualPages(int)>
c00122ae:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00122b5:	6a 01                	push   0x1
c00122b7:	50                   	push   eax
c00122b8:	55                   	push   ebp
c00122b9:	81 cd 07 04 00 00    	or     ebp,0x407
c00122bf:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00122c3:	51                   	push   ecx
c00122c4:	e8 7f fe ff ff       	call   c0012148 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00122c9:	83 c4 1c             	add    esp,0x1c
c00122cc:	68 00 10 00 00       	push   0x1000
c00122d1:	6a 00                	push   0x0
c00122d3:	50                   	push   eax
c00122d4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00122d8:	e8 ae e3 fe ff       	call   c000068b <memset>
c00122dd:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00122e1:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00122e4:	e8 04 f8 ff ff       	call   c0011aed <Virt::freeKernelVirtualPages(unsigned long)>
c00122e9:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00122ec:	83 c4 10             	add    esp,0x10
c00122ef:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c00122f2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00122f6:	e9 48 ff ff ff       	jmp    c0012243 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c00122fb:	90                   	nop

c00122fc <VAS::VAS(bool)>:
c00122fc:	53                   	push   ebx
c00122fd:	83 ec 28             	sub    esp,0x28
c0012300:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012304:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0012308:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001230c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012313:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012317:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001231b:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c001231e:	e8 24 d8 ff ff       	call   c000fb47 <Phys::allocatePage()>
c0012323:	89 c2                	mov    edx,eax
c0012325:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012329:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001232c:	e8 e8 f5 ff ff       	call   c0011919 <Virt::getAKernelVAS()>
c0012331:	89 c3                	mov    ebx,eax
c0012333:	83 ec 0c             	sub    esp,0xc
c0012336:	6a 01                	push   0x1
c0012338:	e8 4c f4 ff ff       	call   c0011789 <Virt::allocateKernelVirtualPages(int)>
c001233d:	83 c4 10             	add    esp,0x10
c0012340:	89 c2                	mov    edx,eax
c0012342:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012346:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012349:	83 ec 0c             	sub    esp,0xc
c001234c:	6a 03                	push   0x3
c001234e:	6a 01                	push   0x1
c0012350:	52                   	push   edx
c0012351:	50                   	push   eax
c0012352:	53                   	push   ebx
c0012353:	e8 f0 fd ff ff       	call   c0012148 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012358:	83 c4 20             	add    esp,0x20
c001235b:	89 c2                	mov    edx,eax
c001235d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012361:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0012364:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001236c:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0012374:	7f 1c                	jg     c0012392 <VAS::VAS(bool)+0x96>
c0012376:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001237a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001237d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012381:	c1 e2 02             	shl    edx,0x2
c0012384:	01 d0                	add    eax,edx
c0012386:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c001238c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012390:	eb da                	jmp    c001236c <VAS::VAS(bool)+0x70>
c0012392:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c001239a:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c00123a2:	7f 7a                	jg     c001241e <VAS::VAS(bool)+0x122>
c00123a4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00123a8:	2d 00 02 00 00       	sub    eax,0x200
c00123ad:	c1 e0 0c             	shl    eax,0xc
c00123b0:	83 c8 03             	or     eax,0x3
c00123b3:	89 c2                	mov    edx,eax
c00123b5:	a1 e8 c9 02 c0       	mov    eax,ds:0xc002c9e8
c00123ba:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00123c0:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00123c6:	83 e0 10             	and    eax,0x10
c00123c9:	84 c0                	test   al,al
c00123cb:	74 07                	je     c00123d4 <VAS::VAS(bool)+0xd8>
c00123cd:	b8 00 01 00 00       	mov    eax,0x100
c00123d2:	eb 05                	jmp    c00123d9 <VAS::VAS(bool)+0xdd>
c00123d4:	b8 00 00 00 00       	mov    eax,0x0
c00123d9:	09 d0                	or     eax,edx
c00123db:	89 c1                	mov    ecx,eax
c00123dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00123e1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00123e4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00123e8:	c1 e2 02             	shl    edx,0x2
c00123eb:	01 d0                	add    eax,edx
c00123ed:	89 ca                	mov    edx,ecx
c00123ef:	89 10                	mov    DWORD PTR [eax],edx
c00123f1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00123f5:	2d 40 03 00 00       	sub    eax,0x340
c00123fa:	83 f8 7f             	cmp    eax,0x7f
c00123fd:	77 16                	ja     c0012415 <VAS::VAS(bool)+0x119>
c00123ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012403:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012406:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001240a:	c1 e2 02             	shl    edx,0x2
c001240d:	01 d0                	add    eax,edx
c001240f:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012415:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012419:	e9 7c ff ff ff       	jmp    c001239a <VAS::VAS(bool)+0x9e>
c001241e:	a1 e8 c9 02 c0       	mov    eax,ds:0xc002c9e8
c0012423:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012429:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001242f:	83 e0 10             	and    eax,0x10
c0012432:	84 c0                	test   al,al
c0012434:	74 07                	je     c001243d <VAS::VAS(bool)+0x141>
c0012436:	b8 03 41 00 00       	mov    eax,0x4103
c001243b:	eb 05                	jmp    c0012442 <VAS::VAS(bool)+0x146>
c001243d:	b8 03 40 00 00       	mov    eax,0x4003
c0012442:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012446:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0012449:	81 c2 20 0c 00 00    	add    edx,0xc20
c001244f:	89 02                	mov    DWORD PTR [edx],eax
c0012451:	a1 e8 c9 02 c0       	mov    eax,ds:0xc002c9e8
c0012456:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001245c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0012462:	83 ec 08             	sub    esp,0x8
c0012465:	50                   	push   eax
c0012466:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001246a:	e8 bd fc ff ff       	call   c001212c <VAS::setCPUSpecific(unsigned long)>
c001246f:	83 c4 10             	add    esp,0x10
c0012472:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012476:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012479:	a1 e8 c9 02 c0       	mov    eax,ds:0xc002c9e8
c001247e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012484:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001248a:	83 e0 10             	and    eax,0x10
c001248d:	84 c0                	test   al,al
c001248f:	74 07                	je     c0012498 <VAS::VAS(bool)+0x19c>
c0012491:	b8 00 01 00 00       	mov    eax,0x100
c0012496:	eb 05                	jmp    c001249d <VAS::VAS(bool)+0x1a1>
c0012498:	b8 00 00 00 00       	mov    eax,0x0
c001249d:	09 c2                	or     edx,eax
c001249f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00124a3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00124a6:	05 fc 0f 00 00       	add    eax,0xffc
c00124ab:	83 ca 03             	or     edx,0x3
c00124ae:	89 10                	mov    DWORD PTR [eax],edx
c00124b0:	a1 e8 c9 02 c0       	mov    eax,ds:0xc002c9e8
c00124b5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00124bb:	83 ec 0c             	sub    esp,0xc
c00124be:	50                   	push   eax
c00124bf:	e8 90 19 00 00       	call   c0013e54 <Device::getName()>
c00124c4:	83 c4 10             	add    esp,0x10
c00124c7:	83 ec 08             	sub    esp,0x8
c00124ca:	68 47 91 02 c0       	push   0xc0029147
c00124cf:	50                   	push   eax
c00124d0:	e8 a6 e2 fe ff       	call   c000077b <strcmp>
c00124d5:	83 c4 10             	add    esp,0x10
c00124d8:	85 c0                	test   eax,eax
c00124da:	0f 94 c0             	sete   al
c00124dd:	84 c0                	test   al,al
c00124df:	74 70                	je     c0012551 <VAS::VAS(bool)+0x255>
c00124e1:	e8 b7 a8 00 00       	call   c001cd9d <disableIRQs()>
c00124e6:	a1 e8 c9 02 c0       	mov    eax,ds:0xc002c9e8
c00124eb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00124f1:	05 7c 09 00 00       	add    eax,0x97c
c00124f6:	83 ec 0c             	sub    esp,0xc
c00124f9:	50                   	push   eax
c00124fa:	e8 51 ca ff ff       	call   c000ef50 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00124ff:	83 c4 10             	add    esp,0x10
c0012502:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012507:	89 c3                	mov    ebx,eax
c0012509:	a1 e8 c9 02 c0       	mov    eax,ds:0xc002c9e8
c001250e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012514:	05 7c 09 00 00       	add    eax,0x97c
c0012519:	83 ec 0c             	sub    esp,0xc
c001251c:	50                   	push   eax
c001251d:	e8 2e ca ff ff       	call   c000ef50 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012522:	83 c4 10             	add    esp,0x10
c0012525:	83 ec 08             	sub    esp,0x8
c0012528:	50                   	push   eax
c0012529:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001252d:	e8 9c f5 ff ff       	call   c0011ace <VAS::getPageTableEntry(unsigned long)>
c0012532:	83 c4 10             	add    esp,0x10
c0012535:	8b 00                	mov    eax,DWORD PTR [eax]
c0012537:	25 00 f0 ff ff       	and    eax,0xfffff000
c001253c:	6a 11                	push   0x11
c001253e:	53                   	push   ebx
c001253f:	50                   	push   eax
c0012540:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012544:	e8 0b f9 ff ff       	call   c0011e54 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012549:	83 c4 10             	add    esp,0x10
c001254c:	e8 5a a8 00 00       	call   c001cdab <enableIRQs()>
c0012551:	90                   	nop
c0012552:	83 c4 28             	add    esp,0x28
c0012555:	5b                   	pop    ebx
c0012556:	c3                   	ret    

c0012557 <mapVASFirstTime>:
c0012557:	55                   	push   ebp
c0012558:	57                   	push   edi
c0012559:	56                   	push   esi
c001255a:	53                   	push   ebx
c001255b:	83 ec 0c             	sub    esp,0xc
c001255e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012563:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012566:	4a                   	dec    edx
c0012567:	0f 84 8e 00 00 00    	je     c00125fb <mapVASFirstTime+0xa4>
c001256d:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012570:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012573:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012578:	c1 e5 15             	shl    ebp,0x15
c001257b:	be 00 90 e7 01       	mov    esi,0x1e79000
c0012580:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012586:	29 eb                	sub    ebx,ebp
c0012588:	29 ee                	sub    esi,ebp
c001258a:	e8 b8 d5 ff ff       	call   c000fb47 <Phys::allocatePage()>
c001258f:	83 ec 0c             	sub    esp,0xc
c0012592:	68 03 04 00 00       	push   0x403
c0012597:	6a 01                	push   0x1
c0012599:	53                   	push   ebx
c001259a:	81 eb 00 10 00 00    	sub    ebx,0x1000
c00125a0:	50                   	push   eax
c00125a1:	57                   	push   edi
c00125a2:	e8 a1 fb ff ff       	call   c0012148 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00125a7:	83 c4 20             	add    esp,0x20
c00125aa:	39 f3                	cmp    ebx,esi
c00125ac:	75 dc                	jne    c001258a <mapVASFirstTime+0x33>
c00125ae:	be 00 f0 ff 01       	mov    esi,0x1fff000
c00125b3:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c00125b8:	29 ee                	sub    esi,ebp
c00125ba:	29 e8                	sub    eax,ebp
c00125bc:	89 c5                	mov    ebp,eax
c00125be:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c00125c2:	19 db                	sbb    ebx,ebx
c00125c4:	e8 7e d5 ff ff       	call   c000fb47 <Phys::allocatePage()>
c00125c9:	83 e3 04             	and    ebx,0x4
c00125cc:	83 ec 0c             	sub    esp,0xc
c00125cf:	81 c3 03 04 00 00    	add    ebx,0x403
c00125d5:	53                   	push   ebx
c00125d6:	6a 01                	push   0x1
c00125d8:	56                   	push   esi
c00125d9:	81 ee 00 10 00 00    	sub    esi,0x1000
c00125df:	50                   	push   eax
c00125e0:	57                   	push   edi
c00125e1:	e8 62 fb ff ff       	call   c0012148 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00125e6:	83 c4 20             	add    esp,0x20
c00125e9:	39 f5                	cmp    ebp,esi
c00125eb:	75 d1                	jne    c00125be <mapVASFirstTime+0x67>
c00125ed:	0f 20 d8             	mov    eax,cr3
c00125f0:	0f 22 d8             	mov    cr3,eax
c00125f3:	83 c4 0c             	add    esp,0xc
c00125f6:	5b                   	pop    ebx
c00125f7:	5e                   	pop    esi
c00125f8:	5f                   	pop    edi
c00125f9:	5d                   	pop    ebp
c00125fa:	c3                   	ret    
c00125fb:	83 ec 0c             	sub    esp,0xc
c00125fe:	68 55 91 02 c0       	push   0xc0029155
c0012603:	e8 71 01 00 00       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c0012608:	83 c4 10             	add    esp,0x10
c001260b:	83 c4 0c             	add    esp,0xc
c001260e:	5b                   	pop    ebx
c001260f:	5e                   	pop    esi
c0012610:	5f                   	pop    edi
c0012611:	5d                   	pop    ebp
c0012612:	c3                   	ret    

c0012613 <__cxa_atexit>:
c0012613:	31 c0                	xor    eax,eax
c0012615:	c3                   	ret    

c0012616 <__cxa_finalize>:
c0012616:	c3                   	ret    

c0012617 <__stack_chk_fail>:
c0012617:	55                   	push   ebp
c0012618:	89 e5                	mov    ebp,esp
c001261a:	83 ec 14             	sub    esp,0x14
c001261d:	68 6e 91 02 c0       	push   0xc002916e
c0012622:	e8 52 01 00 00       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c0012627:	58                   	pop    eax
c0012628:	5a                   	pop    edx
c0012629:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001262c:	68 be 91 02 c0       	push   0xc00291be
c0012631:	e8 43 01 00 00       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c0012636:	59                   	pop    ecx
c0012637:	58                   	pop    eax
c0012638:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001263b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001263e:	68 be 91 02 c0       	push   0xc00291be
c0012643:	e8 31 01 00 00       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c0012648:	5a                   	pop    edx
c0012649:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001264c:	59                   	pop    ecx
c001264d:	8b 00                	mov    eax,DWORD PTR [eax]
c001264f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012652:	68 be 91 02 c0       	push   0xc00291be
c0012657:	e8 1d 01 00 00       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c001265c:	5a                   	pop    edx
c001265d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012660:	59                   	pop    ecx
c0012661:	8b 00                	mov    eax,DWORD PTR [eax]
c0012663:	8b 00                	mov    eax,DWORD PTR [eax]
c0012665:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012668:	68 be 91 02 c0       	push   0xc00291be
c001266d:	e8 07 01 00 00       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c0012672:	c7 04 24 c6 91 02 c0 	mov    DWORD PTR [esp],0xc00291c6
c0012679:	e8 15 72 00 00       	call   c0019893 <Krnl::panic(char const*)>
c001267e:	83 c4 10             	add    esp,0x10
c0012681:	c9                   	leave  
c0012682:	c3                   	ret    

c0012683 <__cxa_pure_virtual>:
c0012683:	83 ec 18             	sub    esp,0x18
c0012686:	68 de 91 02 c0       	push   0xc00291de
c001268b:	e8 03 72 00 00       	call   c0019893 <Krnl::panic(char const*)>
c0012690:	83 c4 1c             	add    esp,0x1c
c0012693:	c3                   	ret    

c0012694 <operator new[](unsigned long)>:
c0012694:	e9 3b ce ff ff       	jmp    c000f4d4 <malloc>

c0012699 <operator delete(void*, unsigned long)>:
c0012699:	e9 56 ce ff ff       	jmp    c000f4f4 <rfree>

c001269e <operator delete[](void*)>:
c001269e:	e9 51 ce ff ff       	jmp    c000f4f4 <rfree>

c00126a3 <operator delete[](void*, unsigned long)>:
c00126a3:	e9 4c ce ff ff       	jmp    c000f4f4 <rfree>

c00126a8 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c00126a8:	57                   	push   edi
c00126a9:	b9 3f 00 00 00       	mov    ecx,0x3f
c00126ae:	56                   	push   esi
c00126af:	be f4 91 02 c0       	mov    esi,0xc00291f4
c00126b4:	53                   	push   ebx
c00126b5:	83 ec 40             	sub    esp,0x40
c00126b8:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00126bc:	8d 7c 24 01          	lea    edi,[esp+0x1]
c00126c0:	fc                   	cld    
c00126c1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00126c3:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c00126c7:	83 f9 3e             	cmp    ecx,0x3e
c00126ca:	7e 05                	jle    c00126d1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c00126cc:	b9 3e 00 00 00       	mov    ecx,0x3e
c00126d1:	89 df                	mov    edi,ebx
c00126d3:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c00126d7:	eb 02                	jmp    c00126db <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c00126d9:	89 c7                	mov    edi,eax
c00126db:	31 d2                	xor    edx,edx
c00126dd:	46                   	inc    esi
c00126de:	89 f8                	mov    eax,edi
c00126e0:	f7 f1                	div    ecx
c00126e2:	39 cf                	cmp    edi,ecx
c00126e4:	73 f3                	jae    c00126d9 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c00126e6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00126e9:	eb 02                	jmp    c00126ed <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c00126eb:	89 c3                	mov    ebx,eax
c00126ed:	31 d2                	xor    edx,edx
c00126ef:	4e                   	dec    esi
c00126f0:	89 d8                	mov    eax,ebx
c00126f2:	f7 f1                	div    ecx
c00126f4:	39 cb                	cmp    ebx,ecx
c00126f6:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c00126fa:	88 16                	mov    BYTE PTR [esi],dl
c00126fc:	73 ed                	jae    c00126eb <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c00126fe:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012702:	83 c4 40             	add    esp,0x40
c0012705:	5b                   	pop    ebx
c0012706:	5e                   	pop    esi
c0012707:	5f                   	pop    edi
c0012708:	c3                   	ret    

c0012709 <Dbg::logc(char)>:
c0012709:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001270d:	ba fd 03 00 00       	mov    edx,0x3fd
c0012712:	ec                   	in     al,dx
c0012713:	a8 20                	test   al,0x20
c0012715:	74 fb                	je     c0012712 <Dbg::logc(char)+0x9>
c0012717:	ba f8 03 00 00       	mov    edx,0x3f8
c001271c:	88 c8                	mov    al,cl
c001271e:	ee                   	out    dx,al
c001271f:	c3                   	ret    

c0012720 <Dbg::logs(char*)>:
c0012720:	53                   	push   ebx
c0012721:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012725:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012728:	84 c0                	test   al,al
c001272a:	74 0f                	je     c001273b <Dbg::logs(char*)+0x1b>
c001272c:	50                   	push   eax
c001272d:	43                   	inc    ebx
c001272e:	e8 d6 ff ff ff       	call   c0012709 <Dbg::logc(char)>
c0012733:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012736:	5a                   	pop    edx
c0012737:	84 c0                	test   al,al
c0012739:	75 f1                	jne    c001272c <Dbg::logs(char*)+0xc>
c001273b:	5b                   	pop    ebx
c001273c:	c3                   	ret    

c001273d <Dbg::logWriteInt(unsigned int)>:
c001273d:	83 ec 10             	sub    esp,0x10
c0012740:	6a 0a                	push   0xa
c0012742:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012746:	50                   	push   eax
c0012747:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001274b:	e8 58 ff ff ff       	call   c00126a8 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012750:	50                   	push   eax
c0012751:	e8 ca ff ff ff       	call   c0012720 <Dbg::logs(char*)>
c0012756:	83 c4 20             	add    esp,0x20
c0012759:	c3                   	ret    

c001275a <Dbg::logWriteIntBase(unsigned int, int)>:
c001275a:	83 ec 10             	sub    esp,0x10
c001275d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012761:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012765:	50                   	push   eax
c0012766:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001276a:	e8 39 ff ff ff       	call   c00126a8 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c001276f:	50                   	push   eax
c0012770:	e8 ab ff ff ff       	call   c0012720 <Dbg::logs(char*)>
c0012775:	83 c4 20             	add    esp,0x20
c0012778:	c3                   	ret    

c0012779 <Dbg::kprintf(char const*, ...)>:
c0012779:	55                   	push   ebp
c001277a:	57                   	push   edi
c001277b:	56                   	push   esi
c001277c:	53                   	push   ebx
c001277d:	83 ec 0c             	sub    esp,0xc
c0012780:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012784:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012788:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001278c:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001278f:	84 c0                	test   al,al
c0012791:	74 4a                	je     c00127dd <Dbg::kprintf(char const*, ...)+0x64>
c0012793:	31 db                	xor    ebx,ebx
c0012795:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012798:	3c 25                	cmp    al,0x25
c001279a:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c001279d:	0f 85 e4 00 00 00    	jne    c0012887 <Dbg::kprintf(char const*, ...)+0x10e>
c00127a3:	83 c3 02             	add    ebx,0x2
c00127a6:	8a 07                	mov    al,BYTE PTR [edi]
c00127a8:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c00127ab:	83 e8 25             	sub    eax,0x25
c00127ae:	3c 53                	cmp    al,0x53
c00127b0:	0f 87 ba 00 00 00    	ja     c0012870 <Dbg::kprintf(char const*, ...)+0xf7>
c00127b6:	0f b6 c0             	movzx  eax,al
c00127b9:	ff 24 85 34 92 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6dcc]
c00127c0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00127c4:	89 c8                	mov    eax,ecx
c00127c6:	83 c1 04             	add    ecx,0x4
c00127c9:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00127cd:	ff 30                	push   DWORD PTR [eax]
c00127cf:	e8 4c ff ff ff       	call   c0012720 <Dbg::logs(char*)>
c00127d4:	58                   	pop    eax
c00127d5:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c00127d9:	84 c0                	test   al,al
c00127db:	75 b8                	jne    c0012795 <Dbg::kprintf(char const*, ...)+0x1c>
c00127dd:	83 c4 0c             	add    esp,0xc
c00127e0:	5b                   	pop    ebx
c00127e1:	5e                   	pop    esi
c00127e2:	5f                   	pop    edi
c00127e3:	5d                   	pop    ebp
c00127e4:	c3                   	ret    
c00127e5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00127e9:	89 d0                	mov    eax,edx
c00127eb:	83 c2 04             	add    edx,0x4
c00127ee:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00127f2:	ff 30                	push   DWORD PTR [eax]
c00127f4:	e8 44 ff ff ff       	call   c001273d <Dbg::logWriteInt(unsigned int)>
c00127f9:	58                   	pop    eax
c00127fa:	eb d9                	jmp    c00127d5 <Dbg::kprintf(char const*, ...)+0x5c>
c00127fc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012800:	89 d0                	mov    eax,edx
c0012802:	83 c2 04             	add    edx,0x4
c0012805:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012808:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001280c:	50                   	push   eax
c001280d:	e8 f7 fe ff ff       	call   c0012709 <Dbg::logc(char)>
c0012812:	58                   	pop    eax
c0012813:	eb c0                	jmp    c00127d5 <Dbg::kprintf(char const*, ...)+0x5c>
c0012815:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012819:	89 c8                	mov    eax,ecx
c001281b:	83 c1 04             	add    ecx,0x4
c001281e:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012822:	ff 30                	push   DWORD PTR [eax]
c0012824:	e8 14 ff ff ff       	call   c001273d <Dbg::logWriteInt(unsigned int)>
c0012829:	5f                   	pop    edi
c001282a:	eb a9                	jmp    c00127d5 <Dbg::kprintf(char const*, ...)+0x5c>
c001282c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012830:	89 c8                	mov    eax,ecx
c0012832:	83 c1 04             	add    ecx,0x4
c0012835:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012839:	6a 10                	push   0x10
c001283b:	ff 30                	push   DWORD PTR [eax]
c001283d:	e8 18 ff ff ff       	call   c001275a <Dbg::logWriteIntBase(unsigned int, int)>
c0012842:	59                   	pop    ecx
c0012843:	5f                   	pop    edi
c0012844:	eb 8f                	jmp    c00127d5 <Dbg::kprintf(char const*, ...)+0x5c>
c0012846:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001284a:	89 d0                	mov    eax,edx
c001284c:	83 c2 08             	add    edx,0x8
c001284f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012853:	6a 10                	push   0x10
c0012855:	ff 30                	push   DWORD PTR [eax]
c0012857:	e8 fe fe ff ff       	call   c001275a <Dbg::logWriteIntBase(unsigned int, int)>
c001285c:	58                   	pop    eax
c001285d:	5a                   	pop    edx
c001285e:	e9 72 ff ff ff       	jmp    c00127d5 <Dbg::kprintf(char const*, ...)+0x5c>
c0012863:	6a 25                	push   0x25
c0012865:	e8 9f fe ff ff       	call   c0012709 <Dbg::logc(char)>
c001286a:	58                   	pop    eax
c001286b:	e9 65 ff ff ff       	jmp    c00127d5 <Dbg::kprintf(char const*, ...)+0x5c>
c0012870:	6a 25                	push   0x25
c0012872:	e8 92 fe ff ff       	call   c0012709 <Dbg::logc(char)>
c0012877:	0f be 07             	movsx  eax,BYTE PTR [edi]
c001287a:	50                   	push   eax
c001287b:	e8 89 fe ff ff       	call   c0012709 <Dbg::logc(char)>
c0012880:	5a                   	pop    edx
c0012881:	59                   	pop    ecx
c0012882:	e9 4e ff ff ff       	jmp    c00127d5 <Dbg::kprintf(char const*, ...)+0x5c>
c0012887:	50                   	push   eax
c0012888:	89 eb                	mov    ebx,ebp
c001288a:	e8 7a fe ff ff       	call   c0012709 <Dbg::logc(char)>
c001288f:	89 fd                	mov    ebp,edi
c0012891:	58                   	pop    eax
c0012892:	e9 3e ff ff ff       	jmp    c00127d5 <Dbg::kprintf(char const*, ...)+0x5c>
c0012897:	90                   	nop

c0012898 <File::read(unsigned long long, void*, int*)>:
c0012898:	53                   	push   ebx
c0012899:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001289d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00128a1:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00128a8:	3c 19                	cmp    al,0x19
c00128aa:	77 35                	ja     c00128e1 <File::read(unsigned long long, void*, int*)+0x49>
c00128ac:	8b 04 85 00 d0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3000]
c00128b3:	85 c0                	test   eax,eax
c00128b5:	74 2a                	je     c00128e1 <File::read(unsigned long long, void*, int*)+0x49>
c00128b7:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00128bd:	85 c0                	test   eax,eax
c00128bf:	74 20                	je     c00128e1 <File::read(unsigned long long, void*, int*)+0x49>
c00128c1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00128c5:	74 21                	je     c00128e8 <File::read(unsigned long long, void*, int*)+0x50>
c00128c7:	8b 08                	mov    ecx,DWORD PTR [eax]
c00128c9:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00128cd:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00128d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00128d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00128db:	5b                   	pop    ebx
c00128dc:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c00128df:	ff e0                	jmp    eax
c00128e1:	b8 0b 00 00 00       	mov    eax,0xb
c00128e6:	eb 05                	jmp    c00128ed <File::read(unsigned long long, void*, int*)+0x55>
c00128e8:	b8 05 00 00 00       	mov    eax,0x5
c00128ed:	5b                   	pop    ebx
c00128ee:	c3                   	ret    
c00128ef:	90                   	nop

c00128f0 <File::write(unsigned long long, void*, int*)>:
c00128f0:	53                   	push   ebx
c00128f1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00128f5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00128f9:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012900:	3c 19                	cmp    al,0x19
c0012902:	77 35                	ja     c0012939 <File::write(unsigned long long, void*, int*)+0x49>
c0012904:	8b 04 85 00 d0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3000]
c001290b:	85 c0                	test   eax,eax
c001290d:	74 2a                	je     c0012939 <File::write(unsigned long long, void*, int*)+0x49>
c001290f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012915:	85 c0                	test   eax,eax
c0012917:	74 20                	je     c0012939 <File::write(unsigned long long, void*, int*)+0x49>
c0012919:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001291d:	74 21                	je     c0012940 <File::write(unsigned long long, void*, int*)+0x50>
c001291f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012921:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012925:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001292b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001292f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012933:	5b                   	pop    ebx
c0012934:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0012937:	ff e0                	jmp    eax
c0012939:	b8 0b 00 00 00       	mov    eax,0xb
c001293e:	eb 05                	jmp    c0012945 <File::write(unsigned long long, void*, int*)+0x55>
c0012940:	b8 05 00 00 00       	mov    eax,0x5
c0012945:	5b                   	pop    ebx
c0012946:	c3                   	ret    
c0012947:	90                   	nop

c0012948 <Directory::read(unsigned long long, void*, int*)>:
c0012948:	53                   	push   ebx
c0012949:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001294d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012951:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012958:	3c 19                	cmp    al,0x19
c001295a:	77 35                	ja     c0012991 <Directory::read(unsigned long long, void*, int*)+0x49>
c001295c:	8b 04 85 00 d0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3000]
c0012963:	85 c0                	test   eax,eax
c0012965:	74 2a                	je     c0012991 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012967:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001296d:	85 c0                	test   eax,eax
c001296f:	74 20                	je     c0012991 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012971:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012975:	74 21                	je     c0012998 <Directory::read(unsigned long long, void*, int*)+0x50>
c0012977:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012979:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001297d:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012983:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012987:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001298b:	5b                   	pop    ebx
c001298c:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c001298f:	ff e0                	jmp    eax
c0012991:	b8 0b 00 00 00       	mov    eax,0xb
c0012996:	eb 05                	jmp    c001299d <Directory::read(unsigned long long, void*, int*)+0x55>
c0012998:	b8 05 00 00 00       	mov    eax,0x5
c001299d:	5b                   	pop    ebx
c001299e:	c3                   	ret    
c001299f:	90                   	nop

c00129a0 <Directory::write(unsigned long long, void*, int*)>:
c00129a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00129a4:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c00129ab:	b8 0b 00 00 00       	mov    eax,0xb
c00129b0:	80 fa 19             	cmp    dl,0x19
c00129b3:	77 18                	ja     c00129cd <Directory::write(unsigned long long, void*, int*)+0x2d>
c00129b5:	8b 14 95 00 d0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3000]
c00129bc:	85 d2                	test   edx,edx
c00129be:	74 0d                	je     c00129cd <Directory::write(unsigned long long, void*, int*)+0x2d>
c00129c0:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c00129c7:	19 c0                	sbb    eax,eax
c00129c9:	83 e0 0a             	and    eax,0xa
c00129cc:	40                   	inc    eax
c00129cd:	c3                   	ret    

c00129ce <File::isAtty()>:
c00129ce:	31 c0                	xor    eax,eax
c00129d0:	c3                   	ret    
c00129d1:	90                   	nop

c00129d2 <Directory::isAtty()>:
c00129d2:	31 c0                	xor    eax,eax
c00129d4:	c3                   	ret    
c00129d5:	90                   	nop

c00129d6 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00129d6:	b8 0a 00 00 00       	mov    eax,0xa
c00129db:	c3                   	ret    

c00129dc <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c00129dc:	b8 0a 00 00 00       	mov    eax,0xa
c00129e1:	c3                   	ret    

c00129e2 <File::~File()>:
c00129e2:	83 ec 0c             	sub    esp,0xc
c00129e5:	ba f0 93 02 c0       	mov    edx,0xc00293f0
c00129ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00129ee:	89 10                	mov    DWORD PTR [eax],edx
c00129f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00129f4:	83 ec 0c             	sub    esp,0xc
c00129f7:	50                   	push   eax
c00129f8:	e8 2b eb ff ff       	call   c0011528 <UnixFile::~UnixFile()>
c00129fd:	83 c4 10             	add    esp,0x10
c0012a00:	90                   	nop
c0012a01:	83 c4 0c             	add    esp,0xc
c0012a04:	c3                   	ret    
c0012a05:	90                   	nop

c0012a06 <File::~File()>:
c0012a06:	83 ec 0c             	sub    esp,0xc
c0012a09:	83 ec 0c             	sub    esp,0xc
c0012a0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a10:	e8 cd ff ff ff       	call   c00129e2 <File::~File()>
c0012a15:	83 c4 10             	add    esp,0x10
c0012a18:	83 ec 08             	sub    esp,0x8
c0012a1b:	68 14 01 00 00       	push   0x114
c0012a20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a24:	e8 70 fc ff ff       	call   c0012699 <operator delete(void*, unsigned long)>
c0012a29:	83 c4 10             	add    esp,0x10
c0012a2c:	83 c4 0c             	add    esp,0xc
c0012a2f:	c3                   	ret    

c0012a30 <Directory::~Directory()>:
c0012a30:	83 ec 0c             	sub    esp,0xc
c0012a33:	ba 0c 94 02 c0       	mov    edx,0xc002940c
c0012a38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a3c:	89 10                	mov    DWORD PTR [eax],edx
c0012a3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a42:	83 ec 0c             	sub    esp,0xc
c0012a45:	50                   	push   eax
c0012a46:	e8 dd ea ff ff       	call   c0011528 <UnixFile::~UnixFile()>
c0012a4b:	83 c4 10             	add    esp,0x10
c0012a4e:	90                   	nop
c0012a4f:	83 c4 0c             	add    esp,0xc
c0012a52:	c3                   	ret    
c0012a53:	90                   	nop

c0012a54 <Directory::~Directory()>:
c0012a54:	83 ec 0c             	sub    esp,0xc
c0012a57:	83 ec 0c             	sub    esp,0xc
c0012a5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a5e:	e8 cd ff ff ff       	call   c0012a30 <Directory::~Directory()>
c0012a63:	83 c4 10             	add    esp,0x10
c0012a66:	83 ec 08             	sub    esp,0x8
c0012a69:	68 14 01 00 00       	push   0x114
c0012a6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a72:	e8 22 fc ff ff       	call   c0012699 <operator delete(void*, unsigned long)>
c0012a77:	83 c4 10             	add    esp,0x10
c0012a7a:	83 c4 0c             	add    esp,0xc
c0012a7d:	c3                   	ret    

c0012a7e <Filesystem::Filesystem()>:
c0012a7e:	ba 8c 93 02 c0       	mov    edx,0xc002938c
c0012a83:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012a87:	89 10                	mov    DWORD PTR [eax],edx
c0012a89:	8b 15 68 cb 02 c0    	mov    edx,DWORD PTR ds:0xc002cb68
c0012a8f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012a93:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012a96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012a9a:	a3 68 cb 02 c0       	mov    ds:0xc002cb68,eax
c0012a9f:	90                   	nop
c0012aa0:	c3                   	ret    
c0012aa1:	90                   	nop

c0012aa2 <Filesystem::~Filesystem()>:
c0012aa2:	ba 8c 93 02 c0       	mov    edx,0xc002938c
c0012aa7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012aab:	89 10                	mov    DWORD PTR [eax],edx
c0012aad:	90                   	nop
c0012aae:	c3                   	ret    
c0012aaf:	90                   	nop

c0012ab0 <Filesystem::~Filesystem()>:
c0012ab0:	83 ec 0c             	sub    esp,0xc
c0012ab3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012ab7:	e8 e6 ff ff ff       	call   c0012aa2 <Filesystem::~Filesystem()>
c0012abc:	83 c4 04             	add    esp,0x4
c0012abf:	83 ec 08             	sub    esp,0x8
c0012ac2:	6a 08                	push   0x8
c0012ac4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ac8:	e8 cc fb ff ff       	call   c0012699 <operator delete(void*, unsigned long)>
c0012acd:	83 c4 10             	add    esp,0x10
c0012ad0:	83 c4 0c             	add    esp,0xc
c0012ad3:	c3                   	ret    

c0012ad4 <initVFS()>:
c0012ad4:	83 ec 18             	sub    esp,0x18
c0012ad7:	6a 08                	push   0x8
c0012ad9:	e8 f6 c9 ff ff       	call   c000f4d4 <malloc>
c0012ade:	89 04 24             	mov    DWORD PTR [esp],eax
c0012ae1:	e8 48 d4 00 00       	call   c001ff2e <FAT::FAT()>
c0012ae6:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012aed:	e8 e2 c9 ff ff       	call   c000f4d4 <malloc>
c0012af2:	89 04 24             	mov    DWORD PTR [esp],eax
c0012af5:	e8 8c e6 00 00       	call   c0021186 <ISO9660::ISO9660()>
c0012afa:	83 c4 1c             	add    esp,0x1c
c0012afd:	c3                   	ret    

c0012afe <standardiseFiles(char*, char const*, char const*)>:
c0012afe:	55                   	push   ebp
c0012aff:	57                   	push   edi
c0012b00:	56                   	push   esi
c0012b01:	53                   	push   ebx
c0012b02:	81 ec 10 04 00 00    	sub    esp,0x410
c0012b08:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0012b0f:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0012b16:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0012b1d:	68 00 04 00 00       	push   0x400
c0012b22:	6a 00                	push   0x0
c0012b24:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012b28:	56                   	push   esi
c0012b29:	e8 5d db fe ff       	call   c000068b <memset>
c0012b2e:	83 c4 10             	add    esp,0x10
c0012b31:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012b35:	75 0b                	jne    c0012b42 <standardiseFiles(char*, char const*, char const*)+0x44>
c0012b37:	50                   	push   eax
c0012b38:	50                   	push   eax
c0012b39:	57                   	push   edi
c0012b3a:	56                   	push   esi
c0012b3b:	e8 ea db fe ff       	call   c000072a <strcpy>
c0012b40:	eb 41                	jmp    c0012b83 <standardiseFiles(char*, char const*, char const*)+0x85>
c0012b42:	8a 07                	mov    al,BYTE PTR [edi]
c0012b44:	3c 5c                	cmp    al,0x5c
c0012b46:	74 04                	je     c0012b4c <standardiseFiles(char*, char const*, char const*)+0x4e>
c0012b48:	3c 2f                	cmp    al,0x2f
c0012b4a:	75 18                	jne    c0012b64 <standardiseFiles(char*, char const*, char const*)+0x66>
c0012b4c:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012b4f:	3c 60                	cmp    al,0x60
c0012b51:	7e 03                	jle    c0012b56 <standardiseFiles(char*, char const*, char const*)+0x58>
c0012b53:	83 e8 20             	sub    eax,0x20
c0012b56:	88 04 24             	mov    BYTE PTR [esp],al
c0012b59:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012b60:	50                   	push   eax
c0012b61:	50                   	push   eax
c0012b62:	eb 18                	jmp    c0012b7c <standardiseFiles(char*, char const*, char const*)+0x7e>
c0012b64:	50                   	push   eax
c0012b65:	50                   	push   eax
c0012b66:	55                   	push   ebp
c0012b67:	56                   	push   esi
c0012b68:	e8 bd db fe ff       	call   c000072a <strcpy>
c0012b6d:	5a                   	pop    edx
c0012b6e:	59                   	pop    ecx
c0012b6f:	68 06 a8 02 c0       	push   0xc002a806
c0012b74:	56                   	push   esi
c0012b75:	e8 67 dc fe ff       	call   c00007e1 <strcat>
c0012b7a:	5d                   	pop    ebp
c0012b7b:	58                   	pop    eax
c0012b7c:	57                   	push   edi
c0012b7d:	56                   	push   esi
c0012b7e:	e8 5e dc fe ff       	call   c00007e1 <strcat>
c0012b83:	83 c4 10             	add    esp,0x10
c0012b86:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012b89:	3c 60                	cmp    al,0x60
c0012b8b:	7e 03                	jle    c0012b90 <standardiseFiles(char*, char const*, char const*)+0x92>
c0012b8d:	83 e8 20             	sub    eax,0x20
c0012b90:	88 04 24             	mov    BYTE PTR [esp],al
c0012b93:	88 03                	mov    BYTE PTR [ebx],al
c0012b95:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012b9c:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012ba2:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012ba6:	bf 03 00 00 00       	mov    edi,0x3
c0012bab:	b8 03 00 00 00       	mov    eax,0x3
c0012bb0:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012bb3:	84 d2                	test   dl,dl
c0012bb5:	0f 84 91 00 00 00    	je     c0012c4c <standardiseFiles(char*, char const*, char const*)+0x14e>
c0012bbb:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012bbe:	80 fa 5c             	cmp    dl,0x5c
c0012bc1:	74 05                	je     c0012bc8 <standardiseFiles(char*, char const*, char const*)+0xca>
c0012bc3:	80 fa 2f             	cmp    dl,0x2f
c0012bc6:	75 12                	jne    c0012bda <standardiseFiles(char*, char const*, char const*)+0xdc>
c0012bc8:	89 c5                	mov    ebp,eax
c0012bca:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012bcf:	74 09                	je     c0012bda <standardiseFiles(char*, char const*, char const*)+0xdc>
c0012bd1:	40                   	inc    eax
c0012bd2:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0012bd6:	89 cf                	mov    edi,ecx
c0012bd8:	eb d6                	jmp    c0012bb0 <standardiseFiles(char*, char const*, char const*)+0xb2>
c0012bda:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0012bdf:	75 5b                	jne    c0012c3c <standardiseFiles(char*, char const*, char const*)+0x13e>
c0012be1:	80 fa 2e             	cmp    dl,0x2e
c0012be4:	75 56                	jne    c0012c3c <standardiseFiles(char*, char const*, char const*)+0x13e>
c0012be6:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0012bea:	74 19                	je     c0012c05 <standardiseFiles(char*, char const*, char const*)+0x107>
c0012bec:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012bf1:	74 53                	je     c0012c46 <standardiseFiles(char*, char const*, char const*)+0x148>
c0012bf3:	89 f9                	mov    ecx,edi
c0012bf5:	41                   	inc    ecx
c0012bf6:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012bf9:	80 fa 2f             	cmp    dl,0x2f
c0012bfc:	74 f7                	je     c0012bf5 <standardiseFiles(char*, char const*, char const*)+0xf7>
c0012bfe:	80 fa 5c             	cmp    dl,0x5c
c0012c01:	74 f2                	je     c0012bf5 <standardiseFiles(char*, char const*, char const*)+0xf7>
c0012c03:	eb d1                	jmp    c0012bd6 <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012c05:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012c0a:	74 3a                	je     c0012c46 <standardiseFiles(char*, char const*, char const*)+0x148>
c0012c0c:	83 f8 03             	cmp    eax,0x3
c0012c0f:	74 c5                	je     c0012bd6 <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012c11:	41                   	inc    ecx
c0012c12:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012c15:	80 fa 2f             	cmp    dl,0x2f
c0012c18:	74 f7                	je     c0012c11 <standardiseFiles(char*, char const*, char const*)+0x113>
c0012c1a:	80 fa 5c             	cmp    dl,0x5c
c0012c1d:	74 f2                	je     c0012c11 <standardiseFiles(char*, char const*, char const*)+0x113>
c0012c1f:	48                   	dec    eax
c0012c20:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012c24:	75 06                	jne    c0012c2c <standardiseFiles(char*, char const*, char const*)+0x12e>
c0012c26:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012c2a:	eb f3                	jmp    c0012c1f <standardiseFiles(char*, char const*, char const*)+0x121>
c0012c2c:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012c30:	74 07                	je     c0012c39 <standardiseFiles(char*, char const*, char const*)+0x13b>
c0012c32:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012c36:	48                   	dec    eax
c0012c37:	eb f3                	jmp    c0012c2c <standardiseFiles(char*, char const*, char const*)+0x12e>
c0012c39:	40                   	inc    eax
c0012c3a:	eb 9a                	jmp    c0012bd6 <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012c3c:	80 fa 2f             	cmp    dl,0x2f
c0012c3f:	74 95                	je     c0012bd6 <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012c41:	80 fa 5c             	cmp    dl,0x5c
c0012c44:	74 90                	je     c0012bd6 <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012c46:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012c49:	40                   	inc    eax
c0012c4a:	eb 8a                	jmp    c0012bd6 <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012c4c:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012c50:	83 ec 0c             	sub    esp,0xc
c0012c53:	53                   	push   ebx
c0012c54:	e8 4f da fe ff       	call   c00006a8 <strlen>
c0012c59:	83 c4 10             	add    esp,0x10
c0012c5c:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012c61:	75 26                	jne    c0012c89 <standardiseFiles(char*, char const*, char const*)+0x18b>
c0012c63:	83 ec 0c             	sub    esp,0xc
c0012c66:	53                   	push   ebx
c0012c67:	e8 3c da fe ff       	call   c00006a8 <strlen>
c0012c6c:	83 c4 10             	add    esp,0x10
c0012c6f:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012c74:	74 26                	je     c0012c9c <standardiseFiles(char*, char const*, char const*)+0x19e>
c0012c76:	83 ec 0c             	sub    esp,0xc
c0012c79:	53                   	push   ebx
c0012c7a:	e8 29 da fe ff       	call   c00006a8 <strlen>
c0012c7f:	83 c4 10             	add    esp,0x10
c0012c82:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012c87:	eb c7                	jmp    c0012c50 <standardiseFiles(char*, char const*, char const*)+0x152>
c0012c89:	83 ec 0c             	sub    esp,0xc
c0012c8c:	53                   	push   ebx
c0012c8d:	e8 16 da fe ff       	call   c00006a8 <strlen>
c0012c92:	83 c4 10             	add    esp,0x10
c0012c95:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012c9a:	74 c7                	je     c0012c63 <standardiseFiles(char*, char const*, char const*)+0x165>
c0012c9c:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012ca2:	5b                   	pop    ebx
c0012ca3:	5e                   	pop    esi
c0012ca4:	5f                   	pop    edi
c0012ca5:	5d                   	pop    ebp
c0012ca6:	c3                   	ret    
c0012ca7:	90                   	nop

c0012ca8 <File::File(char const*, Process*)>:
c0012ca8:	83 ec 0c             	sub    esp,0xc
c0012cab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012caf:	83 ec 08             	sub    esp,0x8
c0012cb2:	6a 00                	push   0x0
c0012cb4:	50                   	push   eax
c0012cb5:	e8 8c e6 ff ff       	call   c0011346 <UnixFile::UnixFile(int)>
c0012cba:	83 c4 10             	add    esp,0x10
c0012cbd:	ba f0 93 02 c0       	mov    edx,0xc00293f0
c0012cc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012cc6:	89 10                	mov    DWORD PTR [eax],edx
c0012cc8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012ccc:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012cd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012cd6:	83 c0 0d             	add    eax,0xd
c0012cd9:	83 ec 04             	sub    esp,0x4
c0012cdc:	52                   	push   edx
c0012cdd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ce1:	50                   	push   eax
c0012ce2:	e8 17 fe ff ff       	call   c0012afe <standardiseFiles(char*, char const*, char const*)>
c0012ce7:	83 c4 10             	add    esp,0x10
c0012cea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012cee:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012cf1:	8d 50 bf             	lea    edx,[eax-0x41]
c0012cf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012cf8:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012cfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d02:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012d06:	90                   	nop
c0012d07:	83 c4 0c             	add    esp,0xc
c0012d0a:	c3                   	ret    
c0012d0b:	90                   	nop

c0012d0c <File::open(FileOpenMode)>:
c0012d0c:	53                   	push   ebx
c0012d0d:	b8 0b 00 00 00       	mov    eax,0xb
c0012d12:	83 ec 08             	sub    esp,0x8
c0012d15:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012d19:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012d20:	80 fa 19             	cmp    dl,0x19
c0012d23:	77 40                	ja     c0012d65 <File::open(FileOpenMode)+0x59>
c0012d25:	8b 14 95 00 d0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3000]
c0012d2c:	85 d2                	test   edx,edx
c0012d2e:	74 35                	je     c0012d65 <File::open(FileOpenMode)+0x59>
c0012d30:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012d36:	85 d2                	test   edx,edx
c0012d38:	74 2b                	je     c0012d65 <File::open(FileOpenMode)+0x59>
c0012d3a:	b8 06 00 00 00       	mov    eax,0x6
c0012d3f:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012d43:	75 20                	jne    c0012d65 <File::open(FileOpenMode)+0x59>
c0012d45:	8b 02                	mov    eax,DWORD PTR [edx]
c0012d47:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012d4d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012d51:	51                   	push   ecx
c0012d52:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012d55:	51                   	push   ecx
c0012d56:	52                   	push   edx
c0012d57:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012d5a:	83 c4 10             	add    esp,0x10
c0012d5d:	85 c0                	test   eax,eax
c0012d5f:	75 04                	jne    c0012d65 <File::open(FileOpenMode)+0x59>
c0012d61:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012d65:	83 c4 08             	add    esp,0x8
c0012d68:	5b                   	pop    ebx
c0012d69:	c3                   	ret    

c0012d6a <File::close()>:
c0012d6a:	53                   	push   ebx
c0012d6b:	b8 0b 00 00 00       	mov    eax,0xb
c0012d70:	83 ec 08             	sub    esp,0x8
c0012d73:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012d77:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012d7e:	80 fa 19             	cmp    dl,0x19
c0012d81:	77 41                	ja     c0012dc4 <File::close()+0x5a>
c0012d83:	8b 1c 95 00 d0 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd3000]
c0012d8a:	85 db                	test   ebx,ebx
c0012d8c:	74 36                	je     c0012dc4 <File::close()+0x5a>
c0012d8e:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012d95:	74 2d                	je     c0012dc4 <File::close()+0x5a>
c0012d97:	b8 05 00 00 00       	mov    eax,0x5
c0012d9c:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012da0:	74 22                	je     c0012dc4 <File::close()+0x5a>
c0012da2:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012da6:	8b 04 95 00 d0 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd3000]
c0012dad:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012db3:	53                   	push   ebx
c0012db4:	53                   	push   ebx
c0012db5:	8b 10                	mov    edx,DWORD PTR [eax]
c0012db7:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012dbd:	50                   	push   eax
c0012dbe:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0012dc1:	83 c4 10             	add    esp,0x10
c0012dc4:	83 c4 08             	add    esp,0x8
c0012dc7:	5b                   	pop    ebx
c0012dc8:	c3                   	ret    
c0012dc9:	90                   	nop

c0012dca <File::seek(unsigned long long)>:
c0012dca:	56                   	push   esi
c0012dcb:	53                   	push   ebx
c0012dcc:	b8 0b 00 00 00       	mov    eax,0xb
c0012dd1:	51                   	push   ecx
c0012dd2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012dd6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012dda:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0012de1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012de5:	80 fa 19             	cmp    dl,0x19
c0012de8:	77 31                	ja     c0012e1b <File::seek(unsigned long long)+0x51>
c0012dea:	8b 14 95 00 d0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3000]
c0012df1:	85 d2                	test   edx,edx
c0012df3:	74 26                	je     c0012e1b <File::seek(unsigned long long)+0x51>
c0012df5:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012dfb:	85 d2                	test   edx,edx
c0012dfd:	74 1c                	je     c0012e1b <File::seek(unsigned long long)+0x51>
c0012dff:	b8 05 00 00 00       	mov    eax,0x5
c0012e04:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0012e08:	74 11                	je     c0012e1b <File::seek(unsigned long long)+0x51>
c0012e0a:	8b 02                	mov    eax,DWORD PTR [edx]
c0012e0c:	53                   	push   ebx
c0012e0d:	51                   	push   ecx
c0012e0e:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0012e14:	52                   	push   edx
c0012e15:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012e18:	83 c4 10             	add    esp,0x10
c0012e1b:	5a                   	pop    edx
c0012e1c:	5b                   	pop    ebx
c0012e1d:	5e                   	pop    esi
c0012e1e:	c3                   	ret    
c0012e1f:	90                   	nop

c0012e20 <File::tell(unsigned long long*)>:
c0012e20:	83 ec 0c             	sub    esp,0xc
c0012e23:	b8 0b 00 00 00       	mov    eax,0xb
c0012e28:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012e2c:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012e33:	80 fa 19             	cmp    dl,0x19
c0012e36:	77 34                	ja     c0012e6c <File::tell(unsigned long long*)+0x4c>
c0012e38:	8b 14 95 00 d0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3000]
c0012e3f:	85 d2                	test   edx,edx
c0012e41:	74 29                	je     c0012e6c <File::tell(unsigned long long*)+0x4c>
c0012e43:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012e49:	85 d2                	test   edx,edx
c0012e4b:	74 1f                	je     c0012e6c <File::tell(unsigned long long*)+0x4c>
c0012e4d:	b8 05 00 00 00       	mov    eax,0x5
c0012e52:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012e56:	74 14                	je     c0012e6c <File::tell(unsigned long long*)+0x4c>
c0012e58:	50                   	push   eax
c0012e59:	8b 02                	mov    eax,DWORD PTR [edx]
c0012e5b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012e5f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012e65:	52                   	push   edx
c0012e66:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0012e69:	83 c4 10             	add    esp,0x10
c0012e6c:	83 c4 0c             	add    esp,0xc
c0012e6f:	c3                   	ret    

c0012e70 <File::rewind()>:
c0012e70:	83 ec 10             	sub    esp,0x10
c0012e73:	6a 00                	push   0x0
c0012e75:	6a 00                	push   0x0
c0012e77:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e7b:	e8 4a ff ff ff       	call   c0012dca <File::seek(unsigned long long)>
c0012e80:	83 c4 1c             	add    esp,0x1c
c0012e83:	c3                   	ret    

c0012e84 <File::unlink()>:
c0012e84:	83 ec 0c             	sub    esp,0xc
c0012e87:	b8 0b 00 00 00       	mov    eax,0xb
c0012e8c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012e90:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e97:	80 f9 19             	cmp    cl,0x19
c0012e9a:	77 2f                	ja     c0012ecb <File::unlink()+0x47>
c0012e9c:	8b 0c 8d 00 d0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3000]
c0012ea3:	85 c9                	test   ecx,ecx
c0012ea5:	74 24                	je     c0012ecb <File::unlink()+0x47>
c0012ea7:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012ead:	85 c9                	test   ecx,ecx
c0012eaf:	74 1a                	je     c0012ecb <File::unlink()+0x47>
c0012eb1:	b8 06 00 00 00       	mov    eax,0x6
c0012eb6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012eba:	75 0f                	jne    c0012ecb <File::unlink()+0x47>
c0012ebc:	83 c2 0d             	add    edx,0xd
c0012ebf:	50                   	push   eax
c0012ec0:	50                   	push   eax
c0012ec1:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012ec3:	52                   	push   edx
c0012ec4:	51                   	push   ecx
c0012ec5:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0012ec8:	83 c4 10             	add    esp,0x10
c0012ecb:	83 c4 0c             	add    esp,0xc
c0012ece:	c3                   	ret    
c0012ecf:	90                   	nop

c0012ed0 <File::rename(char const*)>:
c0012ed0:	83 ec 0c             	sub    esp,0xc
c0012ed3:	b8 0b 00 00 00       	mov    eax,0xb
c0012ed8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012edc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012ee3:	80 f9 19             	cmp    cl,0x19
c0012ee6:	77 32                	ja     c0012f1a <File::rename(char const*)+0x4a>
c0012ee8:	8b 0c 8d 00 d0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3000]
c0012eef:	85 c9                	test   ecx,ecx
c0012ef1:	74 27                	je     c0012f1a <File::rename(char const*)+0x4a>
c0012ef3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012ef9:	85 c9                	test   ecx,ecx
c0012efb:	74 1d                	je     c0012f1a <File::rename(char const*)+0x4a>
c0012efd:	b8 06 00 00 00       	mov    eax,0x6
c0012f02:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012f06:	75 12                	jne    c0012f1a <File::rename(char const*)+0x4a>
c0012f08:	83 c2 0d             	add    edx,0xd
c0012f0b:	50                   	push   eax
c0012f0c:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012f0e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012f12:	52                   	push   edx
c0012f13:	51                   	push   ecx
c0012f14:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0012f17:	83 c4 10             	add    esp,0x10
c0012f1a:	83 c4 0c             	add    esp,0xc
c0012f1d:	c3                   	ret    

c0012f1e <File::chfatattr(unsigned char, unsigned char)>:
c0012f1e:	57                   	push   edi
c0012f1f:	b8 0b 00 00 00       	mov    eax,0xb
c0012f24:	56                   	push   esi
c0012f25:	53                   	push   ebx
c0012f26:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012f2a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012f2e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012f35:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012f39:	80 f9 19             	cmp    cl,0x19
c0012f3c:	77 37                	ja     c0012f75 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012f3e:	8b 0c 8d 00 d0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3000]
c0012f45:	85 c9                	test   ecx,ecx
c0012f47:	74 2c                	je     c0012f75 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012f49:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012f4f:	85 c9                	test   ecx,ecx
c0012f51:	74 22                	je     c0012f75 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012f53:	b8 06 00 00 00       	mov    eax,0x6
c0012f58:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012f5c:	75 17                	jne    c0012f75 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012f5e:	8b 39                	mov    edi,DWORD PTR [ecx]
c0012f60:	89 f0                	mov    eax,esi
c0012f62:	83 c2 0d             	add    edx,0xd
c0012f65:	0f b6 f0             	movzx  esi,al
c0012f68:	0f b6 db             	movzx  ebx,bl
c0012f6b:	56                   	push   esi
c0012f6c:	53                   	push   ebx
c0012f6d:	52                   	push   edx
c0012f6e:	51                   	push   ecx
c0012f6f:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0012f72:	83 c4 10             	add    esp,0x10
c0012f75:	5b                   	pop    ebx
c0012f76:	5e                   	pop    esi
c0012f77:	5f                   	pop    edi
c0012f78:	c3                   	ret    
c0012f79:	90                   	nop

c0012f7a <File::exists()>:
c0012f7a:	83 ec 0c             	sub    esp,0xc
c0012f7d:	31 c0                	xor    eax,eax
c0012f7f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012f83:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012f8a:	80 f9 19             	cmp    cl,0x19
c0012f8d:	77 24                	ja     c0012fb3 <File::exists()+0x39>
c0012f8f:	8b 0c 8d 00 d0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3000]
c0012f96:	85 c9                	test   ecx,ecx
c0012f98:	74 19                	je     c0012fb3 <File::exists()+0x39>
c0012f9a:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012fa0:	85 c9                	test   ecx,ecx
c0012fa2:	74 0f                	je     c0012fb3 <File::exists()+0x39>
c0012fa4:	83 c2 0d             	add    edx,0xd
c0012fa7:	50                   	push   eax
c0012fa8:	50                   	push   eax
c0012fa9:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012fab:	52                   	push   edx
c0012fac:	51                   	push   ecx
c0012fad:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012fb0:	83 c4 10             	add    esp,0x10
c0012fb3:	83 c4 0c             	add    esp,0xc
c0012fb6:	c3                   	ret    
c0012fb7:	90                   	nop

c0012fb8 <File::stat(unsigned long long*, bool*)>:
c0012fb8:	56                   	push   esi
c0012fb9:	53                   	push   ebx
c0012fba:	50                   	push   eax
c0012fbb:	b8 0b 00 00 00       	mov    eax,0xb
c0012fc0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012fc4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012fc8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012fcf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012fd3:	80 f9 19             	cmp    cl,0x19
c0012fd6:	77 3d                	ja     c0013015 <File::stat(unsigned long long*, bool*)+0x5d>
c0012fd8:	8b 0c 8d 00 d0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3000]
c0012fdf:	85 c9                	test   ecx,ecx
c0012fe1:	74 32                	je     c0013015 <File::stat(unsigned long long*, bool*)+0x5d>
c0012fe3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012fe9:	85 c9                	test   ecx,ecx
c0012feb:	74 28                	je     c0013015 <File::stat(unsigned long long*, bool*)+0x5d>
c0012fed:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012fef:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012ff3:	74 13                	je     c0013008 <File::stat(unsigned long long*, bool*)+0x50>
c0012ff5:	83 ec 04             	sub    esp,0x4
c0012ff8:	56                   	push   esi
c0012ff9:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0012fff:	51                   	push   ecx
c0013000:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0013003:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0013006:	eb 0a                	jmp    c0013012 <File::stat(unsigned long long*, bool*)+0x5a>
c0013008:	53                   	push   ebx
c0013009:	83 c2 0d             	add    edx,0xd
c001300c:	56                   	push   esi
c001300d:	52                   	push   edx
c001300e:	51                   	push   ecx
c001300f:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0013012:	83 c4 10             	add    esp,0x10
c0013015:	5a                   	pop    edx
c0013016:	5b                   	pop    ebx
c0013017:	5e                   	pop    esi
c0013018:	c3                   	ret    

c0013019 <getcwd(Process*, char*, int)>:
c0013019:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001301d:	31 c0                	xor    eax,eax
c001301f:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0013022:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0013026:	7d 15                	jge    c001303d <getcwd(Process*, char*, int)+0x24>
c0013028:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001302c:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0013033:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0013036:	84 c9                	test   cl,cl
c0013038:	74 06                	je     c0013040 <getcwd(Process*, char*, int)+0x27>
c001303a:	40                   	inc    eax
c001303b:	eb e2                	jmp    c001301f <getcwd(Process*, char*, int)+0x6>
c001303d:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0013040:	31 c0                	xor    eax,eax
c0013042:	c3                   	ret    

c0013043 <setcwd(Process*, char*)>:
c0013043:	55                   	push   ebp
c0013044:	57                   	push   edi
c0013045:	56                   	push   esi
c0013046:	53                   	push   ebx
c0013047:	81 ec 20 02 00 00    	sub    esp,0x220
c001304d:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0013054:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c001305a:	57                   	push   edi
c001305b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0013062:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0013066:	56                   	push   esi
c0013067:	e8 92 fa ff ff       	call   c0012afe <standardiseFiles(char*, char const*, char const*)>
c001306c:	89 34 24             	mov    DWORD PTR [esp],esi
c001306f:	e8 34 d6 fe ff       	call   c00006a8 <strlen>
c0013074:	83 c4 10             	add    esp,0x10
c0013077:	83 f8 02             	cmp    eax,0x2
c001307a:	77 17                	ja     c0013093 <setcwd(Process*, char*)+0x50>
c001307c:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0013081:	83 e8 41             	sub    eax,0x41
c0013084:	83 f8 19             	cmp    eax,0x19
c0013087:	76 24                	jbe    c00130ad <setcwd(Process*, char*)+0x6a>
c0013089:	b8 03 00 00 00       	mov    eax,0x3
c001308e:	e9 e0 00 00 00       	jmp    c0013173 <setcwd(Process*, char*)+0x130>
c0013093:	83 ec 0c             	sub    esp,0xc
c0013096:	56                   	push   esi
c0013097:	e8 0c d6 fe ff       	call   c00006a8 <strlen>
c001309c:	83 c4 10             	add    esp,0x10
c001309f:	83 f8 03             	cmp    eax,0x3
c00130a2:	75 34                	jne    c00130d8 <setcwd(Process*, char*)+0x95>
c00130a4:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c00130a9:	75 2d                	jne    c00130d8 <setcwd(Process*, char*)+0x95>
c00130ab:	eb cf                	jmp    c001307c <setcwd(Process*, char*)+0x39>
c00130ad:	8b 14 85 00 d0 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3000]
c00130b4:	b8 05 00 00 00       	mov    eax,0x5
c00130b9:	85 d2                	test   edx,edx
c00130bb:	0f 84 b2 00 00 00    	je     c0013173 <setcwd(Process*, char*)+0x130>
c00130c1:	b8 06 00 00 00       	mov    eax,0x6
c00130c6:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00130cd:	0f 85 92 00 00 00    	jne    c0013165 <setcwd(Process*, char*)+0x122>
c00130d3:	e9 9b 00 00 00       	jmp    c0013173 <setcwd(Process*, char*)+0x130>
c00130d8:	83 ec 0c             	sub    esp,0xc
c00130db:	68 14 01 00 00       	push   0x114
c00130e0:	e8 ef c3 ff ff       	call   c000f4d4 <malloc>
c00130e5:	83 c4 0c             	add    esp,0xc
c00130e8:	89 c3                	mov    ebx,eax
c00130ea:	55                   	push   ebp
c00130eb:	56                   	push   esi
c00130ec:	50                   	push   eax
c00130ed:	e8 b6 fb ff ff       	call   c0012ca8 <File::File(char const*, Process*)>
c00130f2:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00130f7:	83 c4 0c             	add    esp,0xc
c00130fa:	8d 44 24 0b          	lea    eax,[esp+0xb]
c00130fe:	50                   	push   eax
c00130ff:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013103:	50                   	push   eax
c0013104:	53                   	push   ebx
c0013105:	e8 ae fe ff ff       	call   c0012fb8 <File::stat(unsigned long long*, bool*)>
c001310a:	83 c4 10             	add    esp,0x10
c001310d:	83 f8 02             	cmp    eax,0x2
c0013110:	74 04                	je     c0013116 <setcwd(Process*, char*)+0xd3>
c0013112:	85 c0                	test   eax,eax
c0013114:	74 1c                	je     c0013132 <setcwd(Process*, char*)+0xef>
c0013116:	b8 01 00 00 00       	mov    eax,0x1
c001311b:	85 db                	test   ebx,ebx
c001311d:	74 54                	je     c0013173 <setcwd(Process*, char*)+0x130>
c001311f:	83 ec 0c             	sub    esp,0xc
c0013122:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013124:	53                   	push   ebx
c0013125:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013128:	83 c4 10             	add    esp,0x10
c001312b:	b8 01 00 00 00       	mov    eax,0x1
c0013130:	eb 41                	jmp    c0013173 <setcwd(Process*, char*)+0x130>
c0013132:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0013137:	75 1c                	jne    c0013155 <setcwd(Process*, char*)+0x112>
c0013139:	b8 02 00 00 00       	mov    eax,0x2
c001313e:	85 db                	test   ebx,ebx
c0013140:	74 31                	je     c0013173 <setcwd(Process*, char*)+0x130>
c0013142:	83 ec 0c             	sub    esp,0xc
c0013145:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013147:	53                   	push   ebx
c0013148:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001314b:	83 c4 10             	add    esp,0x10
c001314e:	b8 02 00 00 00       	mov    eax,0x2
c0013153:	eb 1e                	jmp    c0013173 <setcwd(Process*, char*)+0x130>
c0013155:	85 db                	test   ebx,ebx
c0013157:	74 0c                	je     c0013165 <setcwd(Process*, char*)+0x122>
c0013159:	83 ec 0c             	sub    esp,0xc
c001315c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001315e:	53                   	push   ebx
c001315f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013162:	83 c4 10             	add    esp,0x10
c0013165:	50                   	push   eax
c0013166:	50                   	push   eax
c0013167:	56                   	push   esi
c0013168:	57                   	push   edi
c0013169:	e8 bc d5 fe ff       	call   c000072a <strcpy>
c001316e:	83 c4 10             	add    esp,0x10
c0013171:	31 c0                	xor    eax,eax
c0013173:	81 c4 1c 02 00 00    	add    esp,0x21c
c0013179:	5b                   	pop    ebx
c001317a:	5e                   	pop    esi
c001317b:	5f                   	pop    edi
c001317c:	5d                   	pop    ebp
c001317d:	c3                   	ret    

c001317e <Directory::Directory(char const*, Process*)>:
c001317e:	83 ec 0c             	sub    esp,0xc
c0013181:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013185:	83 ec 08             	sub    esp,0x8
c0013188:	6a 00                	push   0x0
c001318a:	50                   	push   eax
c001318b:	e8 b6 e1 ff ff       	call   c0011346 <UnixFile::UnixFile(int)>
c0013190:	83 c4 10             	add    esp,0x10
c0013193:	ba 0c 94 02 c0       	mov    edx,0xc002940c
c0013198:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001319c:	89 10                	mov    DWORD PTR [eax],edx
c001319e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00131a2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00131a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131ac:	83 c0 0d             	add    eax,0xd
c00131af:	83 ec 04             	sub    esp,0x4
c00131b2:	52                   	push   edx
c00131b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131b7:	50                   	push   eax
c00131b8:	e8 41 f9 ff ff       	call   c0012afe <standardiseFiles(char*, char const*, char const*)>
c00131bd:	83 c4 10             	add    esp,0x10
c00131c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131c4:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00131c7:	8d 50 bf             	lea    edx,[eax-0x41]
c00131ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131ce:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00131d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131d8:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00131dc:	90                   	nop
c00131dd:	83 c4 0c             	add    esp,0xc
c00131e0:	c3                   	ret    
c00131e1:	90                   	nop

c00131e2 <Directory::open()>:
c00131e2:	53                   	push   ebx
c00131e3:	b8 0b 00 00 00       	mov    eax,0xb
c00131e8:	83 ec 08             	sub    esp,0x8
c00131eb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00131ef:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00131f6:	80 fa 19             	cmp    dl,0x19
c00131f9:	77 3d                	ja     c0013238 <Directory::open()+0x56>
c00131fb:	8b 14 95 00 d0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3000]
c0013202:	85 d2                	test   edx,edx
c0013204:	74 32                	je     c0013238 <Directory::open()+0x56>
c0013206:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001320c:	85 d2                	test   edx,edx
c001320e:	74 28                	je     c0013238 <Directory::open()+0x56>
c0013210:	b8 06 00 00 00       	mov    eax,0x6
c0013215:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013219:	75 1d                	jne    c0013238 <Directory::open()+0x56>
c001321b:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013221:	50                   	push   eax
c0013222:	8b 02                	mov    eax,DWORD PTR [edx]
c0013224:	51                   	push   ecx
c0013225:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013228:	51                   	push   ecx
c0013229:	52                   	push   edx
c001322a:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c001322d:	83 c4 10             	add    esp,0x10
c0013230:	85 c0                	test   eax,eax
c0013232:	75 04                	jne    c0013238 <Directory::open()+0x56>
c0013234:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013238:	83 c4 08             	add    esp,0x8
c001323b:	5b                   	pop    ebx
c001323c:	c3                   	ret    
c001323d:	90                   	nop

c001323e <Directory::close()>:
c001323e:	53                   	push   ebx
c001323f:	b8 0b 00 00 00       	mov    eax,0xb
c0013244:	83 ec 08             	sub    esp,0x8
c0013247:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001324b:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013252:	80 fa 19             	cmp    dl,0x19
c0013255:	77 41                	ja     c0013298 <Directory::close()+0x5a>
c0013257:	8b 1c 95 00 d0 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd3000]
c001325e:	85 db                	test   ebx,ebx
c0013260:	74 36                	je     c0013298 <Directory::close()+0x5a>
c0013262:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013269:	74 2d                	je     c0013298 <Directory::close()+0x5a>
c001326b:	b8 05 00 00 00       	mov    eax,0x5
c0013270:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013274:	74 22                	je     c0013298 <Directory::close()+0x5a>
c0013276:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c001327a:	8b 04 95 00 d0 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd3000]
c0013281:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013287:	53                   	push   ebx
c0013288:	53                   	push   ebx
c0013289:	8b 10                	mov    edx,DWORD PTR [eax]
c001328b:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013291:	50                   	push   eax
c0013292:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0013295:	83 c4 10             	add    esp,0x10
c0013298:	83 c4 08             	add    esp,0x8
c001329b:	5b                   	pop    ebx
c001329c:	c3                   	ret    
c001329d:	90                   	nop

c001329e <Directory::unlink()>:
c001329e:	83 ec 0c             	sub    esp,0xc
c00132a1:	b8 0b 00 00 00       	mov    eax,0xb
c00132a6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00132aa:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00132b1:	80 f9 19             	cmp    cl,0x19
c00132b4:	77 2f                	ja     c00132e5 <Directory::unlink()+0x47>
c00132b6:	8b 0c 8d 00 d0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3000]
c00132bd:	85 c9                	test   ecx,ecx
c00132bf:	74 24                	je     c00132e5 <Directory::unlink()+0x47>
c00132c1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00132c7:	85 c9                	test   ecx,ecx
c00132c9:	74 1a                	je     c00132e5 <Directory::unlink()+0x47>
c00132cb:	b8 06 00 00 00       	mov    eax,0x6
c00132d0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00132d4:	75 0f                	jne    c00132e5 <Directory::unlink()+0x47>
c00132d6:	83 c2 0d             	add    edx,0xd
c00132d9:	50                   	push   eax
c00132da:	50                   	push   eax
c00132db:	8b 01                	mov    eax,DWORD PTR [ecx]
c00132dd:	52                   	push   edx
c00132de:	51                   	push   ecx
c00132df:	ff 50 38             	call   DWORD PTR [eax+0x38]
c00132e2:	83 c4 10             	add    esp,0x10
c00132e5:	83 c4 0c             	add    esp,0xc
c00132e8:	c3                   	ret    
c00132e9:	90                   	nop

c00132ea <Directory::rename(char const*)>:
c00132ea:	83 ec 0c             	sub    esp,0xc
c00132ed:	b8 0b 00 00 00       	mov    eax,0xb
c00132f2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00132f6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00132fd:	80 f9 19             	cmp    cl,0x19
c0013300:	77 32                	ja     c0013334 <Directory::rename(char const*)+0x4a>
c0013302:	8b 0c 8d 00 d0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3000]
c0013309:	85 c9                	test   ecx,ecx
c001330b:	74 27                	je     c0013334 <Directory::rename(char const*)+0x4a>
c001330d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013313:	85 c9                	test   ecx,ecx
c0013315:	74 1d                	je     c0013334 <Directory::rename(char const*)+0x4a>
c0013317:	b8 06 00 00 00       	mov    eax,0x6
c001331c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013320:	75 12                	jne    c0013334 <Directory::rename(char const*)+0x4a>
c0013322:	83 c2 0d             	add    edx,0xd
c0013325:	50                   	push   eax
c0013326:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013328:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001332c:	52                   	push   edx
c001332d:	51                   	push   ecx
c001332e:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013331:	83 c4 10             	add    esp,0x10
c0013334:	83 c4 0c             	add    esp,0xc
c0013337:	c3                   	ret    

c0013338 <Directory::exists()>:
c0013338:	83 ec 0c             	sub    esp,0xc
c001333b:	31 c0                	xor    eax,eax
c001333d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013341:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013348:	80 f9 19             	cmp    cl,0x19
c001334b:	77 24                	ja     c0013371 <Directory::exists()+0x39>
c001334d:	8b 0c 8d 00 d0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3000]
c0013354:	85 c9                	test   ecx,ecx
c0013356:	74 19                	je     c0013371 <Directory::exists()+0x39>
c0013358:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001335e:	85 c9                	test   ecx,ecx
c0013360:	74 0f                	je     c0013371 <Directory::exists()+0x39>
c0013362:	83 c2 0d             	add    edx,0xd
c0013365:	50                   	push   eax
c0013366:	50                   	push   eax
c0013367:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013369:	52                   	push   edx
c001336a:	51                   	push   ecx
c001336b:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001336e:	83 c4 10             	add    esp,0x10
c0013371:	83 c4 0c             	add    esp,0xc
c0013374:	c3                   	ret    
c0013375:	90                   	nop

c0013376 <Directory::read(dirent*)>:
c0013376:	83 ec 1c             	sub    esp,0x1c
c0013379:	b8 0b 00 00 00       	mov    eax,0xb
c001337e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013382:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013389:	80 fa 19             	cmp    dl,0x19
c001338c:	77 30                	ja     c00133be <Directory::read(dirent*)+0x48>
c001338e:	8b 14 95 00 d0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3000]
c0013395:	85 d2                	test   edx,edx
c0013397:	74 25                	je     c00133be <Directory::read(dirent*)+0x48>
c0013399:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00133a0:	74 1c                	je     c00133be <Directory::read(dirent*)+0x48>
c00133a2:	83 ec 0c             	sub    esp,0xc
c00133a5:	8b 01                	mov    eax,DWORD PTR [ecx]
c00133a7:	8d 54 24 18          	lea    edx,[esp+0x18]
c00133ab:	52                   	push   edx
c00133ac:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00133b0:	6a 00                	push   0x0
c00133b2:	68 10 01 00 00       	push   0x110
c00133b7:	51                   	push   ecx
c00133b8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00133bb:	83 c4 20             	add    esp,0x20
c00133be:	83 c4 1c             	add    esp,0x1c
c00133c1:	c3                   	ret    

c00133c2 <Directory::create()>:
c00133c2:	83 ec 0c             	sub    esp,0xc
c00133c5:	b8 0b 00 00 00       	mov    eax,0xb
c00133ca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00133ce:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00133d5:	80 f9 19             	cmp    cl,0x19
c00133d8:	77 2f                	ja     c0013409 <Directory::create()+0x47>
c00133da:	8b 0c 8d 00 d0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3000]
c00133e1:	85 c9                	test   ecx,ecx
c00133e3:	74 24                	je     c0013409 <Directory::create()+0x47>
c00133e5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00133eb:	85 c9                	test   ecx,ecx
c00133ed:	74 1a                	je     c0013409 <Directory::create()+0x47>
c00133ef:	b8 06 00 00 00       	mov    eax,0x6
c00133f4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00133f8:	75 0f                	jne    c0013409 <Directory::create()+0x47>
c00133fa:	83 c2 0d             	add    edx,0xd
c00133fd:	50                   	push   eax
c00133fe:	50                   	push   eax
c00133ff:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013401:	52                   	push   edx
c0013402:	51                   	push   ecx
c0013403:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013406:	83 c4 10             	add    esp,0x10
c0013409:	83 c4 0c             	add    esp,0xc
c001340c:	c3                   	ret    
c001340d:	90                   	nop

c001340e <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c001340e:	b8 0a 00 00 00       	mov    eax,0xa
c0013413:	c3                   	ret    

c0013414 <Bus::Bus(char const*)>:
c0013414:	83 ec 0c             	sub    esp,0xc
c0013417:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001341b:	83 ec 08             	sub    esp,0x8
c001341e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013422:	50                   	push   eax
c0013423:	e8 30 09 00 00       	call   c0013d58 <Device::Device(char const*)>
c0013428:	83 c4 10             	add    esp,0x10
c001342b:	ba 28 94 02 c0       	mov    edx,0xc0029428
c0013430:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013434:	89 10                	mov    DWORD PTR [eax],edx
c0013436:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001343a:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013444:	90                   	nop
c0013445:	83 c4 0c             	add    esp,0xc
c0013448:	c3                   	ret    
c0013449:	90                   	nop

c001344a <Bus::~Bus()>:
c001344a:	83 ec 0c             	sub    esp,0xc
c001344d:	ba 28 94 02 c0       	mov    edx,0xc0029428
c0013452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013456:	89 10                	mov    DWORD PTR [eax],edx
c0013458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001345c:	83 ec 0c             	sub    esp,0xc
c001345f:	50                   	push   eax
c0013460:	e8 d5 05 00 00       	call   c0013a3a <Device::~Device()>
c0013465:	83 c4 10             	add    esp,0x10
c0013468:	90                   	nop
c0013469:	83 c4 0c             	add    esp,0xc
c001346c:	c3                   	ret    
c001346d:	90                   	nop

c001346e <Bus::~Bus()>:
c001346e:	83 ec 0c             	sub    esp,0xc
c0013471:	83 ec 0c             	sub    esp,0xc
c0013474:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013478:	e8 cd ff ff ff       	call   c001344a <Bus::~Bus()>
c001347d:	83 c4 10             	add    esp,0x10
c0013480:	83 ec 08             	sub    esp,0x8
c0013483:	68 58 01 00 00       	push   0x158
c0013488:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001348c:	e8 08 f2 ff ff       	call   c0012699 <operator delete(void*, unsigned long)>
c0013491:	83 c4 10             	add    esp,0x10
c0013494:	83 c4 0c             	add    esp,0xc
c0013497:	c3                   	ret    

c0013498 <Buzzer::Buzzer(char const*)>:
c0013498:	83 ec 0c             	sub    esp,0xc
c001349b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001349f:	83 ec 08             	sub    esp,0x8
c00134a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134a6:	50                   	push   eax
c00134a7:	e8 ac 08 00 00       	call   c0013d58 <Device::Device(char const*)>
c00134ac:	83 c4 10             	add    esp,0x10
c00134af:	ba 54 94 02 c0       	mov    edx,0xc0029454
c00134b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134b8:	89 10                	mov    DWORD PTR [eax],edx
c00134ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134be:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00134c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134cc:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c00134d6:	90                   	nop
c00134d7:	83 c4 0c             	add    esp,0xc
c00134da:	c3                   	ret    
c00134db:	90                   	nop

c00134dc <Buzzer::~Buzzer()>:
c00134dc:	83 ec 0c             	sub    esp,0xc
c00134df:	ba 54 94 02 c0       	mov    edx,0xc0029454
c00134e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134e8:	89 10                	mov    DWORD PTR [eax],edx
c00134ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134ee:	83 ec 0c             	sub    esp,0xc
c00134f1:	50                   	push   eax
c00134f2:	e8 43 05 00 00       	call   c0013a3a <Device::~Device()>
c00134f7:	83 c4 10             	add    esp,0x10
c00134fa:	90                   	nop
c00134fb:	83 c4 0c             	add    esp,0xc
c00134fe:	c3                   	ret    
c00134ff:	90                   	nop

c0013500 <Buzzer::~Buzzer()>:
c0013500:	83 ec 0c             	sub    esp,0xc
c0013503:	83 ec 0c             	sub    esp,0xc
c0013506:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001350a:	e8 cd ff ff ff       	call   c00134dc <Buzzer::~Buzzer()>
c001350f:	83 c4 10             	add    esp,0x10
c0013512:	83 ec 08             	sub    esp,0x8
c0013515:	68 5c 01 00 00       	push   0x15c
c001351a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001351e:	e8 76 f1 ff ff       	call   c0012699 <operator delete(void*, unsigned long)>
c0013523:	83 c4 10             	add    esp,0x10
c0013526:	83 c4 0c             	add    esp,0xc
c0013529:	c3                   	ret    

c001352a <Buzzer::stop()>:
c001352a:	83 ec 14             	sub    esp,0x14
c001352d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013531:	8b 10                	mov    edx,DWORD PTR [eax]
c0013533:	6a 00                	push   0x0
c0013535:	50                   	push   eax
c0013536:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013539:	83 c4 1c             	add    esp,0x1c
c001353c:	c3                   	ret    

c001353d <beepThread(void*)>:
c001353d:	53                   	push   ebx
c001353e:	83 ec 08             	sub    esp,0x8
c0013541:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013545:	e8 72 98 00 00       	call   c001cdbc <unlockScheduler()>
c001354a:	b8 40 42 0f 00       	mov    eax,0xf4240
c001354f:	52                   	push   edx
c0013550:	52                   	push   edx
c0013551:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013557:	52                   	push   edx
c0013558:	50                   	push   eax
c0013559:	e8 ac 9d 00 00       	call   c001d30a <nanoSleep(unsigned long long)>
c001355e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013561:	e8 c4 ff ff ff       	call   c001352a <Buzzer::stop()>
c0013566:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c001356e:	83 c4 18             	add    esp,0x18
c0013571:	5b                   	pop    ebx
c0013572:	e9 d9 9c 00 00       	jmp    c001d250 <blockTask(TaskState)>
c0013577:	90                   	nop

c0013578 <Buzzer::beep(int, int, bool)>:
c0013578:	57                   	push   edi
c0013579:	56                   	push   esi
c001357a:	53                   	push   ebx
c001357b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001357f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013583:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013587:	52                   	push   edx
c0013588:	52                   	push   edx
c0013589:	8b 06                	mov    eax,DWORD PTR [esi]
c001358b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001358f:	56                   	push   esi
c0013590:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013593:	83 c4 10             	add    esp,0x10
c0013596:	89 f8                	mov    eax,edi
c0013598:	84 c0                	test   al,al
c001359a:	74 1f                	je     c00135bb <Buzzer::beep(int, int, bool)+0x43>
c001359c:	50                   	push   eax
c001359d:	50                   	push   eax
c001359e:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c00135a4:	99                   	cdq    
c00135a5:	52                   	push   edx
c00135a6:	50                   	push   eax
c00135a7:	e8 5e 9d 00 00       	call   c001d30a <nanoSleep(unsigned long long)>
c00135ac:	83 c4 10             	add    esp,0x10
c00135af:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00135b3:	5b                   	pop    ebx
c00135b4:	5e                   	pop    esi
c00135b5:	5f                   	pop    edi
c00135b6:	e9 6f ff ff ff       	jmp    c001352a <Buzzer::stop()>
c00135bb:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c00135c1:	a1 34 df 02 c0       	mov    eax,ds:0xc002df34
c00135c6:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c00135ce:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c00135d2:	c7 44 24 14 3d 35 01 c0 	mov    DWORD PTR [esp+0x14],0xc001353d
c00135da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00135de:	5b                   	pop    ebx
c00135df:	5e                   	pop    esi
c00135e0:	5f                   	pop    edi
c00135e1:	e9 06 99 00 00       	jmp    c001ceec <Process::createThread(void (*)(void*), void*, int)>

c00135e6 <loadClockSettings()>:
c00135e6:	c7 05 74 cb 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc002cb74,0xa
c00135f0:	c6 05 71 cb 02 c0 00 	mov    BYTE PTR ds:0xc002cb71,0x0
c00135f7:	c6 05 70 cb 02 c0 01 	mov    BYTE PTR ds:0xc002cb70,0x1
c00135fe:	c3                   	ret    
c00135ff:	90                   	nop

c0013600 <Clock::Clock(char const*)>:
c0013600:	83 ec 0c             	sub    esp,0xc
c0013603:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013607:	83 ec 08             	sub    esp,0x8
c001360a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001360e:	50                   	push   eax
c001360f:	e8 44 07 00 00       	call   c0013d58 <Device::Device(char const*)>
c0013614:	83 c4 10             	add    esp,0x10
c0013617:	ba 84 94 02 c0       	mov    edx,0xc0029484
c001361c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013620:	89 10                	mov    DWORD PTR [eax],edx
c0013622:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013626:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013630:	90                   	nop
c0013631:	83 c4 0c             	add    esp,0xc
c0013634:	c3                   	ret    
c0013635:	90                   	nop

c0013636 <Clock::~Clock()>:
c0013636:	83 ec 0c             	sub    esp,0xc
c0013639:	ba 84 94 02 c0       	mov    edx,0xc0029484
c001363e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013642:	89 10                	mov    DWORD PTR [eax],edx
c0013644:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013648:	83 ec 0c             	sub    esp,0xc
c001364b:	50                   	push   eax
c001364c:	e8 e9 03 00 00       	call   c0013a3a <Device::~Device()>
c0013651:	83 c4 10             	add    esp,0x10
c0013654:	90                   	nop
c0013655:	83 c4 0c             	add    esp,0xc
c0013658:	c3                   	ret    
c0013659:	90                   	nop

c001365a <Clock::~Clock()>:
c001365a:	83 ec 0c             	sub    esp,0xc
c001365d:	83 ec 0c             	sub    esp,0xc
c0013660:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013664:	e8 cd ff ff ff       	call   c0013636 <Clock::~Clock()>
c0013669:	83 c4 10             	add    esp,0x10
c001366c:	83 ec 08             	sub    esp,0x8
c001366f:	68 58 01 00 00       	push   0x158
c0013674:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013678:	e8 1c f0 ff ff       	call   c0012699 <operator delete(void*, unsigned long)>
c001367d:	83 c4 10             	add    esp,0x10
c0013680:	83 c4 0c             	add    esp,0xc
c0013683:	c3                   	ret    

c0013684 <Clock::timeInSecondsLocal()>:
c0013684:	53                   	push   ebx
c0013685:	83 ec 14             	sub    esp,0x14
c0013688:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001368c:	8b 10                	mov    edx,DWORD PTR [eax]
c001368e:	50                   	push   eax
c001368f:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013692:	0f b6 0d 70 cb 02 c0 	movzx  ecx,BYTE PTR ds:0xc002cb70
c0013699:	03 0d 74 cb 02 c0    	add    ecx,DWORD PTR ds:0xc002cb74
c001369f:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00136a5:	89 cb                	mov    ebx,ecx
c00136a7:	c1 fb 1f             	sar    ebx,0x1f
c00136aa:	01 c8                	add    eax,ecx
c00136ac:	11 da                	adc    edx,ebx
c00136ae:	83 c4 10             	add    esp,0x10
c00136b1:	31 c9                	xor    ecx,ecx
c00136b3:	80 3d 71 cb 02 c0 00 	cmp    BYTE PTR ds:0xc002cb71,0x0
c00136ba:	74 05                	je     c00136c1 <Clock::timeInSecondsLocal()+0x3d>
c00136bc:	b9 08 07 00 00       	mov    ecx,0x708
c00136c1:	31 db                	xor    ebx,ebx
c00136c3:	01 c8                	add    eax,ecx
c00136c5:	11 da                	adc    edx,ebx
c00136c7:	83 c4 08             	add    esp,0x8
c00136ca:	5b                   	pop    ebx
c00136cb:	c3                   	ret    

c00136cc <Clock::setTimeInSecondsLocal(unsigned long long)>:
c00136cc:	57                   	push   edi
c00136cd:	56                   	push   esi
c00136ce:	53                   	push   ebx
c00136cf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00136d3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00136d7:	8b 01                	mov    eax,DWORD PTR [ecx]
c00136d9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00136dd:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c00136e0:	0f b6 05 70 cb 02 c0 	movzx  eax,BYTE PTR ds:0xc002cb70
c00136e7:	03 05 74 cb 02 c0    	add    eax,DWORD PTR ds:0xc002cb74
c00136ed:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c00136f3:	99                   	cdq    
c00136f4:	29 c6                	sub    esi,eax
c00136f6:	19 d7                	sbb    edi,edx
c00136f8:	89 f0                	mov    eax,esi
c00136fa:	89 fa                	mov    edx,edi
c00136fc:	31 f6                	xor    esi,esi
c00136fe:	80 3d 71 cb 02 c0 00 	cmp    BYTE PTR ds:0xc002cb71,0x0
c0013705:	74 05                	je     c001370c <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013707:	be 08 07 00 00       	mov    esi,0x708
c001370c:	31 ff                	xor    edi,edi
c001370e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013712:	29 f0                	sub    eax,esi
c0013714:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013718:	19 fa                	sbb    edx,edi
c001371a:	89 d8                	mov    eax,ebx
c001371c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013720:	5b                   	pop    ebx
c0013721:	5e                   	pop    esi
c0013722:	5f                   	pop    edi
c0013723:	ff e0                	jmp    eax

c0013725 <datetimeToSeconds(datetime_t)>:
c0013725:	55                   	push   ebp
c0013726:	57                   	push   edi
c0013727:	56                   	push   esi
c0013728:	53                   	push   ebx
c0013729:	83 ec 14             	sub    esp,0x14
c001372c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013730:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013734:	89 d3                	mov    ebx,edx
c0013736:	0f b6 c6             	movzx  eax,dh
c0013739:	c1 eb 10             	shr    ebx,0x10
c001373c:	48                   	dec    eax
c001373d:	66 81 eb 6c 07       	sub    bx,0x76c
c0013742:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013746:	0f b6 f5             	movzx  esi,ch
c0013749:	89 cf                	mov    edi,ecx
c001374b:	6b f6 3c             	imul   esi,esi,0x3c
c001374e:	c1 ef 10             	shr    edi,0x10
c0013751:	0f b6 c9             	movzx  ecx,cl
c0013754:	89 f8                	mov    eax,edi
c0013756:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001375c:	0f b6 f8             	movzx  edi,al
c001375f:	0f b6 d2             	movzx  edx,dl
c0013762:	01 fe                	add    esi,edi
c0013764:	01 f1                	add    ecx,esi
c0013766:	0f b7 f3             	movzx  esi,bx
c0013769:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001376d:	c1 f9 1f             	sar    ecx,0x1f
c0013770:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013775:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013779:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c001377e:	8b 0c 8d c0 94 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6b40]
c0013785:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013789:	76 29                	jbe    c00137b4 <datetimeToSeconds(datetime_t)+0x8f>
c001378b:	f6 c3 03             	test   bl,0x3
c001378e:	75 24                	jne    c00137b4 <datetimeToSeconds(datetime_t)+0x8f>
c0013790:	31 d2                	xor    edx,edx
c0013792:	bf 64 00 00 00       	mov    edi,0x64
c0013797:	89 d8                	mov    eax,ebx
c0013799:	66 f7 f7             	div    di
c001379c:	66 85 d2             	test   dx,dx
c001379f:	75 12                	jne    c00137b3 <datetimeToSeconds(datetime_t)+0x8e>
c00137a1:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c00137a7:	bf 90 01 00 00       	mov    edi,0x190
c00137ac:	99                   	cdq    
c00137ad:	f7 ff                	idiv   edi
c00137af:	85 d2                	test   edx,edx
c00137b1:	75 01                	jne    c00137b4 <datetimeToSeconds(datetime_t)+0x8f>
c00137b3:	41                   	inc    ecx
c00137b4:	66 83 fb 46          	cmp    bx,0x46
c00137b8:	76 45                	jbe    c00137ff <datetimeToSeconds(datetime_t)+0xda>
c00137ba:	bb 46 00 00 00       	mov    ebx,0x46
c00137bf:	bf 64 00 00 00       	mov    edi,0x64
c00137c4:	bd 90 01 00 00       	mov    ebp,0x190
c00137c9:	b8 6d 01 00 00       	mov    eax,0x16d
c00137ce:	f6 c3 03             	test   bl,0x3
c00137d1:	75 23                	jne    c00137f6 <datetimeToSeconds(datetime_t)+0xd1>
c00137d3:	89 d8                	mov    eax,ebx
c00137d5:	99                   	cdq    
c00137d6:	f7 ff                	idiv   edi
c00137d8:	b8 6e 01 00 00       	mov    eax,0x16e
c00137dd:	85 d2                	test   edx,edx
c00137df:	75 15                	jne    c00137f6 <datetimeToSeconds(datetime_t)+0xd1>
c00137e1:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c00137e7:	99                   	cdq    
c00137e8:	f7 fd                	idiv   ebp
c00137ea:	83 fa 01             	cmp    edx,0x1
c00137ed:	19 c0                	sbb    eax,eax
c00137ef:	f7 d0                	not    eax
c00137f1:	05 6e 01 00 00       	add    eax,0x16e
c00137f6:	01 c1                	add    ecx,eax
c00137f8:	43                   	inc    ebx
c00137f9:	39 f3                	cmp    ebx,esi
c00137fb:	7c cc                	jl     c00137c9 <datetimeToSeconds(datetime_t)+0xa4>
c00137fd:	eb 35                	jmp    c0013834 <datetimeToSeconds(datetime_t)+0x10f>
c00137ff:	74 33                	je     c0013834 <datetimeToSeconds(datetime_t)+0x10f>
c0013801:	b8 45 00 00 00       	mov    eax,0x45
c0013806:	89 c2                	mov    edx,eax
c0013808:	83 e2 03             	and    edx,0x3
c001380b:	39 f0                	cmp    eax,esi
c001380d:	7e 0f                	jle    c001381e <datetimeToSeconds(datetime_t)+0xf9>
c001380f:	83 fa 01             	cmp    edx,0x1
c0013812:	19 d2                	sbb    edx,edx
c0013814:	48                   	dec    eax
c0013815:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c001381c:	eb e8                	jmp    c0013806 <datetimeToSeconds(datetime_t)+0xe1>
c001381e:	b8 6d 01 00 00       	mov    eax,0x16d
c0013823:	85 d2                	test   edx,edx
c0013825:	75 0b                	jne    c0013832 <datetimeToSeconds(datetime_t)+0x10d>
c0013827:	66 83 fb 01          	cmp    bx,0x1
c001382b:	19 c0                	sbb    eax,eax
c001382d:	05 6e 01 00 00       	add    eax,0x16e
c0013832:	29 c1                	sub    ecx,eax
c0013834:	b8 80 51 01 00       	mov    eax,0x15180
c0013839:	f7 e9                	imul   ecx
c001383b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001383f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013843:	83 c4 14             	add    esp,0x14
c0013846:	5b                   	pop    ebx
c0013847:	5e                   	pop    esi
c0013848:	5f                   	pop    edi
c0013849:	5d                   	pop    ebp
c001384a:	c3                   	ret    
c001384b:	90                   	nop

c001384c <Clock::setTimeInDatetimeLocal(datetime_t)>:
c001384c:	57                   	push   edi
c001384d:	56                   	push   esi
c001384e:	53                   	push   ebx
c001384f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013853:	8b 06                	mov    eax,DWORD PTR [esi]
c0013855:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013858:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001385c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013860:	e8 c0 fe ff ff       	call   c0013725 <datetimeToSeconds(datetime_t)>
c0013865:	59                   	pop    ecx
c0013866:	0f b6 0d 70 cb 02 c0 	movzx  ecx,BYTE PTR ds:0xc002cb70
c001386d:	5b                   	pop    ebx
c001386e:	03 0d 74 cb 02 c0    	add    ecx,DWORD PTR ds:0xc002cb74
c0013874:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001387a:	89 cb                	mov    ebx,ecx
c001387c:	c1 fb 1f             	sar    ebx,0x1f
c001387f:	29 c8                	sub    eax,ecx
c0013881:	19 da                	sbb    edx,ebx
c0013883:	31 c9                	xor    ecx,ecx
c0013885:	80 3d 71 cb 02 c0 00 	cmp    BYTE PTR ds:0xc002cb71,0x0
c001388c:	74 05                	je     c0013893 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c001388e:	b9 08 07 00 00       	mov    ecx,0x708
c0013893:	31 db                	xor    ebx,ebx
c0013895:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013899:	29 c8                	sub    eax,ecx
c001389b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001389f:	19 da                	sbb    edx,ebx
c00138a1:	89 f8                	mov    eax,edi
c00138a3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00138a7:	5b                   	pop    ebx
c00138a8:	5e                   	pop    esi
c00138a9:	5f                   	pop    edi
c00138aa:	ff e0                	jmp    eax

c00138ac <secondsToDatetime(unsigned long long)>:
c00138ac:	55                   	push   ebp
c00138ad:	57                   	push   edi
c00138ae:	56                   	push   esi
c00138af:	53                   	push   ebx
c00138b0:	83 ec 1c             	sub    esp,0x1c
c00138b3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00138b7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00138bb:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00138bf:	6a 00                	push   0x0
c00138c1:	68 80 51 01 00       	push   0x15180
c00138c6:	55                   	push   ebp
c00138c7:	57                   	push   edi
c00138c8:	e8 5f 1b 01 00       	call   c002542c <__udivdi3>
c00138cd:	83 c4 10             	add    esp,0x10
c00138d0:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c00138d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00138da:	6a 00                	push   0x0
c00138dc:	68 80 51 01 00       	push   0x15180
c00138e1:	55                   	push   ebp
c00138e2:	57                   	push   edi
c00138e3:	bf 10 0e 00 00       	mov    edi,0xe10
c00138e8:	e8 3f 1c 01 00       	call   c002552c <__umoddi3>
c00138ed:	83 c4 10             	add    esp,0x10
c00138f0:	99                   	cdq    
c00138f1:	f7 ff                	idiv   edi
c00138f3:	bf 3c 00 00 00       	mov    edi,0x3c
c00138f8:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00138fb:	89 d0                	mov    eax,edx
c00138fd:	99                   	cdq    
c00138fe:	f7 ff                	idiv   edi
c0013900:	85 db                	test   ebx,ebx
c0013902:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0013905:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0013908:	79 11                	jns    c001391b <secondsToDatetime(unsigned long long)+0x6f>
c001390a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001390e:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0013914:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013919:	eb 07                	jmp    c0013922 <secondsToDatetime(unsigned long long)+0x76>
c001391b:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013920:	89 d8                	mov    eax,ebx
c0013922:	bf b4 05 00 00       	mov    edi,0x5b4
c0013927:	99                   	cdq    
c0013928:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c001392d:	f7 f9                	idiv   ecx
c001392f:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0013934:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013938:	31 d2                	xor    edx,edx
c001393a:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0013942:	01 c3                	add    ebx,eax
c0013944:	89 d8                	mov    eax,ebx
c0013946:	f7 f1                	div    ecx
c0013948:	31 d2                	xor    edx,edx
c001394a:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c001394d:	89 d8                	mov    eax,ebx
c001394f:	f7 f7                	div    edi
c0013951:	31 d2                	xor    edx,edx
c0013953:	29 c1                	sub    ecx,eax
c0013955:	89 d8                	mov    eax,ebx
c0013957:	f7 f5                	div    ebp
c0013959:	bd 6d 01 00 00       	mov    ebp,0x16d
c001395e:	29 c1                	sub    ecx,eax
c0013960:	31 d2                	xor    edx,edx
c0013962:	89 c8                	mov    eax,ecx
c0013964:	f7 f5                	div    ebp
c0013966:	bd 94 8e 00 00       	mov    ebp,0x8e94
c001396b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001396f:	31 d2                	xor    edx,edx
c0013971:	89 c8                	mov    eax,ecx
c0013973:	f7 f5                	div    ebp
c0013975:	31 d2                	xor    edx,edx
c0013977:	01 c3                	add    ebx,eax
c0013979:	89 c8                	mov    eax,ecx
c001397b:	f7 f7                	div    edi
c001397d:	bf 99 00 00 00       	mov    edi,0x99
c0013982:	29 c3                	sub    ebx,eax
c0013984:	31 d2                	xor    edx,edx
c0013986:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c001398e:	29 c3                	sub    ebx,eax
c0013990:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013993:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0013996:	bb 05 00 00 00       	mov    ebx,0x5
c001399b:	83 c1 02             	add    ecx,0x2
c001399e:	89 c8                	mov    eax,ecx
c00139a0:	f7 f7                	div    edi
c00139a2:	31 d2                	xor    edx,edx
c00139a4:	89 c7                	mov    edi,eax
c00139a6:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c00139ac:	83 c0 02             	add    eax,0x2
c00139af:	f7 f3                	div    ebx
c00139b1:	89 eb                	mov    ebx,ebp
c00139b3:	29 c3                	sub    ebx,eax
c00139b5:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c00139bb:	88 1e                	mov    BYTE PTR [esi],bl
c00139bd:	19 c0                	sbb    eax,eax
c00139bf:	31 d2                	xor    edx,edx
c00139c1:	83 e0 0c             	and    eax,0xc
c00139c4:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c00139c8:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c00139d0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00139d4:	83 f9 01             	cmp    ecx,0x1
c00139d7:	0f 96 c2             	setbe  dl
c00139da:	41                   	inc    ecx
c00139db:	01 d0                	add    eax,edx
c00139dd:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c00139e0:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c00139e4:	83 c4 1c             	add    esp,0x1c
c00139e7:	89 f0                	mov    eax,esi
c00139e9:	5b                   	pop    ebx
c00139ea:	5e                   	pop    esi
c00139eb:	5f                   	pop    edi
c00139ec:	5d                   	pop    ebp
c00139ed:	c2 04 00             	ret    0x4

c00139f0 <Clock::timeInDatetimeLocal()>:
c00139f0:	53                   	push   ebx
c00139f1:	83 ec 14             	sub    esp,0x14
c00139f4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00139f8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00139fc:	e8 83 fc ff ff       	call   c0013684 <Clock::timeInSecondsLocal()>
c0013a01:	83 c4 0c             	add    esp,0xc
c0013a04:	52                   	push   edx
c0013a05:	50                   	push   eax
c0013a06:	53                   	push   ebx
c0013a07:	e8 a0 fe ff ff       	call   c00138ac <secondsToDatetime(unsigned long long)>
c0013a0c:	89 d8                	mov    eax,ebx
c0013a0e:	83 c4 14             	add    esp,0x14
c0013a11:	5b                   	pop    ebx
c0013a12:	c2 04 00             	ret    0x4
c0013a15:	90                   	nop

c0013a16 <Device::hibernate()>:
c0013a16:	c3                   	ret    
c0013a17:	90                   	nop

c0013a18 <Device::wake()>:
c0013a18:	c3                   	ret    
c0013a19:	90                   	nop

c0013a1a <Device::detect()>:
c0013a1a:	c3                   	ret    
c0013a1b:	90                   	nop

c0013a1c <Device::disableLegacy()>:
c0013a1c:	c3                   	ret    
c0013a1d:	90                   	nop

c0013a1e <Device::powerSaving(PowerSavingLevel)>:
c0013a1e:	c3                   	ret    
c0013a1f:	90                   	nop

c0013a20 <DriverlessDevice::close(int, int, void*)>:
c0013a20:	31 c0                	xor    eax,eax
c0013a22:	c3                   	ret    
c0013a23:	90                   	nop

c0013a24 <DriverlessDevice::detect()>:
c0013a24:	c3                   	ret    
c0013a25:	90                   	nop

c0013a26 <DriverlessDevice::open(int, int, void*)>:
c0013a26:	83 ec 18             	sub    esp,0x18
c0013a29:	68 f0 94 02 c0       	push   0xc00294f0
c0013a2e:	e8 60 5e 00 00       	call   c0019893 <Krnl::panic(char const*)>
c0013a33:	83 c8 ff             	or     eax,0xffffffff
c0013a36:	83 c4 1c             	add    esp,0x1c
c0013a39:	c3                   	ret    

c0013a3a <Device::~Device()>:
c0013a3a:	ba 18 95 02 c0       	mov    edx,0xc0029518
c0013a3f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013a43:	89 10                	mov    DWORD PTR [eax],edx
c0013a45:	90                   	nop
c0013a46:	c3                   	ret    
c0013a47:	90                   	nop

c0013a48 <Device::~Device()>:
c0013a48:	83 ec 0c             	sub    esp,0xc
c0013a4b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013a4f:	e8 e6 ff ff ff       	call   c0013a3a <Device::~Device()>
c0013a54:	83 c4 04             	add    esp,0x4
c0013a57:	83 ec 08             	sub    esp,0x8
c0013a5a:	68 58 01 00 00       	push   0x158
c0013a5f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a63:	e8 31 ec ff ff       	call   c0012699 <operator delete(void*, unsigned long)>
c0013a68:	83 c4 10             	add    esp,0x10
c0013a6b:	83 c4 0c             	add    esp,0xc
c0013a6e:	c3                   	ret    
c0013a6f:	90                   	nop

c0013a70 <Device::findAndLoadDriver()>:
c0013a70:	c3                   	ret    
c0013a71:	90                   	nop

c0013a72 <Device::preOpenPCI(PCIDeviceInfo)>:
c0013a72:	57                   	push   edi
c0013a73:	b9 09 00 00 00       	mov    ecx,0x9
c0013a78:	56                   	push   esi
c0013a79:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013a7d:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013a81:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013a8b:	81 c7 18 01 00 00    	add    edi,0x118
c0013a91:	fc                   	cld    
c0013a92:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013a94:	5e                   	pop    esi
c0013a95:	5f                   	pop    edi
c0013a96:	c3                   	ret    
c0013a97:	90                   	nop

c0013a98 <Device::preOpenACPI(void*, char*, char*)>:
c0013a98:	56                   	push   esi
c0013a99:	53                   	push   ebx
c0013a9a:	83 ec 08             	sub    esp,0x8
c0013a9d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013aa1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0013aa5:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0013aaf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013ab3:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c0013ab9:	6a 1e                	push   0x1e
c0013abb:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0013ac1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013ac5:	81 c3 3a 01 00 00    	add    ebx,0x13a
c0013acb:	50                   	push   eax
c0013acc:	e8 84 cb fe ff       	call   c0000655 <memcpy>
c0013ad1:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0013ad5:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0013ad9:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c0013ae1:	83 c4 14             	add    esp,0x14
c0013ae4:	5b                   	pop    ebx
c0013ae5:	5e                   	pop    esi
c0013ae6:	e9 6a cb fe ff       	jmp    c0000655 <memcpy>
c0013aeb:	90                   	nop

c0013aec <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013aec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013af0:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013af5:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013afc:	75 0b                	jne    c0013b09 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0013afe:	8b 00                	mov    eax,DWORD PTR [eax]
c0013b00:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013b04:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013b07:	eb 1e                	jmp    c0013b27 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0013b09:	a1 e8 c9 02 c0       	mov    eax,ds:0xc002c9e8
c0013b0e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013b14:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013b1a:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013b1c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013b20:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013b24:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0013b27:	ff e0                	jmp    eax
c0013b29:	90                   	nop

c0013b2a <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013b2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013b2e:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013b33:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013b3a:	75 0b                	jne    c0013b47 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0013b3c:	8b 00                	mov    eax,DWORD PTR [eax]
c0013b3e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013b42:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013b45:	eb 1e                	jmp    c0013b65 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0013b47:	a1 e8 c9 02 c0       	mov    eax,ds:0xc002c9e8
c0013b4c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013b52:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013b58:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013b5a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013b5e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013b62:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0013b65:	ff e0                	jmp    eax
c0013b67:	90                   	nop

c0013b68 <Device::addChild(Device*)>:
c0013b68:	53                   	push   ebx
c0013b69:	83 ec 08             	sub    esp,0x8
c0013b6c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b70:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013b74:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013b7a:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013b80:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013b82:	85 d2                	test   edx,edx
c0013b84:	74 04                	je     c0013b8a <Device::addChild(Device*)+0x22>
c0013b86:	89 d3                	mov    ebx,edx
c0013b88:	eb f6                	jmp    c0013b80 <Device::addChild(Device*)+0x18>
c0013b8a:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013b8d:	83 ec 0c             	sub    esp,0xc
c0013b90:	6a 08                	push   0x8
c0013b92:	e8 3d b9 ff ff       	call   c000f4d4 <malloc>
c0013b97:	89 03                	mov    DWORD PTR [ebx],eax
c0013b99:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013b9f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013ba6:	83 c4 18             	add    esp,0x18
c0013ba9:	5b                   	pop    ebx
c0013baa:	c3                   	ret    
c0013bab:	90                   	nop

c0013bac <Device::removeAllChildren()>:
c0013bac:	56                   	push   esi
c0013bad:	53                   	push   ebx
c0013bae:	52                   	push   edx
c0013baf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013bb3:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0013bb9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013bbc:	74 17                	je     c0013bd5 <Device::removeAllChildren()+0x29>
c0013bbe:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013bc1:	85 c0                	test   eax,eax
c0013bc3:	74 0c                	je     c0013bd1 <Device::removeAllChildren()+0x25>
c0013bc5:	83 ec 0c             	sub    esp,0xc
c0013bc8:	8b 10                	mov    edx,DWORD PTR [eax]
c0013bca:	50                   	push   eax
c0013bcb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013bce:	83 c4 10             	add    esp,0x10
c0013bd1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013bd3:	eb e4                	jmp    c0013bb9 <Device::removeAllChildren()+0xd>
c0013bd5:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013bdb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013be1:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013be7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013bee:	58                   	pop    eax
c0013bef:	5b                   	pop    ebx
c0013bf0:	5e                   	pop    esi
c0013bf1:	c3                   	ret    

c0013bf2 <Device::hibernateAll()>:
c0013bf2:	53                   	push   ebx
c0013bf3:	83 ec 14             	sub    esp,0x14
c0013bf6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013bfa:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013bfc:	53                   	push   ebx
c0013bfd:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013c00:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013c06:	83 c4 10             	add    esp,0x10
c0013c09:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c0c:	74 0f                	je     c0013c1d <Device::hibernateAll()+0x2b>
c0013c0e:	83 ec 0c             	sub    esp,0xc
c0013c11:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013c14:	e8 d9 ff ff ff       	call   c0013bf2 <Device::hibernateAll()>
c0013c19:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c1b:	eb e9                	jmp    c0013c06 <Device::hibernateAll()+0x14>
c0013c1d:	83 c4 08             	add    esp,0x8
c0013c20:	5b                   	pop    ebx
c0013c21:	c3                   	ret    

c0013c22 <Device::wakeAll()>:
c0013c22:	53                   	push   ebx
c0013c23:	83 ec 14             	sub    esp,0x14
c0013c26:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013c2a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c2c:	53                   	push   ebx
c0013c2d:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013c30:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013c36:	83 c4 10             	add    esp,0x10
c0013c39:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c3c:	74 0f                	je     c0013c4d <Device::wakeAll()+0x2b>
c0013c3e:	83 ec 0c             	sub    esp,0xc
c0013c41:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013c44:	e8 d9 ff ff ff       	call   c0013c22 <Device::wakeAll()>
c0013c49:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c4b:	eb e9                	jmp    c0013c36 <Device::wakeAll()+0x14>
c0013c4d:	83 c4 08             	add    esp,0x8
c0013c50:	5b                   	pop    ebx
c0013c51:	c3                   	ret    

c0013c52 <Device::detectAll()>:
c0013c52:	53                   	push   ebx
c0013c53:	83 ec 14             	sub    esp,0x14
c0013c56:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013c5a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c5c:	53                   	push   ebx
c0013c5d:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013c60:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013c66:	83 c4 10             	add    esp,0x10
c0013c69:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c6c:	74 0f                	je     c0013c7d <Device::detectAll()+0x2b>
c0013c6e:	83 ec 0c             	sub    esp,0xc
c0013c71:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013c74:	e8 d9 ff ff ff       	call   c0013c52 <Device::detectAll()>
c0013c79:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c7b:	eb e9                	jmp    c0013c66 <Device::detectAll()+0x14>
c0013c7d:	83 c4 08             	add    esp,0x8
c0013c80:	5b                   	pop    ebx
c0013c81:	c3                   	ret    

c0013c82 <Device::disableLegacyAll()>:
c0013c82:	53                   	push   ebx
c0013c83:	83 ec 14             	sub    esp,0x14
c0013c86:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013c8a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c8c:	53                   	push   ebx
c0013c8d:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013c90:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013c96:	83 c4 10             	add    esp,0x10
c0013c99:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c9c:	74 0f                	je     c0013cad <Device::disableLegacyAll()+0x2b>
c0013c9e:	83 ec 0c             	sub    esp,0xc
c0013ca1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013ca4:	e8 d9 ff ff ff       	call   c0013c82 <Device::disableLegacyAll()>
c0013ca9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013cab:	eb e9                	jmp    c0013c96 <Device::disableLegacyAll()+0x14>
c0013cad:	83 c4 08             	add    esp,0x8
c0013cb0:	5b                   	pop    ebx
c0013cb1:	c3                   	ret    

c0013cb2 <Device::loadDriversForAll()>:
c0013cb2:	53                   	push   ebx
c0013cb3:	83 ec 08             	sub    esp,0x8
c0013cb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cba:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013cc0:	8b 18                	mov    ebx,DWORD PTR [eax]
c0013cc2:	85 db                	test   ebx,ebx
c0013cc4:	74 12                	je     c0013cd8 <Device::loadDriversForAll()+0x26>
c0013cc6:	83 ec 0c             	sub    esp,0xc
c0013cc9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0013ccc:	e8 e1 ff ff ff       	call   c0013cb2 <Device::loadDriversForAll()>
c0013cd1:	83 c4 10             	add    esp,0x10
c0013cd4:	89 d8                	mov    eax,ebx
c0013cd6:	eb e8                	jmp    c0013cc0 <Device::loadDriversForAll()+0xe>
c0013cd8:	83 c4 08             	add    esp,0x8
c0013cdb:	5b                   	pop    ebx
c0013cdc:	c3                   	ret    
c0013cdd:	90                   	nop

c0013cde <Device::closeAll()>:
c0013cde:	53                   	push   ebx
c0013cdf:	83 ec 08             	sub    esp,0x8
c0013ce2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013ce6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013ce8:	6a 00                	push   0x0
c0013cea:	6a 00                	push   0x0
c0013cec:	6a 00                	push   0x0
c0013cee:	53                   	push   ebx
c0013cef:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013cf2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013cf8:	83 c4 10             	add    esp,0x10
c0013cfb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013cfe:	74 0f                	je     c0013d0f <Device::closeAll()+0x31>
c0013d00:	83 ec 0c             	sub    esp,0xc
c0013d03:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013d06:	e8 d3 ff ff ff       	call   c0013cde <Device::closeAll()>
c0013d0b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013d0d:	eb e9                	jmp    c0013cf8 <Device::closeAll()+0x1a>
c0013d0f:	83 c4 08             	add    esp,0x8
c0013d12:	5b                   	pop    ebx
c0013d13:	c3                   	ret    

c0013d14 <Device::powerSavingAll(PowerSavingLevel)>:
c0013d14:	56                   	push   esi
c0013d15:	53                   	push   ebx
c0013d16:	83 ec 0c             	sub    esp,0xc
c0013d19:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013d1d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013d21:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d23:	56                   	push   esi
c0013d24:	53                   	push   ebx
c0013d25:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0013d28:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013d2e:	83 c4 10             	add    esp,0x10
c0013d31:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013d34:	74 0f                	je     c0013d45 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013d36:	52                   	push   edx
c0013d37:	52                   	push   edx
c0013d38:	56                   	push   esi
c0013d39:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013d3c:	e8 d3 ff ff ff       	call   c0013d14 <Device::powerSavingAll(PowerSavingLevel)>
c0013d41:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013d43:	eb e9                	jmp    c0013d2e <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0013d45:	58                   	pop    eax
c0013d46:	5b                   	pop    ebx
c0013d47:	5e                   	pop    esi
c0013d48:	c3                   	ret    
c0013d49:	90                   	nop

c0013d4a <Device::setName(char const*)>:
c0013d4a:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013d52:	e9 d3 c9 fe ff       	jmp    c000072a <strcpy>
c0013d57:	90                   	nop

c0013d58 <Device::Device(char const*)>:
c0013d58:	83 ec 1c             	sub    esp,0x1c
c0013d5b:	ba 18 95 02 c0       	mov    edx,0xc0029518
c0013d60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d64:	89 10                	mov    DWORD PTR [eax],edx
c0013d66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d6a:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0013d74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d78:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013d82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d86:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013d90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d94:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013d9e:	83 ec 08             	sub    esp,0x8
c0013da1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013da5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013da9:	e8 9c ff ff ff       	call   c0013d4a <Device::setName(char const*)>
c0013dae:	83 c4 10             	add    esp,0x10
c0013db1:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0013db9:	83 ec 0c             	sub    esp,0xc
c0013dbc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013dc0:	e8 0f b7 ff ff       	call   c000f4d4 <malloc>
c0013dc5:	83 c4 10             	add    esp,0x10
c0013dc8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013dce:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013dd5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013dd9:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0013ddf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013de3:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013de9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013def:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013df3:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013df9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013e00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e04:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0013e0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e0f:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0013e16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e1a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013e24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e28:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013e32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e36:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013e40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e44:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0013e4e:	90                   	nop
c0013e4f:	83 c4 1c             	add    esp,0x1c
c0013e52:	c3                   	ret    
c0013e53:	90                   	nop

c0013e54 <Device::getName()>:
c0013e54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013e58:	05 d0 00 00 00       	add    eax,0xd0
c0013e5d:	c3                   	ret    

c0013e5e <DriverlessDevice::DriverlessDevice(char const*)>:
c0013e5e:	83 ec 0c             	sub    esp,0xc
c0013e61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e65:	83 ec 08             	sub    esp,0x8
c0013e68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e6c:	50                   	push   eax
c0013e6d:	e8 e6 fe ff ff       	call   c0013d58 <Device::Device(char const*)>
c0013e72:	83 c4 10             	add    esp,0x10
c0013e75:	ba 44 95 02 c0       	mov    edx,0xc0029544
c0013e7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e7e:	89 10                	mov    DWORD PTR [eax],edx
c0013e80:	90                   	nop
c0013e81:	83 c4 0c             	add    esp,0xc
c0013e84:	c3                   	ret    
c0013e85:	90                   	nop

c0013e86 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0013e86:	57                   	push   edi
c0013e87:	56                   	push   esi
c0013e88:	53                   	push   ebx
c0013e89:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013e8d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013e91:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013e95:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0013e9b:	75 0c                	jne    c0013ea9 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0013e9d:	52                   	push   edx
c0013e9e:	52                   	push   edx
c0013e9f:	53                   	push   ebx
c0013ea0:	56                   	push   esi
c0013ea1:	e8 c4 34 01 00       	call   c002736a <LinkedList<Device>::addElement(Device*)>
c0013ea6:	83 c4 10             	add    esp,0x10
c0013ea9:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013eaf:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013eb2:	74 12                	je     c0013ec6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0013eb4:	50                   	push   eax
c0013eb5:	57                   	push   edi
c0013eb6:	56                   	push   esi
c0013eb7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013eba:	e8 c7 ff ff ff       	call   c0013e86 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013ebf:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013ec1:	83 c4 10             	add    esp,0x10
c0013ec4:	eb e9                	jmp    c0013eaf <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0013ec6:	5b                   	pop    ebx
c0013ec7:	5e                   	pop    esi
c0013ec8:	5f                   	pop    edi
c0013ec9:	c3                   	ret    

c0013eca <getDevicesOfType(DeviceType)>:
c0013eca:	53                   	push   ebx
c0013ecb:	83 ec 14             	sub    esp,0x14
c0013ece:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013ed2:	53                   	push   ebx
c0013ed3:	e8 6e 35 01 00       	call   c0027446 <LinkedList<Device>::LinkedList()>
c0013ed8:	83 c4 0c             	add    esp,0xc
c0013edb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013edf:	53                   	push   ebx
c0013ee0:	ff 35 e8 c9 02 c0    	push   DWORD PTR ds:0xc002c9e8
c0013ee6:	e8 9b ff ff ff       	call   c0013e86 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013eeb:	89 d8                	mov    eax,ebx
c0013eed:	83 c4 18             	add    esp,0x18
c0013ef0:	5b                   	pop    ebx
c0013ef1:	c2 04 00             	ret    0x4

c0013ef4 <HardDiskController::HardDiskController(char const*)>:
c0013ef4:	83 ec 0c             	sub    esp,0xc
c0013ef7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013efb:	83 ec 08             	sub    esp,0x8
c0013efe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f02:	50                   	push   eax
c0013f03:	e8 50 fe ff ff       	call   c0013d58 <Device::Device(char const*)>
c0013f08:	83 c4 10             	add    esp,0x10
c0013f0b:	ba 70 95 02 c0       	mov    edx,0xc0029570
c0013f10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f14:	89 10                	mov    DWORD PTR [eax],edx
c0013f16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f1a:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0013f24:	90                   	nop
c0013f25:	83 c4 0c             	add    esp,0xc
c0013f28:	c3                   	ret    
c0013f29:	90                   	nop

c0013f2a <HardDiskController::~HardDiskController()>:
c0013f2a:	83 ec 0c             	sub    esp,0xc
c0013f2d:	ba 70 95 02 c0       	mov    edx,0xc0029570
c0013f32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f36:	89 10                	mov    DWORD PTR [eax],edx
c0013f38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f3c:	83 ec 0c             	sub    esp,0xc
c0013f3f:	50                   	push   eax
c0013f40:	e8 f5 fa ff ff       	call   c0013a3a <Device::~Device()>
c0013f45:	83 c4 10             	add    esp,0x10
c0013f48:	90                   	nop
c0013f49:	83 c4 0c             	add    esp,0xc
c0013f4c:	c3                   	ret    
c0013f4d:	90                   	nop

c0013f4e <HardDiskController::~HardDiskController()>:
c0013f4e:	83 ec 0c             	sub    esp,0xc
c0013f51:	83 ec 0c             	sub    esp,0xc
c0013f54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f58:	e8 cd ff ff ff       	call   c0013f2a <HardDiskController::~HardDiskController()>
c0013f5d:	83 c4 10             	add    esp,0x10
c0013f60:	83 ec 08             	sub    esp,0x8
c0013f63:	68 58 01 00 00       	push   0x158
c0013f68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f6c:	e8 28 e7 ff ff       	call   c0012699 <operator delete(void*, unsigned long)>
c0013f71:	83 c4 10             	add    esp,0x10
c0013f74:	83 c4 0c             	add    esp,0xc
c0013f77:	c3                   	ret    

c0013f78 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0013f78:	83 ec 0c             	sub    esp,0xc
c0013f7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f7f:	83 ec 08             	sub    esp,0x8
c0013f82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f86:	50                   	push   eax
c0013f87:	e8 cc fd ff ff       	call   c0013d58 <Device::Device(char const*)>
c0013f8c:	83 c4 10             	add    esp,0x10
c0013f8f:	ba 9c 95 02 c0       	mov    edx,0xc002959c
c0013f94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f98:	89 10                	mov    DWORD PTR [eax],edx
c0013f9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f9e:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0013fa5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fa9:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0013fb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fb4:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0013fbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fc2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013fc6:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0013fcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fd0:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013fda:	90                   	nop
c0013fdb:	83 c4 0c             	add    esp,0xc
c0013fde:	c3                   	ret    
c0013fdf:	90                   	nop

c0013fe0 <PhysicalDisk::startCache()>:
c0013fe0:	56                   	push   esi
c0013fe1:	53                   	push   ebx
c0013fe2:	83 ec 10             	sub    esp,0x10
c0013fe5:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013fe9:	6a 30                	push   0x30
c0013feb:	e8 e4 b4 ff ff       	call   c000f4d4 <malloc>
c0013ff0:	89 c6                	mov    esi,eax
c0013ff2:	58                   	pop    eax
c0013ff3:	5a                   	pop    edx
c0013ff4:	53                   	push   ebx
c0013ff5:	56                   	push   esi
c0013ff6:	e8 dd 25 00 00       	call   c00165d8 <VCache::VCache(PhysicalDisk*)>
c0013ffb:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0014001:	83 c4 14             	add    esp,0x14
c0014004:	5b                   	pop    ebx
c0014005:	5e                   	pop    esi
c0014006:	c3                   	ret    
c0014007:	90                   	nop

c0014008 <PhysicalDisk::~PhysicalDisk()>:
c0014008:	83 ec 0c             	sub    esp,0xc
c001400b:	ba 9c 95 02 c0       	mov    edx,0xc002959c
c0014010:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014014:	89 10                	mov    DWORD PTR [eax],edx
c0014016:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001401a:	83 ec 0c             	sub    esp,0xc
c001401d:	50                   	push   eax
c001401e:	e8 17 fa ff ff       	call   c0013a3a <Device::~Device()>
c0014023:	83 c4 10             	add    esp,0x10
c0014026:	90                   	nop
c0014027:	83 c4 0c             	add    esp,0xc
c001402a:	c3                   	ret    
c001402b:	90                   	nop

c001402c <PhysicalDisk::~PhysicalDisk()>:
c001402c:	83 ec 0c             	sub    esp,0xc
c001402f:	83 ec 0c             	sub    esp,0xc
c0014032:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014036:	e8 cd ff ff ff       	call   c0014008 <PhysicalDisk::~PhysicalDisk()>
c001403b:	83 c4 10             	add    esp,0x10
c001403e:	83 ec 08             	sub    esp,0x8
c0014041:	68 6c 01 00 00       	push   0x16c
c0014046:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001404a:	e8 4a e6 ff ff       	call   c0012699 <operator delete(void*, unsigned long)>
c001404f:	83 c4 10             	add    esp,0x10
c0014052:	83 c4 0c             	add    esp,0xc
c0014055:	c3                   	ret    

c0014056 <FPU::FPU(char const*)>:
c0014056:	83 ec 0c             	sub    esp,0xc
c0014059:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001405d:	83 ec 08             	sub    esp,0x8
c0014060:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014064:	50                   	push   eax
c0014065:	e8 ee fc ff ff       	call   c0013d58 <Device::Device(char const*)>
c001406a:	83 c4 10             	add    esp,0x10
c001406d:	ba dc 95 02 c0       	mov    edx,0xc00295dc
c0014072:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014076:	89 10                	mov    DWORD PTR [eax],edx
c0014078:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001407c:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0014086:	90                   	nop
c0014087:	83 c4 0c             	add    esp,0xc
c001408a:	c3                   	ret    
c001408b:	90                   	nop

c001408c <FPU::~FPU()>:
c001408c:	83 ec 0c             	sub    esp,0xc
c001408f:	ba dc 95 02 c0       	mov    edx,0xc00295dc
c0014094:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014098:	89 10                	mov    DWORD PTR [eax],edx
c001409a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001409e:	83 ec 0c             	sub    esp,0xc
c00140a1:	50                   	push   eax
c00140a2:	e8 93 f9 ff ff       	call   c0013a3a <Device::~Device()>
c00140a7:	83 c4 10             	add    esp,0x10
c00140aa:	90                   	nop
c00140ab:	83 c4 0c             	add    esp,0xc
c00140ae:	c3                   	ret    
c00140af:	90                   	nop

c00140b0 <FPU::~FPU()>:
c00140b0:	83 ec 0c             	sub    esp,0xc
c00140b3:	83 ec 0c             	sub    esp,0xc
c00140b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140ba:	e8 cd ff ff ff       	call   c001408c <FPU::~FPU()>
c00140bf:	83 c4 10             	add    esp,0x10
c00140c2:	83 ec 08             	sub    esp,0x8
c00140c5:	68 58 01 00 00       	push   0x158
c00140ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140ce:	e8 c6 e5 ff ff       	call   c0012699 <operator delete(void*, unsigned long)>
c00140d3:	83 c4 10             	add    esp,0x10
c00140d6:	83 c4 0c             	add    esp,0xc
c00140d9:	c3                   	ret    

c00140da <setupFPU()>:
c00140da:	53                   	push   ebx
c00140db:	83 ec 08             	sub    esp,0x8
c00140de:	8b 15 e8 c9 02 c0    	mov    edx,DWORD PTR ds:0xc002c9e8
c00140e4:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c00140eb:	74 19                	je     c0014106 <setupFPU()+0x2c>
c00140ed:	83 ec 0c             	sub    esp,0xc
c00140f0:	68 58 01 00 00       	push   0x158
c00140f5:	e8 da b3 ff ff       	call   c000f4d4 <malloc>
c00140fa:	89 c3                	mov    ebx,eax
c00140fc:	89 04 24             	mov    DWORD PTR [esp],eax
c00140ff:	e8 aa fe 00 00       	call   c0023fae <AVX::AVX()>
c0014104:	eb 5b                	jmp    c0014161 <setupFPU()+0x87>
c0014106:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c001410c:	84 c0                	test   al,al
c001410e:	79 19                	jns    c0014129 <setupFPU()+0x4f>
c0014110:	83 ec 0c             	sub    esp,0xc
c0014113:	68 58 01 00 00       	push   0x158
c0014118:	e8 b7 b3 ff ff       	call   c000f4d4 <malloc>
c001411d:	89 c3                	mov    ebx,eax
c001411f:	89 04 24             	mov    DWORD PTR [esp],eax
c0014122:	e8 ad ff 00 00       	call   c00240d4 <SSE::SSE()>
c0014127:	eb 38                	jmp    c0014161 <setupFPU()+0x87>
c0014129:	a8 20                	test   al,0x20
c001412b:	74 19                	je     c0014146 <setupFPU()+0x6c>
c001412d:	83 ec 0c             	sub    esp,0xc
c0014130:	68 58 01 00 00       	push   0x158
c0014135:	e8 9a b3 ff ff       	call   c000f4d4 <malloc>
c001413a:	89 c3                	mov    ebx,eax
c001413c:	89 04 24             	mov    DWORD PTR [esp],eax
c001413f:	e8 fa fe 00 00       	call   c002403e <MMX::MMX()>
c0014144:	eb 1b                	jmp    c0014161 <setupFPU()+0x87>
c0014146:	a8 10                	test   al,0x10
c0014148:	74 1c                	je     c0014166 <setupFPU()+0x8c>
c001414a:	83 ec 0c             	sub    esp,0xc
c001414d:	68 58 01 00 00       	push   0x158
c0014152:	e8 7d b3 ff ff       	call   c000f4d4 <malloc>
c0014157:	89 c3                	mov    ebx,eax
c0014159:	89 04 24             	mov    DWORD PTR [esp],eax
c001415c:	e8 01 00 01 00       	call   c0024162 <x87::x87()>
c0014161:	83 c4 10             	add    esp,0x10
c0014164:	eb 24                	jmp    c001418a <setupFPU()+0xb0>
c0014166:	83 e0 ef             	and    eax,0xffffffef
c0014169:	83 ec 0c             	sub    esp,0xc
c001416c:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0014172:	68 c8 95 02 c0       	push   0xc00295c8
c0014177:	e8 fd e5 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c001417c:	0f 20 c0             	mov    eax,cr0
c001417f:	83 c8 04             	or     eax,0x4
c0014182:	0f 22 c0             	mov    cr0,eax
c0014185:	31 db                	xor    ebx,ebx
c0014187:	83 c4 10             	add    esp,0x10
c001418a:	89 d8                	mov    eax,ebx
c001418c:	83 c4 08             	add    esp,0x8
c001418f:	5b                   	pop    ebx
c0014190:	c3                   	ret    
c0014191:	90                   	nop

c0014192 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0014192:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014196:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001419a:	c1 e0 04             	shl    eax,0x4
c001419d:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00141a1:	8d 50 10             	lea    edx,[eax+0x10]
c00141a4:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c00141aa:	74 08                	je     c00141b4 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c00141ac:	83 c0 04             	add    eax,0x4
c00141af:	39 d0                	cmp    eax,edx
c00141b1:	75 f1                	jne    c00141a4 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c00141b3:	c3                   	ret    
c00141b4:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00141be:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00141c8:	eb e2                	jmp    c00141ac <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c00141ca <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c00141ca:	57                   	push   edi
c00141cb:	31 c0                	xor    eax,eax
c00141cd:	56                   	push   esi
c00141ce:	53                   	push   ebx
c00141cf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00141d3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00141d7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00141db:	89 da                	mov    edx,ebx
c00141dd:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00141e1:	c1 e2 04             	shl    edx,0x4
c00141e4:	01 ca                	add    edx,ecx
c00141e6:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00141ee:	74 16                	je     c0014206 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c00141f0:	40                   	inc    eax
c00141f1:	83 f8 04             	cmp    eax,0x4
c00141f4:	75 f0                	jne    c00141e6 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c00141f6:	c7 44 24 10 0c 96 02 c0 	mov    DWORD PTR [esp+0x10],0xc002960c
c00141fe:	5b                   	pop    ebx
c00141ff:	5e                   	pop    esi
c0014200:	5f                   	pop    edi
c0014201:	e9 8d 56 00 00       	jmp    c0019893 <Krnl::panic(char const*)>
c0014206:	8d 04 98             	lea    eax,[eax+ebx*4]
c0014209:	8d 04 81             	lea    eax,[ecx+eax*4]
c001420c:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0014212:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0014218:	5b                   	pop    ebx
c0014219:	5e                   	pop    esi
c001421a:	5f                   	pop    edi
c001421b:	c3                   	ret    

c001421c <doubleFault(regs*, void*)>:
c001421c:	55                   	push   ebp
c001421d:	89 e5                	mov    ebp,esp
c001421f:	83 ec 08             	sub    esp,0x8
c0014222:	83 ec 0c             	sub    esp,0xc
c0014225:	68 47 96 02 c0       	push   0xc0029647
c001422a:	e8 64 56 00 00       	call   c0019893 <Krnl::panic(char const*)>
c001422f:	83 c4 10             	add    esp,0x10
c0014232:	90                   	nop
c0014233:	c9                   	leave  
c0014234:	c3                   	ret    
c0014235:	90                   	nop

c0014236 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014236:	56                   	push   esi
c0014237:	53                   	push   ebx
c0014238:	50                   	push   eax
c0014239:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001423d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014241:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014246:	75 35                	jne    c001427d <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0014248:	8d 43 20             	lea    eax,[ebx+0x20]
c001424b:	31 d2                	xor    edx,edx
c001424d:	89 c1                	mov    ecx,eax
c001424f:	c1 e1 04             	shl    ecx,0x4
c0014252:	01 f1                	add    ecx,esi
c0014254:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c001425c:	74 3e                	je     c001429c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c001425e:	42                   	inc    edx
c001425f:	83 fa 04             	cmp    edx,0x4
c0014262:	75 f0                	jne    c0014254 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014264:	83 ec 0c             	sub    esp,0xc
c0014267:	68 8c 96 02 c0       	push   0xc002968c
c001426c:	e8 22 56 00 00       	call   c0019893 <Krnl::panic(char const*)>
c0014271:	83 c4 10             	add    esp,0x10
c0014274:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014279:	5a                   	pop    edx
c001427a:	5b                   	pop    ebx
c001427b:	5e                   	pop    esi
c001427c:	c3                   	ret    
c001427d:	83 ec 0c             	sub    esp,0xc
c0014280:	56                   	push   esi
c0014281:	e8 ce fb ff ff       	call   c0013e54 <Device::getName()>
c0014286:	83 c4 10             	add    esp,0x10
c0014289:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001428c:	75 ba                	jne    c0014248 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c001428e:	83 fb 0f             	cmp    ebx,0xf
c0014291:	7f 29                	jg     c00142bc <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014293:	0f b6 9b 40 bc 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd43c0]
c001429a:	eb ac                	jmp    c0014248 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c001429c:	8d 04 82             	lea    eax,[edx+eax*4]
c001429f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00142a3:	8d 04 86             	lea    eax,[esi+eax*4]
c00142a6:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00142ac:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00142b0:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c00142b6:	89 d8                	mov    eax,ebx
c00142b8:	5a                   	pop    edx
c00142b9:	5b                   	pop    ebx
c00142ba:	5e                   	pop    esi
c00142bb:	c3                   	ret    
c00142bc:	83 ec 0c             	sub    esp,0xc
c00142bf:	68 54 96 02 c0       	push   0xc0029654
c00142c4:	e8 ca 55 00 00       	call   c0019893 <Krnl::panic(char const*)>
c00142c9:	83 c4 10             	add    esp,0x10
c00142cc:	e9 77 ff ff ff       	jmp    c0014248 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00142d1:	90                   	nop

c00142d2 <InterruptController::clearAllHandlers(int, bool)>:
c00142d2:	56                   	push   esi
c00142d3:	53                   	push   ebx
c00142d4:	52                   	push   edx
c00142d5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00142d9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00142dd:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00142e2:	75 61                	jne    c0014345 <InterruptController::clearAllHandlers(int, bool)+0x73>
c00142e4:	8d 46 20             	lea    eax,[esi+0x20]
c00142e7:	c1 e6 04             	shl    esi,0x4
c00142ea:	c1 e0 04             	shl    eax,0x4
c00142ed:	01 de                	add    esi,ebx
c00142ef:	01 d8                	add    eax,ebx
c00142f1:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c00142fb:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014305:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c001430f:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014319:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014323:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c001432d:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014337:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014341:	58                   	pop    eax
c0014342:	5b                   	pop    ebx
c0014343:	5e                   	pop    esi
c0014344:	c3                   	ret    
c0014345:	83 ec 0c             	sub    esp,0xc
c0014348:	53                   	push   ebx
c0014349:	e8 06 fb ff ff       	call   c0013e54 <Device::getName()>
c001434e:	83 c4 10             	add    esp,0x10
c0014351:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014354:	75 8e                	jne    c00142e4 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014356:	83 fe 0f             	cmp    esi,0xf
c0014359:	7f 09                	jg     c0014364 <InterruptController::clearAllHandlers(int, bool)+0x92>
c001435b:	0f b6 b6 40 bc 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd43c0]
c0014362:	eb 80                	jmp    c00142e4 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014364:	83 ec 0c             	sub    esp,0xc
c0014367:	68 c8 96 02 c0       	push   0xc00296c8
c001436c:	e8 22 55 00 00       	call   c0019893 <Krnl::panic(char const*)>
c0014371:	83 c4 10             	add    esp,0x10
c0014374:	e9 6b ff ff ff       	jmp    c00142e4 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014379:	90                   	nop

c001437a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c001437a:	56                   	push   esi
c001437b:	53                   	push   ebx
c001437c:	52                   	push   edx
c001437d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014381:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014385:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c001438a:	75 3a                	jne    c00143c6 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c001438c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014390:	8d 50 20             	lea    edx,[eax+0x20]
c0014393:	c1 e2 04             	shl    edx,0x4
c0014396:	8d 04 16             	lea    eax,[esi+edx*1]
c0014399:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c001439d:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c00143a3:	74 0b                	je     c00143b0 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c00143a5:	83 c0 04             	add    eax,0x4
c00143a8:	39 d0                	cmp    eax,edx
c00143aa:	75 f1                	jne    c001439d <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c00143ac:	58                   	pop    eax
c00143ad:	5b                   	pop    ebx
c00143ae:	5e                   	pop    esi
c00143af:	c3                   	ret    
c00143b0:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00143ba:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00143c4:	eb df                	jmp    c00143a5 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c00143c6:	83 ec 0c             	sub    esp,0xc
c00143c9:	56                   	push   esi
c00143ca:	e8 85 fa ff ff       	call   c0013e54 <Device::getName()>
c00143cf:	83 c4 10             	add    esp,0x10
c00143d2:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00143d5:	75 b5                	jne    c001438c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00143d7:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c00143dc:	7f 11                	jg     c00143ef <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c00143de:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00143e2:	0f b6 80 40 bc 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd43c0]
c00143e9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00143ed:	eb 9d                	jmp    c001438c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00143ef:	83 ec 0c             	sub    esp,0xc
c00143f2:	68 c8 96 02 c0       	push   0xc00296c8
c00143f7:	e8 97 54 00 00       	call   c0019893 <Krnl::panic(char const*)>
c00143fc:	83 c4 10             	add    esp,0x10
c00143ff:	eb 8b                	jmp    c001438c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014401 <nmiHandler(regs*, void*)>:
c0014401:	a1 e8 c9 02 c0       	mov    eax,ds:0xc002c9e8
c0014406:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001440a:	e9 11 a8 ff ff       	jmp    c000ec20 <Computer::handleNMI()>

c001440f <int_handler>:
c001440f:	55                   	push   ebp
c0014410:	57                   	push   edi
c0014411:	56                   	push   esi
c0014412:	53                   	push   ebx
c0014413:	83 ec 0c             	sub    esp,0xc
c0014416:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001441a:	80 3d 20 d5 02 c0 00 	cmp    BYTE PTR ds:0xc002d520,0x0
c0014421:	74 0b                	je     c001442e <int_handler+0x1f>
c0014423:	fa                   	cli    
c0014424:	f4                   	hlt    
c0014425:	80 3d 20 d5 02 c0 00 	cmp    BYTE PTR ds:0xc002d520,0x0
c001442c:	75 f5                	jne    c0014423 <int_handler+0x14>
c001442e:	a1 e8 c9 02 c0       	mov    eax,ds:0xc002c9e8
c0014433:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014436:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001443c:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014442:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014445:	83 f8 17             	cmp    eax,0x17
c0014448:	77 13                	ja     c001445d <int_handler+0x4e>
c001444a:	83 ec 08             	sub    esp,0x8
c001444d:	8b 17                	mov    edx,DWORD PTR [edi]
c001444f:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014452:	0f b6 c0             	movzx  eax,al
c0014455:	50                   	push   eax
c0014456:	57                   	push   edi
c0014457:	ff 52 38             	call   DWORD PTR [edx+0x38]
c001445a:	83 c4 10             	add    esp,0x10
c001445d:	83 c3 15             	add    ebx,0x15
c0014460:	c1 e3 04             	shl    ebx,0x4
c0014463:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014467:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c001446e:	31 db                	xor    ebx,ebx
c0014470:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014474:	85 c0                	test   eax,eax
c0014476:	74 13                	je     c001448b <int_handler+0x7c>
c0014478:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c001447b:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c001447f:	74 1c                	je     c001449d <int_handler+0x8e>
c0014481:	83 ec 08             	sub    esp,0x8
c0014484:	52                   	push   edx
c0014485:	56                   	push   esi
c0014486:	ff d0                	call   eax
c0014488:	83 c4 10             	add    esp,0x10
c001448b:	43                   	inc    ebx
c001448c:	83 fb 04             	cmp    ebx,0x4
c001448f:	75 df                	jne    c0014470 <int_handler+0x61>
c0014491:	83 c4 0c             	add    esp,0xc
c0014494:	31 c0                	xor    eax,eax
c0014496:	5b                   	pop    ebx
c0014497:	31 d2                	xor    edx,edx
c0014499:	5e                   	pop    esi
c001449a:	5f                   	pop    edi
c001449b:	5d                   	pop    ebp
c001449c:	c3                   	ret    
c001449d:	83 ec 08             	sub    esp,0x8
c00144a0:	52                   	push   edx
c00144a1:	56                   	push   esi
c00144a2:	ff d0                	call   eax
c00144a4:	83 c4 10             	add    esp,0x10
c00144a7:	83 c4 0c             	add    esp,0xc
c00144aa:	5b                   	pop    ebx
c00144ab:	5e                   	pop    esi
c00144ac:	5f                   	pop    edi
c00144ad:	5d                   	pop    ebp
c00144ae:	c3                   	ret    
c00144af:	90                   	nop

c00144b0 <InterruptController::InterruptController(char const*)>:
c00144b0:	83 ec 1c             	sub    esp,0x1c
c00144b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144b7:	83 ec 08             	sub    esp,0x8
c00144ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00144be:	50                   	push   eax
c00144bf:	e8 94 f8 ff ff       	call   c0013d58 <Device::Device(char const*)>
c00144c4:	83 c4 10             	add    esp,0x10
c00144c7:	ba fc 98 02 c0       	mov    edx,0xc00298fc
c00144cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144d0:	89 10                	mov    DWORD PTR [eax],edx
c00144d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144d6:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c00144e0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00144e8:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00144f0:	7f 5e                	jg     c0014550 <InterruptController::InterruptController(char const*)+0xa0>
c00144f2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00144fa:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c00144ff:	7f 49                	jg     c001454a <InterruptController::InterruptController(char const*)+0x9a>
c0014501:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014505:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014509:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014510:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014514:	01 ca                	add    edx,ecx
c0014516:	83 c2 54             	add    edx,0x54
c0014519:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014521:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014525:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014529:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014530:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014534:	01 ca                	add    edx,ecx
c0014536:	81 c2 54 04 00 00    	add    edx,0x454
c001453c:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014544:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014548:	eb b0                	jmp    c00144fa <InterruptController::InterruptController(char const*)+0x4a>
c001454a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001454e:	eb 98                	jmp    c00144e8 <InterruptController::InterruptController(char const*)+0x38>
c0014550:	90                   	nop
c0014551:	83 c4 1c             	add    esp,0x1c
c0014554:	c3                   	ret    
c0014555:	90                   	nop

c0014556 <InterruptController::~InterruptController()>:
c0014556:	83 ec 0c             	sub    esp,0xc
c0014559:	ba fc 98 02 c0       	mov    edx,0xc00298fc
c001455e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014562:	89 10                	mov    DWORD PTR [eax],edx
c0014564:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014568:	83 ec 0c             	sub    esp,0xc
c001456b:	50                   	push   eax
c001456c:	e8 c9 f4 ff ff       	call   c0013a3a <Device::~Device()>
c0014571:	83 c4 10             	add    esp,0x10
c0014574:	90                   	nop
c0014575:	83 c4 0c             	add    esp,0xc
c0014578:	c3                   	ret    
c0014579:	90                   	nop

c001457a <InterruptController::~InterruptController()>:
c001457a:	83 ec 0c             	sub    esp,0xc
c001457d:	83 ec 0c             	sub    esp,0xc
c0014580:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014584:	e8 cd ff ff ff       	call   c0014556 <InterruptController::~InterruptController()>
c0014589:	83 c4 10             	add    esp,0x10
c001458c:	83 ec 08             	sub    esp,0x8
c001458f:	68 58 21 00 00       	push   0x2158
c0014594:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014598:	e8 fc e0 ff ff       	call   c0012699 <operator delete(void*, unsigned long)>
c001459d:	83 c4 10             	add    esp,0x10
c00145a0:	83 c4 0c             	add    esp,0xc
c00145a3:	c3                   	ret    

c00145a4 <displayDebugInfo(regs*)>:
c00145a4:	55                   	push   ebp
c00145a5:	57                   	push   edi
c00145a6:	56                   	push   esi
c00145a7:	53                   	push   ebx
c00145a8:	83 ec 24             	sub    esp,0x24
c00145ab:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00145af:	0f 20 c2             	mov    edx,cr0
c00145b2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00145b6:	0f 20 d7             	mov    edi,cr2
c00145b9:	0f 20 de             	mov    esi,cr3
c00145bc:	0f 20 e5             	mov    ebp,cr4
c00145bf:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00145c2:	68 02 97 02 c0       	push   0xc0029702
c00145c7:	e8 ad e1 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c00145cc:	58                   	pop    eax
c00145cd:	5a                   	pop    edx
c00145ce:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00145d1:	68 0d 97 02 c0       	push   0xc002970d
c00145d6:	e8 9e e1 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c00145db:	59                   	pop    ecx
c00145dc:	58                   	pop    eax
c00145dd:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00145e0:	68 18 97 02 c0       	push   0xc0029718
c00145e5:	e8 8f e1 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c00145ea:	58                   	pop    eax
c00145eb:	5a                   	pop    edx
c00145ec:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00145ef:	68 23 97 02 c0       	push   0xc0029723
c00145f4:	e8 80 e1 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c00145f9:	59                   	pop    ecx
c00145fa:	58                   	pop    eax
c00145fb:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00145fe:	68 2e 97 02 c0       	push   0xc002972e
c0014603:	e8 71 e1 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c0014608:	58                   	pop    eax
c0014609:	5a                   	pop    edx
c001460a:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c001460d:	68 39 97 02 c0       	push   0xc0029739
c0014612:	e8 62 e1 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c0014617:	59                   	pop    ecx
c0014618:	58                   	pop    eax
c0014619:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001461c:	68 44 97 02 c0       	push   0xc0029744
c0014621:	e8 53 e1 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c0014626:	58                   	pop    eax
c0014627:	5a                   	pop    edx
c0014628:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001462b:	68 4f 97 02 c0       	push   0xc002974f
c0014630:	e8 44 e1 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c0014635:	59                   	pop    ecx
c0014636:	58                   	pop    eax
c0014637:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c001463a:	68 5a 97 02 c0       	push   0xc002975a
c001463f:	e8 35 e1 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c0014644:	58                   	pop    eax
c0014645:	5a                   	pop    edx
c0014646:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014649:	68 69 97 02 c0       	push   0xc0029769
c001464e:	e8 26 e1 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c0014653:	59                   	pop    ecx
c0014654:	58                   	pop    eax
c0014655:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014658:	68 74 97 02 c0       	push   0xc0029774
c001465d:	e8 17 e1 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c0014662:	58                   	pop    eax
c0014663:	5a                   	pop    edx
c0014664:	57                   	push   edi
c0014665:	68 7f 97 02 c0       	push   0xc002977f
c001466a:	e8 0a e1 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c001466f:	59                   	pop    ecx
c0014670:	58                   	pop    eax
c0014671:	56                   	push   esi
c0014672:	68 8a 97 02 c0       	push   0xc002978a
c0014677:	e8 fd e0 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c001467c:	58                   	pop    eax
c001467d:	a1 34 df 02 c0       	mov    eax,ds:0xc002df34
c0014682:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014688:	e8 ae c2 ff ff       	call   c001093b <setActiveTerminal(VgaText*)>
c001468d:	58                   	pop    eax
c001468e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014691:	5a                   	pop    edx
c0014692:	c1 e0 05             	shl    eax,0x5
c0014695:	05 a0 b9 02 c0       	add    eax,0xc002b9a0
c001469a:	50                   	push   eax
c001469b:	a1 34 df 02 c0       	mov    eax,ds:0xc002df34
c00146a0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146a6:	e8 af c6 ff ff       	call   c0010d5a <VgaText::puts(char const*)>
c00146ab:	59                   	pop    ecx
c00146ac:	58                   	pop    eax
c00146ad:	a1 34 df 02 c0       	mov    eax,ds:0xc002df34
c00146b2:	68 95 97 02 c0       	push   0xc0029795
c00146b7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146bd:	e8 98 c6 ff ff       	call   c0010d5a <VgaText::puts(char const*)>
c00146c2:	58                   	pop    eax
c00146c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00146c8:	5a                   	pop    edx
c00146c9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00146cc:	83 c0 0c             	add    eax,0xc
c00146cf:	50                   	push   eax
c00146d0:	a1 34 df 02 c0       	mov    eax,ds:0xc002df34
c00146d5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146db:	e8 7a c6 ff ff       	call   c0010d5a <VgaText::puts(char const*)>
c00146e0:	59                   	pop    ecx
c00146e1:	58                   	pop    eax
c00146e2:	a1 34 df 02 c0       	mov    eax,ds:0xc002df34
c00146e7:	68 9e 97 02 c0       	push   0xc002979e
c00146ec:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146f2:	e8 63 c6 ff ff       	call   c0010d5a <VgaText::puts(char const*)>
c00146f7:	58                   	pop    eax
c00146f8:	a1 34 df 02 c0       	mov    eax,ds:0xc002df34
c00146fd:	5a                   	pop    edx
c00146fe:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014701:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014707:	e8 74 c6 ff ff       	call   c0010d80 <VgaText::putx(unsigned int)>
c001470c:	59                   	pop    ecx
c001470d:	58                   	pop    eax
c001470e:	a1 34 df 02 c0       	mov    eax,ds:0xc002df34
c0014713:	68 a6 97 02 c0       	push   0xc00297a6
c0014718:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001471e:	e8 37 c6 ff ff       	call   c0010d5a <VgaText::puts(char const*)>
c0014723:	58                   	pop    eax
c0014724:	a1 34 df 02 c0       	mov    eax,ds:0xc002df34
c0014729:	5a                   	pop    edx
c001472a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001472d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014733:	e8 48 c6 ff ff       	call   c0010d80 <VgaText::putx(unsigned int)>
c0014738:	59                   	pop    ecx
c0014739:	58                   	pop    eax
c001473a:	a1 34 df 02 c0       	mov    eax,ds:0xc002df34
c001473f:	68 ae 97 02 c0       	push   0xc00297ae
c0014744:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001474a:	e8 0b c6 ff ff       	call   c0010d5a <VgaText::puts(char const*)>
c001474f:	58                   	pop    eax
c0014750:	a1 34 df 02 c0       	mov    eax,ds:0xc002df34
c0014755:	5a                   	pop    edx
c0014756:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014759:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001475f:	e8 1c c6 ff ff       	call   c0010d80 <VgaText::putx(unsigned int)>
c0014764:	59                   	pop    ecx
c0014765:	58                   	pop    eax
c0014766:	a1 34 df 02 c0       	mov    eax,ds:0xc002df34
c001476b:	68 b6 97 02 c0       	push   0xc00297b6
c0014770:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014776:	e8 df c5 ff ff       	call   c0010d5a <VgaText::puts(char const*)>
c001477b:	58                   	pop    eax
c001477c:	a1 34 df 02 c0       	mov    eax,ds:0xc002df34
c0014781:	5a                   	pop    edx
c0014782:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014785:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001478b:	e8 f0 c5 ff ff       	call   c0010d80 <VgaText::putx(unsigned int)>
c0014790:	59                   	pop    ecx
c0014791:	58                   	pop    eax
c0014792:	a1 34 df 02 c0       	mov    eax,ds:0xc002df34
c0014797:	68 be 97 02 c0       	push   0xc00297be
c001479c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147a2:	e8 b3 c5 ff ff       	call   c0010d5a <VgaText::puts(char const*)>
c00147a7:	58                   	pop    eax
c00147a8:	a1 34 df 02 c0       	mov    eax,ds:0xc002df34
c00147ad:	5a                   	pop    edx
c00147ae:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00147b1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147b7:	e8 c4 c5 ff ff       	call   c0010d80 <VgaText::putx(unsigned int)>
c00147bc:	59                   	pop    ecx
c00147bd:	58                   	pop    eax
c00147be:	a1 34 df 02 c0       	mov    eax,ds:0xc002df34
c00147c3:	68 c6 97 02 c0       	push   0xc00297c6
c00147c8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147ce:	e8 87 c5 ff ff       	call   c0010d5a <VgaText::puts(char const*)>
c00147d3:	58                   	pop    eax
c00147d4:	a1 34 df 02 c0       	mov    eax,ds:0xc002df34
c00147d9:	5a                   	pop    edx
c00147da:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c00147dd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147e3:	e8 98 c5 ff ff       	call   c0010d80 <VgaText::putx(unsigned int)>
c00147e8:	59                   	pop    ecx
c00147e9:	a1 34 df 02 c0       	mov    eax,ds:0xc002df34
c00147ee:	5b                   	pop    ebx
c00147ef:	68 ce 97 02 c0       	push   0xc00297ce
c00147f4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147fa:	e8 5b c5 ff ff       	call   c0010d5a <VgaText::puts(char const*)>
c00147ff:	58                   	pop    eax
c0014800:	a1 34 df 02 c0       	mov    eax,ds:0xc002df34
c0014805:	5a                   	pop    edx
c0014806:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001480a:	52                   	push   edx
c001480b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014811:	e8 6a c5 ff ff       	call   c0010d80 <VgaText::putx(unsigned int)>
c0014816:	59                   	pop    ecx
c0014817:	a1 34 df 02 c0       	mov    eax,ds:0xc002df34
c001481c:	5b                   	pop    ebx
c001481d:	68 d7 97 02 c0       	push   0xc00297d7
c0014822:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014828:	e8 2d c5 ff ff       	call   c0010d5a <VgaText::puts(char const*)>
c001482d:	58                   	pop    eax
c001482e:	a1 34 df 02 c0       	mov    eax,ds:0xc002df34
c0014833:	5a                   	pop    edx
c0014834:	57                   	push   edi
c0014835:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001483b:	e8 40 c5 ff ff       	call   c0010d80 <VgaText::putx(unsigned int)>
c0014840:	59                   	pop    ecx
c0014841:	a1 34 df 02 c0       	mov    eax,ds:0xc002df34
c0014846:	5b                   	pop    ebx
c0014847:	68 df 97 02 c0       	push   0xc00297df
c001484c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014852:	e8 03 c5 ff ff       	call   c0010d5a <VgaText::puts(char const*)>
c0014857:	5f                   	pop    edi
c0014858:	58                   	pop    eax
c0014859:	a1 34 df 02 c0       	mov    eax,ds:0xc002df34
c001485e:	56                   	push   esi
c001485f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014865:	e8 16 c5 ff ff       	call   c0010d80 <VgaText::putx(unsigned int)>
c001486a:	58                   	pop    eax
c001486b:	a1 34 df 02 c0       	mov    eax,ds:0xc002df34
c0014870:	5a                   	pop    edx
c0014871:	68 e7 97 02 c0       	push   0xc00297e7
c0014876:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001487c:	e8 d9 c4 ff ff       	call   c0010d5a <VgaText::puts(char const*)>
c0014881:	59                   	pop    ecx
c0014882:	a1 34 df 02 c0       	mov    eax,ds:0xc002df34
c0014887:	5b                   	pop    ebx
c0014888:	55                   	push   ebp
c0014889:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001488f:	e8 ec c4 ff ff       	call   c0010d80 <VgaText::putx(unsigned int)>
c0014894:	5e                   	pop    esi
c0014895:	a1 34 df 02 c0       	mov    eax,ds:0xc002df34
c001489a:	5f                   	pop    edi
c001489b:	68 ef 97 02 c0       	push   0xc00297ef
c00148a0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148a6:	e8 af c4 ff ff       	call   c0010d5a <VgaText::puts(char const*)>
c00148ab:	0f 21 c0             	mov    eax,db0
c00148ae:	5d                   	pop    ebp
c00148af:	5a                   	pop    edx
c00148b0:	50                   	push   eax
c00148b1:	a1 34 df 02 c0       	mov    eax,ds:0xc002df34
c00148b6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148bc:	e8 bf c4 ff ff       	call   c0010d80 <VgaText::putx(unsigned int)>
c00148c1:	59                   	pop    ecx
c00148c2:	a1 34 df 02 c0       	mov    eax,ds:0xc002df34
c00148c7:	5b                   	pop    ebx
c00148c8:	68 f8 97 02 c0       	push   0xc00297f8
c00148cd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148d3:	e8 82 c4 ff ff       	call   c0010d5a <VgaText::puts(char const*)>
c00148d8:	0f 21 c8             	mov    eax,db1
c00148db:	5e                   	pop    esi
c00148dc:	5f                   	pop    edi
c00148dd:	50                   	push   eax
c00148de:	a1 34 df 02 c0       	mov    eax,ds:0xc002df34
c00148e3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148e9:	e8 92 c4 ff ff       	call   c0010d80 <VgaText::putx(unsigned int)>
c00148ee:	5d                   	pop    ebp
c00148ef:	58                   	pop    eax
c00148f0:	a1 34 df 02 c0       	mov    eax,ds:0xc002df34
c00148f5:	68 00 98 02 c0       	push   0xc0029800
c00148fa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014900:	e8 55 c4 ff ff       	call   c0010d5a <VgaText::puts(char const*)>
c0014905:	0f 21 d0             	mov    eax,db2
c0014908:	5a                   	pop    edx
c0014909:	59                   	pop    ecx
c001490a:	50                   	push   eax
c001490b:	a1 34 df 02 c0       	mov    eax,ds:0xc002df34
c0014910:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014916:	e8 65 c4 ff ff       	call   c0010d80 <VgaText::putx(unsigned int)>
c001491b:	5b                   	pop    ebx
c001491c:	a1 34 df 02 c0       	mov    eax,ds:0xc002df34
c0014921:	5e                   	pop    esi
c0014922:	68 08 98 02 c0       	push   0xc0029808
c0014927:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001492d:	e8 28 c4 ff ff       	call   c0010d5a <VgaText::puts(char const*)>
c0014932:	0f 21 d8             	mov    eax,db3
c0014935:	5f                   	pop    edi
c0014936:	5d                   	pop    ebp
c0014937:	50                   	push   eax
c0014938:	a1 34 df 02 c0       	mov    eax,ds:0xc002df34
c001493d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014943:	e8 38 c4 ff ff       	call   c0010d80 <VgaText::putx(unsigned int)>
c0014948:	58                   	pop    eax
c0014949:	a1 34 df 02 c0       	mov    eax,ds:0xc002df34
c001494e:	5a                   	pop    edx
c001494f:	68 10 98 02 c0       	push   0xc0029810
c0014954:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001495a:	e8 fb c3 ff ff       	call   c0010d5a <VgaText::puts(char const*)>
c001495f:	0f 21 f0             	mov    eax,db6
c0014962:	59                   	pop    ecx
c0014963:	5b                   	pop    ebx
c0014964:	50                   	push   eax
c0014965:	a1 34 df 02 c0       	mov    eax,ds:0xc002df34
c001496a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014970:	e8 0b c4 ff ff       	call   c0010d80 <VgaText::putx(unsigned int)>
c0014975:	5e                   	pop    esi
c0014976:	a1 34 df 02 c0       	mov    eax,ds:0xc002df34
c001497b:	5f                   	pop    edi
c001497c:	68 18 98 02 c0       	push   0xc0029818
c0014981:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014987:	e8 ce c3 ff ff       	call   c0010d5a <VgaText::puts(char const*)>
c001498c:	0f 21 f8             	mov    eax,db7
c001498f:	5d                   	pop    ebp
c0014990:	5a                   	pop    edx
c0014991:	50                   	push   eax
c0014992:	a1 34 df 02 c0       	mov    eax,ds:0xc002df34
c0014997:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001499d:	e8 de c3 ff ff       	call   c0010d80 <VgaText::putx(unsigned int)>
c00149a2:	fa                   	cli    
c00149a3:	f4                   	hlt    
c00149a4:	83 c4 10             	add    esp,0x10
c00149a7:	eb fe                	jmp    c00149a7 <displayDebugInfo(regs*)+0x403>

c00149a9 <x87EmulHandler(regs*, void*)>:
c00149a9:	53                   	push   ebx
c00149aa:	83 ec 14             	sub    esp,0x14
c00149ad:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00149b1:	53                   	push   ebx
c00149b2:	e8 97 a0 00 00       	call   c001ea4e <Vm::x87Handler(regs*)>
c00149b7:	83 c4 10             	add    esp,0x10
c00149ba:	84 c0                	test   al,al
c00149bc:	74 05                	je     c00149c3 <x87EmulHandler(regs*, void*)+0x1a>
c00149be:	83 c4 08             	add    esp,0x8
c00149c1:	5b                   	pop    ebx
c00149c2:	c3                   	ret    
c00149c3:	83 ec 0c             	sub    esp,0xc
c00149c6:	68 20 98 02 c0       	push   0xc0029820
c00149cb:	e8 a9 dd ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c00149d0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00149d3:	e8 cc fb ff ff       	call   c00145a4 <displayDebugInfo(regs*)>

c00149d8 <gpFault(regs*, void*)>:
c00149d8:	53                   	push   ebx
c00149d9:	83 ec 14             	sub    esp,0x14
c00149dc:	c7 05 90 cb 02 c0 cb dd 01 c0 	mov    DWORD PTR ds:0xc002cb90,0xc001ddcb
c00149e6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00149ea:	53                   	push   ebx
c00149eb:	e8 db 93 00 00       	call   c001ddcb <Vm::faultHandler(regs*)>
c00149f0:	83 c4 10             	add    esp,0x10
c00149f3:	84 c0                	test   al,al
c00149f5:	74 05                	je     c00149fc <gpFault(regs*, void*)+0x24>
c00149f7:	83 c4 08             	add    esp,0x8
c00149fa:	5b                   	pop    ebx
c00149fb:	c3                   	ret    
c00149fc:	83 ec 0c             	sub    esp,0xc
c00149ff:	68 36 98 02 c0       	push   0xc0029836
c0014a04:	e8 70 dd ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c0014a09:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014a0c:	e8 93 fb ff ff       	call   c00145a4 <displayDebugInfo(regs*)>

c0014a11 <pgFault(regs*, void*)>:
c0014a11:	83 ec 18             	sub    esp,0x18
c0014a14:	68 51 98 02 c0       	push   0xc0029851
c0014a19:	e8 5b dd ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c0014a1e:	58                   	pop    eax
c0014a1f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014a23:	e8 7c fb ff ff       	call   c00145a4 <displayDebugInfo(regs*)>

c0014a28 <otherISRHandler(regs*, void*)>:
c0014a28:	53                   	push   ebx
c0014a29:	83 ec 0c             	sub    esp,0xc
c0014a2c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014a30:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014a33:	50                   	push   eax
c0014a34:	50                   	push   eax
c0014a35:	68 5e 98 02 c0       	push   0xc002985e
c0014a3a:	e8 3a dd ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c0014a3f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014a42:	e8 5d fb ff ff       	call   c00145a4 <displayDebugInfo(regs*)>

c0014a47 <opcodeFault(regs*, void*)>:
c0014a47:	55                   	push   ebp
c0014a48:	89 e5                	mov    ebp,esp
c0014a4a:	56                   	push   esi
c0014a4b:	53                   	push   ebx
c0014a4c:	83 ec 40             	sub    esp,0x40
c0014a4f:	a1 e8 c9 02 c0       	mov    eax,ds:0xc002c9e8
c0014a54:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014a5a:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0014a60:	84 c0                	test   al,al
c0014a62:	74 24                	je     c0014a88 <opcodeFault(regs*, void*)+0x41>
c0014a64:	83 ec 0c             	sub    esp,0xc
c0014a67:	68 7c 98 02 c0       	push   0xc002987c
c0014a6c:	e8 08 dd ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c0014a71:	83 c4 10             	add    esp,0x10
c0014a74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a77:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a7a:	8d 50 19             	lea    edx,[eax+0x19]
c0014a7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a80:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014a83:	e9 77 05 00 00       	jmp    c0014fff <opcodeFault(regs*, void*)+0x5b8>
c0014a88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a8b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a8e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014a91:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0014a95:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0014a99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a9c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a9f:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0014aa2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014aa5:	8a 00                	mov    al,BYTE PTR [eax]
c0014aa7:	3c f0                	cmp    al,0xf0
c0014aa9:	75 17                	jne    c0014ac2 <opcodeFault(regs*, void*)+0x7b>
c0014aab:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014aae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ab1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ab4:	8d 50 01             	lea    edx,[eax+0x1]
c0014ab7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014aba:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014abd:	e9 da 00 00 00       	jmp    c0014b9c <opcodeFault(regs*, void*)+0x155>
c0014ac2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ac5:	8a 00                	mov    al,BYTE PTR [eax]
c0014ac7:	3c f2                	cmp    al,0xf2
c0014ac9:	74 09                	je     c0014ad4 <opcodeFault(regs*, void*)+0x8d>
c0014acb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ace:	8a 00                	mov    al,BYTE PTR [eax]
c0014ad0:	3c f3                	cmp    al,0xf3
c0014ad2:	75 1b                	jne    c0014aef <opcodeFault(regs*, void*)+0xa8>
c0014ad4:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014ad8:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014adb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ade:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ae1:	8d 50 01             	lea    edx,[eax+0x1]
c0014ae4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ae7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014aea:	e9 ad 00 00 00       	jmp    c0014b9c <opcodeFault(regs*, void*)+0x155>
c0014aef:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014af2:	8a 00                	mov    al,BYTE PTR [eax]
c0014af4:	3c 66                	cmp    al,0x66
c0014af6:	75 1f                	jne    c0014b17 <opcodeFault(regs*, void*)+0xd0>
c0014af8:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014afc:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0014b00:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014b03:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b06:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b09:	8d 50 01             	lea    edx,[eax+0x1]
c0014b0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b0f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b12:	e9 85 00 00 00       	jmp    c0014b9c <opcodeFault(regs*, void*)+0x155>
c0014b17:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b1a:	8a 00                	mov    al,BYTE PTR [eax]
c0014b1c:	3c 67                	cmp    al,0x67
c0014b1e:	75 18                	jne    c0014b38 <opcodeFault(regs*, void*)+0xf1>
c0014b20:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014b24:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014b27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b2a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b2d:	8d 50 01             	lea    edx,[eax+0x1]
c0014b30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b33:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b36:	eb 64                	jmp    c0014b9c <opcodeFault(regs*, void*)+0x155>
c0014b38:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b3b:	8a 00                	mov    al,BYTE PTR [eax]
c0014b3d:	3c 2e                	cmp    al,0x2e
c0014b3f:	74 09                	je     c0014b4a <opcodeFault(regs*, void*)+0x103>
c0014b41:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b44:	8a 00                	mov    al,BYTE PTR [eax]
c0014b46:	3c 3e                	cmp    al,0x3e
c0014b48:	75 18                	jne    c0014b62 <opcodeFault(regs*, void*)+0x11b>
c0014b4a:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014b4e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014b51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b54:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b57:	8d 50 01             	lea    edx,[eax+0x1]
c0014b5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b5d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b60:	eb 3a                	jmp    c0014b9c <opcodeFault(regs*, void*)+0x155>
c0014b62:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b65:	8a 00                	mov    al,BYTE PTR [eax]
c0014b67:	3c 36                	cmp    al,0x36
c0014b69:	74 1b                	je     c0014b86 <opcodeFault(regs*, void*)+0x13f>
c0014b6b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b6e:	8a 00                	mov    al,BYTE PTR [eax]
c0014b70:	3c 26                	cmp    al,0x26
c0014b72:	74 12                	je     c0014b86 <opcodeFault(regs*, void*)+0x13f>
c0014b74:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b77:	8a 00                	mov    al,BYTE PTR [eax]
c0014b79:	3c 64                	cmp    al,0x64
c0014b7b:	74 09                	je     c0014b86 <opcodeFault(regs*, void*)+0x13f>
c0014b7d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b80:	8a 00                	mov    al,BYTE PTR [eax]
c0014b82:	3c 65                	cmp    al,0x65
c0014b84:	75 16                	jne    c0014b9c <opcodeFault(regs*, void*)+0x155>
c0014b86:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014b8a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014b8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b90:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b93:	8d 50 01             	lea    edx,[eax+0x1]
c0014b96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b99:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b9c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b9f:	8a 00                	mov    al,BYTE PTR [eax]
c0014ba1:	3c 0f                	cmp    al,0xf
c0014ba3:	0f 85 ad 00 00 00    	jne    c0014c56 <opcodeFault(regs*, void*)+0x20f>
c0014ba9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bac:	40                   	inc    eax
c0014bad:	8a 00                	mov    al,BYTE PTR [eax]
c0014baf:	3c c2                	cmp    al,0xc2
c0014bb1:	74 0e                	je     c0014bc1 <opcodeFault(regs*, void*)+0x17a>
c0014bb3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bb6:	40                   	inc    eax
c0014bb7:	8a 00                	mov    al,BYTE PTR [eax]
c0014bb9:	3c c3                	cmp    al,0xc3
c0014bbb:	0f 85 95 00 00 00    	jne    c0014c56 <opcodeFault(regs*, void*)+0x20f>
c0014bc1:	83 ec 0c             	sub    esp,0xc
c0014bc4:	68 9f 98 02 c0       	push   0xc002989f
c0014bc9:	e8 ab db ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c0014bce:	83 c4 10             	add    esp,0x10
c0014bd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bd4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014bd7:	8d 50 01             	lea    edx,[eax+0x1]
c0014bda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bdd:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014be0:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014be3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014be6:	8a 00                	mov    al,BYTE PTR [eax]
c0014be8:	8d 50 fe             	lea    edx,[eax-0x2]
c0014beb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bee:	88 10                	mov    BYTE PTR [eax],dl
c0014bf0:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0014bf3:	50                   	push   eax
c0014bf4:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0014bf7:	50                   	push   eax
c0014bf8:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0014bfb:	50                   	push   eax
c0014bfc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014bff:	e8 c0 44 00 00       	call   c00190c4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014c04:	83 c4 10             	add    esp,0x10
c0014c07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c0a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c0d:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014c10:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0014c13:	01 d0                	add    eax,edx
c0014c15:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0014c18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c1b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c1e:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014c21:	48                   	dec    eax
c0014c22:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0014c25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c28:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0014c2b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c31:	83 ec 04             	sub    esp,0x4
c0014c34:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0014c37:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014c3a:	50                   	push   eax
c0014c3b:	e8 29 b5 fe ff       	call   c0000169 <voodooXADD>
c0014c40:	83 c4 10             	add    esp,0x10
c0014c43:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0014c46:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0014c49:	01 c2                	add    edx,eax
c0014c4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c4e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c51:	e9 a9 03 00 00       	jmp    c0014fff <opcodeFault(regs*, void*)+0x5b8>
c0014c56:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c59:	8a 00                	mov    al,BYTE PTR [eax]
c0014c5b:	3c 0f                	cmp    al,0xf
c0014c5d:	0f 85 8b 01 00 00    	jne    c0014dee <opcodeFault(regs*, void*)+0x3a7>
c0014c63:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c66:	40                   	inc    eax
c0014c67:	8a 00                	mov    al,BYTE PTR [eax]
c0014c69:	3c c7                	cmp    al,0xc7
c0014c6b:	0f 86 7d 01 00 00    	jbe    c0014dee <opcodeFault(regs*, void*)+0x3a7>
c0014c71:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c74:	40                   	inc    eax
c0014c75:	8a 00                	mov    al,BYTE PTR [eax]
c0014c77:	3c cf                	cmp    al,0xcf
c0014c79:	0f 87 6f 01 00 00    	ja     c0014dee <opcodeFault(regs*, void*)+0x3a7>
c0014c7f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c82:	40                   	inc    eax
c0014c83:	8a 00                	mov    al,BYTE PTR [eax]
c0014c85:	83 c0 38             	add    eax,0x38
c0014c88:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0014c8b:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014c8f:	75 0b                	jne    c0014c9c <opcodeFault(regs*, void*)+0x255>
c0014c91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c94:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014c97:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014c9a:	eb 75                	jmp    c0014d11 <opcodeFault(regs*, void*)+0x2ca>
c0014c9c:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014ca0:	75 0b                	jne    c0014cad <opcodeFault(regs*, void*)+0x266>
c0014ca2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ca5:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014ca8:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014cab:	eb 64                	jmp    c0014d11 <opcodeFault(regs*, void*)+0x2ca>
c0014cad:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014cb1:	75 0b                	jne    c0014cbe <opcodeFault(regs*, void*)+0x277>
c0014cb3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cb6:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014cb9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014cbc:	eb 53                	jmp    c0014d11 <opcodeFault(regs*, void*)+0x2ca>
c0014cbe:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014cc2:	75 0b                	jne    c0014ccf <opcodeFault(regs*, void*)+0x288>
c0014cc4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cc7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014cca:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014ccd:	eb 42                	jmp    c0014d11 <opcodeFault(regs*, void*)+0x2ca>
c0014ccf:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014cd3:	75 0b                	jne    c0014ce0 <opcodeFault(regs*, void*)+0x299>
c0014cd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cd8:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014cdb:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014cde:	eb 31                	jmp    c0014d11 <opcodeFault(regs*, void*)+0x2ca>
c0014ce0:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014ce4:	75 0b                	jne    c0014cf1 <opcodeFault(regs*, void*)+0x2aa>
c0014ce6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ce9:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014cec:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014cef:	eb 20                	jmp    c0014d11 <opcodeFault(regs*, void*)+0x2ca>
c0014cf1:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014cf5:	75 0b                	jne    c0014d02 <opcodeFault(regs*, void*)+0x2bb>
c0014cf7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cfa:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014cfd:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d00:	eb 0f                	jmp    c0014d11 <opcodeFault(regs*, void*)+0x2ca>
c0014d02:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014d06:	75 09                	jne    c0014d11 <opcodeFault(regs*, void*)+0x2ca>
c0014d08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d0b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014d0e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d11:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0014d15:	74 10                	je     c0014d27 <opcodeFault(regs*, void*)+0x2e0>
c0014d17:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0014d1e:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0014d25:	eb 2d                	jmp    c0014d54 <opcodeFault(regs*, void*)+0x30d>
c0014d27:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014d2a:	c1 e0 18             	shl    eax,0x18
c0014d2d:	89 c2                	mov    edx,eax
c0014d2f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014d32:	c1 e0 08             	shl    eax,0x8
c0014d35:	25 00 00 ff 00       	and    eax,0xff0000
c0014d3a:	09 c2                	or     edx,eax
c0014d3c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014d3f:	c1 e8 08             	shr    eax,0x8
c0014d42:	25 00 ff 00 00       	and    eax,0xff00
c0014d47:	09 c2                	or     edx,eax
c0014d49:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014d4c:	c1 e8 18             	shr    eax,0x18
c0014d4f:	09 d0                	or     eax,edx
c0014d51:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d54:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014d58:	75 0b                	jne    c0014d65 <opcodeFault(regs*, void*)+0x31e>
c0014d5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d5d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014d60:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014d63:	eb 75                	jmp    c0014dda <opcodeFault(regs*, void*)+0x393>
c0014d65:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014d69:	75 0b                	jne    c0014d76 <opcodeFault(regs*, void*)+0x32f>
c0014d6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d6e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014d71:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0014d74:	eb 64                	jmp    c0014dda <opcodeFault(regs*, void*)+0x393>
c0014d76:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014d7a:	75 0b                	jne    c0014d87 <opcodeFault(regs*, void*)+0x340>
c0014d7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d7f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014d82:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014d85:	eb 53                	jmp    c0014dda <opcodeFault(regs*, void*)+0x393>
c0014d87:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014d8b:	75 0b                	jne    c0014d98 <opcodeFault(regs*, void*)+0x351>
c0014d8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d90:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014d93:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0014d96:	eb 42                	jmp    c0014dda <opcodeFault(regs*, void*)+0x393>
c0014d98:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014d9c:	75 0b                	jne    c0014da9 <opcodeFault(regs*, void*)+0x362>
c0014d9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014da1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014da4:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0014da7:	eb 31                	jmp    c0014dda <opcodeFault(regs*, void*)+0x393>
c0014da9:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014dad:	75 0b                	jne    c0014dba <opcodeFault(regs*, void*)+0x373>
c0014daf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014db2:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014db5:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0014db8:	eb 20                	jmp    c0014dda <opcodeFault(regs*, void*)+0x393>
c0014dba:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014dbe:	75 0b                	jne    c0014dcb <opcodeFault(regs*, void*)+0x384>
c0014dc0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dc3:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014dc6:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0014dc9:	eb 0f                	jmp    c0014dda <opcodeFault(regs*, void*)+0x393>
c0014dcb:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014dcf:	75 09                	jne    c0014dda <opcodeFault(regs*, void*)+0x393>
c0014dd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dd4:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014dd7:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0014dda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ddd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014de0:	8d 50 02             	lea    edx,[eax+0x2]
c0014de3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014de6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014de9:	e9 11 02 00 00       	jmp    c0014fff <opcodeFault(regs*, void*)+0x5b8>
c0014dee:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014df1:	8a 00                	mov    al,BYTE PTR [eax]
c0014df3:	3c 0f                	cmp    al,0xf
c0014df5:	0f 85 76 01 00 00    	jne    c0014f71 <opcodeFault(regs*, void*)+0x52a>
c0014dfb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dfe:	40                   	inc    eax
c0014dff:	8a 00                	mov    al,BYTE PTR [eax]
c0014e01:	3c c7                	cmp    al,0xc7
c0014e03:	0f 85 68 01 00 00    	jne    c0014f71 <opcodeFault(regs*, void*)+0x52a>
c0014e09:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014e0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e0f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e12:	8d 50 01             	lea    edx,[eax+0x1]
c0014e15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e18:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e1b:	8d 45 ba             	lea    eax,[ebp-0x46]
c0014e1e:	50                   	push   eax
c0014e1f:	8d 45 bb             	lea    eax,[ebp-0x45]
c0014e22:	50                   	push   eax
c0014e23:	8d 45 bc             	lea    eax,[ebp-0x44]
c0014e26:	50                   	push   eax
c0014e27:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014e2a:	e8 95 42 00 00       	call   c00190c4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014e2f:	83 c4 10             	add    esp,0x10
c0014e32:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0014e35:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0014e38:	83 f0 01             	xor    eax,0x1
c0014e3b:	84 c0                	test   al,al
c0014e3d:	0f 84 2e 01 00 00    	je     c0014f71 <opcodeFault(regs*, void*)+0x52a>
c0014e43:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0014e46:	3c 01                	cmp    al,0x1
c0014e48:	0f 85 23 01 00 00    	jne    c0014f71 <opcodeFault(regs*, void*)+0x52a>
c0014e4e:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0014e51:	83 f0 01             	xor    eax,0x1
c0014e54:	84 c0                	test   al,al
c0014e56:	0f 84 15 01 00 00    	je     c0014f71 <opcodeFault(regs*, void*)+0x52a>
c0014e5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e5f:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014e62:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014e65:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0014e6c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014e6f:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014e72:	89 c2                	mov    edx,eax
c0014e74:	b8 00 00 00 00       	mov    eax,0x0
c0014e79:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014e7c:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014e7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e82:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014e85:	ba 00 00 00 00       	mov    edx,0x0
c0014e8a:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0014e8d:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0014e90:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e93:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014e96:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014e99:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0014ea0:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014ea3:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014ea6:	89 c2                	mov    edx,eax
c0014ea8:	b8 00 00 00 00       	mov    eax,0x0
c0014ead:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014eb0:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0014eb3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014eb6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014eb9:	ba 00 00 00 00       	mov    edx,0x0
c0014ebe:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0014ec1:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0014ec4:	e8 f1 7e 00 00       	call   c001cdba <lockScheduler()>
c0014ec9:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014ecc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014ecf:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ed1:	89 c1                	mov    ecx,eax
c0014ed3:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0014ed6:	89 cb                	mov    ebx,ecx
c0014ed8:	89 d0                	mov    eax,edx
c0014eda:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0014edd:	89 c6                	mov    esi,eax
c0014edf:	89 f0                	mov    eax,esi
c0014ee1:	09 d8                	or     eax,ebx
c0014ee3:	85 c0                	test   eax,eax
c0014ee5:	75 21                	jne    c0014f08 <opcodeFault(regs*, void*)+0x4c1>
c0014ee7:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0014eea:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014eed:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014ef0:	89 01                	mov    DWORD PTR [ecx],eax
c0014ef2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0014ef5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ef8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014efb:	83 c8 40             	or     eax,0x40
c0014efe:	89 c2                	mov    edx,eax
c0014f00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f03:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014f06:	eb 3e                	jmp    c0014f46 <opcodeFault(regs*, void*)+0x4ff>
c0014f08:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014f0b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014f0e:	8b 00                	mov    eax,DWORD PTR [eax]
c0014f10:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014f13:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014f16:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0014f19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f1c:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014f1f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014f22:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014f25:	89 d0                	mov    eax,edx
c0014f27:	31 d2                	xor    edx,edx
c0014f29:	89 c3                	mov    ebx,eax
c0014f2b:	89 d6                	mov    esi,edx
c0014f2d:	89 da                	mov    edx,ebx
c0014f2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f32:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014f35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f38:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014f3b:	83 e0 bf             	and    eax,0xffffffbf
c0014f3e:	89 c2                	mov    edx,eax
c0014f40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f43:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014f46:	e8 71 7e 00 00       	call   c001cdbc <unlockScheduler()>
c0014f4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f4e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f51:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0014f54:	01 c2                	add    edx,eax
c0014f56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f59:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014f5c:	83 ec 0c             	sub    esp,0xc
c0014f5f:	68 ae 98 02 c0       	push   0xc00298ae
c0014f64:	e8 10 d8 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c0014f69:	83 c4 10             	add    esp,0x10
c0014f6c:	e9 8e 00 00 00       	jmp    c0014fff <opcodeFault(regs*, void*)+0x5b8>
c0014f71:	83 ec 0c             	sub    esp,0xc
c0014f74:	68 c1 98 02 c0       	push   0xc00298c1
c0014f79:	e8 fb d7 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c0014f7e:	83 c4 10             	add    esp,0x10
c0014f81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f84:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014f87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f8a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014f8d:	c1 e0 04             	shl    eax,0x4
c0014f90:	01 d0                	add    eax,edx
c0014f92:	83 c0 03             	add    eax,0x3
c0014f95:	8a 00                	mov    al,BYTE PTR [eax]
c0014f97:	0f b6 d8             	movzx  ebx,al
c0014f9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f9d:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014fa0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fa3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014fa6:	c1 e0 04             	shl    eax,0x4
c0014fa9:	01 d0                	add    eax,edx
c0014fab:	83 c0 02             	add    eax,0x2
c0014fae:	8a 00                	mov    al,BYTE PTR [eax]
c0014fb0:	0f b6 c8             	movzx  ecx,al
c0014fb3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fb6:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014fb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fbc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014fbf:	c1 e0 04             	shl    eax,0x4
c0014fc2:	01 d0                	add    eax,edx
c0014fc4:	40                   	inc    eax
c0014fc5:	8a 00                	mov    al,BYTE PTR [eax]
c0014fc7:	0f b6 d0             	movzx  edx,al
c0014fca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fcd:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0014fd0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fd3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014fd6:	c1 e0 04             	shl    eax,0x4
c0014fd9:	01 f0                	add    eax,esi
c0014fdb:	8a 00                	mov    al,BYTE PTR [eax]
c0014fdd:	0f b6 c0             	movzx  eax,al
c0014fe0:	83 ec 0c             	sub    esp,0xc
c0014fe3:	53                   	push   ebx
c0014fe4:	51                   	push   ecx
c0014fe5:	52                   	push   edx
c0014fe6:	50                   	push   eax
c0014fe7:	68 d4 98 02 c0       	push   0xc00298d4
c0014fec:	e8 88 d7 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c0014ff1:	83 c4 20             	add    esp,0x20
c0014ff4:	83 ec 0c             	sub    esp,0xc
c0014ff7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014ffa:	e8 a5 f5 ff ff       	call   c00145a4 <displayDebugInfo(regs*)>
c0014fff:	8d 65 f8             	lea    esp,[ebp-0x8]
c0015002:	5b                   	pop    ebx
c0015003:	5e                   	pop    esi
c0015004:	5d                   	pop    ebp
c0015005:	c3                   	ret    

c0015006 <displayProgramFault(char const*)>:
c0015006:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001500b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001500e:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015014:	85 c0                	test   eax,eax
c0015016:	74 15                	je     c001502d <displayProgramFault(char const*)+0x27>
c0015018:	83 ec 0c             	sub    esp,0xc
c001501b:	6a 04                	push   0x4
c001501d:	6a 0f                	push   0xf
c001501f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015023:	50                   	push   eax
c0015024:	e8 f3 b9 ff ff       	call   c0010a1c <VgaText::puts(char const*, VgaColour, VgaColour)>
c0015029:	83 c4 1c             	add    esp,0x1c
c001502c:	c3                   	ret    
c001502d:	c3                   	ret    

c001502e <setupInterruptController()>:
c001502e:	55                   	push   ebp
c001502f:	89 e5                	mov    ebp,esp
c0015031:	53                   	push   ebx
c0015032:	83 ec 24             	sub    esp,0x24
c0015035:	b8 00 00 00 00       	mov    eax,0x0
c001503a:	85 c0                	test   eax,eax
c001503c:	0f 95 c0             	setne  al
c001503f:	84 c0                	test   al,al
c0015041:	74 5b                	je     c001509e <setupInterruptController()+0x70>
c0015043:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c001504a:	83 ec 0c             	sub    esp,0xc
c001504d:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0015050:	e8 7f a4 ff ff       	call   c000f4d4 <malloc>
c0015055:	83 c4 10             	add    esp,0x10
c0015058:	89 c3                	mov    ebx,eax
c001505a:	83 ec 0c             	sub    esp,0xc
c001505d:	53                   	push   ebx
c001505e:	e8 3d f3 00 00       	call   c00243a0 <APIC::APIC()>
c0015063:	83 c4 10             	add    esp,0x10
c0015066:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0015069:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c001506c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001506f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015071:	83 c0 08             	add    eax,0x8
c0015074:	8b 00                	mov    eax,DWORD PTR [eax]
c0015076:	6a 00                	push   0x0
c0015078:	6a 00                	push   0x0
c001507a:	6a 00                	push   0x0
c001507c:	52                   	push   edx
c001507d:	ff d0                	call   eax
c001507f:	83 c4 10             	add    esp,0x10
c0015082:	a1 e8 c9 02 c0       	mov    eax,ds:0xc002c9e8
c0015087:	83 ec 08             	sub    esp,0x8
c001508a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001508d:	50                   	push   eax
c001508e:	e8 d5 ea ff ff       	call   c0013b68 <Device::addChild(Device*)>
c0015093:	83 c4 10             	add    esp,0x10
c0015096:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015099:	e9 52 03 00 00       	jmp    c00153f0 <setupInterruptController()+0x3c2>
c001509e:	a1 e8 c9 02 c0       	mov    eax,ds:0xc002c9e8
c00150a3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00150a9:	83 e0 01             	and    eax,0x1
c00150ac:	84 c0                	test   al,al
c00150ae:	0f 95 c0             	setne  al
c00150b1:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00150b4:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c00150bb:	83 ec 0c             	sub    esp,0xc
c00150be:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00150c1:	e8 0e a4 ff ff       	call   c000f4d4 <malloc>
c00150c6:	83 c4 10             	add    esp,0x10
c00150c9:	89 c3                	mov    ebx,eax
c00150cb:	83 ec 0c             	sub    esp,0xc
c00150ce:	53                   	push   ebx
c00150cf:	e8 24 f8 00 00       	call   c00248f8 <PIC::PIC()>
c00150d4:	83 c4 10             	add    esp,0x10
c00150d7:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00150da:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00150dd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00150e2:	83 c0 08             	add    eax,0x8
c00150e5:	8b 00                	mov    eax,DWORD PTR [eax]
c00150e7:	6a 00                	push   0x0
c00150e9:	6a 00                	push   0x0
c00150eb:	6a 00                	push   0x0
c00150ed:	52                   	push   edx
c00150ee:	ff d0                	call   eax
c00150f0:	83 c4 10             	add    esp,0x10
c00150f3:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c00150f7:	74 73                	je     c001516c <setupInterruptController()+0x13e>
c00150f9:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00150fc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150ff:	8b 00                	mov    eax,DWORD PTR [eax]
c0015101:	83 c0 0c             	add    eax,0xc
c0015104:	8b 00                	mov    eax,DWORD PTR [eax]
c0015106:	6a 00                	push   0x0
c0015108:	6a 00                	push   0x0
c001510a:	6a 00                	push   0x0
c001510c:	52                   	push   edx
c001510d:	ff d0                	call   eax
c001510f:	83 c4 10             	add    esp,0x10
c0015112:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015116:	74 15                	je     c001512d <setupInterruptController()+0xff>
c0015118:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001511b:	8b 00                	mov    eax,DWORD PTR [eax]
c001511d:	83 c0 04             	add    eax,0x4
c0015120:	8b 00                	mov    eax,DWORD PTR [eax]
c0015122:	83 ec 0c             	sub    esp,0xc
c0015125:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015128:	ff d0                	call   eax
c001512a:	83 c4 10             	add    esp,0x10
c001512d:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0015134:	83 ec 0c             	sub    esp,0xc
c0015137:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c001513a:	e8 95 a3 ff ff       	call   c000f4d4 <malloc>
c001513f:	83 c4 10             	add    esp,0x10
c0015142:	89 c3                	mov    ebx,eax
c0015144:	83 ec 0c             	sub    esp,0xc
c0015147:	53                   	push   ebx
c0015148:	e8 53 f2 00 00       	call   c00243a0 <APIC::APIC()>
c001514d:	83 c4 10             	add    esp,0x10
c0015150:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015153:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015156:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015159:	8b 00                	mov    eax,DWORD PTR [eax]
c001515b:	83 c0 08             	add    eax,0x8
c001515e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015160:	6a 00                	push   0x0
c0015162:	6a 00                	push   0x0
c0015164:	6a 00                	push   0x0
c0015166:	52                   	push   edx
c0015167:	ff d0                	call   eax
c0015169:	83 c4 10             	add    esp,0x10
c001516c:	a1 e8 c9 02 c0       	mov    eax,ds:0xc002c9e8
c0015171:	83 ec 08             	sub    esp,0x8
c0015174:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015177:	50                   	push   eax
c0015178:	e8 eb e9 ff ff       	call   c0013b68 <Device::addChild(Device*)>
c001517d:	83 c4 10             	add    esp,0x10
c0015180:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015183:	8b 00                	mov    eax,DWORD PTR [eax]
c0015185:	83 c0 24             	add    eax,0x24
c0015188:	8b 00                	mov    eax,DWORD PTR [eax]
c001518a:	6a 00                	push   0x0
c001518c:	68 28 4a 01 c0       	push   0xc0014a28
c0015191:	6a 00                	push   0x0
c0015193:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015196:	ff d0                	call   eax
c0015198:	83 c4 10             	add    esp,0x10
c001519b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001519e:	8b 00                	mov    eax,DWORD PTR [eax]
c00151a0:	83 c0 24             	add    eax,0x24
c00151a3:	8b 00                	mov    eax,DWORD PTR [eax]
c00151a5:	6a 00                	push   0x0
c00151a7:	68 28 4a 01 c0       	push   0xc0014a28
c00151ac:	6a 01                	push   0x1
c00151ae:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151b1:	ff d0                	call   eax
c00151b3:	83 c4 10             	add    esp,0x10
c00151b6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151b9:	8b 00                	mov    eax,DWORD PTR [eax]
c00151bb:	83 c0 24             	add    eax,0x24
c00151be:	8b 00                	mov    eax,DWORD PTR [eax]
c00151c0:	6a 00                	push   0x0
c00151c2:	68 01 44 01 c0       	push   0xc0014401
c00151c7:	6a 02                	push   0x2
c00151c9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151cc:	ff d0                	call   eax
c00151ce:	83 c4 10             	add    esp,0x10
c00151d1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00151d6:	83 c0 24             	add    eax,0x24
c00151d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00151db:	6a 00                	push   0x0
c00151dd:	68 28 4a 01 c0       	push   0xc0014a28
c00151e2:	6a 03                	push   0x3
c00151e4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151e7:	ff d0                	call   eax
c00151e9:	83 c4 10             	add    esp,0x10
c00151ec:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151ef:	8b 00                	mov    eax,DWORD PTR [eax]
c00151f1:	83 c0 24             	add    eax,0x24
c00151f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00151f6:	6a 00                	push   0x0
c00151f8:	68 28 4a 01 c0       	push   0xc0014a28
c00151fd:	6a 04                	push   0x4
c00151ff:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015202:	ff d0                	call   eax
c0015204:	83 c4 10             	add    esp,0x10
c0015207:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001520a:	8b 00                	mov    eax,DWORD PTR [eax]
c001520c:	83 c0 24             	add    eax,0x24
c001520f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015211:	6a 00                	push   0x0
c0015213:	68 28 4a 01 c0       	push   0xc0014a28
c0015218:	6a 05                	push   0x5
c001521a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001521d:	ff d0                	call   eax
c001521f:	83 c4 10             	add    esp,0x10
c0015222:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015225:	8b 00                	mov    eax,DWORD PTR [eax]
c0015227:	83 c0 24             	add    eax,0x24
c001522a:	8b 00                	mov    eax,DWORD PTR [eax]
c001522c:	6a 00                	push   0x0
c001522e:	68 47 4a 01 c0       	push   0xc0014a47
c0015233:	6a 06                	push   0x6
c0015235:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015238:	ff d0                	call   eax
c001523a:	83 c4 10             	add    esp,0x10
c001523d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015240:	8b 00                	mov    eax,DWORD PTR [eax]
c0015242:	83 c0 24             	add    eax,0x24
c0015245:	8b 00                	mov    eax,DWORD PTR [eax]
c0015247:	6a 00                	push   0x0
c0015249:	68 a9 49 01 c0       	push   0xc00149a9
c001524e:	6a 07                	push   0x7
c0015250:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015253:	ff d0                	call   eax
c0015255:	83 c4 10             	add    esp,0x10
c0015258:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001525b:	8b 00                	mov    eax,DWORD PTR [eax]
c001525d:	83 c0 24             	add    eax,0x24
c0015260:	8b 00                	mov    eax,DWORD PTR [eax]
c0015262:	6a 00                	push   0x0
c0015264:	68 1c 42 01 c0       	push   0xc001421c
c0015269:	6a 08                	push   0x8
c001526b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001526e:	ff d0                	call   eax
c0015270:	83 c4 10             	add    esp,0x10
c0015273:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015276:	8b 00                	mov    eax,DWORD PTR [eax]
c0015278:	83 c0 24             	add    eax,0x24
c001527b:	8b 00                	mov    eax,DWORD PTR [eax]
c001527d:	6a 00                	push   0x0
c001527f:	68 28 4a 01 c0       	push   0xc0014a28
c0015284:	6a 09                	push   0x9
c0015286:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015289:	ff d0                	call   eax
c001528b:	83 c4 10             	add    esp,0x10
c001528e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015291:	8b 00                	mov    eax,DWORD PTR [eax]
c0015293:	83 c0 24             	add    eax,0x24
c0015296:	8b 00                	mov    eax,DWORD PTR [eax]
c0015298:	6a 00                	push   0x0
c001529a:	68 28 4a 01 c0       	push   0xc0014a28
c001529f:	6a 0a                	push   0xa
c00152a1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152a4:	ff d0                	call   eax
c00152a6:	83 c4 10             	add    esp,0x10
c00152a9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00152ae:	83 c0 24             	add    eax,0x24
c00152b1:	8b 00                	mov    eax,DWORD PTR [eax]
c00152b3:	6a 00                	push   0x0
c00152b5:	68 28 4a 01 c0       	push   0xc0014a28
c00152ba:	6a 0b                	push   0xb
c00152bc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152bf:	ff d0                	call   eax
c00152c1:	83 c4 10             	add    esp,0x10
c00152c4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00152c9:	83 c0 24             	add    eax,0x24
c00152cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00152ce:	6a 00                	push   0x0
c00152d0:	68 28 4a 01 c0       	push   0xc0014a28
c00152d5:	6a 0c                	push   0xc
c00152d7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152da:	ff d0                	call   eax
c00152dc:	83 c4 10             	add    esp,0x10
c00152df:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00152e4:	83 c0 24             	add    eax,0x24
c00152e7:	8b 00                	mov    eax,DWORD PTR [eax]
c00152e9:	6a 00                	push   0x0
c00152eb:	68 d8 49 01 c0       	push   0xc00149d8
c00152f0:	6a 0d                	push   0xd
c00152f2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152f5:	ff d0                	call   eax
c00152f7:	83 c4 10             	add    esp,0x10
c00152fa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152fd:	8b 00                	mov    eax,DWORD PTR [eax]
c00152ff:	83 c0 24             	add    eax,0x24
c0015302:	8b 00                	mov    eax,DWORD PTR [eax]
c0015304:	6a 00                	push   0x0
c0015306:	68 11 4a 01 c0       	push   0xc0014a11
c001530b:	6a 0e                	push   0xe
c001530d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015310:	ff d0                	call   eax
c0015312:	83 c4 10             	add    esp,0x10
c0015315:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015318:	8b 00                	mov    eax,DWORD PTR [eax]
c001531a:	83 c0 24             	add    eax,0x24
c001531d:	8b 00                	mov    eax,DWORD PTR [eax]
c001531f:	6a 00                	push   0x0
c0015321:	68 28 4a 01 c0       	push   0xc0014a28
c0015326:	6a 0f                	push   0xf
c0015328:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001532b:	ff d0                	call   eax
c001532d:	83 c4 10             	add    esp,0x10
c0015330:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015333:	8b 00                	mov    eax,DWORD PTR [eax]
c0015335:	83 c0 24             	add    eax,0x24
c0015338:	8b 00                	mov    eax,DWORD PTR [eax]
c001533a:	6a 00                	push   0x0
c001533c:	68 28 4a 01 c0       	push   0xc0014a28
c0015341:	6a 10                	push   0x10
c0015343:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015346:	ff d0                	call   eax
c0015348:	83 c4 10             	add    esp,0x10
c001534b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001534e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015350:	83 c0 24             	add    eax,0x24
c0015353:	8b 00                	mov    eax,DWORD PTR [eax]
c0015355:	6a 00                	push   0x0
c0015357:	68 28 4a 01 c0       	push   0xc0014a28
c001535c:	6a 11                	push   0x11
c001535e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015361:	ff d0                	call   eax
c0015363:	83 c4 10             	add    esp,0x10
c0015366:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015369:	8b 00                	mov    eax,DWORD PTR [eax]
c001536b:	83 c0 24             	add    eax,0x24
c001536e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015370:	6a 00                	push   0x0
c0015372:	68 28 4a 01 c0       	push   0xc0014a28
c0015377:	6a 12                	push   0x12
c0015379:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001537c:	ff d0                	call   eax
c001537e:	83 c4 10             	add    esp,0x10
c0015381:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015384:	8b 00                	mov    eax,DWORD PTR [eax]
c0015386:	83 c0 24             	add    eax,0x24
c0015389:	8b 00                	mov    eax,DWORD PTR [eax]
c001538b:	6a 00                	push   0x0
c001538d:	68 28 4a 01 c0       	push   0xc0014a28
c0015392:	6a 13                	push   0x13
c0015394:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015397:	ff d0                	call   eax
c0015399:	83 c4 10             	add    esp,0x10
c001539c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001539f:	8b 00                	mov    eax,DWORD PTR [eax]
c00153a1:	83 c0 24             	add    eax,0x24
c00153a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00153a6:	6a 00                	push   0x0
c00153a8:	68 28 4a 01 c0       	push   0xc0014a28
c00153ad:	6a 14                	push   0x14
c00153af:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153b2:	ff d0                	call   eax
c00153b4:	83 c4 10             	add    esp,0x10
c00153b7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153ba:	8b 00                	mov    eax,DWORD PTR [eax]
c00153bc:	83 c0 24             	add    eax,0x24
c00153bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00153c1:	6a 00                	push   0x0
c00153c3:	68 28 4a 01 c0       	push   0xc0014a28
c00153c8:	6a 1e                	push   0x1e
c00153ca:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153cd:	ff d0                	call   eax
c00153cf:	83 c4 10             	add    esp,0x10
c00153d2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153d5:	8b 00                	mov    eax,DWORD PTR [eax]
c00153d7:	83 c0 24             	add    eax,0x24
c00153da:	8b 00                	mov    eax,DWORD PTR [eax]
c00153dc:	6a 00                	push   0x0
c00153de:	68 4f b7 01 c0       	push   0xc001b74f
c00153e3:	6a 60                	push   0x60
c00153e5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153e8:	ff d0                	call   eax
c00153ea:	83 c4 10             	add    esp,0x10
c00153ed:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153f0:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00153f3:	c9                   	leave  
c00153f4:	c3                   	ret    
c00153f5:	90                   	nop

c00153f6 <InterruptController::convertLegacyIRQNumber(int)>:
c00153f6:	55                   	push   ebp
c00153f7:	89 e5                	mov    ebp,esp
c00153f9:	83 ec 08             	sub    esp,0x8
c00153fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153ff:	83 ec 0c             	sub    esp,0xc
c0015402:	50                   	push   eax
c0015403:	e8 4c ea ff ff       	call   c0013e54 <Device::getName()>
c0015408:	83 c4 10             	add    esp,0x10
c001540b:	8a 00                	mov    al,BYTE PTR [eax]
c001540d:	3c 41                	cmp    al,0x41
c001540f:	0f 94 c0             	sete   al
c0015412:	84 c0                	test   al,al
c0015414:	74 28                	je     c001543e <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015416:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c001541a:	7f 12                	jg     c001542e <InterruptController::convertLegacyIRQNumber(int)+0x38>
c001541c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001541f:	05 40 bc 02 c0       	add    eax,0xc002bc40
c0015424:	8a 00                	mov    al,BYTE PTR [eax]
c0015426:	0f b6 c0             	movzx  eax,al
c0015429:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c001542c:	eb 10                	jmp    c001543e <InterruptController::convertLegacyIRQNumber(int)+0x48>
c001542e:	83 ec 0c             	sub    esp,0xc
c0015431:	68 54 96 02 c0       	push   0xc0029654
c0015436:	e8 58 44 00 00       	call   c0019893 <Krnl::panic(char const*)>
c001543b:	83 c4 10             	add    esp,0x10
c001543e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015441:	c9                   	leave  
c0015442:	c3                   	ret    
c0015443:	90                   	nop

c0015444 <startGUI(void*)>:
c0015444:	55                   	push   ebp
c0015445:	89 e5                	mov    ebp,esp
c0015447:	53                   	push   ebx
c0015448:	83 ec 04             	sub    esp,0x4
c001544b:	e8 6c 79 00 00       	call   c001cdbc <unlockScheduler()>
c0015450:	8b 1d e8 c9 02 c0    	mov    ebx,DWORD PTR ds:0xc002c9e8
c0015456:	83 ec 08             	sub    esp,0x8
c0015459:	6a 01                	push   0x1
c001545b:	68 3c 99 02 c0       	push   0xc002993c
c0015460:	e8 e1 72 00 00       	call   c001c746 <Thr::loadDLL(char const*, bool)>
c0015465:	83 c4 10             	add    esp,0x10
c0015468:	83 ec 08             	sub    esp,0x8
c001546b:	53                   	push   ebx
c001546c:	50                   	push   eax
c001546d:	e8 e3 74 00 00       	call   c001c955 <Thr::executeDLL(unsigned long, void*)>
c0015472:	83 c4 10             	add    esp,0x10
c0015475:	8b 1d e8 c9 02 c0    	mov    ebx,DWORD PTR ds:0xc002c9e8
c001547b:	83 ec 08             	sub    esp,0x8
c001547e:	6a 01                	push   0x1
c0015480:	68 56 99 02 c0       	push   0xc0029956
c0015485:	e8 bc 72 00 00       	call   c001c746 <Thr::loadDLL(char const*, bool)>
c001548a:	83 c4 10             	add    esp,0x10
c001548d:	83 ec 08             	sub    esp,0x8
c0015490:	53                   	push   ebx
c0015491:	50                   	push   eax
c0015492:	e8 be 74 00 00       	call   c001c955 <Thr::executeDLL(unsigned long, void*)>
c0015497:	83 c4 10             	add    esp,0x10
c001549a:	90                   	nop
c001549b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001549e:	c9                   	leave  
c001549f:	c3                   	ret    

c00154a0 <startGUIVESA(void*)>:
c00154a0:	55                   	push   ebp
c00154a1:	89 e5                	mov    ebp,esp
c00154a3:	53                   	push   ebx
c00154a4:	83 ec 04             	sub    esp,0x4
c00154a7:	e8 10 79 00 00       	call   c001cdbc <unlockScheduler()>
c00154ac:	8b 1d e8 c9 02 c0    	mov    ebx,DWORD PTR ds:0xc002c9e8
c00154b2:	83 ec 08             	sub    esp,0x8
c00154b5:	6a 01                	push   0x1
c00154b7:	68 70 99 02 c0       	push   0xc0029970
c00154bc:	e8 85 72 00 00       	call   c001c746 <Thr::loadDLL(char const*, bool)>
c00154c1:	83 c4 10             	add    esp,0x10
c00154c4:	83 ec 08             	sub    esp,0x8
c00154c7:	53                   	push   ebx
c00154c8:	50                   	push   eax
c00154c9:	e8 87 74 00 00       	call   c001c955 <Thr::executeDLL(unsigned long, void*)>
c00154ce:	83 c4 10             	add    esp,0x10
c00154d1:	8b 1d e8 c9 02 c0    	mov    ebx,DWORD PTR ds:0xc002c9e8
c00154d7:	83 ec 08             	sub    esp,0x8
c00154da:	6a 01                	push   0x1
c00154dc:	68 56 99 02 c0       	push   0xc0029956
c00154e1:	e8 60 72 00 00       	call   c001c746 <Thr::loadDLL(char const*, bool)>
c00154e6:	83 c4 10             	add    esp,0x10
c00154e9:	83 ec 08             	sub    esp,0x8
c00154ec:	53                   	push   ebx
c00154ed:	50                   	push   eax
c00154ee:	e8 62 74 00 00       	call   c001c955 <Thr::executeDLL(unsigned long, void*)>
c00154f3:	83 c4 10             	add    esp,0x10
c00154f6:	90                   	nop
c00154f7:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00154fa:	c9                   	leave  
c00154fb:	c3                   	ret    

c00154fc <sendKeyToTerminal(unsigned char)>:
c00154fc:	55                   	push   ebp
c00154fd:	89 e5                	mov    ebp,esp
c00154ff:	83 ec 28             	sub    esp,0x28
c0015502:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015505:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015508:	a1 c4 ca 02 c0       	mov    eax,ds:0xc002cac4
c001550d:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015511:	83 ec 08             	sub    esp,0x8
c0015514:	52                   	push   edx
c0015515:	50                   	push   eax
c0015516:	e8 3d ba ff ff       	call   c0010f58 <VgaText::receiveKey(unsigned char)>
c001551b:	83 c4 10             	add    esp,0x10
c001551e:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015522:	75 41                	jne    c0015565 <sendKeyToTerminal(unsigned char)+0x69>
c0015524:	e8 b8 78 00 00       	call   c001cde1 <lockStuff()>
c0015529:	a1 a0 cb 02 c0       	mov    eax,ds:0xc002cba0
c001552e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015531:	c7 05 a0 cb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cba0,0x0
c001553b:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c001553f:	74 1f                	je     c0015560 <sendKeyToTerminal(unsigned char)+0x64>
c0015541:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015544:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015547:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001554a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001554d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015550:	83 ec 0c             	sub    esp,0xc
c0015553:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015556:	e8 77 7e 00 00       	call   c001d3d2 <unblockTask(ThreadControlBlock*)>
c001555b:	83 c4 10             	add    esp,0x10
c001555e:	eb db                	jmp    c001553b <sendKeyToTerminal(unsigned char)+0x3f>
c0015560:	e8 16 7c 00 00       	call   c001d17b <unlockStuff()>
c0015565:	90                   	nop
c0015566:	c9                   	leave  
c0015567:	c3                   	ret    

c0015568 <sendKeyboardToken(KeyboardToken)>:
c0015568:	55                   	push   ebp
c0015569:	89 e5                	mov    ebp,esp
c001556b:	83 ec 18             	sub    esp,0x18
c001556e:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015571:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015574:	0f b7 c0             	movzx  eax,ax
c0015577:	83 f2 01             	xor    edx,0x1
c001557a:	88 90 c0 cb 02 c0    	mov    BYTE PTR [eax-0x3ffd3440],dl
c0015580:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015583:	66 3d 03 02          	cmp    ax,0x203
c0015587:	75 07                	jne    c0015590 <sendKeyboardToken(KeyboardToken)+0x28>
c0015589:	a0 c0 cc 02 c0       	mov    al,ds:0xc002ccc0
c001558e:	84 c0                	test   al,al
c0015590:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015594:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015597:	a0 c8 cf 02 c0       	mov    al,ds:0xc002cfc8
c001559c:	38 c2                	cmp    dl,al
c001559e:	74 1c                	je     c00155bc <sendKeyboardToken(KeyboardToken)+0x54>
c00155a0:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c00155a3:	a2 c8 cf 02 c0       	mov    ds:0xc002cfc8,al
c00155a8:	a0 c8 cf 02 c0       	mov    al,ds:0xc002cfc8
c00155ad:	0f b6 c0             	movzx  eax,al
c00155b0:	83 ec 0c             	sub    esp,0xc
c00155b3:	50                   	push   eax
c00155b4:	e8 ff ab ff ff       	call   c00101b8 <setTerminalScrollLock(bool)>
c00155b9:	83 c4 10             	add    esp,0x10
c00155bc:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c00155bf:	84 c0                	test   al,al
c00155c1:	0f 84 ae 00 00 00    	je     c0015675 <sendKeyboardToken(KeyboardToken)+0x10d>
c00155c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155ca:	66 3d 10 03          	cmp    ax,0x310
c00155ce:	75 06                	jne    c00155d6 <sendKeyboardToken(KeyboardToken)+0x6e>
c00155d0:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c00155d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155d9:	66 3d 11 03          	cmp    ax,0x311
c00155dd:	75 06                	jne    c00155e5 <sendKeyboardToken(KeyboardToken)+0x7d>
c00155df:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c00155e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155e8:	66 3d 12 03          	cmp    ax,0x312
c00155ec:	75 06                	jne    c00155f4 <sendKeyboardToken(KeyboardToken)+0x8c>
c00155ee:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c00155f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155f7:	66 3d 13 03          	cmp    ax,0x313
c00155fb:	75 06                	jne    c0015603 <sendKeyboardToken(KeyboardToken)+0x9b>
c00155fd:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015603:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015606:	66 3d 14 03          	cmp    ax,0x314
c001560a:	75 06                	jne    c0015612 <sendKeyboardToken(KeyboardToken)+0xaa>
c001560c:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015612:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015615:	66 3d 15 03          	cmp    ax,0x315
c0015619:	75 06                	jne    c0015621 <sendKeyboardToken(KeyboardToken)+0xb9>
c001561b:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015621:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015624:	66 3d 16 03          	cmp    ax,0x316
c0015628:	75 06                	jne    c0015630 <sendKeyboardToken(KeyboardToken)+0xc8>
c001562a:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015630:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015633:	66 3d 17 03          	cmp    ax,0x317
c0015637:	75 06                	jne    c001563f <sendKeyboardToken(KeyboardToken)+0xd7>
c0015639:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c001563f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015642:	66 3d 18 03          	cmp    ax,0x318
c0015646:	75 06                	jne    c001564e <sendKeyboardToken(KeyboardToken)+0xe6>
c0015648:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c001564e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015651:	66 3d 19 03          	cmp    ax,0x319
c0015655:	75 06                	jne    c001565d <sendKeyboardToken(KeyboardToken)+0xf5>
c0015657:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c001565d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015660:	66 3d 1a 03          	cmp    ax,0x31a
c0015664:	0f 85 c9 00 00 00    	jne    c0015733 <sendKeyboardToken(KeyboardToken)+0x1cb>
c001566a:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015670:	e9 be 00 00 00       	jmp    c0015733 <sendKeyboardToken(KeyboardToken)+0x1cb>
c0015675:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015678:	66 3d 10 03          	cmp    ax,0x310
c001567c:	75 0a                	jne    c0015688 <sendKeyboardToken(KeyboardToken)+0x120>
c001567e:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015684:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015688:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001568b:	66 3d 11 03          	cmp    ax,0x311
c001568f:	75 0a                	jne    c001569b <sendKeyboardToken(KeyboardToken)+0x133>
c0015691:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015697:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001569b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001569e:	66 3d 12 03          	cmp    ax,0x312
c00156a2:	75 0a                	jne    c00156ae <sendKeyboardToken(KeyboardToken)+0x146>
c00156a4:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c00156aa:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00156ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156b1:	66 3d 13 03          	cmp    ax,0x313
c00156b5:	75 0a                	jne    c00156c1 <sendKeyboardToken(KeyboardToken)+0x159>
c00156b7:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c00156bd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00156c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156c4:	66 3d 14 03          	cmp    ax,0x314
c00156c8:	75 0a                	jne    c00156d4 <sendKeyboardToken(KeyboardToken)+0x16c>
c00156ca:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c00156d0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00156d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156d7:	66 3d 15 03          	cmp    ax,0x315
c00156db:	75 0a                	jne    c00156e7 <sendKeyboardToken(KeyboardToken)+0x17f>
c00156dd:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00156e3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00156e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156ea:	66 3d 16 03          	cmp    ax,0x316
c00156ee:	75 0a                	jne    c00156fa <sendKeyboardToken(KeyboardToken)+0x192>
c00156f0:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c00156f6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00156fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156fd:	66 3d 17 03          	cmp    ax,0x317
c0015701:	75 0a                	jne    c001570d <sendKeyboardToken(KeyboardToken)+0x1a5>
c0015703:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0015709:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001570d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015710:	66 3d 18 03          	cmp    ax,0x318
c0015714:	75 0a                	jne    c0015720 <sendKeyboardToken(KeyboardToken)+0x1b8>
c0015716:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c001571c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015720:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015723:	66 3d 19 03          	cmp    ax,0x319
c0015727:	75 0a                	jne    c0015733 <sendKeyboardToken(KeyboardToken)+0x1cb>
c0015729:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c001572f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015733:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015736:	66 3d 00 02          	cmp    ax,0x200
c001573a:	75 2c                	jne    c0015768 <sendKeyboardToken(KeyboardToken)+0x200>
c001573c:	a0 c0 cf 02 c0       	mov    al,ds:0xc002cfc0
c0015741:	83 f0 01             	xor    eax,0x1
c0015744:	84 c0                	test   al,al
c0015746:	74 20                	je     c0015768 <sendKeyboardToken(KeyboardToken)+0x200>
c0015748:	a1 34 df 02 c0       	mov    eax,ds:0xc002df34
c001574d:	6a 01                	push   0x1
c001574f:	6a 00                	push   0x0
c0015751:	68 44 54 01 c0       	push   0xc0015444
c0015756:	50                   	push   eax
c0015757:	e8 90 77 00 00       	call   c001ceec <Process::createThread(void (*)(void*), void*, int)>
c001575c:	83 c4 10             	add    esp,0x10
c001575f:	c6 05 c0 cf 02 c0 01 	mov    BYTE PTR ds:0xc002cfc0,0x1
c0015766:	eb 33                	jmp    c001579b <sendKeyboardToken(KeyboardToken)+0x233>
c0015768:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001576b:	66 3d 01 02          	cmp    ax,0x201
c001576f:	75 2a                	jne    c001579b <sendKeyboardToken(KeyboardToken)+0x233>
c0015771:	a0 c0 cf 02 c0       	mov    al,ds:0xc002cfc0
c0015776:	83 f0 01             	xor    eax,0x1
c0015779:	84 c0                	test   al,al
c001577b:	74 1e                	je     c001579b <sendKeyboardToken(KeyboardToken)+0x233>
c001577d:	a1 34 df 02 c0       	mov    eax,ds:0xc002df34
c0015782:	6a 01                	push   0x1
c0015784:	6a 00                	push   0x0
c0015786:	68 a0 54 01 c0       	push   0xc00154a0
c001578b:	50                   	push   eax
c001578c:	e8 5b 77 00 00       	call   c001ceec <Process::createThread(void (*)(void*), void*, int)>
c0015791:	83 c4 10             	add    esp,0x10
c0015794:	c6 05 c0 cf 02 c0 01 	mov    BYTE PTR ds:0xc002cfc0,0x1
c001579b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001579e:	66 3d 1d 03          	cmp    ax,0x31d
c00157a2:	75 06                	jne    c00157aa <sendKeyboardToken(KeyboardToken)+0x242>
c00157a4:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c00157aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157ad:	66 3d 1c 03          	cmp    ax,0x31c
c00157b1:	75 06                	jne    c00157b9 <sendKeyboardToken(KeyboardToken)+0x251>
c00157b3:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c00157b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157bc:	66 3d 1b 03          	cmp    ax,0x31b
c00157c0:	75 06                	jne    c00157c8 <sendKeyboardToken(KeyboardToken)+0x260>
c00157c2:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c00157c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157cb:	66 3d 1e 03          	cmp    ax,0x31e
c00157cf:	75 06                	jne    c00157d7 <sendKeyboardToken(KeyboardToken)+0x26f>
c00157d1:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c00157d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157da:	66 3d 1f 03          	cmp    ax,0x31f
c00157de:	75 06                	jne    c00157e6 <sendKeyboardToken(KeyboardToken)+0x27e>
c00157e0:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c00157e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157e9:	66 3d 1a 03          	cmp    ax,0x31a
c00157ed:	75 06                	jne    c00157f5 <sendKeyboardToken(KeyboardToken)+0x28d>
c00157ef:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c00157f5:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c00157f9:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00157fc:	83 f0 01             	xor    eax,0x1
c00157ff:	84 c0                	test   al,al
c0015801:	74 77                	je     c001587a <sendKeyboardToken(KeyboardToken)+0x312>
c0015803:	a0 c1 cc 02 c0       	mov    al,ds:0xc002ccc1
c0015808:	84 c0                	test   al,al
c001580a:	74 41                	je     c001584d <sendKeyboardToken(KeyboardToken)+0x2e5>
c001580c:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015810:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0015814:	74 2b                	je     c0015841 <sendKeyboardToken(KeyboardToken)+0x2d9>
c0015816:	8b 15 c4 cf 02 c0    	mov    edx,DWORD PTR ds:0xc002cfc4
c001581c:	89 d0                	mov    eax,edx
c001581e:	c1 e0 02             	shl    eax,0x2
c0015821:	01 d0                	add    eax,edx
c0015823:	01 c0                	add    eax,eax
c0015825:	a3 c4 cf 02 c0       	mov    ds:0xc002cfc4,eax
c001582a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001582d:	0f b7 c0             	movzx  eax,ax
c0015830:	8d 50 d0             	lea    edx,[eax-0x30]
c0015833:	a1 c4 cf 02 c0       	mov    eax,ds:0xc002cfc4
c0015838:	01 d0                	add    eax,edx
c001583a:	a3 c4 cf 02 c0       	mov    ds:0xc002cfc4,eax
c001583f:	eb 6d                	jmp    c00158ae <sendKeyboardToken(KeyboardToken)+0x346>
c0015841:	c7 05 c4 cf 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cfc4,0x0
c001584b:	eb 61                	jmp    c00158ae <sendKeyboardToken(KeyboardToken)+0x346>
c001584d:	a1 c4 cf 02 c0       	mov    eax,ds:0xc002cfc4
c0015852:	85 c0                	test   eax,eax
c0015854:	74 18                	je     c001586e <sendKeyboardToken(KeyboardToken)+0x306>
c0015856:	a1 c4 cf 02 c0       	mov    eax,ds:0xc002cfc4
c001585b:	0f b6 c0             	movzx  eax,al
c001585e:	83 ec 0c             	sub    esp,0xc
c0015861:	50                   	push   eax
c0015862:	e8 95 fc ff ff       	call   c00154fc <sendKeyToTerminal(unsigned char)>
c0015867:	83 c4 10             	add    esp,0x10
c001586a:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001586e:	c7 05 c4 cf 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cfc4,0x0
c0015878:	eb 34                	jmp    c00158ae <sendKeyboardToken(KeyboardToken)+0x346>
c001587a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001587d:	66 3d 01 01          	cmp    ax,0x101
c0015881:	75 2b                	jne    c00158ae <sendKeyboardToken(KeyboardToken)+0x346>
c0015883:	a1 c4 cf 02 c0       	mov    eax,ds:0xc002cfc4
c0015888:	85 c0                	test   eax,eax
c001588a:	74 18                	je     c00158a4 <sendKeyboardToken(KeyboardToken)+0x33c>
c001588c:	a1 c4 cf 02 c0       	mov    eax,ds:0xc002cfc4
c0015891:	0f b6 c0             	movzx  eax,al
c0015894:	83 ec 0c             	sub    esp,0xc
c0015897:	50                   	push   eax
c0015898:	e8 5f fc ff ff       	call   c00154fc <sendKeyToTerminal(unsigned char)>
c001589d:	83 c4 10             	add    esp,0x10
c00158a0:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00158a4:	c7 05 c4 cf 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cfc4,0x0
c00158ae:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00158b1:	83 f0 01             	xor    eax,0x1
c00158b4:	84 c0                	test   al,al
c00158b6:	74 4c                	je     c0015904 <sendKeyboardToken(KeyboardToken)+0x39c>
c00158b8:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00158bb:	83 f0 01             	xor    eax,0x1
c00158be:	84 c0                	test   al,al
c00158c0:	74 42                	je     c0015904 <sendKeyboardToken(KeyboardToken)+0x39c>
c00158c2:	a0 c0 cc 02 c0       	mov    al,ds:0xc002ccc0
c00158c7:	83 f0 01             	xor    eax,0x1
c00158ca:	84 c0                	test   al,al
c00158cc:	74 36                	je     c0015904 <sendKeyboardToken(KeyboardToken)+0x39c>
c00158ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158d1:	66 83 f8 1f          	cmp    ax,0x1f
c00158d5:	76 09                	jbe    c00158e0 <sendKeyboardToken(KeyboardToken)+0x378>
c00158d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158da:	66 83 f8 7e          	cmp    ax,0x7e
c00158de:	76 12                	jbe    c00158f2 <sendKeyboardToken(KeyboardToken)+0x38a>
c00158e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158e3:	66 83 f8 0a          	cmp    ax,0xa
c00158e7:	74 09                	je     c00158f2 <sendKeyboardToken(KeyboardToken)+0x38a>
c00158e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158ec:	66 83 f8 08          	cmp    ax,0x8
c00158f0:	75 12                	jne    c0015904 <sendKeyboardToken(KeyboardToken)+0x39c>
c00158f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158f5:	0f b6 c0             	movzx  eax,al
c00158f8:	83 ec 0c             	sub    esp,0xc
c00158fb:	50                   	push   eax
c00158fc:	e8 fb fb ff ff       	call   c00154fc <sendKeyToTerminal(unsigned char)>
c0015901:	83 c4 10             	add    esp,0x10
c0015904:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015907:	83 f0 01             	xor    eax,0x1
c001590a:	84 c0                	test   al,al
c001590c:	74 4f                	je     c001595d <sendKeyboardToken(KeyboardToken)+0x3f5>
c001590e:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015911:	83 f0 01             	xor    eax,0x1
c0015914:	84 c0                	test   al,al
c0015916:	74 45                	je     c001595d <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015918:	a0 c0 cc 02 c0       	mov    al,ds:0xc002ccc0
c001591d:	84 c0                	test   al,al
c001591f:	74 3c                	je     c001595d <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015921:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015924:	66 83 f8 3f          	cmp    ax,0x3f
c0015928:	76 33                	jbe    c001595d <sendKeyboardToken(KeyboardToken)+0x3f5>
c001592a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001592d:	66 83 f8 7f          	cmp    ax,0x7f
c0015931:	77 2a                	ja     c001595d <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015933:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015936:	88 c2                	mov    dl,al
c0015938:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001593b:	66 83 f8 5f          	cmp    ax,0x5f
c001593f:	76 04                	jbe    c0015945 <sendKeyboardToken(KeyboardToken)+0x3dd>
c0015941:	b0 20                	mov    al,0x20
c0015943:	eb 02                	jmp    c0015947 <sendKeyboardToken(KeyboardToken)+0x3df>
c0015945:	b0 00                	mov    al,0x0
c0015947:	29 c2                	sub    edx,eax
c0015949:	88 d0                	mov    al,dl
c001594b:	83 e8 40             	sub    eax,0x40
c001594e:	0f b6 c0             	movzx  eax,al
c0015951:	83 ec 0c             	sub    esp,0xc
c0015954:	50                   	push   eax
c0015955:	e8 a2 fb ff ff       	call   c00154fc <sendKeyToTerminal(unsigned char)>
c001595a:	83 c4 10             	add    esp,0x10
c001595d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015960:	66 3d 00 03          	cmp    ax,0x300
c0015964:	75 0f                	jne    c0015975 <sendKeyboardToken(KeyboardToken)+0x40d>
c0015966:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015969:	83 f0 01             	xor    eax,0x1
c001596c:	84 c0                	test   al,al
c001596e:	74 05                	je     c0015975 <sendKeyboardToken(KeyboardToken)+0x40d>
c0015970:	e8 78 b0 ff ff       	call   c00109ed <doTerminalCycle()>
c0015975:	90                   	nop
c0015976:	c9                   	leave  
c0015977:	c3                   	ret    

c0015978 <clearInternalKeybuffer(VgaText*)>:
c0015978:	55                   	push   ebp
c0015979:	89 e5                	mov    ebp,esp
c001597b:	83 ec 08             	sub    esp,0x8
c001597e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015981:	05 34 11 00 00       	add    eax,0x1134
c0015986:	83 ec 0c             	sub    esp,0xc
c0015989:	50                   	push   eax
c001598a:	e8 19 ad fe ff       	call   c00006a8 <strlen>
c001598f:	83 c4 10             	add    esp,0x10
c0015992:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015995:	81 c2 34 11 00 00    	add    edx,0x1134
c001599b:	83 ec 04             	sub    esp,0x4
c001599e:	50                   	push   eax
c001599f:	6a 00                	push   0x0
c00159a1:	52                   	push   edx
c00159a2:	e8 e4 ac fe ff       	call   c000068b <memset>
c00159a7:	83 c4 10             	add    esp,0x10
c00159aa:	90                   	nop
c00159ab:	c9                   	leave  
c00159ac:	c3                   	ret    

c00159ad <readKeyboard(VgaText*, char*, unsigned long)>:
c00159ad:	55                   	push   ebp
c00159ae:	89 e5                	mov    ebp,esp
c00159b0:	83 ec 18             	sub    esp,0x18
c00159b3:	fb                   	sti    
c00159b4:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c00159bb:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c00159bf:	0f 84 8a 00 00 00    	je     c0015a4f <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c00159c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159c8:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c00159ce:	84 c0                	test   al,al
c00159d0:	75 11                	jne    c00159e3 <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c00159d2:	e8 e3 73 00 00       	call   c001cdba <lockScheduler()>
c00159d7:	e8 1a 77 00 00       	call   c001d0f6 <schedule()>
c00159dc:	e8 db 73 00 00       	call   c001cdbc <unlockScheduler()>
c00159e1:	eb e2                	jmp    c00159c5 <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c00159e3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00159e6:	8d 50 01             	lea    edx,[eax+0x1]
c00159e9:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c00159ec:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00159ef:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c00159f5:	88 10                	mov    BYTE PTR [eax],dl
c00159f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159fa:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0015a00:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0015a03:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a06:	05 34 11 00 00       	add    eax,0x1134
c0015a0b:	83 ec 0c             	sub    esp,0xc
c0015a0e:	50                   	push   eax
c0015a0f:	e8 94 ac fe ff       	call   c00006a8 <strlen>
c0015a14:	83 c4 10             	add    esp,0x10
c0015a17:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015a1a:	81 c2 34 11 00 00    	add    edx,0x1134
c0015a20:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015a23:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015a26:	81 c2 34 11 00 00    	add    edx,0x1134
c0015a2c:	83 ec 04             	sub    esp,0x4
c0015a2f:	50                   	push   eax
c0015a30:	51                   	push   ecx
c0015a31:	52                   	push   edx
c0015a32:	e8 e6 ab fe ff       	call   c000061d <memmove>
c0015a37:	83 c4 10             	add    esp,0x10
c0015a3a:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0015a3d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015a40:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0015a44:	0f 85 71 ff ff ff    	jne    c00159bb <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0015a4a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a4d:	eb 03                	jmp    c0015a52 <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c0015a4f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a52:	c9                   	leave  
c0015a53:	c3                   	ret    

c0015a54 <Keyboard::Keyboard(char const*)>:
c0015a54:	83 ec 0c             	sub    esp,0xc
c0015a57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a5b:	83 ec 08             	sub    esp,0x8
c0015a5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015a62:	50                   	push   eax
c0015a63:	e8 f0 e2 ff ff       	call   c0013d58 <Device::Device(char const*)>
c0015a68:	83 c4 10             	add    esp,0x10
c0015a6b:	ba 94 99 02 c0       	mov    edx,0xc0029994
c0015a70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a74:	89 10                	mov    DWORD PTR [eax],edx
c0015a76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a7a:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0015a84:	c6 05 a4 cb 02 c0 01 	mov    BYTE PTR ds:0xc002cba4,0x1
c0015a8b:	90                   	nop
c0015a8c:	83 c4 0c             	add    esp,0xc
c0015a8f:	c3                   	ret    

c0015a90 <Keyboard::~Keyboard()>:
c0015a90:	83 ec 0c             	sub    esp,0xc
c0015a93:	ba 94 99 02 c0       	mov    edx,0xc0029994
c0015a98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a9c:	89 10                	mov    DWORD PTR [eax],edx
c0015a9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015aa2:	83 ec 0c             	sub    esp,0xc
c0015aa5:	50                   	push   eax
c0015aa6:	e8 8f df ff ff       	call   c0013a3a <Device::~Device()>
c0015aab:	83 c4 10             	add    esp,0x10
c0015aae:	90                   	nop
c0015aaf:	83 c4 0c             	add    esp,0xc
c0015ab2:	c3                   	ret    
c0015ab3:	90                   	nop

c0015ab4 <Keyboard::~Keyboard()>:
c0015ab4:	83 ec 0c             	sub    esp,0xc
c0015ab7:	83 ec 0c             	sub    esp,0xc
c0015aba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015abe:	e8 cd ff ff ff       	call   c0015a90 <Keyboard::~Keyboard()>
c0015ac3:	83 c4 10             	add    esp,0x10
c0015ac6:	83 ec 08             	sub    esp,0x8
c0015ac9:	68 5c 01 00 00       	push   0x15c
c0015ace:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015ad2:	e8 c2 cb ff ff       	call   c0012699 <operator delete(void*, unsigned long)>
c0015ad7:	83 c4 10             	add    esp,0x10
c0015ada:	83 c4 0c             	add    esp,0xc
c0015add:	c3                   	ret    

c0015ade <LogicalDisk::close(int, int, void*)>:
c0015ade:	83 c8 ff             	or     eax,0xffffffff
c0015ae1:	c3                   	ret    

c0015ae2 <LogicalDisk::~LogicalDisk()>:
c0015ae2:	83 ec 0c             	sub    esp,0xc
c0015ae5:	ba 44 9a 02 c0       	mov    edx,0xc0029a44
c0015aea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015aee:	89 10                	mov    DWORD PTR [eax],edx
c0015af0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015af4:	83 ec 0c             	sub    esp,0xc
c0015af7:	50                   	push   eax
c0015af8:	e8 3d df ff ff       	call   c0013a3a <Device::~Device()>
c0015afd:	83 c4 10             	add    esp,0x10
c0015b00:	90                   	nop
c0015b01:	83 c4 0c             	add    esp,0xc
c0015b04:	c3                   	ret    
c0015b05:	90                   	nop

c0015b06 <LogicalDisk::~LogicalDisk()>:
c0015b06:	83 ec 0c             	sub    esp,0xc
c0015b09:	83 ec 0c             	sub    esp,0xc
c0015b0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015b10:	e8 cd ff ff ff       	call   c0015ae2 <LogicalDisk::~LogicalDisk()>
c0015b15:	83 c4 10             	add    esp,0x10
c0015b18:	83 ec 08             	sub    esp,0x8
c0015b1b:	68 74 01 00 00       	push   0x174
c0015b20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015b24:	e8 70 cb ff ff       	call   c0012699 <operator delete(void*, unsigned long)>
c0015b29:	83 c4 10             	add    esp,0x10
c0015b2c:	83 c4 0c             	add    esp,0xc
c0015b2f:	c3                   	ret    

c0015b30 <LogicalDisk::open(int, int, void*)>:
c0015b30:	83 ec 18             	sub    esp,0x18
c0015b33:	68 c0 99 02 c0       	push   0xc00299c0
c0015b38:	e8 56 3d 00 00       	call   c0019893 <Krnl::panic(char const*)>
c0015b3d:	83 c8 ff             	or     eax,0xffffffff
c0015b40:	83 c4 1c             	add    esp,0x1c
c0015b43:	c3                   	ret    

c0015b44 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0015b44:	53                   	push   ebx
c0015b45:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015b49:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015b4d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015b51:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0015b57:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0015b5d:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0015b63:	77 10                	ja     c0015b75 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0015b65:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0015b6b:	89 d3                	mov    ebx,edx
c0015b6d:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0015b73:	72 05                	jb     c0015b7a <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0015b75:	83 c8 ff             	or     eax,0xffffffff
c0015b78:	89 c2                	mov    edx,eax
c0015b7a:	5b                   	pop    ebx
c0015b7b:	c3                   	ret    

c0015b7c <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0015b7c:	56                   	push   esi
c0015b7d:	83 c8 ff             	or     eax,0xffffffff
c0015b80:	53                   	push   ebx
c0015b81:	89 c2                	mov    edx,eax
c0015b83:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015b87:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0015b8b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015b8f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015b95:	77 27                	ja     c0015bbe <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015b97:	89 d8                	mov    eax,ebx
c0015b99:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0015b9f:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0015ba5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015baa:	89 c2                	mov    edx,eax
c0015bac:	73 10                	jae    c0015bbe <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015bae:	89 c8                	mov    eax,ecx
c0015bb0:	89 da                	mov    edx,ebx
c0015bb2:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0015bb8:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0015bbe:	5b                   	pop    ebx
c0015bbf:	5e                   	pop    esi
c0015bc0:	c3                   	ret    
c0015bc1:	90                   	nop

c0015bc2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015bc2:	83 ec 1c             	sub    esp,0x1c
c0015bc5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015bc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015bcd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015bd1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015bd5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015bd9:	89 04 24             	mov    DWORD PTR [esp],eax
c0015bdc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015be0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015be4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015be8:	83 ec 08             	sub    esp,0x8
c0015beb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015bef:	50                   	push   eax
c0015bf0:	e8 63 e1 ff ff       	call   c0013d58 <Device::Device(char const*)>
c0015bf5:	83 c4 10             	add    esp,0x10
c0015bf8:	ba 44 9a 02 c0       	mov    edx,0xc0029a44
c0015bfd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c01:	89 10                	mov    DWORD PTR [eax],edx
c0015c03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c07:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015c0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c12:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015c19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c1d:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0015c27:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015c2b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015c2f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015c33:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0015c39:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0015c3f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015c43:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015c46:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015c4a:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0015c50:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0015c56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c5a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015c5e:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0015c64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c68:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015c72:	90                   	nop
c0015c73:	83 c4 1c             	add    esp,0x1c
c0015c76:	c3                   	ret    
c0015c77:	90                   	nop

c0015c78 <LogicalDisk::assignDriveLetter()>:
c0015c78:	55                   	push   ebp
c0015c79:	57                   	push   edi
c0015c7a:	56                   	push   esi
c0015c7b:	53                   	push   ebx
c0015c7c:	83 ec 14             	sub    esp,0x14
c0015c7f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015c83:	8b 3d e0 cf 02 c0    	mov    edi,DWORD PTR ds:0xc002cfe0
c0015c89:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0015c8f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0015c93:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0015c99:	8b 3d e4 cf 02 c0    	mov    edi,DWORD PTR ds:0xc002cfe4
c0015c9f:	3c 01                	cmp    al,0x1
c0015ca1:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0015ca5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0015ca9:	19 c0                	sbb    eax,eax
c0015cab:	83 e0 02             	and    eax,0x2
c0015cae:	83 c0 41             	add    eax,0x41
c0015cb1:	0f be e8             	movsx  ebp,al
c0015cb4:	3c 43                	cmp    al,0x43
c0015cb6:	75 10                	jne    c0015cc8 <LogicalDisk::assignDriveLetter()+0x50>
c0015cb8:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0015cbf:	75 5d                	jne    c0015d1e <LogicalDisk::assignDriveLetter()+0xa6>
c0015cc1:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015cc6:	75 56                	jne    c0015d1e <LogicalDisk::assignDriveLetter()+0xa6>
c0015cc8:	8d 75 bf             	lea    esi,[ebp-0x41]
c0015ccb:	ba 01 00 00 00       	mov    edx,0x1
c0015cd0:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0015cd4:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0015cd8:	d3 e2                	shl    edx,cl
c0015cda:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015cde:	89 d7                	mov    edi,edx
c0015ce0:	89 d6                	mov    esi,edx
c0015ce2:	c1 ff 1f             	sar    edi,0x1f
c0015ce5:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0015ce9:	21 f9                	and    ecx,edi
c0015ceb:	09 d1                	or     ecx,edx
c0015ced:	75 2f                	jne    c0015d1e <LogicalDisk::assignDriveLetter()+0xa6>
c0015cef:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0015cf3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015cf7:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0015cfd:	09 f2                	or     edx,esi
c0015cff:	89 15 e0 cf 02 c0    	mov    DWORD PTR ds:0xc002cfe0,edx
c0015d05:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015d09:	09 fa                	or     edx,edi
c0015d0b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0015d0f:	89 15 e4 cf 02 c0    	mov    DWORD PTR ds:0xc002cfe4,edx
c0015d15:	89 1c bd 00 d0 02 c0 	mov    DWORD PTR [edi*4-0x3ffd3000],ebx
c0015d1c:	eb 08                	jmp    c0015d26 <LogicalDisk::assignDriveLetter()+0xae>
c0015d1e:	45                   	inc    ebp
c0015d1f:	40                   	inc    eax
c0015d20:	3c 5b                	cmp    al,0x5b
c0015d22:	75 90                	jne    c0015cb4 <LogicalDisk::assignDriveLetter()+0x3c>
c0015d24:	31 c0                	xor    eax,eax
c0015d26:	83 c4 14             	add    esp,0x14
c0015d29:	5b                   	pop    ebx
c0015d2a:	5e                   	pop    esi
c0015d2b:	5f                   	pop    edi
c0015d2c:	5d                   	pop    ebp
c0015d2d:	c3                   	ret    

c0015d2e <LogicalDisk::mount()>:
c0015d2e:	56                   	push   esi
c0015d2f:	53                   	push   ebx
c0015d30:	51                   	push   ecx
c0015d31:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015d35:	8b 1d 68 cb 02 c0    	mov    ebx,DWORD PTR ds:0xc002cb68
c0015d3b:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0015d45:	85 db                	test   ebx,ebx
c0015d47:	74 50                	je     c0015d99 <LogicalDisk::mount()+0x6b>
c0015d49:	e8 57 70 00 00       	call   c001cda5 <getIRQNestingLevel()>
c0015d4e:	52                   	push   edx
c0015d4f:	52                   	push   edx
c0015d50:	50                   	push   eax
c0015d51:	68 e4 99 02 c0       	push   0xc00299e4
c0015d56:	e8 1e ca ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c0015d5b:	83 c4 0c             	add    esp,0xc
c0015d5e:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0015d65:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015d67:	83 e8 41             	sub    eax,0x41
c0015d6a:	50                   	push   eax
c0015d6b:	56                   	push   esi
c0015d6c:	53                   	push   ebx
c0015d6d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015d70:	83 c4 10             	add    esp,0x10
c0015d73:	84 c0                	test   al,al
c0015d75:	74 08                	je     c0015d7f <LogicalDisk::mount()+0x51>
c0015d77:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0015d7d:	eb 1c                	jmp    c0015d9b <LogicalDisk::mount()+0x6d>
c0015d7f:	e8 21 70 00 00       	call   c001cda5 <getIRQNestingLevel()>
c0015d84:	51                   	push   ecx
c0015d85:	51                   	push   ecx
c0015d86:	50                   	push   eax
c0015d87:	68 ff 99 02 c0       	push   0xc00299ff
c0015d8c:	e8 e8 c9 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c0015d91:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0015d94:	83 c4 10             	add    esp,0x10
c0015d97:	eb ac                	jmp    c0015d45 <LogicalDisk::mount()+0x17>
c0015d99:	31 c0                	xor    eax,eax
c0015d9b:	5a                   	pop    edx
c0015d9c:	5b                   	pop    ebx
c0015d9d:	5e                   	pop    esi
c0015d9e:	c3                   	ret    
c0015d9f:	90                   	nop

c0015da0 <LogicalDisk::unmount()>:
c0015da0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015da4:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015dae:	c3                   	ret    
c0015daf:	90                   	nop

c0015db0 <LogicalDisk::unassignDriveLetter()>:
c0015db0:	57                   	push   edi
c0015db1:	56                   	push   esi
c0015db2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015db6:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0015dbd:	84 c9                	test   cl,cl
c0015dbf:	75 0f                	jne    c0015dd0 <LogicalDisk::unassignDriveLetter()+0x20>
c0015dc1:	c7 44 24 0c 1a 9a 02 c0 	mov    DWORD PTR [esp+0xc],0xc0029a1a
c0015dc9:	5e                   	pop    esi
c0015dca:	5f                   	pop    edi
c0015dcb:	e9 c3 3a 00 00       	jmp    c0019893 <Krnl::panic(char const*)>
c0015dd0:	83 e9 41             	sub    ecx,0x41
c0015dd3:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0015dda:	b8 01 00 00 00       	mov    eax,0x1
c0015ddf:	c7 04 8d 00 d0 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd3000],0x0
c0015dea:	d3 e0                	shl    eax,cl
c0015dec:	89 c7                	mov    edi,eax
c0015dee:	f7 d0                	not    eax
c0015df0:	c1 ff 1f             	sar    edi,0x1f
c0015df3:	21 05 e0 cf 02 c0    	and    DWORD PTR ds:0xc002cfe0,eax
c0015df9:	89 fe                	mov    esi,edi
c0015dfb:	f7 d6                	not    esi
c0015dfd:	21 35 e4 cf 02 c0    	and    DWORD PTR ds:0xc002cfe4,esi
c0015e03:	5e                   	pop    esi
c0015e04:	5f                   	pop    edi
c0015e05:	c3                   	ret    

c0015e06 <LogicalDisk::read(unsigned long long, int, void*)>:
c0015e06:	57                   	push   edi
c0015e07:	56                   	push   esi
c0015e08:	53                   	push   ebx
c0015e09:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015e0d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015e11:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015e15:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015e19:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015e1f:	77 41                	ja     c0015e62 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0015e21:	99                   	cdq    
c0015e22:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0015e28:	01 c8                	add    eax,ecx
c0015e2a:	11 da                	adc    edx,ebx
c0015e2c:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0015e32:	19 d7                	sbb    edi,edx
c0015e34:	72 33                	jb     c0015e69 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0015e36:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0015e3c:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0015e42:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0015e46:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0015e4a:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0015e50:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015e56:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015e5a:	5b                   	pop    ebx
c0015e5b:	5e                   	pop    esi
c0015e5c:	5f                   	pop    edi
c0015e5d:	e9 f8 09 00 00       	jmp    c001685a <VCache::read(unsigned long long, int, void*)>
c0015e62:	b8 05 00 00 00       	mov    eax,0x5
c0015e67:	eb 05                	jmp    c0015e6e <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0015e69:	b8 07 00 00 00       	mov    eax,0x7
c0015e6e:	5b                   	pop    ebx
c0015e6f:	5e                   	pop    esi
c0015e70:	5f                   	pop    edi
c0015e71:	c3                   	ret    

c0015e72 <LogicalDisk::write(unsigned long long, int, void*)>:
c0015e72:	57                   	push   edi
c0015e73:	56                   	push   esi
c0015e74:	53                   	push   ebx
c0015e75:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015e79:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015e7d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015e81:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015e85:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015e8b:	77 41                	ja     c0015ece <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0015e8d:	99                   	cdq    
c0015e8e:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0015e94:	01 c8                	add    eax,ecx
c0015e96:	11 da                	adc    edx,ebx
c0015e98:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0015e9e:	19 d7                	sbb    edi,edx
c0015ea0:	72 33                	jb     c0015ed5 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0015ea2:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0015ea8:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0015eae:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0015eb2:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0015eb6:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0015ebc:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015ec2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015ec6:	5b                   	pop    ebx
c0015ec7:	5e                   	pop    esi
c0015ec8:	5f                   	pop    edi
c0015ec9:	e9 a8 08 00 00       	jmp    c0016776 <VCache::write(unsigned long long, int, void*)>
c0015ece:	b8 05 00 00 00       	mov    eax,0x5
c0015ed3:	eb 05                	jmp    c0015eda <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0015ed5:	b8 07 00 00 00       	mov    eax,0x7
c0015eda:	5b                   	pop    ebx
c0015edb:	5e                   	pop    esi
c0015edc:	5f                   	pop    edi
c0015edd:	c3                   	ret    

c0015ede <Mouse::Mouse(char const*)>:
c0015ede:	83 ec 0c             	sub    esp,0xc
c0015ee1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ee5:	83 ec 08             	sub    esp,0x8
c0015ee8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015eec:	50                   	push   eax
c0015eed:	e8 66 de ff ff       	call   c0013d58 <Device::Device(char const*)>
c0015ef2:	83 c4 10             	add    esp,0x10
c0015ef5:	ba 70 9a 02 c0       	mov    edx,0xc0029a70
c0015efa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015efe:	89 10                	mov    DWORD PTR [eax],edx
c0015f00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f04:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0015f0e:	90                   	nop
c0015f0f:	83 c4 0c             	add    esp,0xc
c0015f12:	c3                   	ret    
c0015f13:	90                   	nop

c0015f14 <Mouse::~Mouse()>:
c0015f14:	83 ec 0c             	sub    esp,0xc
c0015f17:	ba 70 9a 02 c0       	mov    edx,0xc0029a70
c0015f1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f20:	89 10                	mov    DWORD PTR [eax],edx
c0015f22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f26:	83 ec 0c             	sub    esp,0xc
c0015f29:	50                   	push   eax
c0015f2a:	e8 0b db ff ff       	call   c0013a3a <Device::~Device()>
c0015f2f:	83 c4 10             	add    esp,0x10
c0015f32:	90                   	nop
c0015f33:	83 c4 0c             	add    esp,0xc
c0015f36:	c3                   	ret    
c0015f37:	90                   	nop

c0015f38 <Mouse::~Mouse()>:
c0015f38:	83 ec 0c             	sub    esp,0xc
c0015f3b:	83 ec 0c             	sub    esp,0xc
c0015f3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015f42:	e8 cd ff ff ff       	call   c0015f14 <Mouse::~Mouse()>
c0015f47:	83 c4 10             	add    esp,0x10
c0015f4a:	83 ec 08             	sub    esp,0x8
c0015f4d:	68 58 01 00 00       	push   0x158
c0015f52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015f56:	e8 3e c7 ff ff       	call   c0012699 <operator delete(void*, unsigned long)>
c0015f5b:	83 c4 10             	add    esp,0x10
c0015f5e:	83 c4 0c             	add    esp,0xc
c0015f61:	c3                   	ret    

c0015f62 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015f62:	55                   	push   ebp
c0015f63:	57                   	push   edi
c0015f64:	56                   	push   esi
c0015f65:	53                   	push   ebx
c0015f66:	81 ec 28 01 00 00    	sub    esp,0x128
c0015f6c:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0015f73:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0015f7a:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0015f81:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0015f88:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015f8c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0015f90:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0015f97:	e8 b8 de ff ff       	call   c0013e54 <Device::getName()>
c0015f9c:	5a                   	pop    edx
c0015f9d:	59                   	pop    ecx
c0015f9e:	50                   	push   eax
c0015f9f:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0015fa3:	55                   	push   ebp
c0015fa4:	e8 81 a7 fe ff       	call   c000072a <strcpy>
c0015fa9:	5b                   	pop    ebx
c0015faa:	58                   	pop    eax
c0015fab:	68 94 9a 02 c0       	push   0xc0029a94
c0015fb0:	55                   	push   ebp
c0015fb1:	e8 2b a8 fe ff       	call   c00007e1 <strcat>
c0015fb6:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0015fbd:	e8 12 95 ff ff       	call   c000f4d4 <malloc>
c0015fc2:	83 c4 0c             	add    esp,0xc
c0015fc5:	89 c3                	mov    ebx,eax
c0015fc7:	57                   	push   edi
c0015fc8:	56                   	push   esi
c0015fc9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015fcd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015fd1:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0015fd8:	55                   	push   ebp
c0015fd9:	50                   	push   eax
c0015fda:	e8 e3 fb ff ff       	call   c0015bc2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0015fdf:	83 c4 14             	add    esp,0x14
c0015fe2:	53                   	push   ebx
c0015fe3:	e8 90 fc ff ff       	call   c0015c78 <LogicalDisk::assignDriveLetter()>
c0015fe8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015feb:	e8 3e fd ff ff       	call   c0015d2e <LogicalDisk::mount()>
c0015ff0:	58                   	pop    eax
c0015ff1:	5a                   	pop    edx
c0015ff2:	53                   	push   ebx
c0015ff3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0015ffa:	e8 69 db ff ff       	call   c0013b68 <Device::addChild(Device*)>
c0015fff:	81 c4 2c 01 00 00    	add    esp,0x12c
c0016005:	5b                   	pop    ebx
c0016006:	5e                   	pop    esi
c0016007:	5f                   	pop    edi
c0016008:	5d                   	pop    ebp
c0016009:	c3                   	ret    

c001600a <createPartitionsForDisk(PhysicalDisk*)>:
c001600a:	55                   	push   ebp
c001600b:	57                   	push   edi
c001600c:	56                   	push   esi
c001600d:	53                   	push   ebx
c001600e:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0016014:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c001601b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0016021:	3d 00 02 00 00       	cmp    eax,0x200
c0016026:	74 27                	je     c001604f <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0016028:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c001602e:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0016034:	83 ec 10             	sub    esp,0x10
c0016037:	0f a4 f7 0a          	shld   edi,esi,0xa
c001603b:	99                   	cdq    
c001603c:	c1 e6 0a             	shl    esi,0xa
c001603f:	52                   	push   edx
c0016040:	89 fd                	mov    ebp,edi
c0016042:	50                   	push   eax
c0016043:	55                   	push   ebp
c0016044:	56                   	push   esi
c0016045:	e8 e2 f3 00 00       	call   c002542c <__udivdi3>
c001604a:	e9 b1 00 00 00       	jmp    c0016100 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c001604f:	83 ec 0c             	sub    esp,0xc
c0016052:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016054:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0016058:	56                   	push   esi
c0016059:	6a 01                	push   0x1
c001605b:	6a 00                	push   0x0
c001605d:	6a 00                	push   0x0
c001605f:	53                   	push   ebx
c0016060:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016063:	83 c4 20             	add    esp,0x20
c0016066:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c001606e:	75 0a                	jne    c001607a <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016070:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0016078:	74 2c                	je     c00160a6 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c001607a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016080:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016086:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001608c:	83 ec 10             	sub    esp,0x10
c001608f:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016093:	89 f7                	mov    edi,esi
c0016095:	c1 e0 0a             	shl    eax,0xa
c0016098:	c1 ff 1f             	sar    edi,0x1f
c001609b:	57                   	push   edi
c001609c:	56                   	push   esi
c001609d:	52                   	push   edx
c001609e:	50                   	push   eax
c001609f:	e8 88 f3 00 00       	call   c002542c <__udivdi3>
c00160a4:	eb 5a                	jmp    c0016100 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00160a6:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c00160ad:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c00160b4:	83 e1 7f             	and    ecx,0x7f
c00160b7:	83 e0 7f             	and    eax,0x7f
c00160ba:	01 c1                	add    ecx,eax
c00160bc:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c00160c3:	83 e0 7f             	and    eax,0x7f
c00160c6:	01 c1                	add    ecx,eax
c00160c8:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c00160cf:	83 e0 7f             	and    eax,0x7f
c00160d2:	00 c1                	add    cl,al
c00160d4:	74 41                	je     c0016117 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c00160d6:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00160dc:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00160e2:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00160e8:	83 ec 10             	sub    esp,0x10
c00160eb:	0f a4 c2 0a          	shld   edx,eax,0xa
c00160ef:	89 f7                	mov    edi,esi
c00160f1:	c1 e0 0a             	shl    eax,0xa
c00160f4:	c1 ff 1f             	sar    edi,0x1f
c00160f7:	57                   	push   edi
c00160f8:	56                   	push   esi
c00160f9:	52                   	push   edx
c00160fa:	50                   	push   eax
c00160fb:	e8 2c f3 00 00       	call   c002542c <__udivdi3>
c0016100:	83 c4 14             	add    esp,0x14
c0016103:	52                   	push   edx
c0016104:	50                   	push   eax
c0016105:	6a 00                	push   0x0
c0016107:	6a 00                	push   0x0
c0016109:	53                   	push   ebx
c001610a:	e8 53 fe ff ff       	call   c0015f62 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001610f:	83 c4 20             	add    esp,0x20
c0016112:	e9 79 01 00 00       	jmp    c0016290 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016117:	89 f0                	mov    eax,esi
c0016119:	31 f6                	xor    esi,esi
c001611b:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016122:	75 02                	jne    c0016126 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016124:	89 f1                	mov    ecx,esi
c0016126:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c001612d:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016134:	c1 e2 08             	shl    edx,0x8
c0016137:	c1 e7 10             	shl    edi,0x10
c001613a:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016142:	09 fa                	or     edx,edi
c0016144:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c001614c:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016153:	83 c0 10             	add    eax,0x10
c0016156:	09 fa                	or     edx,edi
c0016158:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c001615f:	c1 e7 18             	shl    edi,0x18
c0016162:	09 fa                	or     edx,edi
c0016164:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c001616b:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c001616f:	c1 e7 10             	shl    edi,0x10
c0016172:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016179:	c1 e2 08             	shl    edx,0x8
c001617c:	09 fa                	or     edx,edi
c001617e:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016185:	09 fa                	or     edx,edi
c0016187:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c001618e:	c1 e7 18             	shl    edi,0x18
c0016191:	09 fa                	or     edx,edi
c0016193:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016197:	46                   	inc    esi
c0016198:	83 fe 04             	cmp    esi,0x4
c001619b:	0f 85 7a ff ff ff    	jne    c001611b <createPartitionsForDisk(PhysicalDisk*)+0x111>
c00161a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161a5:	83 f0 01             	xor    eax,0x1
c00161a8:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00161ac:	75 57                	jne    c0016205 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00161ae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00161b2:	83 f0 01             	xor    eax,0x1
c00161b5:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00161b9:	75 4a                	jne    c0016205 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00161bb:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00161bf:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00161c7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00161cf:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00161d5:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00161db:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00161e1:	0f a4 c2 0a          	shld   edx,eax,0xa
c00161e5:	89 f7                	mov    edi,esi
c00161e7:	c1 e0 0a             	shl    eax,0xa
c00161ea:	c1 ff 1f             	sar    edi,0x1f
c00161ed:	57                   	push   edi
c00161ee:	56                   	push   esi
c00161ef:	52                   	push   edx
c00161f0:	50                   	push   eax
c00161f1:	e8 36 f2 00 00       	call   c002542c <__udivdi3>
c00161f6:	83 c4 10             	add    esp,0x10
c00161f9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00161fd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016201:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016205:	84 c9                	test   cl,cl
c0016207:	74 53                	je     c001625c <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016209:	0f b6 c9             	movzx  ecx,cl
c001620c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016210:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016214:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016218:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001621c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016220:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016224:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016228:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c001622c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016230:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016234:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016238:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001623c:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016240:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016244:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016248:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c001624c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016250:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016254:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016258:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c001625c:	31 ed                	xor    ebp,ebp
c001625e:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016262:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016266:	89 f8                	mov    eax,edi
c0016268:	09 f0                	or     eax,esi
c001626a:	74 1e                	je     c001628a <createPartitionsForDisk(PhysicalDisk*)+0x280>
c001626c:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016270:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016274:	89 d1                	mov    ecx,edx
c0016276:	09 c1                	or     ecx,eax
c0016278:	74 10                	je     c001628a <createPartitionsForDisk(PhysicalDisk*)+0x280>
c001627a:	83 ec 0c             	sub    esp,0xc
c001627d:	57                   	push   edi
c001627e:	56                   	push   esi
c001627f:	52                   	push   edx
c0016280:	50                   	push   eax
c0016281:	53                   	push   ebx
c0016282:	e8 db fc ff ff       	call   c0015f62 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016287:	83 c4 20             	add    esp,0x20
c001628a:	45                   	inc    ebp
c001628b:	83 fd 04             	cmp    ebp,0x4
c001628e:	75 ce                	jne    c001625e <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016290:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016296:	5b                   	pop    ebx
c0016297:	5e                   	pop    esi
c0016298:	5f                   	pop    edi
c0016299:	5d                   	pop    ebp
c001629a:	c3                   	ret    
c001629b:	90                   	nop

c001629c <Serial::Serial(char const*)>:
c001629c:	83 ec 0c             	sub    esp,0xc
c001629f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162a3:	83 ec 08             	sub    esp,0x8
c00162a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00162aa:	50                   	push   eax
c00162ab:	e8 a8 da ff ff       	call   c0013d58 <Device::Device(char const*)>
c00162b0:	83 c4 10             	add    esp,0x10
c00162b3:	ba a8 9a 02 c0       	mov    edx,0xc0029aa8
c00162b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162bc:	89 10                	mov    DWORD PTR [eax],edx
c00162be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162c2:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c00162cc:	90                   	nop
c00162cd:	83 c4 0c             	add    esp,0xc
c00162d0:	c3                   	ret    
c00162d1:	90                   	nop

c00162d2 <Serial::~Serial()>:
c00162d2:	83 ec 0c             	sub    esp,0xc
c00162d5:	ba a8 9a 02 c0       	mov    edx,0xc0029aa8
c00162da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162de:	89 10                	mov    DWORD PTR [eax],edx
c00162e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162e4:	83 ec 0c             	sub    esp,0xc
c00162e7:	50                   	push   eax
c00162e8:	e8 4d d7 ff ff       	call   c0013a3a <Device::~Device()>
c00162ed:	83 c4 10             	add    esp,0x10
c00162f0:	90                   	nop
c00162f1:	83 c4 0c             	add    esp,0xc
c00162f4:	c3                   	ret    
c00162f5:	90                   	nop

c00162f6 <Serial::~Serial()>:
c00162f6:	83 ec 0c             	sub    esp,0xc
c00162f9:	83 ec 0c             	sub    esp,0xc
c00162fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016300:	e8 cd ff ff ff       	call   c00162d2 <Serial::~Serial()>
c0016305:	83 c4 10             	add    esp,0x10
c0016308:	83 ec 08             	sub    esp,0x8
c001630b:	68 58 01 00 00       	push   0x158
c0016310:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016314:	e8 80 c3 ff ff       	call   c0012699 <operator delete(void*, unsigned long)>
c0016319:	83 c4 10             	add    esp,0x10
c001631c:	83 c4 0c             	add    esp,0xc
c001631f:	c3                   	ret    

c0016320 <Timer::Timer(char const*)>:
c0016320:	83 ec 0c             	sub    esp,0xc
c0016323:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016327:	83 ec 08             	sub    esp,0x8
c001632a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001632e:	50                   	push   eax
c001632f:	e8 24 da ff ff       	call   c0013d58 <Device::Device(char const*)>
c0016334:	83 c4 10             	add    esp,0x10
c0016337:	ba ec 9a 02 c0       	mov    edx,0xc0029aec
c001633c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016340:	89 10                	mov    DWORD PTR [eax],edx
c0016342:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016346:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016350:	90                   	nop
c0016351:	83 c4 0c             	add    esp,0xc
c0016354:	c3                   	ret    
c0016355:	90                   	nop

c0016356 <Timer::~Timer()>:
c0016356:	83 ec 0c             	sub    esp,0xc
c0016359:	ba ec 9a 02 c0       	mov    edx,0xc0029aec
c001635e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016362:	89 10                	mov    DWORD PTR [eax],edx
c0016364:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016368:	83 ec 0c             	sub    esp,0xc
c001636b:	50                   	push   eax
c001636c:	e8 c9 d6 ff ff       	call   c0013a3a <Device::~Device()>
c0016371:	83 c4 10             	add    esp,0x10
c0016374:	90                   	nop
c0016375:	83 c4 0c             	add    esp,0xc
c0016378:	c3                   	ret    
c0016379:	90                   	nop

c001637a <Timer::~Timer()>:
c001637a:	83 ec 0c             	sub    esp,0xc
c001637d:	83 ec 0c             	sub    esp,0xc
c0016380:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016384:	e8 cd ff ff ff       	call   c0016356 <Timer::~Timer()>
c0016389:	83 c4 10             	add    esp,0x10
c001638c:	83 ec 08             	sub    esp,0x8
c001638f:	68 5c 01 00 00       	push   0x15c
c0016394:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016398:	e8 fc c2 ff ff       	call   c0012699 <operator delete(void*, unsigned long)>
c001639d:	83 c4 10             	add    esp,0x10
c00163a0:	83 c4 0c             	add    esp,0xc
c00163a3:	c3                   	ret    

c00163a4 <Timer::read()>:
c00163a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00163a8:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00163ae:	c3                   	ret    

c00163af <timerHandler(unsigned long long)>:
c00163af:	55                   	push   ebp
c00163b0:	57                   	push   edi
c00163b1:	56                   	push   esi
c00163b2:	53                   	push   ebx
c00163b3:	83 ec 0c             	sub    esp,0xc
c00163b6:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00163ba:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00163be:	01 35 70 d0 02 c0    	add    DWORD PTR ds:0xc002d070,esi
c00163c4:	11 3d 74 d0 02 c0    	adc    DWORD PTR ds:0xc002d074,edi
c00163ca:	80 3d ed c9 02 c0 00 	cmp    BYTE PTR ds:0xc002c9ed,0x0
c00163d1:	0f 84 07 01 00 00    	je     c00164de <timerHandler(unsigned long long)+0x12f>
c00163d7:	e8 05 6a 00 00       	call   c001cde1 <lockStuff()>
c00163dc:	83 ec 0c             	sub    esp,0xc
c00163df:	68 1c df 02 c0       	push   0xc002df1c
c00163e4:	e8 b5 10 01 00       	call   c002749e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00163e9:	c7 04 24 1c df 02 c0 	mov    DWORD PTR [esp],0xc002df1c
c00163f0:	89 c3                	mov    ebx,eax
c00163f2:	e8 af 10 01 00       	call   c00274a6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00163f7:	83 c4 10             	add    esp,0x10
c00163fa:	84 c0                	test   al,al
c00163fc:	74 60                	je     c001645e <timerHandler(unsigned long long)+0xaf>
c00163fe:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016404:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0016407:	85 c0                	test   eax,eax
c0016409:	0f 85 91 00 00 00    	jne    c00164a0 <timerHandler(unsigned long long)+0xf1>
c001640f:	e9 be 00 00 00       	jmp    c00164d2 <timerHandler(unsigned long long)+0x123>
c0016414:	83 ec 0c             	sub    esp,0xc
c0016417:	55                   	push   ebp
c0016418:	e8 b5 6f 00 00       	call   c001d3d2 <unblockTask(ThreadControlBlock*)>
c001641d:	83 c4 10             	add    esp,0x10
c0016420:	39 eb                	cmp    ebx,ebp
c0016422:	75 12                	jne    c0016436 <timerHandler(unsigned long long)+0x87>
c0016424:	83 ec 0c             	sub    esp,0xc
c0016427:	68 1c df 02 c0       	push   0xc002df1c
c001642c:	e8 6d 10 01 00       	call   c002749e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016431:	89 c3                	mov    ebx,eax
c0016433:	83 c4 10             	add    esp,0x10
c0016436:	83 ec 0c             	sub    esp,0xc
c0016439:	68 1c df 02 c0       	push   0xc002df1c
c001643e:	e8 63 10 01 00       	call   c00274a6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016443:	83 c4 10             	add    esp,0x10
c0016446:	84 c0                	test   al,al
c0016448:	75 b4                	jne    c00163fe <timerHandler(unsigned long long)+0x4f>
c001644a:	83 ec 0c             	sub    esp,0xc
c001644d:	68 1c df 02 c0       	push   0xc002df1c
c0016452:	e8 47 10 01 00       	call   c002749e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016457:	83 c4 10             	add    esp,0x10
c001645a:	39 d8                	cmp    eax,ebx
c001645c:	74 a0                	je     c00163fe <timerHandler(unsigned long long)+0x4f>
c001645e:	83 ec 0c             	sub    esp,0xc
c0016461:	68 1c df 02 c0       	push   0xc002df1c
c0016466:	e8 33 10 01 00       	call   c002749e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001646b:	c7 04 24 1c df 02 c0 	mov    DWORD PTR [esp],0xc002df1c
c0016472:	89 c5                	mov    ebp,eax
c0016474:	e8 49 10 01 00       	call   c00274c2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016479:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c001647c:	83 c4 10             	add    esp,0x10
c001647f:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016482:	39 15 70 d0 02 c0    	cmp    DWORD PTR ds:0xc002d070,edx
c0016488:	a1 74 d0 02 c0       	mov    eax,ds:0xc002d074
c001648d:	19 c8                	sbb    eax,ecx
c001648f:	73 83                	jae    c0016414 <timerHandler(unsigned long long)+0x65>
c0016491:	50                   	push   eax
c0016492:	50                   	push   eax
c0016493:	55                   	push   ebp
c0016494:	68 1c df 02 c0       	push   0xc002df1c
c0016499:	e8 d2 10 01 00       	call   c0027570 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001649e:	eb 93                	jmp    c0016433 <timerHandler(unsigned long long)+0x84>
c00164a0:	80 3d ec c9 02 c0 00 	cmp    BYTE PTR ds:0xc002c9ec,0x0
c00164a7:	74 29                	je     c00164d2 <timerHandler(unsigned long long)+0x123>
c00164a9:	39 c6                	cmp    esi,eax
c00164ab:	bb 00 00 00 00       	mov    ebx,0x0
c00164b0:	19 df                	sbb    edi,ebx
c00164b2:	72 19                	jb     c00164cd <timerHandler(unsigned long long)+0x11e>
c00164b4:	e8 01 69 00 00       	call   c001cdba <lockScheduler()>
c00164b9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164be:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c00164c1:	e8 30 6c 00 00       	call   c001d0f6 <schedule()>
c00164c6:	e8 f1 68 00 00       	call   c001cdbc <unlockScheduler()>
c00164cb:	eb 05                	jmp    c00164d2 <timerHandler(unsigned long long)+0x123>
c00164cd:	29 f0                	sub    eax,esi
c00164cf:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c00164d2:	83 c4 0c             	add    esp,0xc
c00164d5:	5b                   	pop    ebx
c00164d6:	5e                   	pop    esi
c00164d7:	5f                   	pop    edi
c00164d8:	5d                   	pop    ebp
c00164d9:	e9 9d 6c 00 00       	jmp    c001d17b <unlockStuff()>
c00164de:	83 c4 0c             	add    esp,0xc
c00164e1:	5b                   	pop    ebx
c00164e2:	5e                   	pop    esi
c00164e3:	5f                   	pop    edi
c00164e4:	5d                   	pop    ebp
c00164e5:	c3                   	ret    

c00164e6 <setupTimer(int)>:
c00164e6:	57                   	push   edi
c00164e7:	a1 e8 c9 02 c0       	mov    eax,ds:0xc002c9e8
c00164ec:	56                   	push   esi
c00164ed:	53                   	push   ebx
c00164ee:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00164f2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00164f8:	83 ec 0c             	sub    esp,0xc
c00164fb:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016501:	e8 4e d9 ff ff       	call   c0013e54 <Device::getName()>
c0016506:	83 c4 10             	add    esp,0x10
c0016509:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001650c:	0f 85 8d 00 00 00    	jne    c001659f <setupTimer(int)+0xb9>
c0016512:	a1 e8 c9 02 c0       	mov    eax,ds:0xc002c9e8
c0016517:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c001651e:	74 7f                	je     c001659f <setupTimer(int)+0xb9>
c0016520:	83 ec 0c             	sub    esp,0xc
c0016523:	68 5c 01 00 00       	push   0x15c
c0016528:	e8 a7 8f ff ff       	call   c000f4d4 <malloc>
c001652d:	89 04 24             	mov    DWORD PTR [esp],eax
c0016530:	89 c3                	mov    ebx,eax
c0016532:	e8 cb ea 00 00       	call   c0025002 <PIT::PIT()>
c0016537:	59                   	pop    ecx
c0016538:	5f                   	pop    edi
c0016539:	53                   	push   ebx
c001653a:	ff 35 e8 c9 02 c0    	push   DWORD PTR ds:0xc002c9e8
c0016540:	e8 23 d6 ff ff       	call   c0013b68 <Device::addChild(Device*)>
c0016545:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016547:	6a 00                	push   0x0
c0016549:	6a 00                	push   0x0
c001654b:	56                   	push   esi
c001654c:	53                   	push   ebx
c001654d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016550:	83 c4 14             	add    esp,0x14
c0016553:	68 60 01 00 00       	push   0x160
c0016558:	e8 77 8f ff ff       	call   c000f4d4 <malloc>
c001655d:	89 04 24             	mov    DWORD PTR [esp],eax
c0016560:	89 c7                	mov    edi,eax
c0016562:	e8 4b e9 00 00       	call   c0024eb2 <APICTimer::APICTimer()>
c0016567:	6a 00                	push   0x0
c0016569:	6a 00                	push   0x0
c001656b:	56                   	push   esi
c001656c:	57                   	push   edi
c001656d:	e8 42 e8 00 00       	call   c0024db4 <APICTimer::open(int, int, void*)>
c0016572:	83 c4 20             	add    esp,0x20
c0016575:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016577:	6a 00                	push   0x0
c0016579:	6a 00                	push   0x0
c001657b:	6a 00                	push   0x0
c001657d:	53                   	push   ebx
c001657e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016581:	58                   	pop    eax
c0016582:	a1 e8 c9 02 c0       	mov    eax,ds:0xc002c9e8
c0016587:	5a                   	pop    edx
c0016588:	57                   	push   edi
c0016589:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001658f:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016595:	e8 ce d5 ff ff       	call   c0013b68 <Device::addChild(Device*)>
c001659a:	83 c4 10             	add    esp,0x10
c001659d:	eb 33                	jmp    c00165d2 <setupTimer(int)+0xec>
c001659f:	83 ec 0c             	sub    esp,0xc
c00165a2:	68 5c 01 00 00       	push   0x15c
c00165a7:	e8 28 8f ff ff       	call   c000f4d4 <malloc>
c00165ac:	89 04 24             	mov    DWORD PTR [esp],eax
c00165af:	89 c3                	mov    ebx,eax
c00165b1:	e8 4c ea 00 00       	call   c0025002 <PIT::PIT()>
c00165b6:	58                   	pop    eax
c00165b7:	5a                   	pop    edx
c00165b8:	53                   	push   ebx
c00165b9:	ff 35 e8 c9 02 c0    	push   DWORD PTR ds:0xc002c9e8
c00165bf:	e8 a4 d5 ff ff       	call   c0013b68 <Device::addChild(Device*)>
c00165c4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00165c6:	6a 00                	push   0x0
c00165c8:	6a 00                	push   0x0
c00165ca:	56                   	push   esi
c00165cb:	53                   	push   ebx
c00165cc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00165cf:	83 c4 20             	add    esp,0x20
c00165d2:	89 d8                	mov    eax,ebx
c00165d4:	5b                   	pop    ebx
c00165d5:	5e                   	pop    esi
c00165d6:	5f                   	pop    edi
c00165d7:	c3                   	ret    

c00165d8 <VCache::VCache(PhysicalDisk*)>:
c00165d8:	53                   	push   ebx
c00165d9:	83 ec 18             	sub    esp,0x18
c00165dc:	ba 1c 9b 02 c0       	mov    edx,0xc0029b1c
c00165e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165e5:	89 10                	mov    DWORD PTR [eax],edx
c00165e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165eb:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c00165f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165f6:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c00165fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016601:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016608:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001660f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016613:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001661a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016621:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016625:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001662c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016630:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016634:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c001663c:	83 ec 0c             	sub    esp,0xc
c001663f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016643:	e8 8c 8e ff ff       	call   c000f4d4 <malloc>
c0016648:	83 c4 10             	add    esp,0x10
c001664b:	89 c3                	mov    ebx,eax
c001664d:	83 ec 0c             	sub    esp,0xc
c0016650:	53                   	push   ebx
c0016651:	e8 84 68 00 00       	call   c001ceda <Mutex::Mutex()>
c0016656:	83 c4 10             	add    esp,0x10
c0016659:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001665d:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0016660:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016664:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016668:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001666b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001666f:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0016676:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001667a:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016680:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016684:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016687:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001668b:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0016691:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016697:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001669b:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c001669e:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c00166a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166a5:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00166a9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00166ad:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00166b3:	c1 e0 06             	shl    eax,0x6
c00166b6:	83 ec 0c             	sub    esp,0xc
c00166b9:	50                   	push   eax
c00166ba:	e8 15 8e ff ff       	call   c000f4d4 <malloc>
c00166bf:	83 c4 10             	add    esp,0x10
c00166c2:	89 c2                	mov    edx,eax
c00166c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166c8:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00166cb:	90                   	nop
c00166cc:	83 c4 18             	add    esp,0x18
c00166cf:	5b                   	pop    ebx
c00166d0:	c3                   	ret    
c00166d1:	90                   	nop

c00166d2 <VCache::writeWriteBuffer()>:
c00166d2:	53                   	push   ebx
c00166d3:	83 ec 14             	sub    esp,0x14
c00166d6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00166da:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00166dd:	8b 10                	mov    edx,DWORD PTR [eax]
c00166df:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00166e2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00166e5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00166e8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00166eb:	50                   	push   eax
c00166ec:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00166ef:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00166f6:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00166fd:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0016701:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0016708:	83 c4 28             	add    esp,0x28
c001670b:	5b                   	pop    ebx
c001670c:	c3                   	ret    
c001670d:	90                   	nop

c001670e <VCache::~VCache()>:
c001670e:	83 ec 0c             	sub    esp,0xc
c0016711:	ba 1c 9b 02 c0       	mov    edx,0xc0029b1c
c0016716:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001671a:	89 10                	mov    DWORD PTR [eax],edx
c001671c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016720:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0016723:	84 c0                	test   al,al
c0016725:	74 0f                	je     c0016736 <VCache::~VCache()+0x28>
c0016727:	83 ec 0c             	sub    esp,0xc
c001672a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001672e:	e8 9f ff ff ff       	call   c00166d2 <VCache::writeWriteBuffer()>
c0016733:	83 c4 10             	add    esp,0x10
c0016736:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001673a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001673d:	83 ec 0c             	sub    esp,0xc
c0016740:	50                   	push   eax
c0016741:	e8 9e 8d ff ff       	call   c000f4e4 <free>
c0016746:	83 c4 10             	add    esp,0x10
c0016749:	90                   	nop
c001674a:	83 c4 0c             	add    esp,0xc
c001674d:	c3                   	ret    

c001674e <VCache::~VCache()>:
c001674e:	83 ec 0c             	sub    esp,0xc
c0016751:	83 ec 0c             	sub    esp,0xc
c0016754:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016758:	e8 b1 ff ff ff       	call   c001670e <VCache::~VCache()>
c001675d:	83 c4 10             	add    esp,0x10
c0016760:	83 ec 08             	sub    esp,0x8
c0016763:	6a 30                	push   0x30
c0016765:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016769:	e8 2b bf ff ff       	call   c0012699 <operator delete(void*, unsigned long)>
c001676e:	83 c4 10             	add    esp,0x10
c0016771:	83 c4 0c             	add    esp,0xc
c0016774:	c3                   	ret    
c0016775:	90                   	nop

c0016776 <VCache::write(unsigned long long, int, void*)>:
c0016776:	55                   	push   ebp
c0016777:	57                   	push   edi
c0016778:	56                   	push   esi
c0016779:	53                   	push   ebx
c001677a:	83 ec 28             	sub    esp,0x28
c001677d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016781:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016785:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016789:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001678d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016790:	e8 a7 6b 00 00       	call   c001d33c <Semaphore::acquire()>
c0016795:	83 c4 10             	add    esp,0x10
c0016798:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001679c:	74 66                	je     c0016804 <VCache::write(unsigned long long, int, void*)+0x8e>
c001679e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00167a1:	99                   	cdq    
c00167a2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00167a6:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c00167a9:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c00167ac:	89 c1                	mov    ecx,eax
c00167ae:	89 d0                	mov    eax,edx
c00167b0:	31 f1                	xor    ecx,esi
c00167b2:	31 f8                	xor    eax,edi
c00167b4:	89 ca                	mov    edx,ecx
c00167b6:	09 c2                	or     edx,eax
c00167b8:	75 3e                	jne    c00167f8 <VCache::write(unsigned long long, int, void*)+0x82>
c00167ba:	83 fd 01             	cmp    ebp,0x1
c00167bd:	75 39                	jne    c00167f8 <VCache::write(unsigned long long, int, void*)+0x82>
c00167bf:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00167c2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00167c8:	51                   	push   ecx
c00167c9:	50                   	push   eax
c00167ca:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00167ce:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00167d2:	0f af c8             	imul   ecx,eax
c00167d5:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c00167d8:	51                   	push   ecx
c00167d9:	e8 77 9e fe ff       	call   c0000655 <memcpy>
c00167de:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00167e1:	83 c4 10             	add    esp,0x10
c00167e4:	40                   	inc    eax
c00167e5:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c00167e8:	83 f8 40             	cmp    eax,0x40
c00167eb:	75 57                	jne    c0016844 <VCache::write(unsigned long long, int, void*)+0xce>
c00167ed:	83 ec 0c             	sub    esp,0xc
c00167f0:	53                   	push   ebx
c00167f1:	e8 dc fe ff ff       	call   c00166d2 <VCache::writeWriteBuffer()>
c00167f6:	eb 34                	jmp    c001682c <VCache::write(unsigned long long, int, void*)+0xb6>
c00167f8:	83 ec 0c             	sub    esp,0xc
c00167fb:	53                   	push   ebx
c00167fc:	e8 d1 fe ff ff       	call   c00166d2 <VCache::writeWriteBuffer()>
c0016801:	83 c4 10             	add    esp,0x10
c0016804:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016807:	83 fd 3f             	cmp    ebp,0x3f
c001680a:	7f 25                	jg     c0016831 <VCache::write(unsigned long long, int, void*)+0xbb>
c001680c:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c001680f:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0016812:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c0016815:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0016819:	52                   	push   edx
c001681a:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0016820:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016824:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016827:	e8 29 9e fe ff       	call   c0000655 <memcpy>
c001682c:	83 c4 10             	add    esp,0x10
c001682f:	eb 13                	jmp    c0016844 <VCache::write(unsigned long long, int, void*)+0xce>
c0016831:	83 ec 0c             	sub    esp,0xc
c0016834:	8b 10                	mov    edx,DWORD PTR [eax]
c0016836:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001683a:	55                   	push   ebp
c001683b:	57                   	push   edi
c001683c:	56                   	push   esi
c001683d:	50                   	push   eax
c001683e:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016841:	83 c4 20             	add    esp,0x20
c0016844:	83 ec 0c             	sub    esp,0xc
c0016847:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001684a:	e8 9b 70 00 00       	call   c001d8ea <Semaphore::release()>
c001684f:	83 c4 2c             	add    esp,0x2c
c0016852:	31 c0                	xor    eax,eax
c0016854:	5b                   	pop    ebx
c0016855:	5e                   	pop    esi
c0016856:	5f                   	pop    edi
c0016857:	5d                   	pop    ebp
c0016858:	c3                   	ret    
c0016859:	90                   	nop

c001685a <VCache::read(unsigned long long, int, void*)>:
c001685a:	57                   	push   edi
c001685b:	56                   	push   esi
c001685c:	53                   	push   ebx
c001685d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016861:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0016865:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0016869:	83 ec 0c             	sub    esp,0xc
c001686c:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001686f:	e8 c8 6a 00 00       	call   c001d33c <Semaphore::acquire()>
c0016874:	83 c4 10             	add    esp,0x10
c0016877:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001687b:	74 0c                	je     c0016889 <VCache::read(unsigned long long, int, void*)+0x2f>
c001687d:	83 ec 0c             	sub    esp,0xc
c0016880:	53                   	push   ebx
c0016881:	e8 4c fe ff ff       	call   c00166d2 <VCache::writeWriteBuffer()>
c0016886:	83 c4 10             	add    esp,0x10
c0016889:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001688c:	83 ec 0c             	sub    esp,0xc
c001688f:	8b 10                	mov    edx,DWORD PTR [eax]
c0016891:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016895:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016899:	57                   	push   edi
c001689a:	56                   	push   esi
c001689b:	50                   	push   eax
c001689c:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001689f:	83 c4 14             	add    esp,0x14
c00168a2:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00168a5:	e8 40 70 00 00       	call   c001d8ea <Semaphore::release()>
c00168aa:	83 c4 10             	add    esp,0x10
c00168ad:	31 c0                	xor    eax,eax
c00168af:	5b                   	pop    ebx
c00168b0:	5e                   	pop    esi
c00168b1:	5f                   	pop    edi
c00168b2:	c3                   	ret    
c00168b3:	90                   	nop

c00168b4 <Video::putrect(int, int, int, int, unsigned int)>:
c00168b4:	55                   	push   ebp
c00168b5:	57                   	push   edi
c00168b6:	56                   	push   esi
c00168b7:	53                   	push   ebx
c00168b8:	83 ec 1c             	sub    esp,0x1c
c00168bb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00168bf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00168c3:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00168c7:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00168cb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00168cf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00168d3:	01 df                	add    edi,ebx
c00168d5:	39 fb                	cmp    ebx,edi
c00168d7:	7d 1f                	jge    c00168f8 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c00168d9:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00168dd:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00168e1:	7d 12                	jge    c00168f5 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c00168e3:	8b 16                	mov    edx,DWORD PTR [esi]
c00168e5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00168e9:	53                   	push   ebx
c00168ea:	55                   	push   ebp
c00168eb:	45                   	inc    ebp
c00168ec:	56                   	push   esi
c00168ed:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00168f0:	83 c4 10             	add    esp,0x10
c00168f3:	eb e8                	jmp    c00168dd <Video::putrect(int, int, int, int, unsigned int)+0x29>
c00168f5:	43                   	inc    ebx
c00168f6:	eb dd                	jmp    c00168d5 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c00168f8:	83 c4 1c             	add    esp,0x1c
c00168fb:	5b                   	pop    ebx
c00168fc:	5e                   	pop    esi
c00168fd:	5f                   	pop    edi
c00168fe:	5d                   	pop    ebp
c00168ff:	c3                   	ret    

c0016900 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0016900:	55                   	push   ebp
c0016901:	57                   	push   edi
c0016902:	31 ff                	xor    edi,edi
c0016904:	56                   	push   esi
c0016905:	53                   	push   ebx
c0016906:	83 ec 1c             	sub    esp,0x1c
c0016909:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001690d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016911:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0016918:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c001691d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016921:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0016925:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016929:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c001692c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016930:	01 f9                	add    ecx,edi
c0016932:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0016936:	7d 2f                	jge    c0016967 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0016938:	31 f6                	xor    esi,esi
c001693a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001693e:	01 f2                	add    edx,esi
c0016940:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0016944:	7d 1a                	jge    c0016960 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0016946:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016949:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c001694c:	46                   	inc    esi
c001694d:	51                   	push   ecx
c001694e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016952:	52                   	push   edx
c0016953:	55                   	push   ebp
c0016954:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016957:	83 c4 10             	add    esp,0x10
c001695a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001695e:	eb da                	jmp    c001693a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0016960:	47                   	inc    edi
c0016961:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0016965:	eb c5                	jmp    c001692c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0016967:	83 c4 1c             	add    esp,0x1c
c001696a:	5b                   	pop    ebx
c001696b:	5e                   	pop    esi
c001696c:	5f                   	pop    edi
c001696d:	5d                   	pop    ebp
c001696e:	c3                   	ret    
c001696f:	90                   	nop

c0016970 <Video::blit(unsigned int*, int, int, int, int)>:
c0016970:	55                   	push   ebp
c0016971:	57                   	push   edi
c0016972:	56                   	push   esi
c0016973:	53                   	push   ebx
c0016974:	83 ec 1c             	sub    esp,0x1c
c0016977:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001697b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001697f:	85 c0                	test   eax,eax
c0016981:	79 02                	jns    c0016985 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0016983:	31 c0                	xor    eax,eax
c0016985:	c1 e0 02             	shl    eax,0x2
c0016988:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001698c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016990:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016994:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0016998:	39 d8                	cmp    eax,ebx
c001699a:	7e 49                	jle    c00169e5 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001699c:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00169a2:	7c 41                	jl     c00169e5 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00169a4:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00169a8:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00169ac:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00169b0:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c00169b4:	39 f9                	cmp    ecx,edi
c00169b6:	7e 22                	jle    c00169da <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c00169b8:	83 c5 04             	add    ebp,0x4
c00169bb:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00169c1:	7c 14                	jl     c00169d7 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c00169c3:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00169c5:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c00169c8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00169cc:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00169d0:	56                   	push   esi
c00169d1:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c00169d4:	83 c4 10             	add    esp,0x10
c00169d7:	47                   	inc    edi
c00169d8:	eb d2                	jmp    c00169ac <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c00169da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00169de:	43                   	inc    ebx
c00169df:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00169e3:	eb ab                	jmp    c0016990 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c00169e5:	83 c4 1c             	add    esp,0x1c
c00169e8:	5b                   	pop    ebx
c00169e9:	5e                   	pop    esi
c00169ea:	5f                   	pop    edi
c00169eb:	5d                   	pop    ebp
c00169ec:	c3                   	ret    
c00169ed:	90                   	nop

c00169ee <Video::clearScreen(unsigned int)>:
c00169ee:	57                   	push   edi
c00169ef:	56                   	push   esi
c00169f0:	53                   	push   ebx
c00169f1:	31 db                	xor    ebx,ebx
c00169f3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00169f7:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00169fd:	7e 1f                	jle    c0016a1e <Video::clearScreen(unsigned int)+0x30>
c00169ff:	31 ff                	xor    edi,edi
c0016a01:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016a07:	7e 12                	jle    c0016a1b <Video::clearScreen(unsigned int)+0x2d>
c0016a09:	8b 06                	mov    eax,DWORD PTR [esi]
c0016a0b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016a0f:	53                   	push   ebx
c0016a10:	57                   	push   edi
c0016a11:	47                   	inc    edi
c0016a12:	56                   	push   esi
c0016a13:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016a16:	83 c4 10             	add    esp,0x10
c0016a19:	eb e6                	jmp    c0016a01 <Video::clearScreen(unsigned int)+0x13>
c0016a1b:	43                   	inc    ebx
c0016a1c:	eb d9                	jmp    c00169f7 <Video::clearScreen(unsigned int)+0x9>
c0016a1e:	5b                   	pop    ebx
c0016a1f:	5e                   	pop    esi
c0016a20:	5f                   	pop    edi
c0016a21:	c3                   	ret    

c0016a22 <Video::putpixel(int, int, unsigned int)>:
c0016a22:	c7 44 24 04 24 9b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0029b24
c0016a2a:	e9 64 2e 00 00       	jmp    c0019893 <Krnl::panic(char const*)>
c0016a2f:	90                   	nop

c0016a30 <Video::Video(char const*)>:
c0016a30:	83 ec 0c             	sub    esp,0xc
c0016a33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a37:	83 ec 08             	sub    esp,0x8
c0016a3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016a3e:	50                   	push   eax
c0016a3f:	e8 14 d3 ff ff       	call   c0013d58 <Device::Device(char const*)>
c0016a44:	83 c4 10             	add    esp,0x10
c0016a47:	ba a8 9b 02 c0       	mov    edx,0xc0029ba8
c0016a4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a50:	89 10                	mov    DWORD PTR [eax],edx
c0016a52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a56:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0016a60:	90                   	nop
c0016a61:	83 c4 0c             	add    esp,0xc
c0016a64:	c3                   	ret    
c0016a65:	90                   	nop

c0016a66 <Video::~Video()>:
c0016a66:	83 ec 0c             	sub    esp,0xc
c0016a69:	ba a8 9b 02 c0       	mov    edx,0xc0029ba8
c0016a6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a72:	89 10                	mov    DWORD PTR [eax],edx
c0016a74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a78:	83 ec 0c             	sub    esp,0xc
c0016a7b:	50                   	push   eax
c0016a7c:	e8 b9 cf ff ff       	call   c0013a3a <Device::~Device()>
c0016a81:	83 c4 10             	add    esp,0x10
c0016a84:	90                   	nop
c0016a85:	83 c4 0c             	add    esp,0xc
c0016a88:	c3                   	ret    
c0016a89:	90                   	nop

c0016a8a <Video::~Video()>:
c0016a8a:	83 ec 0c             	sub    esp,0xc
c0016a8d:	83 ec 0c             	sub    esp,0xc
c0016a90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016a94:	e8 cd ff ff ff       	call   c0016a66 <Video::~Video()>
c0016a99:	83 c4 10             	add    esp,0x10
c0016a9c:	83 ec 08             	sub    esp,0x8
c0016a9f:	68 64 01 00 00       	push   0x164
c0016aa4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016aa8:	e8 ec bb ff ff       	call   c0012699 <operator delete(void*, unsigned long)>
c0016aad:	83 c4 10             	add    esp,0x10
c0016ab0:	83 c4 0c             	add    esp,0xc
c0016ab3:	c3                   	ret    

c0016ab4 <Video::isMonochrome()>:
c0016ab4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016ab8:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0016abe:	c3                   	ret    
c0016abf:	90                   	nop

c0016ac0 <Video::getWidth()>:
c0016ac0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016ac4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016aca:	c3                   	ret    
c0016acb:	90                   	nop

c0016acc <Video::getHeight()>:
c0016acc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016ad0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016ad6:	c3                   	ret    
c0016ad7:	90                   	nop

c0016ad8 <Video::drawCursor(int, int, unsigned char*, int)>:
c0016ad8:	55                   	push   ebp
c0016ad9:	57                   	push   edi
c0016ada:	56                   	push   esi
c0016adb:	53                   	push   ebx
c0016adc:	83 ec 2c             	sub    esp,0x2c
c0016adf:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016ae3:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016ae7:	83 f8 01             	cmp    eax,0x1
c0016aea:	19 c9                	sbb    ecx,ecx
c0016aec:	31 db                	xor    ebx,ebx
c0016aee:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0016af2:	89 cd                	mov    ebp,ecx
c0016af4:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0016afc:	f7 d5                	not    ebp
c0016afe:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0016b04:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0016b08:	01 d8                	add    eax,ebx
c0016b0a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016b0e:	56                   	push   esi
c0016b0f:	e8 b8 ff ff ff       	call   c0016acc <Video::getHeight()>
c0016b14:	59                   	pop    ecx
c0016b15:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0016b19:	7e 70                	jle    c0016b8b <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0016b1b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016b1f:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016b23:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0016b26:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016b2a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016b2e:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0016b35:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016b39:	89 f8                	mov    eax,edi
c0016b3b:	83 c0 20             	add    eax,0x20
c0016b3e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016b42:	56                   	push   esi
c0016b43:	e8 78 ff ff ff       	call   c0016ac0 <Video::getWidth()>
c0016b48:	5a                   	pop    edx
c0016b49:	39 c7                	cmp    edi,eax
c0016b4b:	7d 34                	jge    c0016b81 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0016b4d:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0016b52:	74 05                	je     c0016b59 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0016b54:	8b 06                	mov    eax,DWORD PTR [esi]
c0016b56:	55                   	push   ebp
c0016b57:	eb 0d                	jmp    c0016b66 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0016b59:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0016b5e:	74 12                	je     c0016b72 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0016b60:	8b 06                	mov    eax,DWORD PTR [esi]
c0016b62:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016b66:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016b6a:	57                   	push   edi
c0016b6b:	56                   	push   esi
c0016b6c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016b6f:	83 c4 10             	add    esp,0x10
c0016b72:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0016b76:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0016b7a:	47                   	inc    edi
c0016b7b:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0016b7f:	75 c1                	jne    c0016b42 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0016b81:	43                   	inc    ebx
c0016b82:	83 fb 20             	cmp    ebx,0x20
c0016b85:	0f 85 79 ff ff ff    	jne    c0016b04 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0016b8b:	83 c4 2c             	add    esp,0x2c
c0016b8e:	5b                   	pop    ebx
c0016b8f:	5e                   	pop    esi
c0016b90:	5f                   	pop    edi
c0016b91:	5d                   	pop    ebp
c0016b92:	c3                   	ret    
c0016b93:	90                   	nop

c0016b94 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0016b94:	55                   	push   ebp
c0016b95:	57                   	push   edi
c0016b96:	56                   	push   esi
c0016b97:	53                   	push   ebx
c0016b98:	83 ec 28             	sub    esp,0x28
c0016b9b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016b9f:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0016ba3:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c0016ba7:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0016bab:	c1 e7 08             	shl    edi,0x8
c0016bae:	01 c7                	add    edi,eax
c0016bb0:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0016bb4:	c1 e0 08             	shl    eax,0x8
c0016bb7:	01 d0                	add    eax,edx
c0016bb9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016bbd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016bc1:	0f af c7             	imul   eax,edi
c0016bc4:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0016bcb:	50                   	push   eax
c0016bcc:	e8 03 89 ff ff       	call   c000f4d4 <malloc>
c0016bd1:	83 c4 10             	add    esp,0x10
c0016bd4:	89 c5                	mov    ebp,eax
c0016bd6:	85 c0                	test   eax,eax
c0016bd8:	75 15                	jne    c0016bef <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c0016bda:	83 ec 0c             	sub    esp,0xc
c0016bdd:	68 45 9b 02 c0       	push   0xc0029b45
c0016be2:	e8 92 bb ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c0016be7:	83 c4 10             	add    esp,0x10
c0016bea:	e9 1c 01 00 00       	jmp    c0016d0b <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0016bef:	be 12 00 00 00       	mov    esi,0x12
c0016bf4:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0016bf8:	74 11                	je     c0016c0b <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c0016bfa:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c0016bfe:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c0016c02:	c1 fe 03             	sar    esi,0x3
c0016c05:	0f af f0             	imul   esi,eax
c0016c08:	83 c6 12             	add    esi,0x12
c0016c0b:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0016c0f:	74 04                	je     c0016c15 <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c0016c11:	85 ff                	test   edi,edi
c0016c13:	75 12                	jne    c0016c27 <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c0016c15:	83 ec 0c             	sub    esp,0xc
c0016c18:	68 5c 9b 02 c0       	push   0xc0029b5c
c0016c1d:	e8 57 bb ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c0016c22:	e9 ce 00 00 00       	jmp    c0016cf5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c0016c27:	52                   	push   edx
c0016c28:	52                   	push   edx
c0016c29:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c0016c2d:	50                   	push   eax
c0016c2e:	68 71 9b 02 c0       	push   0xc0029b71
c0016c33:	e8 41 bb ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c0016c38:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c0016c3c:	83 c4 10             	add    esp,0x10
c0016c3f:	80 fa 02             	cmp    dl,0x2
c0016c42:	0f 85 98 00 00 00    	jne    c0016ce0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c0016c48:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0016c4d:	75 10                	jne    c0016c5f <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0016c4f:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0016c53:	75 0a                	jne    c0016c5f <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0016c55:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0016c58:	83 e8 18             	sub    eax,0x18
c0016c5b:	a8 f7                	test   al,0xf7
c0016c5d:	74 0a                	je     c0016c69 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c0016c5f:	83 ec 0c             	sub    esp,0xc
c0016c62:	68 7e 9b 02 c0       	push   0xc0029b7e
c0016c67:	eb 7f                	jmp    c0016ce8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c0016c69:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016c71:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016c79:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016c7d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016c85:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0016c89:	75 0c                	jne    c0016c97 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c0016c8b:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c0016c90:	c1 e0 18             	shl    eax,0x18
c0016c93:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016c97:	41                   	inc    ecx
c0016c98:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c0016c9d:	c1 e2 10             	shl    edx,0x10
c0016ca0:	89 d0                	mov    eax,edx
c0016ca2:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c0016ca7:	c1 e2 08             	shl    edx,0x8
c0016caa:	09 c2                	or     edx,eax
c0016cac:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c0016cb0:	09 c2                	or     edx,eax
c0016cb2:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c0016cb6:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c0016cba:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0016cbe:	c1 f8 03             	sar    eax,0x3
c0016cc1:	01 c6                	add    esi,eax
c0016cc3:	89 c8                	mov    eax,ecx
c0016cc5:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0016cc9:	39 c7                	cmp    edi,eax
c0016ccb:	7f b0                	jg     c0016c7d <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0016ccd:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0016cd1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016cd5:	39 14 24             	cmp    DWORD PTR [esp],edx
c0016cd8:	7e 22                	jle    c0016cfc <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c0016cda:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0016cde:	eb 99                	jmp    c0016c79 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c0016ce0:	50                   	push   eax
c0016ce1:	50                   	push   eax
c0016ce2:	52                   	push   edx
c0016ce3:	68 8c 9b 02 c0       	push   0xc0029b8c
c0016ce8:	e8 8c ba ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c0016ced:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016cf0:	e8 ef 87 ff ff       	call   c000f4e4 <free>
c0016cf5:	83 c4 10             	add    esp,0x10
c0016cf8:	31 ed                	xor    ebp,ebp
c0016cfa:	eb 0f                	jmp    c0016d0b <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0016cfc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016d00:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0016d03:	89 38                	mov    DWORD PTR [eax],edi
c0016d05:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016d09:	89 08                	mov    DWORD PTR [eax],ecx
c0016d0b:	83 c4 1c             	add    esp,0x1c
c0016d0e:	89 e8                	mov    eax,ebp
c0016d10:	5b                   	pop    ebx
c0016d11:	5e                   	pop    esi
c0016d12:	5f                   	pop    edi
c0016d13:	5d                   	pop    ebp
c0016d14:	c3                   	ret    
c0016d15:	90                   	nop

c0016d16 <Video::putTGA(int, int, unsigned char*, int)>:
c0016d16:	55                   	push   ebp
c0016d17:	57                   	push   edi
c0016d18:	56                   	push   esi
c0016d19:	53                   	push   ebx
c0016d1a:	83 ec 28             	sub    esp,0x28
c0016d1d:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0016d21:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016d25:	50                   	push   eax
c0016d26:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016d2a:	50                   	push   eax
c0016d2b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016d2f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016d33:	56                   	push   esi
c0016d34:	e8 5b fe ff ff       	call   c0016b94 <Video::tgaParse(unsigned char*, int, int*, int*)>
c0016d39:	83 c4 20             	add    esp,0x20
c0016d3c:	85 c0                	test   eax,eax
c0016d3e:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016d42:	74 35                	je     c0016d79 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0016d44:	89 c7                	mov    edi,eax
c0016d46:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016d4a:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0016d4e:	39 d8                	cmp    eax,ebx
c0016d50:	7e 27                	jle    c0016d79 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0016d52:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016d56:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016d5a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0016d5e:	39 e8                	cmp    eax,ebp
c0016d60:	7e 14                	jle    c0016d76 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0016d62:	8b 06                	mov    eax,DWORD PTR [esi]
c0016d64:	83 c7 04             	add    edi,0x4
c0016d67:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0016d6a:	53                   	push   ebx
c0016d6b:	55                   	push   ebp
c0016d6c:	45                   	inc    ebp
c0016d6d:	56                   	push   esi
c0016d6e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016d71:	83 c4 10             	add    esp,0x10
c0016d74:	eb e0                	jmp    c0016d56 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0016d76:	43                   	inc    ebx
c0016d77:	eb cd                	jmp    c0016d46 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0016d79:	83 c4 1c             	add    esp,0x1c
c0016d7c:	5b                   	pop    ebx
c0016d7d:	5e                   	pop    esi
c0016d7e:	5f                   	pop    edi
c0016d7f:	5d                   	pop    ebp
c0016d80:	c3                   	ret    
c0016d81:	90                   	nop

c0016d82 <ACPI::close(int, int, void*)>:
c0016d82:	83 ec 1c             	sub    esp,0x1c
c0016d85:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0016d8d:	74 0a                	je     c0016d99 <ACPI::close(int, int, void*)+0x17>
c0016d8f:	b8 00 00 00 00       	mov    eax,0x0
c0016d94:	e9 9a 00 00 00       	jmp    c0016e33 <ACPI::close(int, int, void*)+0xb1>
c0016d99:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016d9e:	75 37                	jne    c0016dd7 <ACPI::close(int, int, void*)+0x55>
c0016da0:	83 ec 0c             	sub    esp,0xc
c0016da3:	68 e8 9b 02 c0       	push   0xc0029be8
c0016da8:	e8 cc b9 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c0016dad:	83 c4 10             	add    esp,0x10
c0016db0:	a1 88 d0 02 c0       	mov    eax,ds:0xc002d088
c0016db5:	85 c0                	test   eax,eax
c0016db7:	74 07                	je     c0016dc0 <ACPI::close(int, int, void*)+0x3e>
c0016db9:	a1 88 d0 02 c0       	mov    eax,ds:0xc002d088
c0016dbe:	ff d0                	call   eax
c0016dc0:	83 ec 0c             	sub    esp,0xc
c0016dc3:	68 bc 9c 02 c0       	push   0xc0029cbc
c0016dc8:	e8 c6 2a 00 00       	call   c0019893 <Krnl::panic(char const*)>
c0016dcd:	83 c4 10             	add    esp,0x10
c0016dd0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016dd5:	eb 5c                	jmp    c0016e33 <ACPI::close(int, int, void*)+0xb1>
c0016dd7:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0016ddc:	75 50                	jne    c0016e2e <ACPI::close(int, int, void*)+0xac>
c0016dde:	a1 84 d0 02 c0       	mov    eax,ds:0xc002d084
c0016de3:	85 c0                	test   eax,eax
c0016de5:	74 07                	je     c0016dee <ACPI::close(int, int, void*)+0x6c>
c0016de7:	a1 84 d0 02 c0       	mov    eax,ds:0xc002d084
c0016dec:	ff d0                	call   eax
c0016dee:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0016df3:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0016df8:	83 e0 02             	and    eax,0x2
c0016dfb:	74 1c                	je     c0016e19 <ACPI::close(int, int, void*)+0x97>
c0016dfd:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0016e04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016e08:	89 c2                	mov    edx,eax
c0016e0a:	ec                   	in     al,dx
c0016e0b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0016e0f:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0016e13:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016e17:	eb da                	jmp    c0016df3 <ACPI::close(int, int, void*)+0x71>
c0016e19:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0016e20:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0016e25:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0016e29:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016e2d:	ee                   	out    dx,al
c0016e2e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016e33:	83 c4 1c             	add    esp,0x1c
c0016e36:	c3                   	ret    

c0016e37 <findRSDP()>:
c0016e37:	83 ec 1c             	sub    esp,0x1c
c0016e3a:	a1 e8 c9 02 c0       	mov    eax,ds:0xc002c9e8
c0016e3f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016e45:	83 e0 04             	and    eax,0x4
c0016e48:	84 c0                	test   al,al
c0016e4a:	75 07                	jne    c0016e53 <findRSDP()+0x1c>
c0016e4c:	b8 00 00 00 00       	mov    eax,0x0
c0016e51:	eb 6a                	jmp    c0016ebd <findRSDP()+0x86>
c0016e53:	a1 30 ca 02 c0       	mov    eax,ds:0xc002ca30
c0016e58:	3d ff 07 00 00       	cmp    eax,0x7ff
c0016e5d:	7f 1b                	jg     c0016e7a <findRSDP()+0x43>
c0016e5f:	a1 e8 c9 02 c0       	mov    eax,ds:0xc002c9e8
c0016e64:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016e6a:	83 e2 fb             	and    edx,0xfffffffb
c0016e6d:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016e73:	b8 00 00 00 00       	mov    eax,0x0
c0016e78:	eb 43                	jmp    c0016ebd <findRSDP()+0x86>
c0016e7a:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0016e82:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0016e8a:	77 2c                	ja     c0016eb8 <findRSDP()+0x81>
c0016e8c:	83 ec 04             	sub    esp,0x4
c0016e8f:	6a 08                	push   0x8
c0016e91:	68 f5 9b 02 c0       	push   0xc0029bf5
c0016e96:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016e9a:	e8 53 97 fe ff       	call   c00005f2 <memcmp>
c0016e9f:	83 c4 10             	add    esp,0x10
c0016ea2:	85 c0                	test   eax,eax
c0016ea4:	0f 94 c0             	sete   al
c0016ea7:	84 c0                	test   al,al
c0016ea9:	74 06                	je     c0016eb1 <findRSDP()+0x7a>
c0016eab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016eaf:	eb 0c                	jmp    c0016ebd <findRSDP()+0x86>
c0016eb1:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0016eb6:	eb ca                	jmp    c0016e82 <findRSDP()+0x4b>
c0016eb8:	b8 00 00 00 00       	mov    eax,0x0
c0016ebd:	83 c4 1c             	add    esp,0x1c
c0016ec0:	c3                   	ret    

c0016ec1 <loadACPITables(unsigned char*)>:
c0016ec1:	56                   	push   esi
c0016ec2:	53                   	push   ebx
c0016ec3:	83 ec 44             	sub    esp,0x44
c0016ec6:	a1 e8 c9 02 c0       	mov    eax,ds:0xc002c9e8
c0016ecb:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016ed1:	83 e0 04             	and    eax,0x4
c0016ed4:	84 c0                	test   al,al
c0016ed6:	0f 84 05 02 00 00    	je     c00170e1 <loadACPITables(unsigned char*)+0x220>
c0016edc:	a0 a0 d2 02 c0       	mov    al,ds:0xc002d2a0
c0016ee1:	84 c0                	test   al,al
c0016ee3:	74 75                	je     c0016f5a <loadACPITables(unsigned char*)+0x99>
c0016ee5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016ee9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016eed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016ef1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016ef4:	83 e8 24             	sub    eax,0x24
c0016ef7:	c1 e8 03             	shr    eax,0x3
c0016efa:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0016efe:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0016f06:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016f0a:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0016f0e:	0f 8d b2 00 00 00    	jge    c0016fc6 <loadACPITables(unsigned char*)+0x105>
c0016f14:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016f18:	83 c0 24             	add    eax,0x24
c0016f1b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0016f1f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016f23:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0016f27:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016f2b:	c1 e0 03             	shl    eax,0x3
c0016f2e:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0016f32:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016f36:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0016f39:	8b 00                	mov    eax,DWORD PTR [eax]
c0016f3b:	89 c1                	mov    ecx,eax
c0016f3d:	a1 8c d0 02 c0       	mov    eax,ds:0xc002d08c
c0016f42:	8d 50 01             	lea    edx,[eax+0x1]
c0016f45:	89 15 8c d0 02 c0    	mov    DWORD PTR ds:0xc002d08c,edx
c0016f4b:	89 ca                	mov    edx,ecx
c0016f4d:	89 14 c5 a4 d0 02 c0 	mov    DWORD PTR [eax*8-0x3ffd2f5c],edx
c0016f54:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0016f58:	eb ac                	jmp    c0016f06 <loadACPITables(unsigned char*)+0x45>
c0016f5a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016f5e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016f62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f66:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016f69:	83 e8 24             	sub    eax,0x24
c0016f6c:	c1 e8 02             	shr    eax,0x2
c0016f6f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016f73:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0016f7b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016f7f:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0016f83:	7d 41                	jge    c0016fc6 <loadACPITables(unsigned char*)+0x105>
c0016f85:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016f89:	83 c0 24             	add    eax,0x24
c0016f8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016f90:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016f94:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016f98:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016f9c:	c1 e0 02             	shl    eax,0x2
c0016f9f:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0016fa3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016fa7:	8b 08                	mov    ecx,DWORD PTR [eax]
c0016fa9:	a1 8c d0 02 c0       	mov    eax,ds:0xc002d08c
c0016fae:	8d 50 01             	lea    edx,[eax+0x1]
c0016fb1:	89 15 8c d0 02 c0    	mov    DWORD PTR ds:0xc002d08c,edx
c0016fb7:	89 ca                	mov    edx,ecx
c0016fb9:	89 14 c5 a4 d0 02 c0 	mov    DWORD PTR [eax*8-0x3ffd2f5c],edx
c0016fc0:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0016fc4:	eb b5                	jmp    c0016f7b <loadACPITables(unsigned char*)+0xba>
c0016fc6:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0016fce:	a1 8c d0 02 c0       	mov    eax,ds:0xc002d08c
c0016fd3:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0016fd7:	0f 8d 05 01 00 00    	jge    c00170e2 <loadACPITables(unsigned char*)+0x221>
c0016fdd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016fe1:	8b 04 c5 a4 d0 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd2f5c]
c0016fe8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016fec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ff0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016ff4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ff8:	25 ff 0f 00 00       	and    eax,0xfff
c0016ffd:	89 c6                	mov    esi,eax
c0016fff:	e8 15 a9 ff ff       	call   c0011919 <Virt::getAKernelVAS()>
c0017004:	89 c3                	mov    ebx,eax
c0017006:	83 ec 0c             	sub    esp,0xc
c0017009:	6a 01                	push   0x1
c001700b:	e8 79 a7 ff ff       	call   c0011789 <Virt::allocateKernelVirtualPages(int)>
c0017010:	83 c4 10             	add    esp,0x10
c0017013:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017017:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001701d:	83 ec 0c             	sub    esp,0xc
c0017020:	6a 01                	push   0x1
c0017022:	6a 01                	push   0x1
c0017024:	50                   	push   eax
c0017025:	52                   	push   edx
c0017026:	53                   	push   ebx
c0017027:	e8 1c b1 ff ff       	call   c0012148 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001702c:	83 c4 20             	add    esp,0x20
c001702f:	09 f0                	or     eax,esi
c0017031:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017035:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017039:	c1 e0 03             	shl    eax,0x3
c001703c:	05 a0 d0 02 c0       	add    eax,0xc002d0a0
c0017041:	83 ec 04             	sub    esp,0x4
c0017044:	6a 04                	push   0x4
c0017046:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001704a:	50                   	push   eax
c001704b:	e8 05 96 fe ff       	call   c0000655 <memcpy>
c0017050:	83 c4 10             	add    esp,0x10
c0017053:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017057:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001705a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001705e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017062:	05 00 10 00 00       	add    eax,0x1000
c0017067:	c1 e8 0c             	shr    eax,0xc
c001706a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001706e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017072:	89 04 24             	mov    DWORD PTR [esp],eax
c0017075:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017079:	25 ff 0f 00 00       	and    eax,0xfff
c001707e:	89 c6                	mov    esi,eax
c0017080:	e8 94 a8 ff ff       	call   c0011919 <Virt::getAKernelVAS()>
c0017085:	89 c3                	mov    ebx,eax
c0017087:	83 ec 0c             	sub    esp,0xc
c001708a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001708e:	e8 f6 a6 ff ff       	call   c0011789 <Virt::allocateKernelVirtualPages(int)>
c0017093:	83 c4 10             	add    esp,0x10
c0017096:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001709a:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00170a0:	83 ec 0c             	sub    esp,0xc
c00170a3:	6a 01                	push   0x1
c00170a5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00170a9:	50                   	push   eax
c00170aa:	52                   	push   edx
c00170ab:	53                   	push   ebx
c00170ac:	e8 97 b0 ff ff       	call   c0012148 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00170b1:	83 c4 20             	add    esp,0x20
c00170b4:	09 f0                	or     eax,esi
c00170b6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00170ba:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00170bd:	83 ec 0c             	sub    esp,0xc
c00170c0:	50                   	push   eax
c00170c1:	e8 27 aa ff ff       	call   c0011aed <Virt::freeKernelVirtualPages(unsigned long)>
c00170c6:	83 c4 10             	add    esp,0x10
c00170c9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00170cd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00170d1:	89 14 c5 a4 d0 02 c0 	mov    DWORD PTR [eax*8-0x3ffd2f5c],edx
c00170d8:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c00170dc:	e9 ed fe ff ff       	jmp    c0016fce <loadACPITables(unsigned char*)+0x10d>
c00170e1:	90                   	nop
c00170e2:	83 c4 44             	add    esp,0x44
c00170e5:	5b                   	pop    ebx
c00170e6:	5e                   	pop    esi
c00170e7:	c3                   	ret    

c00170e8 <findRSDT(unsigned char*)>:
c00170e8:	56                   	push   esi
c00170e9:	53                   	push   ebx
c00170ea:	83 ec 44             	sub    esp,0x44
c00170ed:	a1 e8 c9 02 c0       	mov    eax,ds:0xc002c9e8
c00170f2:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00170f8:	83 e0 04             	and    eax,0x4
c00170fb:	84 c0                	test   al,al
c00170fd:	75 0a                	jne    c0017109 <findRSDT(unsigned char*)+0x21>
c00170ff:	b8 00 00 00 00       	mov    eax,0x0
c0017104:	e9 f7 00 00 00       	jmp    c0017200 <findRSDT(unsigned char*)+0x118>
c0017109:	83 ec 04             	sub    esp,0x4
c001710c:	6a 24                	push   0x24
c001710e:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0017112:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017116:	50                   	push   eax
c0017117:	e8 39 95 fe ff       	call   c0000655 <memcpy>
c001711c:	83 c4 10             	add    esp,0x10
c001711f:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017123:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0017127:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c001712f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017133:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017137:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001713b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001713f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017143:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017147:	25 ff 0f 00 00       	and    eax,0xfff
c001714c:	89 c6                	mov    esi,eax
c001714e:	e8 c6 a7 ff ff       	call   c0011919 <Virt::getAKernelVAS()>
c0017153:	89 c3                	mov    ebx,eax
c0017155:	83 ec 0c             	sub    esp,0xc
c0017158:	6a 02                	push   0x2
c001715a:	e8 2a a6 ff ff       	call   c0011789 <Virt::allocateKernelVirtualPages(int)>
c001715f:	83 c4 10             	add    esp,0x10
c0017162:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017166:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001716c:	83 ec 0c             	sub    esp,0xc
c001716f:	6a 01                	push   0x1
c0017171:	6a 02                	push   0x2
c0017173:	50                   	push   eax
c0017174:	52                   	push   edx
c0017175:	53                   	push   ebx
c0017176:	e8 cd af ff ff       	call   c0012148 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001717b:	83 c4 20             	add    esp,0x20
c001717e:	09 f0                	or     eax,esi
c0017180:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017184:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017188:	25 ff 0f 00 00       	and    eax,0xfff
c001718d:	89 c6                	mov    esi,eax
c001718f:	e8 85 a7 ff ff       	call   c0011919 <Virt::getAKernelVAS()>
c0017194:	89 c3                	mov    ebx,eax
c0017196:	83 ec 0c             	sub    esp,0xc
c0017199:	6a 02                	push   0x2
c001719b:	e8 e9 a5 ff ff       	call   c0011789 <Virt::allocateKernelVirtualPages(int)>
c00171a0:	83 c4 10             	add    esp,0x10
c00171a3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00171a7:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00171ad:	83 ec 0c             	sub    esp,0xc
c00171b0:	6a 01                	push   0x1
c00171b2:	6a 02                	push   0x2
c00171b4:	50                   	push   eax
c00171b5:	52                   	push   edx
c00171b6:	53                   	push   ebx
c00171b7:	e8 8c af ff ff       	call   c0012148 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00171bc:	83 c4 20             	add    esp,0x20
c00171bf:	09 f0                	or     eax,esi
c00171c1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00171c5:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c00171ca:	75 11                	jne    c00171dd <findRSDT(unsigned char*)+0xf5>
c00171cc:	c6 05 a0 d2 02 c0 00 	mov    BYTE PTR ds:0xc002d2a0,0x0
c00171d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00171d7:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00171db:	eb 1f                	jmp    c00171fc <findRSDT(unsigned char*)+0x114>
c00171dd:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c00171e2:	75 11                	jne    c00171f5 <findRSDT(unsigned char*)+0x10d>
c00171e4:	c6 05 a0 d2 02 c0 01 	mov    BYTE PTR ds:0xc002d2a0,0x1
c00171eb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00171ef:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00171f3:	eb 07                	jmp    c00171fc <findRSDT(unsigned char*)+0x114>
c00171f5:	b8 00 00 00 00       	mov    eax,0x0
c00171fa:	eb 04                	jmp    c0017200 <findRSDT(unsigned char*)+0x118>
c00171fc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017200:	83 c4 44             	add    esp,0x44
c0017203:	5b                   	pop    ebx
c0017204:	5e                   	pop    esi
c0017205:	c3                   	ret    

c0017206 <findDataTable(unsigned char*, char*)>:
c0017206:	83 ec 1c             	sub    esp,0x1c
c0017209:	a1 e8 c9 02 c0       	mov    eax,ds:0xc002c9e8
c001720e:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017214:	83 e0 04             	and    eax,0x4
c0017217:	84 c0                	test   al,al
c0017219:	75 07                	jne    c0017222 <findDataTable(unsigned char*, char*)+0x1c>
c001721b:	b8 00 00 00 00       	mov    eax,0x0
c0017220:	eb 7c                	jmp    c001729e <findDataTable(unsigned char*, char*)+0x98>
c0017222:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001722a:	a1 8c d0 02 c0       	mov    eax,ds:0xc002d08c
c001722f:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017233:	7d 3a                	jge    c001726f <findDataTable(unsigned char*, char*)+0x69>
c0017235:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017239:	c1 e0 03             	shl    eax,0x3
c001723c:	05 a0 d0 02 c0       	add    eax,0xc002d0a0
c0017241:	83 ec 04             	sub    esp,0x4
c0017244:	6a 04                	push   0x4
c0017246:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001724a:	50                   	push   eax
c001724b:	e8 a2 93 fe ff       	call   c00005f2 <memcmp>
c0017250:	83 c4 10             	add    esp,0x10
c0017253:	85 c0                	test   eax,eax
c0017255:	0f 94 c0             	sete   al
c0017258:	84 c0                	test   al,al
c001725a:	74 0d                	je     c0017269 <findDataTable(unsigned char*, char*)+0x63>
c001725c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017260:	8b 04 c5 a4 d0 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd2f5c]
c0017267:	eb 35                	jmp    c001729e <findDataTable(unsigned char*, char*)+0x98>
c0017269:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001726d:	eb bb                	jmp    c001722a <findDataTable(unsigned char*, char*)+0x24>
c001726f:	a0 a0 d2 02 c0       	mov    al,ds:0xc002d2a0
c0017274:	84 c0                	test   al,al
c0017276:	74 07                	je     c001727f <findDataTable(unsigned char*, char*)+0x79>
c0017278:	b8 58 00 00 00       	mov    eax,0x58
c001727d:	eb 05                	jmp    c0017284 <findDataTable(unsigned char*, char*)+0x7e>
c001727f:	b8 52 00 00 00       	mov    eax,0x52
c0017284:	83 ec 04             	sub    esp,0x4
c0017287:	50                   	push   eax
c0017288:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001728c:	68 e0 9c 02 c0       	push   0xc0029ce0
c0017291:	e8 e3 b4 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c0017296:	83 c4 10             	add    esp,0x10
c0017299:	b8 00 00 00 00       	mov    eax,0x0
c001729e:	83 c4 1c             	add    esp,0x1c
c00172a1:	c3                   	ret    

c00172a2 <scanMADT()>:
c00172a2:	53                   	push   ebx
c00172a3:	83 ec 38             	sub    esp,0x38
c00172a6:	a1 e8 c9 02 c0       	mov    eax,ds:0xc002c9e8
c00172ab:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00172b1:	83 e0 04             	and    eax,0x4
c00172b4:	84 c0                	test   al,al
c00172b6:	0f 84 63 04 00 00    	je     c001771f <scanMADT()+0x47d>
c00172bc:	e8 76 fb ff ff       	call   c0016e37 <findRSDP()>
c00172c1:	a3 ac d2 02 c0       	mov    ds:0xc002d2ac,eax
c00172c6:	a1 ac d2 02 c0       	mov    eax,ds:0xc002d2ac
c00172cb:	85 c0                	test   eax,eax
c00172cd:	75 19                	jne    c00172e8 <scanMADT()+0x46>
c00172cf:	a1 e8 c9 02 c0       	mov    eax,ds:0xc002c9e8
c00172d4:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00172da:	83 e2 fb             	and    edx,0xfffffffb
c00172dd:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00172e3:	e9 3b 04 00 00       	jmp    c0017723 <scanMADT()+0x481>
c00172e8:	a1 ac d2 02 c0       	mov    eax,ds:0xc002d2ac
c00172ed:	83 ec 0c             	sub    esp,0xc
c00172f0:	50                   	push   eax
c00172f1:	e8 f2 fd ff ff       	call   c00170e8 <findRSDT(unsigned char*)>
c00172f6:	83 c4 10             	add    esp,0x10
c00172f9:	a3 a8 d2 02 c0       	mov    ds:0xc002d2a8,eax
c00172fe:	a1 a8 d2 02 c0       	mov    eax,ds:0xc002d2a8
c0017303:	85 c0                	test   eax,eax
c0017305:	75 19                	jne    c0017320 <scanMADT()+0x7e>
c0017307:	a1 e8 c9 02 c0       	mov    eax,ds:0xc002c9e8
c001730c:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017312:	83 e2 fb             	and    edx,0xfffffffb
c0017315:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001731b:	e9 03 04 00 00       	jmp    c0017723 <scanMADT()+0x481>
c0017320:	a1 a8 d2 02 c0       	mov    eax,ds:0xc002d2a8
c0017325:	83 ec 0c             	sub    esp,0xc
c0017328:	50                   	push   eax
c0017329:	e8 93 fb ff ff       	call   c0016ec1 <loadACPITables(unsigned char*)>
c001732e:	83 c4 10             	add    esp,0x10
c0017331:	a1 a8 d2 02 c0       	mov    eax,ds:0xc002d2a8
c0017336:	83 ec 08             	sub    esp,0x8
c0017339:	68 fe 9b 02 c0       	push   0xc0029bfe
c001733e:	50                   	push   eax
c001733f:	e8 c2 fe ff ff       	call   c0017206 <findDataTable(unsigned char*, char*)>
c0017344:	83 c4 10             	add    esp,0x10
c0017347:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001734b:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017350:	75 19                	jne    c001736b <scanMADT()+0xc9>
c0017352:	a1 e8 c9 02 c0       	mov    eax,ds:0xc002c9e8
c0017357:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001735d:	83 e2 fe             	and    edx,0xfffffffe
c0017360:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017366:	e9 b8 03 00 00       	jmp    c0017723 <scanMADT()+0x481>
c001736b:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017373:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017377:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001737a:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001737e:	0f 87 9f 03 00 00    	ja     c0017723 <scanMADT()+0x481>
c0017384:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c001738c:	0f 87 91 03 00 00    	ja     c0017723 <scanMADT()+0x481>
c0017392:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017396:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001739a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001739e:	8d 50 01             	lea    edx,[eax+0x1]
c00173a1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00173a5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00173a9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00173ad:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c00173b1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00173b5:	8d 50 01             	lea    edx,[eax+0x1]
c00173b8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00173bc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00173c0:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00173c4:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c00173c8:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c00173cd:	0f 86 4f 03 00 00    	jbe    c0017722 <scanMADT()+0x480>
c00173d3:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c00173d8:	75 57                	jne    c0017431 <scanMADT()+0x18f>
c00173da:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00173de:	8d 50 01             	lea    edx,[eax+0x1]
c00173e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00173e5:	8a 15 a0 d4 02 c0    	mov    dl,BYTE PTR ds:0xc002d4a0
c00173eb:	0f b6 d2             	movzx  edx,dl
c00173ee:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00173f2:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00173f6:	88 82 e0 d4 02 c0    	mov    BYTE PTR [edx-0x3ffd2b20],al
c00173fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017400:	8d 50 01             	lea    edx,[eax+0x1]
c0017403:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017407:	8a 15 a0 d4 02 c0    	mov    dl,BYTE PTR ds:0xc002d4a0
c001740d:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017410:	88 0d a0 d4 02 c0    	mov    BYTE PTR ds:0xc002d4a0,cl
c0017416:	0f b6 d2             	movzx  edx,dl
c0017419:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001741d:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017421:	88 82 c0 d4 02 c0    	mov    BYTE PTR [edx-0x3ffd2b40],al
c0017427:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001742c:	e9 da 02 00 00       	jmp    c001770b <scanMADT()+0x469>
c0017431:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017436:	0f 85 14 01 00 00    	jne    c0017550 <scanMADT()+0x2ae>
c001743c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017440:	8d 50 01             	lea    edx,[eax+0x1]
c0017443:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017447:	8a 15 60 d3 02 c0    	mov    dl,BYTE PTR ds:0xc002d360
c001744d:	0f b6 d2             	movzx  edx,dl
c0017450:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017454:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017458:	88 82 80 d3 02 c0    	mov    BYTE PTR [edx-0x3ffd2c80],al
c001745e:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017462:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017466:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001746a:	01 d0                	add    eax,edx
c001746c:	83 c0 2c             	add    eax,0x2c
c001746f:	8a 00                	mov    al,BYTE PTR [eax]
c0017471:	0f b6 d0             	movzx  edx,al
c0017474:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017478:	8d 48 01             	lea    ecx,[eax+0x1]
c001747b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001747f:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017483:	0f b6 c0             	movzx  eax,al
c0017486:	c1 e0 08             	shl    eax,0x8
c0017489:	89 d1                	mov    ecx,edx
c001748b:	09 c1                	or     ecx,eax
c001748d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017491:	8d 50 02             	lea    edx,[eax+0x2]
c0017494:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017498:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001749c:	0f b6 c0             	movzx  eax,al
c001749f:	c1 e0 10             	shl    eax,0x10
c00174a2:	09 c1                	or     ecx,eax
c00174a4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00174a8:	8d 50 03             	lea    edx,[eax+0x3]
c00174ab:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00174af:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00174b3:	0f b6 c0             	movzx  eax,al
c00174b6:	c1 e0 18             	shl    eax,0x18
c00174b9:	09 c1                	or     ecx,eax
c00174bb:	89 ca                	mov    edx,ecx
c00174bd:	a0 60 d3 02 c0       	mov    al,ds:0xc002d360
c00174c2:	0f b6 c0             	movzx  eax,al
c00174c5:	89 14 85 a0 d3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2c60],edx
c00174cc:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00174d1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00174d5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00174d9:	01 d0                	add    eax,edx
c00174db:	83 c0 2c             	add    eax,0x2c
c00174de:	8a 00                	mov    al,BYTE PTR [eax]
c00174e0:	0f b6 d0             	movzx  edx,al
c00174e3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00174e7:	8d 48 01             	lea    ecx,[eax+0x1]
c00174ea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00174ee:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00174f2:	0f b6 c0             	movzx  eax,al
c00174f5:	c1 e0 08             	shl    eax,0x8
c00174f8:	89 d1                	mov    ecx,edx
c00174fa:	09 c1                	or     ecx,eax
c00174fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017500:	8d 50 02             	lea    edx,[eax+0x2]
c0017503:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017507:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001750b:	0f b6 c0             	movzx  eax,al
c001750e:	c1 e0 10             	shl    eax,0x10
c0017511:	09 c1                	or     ecx,eax
c0017513:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017517:	8d 50 03             	lea    edx,[eax+0x3]
c001751a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001751e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017522:	0f b6 c0             	movzx  eax,al
c0017525:	c1 e0 18             	shl    eax,0x18
c0017528:	09 c1                	or     ecx,eax
c001752a:	89 ca                	mov    edx,ecx
c001752c:	a0 60 d3 02 c0       	mov    al,ds:0xc002d360
c0017531:	0f b6 c0             	movzx  eax,al
c0017534:	89 14 85 20 d4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2be0],edx
c001753b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017540:	a0 60 d3 02 c0       	mov    al,ds:0xc002d360
c0017545:	40                   	inc    eax
c0017546:	a2 60 d3 02 c0       	mov    ds:0xc002d360,al
c001754b:	e9 bb 01 00 00       	jmp    c001770b <scanMADT()+0x469>
c0017550:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0017555:	0f 85 e9 00 00 00    	jne    c0017644 <scanMADT()+0x3a2>
c001755b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001755f:	8d 50 01             	lea    edx,[eax+0x1]
c0017562:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017566:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001756a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001756e:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0017572:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017576:	8d 50 01             	lea    edx,[eax+0x1]
c0017579:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001757d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017581:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017585:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017589:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001758d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017591:	01 d0                	add    eax,edx
c0017593:	83 c0 2c             	add    eax,0x2c
c0017596:	8a 00                	mov    al,BYTE PTR [eax]
c0017598:	0f b6 d0             	movzx  edx,al
c001759b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001759f:	8d 48 01             	lea    ecx,[eax+0x1]
c00175a2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00175a6:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00175aa:	0f b6 c0             	movzx  eax,al
c00175ad:	c1 e0 08             	shl    eax,0x8
c00175b0:	89 d1                	mov    ecx,edx
c00175b2:	09 c1                	or     ecx,eax
c00175b4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00175b8:	8d 50 02             	lea    edx,[eax+0x2]
c00175bb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00175bf:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00175c3:	0f b6 c0             	movzx  eax,al
c00175c6:	c1 e0 10             	shl    eax,0x10
c00175c9:	09 c1                	or     ecx,eax
c00175cb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00175cf:	8d 50 03             	lea    edx,[eax+0x3]
c00175d2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00175d6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00175da:	0f b6 c0             	movzx  eax,al
c00175dd:	c1 e0 18             	shl    eax,0x18
c00175e0:	09 c8                	or     eax,ecx
c00175e2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00175e6:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00175eb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00175ef:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00175f3:	01 d0                	add    eax,edx
c00175f5:	83 c0 2c             	add    eax,0x2c
c00175f8:	8a 00                	mov    al,BYTE PTR [eax]
c00175fa:	0f b6 c0             	movzx  eax,al
c00175fd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017601:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017604:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017608:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c001760c:	0f b6 d2             	movzx  edx,dl
c001760f:	c1 e2 08             	shl    edx,0x8
c0017612:	09 d0                	or     eax,edx
c0017614:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0017619:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001761e:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0017623:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017627:	88 90 40 bc 02 c0    	mov    BYTE PTR [eax-0x3ffd43c0],dl
c001762d:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0017632:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0017637:	66 89 84 12 40 d3 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd2cc0],ax
c001763f:	e9 c7 00 00 00       	jmp    c001770b <scanMADT()+0x469>
c0017644:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0017649:	0f 85 b0 00 00 00    	jne    c00176ff <scanMADT()+0x45d>
c001764f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017653:	8d 50 01             	lea    edx,[eax+0x1]
c0017656:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001765a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001765e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017662:	0f b6 c0             	movzx  eax,al
c0017665:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017669:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001766d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017671:	01 d0                	add    eax,edx
c0017673:	83 c0 2c             	add    eax,0x2c
c0017676:	8a 00                	mov    al,BYTE PTR [eax]
c0017678:	0f b6 d0             	movzx  edx,al
c001767b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001767f:	8d 48 01             	lea    ecx,[eax+0x1]
c0017682:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017686:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001768a:	0f b6 c0             	movzx  eax,al
c001768d:	c1 e0 08             	shl    eax,0x8
c0017690:	09 d0                	or     eax,edx
c0017692:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017696:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001769b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001769f:	8d 50 01             	lea    edx,[eax+0x1]
c00176a2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00176a6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00176aa:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00176ae:	0f b6 c0             	movzx  eax,al
c00176b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00176b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00176b9:	c1 e0 08             	shl    eax,0x8
c00176bc:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00176c0:	89 c1                	mov    ecx,eax
c00176c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00176c6:	c1 e0 18             	shl    eax,0x18
c00176c9:	89 c3                	mov    ebx,eax
c00176cb:	a1 b0 d2 02 c0       	mov    eax,ds:0xc002d2b0
c00176d0:	8d 50 01             	lea    edx,[eax+0x1]
c00176d3:	89 15 b0 d2 02 c0    	mov    DWORD PTR ds:0xc002d2b0,edx
c00176d9:	09 d9                	or     ecx,ebx
c00176db:	89 ca                	mov    edx,ecx
c00176dd:	89 14 85 c0 d2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2d40],edx
c00176e4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00176e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00176ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00176f0:	68 10 9d 02 c0       	push   0xc0029d10
c00176f5:	e8 7f b0 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c00176fa:	83 c4 10             	add    esp,0x10
c00176fd:	eb 0c                	jmp    c001770b <scanMADT()+0x469>
c00176ff:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0017704:	75 05                	jne    c001770b <scanMADT()+0x469>
c0017706:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c001770b:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0017710:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017714:	01 d0                	add    eax,edx
c0017716:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001771a:	e9 54 fc ff ff       	jmp    c0017373 <scanMADT()+0xd1>
c001771f:	90                   	nop
c0017720:	eb 01                	jmp    c0017723 <scanMADT()+0x481>
c0017722:	90                   	nop
c0017723:	83 c4 38             	add    esp,0x38
c0017726:	5b                   	pop    ebx
c0017727:	c3                   	ret    

c0017728 <ACPI::ACPI()>:
c0017728:	83 ec 0c             	sub    esp,0xc
c001772b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001772f:	83 ec 08             	sub    esp,0x8
c0017732:	68 03 9c 02 c0       	push   0xc0029c03
c0017737:	50                   	push   eax
c0017738:	e8 1b c6 ff ff       	call   c0013d58 <Device::Device(char const*)>
c001773d:	83 c4 10             	add    esp,0x10
c0017740:	ba e8 9d 02 c0       	mov    edx,0xc0029de8
c0017745:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017749:	89 10                	mov    DWORD PTR [eax],edx
c001774b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001774f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0017756:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001775a:	c7 80 5c 21 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x215c],0x0
c0017764:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017768:	c7 80 60 22 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x2260],0x0
c0017772:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017776:	c6 80 64 22 00 00 00 	mov    BYTE PTR [eax+0x2264],0x0
c001777d:	e8 20 fb ff ff       	call   c00172a2 <scanMADT()>
c0017782:	90                   	nop
c0017783:	83 c4 0c             	add    esp,0xc
c0017786:	c3                   	ret    
c0017787:	90                   	nop

c0017788 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0017788:	83 ec 2c             	sub    esp,0x2c
c001778b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001778f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017793:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017797:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001779b:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00177a0:	88 d0                	mov    al,dl
c00177a2:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00177a6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00177ab:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00177b3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00177b7:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c00177bd:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00177c1:	0f 8d 97 00 00 00    	jge    c001785e <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c00177c7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00177cb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00177cf:	83 c2 2a             	add    edx,0x2a
c00177d2:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c00177d6:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c00177db:	75 78                	jne    c0017855 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00177dd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00177e1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00177e5:	83 c2 2a             	add    edx,0x2a
c00177e8:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c00177ec:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c00177f0:	75 63                	jne    c0017855 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00177f2:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00177f7:	74 3a                	je     c0017833 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c00177f9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00177fd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017801:	83 c2 2a             	add    edx,0x2a
c0017804:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0017808:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001780c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001780f:	39 c2                	cmp    edx,eax
c0017811:	74 10                	je     c0017823 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0017813:	83 ec 0c             	sub    esp,0xc
c0017816:	68 4c 9d 02 c0       	push   0xc0029d4c
c001781b:	e8 73 20 00 00       	call   c0019893 <Krnl::panic(char const*)>
c0017820:	83 c4 10             	add    esp,0x10
c0017823:	83 ec 0c             	sub    esp,0xc
c0017826:	68 08 9c 02 c0       	push   0xc0029c08
c001782b:	e8 63 20 00 00       	call   c0019893 <Krnl::panic(char const*)>
c0017830:	83 c4 10             	add    esp,0x10
c0017833:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0017837:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001783b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001783f:	83 c2 2a             	add    edx,0x2a
c0017842:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0017846:	8b 02                	mov    eax,DWORD PTR [edx]
c0017848:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001784b:	89 01                	mov    DWORD PTR [ecx],eax
c001784d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017850:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017855:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0017859:	e9 55 ff ff ff       	jmp    c00177b3 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c001785e:	90                   	nop
c001785f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017863:	83 c4 2c             	add    esp,0x2c
c0017866:	c2 04 00             	ret    0x4
c0017869:	90                   	nop

c001786a <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c001786a:	56                   	push   esi
c001786b:	53                   	push   ebx
c001786c:	83 ec 14             	sub    esp,0x14
c001786f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017873:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0017877:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001787b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0017880:	88 c8                	mov    al,cl
c0017882:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017886:	88 d0                	mov    al,dl
c0017888:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001788c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017890:	8d b0 5c 01 00 00    	lea    esi,[eax+0x15c]
c0017896:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001789a:	8b 98 5c 21 00 00    	mov    ebx,DWORD PTR [eax+0x215c]
c00178a0:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c00178a5:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00178aa:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00178af:	83 ec 04             	sub    esp,0x4
c00178b2:	56                   	push   esi
c00178b3:	53                   	push   ebx
c00178b4:	51                   	push   ecx
c00178b5:	52                   	push   edx
c00178b6:	50                   	push   eax
c00178b7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00178bb:	68 7c 9d 02 c0       	push   0xc0029d7c
c00178c0:	e8 b4 ae ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c00178c5:	83 c4 20             	add    esp,0x20
c00178c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178cc:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c00178d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178d6:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00178d9:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c00178dd:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c00178e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178e5:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c00178eb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00178ef:	8d 48 2a             	lea    ecx,[eax+0x2a]
c00178f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00178f6:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c00178fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178ff:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0017905:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017909:	8d 48 01             	lea    ecx,[eax+0x1]
c001790c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017910:	83 c2 2a             	add    edx,0x2a
c0017913:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0017917:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001791b:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0017921:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017925:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017928:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001792c:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0017930:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017934:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c001793a:	8d 50 01             	lea    edx,[eax+0x1]
c001793d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017941:	89 90 5c 21 00 00    	mov    DWORD PTR [eax+0x215c],edx
c0017947:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001794b:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0017951:	3d 00 08 00 00       	cmp    eax,0x800
c0017956:	75 10                	jne    c0017968 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xfe>
c0017958:	83 ec 0c             	sub    esp,0xc
c001795b:	68 17 9c 02 c0       	push   0xc0029c17
c0017960:	e8 2e 1f 00 00       	call   c0019893 <Krnl::panic(char const*)>
c0017965:	83 c4 10             	add    esp,0x10
c0017968:	90                   	nop
c0017969:	83 c4 14             	add    esp,0x14
c001796c:	5b                   	pop    ebx
c001796d:	5e                   	pop    esi
c001796e:	c3                   	ret    
c001796f:	90                   	nop

c0017970 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0017970:	b8 00 00 00 00       	mov    eax,0x0
c0017975:	c3                   	ret    

c0017976 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0017976:	83 ec 1c             	sub    esp,0x1c
c0017979:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001797d:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0017980:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017984:	a1 e8 c9 02 c0       	mov    eax,ds:0xc002c9e8
c0017989:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001798e:	83 ec 08             	sub    esp,0x8
c0017991:	52                   	push   edx
c0017992:	50                   	push   eax
c0017993:	e8 54 71 ff ff       	call   c000eaec <Computer::readCMOS(unsigned char)>
c0017998:	83 c4 10             	add    esp,0x10
c001799b:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001799f:	a1 e8 c9 02 c0       	mov    eax,ds:0xc002c9e8
c00179a4:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00179a9:	83 ec 04             	sub    esp,0x4
c00179ac:	6a 01                	push   0x1
c00179ae:	52                   	push   edx
c00179af:	50                   	push   eax
c00179b0:	e8 4d 72 ff ff       	call   c000ec02 <Computer::writeCMOS(unsigned char, unsigned char)>
c00179b5:	83 c4 10             	add    esp,0x10
c00179b8:	90                   	nop
c00179b9:	83 c4 1c             	add    esp,0x1c
c00179bc:	c3                   	ret    
c00179bd:	90                   	nop

c00179be <ACPI::open(int, int, void*)>:
c00179be:	53                   	push   ebx
c00179bf:	83 ec 28             	sub    esp,0x28
c00179c2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00179c6:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c00179cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00179d1:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c00179d7:	84 c0                	test   al,al
c00179d9:	74 67                	je     c0017a42 <ACPI::open(int, int, void*)+0x84>
c00179db:	c7 44 24 10 58 01 00 00 	mov    DWORD PTR [esp+0x10],0x158
c00179e3:	83 ec 0c             	sub    esp,0xc
c00179e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00179ea:	e8 e5 7a ff ff       	call   c000f4d4 <malloc>
c00179ef:	83 c4 10             	add    esp,0x10
c00179f2:	89 c3                	mov    ebx,eax
c00179f4:	83 ec 0c             	sub    esp,0xc
c00179f7:	53                   	push   ebx
c00179f8:	e8 c1 9e 00 00       	call   c00218be <PCI::PCI()>
c00179fd:	83 c4 10             	add    esp,0x10
c0017a00:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0017a04:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017a08:	83 ec 08             	sub    esp,0x8
c0017a0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017a0f:	50                   	push   eax
c0017a10:	e8 53 c1 ff ff       	call   c0013b68 <Device::addChild(Device*)>
c0017a15:	83 c4 10             	add    esp,0x10
c0017a18:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017a1c:	8b 00                	mov    eax,DWORD PTR [eax]
c0017a1e:	83 c0 08             	add    eax,0x8
c0017a21:	8b 00                	mov    eax,DWORD PTR [eax]
c0017a23:	6a 00                	push   0x0
c0017a25:	6a 00                	push   0x0
c0017a27:	6a 00                	push   0x0
c0017a29:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0017a2d:	ff d0                	call   eax
c0017a2f:	83 c4 10             	add    esp,0x10
c0017a32:	83 ec 0c             	sub    esp,0xc
c0017a35:	68 34 9c 02 c0       	push   0xc0029c34
c0017a3a:	e8 3a ad ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c0017a3f:	83 c4 10             	add    esp,0x10
c0017a42:	83 ec 0c             	sub    esp,0xc
c0017a45:	68 3f 9c 02 c0       	push   0xc0029c3f
c0017a4a:	e8 37 42 00 00       	call   c001bc86 <Thr::loadKernelSymbolTable(char const*)>
c0017a4f:	83 c4 10             	add    esp,0x10
c0017a52:	8b 1d e8 c9 02 c0    	mov    ebx,DWORD PTR ds:0xc002c9e8
c0017a58:	83 ec 08             	sub    esp,0x8
c0017a5b:	6a 01                	push   0x1
c0017a5d:	68 5d 9c 02 c0       	push   0xc0029c5d
c0017a62:	e8 df 4c 00 00       	call   c001c746 <Thr::loadDLL(char const*, bool)>
c0017a67:	83 c4 10             	add    esp,0x10
c0017a6a:	83 ec 08             	sub    esp,0x8
c0017a6d:	53                   	push   ebx
c0017a6e:	50                   	push   eax
c0017a6f:	e8 e1 4e 00 00       	call   c001c955 <Thr::executeDLL(unsigned long, void*)>
c0017a74:	83 c4 10             	add    esp,0x10
c0017a77:	8b 1d e8 c9 02 c0    	mov    ebx,DWORD PTR ds:0xc002c9e8
c0017a7d:	83 ec 08             	sub    esp,0x8
c0017a80:	6a 01                	push   0x1
c0017a82:	68 7a 9c 02 c0       	push   0xc0029c7a
c0017a87:	e8 ba 4c 00 00       	call   c001c746 <Thr::loadDLL(char const*, bool)>
c0017a8c:	83 c4 10             	add    esp,0x10
c0017a8f:	83 ec 08             	sub    esp,0x8
c0017a92:	53                   	push   ebx
c0017a93:	50                   	push   eax
c0017a94:	e8 bc 4e 00 00       	call   c001c955 <Thr::executeDLL(unsigned long, void*)>
c0017a99:	83 c4 10             	add    esp,0x10
c0017a9c:	a1 e8 c9 02 c0       	mov    eax,ds:0xc002c9e8
c0017aa1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017aa7:	83 e0 04             	and    eax,0x4
c0017aaa:	84 c0                	test   al,al
c0017aac:	0f 84 d6 00 00 00    	je     c0017b88 <ACPI::open(int, int, void*)+0x1ca>
c0017ab2:	c7 44 24 0c 14 01 00 00 	mov    DWORD PTR [esp+0xc],0x114
c0017aba:	83 ec 0c             	sub    esp,0xc
c0017abd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017ac1:	e8 0e 7a ff ff       	call   c000f4d4 <malloc>
c0017ac6:	83 c4 10             	add    esp,0x10
c0017ac9:	89 c3                	mov    ebx,eax
c0017acb:	a1 34 df 02 c0       	mov    eax,ds:0xc002df34
c0017ad0:	83 ec 04             	sub    esp,0x4
c0017ad3:	50                   	push   eax
c0017ad4:	68 97 9c 02 c0       	push   0xc0029c97
c0017ad9:	53                   	push   ebx
c0017ada:	e8 c9 b1 ff ff       	call   c0012ca8 <File::File(char const*, Process*)>
c0017adf:	83 c4 10             	add    esp,0x10
c0017ae2:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0017ae6:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017aeb:	74 17                	je     c0017b04 <ACPI::open(int, int, void*)+0x146>
c0017aed:	83 ec 0c             	sub    esp,0xc
c0017af0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017af4:	e8 81 b4 ff ff       	call   c0012f7a <File::exists()>
c0017af9:	83 c4 10             	add    esp,0x10
c0017afc:	84 c0                	test   al,al
c0017afe:	74 04                	je     c0017b04 <ACPI::open(int, int, void*)+0x146>
c0017b00:	b0 01                	mov    al,0x1
c0017b02:	eb 02                	jmp    c0017b06 <ACPI::open(int, int, void*)+0x148>
c0017b04:	b0 00                	mov    al,0x0
c0017b06:	84 c0                	test   al,al
c0017b08:	74 25                	je     c0017b2f <ACPI::open(int, int, void*)+0x171>
c0017b0a:	8b 1d e8 c9 02 c0    	mov    ebx,DWORD PTR ds:0xc002c9e8
c0017b10:	83 ec 08             	sub    esp,0x8
c0017b13:	6a 01                	push   0x1
c0017b15:	68 97 9c 02 c0       	push   0xc0029c97
c0017b1a:	e8 27 4c 00 00       	call   c001c746 <Thr::loadDLL(char const*, bool)>
c0017b1f:	83 c4 10             	add    esp,0x10
c0017b22:	83 ec 08             	sub    esp,0x8
c0017b25:	53                   	push   ebx
c0017b26:	50                   	push   eax
c0017b27:	e8 29 4e 00 00       	call   c001c955 <Thr::executeDLL(unsigned long, void*)>
c0017b2c:	83 c4 10             	add    esp,0x10
c0017b2f:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017b34:	74 1e                	je     c0017b54 <ACPI::open(int, int, void*)+0x196>
c0017b36:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017b3b:	74 17                	je     c0017b54 <ACPI::open(int, int, void*)+0x196>
c0017b3d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017b41:	8b 00                	mov    eax,DWORD PTR [eax]
c0017b43:	83 c0 08             	add    eax,0x8
c0017b46:	8b 00                	mov    eax,DWORD PTR [eax]
c0017b48:	83 ec 0c             	sub    esp,0xc
c0017b4b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017b4f:	ff d0                	call   eax
c0017b51:	83 c4 10             	add    esp,0x10
c0017b54:	a1 a8 d2 02 c0       	mov    eax,ds:0xc002d2a8
c0017b59:	83 ec 08             	sub    esp,0x8
c0017b5c:	68 b4 9c 02 c0       	push   0xc0029cb4
c0017b61:	50                   	push   eax
c0017b62:	e8 9f f6 ff ff       	call   c0017206 <findDataTable(unsigned char*, char*)>
c0017b67:	83 c4 10             	add    esp,0x10
c0017b6a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017b6e:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0017b73:	74 13                	je     c0017b88 <ACPI::open(int, int, void*)+0x1ca>
c0017b75:	83 ec 08             	sub    esp,0x8
c0017b78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017b7c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017b80:	e8 f1 fd ff ff       	call   c0017976 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0017b85:	83 c4 10             	add    esp,0x10
c0017b88:	b8 00 00 00 00       	mov    eax,0x0
c0017b8d:	83 c4 28             	add    esp,0x28
c0017b90:	5b                   	pop    ebx
c0017b91:	c3                   	ret    

c0017b92 <ACPI::sleep()>:
c0017b92:	83 ec 0c             	sub    esp,0xc
c0017b95:	a1 80 d0 02 c0       	mov    eax,ds:0xc002d080
c0017b9a:	85 c0                	test   eax,eax
c0017b9c:	74 07                	je     c0017ba5 <ACPI::sleep()+0x13>
c0017b9e:	a1 80 d0 02 c0       	mov    eax,ds:0xc002d080
c0017ba3:	ff d0                	call   eax
c0017ba5:	90                   	nop
c0017ba6:	83 c4 0c             	add    esp,0xc
c0017ba9:	c3                   	ret    

c0017baa <CPU::close(int, int, void*)>:
c0017baa:	31 c0                	xor    eax,eax
c0017bac:	c3                   	ret    
c0017bad:	90                   	nop

c0017bae <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0017bae:	55                   	push   ebp
c0017baf:	57                   	push   edi
c0017bb0:	56                   	push   esi
c0017bb1:	53                   	push   ebx
c0017bb2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017bb6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017bba:	89 ce                	mov    esi,ecx
c0017bbc:	89 d5                	mov    ebp,edx
c0017bbe:	80 f9 04             	cmp    cl,0x4
c0017bc1:	75 28                	jne    c0017beb <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0017bc3:	8d 42 f9             	lea    eax,[edx-0x7]
c0017bc6:	3c 03                	cmp    al,0x3
c0017bc8:	0f 86 63 01 00 00    	jbe    c0017d31 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0017bce:	80 fa 03             	cmp    dl,0x3
c0017bd1:	0f 84 5a 01 00 00    	je     c0017d31 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0017bd7:	8d 7a f2             	lea    edi,[edx-0xe]
c0017bda:	b8 10 be 02 c0       	mov    eax,0xc002be10
c0017bdf:	89 fb                	mov    ebx,edi
c0017be1:	80 fb 01             	cmp    bl,0x1
c0017be4:	77 4e                	ja     c0017c34 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0017be6:	e9 52 01 00 00       	jmp    c0017d3d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017beb:	80 f9 05             	cmp    cl,0x5
c0017bee:	75 4d                	jne    c0017c3d <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0017bf0:	b8 20 be 02 c0       	mov    eax,0xc002be20
c0017bf5:	80 fa 03             	cmp    dl,0x3
c0017bf8:	0f 86 3f 01 00 00    	jbe    c0017d3d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017bfe:	8d 7a fa             	lea    edi,[edx-0x6]
c0017c01:	b8 30 be 02 c0       	mov    eax,0xc002be30
c0017c06:	89 fb                	mov    ebx,edi
c0017c08:	80 fb 01             	cmp    bl,0x1
c0017c0b:	0f 86 2c 01 00 00    	jbe    c0017d3d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c11:	b8 40 be 02 c0       	mov    eax,0xc002be40
c0017c16:	80 fa 08             	cmp    dl,0x8
c0017c19:	0f 84 1e 01 00 00    	je     c0017d3d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c1f:	89 d7                	mov    edi,edx
c0017c21:	b8 50 be 02 c0       	mov    eax,0xc002be50
c0017c26:	83 e7 fb             	and    edi,0xfffffffb
c0017c29:	89 fb                	mov    ebx,edi
c0017c2b:	80 fb 09             	cmp    bl,0x9
c0017c2e:	0f 84 09 01 00 00    	je     c0017d3d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c34:	31 c0                	xor    eax,eax
c0017c36:	89 eb                	mov    ebx,ebp
c0017c38:	0f b6 fb             	movzx  edi,bl
c0017c3b:	eb 30                	jmp    c0017c6d <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0017c3d:	31 c0                	xor    eax,eax
c0017c3f:	80 f9 06             	cmp    cl,0x6
c0017c42:	75 f2                	jne    c0017c36 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0017c44:	80 fa 0a             	cmp    dl,0xa
c0017c47:	77 ed                	ja     c0017c36 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0017c49:	bf de 05 00 00       	mov    edi,0x5de
c0017c4e:	0f a3 d7             	bt     edi,edx
c0017c51:	73 e3                	jae    c0017c36 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0017c53:	b8 60 be 02 c0       	mov    eax,0xc002be60
c0017c58:	e9 e0 00 00 00       	jmp    c0017d3d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c5d:	39 c7                	cmp    edi,eax
c0017c5f:	0f 84 d3 00 00 00    	je     c0017d38 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0017c65:	40                   	inc    eax
c0017c66:	3d d0 00 00 00       	cmp    eax,0xd0
c0017c6b:	74 09                	je     c0017c76 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0017c6d:	89 f3                	mov    ebx,esi
c0017c6f:	80 fb 0f             	cmp    bl,0xf
c0017c72:	75 f1                	jne    c0017c65 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0017c74:	eb e7                	jmp    c0017c5d <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0017c76:	80 f9 10             	cmp    cl,0x10
c0017c79:	75 14                	jne    c0017c8f <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0017c7b:	8d 42 fc             	lea    eax,[edx-0x4]
c0017c7e:	83 e0 fb             	and    eax,0xfffffffb
c0017c81:	3c 02                	cmp    al,0x2
c0017c83:	76 34                	jbe    c0017cb9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0017c85:	b8 fe a0 02 c0       	mov    eax,0xc002a0fe
c0017c8a:	80 fa 02             	cmp    dl,0x2
c0017c8d:	eb 24                	jmp    c0017cb3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0017c8f:	80 f9 11             	cmp    cl,0x11
c0017c92:	75 13                	jne    c0017ca7 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0017c94:	b8 fe a0 02 c0       	mov    eax,0xc002a0fe
c0017c99:	80 fa 03             	cmp    dl,0x3
c0017c9c:	0f 85 9b 00 00 00    	jne    c0017d3d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017ca2:	e9 91 00 00 00       	jmp    c0017d38 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0017ca7:	80 f9 12             	cmp    cl,0x12
c0017caa:	75 14                	jne    c0017cc0 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0017cac:	b8 fe a0 02 c0       	mov    eax,0xc002a0fe
c0017cb1:	fe ca                	dec    dl
c0017cb3:	0f 85 84 00 00 00    	jne    c0017d3d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017cb9:	b8 80 be 02 c0       	mov    eax,0xc002be80
c0017cbe:	eb 7d                	jmp    c0017d3d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017cc0:	80 f9 14             	cmp    cl,0x14
c0017cc3:	75 12                	jne    c0017cd7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0017cc5:	4a                   	dec    edx
c0017cc6:	b8 fe a0 02 c0       	mov    eax,0xc002a0fe
c0017ccb:	80 fa 01             	cmp    dl,0x1
c0017cce:	77 6d                	ja     c0017d3d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017cd0:	b8 90 be 02 c0       	mov    eax,0xc002be90
c0017cd5:	eb 66                	jmp    c0017d3d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017cd7:	80 f9 15             	cmp    cl,0x15
c0017cda:	75 31                	jne    c0017d0d <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0017cdc:	b8 a0 be 02 c0       	mov    eax,0xc002bea0
c0017ce1:	80 fa 01             	cmp    dl,0x1
c0017ce4:	74 57                	je     c0017d3d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017ce6:	b8 fe a0 02 c0       	mov    eax,0xc002a0fe
c0017ceb:	80 fa 13             	cmp    dl,0x13
c0017cee:	76 0c                	jbe    c0017cfc <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0017cf0:	80 fa 30             	cmp    dl,0x30
c0017cf3:	75 48                	jne    c0017d3d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017cf5:	b8 c0 be 02 c0       	mov    eax,0xc002bec0
c0017cfa:	eb 41                	jmp    c0017d3d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017cfc:	b9 04 00 09 00       	mov    ecx,0x90004
c0017d01:	0f a3 d1             	bt     ecx,edx
c0017d04:	73 37                	jae    c0017d3d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017d06:	b8 b0 be 02 c0       	mov    eax,0xc002beb0
c0017d0b:	eb 30                	jmp    c0017d3d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017d0d:	b8 fe a0 02 c0       	mov    eax,0xc002a0fe
c0017d12:	80 f9 16             	cmp    cl,0x16
c0017d15:	75 26                	jne    c0017d3d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017d17:	b8 d0 be 02 c0       	mov    eax,0xc002bed0
c0017d1c:	84 d2                	test   dl,dl
c0017d1e:	74 1d                	je     c0017d3d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017d20:	b8 fe a0 02 c0       	mov    eax,0xc002a0fe
c0017d25:	80 fa 30             	cmp    dl,0x30
c0017d28:	75 13                	jne    c0017d3d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017d2a:	b8 e0 be 02 c0       	mov    eax,0xc002bee0
c0017d2f:	eb 0c                	jmp    c0017d3d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017d31:	b8 00 be 02 c0       	mov    eax,0xc002be00
c0017d36:	eb 05                	jmp    c0017d3d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017d38:	b8 70 be 02 c0       	mov    eax,0xc002be70
c0017d3d:	5b                   	pop    ebx
c0017d3e:	5e                   	pop    esi
c0017d3f:	5f                   	pop    edi
c0017d40:	5d                   	pop    ebp
c0017d41:	c3                   	ret    

c0017d42 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0017d42:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017d46:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017d4a:	80 f9 04             	cmp    cl,0x4
c0017d4d:	75 6b                	jne    c0017dba <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0017d4f:	b8 60 bc 02 c0       	mov    eax,0xc002bc60
c0017d54:	80 fa 01             	cmp    dl,0x1
c0017d57:	0f 86 92 02 00 00    	jbe    c0017fef <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d5d:	b8 70 bc 02 c0       	mov    eax,0xc002bc70
c0017d62:	80 fa 02             	cmp    dl,0x2
c0017d65:	0f 84 84 02 00 00    	je     c0017fef <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d6b:	b8 80 bc 02 c0       	mov    eax,0xc002bc80
c0017d70:	80 fa 03             	cmp    dl,0x3
c0017d73:	0f 84 76 02 00 00    	je     c0017fef <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d79:	b8 90 bc 02 c0       	mov    eax,0xc002bc90
c0017d7e:	80 fa 04             	cmp    dl,0x4
c0017d81:	0f 84 68 02 00 00    	je     c0017fef <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d87:	b8 a0 bc 02 c0       	mov    eax,0xc002bca0
c0017d8c:	80 fa 05             	cmp    dl,0x5
c0017d8f:	0f 84 5a 02 00 00    	je     c0017fef <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d95:	b8 80 bc 02 c0       	mov    eax,0xc002bc80
c0017d9a:	80 fa 07             	cmp    dl,0x7
c0017d9d:	0f 84 4c 02 00 00    	je     c0017fef <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017da3:	83 ea 08             	sub    edx,0x8
c0017da6:	b8 fe a0 02 c0       	mov    eax,0xc002a0fe
c0017dab:	80 fa 01             	cmp    dl,0x1
c0017dae:	0f 87 3b 02 00 00    	ja     c0017fef <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017db4:	b8 b0 bc 02 c0       	mov    eax,0xc002bcb0
c0017db9:	c3                   	ret    
c0017dba:	80 f9 05             	cmp    cl,0x5
c0017dbd:	75 45                	jne    c0017e04 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0017dbf:	8d 4a ff             	lea    ecx,[edx-0x1]
c0017dc2:	b8 c0 bc 02 c0       	mov    eax,0xc002bcc0
c0017dc7:	80 f9 02             	cmp    cl,0x2
c0017dca:	0f 86 1f 02 00 00    	jbe    c0017fef <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017dd0:	80 fa 04             	cmp    dl,0x4
c0017dd3:	0f 84 f3 01 00 00    	je     c0017fcc <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0017dd9:	80 fa 07             	cmp    dl,0x7
c0017ddc:	0f 84 0d 02 00 00    	je     c0017fef <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017de2:	b8 d0 bc 02 c0       	mov    eax,0xc002bcd0
c0017de7:	80 fa 08             	cmp    dl,0x8
c0017dea:	0f 84 ff 01 00 00    	je     c0017fef <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017df0:	b8 fe a0 02 c0       	mov    eax,0xc002a0fe
c0017df5:	80 fa 09             	cmp    dl,0x9
c0017df8:	0f 85 f1 01 00 00    	jne    c0017fef <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017dfe:	b8 e0 bc 02 c0       	mov    eax,0xc002bce0
c0017e03:	c3                   	ret    
c0017e04:	80 f9 06             	cmp    cl,0x6
c0017e07:	0f 85 85 01 00 00    	jne    c0017f92 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0017e0d:	b8 f0 bc 02 c0       	mov    eax,0xc002bcf0
c0017e12:	80 fa 01             	cmp    dl,0x1
c0017e15:	0f 84 d4 01 00 00    	je     c0017fef <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e1b:	8d 42 fb             	lea    eax,[edx-0x5]
c0017e1e:	3c 01                	cmp    al,0x1
c0017e20:	0f 86 ac 01 00 00    	jbe    c0017fd2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0017e26:	80 fa 03             	cmp    dl,0x3
c0017e29:	0f 84 a3 01 00 00    	je     c0017fd2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0017e2f:	8d 4a f9             	lea    ecx,[edx-0x7]
c0017e32:	b8 10 bd 02 c0       	mov    eax,0xc002bd10
c0017e37:	80 f9 01             	cmp    cl,0x1
c0017e3a:	0f 86 af 01 00 00    	jbe    c0017fef <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e40:	80 fa 09             	cmp    dl,0x9
c0017e43:	0f 84 8f 01 00 00    	je     c0017fd8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0017e49:	8d 4a f6             	lea    ecx,[edx-0xa]
c0017e4c:	80 f9 01             	cmp    cl,0x1
c0017e4f:	0f 86 9a 01 00 00    	jbe    c0017fef <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e55:	b8 20 bd 02 c0       	mov    eax,0xc002bd20
c0017e5a:	80 fa 0d             	cmp    dl,0xd
c0017e5d:	0f 84 8c 01 00 00    	je     c0017fef <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e63:	b8 30 bd 02 c0       	mov    eax,0xc002bd30
c0017e68:	80 fa 0e             	cmp    dl,0xe
c0017e6b:	0f 84 7e 01 00 00    	je     c0017fef <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e71:	b8 40 bd 02 c0       	mov    eax,0xc002bd40
c0017e76:	80 fa 0f             	cmp    dl,0xf
c0017e79:	0f 84 70 01 00 00    	je     c0017fef <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e7f:	b8 20 bd 02 c0       	mov    eax,0xc002bd20
c0017e84:	80 fa 15             	cmp    dl,0x15
c0017e87:	0f 84 62 01 00 00    	je     c0017fef <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e8d:	8d 4a ea             	lea    ecx,[edx-0x16]
c0017e90:	b8 40 bd 02 c0       	mov    eax,0xc002bd40
c0017e95:	80 f9 01             	cmp    cl,0x1
c0017e98:	0f 86 51 01 00 00    	jbe    c0017fef <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e9e:	80 fa 1a             	cmp    dl,0x1a
c0017ea1:	0f 84 37 01 00 00    	je     c0017fde <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0017ea7:	80 fa 1c             	cmp    dl,0x1c
c0017eaa:	0f 84 34 01 00 00    	je     c0017fe4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0017eb0:	80 fa 1d             	cmp    dl,0x1d
c0017eb3:	0f 84 36 01 00 00    	je     c0017fef <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017eb9:	b8 70 bd 02 c0       	mov    eax,0xc002bd70
c0017ebe:	80 fa 25             	cmp    dl,0x25
c0017ec1:	0f 84 28 01 00 00    	je     c0017fef <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017ec7:	8d 4a da             	lea    ecx,[edx-0x26]
c0017eca:	b8 60 bd 02 c0       	mov    eax,0xc002bd60
c0017ecf:	80 f9 01             	cmp    cl,0x1
c0017ed2:	0f 86 17 01 00 00    	jbe    c0017fef <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017ed8:	b8 80 bd 02 c0       	mov    eax,0xc002bd80
c0017edd:	80 fa 2a             	cmp    dl,0x2a
c0017ee0:	0f 84 09 01 00 00    	je     c0017fef <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017ee6:	b8 70 bd 02 c0       	mov    eax,0xc002bd70
c0017eeb:	80 fa 2c             	cmp    dl,0x2c
c0017eee:	0f 84 fb 00 00 00    	je     c0017fef <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017ef4:	b8 80 bd 02 c0       	mov    eax,0xc002bd80
c0017ef9:	80 fa 2d             	cmp    dl,0x2d
c0017efc:	0f 84 ed 00 00 00    	je     c0017fef <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f02:	b8 50 bd 02 c0       	mov    eax,0xc002bd50
c0017f07:	80 fa 2e             	cmp    dl,0x2e
c0017f0a:	0f 84 df 00 00 00    	je     c0017fef <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f10:	b8 70 bd 02 c0       	mov    eax,0xc002bd70
c0017f15:	80 fa 2f             	cmp    dl,0x2f
c0017f18:	0f 84 d1 00 00 00    	je     c0017fef <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f1e:	8d 4a cb             	lea    ecx,[edx-0x35]
c0017f21:	b8 60 bd 02 c0       	mov    eax,0xc002bd60
c0017f26:	80 f9 01             	cmp    cl,0x1
c0017f29:	0f 86 c0 00 00 00    	jbe    c0017fef <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f2f:	b8 90 bd 02 c0       	mov    eax,0xc002bd90
c0017f34:	80 fa 37             	cmp    dl,0x37
c0017f37:	0f 84 b2 00 00 00    	je     c0017fef <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f3d:	b8 a0 bd 02 c0       	mov    eax,0xc002bda0
c0017f42:	80 fa 3a             	cmp    dl,0x3a
c0017f45:	0f 84 a4 00 00 00    	je     c0017fef <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f4b:	b8 b0 bd 02 c0       	mov    eax,0xc002bdb0
c0017f50:	80 fa 3c             	cmp    dl,0x3c
c0017f53:	0f 84 96 00 00 00    	je     c0017fef <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f59:	b8 c0 bd 02 c0       	mov    eax,0xc002bdc0
c0017f5e:	80 fa 3d             	cmp    dl,0x3d
c0017f61:	0f 84 88 00 00 00    	je     c0017fef <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f67:	b8 a0 bd 02 c0       	mov    eax,0xc002bda0
c0017f6c:	80 fa 3e             	cmp    dl,0x3e
c0017f6f:	74 7e                	je     c0017fef <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f71:	8d 42 bb             	lea    eax,[edx-0x45]
c0017f74:	3c 01                	cmp    al,0x1
c0017f76:	76 72                	jbe    c0017fea <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0017f78:	80 fa 3f             	cmp    dl,0x3f
c0017f7b:	74 6d                	je     c0017fea <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0017f7d:	80 fa 4a             	cmp    dl,0x4a
c0017f80:	74 0a                	je     c0017f8c <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0017f82:	b8 fe a0 02 c0       	mov    eax,0xc002a0fe
c0017f87:	80 fa 4d             	cmp    dl,0x4d
c0017f8a:	75 63                	jne    c0017fef <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f8c:	b8 90 bd 02 c0       	mov    eax,0xc002bd90
c0017f91:	c3                   	ret    
c0017f92:	b8 fe a0 02 c0       	mov    eax,0xc002a0fe
c0017f97:	80 f9 0b             	cmp    cl,0xb
c0017f9a:	75 0a                	jne    c0017fa6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0017f9c:	fe ca                	dec    dl
c0017f9e:	75 4f                	jne    c0017fef <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017fa0:	b8 d0 bd 02 c0       	mov    eax,0xc002bdd0
c0017fa5:	c3                   	ret    
c0017fa6:	80 f9 0f             	cmp    cl,0xf
c0017fa9:	75 44                	jne    c0017fef <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017fab:	b8 e0 bd 02 c0       	mov    eax,0xc002bde0
c0017fb0:	80 fa 02             	cmp    dl,0x2
c0017fb3:	76 3a                	jbe    c0017fef <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017fb5:	8d 42 fd             	lea    eax,[edx-0x3]
c0017fb8:	3c 01                	cmp    al,0x1
c0017fba:	76 0a                	jbe    c0017fc6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0017fbc:	b8 fe a0 02 c0       	mov    eax,0xc002a0fe
c0017fc1:	80 fa 06             	cmp    dl,0x6
c0017fc4:	75 29                	jne    c0017fef <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017fc6:	b8 f0 bd 02 c0       	mov    eax,0xc002bdf0
c0017fcb:	c3                   	ret    
c0017fcc:	b8 d0 bc 02 c0       	mov    eax,0xc002bcd0
c0017fd1:	c3                   	ret    
c0017fd2:	b8 00 bd 02 c0       	mov    eax,0xc002bd00
c0017fd7:	c3                   	ret    
c0017fd8:	b8 20 bd 02 c0       	mov    eax,0xc002bd20
c0017fdd:	c3                   	ret    
c0017fde:	b8 50 bd 02 c0       	mov    eax,0xc002bd50
c0017fe3:	c3                   	ret    
c0017fe4:	b8 60 bd 02 c0       	mov    eax,0xc002bd60
c0017fe9:	c3                   	ret    
c0017fea:	b8 b0 bd 02 c0       	mov    eax,0xc002bdb0
c0017fef:	c3                   	ret    

c0017ff0 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0017ff0:	60                   	pusha  
c0017ff1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017ff5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017ff9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017ffd:	9c                   	pushf  
c0017ffe:	fa                   	cli    
c0017fff:	0f 09                	wbinvd 
c0018001:	0f 30                	wrmsr  
c0018003:	9d                   	popf   
c0018004:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018008:	89 02                	mov    DWORD PTR [edx],eax
c001800a:	61                   	popa   
c001800b:	c3                   	ret    

c001800c <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c001800c:	60                   	pusha  
c001800d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018011:	9c                   	pushf  
c0018012:	fa                   	cli    
c0018013:	0f 09                	wbinvd 
c0018015:	31 c0                	xor    eax,eax
c0018017:	31 d2                	xor    edx,edx
c0018019:	0f 32                	rdmsr  
c001801b:	9d                   	popf   
c001801c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018020:	89 02                	mov    DWORD PTR [edx],eax
c0018022:	61                   	popa   
c0018023:	c3                   	ret    

c0018024 <CPU::AMD_K6_writeback(int, int, int)>:
c0018024:	56                   	push   esi
c0018025:	53                   	push   ebx
c0018026:	83 ec 10             	sub    esp,0x10
c0018029:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001802d:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018032:	75 5d                	jne    c0018091 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018034:	83 f8 08             	cmp    eax,0x8
c0018037:	75 09                	jne    c0018042 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018039:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c001803e:	7e 13                	jle    c0018053 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018040:	eb 30                	jmp    c0018072 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018042:	83 f8 06             	cmp    eax,0x6
c0018045:	7c 4a                	jl     c0018091 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018047:	83 f8 07             	cmp    eax,0x7
c001804a:	7e 07                	jle    c0018053 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001804c:	83 f8 09             	cmp    eax,0x9
c001804f:	74 21                	je     c0018072 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018051:	eb 3e                	jmp    c0018091 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018053:	89 e6                	mov    esi,esp
c0018055:	8b 1d 24 ca 02 c0    	mov    ebx,DWORD PTR ds:0xc002ca24
c001805b:	56                   	push   esi
c001805c:	c1 eb 15             	shr    ebx,0x15
c001805f:	68 82 00 00 c0       	push   0xc0000082
c0018064:	83 e3 7e             	and    ebx,0x7e
c0018067:	e8 a0 ff ff ff       	call   c001800c <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001806c:	56                   	push   esi
c001806d:	6a 00                	push   0x0
c001806f:	53                   	push   ebx
c0018070:	eb 12                	jmp    c0018084 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018072:	89 e3                	mov    ebx,esp
c0018074:	53                   	push   ebx
c0018075:	68 82 00 00 c0       	push   0xc0000082
c001807a:	e8 8d ff ff ff       	call   c001800c <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001807f:	53                   	push   ebx
c0018080:	6a 00                	push   0x0
c0018082:	6a 00                	push   0x0
c0018084:	68 82 00 00 c0       	push   0xc0000082
c0018089:	e8 62 ff ff ff       	call   c0017ff0 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c001808e:	83 c4 18             	add    esp,0x18
c0018091:	83 c4 10             	add    esp,0x10
c0018094:	5b                   	pop    ebx
c0018095:	5e                   	pop    esi
c0018096:	c3                   	ret    
c0018097:	90                   	nop

c0018098 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018098:	55                   	push   ebp
c0018099:	57                   	push   edi
c001809a:	56                   	push   esi
c001809b:	53                   	push   ebx
c001809c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00180a0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00180a4:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00180a8:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00180ac:	39 05 00 bf 02 c0    	cmp    DWORD PTR ds:0xc002bf00,eax
c00180b2:	75 23                	jne    c00180d7 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00180b4:	a1 0c d5 02 c0       	mov    eax,ds:0xc002d50c
c00180b9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00180bd:	89 06                	mov    DWORD PTR [esi],eax
c00180bf:	a1 08 d5 02 c0       	mov    eax,ds:0xc002d508
c00180c4:	89 07                	mov    DWORD PTR [edi],eax
c00180c6:	a1 04 d5 02 c0       	mov    eax,ds:0xc002d504
c00180cb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00180ce:	a1 00 d5 02 c0       	mov    eax,ds:0xc002d500
c00180d3:	89 02                	mov    DWORD PTR [edx],eax
c00180d5:	eb 3f                	jmp    c0018116 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c00180d7:	31 c9                	xor    ecx,ecx
c00180d9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00180dd:	0f a2                	cpuid  
c00180df:	89 06                	mov    DWORD PTR [esi],eax
c00180e1:	89 1f                	mov    DWORD PTR [edi],ebx
c00180e3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00180e7:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00180ea:	89 10                	mov    DWORD PTR [eax],edx
c00180ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00180f0:	a3 00 bf 02 c0       	mov    ds:0xc002bf00,eax
c00180f5:	8b 06                	mov    eax,DWORD PTR [esi]
c00180f7:	a3 0c d5 02 c0       	mov    ds:0xc002d50c,eax
c00180fc:	8b 07                	mov    eax,DWORD PTR [edi]
c00180fe:	a3 08 d5 02 c0       	mov    ds:0xc002d508,eax
c0018103:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018106:	a3 04 d5 02 c0       	mov    ds:0xc002d504,eax
c001810b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001810f:	8b 00                	mov    eax,DWORD PTR [eax]
c0018111:	a3 00 d5 02 c0       	mov    ds:0xc002d500,eax
c0018116:	5b                   	pop    ebx
c0018117:	5e                   	pop    esi
c0018118:	5f                   	pop    edi
c0018119:	5d                   	pop    ebp
c001811a:	c3                   	ret    
c001811b:	90                   	nop

c001811c <CPU::cpuidCheckEDX(unsigned int)>:
c001811c:	83 ec 10             	sub    esp,0x10
c001811f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018123:	50                   	push   eax
c0018124:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018128:	50                   	push   eax
c0018129:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001812d:	50                   	push   eax
c001812e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018132:	50                   	push   eax
c0018133:	6a 01                	push   0x1
c0018135:	e8 5e ff ff ff       	call   c0018098 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001813a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001813e:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018142:	0f 95 c0             	setne  al
c0018145:	83 c4 24             	add    esp,0x24
c0018148:	c3                   	ret    
c0018149:	90                   	nop

c001814a <CPU::cpuidCheckECX(unsigned int)>:
c001814a:	83 ec 10             	sub    esp,0x10
c001814d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018151:	50                   	push   eax
c0018152:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018156:	50                   	push   eax
c0018157:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001815b:	50                   	push   eax
c001815c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018160:	50                   	push   eax
c0018161:	6a 01                	push   0x1
c0018163:	e8 30 ff ff ff       	call   c0018098 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018168:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001816c:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018170:	0f 95 c0             	setne  al
c0018173:	83 c4 24             	add    esp,0x24
c0018176:	c3                   	ret    
c0018177:	90                   	nop

c0018178 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018178:	83 ec 10             	sub    esp,0x10
c001817b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001817f:	50                   	push   eax
c0018180:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018184:	50                   	push   eax
c0018185:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018189:	50                   	push   eax
c001818a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001818e:	50                   	push   eax
c001818f:	6a 07                	push   0x7
c0018191:	e8 02 ff ff ff       	call   c0018098 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018196:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001819a:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c001819e:	0f 95 c0             	setne  al
c00181a1:	83 c4 24             	add    esp,0x24
c00181a4:	c3                   	ret    
c00181a5:	90                   	nop

c00181a6 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c00181a6:	83 ec 10             	sub    esp,0x10
c00181a9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00181ad:	50                   	push   eax
c00181ae:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00181b2:	50                   	push   eax
c00181b3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00181b7:	50                   	push   eax
c00181b8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00181bc:	50                   	push   eax
c00181bd:	6a 07                	push   0x7
c00181bf:	e8 d4 fe ff ff       	call   c0018098 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00181c4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00181c8:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00181cc:	0f 95 c0             	setne  al
c00181cf:	83 c4 24             	add    esp,0x24
c00181d2:	c3                   	ret    
c00181d3:	90                   	nop

c00181d4 <CPU::CPU()>:
c00181d4:	83 ec 0c             	sub    esp,0xc
c00181d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181db:	83 ec 08             	sub    esp,0x8
c00181de:	68 fe a0 02 c0       	push   0xc002a0fe
c00181e3:	50                   	push   eax
c00181e4:	e8 6f bb ff ff       	call   c0013d58 <Device::Device(char const*)>
c00181e9:	83 c4 10             	add    esp,0x10
c00181ec:	ba d8 a1 02 c0       	mov    edx,0xc002a1d8
c00181f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181f5:	89 10                	mov    DWORD PTR [eax],edx
c00181f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181fb:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018205:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018209:	05 78 01 00 00       	add    eax,0x178
c001820e:	83 ec 0c             	sub    esp,0xc
c0018211:	50                   	push   eax
c0018212:	e8 d5 6a ff ff       	call   c000ecec <GDT::GDT()>
c0018217:	83 c4 10             	add    esp,0x10
c001821a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001821e:	05 7c 09 00 00       	add    eax,0x97c
c0018223:	83 ec 0c             	sub    esp,0xc
c0018226:	50                   	push   eax
c0018227:	e8 22 6d ff ff       	call   c000ef4e <IDT::IDT()>
c001822c:	83 c4 10             	add    esp,0x10
c001822f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018233:	05 7c 11 00 00       	add    eax,0x117c
c0018238:	83 ec 0c             	sub    esp,0xc
c001823b:	50                   	push   eax
c001823c:	e8 79 8e ff ff       	call   c00110ba <TSS::TSS()>
c0018241:	83 c4 10             	add    esp,0x10
c0018244:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018248:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c001824f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018253:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c001825d:	90                   	nop
c001825e:	83 c4 0c             	add    esp,0xc
c0018261:	c3                   	ret    

c0018262 <CPU::displayFeatures()>:
c0018262:	53                   	push   ebx
c0018263:	83 ec 10             	sub    esp,0x10
c0018266:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001826a:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0018270:	68 0c 9e 02 c0       	push   0xc0029e0c
c0018275:	e8 ff a4 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c001827a:	59                   	pop    ecx
c001827b:	58                   	pop    eax
c001827c:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0018282:	50                   	push   eax
c0018283:	68 1d 9e 02 c0       	push   0xc0029e1d
c0018288:	e8 ec a4 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c001828d:	58                   	pop    eax
c001828e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018294:	5a                   	pop    edx
c0018295:	c1 e8 0e             	shr    eax,0xe
c0018298:	0f b6 c0             	movzx  eax,al
c001829b:	50                   	push   eax
c001829c:	68 2e 9e 02 c0       	push   0xc0029e2e
c00182a1:	e8 d3 a4 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c00182a6:	59                   	pop    ecx
c00182a7:	58                   	pop    eax
c00182a8:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00182ae:	66 c1 e8 06          	shr    ax,0x6
c00182b2:	0f b6 c0             	movzx  eax,al
c00182b5:	50                   	push   eax
c00182b6:	68 3f 9e 02 c0       	push   0xc0029e3f
c00182bb:	e8 b9 a4 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c00182c0:	c7 04 24 db a2 02 c0 	mov    DWORD PTR [esp],0xc002a2db
c00182c7:	e8 ad a4 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c00182cc:	83 c4 10             	add    esp,0x10
c00182cf:	b8 dc 89 02 c0       	mov    eax,0xc00289dc
c00182d4:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c00182db:	74 05                	je     c00182e2 <CPU::displayFeatures()+0x80>
c00182dd:	b8 d8 89 02 c0       	mov    eax,0xc00289d8
c00182e2:	52                   	push   edx
c00182e3:	52                   	push   edx
c00182e4:	50                   	push   eax
c00182e5:	68 50 9e 02 c0       	push   0xc0029e50
c00182ea:	e8 8a a4 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c00182ef:	83 c4 10             	add    esp,0x10
c00182f2:	b8 d8 89 02 c0       	mov    eax,0xc00289d8
c00182f7:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c00182fe:	78 05                	js     c0018305 <CPU::displayFeatures()+0xa3>
c0018300:	b8 dc 89 02 c0       	mov    eax,0xc00289dc
c0018305:	51                   	push   ecx
c0018306:	51                   	push   ecx
c0018307:	50                   	push   eax
c0018308:	68 67 9e 02 c0       	push   0xc0029e67
c001830d:	e8 67 a4 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c0018312:	83 c4 10             	add    esp,0x10
c0018315:	b8 d8 89 02 c0       	mov    eax,0xc00289d8
c001831a:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0018321:	75 05                	jne    c0018328 <CPU::displayFeatures()+0xc6>
c0018323:	b8 dc 89 02 c0       	mov    eax,0xc00289dc
c0018328:	52                   	push   edx
c0018329:	52                   	push   edx
c001832a:	50                   	push   eax
c001832b:	68 7e 9e 02 c0       	push   0xc0029e7e
c0018330:	e8 44 a4 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c0018335:	83 c4 10             	add    esp,0x10
c0018338:	b8 d8 89 02 c0       	mov    eax,0xc00289d8
c001833d:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0018344:	75 05                	jne    c001834b <CPU::displayFeatures()+0xe9>
c0018346:	b8 dc 89 02 c0       	mov    eax,0xc00289dc
c001834b:	51                   	push   ecx
c001834c:	51                   	push   ecx
c001834d:	50                   	push   eax
c001834e:	68 95 9e 02 c0       	push   0xc0029e95
c0018353:	e8 21 a4 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c0018358:	83 c4 10             	add    esp,0x10
c001835b:	b8 d8 89 02 c0       	mov    eax,0xc00289d8
c0018360:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0018367:	75 05                	jne    c001836e <CPU::displayFeatures()+0x10c>
c0018369:	b8 dc 89 02 c0       	mov    eax,0xc00289dc
c001836e:	52                   	push   edx
c001836f:	52                   	push   edx
c0018370:	50                   	push   eax
c0018371:	68 ac 9e 02 c0       	push   0xc0029eac
c0018376:	e8 fe a3 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c001837b:	83 c4 10             	add    esp,0x10
c001837e:	b8 d8 89 02 c0       	mov    eax,0xc00289d8
c0018383:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c001838a:	75 05                	jne    c0018391 <CPU::displayFeatures()+0x12f>
c001838c:	b8 dc 89 02 c0       	mov    eax,0xc00289dc
c0018391:	51                   	push   ecx
c0018392:	51                   	push   ecx
c0018393:	50                   	push   eax
c0018394:	68 c3 9e 02 c0       	push   0xc0029ec3
c0018399:	e8 db a3 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c001839e:	83 c4 10             	add    esp,0x10
c00183a1:	b8 d8 89 02 c0       	mov    eax,0xc00289d8
c00183a6:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c00183ad:	75 05                	jne    c00183b4 <CPU::displayFeatures()+0x152>
c00183af:	b8 dc 89 02 c0       	mov    eax,0xc00289dc
c00183b4:	52                   	push   edx
c00183b5:	52                   	push   edx
c00183b6:	50                   	push   eax
c00183b7:	68 da 9e 02 c0       	push   0xc0029eda
c00183bc:	e8 b8 a3 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c00183c1:	83 c4 10             	add    esp,0x10
c00183c4:	b8 d8 89 02 c0       	mov    eax,0xc00289d8
c00183c9:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c00183d0:	75 05                	jne    c00183d7 <CPU::displayFeatures()+0x175>
c00183d2:	b8 dc 89 02 c0       	mov    eax,0xc00289dc
c00183d7:	51                   	push   ecx
c00183d8:	51                   	push   ecx
c00183d9:	50                   	push   eax
c00183da:	68 f1 9e 02 c0       	push   0xc0029ef1
c00183df:	e8 95 a3 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c00183e4:	83 c4 10             	add    esp,0x10
c00183e7:	b8 d8 89 02 c0       	mov    eax,0xc00289d8
c00183ec:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c00183f3:	75 05                	jne    c00183fa <CPU::displayFeatures()+0x198>
c00183f5:	b8 dc 89 02 c0       	mov    eax,0xc00289dc
c00183fa:	52                   	push   edx
c00183fb:	52                   	push   edx
c00183fc:	50                   	push   eax
c00183fd:	68 08 9f 02 c0       	push   0xc0029f08
c0018402:	e8 72 a3 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c0018407:	83 c4 10             	add    esp,0x10
c001840a:	b8 d8 89 02 c0       	mov    eax,0xc00289d8
c001840f:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0018416:	75 05                	jne    c001841d <CPU::displayFeatures()+0x1bb>
c0018418:	b8 dc 89 02 c0       	mov    eax,0xc00289dc
c001841d:	51                   	push   ecx
c001841e:	51                   	push   ecx
c001841f:	50                   	push   eax
c0018420:	68 1f 9f 02 c0       	push   0xc0029f1f
c0018425:	e8 4f a3 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c001842a:	83 c4 10             	add    esp,0x10
c001842d:	b8 d8 89 02 c0       	mov    eax,0xc00289d8
c0018432:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0018439:	75 05                	jne    c0018440 <CPU::displayFeatures()+0x1de>
c001843b:	b8 dc 89 02 c0       	mov    eax,0xc00289dc
c0018440:	52                   	push   edx
c0018441:	52                   	push   edx
c0018442:	50                   	push   eax
c0018443:	68 36 9f 02 c0       	push   0xc0029f36
c0018448:	e8 2c a3 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c001844d:	83 c4 10             	add    esp,0x10
c0018450:	b8 d8 89 02 c0       	mov    eax,0xc00289d8
c0018455:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c001845c:	75 05                	jne    c0018463 <CPU::displayFeatures()+0x201>
c001845e:	b8 dc 89 02 c0       	mov    eax,0xc00289dc
c0018463:	51                   	push   ecx
c0018464:	51                   	push   ecx
c0018465:	50                   	push   eax
c0018466:	68 4d 9f 02 c0       	push   0xc0029f4d
c001846b:	e8 09 a3 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c0018470:	83 c4 10             	add    esp,0x10
c0018473:	b8 d8 89 02 c0       	mov    eax,0xc00289d8
c0018478:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c001847f:	75 05                	jne    c0018486 <CPU::displayFeatures()+0x224>
c0018481:	b8 dc 89 02 c0       	mov    eax,0xc00289dc
c0018486:	52                   	push   edx
c0018487:	52                   	push   edx
c0018488:	50                   	push   eax
c0018489:	68 64 9f 02 c0       	push   0xc0029f64
c001848e:	e8 e6 a2 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c0018493:	83 c4 10             	add    esp,0x10
c0018496:	b8 d8 89 02 c0       	mov    eax,0xc00289d8
c001849b:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c00184a2:	78 05                	js     c00184a9 <CPU::displayFeatures()+0x247>
c00184a4:	b8 dc 89 02 c0       	mov    eax,0xc00289dc
c00184a9:	51                   	push   ecx
c00184aa:	51                   	push   ecx
c00184ab:	50                   	push   eax
c00184ac:	68 7b 9f 02 c0       	push   0xc0029f7b
c00184b1:	e8 c3 a2 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c00184b6:	83 c4 10             	add    esp,0x10
c00184b9:	b8 d8 89 02 c0       	mov    eax,0xc00289d8
c00184be:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c00184c5:	75 05                	jne    c00184cc <CPU::displayFeatures()+0x26a>
c00184c7:	b8 dc 89 02 c0       	mov    eax,0xc00289dc
c00184cc:	52                   	push   edx
c00184cd:	52                   	push   edx
c00184ce:	50                   	push   eax
c00184cf:	68 92 9f 02 c0       	push   0xc0029f92
c00184d4:	e8 a0 a2 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c00184d9:	83 c4 18             	add    esp,0x18
c00184dc:	5b                   	pop    ebx
c00184dd:	c3                   	ret    

c00184de <CPU::detectFeatures()>:
c00184de:	55                   	push   ebp
c00184df:	57                   	push   edi
c00184e0:	56                   	push   esi
c00184e1:	53                   	push   ebx
c00184e2:	83 ec 50             	sub    esp,0x50
c00184e5:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00184e9:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c00184f3:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c00184fa:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0018500:	6a 0d                	push   0xd
c0018502:	6a 00                	push   0x0
c0018504:	57                   	push   edi
c0018505:	e8 81 81 fe ff       	call   c000068b <memset>
c001850a:	83 c4 10             	add    esp,0x10
c001850d:	a1 e8 c9 02 c0       	mov    eax,ds:0xc002c9e8
c0018512:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0018519:	0f 84 20 09 00 00    	je     c0018e3f <CPU::detectFeatures()+0x961>
c001851f:	83 ec 0c             	sub    esp,0xc
c0018522:	6a 10                	push   0x10
c0018524:	e8 f3 fb ff ff       	call   c001811c <CPU::cpuidCheckEDX(unsigned int)>
c0018529:	83 e0 01             	and    eax,0x1
c001852c:	8d 14 00             	lea    edx,[eax+eax*1]
c001852f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018535:	83 e0 fd             	and    eax,0xfffffffd
c0018538:	09 d0                	or     eax,edx
c001853a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018540:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0018547:	e8 d0 fb ff ff       	call   c001811c <CPU::cpuidCheckEDX(unsigned int)>
c001854c:	83 e0 01             	and    eax,0x1
c001854f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018556:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001855c:	83 e0 fb             	and    eax,0xfffffffb
c001855f:	09 d0                	or     eax,edx
c0018561:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018567:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001856e:	e8 a9 fb ff ff       	call   c001811c <CPU::cpuidCheckEDX(unsigned int)>
c0018573:	83 e0 01             	and    eax,0x1
c0018576:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001857d:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018583:	83 e0 f7             	and    eax,0xfffffff7
c0018586:	09 d0                	or     eax,edx
c0018588:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001858e:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0018595:	e8 82 fb ff ff       	call   c001811c <CPU::cpuidCheckEDX(unsigned int)>
c001859a:	83 e0 01             	and    eax,0x1
c001859d:	c1 e0 04             	shl    eax,0x4
c00185a0:	88 c2                	mov    dl,al
c00185a2:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00185a8:	83 e0 ef             	and    eax,0xffffffef
c00185ab:	09 d0                	or     eax,edx
c00185ad:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00185b3:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c00185ba:	e8 5d fb ff ff       	call   c001811c <CPU::cpuidCheckEDX(unsigned int)>
c00185bf:	83 e0 01             	and    eax,0x1
c00185c2:	c1 e0 05             	shl    eax,0x5
c00185c5:	88 c2                	mov    dl,al
c00185c7:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00185cd:	83 e0 df             	and    eax,0xffffffdf
c00185d0:	09 d0                	or     eax,edx
c00185d2:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00185d8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00185df:	e8 38 fb ff ff       	call   c001811c <CPU::cpuidCheckEDX(unsigned int)>
c00185e4:	83 e0 01             	and    eax,0x1
c00185e7:	8d 14 00             	lea    edx,[eax+eax*1]
c00185ea:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00185f0:	83 e0 fd             	and    eax,0xfffffffd
c00185f3:	09 d0                	or     eax,edx
c00185f5:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00185fb:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0018602:	e8 15 fb ff ff       	call   c001811c <CPU::cpuidCheckEDX(unsigned int)>
c0018607:	83 e0 01             	and    eax,0x1
c001860a:	c1 e0 06             	shl    eax,0x6
c001860d:	88 c2                	mov    dl,al
c001860f:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018615:	83 e0 bf             	and    eax,0xffffffbf
c0018618:	09 d0                	or     eax,edx
c001861a:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018620:	58                   	pop    eax
c0018621:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018625:	56                   	push   esi
c0018626:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001862a:	55                   	push   ebp
c001862b:	8d 44 24 28          	lea    eax,[esp+0x28]
c001862f:	50                   	push   eax
c0018630:	8d 54 24 28          	lea    edx,[esp+0x28]
c0018634:	52                   	push   edx
c0018635:	6a 00                	push   0x0
c0018637:	e8 5c fa ff ff       	call   c0018098 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001863c:	83 c4 1c             	add    esp,0x1c
c001863f:	6a 04                	push   0x4
c0018641:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018645:	50                   	push   eax
c0018646:	57                   	push   edi
c0018647:	e8 09 80 fe ff       	call   c0000655 <memcpy>
c001864c:	83 c4 0c             	add    esp,0xc
c001864f:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0018655:	6a 04                	push   0x4
c0018657:	56                   	push   esi
c0018658:	50                   	push   eax
c0018659:	e8 f7 7f fe ff       	call   c0000655 <memcpy>
c001865e:	83 c4 0c             	add    esp,0xc
c0018661:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c0018667:	6a 04                	push   0x4
c0018669:	55                   	push   ebp
c001866a:	50                   	push   eax
c001866b:	e8 e5 7f fe ff       	call   c0000655 <memcpy>
c0018670:	58                   	pop    eax
c0018671:	5a                   	pop    edx
c0018672:	68 a9 9f 02 c0       	push   0xc0029fa9
c0018677:	57                   	push   edi
c0018678:	e8 fe 80 fe ff       	call   c000077b <strcmp>
c001867d:	83 c4 10             	add    esp,0x10
c0018680:	85 c0                	test   eax,eax
c0018682:	75 0f                	jne    c0018693 <CPU::detectFeatures()+0x1b5>
c0018684:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c001868e:	e9 22 02 00 00       	jmp    c00188b5 <CPU::detectFeatures()+0x3d7>
c0018693:	50                   	push   eax
c0018694:	50                   	push   eax
c0018695:	68 b6 9f 02 c0       	push   0xc0029fb6
c001869a:	57                   	push   edi
c001869b:	e8 db 80 fe ff       	call   c000077b <strcmp>
c00186a0:	83 c4 10             	add    esp,0x10
c00186a3:	85 c0                	test   eax,eax
c00186a5:	74 dd                	je     c0018684 <CPU::detectFeatures()+0x1a6>
c00186a7:	51                   	push   ecx
c00186a8:	51                   	push   ecx
c00186a9:	68 c3 9f 02 c0       	push   0xc0029fc3
c00186ae:	57                   	push   edi
c00186af:	e8 c7 80 fe ff       	call   c000077b <strcmp>
c00186b4:	83 c4 10             	add    esp,0x10
c00186b7:	85 c0                	test   eax,eax
c00186b9:	74 2a                	je     c00186e5 <CPU::detectFeatures()+0x207>
c00186bb:	52                   	push   edx
c00186bc:	52                   	push   edx
c00186bd:	68 d0 9f 02 c0       	push   0xc0029fd0
c00186c2:	57                   	push   edi
c00186c3:	e8 b3 80 fe ff       	call   c000077b <strcmp>
c00186c8:	83 c4 10             	add    esp,0x10
c00186cb:	85 c0                	test   eax,eax
c00186cd:	74 16                	je     c00186e5 <CPU::detectFeatures()+0x207>
c00186cf:	50                   	push   eax
c00186d0:	50                   	push   eax
c00186d1:	68 dd 9f 02 c0       	push   0xc0029fdd
c00186d6:	57                   	push   edi
c00186d7:	e8 9f 80 fe ff       	call   c000077b <strcmp>
c00186dc:	83 c4 10             	add    esp,0x10
c00186df:	85 c0                	test   eax,eax
c00186e1:	74 48                	je     c001872b <CPU::detectFeatures()+0x24d>
c00186e3:	eb 0f                	jmp    c00186f4 <CPU::detectFeatures()+0x216>
c00186e5:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c00186ef:	e9 c1 01 00 00       	jmp    c00188b5 <CPU::detectFeatures()+0x3d7>
c00186f4:	50                   	push   eax
c00186f5:	50                   	push   eax
c00186f6:	68 ea 9f 02 c0       	push   0xc0029fea
c00186fb:	57                   	push   edi
c00186fc:	e8 7a 80 fe ff       	call   c000077b <strcmp>
c0018701:	83 c4 10             	add    esp,0x10
c0018704:	85 c0                	test   eax,eax
c0018706:	74 23                	je     c001872b <CPU::detectFeatures()+0x24d>
c0018708:	50                   	push   eax
c0018709:	50                   	push   eax
c001870a:	68 f7 9f 02 c0       	push   0xc0029ff7
c001870f:	57                   	push   edi
c0018710:	e8 66 80 fe ff       	call   c000077b <strcmp>
c0018715:	83 c4 10             	add    esp,0x10
c0018718:	85 c0                	test   eax,eax
c001871a:	75 1e                	jne    c001873a <CPU::detectFeatures()+0x25c>
c001871c:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0018726:	e9 8a 01 00 00       	jmp    c00188b5 <CPU::detectFeatures()+0x3d7>
c001872b:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0018735:	e9 7b 01 00 00       	jmp    c00188b5 <CPU::detectFeatures()+0x3d7>
c001873a:	50                   	push   eax
c001873b:	50                   	push   eax
c001873c:	68 04 a0 02 c0       	push   0xc002a004
c0018741:	57                   	push   edi
c0018742:	e8 34 80 fe ff       	call   c000077b <strcmp>
c0018747:	83 c4 10             	add    esp,0x10
c001874a:	85 c0                	test   eax,eax
c001874c:	75 0f                	jne    c001875d <CPU::detectFeatures()+0x27f>
c001874e:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0018758:	e9 58 01 00 00       	jmp    c00188b5 <CPU::detectFeatures()+0x3d7>
c001875d:	50                   	push   eax
c001875e:	50                   	push   eax
c001875f:	68 c3 9f 02 c0       	push   0xc0029fc3
c0018764:	57                   	push   edi
c0018765:	e8 11 80 fe ff       	call   c000077b <strcmp>
c001876a:	83 c4 10             	add    esp,0x10
c001876d:	85 c0                	test   eax,eax
c001876f:	75 0f                	jne    c0018780 <CPU::detectFeatures()+0x2a2>
c0018771:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c001877b:	e9 35 01 00 00       	jmp    c00188b5 <CPU::detectFeatures()+0x3d7>
c0018780:	50                   	push   eax
c0018781:	50                   	push   eax
c0018782:	68 11 a0 02 c0       	push   0xc002a011
c0018787:	57                   	push   edi
c0018788:	e8 ee 7f fe ff       	call   c000077b <strcmp>
c001878d:	83 c4 10             	add    esp,0x10
c0018790:	85 c0                	test   eax,eax
c0018792:	75 0f                	jne    c00187a3 <CPU::detectFeatures()+0x2c5>
c0018794:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c001879e:	e9 12 01 00 00       	jmp    c00188b5 <CPU::detectFeatures()+0x3d7>
c00187a3:	51                   	push   ecx
c00187a4:	51                   	push   ecx
c00187a5:	68 1e a0 02 c0       	push   0xc002a01e
c00187aa:	57                   	push   edi
c00187ab:	e8 cb 7f fe ff       	call   c000077b <strcmp>
c00187b0:	83 c4 10             	add    esp,0x10
c00187b3:	85 c0                	test   eax,eax
c00187b5:	75 0f                	jne    c00187c6 <CPU::detectFeatures()+0x2e8>
c00187b7:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c00187c1:	e9 ef 00 00 00       	jmp    c00188b5 <CPU::detectFeatures()+0x3d7>
c00187c6:	52                   	push   edx
c00187c7:	52                   	push   edx
c00187c8:	68 2b a0 02 c0       	push   0xc002a02b
c00187cd:	57                   	push   edi
c00187ce:	e8 a8 7f fe ff       	call   c000077b <strcmp>
c00187d3:	83 c4 10             	add    esp,0x10
c00187d6:	85 c0                	test   eax,eax
c00187d8:	75 0f                	jne    c00187e9 <CPU::detectFeatures()+0x30b>
c00187da:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c00187e4:	e9 cc 00 00 00       	jmp    c00188b5 <CPU::detectFeatures()+0x3d7>
c00187e9:	50                   	push   eax
c00187ea:	50                   	push   eax
c00187eb:	68 38 a0 02 c0       	push   0xc002a038
c00187f0:	57                   	push   edi
c00187f1:	e8 85 7f fe ff       	call   c000077b <strcmp>
c00187f6:	83 c4 10             	add    esp,0x10
c00187f9:	85 c0                	test   eax,eax
c00187fb:	75 0f                	jne    c001880c <CPU::detectFeatures()+0x32e>
c00187fd:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0018807:	e9 a9 00 00 00       	jmp    c00188b5 <CPU::detectFeatures()+0x3d7>
c001880c:	50                   	push   eax
c001880d:	50                   	push   eax
c001880e:	68 45 a0 02 c0       	push   0xc002a045
c0018813:	57                   	push   edi
c0018814:	e8 62 7f fe ff       	call   c000077b <strcmp>
c0018819:	83 c4 10             	add    esp,0x10
c001881c:	85 c0                	test   eax,eax
c001881e:	75 0f                	jne    c001882f <CPU::detectFeatures()+0x351>
c0018820:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c001882a:	e9 86 00 00 00       	jmp    c00188b5 <CPU::detectFeatures()+0x3d7>
c001882f:	50                   	push   eax
c0018830:	50                   	push   eax
c0018831:	68 52 a0 02 c0       	push   0xc002a052
c0018836:	57                   	push   edi
c0018837:	e8 3f 7f fe ff       	call   c000077b <strcmp>
c001883c:	83 c4 10             	add    esp,0x10
c001883f:	85 c0                	test   eax,eax
c0018841:	75 0c                	jne    c001884f <CPU::detectFeatures()+0x371>
c0018843:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c001884d:	eb 66                	jmp    c00188b5 <CPU::detectFeatures()+0x3d7>
c001884f:	50                   	push   eax
c0018850:	50                   	push   eax
c0018851:	68 5f a0 02 c0       	push   0xc002a05f
c0018856:	57                   	push   edi
c0018857:	e8 1f 7f fe ff       	call   c000077b <strcmp>
c001885c:	83 c4 10             	add    esp,0x10
c001885f:	85 c0                	test   eax,eax
c0018861:	75 0c                	jne    c001886f <CPU::detectFeatures()+0x391>
c0018863:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c001886d:	eb 46                	jmp    c00188b5 <CPU::detectFeatures()+0x3d7>
c001886f:	50                   	push   eax
c0018870:	50                   	push   eax
c0018871:	68 6c a0 02 c0       	push   0xc002a06c
c0018876:	57                   	push   edi
c0018877:	e8 ff 7e fe ff       	call   c000077b <strcmp>
c001887c:	83 c4 10             	add    esp,0x10
c001887f:	85 c0                	test   eax,eax
c0018881:	74 e0                	je     c0018863 <CPU::detectFeatures()+0x385>
c0018883:	50                   	push   eax
c0018884:	50                   	push   eax
c0018885:	68 79 a0 02 c0       	push   0xc002a079
c001888a:	57                   	push   edi
c001888b:	e8 eb 7e fe ff       	call   c000077b <strcmp>
c0018890:	83 c4 10             	add    esp,0x10
c0018893:	85 c0                	test   eax,eax
c0018895:	74 cc                	je     c0018863 <CPU::detectFeatures()+0x385>
c0018897:	51                   	push   ecx
c0018898:	51                   	push   ecx
c0018899:	68 86 a0 02 c0       	push   0xc002a086
c001889e:	57                   	push   edi
c001889f:	e8 d7 7e fe ff       	call   c000077b <strcmp>
c00188a4:	83 c4 10             	add    esp,0x10
c00188a7:	85 c0                	test   eax,eax
c00188a9:	74 b8                	je     c0018863 <CPU::detectFeatures()+0x385>
c00188ab:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00188b5:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00188ba:	0f 86 be 00 00 00    	jbe    c001897e <CPU::detectFeatures()+0x4a0>
c00188c0:	83 ec 0c             	sub    esp,0xc
c00188c3:	68 80 00 00 00       	push   0x80
c00188c8:	e8 ab f8 ff ff       	call   c0018178 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00188cd:	83 e0 01             	and    eax,0x1
c00188d0:	c1 e0 06             	shl    eax,0x6
c00188d3:	88 c2                	mov    dl,al
c00188d5:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00188db:	83 e0 bf             	and    eax,0xffffffbf
c00188de:	09 d0                	or     eax,edx
c00188e0:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00188e6:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c00188ed:	e8 86 f8 ff ff       	call   c0018178 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00188f2:	83 e0 01             	and    eax,0x1
c00188f5:	c1 e0 04             	shl    eax,0x4
c00188f8:	88 c2                	mov    dl,al
c00188fa:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018900:	83 e0 ef             	and    eax,0xffffffef
c0018903:	09 d0                	or     eax,edx
c0018905:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001890b:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0018912:	e8 61 f8 ff ff       	call   c0018178 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018917:	c1 e0 07             	shl    eax,0x7
c001891a:	88 c2                	mov    dl,al
c001891c:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018922:	83 e0 7f             	and    eax,0x7f
c0018925:	09 d0                	or     eax,edx
c0018927:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001892d:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018934:	e8 6d f8 ff ff       	call   c00181a6 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018939:	83 e0 01             	and    eax,0x1
c001893c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018943:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018949:	83 e0 f7             	and    eax,0xfffffff7
c001894c:	09 d0                	or     eax,edx
c001894e:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018954:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001895b:	e8 46 f8 ff ff       	call   c00181a6 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018960:	83 c4 10             	add    esp,0x10
c0018963:	83 e0 01             	and    eax,0x1
c0018966:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001896d:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018973:	83 e0 fb             	and    eax,0xfffffffb
c0018976:	09 d0                	or     eax,edx
c0018978:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001897e:	83 ec 0c             	sub    esp,0xc
c0018981:	56                   	push   esi
c0018982:	55                   	push   ebp
c0018983:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0018987:	57                   	push   edi
c0018988:	8d 44 24 28          	lea    eax,[esp+0x28]
c001898c:	50                   	push   eax
c001898d:	6a 01                	push   0x1
c001898f:	e8 04 f7 ff ff       	call   c0018098 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018994:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0018998:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001899e:	88 ca                	mov    dl,cl
c00189a0:	83 e0 f0             	and    eax,0xfffffff0
c00189a3:	83 e2 0f             	and    edx,0xf
c00189a6:	09 d0                	or     eax,edx
c00189a8:	88 ca                	mov    dl,cl
c00189aa:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c00189b0:	c0 ea 04             	shr    dl,0x4
c00189b3:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c00189b7:	0f b6 c2             	movzx  eax,dl
c00189ba:	83 c4 20             	add    esp,0x20
c00189bd:	c1 e0 06             	shl    eax,0x6
c00189c0:	89 c5                	mov    ebp,eax
c00189c2:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00189c8:	66 25 3f c0          	and    ax,0xc03f
c00189cc:	09 e8                	or     eax,ebp
c00189ce:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00189d5:	89 c8                	mov    eax,ecx
c00189d7:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c00189dd:	c1 e8 08             	shr    eax,0x8
c00189e0:	83 e2 3f             	and    edx,0x3f
c00189e3:	83 e0 0f             	and    eax,0xf
c00189e6:	89 c5                	mov    ebp,eax
c00189e8:	c1 e5 06             	shl    ebp,0x6
c00189eb:	09 d5                	or     ebp,edx
c00189ed:	89 ea                	mov    edx,ebp
c00189ef:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c00189f5:	88 c2                	mov    dl,al
c00189f7:	c0 ea 02             	shr    dl,0x2
c00189fa:	89 d5                	mov    ebp,edx
c00189fc:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0018a02:	83 e2 c0             	and    edx,0xffffffc0
c0018a05:	09 d5                	or     ebp,edx
c0018a07:	89 ea                	mov    edx,ebp
c0018a09:	89 cd                	mov    ebp,ecx
c0018a0b:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0018a11:	c1 ed 0c             	shr    ebp,0xc
c0018a14:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0018a1a:	83 e5 03             	and    ebp,0x3
c0018a1d:	83 e2 cf             	and    edx,0xffffffcf
c0018a20:	c1 e5 04             	shl    ebp,0x4
c0018a23:	09 d5                	or     ebp,edx
c0018a25:	3c 06                	cmp    al,0x6
c0018a27:	89 ea                	mov    edx,ebp
c0018a29:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0018a2f:	74 04                	je     c0018a35 <CPU::detectFeatures()+0x557>
c0018a31:	3c 0f                	cmp    al,0xf
c0018a33:	75 5c                	jne    c0018a91 <CPU::detectFeatures()+0x5b3>
c0018a35:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018a39:	89 cd                	mov    ebp,ecx
c0018a3b:	c1 ed 10             	shr    ebp,0x10
c0018a3e:	c1 e5 04             	shl    ebp,0x4
c0018a41:	09 ea                	or     edx,ebp
c0018a43:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0018a49:	0f b6 d2             	movzx  edx,dl
c0018a4c:	66 81 e5 3f c0       	and    bp,0xc03f
c0018a51:	c1 e2 06             	shl    edx,0x6
c0018a54:	09 ea                	or     edx,ebp
c0018a56:	3c 0f                	cmp    al,0xf
c0018a58:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0018a5f:	75 30                	jne    c0018a91 <CPU::detectFeatures()+0x5b3>
c0018a61:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0018a67:	c1 e9 14             	shr    ecx,0x14
c0018a6a:	83 e0 3f             	and    eax,0x3f
c0018a6d:	83 c1 0f             	add    ecx,0xf
c0018a70:	88 ca                	mov    dl,cl
c0018a72:	c0 e9 02             	shr    cl,0x2
c0018a75:	c1 e2 06             	shl    edx,0x6
c0018a78:	09 d0                	or     eax,edx
c0018a7a:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0018a80:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0018a86:	83 e0 c0             	and    eax,0xffffffc0
c0018a89:	09 c1                	or     ecx,eax
c0018a8b:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0018a91:	83 ec 0c             	sub    esp,0xc
c0018a94:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0018a9b:	56                   	push   esi
c0018a9c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018aa0:	50                   	push   eax
c0018aa1:	57                   	push   edi
c0018aa2:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0018aa6:	55                   	push   ebp
c0018aa7:	68 00 00 00 80       	push   0x80000000
c0018aac:	e8 e7 f5 ff ff       	call   c0018098 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018ab1:	83 c4 20             	add    esp,0x20
c0018ab4:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0018abc:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018ac0:	76 1e                	jbe    c0018ae0 <CPU::detectFeatures()+0x602>
c0018ac2:	83 ec 0c             	sub    esp,0xc
c0018ac5:	56                   	push   esi
c0018ac6:	50                   	push   eax
c0018ac7:	57                   	push   edi
c0018ac8:	55                   	push   ebp
c0018ac9:	68 01 00 00 80       	push   0x80000001
c0018ace:	e8 c5 f5 ff ff       	call   c0018098 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018ad3:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0018add:	83 c4 20             	add    esp,0x20
c0018ae0:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0018ae6:	83 f8 01             	cmp    eax,0x1
c0018ae9:	75 6f                	jne    c0018b5a <CPU::detectFeatures()+0x67c>
c0018aeb:	51                   	push   ecx
c0018aec:	51                   	push   ecx
c0018aed:	68 92 a0 02 c0       	push   0xc002a092
c0018af2:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018af6:	56                   	push   esi
c0018af7:	e8 2e 7c fe ff       	call   c000072a <strcpy>
c0018afc:	5f                   	pop    edi
c0018afd:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018b03:	5d                   	pop    ebp
c0018b04:	66 c1 e8 06          	shr    ax,0x6
c0018b08:	0f b6 c0             	movzx  eax,al
c0018b0b:	50                   	push   eax
c0018b0c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018b12:	c1 e8 0e             	shr    eax,0xe
c0018b15:	0f b6 c0             	movzx  eax,al
c0018b18:	50                   	push   eax
c0018b19:	e8 24 f2 ff ff       	call   c0017d42 <CPU::lookupIntelName(unsigned char, unsigned char)>
c0018b1e:	5a                   	pop    edx
c0018b1f:	59                   	pop    ecx
c0018b20:	50                   	push   eax
c0018b21:	56                   	push   esi
c0018b22:	e8 ba 7c fe ff       	call   c00007e1 <strcat>
c0018b27:	5f                   	pop    edi
c0018b28:	5d                   	pop    ebp
c0018b29:	56                   	push   esi
c0018b2a:	53                   	push   ebx
c0018b2b:	e8 1a b2 ff ff       	call   c0013d4a <Device::setName(char const*)>
c0018b30:	58                   	pop    eax
c0018b31:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0018b37:	5a                   	pop    edx
c0018b38:	68 99 a0 02 c0       	push   0xc002a099
c0018b3d:	50                   	push   eax
c0018b3e:	e8 38 7c fe ff       	call   c000077b <strcmp>
c0018b43:	83 c4 10             	add    esp,0x10
c0018b46:	85 c0                	test   eax,eax
c0018b48:	0f 85 71 03 00 00    	jne    c0018ebf <CPU::detectFeatures()+0x9e1>
c0018b4e:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0018b55:	e9 65 03 00 00       	jmp    c0018ebf <CPU::detectFeatures()+0x9e1>
c0018b5a:	83 f8 02             	cmp    eax,0x2
c0018b5d:	0f 85 b5 00 00 00    	jne    c0018c18 <CPU::detectFeatures()+0x73a>
c0018b63:	57                   	push   edi
c0018b64:	57                   	push   edi
c0018b65:	68 ab a0 02 c0       	push   0xc002a0ab
c0018b6a:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018b6e:	56                   	push   esi
c0018b6f:	e8 b6 7b fe ff       	call   c000072a <strcpy>
c0018b74:	5d                   	pop    ebp
c0018b75:	58                   	pop    eax
c0018b76:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018b7c:	66 c1 e8 06          	shr    ax,0x6
c0018b80:	0f b6 c0             	movzx  eax,al
c0018b83:	50                   	push   eax
c0018b84:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018b8a:	c1 e8 0e             	shr    eax,0xe
c0018b8d:	0f b6 c0             	movzx  eax,al
c0018b90:	50                   	push   eax
c0018b91:	e8 18 f0 ff ff       	call   c0017bae <CPU::lookupAMDName(unsigned char, unsigned char)>
c0018b96:	5a                   	pop    edx
c0018b97:	59                   	pop    ecx
c0018b98:	50                   	push   eax
c0018b99:	56                   	push   esi
c0018b9a:	e8 42 7c fe ff       	call   c00007e1 <strcat>
c0018b9f:	5f                   	pop    edi
c0018ba0:	5d                   	pop    ebp
c0018ba1:	56                   	push   esi
c0018ba2:	53                   	push   ebx
c0018ba3:	e8 a2 b1 ff ff       	call   c0013d4a <Device::setName(char const*)>
c0018ba8:	58                   	pop    eax
c0018ba9:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0018baf:	5a                   	pop    edx
c0018bb0:	68 b0 a0 02 c0       	push   0xc002a0b0
c0018bb5:	50                   	push   eax
c0018bb6:	e8 c0 7b fe ff       	call   c000077b <strcmp>
c0018bbb:	83 c4 10             	add    esp,0x10
c0018bbe:	85 c0                	test   eax,eax
c0018bc0:	75 20                	jne    c0018be2 <CPU::detectFeatures()+0x704>
c0018bc2:	8b 15 e8 c9 02 c0    	mov    edx,DWORD PTR ds:0xc002c9e8
c0018bc8:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0018bce:	a8 01                	test   al,0x1
c0018bd0:	74 10                	je     c0018be2 <CPU::detectFeatures()+0x704>
c0018bd2:	83 e0 fe             	and    eax,0xfffffffe
c0018bd5:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0018bdb:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0018be2:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018be8:	c1 e8 0e             	shr    eax,0xe
c0018beb:	3c 05                	cmp    al,0x5
c0018bed:	0f 85 cc 02 00 00    	jne    c0018ebf <CPU::detectFeatures()+0x9e1>
c0018bf3:	56                   	push   esi
c0018bf4:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0018bfa:	83 e0 0f             	and    eax,0xf
c0018bfd:	50                   	push   eax
c0018bfe:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018c04:	66 c1 e8 06          	shr    ax,0x6
c0018c08:	0f b6 c0             	movzx  eax,al
c0018c0b:	50                   	push   eax
c0018c0c:	6a 05                	push   0x5
c0018c0e:	e8 11 f4 ff ff       	call   c0018024 <CPU::AMD_K6_writeback(int, int, int)>
c0018c13:	e9 1f 02 00 00       	jmp    c0018e37 <CPU::detectFeatures()+0x959>
c0018c18:	8d 50 fd             	lea    edx,[eax-0x3]
c0018c1b:	83 fa 01             	cmp    edx,0x1
c0018c1e:	76 09                	jbe    c0018c29 <CPU::detectFeatures()+0x74b>
c0018c20:	83 f8 06             	cmp    eax,0x6
c0018c23:	0f 85 91 01 00 00    	jne    c0018dba <CPU::detectFeatures()+0x8dc>
c0018c29:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018c2f:	c1 ea 0e             	shr    edx,0xe
c0018c32:	80 fa 05             	cmp    dl,0x5
c0018c35:	75 7b                	jne    c0018cb2 <CPU::detectFeatures()+0x7d4>
c0018c37:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018c3d:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0018c42:	66 81 fa 00 01       	cmp    dx,0x100
c0018c47:	75 0c                	jne    c0018c55 <CPU::detectFeatures()+0x777>
c0018c49:	51                   	push   ecx
c0018c4a:	51                   	push   ecx
c0018c4b:	68 b7 a0 02 c0       	push   0xc002a0b7
c0018c50:	e9 dc 01 00 00       	jmp    c0018e31 <CPU::detectFeatures()+0x953>
c0018c55:	66 81 fa 00 02       	cmp    dx,0x200
c0018c5a:	75 0c                	jne    c0018c68 <CPU::detectFeatures()+0x78a>
c0018c5c:	52                   	push   edx
c0018c5d:	52                   	push   edx
c0018c5e:	68 ca a0 02 c0       	push   0xc002a0ca
c0018c63:	e9 c9 01 00 00       	jmp    c0018e31 <CPU::detectFeatures()+0x953>
c0018c68:	66 81 fa 40 02       	cmp    dx,0x240
c0018c6d:	75 0c                	jne    c0018c7b <CPU::detectFeatures()+0x79d>
c0018c6f:	50                   	push   eax
c0018c70:	50                   	push   eax
c0018c71:	68 dc a0 02 c0       	push   0xc002a0dc
c0018c76:	e9 b6 01 00 00       	jmp    c0018e31 <CPU::detectFeatures()+0x953>
c0018c7b:	83 f8 06             	cmp    eax,0x6
c0018c7e:	75 0c                	jne    c0018c8c <CPU::detectFeatures()+0x7ae>
c0018c80:	50                   	push   eax
c0018c81:	50                   	push   eax
c0018c82:	68 ee a0 02 c0       	push   0xc002a0ee
c0018c87:	e9 a5 01 00 00       	jmp    c0018e31 <CPU::detectFeatures()+0x953>
c0018c8c:	83 f8 04             	cmp    eax,0x4
c0018c8f:	75 0c                	jne    c0018c9d <CPU::detectFeatures()+0x7bf>
c0018c91:	50                   	push   eax
c0018c92:	50                   	push   eax
c0018c93:	68 fa a0 02 c0       	push   0xc002a0fa
c0018c98:	e9 94 01 00 00       	jmp    c0018e31 <CPU::detectFeatures()+0x953>
c0018c9d:	83 f8 03             	cmp    eax,0x3
c0018ca0:	0f 85 19 02 00 00    	jne    c0018ebf <CPU::detectFeatures()+0x9e1>
c0018ca6:	50                   	push   eax
c0018ca7:	50                   	push   eax
c0018ca8:	68 02 a1 02 c0       	push   0xc002a102
c0018cad:	e9 7f 01 00 00       	jmp    c0018e31 <CPU::detectFeatures()+0x953>
c0018cb2:	80 fa 06             	cmp    dl,0x6
c0018cb5:	0f 85 db 00 00 00    	jne    c0018d96 <CPU::detectFeatures()+0x8b8>
c0018cbb:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018cc1:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0018cc6:	66 81 fa 80 01       	cmp    dx,0x180
c0018ccb:	75 0c                	jne    c0018cd9 <CPU::detectFeatures()+0x7fb>
c0018ccd:	50                   	push   eax
c0018cce:	50                   	push   eax
c0018ccf:	68 0d a1 02 c0       	push   0xc002a10d
c0018cd4:	e9 58 01 00 00       	jmp    c0018e31 <CPU::detectFeatures()+0x953>
c0018cd9:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0018cdf:	66 f7 c1 80 ff       	test   cx,0xff80
c0018ce4:	75 0c                	jne    c0018cf2 <CPU::detectFeatures()+0x814>
c0018ce6:	50                   	push   eax
c0018ce7:	50                   	push   eax
c0018ce8:	68 1d a1 02 c0       	push   0xc002a11d
c0018ced:	e9 3f 01 00 00       	jmp    c0018e31 <CPU::detectFeatures()+0x953>
c0018cf2:	66 81 fa 40 02       	cmp    dx,0x240
c0018cf7:	75 0c                	jne    c0018d05 <CPU::detectFeatures()+0x827>
c0018cf9:	55                   	push   ebp
c0018cfa:	55                   	push   ebp
c0018cfb:	68 24 a1 02 c0       	push   0xc002a124
c0018d00:	e9 2c 01 00 00       	jmp    c0018e31 <CPU::detectFeatures()+0x953>
c0018d05:	66 81 fa 80 02       	cmp    dx,0x280
c0018d0a:	75 0c                	jne    c0018d18 <CPU::detectFeatures()+0x83a>
c0018d0c:	57                   	push   edi
c0018d0d:	57                   	push   edi
c0018d0e:	68 2d a1 02 c0       	push   0xc002a12d
c0018d13:	e9 19 01 00 00       	jmp    c0018e31 <CPU::detectFeatures()+0x953>
c0018d18:	66 81 fa 40 03       	cmp    dx,0x340
c0018d1d:	74 ed                	je     c0018d0c <CPU::detectFeatures()+0x82e>
c0018d1f:	66 81 fa c0 03       	cmp    dx,0x3c0
c0018d24:	75 0c                	jne    c0018d32 <CPU::detectFeatures()+0x854>
c0018d26:	56                   	push   esi
c0018d27:	56                   	push   esi
c0018d28:	68 34 a1 02 c0       	push   0xc002a134
c0018d2d:	e9 ff 00 00 00       	jmp    c0018e31 <CPU::detectFeatures()+0x953>
c0018d32:	83 f8 06             	cmp    eax,0x6
c0018d35:	0f 84 45 ff ff ff    	je     c0018c80 <CPU::detectFeatures()+0x7a2>
c0018d3b:	83 f8 04             	cmp    eax,0x4
c0018d3e:	0f 84 4d ff ff ff    	je     c0018c91 <CPU::detectFeatures()+0x7b3>
c0018d44:	83 f8 03             	cmp    eax,0x3
c0018d47:	0f 85 72 01 00 00    	jne    c0018ebf <CPU::detectFeatures()+0x9e1>
c0018d4d:	51                   	push   ecx
c0018d4e:	51                   	push   ecx
c0018d4f:	68 3d a1 02 c0       	push   0xc002a13d
c0018d54:	53                   	push   ebx
c0018d55:	e8 f0 af ff ff       	call   c0013d4a <Device::setName(char const*)>
c0018d5a:	b1 c1                	mov    cl,0xc1
c0018d5c:	88 c8                	mov    al,cl
c0018d5e:	e6 22                	out    0x22,al
c0018d60:	e4 23                	in     al,0x23
c0018d62:	88 c2                	mov    dl,al
c0018d64:	88 c8                	mov    al,cl
c0018d66:	e6 22                	out    0x22,al
c0018d68:	88 d0                	mov    al,dl
c0018d6a:	83 c8 10             	or     eax,0x10
c0018d6d:	e6 23                	out    0x23,al
c0018d6f:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0018d76:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0018d79:	89 d0                	mov    eax,edx
c0018d7b:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0018d81:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0018d85:	40                   	inc    eax
c0018d86:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0018d8c:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0018d91:	e9 a1 00 00 00       	jmp    c0018e37 <CPU::detectFeatures()+0x959>
c0018d96:	83 f8 06             	cmp    eax,0x6
c0018d99:	0f 84 e1 fe ff ff    	je     c0018c80 <CPU::detectFeatures()+0x7a2>
c0018d9f:	83 f8 04             	cmp    eax,0x4
c0018da2:	0f 84 e9 fe ff ff    	je     c0018c91 <CPU::detectFeatures()+0x7b3>
c0018da8:	83 f8 03             	cmp    eax,0x3
c0018dab:	0f 85 0e 01 00 00    	jne    c0018ebf <CPU::detectFeatures()+0x9e1>
c0018db1:	52                   	push   edx
c0018db2:	52                   	push   edx
c0018db3:	68 48 a1 02 c0       	push   0xc002a148
c0018db8:	eb 77                	jmp    c0018e31 <CPU::detectFeatures()+0x953>
c0018dba:	83 f8 07             	cmp    eax,0x7
c0018dbd:	75 09                	jne    c0018dc8 <CPU::detectFeatures()+0x8ea>
c0018dbf:	50                   	push   eax
c0018dc0:	50                   	push   eax
c0018dc1:	68 52 a1 02 c0       	push   0xc002a152
c0018dc6:	eb 69                	jmp    c0018e31 <CPU::detectFeatures()+0x953>
c0018dc8:	83 f8 0a             	cmp    eax,0xa
c0018dcb:	75 09                	jne    c0018dd6 <CPU::detectFeatures()+0x8f8>
c0018dcd:	50                   	push   eax
c0018dce:	50                   	push   eax
c0018dcf:	68 5d a1 02 c0       	push   0xc002a15d
c0018dd4:	eb 5b                	jmp    c0018e31 <CPU::detectFeatures()+0x953>
c0018dd6:	83 f8 0b             	cmp    eax,0xb
c0018dd9:	75 09                	jne    c0018de4 <CPU::detectFeatures()+0x906>
c0018ddb:	50                   	push   eax
c0018ddc:	50                   	push   eax
c0018ddd:	68 65 a1 02 c0       	push   0xc002a165
c0018de2:	eb 4d                	jmp    c0018e31 <CPU::detectFeatures()+0x953>
c0018de4:	83 f8 08             	cmp    eax,0x8
c0018de7:	75 09                	jne    c0018df2 <CPU::detectFeatures()+0x914>
c0018de9:	50                   	push   eax
c0018dea:	50                   	push   eax
c0018deb:	68 6e a1 02 c0       	push   0xc002a16e
c0018df0:	eb 3f                	jmp    c0018e31 <CPU::detectFeatures()+0x953>
c0018df2:	83 f8 09             	cmp    eax,0x9
c0018df5:	75 09                	jne    c0018e00 <CPU::detectFeatures()+0x922>
c0018df7:	50                   	push   eax
c0018df8:	50                   	push   eax
c0018df9:	68 76 a1 02 c0       	push   0xc002a176
c0018dfe:	eb 31                	jmp    c0018e31 <CPU::detectFeatures()+0x953>
c0018e00:	83 f8 05             	cmp    eax,0x5
c0018e03:	75 09                	jne    c0018e0e <CPU::detectFeatures()+0x930>
c0018e05:	50                   	push   eax
c0018e06:	50                   	push   eax
c0018e07:	68 7e a1 02 c0       	push   0xc002a17e
c0018e0c:	eb 23                	jmp    c0018e31 <CPU::detectFeatures()+0x953>
c0018e0e:	83 f8 0c             	cmp    eax,0xc
c0018e11:	75 09                	jne    c0018e1c <CPU::detectFeatures()+0x93e>
c0018e13:	55                   	push   ebp
c0018e14:	55                   	push   ebp
c0018e15:	68 8c a1 02 c0       	push   0xc002a18c
c0018e1a:	eb 15                	jmp    c0018e31 <CPU::detectFeatures()+0x953>
c0018e1c:	83 f8 0d             	cmp    eax,0xd
c0018e1f:	75 09                	jne    c0018e2a <CPU::detectFeatures()+0x94c>
c0018e21:	57                   	push   edi
c0018e22:	57                   	push   edi
c0018e23:	68 97 a1 02 c0       	push   0xc002a197
c0018e28:	eb 07                	jmp    c0018e31 <CPU::detectFeatures()+0x953>
c0018e2a:	56                   	push   esi
c0018e2b:	56                   	push   esi
c0018e2c:	68 ab a1 02 c0       	push   0xc002a1ab
c0018e31:	53                   	push   ebx
c0018e32:	e8 13 af ff ff       	call   c0013d4a <Device::setName(char const*)>
c0018e37:	83 c4 10             	add    esp,0x10
c0018e3a:	e9 80 00 00 00       	jmp    c0018ebf <CPU::detectFeatures()+0x9e1>
c0018e3f:	51                   	push   ecx
c0018e40:	51                   	push   ecx
c0018e41:	68 f7 9f 02 c0       	push   0xc0029ff7
c0018e46:	57                   	push   edi
c0018e47:	e8 de 78 fe ff       	call   c000072a <strcpy>
c0018e4c:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0018e56:	e8 08 74 fe ff       	call   c0000263 <is486>
c0018e5b:	83 c4 10             	add    esp,0x10
c0018e5e:	85 c0                	test   eax,eax
c0018e60:	74 2b                	je     c0018e8d <CPU::detectFeatures()+0x9af>
c0018e62:	52                   	push   edx
c0018e63:	52                   	push   edx
c0018e64:	68 b7 a1 02 c0       	push   0xc002a1b7
c0018e69:	53                   	push   ebx
c0018e6a:	e8 db ae ff ff       	call   c0013d4a <Device::setName(char const*)>
c0018e6f:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0018e76:	0f 20 c0             	mov    eax,cr0
c0018e79:	83 e0 14             	and    eax,0x14
c0018e7c:	83 c4 10             	add    esp,0x10
c0018e7f:	83 f8 04             	cmp    eax,0x4
c0018e82:	75 1f                	jne    c0018ea3 <CPU::detectFeatures()+0x9c5>
c0018e84:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0018e8b:	eb 32                	jmp    c0018ebf <CPU::detectFeatures()+0x9e1>
c0018e8d:	50                   	push   eax
c0018e8e:	50                   	push   eax
c0018e8f:	68 c2 a1 02 c0       	push   0xc002a1c2
c0018e94:	53                   	push   ebx
c0018e95:	e8 b0 ae ff ff       	call   c0013d4a <Device::setName(char const*)>
c0018e9a:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0018ea1:	eb d3                	jmp    c0018e76 <CPU::detectFeatures()+0x998>
c0018ea3:	e8 96 73 fe ff       	call   c000023e <hasLegacyFPU>
c0018ea8:	83 e0 01             	and    eax,0x1
c0018eab:	8d 14 00             	lea    edx,[eax+eax*1]
c0018eae:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018eb4:	83 e0 fd             	and    eax,0xfffffffd
c0018eb7:	09 d0                	or     eax,edx
c0018eb9:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018ebf:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0018ec6:	83 c4 4c             	add    esp,0x4c
c0018ec9:	5b                   	pop    ebx
c0018eca:	5e                   	pop    esi
c0018ecb:	5f                   	pop    edi
c0018ecc:	5d                   	pop    ebp
c0018ecd:	c3                   	ret    

c0018ece <CPU::setupSMEP()>:
c0018ece:	0f 20 e0             	mov    eax,cr4
c0018ed1:	0d 00 00 10 00       	or     eax,0x100000
c0018ed6:	0f 22 e0             	mov    cr4,eax
c0018ed9:	c3                   	ret    

c0018eda <CPU::setupUMIP()>:
c0018eda:	0f 20 e0             	mov    eax,cr4
c0018edd:	80 cc 08             	or     ah,0x8
c0018ee0:	0f 22 e0             	mov    cr4,eax
c0018ee3:	c3                   	ret    

c0018ee4 <CPU::setupTSC()>:
c0018ee4:	0f 20 e0             	mov    eax,cr4
c0018ee7:	83 c8 04             	or     eax,0x4
c0018eea:	0f 22 e0             	mov    cr4,eax
c0018eed:	c3                   	ret    

c0018eee <CPU::setupLargePages()>:
c0018eee:	0f 20 e0             	mov    eax,cr4
c0018ef1:	83 c8 10             	or     eax,0x10
c0018ef4:	0f 22 e0             	mov    cr4,eax
c0018ef7:	c3                   	ret    

c0018ef8 <CPU::setupPAT()>:
c0018ef8:	a1 e8 c9 02 c0       	mov    eax,ds:0xc002c9e8
c0018efd:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0018f04:	74 2c                	je     c0018f32 <CPU::setupPAT()+0x3a>
c0018f06:	53                   	push   ebx
c0018f07:	83 ec 10             	sub    esp,0x10
c0018f0a:	68 77 02 00 00       	push   0x277
c0018f0f:	50                   	push   eax
c0018f10:	e8 67 5b ff ff       	call   c000ea7c <Computer::rdmsr(unsigned int)>
c0018f15:	83 e2 f8             	and    edx,0xfffffff8
c0018f18:	83 ca 01             	or     edx,0x1
c0018f1b:	52                   	push   edx
c0018f1c:	50                   	push   eax
c0018f1d:	68 77 02 00 00       	push   0x277
c0018f22:	ff 35 e8 c9 02 c0    	push   DWORD PTR ds:0xc002c9e8
c0018f28:	e8 7b 5b ff ff       	call   c000eaa8 <Computer::wrmsr(unsigned int, unsigned long long)>
c0018f2d:	83 c4 28             	add    esp,0x28
c0018f30:	5b                   	pop    ebx
c0018f31:	c3                   	ret    
c0018f32:	c3                   	ret    
c0018f33:	90                   	nop

c0018f34 <CPU::setupMTRR()>:
c0018f34:	c3                   	ret    
c0018f35:	90                   	nop

c0018f36 <CPU::setupGlobalPages()>:
c0018f36:	0f 20 e0             	mov    eax,cr4
c0018f39:	0c 80                	or     al,0x80
c0018f3b:	0f 22 e0             	mov    cr4,eax
c0018f3e:	c3                   	ret    
c0018f3f:	90                   	nop

c0018f40 <CPU::allowUsermodeDataAccess()>:
c0018f40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018f44:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0018f4b:	74 03                	je     c0018f50 <CPU::allowUsermodeDataAccess()+0x10>
c0018f4d:	0f 01 cb             	stac   
c0018f50:	c3                   	ret    
c0018f51:	90                   	nop

c0018f52 <CPU::prohibitUsermodeDataAccess()>:
c0018f52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018f56:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0018f5d:	74 03                	je     c0018f62 <CPU::prohibitUsermodeDataAccess()+0x10>
c0018f5f:	0f 01 ca             	clac   
c0018f62:	c3                   	ret    
c0018f63:	90                   	nop

c0018f64 <CPU::setupSMAP()>:
c0018f64:	0f 20 e0             	mov    eax,cr4
c0018f67:	0d 00 00 20 00       	or     eax,0x200000
c0018f6c:	0f 22 e0             	mov    cr4,eax
c0018f6f:	eb e1                	jmp    c0018f52 <CPU::prohibitUsermodeDataAccess()>
c0018f71:	90                   	nop

c0018f72 <CPU::setupFeatures()>:
c0018f72:	83 ec 0c             	sub    esp,0xc
c0018f75:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018f79:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0018f80:	74 07                	je     c0018f89 <CPU::setupFeatures()+0x17>
c0018f82:	52                   	push   edx
c0018f83:	e8 46 ff ff ff       	call   c0018ece <CPU::setupSMEP()>
c0018f88:	58                   	pop    eax
c0018f89:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0018f90:	74 07                	je     c0018f99 <CPU::setupFeatures()+0x27>
c0018f92:	52                   	push   edx
c0018f93:	e8 cc ff ff ff       	call   c0018f64 <CPU::setupSMAP()>
c0018f98:	58                   	pop    eax
c0018f99:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0018fa0:	74 07                	je     c0018fa9 <CPU::setupFeatures()+0x37>
c0018fa2:	52                   	push   edx
c0018fa3:	e8 32 ff ff ff       	call   c0018eda <CPU::setupUMIP()>
c0018fa8:	58                   	pop    eax
c0018fa9:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0018fb0:	74 07                	je     c0018fb9 <CPU::setupFeatures()+0x47>
c0018fb2:	52                   	push   edx
c0018fb3:	e8 2c ff ff ff       	call   c0018ee4 <CPU::setupTSC()>
c0018fb8:	58                   	pop    eax
c0018fb9:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0018fc0:	74 07                	je     c0018fc9 <CPU::setupFeatures()+0x57>
c0018fc2:	52                   	push   edx
c0018fc3:	e8 26 ff ff ff       	call   c0018eee <CPU::setupLargePages()>
c0018fc8:	59                   	pop    ecx
c0018fc9:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0018fd0:	74 07                	je     c0018fd9 <CPU::setupFeatures()+0x67>
c0018fd2:	52                   	push   edx
c0018fd3:	e8 5e ff ff ff       	call   c0018f36 <CPU::setupGlobalPages()>
c0018fd8:	58                   	pop    eax
c0018fd9:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0018fe0:	74 0c                	je     c0018fee <CPU::setupFeatures()+0x7c>
c0018fe2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0018fe6:	83 c4 0c             	add    esp,0xc
c0018fe9:	e9 0a ff ff ff       	jmp    c0018ef8 <CPU::setupPAT()>
c0018fee:	83 c4 0c             	add    esp,0xc
c0018ff1:	c3                   	ret    

c0018ff2 <CPU::open(int, int, void*)>:
c0018ff2:	57                   	push   edi
c0018ff3:	56                   	push   esi
c0018ff4:	53                   	push   ebx
c0018ff5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018ff9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018ffd:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019003:	83 ec 0c             	sub    esp,0xc
c0019006:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c001900c:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019012:	50                   	push   eax
c0019013:	e8 50 5d ff ff       	call   c000ed68 <GDT::setup()>
c0019018:	83 c4 0c             	add    esp,0xc
c001901b:	6a 00                	push   0x0
c001901d:	68 ef be ad de       	push   0xdeadbeef
c0019022:	57                   	push   edi
c0019023:	e8 d2 80 ff ff       	call   c00110fa <TSS::setup(unsigned long, unsigned long)>
c0019028:	89 3c 24             	mov    DWORD PTR [esp],edi
c001902b:	e8 aa 80 ff ff       	call   c00110da <TSS::flush()>
c0019030:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019036:	89 04 24             	mov    DWORD PTR [esp],eax
c0019039:	e8 86 5f ff ff       	call   c000efc4 <IDT::setup()>
c001903e:	b8 00 04 00 00       	mov    eax,0x400
c0019043:	0f 23 f8             	mov    db7,eax
c0019046:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019050:	e8 f2 6a ff ff       	call   c000fb47 <Phys::allocatePage()>
c0019055:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001905b:	89 30                	mov    DWORD PTR [eax],esi
c001905d:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019063:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019066:	58                   	pop    eax
c0019067:	5a                   	pop    edx
c0019068:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001906e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019072:	e8 b5 90 ff ff       	call   c001212c <VAS::setCPUSpecific(unsigned long)>
c0019077:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001907a:	e8 5f f4 ff ff       	call   c00184de <CPU::detectFeatures()>
c001907f:	e8 aa bf ff ff       	call   c001502e <setupInterruptController()>
c0019084:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c001908a:	a1 00 ca 02 c0       	mov    eax,ds:0xc002ca00
c001908f:	83 e0 10             	and    eax,0x10
c0019092:	83 f8 01             	cmp    eax,0x1
c0019095:	19 c0                	sbb    eax,eax
c0019097:	83 e0 46             	and    eax,0x46
c001909a:	83 c0 1e             	add    eax,0x1e
c001909d:	89 04 24             	mov    DWORD PTR [esp],eax
c00190a0:	e8 41 d4 ff ff       	call   c00164e6 <setupTimer(int)>
c00190a5:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c00190ab:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00190ae:	e8 bf fe ff ff       	call   c0018f72 <CPU::setupFeatures()>
c00190b3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00190b6:	e8 a7 f1 ff ff       	call   c0018262 <CPU::displayFeatures()>
c00190bb:	83 c4 10             	add    esp,0x10
c00190be:	31 c0                	xor    eax,eax
c00190c0:	5b                   	pop    ebx
c00190c1:	5e                   	pop    esi
c00190c2:	5f                   	pop    edi
c00190c3:	c3                   	ret    

c00190c4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c00190c4:	57                   	push   edi
c00190c5:	56                   	push   esi
c00190c6:	53                   	push   ebx
c00190c7:	51                   	push   ecx
c00190c8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00190cc:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c00190cf:	0f 02 c0             	lar    eax,ax
c00190d2:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c00190d5:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00190d9:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c00190dc:	88 ca                	mov    dl,cl
c00190de:	c0 ea 06             	shr    dl,0x6
c00190e1:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c00190e5:	89 ca                	mov    edx,ecx
c00190e7:	66 c1 ea 03          	shr    dx,0x3
c00190eb:	83 e2 07             	and    edx,0x7
c00190ee:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c00190f3:	88 17                	mov    BYTE PTR [edi],dl
c00190f5:	0f 84 a6 01 00 00    	je     c00192a1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c00190fb:	83 e1 07             	and    ecx,0x7
c00190fe:	80 f9 04             	cmp    cl,0x4
c0019101:	0f 84 98 00 00 00    	je     c001919f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019107:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001910c:	0f 95 c0             	setne  al
c001910f:	80 f9 05             	cmp    cl,0x5
c0019112:	0f 95 c2             	setne  dl
c0019115:	08 c2                	or     dl,al
c0019117:	74 79                	je     c0019192 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019119:	84 c9                	test   cl,cl
c001911b:	75 05                	jne    c0019122 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c001911d:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019120:	eb 3c                	jmp    c001915e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019122:	80 f9 01             	cmp    cl,0x1
c0019125:	75 05                	jne    c001912c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019127:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001912a:	eb 32                	jmp    c001915e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001912c:	80 f9 02             	cmp    cl,0x2
c001912f:	75 05                	jne    c0019136 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019131:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019134:	eb 28                	jmp    c001915e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019136:	31 c0                	xor    eax,eax
c0019138:	80 f9 03             	cmp    cl,0x3
c001913b:	75 05                	jne    c0019142 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c001913d:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019140:	eb 1c                	jmp    c001915e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019142:	80 f9 05             	cmp    cl,0x5
c0019145:	75 05                	jne    c001914c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019147:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c001914a:	eb 12                	jmp    c001915e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001914c:	80 f9 06             	cmp    cl,0x6
c001914f:	75 05                	jne    c0019156 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019151:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019154:	eb 08                	jmp    c001915e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019156:	80 f9 07             	cmp    cl,0x7
c0019159:	75 03                	jne    c001915e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001915b:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001915e:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019163:	75 10                	jne    c0019175 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019165:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019169:	b9 03 00 00 00       	mov    ecx,0x3
c001916e:	01 d0                	add    eax,edx
c0019170:	e9 37 01 00 00       	jmp    c00192ac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019175:	b9 02 00 00 00       	mov    ecx,0x2
c001917a:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c001917f:	0f 85 27 01 00 00    	jne    c00192ac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019185:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019188:	b9 06 00 00 00       	mov    ecx,0x6
c001918d:	e9 1a 01 00 00       	jmp    c00192ac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019192:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019195:	b9 06 00 00 00       	mov    ecx,0x6
c001919a:	e9 0f 01 00 00       	jmp    c00192ae <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001919f:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c00191a2:	88 ca                	mov    dl,cl
c00191a4:	c0 ea 06             	shr    dl,0x6
c00191a7:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c00191ab:	89 ca                	mov    edx,ecx
c00191ad:	66 c1 ea 03          	shr    dx,0x3
c00191b1:	83 e2 07             	and    edx,0x7
c00191b4:	80 e1 07             	and    cl,0x7
c00191b7:	75 05                	jne    c00191be <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c00191b9:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c00191bc:	eb 4c                	jmp    c001920a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00191be:	80 f9 01             	cmp    cl,0x1
c00191c1:	75 05                	jne    c00191c8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c00191c3:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c00191c6:	eb 42                	jmp    c001920a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00191c8:	80 f9 02             	cmp    cl,0x2
c00191cb:	75 05                	jne    c00191d2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c00191cd:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00191d0:	eb 38                	jmp    c001920a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00191d2:	80 f9 03             	cmp    cl,0x3
c00191d5:	75 05                	jne    c00191dc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c00191d7:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c00191da:	eb 2e                	jmp    c001920a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00191dc:	80 f9 04             	cmp    cl,0x4
c00191df:	75 12                	jne    c00191f3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c00191e1:	f6 c4 60             	test   ah,0x60
c00191e4:	75 08                	jne    c00191ee <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c00191e6:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00191e9:	8d 78 14             	lea    edi,[eax+0x14]
c00191ec:	eb 1c                	jmp    c001920a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00191ee:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c00191f1:	eb 17                	jmp    c001920a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00191f3:	80 f9 05             	cmp    cl,0x5
c00191f6:	75 05                	jne    c00191fd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c00191f8:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00191fb:	eb 0d                	jmp    c001920a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00191fd:	80 f9 06             	cmp    cl,0x6
c0019200:	75 05                	jne    c0019207 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019202:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019205:	eb 03                	jmp    c001920a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019207:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001920a:	84 d2                	test   dl,dl
c001920c:	75 05                	jne    c0019213 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c001920e:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019211:	eb 3c                	jmp    c001924f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019213:	80 fa 01             	cmp    dl,0x1
c0019216:	75 05                	jne    c001921d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019218:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001921b:	eb 32                	jmp    c001924f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001921d:	80 fa 02             	cmp    dl,0x2
c0019220:	75 05                	jne    c0019227 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019222:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019225:	eb 28                	jmp    c001924f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019227:	80 fa 03             	cmp    dl,0x3
c001922a:	75 05                	jne    c0019231 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c001922c:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001922f:	eb 1e                	jmp    c001924f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019231:	31 c0                	xor    eax,eax
c0019233:	80 fa 04             	cmp    dl,0x4
c0019236:	74 17                	je     c001924f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019238:	80 fa 05             	cmp    dl,0x5
c001923b:	75 05                	jne    c0019242 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c001923d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019240:	eb 0d                	jmp    c001924f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019242:	80 fa 06             	cmp    dl,0x6
c0019245:	75 05                	jne    c001924c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019247:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001924a:	eb 03                	jmp    c001924f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001924c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001924f:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019254:	0f 94 c2             	sete   dl
c0019257:	80 f9 05             	cmp    cl,0x5
c001925a:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c001925e:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019263:	d3 e0                	shl    eax,cl
c0019265:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019269:	74 0a                	je     c0019275 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c001926b:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c001926e:	b9 07 00 00 00       	mov    ecx,0x7
c0019273:	eb 37                	jmp    c00192ac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019275:	01 f8                	add    eax,edi
c0019277:	b9 03 00 00 00       	mov    ecx,0x3
c001927c:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019281:	74 2b                	je     c00192ae <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019283:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019288:	75 0d                	jne    c0019297 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c001928a:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c001928e:	01 c8                	add    eax,ecx
c0019290:	b9 04 00 00 00       	mov    ecx,0x4
c0019295:	eb 17                	jmp    c00192ae <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019297:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c001929a:	b9 07 00 00 00       	mov    ecx,0x7
c001929f:	eb 0d                	jmp    c00192ae <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00192a1:	b9 02 00 00 00       	mov    ecx,0x2
c00192a6:	b2 01                	mov    dl,0x1
c00192a8:	31 c0                	xor    eax,eax
c00192aa:	eb 02                	jmp    c00192ae <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00192ac:	31 d2                	xor    edx,edx
c00192ae:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00192b2:	89 0b                	mov    DWORD PTR [ebx],ecx
c00192b4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00192b8:	88 11                	mov    BYTE PTR [ecx],dl
c00192ba:	5a                   	pop    edx
c00192bb:	5b                   	pop    ebx
c00192bc:	5e                   	pop    esi
c00192bd:	5f                   	pop    edi
c00192be:	c3                   	ret    
c00192bf:	90                   	nop

c00192c0 <EnvVarContainer::getEnv(char const*)>:
c00192c0:	57                   	push   edi
c00192c1:	56                   	push   esi
c00192c2:	53                   	push   ebx
c00192c3:	31 db                	xor    ebx,ebx
c00192c5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00192c9:	39 1e                	cmp    DWORD PTR [esi],ebx
c00192cb:	7e 2b                	jle    c00192f8 <EnvVarContainer::getEnv(char const*)+0x38>
c00192cd:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c00192d4:	50                   	push   eax
c00192d5:	50                   	push   eax
c00192d6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00192d9:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c00192dc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00192e0:	e8 96 74 fe ff       	call   c000077b <strcmp>
c00192e5:	83 c4 10             	add    esp,0x10
c00192e8:	85 c0                	test   eax,eax
c00192ea:	75 09                	jne    c00192f5 <EnvVarContainer::getEnv(char const*)+0x35>
c00192ec:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00192ef:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c00192f3:	eb 05                	jmp    c00192fa <EnvVarContainer::getEnv(char const*)+0x3a>
c00192f5:	43                   	inc    ebx
c00192f6:	eb d1                	jmp    c00192c9 <EnvVarContainer::getEnv(char const*)+0x9>
c00192f8:	31 c0                	xor    eax,eax
c00192fa:	5b                   	pop    ebx
c00192fb:	5e                   	pop    esi
c00192fc:	5f                   	pop    edi
c00192fd:	c3                   	ret    

c00192fe <EnvVarContainer::setEnv(char const*, char const*)>:
c00192fe:	57                   	push   edi
c00192ff:	56                   	push   esi
c0019300:	53                   	push   ebx
c0019301:	83 ec 1c             	sub    esp,0x1c
c0019304:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019308:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001930c:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019310:	57                   	push   edi
c0019311:	e8 92 73 fe ff       	call   c00006a8 <strlen>
c0019316:	40                   	inc    eax
c0019317:	89 04 24             	mov    DWORD PTR [esp],eax
c001931a:	e8 b5 61 ff ff       	call   c000f4d4 <malloc>
c001931f:	89 34 24             	mov    DWORD PTR [esp],esi
c0019322:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019326:	e8 7d 73 fe ff       	call   c00006a8 <strlen>
c001932b:	40                   	inc    eax
c001932c:	89 04 24             	mov    DWORD PTR [esp],eax
c001932f:	e8 a0 61 ff ff       	call   c000f4d4 <malloc>
c0019334:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019337:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001933b:	e8 68 73 fe ff       	call   c00006a8 <strlen>
c0019340:	83 c4 0c             	add    esp,0xc
c0019343:	40                   	inc    eax
c0019344:	50                   	push   eax
c0019345:	6a 00                	push   0x0
c0019347:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001934b:	e8 3b 73 fe ff       	call   c000068b <memset>
c0019350:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019353:	e8 50 73 fe ff       	call   c00006a8 <strlen>
c0019358:	83 c4 0c             	add    esp,0xc
c001935b:	40                   	inc    eax
c001935c:	50                   	push   eax
c001935d:	57                   	push   edi
c001935e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019362:	e8 ee 72 fe ff       	call   c0000655 <memcpy>
c0019367:	89 34 24             	mov    DWORD PTR [esp],esi
c001936a:	e8 39 73 fe ff       	call   c00006a8 <strlen>
c001936f:	83 c4 0c             	add    esp,0xc
c0019372:	40                   	inc    eax
c0019373:	50                   	push   eax
c0019374:	6a 00                	push   0x0
c0019376:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001937a:	e8 0c 73 fe ff       	call   c000068b <memset>
c001937f:	89 34 24             	mov    DWORD PTR [esp],esi
c0019382:	e8 21 73 fe ff       	call   c00006a8 <strlen>
c0019387:	83 c4 0c             	add    esp,0xc
c001938a:	40                   	inc    eax
c001938b:	50                   	push   eax
c001938c:	56                   	push   esi
c001938d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019391:	e8 bf 72 fe ff       	call   c0000655 <memcpy>
c0019396:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019398:	40                   	inc    eax
c0019399:	89 03                	mov    DWORD PTR [ebx],eax
c001939b:	c1 e0 03             	shl    eax,0x3
c001939e:	5a                   	pop    edx
c001939f:	59                   	pop    ecx
c00193a0:	50                   	push   eax
c00193a1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00193a4:	e8 17 61 ff ff       	call   c000f4c0 <realloc>
c00193a9:	83 c4 0c             	add    esp,0xc
c00193ac:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00193af:	6a 08                	push   0x8
c00193b1:	8d 54 24 10          	lea    edx,[esp+0x10]
c00193b5:	52                   	push   edx
c00193b6:	8b 13                	mov    edx,DWORD PTR [ebx]
c00193b8:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c00193bc:	50                   	push   eax
c00193bd:	e8 93 72 fe ff       	call   c0000655 <memcpy>
c00193c2:	83 c4 20             	add    esp,0x20
c00193c5:	5b                   	pop    ebx
c00193c6:	5e                   	pop    esi
c00193c7:	5f                   	pop    edi
c00193c8:	c3                   	ret    
c00193c9:	90                   	nop

c00193ca <EnvVarContainer::deleteEnv(char const*)>:
c00193ca:	c3                   	ret    
c00193cb:	90                   	nop

c00193cc <EnvVarContainer::loadFrom(char const*, char const*)>:
c00193cc:	55                   	push   ebp
c00193cd:	57                   	push   edi
c00193ce:	56                   	push   esi
c00193cf:	53                   	push   ebx
c00193d0:	81 ec 38 01 00 00    	sub    esp,0x138
c00193d6:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c00193dd:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c00193e4:	68 14 01 00 00       	push   0x114
c00193e9:	e8 e6 60 ff ff       	call   c000f4d4 <malloc>
c00193ee:	83 c4 0c             	add    esp,0xc
c00193f1:	89 c7                	mov    edi,eax
c00193f3:	ff 76 08             	push   DWORD PTR [esi+0x8]
c00193f6:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00193fd:	50                   	push   eax
c00193fe:	e8 a5 98 ff ff       	call   c0012ca8 <File::File(char const*, Process*)>
c0019403:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019406:	e8 6f 9b ff ff       	call   c0012f7a <File::exists()>
c001940b:	83 c4 10             	add    esp,0x10
c001940e:	84 c0                	test   al,al
c0019410:	75 31                	jne    c0019443 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0019412:	51                   	push   ecx
c0019413:	51                   	push   ecx
c0019414:	6a 12                	push   0x12
c0019416:	57                   	push   edi
c0019417:	e8 f0 98 ff ff       	call   c0012d0c <File::open(FileOpenMode)>
c001941c:	8b 07                	mov    eax,DWORD PTR [edi]
c001941e:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0019421:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0019424:	e8 7f 72 fe ff       	call   c00006a8 <strlen>
c0019429:	5a                   	pop    edx
c001942a:	31 d2                	xor    edx,edx
c001942c:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019430:	51                   	push   ecx
c0019431:	55                   	push   ebp
c0019432:	52                   	push   edx
c0019433:	50                   	push   eax
c0019434:	57                   	push   edi
c0019435:	ff d3                	call   ebx
c0019437:	83 c4 14             	add    esp,0x14
c001943a:	57                   	push   edi
c001943b:	e8 2a 99 ff ff       	call   c0012d6a <File::close()>
c0019440:	83 c4 10             	add    esp,0x10
c0019443:	31 db                	xor    ebx,ebx
c0019445:	50                   	push   eax
c0019446:	31 ed                	xor    ebp,ebp
c0019448:	68 00 01 00 00       	push   0x100
c001944d:	6a 00                	push   0x0
c001944f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019453:	50                   	push   eax
c0019454:	e8 32 72 fe ff       	call   c000068b <memset>
c0019459:	58                   	pop    eax
c001945a:	5a                   	pop    edx
c001945b:	6a 01                	push   0x1
c001945d:	57                   	push   edi
c001945e:	e8 a9 98 ff ff       	call   c0012d0c <File::open(FileOpenMode)>
c0019463:	83 c4 10             	add    esp,0x10
c0019466:	83 ec 0c             	sub    esp,0xc
c0019469:	8b 07                	mov    eax,DWORD PTR [edi]
c001946b:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001946f:	51                   	push   ecx
c0019470:	8d 54 24 23          	lea    edx,[esp+0x23]
c0019474:	52                   	push   edx
c0019475:	6a 00                	push   0x0
c0019477:	6a 01                	push   0x1
c0019479:	57                   	push   edi
c001947a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001947d:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0019481:	83 c4 20             	add    esp,0x20
c0019484:	3c 0d                	cmp    al,0xd
c0019486:	0f 84 12 01 00 00    	je     c001959e <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001948c:	85 db                	test   ebx,ebx
c001948e:	0f 84 fd 00 00 00    	je     c0019591 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c0019494:	3c 0a                	cmp    al,0xa
c0019496:	74 13                	je     c00194ab <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c0019498:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001949d:	74 0c                	je     c00194ab <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001949f:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c00194a5:	0f 8e e6 00 00 00    	jle    c0019591 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c00194ab:	83 ec 0c             	sub    esp,0xc
c00194ae:	8d 53 01             	lea    edx,[ebx+0x1]
c00194b1:	29 dd                	sub    ebp,ebx
c00194b3:	52                   	push   edx
c00194b4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00194b8:	e8 17 60 ff ff       	call   c000f4d4 <malloc>
c00194bd:	8d 4d 04             	lea    ecx,[ebp+0x4]
c00194c0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00194c4:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00194c7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00194cb:	e8 04 60 ff ff       	call   c000f4d4 <malloc>
c00194d0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00194d4:	83 c4 0c             	add    esp,0xc
c00194d7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00194db:	52                   	push   edx
c00194dc:	6a 00                	push   0x0
c00194de:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00194e2:	e8 a4 71 fe ff       	call   c000068b <memset>
c00194e7:	83 c4 0c             	add    esp,0xc
c00194ea:	53                   	push   ebx
c00194eb:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00194ef:	55                   	push   ebp
c00194f0:	01 eb                	add    ebx,ebp
c00194f2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00194f6:	e8 5a 71 fe ff       	call   c0000655 <memcpy>
c00194fb:	83 c4 0c             	add    esp,0xc
c00194fe:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019502:	51                   	push   ecx
c0019503:	6a 00                	push   0x0
c0019505:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019509:	e8 7d 71 fe ff       	call   c000068b <memset>
c001950e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019511:	e8 92 71 fe ff       	call   c00006a8 <strlen>
c0019516:	83 c4 0c             	add    esp,0xc
c0019519:	50                   	push   eax
c001951a:	53                   	push   ebx
c001951b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001951f:	e8 31 71 fe ff       	call   c0000655 <memcpy>
c0019524:	5b                   	pop    ebx
c0019525:	58                   	pop    eax
c0019526:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001952a:	68 fc a1 02 c0       	push   0xc002a1fc
c001952f:	e8 45 92 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c0019534:	8b 06                	mov    eax,DWORD PTR [esi]
c0019536:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0019539:	40                   	inc    eax
c001953a:	83 c4 10             	add    esp,0x10
c001953d:	89 06                	mov    DWORD PTR [esi],eax
c001953f:	85 d2                	test   edx,edx
c0019541:	75 0c                	jne    c001954f <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c0019543:	83 ec 0c             	sub    esp,0xc
c0019546:	6a 08                	push   0x8
c0019548:	e8 87 5f ff ff       	call   c000f4d4 <malloc>
c001954d:	eb 0c                	jmp    c001955b <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c001954f:	c1 e0 03             	shl    eax,0x3
c0019552:	51                   	push   ecx
c0019553:	51                   	push   ecx
c0019554:	50                   	push   eax
c0019555:	52                   	push   edx
c0019556:	e8 65 5f ff ff       	call   c000f4c0 <realloc>
c001955b:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c001955e:	83 c4 10             	add    esp,0x10
c0019561:	31 db                	xor    ebx,ebx
c0019563:	52                   	push   edx
c0019564:	6a 08                	push   0x8
c0019566:	8d 44 24 20          	lea    eax,[esp+0x20]
c001956a:	50                   	push   eax
c001956b:	8b 16                	mov    edx,DWORD PTR [esi]
c001956d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019570:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c0019574:	50                   	push   eax
c0019575:	e8 db 70 fe ff       	call   c0000655 <memcpy>
c001957a:	83 c4 0c             	add    esp,0xc
c001957d:	68 00 01 00 00       	push   0x100
c0019582:	6a 00                	push   0x0
c0019584:	55                   	push   ebp
c0019585:	31 ed                	xor    ebp,ebp
c0019587:	e8 ff 70 fe ff       	call   c000068b <memset>
c001958c:	83 c4 10             	add    esp,0x10
c001958f:	eb 0d                	jmp    c001959e <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c0019591:	3c 3d                	cmp    al,0x3d
c0019593:	74 07                	je     c001959c <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c0019595:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c0019599:	45                   	inc    ebp
c001959a:	eb 02                	jmp    c001959e <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001959c:	89 eb                	mov    ebx,ebp
c001959e:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00195a3:	0f 85 bd fe ff ff    	jne    c0019466 <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c00195a9:	50                   	push   eax
c00195aa:	50                   	push   eax
c00195ab:	ff 36                	push   DWORD PTR [esi]
c00195ad:	68 0a a2 02 c0       	push   0xc002a20a
c00195b2:	e8 c2 91 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c00195b7:	81 c4 3c 01 00 00    	add    esp,0x13c
c00195bd:	5b                   	pop    ebx
c00195be:	5e                   	pop    esi
c00195bf:	5f                   	pop    edi
c00195c0:	5d                   	pop    ebp
c00195c1:	c3                   	ret    

c00195c2 <EnvVarContainer::__loadSystem()>:
c00195c2:	83 ec 10             	sub    esp,0x10
c00195c5:	68 20 bf 02 c0       	push   0xc002bf20
c00195ca:	68 35 a2 02 c0       	push   0xc002a235
c00195cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00195d3:	e8 f4 fd ff ff       	call   c00193cc <EnvVarContainer::loadFrom(char const*, char const*)>
c00195d8:	83 c4 1c             	add    esp,0x1c
c00195db:	c3                   	ret    

c00195dc <EnvVarContainer::__loadUser()>:
c00195dc:	c3                   	ret    
c00195dd:	90                   	nop

c00195de <EnvVarContainer::EnvVarContainer(Process*)>:
c00195de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00195e2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00195e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00195ec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00195f0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00195f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00195f7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00195fe:	90                   	nop
c00195ff:	c3                   	ret    

c0019600 <EnvVarContainer::~EnvVarContainer()>:
c0019600:	83 ec 0c             	sub    esp,0xc
c0019603:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019607:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001960a:	85 c0                	test   eax,eax
c001960c:	74 1d                	je     c001962b <EnvVarContainer::~EnvVarContainer()+0x2b>
c001960e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019612:	8b 00                	mov    eax,DWORD PTR [eax]
c0019614:	85 c0                	test   eax,eax
c0019616:	74 13                	je     c001962b <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019618:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001961c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001961f:	83 ec 0c             	sub    esp,0xc
c0019622:	50                   	push   eax
c0019623:	e8 bc 5e ff ff       	call   c000f4e4 <free>
c0019628:	83 c4 10             	add    esp,0x10
c001962b:	90                   	nop
c001962c:	83 c4 0c             	add    esp,0xc
c001962f:	c3                   	ret    

c0019630 <Krnl::getEnv(Process*, char const*)>:
c0019630:	53                   	push   ebx
c0019631:	83 ec 08             	sub    esp,0x8
c0019634:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019638:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001963c:	39 05 34 df 02 c0    	cmp    DWORD PTR ds:0xc002df34,eax
c0019642:	74 04                	je     c0019648 <Krnl::getEnv(Process*, char const*)+0x18>
c0019644:	85 c0                	test   eax,eax
c0019646:	75 0b                	jne    c0019653 <Krnl::getEnv(Process*, char const*)+0x23>
c0019648:	a1 10 d5 02 c0       	mov    eax,ds:0xc002d510
c001964d:	85 c0                	test   eax,eax
c001964f:	75 19                	jne    c001966a <Krnl::getEnv(Process*, char const*)+0x3a>
c0019651:	eb 27                	jmp    c001967a <Krnl::getEnv(Process*, char const*)+0x4a>
c0019653:	52                   	push   edx
c0019654:	52                   	push   edx
c0019655:	53                   	push   ebx
c0019656:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001965c:	e8 5f fc ff ff       	call   c00192c0 <EnvVarContainer::getEnv(char const*)>
c0019661:	83 c4 10             	add    esp,0x10
c0019664:	85 c0                	test   eax,eax
c0019666:	75 28                	jne    c0019690 <Krnl::getEnv(Process*, char const*)+0x60>
c0019668:	eb de                	jmp    c0019648 <Krnl::getEnv(Process*, char const*)+0x18>
c001966a:	52                   	push   edx
c001966b:	52                   	push   edx
c001966c:	53                   	push   ebx
c001966d:	50                   	push   eax
c001966e:	e8 4d fc ff ff       	call   c00192c0 <EnvVarContainer::getEnv(char const*)>
c0019673:	83 c4 10             	add    esp,0x10
c0019676:	85 c0                	test   eax,eax
c0019678:	75 16                	jne    c0019690 <Krnl::getEnv(Process*, char const*)+0x60>
c001967a:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001967e:	a1 14 d5 02 c0       	mov    eax,ds:0xc002d514
c0019683:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0019687:	83 c4 08             	add    esp,0x8
c001968a:	5b                   	pop    ebx
c001968b:	e9 30 fc ff ff       	jmp    c00192c0 <EnvVarContainer::getEnv(char const*)>
c0019690:	83 c4 08             	add    esp,0x8
c0019693:	5b                   	pop    ebx
c0019694:	c3                   	ret    

c0019695 <Krnl::setEnvSystem(char const*, char const*)>:
c0019695:	83 ec 10             	sub    esp,0x10
c0019698:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001969c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00196a0:	ff 35 14 d5 02 c0    	push   DWORD PTR ds:0xc002d514
c00196a6:	e8 53 fc ff ff       	call   c00192fe <EnvVarContainer::setEnv(char const*, char const*)>
c00196ab:	83 c4 1c             	add    esp,0x1c
c00196ae:	c3                   	ret    

c00196af <Krnl::setEnvUser(char const*, char const*)>:
c00196af:	a1 10 d5 02 c0       	mov    eax,ds:0xc002d510
c00196b4:	85 c0                	test   eax,eax
c00196b6:	74 15                	je     c00196cd <Krnl::setEnvUser(char const*, char const*)+0x1e>
c00196b8:	83 ec 10             	sub    esp,0x10
c00196bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00196bf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00196c3:	50                   	push   eax
c00196c4:	e8 35 fc ff ff       	call   c00192fe <EnvVarContainer::setEnv(char const*, char const*)>
c00196c9:	83 c4 1c             	add    esp,0x1c
c00196cc:	c3                   	ret    
c00196cd:	c3                   	ret    

c00196ce <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c00196ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00196d2:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c00196d8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00196dc:	e9 1d fc ff ff       	jmp    c00192fe <EnvVarContainer::setEnv(char const*, char const*)>

c00196e1 <Krnl::deleteEnvSystem(char const*)>:
c00196e1:	c3                   	ret    

c00196e2 <Krnl::deleteEnvUser(char const*)>:
c00196e2:	c3                   	ret    

c00196e3 <Krnl::deleteEnvProcess(Process*, char const*)>:
c00196e3:	c3                   	ret    

c00196e4 <Krnl::newProcessEnv(Process*)>:
c00196e4:	83 ec 28             	sub    esp,0x28
c00196e7:	6a 0c                	push   0xc
c00196e9:	e8 e6 5d ff ff       	call   c000f4d4 <malloc>
c00196ee:	5a                   	pop    edx
c00196ef:	59                   	pop    ecx
c00196f0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00196f4:	50                   	push   eax
c00196f5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00196f9:	e8 e0 fe ff ff       	call   c00195de <EnvVarContainer::EnvVarContainer(Process*)>
c00196fe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019702:	83 c4 2c             	add    esp,0x2c
c0019705:	c3                   	ret    

c0019706 <Krnl::copyProcessEnv(Process*, Process*)>:
c0019706:	56                   	push   esi
c0019707:	53                   	push   ebx
c0019708:	83 ec 10             	sub    esp,0x10
c001970b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001970f:	8b b0 3a 07 00 00    	mov    esi,DWORD PTR [eax+0x73a]
c0019715:	6a 0c                	push   0xc
c0019717:	e8 b8 5d ff ff       	call   c000f4d4 <malloc>
c001971c:	89 c3                	mov    ebx,eax
c001971e:	58                   	pop    eax
c001971f:	5a                   	pop    edx
c0019720:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019724:	53                   	push   ebx
c0019725:	e8 b4 fe ff ff       	call   c00195de <EnvVarContainer::EnvVarContainer(Process*)>
c001972a:	8b 06                	mov    eax,DWORD PTR [esi]
c001972c:	89 03                	mov    DWORD PTR [ebx],eax
c001972e:	c1 e0 03             	shl    eax,0x3
c0019731:	89 04 24             	mov    DWORD PTR [esp],eax
c0019734:	e8 9b 5d ff ff       	call   c000f4d4 <malloc>
c0019739:	83 c4 0c             	add    esp,0xc
c001973c:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001973f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0019741:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c0019748:	52                   	push   edx
c0019749:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001974c:	50                   	push   eax
c001974d:	e8 03 6f fe ff       	call   c0000655 <memcpy>
c0019752:	89 d8                	mov    eax,ebx
c0019754:	83 c4 14             	add    esp,0x14
c0019757:	5b                   	pop    ebx
c0019758:	5e                   	pop    esi
c0019759:	c3                   	ret    

c001975a <Krnl::loadSystemEnv()>:
c001975a:	53                   	push   ebx
c001975b:	83 ec 14             	sub    esp,0x14
c001975e:	6a 0c                	push   0xc
c0019760:	e8 6f 5d ff ff       	call   c000f4d4 <malloc>
c0019765:	89 c3                	mov    ebx,eax
c0019767:	58                   	pop    eax
c0019768:	5a                   	pop    edx
c0019769:	ff 35 34 df 02 c0    	push   DWORD PTR ds:0xc002df34
c001976f:	53                   	push   ebx
c0019770:	e8 69 fe ff ff       	call   c00195de <EnvVarContainer::EnvVarContainer(Process*)>
c0019775:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019778:	89 1d 14 d5 02 c0    	mov    DWORD PTR ds:0xc002d514,ebx
c001977e:	e8 3f fe ff ff       	call   c00195c2 <EnvVarContainer::__loadSystem()>
c0019783:	83 c4 18             	add    esp,0x18
c0019786:	5b                   	pop    ebx
c0019787:	c3                   	ret    

c0019788 <Krnl::loadUserEnv()>:
c0019788:	53                   	push   ebx
c0019789:	83 ec 14             	sub    esp,0x14
c001978c:	6a 0c                	push   0xc
c001978e:	e8 41 5d ff ff       	call   c000f4d4 <malloc>
c0019793:	89 c3                	mov    ebx,eax
c0019795:	58                   	pop    eax
c0019796:	5a                   	pop    edx
c0019797:	ff 35 34 df 02 c0    	push   DWORD PTR ds:0xc002df34
c001979d:	53                   	push   ebx
c001979e:	e8 3b fe ff ff       	call   c00195de <EnvVarContainer::EnvVarContainer(Process*)>
c00197a3:	89 1d 10 d5 02 c0    	mov    DWORD PTR ds:0xc002d510,ebx
c00197a9:	83 c4 18             	add    esp,0x18
c00197ac:	5b                   	pop    ebx
c00197ad:	c3                   	ret    

c00197ae <Krnl::flushEnv()>:
c00197ae:	c3                   	ret    

c00197af <Krnl::getProcessTotalEnvCount(Process*)>:
c00197af:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00197b3:	8b 15 10 d5 02 c0    	mov    edx,DWORD PTR ds:0xc002d510
c00197b9:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c00197bf:	a1 14 d5 02 c0       	mov    eax,ds:0xc002d514
c00197c4:	8b 00                	mov    eax,DWORD PTR [eax]
c00197c6:	03 01                	add    eax,DWORD PTR [ecx]
c00197c8:	85 d2                	test   edx,edx
c00197ca:	74 02                	je     c00197ce <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c00197cc:	03 02                	add    eax,DWORD PTR [edx]
c00197ce:	c3                   	ret    

c00197cf <Krnl::getProcessEnvPair(Process*, int)>:
c00197cf:	57                   	push   edi
c00197d0:	8b 0d 10 d5 02 c0    	mov    ecx,DWORD PTR ds:0xc002d510
c00197d6:	56                   	push   esi
c00197d7:	85 c9                	test   ecx,ecx
c00197d9:	53                   	push   ebx
c00197da:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00197de:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00197e2:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c00197e8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00197ec:	8b 02                	mov    eax,DWORD PTR [edx]
c00197ee:	75 47                	jne    c0019837 <Krnl::getProcessEnvPair(Process*, int)+0x68>
c00197f0:	39 c3                	cmp    ebx,eax
c00197f2:	7c 47                	jl     c001983b <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c00197f4:	8b 15 14 d5 02 c0    	mov    edx,DWORD PTR ds:0xc002d514
c00197fa:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00197fc:	01 c1                	add    ecx,eax
c00197fe:	39 d9                	cmp    ecx,ebx
c0019800:	7e 6c                	jle    c001986e <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c0019802:	51                   	push   ecx
c0019803:	89 d9                	mov    ecx,ebx
c0019805:	29 c1                	sub    ecx,eax
c0019807:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001980a:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001980e:	53                   	push   ebx
c001980f:	68 57 a2 02 c0       	push   0xc002a257
c0019814:	e8 60 8f ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c0019819:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c001981f:	2b 18                	sub    ebx,DWORD PTR [eax]
c0019821:	a1 14 d5 02 c0       	mov    eax,ds:0xc002d514
c0019826:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019829:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001982d:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0019830:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0019833:	89 06                	mov    DWORD PTR [esi],eax
c0019835:	eb 51                	jmp    c0019888 <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c0019837:	39 c3                	cmp    ebx,eax
c0019839:	7d 05                	jge    c0019840 <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001983b:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001983e:	eb 20                	jmp    c0019860 <Krnl::getProcessEnvPair(Process*, int)+0x91>
c0019840:	8b 39                	mov    edi,DWORD PTR [ecx]
c0019842:	8d 14 07             	lea    edx,[edi+eax*1]
c0019845:	39 da                	cmp    edx,ebx
c0019847:	7e 04                	jle    c001984d <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c0019849:	29 c3                	sub    ebx,eax
c001984b:	eb 10                	jmp    c001985d <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001984d:	8b 0d 14 d5 02 c0    	mov    ecx,DWORD PTR ds:0xc002d514
c0019853:	03 11                	add    edx,DWORD PTR [ecx]
c0019855:	39 da                	cmp    edx,ebx
c0019857:	7e 15                	jle    c001986e <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c0019859:	29 c3                	sub    ebx,eax
c001985b:	29 fb                	sub    ebx,edi
c001985d:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0019860:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c0019864:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0019867:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001986a:	89 06                	mov    DWORD PTR [esi],eax
c001986c:	eb 1d                	jmp    c001988b <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001986e:	83 ec 0c             	sub    esp,0xc
c0019871:	68 6b a2 02 c0       	push   0xc002a26b
c0019876:	e8 18 00 00 00       	call   c0019893 <Krnl::panic(char const*)>
c001987b:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0019881:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0019888:	83 c4 10             	add    esp,0x10
c001988b:	89 f0                	mov    eax,esi
c001988d:	5b                   	pop    ebx
c001988e:	5e                   	pop    esi
c001988f:	5f                   	pop    edi
c0019890:	c2 04 00             	ret    0x4

c0019893 <Krnl::panic(char const*)>:
c0019893:	55                   	push   ebp
c0019894:	89 e5                	mov    ebp,esp
c0019896:	53                   	push   ebx
c0019897:	50                   	push   eax
c0019898:	a1 1c d5 02 c0       	mov    eax,ds:0xc002d51c
c001989d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00198a0:	85 c0                	test   eax,eax
c00198a2:	74 02                	je     c00198a6 <Krnl::panic(char const*)+0x13>
c00198a4:	ff d0                	call   eax
c00198a6:	fa                   	cli    
c00198a7:	c6 05 20 d5 02 c0 01 	mov    BYTE PTR ds:0xc002d520,0x1
c00198ae:	83 ec 08             	sub    esp,0x8
c00198b1:	c6 05 24 b9 02 c0 00 	mov    BYTE PTR ds:0xc002b924,0x0
c00198b8:	53                   	push   ebx
c00198b9:	68 85 a2 02 c0       	push   0xc002a285
c00198be:	e8 b6 8e ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c00198c3:	58                   	pop    eax
c00198c4:	a1 34 df 02 c0       	mov    eax,ds:0xc002df34
c00198c9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00198cf:	e8 67 70 ff ff       	call   c001093b <setActiveTerminal(VgaText*)>
c00198d4:	83 c4 0c             	add    esp,0xc
c00198d7:	a1 34 df 02 c0       	mov    eax,ds:0xc002df34
c00198dc:	6a 01                	push   0x1
c00198de:	6a 0f                	push   0xf
c00198e0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00198e6:	e8 81 6a ff ff       	call   c001036c <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00198eb:	5a                   	pop    edx
c00198ec:	a1 34 df 02 c0       	mov    eax,ds:0xc002df34
c00198f1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00198f7:	e8 e0 72 ff ff       	call   c0010bdc <VgaText::clearScreen()>
c00198fc:	59                   	pop    ecx
c00198fd:	58                   	pop    eax
c00198fe:	a1 34 df 02 c0       	mov    eax,ds:0xc002df34
c0019903:	68 9e a2 02 c0       	push   0xc002a29e
c0019908:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001990e:	e8 47 74 ff ff       	call   c0010d5a <VgaText::puts(char const*)>
c0019913:	58                   	pop    eax
c0019914:	a1 34 df 02 c0       	mov    eax,ds:0xc002df34
c0019919:	5a                   	pop    edx
c001991a:	68 44 a3 02 c0       	push   0xc002a344
c001991f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019925:	e8 30 74 ff ff       	call   c0010d5a <VgaText::puts(char const*)>
c001992a:	59                   	pop    ecx
c001992b:	58                   	pop    eax
c001992c:	a1 34 df 02 c0       	mov    eax,ds:0xc002df34
c0019931:	68 ba a2 02 c0       	push   0xc002a2ba
c0019936:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001993c:	e8 19 74 ff ff       	call   c0010d5a <VgaText::puts(char const*)>
c0019941:	58                   	pop    eax
c0019942:	a1 34 df 02 c0       	mov    eax,ds:0xc002df34
c0019947:	5a                   	pop    edx
c0019948:	53                   	push   ebx
c0019949:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001994f:	e8 06 74 ff ff       	call   c0010d5a <VgaText::puts(char const*)>
c0019954:	59                   	pop    ecx
c0019955:	a1 34 df 02 c0       	mov    eax,ds:0xc002df34
c001995a:	5b                   	pop    ebx
c001995b:	68 da a2 02 c0       	push   0xc002a2da
c0019960:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019966:	e8 ef 73 ff ff       	call   c0010d5a <VgaText::puts(char const*)>
c001996b:	58                   	pop    eax
c001996c:	a1 34 df 02 c0       	mov    eax,ds:0xc002df34
c0019971:	5a                   	pop    edx
c0019972:	68 80 a3 02 c0       	push   0xc002a380
c0019977:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001997d:	e8 d8 73 ff ff       	call   c0010d5a <VgaText::puts(char const*)>
c0019982:	59                   	pop    ecx
c0019983:	a1 34 df 02 c0       	mov    eax,ds:0xc002df34
c0019988:	5b                   	pop    ebx
c0019989:	68 ba a2 02 c0       	push   0xc002a2ba
c001998e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019994:	e8 c1 73 ff ff       	call   c0010d5a <VgaText::puts(char const*)>
c0019999:	58                   	pop    eax
c001999a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001999f:	5a                   	pop    edx
c00199a0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00199a3:	83 c0 0c             	add    eax,0xc
c00199a6:	50                   	push   eax
c00199a7:	a1 34 df 02 c0       	mov    eax,ds:0xc002df34
c00199ac:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00199b2:	e8 a3 73 ff ff       	call   c0010d5a <VgaText::puts(char const*)>
c00199b7:	59                   	pop    ecx
c00199b8:	a1 34 df 02 c0       	mov    eax,ds:0xc002df34
c00199bd:	5b                   	pop    ebx
c00199be:	68 d9 a2 02 c0       	push   0xc002a2d9
c00199c3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00199c9:	e8 8c 73 ff ff       	call   c0010d5a <VgaText::puts(char const*)>
c00199ce:	58                   	pop    eax
c00199cf:	a1 34 df 02 c0       	mov    eax,ds:0xc002df34
c00199d4:	5a                   	pop    edx
c00199d5:	68 ac a3 02 c0       	push   0xc002a3ac
c00199da:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00199e0:	e8 75 73 ff ff       	call   c0010d5a <VgaText::puts(char const*)>
c00199e5:	59                   	pop    ecx
c00199e6:	a1 34 df 02 c0       	mov    eax,ds:0xc002df34
c00199eb:	5b                   	pop    ebx
c00199ec:	68 ec a3 02 c0       	push   0xc002a3ec
c00199f1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00199f7:	e8 5e 73 ff ff       	call   c0010d5a <VgaText::puts(char const*)>
c00199fc:	58                   	pop    eax
c00199fd:	a1 34 df 02 c0       	mov    eax,ds:0xc002df34
c0019a02:	5a                   	pop    edx
c0019a03:	68 c5 a2 02 c0       	push   0xc002a2c5
c0019a08:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019a0e:	e8 47 73 ff ff       	call   c0010d5a <VgaText::puts(char const*)>
c0019a13:	59                   	pop    ecx
c0019a14:	5b                   	pop    ebx
c0019a15:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019a18:	68 dd a2 02 c0       	push   0xc002a2dd
c0019a1d:	e8 57 8d ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c0019a22:	58                   	pop    eax
c0019a23:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019a26:	5a                   	pop    edx
c0019a27:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0019a2a:	68 e6 a2 02 c0       	push   0xc002a2e6
c0019a2f:	e8 45 8d ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c0019a34:	59                   	pop    ecx
c0019a35:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019a38:	5b                   	pop    ebx
c0019a39:	8b 00                	mov    eax,DWORD PTR [eax]
c0019a3b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0019a3e:	68 ef a2 02 c0       	push   0xc002a2ef
c0019a43:	e8 31 8d ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c0019a48:	58                   	pop    eax
c0019a49:	a1 34 df 02 c0       	mov    eax,ds:0xc002df34
c0019a4e:	5a                   	pop    edx
c0019a4f:	68 30 a4 02 c0       	push   0xc002a430
c0019a54:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019a5a:	e8 fb 72 ff ff       	call   c0010d5a <VgaText::puts(char const*)>
c0019a5f:	59                   	pop    ecx
c0019a60:	a1 34 df 02 c0       	mov    eax,ds:0xc002df34
c0019a65:	5b                   	pop    ebx
c0019a66:	68 f8 a2 02 c0       	push   0xc002a2f8
c0019a6b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019a71:	e8 e4 72 ff ff       	call   c0010d5a <VgaText::puts(char const*)>
c0019a76:	0f 20 c0             	mov    eax,cr0
c0019a79:	5a                   	pop    edx
c0019a7a:	59                   	pop    ecx
c0019a7b:	50                   	push   eax
c0019a7c:	a1 34 df 02 c0       	mov    eax,ds:0xc002df34
c0019a81:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019a87:	e8 f4 72 ff ff       	call   c0010d80 <VgaText::putx(unsigned int)>
c0019a8c:	5b                   	pop    ebx
c0019a8d:	58                   	pop    eax
c0019a8e:	a1 34 df 02 c0       	mov    eax,ds:0xc002df34
c0019a93:	68 02 a3 02 c0       	push   0xc002a302
c0019a98:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019a9e:	e8 b7 72 ff ff       	call   c0010d5a <VgaText::puts(char const*)>
c0019aa3:	0f 20 d0             	mov    eax,cr2
c0019aa6:	5a                   	pop    edx
c0019aa7:	59                   	pop    ecx
c0019aa8:	50                   	push   eax
c0019aa9:	a1 34 df 02 c0       	mov    eax,ds:0xc002df34
c0019aae:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ab4:	e8 c7 72 ff ff       	call   c0010d80 <VgaText::putx(unsigned int)>
c0019ab9:	5b                   	pop    ebx
c0019aba:	58                   	pop    eax
c0019abb:	a1 34 df 02 c0       	mov    eax,ds:0xc002df34
c0019ac0:	68 0c a3 02 c0       	push   0xc002a30c
c0019ac5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019acb:	e8 8a 72 ff ff       	call   c0010d5a <VgaText::puts(char const*)>
c0019ad0:	0f 20 d8             	mov    eax,cr3
c0019ad3:	5a                   	pop    edx
c0019ad4:	59                   	pop    ecx
c0019ad5:	50                   	push   eax
c0019ad6:	a1 34 df 02 c0       	mov    eax,ds:0xc002df34
c0019adb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ae1:	e8 9a 72 ff ff       	call   c0010d80 <VgaText::putx(unsigned int)>
c0019ae6:	5b                   	pop    ebx
c0019ae7:	58                   	pop    eax
c0019ae8:	a1 34 df 02 c0       	mov    eax,ds:0xc002df34
c0019aed:	68 1f a3 02 c0       	push   0xc002a31f
c0019af2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019af8:	e8 5d 72 ff ff       	call   c0010d5a <VgaText::puts(char const*)>
c0019afd:	0f 20 e0             	mov    eax,cr4
c0019b00:	5a                   	pop    edx
c0019b01:	59                   	pop    ecx
c0019b02:	50                   	push   eax
c0019b03:	a1 34 df 02 c0       	mov    eax,ds:0xc002df34
c0019b08:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019b0e:	e8 6d 72 ff ff       	call   c0010d80 <VgaText::putx(unsigned int)>
c0019b13:	5b                   	pop    ebx
c0019b14:	58                   	pop    eax
c0019b15:	a1 34 df 02 c0       	mov    eax,ds:0xc002df34
c0019b1a:	68 29 a3 02 c0       	push   0xc002a329
c0019b1f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019b25:	e8 30 72 ff ff       	call   c0010d5a <VgaText::puts(char const*)>
c0019b2a:	5a                   	pop    edx
c0019b2b:	a1 34 df 02 c0       	mov    eax,ds:0xc002df34
c0019b30:	59                   	pop    ecx
c0019b31:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019b37:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019b3a:	50                   	push   eax
c0019b3b:	e8 40 72 ff ff       	call   c0010d80 <VgaText::putx(unsigned int)>
c0019b40:	5b                   	pop    ebx
c0019b41:	58                   	pop    eax
c0019b42:	a1 34 df 02 c0       	mov    eax,ds:0xc002df34
c0019b47:	68 40 a3 02 c0       	push   0xc002a340
c0019b4c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019b52:	e8 03 72 ff ff       	call   c0010d5a <VgaText::puts(char const*)>
c0019b57:	5a                   	pop    edx
c0019b58:	a1 34 df 02 c0       	mov    eax,ds:0xc002df34
c0019b5d:	59                   	pop    ecx
c0019b5e:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019b64:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019b67:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0019b6a:	50                   	push   eax
c0019b6b:	e8 10 72 ff ff       	call   c0010d80 <VgaText::putx(unsigned int)>
c0019b70:	5b                   	pop    ebx
c0019b71:	58                   	pop    eax
c0019b72:	a1 34 df 02 c0       	mov    eax,ds:0xc002df34
c0019b77:	68 40 a3 02 c0       	push   0xc002a340
c0019b7c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019b82:	e8 d3 71 ff ff       	call   c0010d5a <VgaText::puts(char const*)>
c0019b87:	a1 34 df 02 c0       	mov    eax,ds:0xc002df34
c0019b8c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019b8f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019b95:	8b 12                	mov    edx,DWORD PTR [edx]
c0019b97:	59                   	pop    ecx
c0019b98:	5b                   	pop    ebx
c0019b99:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0019b9c:	50                   	push   eax
c0019b9d:	e8 de 71 ff ff       	call   c0010d80 <VgaText::putx(unsigned int)>
c0019ba2:	83 c4 10             	add    esp,0x10
c0019ba5:	b2 fe                	mov    dl,0xfe
c0019ba7:	e4 60                	in     al,0x60
c0019ba9:	3c 1c                	cmp    al,0x1c
c0019bab:	74 04                	je     c0019bb1 <Krnl::panic(char const*)+0x31e>
c0019bad:	3c 5a                	cmp    al,0x5a
c0019baf:	75 f6                	jne    c0019ba7 <Krnl::panic(char const*)+0x314>
c0019bb1:	e4 64                	in     al,0x64
c0019bb3:	a8 02                	test   al,0x2
c0019bb5:	75 fa                	jne    c0019bb1 <Krnl::panic(char const*)+0x31e>
c0019bb7:	88 d0                	mov    al,dl
c0019bb9:	e6 64                	out    0x64,al
c0019bbb:	fa                   	cli    
c0019bbc:	f4                   	hlt    
c0019bbd:	eb e8                	jmp    c0019ba7 <Krnl::panic(char const*)+0x314>

c0019bbf <Net::switchEndian16(unsigned short)>:
c0019bbf:	83 ec 04             	sub    esp,0x4
c0019bc2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019bc6:	66 89 04 24          	mov    WORD PTR [esp],ax
c0019bca:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0019bce:	c1 f8 08             	sar    eax,0x8
c0019bd1:	89 c2                	mov    edx,eax
c0019bd3:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0019bd7:	c1 e0 08             	shl    eax,0x8
c0019bda:	09 d0                	or     eax,edx
c0019bdc:	83 c4 04             	add    esp,0x4
c0019bdf:	c3                   	ret    

c0019be0 <Net::switchEndian32(unsigned int)>:
c0019be0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019be4:	c1 e8 18             	shr    eax,0x18
c0019be7:	89 c2                	mov    edx,eax
c0019be9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019bed:	c1 e0 08             	shl    eax,0x8
c0019bf0:	25 00 00 ff 00       	and    eax,0xff0000
c0019bf5:	09 c2                	or     edx,eax
c0019bf7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019bfb:	c1 e8 08             	shr    eax,0x8
c0019bfe:	25 00 ff 00 00       	and    eax,0xff00
c0019c03:	09 c2                	or     edx,eax
c0019c05:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c09:	c1 e0 18             	shl    eax,0x18
c0019c0c:	09 d0                	or     eax,edx
c0019c0e:	c3                   	ret    

c0019c0f <Net::crc32Calc(unsigned char*, int)>:
c0019c0f:	83 ec 10             	sub    esp,0x10
c0019c12:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019c17:	75 07                	jne    c0019c20 <Net::crc32Calc(unsigned char*, int)+0x11>
c0019c19:	b8 00 00 00 00       	mov    eax,0x0
c0019c1e:	eb 7c                	jmp    c0019c9c <Net::crc32Calc(unsigned char*, int)+0x8d>
c0019c20:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0019c25:	7f 07                	jg     c0019c2e <Net::crc32Calc(unsigned char*, int)+0x1f>
c0019c27:	b8 00 00 00 00       	mov    eax,0x0
c0019c2c:	eb 6e                	jmp    c0019c9c <Net::crc32Calc(unsigned char*, int)+0x8d>
c0019c2e:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0019c36:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019c3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c42:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0019c46:	7d 4e                	jge    c0019c96 <Net::crc32Calc(unsigned char*, int)+0x87>
c0019c48:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019c4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019c50:	01 d0                	add    eax,edx
c0019c52:	8a 00                	mov    al,BYTE PTR [eax]
c0019c54:	0f b6 c0             	movzx  eax,al
c0019c57:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0019c5b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019c63:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0019c68:	7f 26                	jg     c0019c90 <Net::crc32Calc(unsigned char*, int)+0x81>
c0019c6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c6e:	83 e0 01             	and    eax,0x1
c0019c71:	74 0d                	je     c0019c80 <Net::crc32Calc(unsigned char*, int)+0x71>
c0019c73:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c77:	d1 e8                	shr    eax,1
c0019c79:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0019c7e:	eb 06                	jmp    c0019c86 <Net::crc32Calc(unsigned char*, int)+0x77>
c0019c80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c84:	d1 e8                	shr    eax,1
c0019c86:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019c8a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0019c8e:	eb d3                	jmp    c0019c63 <Net::crc32Calc(unsigned char*, int)+0x54>
c0019c90:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0019c94:	eb a8                	jmp    c0019c3e <Net::crc32Calc(unsigned char*, int)+0x2f>
c0019c96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c9a:	f7 d0                	not    eax
c0019c9c:	83 c4 10             	add    esp,0x10
c0019c9f:	c3                   	ret    

c0019ca0 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c0019ca0:	83 ec 1c             	sub    esp,0x1c
c0019ca3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019ca7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019cab:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019cb3:	83 7c 24 0c 06       	cmp    DWORD PTR [esp+0xc],0x6
c0019cb8:	7f 14                	jg     c0019cce <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c0019cba:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019cbe:	8d 50 01             	lea    edx,[eax+0x1]
c0019cc1:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019cc5:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c0019cc8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0019ccc:	eb e5                	jmp    c0019cb3 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c0019cce:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019cd2:	8d 50 01             	lea    edx,[eax+0x1]
c0019cd5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019cd9:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c0019cdc:	83 ec 04             	sub    esp,0x4
c0019cdf:	6a 06                	push   0x6
c0019ce1:	8d 44 24 36          	lea    eax,[esp+0x36]
c0019ce5:	50                   	push   eax
c0019ce6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0019cea:	e8 66 69 fe ff       	call   c0000655 <memcpy>
c0019cef:	83 c4 10             	add    esp,0x10
c0019cf2:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c0019cf7:	83 ec 04             	sub    esp,0x4
c0019cfa:	6a 06                	push   0x6
c0019cfc:	8d 44 24 30          	lea    eax,[esp+0x30]
c0019d00:	50                   	push   eax
c0019d01:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0019d05:	e8 4b 69 fe ff       	call   c0000655 <memcpy>
c0019d0a:	83 c4 10             	add    esp,0x10
c0019d0d:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c0019d12:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019d16:	0f b7 c0             	movzx  eax,ax
c0019d19:	c1 f8 08             	sar    eax,0x8
c0019d1c:	89 c1                	mov    ecx,eax
c0019d1e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019d22:	8d 50 01             	lea    edx,[eax+0x1]
c0019d25:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019d29:	88 ca                	mov    dl,cl
c0019d2b:	88 10                	mov    BYTE PTR [eax],dl
c0019d2d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0019d31:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019d35:	8d 48 01             	lea    ecx,[eax+0x1]
c0019d38:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0019d3c:	88 10                	mov    BYTE PTR [eax],dl
c0019d3e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0019d42:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019d46:	83 ec 04             	sub    esp,0x4
c0019d49:	52                   	push   edx
c0019d4a:	50                   	push   eax
c0019d4b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0019d4f:	e8 01 69 fe ff       	call   c0000655 <memcpy>
c0019d54:	83 c4 10             	add    esp,0x10
c0019d57:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019d5b:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0019d5f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019d63:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0019d67:	83 ec 08             	sub    esp,0x8
c0019d6a:	50                   	push   eax
c0019d6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019d6f:	e8 9b fe ff ff       	call   c0019c0f <Net::crc32Calc(unsigned char*, int)>
c0019d74:	83 c4 10             	add    esp,0x10
c0019d77:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019d7b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d7f:	c1 e8 18             	shr    eax,0x18
c0019d82:	89 c1                	mov    ecx,eax
c0019d84:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019d88:	8d 50 01             	lea    edx,[eax+0x1]
c0019d8b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019d8f:	88 ca                	mov    dl,cl
c0019d91:	88 10                	mov    BYTE PTR [eax],dl
c0019d93:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d97:	c1 e8 10             	shr    eax,0x10
c0019d9a:	89 c1                	mov    ecx,eax
c0019d9c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019da0:	8d 50 01             	lea    edx,[eax+0x1]
c0019da3:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019da7:	88 ca                	mov    dl,cl
c0019da9:	88 10                	mov    BYTE PTR [eax],dl
c0019dab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019daf:	c1 e8 08             	shr    eax,0x8
c0019db2:	89 c1                	mov    ecx,eax
c0019db4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019db8:	8d 50 01             	lea    edx,[eax+0x1]
c0019dbb:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019dbf:	88 ca                	mov    dl,cl
c0019dc1:	88 10                	mov    BYTE PTR [eax],dl
c0019dc3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019dc7:	8d 50 01             	lea    edx,[eax+0x1]
c0019dca:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019dce:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019dd2:	88 10                	mov    BYTE PTR [eax],dl
c0019dd4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019dd8:	83 c4 1c             	add    esp,0x1c
c0019ddb:	c3                   	ret    

c0019ddc <Net::unwrapEthernetFrame(unsigned char*, int)>:
c0019ddc:	83 ec 2c             	sub    esp,0x2c
c0019ddf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019de3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019de7:	83 44 24 34 08       	add    DWORD PTR [esp+0x34],0x8
c0019dec:	83 ec 04             	sub    esp,0x4
c0019def:	6a 06                	push   0x6
c0019df1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0019df5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019df9:	83 c0 0e             	add    eax,0xe
c0019dfc:	50                   	push   eax
c0019dfd:	e8 53 68 fe ff       	call   c0000655 <memcpy>
c0019e02:	83 c4 10             	add    esp,0x10
c0019e05:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c0019e0a:	83 ec 04             	sub    esp,0x4
c0019e0d:	6a 06                	push   0x6
c0019e0f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0019e13:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019e17:	83 c0 08             	add    eax,0x8
c0019e1a:	50                   	push   eax
c0019e1b:	e8 35 68 fe ff       	call   c0000655 <memcpy>
c0019e20:	83 c4 10             	add    esp,0x10
c0019e23:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c0019e28:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019e2c:	8d 50 01             	lea    edx,[eax+0x1]
c0019e2f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019e33:	8a 00                	mov    al,BYTE PTR [eax]
c0019e35:	0f b6 c0             	movzx  eax,al
c0019e38:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0019e3d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019e41:	8d 50 01             	lea    edx,[eax+0x1]
c0019e44:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019e48:	8a 00                	mov    al,BYTE PTR [eax]
c0019e4a:	0f b6 c0             	movzx  eax,al
c0019e4d:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c0019e52:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c0019e57:	c1 e0 08             	shl    eax,0x8
c0019e5a:	89 c2                	mov    edx,eax
c0019e5c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019e60:	09 d0                	or     eax,edx
c0019e62:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019e66:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c0019e6a:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
c0019e6f:	75 3a                	jne    c0019eab <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c0019e71:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019e75:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019e78:	66 3d dc 05          	cmp    ax,0x5dc
c0019e7c:	77 10                	ja     c0019e8e <Net::unwrapEthernetFrame(unsigned char*, int)+0xb2>
c0019e7e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019e82:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019e85:	0f b7 c0             	movzx  eax,ax
c0019e88:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0019e8c:	eb 1d                	jmp    c0019eab <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c0019e8e:	83 ec 0c             	sub    esp,0xc
c0019e91:	68 58 a4 02 c0       	push   0xc002a458
c0019e96:	e8 de 88 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c0019e9b:	83 c4 10             	add    esp,0x10
c0019e9e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019ea2:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c0019ea6:	e9 c0 00 00 00       	jmp    c0019f6b <Net::unwrapEthernetFrame(unsigned char*, int)+0x18f>
c0019eab:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0019eaf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019eb3:	8b 00                	mov    eax,DWORD PTR [eax]
c0019eb5:	83 ec 04             	sub    esp,0x4
c0019eb8:	52                   	push   edx
c0019eb9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0019ebd:	50                   	push   eax
c0019ebe:	e8 92 67 fe ff       	call   c0000655 <memcpy>
c0019ec3:	83 c4 10             	add    esp,0x10
c0019ec6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019eca:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0019ece:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019ed2:	8d 50 01             	lea    edx,[eax+0x1]
c0019ed5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019ed9:	8a 00                	mov    al,BYTE PTR [eax]
c0019edb:	0f b6 c0             	movzx  eax,al
c0019ede:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019ee2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019ee6:	8d 50 01             	lea    edx,[eax+0x1]
c0019ee9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019eed:	8a 00                	mov    al,BYTE PTR [eax]
c0019eef:	0f b6 c0             	movzx  eax,al
c0019ef2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0019ef6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019efa:	8d 50 01             	lea    edx,[eax+0x1]
c0019efd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019f01:	8a 00                	mov    al,BYTE PTR [eax]
c0019f03:	0f b6 c0             	movzx  eax,al
c0019f06:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019f0a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019f0e:	8d 50 01             	lea    edx,[eax+0x1]
c0019f11:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019f15:	8a 00                	mov    al,BYTE PTR [eax]
c0019f17:	0f b6 c0             	movzx  eax,al
c0019f1a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019f1e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019f22:	c1 e0 18             	shl    eax,0x18
c0019f25:	89 c2                	mov    edx,eax
c0019f27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f2b:	c1 e0 10             	shl    eax,0x10
c0019f2e:	09 c2                	or     edx,eax
c0019f30:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019f34:	c1 e0 08             	shl    eax,0x8
c0019f37:	09 d0                	or     eax,edx
c0019f39:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0019f3d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019f41:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019f45:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0019f49:	83 e8 04             	sub    eax,0x4
c0019f4c:	83 ec 08             	sub    esp,0x8
c0019f4f:	50                   	push   eax
c0019f50:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019f54:	e8 b6 fc ff ff       	call   c0019c0f <Net::crc32Calc(unsigned char*, int)>
c0019f59:	83 c4 10             	add    esp,0x10
c0019f5c:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0019f60:	0f 94 c2             	sete   dl
c0019f63:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019f67:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c0019f6a:	90                   	nop
c0019f6b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019f6f:	83 c4 2c             	add    esp,0x2c
c0019f72:	c2 04 00             	ret    0x4

c0019f75 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0019f75:	55                   	push   ebp
c0019f76:	57                   	push   edi
c0019f77:	56                   	push   esi
c0019f78:	53                   	push   ebx
c0019f79:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019f7f:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0019f86:	8a 1e                	mov    bl,BYTE PTR [esi]
c0019f88:	8d 6e 01             	lea    ebp,[esi+0x1]
c0019f8b:	80 fb 40             	cmp    bl,0x40
c0019f8e:	75 1b                	jne    c0019fab <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0019f90:	8a 16                	mov    dl,BYTE PTR [esi]
c0019f92:	84 d2                	test   dl,dl
c0019f94:	0f 84 f1 00 00 00    	je     c001a08b <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0019f9a:	8d 46 01             	lea    eax,[esi+0x1]
c0019f9d:	80 fa 3a             	cmp    dl,0x3a
c0019fa0:	74 04                	je     c0019fa6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0019fa2:	89 c6                	mov    esi,eax
c0019fa4:	eb ea                	jmp    c0019f90 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0019fa6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0019fa9:	89 c6                	mov    esi,eax
c0019fab:	50                   	push   eax
c0019fac:	6a 40                	push   0x40
c0019fae:	6a 00                	push   0x0
c0019fb0:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019fb4:	50                   	push   eax
c0019fb5:	e8 d1 66 fe ff       	call   c000068b <memset>
c0019fba:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0019fc1:	31 c0                	xor    eax,eax
c0019fc3:	83 c4 10             	add    esp,0x10
c0019fc6:	8a 0f                	mov    cl,BYTE PTR [edi]
c0019fc8:	84 c9                	test   cl,cl
c0019fca:	0f 84 bb 00 00 00    	je     c001a08b <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0019fd0:	3d c7 00 00 00       	cmp    eax,0xc7
c0019fd5:	0f 8f b0 00 00 00    	jg     c001a08b <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0019fdb:	80 f9 0a             	cmp    cl,0xa
c0019fde:	0f 85 98 00 00 00    	jne    c001a07c <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0019fe4:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0019fe9:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0019fed:	a8 df                	test   al,0xdf
c0019fef:	0f 94 c1             	sete   cl
c0019ff2:	3c 23                	cmp    al,0x23
c0019ff4:	0f 94 c2             	sete   dl
c0019ff7:	08 d1                	or     cl,dl
c0019ff9:	75 4a                	jne    c001a045 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0019ffb:	8d 50 f7             	lea    edx,[eax-0x9]
c0019ffe:	80 fa 01             	cmp    dl,0x1
c001a001:	76 42                	jbe    c001a045 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a003:	3c 5b                	cmp    al,0x5b
c001a005:	75 42                	jne    c001a049 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001a007:	80 fb 40             	cmp    bl,0x40
c001a00a:	75 39                	jne    c001a045 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a00c:	83 ec 0c             	sub    esp,0xc
c001a00f:	8d 54 24 65          	lea    edx,[esp+0x65]
c001a013:	52                   	push   edx
c001a014:	e8 8f 66 fe ff       	call   c00006a8 <strlen>
c001a019:	83 c4 10             	add    esp,0x10
c001a01c:	83 f8 3f             	cmp    eax,0x3f
c001a01f:	77 6a                	ja     c001a08b <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a021:	50                   	push   eax
c001a022:	50                   	push   eax
c001a023:	8d 54 24 61          	lea    edx,[esp+0x61]
c001a027:	52                   	push   edx
c001a028:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a02c:	52                   	push   edx
c001a02d:	e8 f8 66 fe ff       	call   c000072a <strcpy>
c001a032:	58                   	pop    eax
c001a033:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a037:	52                   	push   edx
c001a038:	e8 6b 66 fe ff       	call   c00006a8 <strlen>
c001a03d:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001a042:	83 c4 10             	add    esp,0x10
c001a045:	31 d2                	xor    edx,edx
c001a047:	eb 3a                	jmp    c001a083 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001a049:	80 fb 40             	cmp    bl,0x40
c001a04c:	74 06                	je     c001a054 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001a04e:	8d 44 24 58          	lea    eax,[esp+0x58]
c001a052:	eb 20                	jmp    c001a074 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001a054:	50                   	push   eax
c001a055:	50                   	push   eax
c001a056:	55                   	push   ebp
c001a057:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a05b:	50                   	push   eax
c001a05c:	e8 1a 67 fe ff       	call   c000077b <strcmp>
c001a061:	83 c4 10             	add    esp,0x10
c001a064:	85 c0                	test   eax,eax
c001a066:	75 dd                	jne    c001a045 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a068:	eb e4                	jmp    c001a04e <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001a06a:	8d 50 01             	lea    edx,[eax+0x1]
c001a06d:	80 f9 3d             	cmp    cl,0x3d
c001a070:	74 1d                	je     c001a08f <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001a072:	89 d0                	mov    eax,edx
c001a074:	8a 08                	mov    cl,BYTE PTR [eax]
c001a076:	84 c9                	test   cl,cl
c001a078:	75 f0                	jne    c001a06a <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001a07a:	eb 0f                	jmp    c001a08b <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a07c:	8d 50 01             	lea    edx,[eax+0x1]
c001a07f:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001a083:	47                   	inc    edi
c001a084:	89 d0                	mov    eax,edx
c001a086:	e9 3b ff ff ff       	jmp    c0019fc6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001a08b:	31 c0                	xor    eax,eax
c001a08d:	eb 33                	jmp    c001a0c2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001a08f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a093:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001a096:	50                   	push   eax
c001a097:	50                   	push   eax
c001a098:	8d 44 24 60          	lea    eax,[esp+0x60]
c001a09c:	50                   	push   eax
c001a09d:	56                   	push   esi
c001a09e:	e8 d8 66 fe ff       	call   c000077b <strcmp>
c001a0a3:	83 c4 10             	add    esp,0x10
c001a0a6:	85 c0                	test   eax,eax
c001a0a8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a0ac:	75 97                	jne    c001a045 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a0ae:	51                   	push   ecx
c001a0af:	51                   	push   ecx
c001a0b0:	52                   	push   edx
c001a0b1:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001a0b8:	e8 6d 66 fe ff       	call   c000072a <strcpy>
c001a0bd:	83 c4 10             	add    esp,0x10
c001a0c0:	b0 01                	mov    al,0x1
c001a0c2:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a0c8:	5b                   	pop    ebx
c001a0c9:	5e                   	pop    esi
c001a0ca:	5f                   	pop    edi
c001a0cb:	5d                   	pop    ebp
c001a0cc:	c3                   	ret    

c001a0cd <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001a0cd:	57                   	push   edi
c001a0ce:	56                   	push   esi
c001a0cf:	53                   	push   ebx
c001a0d0:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a0d6:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001a0dd:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a0e4:	53                   	push   ebx
c001a0e5:	e8 be 65 fe ff       	call   c00006a8 <strlen>
c001a0ea:	89 34 24             	mov    DWORD PTR [esp],esi
c001a0ed:	89 c7                	mov    edi,eax
c001a0ef:	e8 b4 65 fe ff       	call   c00006a8 <strlen>
c001a0f4:	83 c4 10             	add    esp,0x10
c001a0f7:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001a0fb:	3d ff 00 00 00       	cmp    eax,0xff
c001a100:	0f 87 d3 00 00 00    	ja     c001a1d9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a106:	57                   	push   edi
c001a107:	57                   	push   edi
c001a108:	56                   	push   esi
c001a109:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001a10d:	56                   	push   esi
c001a10e:	e8 17 66 fe ff       	call   c000072a <strcpy>
c001a113:	58                   	pop    eax
c001a114:	5a                   	pop    edx
c001a115:	68 06 a8 02 c0       	push   0xc002a806
c001a11a:	56                   	push   esi
c001a11b:	e8 c1 66 fe ff       	call   c00007e1 <strcat>
c001a120:	59                   	pop    ecx
c001a121:	5f                   	pop    edi
c001a122:	53                   	push   ebx
c001a123:	56                   	push   esi
c001a124:	e8 b8 66 fe ff       	call   c00007e1 <strcat>
c001a129:	58                   	pop    eax
c001a12a:	5a                   	pop    edx
c001a12b:	68 a4 a4 02 c0       	push   0xc002a4a4
c001a130:	56                   	push   esi
c001a131:	e8 ab 66 fe ff       	call   c00007e1 <strcat>
c001a136:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001a13d:	e8 92 53 ff ff       	call   c000f4d4 <malloc>
c001a142:	83 c4 0c             	add    esp,0xc
c001a145:	89 c3                	mov    ebx,eax
c001a147:	ff 35 34 df 02 c0    	push   DWORD PTR ds:0xc002df34
c001a14d:	56                   	push   esi
c001a14e:	50                   	push   eax
c001a14f:	e8 54 8b ff ff       	call   c0012ca8 <File::File(char const*, Process*)>
c001a154:	83 c4 10             	add    esp,0x10
c001a157:	85 db                	test   ebx,ebx
c001a159:	74 7e                	je     c001a1d9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a15b:	51                   	push   ecx
c001a15c:	51                   	push   ecx
c001a15d:	6a 01                	push   0x1
c001a15f:	53                   	push   ebx
c001a160:	e8 a7 8b ff ff       	call   c0012d0c <File::open(FileOpenMode)>
c001a165:	83 c4 10             	add    esp,0x10
c001a168:	85 c0                	test   eax,eax
c001a16a:	74 08                	je     c001a174 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001a16c:	83 ec 0c             	sub    esp,0xc
c001a16f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a171:	53                   	push   ebx
c001a172:	eb 5f                	jmp    c001a1d3 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001a174:	52                   	push   edx
c001a175:	8d 44 24 17          	lea    eax,[esp+0x17]
c001a179:	50                   	push   eax
c001a17a:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a17e:	50                   	push   eax
c001a17f:	53                   	push   ebx
c001a180:	e8 33 8e ff ff       	call   c0012fb8 <File::stat(unsigned long long*, bool*)>
c001a185:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a189:	83 c4 10             	add    esp,0x10
c001a18c:	89 c1                	mov    ecx,eax
c001a18e:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001a192:	74 31                	je     c001a1c5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a194:	83 ec 0c             	sub    esp,0xc
c001a197:	50                   	push   eax
c001a198:	e8 37 53 ff ff       	call   c000f4d4 <malloc>
c001a19d:	89 c6                	mov    esi,eax
c001a19f:	58                   	pop    eax
c001a1a0:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a1a2:	8d 54 24 20          	lea    edx,[esp+0x20]
c001a1a6:	52                   	push   edx
c001a1a7:	56                   	push   esi
c001a1a8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a1ac:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a1b0:	53                   	push   ebx
c001a1b1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a1b4:	83 c4 20             	add    esp,0x20
c001a1b7:	85 c0                	test   eax,eax
c001a1b9:	75 0a                	jne    c001a1c5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a1bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a1bf:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001a1c3:	74 18                	je     c001a1dd <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001a1c5:	83 ec 0c             	sub    esp,0xc
c001a1c8:	53                   	push   ebx
c001a1c9:	e8 9c 8b ff ff       	call   c0012d6a <File::close()>
c001a1ce:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a1d0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a1d3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a1d6:	83 c4 10             	add    esp,0x10
c001a1d9:	31 c0                	xor    eax,eax
c001a1db:	eb 3b                	jmp    c001a218 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001a1dd:	83 ec 0c             	sub    esp,0xc
c001a1e0:	53                   	push   ebx
c001a1e1:	e8 84 8b ff ff       	call   c0012d6a <File::close()>
c001a1e6:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a1e8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a1eb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a1ee:	83 c4 0c             	add    esp,0xc
c001a1f1:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a1f8:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a1ff:	56                   	push   esi
c001a200:	e8 70 fd ff ff       	call   c0019f75 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001a205:	89 34 24             	mov    DWORD PTR [esp],esi
c001a208:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001a20c:	e8 d3 52 ff ff       	call   c000f4e4 <free>
c001a211:	83 c4 10             	add    esp,0x10
c001a214:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001a218:	81 c4 20 01 00 00    	add    esp,0x120
c001a21e:	5b                   	pop    ebx
c001a21f:	5e                   	pop    esi
c001a220:	5f                   	pop    edi
c001a221:	c3                   	ret    

c001a222 <Reg::getLine(char*, char*, char*)>:
c001a222:	57                   	push   edi
c001a223:	56                   	push   esi
c001a224:	53                   	push   ebx
c001a225:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a229:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a22d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001a231:	57                   	push   edi
c001a232:	56                   	push   esi
c001a233:	53                   	push   ebx
c001a234:	68 a9 a4 02 c0       	push   0xc002a4a9
c001a239:	e8 8f fe ff ff       	call   c001a0cd <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001a23e:	83 c4 10             	add    esp,0x10
c001a241:	84 c0                	test   al,al
c001a243:	75 10                	jne    c001a255 <Reg::getLine(char*, char*, char*)+0x33>
c001a245:	57                   	push   edi
c001a246:	56                   	push   esi
c001a247:	53                   	push   ebx
c001a248:	68 ce a4 02 c0       	push   0xc002a4ce
c001a24d:	e8 7b fe ff ff       	call   c001a0cd <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001a252:	83 c4 10             	add    esp,0x10
c001a255:	5b                   	pop    ebx
c001a256:	5e                   	pop    esi
c001a257:	5f                   	pop    edi
c001a258:	c3                   	ret    

c001a259 <Reg::readInt(char*, char*, int*)>:
c001a259:	55                   	push   ebp
c001a25a:	57                   	push   edi
c001a25b:	56                   	push   esi
c001a25c:	53                   	push   ebx
c001a25d:	81 ec f0 00 00 00    	sub    esp,0xf0
c001a263:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001a267:	57                   	push   edi
c001a268:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001a26f:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001a276:	e8 a7 ff ff ff       	call   c001a222 <Reg::getLine(char*, char*, char*)>
c001a27b:	83 c4 10             	add    esp,0x10
c001a27e:	84 c0                	test   al,al
c001a280:	0f 84 b3 00 00 00    	je     c001a339 <Reg::readInt(char*, char*, int*)+0xe0>
c001a286:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001a28a:	80 fa 2b             	cmp    dl,0x2b
c001a28d:	74 0c                	je     c001a29b <Reg::readInt(char*, char*, int*)+0x42>
c001a28f:	80 fa 2d             	cmp    dl,0x2d
c001a292:	75 0e                	jne    c001a2a2 <Reg::readInt(char*, char*, int*)+0x49>
c001a294:	ba 01 00 00 00       	mov    edx,0x1
c001a299:	eb 0b                	jmp    c001a2a6 <Reg::readInt(char*, char*, int*)+0x4d>
c001a29b:	ba 01 00 00 00       	mov    edx,0x1
c001a2a0:	eb 02                	jmp    c001a2a4 <Reg::readInt(char*, char*, int*)+0x4b>
c001a2a2:	31 d2                	xor    edx,edx
c001a2a4:	31 c0                	xor    eax,eax
c001a2a6:	be 0a 00 00 00       	mov    esi,0xa
c001a2ab:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001a2b0:	75 20                	jne    c001a2d2 <Reg::readInt(char*, char*, int*)+0x79>
c001a2b2:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001a2b6:	80 f9 78             	cmp    cl,0x78
c001a2b9:	75 0a                	jne    c001a2c5 <Reg::readInt(char*, char*, int*)+0x6c>
c001a2bb:	83 c2 02             	add    edx,0x2
c001a2be:	be 10 00 00 00       	mov    esi,0x10
c001a2c3:	eb 0d                	jmp    c001a2d2 <Reg::readInt(char*, char*, int*)+0x79>
c001a2c5:	80 f9 62             	cmp    cl,0x62
c001a2c8:	75 08                	jne    c001a2d2 <Reg::readInt(char*, char*, int*)+0x79>
c001a2ca:	83 c2 02             	add    edx,0x2
c001a2cd:	be 02 00 00 00       	mov    esi,0x2
c001a2d2:	01 d7                	add    edi,edx
c001a2d4:	31 d2                	xor    edx,edx
c001a2d6:	8a 1f                	mov    bl,BYTE PTR [edi]
c001a2d8:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001a2dc:	80 fb 0d             	cmp    bl,0xd
c001a2df:	0f 94 c3             	sete   bl
c001a2e2:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001a2e7:	0f 94 c1             	sete   cl
c001a2ea:	08 cb                	or     bl,cl
c001a2ec:	75 3a                	jne    c001a328 <Reg::readInt(char*, char*, int*)+0xcf>
c001a2ee:	0f af d6             	imul   edx,esi
c001a2f1:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001a2f6:	83 fe 10             	cmp    esi,0x10
c001a2f9:	75 26                	jne    c001a321 <Reg::readInt(char*, char*, int*)+0xc8>
c001a2fb:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001a2ff:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001a302:	89 e9                	mov    ecx,ebp
c001a304:	80 f9 05             	cmp    cl,0x5
c001a307:	77 06                	ja     c001a30f <Reg::readInt(char*, char*, int*)+0xb6>
c001a309:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001a30d:	eb 16                	jmp    c001a325 <Reg::readInt(char*, char*, int*)+0xcc>
c001a30f:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001a313:	83 e9 61             	sub    ecx,0x61
c001a316:	80 f9 05             	cmp    cl,0x5
c001a319:	77 06                	ja     c001a321 <Reg::readInt(char*, char*, int*)+0xc8>
c001a31b:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001a31f:	eb 04                	jmp    c001a325 <Reg::readInt(char*, char*, int*)+0xcc>
c001a321:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001a325:	47                   	inc    edi
c001a326:	eb ae                	jmp    c001a2d6 <Reg::readInt(char*, char*, int*)+0x7d>
c001a328:	84 c0                	test   al,al
c001a32a:	74 02                	je     c001a32e <Reg::readInt(char*, char*, int*)+0xd5>
c001a32c:	f7 da                	neg    edx
c001a32e:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001a335:	89 10                	mov    DWORD PTR [eax],edx
c001a337:	88 d8                	mov    al,bl
c001a339:	81 c4 ec 00 00 00    	add    esp,0xec
c001a33f:	5b                   	pop    ebx
c001a340:	5e                   	pop    esi
c001a341:	5f                   	pop    edi
c001a342:	5d                   	pop    ebp
c001a343:	c3                   	ret    

c001a344 <Reg::readString(char*, char*, char*, int)>:
c001a344:	57                   	push   edi
c001a345:	56                   	push   esi
c001a346:	53                   	push   ebx
c001a347:	81 ec d4 00 00 00    	sub    esp,0xd4
c001a34d:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001a354:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001a358:	57                   	push   edi
c001a359:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001a360:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001a367:	e8 b6 fe ff ff       	call   c001a222 <Reg::getLine(char*, char*, char*)>
c001a36c:	83 c4 10             	add    esp,0x10
c001a36f:	89 c6                	mov    esi,eax
c001a371:	84 c0                	test   al,al
c001a373:	74 44                	je     c001a3b9 <Reg::readString(char*, char*, char*, int)+0x75>
c001a375:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001a37c:	31 c0                	xor    eax,eax
c001a37e:	4a                   	dec    edx
c001a37f:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001a382:	84 c9                	test   cl,cl
c001a384:	74 0f                	je     c001a395 <Reg::readString(char*, char*, char*, int)+0x51>
c001a386:	39 c2                	cmp    edx,eax
c001a388:	7e 0b                	jle    c001a395 <Reg::readString(char*, char*, char*, int)+0x51>
c001a38a:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001a38d:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001a392:	40                   	inc    eax
c001a393:	eb ea                	jmp    c001a37f <Reg::readString(char*, char*, char*, int)+0x3b>
c001a395:	83 ec 0c             	sub    esp,0xc
c001a398:	53                   	push   ebx
c001a399:	e8 0a 63 fe ff       	call   c00006a8 <strlen>
c001a39e:	83 c4 10             	add    esp,0x10
c001a3a1:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001a3a6:	75 11                	jne    c001a3b9 <Reg::readString(char*, char*, char*, int)+0x75>
c001a3a8:	83 ec 0c             	sub    esp,0xc
c001a3ab:	53                   	push   ebx
c001a3ac:	e8 f7 62 fe ff       	call   c00006a8 <strlen>
c001a3b1:	83 c4 10             	add    esp,0x10
c001a3b4:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001a3b9:	81 c4 d0 00 00 00    	add    esp,0xd0
c001a3bf:	89 f0                	mov    eax,esi
c001a3c1:	5b                   	pop    ebx
c001a3c2:	5e                   	pop    esi
c001a3c3:	5f                   	pop    edi
c001a3c4:	c3                   	ret    

c001a3c5 <Reg::readBool(char*, char*, bool*)>:
c001a3c5:	83 ec 20             	sub    esp,0x20
c001a3c8:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a3cc:	50                   	push   eax
c001a3cd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a3d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a3d5:	e8 7f fe ff ff       	call   c001a259 <Reg::readInt(char*, char*, int*)>
c001a3da:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001a3df:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a3e3:	0f 95 02             	setne  BYTE PTR [edx]
c001a3e6:	83 c4 2c             	add    esp,0x2c
c001a3e9:	c3                   	ret    

c001a3ea <Reg::readBoolWithDefault(char*, char*, bool)>:
c001a3ea:	53                   	push   ebx
c001a3eb:	83 ec 1c             	sub    esp,0x1c
c001a3ee:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001a3f2:	8d 44 24 13          	lea    eax,[esp+0x13]
c001a3f6:	50                   	push   eax
c001a3f7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a3fb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a3ff:	e8 c1 ff ff ff       	call   c001a3c5 <Reg::readBool(char*, char*, bool*)>
c001a404:	83 c4 10             	add    esp,0x10
c001a407:	84 c0                	test   al,al
c001a409:	74 04                	je     c001a40f <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001a40b:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001a40f:	88 d8                	mov    al,bl
c001a411:	83 c4 18             	add    esp,0x18
c001a414:	5b                   	pop    ebx
c001a415:	c3                   	ret    

c001a416 <Reg::readIntWithDefault(char*, char*, int)>:
c001a416:	53                   	push   ebx
c001a417:	83 ec 1c             	sub    esp,0x1c
c001a41a:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a41e:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a422:	50                   	push   eax
c001a423:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a427:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a42b:	e8 29 fe ff ff       	call   c001a259 <Reg::readInt(char*, char*, int*)>
c001a430:	83 c4 10             	add    esp,0x10
c001a433:	84 c0                	test   al,al
c001a435:	74 04                	je     c001a43b <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001a437:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001a43b:	89 d8                	mov    eax,ebx
c001a43d:	83 c4 18             	add    esp,0x18
c001a440:	5b                   	pop    ebx
c001a441:	c3                   	ret    

c001a442 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001a442:	57                   	push   edi
c001a443:	56                   	push   esi
c001a444:	53                   	push   ebx
c001a445:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a449:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001a44d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001a451:	56                   	push   esi
c001a452:	53                   	push   ebx
c001a453:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a457:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a45b:	e8 e4 fe ff ff       	call   c001a344 <Reg::readString(char*, char*, char*, int)>
c001a460:	83 c4 10             	add    esp,0x10
c001a463:	84 c0                	test   al,al
c001a465:	75 1b                	jne    c001a482 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001a467:	50                   	push   eax
c001a468:	56                   	push   esi
c001a469:	4e                   	dec    esi
c001a46a:	6a 00                	push   0x0
c001a46c:	53                   	push   ebx
c001a46d:	e8 19 62 fe ff       	call   c000068b <memset>
c001a472:	83 c4 0c             	add    esp,0xc
c001a475:	56                   	push   esi
c001a476:	57                   	push   edi
c001a477:	53                   	push   ebx
c001a478:	89 fb                	mov    ebx,edi
c001a47a:	e8 d6 61 fe ff       	call   c0000655 <memcpy>
c001a47f:	83 c4 10             	add    esp,0x10
c001a482:	89 d8                	mov    eax,ebx
c001a484:	5b                   	pop    ebx
c001a485:	5e                   	pop    esi
c001a486:	5f                   	pop    edi
c001a487:	c3                   	ret    

c001a488 <Sys::exit(regs*)>:
c001a488:	83 ec 18             	sub    esp,0x18
c001a48b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a48f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001a492:	e8 66 33 00 00       	call   c001d7fd <terminateTask(int)>
c001a497:	83 c8 ff             	or     eax,0xffffffff
c001a49a:	83 c4 1c             	add    esp,0x1c
c001a49d:	89 c2                	mov    edx,eax
c001a49f:	c3                   	ret    

c001a4a0 <Sys::getCwd(regs*)>:
c001a4a0:	83 ec 10             	sub    esp,0x10
c001a4a3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a4a7:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001a4aa:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001a4ad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a4b2:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a4b5:	e8 5f 8b ff ff       	call   c0013019 <getcwd(Process*, char*, int)>
c001a4ba:	83 c4 1c             	add    esp,0x1c
c001a4bd:	99                   	cdq    
c001a4be:	c3                   	ret    

c001a4bf <Sys::getPID(regs*)>:
c001a4bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a4c4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a4c7:	8b 00                	mov    eax,DWORD PTR [eax]
c001a4c9:	99                   	cdq    
c001a4ca:	c3                   	ret    

c001a4cb <Sys::loadDLL(regs*)>:
c001a4cb:	56                   	push   esi
c001a4cc:	53                   	push   ebx
c001a4cd:	31 d2                	xor    edx,edx
c001a4cf:	51                   	push   ecx
c001a4d0:	b8 01 00 00 00       	mov    eax,0x1
c001a4d5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a4d9:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001a4dd:	0f 84 8c 00 00 00    	je     c001a56f <Sys::loadDLL(regs*)+0xa4>
c001a4e3:	83 ec 0c             	sub    esp,0xc
c001a4e6:	68 14 01 00 00       	push   0x114
c001a4eb:	e8 e4 4f ff ff       	call   c000f4d4 <malloc>
c001a4f0:	83 c4 0c             	add    esp,0xc
c001a4f3:	89 c3                	mov    ebx,eax
c001a4f5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a4fa:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a4fd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001a500:	53                   	push   ebx
c001a501:	e8 a2 87 ff ff       	call   c0012ca8 <File::File(char const*, Process*)>
c001a506:	83 c4 10             	add    esp,0x10
c001a509:	31 d2                	xor    edx,edx
c001a50b:	b8 02 00 00 00       	mov    eax,0x2
c001a510:	85 db                	test   ebx,ebx
c001a512:	74 5b                	je     c001a56f <Sys::loadDLL(regs*)+0xa4>
c001a514:	83 ec 0c             	sub    esp,0xc
c001a517:	53                   	push   ebx
c001a518:	e8 5d 8a ff ff       	call   c0012f7a <File::exists()>
c001a51d:	83 c4 10             	add    esp,0x10
c001a520:	84 c0                	test   al,al
c001a522:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a524:	75 11                	jne    c001a537 <Sys::loadDLL(regs*)+0x6c>
c001a526:	83 ec 0c             	sub    esp,0xc
c001a529:	53                   	push   ebx
c001a52a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a52d:	83 c4 10             	add    esp,0x10
c001a530:	b8 03 00 00 00       	mov    eax,0x3
c001a535:	eb 36                	jmp    c001a56d <Sys::loadDLL(regs*)+0xa2>
c001a537:	83 ec 0c             	sub    esp,0xc
c001a53a:	53                   	push   ebx
c001a53b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a53e:	58                   	pop    eax
c001a53f:	5a                   	pop    edx
c001a540:	6a 00                	push   0x0
c001a542:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001a545:	e8 fc 21 00 00       	call   c001c746 <Thr::loadDLL(char const*, bool)>
c001a54a:	83 c4 10             	add    esp,0x10
c001a54d:	89 c1                	mov    ecx,eax
c001a54f:	31 d2                	xor    edx,edx
c001a551:	b8 04 00 00 00       	mov    eax,0x4
c001a556:	85 c9                	test   ecx,ecx
c001a558:	74 15                	je     c001a56f <Sys::loadDLL(regs*)+0xa4>
c001a55a:	53                   	push   ebx
c001a55b:	53                   	push   ebx
c001a55c:	ff 35 e8 c9 02 c0    	push   DWORD PTR ds:0xc002c9e8
c001a562:	51                   	push   ecx
c001a563:	e8 ed 23 00 00       	call   c001c955 <Thr::executeDLL(unsigned long, void*)>
c001a568:	83 c4 10             	add    esp,0x10
c001a56b:	31 c0                	xor    eax,eax
c001a56d:	31 d2                	xor    edx,edx
c001a56f:	59                   	pop    ecx
c001a570:	5b                   	pop    ebx
c001a571:	5e                   	pop    esi
c001a572:	c3                   	ret    

c001a573 <Sys::read(regs*)>:
c001a573:	57                   	push   edi
c001a574:	56                   	push   esi
c001a575:	53                   	push   ebx
c001a576:	83 ec 10             	sub    esp,0x10
c001a579:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a57d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a580:	83 f8 02             	cmp    eax,0x2
c001a583:	77 10                	ja     c001a595 <Sys::read(regs*)+0x22>
c001a585:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a58a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a58d:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001a593:	eb 0e                	jmp    c001a5a3 <Sys::read(regs*)+0x30>
c001a595:	83 ec 0c             	sub    esp,0xc
c001a598:	50                   	push   eax
c001a599:	e8 95 70 ff ff       	call   c0011633 <getFromFileDescriptor(int)>
c001a59e:	83 c4 10             	add    esp,0x10
c001a5a1:	89 c1                	mov    ecx,eax
c001a5a3:	83 c8 ff             	or     eax,0xffffffff
c001a5a6:	85 c9                	test   ecx,ecx
c001a5a8:	89 c2                	mov    edx,eax
c001a5aa:	74 28                	je     c001a5d4 <Sys::read(regs*)+0x61>
c001a5ac:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a5b4:	31 ff                	xor    edi,edi
c001a5b6:	83 ec 0c             	sub    esp,0xc
c001a5b9:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a5bb:	8d 54 24 18          	lea    edx,[esp+0x18]
c001a5bf:	52                   	push   edx
c001a5c0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a5c3:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001a5c6:	57                   	push   edi
c001a5c7:	56                   	push   esi
c001a5c8:	51                   	push   ecx
c001a5c9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a5cc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a5d0:	83 c4 20             	add    esp,0x20
c001a5d3:	99                   	cdq    
c001a5d4:	83 c4 10             	add    esp,0x10
c001a5d7:	5b                   	pop    ebx
c001a5d8:	5e                   	pop    esi
c001a5d9:	5f                   	pop    edi
c001a5da:	c3                   	ret    

c001a5db <Sys::sbrk(regs*)>:
c001a5db:	56                   	push   esi
c001a5dc:	53                   	push   ebx
c001a5dd:	50                   	push   eax
c001a5de:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a5e3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a5e7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a5ea:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001a5ed:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001a5f3:	85 db                	test   ebx,ebx
c001a5f5:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001a5f8:	74 02                	je     c001a5fc <Sys::sbrk(regs*)+0x21>
c001a5fa:	79 06                	jns    c001a602 <Sys::sbrk(regs*)+0x27>
c001a5fc:	89 f0                	mov    eax,esi
c001a5fe:	31 d2                	xor    edx,edx
c001a600:	eb 2a                	jmp    c001a62c <Sys::sbrk(regs*)+0x51>
c001a602:	83 c8 ff             	or     eax,0xffffffff
c001a605:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001a60b:	89 c2                	mov    edx,eax
c001a60d:	77 1d                	ja     c001a62c <Sys::sbrk(regs*)+0x51>
c001a60f:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001a615:	50                   	push   eax
c001a616:	c1 ea 0c             	shr    edx,0xc
c001a619:	68 07 04 00 00       	push   0x407
c001a61e:	52                   	push   edx
c001a61f:	51                   	push   ecx
c001a620:	e8 2f 79 ff ff       	call   c0011f54 <VAS::allocatePages(int, int)>
c001a625:	89 f0                	mov    eax,esi
c001a627:	31 d2                	xor    edx,edx
c001a629:	83 c4 10             	add    esp,0x10
c001a62c:	59                   	pop    ecx
c001a62d:	5b                   	pop    ebx
c001a62e:	5e                   	pop    esi
c001a62f:	c3                   	ret    

c001a630 <Sys::setCwd(regs*)>:
c001a630:	83 ec 14             	sub    esp,0x14
c001a633:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a637:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001a63a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a63f:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a642:	e8 fc 89 ff ff       	call   c0013043 <setcwd(Process*, char*)>
c001a647:	83 c4 1c             	add    esp,0x1c
c001a64a:	99                   	cdq    
c001a64b:	c3                   	ret    

c001a64c <Sys::setTime(regs*)>:
c001a64c:	55                   	push   ebp
c001a64d:	31 c9                	xor    ecx,ecx
c001a64f:	57                   	push   edi
c001a650:	bd 0c 00 00 00       	mov    ebp,0xc
c001a655:	56                   	push   esi
c001a656:	53                   	push   ebx
c001a657:	31 db                	xor    ebx,ebx
c001a659:	83 ec 10             	sub    esp,0x10
c001a65c:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001a660:	8b 77 20             	mov    esi,DWORD PTR [edi+0x20]
c001a663:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001a666:	89 c2                	mov    edx,eax
c001a668:	c1 e8 05             	shr    eax,0x5
c001a66b:	83 e2 1f             	and    edx,0x1f
c001a66e:	42                   	inc    edx
c001a66f:	88 d1                	mov    cl,dl
c001a671:	31 d2                	xor    edx,edx
c001a673:	f7 f5                	div    ebp
c001a675:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001a679:	88 d5                	mov    ch,dl
c001a67b:	bf 3c 00 00 00       	mov    edi,0x3c
c001a680:	c1 e0 10             	shl    eax,0x10
c001a683:	0f b7 d1             	movzx  edx,cx
c001a686:	89 dd                	mov    ebp,ebx
c001a688:	09 c2                	or     edx,eax
c001a68a:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001a690:	89 d1                	mov    ecx,edx
c001a692:	89 f0                	mov    eax,esi
c001a694:	31 d2                	xor    edx,edx
c001a696:	f7 f7                	div    edi
c001a698:	c1 e2 10             	shl    edx,0x10
c001a69b:	09 d5                	or     ebp,edx
c001a69d:	31 d2                	xor    edx,edx
c001a69f:	89 eb                	mov    ebx,ebp
c001a6a1:	f7 f7                	div    edi
c001a6a3:	bf 10 0e 00 00       	mov    edi,0xe10
c001a6a8:	88 d7                	mov    bh,dl
c001a6aa:	89 f0                	mov    eax,esi
c001a6ac:	31 d2                	xor    edx,edx
c001a6ae:	f7 f7                	div    edi
c001a6b0:	bf 18 00 00 00       	mov    edi,0x18
c001a6b5:	31 d2                	xor    edx,edx
c001a6b7:	f7 f7                	div    edi
c001a6b9:	a1 e8 c9 02 c0       	mov    eax,ds:0xc002c9e8
c001a6be:	88 d3                	mov    bl,dl
c001a6c0:	53                   	push   ebx
c001a6c1:	51                   	push   ecx
c001a6c2:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001a6c8:	e8 7f 91 ff ff       	call   c001384c <Clock::setTimeInDatetimeLocal(datetime_t)>
c001a6cd:	83 c4 1c             	add    esp,0x1c
c001a6d0:	0f b6 c0             	movzx  eax,al
c001a6d3:	5b                   	pop    ebx
c001a6d4:	31 d2                	xor    edx,edx
c001a6d6:	5e                   	pop    esi
c001a6d7:	5f                   	pop    edi
c001a6d8:	5d                   	pop    ebp
c001a6d9:	c3                   	ret    

c001a6da <Sys::write(regs*)>:
c001a6da:	57                   	push   edi
c001a6db:	56                   	push   esi
c001a6dc:	53                   	push   ebx
c001a6dd:	83 ec 10             	sub    esp,0x10
c001a6e0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a6e4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a6e7:	83 f8 02             	cmp    eax,0x2
c001a6ea:	77 10                	ja     c001a6fc <Sys::write(regs*)+0x22>
c001a6ec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a6f1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a6f4:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001a6fa:	eb 0e                	jmp    c001a70a <Sys::write(regs*)+0x30>
c001a6fc:	83 ec 0c             	sub    esp,0xc
c001a6ff:	50                   	push   eax
c001a700:	e8 2e 6f ff ff       	call   c0011633 <getFromFileDescriptor(int)>
c001a705:	83 c4 10             	add    esp,0x10
c001a708:	89 c1                	mov    ecx,eax
c001a70a:	83 c8 ff             	or     eax,0xffffffff
c001a70d:	85 c9                	test   ecx,ecx
c001a70f:	89 c2                	mov    edx,eax
c001a711:	74 28                	je     c001a73b <Sys::write(regs*)+0x61>
c001a713:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a71b:	31 ff                	xor    edi,edi
c001a71d:	83 ec 0c             	sub    esp,0xc
c001a720:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a722:	8d 54 24 18          	lea    edx,[esp+0x18]
c001a726:	52                   	push   edx
c001a727:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a72a:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001a72d:	57                   	push   edi
c001a72e:	56                   	push   esi
c001a72f:	51                   	push   ecx
c001a730:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001a733:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a737:	83 c4 20             	add    esp,0x20
c001a73a:	99                   	cdq    
c001a73b:	83 c4 10             	add    esp,0x10
c001a73e:	5b                   	pop    ebx
c001a73f:	5e                   	pop    esi
c001a740:	5f                   	pop    edi
c001a741:	c3                   	ret    

c001a742 <Sys::yield(regs*)>:
c001a742:	57                   	push   edi
c001a743:	56                   	push   esi
c001a744:	53                   	push   ebx
c001a745:	e8 70 26 00 00       	call   c001cdba <lockScheduler()>
c001a74a:	e8 a7 29 00 00       	call   c001d0f6 <schedule()>
c001a74f:	e8 68 26 00 00       	call   c001cdbc <unlockScheduler()>
c001a754:	8b 35 70 d0 02 c0    	mov    esi,DWORD PTR ds:0xc002d070
c001a75a:	8b 3d 74 d0 02 c0    	mov    edi,DWORD PTR ds:0xc002d074
c001a760:	89 f0                	mov    eax,esi
c001a762:	89 fb                	mov    ebx,edi
c001a764:	89 f1                	mov    ecx,esi
c001a766:	c1 e0 07             	shl    eax,0x7
c001a769:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001a76d:	25 80 30 0f 00       	and    eax,0xf3080
c001a772:	c1 eb 17             	shr    ebx,0x17
c001a775:	31 c8                	xor    eax,ecx
c001a777:	89 da                	mov    edx,ebx
c001a779:	5b                   	pop    ebx
c001a77a:	5e                   	pop    esi
c001a77b:	5f                   	pop    edi
c001a77c:	c3                   	ret    

c001a77d <sysCallSeekDir(regs*)>:
c001a77d:	31 c0                	xor    eax,eax
c001a77f:	31 d2                	xor    edx,edx
c001a781:	c3                   	ret    

c001a782 <sysCallTellDir(regs*)>:
c001a782:	31 c0                	xor    eax,eax
c001a784:	31 d2                	xor    edx,edx
c001a786:	c3                   	ret    

c001a787 <sysCallVerify(regs*)>:
c001a787:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a78b:	31 d2                	xor    edx,edx
c001a78d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001a790:	c3                   	ret    

c001a791 <sysCallGetArgc(regs*)>:
c001a791:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a796:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a799:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001a79f:	99                   	cdq    
c001a7a0:	c3                   	ret    

c001a7a1 <sysFormatDisk(regs*)>:
c001a7a1:	56                   	push   esi
c001a7a2:	53                   	push   ebx
c001a7a3:	53                   	push   ebx
c001a7a4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a7a8:	8b 1d 68 cb 02 c0    	mov    ebx,DWORD PTR ds:0xc002cb68
c001a7ae:	eb 25                	jmp    c001a7d5 <sysFormatDisk(regs*)+0x34>
c001a7b0:	83 ec 0c             	sub    esp,0xc
c001a7b3:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001a7b6:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a7b8:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001a7bb:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001a7be:	50                   	push   eax
c001a7bf:	ff 34 85 00 d0 02 c0 	push   DWORD PTR [eax*4-0x3ffd3000]
c001a7c6:	53                   	push   ebx
c001a7c7:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001a7ca:	83 c4 20             	add    esp,0x20
c001a7cd:	83 f8 08             	cmp    eax,0x8
c001a7d0:	75 12                	jne    c001a7e4 <sysFormatDisk(regs*)+0x43>
c001a7d2:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001a7d5:	85 db                	test   ebx,ebx
c001a7d7:	75 d7                	jne    c001a7b0 <sysFormatDisk(regs*)+0xf>
c001a7d9:	59                   	pop    ecx
c001a7da:	b8 03 00 00 00       	mov    eax,0x3
c001a7df:	31 d2                	xor    edx,edx
c001a7e1:	5b                   	pop    ebx
c001a7e2:	5e                   	pop    esi
c001a7e3:	c3                   	ret    
c001a7e4:	85 c0                	test   eax,eax
c001a7e6:	74 1b                	je     c001a803 <sysFormatDisk(regs*)+0x62>
c001a7e8:	83 f8 09             	cmp    eax,0x9
c001a7eb:	74 0b                	je     c001a7f8 <sysFormatDisk(regs*)+0x57>
c001a7ed:	59                   	pop    ecx
c001a7ee:	b8 02 00 00 00       	mov    eax,0x2
c001a7f3:	31 d2                	xor    edx,edx
c001a7f5:	5b                   	pop    ebx
c001a7f6:	5e                   	pop    esi
c001a7f7:	c3                   	ret    
c001a7f8:	59                   	pop    ecx
c001a7f9:	b8 01 00 00 00       	mov    eax,0x1
c001a7fe:	31 d2                	xor    edx,edx
c001a800:	5b                   	pop    ebx
c001a801:	5e                   	pop    esi
c001a802:	c3                   	ret    
c001a803:	59                   	pop    ecx
c001a804:	31 c0                	xor    eax,eax
c001a806:	31 d2                	xor    edx,edx
c001a808:	5b                   	pop    ebx
c001a809:	5e                   	pop    esi
c001a80a:	c3                   	ret    

c001a80b <sysSetDiskVolumeLabel(regs*)>:
c001a80b:	56                   	push   esi
c001a80c:	53                   	push   ebx
c001a80d:	53                   	push   ebx
c001a80e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a812:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001a815:	83 f8 19             	cmp    eax,0x19
c001a818:	77 29                	ja     c001a843 <sysSetDiskVolumeLabel(regs*)+0x38>
c001a81a:	8b 0c 85 00 d0 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd3000]
c001a821:	85 c9                	test   ecx,ecx
c001a823:	74 1e                	je     c001a843 <sysSetDiskVolumeLabel(regs*)+0x38>
c001a825:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001a828:	85 d2                	test   edx,edx
c001a82a:	74 17                	je     c001a843 <sysSetDiskVolumeLabel(regs*)+0x38>
c001a82c:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001a832:	8b 33                	mov    esi,DWORD PTR [ebx]
c001a834:	52                   	push   edx
c001a835:	50                   	push   eax
c001a836:	51                   	push   ecx
c001a837:	53                   	push   ebx
c001a838:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001a83b:	83 c4 10             	add    esp,0x10
c001a83e:	99                   	cdq    
c001a83f:	59                   	pop    ecx
c001a840:	5b                   	pop    ebx
c001a841:	5e                   	pop    esi
c001a842:	c3                   	ret    
c001a843:	59                   	pop    ecx
c001a844:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001a849:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a84e:	5b                   	pop    ebx
c001a84f:	5e                   	pop    esi
c001a850:	c3                   	ret    

c001a851 <sysGetDiskVolumeLabel(regs*)>:
c001a851:	57                   	push   edi
c001a852:	56                   	push   esi
c001a853:	53                   	push   ebx
c001a854:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a858:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001a85b:	83 fa 19             	cmp    edx,0x19
c001a85e:	77 34                	ja     c001a894 <sysGetDiskVolumeLabel(regs*)+0x43>
c001a860:	8b 0c 95 00 d0 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd3000]
c001a867:	85 c9                	test   ecx,ecx
c001a869:	74 29                	je     c001a894 <sysGetDiskVolumeLabel(regs*)+0x43>
c001a86b:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001a86e:	85 db                	test   ebx,ebx
c001a870:	74 22                	je     c001a894 <sysGetDiskVolumeLabel(regs*)+0x43>
c001a872:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001a875:	85 c0                	test   eax,eax
c001a877:	74 1b                	je     c001a894 <sysGetDiskVolumeLabel(regs*)+0x43>
c001a879:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001a87f:	83 ec 0c             	sub    esp,0xc
c001a882:	8b 3e                	mov    edi,DWORD PTR [esi]
c001a884:	50                   	push   eax
c001a885:	53                   	push   ebx
c001a886:	52                   	push   edx
c001a887:	51                   	push   ecx
c001a888:	56                   	push   esi
c001a889:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001a88c:	83 c4 20             	add    esp,0x20
c001a88f:	99                   	cdq    
c001a890:	5b                   	pop    ebx
c001a891:	5e                   	pop    esi
c001a892:	5f                   	pop    edi
c001a893:	c3                   	ret    
c001a894:	5b                   	pop    ebx
c001a895:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001a89a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a89f:	5e                   	pop    esi
c001a8a0:	5f                   	pop    edi
c001a8a1:	c3                   	ret    

c001a8a2 <sysShutdown(regs*)>:
c001a8a2:	83 ec 0c             	sub    esp,0xc
c001a8a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a8a9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001a8ac:	85 c0                	test   eax,eax
c001a8ae:	74 18                	je     c001a8c8 <sysShutdown(regs*)+0x26>
c001a8b0:	83 f8 01             	cmp    eax,0x1
c001a8b3:	74 38                	je     c001a8ed <sysShutdown(regs*)+0x4b>
c001a8b5:	83 f8 02             	cmp    eax,0x2
c001a8b8:	74 24                	je     c001a8de <sysShutdown(regs*)+0x3c>
c001a8ba:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a8bf:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a8c4:	83 c4 0c             	add    esp,0xc
c001a8c7:	c3                   	ret    
c001a8c8:	a1 e8 c9 02 c0       	mov    eax,ds:0xc002c9e8
c001a8cd:	8b 10                	mov    edx,DWORD PTR [eax]
c001a8cf:	6a 00                	push   0x0
c001a8d1:	6a 00                	push   0x0
c001a8d3:	6a 00                	push   0x0
c001a8d5:	50                   	push   eax
c001a8d6:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001a8d9:	83 c4 10             	add    esp,0x10
c001a8dc:	eb dc                	jmp    c001a8ba <sysShutdown(regs*)+0x18>
c001a8de:	a1 e8 c9 02 c0       	mov    eax,ds:0xc002c9e8
c001a8e3:	8b 10                	mov    edx,DWORD PTR [eax]
c001a8e5:	6a 00                	push   0x0
c001a8e7:	6a 00                	push   0x0
c001a8e9:	6a 01                	push   0x1
c001a8eb:	eb e8                	jmp    c001a8d5 <sysShutdown(regs*)+0x33>
c001a8ed:	a1 80 d0 02 c0       	mov    eax,ds:0xc002d080
c001a8f2:	85 c0                	test   eax,eax
c001a8f4:	74 02                	je     c001a8f8 <sysShutdown(regs*)+0x56>
c001a8f6:	ff d0                	call   eax
c001a8f8:	31 c0                	xor    eax,eax
c001a8fa:	31 d2                	xor    edx,edx
c001a8fc:	83 c4 0c             	add    esp,0xc
c001a8ff:	c3                   	ret    

c001a900 <sysCallRealpath(regs*)>:
c001a900:	83 ec 0c             	sub    esp,0xc
c001a903:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a907:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001a90a:	85 d2                	test   edx,edx
c001a90c:	74 07                	je     c001a915 <sysCallRealpath(regs*)+0x15>
c001a90e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001a911:	85 c0                	test   eax,eax
c001a913:	75 0b                	jne    c001a920 <sysCallRealpath(regs*)+0x20>
c001a915:	b8 01 00 00 00       	mov    eax,0x1
c001a91a:	31 d2                	xor    edx,edx
c001a91c:	83 c4 0c             	add    esp,0xc
c001a91f:	c3                   	ret    
c001a920:	51                   	push   ecx
c001a921:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001a927:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001a92a:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001a930:	51                   	push   ecx
c001a931:	52                   	push   edx
c001a932:	50                   	push   eax
c001a933:	e8 c6 81 ff ff       	call   c0012afe <standardiseFiles(char*, char const*, char const*)>
c001a938:	83 c4 10             	add    esp,0x10
c001a93b:	31 c0                	xor    eax,eax
c001a93d:	31 d2                	xor    edx,edx
c001a93f:	83 c4 0c             	add    esp,0xc
c001a942:	c3                   	ret    

c001a943 <sysCallReadDir(regs*)>:
c001a943:	53                   	push   ebx
c001a944:	83 ec 18             	sub    esp,0x18
c001a947:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a94b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001a94e:	83 f8 02             	cmp    eax,0x2
c001a951:	76 53                	jbe    c001a9a6 <sysCallReadDir(regs*)+0x63>
c001a953:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001a956:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001a95c:	77 4f                	ja     c001a9ad <sysCallReadDir(regs*)+0x6a>
c001a95e:	83 ec 0c             	sub    esp,0xc
c001a961:	50                   	push   eax
c001a962:	e8 cc 6c ff ff       	call   c0011633 <getFromFileDescriptor(int)>
c001a967:	83 c4 10             	add    esp,0x10
c001a96a:	85 c0                	test   eax,eax
c001a96c:	74 50                	je     c001a9be <sysCallReadDir(regs*)+0x7b>
c001a96e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a976:	83 ec 0c             	sub    esp,0xc
c001a979:	8b 10                	mov    edx,DWORD PTR [eax]
c001a97b:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001a97f:	51                   	push   ecx
c001a980:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a983:	6a 00                	push   0x0
c001a985:	68 10 01 00 00       	push   0x110
c001a98a:	50                   	push   eax
c001a98b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001a98e:	83 c4 20             	add    esp,0x20
c001a991:	85 c0                	test   eax,eax
c001a993:	74 38                	je     c001a9cd <sysCallReadDir(regs*)+0x8a>
c001a995:	83 f8 07             	cmp    eax,0x7
c001a998:	74 0c                	je     c001a9a6 <sysCallReadDir(regs*)+0x63>
c001a99a:	b8 02 00 00 00       	mov    eax,0x2
c001a99f:	31 d2                	xor    edx,edx
c001a9a1:	83 c4 18             	add    esp,0x18
c001a9a4:	5b                   	pop    ebx
c001a9a5:	c3                   	ret    
c001a9a6:	b8 01 00 00 00       	mov    eax,0x1
c001a9ab:	eb f2                	jmp    c001a99f <sysCallReadDir(regs*)+0x5c>
c001a9ad:	83 ec 08             	sub    esp,0x8
c001a9b0:	52                   	push   edx
c001a9b1:	68 ec a4 02 c0       	push   0xc002a4ec
c001a9b6:	e8 be 7d ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c001a9bb:	83 c4 10             	add    esp,0x10
c001a9be:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a9c3:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a9c8:	83 c4 18             	add    esp,0x18
c001a9cb:	5b                   	pop    ebx
c001a9cc:	c3                   	ret    
c001a9cd:	31 c0                	xor    eax,eax
c001a9cf:	eb ce                	jmp    c001a99f <sysCallReadDir(regs*)+0x5c>

c001a9d1 <sysCallIsATTY(regs*)>:
c001a9d1:	83 ec 0c             	sub    esp,0xc
c001a9d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9d8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001a9db:	83 f8 02             	cmp    eax,0x2
c001a9de:	76 07                	jbe    c001a9e7 <sysCallIsATTY(regs*)+0x16>
c001a9e0:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001a9e5:	75 26                	jne    c001aa0d <sysCallIsATTY(regs*)+0x3c>
c001a9e7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a9ec:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a9ef:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a9f5:	85 c0                	test   eax,eax
c001a9f7:	74 24                	je     c001aa1d <sysCallIsATTY(regs*)+0x4c>
c001a9f9:	83 ec 0c             	sub    esp,0xc
c001a9fc:	8b 10                	mov    edx,DWORD PTR [eax]
c001a9fe:	50                   	push   eax
c001a9ff:	ff 12                	call   DWORD PTR [edx]
c001aa01:	31 d2                	xor    edx,edx
c001aa03:	0f b6 c0             	movzx  eax,al
c001aa06:	83 c4 10             	add    esp,0x10
c001aa09:	83 c4 0c             	add    esp,0xc
c001aa0c:	c3                   	ret    
c001aa0d:	83 ec 0c             	sub    esp,0xc
c001aa10:	50                   	push   eax
c001aa11:	e8 1d 6c ff ff       	call   c0011633 <getFromFileDescriptor(int)>
c001aa16:	83 c4 10             	add    esp,0x10
c001aa19:	85 c0                	test   eax,eax
c001aa1b:	75 dc                	jne    c001a9f9 <sysCallIsATTY(regs*)+0x28>
c001aa1d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001aa22:	ba ff ff ff ff       	mov    edx,0xffffffff
c001aa27:	83 c4 0c             	add    esp,0xc
c001aa2a:	c3                   	ret    

c001aa2b <sysCallSeek(regs*)>:
c001aa2b:	53                   	push   ebx
c001aa2c:	83 ec 08             	sub    esp,0x8
c001aa2f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001aa33:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001aa36:	83 f8 02             	cmp    eax,0x2
c001aa39:	76 4a                	jbe    c001aa85 <sysCallSeek(regs*)+0x5a>
c001aa3b:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001aa40:	77 32                	ja     c001aa74 <sysCallSeek(regs*)+0x49>
c001aa42:	83 ec 0c             	sub    esp,0xc
c001aa45:	50                   	push   eax
c001aa46:	e8 e8 6b ff ff       	call   c0011633 <getFromFileDescriptor(int)>
c001aa4b:	83 c4 0c             	add    esp,0xc
c001aa4e:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001aa51:	31 db                	xor    ebx,ebx
c001aa53:	53                   	push   ebx
c001aa54:	51                   	push   ecx
c001aa55:	50                   	push   eax
c001aa56:	e8 6f 83 ff ff       	call   c0012dca <File::seek(unsigned long long)>
c001aa5b:	83 c4 10             	add    esp,0x10
c001aa5e:	85 c0                	test   eax,eax
c001aa60:	0f 95 c0             	setne  al
c001aa63:	31 d2                	xor    edx,edx
c001aa65:	0f b6 c0             	movzx  eax,al
c001aa68:	f7 d8                	neg    eax
c001aa6a:	83 d2 00             	adc    edx,0x0
c001aa6d:	83 c4 08             	add    esp,0x8
c001aa70:	f7 da                	neg    edx
c001aa72:	5b                   	pop    ebx
c001aa73:	c3                   	ret    
c001aa74:	83 ec 08             	sub    esp,0x8
c001aa77:	50                   	push   eax
c001aa78:	68 5b a5 02 c0       	push   0xc002a55b
c001aa7d:	e8 f7 7c ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c001aa82:	83 c4 10             	add    esp,0x10
c001aa85:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001aa8a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001aa8f:	83 c4 08             	add    esp,0x8
c001aa92:	5b                   	pop    ebx
c001aa93:	c3                   	ret    

c001aa94 <sysCallTell(regs*)>:
c001aa94:	53                   	push   ebx
c001aa95:	83 ec 08             	sub    esp,0x8
c001aa98:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001aa9c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001aa9f:	83 f8 02             	cmp    eax,0x2
c001aaa2:	76 5e                	jbe    c001ab02 <sysCallTell(regs*)+0x6e>
c001aaa4:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001aaa9:	77 2d                	ja     c001aad8 <sysCallTell(regs*)+0x44>
c001aaab:	83 ec 0c             	sub    esp,0xc
c001aaae:	50                   	push   eax
c001aaaf:	e8 7f 6b ff ff       	call   c0011633 <getFromFileDescriptor(int)>
c001aab4:	5a                   	pop    edx
c001aab5:	59                   	pop    ecx
c001aab6:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001aab9:	50                   	push   eax
c001aaba:	e8 61 83 ff ff       	call   c0012e20 <File::tell(unsigned long long*)>
c001aabf:	83 c4 10             	add    esp,0x10
c001aac2:	85 c0                	test   eax,eax
c001aac4:	0f 95 c0             	setne  al
c001aac7:	31 d2                	xor    edx,edx
c001aac9:	0f b6 c0             	movzx  eax,al
c001aacc:	f7 d8                	neg    eax
c001aace:	83 d2 00             	adc    edx,0x0
c001aad1:	83 c4 08             	add    esp,0x8
c001aad4:	f7 da                	neg    edx
c001aad6:	5b                   	pop    ebx
c001aad7:	c3                   	ret    
c001aad8:	83 ec 08             	sub    esp,0x8
c001aadb:	50                   	push   eax
c001aadc:	68 75 a5 02 c0       	push   0xc002a575
c001aae1:	e8 93 7c ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c001aae6:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001aae9:	83 c4 10             	add    esp,0x10
c001aaec:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001aaf2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001aaf9:	31 d2                	xor    edx,edx
c001aafb:	31 c0                	xor    eax,eax
c001aafd:	83 c4 08             	add    esp,0x8
c001ab00:	5b                   	pop    ebx
c001ab01:	c3                   	ret    
c001ab02:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ab07:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ab0c:	83 c4 08             	add    esp,0x8
c001ab0f:	5b                   	pop    ebx
c001ab10:	c3                   	ret    

c001ab11 <sysCallSize(regs*)>:
c001ab11:	53                   	push   ebx
c001ab12:	83 ec 18             	sub    esp,0x18
c001ab15:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ab19:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ab1c:	83 f8 02             	cmp    eax,0x2
c001ab1f:	76 64                	jbe    c001ab85 <sysCallSize(regs*)+0x74>
c001ab21:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001ab26:	77 33                	ja     c001ab5b <sysCallSize(regs*)+0x4a>
c001ab28:	83 ec 0c             	sub    esp,0xc
c001ab2b:	50                   	push   eax
c001ab2c:	e8 02 6b ff ff       	call   c0011633 <getFromFileDescriptor(int)>
c001ab31:	83 c4 0c             	add    esp,0xc
c001ab34:	8d 54 24 13          	lea    edx,[esp+0x13]
c001ab38:	52                   	push   edx
c001ab39:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001ab3c:	50                   	push   eax
c001ab3d:	e8 76 84 ff ff       	call   c0012fb8 <File::stat(unsigned long long*, bool*)>
c001ab42:	83 c4 10             	add    esp,0x10
c001ab45:	85 c0                	test   eax,eax
c001ab47:	0f 95 c0             	setne  al
c001ab4a:	31 d2                	xor    edx,edx
c001ab4c:	0f b6 c0             	movzx  eax,al
c001ab4f:	f7 d8                	neg    eax
c001ab51:	83 d2 00             	adc    edx,0x0
c001ab54:	83 c4 18             	add    esp,0x18
c001ab57:	f7 da                	neg    edx
c001ab59:	5b                   	pop    ebx
c001ab5a:	c3                   	ret    
c001ab5b:	83 ec 08             	sub    esp,0x8
c001ab5e:	50                   	push   eax
c001ab5f:	68 8f a5 02 c0       	push   0xc002a58f
c001ab64:	e8 10 7c ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c001ab69:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001ab6c:	83 c4 10             	add    esp,0x10
c001ab6f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ab75:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ab7c:	31 d2                	xor    edx,edx
c001ab7e:	31 c0                	xor    eax,eax
c001ab80:	83 c4 18             	add    esp,0x18
c001ab83:	5b                   	pop    ebx
c001ab84:	c3                   	ret    
c001ab85:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ab8a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ab8f:	83 c4 18             	add    esp,0x18
c001ab92:	5b                   	pop    ebx
c001ab93:	c3                   	ret    

c001ab94 <sysCallSizeFromFilename(regs*)>:
c001ab94:	57                   	push   edi
c001ab95:	56                   	push   esi
c001ab96:	53                   	push   ebx
c001ab97:	83 ec 20             	sub    esp,0x20
c001ab9a:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ab9e:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001aba1:	83 fb 02             	cmp    ebx,0x2
c001aba4:	0f 86 99 00 00 00    	jbe    c001ac43 <sysCallSizeFromFilename(regs*)+0xaf>
c001abaa:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001abb0:	77 65                	ja     c001ac17 <sysCallSizeFromFilename(regs*)+0x83>
c001abb2:	83 ec 0c             	sub    esp,0xc
c001abb5:	68 14 01 00 00       	push   0x114
c001abba:	e8 15 49 ff ff       	call   c000f4d4 <malloc>
c001abbf:	83 c4 0c             	add    esp,0xc
c001abc2:	89 c6                	mov    esi,eax
c001abc4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001abc9:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001abcc:	53                   	push   ebx
c001abcd:	56                   	push   esi
c001abce:	e8 d5 80 ff ff       	call   c0012ca8 <File::File(char const*, Process*)>
c001abd3:	83 c4 0c             	add    esp,0xc
c001abd6:	8d 44 24 23          	lea    eax,[esp+0x23]
c001abda:	50                   	push   eax
c001abdb:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001abde:	56                   	push   esi
c001abdf:	e8 d4 83 ff ff       	call   c0012fb8 <File::stat(unsigned long long*, bool*)>
c001abe4:	83 c4 10             	add    esp,0x10
c001abe7:	85 f6                	test   esi,esi
c001abe9:	74 14                	je     c001abff <sysCallSizeFromFilename(regs*)+0x6b>
c001abeb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001abef:	8b 16                	mov    edx,DWORD PTR [esi]
c001abf1:	83 ec 0c             	sub    esp,0xc
c001abf4:	56                   	push   esi
c001abf5:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001abf8:	83 c4 10             	add    esp,0x10
c001abfb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001abff:	85 c0                	test   eax,eax
c001ac01:	0f 95 c0             	setne  al
c001ac04:	31 d2                	xor    edx,edx
c001ac06:	0f b6 c0             	movzx  eax,al
c001ac09:	f7 d8                	neg    eax
c001ac0b:	83 d2 00             	adc    edx,0x0
c001ac0e:	83 c4 20             	add    esp,0x20
c001ac11:	f7 da                	neg    edx
c001ac13:	5b                   	pop    ebx
c001ac14:	5e                   	pop    esi
c001ac15:	5f                   	pop    edi
c001ac16:	c3                   	ret    
c001ac17:	83 ec 08             	sub    esp,0x8
c001ac1a:	53                   	push   ebx
c001ac1b:	68 8f a5 02 c0       	push   0xc002a58f
c001ac20:	e8 54 7b ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c001ac25:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001ac28:	83 c4 10             	add    esp,0x10
c001ac2b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ac31:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ac38:	31 d2                	xor    edx,edx
c001ac3a:	83 c4 20             	add    esp,0x20
c001ac3d:	31 c0                	xor    eax,eax
c001ac3f:	5b                   	pop    ebx
c001ac40:	5e                   	pop    esi
c001ac41:	5f                   	pop    edi
c001ac42:	c3                   	ret    
c001ac43:	83 c4 20             	add    esp,0x20
c001ac46:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ac4b:	5b                   	pop    ebx
c001ac4c:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ac51:	5e                   	pop    esi
c001ac52:	5f                   	pop    edi
c001ac53:	c3                   	ret    

c001ac54 <sysCallClose(regs*)>:
c001ac54:	53                   	push   ebx
c001ac55:	83 ec 08             	sub    esp,0x8
c001ac58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac5c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ac5f:	83 f8 02             	cmp    eax,0x2
c001ac62:	76 50                	jbe    c001acb4 <sysCallClose(regs*)+0x60>
c001ac64:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001ac69:	74 58                	je     c001acc3 <sysCallClose(regs*)+0x6f>
c001ac6b:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001ac70:	74 60                	je     c001acd2 <sysCallClose(regs*)+0x7e>
c001ac72:	77 2f                	ja     c001aca3 <sysCallClose(regs*)+0x4f>
c001ac74:	83 ec 0c             	sub    esp,0xc
c001ac77:	50                   	push   eax
c001ac78:	e8 b6 69 ff ff       	call   c0011633 <getFromFileDescriptor(int)>
c001ac7d:	89 c3                	mov    ebx,eax
c001ac7f:	89 04 24             	mov    DWORD PTR [esp],eax
c001ac82:	e8 e3 80 ff ff       	call   c0012d6a <File::close()>
c001ac87:	83 c4 10             	add    esp,0x10
c001ac8a:	85 db                	test   ebx,ebx
c001ac8c:	74 0c                	je     c001ac9a <sysCallClose(regs*)+0x46>
c001ac8e:	83 ec 0c             	sub    esp,0xc
c001ac91:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ac93:	53                   	push   ebx
c001ac94:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ac97:	83 c4 10             	add    esp,0x10
c001ac9a:	31 c0                	xor    eax,eax
c001ac9c:	31 d2                	xor    edx,edx
c001ac9e:	83 c4 08             	add    esp,0x8
c001aca1:	5b                   	pop    ebx
c001aca2:	c3                   	ret    
c001aca3:	83 ec 08             	sub    esp,0x8
c001aca6:	50                   	push   eax
c001aca7:	68 10 a5 02 c0       	push   0xc002a510
c001acac:	e8 c8 7a ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c001acb1:	83 c4 10             	add    esp,0x10
c001acb4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001acb9:	ba ff ff ff ff       	mov    edx,0xffffffff
c001acbe:	83 c4 08             	add    esp,0x8
c001acc1:	5b                   	pop    ebx
c001acc2:	c3                   	ret    
c001acc3:	83 ec 0c             	sub    esp,0xc
c001acc6:	68 aa a5 02 c0       	push   0xc002a5aa
c001accb:	e8 a9 7a ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c001acd0:	eb c5                	jmp    c001ac97 <sysCallClose(regs*)+0x43>
c001acd2:	83 ec 0c             	sub    esp,0xc
c001acd5:	68 b8 a5 02 c0       	push   0xc002a5b8
c001acda:	eb ef                	jmp    c001accb <sysCallClose(regs*)+0x77>

c001acdc <sysCallOpenDir(regs*)>:
c001acdc:	56                   	push   esi
c001acdd:	53                   	push   ebx
c001acde:	53                   	push   ebx
c001acdf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ace3:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001ace6:	85 f6                	test   esi,esi
c001ace8:	74 59                	je     c001ad43 <sysCallOpenDir(regs*)+0x67>
c001acea:	83 ec 0c             	sub    esp,0xc
c001aced:	68 14 01 00 00       	push   0x114
c001acf2:	e8 dd 47 ff ff       	call   c000f4d4 <malloc>
c001acf7:	83 c4 0c             	add    esp,0xc
c001acfa:	89 c6                	mov    esi,eax
c001acfc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ad01:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ad04:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ad07:	56                   	push   esi
c001ad08:	e8 71 84 ff ff       	call   c001317e <Directory::Directory(char const*, Process*)>
c001ad0d:	83 c4 10             	add    esp,0x10
c001ad10:	85 f6                	test   esi,esi
c001ad12:	74 2f                	je     c001ad43 <sysCallOpenDir(regs*)+0x67>
c001ad14:	83 ec 0c             	sub    esp,0xc
c001ad17:	56                   	push   esi
c001ad18:	e8 c5 84 ff ff       	call   c00131e2 <Directory::open()>
c001ad1d:	83 c4 10             	add    esp,0x10
c001ad20:	85 c0                	test   eax,eax
c001ad22:	75 1f                	jne    c001ad43 <sysCallOpenDir(regs*)+0x67>
c001ad24:	83 ec 0c             	sub    esp,0xc
c001ad27:	56                   	push   esi
c001ad28:	e8 11 66 ff ff       	call   c001133e <UnixFile::getFileDescriptor()>
c001ad2d:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001ad30:	83 c4 10             	add    esp,0x10
c001ad33:	89 02                	mov    DWORD PTR [edx],eax
c001ad35:	c1 f8 1f             	sar    eax,0x1f
c001ad38:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001ad3b:	31 c0                	xor    eax,eax
c001ad3d:	59                   	pop    ecx
c001ad3e:	31 d2                	xor    edx,edx
c001ad40:	5b                   	pop    ebx
c001ad41:	5e                   	pop    esi
c001ad42:	c3                   	ret    
c001ad43:	59                   	pop    ecx
c001ad44:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ad49:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ad4e:	5b                   	pop    ebx
c001ad4f:	5e                   	pop    esi
c001ad50:	c3                   	ret    

c001ad51 <sysCallCloseDir(regs*)>:
c001ad51:	53                   	push   ebx
c001ad52:	83 ec 08             	sub    esp,0x8
c001ad55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad59:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ad5c:	83 f8 02             	cmp    eax,0x2
c001ad5f:	76 47                	jbe    c001ada8 <sysCallCloseDir(regs*)+0x57>
c001ad61:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001ad66:	77 2f                	ja     c001ad97 <sysCallCloseDir(regs*)+0x46>
c001ad68:	83 ec 0c             	sub    esp,0xc
c001ad6b:	50                   	push   eax
c001ad6c:	e8 c2 68 ff ff       	call   c0011633 <getFromFileDescriptor(int)>
c001ad71:	89 c3                	mov    ebx,eax
c001ad73:	89 04 24             	mov    DWORD PTR [esp],eax
c001ad76:	e8 c3 84 ff ff       	call   c001323e <Directory::close()>
c001ad7b:	83 c4 10             	add    esp,0x10
c001ad7e:	85 db                	test   ebx,ebx
c001ad80:	74 0c                	je     c001ad8e <sysCallCloseDir(regs*)+0x3d>
c001ad82:	83 ec 0c             	sub    esp,0xc
c001ad85:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ad87:	53                   	push   ebx
c001ad88:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ad8b:	83 c4 10             	add    esp,0x10
c001ad8e:	31 c0                	xor    eax,eax
c001ad90:	31 d2                	xor    edx,edx
c001ad92:	83 c4 08             	add    esp,0x8
c001ad95:	5b                   	pop    ebx
c001ad96:	c3                   	ret    
c001ad97:	83 ec 08             	sub    esp,0x8
c001ad9a:	50                   	push   eax
c001ad9b:	68 38 a5 02 c0       	push   0xc002a538
c001ada0:	e8 d4 79 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c001ada5:	83 c4 10             	add    esp,0x10
c001ada8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001adad:	ba ff ff ff ff       	mov    edx,0xffffffff
c001adb2:	83 c4 08             	add    esp,0x8
c001adb5:	5b                   	pop    ebx
c001adb6:	c3                   	ret    

c001adb7 <sysCallMakeDir(regs*)>:
c001adb7:	56                   	push   esi
c001adb8:	53                   	push   ebx
c001adb9:	83 ec 10             	sub    esp,0x10
c001adbc:	68 14 01 00 00       	push   0x114
c001adc1:	e8 0e 47 ff ff       	call   c000f4d4 <malloc>
c001adc6:	83 c4 0c             	add    esp,0xc
c001adc9:	89 c3                	mov    ebx,eax
c001adcb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001add0:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001add3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001add7:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001adda:	53                   	push   ebx
c001addb:	e8 9e 83 ff ff       	call   c001317e <Directory::Directory(char const*, Process*)>
c001ade0:	83 c4 10             	add    esp,0x10
c001ade3:	85 db                	test   ebx,ebx
c001ade5:	74 32                	je     c001ae19 <sysCallMakeDir(regs*)+0x62>
c001ade7:	83 ec 0c             	sub    esp,0xc
c001adea:	53                   	push   ebx
c001adeb:	e8 d2 85 ff ff       	call   c00133c2 <Directory::create()>
c001adf0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001adf3:	89 c6                	mov    esi,eax
c001adf5:	e8 44 84 ff ff       	call   c001323e <Directory::close()>
c001adfa:	8b 03                	mov    eax,DWORD PTR [ebx]
c001adfc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001adff:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ae02:	83 c4 10             	add    esp,0x10
c001ae05:	31 c0                	xor    eax,eax
c001ae07:	59                   	pop    ecx
c001ae08:	85 f6                	test   esi,esi
c001ae0a:	5b                   	pop    ebx
c001ae0b:	0f 95 c0             	setne  al
c001ae0e:	5e                   	pop    esi
c001ae0f:	31 d2                	xor    edx,edx
c001ae11:	f7 d8                	neg    eax
c001ae13:	83 d2 00             	adc    edx,0x0
c001ae16:	f7 da                	neg    edx
c001ae18:	c3                   	ret    
c001ae19:	59                   	pop    ecx
c001ae1a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ae1f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ae24:	5b                   	pop    ebx
c001ae25:	5e                   	pop    esi
c001ae26:	c3                   	ret    

c001ae27 <sysCallWait(regs*)>:
c001ae27:	83 ec 10             	sub    esp,0x10
c001ae2a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ae2e:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001ae31:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001ae34:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001ae37:	e8 35 24 00 00       	call   c001d271 <waitTask(int, int*, int)>
c001ae3c:	83 c4 1c             	add    esp,0x1c
c001ae3f:	99                   	cdq    
c001ae40:	c3                   	ret    

c001ae41 <sysCallNotImpl(regs*)>:
c001ae41:	83 ec 18             	sub    esp,0x18
c001ae44:	68 c6 a5 02 c0       	push   0xc002a5c6
c001ae49:	e8 45 ea ff ff       	call   c0019893 <Krnl::panic(char const*)>
c001ae4e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ae53:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ae58:	83 c4 1c             	add    esp,0x1c
c001ae5b:	c3                   	ret    

c001ae5c <sysPanic(regs*)>:
c001ae5c:	83 ec 18             	sub    esp,0x18
c001ae5f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ae63:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001ae66:	e8 28 ea ff ff       	call   c0019893 <Krnl::panic(char const*)>
c001ae6b:	c7 04 24 e0 a5 02 c0 	mov    DWORD PTR [esp],0xc002a5e0
c001ae72:	e8 1c ea ff ff       	call   c0019893 <Krnl::panic(char const*)>
c001ae77:	b8 01 00 00 00       	mov    eax,0x1
c001ae7c:	31 d2                	xor    edx,edx
c001ae7e:	83 c4 1c             	add    esp,0x1c
c001ae81:	c3                   	ret    

c001ae82 <sysCallRmdir(regs*)>:
c001ae82:	56                   	push   esi
c001ae83:	53                   	push   ebx
c001ae84:	83 ec 20             	sub    esp,0x20
c001ae87:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ae8b:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001ae8e:	68 14 01 00 00       	push   0x114
c001ae93:	e8 3c 46 ff ff       	call   c000f4d4 <malloc>
c001ae98:	83 c4 0c             	add    esp,0xc
c001ae9b:	89 c3                	mov    ebx,eax
c001ae9d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aea2:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001aea5:	56                   	push   esi
c001aea6:	53                   	push   ebx
c001aea7:	e8 fc 7d ff ff       	call   c0012ca8 <File::File(char const*, Process*)>
c001aeac:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aeaf:	e8 d0 7f ff ff       	call   c0012e84 <File::unlink()>
c001aeb4:	83 c4 10             	add    esp,0x10
c001aeb7:	85 db                	test   ebx,ebx
c001aeb9:	74 14                	je     c001aecf <sysCallRmdir(regs*)+0x4d>
c001aebb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001aebf:	8b 13                	mov    edx,DWORD PTR [ebx]
c001aec1:	83 ec 0c             	sub    esp,0xc
c001aec4:	53                   	push   ebx
c001aec5:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001aec8:	83 c4 10             	add    esp,0x10
c001aecb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aecf:	85 c0                	test   eax,eax
c001aed1:	0f 95 c0             	setne  al
c001aed4:	31 d2                	xor    edx,edx
c001aed6:	0f b6 c0             	movzx  eax,al
c001aed9:	f7 d8                	neg    eax
c001aedb:	83 d2 00             	adc    edx,0x0
c001aede:	83 c4 14             	add    esp,0x14
c001aee1:	f7 da                	neg    edx
c001aee3:	5b                   	pop    ebx
c001aee4:	5e                   	pop    esi
c001aee5:	c3                   	ret    

c001aee6 <sysCallUnlink(regs*)>:
c001aee6:	56                   	push   esi
c001aee7:	53                   	push   ebx
c001aee8:	83 ec 20             	sub    esp,0x20
c001aeeb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001aeef:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001aef2:	68 14 01 00 00       	push   0x114
c001aef7:	e8 d8 45 ff ff       	call   c000f4d4 <malloc>
c001aefc:	83 c4 0c             	add    esp,0xc
c001aeff:	89 c3                	mov    ebx,eax
c001af01:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001af06:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001af09:	56                   	push   esi
c001af0a:	53                   	push   ebx
c001af0b:	e8 98 7d ff ff       	call   c0012ca8 <File::File(char const*, Process*)>
c001af10:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001af13:	e8 6c 7f ff ff       	call   c0012e84 <File::unlink()>
c001af18:	83 c4 10             	add    esp,0x10
c001af1b:	85 db                	test   ebx,ebx
c001af1d:	74 14                	je     c001af33 <sysCallUnlink(regs*)+0x4d>
c001af1f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001af23:	8b 13                	mov    edx,DWORD PTR [ebx]
c001af25:	83 ec 0c             	sub    esp,0xc
c001af28:	53                   	push   ebx
c001af29:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001af2c:	83 c4 10             	add    esp,0x10
c001af2f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001af33:	85 c0                	test   eax,eax
c001af35:	0f 95 c0             	setne  al
c001af38:	31 d2                	xor    edx,edx
c001af3a:	0f b6 c0             	movzx  eax,al
c001af3d:	f7 d8                	neg    eax
c001af3f:	83 d2 00             	adc    edx,0x0
c001af42:	83 c4 14             	add    esp,0x14
c001af45:	f7 da                	neg    edx
c001af47:	5b                   	pop    ebx
c001af48:	5e                   	pop    esi
c001af49:	c3                   	ret    

c001af4a <sysCallGetArgv(regs*)>:
c001af4a:	83 ec 0c             	sub    esp,0xc
c001af4d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001af51:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001af54:	85 c0                	test   eax,eax
c001af56:	78 2b                	js     c001af83 <sysCallGetArgv(regs*)+0x39>
c001af58:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001af5e:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001af61:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001af67:	7d 1a                	jge    c001af83 <sysCallGetArgv(regs*)+0x39>
c001af69:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001af70:	85 c0                	test   eax,eax
c001af72:	74 17                	je     c001af8b <sysCallGetArgv(regs*)+0x41>
c001af74:	83 ec 08             	sub    esp,0x8
c001af77:	50                   	push   eax
c001af78:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001af7b:	e8 aa 57 fe ff       	call   c000072a <strcpy>
c001af80:	83 c4 10             	add    esp,0x10
c001af83:	31 c0                	xor    eax,eax
c001af85:	31 d2                	xor    edx,edx
c001af87:	83 c4 0c             	add    esp,0xc
c001af8a:	c3                   	ret    
c001af8b:	b8 01 00 00 00       	mov    eax,0x1
c001af90:	31 d2                	xor    edx,edx
c001af92:	83 c4 0c             	add    esp,0xc
c001af95:	c3                   	ret    

c001af96 <sysCallTTYName(regs*)>:
c001af96:	56                   	push   esi
c001af97:	53                   	push   ebx
c001af98:	53                   	push   ebx
c001af99:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001af9d:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001afa0:	85 c0                	test   eax,eax
c001afa2:	74 5f                	je     c001b003 <sysCallTTYName(regs*)+0x6d>
c001afa4:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001afa7:	83 f8 02             	cmp    eax,0x2
c001afaa:	77 3e                	ja     c001afea <sysCallTTYName(regs*)+0x54>
c001afac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001afb1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001afb4:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001afba:	85 db                	test   ebx,ebx
c001afbc:	74 45                	je     c001b003 <sysCallTTYName(regs*)+0x6d>
c001afbe:	83 ec 0c             	sub    esp,0xc
c001afc1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001afc3:	53                   	push   ebx
c001afc4:	ff 10                	call   DWORD PTR [eax]
c001afc6:	83 c4 10             	add    esp,0x10
c001afc9:	84 c0                	test   al,al
c001afcb:	74 41                	je     c001b00e <sysCallTTYName(regs*)+0x78>
c001afcd:	83 ec 08             	sub    esp,0x8
c001afd0:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001afd6:	53                   	push   ebx
c001afd7:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001afda:	e8 4b 57 fe ff       	call   c000072a <strcpy>
c001afdf:	83 c4 10             	add    esp,0x10
c001afe2:	31 c0                	xor    eax,eax
c001afe4:	59                   	pop    ecx
c001afe5:	31 d2                	xor    edx,edx
c001afe7:	5b                   	pop    ebx
c001afe8:	5e                   	pop    esi
c001afe9:	c3                   	ret    
c001afea:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001afef:	74 bb                	je     c001afac <sysCallTTYName(regs*)+0x16>
c001aff1:	83 ec 0c             	sub    esp,0xc
c001aff4:	50                   	push   eax
c001aff5:	e8 39 66 ff ff       	call   c0011633 <getFromFileDescriptor(int)>
c001affa:	83 c4 10             	add    esp,0x10
c001affd:	89 c3                	mov    ebx,eax
c001afff:	85 db                	test   ebx,ebx
c001b001:	75 bb                	jne    c001afbe <sysCallTTYName(regs*)+0x28>
c001b003:	59                   	pop    ecx
c001b004:	b8 01 00 00 00       	mov    eax,0x1
c001b009:	31 d2                	xor    edx,edx
c001b00b:	5b                   	pop    ebx
c001b00c:	5e                   	pop    esi
c001b00d:	c3                   	ret    
c001b00e:	59                   	pop    ecx
c001b00f:	b8 02 00 00 00       	mov    eax,0x2
c001b014:	31 d2                	xor    edx,edx
c001b016:	5b                   	pop    ebx
c001b017:	5e                   	pop    esi
c001b018:	c3                   	ret    

c001b019 <sysCallUSleep(regs*)>:
c001b019:	83 ec 14             	sub    esp,0x14
c001b01c:	b8 e8 03 00 00       	mov    eax,0x3e8
c001b021:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b025:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001b02c:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001b02f:	01 ca                	add    edx,ecx
c001b031:	52                   	push   edx
c001b032:	50                   	push   eax
c001b033:	e8 d2 22 00 00       	call   c001d30a <nanoSleep(unsigned long long)>
c001b038:	31 c0                	xor    eax,eax
c001b03a:	31 d2                	xor    edx,edx
c001b03c:	83 c4 1c             	add    esp,0x1c
c001b03f:	c3                   	ret    

c001b040 <sysCallSpawn(regs*)>:
c001b040:	56                   	push   esi
c001b041:	53                   	push   ebx
c001b042:	53                   	push   ebx
c001b043:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b047:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001b04a:	85 f6                	test   esi,esi
c001b04c:	75 08                	jne    c001b056 <sysCallSpawn(regs*)+0x16>
c001b04e:	59                   	pop    ecx
c001b04f:	31 c0                	xor    eax,eax
c001b051:	31 d2                	xor    edx,edx
c001b053:	5b                   	pop    ebx
c001b054:	5e                   	pop    esi
c001b055:	c3                   	ret    
c001b056:	83 ec 0c             	sub    esp,0xc
c001b059:	68 3f 07 00 00       	push   0x73f
c001b05e:	e8 71 44 ff ff       	call   c000f4d4 <malloc>
c001b063:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b066:	89 c6                	mov    esi,eax
c001b068:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b06d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b070:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b073:	56                   	push   esi
c001b074:	e8 91 19 00 00       	call   c001ca0a <Process::Process(char const*, Process*, char**)>
c001b079:	83 c4 20             	add    esp,0x20
c001b07c:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001b083:	75 c9                	jne    c001b04e <sysCallSpawn(regs*)+0xe>
c001b085:	83 ec 0c             	sub    esp,0xc
c001b088:	56                   	push   esi
c001b089:	e8 42 1f 00 00       	call   c001cfd0 <Process::createUserThread()>
c001b08e:	8b 06                	mov    eax,DWORD PTR [esi]
c001b090:	83 c4 10             	add    esp,0x10
c001b093:	99                   	cdq    
c001b094:	59                   	pop    ecx
c001b095:	5b                   	pop    ebx
c001b096:	5e                   	pop    esi
c001b097:	c3                   	ret    

c001b098 <sysCallGetEnv(regs*)>:
c001b098:	57                   	push   edi
c001b099:	56                   	push   esi
c001b09a:	53                   	push   ebx
c001b09b:	83 ec 1c             	sub    esp,0x1c
c001b09e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b0a2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b0a7:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001b0aa:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001b0ad:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b0b0:	e8 fa e6 ff ff       	call   c00197af <Krnl::getProcessTotalEnvCount(Process*)>
c001b0b5:	83 c4 10             	add    esp,0x10
c001b0b8:	39 c7                	cmp    edi,eax
c001b0ba:	7c 14                	jl     c001b0d0 <sysCallGetEnv(regs*)+0x38>
c001b0bc:	85 f6                	test   esi,esi
c001b0be:	75 0b                	jne    c001b0cb <sysCallGetEnv(regs*)+0x33>
c001b0c0:	83 c4 10             	add    esp,0x10
c001b0c3:	31 c0                	xor    eax,eax
c001b0c5:	5b                   	pop    ebx
c001b0c6:	31 d2                	xor    edx,edx
c001b0c8:	5e                   	pop    esi
c001b0c9:	5f                   	pop    edi
c001b0ca:	c3                   	ret    
c001b0cb:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b0ce:	eb f0                	jmp    c001b0c0 <sysCallGetEnv(regs*)+0x28>
c001b0d0:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b0d4:	52                   	push   edx
c001b0d5:	57                   	push   edi
c001b0d6:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001b0dc:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001b0df:	50                   	push   eax
c001b0e0:	e8 ea e6 ff ff       	call   c00197cf <Krnl::getProcessEnvPair(Process*, int)>
c001b0e5:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b0e8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b0ec:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b0f0:	83 c4 0c             	add    esp,0xc
c001b0f3:	85 c9                	test   ecx,ecx
c001b0f5:	75 23                	jne    c001b11a <sysCallGetEnv(regs*)+0x82>
c001b0f7:	83 ec 0c             	sub    esp,0xc
c001b0fa:	50                   	push   eax
c001b0fb:	e8 a8 55 fe ff       	call   c00006a8 <strlen>
c001b100:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b103:	89 c3                	mov    ebx,eax
c001b105:	e8 9e 55 fe ff       	call   c00006a8 <strlen>
c001b10a:	83 c4 10             	add    esp,0x10
c001b10d:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001b111:	83 c4 10             	add    esp,0x10
c001b114:	31 d2                	xor    edx,edx
c001b116:	5b                   	pop    ebx
c001b117:	5e                   	pop    esi
c001b118:	5f                   	pop    edi
c001b119:	c3                   	ret    
c001b11a:	83 ec 08             	sub    esp,0x8
c001b11d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b120:	50                   	push   eax
c001b121:	56                   	push   esi
c001b122:	e8 03 56 fe ff       	call   c000072a <strcpy>
c001b127:	58                   	pop    eax
c001b128:	5a                   	pop    edx
c001b129:	68 ef a5 02 c0       	push   0xc002a5ef
c001b12e:	56                   	push   esi
c001b12f:	e8 ad 56 fe ff       	call   c00007e1 <strcat>
c001b134:	59                   	pop    ecx
c001b135:	5b                   	pop    ebx
c001b136:	57                   	push   edi
c001b137:	56                   	push   esi
c001b138:	e8 a4 56 fe ff       	call   c00007e1 <strcat>
c001b13d:	83 c4 10             	add    esp,0x10
c001b140:	e9 7b ff ff ff       	jmp    c001b0c0 <sysCallGetEnv(regs*)+0x28>

c001b145 <sysAppSettings(regs*)>:
c001b145:	53                   	push   ebx
c001b146:	83 ec 08             	sub    esp,0x8
c001b149:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b14d:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b150:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001b156:	25 e0 1f 00 00       	and    eax,0x1fe0
c001b15b:	66 3d c0 09          	cmp    ax,0x9c0
c001b15f:	75 2f                	jne    c001b190 <sysAppSettings(regs*)+0x4b>
c001b161:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001b167:	83 e0 1f             	and    eax,0x1f
c001b16a:	3c 01                	cmp    al,0x1
c001b16c:	74 2e                	je     c001b19c <sysAppSettings(regs*)+0x57>
c001b16e:	3c 07                	cmp    al,0x7
c001b170:	0f 84 bd 00 00 00    	je     c001b233 <sysAppSettings(regs*)+0xee>
c001b176:	84 c0                	test   al,al
c001b178:	0f 84 dc 00 00 00    	je     c001b25a <sysAppSettings(regs*)+0x115>
c001b17e:	3c 08                	cmp    al,0x8
c001b180:	74 6d                	je     c001b1ef <sysAppSettings(regs*)+0xaa>
c001b182:	0f b6 c0             	movzx  eax,al
c001b185:	83 c4 08             	add    esp,0x8
c001b188:	05 e8 03 00 00       	add    eax,0x3e8
c001b18d:	5b                   	pop    ebx
c001b18e:	99                   	cdq    
c001b18f:	c3                   	ret    
c001b190:	b8 01 00 00 00       	mov    eax,0x1
c001b195:	31 d2                	xor    edx,edx
c001b197:	83 c4 08             	add    esp,0x8
c001b19a:	5b                   	pop    ebx
c001b19b:	c3                   	ret    
c001b19c:	51                   	push   ecx
c001b19d:	68 00 01 00 00       	push   0x100
c001b1a2:	6a 00                	push   0x0
c001b1a4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b1a9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b1ac:	83 c0 0c             	add    eax,0xc
c001b1af:	50                   	push   eax
c001b1b0:	e8 d6 54 fe ff       	call   c000068b <memset>
c001b1b5:	83 c4 0c             	add    esp,0xc
c001b1b8:	68 ff 00 00 00       	push   0xff
c001b1bd:	53                   	push   ebx
c001b1be:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b1c3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b1c6:	83 c0 0c             	add    eax,0xc
c001b1c9:	50                   	push   eax
c001b1ca:	e8 86 54 fe ff       	call   c0000655 <memcpy>
c001b1cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b1d4:	5b                   	pop    ebx
c001b1d5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b1d8:	5a                   	pop    edx
c001b1d9:	8d 50 0c             	lea    edx,[eax+0xc]
c001b1dc:	52                   	push   edx
c001b1dd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b1e3:	e8 c6 55 ff ff       	call   c00107ae <VgaText::setTitle(char*)>
c001b1e8:	83 c4 10             	add    esp,0x10
c001b1eb:	31 c0                	xor    eax,eax
c001b1ed:	eb a6                	jmp    c001b195 <sysAppSettings(regs*)+0x50>
c001b1ef:	83 ec 08             	sub    esp,0x8
c001b1f2:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001b1f8:	83 e0 0f             	and    eax,0xf
c001b1fb:	50                   	push   eax
c001b1fc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b201:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b204:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b20a:	e8 8f 55 ff ff       	call   c001079e <VgaText::setTitleColour(VgaColour)>
c001b20f:	58                   	pop    eax
c001b210:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001b216:	5a                   	pop    edx
c001b217:	c1 e8 04             	shr    eax,0x4
c001b21a:	83 e0 0f             	and    eax,0xf
c001b21d:	50                   	push   eax
c001b21e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b223:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b226:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b22c:	e8 5d 55 ff ff       	call   c001078e <VgaText::setTitleTextColour(VgaColour)>
c001b231:	eb b5                	jmp    c001b1e8 <sysAppSettings(regs*)+0xa3>
c001b233:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b238:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b23b:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001b241:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001b247:	c0 e8 06             	shr    al,0x6
c001b24a:	83 e0 01             	and    eax,0x1
c001b24d:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001b253:	31 c0                	xor    eax,eax
c001b255:	e9 3b ff ff ff       	jmp    c001b195 <sysAppSettings(regs*)+0x50>
c001b25a:	b8 02 00 00 00       	mov    eax,0x2
c001b25f:	e9 31 ff ff ff       	jmp    c001b195 <sysAppSettings(regs*)+0x50>

c001b264 <sysSetFatAttrib(regs*)>:
c001b264:	57                   	push   edi
c001b265:	56                   	push   esi
c001b266:	53                   	push   ebx
c001b267:	83 ec 1c             	sub    esp,0x1c
c001b26a:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001b26e:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001b271:	68 14 01 00 00       	push   0x114
c001b276:	e8 59 42 ff ff       	call   c000f4d4 <malloc>
c001b27b:	83 c4 0c             	add    esp,0xc
c001b27e:	89 c3                	mov    ebx,eax
c001b280:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b285:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b288:	57                   	push   edi
c001b289:	53                   	push   ebx
c001b28a:	e8 19 7a ff ff       	call   c0012ca8 <File::File(char const*, Process*)>
c001b28f:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001b292:	83 c4 0c             	add    esp,0xc
c001b295:	0f b6 d4             	movzx  edx,ah
c001b298:	0f b6 c0             	movzx  eax,al
c001b29b:	52                   	push   edx
c001b29c:	50                   	push   eax
c001b29d:	53                   	push   ebx
c001b29e:	e8 7b 7c ff ff       	call   c0012f1e <File::chfatattr(unsigned char, unsigned char)>
c001b2a3:	83 c4 10             	add    esp,0x10
c001b2a6:	85 db                	test   ebx,ebx
c001b2a8:	74 14                	je     c001b2be <sysSetFatAttrib(regs*)+0x5a>
c001b2aa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b2ae:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b2b0:	83 ec 0c             	sub    esp,0xc
c001b2b3:	53                   	push   ebx
c001b2b4:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b2b7:	83 c4 10             	add    esp,0x10
c001b2ba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b2be:	85 c0                	test   eax,eax
c001b2c0:	0f 95 c0             	setne  al
c001b2c3:	31 d2                	xor    edx,edx
c001b2c5:	0f b6 c0             	movzx  eax,al
c001b2c8:	f7 d8                	neg    eax
c001b2ca:	83 d2 00             	adc    edx,0x0
c001b2cd:	83 c4 10             	add    esp,0x10
c001b2d0:	f7 da                	neg    edx
c001b2d2:	5b                   	pop    ebx
c001b2d3:	5e                   	pop    esi
c001b2d4:	5f                   	pop    edi
c001b2d5:	c3                   	ret    

c001b2d6 <sysPipe(regs*)>:
c001b2d6:	57                   	push   edi
c001b2d7:	56                   	push   esi
c001b2d8:	53                   	push   ebx
c001b2d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2dd:	83 ec 0c             	sub    esp,0xc
c001b2e0:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001b2e3:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001b2e6:	6a 20                	push   0x20
c001b2e8:	e8 e7 41 ff ff       	call   c000f4d4 <malloc>
c001b2ed:	89 c3                	mov    ebx,eax
c001b2ef:	58                   	pop    eax
c001b2f0:	5a                   	pop    edx
c001b2f1:	68 00 50 00 00       	push   0x5000
c001b2f6:	53                   	push   ebx
c001b2f7:	e8 e2 4d ff ff       	call   c00100de <Pipe::Pipe(int)>
c001b2fc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b2ff:	e8 3a 60 ff ff       	call   c001133e <UnixFile::getFileDescriptor()>
c001b304:	89 07                	mov    DWORD PTR [edi],eax
c001b306:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b309:	e8 30 60 ff ff       	call   c001133e <UnixFile::getFileDescriptor()>
c001b30e:	83 c4 10             	add    esp,0x10
c001b311:	89 06                	mov    DWORD PTR [esi],eax
c001b313:	31 d2                	xor    edx,edx
c001b315:	5b                   	pop    ebx
c001b316:	31 c0                	xor    eax,eax
c001b318:	5e                   	pop    esi
c001b319:	5f                   	pop    edi
c001b31a:	c3                   	ret    

c001b31b <sysGetUnixTime(regs*)>:
c001b31b:	a1 e8 c9 02 c0       	mov    eax,ds:0xc002c9e8
c001b320:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b326:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b32a:	e9 55 83 ff ff       	jmp    c0013684 <Clock::timeInSecondsLocal()>

c001b32f <string_ends_with(char const*, char const*)>:
c001b32f:	57                   	push   edi
c001b330:	56                   	push   esi
c001b331:	53                   	push   ebx
c001b332:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b336:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b33a:	83 ec 0c             	sub    esp,0xc
c001b33d:	53                   	push   ebx
c001b33e:	e8 65 53 fe ff       	call   c00006a8 <strlen>
c001b343:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b346:	89 c6                	mov    esi,eax
c001b348:	e8 5b 53 fe ff       	call   c00006a8 <strlen>
c001b34d:	83 c4 10             	add    esp,0x10
c001b350:	39 c6                	cmp    esi,eax
c001b352:	7d 06                	jge    c001b35a <string_ends_with(char const*, char const*)+0x2b>
c001b354:	5b                   	pop    ebx
c001b355:	31 c0                	xor    eax,eax
c001b357:	5e                   	pop    esi
c001b358:	5f                   	pop    edi
c001b359:	c3                   	ret    
c001b35a:	83 ec 08             	sub    esp,0x8
c001b35d:	29 c6                	sub    esi,eax
c001b35f:	57                   	push   edi
c001b360:	01 f3                	add    ebx,esi
c001b362:	53                   	push   ebx
c001b363:	e8 13 54 fe ff       	call   c000077b <strcmp>
c001b368:	83 c4 10             	add    esp,0x10
c001b36b:	85 c0                	test   eax,eax
c001b36d:	5b                   	pop    ebx
c001b36e:	0f 94 c0             	sete   al
c001b371:	5e                   	pop    esi
c001b372:	0f b6 c0             	movzx  eax,al
c001b375:	5f                   	pop    edi
c001b376:	c3                   	ret    

c001b377 <sysCallOpen(regs*)>:
c001b377:	56                   	push   esi
c001b378:	53                   	push   ebx
c001b379:	81 ec 04 01 00 00    	sub    esp,0x104
c001b37f:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001b386:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001b389:	85 c9                	test   ecx,ecx
c001b38b:	0f 84 b3 00 00 00    	je     c001b444 <sysCallOpen(regs*)+0xcd>
c001b391:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001b394:	85 c0                	test   eax,eax
c001b396:	0f 84 a8 00 00 00    	je     c001b444 <sysCallOpen(regs*)+0xcd>
c001b39c:	52                   	push   edx
c001b39d:	68 f1 a5 02 c0       	push   0xc002a5f1
c001b3a2:	50                   	push   eax
c001b3a3:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001b3a7:	56                   	push   esi
c001b3a8:	e8 51 77 ff ff       	call   c0012afe <standardiseFiles(char*, char const*, char const*)>
c001b3ad:	89 34 24             	mov    DWORD PTR [esp],esi
c001b3b0:	e8 f3 52 fe ff       	call   c00006a8 <strlen>
c001b3b5:	83 c4 10             	add    esp,0x10
c001b3b8:	48                   	dec    eax
c001b3b9:	74 1d                	je     c001b3d8 <sysCallOpen(regs*)+0x61>
c001b3bb:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001b3be:	eb 0f                	jmp    c001b3cf <sysCallOpen(regs*)+0x58>
c001b3c0:	80 fa 3a             	cmp    dl,0x3a
c001b3c3:	74 0f                	je     c001b3d4 <sysCallOpen(regs*)+0x5d>
c001b3c5:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001b3c9:	48                   	dec    eax
c001b3ca:	74 0c                	je     c001b3d8 <sysCallOpen(regs*)+0x61>
c001b3cc:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001b3cf:	80 fa 2e             	cmp    dl,0x2e
c001b3d2:	75 ec                	jne    c001b3c0 <sysCallOpen(regs*)+0x49>
c001b3d4:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001b3d8:	83 ec 08             	sub    esp,0x8
c001b3db:	68 f5 a5 02 c0       	push   0xc002a5f5
c001b3e0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b3e3:	e8 47 ff ff ff       	call   c001b32f <string_ends_with(char const*, char const*)>
c001b3e8:	83 c4 10             	add    esp,0x10
c001b3eb:	85 c0                	test   eax,eax
c001b3ed:	75 17                	jne    c001b406 <sysCallOpen(regs*)+0x8f>
c001b3ef:	83 ec 08             	sub    esp,0x8
c001b3f2:	68 16 a6 02 c0       	push   0xc002a616
c001b3f7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b3fa:	e8 30 ff ff ff       	call   c001b32f <string_ends_with(char const*, char const*)>
c001b3ff:	83 c4 10             	add    esp,0x10
c001b402:	85 c0                	test   eax,eax
c001b404:	74 51                	je     c001b457 <sysCallOpen(regs*)+0xe0>
c001b406:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b409:	83 ec 08             	sub    esp,0x8
c001b40c:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001b412:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b419:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b41c:	ff 30                	push   DWORD PTR [eax]
c001b41e:	68 fa a5 02 c0       	push   0xc002a5fa
c001b423:	e8 51 73 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c001b428:	c7 04 24 09 a6 02 c0 	mov    DWORD PTR [esp],0xc002a609
c001b42f:	e8 45 73 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c001b434:	83 c4 10             	add    esp,0x10
c001b437:	81 c4 04 01 00 00    	add    esp,0x104
c001b43d:	31 c0                	xor    eax,eax
c001b43f:	31 d2                	xor    edx,edx
c001b441:	5b                   	pop    ebx
c001b442:	5e                   	pop    esi
c001b443:	c3                   	ret    
c001b444:	81 c4 04 01 00 00    	add    esp,0x104
c001b44a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b44f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b454:	5b                   	pop    ebx
c001b455:	5e                   	pop    esi
c001b456:	c3                   	ret    
c001b457:	83 ec 08             	sub    esp,0x8
c001b45a:	68 f6 a5 02 c0       	push   0xc002a5f6
c001b45f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b462:	e8 14 53 fe ff       	call   c000077b <strcmp>
c001b467:	83 c4 10             	add    esp,0x10
c001b46a:	85 c0                	test   eax,eax
c001b46c:	74 98                	je     c001b406 <sysCallOpen(regs*)+0x8f>
c001b46e:	83 ec 08             	sub    esp,0x8
c001b471:	68 f5 a5 02 c0       	push   0xc002a5f5
c001b476:	56                   	push   esi
c001b477:	e8 b3 fe ff ff       	call   c001b32f <string_ends_with(char const*, char const*)>
c001b47c:	83 c4 10             	add    esp,0x10
c001b47f:	85 c0                	test   eax,eax
c001b481:	75 83                	jne    c001b406 <sysCallOpen(regs*)+0x8f>
c001b483:	83 ec 08             	sub    esp,0x8
c001b486:	68 1b a6 02 c0       	push   0xc002a61b
c001b48b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b48e:	e8 9c fe ff ff       	call   c001b32f <string_ends_with(char const*, char const*)>
c001b493:	83 c4 10             	add    esp,0x10
c001b496:	85 c0                	test   eax,eax
c001b498:	0f 85 d9 00 00 00    	jne    c001b577 <sysCallOpen(regs*)+0x200>
c001b49e:	83 ec 08             	sub    esp,0x8
c001b4a1:	68 20 a6 02 c0       	push   0xc002a620
c001b4a6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b4a9:	e8 81 fe ff ff       	call   c001b32f <string_ends_with(char const*, char const*)>
c001b4ae:	83 c4 10             	add    esp,0x10
c001b4b1:	85 c0                	test   eax,eax
c001b4b3:	0f 85 be 00 00 00    	jne    c001b577 <sysCallOpen(regs*)+0x200>
c001b4b9:	83 ec 08             	sub    esp,0x8
c001b4bc:	68 1c a6 02 c0       	push   0xc002a61c
c001b4c1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b4c4:	e8 b2 52 fe ff       	call   c000077b <strcmp>
c001b4c9:	83 c4 10             	add    esp,0x10
c001b4cc:	85 c0                	test   eax,eax
c001b4ce:	0f 84 a3 00 00 00    	je     c001b577 <sysCallOpen(regs*)+0x200>
c001b4d4:	83 ec 08             	sub    esp,0x8
c001b4d7:	68 1b a6 02 c0       	push   0xc002a61b
c001b4dc:	56                   	push   esi
c001b4dd:	e8 4d fe ff ff       	call   c001b32f <string_ends_with(char const*, char const*)>
c001b4e2:	83 c4 10             	add    esp,0x10
c001b4e5:	85 c0                	test   eax,eax
c001b4e7:	0f 85 8a 00 00 00    	jne    c001b577 <sysCallOpen(regs*)+0x200>
c001b4ed:	83 ec 0c             	sub    esp,0xc
c001b4f0:	68 14 01 00 00       	push   0x114
c001b4f5:	e8 da 3f ff ff       	call   c000f4d4 <malloc>
c001b4fa:	83 c4 0c             	add    esp,0xc
c001b4fd:	89 c6                	mov    esi,eax
c001b4ff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b504:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b507:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b50a:	56                   	push   esi
c001b50b:	e8 98 77 ff ff       	call   c0012ca8 <File::File(char const*, Process*)>
c001b510:	83 c4 10             	add    esp,0x10
c001b513:	85 f6                	test   esi,esi
c001b515:	0f 84 29 ff ff ff    	je     c001b444 <sysCallOpen(regs*)+0xcd>
c001b51b:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001b51e:	0f b6 c2             	movzx  eax,dl
c001b521:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001b524:	89 d0                	mov    eax,edx
c001b526:	83 e0 01             	and    eax,0x1
c001b529:	f6 c2 02             	test   dl,0x2
c001b52c:	74 03                	je     c001b531 <sysCallOpen(regs*)+0x1ba>
c001b52e:	83 c8 02             	or     eax,0x2
c001b531:	f6 c2 04             	test   dl,0x4
c001b534:	74 03                	je     c001b539 <sysCallOpen(regs*)+0x1c2>
c001b536:	83 c8 04             	or     eax,0x4
c001b539:	f6 c2 08             	test   dl,0x8
c001b53c:	74 03                	je     c001b541 <sysCallOpen(regs*)+0x1ca>
c001b53e:	83 c8 0a             	or     eax,0xa
c001b541:	83 e2 10             	and    edx,0x10
c001b544:	74 03                	je     c001b549 <sysCallOpen(regs*)+0x1d2>
c001b546:	83 c8 12             	or     eax,0x12
c001b549:	83 ec 08             	sub    esp,0x8
c001b54c:	50                   	push   eax
c001b54d:	56                   	push   esi
c001b54e:	e8 b9 77 ff ff       	call   c0012d0c <File::open(FileOpenMode)>
c001b553:	83 c4 10             	add    esp,0x10
c001b556:	85 c0                	test   eax,eax
c001b558:	0f 85 e6 fe ff ff    	jne    c001b444 <sysCallOpen(regs*)+0xcd>
c001b55e:	83 ec 0c             	sub    esp,0xc
c001b561:	56                   	push   esi
c001b562:	e8 d7 5d ff ff       	call   c001133e <UnixFile::getFileDescriptor()>
c001b567:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b56a:	89 02                	mov    DWORD PTR [edx],eax
c001b56c:	c1 f8 1f             	sar    eax,0x1f
c001b56f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001b572:	e9 bd fe ff ff       	jmp    c001b434 <sysCallOpen(regs*)+0xbd>
c001b577:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b57a:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001b580:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b587:	e9 ab fe ff ff       	jmp    c001b437 <sysCallOpen(regs*)+0xc0>

c001b58c <setupSystemCalls()>:
c001b58c:	c7 05 40 d5 02 c0 42 a7 01 c0 	mov    DWORD PTR ds:0xc002d540,0xc001a742
c001b596:	c7 05 44 d5 02 c0 88 a4 01 c0 	mov    DWORD PTR ds:0xc002d544,0xc001a488
c001b5a0:	c7 05 48 d5 02 c0 db a5 01 c0 	mov    DWORD PTR ds:0xc002d548,0xc001a5db
c001b5aa:	c7 05 4c d5 02 c0 da a6 01 c0 	mov    DWORD PTR ds:0xc002d54c,0xc001a6da
c001b5b4:	c7 05 50 d5 02 c0 73 a5 01 c0 	mov    DWORD PTR ds:0xc002d550,0xc001a573
c001b5be:	c7 05 54 d5 02 c0 bf a4 01 c0 	mov    DWORD PTR ds:0xc002d554,0xc001a4bf
c001b5c8:	c7 05 58 d5 02 c0 a0 a4 01 c0 	mov    DWORD PTR ds:0xc002d558,0xc001a4a0
c001b5d2:	c7 05 5c d5 02 c0 30 a6 01 c0 	mov    DWORD PTR ds:0xc002d55c,0xc001a630
c001b5dc:	c7 05 64 d5 02 c0 54 ac 01 c0 	mov    DWORD PTR ds:0xc002d564,0xc001ac54
c001b5e6:	c7 05 60 d5 02 c0 77 b3 01 c0 	mov    DWORD PTR ds:0xc002d560,0xc001b377
c001b5f0:	c7 05 68 d5 02 c0 dc ac 01 c0 	mov    DWORD PTR ds:0xc002d568,0xc001acdc
c001b5fa:	c7 05 6c d5 02 c0 43 a9 01 c0 	mov    DWORD PTR ds:0xc002d56c,0xc001a943
c001b604:	c7 05 70 d5 02 c0 7d a7 01 c0 	mov    DWORD PTR ds:0xc002d570,0xc001a77d
c001b60e:	c7 05 74 d5 02 c0 82 a7 01 c0 	mov    DWORD PTR ds:0xc002d574,0xc001a782
c001b618:	c7 05 78 d5 02 c0 b7 ad 01 c0 	mov    DWORD PTR ds:0xc002d578,0xc001adb7
c001b622:	c7 05 7c d5 02 c0 51 ad 01 c0 	mov    DWORD PTR ds:0xc002d57c,0xc001ad51
c001b62c:	c7 05 80 d5 02 c0 2b aa 01 c0 	mov    DWORD PTR ds:0xc002d580,0xc001aa2b
c001b636:	c7 05 84 d5 02 c0 94 aa 01 c0 	mov    DWORD PTR ds:0xc002d584,0xc001aa94
c001b640:	c7 05 88 d5 02 c0 11 ab 01 c0 	mov    DWORD PTR ds:0xc002d588,0xc001ab11
c001b64a:	c7 05 8c d5 02 c0 87 a7 01 c0 	mov    DWORD PTR ds:0xc002d58c,0xc001a787
c001b654:	c7 05 90 d5 02 c0 27 ae 01 c0 	mov    DWORD PTR ds:0xc002d590,0xc001ae27
c001b65e:	c7 05 94 d5 02 c0 41 ae 01 c0 	mov    DWORD PTR ds:0xc002d594,0xc001ae41
c001b668:	c7 05 98 d5 02 c0 41 ae 01 c0 	mov    DWORD PTR ds:0xc002d598,0xc001ae41
c001b672:	c7 05 9c d5 02 c0 82 ae 01 c0 	mov    DWORD PTR ds:0xc002d59c,0xc001ae82
c001b67c:	c7 05 a0 d5 02 c0 e6 ae 01 c0 	mov    DWORD PTR ds:0xc002d5a0,0xc001aee6
c001b686:	c7 05 a4 d5 02 c0 91 a7 01 c0 	mov    DWORD PTR ds:0xc002d5a4,0xc001a791
c001b690:	c7 05 a8 d5 02 c0 4a af 01 c0 	mov    DWORD PTR ds:0xc002d5a8,0xc001af4a
c001b69a:	c7 05 ac d5 02 c0 00 a9 01 c0 	mov    DWORD PTR ds:0xc002d5ac,0xc001a900
c001b6a4:	c7 05 b0 d5 02 c0 96 af 01 c0 	mov    DWORD PTR ds:0xc002d5b0,0xc001af96
c001b6ae:	c7 05 b4 d5 02 c0 d1 a9 01 c0 	mov    DWORD PTR ds:0xc002d5b4,0xc001a9d1
c001b6b8:	c7 05 b8 d5 02 c0 19 b0 01 c0 	mov    DWORD PTR ds:0xc002d5b8,0xc001b019
c001b6c2:	c7 05 bc d5 02 c0 94 ab 01 c0 	mov    DWORD PTR ds:0xc002d5bc,0xc001ab94
c001b6cc:	c7 05 c0 d5 02 c0 40 b0 01 c0 	mov    DWORD PTR ds:0xc002d5c0,0xc001b040
c001b6d6:	c7 05 c4 d5 02 c0 98 b0 01 c0 	mov    DWORD PTR ds:0xc002d5c4,0xc001b098
c001b6e0:	c7 05 c8 d5 02 c0 45 b1 01 c0 	mov    DWORD PTR ds:0xc002d5c8,0xc001b145
c001b6ea:	c7 05 cc d5 02 c0 a1 a7 01 c0 	mov    DWORD PTR ds:0xc002d5cc,0xc001a7a1
c001b6f4:	c7 05 d0 d5 02 c0 0b a8 01 c0 	mov    DWORD PTR ds:0xc002d5d0,0xc001a80b
c001b6fe:	c7 05 d4 d5 02 c0 51 a8 01 c0 	mov    DWORD PTR ds:0xc002d5d4,0xc001a851
c001b708:	c7 05 d8 d5 02 c0 64 b2 01 c0 	mov    DWORD PTR ds:0xc002d5d8,0xc001b264
c001b712:	c7 05 dc d5 02 c0 5c ae 01 c0 	mov    DWORD PTR ds:0xc002d5dc,0xc001ae5c
c001b71c:	c7 05 e0 d5 02 c0 a2 a8 01 c0 	mov    DWORD PTR ds:0xc002d5e0,0xc001a8a2
c001b726:	c7 05 e4 d5 02 c0 d6 b2 01 c0 	mov    DWORD PTR ds:0xc002d5e4,0xc001b2d6
c001b730:	c7 05 e8 d5 02 c0 1b b3 01 c0 	mov    DWORD PTR ds:0xc002d5e8,0xc001b31b
c001b73a:	c7 05 ec d5 02 c0 cb a4 01 c0 	mov    DWORD PTR ds:0xc002d5ec,0xc001a4cb
c001b744:	c7 05 f0 d5 02 c0 4c a6 01 c0 	mov    DWORD PTR ds:0xc002d5f0,0xc001a64c
c001b74e:	c3                   	ret    

c001b74f <systemCall(regs*, void*)>:
c001b74f:	53                   	push   ebx
c001b750:	83 ec 08             	sub    esp,0x8
c001b753:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b757:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001b75a:	83 f8 7f             	cmp    eax,0x7f
c001b75d:	77 16                	ja     c001b775 <systemCall(regs*, void*)+0x26>
c001b75f:	8b 14 85 40 d5 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2ac0]
c001b766:	85 d2                	test   edx,edx
c001b768:	74 0b                	je     c001b775 <systemCall(regs*, void*)+0x26>
c001b76a:	83 ec 0c             	sub    esp,0xc
c001b76d:	53                   	push   ebx
c001b76e:	ff d2                	call   edx
c001b770:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001b773:	eb 0d                	jmp    c001b782 <systemCall(regs*, void*)+0x33>
c001b775:	52                   	push   edx
c001b776:	52                   	push   edx
c001b777:	50                   	push   eax
c001b778:	68 25 a6 02 c0       	push   0xc002a625
c001b77d:	e8 f7 6f ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c001b782:	83 c4 10             	add    esp,0x10
c001b785:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b78a:	31 d2                	xor    edx,edx
c001b78c:	83 c4 08             	add    esp,0x8
c001b78f:	5b                   	pop    ebx
c001b790:	c3                   	ret    

c001b791 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001b791:	55                   	push   ebp
c001b792:	89 e5                	mov    ebp,esp
c001b794:	57                   	push   edi
c001b795:	56                   	push   esi
c001b796:	53                   	push   ebx
c001b797:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001b79d:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c001b7a0:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c001b7a3:	85 c0                	test   eax,eax
c001b7a5:	0f 95 c1             	setne  cl
c001b7a8:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001b7ac:	0f 94 c2             	sete   dl
c001b7af:	84 d1                	test   cl,dl
c001b7b1:	74 26                	je     c001b7d9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001b7b3:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c001b7ba:	74 1d                	je     c001b7d9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001b7bc:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001b7bf:	8d 91 00 10 00 00    	lea    edx,[ecx+0x1000]
c001b7c5:	89 d6                	mov    esi,edx
c001b7c7:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001b7cd:	81 ce 00 f0 ff ff    	or     esi,0xfffff000
c001b7d3:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001b7d6:	89 75 10             	mov    DWORD PTR [ebp+0x10],esi
c001b7d9:	83 ec 0c             	sub    esp,0xc
c001b7dc:	05 ff 0f 00 00       	add    eax,0xfff
c001b7e1:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001b7e4:	6a 01                	push   0x1
c001b7e6:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c001b7ec:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c001b7f2:	e8 92 5f ff ff       	call   c0011789 <Virt::allocateKernelVirtualPages(int)>
c001b7f7:	83 c4 10             	add    esp,0x10
c001b7fa:	89 c6                	mov    esi,eax
c001b7fc:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c001b802:	0f 86 21 01 00 00    	jbe    c001b929 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c001b808:	c1 eb 0c             	shr    ebx,0xc
c001b80b:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c001b815:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c001b81b:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001b81e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b821:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c001b827:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c001b82a:	29 d8                	sub    eax,ebx
c001b82c:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c001b832:	0f 83 f4 00 00 00    	jae    c001b92c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x19b>
c001b838:	83 ec 0c             	sub    esp,0xc
c001b83b:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c001b841:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001b844:	3d 00 10 00 00       	cmp    eax,0x1000
c001b849:	8b 09                	mov    ecx,DWORD PTR [ecx]
c001b84b:	52                   	push   edx
c001b84c:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c001b852:	52                   	push   edx
c001b853:	76 05                	jbe    c001b85a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc9>
c001b855:	b8 00 10 00 00       	mov    eax,0x1000
c001b85a:	31 d2                	xor    edx,edx
c001b85c:	52                   	push   edx
c001b85d:	50                   	push   eax
c001b85e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c001b861:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b864:	83 c4 20             	add    esp,0x20
c001b867:	85 c0                	test   eax,eax
c001b869:	74 1f                	je     c001b88a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf9>
c001b86b:	51                   	push   ecx
c001b86c:	51                   	push   ecx
c001b86d:	50                   	push   eax
c001b86e:	68 39 a6 02 c0       	push   0xc002a639
c001b873:	e8 01 6f ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c001b878:	89 34 24             	mov    DWORD PTR [esp],esi
c001b87b:	e8 6d 62 ff ff       	call   c0011aed <Virt::freeKernelVirtualPages(unsigned long)>
c001b880:	83 c4 10             	add    esp,0x10
c001b883:	31 c0                	xor    eax,eax
c001b885:	e9 7c 01 00 00       	jmp    c001ba06 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c001b88a:	e8 2b 15 00 00       	call   c001cdba <lockScheduler()>
c001b88f:	e8 b3 42 ff ff       	call   c000fb47 <Phys::allocatePage()>
c001b894:	6a 07                	push   0x7
c001b896:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c001b89c:	56                   	push   esi
c001b89d:	50                   	push   eax
c001b89e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001b8a4:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001b8a7:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001b8ad:	e8 a2 65 ff ff       	call   c0011e54 <VAS::mapPage(unsigned long, unsigned long, int)>
c001b8b2:	83 c4 0c             	add    esp,0xc
c001b8b5:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001b8bb:	6a 00                	push   0x0
c001b8bd:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001b8c3:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001b8c6:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001b8cc:	e8 ed 63 ff ff       	call   c0011cbe <VAS::mapOtherVASIn(bool, VAS*)>
c001b8d1:	58                   	pop    eax
c001b8d2:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c001b8d8:	5a                   	pop    edx
c001b8d9:	68 07 04 00 00       	push   0x407
c001b8de:	53                   	push   ebx
c001b8df:	81 c3 00 10 00 00    	add    ebx,0x1000
c001b8e5:	50                   	push   eax
c001b8e6:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001b8ec:	6a 00                	push   0x0
c001b8ee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8f3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b8f6:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001b8fc:	e8 0d 69 ff ff       	call   c001220e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001b901:	83 c4 1c             	add    esp,0x1c
c001b904:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c001b90a:	68 00 10 00 00       	push   0x1000
c001b90f:	50                   	push   eax
c001b910:	56                   	push   esi
c001b911:	e8 3f 4d fe ff       	call   c0000655 <memcpy>
c001b916:	e8 a1 14 00 00       	call   c001cdbc <unlockScheduler()>
c001b91b:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c001b921:	83 c4 10             	add    esp,0x10
c001b924:	e9 f5 fe ff ff       	jmp    c001b81e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x8d>
c001b929:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001b92c:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c001b936:	0f 86 bc 00 00 00    	jbe    c001b9f8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x267>
c001b93c:	e8 79 14 00 00       	call   c001cdba <lockScheduler()>
c001b941:	51                   	push   ecx
c001b942:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001b948:	6a 00                	push   0x0
c001b94a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b94f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b952:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001b958:	e8 61 63 ff ff       	call   c0011cbe <VAS::mapOtherVASIn(bool, VAS*)>
c001b95d:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c001b963:	83 c4 10             	add    esp,0x10
c001b966:	c1 e8 0c             	shr    eax,0xc
c001b969:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c001b973:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c001b979:	e8 c9 41 ff ff       	call   c000fb47 <Phys::allocatePage()>
c001b97e:	6a 07                	push   0x7
c001b980:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c001b986:	56                   	push   esi
c001b987:	50                   	push   eax
c001b988:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b98e:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b991:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c001b997:	e8 b8 64 ff ff       	call   c0011e54 <VAS::mapPage(unsigned long, unsigned long, int)>
c001b99c:	58                   	pop    eax
c001b99d:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c001b9a3:	5a                   	pop    edx
c001b9a4:	68 07 04 00 00       	push   0x407
c001b9a9:	53                   	push   ebx
c001b9aa:	81 c3 00 10 00 00    	add    ebx,0x1000
c001b9b0:	50                   	push   eax
c001b9b1:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001b9b7:	6a 00                	push   0x0
c001b9b9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b9be:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b9c1:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001b9c7:	e8 42 68 ff ff       	call   c001220e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001b9cc:	83 c4 1c             	add    esp,0x1c
c001b9cf:	68 00 10 00 00       	push   0x1000
c001b9d4:	6a 00                	push   0x0
c001b9d6:	56                   	push   esi
c001b9d7:	e8 af 4c fe ff       	call   c000068b <memset>
c001b9dc:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c001b9e2:	83 c4 10             	add    esp,0x10
c001b9e5:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c001b9eb:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c001b9f1:	77 86                	ja     c001b979 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e8>
c001b9f3:	e8 c4 13 00 00       	call   c001cdbc <unlockScheduler()>
c001b9f8:	83 ec 0c             	sub    esp,0xc
c001b9fb:	56                   	push   esi
c001b9fc:	e8 ec 60 ff ff       	call   c0011aed <Virt::freeKernelVirtualPages(unsigned long)>
c001ba01:	83 c4 10             	add    esp,0x10
c001ba04:	b0 01                	mov    al,0x1
c001ba06:	8d 65 f4             	lea    esp,[ebp-0xc]
c001ba09:	5b                   	pop    ebx
c001ba0a:	5e                   	pop    esi
c001ba0b:	5f                   	pop    edi
c001ba0c:	5d                   	pop    ebp
c001ba0d:	c3                   	ret    

c001ba0e <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001ba0e:	55                   	push   ebp
c001ba0f:	57                   	push   edi
c001ba10:	56                   	push   esi
c001ba11:	53                   	push   ebx
c001ba12:	83 ec 48             	sub    esp,0x48
c001ba15:	68 14 01 00 00       	push   0x114
c001ba1a:	e8 b5 3a ff ff       	call   c000f4d4 <malloc>
c001ba1f:	83 c4 0c             	add    esp,0xc
c001ba22:	89 c6                	mov    esi,eax
c001ba24:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001ba28:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001ba2c:	50                   	push   eax
c001ba2d:	e8 76 72 ff ff       	call   c0012ca8 <File::File(char const*, Process*)>
c001ba32:	58                   	pop    eax
c001ba33:	5a                   	pop    edx
c001ba34:	6a 01                	push   0x1
c001ba36:	56                   	push   esi
c001ba37:	e8 d0 72 ff ff       	call   c0012d0c <File::open(FileOpenMode)>
c001ba3c:	83 c4 10             	add    esp,0x10
c001ba3f:	85 c0                	test   eax,eax
c001ba41:	0f 85 47 01 00 00    	jne    c001bb8e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ba47:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001ba4f:	83 ec 0c             	sub    esp,0xc
c001ba52:	6a 34                	push   0x34
c001ba54:	e8 7b 3a ff ff       	call   c000f4d4 <malloc>
c001ba59:	89 c3                	mov    ebx,eax
c001ba5b:	58                   	pop    eax
c001ba5c:	8b 06                	mov    eax,DWORD PTR [esi]
c001ba5e:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001ba62:	57                   	push   edi
c001ba63:	53                   	push   ebx
c001ba64:	6a 00                	push   0x0
c001ba66:	6a 34                	push   0x34
c001ba68:	56                   	push   esi
c001ba69:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ba6c:	83 c4 20             	add    esp,0x20
c001ba6f:	85 c0                	test   eax,eax
c001ba71:	0f 85 17 01 00 00    	jne    c001bb8e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ba77:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001ba7d:	0f 85 0b 01 00 00    	jne    c001bb8e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ba83:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ba86:	85 c0                	test   eax,eax
c001ba88:	0f 84 00 01 00 00    	je     c001bb8e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ba8e:	31 d2                	xor    edx,edx
c001ba90:	55                   	push   ebp
c001ba91:	52                   	push   edx
c001ba92:	50                   	push   eax
c001ba93:	56                   	push   esi
c001ba94:	e8 31 73 ff ff       	call   c0012dca <File::seek(unsigned long long)>
c001ba99:	83 c4 10             	add    esp,0x10
c001ba9c:	85 c0                	test   eax,eax
c001ba9e:	0f 85 ea 00 00 00    	jne    c001bb8e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001baa4:	83 ec 0c             	sub    esp,0xc
c001baa7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001baaa:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001baae:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001bab2:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001bab6:	0f af c2             	imul   eax,edx
c001bab9:	50                   	push   eax
c001baba:	e8 15 3a ff ff       	call   c000f4d4 <malloc>
c001babf:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001bac1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001bac5:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bac8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001bacc:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001bad0:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001bad4:	0f af c2             	imul   eax,edx
c001bad7:	99                   	cdq    
c001bad8:	52                   	push   edx
c001bad9:	50                   	push   eax
c001bada:	56                   	push   esi
c001badb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001bade:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001bae1:	83 c4 20             	add    esp,0x20
c001bae4:	85 c0                	test   eax,eax
c001bae6:	0f 84 a2 00 00 00    	je     c001bb8e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001baec:	31 d2                	xor    edx,edx
c001baee:	51                   	push   ecx
c001baef:	52                   	push   edx
c001baf0:	50                   	push   eax
c001baf1:	56                   	push   esi
c001baf2:	e8 d3 72 ff ff       	call   c0012dca <File::seek(unsigned long long)>
c001baf7:	83 c4 10             	add    esp,0x10
c001bafa:	85 c0                	test   eax,eax
c001bafc:	0f 85 8c 00 00 00    	jne    c001bb8e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001bb02:	83 ec 0c             	sub    esp,0xc
c001bb05:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001bb09:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001bb0d:	31 ed                	xor    ebp,ebp
c001bb0f:	0f af c2             	imul   eax,edx
c001bb12:	50                   	push   eax
c001bb13:	e8 bc 39 ff ff       	call   c000f4d4 <malloc>
c001bb18:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001bb1a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001bb1e:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bb21:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bb25:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001bb29:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001bb2d:	0f af c2             	imul   eax,edx
c001bb30:	99                   	cdq    
c001bb31:	52                   	push   edx
c001bb32:	50                   	push   eax
c001bb33:	56                   	push   esi
c001bb34:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001bb37:	83 c4 20             	add    esp,0x20
c001bb3a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001bb42:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001bb46:	0f 86 80 00 00 00    	jbe    c001bbcc <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001bb4c:	0f b7 fd             	movzx  edi,bp
c001bb4f:	c1 e7 05             	shl    edi,0x5
c001bb52:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001bb56:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001bb59:	75 6b                	jne    c001bbc6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001bb5b:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001bb5e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bb62:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001bb65:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bb69:	52                   	push   edx
c001bb6a:	31 d2                	xor    edx,edx
c001bb6c:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001bb6f:	52                   	push   edx
c001bb70:	50                   	push   eax
c001bb71:	56                   	push   esi
c001bb72:	e8 53 72 ff ff       	call   c0012dca <File::seek(unsigned long long)>
c001bb77:	83 c4 10             	add    esp,0x10
c001bb7a:	85 c0                	test   eax,eax
c001bb7c:	74 17                	je     c001bb95 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001bb7e:	83 ec 0c             	sub    esp,0xc
c001bb81:	68 64 a6 02 c0       	push   0xc002a664
c001bb86:	e8 ee 6b ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c001bb8b:	83 c4 10             	add    esp,0x10
c001bb8e:	31 c0                	xor    eax,eax
c001bb90:	e9 87 00 00 00       	jmp    c001bc1c <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001bb95:	83 ec 0c             	sub    esp,0xc
c001bb98:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001bb9b:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001bb9e:	50                   	push   eax
c001bb9f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001bba3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bba7:	56                   	push   esi
c001bba8:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001bbac:	e8 e0 fb ff ff       	call   c001b791 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001bbb1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001bbb5:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001bbb9:	83 c4 20             	add    esp,0x20
c001bbbc:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001bbc0:	73 04                	jae    c001bbc6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001bbc2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bbc6:	45                   	inc    ebp
c001bbc7:	e9 76 ff ff ff       	jmp    c001bb42 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001bbcc:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001bbd0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bbd4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bbd8:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001bbde:	83 ec 0c             	sub    esp,0xc
c001bbe1:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001bbe7:	25 00 f0 ff ff       	and    eax,0xfffff000
c001bbec:	05 00 10 00 00       	add    eax,0x1000
c001bbf1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bbf4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bbf8:	e8 e7 38 ff ff       	call   c000f4e4 <free>
c001bbfd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bc00:	e8 df 38 ff ff       	call   c000f4e4 <free>
c001bc05:	58                   	pop    eax
c001bc06:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bc0a:	e8 d5 38 ff ff       	call   c000f4e4 <free>
c001bc0f:	89 34 24             	mov    DWORD PTR [esp],esi
c001bc12:	e8 53 71 ff ff       	call   c0012d6a <File::close()>
c001bc17:	83 c4 10             	add    esp,0x10
c001bc1a:	b0 01                	mov    al,0x1
c001bc1c:	83 c4 3c             	add    esp,0x3c
c001bc1f:	5b                   	pop    ebx
c001bc20:	5e                   	pop    esi
c001bc21:	5f                   	pop    edi
c001bc22:	5d                   	pop    ebp
c001bc23:	c3                   	ret    

c001bc24 <Thr::runtimeReferenceHelper()>:
c001bc24:	83 ec 18             	sub    esp,0x18
c001bc27:	68 6c a6 02 c0       	push   0xc002a66c
c001bc2c:	e8 48 6b ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c001bc31:	fa                   	cli    
c001bc32:	83 c4 10             	add    esp,0x10
c001bc35:	eb fe                	jmp    c001bc35 <Thr::runtimeReferenceHelper()+0x11>

c001bc37 <Thr::getAddressOfKernelSymbol(char const*)>:
c001bc37:	57                   	push   edi
c001bc38:	56                   	push   esi
c001bc39:	53                   	push   ebx
c001bc3a:	31 db                	xor    ebx,ebx
c001bc3c:	39 1d e0 de 02 c0    	cmp    DWORD PTR ds:0xc002dee0,ebx
c001bc42:	7e 3c                	jle    c001bc80 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001bc44:	8b 34 9d 60 de 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd21a0]
c001bc4b:	31 ff                	xor    edi,edi
c001bc4d:	39 3c 9d 60 dd 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd22a0],edi
c001bc54:	7e 27                	jle    c001bc7d <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001bc56:	50                   	push   eax
c001bc57:	50                   	push   eax
c001bc58:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bc5c:	8b 06                	mov    eax,DWORD PTR [esi]
c001bc5e:	03 04 9d e0 dd 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd2220]
c001bc65:	50                   	push   eax
c001bc66:	e8 10 4b fe ff       	call   c000077b <strcmp>
c001bc6b:	83 c4 10             	add    esp,0x10
c001bc6e:	85 c0                	test   eax,eax
c001bc70:	75 05                	jne    c001bc77 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001bc72:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001bc75:	eb 0b                	jmp    c001bc82 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001bc77:	83 c6 10             	add    esi,0x10
c001bc7a:	47                   	inc    edi
c001bc7b:	eb d0                	jmp    c001bc4d <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001bc7d:	43                   	inc    ebx
c001bc7e:	eb bc                	jmp    c001bc3c <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001bc80:	31 c0                	xor    eax,eax
c001bc82:	5b                   	pop    ebx
c001bc83:	5e                   	pop    esi
c001bc84:	5f                   	pop    edi
c001bc85:	c3                   	ret    

c001bc86 <Thr::loadKernelSymbolTable(char const*)>:
c001bc86:	55                   	push   ebp
c001bc87:	57                   	push   edi
c001bc88:	56                   	push   esi
c001bc89:	53                   	push   ebx
c001bc8a:	83 ec 68             	sub    esp,0x68
c001bc8d:	8b 35 34 df 02 c0    	mov    esi,DWORD PTR ds:0xc002df34
c001bc93:	68 14 01 00 00       	push   0x114
c001bc98:	e8 37 38 ff ff       	call   c000f4d4 <malloc>
c001bc9d:	83 c4 0c             	add    esp,0xc
c001bca0:	89 c3                	mov    ebx,eax
c001bca2:	56                   	push   esi
c001bca3:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001bca7:	50                   	push   eax
c001bca8:	e8 fb 6f ff ff       	call   c0012ca8 <File::File(char const*, Process*)>
c001bcad:	5e                   	pop    esi
c001bcae:	5f                   	pop    edi
c001bcaf:	6a 01                	push   0x1
c001bcb1:	53                   	push   ebx
c001bcb2:	e8 55 70 ff ff       	call   c0012d0c <File::open(FileOpenMode)>
c001bcb7:	83 c4 10             	add    esp,0x10
c001bcba:	31 d2                	xor    edx,edx
c001bcbc:	85 c0                	test   eax,eax
c001bcbe:	0f 85 74 02 00 00    	jne    c001bf38 <Thr::loadKernelSymbolTable(char const*)+0x2b2>
c001bcc4:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001bccc:	83 ec 0c             	sub    esp,0xc
c001bccf:	6a 34                	push   0x34
c001bcd1:	e8 fe 37 ff ff       	call   c000f4d4 <malloc>
c001bcd6:	59                   	pop    ecx
c001bcd7:	89 c7                	mov    edi,eax
c001bcd9:	8d 74 24 34          	lea    esi,[esp+0x34]
c001bcdd:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bcdf:	56                   	push   esi
c001bce0:	57                   	push   edi
c001bce1:	6a 00                	push   0x0
c001bce3:	6a 34                	push   0x34
c001bce5:	53                   	push   ebx
c001bce6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001bce9:	83 c4 20             	add    esp,0x20
c001bcec:	85 c0                	test   eax,eax
c001bcee:	74 17                	je     c001bd07 <Thr::loadKernelSymbolTable(char const*)+0x81>
c001bcf0:	83 ec 0c             	sub    esp,0xc
c001bcf3:	68 8e a6 02 c0       	push   0xc002a68e
c001bcf8:	e8 96 db ff ff       	call   c0019893 <Krnl::panic(char const*)>
c001bcfd:	83 c4 10             	add    esp,0x10
c001bd00:	31 d2                	xor    edx,edx
c001bd02:	e9 31 02 00 00       	jmp    c001bf38 <Thr::loadKernelSymbolTable(char const*)+0x2b2>
c001bd07:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001bd0d:	75 e1                	jne    c001bcf0 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001bd0f:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001bd12:	85 c0                	test   eax,eax
c001bd14:	74 da                	je     c001bcf0 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001bd16:	52                   	push   edx
c001bd17:	31 d2                	xor    edx,edx
c001bd19:	52                   	push   edx
c001bd1a:	50                   	push   eax
c001bd1b:	53                   	push   ebx
c001bd1c:	e8 a9 70 ff ff       	call   c0012dca <File::seek(unsigned long long)>
c001bd21:	83 c4 10             	add    esp,0x10
c001bd24:	85 c0                	test   eax,eax
c001bd26:	75 c8                	jne    c001bcf0 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001bd28:	83 ec 0c             	sub    esp,0xc
c001bd2b:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001bd2f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001bd33:	31 ed                	xor    ebp,ebp
c001bd35:	0f af c2             	imul   eax,edx
c001bd38:	50                   	push   eax
c001bd39:	e8 96 37 ff ff       	call   c000f4d4 <malloc>
c001bd3e:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001bd40:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bd44:	89 34 24             	mov    DWORD PTR [esp],esi
c001bd47:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bd4b:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001bd4f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001bd53:	0f af c2             	imul   eax,edx
c001bd56:	99                   	cdq    
c001bd57:	52                   	push   edx
c001bd58:	50                   	push   eax
c001bd59:	53                   	push   ebx
c001bd5a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001bd5d:	83 c4 20             	add    esp,0x20
c001bd60:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001bd68:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001bd70:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001bd78:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001bd80:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001bd84:	0f 86 aa 00 00 00    	jbe    c001be34 <Thr::loadKernelSymbolTable(char const*)+0x1ae>
c001bd8a:	0f b7 f5             	movzx  esi,bp
c001bd8d:	6b f6 28             	imul   esi,esi,0x28
c001bd90:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001bd94:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001bd97:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bd9b:	50                   	push   eax
c001bd9c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001bda0:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001bda4:	8b 16                	mov    edx,DWORD PTR [esi]
c001bda6:	6b c0 28             	imul   eax,eax,0x28
c001bda9:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001bdad:	89 d0                	mov    eax,edx
c001bdaf:	31 d2                	xor    edx,edx
c001bdb1:	52                   	push   edx
c001bdb2:	50                   	push   eax
c001bdb3:	53                   	push   ebx
c001bdb4:	e8 11 70 ff ff       	call   c0012dca <File::seek(unsigned long long)>
c001bdb9:	83 c4 0c             	add    esp,0xc
c001bdbc:	6a 20                	push   0x20
c001bdbe:	6a 00                	push   0x0
c001bdc0:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001bdc4:	52                   	push   edx
c001bdc5:	e8 c1 48 fe ff       	call   c000068b <memset>
c001bdca:	58                   	pop    eax
c001bdcb:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bdcd:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001bdd1:	51                   	push   ecx
c001bdd2:	8d 54 24 40          	lea    edx,[esp+0x40]
c001bdd6:	52                   	push   edx
c001bdd7:	6a 00                	push   0x0
c001bdd9:	6a 1f                	push   0x1f
c001bddb:	53                   	push   ebx
c001bddc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001bddf:	83 c4 18             	add    esp,0x18
c001bde2:	68 a5 a6 02 c0       	push   0xc002a6a5
c001bde7:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001bdeb:	52                   	push   edx
c001bdec:	e8 8a 49 fe ff       	call   c000077b <strcmp>
c001bdf1:	83 c4 10             	add    esp,0x10
c001bdf4:	85 c0                	test   eax,eax
c001bdf6:	75 0f                	jne    c001be07 <Thr::loadKernelSymbolTable(char const*)+0x181>
c001bdf8:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001bdfb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bdff:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001be03:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001be07:	50                   	push   eax
c001be08:	50                   	push   eax
c001be09:	68 ad a6 02 c0       	push   0xc002a6ad
c001be0e:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001be12:	50                   	push   eax
c001be13:	e8 63 49 fe ff       	call   c000077b <strcmp>
c001be18:	83 c4 10             	add    esp,0x10
c001be1b:	85 c0                	test   eax,eax
c001be1d:	75 0f                	jne    c001be2e <Thr::loadKernelSymbolTable(char const*)+0x1a8>
c001be1f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001be22:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001be26:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001be2a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001be2e:	45                   	inc    ebp
c001be2f:	e9 4c ff ff ff       	jmp    c001bd80 <Thr::loadKernelSymbolTable(char const*)+0xfa>
c001be34:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001be39:	75 10                	jne    c001be4b <Thr::loadKernelSymbolTable(char const*)+0x1c5>
c001be3b:	83 ec 0c             	sub    esp,0xc
c001be3e:	68 b5 a6 02 c0       	push   0xc002a6b5
c001be43:	e8 4b da ff ff       	call   c0019893 <Krnl::panic(char const*)>
c001be48:	83 c4 10             	add    esp,0x10
c001be4b:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001be50:	75 10                	jne    c001be62 <Thr::loadKernelSymbolTable(char const*)+0x1dc>
c001be52:	83 ec 0c             	sub    esp,0xc
c001be55:	68 b5 a6 02 c0       	push   0xc002a6b5
c001be5a:	e8 34 da ff ff       	call   c0019893 <Krnl::panic(char const*)>
c001be5f:	83 c4 10             	add    esp,0x10
c001be62:	31 d2                	xor    edx,edx
c001be64:	50                   	push   eax
c001be65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be69:	52                   	push   edx
c001be6a:	50                   	push   eax
c001be6b:	53                   	push   ebx
c001be6c:	e8 59 6f ff ff       	call   c0012dca <File::seek(unsigned long long)>
c001be71:	5a                   	pop    edx
c001be72:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001be76:	e8 59 36 ff ff       	call   c000f4d4 <malloc>
c001be7b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001be7f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001be83:	31 c9                	xor    ecx,ecx
c001be85:	5e                   	pop    esi
c001be86:	8b 03                	mov    eax,DWORD PTR [ebx]
c001be88:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001be8c:	55                   	push   ebp
c001be8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001be91:	51                   	push   ecx
c001be92:	52                   	push   edx
c001be93:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001be97:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001be9b:	53                   	push   ebx
c001be9c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001be9f:	83 c4 14             	add    esp,0x14
c001bea2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001bea6:	e8 29 36 ff ff       	call   c000f4d4 <malloc>
c001beab:	89 c6                	mov    esi,eax
c001bead:	8b 03                	mov    eax,DWORD PTR [ebx]
c001beaf:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001beb2:	56                   	push   esi
c001beb3:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001beb7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001bebb:	51                   	push   ecx
c001bebc:	52                   	push   edx
c001bebd:	53                   	push   ebx
c001bebe:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001bec1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001bec5:	8b 15 e0 de 02 c0    	mov    edx,DWORD PTR ds:0xc002dee0
c001becb:	83 c4 1c             	add    esp,0x1c
c001bece:	c1 e8 04             	shr    eax,0x4
c001bed1:	89 04 95 60 dd 02 c0 	mov    DWORD PTR [edx*4-0x3ffd22a0],eax
c001bed8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bedc:	31 d2                	xor    edx,edx
c001bede:	52                   	push   edx
c001bedf:	50                   	push   eax
c001bee0:	53                   	push   ebx
c001bee1:	e8 e4 6e ff ff       	call   c0012dca <File::seek(unsigned long long)>
c001bee6:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001bee8:	31 d2                	xor    edx,edx
c001beea:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001beed:	56                   	push   esi
c001beee:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001bef2:	52                   	push   edx
c001bef3:	50                   	push   eax
c001bef4:	53                   	push   ebx
c001bef5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001bef8:	83 c4 14             	add    esp,0x14
c001befb:	53                   	push   ebx
c001befc:	e8 69 6e ff ff       	call   c0012d6a <File::close()>
c001bf01:	5d                   	pop    ebp
c001bf02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001bf06:	e8 d9 35 ff ff       	call   c000f4e4 <free>
c001bf0b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bf0e:	e8 d1 35 ff ff       	call   c000f4e4 <free>
c001bf13:	a1 e0 de 02 c0       	mov    eax,ds:0xc002dee0
c001bf18:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001bf1c:	8d 50 01             	lea    edx,[eax+0x1]
c001bf1f:	89 0c 85 60 de 02 c0 	mov    DWORD PTR [eax*4-0x3ffd21a0],ecx
c001bf26:	89 15 e0 de 02 c0    	mov    DWORD PTR ds:0xc002dee0,edx
c001bf2c:	89 34 85 e0 dd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2220],esi
c001bf33:	83 c4 10             	add    esp,0x10
c001bf36:	b2 01                	mov    dl,0x1
c001bf38:	83 c4 5c             	add    esp,0x5c
c001bf3b:	88 d0                	mov    al,dl
c001bf3d:	5b                   	pop    ebx
c001bf3e:	5e                   	pop    esi
c001bf3f:	5f                   	pop    edi
c001bf40:	5d                   	pop    ebp
c001bf41:	c3                   	ret    

c001bf42 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001bf42:	55                   	push   ebp
c001bf43:	57                   	push   edi
c001bf44:	56                   	push   esi
c001bf45:	53                   	push   ebx
c001bf46:	81 ec 68 03 00 00    	sub    esp,0x368
c001bf4c:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001bf53:	8b 1d 34 df 02 c0    	mov    ebx,DWORD PTR ds:0xc002df34
c001bf59:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001bf5d:	68 14 01 00 00       	push   0x114
c001bf62:	e8 6d 35 ff ff       	call   c000f4d4 <malloc>
c001bf67:	83 c4 0c             	add    esp,0xc
c001bf6a:	89 c5                	mov    ebp,eax
c001bf6c:	53                   	push   ebx
c001bf6d:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001bf74:	50                   	push   eax
c001bf75:	e8 2e 6d ff ff       	call   c0012ca8 <File::File(char const*, Process*)>
c001bf7a:	58                   	pop    eax
c001bf7b:	5a                   	pop    edx
c001bf7c:	6a 01                	push   0x1
c001bf7e:	55                   	push   ebp
c001bf7f:	e8 88 6d ff ff       	call   c0012d0c <File::open(FileOpenMode)>
c001bf84:	83 c4 10             	add    esp,0x10
c001bf87:	85 c0                	test   eax,eax
c001bf89:	0f 85 f2 06 00 00    	jne    c001c681 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001bf8f:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001bf97:	83 ec 0c             	sub    esp,0xc
c001bf9a:	6a 34                	push   0x34
c001bf9c:	e8 33 35 ff ff       	call   c000f4d4 <malloc>
c001bfa1:	89 c7                	mov    edi,eax
c001bfa3:	58                   	pop    eax
c001bfa4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001bfa7:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001bfab:	53                   	push   ebx
c001bfac:	57                   	push   edi
c001bfad:	6a 00                	push   0x0
c001bfaf:	6a 34                	push   0x34
c001bfb1:	55                   	push   ebp
c001bfb2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001bfb5:	83 c4 20             	add    esp,0x20
c001bfb8:	85 c0                	test   eax,eax
c001bfba:	0f 85 c1 06 00 00    	jne    c001c681 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001bfc0:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001bfc6:	0f 85 b5 06 00 00    	jne    c001c681 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001bfcc:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001bfcf:	85 c0                	test   eax,eax
c001bfd1:	0f 84 aa 06 00 00    	je     c001c681 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001bfd7:	31 d2                	xor    edx,edx
c001bfd9:	56                   	push   esi
c001bfda:	52                   	push   edx
c001bfdb:	50                   	push   eax
c001bfdc:	55                   	push   ebp
c001bfdd:	e8 e8 6d ff ff       	call   c0012dca <File::seek(unsigned long long)>
c001bfe2:	83 c4 10             	add    esp,0x10
c001bfe5:	85 c0                	test   eax,eax
c001bfe7:	0f 85 94 06 00 00    	jne    c001c681 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001bfed:	83 ec 0c             	sub    esp,0xc
c001bff0:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001bff3:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001bff7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001bffb:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001bfff:	0f af c2             	imul   eax,edx
c001c002:	50                   	push   eax
c001c003:	e8 cc 34 ff ff       	call   c000f4d4 <malloc>
c001c008:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c00b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c00f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c012:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c016:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c01a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c01e:	0f af c2             	imul   eax,edx
c001c021:	99                   	cdq    
c001c022:	52                   	push   edx
c001c023:	50                   	push   eax
c001c024:	55                   	push   ebp
c001c025:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c028:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001c02b:	83 c4 20             	add    esp,0x20
c001c02e:	85 c0                	test   eax,eax
c001c030:	0f 84 4b 06 00 00    	je     c001c681 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001c036:	31 d2                	xor    edx,edx
c001c038:	51                   	push   ecx
c001c039:	52                   	push   edx
c001c03a:	50                   	push   eax
c001c03b:	55                   	push   ebp
c001c03c:	e8 89 6d ff ff       	call   c0012dca <File::seek(unsigned long long)>
c001c041:	83 c4 10             	add    esp,0x10
c001c044:	85 c0                	test   eax,eax
c001c046:	0f 85 35 06 00 00    	jne    c001c681 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001c04c:	83 ec 0c             	sub    esp,0xc
c001c04f:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001c053:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001c057:	31 f6                	xor    esi,esi
c001c059:	0f af c2             	imul   eax,edx
c001c05c:	50                   	push   eax
c001c05d:	e8 72 34 ff ff       	call   c000f4d4 <malloc>
c001c062:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c065:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001c069:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c06c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c070:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001c074:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001c078:	0f af c2             	imul   eax,edx
c001c07b:	99                   	cdq    
c001c07c:	52                   	push   edx
c001c07d:	50                   	push   eax
c001c07e:	55                   	push   ebp
c001c07f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c082:	83 c4 20             	add    esp,0x20
c001c085:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001c089:	0f 86 8a 00 00 00    	jbe    c001c119 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001c08f:	0f b7 de             	movzx  ebx,si
c001c092:	c1 e3 05             	shl    ebx,0x5
c001c095:	03 5c 24 1c          	add    ebx,DWORD PTR [esp+0x1c]
c001c099:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001c09c:	75 75                	jne    c001c113 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001c09e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001c0a1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c0a5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001c0a8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c0ac:	52                   	push   edx
c001c0ad:	31 d2                	xor    edx,edx
c001c0af:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001c0b2:	52                   	push   edx
c001c0b3:	50                   	push   eax
c001c0b4:	55                   	push   ebp
c001c0b5:	e8 10 6d ff ff       	call   c0012dca <File::seek(unsigned long long)>
c001c0ba:	83 c4 10             	add    esp,0x10
c001c0bd:	85 c0                	test   eax,eax
c001c0bf:	0f 85 bc 05 00 00    	jne    c001c681 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001c0c5:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001c0cc:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c0cf:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001c0d3:	31 d2                	xor    edx,edx
c001c0d5:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001c0d9:	83 ec 0c             	sub    esp,0xc
c001c0dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c0e0:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c0e7:	50                   	push   eax
c001c0e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c0ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c0f0:	52                   	push   edx
c001c0f1:	50                   	push   eax
c001c0f2:	55                   	push   ebp
c001c0f3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c0f6:	83 c4 1c             	add    esp,0x1c
c001c0f9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001c0fc:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001c0ff:	50                   	push   eax
c001c100:	6a 00                	push   0x0
c001c102:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c106:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001c10a:	50                   	push   eax
c001c10b:	e8 7b 45 fe ff       	call   c000068b <memset>
c001c110:	83 c4 10             	add    esp,0x10
c001c113:	46                   	inc    esi
c001c114:	e9 6c ff ff ff       	jmp    c001c085 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001c119:	31 db                	xor    ebx,ebx
c001c11b:	50                   	push   eax
c001c11c:	68 00 01 00 00       	push   0x100
c001c121:	6a 00                	push   0x0
c001c123:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001c127:	50                   	push   eax
c001c128:	e8 5e 45 fe ff       	call   c000068b <memset>
c001c12d:	83 c4 0c             	add    esp,0xc
c001c130:	68 00 01 00 00       	push   0x100
c001c135:	6a 00                	push   0x0
c001c137:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001c13e:	50                   	push   eax
c001c13f:	e8 47 45 fe ff       	call   c000068b <memset>
c001c144:	83 c4 10             	add    esp,0x10
c001c147:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c14f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001c157:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001c15f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c167:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001c16f:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001c173:	0f 86 30 01 00 00    	jbe    c001c2a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001c179:	0f b7 f3             	movzx  esi,bx
c001c17c:	6b f6 28             	imul   esi,esi,0x28
c001c17f:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c001c183:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001c186:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c18a:	50                   	push   eax
c001c18b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c18f:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001c193:	8b 06                	mov    eax,DWORD PTR [esi]
c001c195:	6b d2 28             	imul   edx,edx,0x28
c001c198:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001c19c:	31 d2                	xor    edx,edx
c001c19e:	52                   	push   edx
c001c19f:	50                   	push   eax
c001c1a0:	55                   	push   ebp
c001c1a1:	e8 24 6c ff ff       	call   c0012dca <File::seek(unsigned long long)>
c001c1a6:	83 c4 0c             	add    esp,0xc
c001c1a9:	6a 20                	push   0x20
c001c1ab:	6a 00                	push   0x0
c001c1ad:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001c1b4:	51                   	push   ecx
c001c1b5:	e8 d1 44 fe ff       	call   c000068b <memset>
c001c1ba:	58                   	pop    eax
c001c1bb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c1be:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c1c2:	52                   	push   edx
c001c1c3:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001c1ca:	51                   	push   ecx
c001c1cb:	6a 00                	push   0x0
c001c1cd:	6a 1f                	push   0x1f
c001c1cf:	55                   	push   ebp
c001c1d0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c1d3:	83 c4 1c             	add    esp,0x1c
c001c1d6:	6a 09                	push   0x9
c001c1d8:	68 cf a6 02 c0       	push   0xc002a6cf
c001c1dd:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001c1e4:	51                   	push   ecx
c001c1e5:	e8 08 44 fe ff       	call   c00005f2 <memcmp>
c001c1ea:	83 c4 10             	add    esp,0x10
c001c1ed:	85 c0                	test   eax,eax
c001c1ef:	75 21                	jne    c001c212 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001c1f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c1f5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001c1f9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c1fd:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001c201:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c204:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c001c20b:	89 c8                	mov    eax,ecx
c001c20d:	40                   	inc    eax
c001c20e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c212:	50                   	push   eax
c001c213:	6a 09                	push   0x9
c001c215:	68 d9 a6 02 c0       	push   0xc002a6d9
c001c21a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c221:	50                   	push   eax
c001c222:	e8 cb 43 fe ff       	call   c00005f2 <memcmp>
c001c227:	83 c4 10             	add    esp,0x10
c001c22a:	85 c0                	test   eax,eax
c001c22c:	75 21                	jne    c001c24f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001c22e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c232:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001c236:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c23a:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001c23e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c241:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c001c248:	89 c8                	mov    eax,ecx
c001c24a:	40                   	inc    eax
c001c24b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c24f:	50                   	push   eax
c001c250:	50                   	push   eax
c001c251:	68 a5 a6 02 c0       	push   0xc002a6a5
c001c256:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c25d:	50                   	push   eax
c001c25e:	e8 18 45 fe ff       	call   c000077b <strcmp>
c001c263:	83 c4 10             	add    esp,0x10
c001c266:	85 c0                	test   eax,eax
c001c268:	75 0f                	jne    c001c279 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001c26a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c26d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c271:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c275:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c279:	50                   	push   eax
c001c27a:	50                   	push   eax
c001c27b:	68 ad a6 02 c0       	push   0xc002a6ad
c001c280:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c287:	50                   	push   eax
c001c288:	e8 ee 44 fe ff       	call   c000077b <strcmp>
c001c28d:	83 c4 10             	add    esp,0x10
c001c290:	85 c0                	test   eax,eax
c001c292:	75 0f                	jne    c001c2a3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001c294:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c297:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c29b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c29f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c2a3:	43                   	inc    ebx
c001c2a4:	e9 c6 fe ff ff       	jmp    c001c16f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001c2a9:	31 d2                	xor    edx,edx
c001c2ab:	50                   	push   eax
c001c2ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c2b0:	52                   	push   edx
c001c2b1:	50                   	push   eax
c001c2b2:	55                   	push   ebp
c001c2b3:	e8 12 6b ff ff       	call   c0012dca <File::seek(unsigned long long)>
c001c2b8:	5a                   	pop    edx
c001c2b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c2bd:	e8 12 32 ff ff       	call   c000f4d4 <malloc>
c001c2c2:	31 d2                	xor    edx,edx
c001c2c4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001c2c8:	59                   	pop    ecx
c001c2c9:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c2cc:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001c2d0:	53                   	push   ebx
c001c2d1:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001c2d5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c2d9:	52                   	push   edx
c001c2da:	50                   	push   eax
c001c2db:	55                   	push   ebp
c001c2dc:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c2df:	83 c4 14             	add    esp,0x14
c001c2e2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c2e6:	e8 e9 31 ff ff       	call   c000f4d4 <malloc>
c001c2eb:	31 d2                	xor    edx,edx
c001c2ed:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c2f1:	83 c4 0c             	add    esp,0xc
c001c2f4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c2f8:	52                   	push   edx
c001c2f9:	50                   	push   eax
c001c2fa:	55                   	push   ebp
c001c2fb:	e8 ca 6a ff ff       	call   c0012dca <File::seek(unsigned long long)>
c001c300:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c303:	31 d2                	xor    edx,edx
c001c305:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c308:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c30c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c310:	52                   	push   edx
c001c311:	50                   	push   eax
c001c312:	55                   	push   ebp
c001c313:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c316:	83 c4 20             	add    esp,0x20
c001c319:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001c321:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c325:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c001c329:	0f 84 56 03 00 00    	je     c001c685 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x743>
c001c32f:	8b 84 94 50 01 00 00 	mov    eax,DWORD PTR [esp+edx*4+0x150]
c001c336:	31 d2                	xor    edx,edx
c001c338:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c33c:	c1 e8 03             	shr    eax,0x3
c001c33f:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001c343:	50                   	push   eax
c001c344:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c348:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001c34c:	52                   	push   edx
c001c34d:	50                   	push   eax
c001c34e:	55                   	push   ebp
c001c34f:	e8 76 6a ff ff       	call   c0012dca <File::seek(unsigned long long)>
c001c354:	58                   	pop    eax
c001c355:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c359:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001c360:	e8 6f 31 ff ff       	call   c000f4d4 <malloc>
c001c365:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c368:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001c36c:	31 d2                	xor    edx,edx
c001c36e:	58                   	pop    eax
c001c36f:	8d 44 24 58          	lea    eax,[esp+0x58]
c001c373:	50                   	push   eax
c001c374:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c378:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c37c:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001c383:	52                   	push   edx
c001c384:	50                   	push   eax
c001c385:	55                   	push   ebp
c001c386:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c389:	83 c4 20             	add    esp,0x20
c001c38c:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001c394:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001c398:	39 4c 24 28          	cmp    DWORD PTR [esp+0x28],ecx
c001c39c:	0f 8d c7 02 00 00    	jge    c001c669 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x727>
c001c3a2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c3a6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c3aa:	31 db                	xor    ebx,ebx
c001c3ac:	8b 04 d0             	mov    eax,DWORD PTR [eax+edx*8]
c001c3af:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001c3b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c3b7:	8b 44 d0 04          	mov    eax,DWORD PTR [eax+edx*8+0x4]
c001c3bb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c3bf:	c1 e8 08             	shr    eax,0x8
c001c3c2:	89 c6                	mov    esi,eax
c001c3c4:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001c3c8:	c1 e6 04             	shl    esi,0x4
c001c3cb:	03 74 24 38          	add    esi,DWORD PTR [esp+0x38]
c001c3cf:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001c3d2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c3d6:	85 c0                	test   eax,eax
c001c3d8:	0f 85 17 01 00 00    	jne    c001c4f5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c001c3de:	83 ec 0c             	sub    esp,0xc
c001c3e1:	b3 01                	mov    bl,0x1
c001c3e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c3e7:	03 06                	add    eax,DWORD PTR [esi]
c001c3e9:	50                   	push   eax
c001c3ea:	e8 48 f8 ff ff       	call   c001bc37 <Thr::getAddressOfKernelSymbol(char const*)>
c001c3ef:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c3f3:	83 c4 10             	add    esp,0x10
c001c3f6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001c3fb:	0f 85 f4 00 00 00    	jne    c001c4f5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c001c401:	50                   	push   eax
c001c402:	50                   	push   eax
c001c403:	68 e3 a6 02 c0       	push   0xc002a6e3
c001c408:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c40c:	03 06                	add    eax,DWORD PTR [esi]
c001c40e:	50                   	push   eax
c001c40f:	e8 67 43 fe ff       	call   c000077b <strcmp>
c001c414:	83 c4 10             	add    esp,0x10
c001c417:	85 c0                	test   eax,eax
c001c419:	75 0a                	jne    c001c425 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x4e3>
c001c41b:	b8 2c 54 02 c0       	mov    eax,0xc002542c
c001c420:	e9 ca 00 00 00       	jmp    c001c4ef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c001c425:	50                   	push   eax
c001c426:	50                   	push   eax
c001c427:	68 ed a6 02 c0       	push   0xc002a6ed
c001c42c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c430:	03 06                	add    eax,DWORD PTR [esi]
c001c432:	50                   	push   eax
c001c433:	e8 43 43 fe ff       	call   c000077b <strcmp>
c001c438:	83 c4 10             	add    esp,0x10
c001c43b:	85 c0                	test   eax,eax
c001c43d:	75 0a                	jne    c001c449 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x507>
c001c43f:	b8 60 51 02 c0       	mov    eax,0xc0025160
c001c444:	e9 a6 00 00 00       	jmp    c001c4ef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c001c449:	53                   	push   ebx
c001c44a:	53                   	push   ebx
c001c44b:	68 f6 a6 02 c0       	push   0xc002a6f6
c001c450:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c454:	03 06                	add    eax,DWORD PTR [esi]
c001c456:	50                   	push   eax
c001c457:	e8 1f 43 fe ff       	call   c000077b <strcmp>
c001c45c:	83 c4 10             	add    esp,0x10
c001c45f:	85 c0                	test   eax,eax
c001c461:	75 0a                	jne    c001c46d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x52b>
c001c463:	b8 2c 55 02 c0       	mov    eax,0xc002552c
c001c468:	e9 82 00 00 00       	jmp    c001c4ef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c001c46d:	51                   	push   ecx
c001c46e:	51                   	push   ecx
c001c46f:	68 00 a7 02 c0       	push   0xc002a700
c001c474:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c478:	03 06                	add    eax,DWORD PTR [esi]
c001c47a:	50                   	push   eax
c001c47b:	e8 fb 42 fe ff       	call   c000077b <strcmp>
c001c480:	83 c4 10             	add    esp,0x10
c001c483:	85 c0                	test   eax,eax
c001c485:	74 63                	je     c001c4ea <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a8>
c001c487:	50                   	push   eax
c001c488:	50                   	push   eax
c001c489:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c48d:	03 06                	add    eax,DWORD PTR [esi]
c001c48f:	50                   	push   eax
c001c490:	68 09 a7 02 c0       	push   0xc002a709
c001c495:	e8 df 62 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c001c49a:	58                   	pop    eax
c001c49b:	5a                   	pop    edx
c001c49c:	68 23 a7 02 c0       	push   0xc002a723
c001c4a1:	8d 9c 24 5c 02 00 00 	lea    ebx,[esp+0x25c]
c001c4a8:	53                   	push   ebx
c001c4a9:	e8 7c 42 fe ff       	call   c000072a <strcpy>
c001c4ae:	59                   	pop    ecx
c001c4af:	58                   	pop    eax
c001c4b0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c4b4:	03 06                	add    eax,DWORD PTR [esi]
c001c4b6:	50                   	push   eax
c001c4b7:	53                   	push   ebx
c001c4b8:	e8 24 43 fe ff       	call   c00007e1 <strcat>
c001c4bd:	58                   	pop    eax
c001c4be:	5a                   	pop    edx
c001c4bf:	68 b9 a7 02 c0       	push   0xc002a7b9
c001c4c4:	53                   	push   ebx
c001c4c5:	e8 17 43 fe ff       	call   c00007e1 <strcat>
c001c4ca:	83 c4 10             	add    esp,0x10
c001c4cd:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001c4d2:	0f 84 4b 01 00 00    	je     c001c623 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001c4d8:	83 ec 0c             	sub    esp,0xc
c001c4db:	53                   	push   ebx
c001c4dc:	e8 b2 d3 ff ff       	call   c0019893 <Krnl::panic(char const*)>
c001c4e1:	83 c4 10             	add    esp,0x10
c001c4e4:	8a 5c 24 27          	mov    bl,BYTE PTR [esp+0x27]
c001c4e8:	eb 0b                	jmp    c001c4f5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c001c4ea:	b8 ac 52 02 c0       	mov    eax,0xc00252ac
c001c4ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c4f3:	b3 01                	mov    bl,0x1
c001c4f5:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c001c4fa:	0f 85 80 00 00 00    	jne    c001c580 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x63e>
c001c500:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001c507:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c50b:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001c50f:	01 ce                	add    esi,ecx
c001c511:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001c519:	8b 06                	mov    eax,DWORD PTR [esi]
c001c51b:	0f 94 c2             	sete   dl
c001c51e:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001c526:	0f 94 44 24 18       	sete   BYTE PTR [esp+0x18]
c001c52b:	0b 54 24 18          	or     edx,DWORD PTR [esp+0x18]
c001c52f:	84 db                	test   bl,bl
c001c531:	74 31                	je     c001c564 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x622>
c001c533:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001c537:	01 c3                	add    ebx,eax
c001c539:	84 d2                	test   dl,dl
c001c53b:	75 0a                	jne    c001c547 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x605>
c001c53d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c541:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001c545:	76 32                	jbe    c001c579 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c001c547:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001c54c:	0f 84 d1 00 00 00    	je     c001c623 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001c552:	83 ec 0c             	sub    esp,0xc
c001c555:	68 3a a7 02 c0       	push   0xc002a73a
c001c55a:	e8 34 d3 ff ff       	call   c0019893 <Krnl::panic(char const*)>
c001c55f:	83 c4 10             	add    esp,0x10
c001c562:	eb 15                	jmp    c001c579 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c001c564:	8d 1c 08             	lea    ebx,[eax+ecx*1]
c001c567:	84 d2                	test   dl,dl
c001c569:	75 0e                	jne    c001c579 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c001c56b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c56f:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001c573:	77 04                	ja     c001c579 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c001c575:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001c579:	89 1e                	mov    DWORD PTR [esi],ebx
c001c57b:	e9 e0 00 00 00       	jmp    c001c660 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c001c580:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c001c585:	75 6e                	jne    c001c5f5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b3>
c001c587:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001c58e:	2b 74 24 2c          	sub    esi,DWORD PTR [esp+0x2c]
c001c592:	03 74 24 30          	add    esi,DWORD PTR [esp+0x30]
c001c596:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001c59e:	74 17                	je     c001c5b7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c001c5a0:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001c5a8:	74 0d                	je     c001c5b7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c001c5aa:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c5ae:	83 e8 04             	sub    eax,0x4
c001c5b1:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001c5b5:	76 17                	jbe    c001c5ce <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x68c>
c001c5b7:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001c5bc:	74 65                	je     c001c623 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001c5be:	83 ec 0c             	sub    esp,0xc
c001c5c1:	68 56 a7 02 c0       	push   0xc002a756
c001c5c6:	e8 c8 d2 ff ff       	call   c0019893 <Krnl::panic(char const*)>
c001c5cb:	83 c4 10             	add    esp,0x10
c001c5ce:	8b 16                	mov    edx,DWORD PTR [esi]
c001c5d0:	84 db                	test   bl,bl
c001c5d2:	74 13                	je     c001c5e7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a5>
c001c5d4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c5d8:	2b 84 24 74 03 00 00 	sub    eax,DWORD PTR [esp+0x374]
c001c5df:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c001c5e3:	01 d0                	add    eax,edx
c001c5e5:	eb 06                	jmp    c001c5ed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ab>
c001c5e7:	89 d0                	mov    eax,edx
c001c5e9:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c001c5ed:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001c5f1:	89 06                	mov    DWORD PTR [esi],eax
c001c5f3:	eb 6b                	jmp    c001c660 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c001c5f5:	50                   	push   eax
c001c5f6:	50                   	push   eax
c001c5f7:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001c5fc:	50                   	push   eax
c001c5fd:	68 72 a7 02 c0       	push   0xc002a772
c001c602:	e8 72 61 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c001c607:	83 c4 10             	add    esp,0x10
c001c60a:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001c60f:	74 12                	je     c001c623 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001c611:	83 ec 0c             	sub    esp,0xc
c001c614:	68 7d a7 02 c0       	push   0xc002a77d
c001c619:	e8 75 d2 ff ff       	call   c0019893 <Krnl::panic(char const*)>
c001c61e:	83 c4 10             	add    esp,0x10
c001c621:	eb 3d                	jmp    c001c660 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c001c623:	83 ec 0c             	sub    esp,0xc
c001c626:	55                   	push   ebp
c001c627:	e8 3e 67 ff ff       	call   c0012d6a <File::close()>
c001c62c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c62f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c632:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c635:	59                   	pop    ecx
c001c636:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c63a:	e8 a5 2e ff ff       	call   c000f4e4 <free>
c001c63f:	5b                   	pop    ebx
c001c640:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c644:	e8 9b 2e ff ff       	call   c000f4e4 <free>
c001c649:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c64c:	e8 93 2e ff ff       	call   c000f4e4 <free>
c001c651:	5e                   	pop    esi
c001c652:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001c656:	e8 89 2e ff ff       	call   c000f4e4 <free>
c001c65b:	83 c4 10             	add    esp,0x10
c001c65e:	eb 21                	jmp    c001c681 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001c660:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c001c664:	e9 2b fd ff ff       	jmp    c001c394 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001c669:	83 ec 0c             	sub    esp,0xc
c001c66c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c670:	e8 6f 2e ff ff       	call   c000f4e4 <free>
c001c675:	ff 44 24 30          	inc    DWORD PTR [esp+0x30]
c001c679:	83 c4 10             	add    esp,0x10
c001c67c:	e9 a0 fc ff ff       	jmp    c001c321 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001c681:	31 c0                	xor    eax,eax
c001c683:	eb 33                	jmp    c001c6b8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x776>
c001c685:	83 ec 0c             	sub    esp,0xc
c001c688:	55                   	push   ebp
c001c689:	e8 dc 66 ff ff       	call   c0012d6a <File::close()>
c001c68e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c691:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c694:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c697:	58                   	pop    eax
c001c698:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c69c:	e8 43 2e ff ff       	call   c000f4e4 <free>
c001c6a1:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c6a4:	e8 3b 2e ff ff       	call   c000f4e4 <free>
c001c6a9:	5a                   	pop    edx
c001c6aa:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001c6ae:	e8 31 2e ff ff       	call   c000f4e4 <free>
c001c6b3:	83 c4 10             	add    esp,0x10
c001c6b6:	b0 01                	mov    al,0x1
c001c6b8:	81 c4 5c 03 00 00    	add    esp,0x35c
c001c6be:	5b                   	pop    ebx
c001c6bf:	5e                   	pop    esi
c001c6c0:	5f                   	pop    edi
c001c6c1:	5d                   	pop    ebp
c001c6c2:	c3                   	ret    

c001c6c3 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001c6c3:	56                   	push   esi
c001c6c4:	31 d2                	xor    edx,edx
c001c6c6:	53                   	push   ebx
c001c6c7:	8b 1d 40 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d740
c001c6cd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c6d1:	39 d3                	cmp    ebx,edx
c001c6d3:	7e 1b                	jle    c001c6f0 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001c6d5:	8b 04 95 60 d9 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd26a0]
c001c6dc:	39 c8                	cmp    eax,ecx
c001c6de:	77 0d                	ja     c001c6ed <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001c6e0:	8b 34 95 60 d7 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd28a0]
c001c6e7:	01 c6                	add    esi,eax
c001c6e9:	39 ce                	cmp    esi,ecx
c001c6eb:	77 05                	ja     c001c6f2 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001c6ed:	42                   	inc    edx
c001c6ee:	eb e1                	jmp    c001c6d1 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001c6f0:	31 c0                	xor    eax,eax
c001c6f2:	5b                   	pop    ebx
c001c6f3:	5e                   	pop    esi
c001c6f4:	c3                   	ret    

c001c6f5 <Thr::getDriverNameFromAddress(unsigned long)>:
c001c6f5:	53                   	push   ebx
c001c6f6:	31 c0                	xor    eax,eax
c001c6f8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c6fc:	8b 1d 40 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d740
c001c702:	39 c3                	cmp    ebx,eax
c001c704:	7e 22                	jle    c001c728 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001c706:	8b 14 85 60 d9 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd26a0]
c001c70d:	39 ca                	cmp    edx,ecx
c001c70f:	77 14                	ja     c001c725 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001c711:	03 14 85 60 d7 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd28a0]
c001c718:	39 ca                	cmp    edx,ecx
c001c71a:	76 09                	jbe    c001c725 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001c71c:	8b 04 85 60 db 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd24a0]
c001c723:	eb 05                	jmp    c001c72a <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001c725:	40                   	inc    eax
c001c726:	eb da                	jmp    c001c702 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001c728:	31 c0                	xor    eax,eax
c001c72a:	5b                   	pop    ebx
c001c72b:	c3                   	ret    

c001c72c <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001c72c:	53                   	push   ebx
c001c72d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001c731:	53                   	push   ebx
c001c732:	e8 8c ff ff ff       	call   c001c6c3 <Thr::getDriverBaseFromAddress(unsigned long)>
c001c737:	5a                   	pop    edx
c001c738:	31 d2                	xor    edx,edx
c001c73a:	85 c0                	test   eax,eax
c001c73c:	74 04                	je     c001c742 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001c73e:	89 da                	mov    edx,ebx
c001c740:	29 c2                	sub    edx,eax
c001c742:	89 d0                	mov    eax,edx
c001c744:	5b                   	pop    ebx
c001c745:	c3                   	ret    

c001c746 <Thr::loadDLL(char const*, bool)>:
c001c746:	55                   	push   ebp
c001c747:	57                   	push   edi
c001c748:	56                   	push   esi
c001c749:	53                   	push   ebx
c001c74a:	81 ec 34 01 00 00    	sub    esp,0x134
c001c750:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001c757:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001c75e:	56                   	push   esi
c001c75f:	68 95 a7 02 c0       	push   0xc002a795
c001c764:	e8 10 60 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c001c769:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001c770:	e8 5f 2d ff ff       	call   c000f4d4 <malloc>
c001c775:	83 c4 0c             	add    esp,0xc
c001c778:	89 c3                	mov    ebx,eax
c001c77a:	ff 35 34 df 02 c0    	push   DWORD PTR ds:0xc002df34
c001c780:	56                   	push   esi
c001c781:	50                   	push   eax
c001c782:	e8 21 65 ff ff       	call   c0012ca8 <File::File(char const*, Process*)>
c001c787:	83 c4 10             	add    esp,0x10
c001c78a:	85 db                	test   ebx,ebx
c001c78c:	75 3c                	jne    c001c7ca <Thr::loadDLL(char const*, bool)+0x84>
c001c78e:	89 e8                	mov    eax,ebp
c001c790:	84 c0                	test   al,al
c001c792:	0f 84 b0 01 00 00    	je     c001c948 <Thr::loadDLL(char const*, bool)+0x202>
c001c798:	50                   	push   eax
c001c799:	50                   	push   eax
c001c79a:	68 a6 a7 02 c0       	push   0xc002a7a6
c001c79f:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001c7a3:	57                   	push   edi
c001c7a4:	e8 81 3f fe ff       	call   c000072a <strcpy>
c001c7a9:	58                   	pop    eax
c001c7aa:	5a                   	pop    edx
c001c7ab:	56                   	push   esi
c001c7ac:	57                   	push   edi
c001c7ad:	e8 2f 40 fe ff       	call   c00007e1 <strcat>
c001c7b2:	59                   	pop    ecx
c001c7b3:	58                   	pop    eax
c001c7b4:	68 b9 a7 02 c0       	push   0xc002a7b9
c001c7b9:	57                   	push   edi
c001c7ba:	e8 22 40 fe ff       	call   c00007e1 <strcat>
c001c7bf:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c7c2:	e8 cc d0 ff ff       	call   c0019893 <Krnl::panic(char const*)>
c001c7c7:	83 c4 10             	add    esp,0x10
c001c7ca:	50                   	push   eax
c001c7cb:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001c7cf:	50                   	push   eax
c001c7d0:	8d 44 24 20          	lea    eax,[esp+0x20]
c001c7d4:	50                   	push   eax
c001c7d5:	53                   	push   ebx
c001c7d6:	e8 dd 67 ff ff       	call   c0012fb8 <File::stat(unsigned long long*, bool*)>
c001c7db:	83 c4 10             	add    esp,0x10
c001c7de:	85 db                	test   ebx,ebx
c001c7e0:	74 0c                	je     c001c7ee <Thr::loadDLL(char const*, bool)+0xa8>
c001c7e2:	83 ec 0c             	sub    esp,0xc
c001c7e5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c7e7:	53                   	push   ebx
c001c7e8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c7eb:	83 c4 10             	add    esp,0x10
c001c7ee:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001c7f3:	75 0a                	jne    c001c7ff <Thr::loadDLL(char const*, bool)+0xb9>
c001c7f5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c7f9:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001c7fd:	75 3c                	jne    c001c83b <Thr::loadDLL(char const*, bool)+0xf5>
c001c7ff:	89 e8                	mov    eax,ebp
c001c801:	84 c0                	test   al,al
c001c803:	0f 84 3d 01 00 00    	je     c001c946 <Thr::loadDLL(char const*, bool)+0x200>
c001c809:	50                   	push   eax
c001c80a:	50                   	push   eax
c001c80b:	68 a6 a7 02 c0       	push   0xc002a7a6
c001c810:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001c814:	53                   	push   ebx
c001c815:	e8 10 3f fe ff       	call   c000072a <strcpy>
c001c81a:	58                   	pop    eax
c001c81b:	5a                   	pop    edx
c001c81c:	56                   	push   esi
c001c81d:	53                   	push   ebx
c001c81e:	e8 be 3f fe ff       	call   c00007e1 <strcat>
c001c823:	59                   	pop    ecx
c001c824:	5f                   	pop    edi
c001c825:	68 b9 a7 02 c0       	push   0xc002a7b9
c001c82a:	53                   	push   ebx
c001c82b:	e8 b1 3f fe ff       	call   c00007e1 <strcat>
c001c830:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c833:	e8 5b d0 ff ff       	call   c0019893 <Krnl::panic(char const*)>
c001c838:	83 c4 10             	add    esp,0x10
c001c83b:	e8 d9 50 ff ff       	call   c0011919 <Virt::getAKernelVAS()>
c001c840:	51                   	push   ecx
c001c841:	6a 03                	push   0x3
c001c843:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001c847:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001c84b:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001c851:	83 d3 00             	adc    ebx,0x0
c001c854:	89 ca                	mov    edx,ecx
c001c856:	89 d1                	mov    ecx,edx
c001c858:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001c85c:	51                   	push   ecx
c001c85d:	50                   	push   eax
c001c85e:	e8 f1 56 ff ff       	call   c0011f54 <VAS::allocatePages(int, int)>
c001c863:	89 34 24             	mov    DWORD PTR [esp],esi
c001c866:	89 c3                	mov    ebx,eax
c001c868:	e8 3b 3e fe ff       	call   c00006a8 <strlen>
c001c86d:	8b 3d 40 d7 02 c0    	mov    edi,DWORD PTR ds:0xc002d740
c001c873:	40                   	inc    eax
c001c874:	89 04 24             	mov    DWORD PTR [esp],eax
c001c877:	e8 58 2c ff ff       	call   c000f4d4 <malloc>
c001c87c:	89 04 bd 60 db 02 c0 	mov    DWORD PTR [edi*4-0x3ffd24a0],eax
c001c883:	5f                   	pop    edi
c001c884:	58                   	pop    eax
c001c885:	a1 40 d7 02 c0       	mov    eax,ds:0xc002d740
c001c88a:	56                   	push   esi
c001c88b:	ff 34 85 60 db 02 c0 	push   DWORD PTR [eax*4-0x3ffd24a0]
c001c892:	e8 93 3e fe ff       	call   c000072a <strcpy>
c001c897:	a1 40 d7 02 c0       	mov    eax,ds:0xc002d740
c001c89c:	8d 50 01             	lea    edx,[eax+0x1]
c001c89f:	89 1c 85 60 d9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd26a0],ebx
c001c8a6:	89 15 40 d7 02 c0    	mov    DWORD PTR ds:0xc002d740,edx
c001c8ac:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c8b0:	83 c4 0c             	add    esp,0xc
c001c8b3:	89 14 85 60 d7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd28a0],edx
c001c8ba:	6a 01                	push   0x1
c001c8bc:	53                   	push   ebx
c001c8bd:	56                   	push   esi
c001c8be:	e8 7f f6 ff ff       	call   c001bf42 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001c8c3:	83 c4 10             	add    esp,0x10
c001c8c6:	89 c7                	mov    edi,eax
c001c8c8:	fe c8                	dec    al
c001c8ca:	74 16                	je     c001c8e2 <Thr::loadDLL(char const*, bool)+0x19c>
c001c8cc:	89 e8                	mov    eax,ebp
c001c8ce:	84 c0                	test   al,al
c001c8d0:	74 10                	je     c001c8e2 <Thr::loadDLL(char const*, bool)+0x19c>
c001c8d2:	83 ec 0c             	sub    esp,0xc
c001c8d5:	68 bb a7 02 c0       	push   0xc002a7bb
c001c8da:	e8 b4 cf ff ff       	call   c0019893 <Krnl::panic(char const*)>
c001c8df:	83 c4 10             	add    esp,0x10
c001c8e2:	31 f6                	xor    esi,esi
c001c8e4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c8e8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c8ec:	05 ff 0f 00 00       	add    eax,0xfff
c001c8f1:	83 d2 00             	adc    edx,0x0
c001c8f4:	0f ac d0 0c          	shrd   eax,edx,0xc
c001c8f8:	c1 ea 0c             	shr    edx,0xc
c001c8fb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c8ff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c903:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001c907:	ba 00 00 00 00       	mov    edx,0x0
c001c90c:	89 d0                	mov    eax,edx
c001c90e:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001c912:	73 2c                	jae    c001c940 <Thr::loadDLL(char const*, bool)+0x1fa>
c001c914:	e8 00 50 ff ff       	call   c0011919 <Virt::getAKernelVAS()>
c001c919:	89 f5                	mov    ebp,esi
c001c91b:	c1 e5 0c             	shl    ebp,0xc
c001c91e:	52                   	push   edx
c001c91f:	01 dd                	add    ebp,ebx
c001c921:	52                   	push   edx
c001c922:	55                   	push   ebp
c001c923:	50                   	push   eax
c001c924:	e8 a5 51 ff ff       	call   c0011ace <VAS::getPageTableEntry(unsigned long)>
c001c929:	83 c4 10             	add    esp,0x10
c001c92c:	f6 00 60             	test   BYTE PTR [eax],0x60
c001c92f:	75 0c                	jne    c001c93d <Thr::loadDLL(char const*, bool)+0x1f7>
c001c931:	83 ec 0c             	sub    esp,0xc
c001c934:	55                   	push   ebp
c001c935:	e8 83 31 ff ff       	call   c000fabd <Phys::freePage(unsigned long)>
c001c93a:	83 c4 10             	add    esp,0x10
c001c93d:	46                   	inc    esi
c001c93e:	eb a4                	jmp    c001c8e4 <Thr::loadDLL(char const*, bool)+0x19e>
c001c940:	89 f8                	mov    eax,edi
c001c942:	84 c0                	test   al,al
c001c944:	75 02                	jne    c001c948 <Thr::loadDLL(char const*, bool)+0x202>
c001c946:	31 db                	xor    ebx,ebx
c001c948:	81 c4 2c 01 00 00    	add    esp,0x12c
c001c94e:	89 d8                	mov    eax,ebx
c001c950:	5b                   	pop    ebx
c001c951:	5e                   	pop    esi
c001c952:	5f                   	pop    edi
c001c953:	5d                   	pop    ebp
c001c954:	c3                   	ret    

c001c955 <Thr::executeDLL(unsigned long, void*)>:
c001c955:	56                   	push   esi
c001c956:	53                   	push   ebx
c001c957:	51                   	push   ecx
c001c958:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c95c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001c960:	85 db                	test   ebx,ebx
c001c962:	75 10                	jne    c001c974 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001c964:	83 ec 0c             	sub    esp,0xc
c001c967:	68 da a7 02 c0       	push   0xc002a7da
c001c96c:	e8 22 cf ff ff       	call   c0019893 <Krnl::panic(char const*)>
c001c971:	83 c4 10             	add    esp,0x10
c001c974:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001c978:	89 d8                	mov    eax,ebx
c001c97a:	5a                   	pop    edx
c001c97b:	5b                   	pop    ebx
c001c97c:	5e                   	pop    esi
c001c97d:	ff e0                	jmp    eax
c001c97f:	90                   	nop

c001c980 <changeTSS>:
c001c980:	83 ec 14             	sub    esp,0x14
c001c983:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c988:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001c98b:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001c990:	c1 e2 15             	shl    edx,0x15
c001c993:	29 d0                	sub    eax,edx
c001c995:	50                   	push   eax
c001c996:	a1 e8 c9 02 c0       	mov    eax,ds:0xc002c9e8
c001c99b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001c9a1:	05 7c 11 00 00       	add    eax,0x117c
c001c9a6:	50                   	push   eax
c001c9a7:	e8 1c 47 ff ff       	call   c00110c8 <TSS::setESP(unsigned long)>
c001c9ac:	83 c4 1c             	add    esp,0x1c
c001c9af:	c3                   	ret    

c001c9b0 <Process::addArgs(char**)>:
c001c9b0:	57                   	push   edi
c001c9b1:	56                   	push   esi
c001c9b2:	53                   	push   ebx
c001c9b3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c9b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c9bb:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001c9c5:	85 ff                	test   edi,edi
c001c9c7:	74 3d                	je     c001ca06 <Process::addArgs(char**)+0x56>
c001c9c9:	8b 07                	mov    eax,DWORD PTR [edi]
c001c9cb:	85 c0                	test   eax,eax
c001c9cd:	74 37                	je     c001ca06 <Process::addArgs(char**)+0x56>
c001c9cf:	31 db                	xor    ebx,ebx
c001c9d1:	83 ec 0c             	sub    esp,0xc
c001c9d4:	50                   	push   eax
c001c9d5:	e8 ce 3c fe ff       	call   c00006a8 <strlen>
c001c9da:	40                   	inc    eax
c001c9db:	89 04 24             	mov    DWORD PTR [esp],eax
c001c9de:	e8 f1 2a ff ff       	call   c000f4d4 <malloc>
c001c9e3:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001c9ea:	5a                   	pop    edx
c001c9eb:	59                   	pop    ecx
c001c9ec:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001c9ef:	43                   	inc    ebx
c001c9f0:	50                   	push   eax
c001c9f1:	e8 34 3d fe ff       	call   c000072a <strcpy>
c001c9f6:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001c9fc:	83 c4 10             	add    esp,0x10
c001c9ff:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001ca02:	85 c0                	test   eax,eax
c001ca04:	75 cb                	jne    c001c9d1 <Process::addArgs(char**)+0x21>
c001ca06:	5b                   	pop    ebx
c001ca07:	5e                   	pop    esi
c001ca08:	5f                   	pop    edi
c001ca09:	c3                   	ret    

c001ca0a <Process::Process(char const*, Process*, char**)>:
c001ca0a:	56                   	push   esi
c001ca0b:	53                   	push   ebx
c001ca0c:	83 ec 14             	sub    esp,0x14
c001ca0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ca13:	05 0c 02 00 00       	add    eax,0x20c
c001ca18:	bb 07 00 00 00       	mov    ebx,0x7
c001ca1d:	89 c6                	mov    esi,eax
c001ca1f:	85 db                	test   ebx,ebx
c001ca21:	78 12                	js     c001ca35 <Process::Process(char const*, Process*, char**)+0x2b>
c001ca23:	83 ec 0c             	sub    esp,0xc
c001ca26:	56                   	push   esi
c001ca27:	e8 b6 ac 00 00       	call   c00276e2 <ThreadControlBlock::ThreadControlBlock()>
c001ca2c:	83 c4 10             	add    esp,0x10
c001ca2f:	83 c6 63             	add    esi,0x63
c001ca32:	4b                   	dec    ebx
c001ca33:	eb ea                	jmp    c001ca1f <Process::Process(char const*, Process*, char**)+0x15>
c001ca35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ca39:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001ca40:	83 ec 0c             	sub    esp,0xc
c001ca43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ca47:	e8 98 cc ff ff       	call   c00196e4 <Krnl::newProcessEnv(Process*)>
c001ca4c:	83 c4 10             	add    esp,0x10
c001ca4f:	89 c2                	mov    edx,eax
c001ca51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ca55:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001ca5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ca5f:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001ca68:	a1 70 bf 02 c0       	mov    eax,ds:0xc002bf70
c001ca6d:	8d 50 01             	lea    edx,[eax+0x1]
c001ca70:	89 15 70 bf 02 c0    	mov    DWORD PTR ds:0xc002bf70,edx
c001ca76:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ca7a:	89 02                	mov    DWORD PTR [edx],eax
c001ca7c:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c001ca84:	83 ec 0c             	sub    esp,0xc
c001ca87:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ca8b:	e8 44 2a ff ff       	call   c000f4d4 <malloc>
c001ca90:	83 c4 10             	add    esp,0x10
c001ca93:	89 c3                	mov    ebx,eax
c001ca95:	83 ec 08             	sub    esp,0x8
c001ca98:	6a 00                	push   0x0
c001ca9a:	53                   	push   ebx
c001ca9b:	e8 5c 58 ff ff       	call   c00122fc <VAS::VAS(bool)>
c001caa0:	83 c4 10             	add    esp,0x10
c001caa3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001caa7:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001caad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cab1:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001cabb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cabf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cac3:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001cac9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cacd:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001cad3:	85 c0                	test   eax,eax
c001cad5:	74 42                	je     c001cb19 <Process::Process(char const*, Process*, char**)+0x10f>
c001cad7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cadb:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001cae1:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001cae7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001caeb:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001caf1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001caf5:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001cafb:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001cb01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cb05:	05 0c 01 00 00       	add    eax,0x10c
c001cb0a:	83 ec 08             	sub    esp,0x8
c001cb0d:	52                   	push   edx
c001cb0e:	50                   	push   eax
c001cb0f:	e8 16 3c fe ff       	call   c000072a <strcpy>
c001cb14:	83 c4 10             	add    esp,0x10
c001cb17:	eb 63                	jmp    c001cb7c <Process::Process(char const*, Process*, char**)+0x172>
c001cb19:	c7 44 24 04 60 12 00 00 	mov    DWORD PTR [esp+0x4],0x1260
c001cb21:	83 ec 0c             	sub    esp,0xc
c001cb24:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cb28:	e8 a7 29 ff ff       	call   c000f4d4 <malloc>
c001cb2d:	83 c4 10             	add    esp,0x10
c001cb30:	89 c3                	mov    ebx,eax
c001cb32:	83 ec 08             	sub    esp,0x8
c001cb35:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cb39:	53                   	push   ebx
c001cb3a:	e8 87 42 ff ff       	call   c0010dc6 <VgaText::VgaText(char const*)>
c001cb3f:	83 c4 10             	add    esp,0x10
c001cb42:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cb46:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001cb4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cb50:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001cb56:	83 ec 0c             	sub    esp,0xc
c001cb59:	50                   	push   eax
c001cb5a:	e8 5a 36 ff ff       	call   c00101b9 <addToTerminalCycle(VgaText*)>
c001cb5f:	83 c4 10             	add    esp,0x10
c001cb62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cb66:	05 0c 01 00 00       	add    eax,0x10c
c001cb6b:	83 ec 08             	sub    esp,0x8
c001cb6e:	68 04 a8 02 c0       	push   0xc002a804
c001cb73:	50                   	push   eax
c001cb74:	e8 b1 3b fe ff       	call   c000072a <strcpy>
c001cb79:	83 c4 10             	add    esp,0x10
c001cb7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cb80:	83 c0 0c             	add    eax,0xc
c001cb83:	83 ec 08             	sub    esp,0x8
c001cb86:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cb8a:	50                   	push   eax
c001cb8b:	e8 9a 3b fe ff       	call   c000072a <strcpy>
c001cb90:	83 c4 10             	add    esp,0x10
c001cb93:	83 ec 08             	sub    esp,0x8
c001cb96:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001cb9a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cb9e:	e8 0d fe ff ff       	call   c001c9b0 <Process::addArgs(char**)>
c001cba3:	83 c4 10             	add    esp,0x10
c001cba6:	83 ec 08             	sub    esp,0x8
c001cba9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cbad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cbb1:	e8 58 ee ff ff       	call   c001ba0e <Thr::loadProgramIntoMemory(Process*, char const*)>
c001cbb6:	83 c4 10             	add    esp,0x10
c001cbb9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001cbbd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001cbc1:	83 f0 01             	xor    eax,0x1
c001cbc4:	88 c2                	mov    dl,al
c001cbc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cbca:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001cbd0:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001cbd5:	83 ec 08             	sub    esp,0x8
c001cbd8:	50                   	push   eax
c001cbd9:	68 00 a9 02 c0       	push   0xc002a900
c001cbde:	e8 96 5b ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c001cbe3:	83 c4 10             	add    esp,0x10
c001cbe6:	90                   	nop
c001cbe7:	83 c4 14             	add    esp,0x14
c001cbea:	5b                   	pop    ebx
c001cbeb:	5e                   	pop    esi
c001cbec:	c3                   	ret    
c001cbed:	90                   	nop

c001cbee <Process::Process(bool, char const*, Process*, char**)>:
c001cbee:	56                   	push   esi
c001cbef:	53                   	push   ebx
c001cbf0:	83 ec 24             	sub    esp,0x24
c001cbf3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cbf7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001cbfb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cbff:	05 0c 02 00 00       	add    eax,0x20c
c001cc04:	bb 07 00 00 00       	mov    ebx,0x7
c001cc09:	89 c6                	mov    esi,eax
c001cc0b:	85 db                	test   ebx,ebx
c001cc0d:	78 12                	js     c001cc21 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001cc0f:	83 ec 0c             	sub    esp,0xc
c001cc12:	56                   	push   esi
c001cc13:	e8 ca aa 00 00       	call   c00276e2 <ThreadControlBlock::ThreadControlBlock()>
c001cc18:	83 c4 10             	add    esp,0x10
c001cc1b:	83 c6 63             	add    esi,0x63
c001cc1e:	4b                   	dec    ebx
c001cc1f:	eb ea                	jmp    c001cc0b <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001cc21:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cc25:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001cc2c:	83 ec 0c             	sub    esp,0xc
c001cc2f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cc33:	e8 ac ca ff ff       	call   c00196e4 <Krnl::newProcessEnv(Process*)>
c001cc38:	83 c4 10             	add    esp,0x10
c001cc3b:	89 c2                	mov    edx,eax
c001cc3d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cc41:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001cc47:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cc4b:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001cc54:	a1 70 bf 02 c0       	mov    eax,ds:0xc002bf70
c001cc59:	8d 50 01             	lea    edx,[eax+0x1]
c001cc5c:	89 15 70 bf 02 c0    	mov    DWORD PTR ds:0xc002bf70,edx
c001cc62:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001cc66:	89 02                	mov    DWORD PTR [edx],eax
c001cc68:	c7 44 24 1c 10 00 00 00 	mov    DWORD PTR [esp+0x1c],0x10
c001cc70:	83 ec 0c             	sub    esp,0xc
c001cc73:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001cc77:	e8 58 28 ff ff       	call   c000f4d4 <malloc>
c001cc7c:	83 c4 10             	add    esp,0x10
c001cc7f:	89 c3                	mov    ebx,eax
c001cc81:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001cc86:	83 ec 08             	sub    esp,0x8
c001cc89:	50                   	push   eax
c001cc8a:	53                   	push   ebx
c001cc8b:	e8 6c 56 ff ff       	call   c00122fc <VAS::VAS(bool)>
c001cc90:	83 c4 10             	add    esp,0x10
c001cc93:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cc97:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001cc9d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cca1:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001ccab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ccaf:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001ccb3:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001ccb9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ccbd:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001ccc3:	85 c0                	test   eax,eax
c001ccc5:	74 42                	je     c001cd09 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001ccc7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cccb:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001ccd1:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001ccd7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ccdb:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001cce1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cce5:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001cceb:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001ccf1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ccf5:	05 0c 01 00 00       	add    eax,0x10c
c001ccfa:	83 ec 08             	sub    esp,0x8
c001ccfd:	52                   	push   edx
c001ccfe:	50                   	push   eax
c001ccff:	e8 26 3a fe ff       	call   c000072a <strcpy>
c001cd04:	83 c4 10             	add    esp,0x10
c001cd07:	eb 63                	jmp    c001cd6c <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001cd09:	c7 44 24 18 60 12 00 00 	mov    DWORD PTR [esp+0x18],0x1260
c001cd11:	83 ec 0c             	sub    esp,0xc
c001cd14:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001cd18:	e8 b7 27 ff ff       	call   c000f4d4 <malloc>
c001cd1d:	83 c4 10             	add    esp,0x10
c001cd20:	89 c3                	mov    ebx,eax
c001cd22:	83 ec 08             	sub    esp,0x8
c001cd25:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001cd29:	53                   	push   ebx
c001cd2a:	e8 97 40 ff ff       	call   c0010dc6 <VgaText::VgaText(char const*)>
c001cd2f:	83 c4 10             	add    esp,0x10
c001cd32:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cd36:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001cd3c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cd40:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001cd46:	83 ec 0c             	sub    esp,0xc
c001cd49:	50                   	push   eax
c001cd4a:	e8 6a 34 ff ff       	call   c00101b9 <addToTerminalCycle(VgaText*)>
c001cd4f:	83 c4 10             	add    esp,0x10
c001cd52:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cd56:	05 0c 01 00 00       	add    eax,0x10c
c001cd5b:	83 ec 08             	sub    esp,0x8
c001cd5e:	68 04 a8 02 c0       	push   0xc002a804
c001cd63:	50                   	push   eax
c001cd64:	e8 c1 39 fe ff       	call   c000072a <strcpy>
c001cd69:	83 c4 10             	add    esp,0x10
c001cd6c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cd70:	83 c0 0c             	add    eax,0xc
c001cd73:	83 ec 08             	sub    esp,0x8
c001cd76:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001cd7a:	50                   	push   eax
c001cd7b:	e8 aa 39 fe ff       	call   c000072a <strcpy>
c001cd80:	83 c4 10             	add    esp,0x10
c001cd83:	83 ec 08             	sub    esp,0x8
c001cd86:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001cd8a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cd8e:	e8 1d fc ff ff       	call   c001c9b0 <Process::addArgs(char**)>
c001cd93:	83 c4 10             	add    esp,0x10
c001cd96:	90                   	nop
c001cd97:	83 c4 24             	add    esp,0x24
c001cd9a:	5b                   	pop    ebx
c001cd9b:	5e                   	pop    esi
c001cd9c:	c3                   	ret    

c001cd9d <disableIRQs()>:
c001cd9d:	fa                   	cli    
c001cd9e:	ff 05 0c df 02 c0    	inc    DWORD PTR ds:0xc002df0c
c001cda4:	c3                   	ret    

c001cda5 <getIRQNestingLevel()>:
c001cda5:	a1 0c df 02 c0       	mov    eax,ds:0xc002df0c
c001cdaa:	c3                   	ret    

c001cdab <enableIRQs()>:
c001cdab:	a1 0c df 02 c0       	mov    eax,ds:0xc002df0c
c001cdb0:	48                   	dec    eax
c001cdb1:	a3 0c df 02 c0       	mov    ds:0xc002df0c,eax
c001cdb6:	75 01                	jne    c001cdb9 <enableIRQs()+0xe>
c001cdb8:	fb                   	sti    
c001cdb9:	c3                   	ret    

c001cdba <lockScheduler()>:
c001cdba:	eb e1                	jmp    c001cd9d <disableIRQs()>

c001cdbc <unlockScheduler()>:
c001cdbc:	eb ed                	jmp    c001cdab <enableIRQs()>

c001cdbe <userModeEntryPoint(void*)>:
c001cdbe:	83 ec 0c             	sub    esp,0xc
c001cdc1:	e8 f6 ff ff ff       	call   c001cdbc <unlockScheduler()>
c001cdc6:	fb                   	sti    
c001cdc7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cdcc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cdcf:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001cdd5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cdd9:	83 c4 0c             	add    esp,0xc
c001cddc:	e9 fe 34 fe ff       	jmp    c00002df <goToUsermode>

c001cde1 <lockStuff()>:
c001cde1:	e8 b7 ff ff ff       	call   c001cd9d <disableIRQs()>
c001cde6:	ff 05 08 df 02 c0    	inc    DWORD PTR ds:0xc002df08
c001cdec:	c3                   	ret    

c001cded <taskStartupFunction>:
c001cded:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cdf2:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001cdf5:	c3                   	ret    

c001cdf6 <updateTimeUsed()>:
c001cdf6:	a1 e8 c9 02 c0       	mov    eax,ds:0xc002c9e8
c001cdfb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ce01:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001ce08:	74 50                	je     c001ce5a <updateTimeUsed()+0x64>
c001ce0a:	57                   	push   edi
c001ce0b:	56                   	push   esi
c001ce0c:	53                   	push   ebx
c001ce0d:	0f 31                	rdtsc  
c001ce0f:	89 c1                	mov    ecx,eax
c001ce11:	a3 48 df 02 c0       	mov    ds:0xc002df48,eax
c001ce16:	2b 0d 38 df 02 c0    	sub    ecx,DWORD PTR ds:0xc002df38
c001ce1c:	89 d3                	mov    ebx,edx
c001ce1e:	89 0d 40 df 02 c0    	mov    DWORD PTR ds:0xc002df40,ecx
c001ce24:	1b 1d 3c df 02 c0    	sbb    ebx,DWORD PTR ds:0xc002df3c
c001ce2a:	a3 38 df 02 c0       	mov    ds:0xc002df38,eax
c001ce2f:	89 1d 44 df 02 c0    	mov    DWORD PTR ds:0xc002df44,ebx
c001ce35:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ce3a:	89 15 4c df 02 c0    	mov    DWORD PTR ds:0xc002df4c,edx
c001ce40:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001ce43:	89 15 3c df 02 c0    	mov    DWORD PTR ds:0xc002df3c,edx
c001ce49:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001ce4c:	01 f1                	add    ecx,esi
c001ce4e:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001ce51:	11 fb                	adc    ebx,edi
c001ce53:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001ce56:	5b                   	pop    ebx
c001ce57:	5e                   	pop    esi
c001ce58:	5f                   	pop    edi
c001ce59:	c3                   	ret    
c001ce5a:	c3                   	ret    

c001ce5b <switchToThread(ThreadControlBlock*)>:
c001ce5b:	53                   	push   ebx
c001ce5c:	83 ec 08             	sub    esp,0x8
c001ce5f:	a1 08 df 02 c0       	mov    eax,ds:0xc002df08
c001ce64:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ce68:	85 c0                	test   eax,eax
c001ce6a:	75 30                	jne    c001ce9c <switchToThread(ThreadControlBlock*)+0x41>
c001ce6c:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001ce6f:	3c ff                	cmp    al,0xff
c001ce71:	74 25                	je     c001ce98 <switchToThread(ThreadControlBlock*)+0x3d>
c001ce73:	0f b6 d0             	movzx  edx,al
c001ce76:	b8 84 03 00 00       	mov    eax,0x384
c001ce7b:	29 d0                	sub    eax,edx
c001ce7d:	c1 e0 10             	shl    eax,0x10
c001ce80:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001ce83:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001ce86:	e8 6b ff ff ff       	call   c001cdf6 <updateTimeUsed()>
c001ce8b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001ce8f:	83 c4 08             	add    esp,0x8
c001ce92:	5b                   	pop    ebx
c001ce93:	e9 7f 34 fe ff       	jmp    c0000317 <switchToThreadASM>
c001ce98:	31 c0                	xor    eax,eax
c001ce9a:	eb e7                	jmp    c001ce83 <switchToThread(ThreadControlBlock*)+0x28>
c001ce9c:	c7 05 04 df 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002df04,0x1
c001cea6:	83 c4 08             	add    esp,0x8
c001cea9:	5b                   	pop    ebx
c001ceaa:	c3                   	ret    
c001ceab:	90                   	nop

c001ceac <Semaphore::Semaphore(int)>:
c001ceac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ceb0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ceb4:	89 10                	mov    DWORD PTR [eax],edx
c001ceb6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ceba:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001cec1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cec5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cecc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ced0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ced7:	90                   	nop
c001ced8:	c3                   	ret    
c001ced9:	90                   	nop

c001ceda <Mutex::Mutex()>:
c001ceda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cede:	6a 01                	push   0x1
c001cee0:	50                   	push   eax
c001cee1:	e8 c6 ff ff ff       	call   c001ceac <Semaphore::Semaphore(int)>
c001cee6:	83 c4 08             	add    esp,0x8
c001cee9:	90                   	nop
c001ceea:	c3                   	ret    
c001ceeb:	90                   	nop

c001ceec <Process::createThread(void (*)(void*), void*, int)>:
c001ceec:	55                   	push   ebp
c001ceed:	31 c9                	xor    ecx,ecx
c001ceef:	57                   	push   edi
c001cef0:	56                   	push   esi
c001cef1:	53                   	push   ebx
c001cef2:	83 ec 1c             	sub    esp,0x1c
c001cef5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001cef9:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001cf00:	89 f2                	mov    edx,esi
c001cf02:	0f b7 c2             	movzx  eax,dx
c001cf05:	83 e2 01             	and    edx,0x1
c001cf08:	74 14                	je     c001cf1e <Process::createThread(void (*)(void*), void*, int)+0x32>
c001cf0a:	d1 f8                	sar    eax,1
c001cf0c:	41                   	inc    ecx
c001cf0d:	89 c2                	mov    edx,eax
c001cf0f:	83 f9 10             	cmp    ecx,0x10
c001cf12:	75 ee                	jne    c001cf02 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001cf14:	83 c4 1c             	add    esp,0x1c
c001cf17:	31 c0                	xor    eax,eax
c001cf19:	5b                   	pop    ebx
c001cf1a:	5e                   	pop    esi
c001cf1b:	5f                   	pop    edi
c001cf1c:	5d                   	pop    ebp
c001cf1d:	c3                   	ret    
c001cf1e:	83 ec 08             	sub    esp,0x8
c001cf21:	b8 01 00 00 00       	mov    eax,0x1
c001cf26:	d3 e0                	shl    eax,cl
c001cf28:	09 c6                	or     esi,eax
c001cf2a:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001cf30:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001cf37:	8d 34 09             	lea    esi,[ecx+ecx*1]
c001cf3a:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001cf3d:	01 ce                	add    esi,ecx
c001cf3f:	89 f0                	mov    eax,esi
c001cf41:	c1 e0 05             	shl    eax,0x5
c001cf44:	01 c6                	add    esi,eax
c001cf46:	8d 04 33             	lea    eax,[ebx+esi*1]
c001cf49:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001cf4f:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001cf55:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001cf59:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001cf5f:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001cf65:	89 ca                	mov    edx,ecx
c001cf67:	f7 da                	neg    edx
c001cf69:	c1 e2 15             	shl    edx,0x15
c001cf6c:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001cf72:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001cf78:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001cf7c:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001cf86:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001cf8c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001cf90:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001cf96:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001cfa0:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001cfaa:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001cfb1:	50                   	push   eax
c001cfb2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cfb6:	68 28 df 02 c0       	push   0xc002df28
c001cfbb:	e8 b0 a5 00 00       	call   c0027570 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001cfc0:	83 c4 10             	add    esp,0x10
c001cfc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cfc7:	83 c4 1c             	add    esp,0x1c
c001cfca:	5b                   	pop    ebx
c001cfcb:	5e                   	pop    esi
c001cfcc:	5f                   	pop    edi
c001cfcd:	5d                   	pop    ebp
c001cfce:	c3                   	ret    
c001cfcf:	90                   	nop

c001cfd0 <Process::createUserThread()>:
c001cfd0:	83 ec 0c             	sub    esp,0xc
c001cfd3:	68 80 00 00 00       	push   0x80
c001cfd8:	6a 00                	push   0x0
c001cfda:	68 be cd 01 c0       	push   0xc001cdbe
c001cfdf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cfe3:	e8 04 ff ff ff       	call   c001ceec <Process::createThread(void (*)(void*), void*, int)>
c001cfe8:	83 c4 1c             	add    esp,0x1c
c001cfeb:	c3                   	ret    

c001cfec <setupMultitasking(void (*)())>:
c001cfec:	56                   	push   esi
c001cfed:	53                   	push   ebx
c001cfee:	53                   	push   ebx
c001cfef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cff3:	eb 10                	jmp    c001d005 <setupMultitasking(void (*)())+0x19>
c001cff5:	83 ec 0c             	sub    esp,0xc
c001cff8:	68 28 df 02 c0       	push   0xc002df28
c001cffd:	e8 c0 a4 00 00       	call   c00274c2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d002:	83 c4 10             	add    esp,0x10
c001d005:	83 ec 0c             	sub    esp,0xc
c001d008:	68 28 df 02 c0       	push   0xc002df28
c001d00d:	e8 94 a4 00 00       	call   c00274a6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d012:	83 c4 10             	add    esp,0x10
c001d015:	84 c0                	test   al,al
c001d017:	74 dc                	je     c001cff5 <setupMultitasking(void (*)())+0x9>
c001d019:	83 ec 0c             	sub    esp,0xc
c001d01c:	68 3f 07 00 00       	push   0x73f
c001d021:	e8 ae 24 ff ff       	call   c000f4d4 <malloc>
c001d026:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d02d:	89 c3                	mov    ebx,eax
c001d02f:	6a 00                	push   0x0
c001d031:	68 08 a8 02 c0       	push   0xc002a808
c001d036:	6a 01                	push   0x1
c001d038:	50                   	push   eax
c001d039:	e8 b0 fb ff ff       	call   c001cbee <Process::Process(bool, char const*, Process*, char**)>
c001d03e:	83 c4 18             	add    esp,0x18
c001d041:	89 1d 34 df 02 c0    	mov    DWORD PTR ds:0xc002df34,ebx
c001d047:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001d04d:	68 28 a9 02 c0       	push   0xc002a928
c001d052:	e8 22 57 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c001d057:	58                   	pop    eax
c001d058:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001d05e:	e8 d8 38 ff ff       	call   c001093b <setActiveTerminal(VgaText*)>
c001d063:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001d06b:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001d071:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001d074:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001d07e:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001d084:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001d08a:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001d094:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001d09e:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001d0a8:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001d0ae:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001d0b4:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001d0be:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001d0c4:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001d0ce:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001d0d4:	5a                   	pop    edx
c001d0d5:	59                   	pop    ecx
c001d0d6:	68 04 a8 02 c0       	push   0xc002a804
c001d0db:	50                   	push   eax
c001d0dc:	e8 49 36 fe ff       	call   c000072a <strcpy>
c001d0e1:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001d0e8:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d0ec:	83 c4 14             	add    esp,0x14
c001d0ef:	5b                   	pop    ebx
c001d0f0:	5e                   	pop    esi
c001d0f1:	e9 13 32 fe ff       	jmp    c0000309 <switchToThreadASMFirstTime>

c001d0f6 <schedule()>:
c001d0f6:	a1 08 df 02 c0       	mov    eax,ds:0xc002df08
c001d0fb:	85 c0                	test   eax,eax
c001d0fd:	74 0b                	je     c001d10a <schedule()+0x14>
c001d0ff:	c7 05 04 df 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002df04,0x1
c001d109:	c3                   	ret    
c001d10a:	53                   	push   ebx
c001d10b:	83 ec 14             	sub    esp,0x14
c001d10e:	68 28 df 02 c0       	push   0xc002df28
c001d113:	e8 8e a3 00 00       	call   c00274a6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d118:	83 c4 10             	add    esp,0x10
c001d11b:	84 c0                	test   al,al
c001d11d:	75 38                	jne    c001d157 <schedule()+0x61>
c001d11f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d124:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d127:	4a                   	dec    edx
c001d128:	74 32                	je     c001d15c <schedule()+0x66>
c001d12a:	83 ec 0c             	sub    esp,0xc
c001d12d:	68 28 df 02 c0       	push   0xc002df28
c001d132:	e8 67 a3 00 00       	call   c002749e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d137:	c7 04 24 28 df 02 c0 	mov    DWORD PTR [esp],0xc002df28
c001d13e:	89 c3                	mov    ebx,eax
c001d140:	e8 7d a3 00 00       	call   c00274c2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d145:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001d14c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d14f:	e8 07 fd ff ff       	call   c001ce5b <switchToThread(ThreadControlBlock*)>
c001d154:	83 c4 10             	add    esp,0x10
c001d157:	83 c4 08             	add    esp,0x8
c001d15a:	5b                   	pop    ebx
c001d15b:	c3                   	ret    
c001d15c:	83 ec 08             	sub    esp,0x8
c001d15f:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001d166:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001d16c:	68 28 df 02 c0       	push   0xc002df28
c001d171:	e8 fa a3 00 00       	call   c0027570 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d176:	83 c4 10             	add    esp,0x10
c001d179:	eb af                	jmp    c001d12a <schedule()+0x34>

c001d17b <unlockStuff()>:
c001d17b:	a1 08 df 02 c0       	mov    eax,ds:0xc002df08
c001d180:	48                   	dec    eax
c001d181:	a3 08 df 02 c0       	mov    ds:0xc002df08,eax
c001d186:	75 09                	jne    c001d191 <unlockStuff()+0x16>
c001d188:	a1 04 df 02 c0       	mov    eax,ds:0xc002df04
c001d18d:	85 c0                	test   eax,eax
c001d18f:	75 05                	jne    c001d196 <unlockStuff()+0x1b>
c001d191:	e9 15 fc ff ff       	jmp    c001cdab <enableIRQs()>
c001d196:	83 ec 0c             	sub    esp,0xc
c001d199:	c7 05 04 df 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002df04,0x0
c001d1a3:	e8 4e ff ff ff       	call   c001d0f6 <schedule()>
c001d1a8:	83 c4 0c             	add    esp,0xc
c001d1ab:	e9 fb fb ff ff       	jmp    c001cdab <enableIRQs()>

c001d1b0 <Semaphore::tryAcquire()>:
c001d1b0:	83 ec 0c             	sub    esp,0xc
c001d1b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1b7:	e8 25 fc ff ff       	call   c001cde1 <lockStuff()>
c001d1bc:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001d1bf:	3b 10                	cmp    edx,DWORD PTR [eax]
c001d1c1:	7c 0b                	jl     c001d1ce <Semaphore::tryAcquire()+0x1e>
c001d1c3:	e8 b3 ff ff ff       	call   c001d17b <unlockStuff()>
c001d1c8:	31 c0                	xor    eax,eax
c001d1ca:	83 c4 0c             	add    esp,0xc
c001d1cd:	c3                   	ret    
c001d1ce:	42                   	inc    edx
c001d1cf:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001d1d2:	e8 a4 ff ff ff       	call   c001d17b <unlockStuff()>
c001d1d7:	b0 01                	mov    al,0x1
c001d1d9:	83 c4 0c             	add    esp,0xc
c001d1dc:	c3                   	ret    
c001d1dd:	90                   	nop

c001d1de <Semaphore::assertLocked(char const*)>:
c001d1de:	83 ec 0c             	sub    esp,0xc
c001d1e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1e5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d1e9:	e8 f3 fb ff ff       	call   c001cde1 <lockStuff()>
c001d1ee:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d1f0:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001d1f3:	7c 05                	jl     c001d1fa <Semaphore::assertLocked(char const*)+0x1c>
c001d1f5:	83 c4 0c             	add    esp,0xc
c001d1f8:	eb 81                	jmp    c001d17b <unlockStuff()>
c001d1fa:	83 ec 0c             	sub    esp,0xc
c001d1fd:	52                   	push   edx
c001d1fe:	e8 90 c6 ff ff       	call   c0019893 <Krnl::panic(char const*)>
c001d203:	83 c4 10             	add    esp,0x10
c001d206:	83 c4 0c             	add    esp,0xc
c001d209:	e9 6d ff ff ff       	jmp    c001d17b <unlockStuff()>

c001d20e <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001d20e:	83 ec 0c             	sub    esp,0xc
c001d211:	e8 8f fb ff ff       	call   c001cda5 <getIRQNestingLevel()>
c001d216:	83 ec 08             	sub    esp,0x8
c001d219:	50                   	push   eax
c001d21a:	68 5c a9 02 c0       	push   0xc002a95c
c001d21f:	e8 55 55 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c001d224:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d228:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d22d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d230:	e8 c1 fe ff ff       	call   c001d0f6 <schedule()>
c001d235:	e8 82 fb ff ff       	call   c001cdbc <unlockScheduler()>
c001d23a:	e8 66 fb ff ff       	call   c001cda5 <getIRQNestingLevel()>
c001d23f:	5a                   	pop    edx
c001d240:	59                   	pop    ecx
c001d241:	50                   	push   eax
c001d242:	68 90 a9 02 c0       	push   0xc002a990
c001d247:	e8 2d 55 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c001d24c:	83 c4 1c             	add    esp,0x1c
c001d24f:	c3                   	ret    

c001d250 <blockTask(TaskState)>:
c001d250:	83 ec 0c             	sub    esp,0xc
c001d253:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d257:	e8 5e fb ff ff       	call   c001cdba <lockScheduler()>
c001d25c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d261:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d264:	e8 8d fe ff ff       	call   c001d0f6 <schedule()>
c001d269:	83 c4 0c             	add    esp,0xc
c001d26c:	e9 4b fb ff ff       	jmp    c001cdbc <unlockScheduler()>

c001d271 <waitTask(int, int*, int)>:
c001d271:	83 ec 18             	sub    esp,0x18
c001d274:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d279:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d27d:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001d280:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d284:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d289:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001d28c:	6a 07                	push   0x7
c001d28e:	e8 bd ff ff ff       	call   c001d250 <blockTask(TaskState)>
c001d293:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d298:	83 c4 10             	add    esp,0x10
c001d29b:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001d29e:	85 d2                	test   edx,edx
c001d2a0:	74 0a                	je     c001d2ac <waitTask(int, int*, int)+0x3b>
c001d2a2:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001d2a5:	89 02                	mov    DWORD PTR [edx],eax
c001d2a7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d2ac:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001d2af:	83 c4 0c             	add    esp,0xc
c001d2b2:	c3                   	ret    

c001d2b3 <nanoSleepUntil(unsigned long long)>:
c001d2b3:	83 ec 0c             	sub    esp,0xc
c001d2b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2ba:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d2be:	3b 05 70 d0 02 c0    	cmp    eax,DWORD PTR ds:0xc002d070
c001d2c4:	89 d1                	mov    ecx,edx
c001d2c6:	1b 0d 74 d0 02 c0    	sbb    ecx,DWORD PTR ds:0xc002d074
c001d2cc:	73 04                	jae    c001d2d2 <nanoSleepUntil(unsigned long long)+0x1f>
c001d2ce:	83 c4 0c             	add    esp,0xc
c001d2d1:	c3                   	ret    
c001d2d2:	e8 0a fb ff ff       	call   c001cde1 <lockStuff()>
c001d2d7:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001d2dd:	83 ec 08             	sub    esp,0x8
c001d2e0:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001d2e3:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001d2e6:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001d2ec:	68 1c df 02 c0       	push   0xc002df1c
c001d2f1:	e8 7a a2 00 00       	call   c0027570 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d2f6:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001d2fd:	e8 4e ff ff ff       	call   c001d250 <blockTask(TaskState)>
c001d302:	83 c4 1c             	add    esp,0x1c
c001d305:	e9 71 fe ff ff       	jmp    c001d17b <unlockStuff()>

c001d30a <nanoSleep(unsigned long long)>:
c001d30a:	a1 70 d0 02 c0       	mov    eax,ds:0xc002d070
c001d30f:	8b 15 74 d0 02 c0    	mov    edx,DWORD PTR ds:0xc002d074
c001d315:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001d319:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001d31d:	eb 94                	jmp    c001d2b3 <nanoSleepUntil(unsigned long long)>

c001d31f <sleep(unsigned long long)>:
c001d31f:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001d327:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001d32c:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001d330:	01 ca                	add    edx,ecx
c001d332:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d336:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001d33a:	eb ce                	jmp    c001d30a <nanoSleep(unsigned long long)>

c001d33c <Semaphore::acquire()>:
c001d33c:	83 ec 0c             	sub    esp,0xc
c001d33f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d343:	e8 99 fa ff ff       	call   c001cde1 <lockStuff()>
c001d348:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001d34b:	3b 10                	cmp    edx,DWORD PTR [eax]
c001d34d:	7d 0c                	jge    c001d35b <Semaphore::acquire()+0x1f>
c001d34f:	42                   	inc    edx
c001d350:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001d353:	83 c4 0c             	add    esp,0xc
c001d356:	e9 20 fe ff ff       	jmp    c001d17b <unlockStuff()>
c001d35b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001d361:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001d368:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001d36b:	85 d2                	test   edx,edx
c001d36d:	74 2a                	je     c001d399 <Semaphore::acquire()+0x5d>
c001d36f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001d372:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001d378:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001d37b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001d381:	83 ec 0c             	sub    esp,0xc
c001d384:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001d387:	6a 05                	push   0x5
c001d389:	e8 c2 fe ff ff       	call   c001d250 <blockTask(TaskState)>
c001d38e:	83 c4 10             	add    esp,0x10
c001d391:	83 c4 0c             	add    esp,0xc
c001d394:	e9 e2 fd ff ff       	jmp    c001d17b <unlockStuff()>
c001d399:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001d39f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001d3a2:	eb d7                	jmp    c001d37b <Semaphore::acquire()+0x3f>

c001d3a4 <taskReturned>:
c001d3a4:	83 ec 18             	sub    esp,0x18
c001d3a7:	68 c4 a9 02 c0       	push   0xc002a9c4
c001d3ac:	e8 e2 c4 ff ff       	call   c0019893 <Krnl::panic(char const*)>
c001d3b1:	83 c4 10             	add    esp,0x10
c001d3b4:	83 ec 0c             	sub    esp,0xc
c001d3b7:	6a 02                	push   0x2
c001d3b9:	e8 92 fe ff ff       	call   c001d250 <blockTask(TaskState)>
c001d3be:	e8 f7 f9 ff ff       	call   c001cdba <lockScheduler()>
c001d3c3:	e8 2e fd ff ff       	call   c001d0f6 <schedule()>
c001d3c8:	e8 ef f9 ff ff       	call   c001cdbc <unlockScheduler()>
c001d3cd:	83 c4 10             	add    esp,0x10
c001d3d0:	eb e2                	jmp    c001d3b4 <taskReturned+0x10>

c001d3d2 <unblockTask(ThreadControlBlock*)>:
c001d3d2:	53                   	push   ebx
c001d3d3:	83 ec 08             	sub    esp,0x8
c001d3d6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d3da:	e8 db f9 ff ff       	call   c001cdba <lockScheduler()>
c001d3df:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001d3e2:	85 c0                	test   eax,eax
c001d3e4:	74 5c                	je     c001d442 <unblockTask(ThreadControlBlock*)+0x70>
c001d3e6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001d3e9:	48                   	dec    eax
c001d3ea:	74 31                	je     c001d41d <unblockTask(ThreadControlBlock*)+0x4b>
c001d3ec:	83 ec 0c             	sub    esp,0xc
c001d3ef:	68 28 df 02 c0       	push   0xc002df28
c001d3f4:	e8 a5 a0 00 00       	call   c002749e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d3f9:	83 c4 10             	add    esp,0x10
c001d3fc:	85 c0                	test   eax,eax
c001d3fe:	75 17                	jne    c001d417 <unblockTask(ThreadControlBlock*)+0x45>
c001d400:	eb 65                	jmp    c001d467 <unblockTask(ThreadControlBlock*)+0x95>
c001d402:	83 ec 08             	sub    esp,0x8
c001d405:	50                   	push   eax
c001d406:	68 28 df 02 c0       	push   0xc002df28
c001d40b:	e8 68 a3 00 00       	call   c0027778 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001d410:	83 c4 10             	add    esp,0x10
c001d413:	85 c0                	test   eax,eax
c001d415:	74 50                	je     c001d467 <unblockTask(ThreadControlBlock*)+0x95>
c001d417:	39 c3                	cmp    ebx,eax
c001d419:	75 e7                	jne    c001d402 <unblockTask(ThreadControlBlock*)+0x30>
c001d41b:	eb 1c                	jmp    c001d439 <unblockTask(ThreadControlBlock*)+0x67>
c001d41d:	83 ec 0c             	sub    esp,0xc
c001d420:	68 b4 aa 02 c0       	push   0xc002aab4
c001d425:	e8 4f 53 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c001d42a:	c7 04 24 40 aa 02 c0 	mov    DWORD PTR [esp],0xc002aa40
c001d431:	e8 43 53 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c001d436:	83 c4 10             	add    esp,0x10
c001d439:	83 c4 08             	add    esp,0x8
c001d43c:	5b                   	pop    ebx
c001d43d:	e9 7a f9 ff ff       	jmp    c001cdbc <unlockScheduler()>
c001d442:	83 ec 0c             	sub    esp,0xc
c001d445:	68 f8 a9 02 c0       	push   0xc002a9f8
c001d44a:	e8 2a 53 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c001d44f:	c7 04 24 40 aa 02 c0 	mov    DWORD PTR [esp],0xc002aa40
c001d456:	e8 1e 53 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c001d45b:	83 c4 10             	add    esp,0x10
c001d45e:	83 c4 08             	add    esp,0x8
c001d461:	5b                   	pop    ebx
c001d462:	e9 55 f9 ff ff       	jmp    c001cdbc <unlockScheduler()>
c001d467:	83 ec 08             	sub    esp,0x8
c001d46a:	53                   	push   ebx
c001d46b:	68 28 df 02 c0       	push   0xc002df28
c001d470:	e8 fb a0 00 00       	call   c0027570 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d475:	83 c4 10             	add    esp,0x10
c001d478:	83 c4 08             	add    esp,0x8
c001d47b:	5b                   	pop    ebx
c001d47c:	e9 3b f9 ff ff       	jmp    c001cdbc <unlockScheduler()>

c001d481 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001d481:	55                   	push   ebp
c001d482:	57                   	push   edi
c001d483:	56                   	push   esi
c001d484:	53                   	push   ebx
c001d485:	83 ec 1c             	sub    esp,0x1c
c001d488:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d48c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d48f:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001d495:	85 ff                	test   edi,edi
c001d497:	7e 20                	jle    c001d4b9 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001d499:	31 f6                	xor    esi,esi
c001d49b:	83 ec 0c             	sub    esp,0xc
c001d49e:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001d4a5:	46                   	inc    esi
c001d4a6:	e8 39 20 ff ff       	call   c000f4e4 <free>
c001d4ab:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d4ae:	83 c4 10             	add    esp,0x10
c001d4b1:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001d4b7:	7f e2                	jg     c001d49b <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001d4b9:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d4c3:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001d4c8:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001d4cb:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001d4ce:	d3 c0                	rol    eax,cl
c001d4d0:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001d4d7:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001d4da:	89 f7                	mov    edi,esi
c001d4dc:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001d4e4:	0f 85 74 01 00 00    	jne    c001d65e <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001d4ea:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001d4f0:	85 ed                	test   ebp,ebp
c001d4f2:	74 1b                	je     c001d50f <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001d4f4:	83 ec 0c             	sub    esp,0xc
c001d4f7:	55                   	push   ebp
c001d4f8:	e8 03 c1 ff ff       	call   c0019600 <EnvVarContainer::~EnvVarContainer()>
c001d4fd:	59                   	pop    ecx
c001d4fe:	5e                   	pop    esi
c001d4ff:	6a 0c                	push   0xc
c001d501:	55                   	push   ebp
c001d502:	e8 92 51 ff ff       	call   c0012699 <operator delete(void*, unsigned long)>
c001d507:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001d50a:	83 c4 10             	add    esp,0x10
c001d50d:	89 f7                	mov    edi,esi
c001d50f:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001d515:	85 c0                	test   eax,eax
c001d517:	0f 84 aa 00 00 00    	je     c001d5c7 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001d51d:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001d520:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001d524:	31 c9                	xor    ecx,ecx
c001d526:	eb 10                	jmp    c001d538 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001d528:	41                   	inc    ecx
c001d529:	83 f9 10             	cmp    ecx,0x10
c001d52c:	0f 84 95 00 00 00    	je     c001d5c7 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001d532:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001d538:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001d53f:	d3 fa                	sar    edx,cl
c001d541:	83 e2 01             	and    edx,0x1
c001d544:	74 e2                	je     c001d528 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001d546:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001d549:	01 ca                	add    edx,ecx
c001d54b:	89 d5                	mov    ebp,edx
c001d54d:	c1 e5 05             	shl    ebp,0x5
c001d550:	01 ea                	add    edx,ebp
c001d552:	01 d0                	add    eax,edx
c001d554:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001d55a:	83 fd 07             	cmp    ebp,0x7
c001d55d:	75 c9                	jne    c001d528 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001d55f:	05 40 02 00 00       	add    eax,0x240
c001d564:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001d567:	83 fd ff             	cmp    ebp,0xffffffff
c001d56a:	0f 8c 08 01 00 00    	jl     c001d678 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001d570:	0f 84 b9 01 00 00    	je     c001d72f <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001d576:	85 ed                	test   ebp,ebp
c001d578:	0f 84 a0 01 00 00    	je     c001d71e <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001d57e:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001d580:	75 a6                	jne    c001d528 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001d582:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001d588:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d58c:	01 d0                	add    eax,edx
c001d58e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001d592:	83 ec 0c             	sub    esp,0xc
c001d595:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001d59b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d59e:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d5a4:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001d5ab:	50                   	push   eax
c001d5ac:	e8 21 fe ff ff       	call   c001d3d2 <unblockTask(ThreadControlBlock*)>
c001d5b1:	83 c4 10             	add    esp,0x10
c001d5b4:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001d5b7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d5bb:	89 f7                	mov    edi,esi
c001d5bd:	41                   	inc    ecx
c001d5be:	83 f9 10             	cmp    ecx,0x10
c001d5c1:	0f 85 6b ff ff ff    	jne    c001d532 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001d5c7:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001d5cd:	85 c0                	test   eax,eax
c001d5cf:	74 5d                	je     c001d62e <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001d5d1:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001d5d7:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001d5dd:	74 4f                	je     c001d62e <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001d5df:	83 ec 0c             	sub    esp,0xc
c001d5e2:	68 28 df 02 c0       	push   0xc002df28
c001d5e7:	e8 b2 9e 00 00       	call   c002749e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d5ec:	c7 04 24 28 df 02 c0 	mov    DWORD PTR [esp],0xc002df28
c001d5f3:	89 c7                	mov    edi,eax
c001d5f5:	e8 ac 9e 00 00       	call   c00274a6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d5fa:	83 c4 10             	add    esp,0x10
c001d5fd:	84 c0                	test   al,al
c001d5ff:	0f 84 e4 00 00 00    	je     c001d6e9 <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001d605:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d608:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d60e:	85 d2                	test   edx,edx
c001d610:	74 0f                	je     c001d621 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001d612:	83 ec 0c             	sub    esp,0xc
c001d615:	8b 02                	mov    eax,DWORD PTR [edx]
c001d617:	52                   	push   edx
c001d618:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d61b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d61e:	83 c4 10             	add    esp,0x10
c001d621:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001d62b:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001d62e:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001d634:	85 db                	test   ebx,ebx
c001d636:	74 16                	je     c001d64e <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001d638:	83 ec 0c             	sub    esp,0xc
c001d63b:	53                   	push   ebx
c001d63c:	e8 a7 46 ff ff       	call   c0011ce8 <VAS::~VAS()>
c001d641:	58                   	pop    eax
c001d642:	5a                   	pop    edx
c001d643:	6a 10                	push   0x10
c001d645:	53                   	push   ebx
c001d646:	e8 4e 50 ff ff       	call   c0012699 <operator delete(void*, unsigned long)>
c001d64b:	83 c4 10             	add    esp,0x10
c001d64e:	83 ec 0c             	sub    esp,0xc
c001d651:	68 0f a8 02 c0       	push   0xc002a80f
c001d656:	e8 1e 51 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c001d65b:	83 c4 10             	add    esp,0x10
c001d65e:	83 ec 08             	sub    esp,0x8
c001d661:	68 3f 07 00 00       	push   0x73f
c001d666:	68 1d a8 02 c0       	push   0xc002a81d
c001d66b:	e8 09 51 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c001d670:	83 c4 2c             	add    esp,0x2c
c001d673:	5b                   	pop    ebx
c001d674:	5e                   	pop    esi
c001d675:	5f                   	pop    edi
c001d676:	5d                   	pop    ebp
c001d677:	c3                   	ret    
c001d678:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d67c:	83 ec 0c             	sub    esp,0xc
c001d67f:	68 f8 aa 02 c0       	push   0xc002aaf8
c001d684:	e8 0a c2 ff ff       	call   c0019893 <Krnl::panic(char const*)>
c001d689:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001d68c:	83 c4 10             	add    esp,0x10
c001d68f:	89 f7                	mov    edi,esi
c001d691:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d695:	e9 8e fe ff ff       	jmp    c001d528 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001d69a:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d6a0:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001d6a6:	75 1c                	jne    c001d6c4 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001d6a8:	83 ec 0c             	sub    esp,0xc
c001d6ab:	68 60 ab 02 c0       	push   0xc002ab60
c001d6b0:	e8 c4 50 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c001d6b5:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001d6bc:	e8 8f fb ff ff       	call   c001d250 <blockTask(TaskState)>
c001d6c1:	83 c4 10             	add    esp,0x10
c001d6c4:	83 ec 08             	sub    esp,0x8
c001d6c7:	56                   	push   esi
c001d6c8:	68 28 df 02 c0       	push   0xc002df28
c001d6cd:	e8 9e 9e 00 00       	call   c0027570 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d6d2:	c7 04 24 28 df 02 c0 	mov    DWORD PTR [esp],0xc002df28
c001d6d9:	e8 c0 9d 00 00       	call   c002749e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d6de:	83 c4 10             	add    esp,0x10
c001d6e1:	39 f8                	cmp    eax,edi
c001d6e3:	0f 84 1c ff ff ff    	je     c001d605 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001d6e9:	83 ec 0c             	sub    esp,0xc
c001d6ec:	68 28 df 02 c0       	push   0xc002df28
c001d6f1:	e8 a8 9d 00 00       	call   c002749e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d6f6:	c7 04 24 28 df 02 c0 	mov    DWORD PTR [esp],0xc002df28
c001d6fd:	89 c6                	mov    esi,eax
c001d6ff:	e8 be 9d 00 00       	call   c00274c2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d704:	83 c4 10             	add    esp,0x10
c001d707:	39 f3                	cmp    ebx,esi
c001d709:	74 b9                	je     c001d6c4 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001d70b:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001d70e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d711:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001d717:	75 ab                	jne    c001d6c4 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001d719:	e9 7c ff ff ff       	jmp    c001d69a <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001d71e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d722:	83 ec 0c             	sub    esp,0xc
c001d725:	68 2c ab 02 c0       	push   0xc002ab2c
c001d72a:	e9 55 ff ff ff       	jmp    c001d684 <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001d72f:	8b 36                	mov    esi,DWORD PTR [esi]
c001d731:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d735:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001d738:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d73b:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001d741:	01 d7                	add    edi,edx
c001d743:	89 f8                	mov    eax,edi
c001d745:	e9 44 fe ff ff       	jmp    c001d58e <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001d74a <cleanerTaskFunction(void*)>:
c001d74a:	53                   	push   ebx
c001d74b:	83 ec 08             	sub    esp,0x8
c001d74e:	e8 69 f6 ff ff       	call   c001cdbc <unlockScheduler()>
c001d753:	e8 62 f6 ff ff       	call   c001cdba <lockScheduler()>
c001d758:	80 3d ec de 02 c0 00 	cmp    BYTE PTR ds:0xc002deec,0x0
c001d75f:	0f 85 8e 00 00 00    	jne    c001d7f3 <cleanerTaskFunction(void*)+0xa9>
c001d765:	83 ec 0c             	sub    esp,0xc
c001d768:	6a 02                	push   0x2
c001d76a:	e8 9f fa ff ff       	call   c001d20e <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001d76f:	83 c4 10             	add    esp,0x10
c001d772:	c6 05 ec de 02 c0 00 	mov    BYTE PTR ds:0xc002deec,0x0
c001d779:	e8 63 f6 ff ff       	call   c001cde1 <lockStuff()>
c001d77e:	e8 37 f6 ff ff       	call   c001cdba <lockScheduler()>
c001d783:	83 ec 0c             	sub    esp,0xc
c001d786:	68 10 df 02 c0       	push   0xc002df10
c001d78b:	e8 16 9d 00 00       	call   c00274a6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d790:	83 c4 10             	add    esp,0x10
c001d793:	84 c0                	test   al,al
c001d795:	75 40                	jne    c001d7d7 <cleanerTaskFunction(void*)+0x8d>
c001d797:	83 ec 0c             	sub    esp,0xc
c001d79a:	68 10 df 02 c0       	push   0xc002df10
c001d79f:	e8 fa 9c 00 00       	call   c002749e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d7a4:	c7 04 24 10 df 02 c0 	mov    DWORD PTR [esp],0xc002df10
c001d7ab:	89 c3                	mov    ebx,eax
c001d7ad:	e8 10 9d 00 00       	call   c00274c2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d7b2:	c7 04 24 33 a8 02 c0 	mov    DWORD PTR [esp],0xc002a833
c001d7b9:	e8 bb 4f ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c001d7be:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d7c1:	e8 bb fc ff ff       	call   c001d481 <cleanupTerminatedTask(ThreadControlBlock*)>
c001d7c6:	c7 04 24 4c a8 02 c0 	mov    DWORD PTR [esp],0xc002a84c
c001d7cd:	e8 a7 4f ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c001d7d2:	83 c4 10             	add    esp,0x10
c001d7d5:	eb ac                	jmp    c001d783 <cleanerTaskFunction(void*)+0x39>
c001d7d7:	e8 e0 f5 ff ff       	call   c001cdbc <unlockScheduler()>
c001d7dc:	e8 9a f9 ff ff       	call   c001d17b <unlockStuff()>
c001d7e1:	e8 d4 f5 ff ff       	call   c001cdba <lockScheduler()>
c001d7e6:	80 3d ec de 02 c0 00 	cmp    BYTE PTR ds:0xc002deec,0x0
c001d7ed:	0f 84 72 ff ff ff    	je     c001d765 <cleanerTaskFunction(void*)+0x1b>
c001d7f3:	e8 c4 f5 ff ff       	call   c001cdbc <unlockScheduler()>
c001d7f8:	e9 75 ff ff ff       	jmp    c001d772 <cleanerTaskFunction(void*)+0x28>

c001d7fd <terminateTask(int)>:
c001d7fd:	83 ec 14             	sub    esp,0x14
c001d800:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d805:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001d808:	83 c0 0c             	add    eax,0xc
c001d80b:	50                   	push   eax
c001d80c:	68 88 ab 02 c0       	push   0xc002ab88
c001d811:	e8 63 4f ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c001d816:	e8 c6 f5 ff ff       	call   c001cde1 <lockStuff()>
c001d81b:	e8 9a f5 ff ff       	call   c001cdba <lockScheduler()>
c001d820:	c7 04 24 5f a8 02 c0 	mov    DWORD PTR [esp],0xc002a85f
c001d827:	e8 4d 4f ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c001d82c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d830:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d835:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001d838:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d83d:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001d840:	5a                   	pop    edx
c001d841:	59                   	pop    ecx
c001d842:	50                   	push   eax
c001d843:	68 10 df 02 c0       	push   0xc002df10
c001d848:	e8 23 9d 00 00       	call   c0027570 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d84d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d852:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001d859:	c7 04 24 79 a8 02 c0 	mov    DWORD PTR [esp],0xc002a879
c001d860:	e8 14 4f ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c001d865:	83 c4 10             	add    esp,0x10
c001d868:	a1 e8 de 02 c0       	mov    eax,ds:0xc002dee8
c001d86d:	85 c0                	test   eax,eax
c001d86f:	74 5a                	je     c001d8cb <terminateTask(int)+0xce>
c001d871:	83 ec 0c             	sub    esp,0xc
c001d874:	68 93 a8 02 c0       	push   0xc002a893
c001d879:	e8 fb 4e ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c001d87e:	58                   	pop    eax
c001d87f:	c6 05 ec de 02 c0 01 	mov    BYTE PTR ds:0xc002deec,0x1
c001d886:	ff 35 e8 de 02 c0    	push   DWORD PTR ds:0xc002dee8
c001d88c:	e8 41 fb ff ff       	call   c001d3d2 <unblockTask(ThreadControlBlock*)>
c001d891:	c7 04 24 ad a8 02 c0 	mov    DWORD PTR [esp],0xc002a8ad
c001d898:	e8 dc 4e ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c001d89d:	83 c4 10             	add    esp,0x10
c001d8a0:	e8 17 f5 ff ff       	call   c001cdbc <unlockScheduler()>
c001d8a5:	e8 d1 f8 ff ff       	call   c001d17b <unlockStuff()>
c001d8aa:	83 ec 0c             	sub    esp,0xc
c001d8ad:	68 e5 a8 02 c0       	push   0xc002a8e5
c001d8b2:	e8 c2 4e ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c001d8b7:	83 c4 10             	add    esp,0x10
c001d8ba:	e8 fb f4 ff ff       	call   c001cdba <lockScheduler()>
c001d8bf:	e8 32 f8 ff ff       	call   c001d0f6 <schedule()>
c001d8c4:	e8 f3 f4 ff ff       	call   c001cdbc <unlockScheduler()>
c001d8c9:	eb ef                	jmp    c001d8ba <terminateTask(int)+0xbd>
c001d8cb:	83 ec 0c             	sub    esp,0xc
c001d8ce:	68 c7 a8 02 c0       	push   0xc002a8c7
c001d8d3:	e8 a1 4e ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c001d8d8:	83 c4 10             	add    esp,0x10
c001d8db:	eb c3                	jmp    c001d8a0 <terminateTask(int)+0xa3>

c001d8dd <Thr::terminateFromIRQ(int)>:
c001d8dd:	83 ec 18             	sub    esp,0x18
c001d8e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d8e4:	e8 14 ff ff ff       	call   c001d7fd <terminateTask(int)>
c001d8e9:	90                   	nop

c001d8ea <Semaphore::release()>:
c001d8ea:	83 ec 0c             	sub    esp,0xc
c001d8ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d8f1:	e8 eb f4 ff ff       	call   c001cde1 <lockStuff()>
c001d8f6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001d8f9:	85 d2                	test   edx,edx
c001d8fb:	74 1a                	je     c001d917 <Semaphore::release()+0x2d>
c001d8fd:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001d900:	83 ec 0c             	sub    esp,0xc
c001d903:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001d906:	52                   	push   edx
c001d907:	e8 c6 fa ff ff       	call   c001d3d2 <unblockTask(ThreadControlBlock*)>
c001d90c:	83 c4 10             	add    esp,0x10
c001d90f:	83 c4 0c             	add    esp,0xc
c001d912:	e9 64 f8 ff ff       	jmp    c001d17b <unlockStuff()>
c001d917:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001d91a:	83 c4 0c             	add    esp,0xc
c001d91d:	e9 59 f8 ff ff       	jmp    c001d17b <unlockStuff()>

c001d922 <__static_initialization_and_destruction_0(int, int)>:
c001d922:	83 ec 0c             	sub    esp,0xc
c001d925:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001d92a:	0f 85 88 00 00 00    	jne    c001d9b8 <__static_initialization_and_destruction_0(int, int)+0x96>
c001d930:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001d938:	75 7e                	jne    c001d9b8 <__static_initialization_and_destruction_0(int, int)+0x96>
c001d93a:	83 ec 0c             	sub    esp,0xc
c001d93d:	68 28 df 02 c0       	push   0xc002df28
c001d942:	e8 d9 9d 00 00       	call   c0027720 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001d947:	83 c4 10             	add    esp,0x10
c001d94a:	83 ec 04             	sub    esp,0x4
c001d94d:	68 f8 b8 02 c0       	push   0xc002b8f8
c001d952:	68 28 df 02 c0       	push   0xc002df28
c001d957:	68 e0 76 02 c0       	push   0xc00276e0
c001d95c:	e8 b2 4c ff ff       	call   c0012613 <__cxa_atexit>
c001d961:	83 c4 10             	add    esp,0x10
c001d964:	83 ec 0c             	sub    esp,0xc
c001d967:	68 1c df 02 c0       	push   0xc002df1c
c001d96c:	e8 af 9d 00 00       	call   c0027720 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001d971:	83 c4 10             	add    esp,0x10
c001d974:	83 ec 04             	sub    esp,0x4
c001d977:	68 f8 b8 02 c0       	push   0xc002b8f8
c001d97c:	68 1c df 02 c0       	push   0xc002df1c
c001d981:	68 e0 76 02 c0       	push   0xc00276e0
c001d986:	e8 88 4c ff ff       	call   c0012613 <__cxa_atexit>
c001d98b:	83 c4 10             	add    esp,0x10
c001d98e:	83 ec 0c             	sub    esp,0xc
c001d991:	68 10 df 02 c0       	push   0xc002df10
c001d996:	e8 85 9d 00 00       	call   c0027720 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001d99b:	83 c4 10             	add    esp,0x10
c001d99e:	83 ec 04             	sub    esp,0x4
c001d9a1:	68 f8 b8 02 c0       	push   0xc002b8f8
c001d9a6:	68 10 df 02 c0       	push   0xc002df10
c001d9ab:	68 e0 76 02 c0       	push   0xc00276e0
c001d9b0:	e8 5e 4c ff ff       	call   c0012613 <__cxa_atexit>
c001d9b5:	83 c4 10             	add    esp,0x10
c001d9b8:	90                   	nop
c001d9b9:	83 c4 0c             	add    esp,0xc
c001d9bc:	c3                   	ret    

c001d9bd <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001d9bd:	83 ec 0c             	sub    esp,0xc
c001d9c0:	83 ec 08             	sub    esp,0x8
c001d9c3:	68 ff ff 00 00       	push   0xffff
c001d9c8:	6a 01                	push   0x1
c001d9ca:	e8 53 ff ff ff       	call   c001d922 <__static_initialization_and_destruction_0(int, int)>
c001d9cf:	83 c4 10             	add    esp,0x10
c001d9d2:	83 c4 0c             	add    esp,0xc
c001d9d5:	c3                   	ret    

c001d9d6 <Vm::inbv(unsigned short)>:
c001d9d6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d9da:	66 81 fa fe fe       	cmp    dx,0xfefe
c001d9df:	75 06                	jne    c001d9e7 <Vm::inbv(unsigned short)+0x11>
c001d9e1:	a0 6c df 02 c0       	mov    al,ds:0xc002df6c
c001d9e6:	c3                   	ret    
c001d9e7:	ec                   	in     al,dx
c001d9e8:	c3                   	ret    

c001d9e9 <Vm::outbv(unsigned short, unsigned char)>:
c001d9e9:	53                   	push   ebx
c001d9ea:	83 ec 08             	sub    esp,0x8
c001d9ed:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d9f1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d9f5:	66 81 fa fe fe       	cmp    dx,0xfefe
c001d9fa:	75 38                	jne    c001da34 <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001d9fc:	0f b6 c3             	movzx  eax,bl
c001d9ff:	51                   	push   ecx
c001da00:	51                   	push   ecx
c001da01:	50                   	push   eax
c001da02:	68 a7 ab 02 c0       	push   0xc002aba7
c001da07:	e8 6d 4d ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c001da0c:	8b 15 6c df 02 c0    	mov    edx,DWORD PTR ds:0xc002df6c
c001da12:	83 c4 10             	add    esp,0x10
c001da15:	8d 42 01             	lea    eax,[edx+0x1]
c001da18:	88 9a 80 df 02 c0    	mov    BYTE PTR [edx-0x3ffd2080],bl
c001da1e:	a3 6c df 02 c0       	mov    ds:0xc002df6c,eax
c001da23:	83 f8 20             	cmp    eax,0x20
c001da26:	75 0f                	jne    c001da37 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001da28:	c7 05 6c df 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002df6c,0x1f
c001da32:	eb 03                	jmp    c001da37 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001da34:	88 d8                	mov    al,bl
c001da36:	ee                   	out    dx,al
c001da37:	83 c4 08             	add    esp,0x8
c001da3a:	5b                   	pop    ebx
c001da3b:	c3                   	ret    

c001da3c <Vm::realToLinear(unsigned short, unsigned short)>:
c001da3c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001da41:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001da46:	c1 e0 04             	shl    eax,0x4
c001da49:	01 d0                	add    eax,edx
c001da4b:	c3                   	ret    

c001da4c <Vm::getSegment(unsigned int)>:
c001da4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001da50:	c1 e8 10             	shr    eax,0x10
c001da53:	c3                   	ret    

c001da54 <Vm::getOffset(unsigned int)>:
c001da54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001da58:	c3                   	ret    

c001da59 <Vm::mainloop2()>:
c001da59:	83 ec 0c             	sub    esp,0xc
c001da5c:	e8 59 f3 ff ff       	call   c001cdba <lockScheduler()>
c001da61:	83 ec 0c             	sub    esp,0xc
c001da64:	c6 05 65 df 02 c0 01 	mov    BYTE PTR ds:0xc002df65,0x1
c001da6b:	6a 02                	push   0x2
c001da6d:	e8 9c f7 ff ff       	call   c001d20e <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001da72:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001da77:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001da7b:	52                   	push   edx
c001da7c:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001da80:	52                   	push   edx
c001da81:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001da85:	52                   	push   edx
c001da86:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001da8a:	50                   	push   eax
c001da8b:	e8 1f 28 fe ff       	call   c00002af <goToVM86>
c001da90:	83 c4 2c             	add    esp,0x2c
c001da93:	c3                   	ret    

c001da94 <Vm::mainVm8086Loop(void*)>:
c001da94:	83 ec 0c             	sub    esp,0xc
c001da97:	e8 20 f3 ff ff       	call   c001cdbc <unlockScheduler()>
c001da9c:	83 c4 0c             	add    esp,0xc
c001da9f:	eb b8                	jmp    c001da59 <Vm::mainloop2()>

c001daa1 <Vm::mainloop3(unsigned long)>:
c001daa1:	53                   	push   ebx
c001daa2:	83 ec 08             	sub    esp,0x8
c001daa5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001daa9:	e8 0c f3 ff ff       	call   c001cdba <lockScheduler()>
c001daae:	83 ec 0c             	sub    esp,0xc
c001dab1:	89 1d 60 df 02 c0    	mov    DWORD PTR ds:0xc002df60,ebx
c001dab7:	6a 02                	push   0x2
c001dab9:	c6 05 64 df 02 c0 01 	mov    BYTE PTR ds:0xc002df64,0x1
c001dac0:	e8 49 f7 ff ff       	call   c001d20e <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001dac5:	83 c4 18             	add    esp,0x18
c001dac8:	5b                   	pop    ebx
c001dac9:	eb 8e                	jmp    c001da59 <Vm::mainloop2()>

c001dacb <Vm::initialise8086()>:
c001dacb:	83 ec 0c             	sub    esp,0xc
c001dace:	68 80 00 00 00       	push   0x80
c001dad3:	6a 00                	push   0x0
c001dad5:	68 94 da 01 c0       	push   0xc001da94
c001dada:	ff 35 34 df 02 c0    	push   DWORD PTR ds:0xc002df34
c001dae0:	e8 07 f4 ff ff       	call   c001ceec <Process::createThread(void (*)(void*), void*, int)>
c001dae5:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001daec:	a3 68 df 02 c0       	mov    ds:0xc002df68,eax
c001daf1:	68 00 01 00 00       	push   0x100
c001daf6:	a1 34 df 02 c0       	mov    eax,ds:0xc002df34
c001dafb:	6a 00                	push   0x0
c001dafd:	6a 00                	push   0x0
c001daff:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001db05:	e8 3e 46 ff ff       	call   c0012148 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001db0a:	83 c4 2c             	add    esp,0x2c
c001db0d:	c3                   	ret    

c001db0e <Vm::finish8086()>:
c001db0e:	53                   	push   ebx
c001db0f:	83 ec 08             	sub    esp,0x8
c001db12:	e8 a3 f2 ff ff       	call   c001cdba <lockScheduler()>
c001db17:	80 3d 64 df 02 c0 00 	cmp    BYTE PTR ds:0xc002df64,0x0
c001db1e:	75 0c                	jne    c001db2c <Vm::finish8086()+0x1e>
c001db20:	e8 d1 f5 ff ff       	call   c001d0f6 <schedule()>
c001db25:	e8 92 f2 ff ff       	call   c001cdbc <unlockScheduler()>
c001db2a:	eb e6                	jmp    c001db12 <Vm::finish8086()+0x4>
c001db2c:	83 ec 0c             	sub    esp,0xc
c001db2f:	8b 1d 60 df 02 c0    	mov    ebx,DWORD PTR ds:0xc002df60
c001db35:	ff 35 68 df 02 c0    	push   DWORD PTR ds:0xc002df68
c001db3b:	c6 05 64 df 02 c0 00 	mov    BYTE PTR ds:0xc002df64,0x0
c001db42:	e8 8b f8 ff ff       	call   c001d3d2 <unblockTask(ThreadControlBlock*)>
c001db47:	e8 70 f2 ff ff       	call   c001cdbc <unlockScheduler()>
c001db4c:	89 d8                	mov    eax,ebx
c001db4e:	83 c4 18             	add    esp,0x18
c001db51:	5b                   	pop    ebx
c001db52:	c3                   	ret    

c001db53 <Vm::getOutput8086(unsigned char*)>:
c001db53:	83 ec 10             	sub    esp,0x10
c001db56:	ff 35 6c df 02 c0    	push   DWORD PTR ds:0xc002df6c
c001db5c:	68 80 df 02 c0       	push   0xc002df80
c001db61:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001db65:	e8 eb 2a fe ff       	call   c0000655 <memcpy>
c001db6a:	a1 6c df 02 c0       	mov    eax,ds:0xc002df6c
c001db6f:	c7 05 6c df 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002df6c,0x0
c001db79:	83 c4 1c             	add    esp,0x1c
c001db7c:	c3                   	ret    

c001db7d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001db7d:	55                   	push   ebp
c001db7e:	57                   	push   edi
c001db7f:	56                   	push   esi
c001db80:	53                   	push   ebx
c001db81:	83 ec 2c             	sub    esp,0x2c
c001db84:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001db88:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001db8c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001db90:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001db94:	e8 21 f2 ff ff       	call   c001cdba <lockScheduler()>
c001db99:	a0 65 df 02 c0       	mov    al,ds:0xc002df65
c001db9e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001dba2:	84 c0                	test   al,al
c001dba4:	75 0c                	jne    c001dbb2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x35>
c001dba6:	e8 4b f5 ff ff       	call   c001d0f6 <schedule()>
c001dbab:	e8 0c f2 ff ff       	call   c001cdbc <unlockScheduler()>
c001dbb0:	eb e2                	jmp    c001db94 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001dbb2:	a1 68 df 02 c0       	mov    eax,ds:0xc002df68
c001dbb7:	c7 05 6c df 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002df6c,0x0
c001dbc1:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001dbc5:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001dbc9:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001dbcd:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001dbd1:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001dbd5:	50                   	push   eax
c001dbd6:	6a 20                	push   0x20
c001dbd8:	6a 00                	push   0x0
c001dbda:	68 80 df 02 c0       	push   0xc002df80
c001dbdf:	e8 a7 2a fe ff       	call   c000068b <memset>
c001dbe4:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001dbeb:	e8 e4 18 ff ff       	call   c000f4d4 <malloc>
c001dbf0:	83 c4 0c             	add    esp,0xc
c001dbf3:	89 c7                	mov    edi,eax
c001dbf5:	ff 35 34 df 02 c0    	push   DWORD PTR ds:0xc002df34
c001dbfb:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001dbff:	50                   	push   eax
c001dc00:	e8 a3 50 ff ff       	call   c0012ca8 <File::File(char const*, Process*)>
c001dc05:	83 c4 10             	add    esp,0x10
c001dc08:	85 ff                	test   edi,edi
c001dc0a:	75 0a                	jne    c001dc16 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x99>
c001dc0c:	83 ec 0c             	sub    esp,0xc
c001dc0f:	68 c3 ab 02 c0       	push   0xc002abc3
c001dc14:	eb 27                	jmp    c001dc3d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c001dc16:	50                   	push   eax
c001dc17:	8d 44 24 17          	lea    eax,[esp+0x17]
c001dc1b:	50                   	push   eax
c001dc1c:	8d 44 24 20          	lea    eax,[esp+0x20]
c001dc20:	50                   	push   eax
c001dc21:	57                   	push   edi
c001dc22:	e8 91 53 ff ff       	call   c0012fb8 <File::stat(unsigned long long*, bool*)>
c001dc27:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001dc2c:	83 c4 10             	add    esp,0x10
c001dc2f:	89 e8                	mov    eax,ebp
c001dc31:	84 c0                	test   al,al
c001dc33:	74 19                	je     c001dc4e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001dc35:	83 ec 0c             	sub    esp,0xc
c001dc38:	68 d7 ab 02 c0       	push   0xc002abd7
c001dc3d:	e8 51 bc ff ff       	call   c0019893 <Krnl::panic(char const*)>
c001dc42:	31 ed                	xor    ebp,ebp
c001dc44:	e8 73 f1 ff ff       	call   c001cdbc <unlockScheduler()>
c001dc49:	83 c4 10             	add    esp,0x10
c001dc4c:	eb 75                	jmp    c001dcc3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001dc4e:	50                   	push   eax
c001dc4f:	50                   	push   eax
c001dc50:	6a 01                	push   0x1
c001dc52:	57                   	push   edi
c001dc53:	e8 b4 50 ff ff       	call   c0012d0c <File::open(FileOpenMode)>
c001dc58:	83 c4 10             	add    esp,0x10
c001dc5b:	85 c0                	test   eax,eax
c001dc5d:	74 17                	je     c001dc76 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf9>
c001dc5f:	83 ec 0c             	sub    esp,0xc
c001dc62:	68 f0 ab 02 c0       	push   0xc002abf0
c001dc67:	e8 27 bc ff ff       	call   c0019893 <Krnl::panic(char const*)>
c001dc6c:	e8 4b f1 ff ff       	call   c001cdbc <unlockScheduler()>
c001dc71:	83 c4 10             	add    esp,0x10
c001dc74:	eb 4d                	jmp    c001dcc3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001dc76:	0f b7 f6             	movzx  esi,si
c001dc79:	50                   	push   eax
c001dc7a:	0f b7 db             	movzx  ebx,bx
c001dc7d:	50                   	push   eax
c001dc7e:	56                   	push   esi
c001dc7f:	53                   	push   ebx
c001dc80:	e8 b7 fd ff ff       	call   c001da3c <Vm::realToLinear(unsigned short, unsigned short)>
c001dc85:	5a                   	pop    edx
c001dc86:	8b 17                	mov    edx,DWORD PTR [edi]
c001dc88:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001dc8c:	51                   	push   ecx
c001dc8d:	50                   	push   eax
c001dc8e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001dc92:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001dc96:	57                   	push   edi
c001dc97:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001dc9a:	83 c4 14             	add    esp,0x14
c001dc9d:	57                   	push   edi
c001dc9e:	e8 c7 50 ff ff       	call   c0012d6a <File::close()>
c001dca3:	c6 05 65 df 02 c0 00 	mov    BYTE PTR ds:0xc002df65,0x0
c001dcaa:	e8 0d f1 ff ff       	call   c001cdbc <unlockScheduler()>
c001dcaf:	59                   	pop    ecx
c001dcb0:	ff 35 68 df 02 c0    	push   DWORD PTR ds:0xc002df68
c001dcb6:	e8 17 f7 ff ff       	call   c001d3d2 <unblockTask(ThreadControlBlock*)>
c001dcbb:	83 c4 10             	add    esp,0x10
c001dcbe:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001dcc3:	83 c4 2c             	add    esp,0x2c
c001dcc6:	89 e8                	mov    eax,ebp
c001dcc8:	5b                   	pop    ebx
c001dcc9:	5e                   	pop    esi
c001dcca:	5f                   	pop    edi
c001dccb:	5d                   	pop    ebp
c001dccc:	c3                   	ret    

c001dccd <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001dccd:	57                   	push   edi
c001dcce:	56                   	push   esi
c001dccf:	53                   	push   ebx
c001dcd0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dcd4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dcd8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001dcdc:	83 e8 06             	sub    eax,0x6
c001dcdf:	0f b7 c0             	movzx  eax,ax
c001dce2:	50                   	push   eax
c001dce3:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001dce8:	50                   	push   eax
c001dce9:	e8 4e fd ff ff       	call   c001da3c <Vm::realToLinear(unsigned short, unsigned short)>
c001dcee:	5a                   	pop    edx
c001dcef:	5e                   	pop    esi
c001dcf0:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001dcf3:	8d 56 fa             	lea    edx,[esi-0x6]
c001dcf6:	81 e2 ff ff 00 00    	and    edx,0xffff
c001dcfc:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001dcff:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001dd02:	83 c2 02             	add    edx,0x2
c001dd05:	66 89 10             	mov    WORD PTR [eax],dx
c001dd08:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001dd0b:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001dd0f:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001dd12:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001dd16:	89 d6                	mov    esi,edx
c001dd18:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001dd1e:	66 81 e6 ff fd       	and    si,0xfdff
c001dd23:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001dd27:	74 07                	je     c001dd30 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001dd29:	89 d6                	mov    esi,edx
c001dd2b:	66 81 ce 00 02       	or     si,0x200
c001dd30:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001dd34:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd39:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001dd3d:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001dd45:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001dd48:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001dd50:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001dd53:	5b                   	pop    ebx
c001dd54:	5e                   	pop    esi
c001dd55:	5f                   	pop    edi
c001dd56:	c3                   	ret    

c001dd57 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001dd57:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001dd5c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001dd61:	c1 e0 04             	shl    eax,0x4
c001dd64:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001dd67:	c3                   	ret    

c001dd68 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001dd68:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001dd6d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001dd72:	c1 e0 04             	shl    eax,0x4
c001dd75:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001dd79:	c3                   	ret    

c001dd7a <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001dd7a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001dd7f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001dd84:	c1 e0 04             	shl    eax,0x4
c001dd87:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001dd8a:	c3                   	ret    

c001dd8b <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001dd8b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001dd90:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001dd95:	c1 e0 04             	shl    eax,0x4
c001dd98:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dd9c:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001dd9f:	c3                   	ret    

c001dda0 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001dda0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001dda5:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ddaa:	c1 e0 04             	shl    eax,0x4
c001ddad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ddb1:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001ddb5:	c3                   	ret    

c001ddb6 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001ddb6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ddbb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ddc0:	c1 e0 04             	shl    eax,0x4
c001ddc3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ddc7:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001ddca:	c3                   	ret    

c001ddcb <Vm::faultHandler(regs*)>:
c001ddcb:	55                   	push   ebp
c001ddcc:	57                   	push   edi
c001ddcd:	56                   	push   esi
c001ddce:	53                   	push   ebx
c001ddcf:	83 ec 1c             	sub    esp,0x1c
c001ddd2:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ddd6:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001ddd9:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001dddc:	0f b7 c1             	movzx  eax,cx
c001dddf:	50                   	push   eax
c001dde0:	0f b7 c3             	movzx  eax,bx
c001dde3:	c1 e3 04             	shl    ebx,0x4
c001dde6:	50                   	push   eax
c001dde7:	e8 50 fc ff ff       	call   c001da3c <Vm::realToLinear(unsigned short, unsigned short)>
c001ddec:	5a                   	pop    edx
c001dded:	89 c5                	mov    ebp,eax
c001ddef:	5e                   	pop    esi
c001ddf0:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001ddf4:	50                   	push   eax
c001ddf5:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001ddf9:	50                   	push   eax
c001ddfa:	e8 3d fc ff ff       	call   c001da3c <Vm::realToLinear(unsigned short, unsigned short)>
c001ddff:	01 cb                	add    ebx,ecx
c001de01:	89 c6                	mov    esi,eax
c001de03:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001de07:	50                   	push   eax
c001de08:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001de0c:	50                   	push   eax
c001de0d:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001de11:	50                   	push   eax
c001de12:	55                   	push   ebp
c001de13:	53                   	push   ebx
c001de14:	b3 06                	mov    bl,0x6
c001de16:	68 09 ac 02 c0       	push   0xc002ac09
c001de1b:	e8 59 49 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c001de20:	83 c4 20             	add    esp,0x20
c001de23:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001de28:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001de2d:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001de31:	3c 9d                	cmp    al,0x9d
c001de33:	0f 84 d7 02 00 00    	je     c001e110 <Vm::faultHandler(regs*)+0x345>
c001de39:	0f 87 a3 00 00 00    	ja     c001dee2 <Vm::faultHandler(regs*)+0x117>
c001de3f:	3c 66                	cmp    al,0x66
c001de41:	0f 84 15 02 00 00    	je     c001e05c <Vm::faultHandler(regs*)+0x291>
c001de47:	77 5f                	ja     c001dea8 <Vm::faultHandler(regs*)+0xdd>
c001de49:	3c 36                	cmp    al,0x36
c001de4b:	0f 84 f1 01 00 00    	je     c001e042 <Vm::faultHandler(regs*)+0x277>
c001de51:	77 28                	ja     c001de7b <Vm::faultHandler(regs*)+0xb0>
c001de53:	3c 26                	cmp    al,0x26
c001de55:	0f 84 99 01 00 00    	je     c001dff4 <Vm::faultHandler(regs*)+0x229>
c001de5b:	3c 2e                	cmp    al,0x2e
c001de5d:	0f 85 3b 07 00 00    	jne    c001e59e <Vm::faultHandler(regs*)+0x7d3>
c001de63:	83 ec 0c             	sub    esp,0xc
c001de66:	31 db                	xor    ebx,ebx
c001de68:	68 1e ac 02 c0       	push   0xc002ac1e
c001de6d:	e8 07 49 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c001de72:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001de75:	83 c4 10             	add    esp,0x10
c001de78:	45                   	inc    ebp
c001de79:	eb b2                	jmp    c001de2d <Vm::faultHandler(regs*)+0x62>
c001de7b:	3c 64                	cmp    al,0x64
c001de7d:	0f 84 8b 01 00 00    	je     c001e00e <Vm::faultHandler(regs*)+0x243>
c001de83:	0f 87 9f 01 00 00    	ja     c001e028 <Vm::faultHandler(regs*)+0x25d>
c001de89:	3c 3e                	cmp    al,0x3e
c001de8b:	0f 85 0d 07 00 00    	jne    c001e59e <Vm::faultHandler(regs*)+0x7d3>
c001de91:	83 ec 0c             	sub    esp,0xc
c001de94:	b3 01                	mov    bl,0x1
c001de96:	68 22 ac 02 c0       	push   0xc002ac22
c001de9b:	e8 d9 48 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c001dea0:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001dea3:	83 c4 10             	add    esp,0x10
c001dea6:	eb d0                	jmp    c001de78 <Vm::faultHandler(regs*)+0xad>
c001dea8:	3c 6d                	cmp    al,0x6d
c001deaa:	0f 84 af 03 00 00    	je     c001e25f <Vm::faultHandler(regs*)+0x494>
c001deb0:	77 15                	ja     c001dec7 <Vm::faultHandler(regs*)+0xfc>
c001deb2:	3c 67                	cmp    al,0x67
c001deb4:	0f 84 bf 01 00 00    	je     c001e079 <Vm::faultHandler(regs*)+0x2ae>
c001deba:	3c 6c                	cmp    al,0x6c
c001debc:	0f 84 3f 03 00 00    	je     c001e201 <Vm::faultHandler(regs*)+0x436>
c001dec2:	e9 d7 06 00 00       	jmp    c001e59e <Vm::faultHandler(regs*)+0x7d3>
c001dec7:	3c 6f                	cmp    al,0x6f
c001dec9:	0f 84 a4 04 00 00    	je     c001e373 <Vm::faultHandler(regs*)+0x5a8>
c001decf:	0f 82 11 04 00 00    	jb     c001e2e6 <Vm::faultHandler(regs*)+0x51b>
c001ded5:	3c 9c                	cmp    al,0x9c
c001ded7:	0f 84 ba 01 00 00    	je     c001e097 <Vm::faultHandler(regs*)+0x2cc>
c001dedd:	e9 bc 06 00 00       	jmp    c001e59e <Vm::faultHandler(regs*)+0x7d3>
c001dee2:	3c ec                	cmp    al,0xec
c001dee4:	0f 84 24 06 00 00    	je     c001e50e <Vm::faultHandler(regs*)+0x743>
c001deea:	0f 87 93 00 00 00    	ja     c001df83 <Vm::faultHandler(regs*)+0x1b8>
c001def0:	3c e4                	cmp    al,0xe4
c001def2:	0f 84 5c 05 00 00    	je     c001e454 <Vm::faultHandler(regs*)+0x689>
c001def8:	77 6a                	ja     c001df64 <Vm::faultHandler(regs*)+0x199>
c001defa:	3c cd                	cmp    al,0xcd
c001defc:	0f 84 7e 02 00 00    	je     c001e180 <Vm::faultHandler(regs*)+0x3b5>
c001df02:	3c cf                	cmp    al,0xcf
c001df04:	0f 85 94 06 00 00    	jne    c001e59e <Vm::faultHandler(regs*)+0x7d3>
c001df0a:	83 ec 0c             	sub    esp,0xc
c001df0d:	68 66 ac 02 c0       	push   0xc002ac66
c001df12:	e8 62 48 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c001df17:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001df1a:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001df1d:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001df21:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001df24:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001df28:	0d 00 02 02 00       	or     eax,0x20200
c001df2d:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001df30:	56                   	push   esi
c001df31:	53                   	push   ebx
c001df32:	52                   	push   edx
c001df33:	68 6c ac 02 c0       	push   0xc002ac6c
c001df38:	e8 3c 48 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c001df3d:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001df41:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001df47:	66 c1 e8 09          	shr    ax,0x9
c001df4b:	83 e0 01             	and    eax,0x1
c001df4e:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001df51:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001df54:	83 c0 06             	add    eax,0x6
c001df57:	25 ff ff 00 00       	and    eax,0xffff
c001df5c:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001df5f:	e9 95 02 00 00       	jmp    c001e1f9 <Vm::faultHandler(regs*)+0x42e>
c001df64:	3c e6                	cmp    al,0xe6
c001df66:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001df6a:	0f 84 4e 05 00 00    	je     c001e4be <Vm::faultHandler(regs*)+0x6f3>
c001df70:	0f 82 0a 05 00 00    	jb     c001e480 <Vm::faultHandler(regs*)+0x6b5>
c001df76:	3c e7                	cmp    al,0xe7
c001df78:	0f 84 69 05 00 00    	je     c001e4e7 <Vm::faultHandler(regs*)+0x71c>
c001df7e:	e9 1b 06 00 00       	jmp    c001e59e <Vm::faultHandler(regs*)+0x7d3>
c001df83:	3c ef                	cmp    al,0xef
c001df85:	0f 84 e6 05 00 00    	je     c001e571 <Vm::faultHandler(regs*)+0x7a6>
c001df8b:	77 37                	ja     c001dfc4 <Vm::faultHandler(regs*)+0x1f9>
c001df8d:	3c ed                	cmp    al,0xed
c001df8f:	0f 84 a3 05 00 00    	je     c001e538 <Vm::faultHandler(regs*)+0x76d>
c001df95:	3c ee                	cmp    al,0xee
c001df97:	0f 85 01 06 00 00    	jne    c001e59e <Vm::faultHandler(regs*)+0x7d3>
c001df9d:	52                   	push   edx
c001df9e:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001dfa1:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001dfa4:	68 07 ad 02 c0       	push   0xc002ad07
c001dfa9:	e8 cb 47 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c001dfae:	59                   	pop    ecx
c001dfaf:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001dfb3:	5b                   	pop    ebx
c001dfb4:	50                   	push   eax
c001dfb5:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001dfb9:	50                   	push   eax
c001dfba:	e8 2a fa ff ff       	call   c001d9e9 <Vm::outbv(unsigned short, unsigned char)>
c001dfbf:	e9 a5 05 00 00       	jmp    c001e569 <Vm::faultHandler(regs*)+0x79e>
c001dfc4:	3c fa                	cmp    al,0xfa
c001dfc6:	0f 84 f7 01 00 00    	je     c001e1c3 <Vm::faultHandler(regs*)+0x3f8>
c001dfcc:	3c fb                	cmp    al,0xfb
c001dfce:	0f 84 0a 02 00 00    	je     c001e1de <Vm::faultHandler(regs*)+0x413>
c001dfd4:	3c f3                	cmp    al,0xf3
c001dfd6:	0f 85 c2 05 00 00    	jne    c001e59e <Vm::faultHandler(regs*)+0x7d3>
c001dfdc:	83 ec 0c             	sub    esp,0xc
c001dfdf:	68 3f ac 02 c0       	push   0xc002ac3f
c001dfe4:	e8 90 47 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c001dfe9:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001dfec:	83 c4 10             	add    esp,0x10
c001dfef:	e9 84 fe ff ff       	jmp    c001de78 <Vm::faultHandler(regs*)+0xad>
c001dff4:	83 ec 0c             	sub    esp,0xc
c001dff7:	b3 02                	mov    bl,0x2
c001dff9:	68 1a ac 02 c0       	push   0xc002ac1a
c001dffe:	e8 76 47 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c001e003:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e006:	83 c4 10             	add    esp,0x10
c001e009:	e9 6a fe ff ff       	jmp    c001de78 <Vm::faultHandler(regs*)+0xad>
c001e00e:	83 ec 0c             	sub    esp,0xc
c001e011:	b3 03                	mov    bl,0x3
c001e013:	68 26 ac 02 c0       	push   0xc002ac26
c001e018:	e8 5c 47 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c001e01d:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e020:	83 c4 10             	add    esp,0x10
c001e023:	e9 50 fe ff ff       	jmp    c001de78 <Vm::faultHandler(regs*)+0xad>
c001e028:	83 ec 0c             	sub    esp,0xc
c001e02b:	b3 04                	mov    bl,0x4
c001e02d:	68 2a ac 02 c0       	push   0xc002ac2a
c001e032:	e8 42 47 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c001e037:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e03a:	83 c4 10             	add    esp,0x10
c001e03d:	e9 36 fe ff ff       	jmp    c001de78 <Vm::faultHandler(regs*)+0xad>
c001e042:	83 ec 0c             	sub    esp,0xc
c001e045:	b3 05                	mov    bl,0x5
c001e047:	68 2e ac 02 c0       	push   0xc002ac2e
c001e04c:	e8 28 47 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c001e051:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e054:	83 c4 10             	add    esp,0x10
c001e057:	e9 1c fe ff ff       	jmp    c001de78 <Vm::faultHandler(regs*)+0xad>
c001e05c:	83 ec 0c             	sub    esp,0xc
c001e05f:	68 32 ac 02 c0       	push   0xc002ac32
c001e064:	e8 10 47 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c001e069:	83 c4 10             	add    esp,0x10
c001e06c:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e06f:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001e074:	e9 ff fd ff ff       	jmp    c001de78 <Vm::faultHandler(regs*)+0xad>
c001e079:	50                   	push   eax
c001e07a:	50                   	push   eax
c001e07b:	6a 01                	push   0x1
c001e07d:	68 37 ac 02 c0       	push   0xc002ac37
c001e082:	e8 f2 46 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c001e087:	83 c4 10             	add    esp,0x10
c001e08a:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e08d:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001e092:	e9 e1 fd ff ff       	jmp    c001de78 <Vm::faultHandler(regs*)+0xad>
c001e097:	83 ec 0c             	sub    esp,0xc
c001e09a:	68 45 ac 02 c0       	push   0xc002ac45
c001e09f:	e8 d5 46 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c001e0a4:	83 c4 10             	add    esp,0x10
c001e0a7:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001e0aa:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e0af:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001e0b2:	74 2f                	je     c001e0e3 <Vm::faultHandler(regs*)+0x318>
c001e0b4:	83 ea 04             	sub    edx,0x4
c001e0b7:	25 ff 0d 00 00       	and    eax,0xdff
c001e0bc:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e0c2:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001e0c5:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001e0c8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e0ce:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001e0d2:	0f 84 bf 04 00 00    	je     c001e597 <Vm::faultHandler(regs*)+0x7cc>
c001e0d8:	80 cc 02             	or     ah,0x2
c001e0db:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001e0de:	e9 b4 04 00 00       	jmp    c001e597 <Vm::faultHandler(regs*)+0x7cc>
c001e0e3:	83 ea 02             	sub    edx,0x2
c001e0e6:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e0ec:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001e0ef:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001e0f3:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e0f9:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001e0fd:	74 05                	je     c001e104 <Vm::faultHandler(regs*)+0x339>
c001e0ff:	80 cc 02             	or     ah,0x2
c001e102:	eb 03                	jmp    c001e107 <Vm::faultHandler(regs*)+0x33c>
c001e104:	80 e4 fd             	and    ah,0xfd
c001e107:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001e10b:	e9 87 04 00 00       	jmp    c001e597 <Vm::faultHandler(regs*)+0x7cc>
c001e110:	83 ec 0c             	sub    esp,0xc
c001e113:	68 4c ac 02 c0       	push   0xc002ac4c
c001e118:	e8 5c 46 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c001e11d:	83 c4 10             	add    esp,0x10
c001e120:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e125:	74 28                	je     c001e14f <Vm::faultHandler(regs*)+0x384>
c001e127:	8b 06                	mov    eax,DWORD PTR [esi]
c001e129:	25 ff 0d 00 00       	and    eax,0xdff
c001e12e:	0d 00 02 02 00       	or     eax,0x20200
c001e133:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001e136:	8b 06                	mov    eax,DWORD PTR [esi]
c001e138:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e13e:	c1 e8 09             	shr    eax,0x9
c001e141:	83 e0 01             	and    eax,0x1
c001e144:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e147:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001e14a:	83 c0 04             	add    eax,0x4
c001e14d:	eb 24                	jmp    c001e173 <Vm::faultHandler(regs*)+0x3a8>
c001e14f:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001e152:	0d 00 02 02 00       	or     eax,0x20200
c001e157:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001e15a:	66 8b 06             	mov    ax,WORD PTR [esi]
c001e15d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e163:	66 c1 e8 09          	shr    ax,0x9
c001e167:	83 e0 01             	and    eax,0x1
c001e16a:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e16d:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001e170:	83 c0 02             	add    eax,0x2
c001e173:	25 ff ff 00 00       	and    eax,0xffff
c001e178:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001e17b:	e9 17 04 00 00       	jmp    c001e597 <Vm::faultHandler(regs*)+0x7cc>
c001e180:	53                   	push   ebx
c001e181:	53                   	push   ebx
c001e182:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e186:	50                   	push   eax
c001e187:	68 52 ac 02 c0       	push   0xc002ac52
c001e18c:	e8 e8 45 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c001e191:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e195:	83 c4 10             	add    esp,0x10
c001e198:	3c ee                	cmp    al,0xee
c001e19a:	75 10                	jne    c001e1ac <Vm::faultHandler(regs*)+0x3e1>
c001e19c:	83 ec 0c             	sub    esp,0xc
c001e19f:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e1a2:	e8 fa f8 ff ff       	call   c001daa1 <Vm::mainloop3(unsigned long)>
c001e1a7:	e9 c0 03 00 00       	jmp    c001e56c <Vm::faultHandler(regs*)+0x7a1>
c001e1ac:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001e1b0:	83 ec 0c             	sub    esp,0xc
c001e1b3:	53                   	push   ebx
c001e1b4:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001e1b8:	53                   	push   ebx
c001e1b9:	55                   	push   ebp
c001e1ba:	50                   	push   eax
c001e1bb:	57                   	push   edi
c001e1bc:	e8 0c fb ff ff       	call   c001dccd <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001e1c1:	eb 36                	jmp    c001e1f9 <Vm::faultHandler(regs*)+0x42e>
c001e1c3:	83 ec 0c             	sub    esp,0xc
c001e1c6:	68 5c ac 02 c0       	push   0xc002ac5c
c001e1cb:	e8 a9 45 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c001e1d0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e1d5:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001e1d9:	e9 8b 03 00 00       	jmp    c001e569 <Vm::faultHandler(regs*)+0x79e>
c001e1de:	83 ec 0c             	sub    esp,0xc
c001e1e1:	68 61 ac 02 c0       	push   0xc002ac61
c001e1e6:	e8 8e 45 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c001e1eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e1f0:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001e1f4:	e9 70 03 00 00       	jmp    c001e569 <Vm::faultHandler(regs*)+0x79e>
c001e1f9:	83 c4 20             	add    esp,0x20
c001e1fc:	e9 99 03 00 00       	jmp    c001e59a <Vm::faultHandler(regs*)+0x7cf>
c001e201:	83 ec 0c             	sub    esp,0xc
c001e204:	68 9f ac 02 c0       	push   0xc002ac9f
c001e209:	e8 6b 45 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c001e20e:	83 c4 10             	add    esp,0x10
c001e211:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001e214:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e219:	74 0d                	je     c001e228 <Vm::faultHandler(regs*)+0x45d>
c001e21b:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001e222:	0f 87 9e 01 00 00    	ja     c001e3c6 <Vm::faultHandler(regs*)+0x5fb>
c001e228:	83 ec 0c             	sub    esp,0xc
c001e22b:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001e22f:	0f b7 db             	movzx  ebx,bx
c001e232:	50                   	push   eax
c001e233:	e8 9e f7 ff ff       	call   c001d9d6 <Vm::inbv(unsigned short)>
c001e238:	83 c4 0c             	add    esp,0xc
c001e23b:	0f b6 c0             	movzx  eax,al
c001e23e:	50                   	push   eax
c001e23f:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001e243:	50                   	push   eax
c001e244:	53                   	push   ebx
c001e245:	e8 41 fb ff ff       	call   c001dd8b <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001e24a:	83 c4 10             	add    esp,0x10
c001e24d:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001e250:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e254:	74 03                	je     c001e259 <Vm::faultHandler(regs*)+0x48e>
c001e256:	48                   	dec    eax
c001e257:	eb 01                	jmp    c001e25a <Vm::faultHandler(regs*)+0x48f>
c001e259:	40                   	inc    eax
c001e25a:	0f b7 c0             	movzx  eax,ax
c001e25d:	eb 7f                	jmp    c001e2de <Vm::faultHandler(regs*)+0x513>
c001e25f:	83 ec 0c             	sub    esp,0xc
c001e262:	68 d1 ac 02 c0       	push   0xc002acd1
c001e267:	e8 0d 45 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c001e26c:	83 c4 10             	add    esp,0x10
c001e26f:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001e272:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e277:	74 0d                	je     c001e286 <Vm::faultHandler(regs*)+0x4bb>
c001e279:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001e280:	0f 87 40 01 00 00    	ja     c001e3c6 <Vm::faultHandler(regs*)+0x5fb>
c001e286:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001e289:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001e28d:	0f b7 db             	movzx  ebx,bx
c001e290:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e295:	74 20                	je     c001e2b7 <Vm::faultHandler(regs*)+0x4ec>
c001e297:	ed                   	in     eax,dx
c001e298:	51                   	push   ecx
c001e299:	50                   	push   eax
c001e29a:	56                   	push   esi
c001e29b:	53                   	push   ebx
c001e29c:	e8 15 fb ff ff       	call   c001ddb6 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001e2a1:	83 c4 10             	add    esp,0x10
c001e2a4:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001e2a7:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e2ab:	74 05                	je     c001e2b2 <Vm::faultHandler(regs*)+0x4e7>
c001e2ad:	83 e8 04             	sub    eax,0x4
c001e2b0:	eb 27                	jmp    c001e2d9 <Vm::faultHandler(regs*)+0x50e>
c001e2b2:	83 c0 04             	add    eax,0x4
c001e2b5:	eb 22                	jmp    c001e2d9 <Vm::faultHandler(regs*)+0x50e>
c001e2b7:	66 ed                	in     ax,dx
c001e2b9:	0f b7 c0             	movzx  eax,ax
c001e2bc:	52                   	push   edx
c001e2bd:	50                   	push   eax
c001e2be:	56                   	push   esi
c001e2bf:	53                   	push   ebx
c001e2c0:	e8 db fa ff ff       	call   c001dda0 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001e2c5:	83 c4 10             	add    esp,0x10
c001e2c8:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001e2cb:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e2cf:	74 05                	je     c001e2d6 <Vm::faultHandler(regs*)+0x50b>
c001e2d1:	83 e8 02             	sub    eax,0x2
c001e2d4:	eb 03                	jmp    c001e2d9 <Vm::faultHandler(regs*)+0x50e>
c001e2d6:	83 c0 02             	add    eax,0x2
c001e2d9:	25 ff ff 00 00       	and    eax,0xffff
c001e2de:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001e2e1:	e9 b1 02 00 00       	jmp    c001e597 <Vm::faultHandler(regs*)+0x7cc>
c001e2e6:	83 ec 0c             	sub    esp,0xc
c001e2e9:	4b                   	dec    ebx
c001e2ea:	68 d7 ac 02 c0       	push   0xc002acd7
c001e2ef:	e8 85 44 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c001e2f4:	83 c4 10             	add    esp,0x10
c001e2f7:	80 fb 05             	cmp    bl,0x5
c001e2fa:	77 0a                	ja     c001e306 <Vm::faultHandler(regs*)+0x53b>
c001e2fc:	0f b6 db             	movzx  ebx,bl
c001e2ff:	ff 24 9d 48 ad 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd52b8]
c001e306:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001e30a:	eb 1b                	jmp    c001e327 <Vm::faultHandler(regs*)+0x55c>
c001e30c:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001e310:	eb 15                	jmp    c001e327 <Vm::faultHandler(regs*)+0x55c>
c001e312:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001e316:	eb 0f                	jmp    c001e327 <Vm::faultHandler(regs*)+0x55c>
c001e318:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001e31c:	eb 09                	jmp    c001e327 <Vm::faultHandler(regs*)+0x55c>
c001e31e:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001e321:	eb 04                	jmp    c001e327 <Vm::faultHandler(regs*)+0x55c>
c001e323:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001e327:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e32c:	74 0d                	je     c001e33b <Vm::faultHandler(regs*)+0x570>
c001e32e:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001e335:	0f 87 8b 00 00 00    	ja     c001e3c6 <Vm::faultHandler(regs*)+0x5fb>
c001e33b:	53                   	push   ebx
c001e33c:	53                   	push   ebx
c001e33d:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001e341:	52                   	push   edx
c001e342:	50                   	push   eax
c001e343:	e8 0f fa ff ff       	call   c001dd57 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001e348:	5e                   	pop    esi
c001e349:	0f b6 c0             	movzx  eax,al
c001e34c:	5d                   	pop    ebp
c001e34d:	50                   	push   eax
c001e34e:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001e352:	50                   	push   eax
c001e353:	e8 91 f6 ff ff       	call   c001d9e9 <Vm::outbv(unsigned short, unsigned char)>
c001e358:	83 c4 10             	add    esp,0x10
c001e35b:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001e35e:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e362:	74 03                	je     c001e367 <Vm::faultHandler(regs*)+0x59c>
c001e364:	48                   	dec    eax
c001e365:	eb 01                	jmp    c001e368 <Vm::faultHandler(regs*)+0x59d>
c001e367:	40                   	inc    eax
c001e368:	0f b7 c0             	movzx  eax,ax
c001e36b:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001e36e:	e9 24 02 00 00       	jmp    c001e597 <Vm::faultHandler(regs*)+0x7cc>
c001e373:	83 ec 0c             	sub    esp,0xc
c001e376:	4b                   	dec    ebx
c001e377:	68 d7 ac 02 c0       	push   0xc002acd7
c001e37c:	e8 f8 43 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c001e381:	83 c4 10             	add    esp,0x10
c001e384:	80 fb 05             	cmp    bl,0x5
c001e387:	77 0a                	ja     c001e393 <Vm::faultHandler(regs*)+0x5c8>
c001e389:	0f b6 db             	movzx  ebx,bl
c001e38c:	ff 24 9d 60 ad 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd52a0]
c001e393:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001e397:	eb 1b                	jmp    c001e3b4 <Vm::faultHandler(regs*)+0x5e9>
c001e399:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001e39d:	eb 15                	jmp    c001e3b4 <Vm::faultHandler(regs*)+0x5e9>
c001e39f:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001e3a3:	eb 0f                	jmp    c001e3b4 <Vm::faultHandler(regs*)+0x5e9>
c001e3a5:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001e3a9:	eb 09                	jmp    c001e3b4 <Vm::faultHandler(regs*)+0x5e9>
c001e3ab:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001e3ae:	eb 04                	jmp    c001e3b4 <Vm::faultHandler(regs*)+0x5e9>
c001e3b0:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001e3b4:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001e3b7:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e3bc:	74 39                	je     c001e3f7 <Vm::faultHandler(regs*)+0x62c>
c001e3be:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001e3c4:	76 31                	jbe    c001e3f7 <Vm::faultHandler(regs*)+0x62c>
c001e3c6:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001e3ca:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001e3ce:	51                   	push   ecx
c001e3cf:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001e3d3:	51                   	push   ecx
c001e3d4:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001e3d8:	51                   	push   ecx
c001e3d9:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001e3dd:	51                   	push   ecx
c001e3de:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e3e2:	52                   	push   edx
c001e3e3:	50                   	push   eax
c001e3e4:	50                   	push   eax
c001e3e5:	68 a4 ac 02 c0       	push   0xc002aca4
c001e3ea:	e8 8a 43 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c001e3ef:	83 c4 20             	add    esp,0x20
c001e3f2:	e9 fb 01 00 00       	jmp    c001e5f2 <Vm::faultHandler(regs*)+0x827>
c001e3f7:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001e3fa:	0f b7 d3             	movzx  edx,bx
c001e3fd:	81 e6 00 04 00 00    	and    esi,0x400
c001e403:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001e406:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e40b:	74 1d                	je     c001e42a <Vm::faultHandler(regs*)+0x65f>
c001e40d:	51                   	push   ecx
c001e40e:	51                   	push   ecx
c001e40f:	52                   	push   edx
c001e410:	50                   	push   eax
c001e411:	e8 64 f9 ff ff       	call   c001dd7a <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001e416:	83 c4 10             	add    esp,0x10
c001e419:	89 ea                	mov    edx,ebp
c001e41b:	ef                   	out    dx,eax
c001e41c:	85 f6                	test   esi,esi
c001e41e:	74 05                	je     c001e425 <Vm::faultHandler(regs*)+0x65a>
c001e420:	83 eb 04             	sub    ebx,0x4
c001e423:	eb 21                	jmp    c001e446 <Vm::faultHandler(regs*)+0x67b>
c001e425:	83 c3 04             	add    ebx,0x4
c001e428:	eb 1c                	jmp    c001e446 <Vm::faultHandler(regs*)+0x67b>
c001e42a:	51                   	push   ecx
c001e42b:	51                   	push   ecx
c001e42c:	52                   	push   edx
c001e42d:	50                   	push   eax
c001e42e:	e8 35 f9 ff ff       	call   c001dd68 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001e433:	83 c4 10             	add    esp,0x10
c001e436:	89 ea                	mov    edx,ebp
c001e438:	66 ef                	out    dx,ax
c001e43a:	85 f6                	test   esi,esi
c001e43c:	74 05                	je     c001e443 <Vm::faultHandler(regs*)+0x678>
c001e43e:	83 eb 02             	sub    ebx,0x2
c001e441:	eb 03                	jmp    c001e446 <Vm::faultHandler(regs*)+0x67b>
c001e443:	83 c3 02             	add    ebx,0x2
c001e446:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001e44c:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001e44f:	e9 43 01 00 00       	jmp    c001e597 <Vm::faultHandler(regs*)+0x7cc>
c001e454:	53                   	push   ebx
c001e455:	53                   	push   ebx
c001e456:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e45a:	50                   	push   eax
c001e45b:	68 dd ac 02 c0       	push   0xc002acdd
c001e460:	e8 14 43 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c001e465:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001e46c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e470:	89 04 24             	mov    DWORD PTR [esp],eax
c001e473:	e8 5e f5 ff ff       	call   c001d9d6 <Vm::inbv(unsigned short)>
c001e478:	0f b6 c0             	movzx  eax,al
c001e47b:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001e47e:	eb 5e                	jmp    c001e4de <Vm::faultHandler(regs*)+0x713>
c001e480:	51                   	push   ecx
c001e481:	51                   	push   ecx
c001e482:	53                   	push   ebx
c001e483:	68 e3 ac 02 c0       	push   0xc002ace3
c001e488:	e8 ec 42 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c001e48d:	83 c4 10             	add    esp,0x10
c001e490:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e495:	74 07                	je     c001e49e <Vm::faultHandler(regs*)+0x6d3>
c001e497:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e49b:	ed                   	in     eax,dx
c001e49c:	eb 14                	jmp    c001e4b2 <Vm::faultHandler(regs*)+0x6e7>
c001e49e:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001e4a1:	66 31 db             	xor    bx,bx
c001e4a4:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001e4a7:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e4ab:	66 ed                	in     ax,dx
c001e4ad:	0f b7 c0             	movzx  eax,ax
c001e4b0:	09 d8                	or     eax,ebx
c001e4b2:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001e4b5:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001e4b9:	e9 dc 00 00 00       	jmp    c001e59a <Vm::faultHandler(regs*)+0x7cf>
c001e4be:	50                   	push   eax
c001e4bf:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e4c2:	53                   	push   ebx
c001e4c3:	68 e9 ac 02 c0       	push   0xc002ace9
c001e4c8:	e8 ac 42 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c001e4cd:	58                   	pop    eax
c001e4ce:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001e4d2:	5a                   	pop    edx
c001e4d3:	50                   	push   eax
c001e4d4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e4d8:	50                   	push   eax
c001e4d9:	e8 0b f5 ff ff       	call   c001d9e9 <Vm::outbv(unsigned short, unsigned char)>
c001e4de:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001e4e2:	e9 85 00 00 00       	jmp    c001e56c <Vm::faultHandler(regs*)+0x7a1>
c001e4e7:	50                   	push   eax
c001e4e8:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e4eb:	53                   	push   ebx
c001e4ec:	68 f2 ac 02 c0       	push   0xc002acf2
c001e4f1:	e8 83 42 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c001e4f6:	83 c4 10             	add    esp,0x10
c001e4f9:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e4fd:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e502:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001e505:	74 03                	je     c001e50a <Vm::faultHandler(regs*)+0x73f>
c001e507:	ef                   	out    dx,eax
c001e508:	eb ab                	jmp    c001e4b5 <Vm::faultHandler(regs*)+0x6ea>
c001e50a:	66 ef                	out    dx,ax
c001e50c:	eb a7                	jmp    c001e4b5 <Vm::faultHandler(regs*)+0x6ea>
c001e50e:	55                   	push   ebp
c001e50f:	55                   	push   ebp
c001e510:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001e513:	68 fb ac 02 c0       	push   0xc002acfb
c001e518:	e8 5c 42 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c001e51d:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001e524:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001e528:	89 04 24             	mov    DWORD PTR [esp],eax
c001e52b:	e8 a6 f4 ff ff       	call   c001d9d6 <Vm::inbv(unsigned short)>
c001e530:	0f b6 c0             	movzx  eax,al
c001e533:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001e536:	eb 31                	jmp    c001e569 <Vm::faultHandler(regs*)+0x79e>
c001e538:	56                   	push   esi
c001e539:	56                   	push   esi
c001e53a:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001e53d:	68 01 ad 02 c0       	push   0xc002ad01
c001e542:	e8 32 42 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c001e547:	83 c4 10             	add    esp,0x10
c001e54a:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001e54d:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e552:	74 03                	je     c001e557 <Vm::faultHandler(regs*)+0x78c>
c001e554:	ed                   	in     eax,dx
c001e555:	eb 0d                	jmp    c001e564 <Vm::faultHandler(regs*)+0x799>
c001e557:	66 ed                	in     ax,dx
c001e559:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001e55c:	0f b7 c0             	movzx  eax,ax
c001e55f:	66 31 d2             	xor    dx,dx
c001e562:	09 d0                	or     eax,edx
c001e564:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001e567:	eb 2e                	jmp    c001e597 <Vm::faultHandler(regs*)+0x7cc>
c001e569:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e56c:	83 c4 10             	add    esp,0x10
c001e56f:	eb 29                	jmp    c001e59a <Vm::faultHandler(regs*)+0x7cf>
c001e571:	50                   	push   eax
c001e572:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e575:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001e578:	68 10 ad 02 c0       	push   0xc002ad10
c001e57d:	e8 f7 41 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c001e582:	83 c4 10             	add    esp,0x10
c001e585:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001e588:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e58d:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001e590:	74 03                	je     c001e595 <Vm::faultHandler(regs*)+0x7ca>
c001e592:	ef                   	out    dx,eax
c001e593:	eb 02                	jmp    c001e597 <Vm::faultHandler(regs*)+0x7cc>
c001e595:	66 ef                	out    dx,ax
c001e597:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e59a:	b0 01                	mov    al,0x1
c001e59c:	eb 56                	jmp    c001e5f4 <Vm::faultHandler(regs*)+0x829>
c001e59e:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001e5a2:	51                   	push   ecx
c001e5a3:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001e5a7:	51                   	push   ecx
c001e5a8:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001e5ac:	51                   	push   ecx
c001e5ad:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001e5b1:	51                   	push   ecx
c001e5b2:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e5b6:	52                   	push   edx
c001e5b7:	50                   	push   eax
c001e5b8:	50                   	push   eax
c001e5b9:	68 19 ad 02 c0       	push   0xc002ad19
c001e5be:	e8 b6 41 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c001e5c3:	83 c4 20             	add    esp,0x20
c001e5c6:	83 ec 0c             	sub    esp,0xc
c001e5c9:	6a 60                	push   0x60
c001e5cb:	e8 06 f4 ff ff       	call   c001d9d6 <Vm::inbv(unsigned short)>
c001e5d0:	83 c4 10             	add    esp,0x10
c001e5d3:	3c 1c                	cmp    al,0x1c
c001e5d5:	74 04                	je     c001e5db <Vm::faultHandler(regs*)+0x810>
c001e5d7:	3c 5a                	cmp    al,0x5a
c001e5d9:	75 eb                	jne    c001e5c6 <Vm::faultHandler(regs*)+0x7fb>
c001e5db:	3c 1c                	cmp    al,0x1c
c001e5dd:	74 04                	je     c001e5e3 <Vm::faultHandler(regs*)+0x818>
c001e5df:	3c 5a                	cmp    al,0x5a
c001e5e1:	75 0f                	jne    c001e5f2 <Vm::faultHandler(regs*)+0x827>
c001e5e3:	83 ec 0c             	sub    esp,0xc
c001e5e6:	6a 60                	push   0x60
c001e5e8:	e8 e9 f3 ff ff       	call   c001d9d6 <Vm::inbv(unsigned short)>
c001e5ed:	83 c4 10             	add    esp,0x10
c001e5f0:	eb e9                	jmp    c001e5db <Vm::faultHandler(regs*)+0x810>
c001e5f2:	31 c0                	xor    eax,eax
c001e5f4:	83 c4 1c             	add    esp,0x1c
c001e5f7:	5b                   	pop    ebx
c001e5f8:	5e                   	pop    esi
c001e5f9:	5f                   	pop    edi
c001e5fa:	5d                   	pop    ebp
c001e5fb:	c3                   	ret    

c001e5fc <Vm::fpuInternalTo32(unsigned long long)>:
c001e5fc:	57                   	push   edi
c001e5fd:	56                   	push   esi
c001e5fe:	53                   	push   ebx
c001e5ff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e603:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e607:	89 d6                	mov    esi,edx
c001e609:	89 d7                	mov    edi,edx
c001e60b:	89 c1                	mov    ecx,eax
c001e60d:	c1 ef 14             	shr    edi,0x14
c001e610:	89 d3                	mov    ebx,edx
c001e612:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001e618:	31 d2                	xor    edx,edx
c001e61a:	89 f8                	mov    eax,edi
c001e61c:	81 e6 00 00 00 80    	and    esi,0x80000000
c001e622:	bf ff 00 00 00       	mov    edi,0xff
c001e627:	05 80 fc ff ff       	add    eax,0xfffffc80
c001e62c:	83 d2 ff             	adc    edx,0xffffffff
c001e62f:	39 c7                	cmp    edi,eax
c001e631:	bf 00 00 00 00       	mov    edi,0x0
c001e636:	19 d7                	sbb    edi,edx
c001e638:	72 15                	jb     c001e64f <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001e63a:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001e63e:	c1 e0 17             	shl    eax,0x17
c001e641:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001e647:	09 f1                	or     ecx,esi
c001e649:	09 c1                	or     ecx,eax
c001e64b:	89 cf                	mov    edi,ecx
c001e64d:	eb 02                	jmp    c001e651 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001e64f:	31 ff                	xor    edi,edi
c001e651:	89 f8                	mov    eax,edi
c001e653:	5b                   	pop    ebx
c001e654:	5e                   	pop    esi
c001e655:	5f                   	pop    edi
c001e656:	c3                   	ret    

c001e657 <Vm::fpuInternalTo64(unsigned long long)>:
c001e657:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e65b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e65f:	c3                   	ret    

c001e660 <Vm::fpu32ToInternal(unsigned int)>:
c001e660:	57                   	push   edi
c001e661:	31 ff                	xor    edi,edi
c001e663:	56                   	push   esi
c001e664:	53                   	push   ebx
c001e665:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e669:	89 cb                	mov    ebx,ecx
c001e66b:	89 ce                	mov    esi,ecx
c001e66d:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001e673:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001e679:	c1 e9 17             	shr    ecx,0x17
c001e67c:	89 f0                	mov    eax,esi
c001e67e:	0f b6 d1             	movzx  edx,cl
c001e681:	81 c2 80 03 00 00    	add    edx,0x380
c001e687:	89 d1                	mov    ecx,edx
c001e689:	89 fa                	mov    edx,edi
c001e68b:	c1 e1 14             	shl    ecx,0x14
c001e68e:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001e692:	c1 e0 1d             	shl    eax,0x1d
c001e695:	89 d7                	mov    edi,edx
c001e697:	89 c6                	mov    esi,eax
c001e699:	89 ca                	mov    edx,ecx
c001e69b:	89 f0                	mov    eax,esi
c001e69d:	09 fa                	or     edx,edi
c001e69f:	09 da                	or     edx,ebx
c001e6a1:	5b                   	pop    ebx
c001e6a2:	5e                   	pop    esi
c001e6a3:	5f                   	pop    edi
c001e6a4:	c3                   	ret    

c001e6a5 <Vm::fpu64ToInternal(unsigned long long)>:
c001e6a5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e6a9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e6ad:	c3                   	ret    

c001e6ae <Vm::fpuFloatToLong(unsigned long long)>:
c001e6ae:	57                   	push   edi
c001e6af:	31 c0                	xor    eax,eax
c001e6b1:	56                   	push   esi
c001e6b2:	31 d2                	xor    edx,edx
c001e6b4:	53                   	push   ebx
c001e6b5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e6b9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e6bd:	89 d9                	mov    ecx,ebx
c001e6bf:	c1 e9 14             	shr    ecx,0x14
c001e6c2:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001e6c8:	89 cf                	mov    edi,ecx
c001e6ca:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001e6d0:	78 33                	js     c001e705 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001e6d2:	89 d9                	mov    ecx,ebx
c001e6d4:	89 f0                	mov    eax,esi
c001e6d6:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001e6dc:	81 c9 00 00 10 00    	or     ecx,0x100000
c001e6e2:	89 ca                	mov    edx,ecx
c001e6e4:	b9 34 00 00 00       	mov    ecx,0x34
c001e6e9:	29 f9                	sub    ecx,edi
c001e6eb:	0f ad d0             	shrd   eax,edx,cl
c001e6ee:	d3 fa                	sar    edx,cl
c001e6f0:	f6 c1 20             	test   cl,0x20
c001e6f3:	74 05                	je     c001e6fa <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001e6f5:	89 d0                	mov    eax,edx
c001e6f7:	c1 fa 1f             	sar    edx,0x1f
c001e6fa:	85 db                	test   ebx,ebx
c001e6fc:	79 07                	jns    c001e705 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001e6fe:	f7 d8                	neg    eax
c001e700:	83 d2 00             	adc    edx,0x0
c001e703:	f7 da                	neg    edx
c001e705:	5b                   	pop    ebx
c001e706:	5e                   	pop    esi
c001e707:	5f                   	pop    edi
c001e708:	c3                   	ret    

c001e709 <Vm::fpuULongToFloat(unsigned long long)>:
c001e709:	57                   	push   edi
c001e70a:	31 c9                	xor    ecx,ecx
c001e70c:	56                   	push   esi
c001e70d:	53                   	push   ebx
c001e70e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e712:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001e716:	0f ba e7 14          	bt     edi,0x14
c001e71a:	72 07                	jb     c001e723 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001e71c:	01 f6                	add    esi,esi
c001e71e:	11 ff                	adc    edi,edi
c001e720:	41                   	inc    ecx
c001e721:	eb f3                	jmp    c001e716 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001e723:	89 fa                	mov    edx,edi
c001e725:	89 f0                	mov    eax,esi
c001e727:	bb 33 04 00 00       	mov    ebx,0x433
c001e72c:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001e732:	29 cb                	sub    ebx,ecx
c001e734:	89 d9                	mov    ecx,ebx
c001e736:	5b                   	pop    ebx
c001e737:	c1 e1 14             	shl    ecx,0x14
c001e73a:	5e                   	pop    esi
c001e73b:	09 ca                	or     edx,ecx
c001e73d:	5f                   	pop    edi
c001e73e:	c3                   	ret    

c001e73f <Vm::fpuLongToFloat(long long)>:
c001e73f:	56                   	push   esi
c001e740:	31 c0                	xor    eax,eax
c001e742:	53                   	push   ebx
c001e743:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e747:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e74b:	39 c8                	cmp    eax,ecx
c001e74d:	19 d8                	sbb    eax,ebx
c001e74f:	7d 04                	jge    c001e755 <Vm::fpuLongToFloat(long long)+0x16>
c001e751:	31 f6                	xor    esi,esi
c001e753:	eb 0c                	jmp    c001e761 <Vm::fpuLongToFloat(long long)+0x22>
c001e755:	f7 d9                	neg    ecx
c001e757:	be 01 00 00 00       	mov    esi,0x1
c001e75c:	83 d3 00             	adc    ebx,0x0
c001e75f:	f7 db                	neg    ebx
c001e761:	31 c0                	xor    eax,eax
c001e763:	0f ba e3 14          	bt     ebx,0x14
c001e767:	72 07                	jb     c001e770 <Vm::fpuLongToFloat(long long)+0x31>
c001e769:	01 c9                	add    ecx,ecx
c001e76b:	11 db                	adc    ebx,ebx
c001e76d:	40                   	inc    eax
c001e76e:	eb f3                	jmp    c001e763 <Vm::fpuLongToFloat(long long)+0x24>
c001e770:	ba 33 04 00 00       	mov    edx,0x433
c001e775:	29 c2                	sub    edx,eax
c001e777:	89 c8                	mov    eax,ecx
c001e779:	c1 e2 14             	shl    edx,0x14
c001e77c:	89 d9                	mov    ecx,ebx
c001e77e:	89 f3                	mov    ebx,esi
c001e780:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001e786:	09 ca                	or     edx,ecx
c001e788:	84 db                	test   bl,bl
c001e78a:	74 06                	je     c001e792 <Vm::fpuLongToFloat(long long)+0x53>
c001e78c:	81 ca 00 00 00 80    	or     edx,0x80000000
c001e792:	5b                   	pop    ebx
c001e793:	5e                   	pop    esi
c001e794:	c3                   	ret    

c001e795 <Vm::fpuGet0()>:
c001e795:	31 c0                	xor    eax,eax
c001e797:	31 d2                	xor    edx,edx
c001e799:	c3                   	ret    

c001e79a <Vm::fpuGet1()>:
c001e79a:	b8 01 00 00 00       	mov    eax,0x1
c001e79f:	31 d2                	xor    edx,edx
c001e7a1:	c3                   	ret    

c001e7a2 <Vm::fpuGetPi()>:
c001e7a2:	b8 03 00 00 00       	mov    eax,0x3
c001e7a7:	31 d2                	xor    edx,edx
c001e7a9:	c3                   	ret    

c001e7aa <Vm::fpuGetLog2E()>:
c001e7aa:	83 ec 18             	sub    esp,0x18
c001e7ad:	68 78 ad 02 c0       	push   0xc002ad78
c001e7b2:	e8 dc b0 ff ff       	call   c0019893 <Krnl::panic(char const*)>
c001e7b7:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001e7bc:	31 d2                	xor    edx,edx
c001e7be:	83 c4 1c             	add    esp,0x1c
c001e7c1:	c3                   	ret    

c001e7c2 <Vm::fpuGetLogE2()>:
c001e7c2:	83 ec 18             	sub    esp,0x18
c001e7c5:	68 84 ad 02 c0       	push   0xc002ad84
c001e7ca:	e8 c4 b0 ff ff       	call   c0019893 <Krnl::panic(char const*)>
c001e7cf:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001e7d4:	31 d2                	xor    edx,edx
c001e7d6:	83 c4 1c             	add    esp,0x1c
c001e7d9:	c3                   	ret    

c001e7da <Vm::fpuGetLog210()>:
c001e7da:	83 ec 18             	sub    esp,0x18
c001e7dd:	68 90 ad 02 c0       	push   0xc002ad90
c001e7e2:	e8 ac b0 ff ff       	call   c0019893 <Krnl::panic(char const*)>
c001e7e7:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001e7ec:	31 d2                	xor    edx,edx
c001e7ee:	83 c4 1c             	add    esp,0x1c
c001e7f1:	c3                   	ret    

c001e7f2 <Vm::fpuGetLog102()>:
c001e7f2:	83 ec 18             	sub    esp,0x18
c001e7f5:	68 9d ad 02 c0       	push   0xc002ad9d
c001e7fa:	e8 94 b0 ff ff       	call   c0019893 <Krnl::panic(char const*)>
c001e7ff:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001e804:	31 d2                	xor    edx,edx
c001e806:	83 c4 1c             	add    esp,0x1c
c001e809:	c3                   	ret    

c001e80a <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001e80a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e80e:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001e812:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e816:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001e81a:	0f 92 c0             	setb   al
c001e81d:	c3                   	ret    

c001e81e <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001e81e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e822:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e826:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001e82a:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001e82e:	09 c2                	or     edx,eax
c001e830:	0f 94 c0             	sete   al
c001e833:	c3                   	ret    

c001e834 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001e834:	57                   	push   edi
c001e835:	56                   	push   esi
c001e836:	53                   	push   ebx
c001e837:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e83b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e83f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001e843:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001e847:	57                   	push   edi
c001e848:	56                   	push   esi
c001e849:	53                   	push   ebx
c001e84a:	51                   	push   ecx
c001e84b:	e8 ce ff ff ff       	call   c001e81e <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001e850:	83 c4 10             	add    esp,0x10
c001e853:	88 c2                	mov    dl,al
c001e855:	31 c0                	xor    eax,eax
c001e857:	84 d2                	test   dl,dl
c001e859:	75 0c                	jne    c001e867 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001e85b:	57                   	push   edi
c001e85c:	56                   	push   esi
c001e85d:	53                   	push   ebx
c001e85e:	51                   	push   ecx
c001e85f:	e8 a6 ff ff ff       	call   c001e80a <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001e864:	83 c4 10             	add    esp,0x10
c001e867:	83 e0 01             	and    eax,0x1
c001e86a:	5b                   	pop    ebx
c001e86b:	88 c1                	mov    cl,al
c001e86d:	83 e2 01             	and    edx,0x1
c001e870:	a0 a1 df 02 c0       	mov    al,ds:0xc002dfa1
c001e875:	c1 e2 06             	shl    edx,0x6
c001e878:	83 e0 ba             	and    eax,0xffffffba
c001e87b:	5e                   	pop    esi
c001e87c:	09 c8                	or     eax,ecx
c001e87e:	5f                   	pop    edi
c001e87f:	09 d0                	or     eax,edx
c001e881:	a2 a1 df 02 c0       	mov    ds:0xc002dfa1,al
c001e886:	c3                   	ret    

c001e887 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001e887:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e88b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e88f:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001e893:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001e897:	c3                   	ret    

c001e898 <Vm::fpuAbs(unsigned long long)>:
c001e898:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e89c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e8a0:	c3                   	ret    

c001e8a1 <Vm::fpuChs(unsigned long long)>:
c001e8a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e8a5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e8a9:	f7 d8                	neg    eax
c001e8ab:	83 d2 00             	adc    edx,0x0
c001e8ae:	f7 da                	neg    edx
c001e8b0:	c3                   	ret    

c001e8b1 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001e8b1:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001e8b5:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001e8ba:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001e8be:	eb c7                	jmp    c001e887 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001e8c0 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001e8c0:	53                   	push   ebx
c001e8c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e8c5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e8c9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e8cd:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e8d1:	0f af ca             	imul   ecx,edx
c001e8d4:	0f af d8             	imul   ebx,eax
c001e8d7:	f7 e2                	mul    edx
c001e8d9:	01 d9                	add    ecx,ebx
c001e8db:	5b                   	pop    ebx
c001e8dc:	01 ca                	add    edx,ecx
c001e8de:	c3                   	ret    

c001e8df <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001e8df:	83 ec 0c             	sub    esp,0xc
c001e8e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e8e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e8ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e8ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e8f2:	e8 35 6b 00 00       	call   c002542c <__udivdi3>
c001e8f7:	83 c4 1c             	add    esp,0x1c
c001e8fa:	c3                   	ret    

c001e8fb <Vm::fpuSquare(unsigned long long)>:
c001e8fb:	50                   	push   eax
c001e8fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e900:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e904:	52                   	push   edx
c001e905:	50                   	push   eax
c001e906:	52                   	push   edx
c001e907:	50                   	push   eax
c001e908:	e8 b3 ff ff ff       	call   c001e8c0 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001e90d:	83 c4 14             	add    esp,0x14
c001e910:	c3                   	ret    

c001e911 <Vm::fpuGetReg(int)>:
c001e911:	83 ec 0c             	sub    esp,0xc
c001e914:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001e919:	76 10                	jbe    c001e92b <Vm::fpuGetReg(int)+0x1a>
c001e91b:	83 ec 0c             	sub    esp,0xc
c001e91e:	68 aa ad 02 c0       	push   0xc002adaa
c001e923:	e8 6b af ff ff       	call   c0019893 <Krnl::panic(char const*)>
c001e928:	83 c4 10             	add    esp,0x10
c001e92b:	a0 a1 df 02 c0       	mov    al,ds:0xc002dfa1
c001e930:	b9 08 00 00 00       	mov    ecx,0x8
c001e935:	c0 e8 03             	shr    al,0x3
c001e938:	83 e0 07             	and    eax,0x7
c001e93b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e93f:	99                   	cdq    
c001e940:	f7 f9                	idiv   ecx
c001e942:	8b 04 d5 a4 df 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd205c]
c001e949:	8b 14 d5 a8 df 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd2058]
c001e950:	83 c4 0c             	add    esp,0xc
c001e953:	c3                   	ret    

c001e954 <Vm::fpuSetReg(int, unsigned long long)>:
c001e954:	57                   	push   edi
c001e955:	56                   	push   esi
c001e956:	52                   	push   edx
c001e957:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001e95b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001e95f:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001e964:	76 10                	jbe    c001e976 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001e966:	83 ec 0c             	sub    esp,0xc
c001e969:	68 bd ad 02 c0       	push   0xc002adbd
c001e96e:	e8 20 af ff ff       	call   c0019893 <Krnl::panic(char const*)>
c001e973:	83 c4 10             	add    esp,0x10
c001e976:	a0 a1 df 02 c0       	mov    al,ds:0xc002dfa1
c001e97b:	b9 08 00 00 00       	mov    ecx,0x8
c001e980:	c0 e8 03             	shr    al,0x3
c001e983:	83 e0 07             	and    eax,0x7
c001e986:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e98a:	99                   	cdq    
c001e98b:	f7 f9                	idiv   ecx
c001e98d:	89 34 d5 a4 df 02 c0 	mov    DWORD PTR [edx*8-0x3ffd205c],esi
c001e994:	89 3c d5 a8 df 02 c0 	mov    DWORD PTR [edx*8-0x3ffd2058],edi
c001e99b:	58                   	pop    eax
c001e99c:	5e                   	pop    esi
c001e99d:	5f                   	pop    edi
c001e99e:	c3                   	ret    

c001e99f <Vm::fpuPush(unsigned long long)>:
c001e99f:	a0 a1 df 02 c0       	mov    al,ds:0xc002dfa1
c001e9a4:	c0 e8 03             	shr    al,0x3
c001e9a7:	83 e0 07             	and    eax,0x7
c001e9aa:	83 c0 07             	add    eax,0x7
c001e9ad:	88 c2                	mov    dl,al
c001e9af:	83 e0 07             	and    eax,0x7
c001e9b2:	83 e2 07             	and    edx,0x7
c001e9b5:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001e9bc:	8a 15 a1 df 02 c0    	mov    dl,BYTE PTR ds:0xc002dfa1
c001e9c2:	83 e2 c7             	and    edx,0xffffffc7
c001e9c5:	09 ca                	or     edx,ecx
c001e9c7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e9cb:	88 15 a1 df 02 c0    	mov    BYTE PTR ds:0xc002dfa1,dl
c001e9d1:	89 0c c5 a8 df 02 c0 	mov    DWORD PTR [eax*8-0x3ffd2058],ecx
c001e9d8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e9dc:	89 14 c5 a4 df 02 c0 	mov    DWORD PTR [eax*8-0x3ffd205c],edx
c001e9e3:	a1 e4 df 02 c0       	mov    eax,ds:0xc002dfe4
c001e9e8:	83 f8 08             	cmp    eax,0x8
c001e9eb:	75 08                	jne    c001e9f5 <Vm::fpuPush(unsigned long long)+0x56>
c001e9ed:	80 0d a0 df 02 c0 40 	or     BYTE PTR ds:0xc002dfa0,0x40
c001e9f4:	c3                   	ret    
c001e9f5:	40                   	inc    eax
c001e9f6:	a3 e4 df 02 c0       	mov    ds:0xc002dfe4,eax
c001e9fb:	c3                   	ret    

c001e9fc <Vm::fpuPop()>:
c001e9fc:	8a 0d a1 df 02 c0    	mov    cl,BYTE PTR ds:0xc002dfa1
c001ea02:	53                   	push   ebx
c001ea03:	c0 e9 03             	shr    cl,0x3
c001ea06:	8a 1d a1 df 02 c0    	mov    bl,BYTE PTR ds:0xc002dfa1
c001ea0c:	83 e1 07             	and    ecx,0x7
c001ea0f:	83 e3 c7             	and    ebx,0xffffffc7
c001ea12:	8b 04 cd a4 df 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd205c]
c001ea19:	8b 14 cd a8 df 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd2058]
c001ea20:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001ea27:	83 e1 38             	and    ecx,0x38
c001ea2a:	09 d9                	or     ecx,ebx
c001ea2c:	88 0d a1 df 02 c0    	mov    BYTE PTR ds:0xc002dfa1,cl
c001ea32:	8b 0d e4 df 02 c0    	mov    ecx,DWORD PTR ds:0xc002dfe4
c001ea38:	85 c9                	test   ecx,ecx
c001ea3a:	74 09                	je     c001ea45 <Vm::fpuPop()+0x49>
c001ea3c:	49                   	dec    ecx
c001ea3d:	89 0d e4 df 02 c0    	mov    DWORD PTR ds:0xc002dfe4,ecx
c001ea43:	eb 07                	jmp    c001ea4c <Vm::fpuPop()+0x50>
c001ea45:	80 0d a0 df 02 c0 40 	or     BYTE PTR ds:0xc002dfa0,0x40
c001ea4c:	5b                   	pop    ebx
c001ea4d:	c3                   	ret    

c001ea4e <Vm::x87Handler(regs*)>:
c001ea4e:	55                   	push   ebp
c001ea4f:	57                   	push   edi
c001ea50:	56                   	push   esi
c001ea51:	53                   	push   ebx
c001ea52:	83 ec 1c             	sub    esp,0x1c
c001ea55:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ea59:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001ea5e:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001ea61:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001ea69:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001ea6d:	50                   	push   eax
c001ea6e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001ea72:	50                   	push   eax
c001ea73:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ea77:	50                   	push   eax
c001ea78:	53                   	push   ebx
c001ea79:	e8 46 a6 ff ff       	call   c00190c4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001ea7e:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001ea81:	83 c4 10             	add    esp,0x10
c001ea84:	89 c6                	mov    esi,eax
c001ea86:	80 fa d9             	cmp    dl,0xd9
c001ea89:	0f 85 52 01 00 00    	jne    c001ebe1 <Vm::x87Handler(regs*)+0x193>
c001ea8f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ea93:	8d 50 20             	lea    edx,[eax+0x20]
c001ea96:	80 fa 0e             	cmp    dl,0xe
c001ea99:	0f 87 86 00 00 00    	ja     c001eb25 <Vm::x87Handler(regs*)+0xd7>
c001ea9f:	0f b6 d2             	movzx  edx,dl
c001eaa2:	ff 24 95 d0 ad 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd5230]
c001eaa9:	e8 e7 fc ff ff       	call   c001e795 <Vm::fpuGet0()>
c001eaae:	eb 05                	jmp    c001eab5 <Vm::x87Handler(regs*)+0x67>
c001eab0:	e8 e5 fc ff ff       	call   c001e79a <Vm::fpuGet1()>
c001eab5:	57                   	push   edi
c001eab6:	57                   	push   edi
c001eab7:	52                   	push   edx
c001eab8:	50                   	push   eax
c001eab9:	e8 e1 fe ff ff       	call   c001e99f <Vm::fpuPush(unsigned long long)>
c001eabe:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001eac2:	83 c4 10             	add    esp,0x10
c001eac5:	b0 01                	mov    al,0x1
c001eac7:	e9 e3 09 00 00       	jmp    c001f4af <Vm::x87Handler(regs*)+0xa61>
c001eacc:	83 ec 0c             	sub    esp,0xc
c001eacf:	6a 00                	push   0x0
c001ead1:	e8 3b fe ff ff       	call   c001e911 <Vm::fpuGetReg(int)>
c001ead6:	59                   	pop    ecx
c001ead7:	5e                   	pop    esi
c001ead8:	52                   	push   edx
c001ead9:	50                   	push   eax
c001eada:	e8 c2 fd ff ff       	call   c001e8a1 <Vm::fpuChs(unsigned long long)>
c001eadf:	eb 13                	jmp    c001eaf4 <Vm::x87Handler(regs*)+0xa6>
c001eae1:	83 ec 0c             	sub    esp,0xc
c001eae4:	6a 00                	push   0x0
c001eae6:	e8 26 fe ff ff       	call   c001e911 <Vm::fpuGetReg(int)>
c001eaeb:	5f                   	pop    edi
c001eaec:	5d                   	pop    ebp
c001eaed:	52                   	push   edx
c001eaee:	50                   	push   eax
c001eaef:	e8 a4 fd ff ff       	call   c001e898 <Vm::fpuAbs(unsigned long long)>
c001eaf4:	83 c4 0c             	add    esp,0xc
c001eaf7:	52                   	push   edx
c001eaf8:	50                   	push   eax
c001eaf9:	6a 00                	push   0x0
c001eafb:	e8 54 fe ff ff       	call   c001e954 <Vm::fpuSetReg(int, unsigned long long)>
c001eb00:	eb bc                	jmp    c001eabe <Vm::x87Handler(regs*)+0x70>
c001eb02:	e8 d3 fc ff ff       	call   c001e7da <Vm::fpuGetLog210()>
c001eb07:	eb ac                	jmp    c001eab5 <Vm::x87Handler(regs*)+0x67>
c001eb09:	e8 9c fc ff ff       	call   c001e7aa <Vm::fpuGetLog2E()>
c001eb0e:	eb a5                	jmp    c001eab5 <Vm::x87Handler(regs*)+0x67>
c001eb10:	e8 8d fc ff ff       	call   c001e7a2 <Vm::fpuGetPi()>
c001eb15:	eb 9e                	jmp    c001eab5 <Vm::x87Handler(regs*)+0x67>
c001eb17:	e8 d6 fc ff ff       	call   c001e7f2 <Vm::fpuGetLog102()>
c001eb1c:	eb 97                	jmp    c001eab5 <Vm::x87Handler(regs*)+0x67>
c001eb1e:	e8 9f fc ff ff       	call   c001e7c2 <Vm::fpuGetLogE2()>
c001eb23:	eb 90                	jmp    c001eab5 <Vm::x87Handler(regs*)+0x67>
c001eb25:	8d 50 40             	lea    edx,[eax+0x40]
c001eb28:	80 fa 07             	cmp    dl,0x7
c001eb2b:	77 15                	ja     c001eb42 <Vm::x87Handler(regs*)+0xf4>
c001eb2d:	83 ec 0c             	sub    esp,0xc
c001eb30:	2d c0 00 00 00       	sub    eax,0xc0
c001eb35:	50                   	push   eax
c001eb36:	e8 d6 fd ff ff       	call   c001e911 <Vm::fpuGetReg(int)>
c001eb3b:	59                   	pop    ecx
c001eb3c:	5e                   	pop    esi
c001eb3d:	e9 75 ff ff ff       	jmp    c001eab7 <Vm::x87Handler(regs*)+0x69>
c001eb42:	8d 50 38             	lea    edx,[eax+0x38]
c001eb45:	80 fa 07             	cmp    dl,0x7
c001eb48:	77 3c                	ja     c001eb86 <Vm::x87Handler(regs*)+0x138>
c001eb4a:	83 ec 0c             	sub    esp,0xc
c001eb4d:	2d c8 00 00 00       	sub    eax,0xc8
c001eb52:	50                   	push   eax
c001eb53:	e8 b9 fd ff ff       	call   c001e911 <Vm::fpuGetReg(int)>
c001eb58:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001eb5f:	89 c6                	mov    esi,eax
c001eb61:	89 d7                	mov    edi,edx
c001eb63:	e8 a9 fd ff ff       	call   c001e911 <Vm::fpuGetReg(int)>
c001eb68:	83 c4 0c             	add    esp,0xc
c001eb6b:	52                   	push   edx
c001eb6c:	50                   	push   eax
c001eb6d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001eb71:	2d c8 00 00 00       	sub    eax,0xc8
c001eb76:	50                   	push   eax
c001eb77:	e8 d8 fd ff ff       	call   c001e954 <Vm::fpuSetReg(int, unsigned long long)>
c001eb7c:	83 c4 0c             	add    esp,0xc
c001eb7f:	57                   	push   edi
c001eb80:	56                   	push   esi
c001eb81:	e9 73 ff ff ff       	jmp    c001eaf9 <Vm::x87Handler(regs*)+0xab>
c001eb86:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001eb8a:	84 d2                	test   dl,dl
c001eb8c:	75 0f                	jne    c001eb9d <Vm::x87Handler(regs*)+0x14f>
c001eb8e:	83 ec 0c             	sub    esp,0xc
c001eb91:	ff 36                	push   DWORD PTR [esi]
c001eb93:	e8 c8 fa ff ff       	call   c001e660 <Vm::fpu32ToInternal(unsigned int)>
c001eb98:	e9 bf 00 00 00       	jmp    c001ec5c <Vm::x87Handler(regs*)+0x20e>
c001eb9d:	80 fa 03             	cmp    dl,0x3
c001eba0:	75 13                	jne    c001ebb5 <Vm::x87Handler(regs*)+0x167>
c001eba2:	e8 55 fe ff ff       	call   c001e9fc <Vm::fpuPop()>
c001eba7:	55                   	push   ebp
c001eba8:	55                   	push   ebp
c001eba9:	52                   	push   edx
c001ebaa:	50                   	push   eax
c001ebab:	e8 4c fa ff ff       	call   c001e5fc <Vm::fpuInternalTo32(unsigned long long)>
c001ebb0:	e9 88 00 00 00       	jmp    c001ec3d <Vm::x87Handler(regs*)+0x1ef>
c001ebb5:	80 fa 05             	cmp    dl,0x5
c001ebb8:	75 0e                	jne    c001ebc8 <Vm::x87Handler(regs*)+0x17a>
c001ebba:	66 8b 06             	mov    ax,WORD PTR [esi]
c001ebbd:	66 a3 a2 df 02 c0    	mov    ds:0xc002dfa2,ax
c001ebc3:	e9 df 00 00 00       	jmp    c001eca7 <Vm::x87Handler(regs*)+0x259>
c001ebc8:	31 c0                	xor    eax,eax
c001ebca:	80 fa 07             	cmp    dl,0x7
c001ebcd:	0f 85 dc 08 00 00    	jne    c001f4af <Vm::x87Handler(regs*)+0xa61>
c001ebd3:	66 a1 a2 df 02 c0    	mov    ax,ds:0xc002dfa2
c001ebd9:	66 89 06             	mov    WORD PTR [esi],ax
c001ebdc:	e9 c6 00 00 00       	jmp    c001eca7 <Vm::x87Handler(regs*)+0x259>
c001ebe1:	80 fa d8             	cmp    dl,0xd8
c001ebe4:	0f 84 c9 00 00 00    	je     c001ecb3 <Vm::x87Handler(regs*)+0x265>
c001ebea:	80 fa dc             	cmp    dl,0xdc
c001ebed:	0f 84 0d 02 00 00    	je     c001ee00 <Vm::x87Handler(regs*)+0x3b2>
c001ebf3:	80 fa de             	cmp    dl,0xde
c001ebf6:	0f 84 cd 02 00 00    	je     c001eec9 <Vm::x87Handler(regs*)+0x47b>
c001ebfc:	80 fa dd             	cmp    dl,0xdd
c001ebff:	0f 84 5f 04 00 00    	je     c001f064 <Vm::x87Handler(regs*)+0x616>
c001ec05:	80 fa da             	cmp    dl,0xda
c001ec08:	0f 84 24 05 00 00    	je     c001f132 <Vm::x87Handler(regs*)+0x6e4>
c001ec0e:	80 fa df             	cmp    dl,0xdf
c001ec11:	0f 84 68 05 00 00    	je     c001f17f <Vm::x87Handler(regs*)+0x731>
c001ec17:	31 c0                	xor    eax,eax
c001ec19:	80 fa db             	cmp    dl,0xdb
c001ec1c:	0f 85 8d 08 00 00    	jne    c001f4af <Vm::x87Handler(regs*)+0xa61>
c001ec22:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001ec26:	80 fa 03             	cmp    dl,0x3
c001ec29:	0f 85 70 06 00 00    	jne    c001f29f <Vm::x87Handler(regs*)+0x851>
c001ec2f:	e8 c8 fd ff ff       	call   c001e9fc <Vm::fpuPop()>
c001ec34:	55                   	push   ebp
c001ec35:	55                   	push   ebp
c001ec36:	52                   	push   edx
c001ec37:	50                   	push   eax
c001ec38:	e8 71 fa ff ff       	call   c001e6ae <Vm::fpuFloatToLong(unsigned long long)>
c001ec3d:	83 c4 10             	add    esp,0x10
c001ec40:	89 06                	mov    DWORD PTR [esi],eax
c001ec42:	eb 63                	jmp    c001eca7 <Vm::x87Handler(regs*)+0x259>
c001ec44:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001ec48:	84 d2                	test   dl,dl
c001ec4a:	0f 85 e6 05 00 00    	jne    c001f236 <Vm::x87Handler(regs*)+0x7e8>
c001ec50:	57                   	push   edi
c001ec51:	57                   	push   edi
c001ec52:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ec55:	ff 36                	push   DWORD PTR [esi]
c001ec57:	e8 49 fa ff ff       	call   c001e6a5 <Vm::fpu64ToInternal(unsigned long long)>
c001ec5c:	5e                   	pop    esi
c001ec5d:	5f                   	pop    edi
c001ec5e:	52                   	push   edx
c001ec5f:	50                   	push   eax
c001ec60:	e8 3a fd ff ff       	call   c001e99f <Vm::fpuPush(unsigned long long)>
c001ec65:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ec69:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001ec6c:	e9 51 fe ff ff       	jmp    c001eac2 <Vm::x87Handler(regs*)+0x74>
c001ec71:	80 fa 03             	cmp    dl,0x3
c001ec74:	0f 85 d7 06 00 00    	jne    c001f351 <Vm::x87Handler(regs*)+0x903>
c001ec7a:	57                   	push   edi
c001ec7b:	57                   	push   edi
c001ec7c:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ec7f:	ff 36                	push   DWORD PTR [esi]
c001ec81:	e8 1f fa ff ff       	call   c001e6a5 <Vm::fpu64ToInternal(unsigned long long)>
c001ec86:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ec8d:	89 c6                	mov    esi,eax
c001ec8f:	89 d7                	mov    edi,edx
c001ec91:	e8 7b fc ff ff       	call   c001e911 <Vm::fpuGetReg(int)>
c001ec96:	57                   	push   edi
c001ec97:	56                   	push   esi
c001ec98:	52                   	push   edx
c001ec99:	50                   	push   eax
c001ec9a:	e8 95 fb ff ff       	call   c001e834 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001ec9f:	83 c4 20             	add    esp,0x20
c001eca2:	e8 55 fd ff ff       	call   c001e9fc <Vm::fpuPop()>
c001eca7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ecab:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001ecae:	e9 12 fe ff ff       	jmp    c001eac5 <Vm::x87Handler(regs*)+0x77>
c001ecb3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ecb7:	8d 50 40             	lea    edx,[eax+0x40]
c001ecba:	80 fa 07             	cmp    dl,0x7
c001ecbd:	77 29                	ja     c001ece8 <Vm::x87Handler(regs*)+0x29a>
c001ecbf:	83 ec 0c             	sub    esp,0xc
c001ecc2:	2d c0 00 00 00       	sub    eax,0xc0
c001ecc7:	50                   	push   eax
c001ecc8:	e8 44 fc ff ff       	call   c001e911 <Vm::fpuGetReg(int)>
c001eccd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ecd4:	89 c6                	mov    esi,eax
c001ecd6:	89 d7                	mov    edi,edx
c001ecd8:	e8 34 fc ff ff       	call   c001e911 <Vm::fpuGetReg(int)>
c001ecdd:	57                   	push   edi
c001ecde:	56                   	push   esi
c001ecdf:	52                   	push   edx
c001ece0:	50                   	push   eax
c001ece1:	e8 a1 fb ff ff       	call   c001e887 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ece6:	eb 2f                	jmp    c001ed17 <Vm::x87Handler(regs*)+0x2c9>
c001ece8:	8d 50 38             	lea    edx,[eax+0x38]
c001eceb:	80 fa 07             	cmp    dl,0x7
c001ecee:	77 2f                	ja     c001ed1f <Vm::x87Handler(regs*)+0x2d1>
c001ecf0:	83 ec 0c             	sub    esp,0xc
c001ecf3:	2d c8 00 00 00       	sub    eax,0xc8
c001ecf8:	50                   	push   eax
c001ecf9:	e8 13 fc ff ff       	call   c001e911 <Vm::fpuGetReg(int)>
c001ecfe:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ed05:	89 c6                	mov    esi,eax
c001ed07:	89 d7                	mov    edi,edx
c001ed09:	e8 03 fc ff ff       	call   c001e911 <Vm::fpuGetReg(int)>
c001ed0e:	57                   	push   edi
c001ed0f:	56                   	push   esi
c001ed10:	52                   	push   edx
c001ed11:	50                   	push   eax
c001ed12:	e8 a9 fb ff ff       	call   c001e8c0 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ed17:	83 c4 1c             	add    esp,0x1c
c001ed1a:	e9 d8 fd ff ff       	jmp    c001eaf7 <Vm::x87Handler(regs*)+0xa9>
c001ed1f:	8d 50 30             	lea    edx,[eax+0x30]
c001ed22:	80 fa 07             	cmp    dl,0x7
c001ed25:	77 0d                	ja     c001ed34 <Vm::x87Handler(regs*)+0x2e6>
c001ed27:	83 ec 0c             	sub    esp,0xc
c001ed2a:	2d d0 00 00 00       	sub    eax,0xd0
c001ed2f:	e9 99 03 00 00       	jmp    c001f0cd <Vm::x87Handler(regs*)+0x67f>
c001ed34:	8d 50 28             	lea    edx,[eax+0x28]
c001ed37:	80 fa 07             	cmp    dl,0x7
c001ed3a:	77 0d                	ja     c001ed49 <Vm::x87Handler(regs*)+0x2fb>
c001ed3c:	83 ec 0c             	sub    esp,0xc
c001ed3f:	2d d8 00 00 00       	sub    eax,0xd8
c001ed44:	e9 c0 03 00 00       	jmp    c001f109 <Vm::x87Handler(regs*)+0x6bb>
c001ed49:	8d 50 20             	lea    edx,[eax+0x20]
c001ed4c:	80 fa 07             	cmp    dl,0x7
c001ed4f:	77 1b                	ja     c001ed6c <Vm::x87Handler(regs*)+0x31e>
c001ed51:	83 ec 0c             	sub    esp,0xc
c001ed54:	2d e0 00 00 00       	sub    eax,0xe0
c001ed59:	50                   	push   eax
c001ed5a:	e8 b2 fb ff ff       	call   c001e911 <Vm::fpuGetReg(int)>
c001ed5f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ed66:	89 c6                	mov    esi,eax
c001ed68:	89 d7                	mov    edi,edx
c001ed6a:	eb 22                	jmp    c001ed8e <Vm::x87Handler(regs*)+0x340>
c001ed6c:	8d 50 18             	lea    edx,[eax+0x18]
c001ed6f:	80 fa 07             	cmp    dl,0x7
c001ed72:	77 2d                	ja     c001eda1 <Vm::x87Handler(regs*)+0x353>
c001ed74:	83 ec 0c             	sub    esp,0xc
c001ed77:	6a 00                	push   0x0
c001ed79:	e8 93 fb ff ff       	call   c001e911 <Vm::fpuGetReg(int)>
c001ed7e:	89 c6                	mov    esi,eax
c001ed80:	89 d7                	mov    edi,edx
c001ed82:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ed86:	2d e8 00 00 00       	sub    eax,0xe8
c001ed8b:	89 04 24             	mov    DWORD PTR [esp],eax
c001ed8e:	e8 7e fb ff ff       	call   c001e911 <Vm::fpuGetReg(int)>
c001ed93:	57                   	push   edi
c001ed94:	56                   	push   esi
c001ed95:	52                   	push   edx
c001ed96:	50                   	push   eax
c001ed97:	e8 15 fb ff ff       	call   c001e8b1 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ed9c:	e9 76 ff ff ff       	jmp    c001ed17 <Vm::x87Handler(regs*)+0x2c9>
c001eda1:	8d 50 10             	lea    edx,[eax+0x10]
c001eda4:	80 fa 07             	cmp    dl,0x7
c001eda7:	77 1b                	ja     c001edc4 <Vm::x87Handler(regs*)+0x376>
c001eda9:	83 ec 0c             	sub    esp,0xc
c001edac:	2d f0 00 00 00       	sub    eax,0xf0
c001edb1:	50                   	push   eax
c001edb2:	e8 5a fb ff ff       	call   c001e911 <Vm::fpuGetReg(int)>
c001edb7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001edbe:	89 c6                	mov    esi,eax
c001edc0:	89 d7                	mov    edi,edx
c001edc2:	eb 22                	jmp    c001ede6 <Vm::x87Handler(regs*)+0x398>
c001edc4:	3c f7                	cmp    al,0xf7
c001edc6:	0f 86 d1 03 00 00    	jbe    c001f19d <Vm::x87Handler(regs*)+0x74f>
c001edcc:	83 ec 0c             	sub    esp,0xc
c001edcf:	6a 00                	push   0x0
c001edd1:	e8 3b fb ff ff       	call   c001e911 <Vm::fpuGetReg(int)>
c001edd6:	89 c6                	mov    esi,eax
c001edd8:	89 d7                	mov    edi,edx
c001edda:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001edde:	2d f8 00 00 00       	sub    eax,0xf8
c001ede3:	89 04 24             	mov    DWORD PTR [esp],eax
c001ede6:	e8 26 fb ff ff       	call   c001e911 <Vm::fpuGetReg(int)>
c001edeb:	57                   	push   edi
c001edec:	56                   	push   esi
c001eded:	52                   	push   edx
c001edee:	50                   	push   eax
c001edef:	e8 eb fa ff ff       	call   c001e8df <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001edf4:	83 c4 1c             	add    esp,0x1c
c001edf7:	52                   	push   edx
c001edf8:	50                   	push   eax
c001edf9:	6a 00                	push   0x0
c001edfb:	e9 51 02 00 00       	jmp    c001f051 <Vm::x87Handler(regs*)+0x603>
c001ee00:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ee04:	8d 50 40             	lea    edx,[eax+0x40]
c001ee07:	80 fa 07             	cmp    dl,0x7
c001ee0a:	77 37                	ja     c001ee43 <Vm::x87Handler(regs*)+0x3f5>
c001ee0c:	83 ec 0c             	sub    esp,0xc
c001ee0f:	2d c0 00 00 00       	sub    eax,0xc0
c001ee14:	50                   	push   eax
c001ee15:	e8 f7 fa ff ff       	call   c001e911 <Vm::fpuGetReg(int)>
c001ee1a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ee21:	89 c6                	mov    esi,eax
c001ee23:	89 d7                	mov    edi,edx
c001ee25:	e8 e7 fa ff ff       	call   c001e911 <Vm::fpuGetReg(int)>
c001ee2a:	57                   	push   edi
c001ee2b:	56                   	push   esi
c001ee2c:	52                   	push   edx
c001ee2d:	50                   	push   eax
c001ee2e:	e8 54 fa ff ff       	call   c001e887 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ee33:	83 c4 1c             	add    esp,0x1c
c001ee36:	52                   	push   edx
c001ee37:	50                   	push   eax
c001ee38:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ee3c:	2d c0 00 00 00       	sub    eax,0xc0
c001ee41:	eb 3d                	jmp    c001ee80 <Vm::x87Handler(regs*)+0x432>
c001ee43:	8d 50 38             	lea    edx,[eax+0x38]
c001ee46:	80 fa 07             	cmp    dl,0x7
c001ee49:	77 3b                	ja     c001ee86 <Vm::x87Handler(regs*)+0x438>
c001ee4b:	83 ec 0c             	sub    esp,0xc
c001ee4e:	2d c8 00 00 00       	sub    eax,0xc8
c001ee53:	50                   	push   eax
c001ee54:	e8 b8 fa ff ff       	call   c001e911 <Vm::fpuGetReg(int)>
c001ee59:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ee60:	89 c6                	mov    esi,eax
c001ee62:	89 d7                	mov    edi,edx
c001ee64:	e8 a8 fa ff ff       	call   c001e911 <Vm::fpuGetReg(int)>
c001ee69:	57                   	push   edi
c001ee6a:	56                   	push   esi
c001ee6b:	52                   	push   edx
c001ee6c:	50                   	push   eax
c001ee6d:	e8 4e fa ff ff       	call   c001e8c0 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ee72:	83 c4 1c             	add    esp,0x1c
c001ee75:	52                   	push   edx
c001ee76:	50                   	push   eax
c001ee77:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ee7b:	2d c8 00 00 00       	sub    eax,0xc8
c001ee80:	50                   	push   eax
c001ee81:	e9 75 fc ff ff       	jmp    c001eafb <Vm::x87Handler(regs*)+0xad>
c001ee86:	83 c0 18             	add    eax,0x18
c001ee89:	3c 07                	cmp    al,0x7
c001ee8b:	0f 87 3b 04 00 00    	ja     c001f2cc <Vm::x87Handler(regs*)+0x87e>
c001ee91:	83 ec 0c             	sub    esp,0xc
c001ee94:	6a 00                	push   0x0
c001ee96:	e8 76 fa ff ff       	call   c001e911 <Vm::fpuGetReg(int)>
c001ee9b:	89 c6                	mov    esi,eax
c001ee9d:	89 d7                	mov    edi,edx
c001ee9f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001eea3:	2d e8 00 00 00       	sub    eax,0xe8
c001eea8:	89 04 24             	mov    DWORD PTR [esp],eax
c001eeab:	e8 61 fa ff ff       	call   c001e911 <Vm::fpuGetReg(int)>
c001eeb0:	57                   	push   edi
c001eeb1:	56                   	push   esi
c001eeb2:	52                   	push   edx
c001eeb3:	50                   	push   eax
c001eeb4:	e8 f8 f9 ff ff       	call   c001e8b1 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001eeb9:	83 c4 1c             	add    esp,0x1c
c001eebc:	52                   	push   edx
c001eebd:	50                   	push   eax
c001eebe:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001eec2:	2d e8 00 00 00       	sub    eax,0xe8
c001eec7:	eb b7                	jmp    c001ee80 <Vm::x87Handler(regs*)+0x432>
c001eec9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001eecd:	8d 50 40             	lea    edx,[eax+0x40]
c001eed0:	80 fa 07             	cmp    dl,0x7
c001eed3:	77 3a                	ja     c001ef0f <Vm::x87Handler(regs*)+0x4c1>
c001eed5:	83 ec 0c             	sub    esp,0xc
c001eed8:	2d c0 00 00 00       	sub    eax,0xc0
c001eedd:	50                   	push   eax
c001eede:	e8 2e fa ff ff       	call   c001e911 <Vm::fpuGetReg(int)>
c001eee3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001eeea:	89 c6                	mov    esi,eax
c001eeec:	89 d7                	mov    edi,edx
c001eeee:	e8 1e fa ff ff       	call   c001e911 <Vm::fpuGetReg(int)>
c001eef3:	57                   	push   edi
c001eef4:	56                   	push   esi
c001eef5:	52                   	push   edx
c001eef6:	50                   	push   eax
c001eef7:	e8 8b f9 ff ff       	call   c001e887 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001eefc:	83 c4 1c             	add    esp,0x1c
c001eeff:	52                   	push   edx
c001ef00:	50                   	push   eax
c001ef01:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ef05:	2d c0 00 00 00       	sub    eax,0xc0
c001ef0a:	e9 9e 01 00 00       	jmp    c001f0ad <Vm::x87Handler(regs*)+0x65f>
c001ef0f:	8d 50 20             	lea    edx,[eax+0x20]
c001ef12:	80 fa 07             	cmp    dl,0x7
c001ef15:	77 3a                	ja     c001ef51 <Vm::x87Handler(regs*)+0x503>
c001ef17:	83 ec 0c             	sub    esp,0xc
c001ef1a:	2d e0 00 00 00       	sub    eax,0xe0
c001ef1f:	50                   	push   eax
c001ef20:	e8 ec f9 ff ff       	call   c001e911 <Vm::fpuGetReg(int)>
c001ef25:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ef2c:	89 c6                	mov    esi,eax
c001ef2e:	89 d7                	mov    edi,edx
c001ef30:	e8 dc f9 ff ff       	call   c001e911 <Vm::fpuGetReg(int)>
c001ef35:	57                   	push   edi
c001ef36:	56                   	push   esi
c001ef37:	52                   	push   edx
c001ef38:	50                   	push   eax
c001ef39:	e8 73 f9 ff ff       	call   c001e8b1 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ef3e:	83 c4 1c             	add    esp,0x1c
c001ef41:	52                   	push   edx
c001ef42:	50                   	push   eax
c001ef43:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ef47:	2d e0 00 00 00       	sub    eax,0xe0
c001ef4c:	e9 5c 01 00 00       	jmp    c001f0ad <Vm::x87Handler(regs*)+0x65f>
c001ef51:	8d 50 18             	lea    edx,[eax+0x18]
c001ef54:	80 fa 07             	cmp    dl,0x7
c001ef57:	77 3b                	ja     c001ef94 <Vm::x87Handler(regs*)+0x546>
c001ef59:	83 ec 0c             	sub    esp,0xc
c001ef5c:	6a 00                	push   0x0
c001ef5e:	e8 ae f9 ff ff       	call   c001e911 <Vm::fpuGetReg(int)>
c001ef63:	89 c6                	mov    esi,eax
c001ef65:	89 d7                	mov    edi,edx
c001ef67:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ef6b:	2d e8 00 00 00       	sub    eax,0xe8
c001ef70:	89 04 24             	mov    DWORD PTR [esp],eax
c001ef73:	e8 99 f9 ff ff       	call   c001e911 <Vm::fpuGetReg(int)>
c001ef78:	57                   	push   edi
c001ef79:	56                   	push   esi
c001ef7a:	52                   	push   edx
c001ef7b:	50                   	push   eax
c001ef7c:	e8 30 f9 ff ff       	call   c001e8b1 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ef81:	83 c4 1c             	add    esp,0x1c
c001ef84:	52                   	push   edx
c001ef85:	50                   	push   eax
c001ef86:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ef8a:	2d e8 00 00 00       	sub    eax,0xe8
c001ef8f:	e9 19 01 00 00       	jmp    c001f0ad <Vm::x87Handler(regs*)+0x65f>
c001ef94:	8d 50 38             	lea    edx,[eax+0x38]
c001ef97:	80 fa 07             	cmp    dl,0x7
c001ef9a:	77 37                	ja     c001efd3 <Vm::x87Handler(regs*)+0x585>
c001ef9c:	83 ec 0c             	sub    esp,0xc
c001ef9f:	2d c8 00 00 00       	sub    eax,0xc8
c001efa4:	50                   	push   eax
c001efa5:	e8 67 f9 ff ff       	call   c001e911 <Vm::fpuGetReg(int)>
c001efaa:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001efb1:	89 c6                	mov    esi,eax
c001efb3:	89 d7                	mov    edi,edx
c001efb5:	e8 57 f9 ff ff       	call   c001e911 <Vm::fpuGetReg(int)>
c001efba:	57                   	push   edi
c001efbb:	56                   	push   esi
c001efbc:	52                   	push   edx
c001efbd:	50                   	push   eax
c001efbe:	e8 fd f8 ff ff       	call   c001e8c0 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001efc3:	83 c4 1c             	add    esp,0x1c
c001efc6:	52                   	push   edx
c001efc7:	50                   	push   eax
c001efc8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001efcc:	2d c8 00 00 00       	sub    eax,0xc8
c001efd1:	eb 7d                	jmp    c001f050 <Vm::x87Handler(regs*)+0x602>
c001efd3:	3c f7                	cmp    al,0xf7
c001efd5:	76 38                	jbe    c001f00f <Vm::x87Handler(regs*)+0x5c1>
c001efd7:	83 ec 0c             	sub    esp,0xc
c001efda:	6a 00                	push   0x0
c001efdc:	e8 30 f9 ff ff       	call   c001e911 <Vm::fpuGetReg(int)>
c001efe1:	89 c6                	mov    esi,eax
c001efe3:	89 d7                	mov    edi,edx
c001efe5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001efe9:	2d f8 00 00 00       	sub    eax,0xf8
c001efee:	89 04 24             	mov    DWORD PTR [esp],eax
c001eff1:	e8 1b f9 ff ff       	call   c001e911 <Vm::fpuGetReg(int)>
c001eff6:	57                   	push   edi
c001eff7:	56                   	push   esi
c001eff8:	52                   	push   edx
c001eff9:	50                   	push   eax
c001effa:	e8 e0 f8 ff ff       	call   c001e8df <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001efff:	83 c4 1c             	add    esp,0x1c
c001f002:	52                   	push   edx
c001f003:	50                   	push   eax
c001f004:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f008:	2d f8 00 00 00       	sub    eax,0xf8
c001f00d:	eb 41                	jmp    c001f050 <Vm::x87Handler(regs*)+0x602>
c001f00f:	8d 50 10             	lea    edx,[eax+0x10]
c001f012:	80 fa 07             	cmp    dl,0x7
c001f015:	0f 87 5a 01 00 00    	ja     c001f175 <Vm::x87Handler(regs*)+0x727>
c001f01b:	83 ec 0c             	sub    esp,0xc
c001f01e:	2d f0 00 00 00       	sub    eax,0xf0
c001f023:	50                   	push   eax
c001f024:	e8 e8 f8 ff ff       	call   c001e911 <Vm::fpuGetReg(int)>
c001f029:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f030:	89 c6                	mov    esi,eax
c001f032:	89 d7                	mov    edi,edx
c001f034:	e8 d8 f8 ff ff       	call   c001e911 <Vm::fpuGetReg(int)>
c001f039:	57                   	push   edi
c001f03a:	56                   	push   esi
c001f03b:	52                   	push   edx
c001f03c:	50                   	push   eax
c001f03d:	e8 9d f8 ff ff       	call   c001e8df <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f042:	83 c4 1c             	add    esp,0x1c
c001f045:	52                   	push   edx
c001f046:	50                   	push   eax
c001f047:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f04b:	2d f0 00 00 00       	sub    eax,0xf0
c001f050:	50                   	push   eax
c001f051:	e8 fe f8 ff ff       	call   c001e954 <Vm::fpuSetReg(int, unsigned long long)>
c001f056:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f05a:	e8 9d f9 ff ff       	call   c001e9fc <Vm::fpuPop()>
c001f05f:	e9 5e fa ff ff       	jmp    c001eac2 <Vm::x87Handler(regs*)+0x74>
c001f064:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f068:	8d 50 30             	lea    edx,[eax+0x30]
c001f06b:	80 fa 07             	cmp    dl,0x7
c001f06e:	77 1d                	ja     c001f08d <Vm::x87Handler(regs*)+0x63f>
c001f070:	83 ec 0c             	sub    esp,0xc
c001f073:	6a 00                	push   0x0
c001f075:	e8 97 f8 ff ff       	call   c001e911 <Vm::fpuGetReg(int)>
c001f07a:	83 c4 0c             	add    esp,0xc
c001f07d:	52                   	push   edx
c001f07e:	50                   	push   eax
c001f07f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f083:	2d d0 00 00 00       	sub    eax,0xd0
c001f088:	e9 f3 fd ff ff       	jmp    c001ee80 <Vm::x87Handler(regs*)+0x432>
c001f08d:	8d 50 28             	lea    edx,[eax+0x28]
c001f090:	80 fa 07             	cmp    dl,0x7
c001f093:	77 28                	ja     c001f0bd <Vm::x87Handler(regs*)+0x66f>
c001f095:	83 ec 0c             	sub    esp,0xc
c001f098:	6a 00                	push   0x0
c001f09a:	e8 72 f8 ff ff       	call   c001e911 <Vm::fpuGetReg(int)>
c001f09f:	83 c4 0c             	add    esp,0xc
c001f0a2:	52                   	push   edx
c001f0a3:	50                   	push   eax
c001f0a4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f0a8:	2d d8 00 00 00       	sub    eax,0xd8
c001f0ad:	50                   	push   eax
c001f0ae:	e8 a1 f8 ff ff       	call   c001e954 <Vm::fpuSetReg(int, unsigned long long)>
c001f0b3:	e8 44 f9 ff ff       	call   c001e9fc <Vm::fpuPop()>
c001f0b8:	e9 01 fa ff ff       	jmp    c001eabe <Vm::x87Handler(regs*)+0x70>
c001f0bd:	8d 50 20             	lea    edx,[eax+0x20]
c001f0c0:	80 fa 07             	cmp    dl,0x7
c001f0c3:	77 30                	ja     c001f0f5 <Vm::x87Handler(regs*)+0x6a7>
c001f0c5:	83 ec 0c             	sub    esp,0xc
c001f0c8:	2d e0 00 00 00       	sub    eax,0xe0
c001f0cd:	50                   	push   eax
c001f0ce:	e8 3e f8 ff ff       	call   c001e911 <Vm::fpuGetReg(int)>
c001f0d3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f0da:	89 c6                	mov    esi,eax
c001f0dc:	89 d7                	mov    edi,edx
c001f0de:	e8 2e f8 ff ff       	call   c001e911 <Vm::fpuGetReg(int)>
c001f0e3:	57                   	push   edi
c001f0e4:	56                   	push   esi
c001f0e5:	52                   	push   edx
c001f0e6:	50                   	push   eax
c001f0e7:	e8 48 f7 ff ff       	call   c001e834 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f0ec:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f0f0:	e9 54 02 00 00       	jmp    c001f349 <Vm::x87Handler(regs*)+0x8fb>
c001f0f5:	8d 50 18             	lea    edx,[eax+0x18]
c001f0f8:	80 fa 07             	cmp    dl,0x7
c001f0fb:	0f 87 43 fb ff ff    	ja     c001ec44 <Vm::x87Handler(regs*)+0x1f6>
c001f101:	83 ec 0c             	sub    esp,0xc
c001f104:	2d e8 00 00 00       	sub    eax,0xe8
c001f109:	50                   	push   eax
c001f10a:	e8 02 f8 ff ff       	call   c001e911 <Vm::fpuGetReg(int)>
c001f10f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f116:	89 c6                	mov    esi,eax
c001f118:	89 d7                	mov    edi,edx
c001f11a:	e8 f2 f7 ff ff       	call   c001e911 <Vm::fpuGetReg(int)>
c001f11f:	57                   	push   edi
c001f120:	56                   	push   esi
c001f121:	52                   	push   edx
c001f122:	50                   	push   eax
c001f123:	e8 0c f7 ff ff       	call   c001e834 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f128:	83 c4 20             	add    esp,0x20
c001f12b:	e8 cc f8 ff ff       	call   c001e9fc <Vm::fpuPop()>
c001f130:	eb 62                	jmp    c001f194 <Vm::x87Handler(regs*)+0x746>
c001f132:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001f136:	0f 85 0f 01 00 00    	jne    c001f24b <Vm::x87Handler(regs*)+0x7fd>
c001f13c:	83 ec 0c             	sub    esp,0xc
c001f13f:	6a 01                	push   0x1
c001f141:	e8 cb f7 ff ff       	call   c001e911 <Vm::fpuGetReg(int)>
c001f146:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f14d:	89 c6                	mov    esi,eax
c001f14f:	89 d7                	mov    edi,edx
c001f151:	e8 bb f7 ff ff       	call   c001e911 <Vm::fpuGetReg(int)>
c001f156:	57                   	push   edi
c001f157:	56                   	push   esi
c001f158:	52                   	push   edx
c001f159:	50                   	push   eax
c001f15a:	e8 d5 f6 ff ff       	call   c001e834 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f15f:	83 c4 20             	add    esp,0x20
c001f162:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f166:	e8 91 f8 ff ff       	call   c001e9fc <Vm::fpuPop()>
c001f16b:	e8 8c f8 ff ff       	call   c001e9fc <Vm::fpuPop()>
c001f170:	e9 50 f9 ff ff       	jmp    c001eac5 <Vm::x87Handler(regs*)+0x77>
c001f175:	3c d9                	cmp    al,0xd9
c001f177:	0f 85 b5 02 00 00    	jne    c001f432 <Vm::x87Handler(regs*)+0x9e4>
c001f17d:	eb bd                	jmp    c001f13c <Vm::x87Handler(regs*)+0x6ee>
c001f17f:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001f183:	0f 85 ea 02 00 00    	jne    c001f473 <Vm::x87Handler(regs*)+0xa25>
c001f189:	0f b7 05 a0 df 02 c0 	movzx  eax,WORD PTR ds:0xc002dfa0
c001f190:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001f194:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f198:	e9 28 f9 ff ff       	jmp    c001eac5 <Vm::x87Handler(regs*)+0x77>
c001f19d:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f1a1:	84 d2                	test   dl,dl
c001f1a3:	75 0f                	jne    c001f1b4 <Vm::x87Handler(regs*)+0x766>
c001f1a5:	83 ec 0c             	sub    esp,0xc
c001f1a8:	ff 36                	push   DWORD PTR [esi]
c001f1aa:	e8 b1 f4 ff ff       	call   c001e660 <Vm::fpu32ToInternal(unsigned int)>
c001f1af:	e9 2c 01 00 00       	jmp    c001f2e0 <Vm::x87Handler(regs*)+0x892>
c001f1b4:	80 fa 01             	cmp    dl,0x1
c001f1b7:	75 0f                	jne    c001f1c8 <Vm::x87Handler(regs*)+0x77a>
c001f1b9:	83 ec 0c             	sub    esp,0xc
c001f1bc:	ff 36                	push   DWORD PTR [esi]
c001f1be:	e8 9d f4 ff ff       	call   c001e660 <Vm::fpu32ToInternal(unsigned int)>
c001f1c3:	e9 81 02 00 00       	jmp    c001f449 <Vm::x87Handler(regs*)+0x9fb>
c001f1c8:	80 fa 04             	cmp    dl,0x4
c001f1cb:	75 0f                	jne    c001f1dc <Vm::x87Handler(regs*)+0x78e>
c001f1cd:	83 ec 0c             	sub    esp,0xc
c001f1d0:	ff 36                	push   DWORD PTR [esi]
c001f1d2:	e8 89 f4 ff ff       	call   c001e660 <Vm::fpu32ToInternal(unsigned int)>
c001f1d7:	e9 86 01 00 00       	jmp    c001f362 <Vm::x87Handler(regs*)+0x914>
c001f1dc:	80 fa 05             	cmp    dl,0x5
c001f1df:	75 1b                	jne    c001f1fc <Vm::x87Handler(regs*)+0x7ae>
c001f1e1:	83 ec 0c             	sub    esp,0xc
c001f1e4:	6a 00                	push   0x0
c001f1e6:	e8 26 f7 ff ff       	call   c001e911 <Vm::fpuGetReg(int)>
c001f1eb:	89 c7                	mov    edi,eax
c001f1ed:	89 d5                	mov    ebp,edx
c001f1ef:	58                   	pop    eax
c001f1f0:	ff 36                	push   DWORD PTR [esi]
c001f1f2:	e8 69 f4 ff ff       	call   c001e660 <Vm::fpu32ToInternal(unsigned int)>
c001f1f7:	e9 a3 01 00 00       	jmp    c001f39f <Vm::x87Handler(regs*)+0x951>
c001f1fc:	80 fa 06             	cmp    dl,0x6
c001f1ff:	75 0f                	jne    c001f210 <Vm::x87Handler(regs*)+0x7c2>
c001f201:	83 ec 0c             	sub    esp,0xc
c001f204:	ff 36                	push   DWORD PTR [esi]
c001f206:	e8 55 f4 ff ff       	call   c001e660 <Vm::fpu32ToInternal(unsigned int)>
c001f20b:	e9 ae 01 00 00       	jmp    c001f3be <Vm::x87Handler(regs*)+0x970>
c001f210:	31 c0                	xor    eax,eax
c001f212:	80 fa 07             	cmp    dl,0x7
c001f215:	0f 85 94 02 00 00    	jne    c001f4af <Vm::x87Handler(regs*)+0xa61>
c001f21b:	83 ec 0c             	sub    esp,0xc
c001f21e:	6a 00                	push   0x0
c001f220:	e8 ec f6 ff ff       	call   c001e911 <Vm::fpuGetReg(int)>
c001f225:	89 c7                	mov    edi,eax
c001f227:	89 d5                	mov    ebp,edx
c001f229:	58                   	pop    eax
c001f22a:	ff 36                	push   DWORD PTR [esi]
c001f22c:	e8 2f f4 ff ff       	call   c001e660 <Vm::fpu32ToInternal(unsigned int)>
c001f231:	e9 cb 01 00 00       	jmp    c001f401 <Vm::x87Handler(regs*)+0x9b3>
c001f236:	80 fa 03             	cmp    dl,0x3
c001f239:	0f 85 d3 01 00 00    	jne    c001f412 <Vm::x87Handler(regs*)+0x9c4>
c001f23f:	e8 b8 f7 ff ff       	call   c001e9fc <Vm::fpuPop()>
c001f244:	51                   	push   ecx
c001f245:	51                   	push   ecx
c001f246:	e9 de 01 00 00       	jmp    c001f429 <Vm::x87Handler(regs*)+0x9db>
c001f24b:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f24f:	80 fa 01             	cmp    dl,0x1
c001f252:	75 09                	jne    c001f25d <Vm::x87Handler(regs*)+0x80f>
c001f254:	57                   	push   edi
c001f255:	57                   	push   edi
c001f256:	8b 06                	mov    eax,DWORD PTR [esi]
c001f258:	e9 e3 01 00 00       	jmp    c001f440 <Vm::x87Handler(regs*)+0x9f2>
c001f25d:	80 fa 04             	cmp    dl,0x4
c001f260:	75 12                	jne    c001f274 <Vm::x87Handler(regs*)+0x826>
c001f262:	31 d2                	xor    edx,edx
c001f264:	51                   	push   ecx
c001f265:	51                   	push   ecx
c001f266:	8b 06                	mov    eax,DWORD PTR [esi]
c001f268:	52                   	push   edx
c001f269:	50                   	push   eax
c001f26a:	e8 d0 f4 ff ff       	call   c001e73f <Vm::fpuLongToFloat(long long)>
c001f26f:	e9 ee 00 00 00       	jmp    c001f362 <Vm::x87Handler(regs*)+0x914>
c001f274:	31 c0                	xor    eax,eax
c001f276:	80 fa 07             	cmp    dl,0x7
c001f279:	0f 85 30 02 00 00    	jne    c001f4af <Vm::x87Handler(regs*)+0xa61>
c001f27f:	83 ec 0c             	sub    esp,0xc
c001f282:	6a 00                	push   0x0
c001f284:	e8 88 f6 ff ff       	call   c001e911 <Vm::fpuGetReg(int)>
c001f289:	89 c7                	mov    edi,eax
c001f28b:	89 d5                	mov    ebp,edx
c001f28d:	58                   	pop    eax
c001f28e:	8b 06                	mov    eax,DWORD PTR [esi]
c001f290:	5a                   	pop    edx
c001f291:	31 d2                	xor    edx,edx
c001f293:	52                   	push   edx
c001f294:	50                   	push   eax
c001f295:	e8 a5 f4 ff ff       	call   c001e73f <Vm::fpuLongToFloat(long long)>
c001f29a:	e9 62 01 00 00       	jmp    c001f401 <Vm::x87Handler(regs*)+0x9b3>
c001f29f:	84 d2                	test   dl,dl
c001f2a1:	75 0d                	jne    c001f2b0 <Vm::x87Handler(regs*)+0x862>
c001f2a3:	31 d2                	xor    edx,edx
c001f2a5:	55                   	push   ebp
c001f2a6:	55                   	push   ebp
c001f2a7:	8b 06                	mov    eax,DWORD PTR [esi]
c001f2a9:	52                   	push   edx
c001f2aa:	50                   	push   eax
c001f2ab:	e9 d3 01 00 00       	jmp    c001f483 <Vm::x87Handler(regs*)+0xa35>
c001f2b0:	31 c0                	xor    eax,eax
c001f2b2:	80 fa 02             	cmp    dl,0x2
c001f2b5:	0f 85 f4 01 00 00    	jne    c001f4af <Vm::x87Handler(regs*)+0xa61>
c001f2bb:	83 ec 0c             	sub    esp,0xc
c001f2be:	6a 00                	push   0x0
c001f2c0:	e8 4c f6 ff ff       	call   c001e911 <Vm::fpuGetReg(int)>
c001f2c5:	59                   	pop    ecx
c001f2c6:	5f                   	pop    edi
c001f2c7:	e9 6a f9 ff ff       	jmp    c001ec36 <Vm::x87Handler(regs*)+0x1e8>
c001f2cc:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f2d0:	84 d2                	test   dl,dl
c001f2d2:	75 2a                	jne    c001f2fe <Vm::x87Handler(regs*)+0x8b0>
c001f2d4:	50                   	push   eax
c001f2d5:	50                   	push   eax
c001f2d6:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f2d9:	ff 36                	push   DWORD PTR [esi]
c001f2db:	e8 c5 f3 ff ff       	call   c001e6a5 <Vm::fpu64ToInternal(unsigned long long)>
c001f2e0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f2e7:	89 c6                	mov    esi,eax
c001f2e9:	89 d7                	mov    edi,edx
c001f2eb:	e8 21 f6 ff ff       	call   c001e911 <Vm::fpuGetReg(int)>
c001f2f0:	57                   	push   edi
c001f2f1:	56                   	push   esi
c001f2f2:	52                   	push   edx
c001f2f3:	50                   	push   eax
c001f2f4:	e8 8e f5 ff ff       	call   c001e887 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f2f9:	e9 64 01 00 00       	jmp    c001f462 <Vm::x87Handler(regs*)+0xa14>
c001f2fe:	80 fa 01             	cmp    dl,0x1
c001f301:	75 11                	jne    c001f314 <Vm::x87Handler(regs*)+0x8c6>
c001f303:	50                   	push   eax
c001f304:	50                   	push   eax
c001f305:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f308:	ff 36                	push   DWORD PTR [esi]
c001f30a:	e8 96 f3 ff ff       	call   c001e6a5 <Vm::fpu64ToInternal(unsigned long long)>
c001f30f:	e9 35 01 00 00       	jmp    c001f449 <Vm::x87Handler(regs*)+0x9fb>
c001f314:	80 fa 02             	cmp    dl,0x2
c001f317:	0f 85 54 f9 ff ff    	jne    c001ec71 <Vm::x87Handler(regs*)+0x223>
c001f31d:	55                   	push   ebp
c001f31e:	55                   	push   ebp
c001f31f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f322:	ff 36                	push   DWORD PTR [esi]
c001f324:	e8 7c f3 ff ff       	call   c001e6a5 <Vm::fpu64ToInternal(unsigned long long)>
c001f329:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f330:	89 c6                	mov    esi,eax
c001f332:	89 d7                	mov    edi,edx
c001f334:	e8 d8 f5 ff ff       	call   c001e911 <Vm::fpuGetReg(int)>
c001f339:	57                   	push   edi
c001f33a:	56                   	push   esi
c001f33b:	52                   	push   edx
c001f33c:	50                   	push   eax
c001f33d:	e8 f2 f4 ff ff       	call   c001e834 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f342:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001f346:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f349:	83 c4 20             	add    esp,0x20
c001f34c:	e9 74 f7 ff ff       	jmp    c001eac5 <Vm::x87Handler(regs*)+0x77>
c001f351:	80 fa 04             	cmp    dl,0x4
c001f354:	75 2a                	jne    c001f380 <Vm::x87Handler(regs*)+0x932>
c001f356:	51                   	push   ecx
c001f357:	51                   	push   ecx
c001f358:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f35b:	ff 36                	push   DWORD PTR [esi]
c001f35d:	e8 43 f3 ff ff       	call   c001e6a5 <Vm::fpu64ToInternal(unsigned long long)>
c001f362:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f369:	89 c6                	mov    esi,eax
c001f36b:	89 d7                	mov    edi,edx
c001f36d:	e8 9f f5 ff ff       	call   c001e911 <Vm::fpuGetReg(int)>
c001f372:	57                   	push   edi
c001f373:	56                   	push   esi
c001f374:	52                   	push   edx
c001f375:	50                   	push   eax
c001f376:	e8 36 f5 ff ff       	call   c001e8b1 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f37b:	e9 e2 00 00 00       	jmp    c001f462 <Vm::x87Handler(regs*)+0xa14>
c001f380:	80 fa 05             	cmp    dl,0x5
c001f383:	75 28                	jne    c001f3ad <Vm::x87Handler(regs*)+0x95f>
c001f385:	83 ec 0c             	sub    esp,0xc
c001f388:	6a 00                	push   0x0
c001f38a:	e8 82 f5 ff ff       	call   c001e911 <Vm::fpuGetReg(int)>
c001f38f:	89 c7                	mov    edi,eax
c001f391:	89 d5                	mov    ebp,edx
c001f393:	58                   	pop    eax
c001f394:	5a                   	pop    edx
c001f395:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f398:	ff 36                	push   DWORD PTR [esi]
c001f39a:	e8 06 f3 ff ff       	call   c001e6a5 <Vm::fpu64ToInternal(unsigned long long)>
c001f39f:	83 c4 10             	add    esp,0x10
c001f3a2:	55                   	push   ebp
c001f3a3:	57                   	push   edi
c001f3a4:	52                   	push   edx
c001f3a5:	50                   	push   eax
c001f3a6:	e8 06 f5 ff ff       	call   c001e8b1 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f3ab:	eb 60                	jmp    c001f40d <Vm::x87Handler(regs*)+0x9bf>
c001f3ad:	80 fa 06             	cmp    dl,0x6
c001f3b0:	75 2a                	jne    c001f3dc <Vm::x87Handler(regs*)+0x98e>
c001f3b2:	51                   	push   ecx
c001f3b3:	51                   	push   ecx
c001f3b4:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f3b7:	ff 36                	push   DWORD PTR [esi]
c001f3b9:	e8 e7 f2 ff ff       	call   c001e6a5 <Vm::fpu64ToInternal(unsigned long long)>
c001f3be:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f3c5:	89 c6                	mov    esi,eax
c001f3c7:	89 d7                	mov    edi,edx
c001f3c9:	e8 43 f5 ff ff       	call   c001e911 <Vm::fpuGetReg(int)>
c001f3ce:	57                   	push   edi
c001f3cf:	56                   	push   esi
c001f3d0:	52                   	push   edx
c001f3d1:	50                   	push   eax
c001f3d2:	e8 08 f5 ff ff       	call   c001e8df <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f3d7:	e9 86 00 00 00       	jmp    c001f462 <Vm::x87Handler(regs*)+0xa14>
c001f3dc:	31 c0                	xor    eax,eax
c001f3de:	80 fa 07             	cmp    dl,0x7
c001f3e1:	0f 85 c8 00 00 00    	jne    c001f4af <Vm::x87Handler(regs*)+0xa61>
c001f3e7:	83 ec 0c             	sub    esp,0xc
c001f3ea:	6a 00                	push   0x0
c001f3ec:	e8 20 f5 ff ff       	call   c001e911 <Vm::fpuGetReg(int)>
c001f3f1:	89 c7                	mov    edi,eax
c001f3f3:	89 d5                	mov    ebp,edx
c001f3f5:	58                   	pop    eax
c001f3f6:	5a                   	pop    edx
c001f3f7:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f3fa:	ff 36                	push   DWORD PTR [esi]
c001f3fc:	e8 a4 f2 ff ff       	call   c001e6a5 <Vm::fpu64ToInternal(unsigned long long)>
c001f401:	83 c4 10             	add    esp,0x10
c001f404:	55                   	push   ebp
c001f405:	57                   	push   edi
c001f406:	52                   	push   edx
c001f407:	50                   	push   eax
c001f408:	e8 d2 f4 ff ff       	call   c001e8df <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f40d:	83 c4 0c             	add    esp,0xc
c001f410:	eb 53                	jmp    c001f465 <Vm::x87Handler(regs*)+0xa17>
c001f412:	31 c0                	xor    eax,eax
c001f414:	80 fa 02             	cmp    dl,0x2
c001f417:	0f 85 92 00 00 00    	jne    c001f4af <Vm::x87Handler(regs*)+0xa61>
c001f41d:	83 ec 0c             	sub    esp,0xc
c001f420:	6a 00                	push   0x0
c001f422:	e8 ea f4 ff ff       	call   c001e911 <Vm::fpuGetReg(int)>
c001f427:	59                   	pop    ecx
c001f428:	5f                   	pop    edi
c001f429:	52                   	push   edx
c001f42a:	50                   	push   eax
c001f42b:	e8 27 f2 ff ff       	call   c001e657 <Vm::fpuInternalTo64(unsigned long long)>
c001f430:	eb 70                	jmp    c001f4a2 <Vm::x87Handler(regs*)+0xa54>
c001f432:	31 c0                	xor    eax,eax
c001f434:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001f439:	75 74                	jne    c001f4af <Vm::x87Handler(regs*)+0xa61>
c001f43b:	50                   	push   eax
c001f43c:	50                   	push   eax
c001f43d:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001f440:	31 d2                	xor    edx,edx
c001f442:	52                   	push   edx
c001f443:	50                   	push   eax
c001f444:	e8 f6 f2 ff ff       	call   c001e73f <Vm::fpuLongToFloat(long long)>
c001f449:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f450:	89 c6                	mov    esi,eax
c001f452:	89 d7                	mov    edi,edx
c001f454:	e8 b8 f4 ff ff       	call   c001e911 <Vm::fpuGetReg(int)>
c001f459:	57                   	push   edi
c001f45a:	56                   	push   esi
c001f45b:	52                   	push   edx
c001f45c:	50                   	push   eax
c001f45d:	e8 5e f4 ff ff       	call   c001e8c0 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f462:	83 c4 1c             	add    esp,0x1c
c001f465:	52                   	push   edx
c001f466:	50                   	push   eax
c001f467:	6a 00                	push   0x0
c001f469:	e8 e6 f4 ff ff       	call   c001e954 <Vm::fpuSetReg(int, unsigned long long)>
c001f46e:	e9 f2 f7 ff ff       	jmp    c001ec65 <Vm::x87Handler(regs*)+0x217>
c001f473:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f477:	80 fa 05             	cmp    dl,0x5
c001f47a:	75 11                	jne    c001f48d <Vm::x87Handler(regs*)+0xa3f>
c001f47c:	55                   	push   ebp
c001f47d:	55                   	push   ebp
c001f47e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f481:	ff 36                	push   DWORD PTR [esi]
c001f483:	e8 81 f2 ff ff       	call   c001e709 <Vm::fpuULongToFloat(unsigned long long)>
c001f488:	e9 cf f7 ff ff       	jmp    c001ec5c <Vm::x87Handler(regs*)+0x20e>
c001f48d:	31 c0                	xor    eax,eax
c001f48f:	80 fa 07             	cmp    dl,0x7
c001f492:	75 1b                	jne    c001f4af <Vm::x87Handler(regs*)+0xa61>
c001f494:	e8 63 f5 ff ff       	call   c001e9fc <Vm::fpuPop()>
c001f499:	51                   	push   ecx
c001f49a:	51                   	push   ecx
c001f49b:	52                   	push   edx
c001f49c:	50                   	push   eax
c001f49d:	e8 0c f2 ff ff       	call   c001e6ae <Vm::fpuFloatToLong(unsigned long long)>
c001f4a2:	83 c4 10             	add    esp,0x10
c001f4a5:	89 06                	mov    DWORD PTR [esi],eax
c001f4a7:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001f4aa:	e9 f8 f7 ff ff       	jmp    c001eca7 <Vm::x87Handler(regs*)+0x259>
c001f4af:	83 c4 1c             	add    esp,0x1c
c001f4b2:	5b                   	pop    ebx
c001f4b3:	5e                   	pop    esi
c001f4b4:	5f                   	pop    edi
c001f4b5:	5d                   	pop    ebp
c001f4b6:	c3                   	ret    

c001f4b7 <__static_initialization_and_destruction_0(int, int)>:
c001f4b7:	83 ec 0c             	sub    esp,0xc
c001f4ba:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001f4bf:	75 1a                	jne    c001f4db <__static_initialization_and_destruction_0(int, int)+0x24>
c001f4c1:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001f4c9:	75 10                	jne    c001f4db <__static_initialization_and_destruction_0(int, int)+0x24>
c001f4cb:	83 ec 0c             	sub    esp,0xc
c001f4ce:	68 a0 df 02 c0       	push   0xc002dfa0
c001f4d3:	e8 a8 82 00 00       	call   c0027780 <Vm::_FPUState::_FPUState()>
c001f4d8:	83 c4 10             	add    esp,0x10
c001f4db:	90                   	nop
c001f4dc:	83 c4 0c             	add    esp,0xc
c001f4df:	c3                   	ret    

c001f4e0 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001f4e0:	83 ec 0c             	sub    esp,0xc
c001f4e3:	83 ec 08             	sub    esp,0x8
c001f4e6:	68 ff ff 00 00       	push   0xffff
c001f4eb:	6a 01                	push   0x1
c001f4ed:	e8 c5 ff ff ff       	call   c001f4b7 <__static_initialization_and_destruction_0(int, int)>
c001f4f2:	83 c4 10             	add    esp,0x10
c001f4f5:	83 c4 0c             	add    esp,0xc
c001f4f8:	c3                   	ret    
c001f4f9:	90                   	nop

c001f4fa <FAT::getName()>:
c001f4fa:	b8 0c ae 02 c0       	mov    eax,0xc002ae0c
c001f4ff:	c3                   	ret    

c001f500 <FAT::tell(void*, unsigned long long*)>:
c001f500:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001f505:	75 06                	jne    c001f50d <FAT::tell(void*, unsigned long long*)+0xd>
c001f507:	b8 04 00 00 00       	mov    eax,0x4
c001f50c:	c3                   	ret    
c001f50d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001f512:	75 06                	jne    c001f51a <FAT::tell(void*, unsigned long long*)+0x1a>
c001f514:	b8 04 00 00 00       	mov    eax,0x4
c001f519:	c3                   	ret    
c001f51a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f51e:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001f521:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001f524:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f528:	89 01                	mov    DWORD PTR [ecx],eax
c001f52a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001f52d:	b8 00 00 00 00       	mov    eax,0x0
c001f532:	c3                   	ret    
c001f533:	90                   	nop

c001f534 <FAT::stat(void*, unsigned long long*)>:
c001f534:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001f539:	75 06                	jne    c001f541 <FAT::stat(void*, unsigned long long*)+0xd>
c001f53b:	b8 04 00 00 00       	mov    eax,0x4
c001f540:	c3                   	ret    
c001f541:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001f546:	75 06                	jne    c001f54e <FAT::stat(void*, unsigned long long*)+0x1a>
c001f548:	b8 04 00 00 00       	mov    eax,0x4
c001f54d:	c3                   	ret    
c001f54e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f552:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001f555:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001f558:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f55c:	89 01                	mov    DWORD PTR [ecx],eax
c001f55e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001f561:	b8 00 00 00 00       	mov    eax,0x0
c001f566:	c3                   	ret    
c001f567:	90                   	nop

c001f568 <FAT::~FAT()>:
c001f568:	83 ec 0c             	sub    esp,0xc
c001f56b:	ba 90 ae 02 c0       	mov    edx,0xc002ae90
c001f570:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f574:	89 10                	mov    DWORD PTR [eax],edx
c001f576:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f57a:	83 ec 0c             	sub    esp,0xc
c001f57d:	50                   	push   eax
c001f57e:	e8 1f 35 ff ff       	call   c0012aa2 <Filesystem::~Filesystem()>
c001f583:	83 c4 10             	add    esp,0x10
c001f586:	90                   	nop
c001f587:	83 c4 0c             	add    esp,0xc
c001f58a:	c3                   	ret    
c001f58b:	90                   	nop

c001f58c <FAT::~FAT()>:
c001f58c:	83 ec 0c             	sub    esp,0xc
c001f58f:	83 ec 0c             	sub    esp,0xc
c001f592:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f596:	e8 cd ff ff ff       	call   c001f568 <FAT::~FAT()>
c001f59b:	83 c4 10             	add    esp,0x10
c001f59e:	83 ec 08             	sub    esp,0x8
c001f5a1:	6a 08                	push   0x8
c001f5a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f5a7:	e8 ed 30 ff ff       	call   c0012699 <operator delete(void*, unsigned long)>
c001f5ac:	83 c4 10             	add    esp,0x10
c001f5af:	83 c4 0c             	add    esp,0xc
c001f5b2:	c3                   	ret    
c001f5b3:	90                   	nop

c001f5b4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001f5b4:	83 ec 1c             	sub    esp,0x1c
c001f5b7:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001f5be:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001f5c3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f5c7:	8b 04 85 20 e0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1fe0]
c001f5ce:	83 f8 ff             	cmp    eax,0xffffffff
c001f5d1:	75 34                	jne    c001f607 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c001f5d3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001f5d7:	88 c2                	mov    dl,al
c001f5d9:	a1 00 e0 02 c0       	mov    eax,ds:0xc002e000
c001f5de:	01 d0                	add    eax,edx
c001f5e0:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001f5e4:	8b 15 00 e0 02 c0    	mov    edx,DWORD PTR ds:0xc002e000
c001f5ea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f5ee:	89 14 85 20 e0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1fe0],edx
c001f5f5:	a1 00 e0 02 c0       	mov    eax,ds:0xc002e000
c001f5fa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001f5fe:	89 14 85 a0 e0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1f60],edx
c001f605:	eb 17                	jmp    c001f61e <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c001f607:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001f60b:	88 c2                	mov    dl,al
c001f60d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f611:	8b 04 85 20 e0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1fe0]
c001f618:	01 d0                	add    eax,edx
c001f61a:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001f61e:	83 ec 04             	sub    esp,0x4
c001f621:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001f625:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001f629:	8d 44 24 15          	lea    eax,[esp+0x15]
c001f62d:	50                   	push   eax
c001f62e:	e8 b5 74 fe ff       	call   c0006ae8 <f_getlabel>
c001f633:	83 c4 10             	add    esp,0x10
c001f636:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f63a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001f63f:	75 07                	jne    c001f648 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c001f641:	b8 00 00 00 00       	mov    eax,0x0
c001f646:	eb 05                	jmp    c001f64d <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c001f648:	b8 01 00 00 00       	mov    eax,0x1
c001f64d:	83 c4 1c             	add    esp,0x1c
c001f650:	c3                   	ret    
c001f651:	90                   	nop

c001f652 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001f652:	57                   	push   edi
c001f653:	83 ec 58             	sub    esp,0x58
c001f656:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001f65e:	8d 54 24 10          	lea    edx,[esp+0x10]
c001f662:	b9 0f 00 00 00       	mov    ecx,0xf
c001f667:	b8 00 00 00 00       	mov    eax,0x0
c001f66c:	fc                   	cld    
c001f66d:	89 d7                	mov    edi,edx
c001f66f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001f671:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001f675:	8b 04 85 20 e0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1fe0]
c001f67c:	83 f8 ff             	cmp    eax,0xffffffff
c001f67f:	75 34                	jne    c001f6b5 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c001f681:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001f685:	88 c2                	mov    dl,al
c001f687:	a1 00 e0 02 c0       	mov    eax,ds:0xc002e000
c001f68c:	01 d0                	add    eax,edx
c001f68e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001f692:	8b 15 00 e0 02 c0    	mov    edx,DWORD PTR ds:0xc002e000
c001f698:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001f69c:	89 14 85 20 e0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1fe0],edx
c001f6a3:	a1 00 e0 02 c0       	mov    eax,ds:0xc002e000
c001f6a8:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001f6ac:	89 14 85 a0 e0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1f60],edx
c001f6b3:	eb 17                	jmp    c001f6cc <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c001f6b5:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001f6b9:	88 c2                	mov    dl,al
c001f6bb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001f6bf:	8b 04 85 20 e0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1fe0]
c001f6c6:	01 d0                	add    eax,edx
c001f6c8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001f6cc:	83 ec 08             	sub    esp,0x8
c001f6cf:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001f6d3:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f6d7:	50                   	push   eax
c001f6d8:	e8 04 11 fe ff       	call   c00007e1 <strcat>
c001f6dd:	83 c4 10             	add    esp,0x10
c001f6e0:	83 ec 0c             	sub    esp,0xc
c001f6e3:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f6e7:	50                   	push   eax
c001f6e8:	e8 e9 75 fe ff       	call   c0006cd6 <f_setlabel>
c001f6ed:	83 c4 10             	add    esp,0x10
c001f6f0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001f6f4:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001f6f9:	75 07                	jne    c001f702 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c001f6fb:	b8 00 00 00 00       	mov    eax,0x0
c001f700:	eb 05                	jmp    c001f707 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c001f702:	b8 01 00 00 00       	mov    eax,0x1
c001f707:	83 c4 58             	add    esp,0x58
c001f70a:	5f                   	pop    edi
c001f70b:	c3                   	ret    

c001f70c <FAT::format(LogicalDisk*, int, char const*, int)>:
c001f70c:	83 ec 2c             	sub    esp,0x2c
c001f70f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001f717:	83 ec 08             	sub    esp,0x8
c001f71a:	68 30 ae 02 c0       	push   0xc002ae30
c001f71f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f723:	e8 53 10 fe ff       	call   c000077b <strcmp>
c001f728:	83 c4 10             	add    esp,0x10
c001f72b:	85 c0                	test   eax,eax
c001f72d:	0f 94 c0             	sete   al
c001f730:	84 c0                	test   al,al
c001f732:	74 0d                	je     c001f741 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c001f734:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001f73c:	e9 a6 00 00 00       	jmp    c001f7e7 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001f741:	83 ec 08             	sub    esp,0x8
c001f744:	68 22 ae 02 c0       	push   0xc002ae22
c001f749:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f74d:	e8 29 10 fe ff       	call   c000077b <strcmp>
c001f752:	83 c4 10             	add    esp,0x10
c001f755:	85 c0                	test   eax,eax
c001f757:	0f 94 c0             	sete   al
c001f75a:	84 c0                	test   al,al
c001f75c:	74 0a                	je     c001f768 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c001f75e:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001f766:	eb 7f                	jmp    c001f7e7 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001f768:	83 ec 08             	sub    esp,0x8
c001f76b:	68 28 ae 02 c0       	push   0xc002ae28
c001f770:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f774:	e8 02 10 fe ff       	call   c000077b <strcmp>
c001f779:	83 c4 10             	add    esp,0x10
c001f77c:	85 c0                	test   eax,eax
c001f77e:	0f 94 c0             	sete   al
c001f781:	84 c0                	test   al,al
c001f783:	74 0a                	je     c001f78f <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c001f785:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001f78d:	eb 58                	jmp    c001f7e7 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001f78f:	83 ec 08             	sub    esp,0x8
c001f792:	68 8c 7e 02 c0       	push   0xc0027e8c
c001f797:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f79b:	e8 db 0f fe ff       	call   c000077b <strcmp>
c001f7a0:	83 c4 10             	add    esp,0x10
c001f7a3:	85 c0                	test   eax,eax
c001f7a5:	0f 94 c0             	sete   al
c001f7a8:	84 c0                	test   al,al
c001f7aa:	74 0a                	je     c001f7b6 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c001f7ac:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001f7b4:	eb 31                	jmp    c001f7e7 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001f7b6:	83 ec 08             	sub    esp,0x8
c001f7b9:	68 2e ae 02 c0       	push   0xc002ae2e
c001f7be:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f7c2:	e8 b4 0f fe ff       	call   c000077b <strcmp>
c001f7c7:	83 c4 10             	add    esp,0x10
c001f7ca:	85 c0                	test   eax,eax
c001f7cc:	0f 94 c0             	sete   al
c001f7cf:	84 c0                	test   al,al
c001f7d1:	74 0a                	je     c001f7dd <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c001f7d3:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001f7db:	eb 0a                	jmp    c001f7e7 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001f7dd:	b8 08 00 00 00       	mov    eax,0x8
c001f7e2:	e9 04 01 00 00       	jmp    c001f8eb <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001f7e7:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001f7ee:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001f7f3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f7f7:	8b 04 85 20 e0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1fe0]
c001f7fe:	83 f8 ff             	cmp    eax,0xffffffff
c001f801:	75 34                	jne    c001f837 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c001f803:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001f807:	88 c2                	mov    dl,al
c001f809:	a1 00 e0 02 c0       	mov    eax,ds:0xc002e000
c001f80e:	01 d0                	add    eax,edx
c001f810:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001f814:	8b 15 00 e0 02 c0    	mov    edx,DWORD PTR ds:0xc002e000
c001f81a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f81e:	89 14 85 20 e0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1fe0],edx
c001f825:	a1 00 e0 02 c0       	mov    eax,ds:0xc002e000
c001f82a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001f82e:	89 14 85 a0 e0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1f60],edx
c001f835:	eb 17                	jmp    c001f84e <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c001f837:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001f83b:	88 c2                	mov    dl,al
c001f83d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f841:	8b 04 85 20 e0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1fe0]
c001f848:	01 d0                	add    eax,edx
c001f84a:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001f84e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f852:	88 04 24             	mov    BYTE PTR [esp],al
c001f855:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001f859:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f85d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001f865:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001f86a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001f872:	83 ec 0c             	sub    esp,0xc
c001f875:	68 00 20 00 00       	push   0x2000
c001f87a:	e8 55 fc fe ff       	call   c000f4d4 <malloc>
c001f87f:	83 c4 10             	add    esp,0x10
c001f882:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f886:	68 00 20 00 00       	push   0x2000
c001f88b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f88f:	8d 44 24 08          	lea    eax,[esp+0x8]
c001f893:	50                   	push   eax
c001f894:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001f898:	50                   	push   eax
c001f899:	e8 83 78 fe ff       	call   c0007121 <f_mkfs>
c001f89e:	83 c4 10             	add    esp,0x10
c001f8a1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001f8a5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f8aa:	75 07                	jne    c001f8b3 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c001f8ac:	b8 00 00 00 00       	mov    eax,0x0
c001f8b1:	eb 38                	jmp    c001f8eb <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001f8b3:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001f8b8:	75 17                	jne    c001f8d1 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c001f8ba:	83 ec 0c             	sub    esp,0xc
c001f8bd:	68 60 ae 02 c0       	push   0xc002ae60
c001f8c2:	e8 b2 2e ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c001f8c7:	83 c4 10             	add    esp,0x10
c001f8ca:	b8 09 00 00 00       	mov    eax,0x9
c001f8cf:	eb 1a                	jmp    c001f8eb <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001f8d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f8d5:	83 ec 08             	sub    esp,0x8
c001f8d8:	50                   	push   eax
c001f8d9:	68 34 ae 02 c0       	push   0xc002ae34
c001f8de:	e8 96 2e ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c001f8e3:	83 c4 10             	add    esp,0x10
c001f8e6:	b8 01 00 00 00       	mov    eax,0x1
c001f8eb:	83 c4 2c             	add    esp,0x2c
c001f8ee:	c3                   	ret    
c001f8ef:	90                   	nop

c001f8f0 <FAT::tryMount(LogicalDisk*, int)>:
c001f8f0:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001f8f6:	a1 00 e0 02 c0       	mov    eax,ds:0xc002e000
c001f8fb:	83 f8 14             	cmp    eax,0x14
c001f8fe:	75 17                	jne    c001f917 <FAT::tryMount(LogicalDisk*, int)+0x27>
c001f900:	83 ec 0c             	sub    esp,0xc
c001f903:	68 46 ae 02 c0       	push   0xc002ae46
c001f908:	e8 86 9f ff ff       	call   c0019893 <Krnl::panic(char const*)>
c001f90d:	83 c4 10             	add    esp,0x10
c001f910:	b0 00                	mov    al,0x0
c001f912:	e9 d7 01 00 00       	jmp    c001faee <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001f917:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001f91e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001f924:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001f92a:	3d 00 02 00 00       	cmp    eax,0x200
c001f92f:	74 07                	je     c001f938 <FAT::tryMount(LogicalDisk*, int)+0x48>
c001f931:	b0 00                	mov    al,0x0
c001f933:	e9 b6 01 00 00       	jmp    c001faee <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001f938:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001f940:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001f947:	8b 04 85 20 e0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1fe0]
c001f94e:	83 f8 ff             	cmp    eax,0xffffffff
c001f951:	74 07                	je     c001f95a <FAT::tryMount(LogicalDisk*, int)+0x6a>
c001f953:	b0 01                	mov    al,0x1
c001f955:	e9 94 01 00 00       	jmp    c001faee <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001f95a:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001f964:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001f96c:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001f973:	88 c2                	mov    dl,al
c001f975:	a1 00 e0 02 c0       	mov    eax,ds:0xc002e000
c001f97a:	01 d0                	add    eax,edx
c001f97c:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001f983:	8b 15 00 e0 02 c0    	mov    edx,DWORD PTR ds:0xc002e000
c001f989:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001f990:	89 14 85 20 e0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1fe0],edx
c001f997:	a1 00 e0 02 c0       	mov    eax,ds:0xc002e000
c001f99c:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001f9a3:	89 14 85 a0 e0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1f60],edx
c001f9aa:	83 ec 0c             	sub    esp,0xc
c001f9ad:	68 54 02 00 00       	push   0x254
c001f9b2:	e8 1d fb fe ff       	call   c000f4d4 <malloc>
c001f9b7:	83 c4 10             	add    esp,0x10
c001f9ba:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001f9c1:	83 ec 04             	sub    esp,0x4
c001f9c4:	6a 00                	push   0x0
c001f9c6:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001f9cd:	50                   	push   eax
c001f9ce:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001f9d5:	e8 05 53 fe ff       	call   c0004cdf <f_mount>
c001f9da:	83 c4 10             	add    esp,0x10
c001f9dd:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001f9e4:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001f9ec:	74 19                	je     c001fa07 <FAT::tryMount(LogicalDisk*, int)+0x117>
c001f9ee:	83 ec 0c             	sub    esp,0xc
c001f9f1:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001f9f8:	e8 f7 fa fe ff       	call   c000f4f4 <rfree>
c001f9fd:	83 c4 10             	add    esp,0x10
c001fa00:	b0 00                	mov    al,0x0
c001fa02:	e9 e7 00 00 00       	jmp    c001faee <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001fa07:	83 ec 04             	sub    esp,0x4
c001fa0a:	68 00 01 00 00       	push   0x100
c001fa0f:	6a 00                	push   0x0
c001fa11:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001fa18:	50                   	push   eax
c001fa19:	e8 6d 0c fe ff       	call   c000068b <memset>
c001fa1e:	83 c4 10             	add    esp,0x10
c001fa21:	83 ec 08             	sub    esp,0x8
c001fa24:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001fa2b:	50                   	push   eax
c001fa2c:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001fa33:	50                   	push   eax
c001fa34:	e8 a8 0d fe ff       	call   c00007e1 <strcat>
c001fa39:	83 c4 10             	add    esp,0x10
c001fa3c:	83 ec 08             	sub    esp,0x8
c001fa3f:	68 54 ae 02 c0       	push   0xc002ae54
c001fa44:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001fa4b:	50                   	push   eax
c001fa4c:	e8 90 0d fe ff       	call   c00007e1 <strcat>
c001fa51:	83 c4 10             	add    esp,0x10
c001fa54:	83 ec 04             	sub    esp,0x4
c001fa57:	6a 01                	push   0x1
c001fa59:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001fa60:	50                   	push   eax
c001fa61:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001fa65:	50                   	push   eax
c001fa66:	e8 d6 52 fe ff       	call   c0004d41 <f_open>
c001fa6b:	83 c4 10             	add    esp,0x10
c001fa6e:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001fa75:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001fa7c:	85 c0                	test   eax,eax
c001fa7e:	74 0a                	je     c001fa8a <FAT::tryMount(LogicalDisk*, int)+0x19a>
c001fa80:	78 2d                	js     c001faaf <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001fa82:	83 e8 04             	sub    eax,0x4
c001fa85:	83 f8 01             	cmp    eax,0x1
c001fa88:	77 25                	ja     c001faaf <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001fa8a:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001fa92:	83 ec 0c             	sub    esp,0xc
c001fa95:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001fa99:	50                   	push   eax
c001fa9a:	e8 f4 5d fe ff       	call   c0005893 <f_close>
c001fa9f:	83 c4 10             	add    esp,0x10
c001faa2:	90                   	nop
c001faa3:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001faab:	74 3a                	je     c001fae7 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c001faad:	eb 2d                	jmp    c001fadc <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c001faaf:	83 ec 0c             	sub    esp,0xc
c001fab2:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001fab9:	e8 36 fa fe ff       	call   c000f4f4 <rfree>
c001fabe:	83 c4 10             	add    esp,0x10
c001fac1:	83 ec 04             	sub    esp,0x4
c001fac4:	6a 00                	push   0x0
c001fac6:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001facd:	50                   	push   eax
c001face:	6a 00                	push   0x0
c001fad0:	e8 0a 52 fe ff       	call   c0004cdf <f_mount>
c001fad5:	83 c4 10             	add    esp,0x10
c001fad8:	b0 00                	mov    al,0x0
c001fada:	eb 12                	jmp    c001faee <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001fadc:	a1 00 e0 02 c0       	mov    eax,ds:0xc002e000
c001fae1:	40                   	inc    eax
c001fae2:	a3 00 e0 02 c0       	mov    ds:0xc002e000,eax
c001fae7:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001faee:	81 c4 6c 03 00 00    	add    esp,0x36c
c001faf4:	c3                   	ret    
c001faf5:	90                   	nop

c001faf6 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001faf6:	81 ec 3c 02 00 00    	sub    esp,0x23c
c001fafc:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c001fb04:	74 0a                	je     c001fb10 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c001fb06:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c001fb0e:	75 0a                	jne    c001fb1a <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c001fb10:	b8 04 00 00 00       	mov    eax,0x4
c001fb15:	e9 db 00 00 00       	jmp    c001fbf5 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001fb1a:	83 ec 08             	sub    esp,0x8
c001fb1d:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001fb24:	50                   	push   eax
c001fb25:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c001fb2c:	e8 6c 63 fe ff       	call   c0005e9d <f_readdir>
c001fb31:	83 c4 10             	add    esp,0x10
c001fb34:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c001fb3b:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001fb41:	83 ec 0c             	sub    esp,0xc
c001fb44:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001fb4b:	83 c0 1a             	add    eax,0x1a
c001fb4e:	50                   	push   eax
c001fb4f:	e8 54 0b fe ff       	call   c00006a8 <strlen>
c001fb54:	83 c4 10             	add    esp,0x10
c001fb57:	ba 00 00 00 00       	mov    edx,0x0
c001fb5c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001fb60:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001fb64:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c001fb6b:	0f b6 c0             	movzx  eax,al
c001fb6e:	83 e0 10             	and    eax,0x10
c001fb71:	74 07                	je     c001fb7a <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c001fb73:	b8 02 00 00 00       	mov    eax,0x2
c001fb78:	eb 05                	jmp    c001fb7f <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c001fb7a:	b8 01 00 00 00       	mov    eax,0x1
c001fb7f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fb83:	83 ec 08             	sub    esp,0x8
c001fb86:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001fb8d:	83 c0 1a             	add    eax,0x1a
c001fb90:	50                   	push   eax
c001fb91:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001fb95:	83 c0 10             	add    eax,0x10
c001fb98:	50                   	push   eax
c001fb99:	e8 8c 0b fe ff       	call   c000072a <strcpy>
c001fb9e:	83 c4 10             	add    esp,0x10
c001fba1:	83 ec 04             	sub    esp,0x4
c001fba4:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c001fbab:	8d 44 24 08          	lea    eax,[esp+0x8]
c001fbaf:	50                   	push   eax
c001fbb0:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c001fbb7:	e8 99 0a fe ff       	call   c0000655 <memcpy>
c001fbbc:	83 c4 10             	add    esp,0x10
c001fbbf:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c001fbc6:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001fbcc:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c001fbd3:	84 c0                	test   al,al
c001fbd5:	75 07                	jne    c001fbde <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c001fbd7:	b8 07 00 00 00       	mov    eax,0x7
c001fbdc:	eb 17                	jmp    c001fbf5 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001fbde:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c001fbe5:	85 c0                	test   eax,eax
c001fbe7:	75 07                	jne    c001fbf0 <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c001fbe9:	b8 00 00 00 00       	mov    eax,0x0
c001fbee:	eb 05                	jmp    c001fbf5 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001fbf0:	b8 01 00 00 00       	mov    eax,0x1
c001fbf5:	81 c4 3c 02 00 00    	add    esp,0x23c
c001fbfb:	c3                   	ret    

c001fbfc <FAT::read(void*, unsigned long, void*, int*)>:
c001fbfc:	83 ec 1c             	sub    esp,0x1c
c001fbff:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001fc04:	74 07                	je     c001fc0d <FAT::read(void*, unsigned long, void*, int*)+0x11>
c001fc06:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001fc0b:	75 07                	jne    c001fc14 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c001fc0d:	b8 04 00 00 00       	mov    eax,0x4
c001fc12:	eb 3d                	jmp    c001fc51 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001fc14:	8d 44 24 08          	lea    eax,[esp+0x8]
c001fc18:	50                   	push   eax
c001fc19:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001fc1d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001fc21:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fc25:	e8 53 55 fe ff       	call   c000517d <f_read>
c001fc2a:	83 c4 10             	add    esp,0x10
c001fc2d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fc31:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fc35:	89 c2                	mov    edx,eax
c001fc37:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001fc3b:	89 10                	mov    DWORD PTR [eax],edx
c001fc3d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fc41:	85 c0                	test   eax,eax
c001fc43:	75 07                	jne    c001fc4c <FAT::read(void*, unsigned long, void*, int*)+0x50>
c001fc45:	b8 00 00 00 00       	mov    eax,0x0
c001fc4a:	eb 05                	jmp    c001fc51 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001fc4c:	b8 01 00 00 00       	mov    eax,0x1
c001fc51:	83 c4 1c             	add    esp,0x1c
c001fc54:	c3                   	ret    
c001fc55:	90                   	nop

c001fc56 <FAT::write(void*, unsigned long, void*, int*)>:
c001fc56:	83 ec 1c             	sub    esp,0x1c
c001fc59:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001fc5e:	74 07                	je     c001fc67 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c001fc60:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001fc65:	75 07                	jne    c001fc6e <FAT::write(void*, unsigned long, void*, int*)+0x18>
c001fc67:	b8 04 00 00 00       	mov    eax,0x4
c001fc6c:	eb 3d                	jmp    c001fcab <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001fc6e:	8d 44 24 08          	lea    eax,[esp+0x8]
c001fc72:	50                   	push   eax
c001fc73:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001fc77:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001fc7b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fc7f:	e8 79 57 fe ff       	call   c00053fd <f_write>
c001fc84:	83 c4 10             	add    esp,0x10
c001fc87:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fc8b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fc8f:	89 c2                	mov    edx,eax
c001fc91:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001fc95:	89 10                	mov    DWORD PTR [eax],edx
c001fc97:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fc9b:	85 c0                	test   eax,eax
c001fc9d:	75 07                	jne    c001fca6 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c001fc9f:	b8 00 00 00 00       	mov    eax,0x0
c001fca4:	eb 05                	jmp    c001fcab <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001fca6:	b8 01 00 00 00       	mov    eax,0x1
c001fcab:	83 c4 1c             	add    esp,0x1c
c001fcae:	c3                   	ret    
c001fcaf:	90                   	nop

c001fcb0 <FAT::close(void*)>:
c001fcb0:	83 ec 1c             	sub    esp,0x1c
c001fcb3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001fcb8:	75 07                	jne    c001fcc1 <FAT::close(void*)+0x11>
c001fcba:	b8 04 00 00 00       	mov    eax,0x4
c001fcbf:	eb 36                	jmp    c001fcf7 <FAT::close(void*)+0x47>
c001fcc1:	83 ec 0c             	sub    esp,0xc
c001fcc4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fcc8:	e8 c6 5b fe ff       	call   c0005893 <f_close>
c001fccd:	83 c4 10             	add    esp,0x10
c001fcd0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fcd4:	83 ec 0c             	sub    esp,0xc
c001fcd7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fcdb:	e8 04 f8 fe ff       	call   c000f4e4 <free>
c001fce0:	83 c4 10             	add    esp,0x10
c001fce3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fce7:	85 c0                	test   eax,eax
c001fce9:	75 07                	jne    c001fcf2 <FAT::close(void*)+0x42>
c001fceb:	b8 00 00 00 00       	mov    eax,0x0
c001fcf0:	eb 05                	jmp    c001fcf7 <FAT::close(void*)+0x47>
c001fcf2:	b8 01 00 00 00       	mov    eax,0x1
c001fcf7:	83 c4 1c             	add    esp,0x1c
c001fcfa:	c3                   	ret    
c001fcfb:	90                   	nop

c001fcfc <FAT::closeDir(void*)>:
c001fcfc:	83 ec 1c             	sub    esp,0x1c
c001fcff:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001fd04:	75 07                	jne    c001fd0d <FAT::closeDir(void*)+0x11>
c001fd06:	b8 04 00 00 00       	mov    eax,0x4
c001fd0b:	eb 36                	jmp    c001fd43 <FAT::closeDir(void*)+0x47>
c001fd0d:	83 ec 0c             	sub    esp,0xc
c001fd10:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fd14:	e8 62 61 fe ff       	call   c0005e7b <f_closedir>
c001fd19:	83 c4 10             	add    esp,0x10
c001fd1c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fd20:	83 ec 0c             	sub    esp,0xc
c001fd23:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fd27:	e8 b8 f7 fe ff       	call   c000f4e4 <free>
c001fd2c:	83 c4 10             	add    esp,0x10
c001fd2f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fd33:	85 c0                	test   eax,eax
c001fd35:	75 07                	jne    c001fd3e <FAT::closeDir(void*)+0x42>
c001fd37:	b8 00 00 00 00       	mov    eax,0x0
c001fd3c:	eb 05                	jmp    c001fd43 <FAT::closeDir(void*)+0x47>
c001fd3e:	b8 01 00 00 00       	mov    eax,0x1
c001fd43:	83 c4 1c             	add    esp,0x1c
c001fd46:	c3                   	ret    
c001fd47:	90                   	nop

c001fd48 <FAT::seek(void*, unsigned long long)>:
c001fd48:	83 ec 2c             	sub    esp,0x2c
c001fd4b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001fd4f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001fd53:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001fd57:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fd5b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001fd60:	75 07                	jne    c001fd69 <FAT::seek(void*, unsigned long long)+0x21>
c001fd62:	b8 04 00 00 00       	mov    eax,0x4
c001fd67:	eb 2f                	jmp    c001fd98 <FAT::seek(void*, unsigned long long)+0x50>
c001fd69:	83 ec 04             	sub    esp,0x4
c001fd6c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001fd70:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001fd74:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001fd78:	e8 45 5b fe ff       	call   c00058c2 <f_lseek>
c001fd7d:	83 c4 10             	add    esp,0x10
c001fd80:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001fd84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fd88:	85 c0                	test   eax,eax
c001fd8a:	75 07                	jne    c001fd93 <FAT::seek(void*, unsigned long long)+0x4b>
c001fd8c:	b8 00 00 00 00       	mov    eax,0x0
c001fd91:	eb 05                	jmp    c001fd98 <FAT::seek(void*, unsigned long long)+0x50>
c001fd93:	b8 01 00 00 00       	mov    eax,0x1
c001fd98:	83 c4 2c             	add    esp,0x2c
c001fd9b:	c3                   	ret    

c001fd9c <fatWrapperReadDisk>:
c001fd9c:	83 ec 1c             	sub    esp,0x1c
c001fd9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fda3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001fda7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fdab:	89 04 24             	mov    DWORD PTR [esp],eax
c001fdae:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001fdb2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001fdb6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001fdbb:	8b 04 85 00 d0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3000]
c001fdc2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001fdc6:	83 ec 0c             	sub    esp,0xc
c001fdc9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fdcd:	52                   	push   edx
c001fdce:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fdd2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fdd6:	50                   	push   eax
c001fdd7:	e8 2a 60 ff ff       	call   c0015e06 <LogicalDisk::read(unsigned long long, int, void*)>
c001fddc:	83 c4 20             	add    esp,0x20
c001fddf:	83 c4 1c             	add    esp,0x1c
c001fde2:	c3                   	ret    

c001fde3 <fatWrapperWriteDisk>:
c001fde3:	83 ec 1c             	sub    esp,0x1c
c001fde6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fdea:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001fdee:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fdf2:	89 04 24             	mov    DWORD PTR [esp],eax
c001fdf5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001fdf9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001fdfd:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001fe02:	8b 04 85 00 d0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3000]
c001fe09:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001fe0d:	83 ec 0c             	sub    esp,0xc
c001fe10:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fe14:	52                   	push   edx
c001fe15:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fe19:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fe1d:	50                   	push   eax
c001fe1e:	e8 4f 60 ff ff       	call   c0015e72 <LogicalDisk::write(unsigned long long, int, void*)>
c001fe23:	83 c4 20             	add    esp,0x20
c001fe26:	83 c4 1c             	add    esp,0x1c
c001fe29:	c3                   	ret    

c001fe2a <fatWrapperIoctl>:
c001fe2a:	53                   	push   ebx
c001fe2b:	83 ec 28             	sub    esp,0x28
c001fe2e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001fe32:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001fe36:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001fe3a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001fe3e:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001fe43:	75 31                	jne    c001fe76 <fatWrapperIoctl+0x4c>
c001fe45:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001fe49:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001fe4d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001fe52:	8b 04 85 00 d0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3000]
c001fe59:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001fe5f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001fe65:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001fe69:	66 89 02             	mov    WORD PTR [edx],ax
c001fe6c:	b8 00 00 00 00       	mov    eax,0x0
c001fe71:	e9 b2 00 00 00       	jmp    c001ff28 <fatWrapperIoctl+0xfe>
c001fe76:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001fe7b:	75 6a                	jne    c001fee7 <fatWrapperIoctl+0xbd>
c001fe7d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001fe81:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001fe85:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001fe8a:	8b 04 85 00 d0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3000]
c001fe91:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001fe97:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001fe9d:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001fea3:	89 c8                	mov    eax,ecx
c001fea5:	89 da                	mov    edx,ebx
c001fea7:	0f a4 c2 0a          	shld   edx,eax,0xa
c001feab:	c1 e0 0a             	shl    eax,0xa
c001feae:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001feb3:	8b 0c 8d 00 d0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3000]
c001feba:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001fec0:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001fec6:	89 cb                	mov    ebx,ecx
c001fec8:	c1 fb 1f             	sar    ebx,0x1f
c001fecb:	53                   	push   ebx
c001fecc:	51                   	push   ecx
c001fecd:	52                   	push   edx
c001fece:	50                   	push   eax
c001fecf:	e8 58 55 00 00       	call   c002542c <__udivdi3>
c001fed4:	83 c4 10             	add    esp,0x10
c001fed7:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001fedb:	89 01                	mov    DWORD PTR [ecx],eax
c001fedd:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001fee0:	b8 00 00 00 00       	mov    eax,0x0
c001fee5:	eb 41                	jmp    c001ff28 <fatWrapperIoctl+0xfe>
c001fee7:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001feec:	75 07                	jne    c001fef5 <fatWrapperIoctl+0xcb>
c001feee:	b8 00 00 00 00       	mov    eax,0x0
c001fef3:	eb 33                	jmp    c001ff28 <fatWrapperIoctl+0xfe>
c001fef5:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001fefa:	75 19                	jne    c001ff15 <fatWrapperIoctl+0xeb>
c001fefc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ff00:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ff04:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ff08:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001ff0e:	b8 00 00 00 00       	mov    eax,0x0
c001ff13:	eb 13                	jmp    c001ff28 <fatWrapperIoctl+0xfe>
c001ff15:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001ff1a:	75 07                	jne    c001ff23 <fatWrapperIoctl+0xf9>
c001ff1c:	b8 00 00 00 00       	mov    eax,0x0
c001ff21:	eb 05                	jmp    c001ff28 <fatWrapperIoctl+0xfe>
c001ff23:	b8 04 00 00 00       	mov    eax,0x4
c001ff28:	83 c4 28             	add    esp,0x28
c001ff2b:	5b                   	pop    ebx
c001ff2c:	c3                   	ret    
c001ff2d:	90                   	nop

c001ff2e <FAT::FAT()>:
c001ff2e:	83 ec 1c             	sub    esp,0x1c
c001ff31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ff35:	83 ec 0c             	sub    esp,0xc
c001ff38:	50                   	push   eax
c001ff39:	e8 40 2b ff ff       	call   c0012a7e <Filesystem::Filesystem()>
c001ff3e:	83 c4 10             	add    esp,0x10
c001ff41:	ba 90 ae 02 c0       	mov    edx,0xc002ae90
c001ff46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ff4a:	89 10                	mov    DWORD PTR [eax],edx
c001ff4c:	c7 05 00 e0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e000,0x0
c001ff56:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ff5e:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001ff63:	7f 15                	jg     c001ff7a <FAT::FAT()+0x4c>
c001ff65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ff69:	c7 04 85 20 e0 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd1fe0],0xffffffff
c001ff74:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001ff78:	eb e4                	jmp    c001ff5e <FAT::FAT()+0x30>
c001ff7a:	90                   	nop
c001ff7b:	83 c4 1c             	add    esp,0x1c
c001ff7e:	c3                   	ret    
c001ff7f:	90                   	nop

c001ff80 <FAT::fixFilepath(char*)>:
c001ff80:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ff84:	8a 00                	mov    al,BYTE PTR [eax]
c001ff86:	3c 40                	cmp    al,0x40
c001ff88:	7e 2c                	jle    c001ffb6 <FAT::fixFilepath(char*)+0x36>
c001ff8a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ff8e:	8a 00                	mov    al,BYTE PTR [eax]
c001ff90:	83 e8 41             	sub    eax,0x41
c001ff93:	88 c2                	mov    dl,al
c001ff95:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ff99:	88 10                	mov    BYTE PTR [eax],dl
c001ff9b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ff9f:	8a 00                	mov    al,BYTE PTR [eax]
c001ffa1:	0f be c0             	movsx  eax,al
c001ffa4:	8b 04 85 20 e0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1fe0]
c001ffab:	83 c0 30             	add    eax,0x30
c001ffae:	88 c2                	mov    dl,al
c001ffb0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ffb4:	88 10                	mov    BYTE PTR [eax],dl
c001ffb6:	90                   	nop
c001ffb7:	c3                   	ret    

c001ffb8 <FAT::open(char const*, void**, FileOpenMode)>:
c001ffb8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001ffbe:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001ffc6:	74 0a                	je     c001ffd2 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c001ffc8:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001ffd0:	75 0a                	jne    c001ffdc <FAT::open(char const*, void**, FileOpenMode)+0x24>
c001ffd2:	b8 04 00 00 00       	mov    eax,0x4
c001ffd7:	e9 fd 00 00 00       	jmp    c00200d9 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c001ffdc:	83 ec 08             	sub    esp,0x8
c001ffdf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ffe6:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ffea:	50                   	push   eax
c001ffeb:	e8 3a 07 fe ff       	call   c000072a <strcpy>
c001fff0:	83 c4 10             	add    esp,0x10
c001fff3:	83 ec 08             	sub    esp,0x8
c001fff6:	8d 44 24 10          	lea    eax,[esp+0x10]
c001fffa:	50                   	push   eax
c001fffb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020002:	e8 79 ff ff ff       	call   c001ff80 <FAT::fixFilepath(char*)>
c0020007:	83 c4 10             	add    esp,0x10
c002000a:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0020012:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020019:	83 e0 01             	and    eax,0x1
c002001c:	74 08                	je     c0020026 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c002001e:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0020026:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002002d:	83 e0 04             	and    eax,0x4
c0020030:	74 10                	je     c0020042 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0020032:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c002003a:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020042:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020049:	83 e0 02             	and    eax,0x2
c002004c:	74 08                	je     c0020056 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c002004e:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020056:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002005d:	83 e0 08             	and    eax,0x8
c0020060:	74 08                	je     c002006a <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0020062:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c002006a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020071:	83 e0 10             	and    eax,0x10
c0020074:	74 08                	je     c002007e <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0020076:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c002007e:	83 ec 0c             	sub    esp,0xc
c0020081:	68 50 02 00 00       	push   0x250
c0020086:	e8 49 f4 fe ff       	call   c000f4d4 <malloc>
c002008b:	83 c4 10             	add    esp,0x10
c002008e:	89 c2                	mov    edx,eax
c0020090:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020097:	89 10                	mov    DWORD PTR [eax],edx
c0020099:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c00200a1:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00200a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00200aa:	83 ec 04             	sub    esp,0x4
c00200ad:	52                   	push   edx
c00200ae:	8d 54 24 10          	lea    edx,[esp+0x10]
c00200b2:	52                   	push   edx
c00200b3:	50                   	push   eax
c00200b4:	e8 88 4c fe ff       	call   c0004d41 <f_open>
c00200b9:	83 c4 10             	add    esp,0x10
c00200bc:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00200c3:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00200cb:	74 07                	je     c00200d4 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c00200cd:	b8 01 00 00 00       	mov    eax,0x1
c00200d2:	eb 05                	jmp    c00200d9 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00200d4:	b8 00 00 00 00       	mov    eax,0x0
c00200d9:	81 c4 1c 01 00 00    	add    esp,0x11c
c00200df:	c3                   	ret    

c00200e0 <FAT::openDir(char const*, void**)>:
c00200e0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00200e6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00200ee:	74 0a                	je     c00200fa <FAT::openDir(char const*, void**)+0x1a>
c00200f0:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00200f8:	75 07                	jne    c0020101 <FAT::openDir(char const*, void**)+0x21>
c00200fa:	b8 04 00 00 00       	mov    eax,0x4
c00200ff:	eb 7d                	jmp    c002017e <FAT::openDir(char const*, void**)+0x9e>
c0020101:	83 ec 08             	sub    esp,0x8
c0020104:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002010b:	8d 44 24 18          	lea    eax,[esp+0x18]
c002010f:	50                   	push   eax
c0020110:	e8 15 06 fe ff       	call   c000072a <strcpy>
c0020115:	83 c4 10             	add    esp,0x10
c0020118:	83 ec 08             	sub    esp,0x8
c002011b:	8d 44 24 14          	lea    eax,[esp+0x14]
c002011f:	50                   	push   eax
c0020120:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020127:	e8 54 fe ff ff       	call   c001ff80 <FAT::fixFilepath(char*)>
c002012c:	83 c4 10             	add    esp,0x10
c002012f:	83 ec 0c             	sub    esp,0xc
c0020132:	6a 4c                	push   0x4c
c0020134:	e8 9b f3 fe ff       	call   c000f4d4 <malloc>
c0020139:	83 c4 10             	add    esp,0x10
c002013c:	89 c2                	mov    edx,eax
c002013e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020145:	89 10                	mov    DWORD PTR [eax],edx
c0020147:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002014e:	8b 00                	mov    eax,DWORD PTR [eax]
c0020150:	83 ec 08             	sub    esp,0x8
c0020153:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020157:	52                   	push   edx
c0020158:	50                   	push   eax
c0020159:	e8 1b 5c fe ff       	call   c0005d79 <f_opendir>
c002015e:	83 c4 10             	add    esp,0x10
c0020161:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020168:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0020170:	74 07                	je     c0020179 <FAT::openDir(char const*, void**)+0x99>
c0020172:	b8 01 00 00 00       	mov    eax,0x1
c0020177:	eb 05                	jmp    c002017e <FAT::openDir(char const*, void**)+0x9e>
c0020179:	b8 00 00 00 00       	mov    eax,0x0
c002017e:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020184:	c3                   	ret    
c0020185:	90                   	nop

c0020186 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0020186:	81 ec 2c 02 00 00    	sub    esp,0x22c
c002018c:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0020194:	75 0a                	jne    c00201a0 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0020196:	b8 04 00 00 00       	mov    eax,0x4
c002019b:	e9 c9 00 00 00       	jmp    c0020269 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00201a0:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00201a8:	75 0a                	jne    c00201b4 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c00201aa:	b8 04 00 00 00       	mov    eax,0x4
c00201af:	e9 b5 00 00 00       	jmp    c0020269 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00201b4:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c00201bc:	75 0a                	jne    c00201c8 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c00201be:	b8 04 00 00 00       	mov    eax,0x4
c00201c3:	e9 a1 00 00 00       	jmp    c0020269 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00201c8:	83 ec 08             	sub    esp,0x8
c00201cb:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00201d2:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00201d9:	50                   	push   eax
c00201da:	e8 4b 05 fe ff       	call   c000072a <strcpy>
c00201df:	83 c4 10             	add    esp,0x10
c00201e2:	83 ec 08             	sub    esp,0x8
c00201e5:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00201ec:	50                   	push   eax
c00201ed:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00201f4:	e8 87 fd ff ff       	call   c001ff80 <FAT::fixFilepath(char*)>
c00201f9:	83 c4 10             	add    esp,0x10
c00201fc:	83 ec 08             	sub    esp,0x8
c00201ff:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020203:	50                   	push   eax
c0020204:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c002020b:	50                   	push   eax
c002020c:	e8 27 5d fe ff       	call   c0005f38 <f_stat>
c0020211:	83 c4 10             	add    esp,0x10
c0020214:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c002021b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0020222:	85 c0                	test   eax,eax
c0020224:	74 07                	je     c002022d <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0020226:	83 f8 04             	cmp    eax,0x4
c0020229:	74 32                	je     c002025d <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c002022b:	eb 37                	jmp    c0020264 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c002022d:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020231:	0f b6 c0             	movzx  eax,al
c0020234:	83 e0 10             	and    eax,0x10
c0020237:	0f 95 c2             	setne  dl
c002023a:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0020241:	88 10                	mov    BYTE PTR [eax],dl
c0020243:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020246:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002024a:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0020251:	89 01                	mov    DWORD PTR [ecx],eax
c0020253:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020256:	b8 00 00 00 00       	mov    eax,0x0
c002025b:	eb 0c                	jmp    c0020269 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002025d:	b8 02 00 00 00       	mov    eax,0x2
c0020262:	eb 05                	jmp    c0020269 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020264:	b8 01 00 00 00       	mov    eax,0x1
c0020269:	81 c4 2c 02 00 00    	add    esp,0x22c
c002026f:	c3                   	ret    

c0020270 <FAT::unlink(char const*)>:
c0020270:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020276:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002027e:	75 07                	jne    c0020287 <FAT::unlink(char const*)+0x17>
c0020280:	b8 04 00 00 00       	mov    eax,0x4
c0020285:	eb 5c                	jmp    c00202e3 <FAT::unlink(char const*)+0x73>
c0020287:	83 ec 08             	sub    esp,0x8
c002028a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020291:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020295:	50                   	push   eax
c0020296:	e8 8f 04 fe ff       	call   c000072a <strcpy>
c002029b:	83 c4 10             	add    esp,0x10
c002029e:	83 ec 08             	sub    esp,0x8
c00202a1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00202a5:	50                   	push   eax
c00202a6:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00202ad:	e8 ce fc ff ff       	call   c001ff80 <FAT::fixFilepath(char*)>
c00202b2:	83 c4 10             	add    esp,0x10
c00202b5:	83 ec 0c             	sub    esp,0xc
c00202b8:	8d 44 24 18          	lea    eax,[esp+0x18]
c00202bc:	50                   	push   eax
c00202bd:	e8 c8 5f fe ff       	call   c000628a <f_unlink>
c00202c2:	83 c4 10             	add    esp,0x10
c00202c5:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00202cc:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00202d3:	85 c0                	test   eax,eax
c00202d5:	75 07                	jne    c00202de <FAT::unlink(char const*)+0x6e>
c00202d7:	b8 00 00 00 00       	mov    eax,0x0
c00202dc:	eb 05                	jmp    c00202e3 <FAT::unlink(char const*)+0x73>
c00202de:	b8 01 00 00 00       	mov    eax,0x1
c00202e3:	81 c4 1c 01 00 00    	add    esp,0x11c
c00202e9:	c3                   	ret    

c00202ea <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c00202ea:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00202f0:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c00202f7:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c00202fe:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020302:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020306:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c002030e:	75 0a                	jne    c002031a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0020310:	b8 04 00 00 00       	mov    eax,0x4
c0020315:	e9 1c 01 00 00       	jmp    c0020436 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c002031a:	83 ec 08             	sub    esp,0x8
c002031d:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020324:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020328:	50                   	push   eax
c0020329:	e8 fc 03 fe ff       	call   c000072a <strcpy>
c002032e:	83 c4 10             	add    esp,0x10
c0020331:	83 ec 08             	sub    esp,0x8
c0020334:	8d 44 24 20          	lea    eax,[esp+0x20]
c0020338:	50                   	push   eax
c0020339:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020340:	e8 3b fc ff ff       	call   c001ff80 <FAT::fixFilepath(char*)>
c0020345:	83 c4 10             	add    esp,0x10
c0020348:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0020350:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0020358:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002035d:	83 e0 01             	and    eax,0x1
c0020360:	74 08                	je     c002036a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0020362:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c002036a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002036f:	83 e0 02             	and    eax,0x2
c0020372:	74 08                	je     c002037c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0020374:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c002037c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020381:	83 e0 04             	and    eax,0x4
c0020384:	74 08                	je     c002038e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0020386:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c002038e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020393:	83 e0 08             	and    eax,0x8
c0020396:	74 08                	je     c00203a0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0020398:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c00203a0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00203a5:	83 e0 01             	and    eax,0x1
c00203a8:	74 08                	je     c00203b2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c00203aa:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c00203b2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00203b7:	83 e0 02             	and    eax,0x2
c00203ba:	74 08                	je     c00203c4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c00203bc:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c00203c4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00203c9:	83 e0 04             	and    eax,0x4
c00203cc:	74 08                	je     c00203d6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c00203ce:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c00203d6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00203db:	83 e0 08             	and    eax,0x8
c00203de:	74 08                	je     c00203e8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c00203e0:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c00203e8:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00203ef:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c00203f6:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c00203fe:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0020406:	83 ec 04             	sub    esp,0x4
c0020409:	52                   	push   edx
c002040a:	50                   	push   eax
c002040b:	8d 44 24 24          	lea    eax,[esp+0x24]
c002040f:	50                   	push   eax
c0020410:	e8 17 65 fe ff       	call   c000692c <f_chmod>
c0020415:	83 c4 10             	add    esp,0x10
c0020418:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c002041f:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0020426:	85 c0                	test   eax,eax
c0020428:	75 07                	jne    c0020431 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c002042a:	b8 00 00 00 00       	mov    eax,0x0
c002042f:	eb 05                	jmp    c0020436 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0020431:	b8 01 00 00 00       	mov    eax,0x1
c0020436:	81 c4 2c 01 00 00    	add    esp,0x12c
c002043c:	c3                   	ret    
c002043d:	90                   	nop

c002043e <FAT::rename(char const*, char const*)>:
c002043e:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0020444:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c002044c:	74 0a                	je     c0020458 <FAT::rename(char const*, char const*)+0x1a>
c002044e:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0020456:	75 0a                	jne    c0020462 <FAT::rename(char const*, char const*)+0x24>
c0020458:	b8 04 00 00 00       	mov    eax,0x4
c002045d:	e9 98 00 00 00       	jmp    c00204fa <FAT::rename(char const*, char const*)+0xbc>
c0020462:	83 ec 08             	sub    esp,0x8
c0020465:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c002046c:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020473:	50                   	push   eax
c0020474:	e8 b1 02 fe ff       	call   c000072a <strcpy>
c0020479:	83 c4 10             	add    esp,0x10
c002047c:	83 ec 08             	sub    esp,0x8
c002047f:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0020486:	50                   	push   eax
c0020487:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c002048e:	e8 ed fa ff ff       	call   c001ff80 <FAT::fixFilepath(char*)>
c0020493:	83 c4 10             	add    esp,0x10
c0020496:	83 ec 08             	sub    esp,0x8
c0020499:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c00204a0:	8d 44 24 18          	lea    eax,[esp+0x18]
c00204a4:	50                   	push   eax
c00204a5:	e8 80 02 fe ff       	call   c000072a <strcpy>
c00204aa:	83 c4 10             	add    esp,0x10
c00204ad:	83 ec 08             	sub    esp,0x8
c00204b0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00204b4:	50                   	push   eax
c00204b5:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00204bc:	e8 bf fa ff ff       	call   c001ff80 <FAT::fixFilepath(char*)>
c00204c1:	83 c4 10             	add    esp,0x10
c00204c4:	83 ec 08             	sub    esp,0x8
c00204c7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00204cb:	50                   	push   eax
c00204cc:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00204d3:	50                   	push   eax
c00204d4:	e8 60 61 fe ff       	call   c0006639 <f_rename>
c00204d9:	83 c4 10             	add    esp,0x10
c00204dc:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c00204e3:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c00204ea:	85 c0                	test   eax,eax
c00204ec:	75 07                	jne    c00204f5 <FAT::rename(char const*, char const*)+0xb7>
c00204ee:	b8 00 00 00 00       	mov    eax,0x0
c00204f3:	eb 05                	jmp    c00204fa <FAT::rename(char const*, char const*)+0xbc>
c00204f5:	b8 01 00 00 00       	mov    eax,0x1
c00204fa:	81 c4 1c 02 00 00    	add    esp,0x21c
c0020500:	c3                   	ret    
c0020501:	90                   	nop

c0020502 <FAT::mkdir(char const*)>:
c0020502:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020508:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020510:	75 07                	jne    c0020519 <FAT::mkdir(char const*)+0x17>
c0020512:	b8 04 00 00 00       	mov    eax,0x4
c0020517:	eb 5c                	jmp    c0020575 <FAT::mkdir(char const*)+0x73>
c0020519:	83 ec 08             	sub    esp,0x8
c002051c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020523:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020527:	50                   	push   eax
c0020528:	e8 fd 01 fe ff       	call   c000072a <strcpy>
c002052d:	83 c4 10             	add    esp,0x10
c0020530:	83 ec 08             	sub    esp,0x8
c0020533:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020537:	50                   	push   eax
c0020538:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002053f:	e8 3c fa ff ff       	call   c001ff80 <FAT::fixFilepath(char*)>
c0020544:	83 c4 10             	add    esp,0x10
c0020547:	83 ec 0c             	sub    esp,0xc
c002054a:	8d 44 24 18          	lea    eax,[esp+0x18]
c002054e:	50                   	push   eax
c002054f:	e8 b9 5e fe ff       	call   c000640d <f_mkdir>
c0020554:	83 c4 10             	add    esp,0x10
c0020557:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c002055e:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0020565:	85 c0                	test   eax,eax
c0020567:	75 07                	jne    c0020570 <FAT::mkdir(char const*)+0x6e>
c0020569:	b8 00 00 00 00       	mov    eax,0x0
c002056e:	eb 05                	jmp    c0020575 <FAT::mkdir(char const*)+0x73>
c0020570:	b8 01 00 00 00       	mov    eax,0x1
c0020575:	81 c4 1c 01 00 00    	add    esp,0x11c
c002057b:	c3                   	ret    

c002057c <FAT::exists(char const*)>:
c002057c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0020582:	83 ec 08             	sub    esp,0x8
c0020585:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002058c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020590:	50                   	push   eax
c0020591:	e8 94 01 fe ff       	call   c000072a <strcpy>
c0020596:	83 c4 10             	add    esp,0x10
c0020599:	83 ec 08             	sub    esp,0x8
c002059c:	8d 44 24 08          	lea    eax,[esp+0x8]
c00205a0:	50                   	push   eax
c00205a1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00205a8:	e8 d3 f9 ff ff       	call   c001ff80 <FAT::fixFilepath(char*)>
c00205ad:	83 c4 10             	add    esp,0x10
c00205b0:	83 ec 08             	sub    esp,0x8
c00205b3:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c00205ba:	50                   	push   eax
c00205bb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00205bf:	50                   	push   eax
c00205c0:	e8 73 59 fe ff       	call   c0005f38 <f_stat>
c00205c5:	83 c4 10             	add    esp,0x10
c00205c8:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00205cf:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00205d6:	85 c0                	test   eax,eax
c00205d8:	75 04                	jne    c00205de <FAT::exists(char const*)+0x62>
c00205da:	b0 01                	mov    al,0x1
c00205dc:	eb 02                	jmp    c00205e0 <FAT::exists(char const*)+0x64>
c00205de:	b0 00                	mov    al,0x0
c00205e0:	81 c4 2c 02 00 00    	add    esp,0x22c
c00205e6:	c3                   	ret    
c00205e7:	90                   	nop

c00205e8 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c00205e8:	b8 08 00 00 00       	mov    eax,0x8
c00205ed:	c3                   	ret    

c00205ee <ISO9660::seek(void*, unsigned long long)>:
c00205ee:	53                   	push   ebx
c00205ef:	b8 04 00 00 00       	mov    eax,0x4
c00205f4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00205f8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00205fc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020600:	85 d2                	test   edx,edx
c0020602:	74 17                	je     c002061b <ISO9660::seek(void*, unsigned long long)+0x2d>
c0020604:	89 c8                	mov    eax,ecx
c0020606:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0020609:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c002060c:	b8 01 00 00 00       	mov    eax,0x1
c0020611:	73 08                	jae    c002061b <ISO9660::seek(void*, unsigned long long)+0x2d>
c0020613:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0020616:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0020619:	31 c0                	xor    eax,eax
c002061b:	5b                   	pop    ebx
c002061c:	c3                   	ret    
c002061d:	90                   	nop

c002061e <ISO9660::tell(void*, unsigned long long*)>:
c002061e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020622:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020626:	85 d2                	test   edx,edx
c0020628:	74 12                	je     c002063c <ISO9660::tell(void*, unsigned long long*)+0x1e>
c002062a:	85 c0                	test   eax,eax
c002062c:	74 0e                	je     c002063c <ISO9660::tell(void*, unsigned long long*)+0x1e>
c002062e:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0020631:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0020634:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0020637:	89 10                	mov    DWORD PTR [eax],edx
c0020639:	31 c0                	xor    eax,eax
c002063b:	c3                   	ret    
c002063c:	b8 04 00 00 00       	mov    eax,0x4
c0020641:	c3                   	ret    

c0020642 <ISO9660::getName()>:
c0020642:	b8 ec ae 02 c0       	mov    eax,0xc002aeec
c0020647:	c3                   	ret    

c0020648 <ISO9660::stat(void*, unsigned long long*)>:
c0020648:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002064c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020650:	85 d2                	test   edx,edx
c0020652:	74 12                	je     c0020666 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0020654:	85 c0                	test   eax,eax
c0020656:	74 0e                	je     c0020666 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0020658:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c002065b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c002065e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0020661:	89 10                	mov    DWORD PTR [eax],edx
c0020663:	31 c0                	xor    eax,eax
c0020665:	c3                   	ret    
c0020666:	b8 04 00 00 00       	mov    eax,0x4
c002066b:	c3                   	ret    

c002066c <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c002066c:	b8 01 00 00 00       	mov    eax,0x1
c0020671:	c3                   	ret    

c0020672 <ISO9660::unlink(char const*)>:
c0020672:	b8 01 00 00 00       	mov    eax,0x1
c0020677:	c3                   	ret    

c0020678 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0020678:	b8 01 00 00 00       	mov    eax,0x1
c002067d:	c3                   	ret    

c002067e <ISO9660::rename(char const*, char const*)>:
c002067e:	b8 01 00 00 00       	mov    eax,0x1
c0020683:	c3                   	ret    

c0020684 <ISO9660::mkdir(char const*)>:
c0020684:	b8 01 00 00 00       	mov    eax,0x1
c0020689:	c3                   	ret    

c002068a <ISO9660::close(void*)>:
c002068a:	83 ec 0c             	sub    esp,0xc
c002068d:	b8 04 00 00 00       	mov    eax,0x4
c0020692:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020696:	85 d2                	test   edx,edx
c0020698:	74 0e                	je     c00206a8 <ISO9660::close(void*)+0x1e>
c002069a:	83 ec 0c             	sub    esp,0xc
c002069d:	52                   	push   edx
c002069e:	e8 41 ee fe ff       	call   c000f4e4 <free>
c00206a3:	83 c4 10             	add    esp,0x10
c00206a6:	31 c0                	xor    eax,eax
c00206a8:	83 c4 0c             	add    esp,0xc
c00206ab:	c3                   	ret    

c00206ac <ISO9660::closeDir(void*)>:
c00206ac:	83 ec 0c             	sub    esp,0xc
c00206af:	b8 04 00 00 00       	mov    eax,0x4
c00206b4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00206b8:	85 d2                	test   edx,edx
c00206ba:	74 0e                	je     c00206ca <ISO9660::closeDir(void*)+0x1e>
c00206bc:	83 ec 0c             	sub    esp,0xc
c00206bf:	52                   	push   edx
c00206c0:	e8 1f ee fe ff       	call   c000f4e4 <free>
c00206c5:	83 c4 10             	add    esp,0x10
c00206c8:	31 c0                	xor    eax,eax
c00206ca:	83 c4 0c             	add    esp,0xc
c00206cd:	c3                   	ret    

c00206ce <ISO9660::~ISO9660()>:
c00206ce:	83 ec 0c             	sub    esp,0xc
c00206d1:	ba 50 af 02 c0       	mov    edx,0xc002af50
c00206d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00206da:	89 10                	mov    DWORD PTR [eax],edx
c00206dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00206e0:	83 ec 0c             	sub    esp,0xc
c00206e3:	50                   	push   eax
c00206e4:	e8 b9 23 ff ff       	call   c0012aa2 <Filesystem::~Filesystem()>
c00206e9:	83 c4 10             	add    esp,0x10
c00206ec:	90                   	nop
c00206ed:	83 c4 0c             	add    esp,0xc
c00206f0:	c3                   	ret    
c00206f1:	90                   	nop

c00206f2 <ISO9660::~ISO9660()>:
c00206f2:	83 ec 0c             	sub    esp,0xc
c00206f5:	83 ec 0c             	sub    esp,0xc
c00206f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00206fc:	e8 cd ff ff ff       	call   c00206ce <ISO9660::~ISO9660()>
c0020701:	83 c4 10             	add    esp,0x10
c0020704:	83 ec 08             	sub    esp,0x8
c0020707:	6a 08                	push   0x8
c0020709:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002070d:	e8 87 1f ff ff       	call   c0012699 <operator delete(void*, unsigned long)>
c0020712:	83 c4 10             	add    esp,0x10
c0020715:	83 c4 0c             	add    esp,0xc
c0020718:	c3                   	ret    

c0020719 <__memmem(unsigned char*, int, unsigned char*, int)>:
c0020719:	55                   	push   ebp
c002071a:	31 c9                	xor    ecx,ecx
c002071c:	57                   	push   edi
c002071d:	56                   	push   esi
c002071e:	53                   	push   ebx
c002071f:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0020723:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0020727:	89 eb                	mov    ebx,ebp
c0020729:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c002072d:	39 ce                	cmp    esi,ecx
c002072f:	7e 17                	jle    c0020748 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0020731:	31 d2                	xor    edx,edx
c0020733:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0020737:	7d 13                	jge    c002074c <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0020739:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002073d:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0020740:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0020743:	75 0d                	jne    c0020752 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0020745:	42                   	inc    edx
c0020746:	eb eb                	jmp    c0020733 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0020748:	31 c0                	xor    eax,eax
c002074a:	eb 0a                	jmp    c0020756 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c002074c:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0020750:	eb 04                	jmp    c0020756 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0020752:	41                   	inc    ecx
c0020753:	43                   	inc    ebx
c0020754:	eb d7                	jmp    c002072d <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0020756:	5b                   	pop    ebx
c0020757:	5e                   	pop    esi
c0020758:	5f                   	pop    edi
c0020759:	5d                   	pop    ebp
c002075a:	c3                   	ret    

c002075b <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c002075b:	56                   	push   esi
c002075c:	53                   	push   ebx
c002075d:	52                   	push   edx
c002075e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020762:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0020766:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002076a:	39 0d 00 e1 02 c0    	cmp    DWORD PTR ds:0xc002e100,ecx
c0020770:	75 08                	jne    c002077a <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0020772:	38 05 74 bf 02 c0    	cmp    BYTE PTR ds:0xc002bf74,al
c0020778:	74 2b                	je     c00207a5 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c002077a:	83 ec 0c             	sub    esp,0xc
c002077d:	a2 74 bf 02 c0       	mov    ds:0xc002bf74,al
c0020782:	68 20 e1 02 c0       	push   0xc002e120
c0020787:	0f be c0             	movsx  eax,al
c002078a:	6a 01                	push   0x1
c002078c:	89 0d 00 e1 02 c0    	mov    DWORD PTR ds:0xc002e100,ecx
c0020792:	31 db                	xor    ebx,ebx
c0020794:	53                   	push   ebx
c0020795:	51                   	push   ecx
c0020796:	ff 34 85 fc ce 02 c0 	push   DWORD PTR [eax*4-0x3ffd3104]
c002079d:	e8 64 56 ff ff       	call   c0015e06 <LogicalDisk::read(unsigned long long, int, void*)>
c00207a2:	83 c4 20             	add    esp,0x20
c00207a5:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c00207ad:	c7 44 24 14 20 e1 02 c0 	mov    DWORD PTR [esp+0x14],0xc002e120
c00207b5:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00207b9:	58                   	pop    eax
c00207ba:	5b                   	pop    ebx
c00207bb:	5e                   	pop    esi
c00207bc:	e9 94 fe fd ff       	jmp    c0000655 <memcpy>
c00207c1:	90                   	nop

c00207c2 <ISO9660::tryMount(LogicalDisk*, int)>:
c00207c2:	81 ec 10 08 00 00    	sub    esp,0x810
c00207c8:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c00207cf:	83 c0 41             	add    eax,0x41
c00207d2:	0f be c0             	movsx  eax,al
c00207d5:	50                   	push   eax
c00207d6:	8d 44 24 08          	lea    eax,[esp+0x8]
c00207da:	50                   	push   eax
c00207db:	6a 10                	push   0x10
c00207dd:	e8 79 ff ff ff       	call   c002075b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00207e2:	83 c4 10             	add    esp,0x10
c00207e5:	31 c0                	xor    eax,eax
c00207e7:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c00207ec:	75 1d                	jne    c002080b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00207ee:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c00207f3:	75 16                	jne    c002080b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00207f5:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c00207fa:	75 0f                	jne    c002080b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00207fc:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0020801:	75 08                	jne    c002080b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0020803:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0020808:	0f 94 c0             	sete   al
c002080b:	81 c4 0c 08 00 00    	add    esp,0x80c
c0020811:	c3                   	ret    

c0020812 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0020812:	55                   	push   ebp
c0020813:	57                   	push   edi
c0020814:	56                   	push   esi
c0020815:	53                   	push   ebx
c0020816:	81 ec 2c 08 00 00    	sub    esp,0x82c
c002081c:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c0020823:	85 ed                	test   ebp,ebp
c0020825:	0f 84 d6 01 00 00    	je     c0020a01 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c002082b:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0020833:	0f 84 c8 01 00 00    	je     c0020a01 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0020839:	b8 01 00 00 00       	mov    eax,0x1
c002083e:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c0020842:	0f 85 be 01 00 00    	jne    c0020a06 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0020848:	31 d2                	xor    edx,edx
c002084a:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0020851:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0020854:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0020857:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002085b:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
c002085e:	89 04 24             	mov    DWORD PTR [esp],eax
c0020861:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0020865:	01 f0                	add    eax,esi
c0020867:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c002086a:	11 fa                	adc    edx,edi
c002086c:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0020870:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0020874:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020878:	19 d1                	sbb    ecx,edx
c002087a:	72 0a                	jb     c0020886 <ISO9660::read(void*, unsigned long, void*, int*)+0x74>
c002087c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020880:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020884:	eb 13                	jmp    c0020899 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0020886:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002088a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002088e:	29 f0                	sub    eax,esi
c0020890:	19 fa                	sbb    edx,edi
c0020892:	89 04 24             	mov    DWORD PTR [esp],eax
c0020895:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0020899:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002089c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c002089f:	0f a4 c2 0b          	shld   edx,eax,0xb
c00208a3:	51                   	push   ecx
c00208a4:	c1 e0 0b             	shl    eax,0xb
c00208a7:	01 c6                	add    esi,eax
c00208a9:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00208ad:	11 d7                	adc    edi,edx
c00208af:	50                   	push   eax
c00208b0:	89 fa                	mov    edx,edi
c00208b2:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c00208b6:	89 f0                	mov    eax,esi
c00208b8:	53                   	push   ebx
c00208b9:	0f ac d0 0b          	shrd   eax,edx,0xb
c00208bd:	50                   	push   eax
c00208be:	e8 98 fe ff ff       	call   c002075b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00208c3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00208c7:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00208ca:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00208ce:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00208d4:	83 c4 10             	add    esp,0x10
c00208d7:	b8 00 08 00 00       	mov    eax,0x800
c00208dc:	29 d0                	sub    eax,edx
c00208de:	39 c1                	cmp    ecx,eax
c00208e0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00208e4:	83 d9 00             	sbb    ecx,0x0
c00208e7:	7d 1c                	jge    c0020905 <ISO9660::read(void*, unsigned long, void*, int*)+0xf3>
c00208e9:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00208ee:	75 12                	jne    c0020902 <ISO9660::read(void*, unsigned long, void*, int*)+0xf0>
c00208f0:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00208f7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00208fd:	e9 fb 00 00 00       	jmp    c00209fd <ISO9660::read(void*, unsigned long, void*, int*)+0x1eb>
c0020902:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020905:	8d 0c 13             	lea    ecx,[ebx+edx*1]
c0020908:	31 d2                	xor    edx,edx
c002090a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c002090e:	39 c2                	cmp    edx,eax
c0020910:	7d 14                	jge    c0020926 <ISO9660::read(void*, unsigned long, void*, int*)+0x114>
c0020912:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0020919:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002091d:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0020920:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0020923:	42                   	inc    edx
c0020924:	eb e8                	jmp    c002090e <ISO9660::read(void*, unsigned long, void*, int*)+0xfc>
c0020926:	89 c3                	mov    ebx,eax
c0020928:	85 c0                	test   eax,eax
c002092a:	79 02                	jns    c002092e <ISO9660::read(void*, unsigned long, void*, int*)+0x11c>
c002092c:	31 db                	xor    ebx,ebx
c002092e:	99                   	cdq    
c002092f:	01 c3                	add    ebx,eax
c0020931:	03 9c 24 4c 08 00 00 	add    ebx,DWORD PTR [esp+0x84c]
c0020938:	01 c6                	add    esi,eax
c002093a:	11 d7                	adc    edi,edx
c002093c:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0020940:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0020944:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0020947:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c002094b:	29 c6                	sub    esi,eax
c002094d:	19 d7                	sbb    edi,edx
c002094f:	89 34 24             	mov    DWORD PTR [esp],esi
c0020952:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0020956:	b8 ff 07 00 00       	mov    eax,0x7ff
c002095b:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c002095e:	b8 00 00 00 00       	mov    eax,0x0
c0020963:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0020967:	7d 3e                	jge    c00209a7 <ISO9660::read(void*, unsigned long, void*, int*)+0x195>
c0020969:	52                   	push   edx
c002096a:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c002096e:	50                   	push   eax
c002096f:	53                   	push   ebx
c0020970:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020974:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0020978:	0f ac d0 0b          	shrd   eax,edx,0xb
c002097c:	50                   	push   eax
c002097d:	e8 d9 fd ff ff       	call   c002075b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020982:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c002098a:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c002098f:	81 c3 00 08 00 00    	add    ebx,0x800
c0020995:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c002099d:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c00209a2:	83 c4 10             	add    esp,0x10
c00209a5:	eb af                	jmp    c0020956 <ISO9660::read(void*, unsigned long, void*, int*)+0x144>
c00209a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00209ab:	0b 04 24             	or     eax,DWORD PTR [esp]
c00209ae:	74 32                	je     c00209e2 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c00209b0:	50                   	push   eax
c00209b1:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00209b5:	50                   	push   eax
c00209b6:	8d 44 24 28          	lea    eax,[esp+0x28]
c00209ba:	50                   	push   eax
c00209bb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00209bf:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00209c3:	0f ac fe 0b          	shrd   esi,edi,0xb
c00209c7:	56                   	push   esi
c00209c8:	e8 8e fd ff ff       	call   c002075b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00209cd:	83 c4 0c             	add    esp,0xc
c00209d0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00209d4:	8d 44 24 28          	lea    eax,[esp+0x28]
c00209d8:	50                   	push   eax
c00209d9:	53                   	push   ebx
c00209da:	e8 76 fc fd ff       	call   c0000655 <memcpy>
c00209df:	83 c4 10             	add    esp,0x10
c00209e2:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00209e9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00209ed:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00209f1:	89 38                	mov    DWORD PTR [eax],edi
c00209f3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00209f7:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00209fa:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00209fd:	31 c0                	xor    eax,eax
c00209ff:	eb 05                	jmp    c0020a06 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0020a01:	b8 04 00 00 00       	mov    eax,0x4
c0020a06:	81 c4 2c 08 00 00    	add    esp,0x82c
c0020a0c:	5b                   	pop    ebx
c0020a0d:	5e                   	pop    esi
c0020a0e:	5f                   	pop    edi
c0020a0f:	5d                   	pop    ebp
c0020a10:	c3                   	ret    
c0020a11:	90                   	nop

c0020a12 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0020a12:	55                   	push   ebp
c0020a13:	57                   	push   edi
c0020a14:	56                   	push   esi
c0020a15:	53                   	push   ebx
c0020a16:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0020a1c:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c0020a23:	85 f6                	test   esi,esi
c0020a25:	0f 84 64 02 00 00    	je     c0020c8f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0020a2b:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0020a33:	0f 84 56 02 00 00    	je     c0020c8f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0020a39:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0020a3c:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c0020a3f:	75 0a                	jne    c0020a4b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0020a41:	b8 07 00 00 00       	mov    eax,0x7
c0020a46:	e9 49 02 00 00       	jmp    c0020c94 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0020a4b:	50                   	push   eax
c0020a4c:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0020a50:	50                   	push   eax
c0020a51:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0020a58:	53                   	push   ebx
c0020a59:	8b 06                	mov    eax,DWORD PTR [esi]
c0020a5b:	c1 e0 0b             	shl    eax,0xb
c0020a5e:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0020a61:	c1 e8 0b             	shr    eax,0xb
c0020a64:	50                   	push   eax
c0020a65:	e8 f1 fc ff ff       	call   c002075b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020a6a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0020a6d:	83 c4 10             	add    esp,0x10
c0020a70:	89 c1                	mov    ecx,eax
c0020a72:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c0020a75:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0020a7b:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0020a7e:	84 db                	test   bl,bl
c0020a80:	0f 85 90 00 00 00    	jne    c0020b16 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c0020a86:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c0020a8c:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0020a92:	29 c7                	sub    edi,eax
c0020a94:	89 fb                	mov    ebx,edi
c0020a96:	c1 fb 1f             	sar    ebx,0x1f
c0020a99:	01 f8                	add    eax,edi
c0020a9b:	11 da                	adc    edx,ebx
c0020a9d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020aa1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020aa5:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0020aa8:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c0020aab:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0020aae:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0020ab1:	89 04 24             	mov    DWORD PTR [esp],eax
c0020ab4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0020ab8:	89 d8                	mov    eax,ebx
c0020aba:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0020abd:	ba 00 00 00 00       	mov    edx,0x0
c0020ac2:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0020ac6:	b8 00 00 00 00       	mov    eax,0x0
c0020acb:	73 0b                	jae    c0020ad8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0020acd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020ad0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020ad4:	29 f8                	sub    eax,edi
c0020ad6:	19 da                	sbb    edx,ebx
c0020ad8:	89 d3                	mov    ebx,edx
c0020ada:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0020add:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0020ae0:	09 c3                	or     ebx,eax
c0020ae2:	0f 84 59 ff ff ff    	je     c0020a41 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0020ae8:	55                   	push   ebp
c0020ae9:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0020aed:	50                   	push   eax
c0020aee:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0020af5:	53                   	push   ebx
c0020af6:	8b 06                	mov    eax,DWORD PTR [esi]
c0020af8:	c1 e0 0b             	shl    eax,0xb
c0020afb:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0020aff:	c1 e8 0b             	shr    eax,0xb
c0020b02:	50                   	push   eax
c0020b03:	e8 53 fc ff ff       	call   c002075b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020b08:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0020b0b:	83 c4 10             	add    esp,0x10
c0020b0e:	25 ff 07 00 00       	and    eax,0x7ff
c0020b13:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0020b16:	57                   	push   edi
c0020b17:	6a 28                	push   0x28
c0020b19:	6a 00                	push   0x0
c0020b1b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020b1f:	50                   	push   eax
c0020b20:	e8 66 fb fd ff       	call   c000068b <memset>
c0020b25:	31 d2                	xor    edx,edx
c0020b27:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0020b2a:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0020b30:	89 f8                	mov    eax,edi
c0020b32:	83 c0 21             	add    eax,0x21
c0020b35:	83 d2 00             	adc    edx,0x0
c0020b38:	89 c7                	mov    edi,eax
c0020b3a:	89 d5                	mov    ebp,edx
c0020b3c:	83 c4 10             	add    esp,0x10
c0020b3f:	31 c9                	xor    ecx,ecx
c0020b41:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c0020b48:	83 f9 28             	cmp    ecx,0x28
c0020b4b:	88 04 24             	mov    BYTE PTR [esp],al
c0020b4e:	0f 94 c2             	sete   dl
c0020b51:	88 d0                	mov    al,dl
c0020b53:	ba ff 07 00 00       	mov    edx,0x7ff
c0020b58:	39 fa                	cmp    edx,edi
c0020b5a:	ba 00 00 00 00       	mov    edx,0x0
c0020b5f:	19 ea                	sbb    edx,ebp
c0020b61:	0f 92 c2             	setb   dl
c0020b64:	09 c2                	or     edx,eax
c0020b66:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0020b6a:	0f 94 c0             	sete   al
c0020b6d:	08 d0                	or     al,dl
c0020b6f:	75 16                	jne    c0020b87 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0020b71:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0020b75:	74 10                	je     c0020b87 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0020b77:	8a 04 24             	mov    al,BYTE PTR [esp]
c0020b7a:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0020b7e:	41                   	inc    ecx
c0020b7f:	83 c7 01             	add    edi,0x1
c0020b82:	83 d5 00             	adc    ebp,0x0
c0020b85:	eb ba                	jmp    c0020b41 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c0020b87:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0020b8e:	83 ec 0c             	sub    esp,0xc
c0020b91:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0020b95:	57                   	push   edi
c0020b96:	e8 0d fb fd ff       	call   c00006a8 <strlen>
c0020b9b:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0020ba3:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0020ba7:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c0020bae:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0020bb1:	5a                   	pop    edx
c0020bb2:	25 ff 07 00 00       	and    eax,0x7ff
c0020bb7:	01 c8                	add    eax,ecx
c0020bb9:	59                   	pop    ecx
c0020bba:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0020bc0:	83 e0 02             	and    eax,0x2
c0020bc3:	3c 01                	cmp    al,0x1
c0020bc5:	19 c0                	sbb    eax,eax
c0020bc7:	83 c0 02             	add    eax,0x2
c0020bca:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0020bce:	57                   	push   edi
c0020bcf:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0020bd3:	50                   	push   eax
c0020bd4:	e8 51 fb fd ff       	call   c000072a <strcpy>
c0020bd9:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0020bdd:	83 c4 10             	add    esp,0x10
c0020be0:	84 c0                	test   al,al
c0020be2:	75 21                	jne    c0020c05 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c0020be4:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0020bec:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0020bf4:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0020bfc:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0020c03:	eb 28                	jmp    c0020c2d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0020c05:	fe c8                	dec    al
c0020c07:	75 24                	jne    c0020c2d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0020c09:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0020c11:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0020c19:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0020c21:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0020c28:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0020c2d:	0f b6 fb             	movzx  edi,bl
c0020c30:	31 db                	xor    ebx,ebx
c0020c32:	50                   	push   eax
c0020c33:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c0020c3a:	8d 44 24 48          	lea    eax,[esp+0x48]
c0020c3e:	50                   	push   eax
c0020c3f:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c0020c46:	e8 0a fa fd ff       	call   c0000655 <memcpy>
c0020c4b:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c0020c52:	89 f9                	mov    ecx,edi
c0020c54:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020c5a:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c0020c5d:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0020c60:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c0020c63:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0020c66:	83 c4 10             	add    esp,0x10
c0020c69:	39 c7                	cmp    edi,eax
c0020c6b:	89 df                	mov    edi,ebx
c0020c6d:	19 d7                	sbb    edi,edx
c0020c6f:	72 10                	jb     c0020c81 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0020c71:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0020c78:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0020c7f:	eb 0a                	jmp    c0020c8b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c0020c81:	29 c8                	sub    eax,ecx
c0020c83:	19 da                	sbb    edx,ebx
c0020c85:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0020c88:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0020c8b:	31 c0                	xor    eax,eax
c0020c8d:	eb 05                	jmp    c0020c94 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0020c8f:	b8 04 00 00 00       	mov    eax,0x4
c0020c94:	81 c4 5c 09 00 00    	add    esp,0x95c
c0020c9a:	5b                   	pop    ebx
c0020c9b:	5e                   	pop    esi
c0020c9c:	5f                   	pop    edi
c0020c9d:	5d                   	pop    ebp
c0020c9e:	c3                   	ret    

c0020c9f <readRoot(unsigned int*, unsigned int*, char)>:
c0020c9f:	81 ec 40 08 00 00    	sub    esp,0x840
c0020ca5:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0020cad:	50                   	push   eax
c0020cae:	8d 44 24 38          	lea    eax,[esp+0x38]
c0020cb2:	50                   	push   eax
c0020cb3:	6a 10                	push   0x10
c0020cb5:	e8 a1 fa ff ff       	call   c002075b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020cba:	83 c4 0c             	add    esp,0xc
c0020cbd:	6a 22                	push   0x22
c0020cbf:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c0020cc6:	50                   	push   eax
c0020cc7:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0020ccb:	50                   	push   eax
c0020ccc:	e8 84 f9 fd ff       	call   c0000655 <memcpy>
c0020cd1:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0020cd8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0020cdc:	89 10                	mov    DWORD PTR [eax],edx
c0020cde:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0020ce5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0020ce9:	89 10                	mov    DWORD PTR [eax],edx
c0020ceb:	b0 01                	mov    al,0x1
c0020ced:	81 c4 4c 08 00 00    	add    esp,0x84c
c0020cf3:	c3                   	ret    

c0020cf4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0020cf4:	55                   	push   ebp
c0020cf5:	57                   	push   edi
c0020cf6:	56                   	push   esi
c0020cf7:	53                   	push   ebx
c0020cf8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020cfe:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0020d05:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0020d0c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020d10:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0020d14:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0020d18:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020d1c:	75 03                	jne    c0020d21 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0020d1e:	83 c3 02             	add    ebx,0x2
c0020d21:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0020d24:	75 03                	jne    c0020d29 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0020d26:	43                   	inc    ebx
c0020d27:	eb f8                	jmp    c0020d21 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0020d29:	51                   	push   ecx
c0020d2a:	68 00 01 00 00       	push   0x100
c0020d2f:	6a 00                	push   0x0
c0020d31:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020d35:	50                   	push   eax
c0020d36:	e8 50 f9 fd ff       	call   c000068b <memset>
c0020d3b:	83 c4 10             	add    esp,0x10
c0020d3e:	31 d2                	xor    edx,edx
c0020d40:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0020d43:	84 c0                	test   al,al
c0020d45:	74 21                	je     c0020d68 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0020d47:	3c 2f                	cmp    al,0x2f
c0020d49:	75 0b                	jne    c0020d56 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0020d4b:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0020d4f:	bd 01 00 00 00       	mov    ebp,0x1
c0020d54:	eb 14                	jmp    c0020d6a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0020d56:	8d 48 9f             	lea    ecx,[eax-0x61]
c0020d59:	80 f9 19             	cmp    cl,0x19
c0020d5c:	77 03                	ja     c0020d61 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0020d5e:	83 e8 20             	sub    eax,0x20
c0020d61:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0020d65:	42                   	inc    edx
c0020d66:	eb d8                	jmp    c0020d40 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0020d68:	31 ed                	xor    ebp,ebp
c0020d6a:	83 ec 0c             	sub    esp,0xc
c0020d6d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0020d74:	e8 5b e7 fe ff       	call   c000f4d4 <malloc>
c0020d79:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0020d80:	89 c6                	mov    esi,eax
c0020d82:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0020d88:	c1 ef 0b             	shr    edi,0xb
c0020d8b:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0020d92:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0020d96:	83 c4 10             	add    esp,0x10
c0020d99:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0020d9e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0020da2:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0020da9:	74 28                	je     c0020dd3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0020dab:	52                   	push   edx
c0020dac:	57                   	push   edi
c0020dad:	50                   	push   eax
c0020dae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020db2:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0020db9:	e8 9d f9 ff ff       	call   c002075b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020dbe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020dc2:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0020dc9:	05 00 08 00 00       	add    eax,0x800
c0020dce:	83 c4 10             	add    esp,0x10
c0020dd1:	eb cb                	jmp    c0020d9e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0020dd3:	83 ec 0c             	sub    esp,0xc
c0020dd6:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0020dda:	57                   	push   edi
c0020ddb:	e8 c8 f8 fd ff       	call   c00006a8 <strlen>
c0020de0:	50                   	push   eax
c0020de1:	57                   	push   edi
c0020de2:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0020de9:	56                   	push   esi
c0020dea:	e8 2a f9 ff ff       	call   c0020719 <__memmem(unsigned char*, int, unsigned char*, int)>
c0020def:	83 c4 20             	add    esp,0x20
c0020df2:	85 c0                	test   eax,eax
c0020df4:	75 13                	jne    c0020e09 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0020df6:	83 ec 0c             	sub    esp,0xc
c0020df9:	56                   	push   esi
c0020dfa:	e8 e5 e6 fe ff       	call   c000f4e4 <free>
c0020dff:	83 c4 10             	add    esp,0x10
c0020e02:	31 c0                	xor    eax,eax
c0020e04:	e9 b3 00 00 00       	jmp    c0020ebc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0020e09:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0020e0d:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0020e11:	c1 e7 08             	shl    edi,0x8
c0020e14:	c1 e2 10             	shl    edx,0x10
c0020e17:	09 d7                	or     edi,edx
c0020e19:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0020e1d:	09 d7                	or     edi,edx
c0020e1f:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0020e23:	c1 e2 18             	shl    edx,0x18
c0020e26:	09 d7                	or     edi,edx
c0020e28:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0020e2c:	89 d1                	mov    ecx,edx
c0020e2e:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0020e32:	c1 e1 08             	shl    ecx,0x8
c0020e35:	c1 e2 10             	shl    edx,0x10
c0020e38:	09 ca                	or     edx,ecx
c0020e3a:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0020e3e:	09 ca                	or     edx,ecx
c0020e40:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0020e44:	c1 e1 18             	shl    ecx,0x18
c0020e47:	09 ca                	or     edx,ecx
c0020e49:	89 e9                	mov    ecx,ebp
c0020e4b:	84 c9                	test   cl,cl
c0020e4d:	74 3c                	je     c0020e8b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0020e4f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0020e53:	83 ec 0c             	sub    esp,0xc
c0020e56:	56                   	push   esi
c0020e57:	e8 88 e6 fe ff       	call   c000f4e4 <free>
c0020e5c:	83 c4 0c             	add    esp,0xc
c0020e5f:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0020e66:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0020e6b:	50                   	push   eax
c0020e6c:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0020e73:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0020e7a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020e7e:	52                   	push   edx
c0020e7f:	57                   	push   edi
c0020e80:	53                   	push   ebx
c0020e81:	e8 6e fe ff ff       	call   c0020cf4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0020e86:	83 c4 20             	add    esp,0x20
c0020e89:	eb 31                	jmp    c0020ebc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0020e8b:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0020e8e:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0020e95:	d0 e8                	shr    al,1
c0020e97:	89 3b                	mov    DWORD PTR [ebx],edi
c0020e99:	83 e0 01             	and    eax,0x1
c0020e9c:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0020ea3:	83 ec 0c             	sub    esp,0xc
c0020ea6:	89 13                	mov    DWORD PTR [ebx],edx
c0020ea8:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0020eaf:	89 03                	mov    DWORD PTR [ebx],eax
c0020eb1:	56                   	push   esi
c0020eb2:	e8 2d e6 fe ff       	call   c000f4e4 <free>
c0020eb7:	83 c4 10             	add    esp,0x10
c0020eba:	b0 01                	mov    al,0x1
c0020ebc:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020ec2:	5b                   	pop    ebx
c0020ec3:	5e                   	pop    esi
c0020ec4:	5f                   	pop    edi
c0020ec5:	5d                   	pop    ebp
c0020ec6:	c3                   	ret    

c0020ec7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0020ec7:	55                   	push   ebp
c0020ec8:	57                   	push   edi
c0020ec9:	56                   	push   esi
c0020eca:	53                   	push   ebx
c0020ecb:	83 ec 20             	sub    esp,0x20
c0020ece:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0020ed2:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0020ed6:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0020eda:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020ee2:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0020eea:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0020eef:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0020ef5:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0020efb:	57                   	push   edi
c0020efc:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020f00:	50                   	push   eax
c0020f01:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020f05:	50                   	push   eax
c0020f06:	e8 94 fd ff ff       	call   c0020c9f <readRoot(unsigned int*, unsigned int*, char)>
c0020f0b:	5a                   	pop    edx
c0020f0c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020f10:	e8 93 f7 fd ff       	call   c00006a8 <strlen>
c0020f15:	83 c4 10             	add    esp,0x10
c0020f18:	83 f8 03             	cmp    eax,0x3
c0020f1b:	77 17                	ja     c0020f34 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0020f1d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020f21:	89 03                	mov    DWORD PTR [ebx],eax
c0020f23:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020f27:	89 06                	mov    DWORD PTR [esi],eax
c0020f29:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0020f30:	b0 01                	mov    al,0x1
c0020f32:	eb 19                	jmp    c0020f4d <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0020f34:	50                   	push   eax
c0020f35:	55                   	push   ebp
c0020f36:	57                   	push   edi
c0020f37:	56                   	push   esi
c0020f38:	53                   	push   ebx
c0020f39:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0020f3d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0020f41:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0020f45:	e8 aa fd ff ff       	call   c0020cf4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0020f4a:	83 c4 20             	add    esp,0x20
c0020f4d:	83 c4 1c             	add    esp,0x1c
c0020f50:	5b                   	pop    ebx
c0020f51:	5e                   	pop    esi
c0020f52:	5f                   	pop    edi
c0020f53:	5d                   	pop    ebp
c0020f54:	c3                   	ret    
c0020f55:	90                   	nop

c0020f56 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0020f56:	57                   	push   edi
c0020f57:	56                   	push   esi
c0020f58:	53                   	push   ebx
c0020f59:	83 ec 10             	sub    esp,0x10
c0020f5c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0020f60:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0020f64:	85 ff                	test   edi,edi
c0020f66:	0f 84 9d 00 00 00    	je     c0021009 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0020f6c:	85 f6                	test   esi,esi
c0020f6e:	0f 84 95 00 00 00    	je     c0021009 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0020f74:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0020f79:	74 17                	je     c0020f92 <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c0020f7b:	83 ec 0c             	sub    esp,0xc
c0020f7e:	68 07 af 02 c0       	push   0xc002af07
c0020f83:	e8 f1 17 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c0020f88:	83 c4 10             	add    esp,0x10
c0020f8b:	b8 03 00 00 00       	mov    eax,0x3
c0020f90:	eb 7c                	jmp    c002100e <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0020f92:	83 ec 0c             	sub    esp,0xc
c0020f95:	6a 1c                	push   0x1c
c0020f97:	e8 38 e5 fe ff       	call   c000f4d4 <malloc>
c0020f9c:	89 07                	mov    DWORD PTR [edi],eax
c0020f9e:	89 c3                	mov    ebx,eax
c0020fa0:	58                   	pop    eax
c0020fa1:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020fa5:	50                   	push   eax
c0020fa6:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0020fa9:	50                   	push   eax
c0020faa:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020fae:	50                   	push   eax
c0020faf:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020fb3:	50                   	push   eax
c0020fb4:	56                   	push   esi
c0020fb5:	e8 0d ff ff ff       	call   c0020ec7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0020fba:	83 c4 20             	add    esp,0x20
c0020fbd:	84 c0                	test   al,al
c0020fbf:	74 07                	je     c0020fc8 <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c0020fc1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020fc6:	74 0b                	je     c0020fd3 <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c0020fc8:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0020fcc:	b8 01 00 00 00       	mov    eax,0x1
c0020fd1:	eb 3b                	jmp    c002100e <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0020fd3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020fd7:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0020fdb:	89 03                	mov    DWORD PTR [ebx],eax
c0020fdd:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0020fe4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020fe8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0020fef:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0020ff6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0020ff9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021000:	8a 06                	mov    al,BYTE PTR [esi]
c0021002:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021005:	31 c0                	xor    eax,eax
c0021007:	eb 05                	jmp    c002100e <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021009:	b8 04 00 00 00       	mov    eax,0x4
c002100e:	83 c4 10             	add    esp,0x10
c0021011:	5b                   	pop    ebx
c0021012:	5e                   	pop    esi
c0021013:	5f                   	pop    edi
c0021014:	c3                   	ret    
c0021015:	90                   	nop

c0021016 <ISO9660::exists(char const*)>:
c0021016:	83 ec 28             	sub    esp,0x28
c0021019:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002101d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0021021:	52                   	push   edx
c0021022:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0021025:	52                   	push   edx
c0021026:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c002102a:	52                   	push   edx
c002102b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c002102f:	52                   	push   edx
c0021030:	50                   	push   eax
c0021031:	e8 91 fe ff ff       	call   c0020ec7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021036:	83 c4 3c             	add    esp,0x3c
c0021039:	c3                   	ret    

c002103a <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c002103a:	56                   	push   esi
c002103b:	53                   	push   ebx
c002103c:	83 ec 14             	sub    esp,0x14
c002103f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0021043:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0021047:	85 db                	test   ebx,ebx
c0021049:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c002104d:	0f 94 c2             	sete   dl
c0021050:	85 f6                	test   esi,esi
c0021052:	0f 94 c0             	sete   al
c0021055:	08 c2                	or     dl,al
c0021057:	75 68                	jne    c00210c1 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021059:	85 c9                	test   ecx,ecx
c002105b:	74 64                	je     c00210c1 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c002105d:	83 ec 0c             	sub    esp,0xc
c0021060:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0021063:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021067:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c002106d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021074:	50                   	push   eax
c0021075:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0021078:	50                   	push   eax
c0021079:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002107d:	50                   	push   eax
c002107e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021082:	50                   	push   eax
c0021083:	51                   	push   ecx
c0021084:	e8 3e fe ff ff       	call   c0020ec7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021089:	83 c4 20             	add    esp,0x20
c002108c:	ba 01 00 00 00       	mov    edx,0x1
c0021091:	84 c0                	test   al,al
c0021093:	74 31                	je     c00210c6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021095:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021099:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00210a0:	89 03                	mov    DWORD PTR [ebx],eax
c00210a2:	ba 00 00 00 00       	mov    edx,0x0
c00210a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00210ab:	85 c0                	test   eax,eax
c00210ad:	0f 95 06             	setne  BYTE PTR [esi]
c00210b0:	74 14                	je     c00210c6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00210b2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00210b8:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00210bf:	eb 05                	jmp    c00210c6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00210c1:	ba 04 00 00 00       	mov    edx,0x4
c00210c6:	83 c4 14             	add    esp,0x14
c00210c9:	89 d0                	mov    eax,edx
c00210cb:	5b                   	pop    ebx
c00210cc:	5e                   	pop    esi
c00210cd:	c3                   	ret    

c00210ce <ISO9660::openDir(char const*, void**)>:
c00210ce:	57                   	push   edi
c00210cf:	56                   	push   esi
c00210d0:	53                   	push   ebx
c00210d1:	83 ec 10             	sub    esp,0x10
c00210d4:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00210d8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00210dc:	85 ff                	test   edi,edi
c00210de:	0f 84 95 00 00 00    	je     c0021179 <ISO9660::openDir(char const*, void**)+0xab>
c00210e4:	85 f6                	test   esi,esi
c00210e6:	0f 84 8d 00 00 00    	je     c0021179 <ISO9660::openDir(char const*, void**)+0xab>
c00210ec:	83 ec 0c             	sub    esp,0xc
c00210ef:	6a 1c                	push   0x1c
c00210f1:	e8 de e3 fe ff       	call   c000f4d4 <malloc>
c00210f6:	89 07                	mov    DWORD PTR [edi],eax
c00210f8:	89 c3                	mov    ebx,eax
c00210fa:	59                   	pop    ecx
c00210fb:	8d 44 24 18          	lea    eax,[esp+0x18]
c00210ff:	50                   	push   eax
c0021100:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021103:	50                   	push   eax
c0021104:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021108:	50                   	push   eax
c0021109:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002110d:	50                   	push   eax
c002110e:	56                   	push   esi
c002110f:	e8 b3 fd ff ff       	call   c0020ec7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021114:	83 c4 20             	add    esp,0x20
c0021117:	84 c0                	test   al,al
c0021119:	74 07                	je     c0021122 <ISO9660::openDir(char const*, void**)+0x54>
c002111b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021120:	75 21                	jne    c0021143 <ISO9660::openDir(char const*, void**)+0x75>
c0021122:	0f b6 c0             	movzx  eax,al
c0021125:	52                   	push   edx
c0021126:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002112a:	50                   	push   eax
c002112b:	68 2d af 02 c0       	push   0xc002af2d
c0021130:	e8 44 16 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c0021135:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021139:	83 c4 10             	add    esp,0x10
c002113c:	b8 01 00 00 00       	mov    eax,0x1
c0021141:	eb 3b                	jmp    c002117e <ISO9660::openDir(char const*, void**)+0xb0>
c0021143:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021147:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c002114b:	89 03                	mov    DWORD PTR [ebx],eax
c002114d:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021154:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021158:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c002115f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021166:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021169:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021170:	8a 06                	mov    al,BYTE PTR [esi]
c0021172:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021175:	31 c0                	xor    eax,eax
c0021177:	eb 05                	jmp    c002117e <ISO9660::openDir(char const*, void**)+0xb0>
c0021179:	b8 04 00 00 00       	mov    eax,0x4
c002117e:	83 c4 10             	add    esp,0x10
c0021181:	5b                   	pop    ebx
c0021182:	5e                   	pop    esi
c0021183:	5f                   	pop    edi
c0021184:	c3                   	ret    
c0021185:	90                   	nop

c0021186 <ISO9660::ISO9660()>:
c0021186:	83 ec 0c             	sub    esp,0xc
c0021189:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002118d:	83 ec 0c             	sub    esp,0xc
c0021190:	50                   	push   eax
c0021191:	e8 e8 18 ff ff       	call   c0012a7e <Filesystem::Filesystem()>
c0021196:	83 c4 10             	add    esp,0x10
c0021199:	ba 50 af 02 c0       	mov    edx,0xc002af50
c002119e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211a2:	89 10                	mov    DWORD PTR [eax],edx
c00211a4:	90                   	nop
c00211a5:	83 c4 0c             	add    esp,0xc
c00211a8:	c3                   	ret    
c00211a9:	90                   	nop

c00211aa <SoundChannel::~SoundChannel()>:
c00211aa:	83 ec 0c             	sub    esp,0xc
c00211ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211b1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00211b4:	83 ec 0c             	sub    esp,0xc
c00211b7:	50                   	push   eax
c00211b8:	e8 27 e3 fe ff       	call   c000f4e4 <free>
c00211bd:	83 c4 10             	add    esp,0x10
c00211c0:	90                   	nop
c00211c1:	83 c4 0c             	add    esp,0xc
c00211c4:	c3                   	ret    
c00211c5:	90                   	nop

c00211c6 <SoundChannel::setSpeed(float)>:
c00211c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00211ca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00211ce:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00211d1:	c3                   	ret    

c00211d2 <SoundChannel::getSpeed()>:
c00211d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00211d6:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00211d9:	c3                   	ret    

c00211da <SoundChannel::setVolume(int)>:
c00211da:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00211de:	83 f8 64             	cmp    eax,0x64
c00211e1:	7e 05                	jle    c00211e8 <SoundChannel::setVolume(int)+0xe>
c00211e3:	b8 64 00 00 00       	mov    eax,0x64
c00211e8:	85 c0                	test   eax,eax
c00211ea:	79 02                	jns    c00211ee <SoundChannel::setVolume(int)+0x14>
c00211ec:	31 c0                	xor    eax,eax
c00211ee:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00211f2:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c00211f5:	c3                   	ret    

c00211f6 <SoundChannel::getVolume()>:
c00211f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00211fa:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00211fd:	c3                   	ret    

c00211fe <SoundChannel::pause()>:
c00211fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021202:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c0021206:	c3                   	ret    
c0021207:	90                   	nop

c0021208 <SoundChannel::SoundChannel(int, int, int, int)>:
c0021208:	83 ec 1c             	sub    esp,0x1c
c002120b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002120f:	e8 ea ff ff ff       	call   c00211fe <SoundChannel::pause()>
c0021214:	83 c4 04             	add    esp,0x4
c0021217:	6a 50                	push   0x50
c0021219:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c002121d:	e8 b8 ff ff ff       	call   c00211da <SoundChannel::setVolume(int)>
c0021222:	83 c4 08             	add    esp,0x8
c0021225:	a1 c8 af 02 c0       	mov    eax,ds:0xc002afc8
c002122a:	50                   	push   eax
c002122b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c002122f:	e8 92 ff ff ff       	call   c00211c6 <SoundChannel::setSpeed(float)>
c0021234:	83 c4 08             	add    esp,0x8
c0021237:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002123b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002123f:	89 10                	mov    DWORD PTR [eax],edx
c0021241:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021245:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021249:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002124c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021250:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021254:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021257:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c002125c:	75 23                	jne    c0021281 <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c002125e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021262:	8b 10                	mov    edx,DWORD PTR [eax]
c0021264:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021268:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002126b:	0f af c2             	imul   eax,edx
c002126e:	85 c0                	test   eax,eax
c0021270:	79 03                	jns    c0021275 <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c0021272:	83 c0 03             	add    eax,0x3
c0021275:	c1 f8 02             	sar    eax,0x2
c0021278:	05 a0 0f 00 00       	add    eax,0xfa0
c002127d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021281:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021285:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021289:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c002128c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021290:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0021297:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002129b:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00212a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00212a6:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00212a9:	c1 e0 02             	shl    eax,0x2
c00212ac:	83 ec 0c             	sub    esp,0xc
c00212af:	50                   	push   eax
c00212b0:	e8 1f e2 fe ff       	call   c000f4d4 <malloc>
c00212b5:	83 c4 10             	add    esp,0x10
c00212b8:	89 c2                	mov    edx,eax
c00212ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00212be:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00212c1:	83 ec 04             	sub    esp,0x4
c00212c4:	8d 44 24 08          	lea    eax,[esp+0x8]
c00212c8:	50                   	push   eax
c00212c9:	6a 01                	push   0x1
c00212cb:	6a 04                	push   0x4
c00212cd:	e8 7d 76 fe ff       	call   c000894f <src_new>
c00212d2:	83 c4 10             	add    esp,0x10
c00212d5:	89 c2                	mov    edx,eax
c00212d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00212db:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00212de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00212e2:	85 c0                	test   eax,eax
c00212e4:	74 10                	je     c00212f6 <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c00212e6:	83 ec 0c             	sub    esp,0xc
c00212e9:	68 ac af 02 c0       	push   0xc002afac
c00212ee:	e8 a0 85 ff ff       	call   c0019893 <Krnl::panic(char const*)>
c00212f3:	83 c4 10             	add    esp,0x10
c00212f6:	a0 20 ed 02 c0       	mov    al,ds:0xc002ed20
c00212fb:	83 f0 01             	xor    eax,0x1
c00212fe:	84 c0                	test   al,al
c0021300:	74 57                	je     c0021359 <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c0021302:	a1 cc af 02 c0       	mov    eax,ds:0xc002afcc
c0021307:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002130b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021313:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c002131b:	7f 35                	jg     c0021352 <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c002131d:	83 ec 0c             	sub    esp,0xc
c0021320:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021324:	e8 2e 4a 00 00       	call   c0025d57 <__floatsisf>
c0021329:	83 c4 10             	add    esp,0x10
c002132c:	8b 15 cc af 02 c0    	mov    edx,DWORD PTR ds:0xc002afcc
c0021332:	83 ec 08             	sub    esp,0x8
c0021335:	52                   	push   edx
c0021336:	50                   	push   eax
c0021337:	e8 2d 46 00 00       	call   c0025969 <__mulsf3>
c002133c:	83 c4 10             	add    esp,0x10
c002133f:	89 c2                	mov    edx,eax
c0021341:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021345:	89 14 85 20 e9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd16e0],edx
c002134c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021350:	eb c1                	jmp    c0021313 <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c0021352:	c6 05 20 ed 02 c0 01 	mov    BYTE PTR ds:0xc002ed20,0x1
c0021359:	90                   	nop
c002135a:	83 c4 1c             	add    esp,0x1c
c002135d:	c3                   	ret    

c002135e <SoundChannel::play()>:
c002135e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021362:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c0021366:	c3                   	ret    
c0021367:	90                   	nop

c0021368 <SoundChannel::paused()>:
c0021368:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002136c:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c002136f:	c3                   	ret    

c0021370 <SoundChannel::getSampleRate()>:
c0021370:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021374:	8b 00                	mov    eax,DWORD PTR [eax]
c0021376:	c3                   	ret    
c0021377:	90                   	nop

c0021378 <SoundChannel::getBits()>:
c0021378:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002137c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002137f:	c3                   	ret    

c0021380 <SoundChannel::getBufferUsed()>:
c0021380:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021384:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0021387:	c3                   	ret    

c0021388 <SoundChannel::getBufferSize()>:
c0021388:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002138c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c002138f:	c3                   	ret    

c0021390 <SoundChannel::unbuffer(float*, int, int)>:
c0021390:	56                   	push   esi
c0021391:	53                   	push   ebx
c0021392:	83 ec 40             	sub    esp,0x40
c0021395:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0021399:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c002139c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00213a0:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00213a3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00213a7:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00213ab:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00213af:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00213b3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00213b7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00213bb:	e8 97 49 00 00       	call   c0025d57 <__floatsisf>
c00213c0:	5a                   	pop    edx
c00213c1:	89 c6                	mov    esi,eax
c00213c3:	ff 33                	push   DWORD PTR [ebx]
c00213c5:	e8 8d 49 00 00       	call   c0025d57 <__floatsisf>
c00213ca:	59                   	pop    ecx
c00213cb:	5a                   	pop    edx
c00213cc:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00213cf:	50                   	push   eax
c00213d0:	e8 94 45 00 00       	call   c0025969 <__mulsf3>
c00213d5:	59                   	pop    ecx
c00213d6:	5a                   	pop    edx
c00213d7:	50                   	push   eax
c00213d8:	56                   	push   esi
c00213d9:	e8 4e 47 00 00       	call   c0025b2c <__divsf3>
c00213de:	89 04 24             	mov    DWORD PTR [esp],eax
c00213e1:	e8 41 5c 00 00       	call   c0027027 <__extendsfdf2>
c00213e6:	59                   	pop    ecx
c00213e7:	5e                   	pop    esi
c00213e8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00213ec:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00213f0:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00213f8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00213fc:	50                   	push   eax
c00213fd:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0021400:	e8 3f 71 fe ff       	call   c0008544 <src_process>
c0021405:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021409:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c002140c:	83 c4 0c             	add    esp,0xc
c002140f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0021412:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0021415:	29 d0                	sub    eax,edx
c0021417:	c1 e0 02             	shl    eax,0x2
c002141a:	50                   	push   eax
c002141b:	8d 04 91             	lea    eax,[ecx+edx*4]
c002141e:	50                   	push   eax
c002141f:	51                   	push   ecx
c0021420:	e8 f8 f1 fd ff       	call   c000061d <memmove>
c0021425:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021429:	83 c4 44             	add    esp,0x44
c002142c:	5b                   	pop    ebx
c002142d:	5e                   	pop    esi
c002142e:	c3                   	ret    
c002142f:	90                   	nop

c0021430 <SoundChannel::buffer8(unsigned char*, int)>:
c0021430:	55                   	push   ebp
c0021431:	57                   	push   edi
c0021432:	56                   	push   esi
c0021433:	53                   	push   ebx
c0021434:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021438:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c002143c:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c002143f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021443:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0021446:	74 7a                	je     c00214c2 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0021448:	85 ff                	test   edi,edi
c002144a:	7e 76                	jle    c00214c2 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c002144c:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0021450:	8d 70 01             	lea    esi,[eax+0x1]
c0021453:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0021456:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021459:	8b 1c 9d 20 e9 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd16e0]
c0021460:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0021463:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0021466:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0021469:	74 5e                	je     c00214c9 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c002146b:	83 ff 01             	cmp    edi,0x1
c002146e:	74 4b                	je     c00214bb <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0021470:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0021474:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0021477:	8d 70 01             	lea    esi,[eax+0x1]
c002147a:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c002147d:	8b 1c 9d 20 e9 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd16e0]
c0021484:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0021487:	b8 02 00 00 00       	mov    eax,0x2
c002148c:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c002148f:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021492:	75 23                	jne    c00214b7 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0021494:	eb 27                	jmp    c00214bd <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021496:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c002149b:	8d 71 01             	lea    esi,[ecx+0x1]
c002149e:	40                   	inc    eax
c002149f:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00214a2:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c00214a5:	8b 1c 9d 20 e9 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd16e0]
c00214ac:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c00214af:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c00214b2:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c00214b5:	74 06                	je     c00214bd <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c00214b7:	39 c7                	cmp    edi,eax
c00214b9:	75 db                	jne    c0021496 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c00214bb:	89 f8                	mov    eax,edi
c00214bd:	5b                   	pop    ebx
c00214be:	5e                   	pop    esi
c00214bf:	5f                   	pop    edi
c00214c0:	5d                   	pop    ebp
c00214c1:	c3                   	ret    
c00214c2:	5b                   	pop    ebx
c00214c3:	31 c0                	xor    eax,eax
c00214c5:	5e                   	pop    esi
c00214c6:	5f                   	pop    edi
c00214c7:	5d                   	pop    ebp
c00214c8:	c3                   	ret    
c00214c9:	b8 01 00 00 00       	mov    eax,0x1
c00214ce:	eb ed                	jmp    c00214bd <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c00214d0 <SoundDevice::SoundDevice(char const*)>:
c00214d0:	83 ec 1c             	sub    esp,0x1c
c00214d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00214d7:	83 ec 08             	sub    esp,0x8
c00214da:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00214de:	50                   	push   eax
c00214df:	e8 74 28 ff ff       	call   c0013d58 <Device::Device(char const*)>
c00214e4:	83 c4 10             	add    esp,0x10
c00214e7:	ba d8 af 02 c0       	mov    edx,0xc002afd8
c00214ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00214f0:	89 10                	mov    DWORD PTR [eax],edx
c00214f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00214f6:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0021500:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021504:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c002150e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021516:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c002151b:	7f 19                	jg     c0021536 <SoundDevice::SoundDevice(char const*)+0x66>
c002151d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021521:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021525:	83 c2 54             	add    edx,0x54
c0021528:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0021530:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021534:	eb e0                	jmp    c0021516 <SoundDevice::SoundDevice(char const*)+0x46>
c0021536:	90                   	nop
c0021537:	83 c4 1c             	add    esp,0x1c
c002153a:	c3                   	ret    
c002153b:	90                   	nop

c002153c <SoundDevice::~SoundDevice()>:
c002153c:	53                   	push   ebx
c002153d:	83 ec 18             	sub    esp,0x18
c0021540:	ba d8 af 02 c0       	mov    edx,0xc002afd8
c0021545:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021549:	89 10                	mov    DWORD PTR [eax],edx
c002154b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021553:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0021558:	7f 46                	jg     c00215a0 <SoundDevice::~SoundDevice()+0x64>
c002155a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002155e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021562:	83 c2 54             	add    edx,0x54
c0021565:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0021569:	85 c0                	test   eax,eax
c002156b:	74 2d                	je     c002159a <SoundDevice::~SoundDevice()+0x5e>
c002156d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021571:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021575:	83 c2 54             	add    edx,0x54
c0021578:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c002157c:	85 db                	test   ebx,ebx
c002157e:	74 1a                	je     c002159a <SoundDevice::~SoundDevice()+0x5e>
c0021580:	83 ec 0c             	sub    esp,0xc
c0021583:	53                   	push   ebx
c0021584:	e8 21 fc ff ff       	call   c00211aa <SoundChannel::~SoundChannel()>
c0021589:	83 c4 10             	add    esp,0x10
c002158c:	83 ec 08             	sub    esp,0x8
c002158f:	6a 2c                	push   0x2c
c0021591:	53                   	push   ebx
c0021592:	e8 02 11 ff ff       	call   c0012699 <operator delete(void*, unsigned long)>
c0021597:	83 c4 10             	add    esp,0x10
c002159a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002159e:	eb b3                	jmp    c0021553 <SoundDevice::~SoundDevice()+0x17>
c00215a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00215a4:	83 ec 0c             	sub    esp,0xc
c00215a7:	50                   	push   eax
c00215a8:	e8 8d 24 ff ff       	call   c0013a3a <Device::~Device()>
c00215ad:	83 c4 10             	add    esp,0x10
c00215b0:	90                   	nop
c00215b1:	83 c4 18             	add    esp,0x18
c00215b4:	5b                   	pop    ebx
c00215b5:	c3                   	ret    

c00215b6 <SoundDevice::~SoundDevice()>:
c00215b6:	83 ec 0c             	sub    esp,0xc
c00215b9:	83 ec 0c             	sub    esp,0xc
c00215bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00215c0:	e8 77 ff ff ff       	call   c002153c <SoundDevice::~SoundDevice()>
c00215c5:	83 c4 10             	add    esp,0x10
c00215c8:	83 ec 08             	sub    esp,0x8
c00215cb:	68 e4 01 00 00       	push   0x1e4
c00215d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00215d4:	e8 c0 10 ff ff       	call   c0012699 <operator delete(void*, unsigned long)>
c00215d9:	83 c4 10             	add    esp,0x10
c00215dc:	83 c4 0c             	add    esp,0xc
c00215df:	c3                   	ret    

c00215e0 <SoundDevice::getFreeChannelNum()>:
c00215e0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00215e4:	31 c0                	xor    eax,eax
c00215e6:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c00215ee:	74 09                	je     c00215f9 <SoundDevice::getFreeChannelNum()+0x19>
c00215f0:	40                   	inc    eax
c00215f1:	83 f8 20             	cmp    eax,0x20
c00215f4:	75 f0                	jne    c00215e6 <SoundDevice::getFreeChannelNum()+0x6>
c00215f6:	83 c8 ff             	or     eax,0xffffffff
c00215f9:	c3                   	ret    

c00215fa <SoundDevice::addChannel(SoundChannel*)>:
c00215fa:	56                   	push   esi
c00215fb:	53                   	push   ebx
c00215fc:	51                   	push   ecx
c00215fd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021601:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0021605:	53                   	push   ebx
c0021606:	e8 d5 ff ff ff       	call   c00215e0 <SoundDevice::getFreeChannelNum()>
c002160b:	5a                   	pop    edx
c002160c:	83 f8 ff             	cmp    eax,0xffffffff
c002160f:	74 51                	je     c0021662 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0021611:	85 f6                	test   esi,esi
c0021613:	74 4d                	je     c0021662 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0021615:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c002161c:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0021623:	75 30                	jne    c0021655 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c0021625:	83 ec 0c             	sub    esp,0xc
c0021628:	56                   	push   esi
c0021629:	e8 42 fd ff ff       	call   c0021370 <SoundChannel::getSampleRate()>
c002162e:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c0021634:	89 34 24             	mov    DWORD PTR [esp],esi
c0021637:	e8 3c fd ff ff       	call   c0021378 <SoundChannel::getBits()>
c002163c:	83 c4 0c             	add    esp,0xc
c002163f:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0021645:	8b 13                	mov    edx,DWORD PTR [ebx]
c0021647:	50                   	push   eax
c0021648:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c002164e:	53                   	push   ebx
c002164f:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0021652:	83 c4 10             	add    esp,0x10
c0021655:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c002165b:	b8 01 00 00 00       	mov    eax,0x1
c0021660:	eb 03                	jmp    c0021665 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0021662:	83 c8 ff             	or     eax,0xffffffff
c0021665:	5a                   	pop    edx
c0021666:	5b                   	pop    ebx
c0021667:	5e                   	pop    esi
c0021668:	c3                   	ret    
c0021669:	90                   	nop

c002166a <SoundDevice::removeChannel(int)>:
c002166a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002166e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021672:	83 fa 1f             	cmp    edx,0x1f
c0021675:	77 23                	ja     c002169a <SoundDevice::removeChannel(int)+0x30>
c0021677:	8d 14 90             	lea    edx,[eax+edx*4]
c002167a:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c0021681:	74 17                	je     c002169a <SoundDevice::removeChannel(int)+0x30>
c0021683:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c002168d:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c0021693:	75 05                	jne    c002169a <SoundDevice::removeChannel(int)+0x30>
c0021695:	8b 00                	mov    eax,DWORD PTR [eax]
c0021697:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c002169a:	c3                   	ret    
c002169b:	90                   	nop

c002169c <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c002169c:	57                   	push   edi
c002169d:	56                   	push   esi
c002169e:	53                   	push   ebx
c002169f:	31 db                	xor    ebx,ebx
c00216a1:	83 ec 10             	sub    esp,0x10
c00216a4:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00216a8:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c00216ac:	0f 8d cb 00 00 00    	jge    c002177d <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c00216b2:	83 ec 0c             	sub    esp,0xc
c00216b5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00216b9:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c00216bc:	e8 66 59 00 00       	call   c0027027 <__extendsfdf2>
c00216c1:	83 c4 10             	add    esp,0x10
c00216c4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00216c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00216cc:	68 00 00 f0 3f       	push   0x3ff00000
c00216d1:	6a 00                	push   0x0
c00216d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00216d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00216db:	e8 d3 48 00 00       	call   c0025fb3 <__adddf3>
c00216e0:	83 c4 10             	add    esp,0x10
c00216e3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00216e7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00216eb:	68 00 00 e0 3f       	push   0x3fe00000
c00216f0:	6a 00                	push   0x0
c00216f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00216f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00216fa:	e8 31 4f 00 00       	call   c0026630 <__muldf3>
c00216ff:	83 c4 10             	add    esp,0x10
c0021702:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021706:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002170a:	68 00 00 60 40       	push   0x40600000
c002170f:	6a 00                	push   0x0
c0021711:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021715:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021719:	e8 12 4f 00 00       	call   c0026630 <__muldf3>
c002171e:	59                   	pop    ecx
c002171f:	5f                   	pop    edi
c0021720:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0021724:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0021728:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002172c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021730:	e8 ce 57 00 00       	call   c0026f03 <__truncdfsf2>
c0021735:	5a                   	pop    edx
c0021736:	89 c7                	mov    edi,eax
c0021738:	59                   	pop    ecx
c0021739:	68 00 00 fe 42       	push   0x42fe0000
c002173e:	50                   	push   eax
c002173f:	e8 69 48 00 00       	call   c0025fad <__gesf2>
c0021744:	83 c4 10             	add    esp,0x10
c0021747:	85 c0                	test   eax,eax
c0021749:	78 06                	js     c0021751 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c002174b:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c002174f:	eb 26                	jmp    c0021777 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0021751:	50                   	push   eax
c0021752:	50                   	push   eax
c0021753:	6a 00                	push   0x0
c0021755:	57                   	push   edi
c0021756:	e8 56 48 00 00       	call   c0025fb1 <__lesf2>
c002175b:	83 c4 10             	add    esp,0x10
c002175e:	85 c0                	test   eax,eax
c0021760:	7f 06                	jg     c0021768 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c0021762:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0021766:	eb 0f                	jmp    c0021777 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0021768:	83 ec 0c             	sub    esp,0xc
c002176b:	57                   	push   edi
c002176c:	e8 4b 59 00 00       	call   c00270bc <lrintf>
c0021771:	83 c4 10             	add    esp,0x10
c0021774:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0021777:	43                   	inc    ebx
c0021778:	e9 2b ff ff ff       	jmp    c00216a8 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c002177d:	83 c4 10             	add    esp,0x10
c0021780:	5b                   	pop    ebx
c0021781:	5e                   	pop    esi
c0021782:	5f                   	pop    edi
c0021783:	c3                   	ret    

c0021784 <SoundDevice::getAudio(int, float*, float*)>:
c0021784:	55                   	push   ebp
c0021785:	57                   	push   edi
c0021786:	56                   	push   esi
c0021787:	53                   	push   ebx
c0021788:	31 db                	xor    ebx,ebx
c002178a:	83 ec 20             	sub    esp,0x20
c002178d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021791:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0021795:	c1 e0 02             	shl    eax,0x2
c0021798:	50                   	push   eax
c0021799:	6a 00                	push   0x0
c002179b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002179f:	e8 e7 ee fd ff       	call   c000068b <memset>
c00217a4:	83 c4 10             	add    esp,0x10
c00217a7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00217ab:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c00217b2:	85 c0                	test   eax,eax
c00217b4:	0f 84 d7 00 00 00    	je     c0021891 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00217ba:	83 ec 0c             	sub    esp,0xc
c00217bd:	50                   	push   eax
c00217be:	e8 a5 fb ff ff       	call   c0021368 <SoundChannel::paused()>
c00217c3:	83 c4 10             	add    esp,0x10
c00217c6:	84 c0                	test   al,al
c00217c8:	0f 85 c3 00 00 00    	jne    c0021891 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00217ce:	83 ec 0c             	sub    esp,0xc
c00217d1:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00217d8:	e8 19 fa ff ff       	call   c00211f6 <SoundChannel::getVolume()>
c00217dd:	83 c4 10             	add    esp,0x10
c00217e0:	85 c0                	test   eax,eax
c00217e2:	0f 84 a9 00 00 00    	je     c0021891 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00217e8:	83 ec 0c             	sub    esp,0xc
c00217eb:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00217f2:	e8 ff f9 ff ff       	call   c00211f6 <SoundChannel::getVolume()>
c00217f7:	83 ec 0c             	sub    esp,0xc
c00217fa:	50                   	push   eax
c00217fb:	e8 57 45 00 00       	call   c0025d57 <__floatsisf>
c0021800:	59                   	pop    ecx
c0021801:	5d                   	pop    ebp
c0021802:	31 ed                	xor    ebp,ebp
c0021804:	68 00 00 c8 42       	push   0x42c80000
c0021809:	50                   	push   eax
c002180a:	e8 1d 43 00 00       	call   c0025b2c <__divsf3>
c002180f:	83 c4 10             	add    esp,0x10
c0021812:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021816:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c002181a:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c0021820:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0021824:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c002182b:	e8 60 fb ff ff       	call   c0021390 <SoundChannel::unbuffer(float*, int, int)>
c0021830:	83 c4 20             	add    esp,0x20
c0021833:	89 c1                	mov    ecx,eax
c0021835:	39 cd                	cmp    ebp,ecx
c0021837:	7d 52                	jge    c002188b <SoundDevice::getAudio(int, float*, float*)+0x107>
c0021839:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002183d:	50                   	push   eax
c002183e:	50                   	push   eax
c002183f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0021843:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0021846:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002184a:	e8 1a 41 00 00       	call   c0025969 <__mulsf3>
c002184f:	5a                   	pop    edx
c0021850:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021854:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c002185a:	e8 f8 44 00 00       	call   c0025d57 <__floatsisf>
c002185f:	59                   	pop    ecx
c0021860:	5a                   	pop    edx
c0021861:	50                   	push   eax
c0021862:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021866:	e8 c1 42 00 00       	call   c0025b2c <__divsf3>
c002186b:	59                   	pop    ecx
c002186c:	5a                   	pop    edx
c002186d:	50                   	push   eax
c002186e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0021872:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0021875:	e8 cc 3d 00 00       	call   c0025646 <__addsf3>
c002187a:	83 c4 10             	add    esp,0x10
c002187d:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0021881:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0021885:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c0021888:	45                   	inc    ebp
c0021889:	eb aa                	jmp    c0021835 <SoundDevice::getAudio(int, float*, float*)+0xb1>
c002188b:	39 cf                	cmp    edi,ecx
c002188d:	7e 02                	jle    c0021891 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c002188f:	89 cf                	mov    edi,ecx
c0021891:	43                   	inc    ebx
c0021892:	83 fb 20             	cmp    ebx,0x20
c0021895:	0f 85 10 ff ff ff    	jne    c00217ab <SoundDevice::getAudio(int, float*, float*)+0x27>
c002189b:	83 c4 1c             	add    esp,0x1c
c002189e:	89 f8                	mov    eax,edi
c00218a0:	5b                   	pop    ebx
c00218a1:	5e                   	pop    esi
c00218a2:	5f                   	pop    edi
c00218a3:	5d                   	pop    ebp
c00218a4:	c3                   	ret    
c00218a5:	90                   	nop

c00218a6 <PCI::open(int, int, void*)>:
c00218a6:	83 ec 18             	sub    esp,0x18
c00218a9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00218ad:	8b 10                	mov    edx,DWORD PTR [eax]
c00218af:	50                   	push   eax
c00218b0:	ff 52 18             	call   DWORD PTR [edx+0x18]
c00218b3:	31 c0                	xor    eax,eax
c00218b5:	83 c4 1c             	add    esp,0x1c
c00218b8:	c3                   	ret    
c00218b9:	90                   	nop

c00218ba <PCI::close(int, int, void*)>:
c00218ba:	31 c0                	xor    eax,eax
c00218bc:	c3                   	ret    
c00218bd:	90                   	nop

c00218be <PCI::PCI()>:
c00218be:	83 ec 0c             	sub    esp,0xc
c00218c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218c5:	83 ec 08             	sub    esp,0x8
c00218c8:	68 08 b0 02 c0       	push   0xc002b008
c00218cd:	50                   	push   eax
c00218ce:	e8 41 1b ff ff       	call   c0013414 <Bus::Bus(char const*)>
c00218d3:	83 c4 10             	add    esp,0x10
c00218d6:	ba 74 b0 02 c0       	mov    edx,0xc002b074
c00218db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218df:	89 10                	mov    DWORD PTR [eax],edx
c00218e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218e5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00218eb:	0f b6 d0             	movzx  edx,al
c00218ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218f2:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c00218f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218fd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021903:	0f b6 d0             	movzx  edx,al
c0021906:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002190a:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c002190f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021913:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021919:	8d 50 01             	lea    edx,[eax+0x1]
c002191c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021920:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0021926:	0f b6 d0             	movzx  edx,al
c0021929:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002192d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0021931:	83 c9 c0             	or     ecx,0xffffffc0
c0021934:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0021938:	90                   	nop
c0021939:	83 c4 0c             	add    esp,0xc
c002193c:	c3                   	ret    
c002193d:	90                   	nop

c002193e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002193e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0021942:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021947:	89 ca                	mov    edx,ecx
c0021949:	c1 e0 10             	shl    eax,0x10
c002194c:	81 e2 fc 00 00 00    	and    edx,0xfc
c0021952:	09 d0                	or     eax,edx
c0021954:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0021959:	c1 e2 08             	shl    edx,0x8
c002195c:	09 d0                	or     eax,edx
c002195e:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c0021963:	c1 e2 0b             	shl    edx,0xb
c0021966:	09 d0                	or     eax,edx
c0021968:	ba f8 0c 00 00       	mov    edx,0xcf8
c002196d:	0d 00 00 00 80       	or     eax,0x80000000
c0021972:	ef                   	out    dx,eax
c0021973:	ba fc 0c 00 00       	mov    edx,0xcfc
c0021978:	ed                   	in     eax,dx
c0021979:	83 e1 02             	and    ecx,0x2
c002197c:	0f b6 c9             	movzx  ecx,cl
c002197f:	c1 e1 03             	shl    ecx,0x3
c0021982:	d3 e8                	shr    eax,cl
c0021984:	c3                   	ret    
c0021985:	90                   	nop

c0021986 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0021986:	6a 00                	push   0x0
c0021988:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002198d:	50                   	push   eax
c002198e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021993:	50                   	push   eax
c0021994:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021999:	50                   	push   eax
c002199a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002199e:	e8 9b ff ff ff       	call   c002193e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00219a3:	83 c4 14             	add    esp,0x14
c00219a6:	c3                   	ret    
c00219a7:	90                   	nop

c00219a8 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c00219a8:	6a 0e                	push   0xe
c00219aa:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00219af:	50                   	push   eax
c00219b0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00219b5:	50                   	push   eax
c00219b6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00219bb:	50                   	push   eax
c00219bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00219c0:	e8 79 ff ff ff       	call   c002193e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00219c5:	83 c4 14             	add    esp,0x14
c00219c8:	0f b6 c0             	movzx  eax,al
c00219cb:	c3                   	ret    

c00219cc <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c00219cc:	55                   	push   ebp
c00219cd:	57                   	push   edi
c00219ce:	56                   	push   esi
c00219cf:	53                   	push   ebx
c00219d0:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c00219d5:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c00219da:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c00219df:	6a 0a                	push   0xa
c00219e1:	56                   	push   esi
c00219e2:	55                   	push   ebp
c00219e3:	57                   	push   edi
c00219e4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00219e8:	e8 51 ff ff ff       	call   c002193e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00219ed:	6a 0a                	push   0xa
c00219ef:	89 c3                	mov    ebx,eax
c00219f1:	56                   	push   esi
c00219f2:	0f b6 db             	movzx  ebx,bl
c00219f5:	55                   	push   ebp
c00219f6:	57                   	push   edi
c00219f7:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00219fb:	e8 3e ff ff ff       	call   c002193e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021a00:	83 c4 28             	add    esp,0x28
c0021a03:	25 00 ff 00 00       	and    eax,0xff00
c0021a08:	09 d8                	or     eax,ebx
c0021a0a:	5b                   	pop    ebx
c0021a0b:	5e                   	pop    esi
c0021a0c:	5f                   	pop    edi
c0021a0d:	5d                   	pop    ebp
c0021a0e:	c3                   	ret    
c0021a0f:	90                   	nop

c0021a10 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0021a10:	6a 08                	push   0x8
c0021a12:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021a17:	50                   	push   eax
c0021a18:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021a1d:	50                   	push   eax
c0021a1e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021a23:	50                   	push   eax
c0021a24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021a28:	e8 11 ff ff ff       	call   c002193e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021a2d:	83 c4 14             	add    esp,0x14
c0021a30:	0f b6 c4             	movzx  eax,ah
c0021a33:	c3                   	ret    

c0021a34 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0021a34:	6a 08                	push   0x8
c0021a36:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021a3b:	50                   	push   eax
c0021a3c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021a41:	50                   	push   eax
c0021a42:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021a47:	50                   	push   eax
c0021a48:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021a4c:	e8 ed fe ff ff       	call   c002193e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021a51:	83 c4 14             	add    esp,0x14
c0021a54:	c3                   	ret    
c0021a55:	90                   	nop

c0021a56 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0021a56:	6a 3c                	push   0x3c
c0021a58:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021a5d:	50                   	push   eax
c0021a5e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021a63:	50                   	push   eax
c0021a64:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021a69:	50                   	push   eax
c0021a6a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021a6e:	e8 cb fe ff ff       	call   c002193e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021a73:	83 c4 14             	add    esp,0x14
c0021a76:	c3                   	ret    
c0021a77:	90                   	nop

c0021a78 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0021a78:	6a 18                	push   0x18
c0021a7a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021a7f:	50                   	push   eax
c0021a80:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021a85:	50                   	push   eax
c0021a86:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021a8b:	50                   	push   eax
c0021a8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021a90:	e8 a9 fe ff ff       	call   c002193e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021a95:	83 c4 14             	add    esp,0x14
c0021a98:	0f b6 c4             	movzx  eax,ah
c0021a9b:	c3                   	ret    

c0021a9c <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0021a9c:	55                   	push   ebp
c0021a9d:	57                   	push   edi
c0021a9e:	56                   	push   esi
c0021a9f:	53                   	push   ebx
c0021aa0:	50                   	push   eax
c0021aa1:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0021aa5:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c0021aaa:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0021aaf:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c0021ab4:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0021abb:	8d 43 12             	lea    eax,[ebx+0x12]
c0021abe:	83 c3 10             	add    ebx,0x10
c0021ac1:	0f b6 c0             	movzx  eax,al
c0021ac4:	0f b6 db             	movzx  ebx,bl
c0021ac7:	50                   	push   eax
c0021ac8:	51                   	push   ecx
c0021ac9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0021acd:	57                   	push   edi
c0021ace:	55                   	push   ebp
c0021acf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0021ad3:	e8 66 fe ff ff       	call   c002193e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021ad8:	53                   	push   ebx
c0021ad9:	89 c6                	mov    esi,eax
c0021adb:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0021adf:	c1 e6 10             	shl    esi,0x10
c0021ae2:	51                   	push   ecx
c0021ae3:	57                   	push   edi
c0021ae4:	55                   	push   ebp
c0021ae5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021ae9:	e8 50 fe ff ff       	call   c002193e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021aee:	83 c4 2c             	add    esp,0x2c
c0021af1:	0f b7 c0             	movzx  eax,ax
c0021af4:	5b                   	pop    ebx
c0021af5:	09 f0                	or     eax,esi
c0021af7:	5e                   	pop    esi
c0021af8:	5f                   	pop    edi
c0021af9:	5d                   	pop    ebp
c0021afa:	c3                   	ret    
c0021afb:	90                   	nop

c0021afc <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0021afc:	53                   	push   ebx
c0021afd:	ba f8 0c 00 00       	mov    edx,0xcf8
c0021b02:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0021b07:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021b0b:	c1 e1 10             	shl    ecx,0x10
c0021b0e:	25 fc 00 00 00       	and    eax,0xfc
c0021b13:	09 c1                	or     ecx,eax
c0021b15:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021b1a:	c1 e0 08             	shl    eax,0x8
c0021b1d:	09 c1                	or     ecx,eax
c0021b1f:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0021b24:	c1 e0 0b             	shl    eax,0xb
c0021b27:	09 c1                	or     ecx,eax
c0021b29:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0021b2f:	89 c8                	mov    eax,ecx
c0021b31:	ef                   	out    dx,eax
c0021b32:	ba fc 0c 00 00       	mov    edx,0xcfc
c0021b37:	ed                   	in     eax,dx
c0021b38:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0021b3d:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0021b42:	74 0a                	je     c0021b4e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0021b44:	0f b7 d8             	movzx  ebx,ax
c0021b47:	89 d0                	mov    eax,edx
c0021b49:	c1 e0 10             	shl    eax,0x10
c0021b4c:	eb 05                	jmp    c0021b53 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0021b4e:	66 31 c0             	xor    ax,ax
c0021b51:	89 d3                	mov    ebx,edx
c0021b53:	09 c3                	or     ebx,eax
c0021b55:	ba f8 0c 00 00       	mov    edx,0xcf8
c0021b5a:	89 c8                	mov    eax,ecx
c0021b5c:	ef                   	out    dx,eax
c0021b5d:	ba fc 0c 00 00       	mov    edx,0xcfc
c0021b62:	89 d8                	mov    eax,ebx
c0021b64:	ef                   	out    dx,eax
c0021b65:	5b                   	pop    ebx
c0021b66:	c3                   	ret    
c0021b67:	90                   	nop

c0021b68 <PCI::checkBus(unsigned char)>:
c0021b68:	56                   	push   esi
c0021b69:	53                   	push   ebx
c0021b6a:	31 db                	xor    ebx,ebx
c0021b6c:	51                   	push   ecx
c0021b6d:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0021b72:	52                   	push   edx
c0021b73:	53                   	push   ebx
c0021b74:	43                   	inc    ebx
c0021b75:	56                   	push   esi
c0021b76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021b7a:	e8 2b 03 00 00       	call   c0021eaa <PCI::checkDevice(unsigned char, unsigned char)>
c0021b7f:	83 c4 10             	add    esp,0x10
c0021b82:	83 fb 20             	cmp    ebx,0x20
c0021b85:	75 eb                	jne    c0021b72 <PCI::checkBus(unsigned char)+0xa>
c0021b87:	58                   	pop    eax
c0021b88:	5b                   	pop    ebx
c0021b89:	5e                   	pop    esi
c0021b8a:	c3                   	ret    
c0021b8b:	90                   	nop

c0021b8c <PCI::foundDevice(PCIDeviceInfo)>:
c0021b8c:	55                   	push   ebp
c0021b8d:	57                   	push   edi
c0021b8e:	56                   	push   esi
c0021b8f:	53                   	push   ebx
c0021b90:	83 ec 1c             	sub    esp,0x1c
c0021b93:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0021b97:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0021b9d:	0f 84 52 01 00 00    	je     c0021cf5 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0021ba3:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0021ba7:	66 81 f9 06 04       	cmp    cx,0x406
c0021bac:	75 2c                	jne    c0021bda <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0021bae:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0021bb3:	50                   	push   eax
c0021bb4:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0021bb9:	50                   	push   eax
c0021bba:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0021bbf:	50                   	push   eax
c0021bc0:	56                   	push   esi
c0021bc1:	e8 b2 fe ff ff       	call   c0021a78 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0021bc6:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0021bca:	0f b6 c0             	movzx  eax,al
c0021bcd:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0021bd1:	83 c4 2c             	add    esp,0x2c
c0021bd4:	5b                   	pop    ebx
c0021bd5:	5e                   	pop    esi
c0021bd6:	5f                   	pop    edi
c0021bd7:	5d                   	pop    ebp
c0021bd8:	eb 8e                	jmp    c0021b68 <PCI::checkBus(unsigned char)>
c0021bda:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0021bde:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0021be4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021be8:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0021bec:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0021bf0:	88 d3                	mov    bl,dl
c0021bf2:	85 c0                	test   eax,eax
c0021bf4:	74 33                	je     c0021c29 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0021bf6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0021bf9:	85 d2                	test   edx,edx
c0021bfb:	74 28                	je     c0021c25 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0021bfd:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0021c03:	31 ef                	xor    edi,ebp
c0021c05:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0021c0b:	75 18                	jne    c0021c25 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0021c0d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021c11:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0021c17:	75 0c                	jne    c0021c25 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0021c19:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0021c1f:	0f 84 d0 00 00 00    	je     c0021cf5 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0021c25:	8b 00                	mov    eax,DWORD PTR [eax]
c0021c27:	eb c9                	jmp    c0021bf2 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0021c29:	66 81 f9 01 06       	cmp    cx,0x601
c0021c2e:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0021c32:	75 19                	jne    c0021c4d <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0021c34:	83 ec 0c             	sub    esp,0xc
c0021c37:	68 64 01 00 00       	push   0x164
c0021c3c:	e8 93 d8 fe ff       	call   c000f4d4 <malloc>
c0021c41:	89 c5                	mov    ebp,eax
c0021c43:	89 04 24             	mov    DWORD PTR [esp],eax
c0021c46:	e8 95 0f 00 00       	call   c0022be0 <SATABus::SATABus()>
c0021c4b:	eb 1e                	jmp    c0021c6b <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0021c4d:	66 81 f9 01 01       	cmp    cx,0x101
c0021c52:	75 60                	jne    c0021cb4 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0021c54:	83 ec 0c             	sub    esp,0xc
c0021c57:	68 70 02 00 00       	push   0x270
c0021c5c:	e8 73 d8 fe ff       	call   c000f4d4 <malloc>
c0021c61:	89 c5                	mov    ebp,eax
c0021c63:	89 04 24             	mov    DWORD PTR [esp],eax
c0021c66:	e8 03 03 00 00       	call   c0021f6e <IDE::IDE()>
c0021c6b:	58                   	pop    eax
c0021c6c:	5a                   	pop    edx
c0021c6d:	55                   	push   ebp
c0021c6e:	56                   	push   esi
c0021c6f:	e8 f4 1e ff ff       	call   c0013b68 <Device::addChild(Device*)>
c0021c74:	83 ec 1c             	sub    esp,0x1c
c0021c77:	b9 09 00 00 00       	mov    ecx,0x9
c0021c7c:	fc                   	cld    
c0021c7d:	89 e7                	mov    edi,esp
c0021c7f:	89 de                	mov    esi,ebx
c0021c81:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0021c83:	55                   	push   ebp
c0021c84:	e8 e9 1d ff ff       	call   c0013a72 <Device::preOpenPCI(PCIDeviceInfo)>
c0021c89:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021c8c:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0021c90:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0021c98:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0021ca0:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0021ca8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021cab:	83 c4 4c             	add    esp,0x4c
c0021cae:	5b                   	pop    ebx
c0021caf:	5e                   	pop    esi
c0021cb0:	5f                   	pop    edi
c0021cb1:	5d                   	pop    ebp
c0021cb2:	ff e0                	jmp    eax
c0021cb4:	83 ec 0c             	sub    esp,0xc
c0021cb7:	68 58 01 00 00       	push   0x158
c0021cbc:	e8 13 d8 fe ff       	call   c000f4d4 <malloc>
c0021cc1:	89 c5                	mov    ebp,eax
c0021cc3:	58                   	pop    eax
c0021cc4:	5a                   	pop    edx
c0021cc5:	68 10 b0 02 c0       	push   0xc002b010
c0021cca:	55                   	push   ebp
c0021ccb:	e8 8e 21 ff ff       	call   c0013e5e <DriverlessDevice::DriverlessDevice(char const*)>
c0021cd0:	59                   	pop    ecx
c0021cd1:	5f                   	pop    edi
c0021cd2:	55                   	push   ebp
c0021cd3:	56                   	push   esi
c0021cd4:	e8 8f 1e ff ff       	call   c0013b68 <Device::addChild(Device*)>
c0021cd9:	b9 09 00 00 00       	mov    ecx,0x9
c0021cde:	fc                   	cld    
c0021cdf:	89 df                	mov    edi,ebx
c0021ce1:	89 de                	mov    esi,ebx
c0021ce3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0021ce5:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0021ce9:	83 c4 2c             	add    esp,0x2c
c0021cec:	5b                   	pop    ebx
c0021ced:	5e                   	pop    esi
c0021cee:	5f                   	pop    edi
c0021cef:	5d                   	pop    ebp
c0021cf0:	e9 7d 1d ff ff       	jmp    c0013a72 <Device::preOpenPCI(PCIDeviceInfo)>
c0021cf5:	83 c4 1c             	add    esp,0x1c
c0021cf8:	5b                   	pop    ebx
c0021cf9:	5e                   	pop    esi
c0021cfa:	5f                   	pop    edi
c0021cfb:	5d                   	pop    ebp
c0021cfc:	c3                   	ret    
c0021cfd:	90                   	nop

c0021cfe <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0021cfe:	55                   	push   ebp
c0021cff:	57                   	push   edi
c0021d00:	56                   	push   esi
c0021d01:	53                   	push   ebx
c0021d02:	83 ec 5c             	sub    esp,0x5c
c0021d05:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0021d09:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0021d0d:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0021d11:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0021d16:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021d1a:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0021d1e:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0021d23:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021d27:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0021d2c:	6a 0c                	push   0xc
c0021d2e:	55                   	push   ebp
c0021d2f:	53                   	push   ebx
c0021d30:	57                   	push   edi
c0021d31:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0021d38:	e8 01 fc ff ff       	call   c002193e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021d3d:	55                   	push   ebp
c0021d3e:	53                   	push   ebx
c0021d3f:	57                   	push   edi
c0021d40:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0021d47:	e8 80 fc ff ff       	call   c00219cc <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0021d4c:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0021d51:	83 c4 24             	add    esp,0x24
c0021d54:	55                   	push   ebp
c0021d55:	53                   	push   ebx
c0021d56:	57                   	push   edi
c0021d57:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0021d5b:	e8 f6 fc ff ff       	call   c0021a56 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0021d60:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0021d64:	6a 3c                	push   0x3c
c0021d66:	55                   	push   ebp
c0021d67:	53                   	push   ebx
c0021d68:	57                   	push   edi
c0021d69:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0021d70:	e8 c9 fb ff ff       	call   c002193e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021d75:	0f b6 c4             	movzx  eax,ah
c0021d78:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021d7c:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0021d80:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0021d84:	a1 e8 c9 02 c0       	mov    eax,ds:0xc002c9e8
c0021d89:	83 c4 24             	add    esp,0x24
c0021d8c:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0021d92:	83 b8 5c 21 00 00 00 	cmp    DWORD PTR [eax+0x215c],0x0
c0021d99:	74 6c                	je     c0021e07 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0021d9b:	31 f6                	xor    esi,esi
c0021d9d:	8b 15 e8 c9 02 c0    	mov    edx,DWORD PTR ds:0xc002c9e8
c0021da3:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0021da9:	39 b2 5c 21 00 00    	cmp    DWORD PTR [edx+0x215c],esi
c0021daf:	7e 56                	jle    c0021e07 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0021db1:	8d 14 f2             	lea    edx,[edx+esi*8]
c0021db4:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0021dbb:	39 cb                	cmp    ebx,ecx
c0021dbd:	75 45                	jne    c0021e04 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0021dbf:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0021dc6:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0021dca:	75 38                	jne    c0021e04 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0021dcc:	83 ec 0c             	sub    esp,0xc
c0021dcf:	68 2a b0 02 c0       	push   0xc002b02a
c0021dd4:	e8 a0 09 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c0021dd9:	8b 15 e8 c9 02 c0    	mov    edx,DWORD PTR ds:0xc002c9e8
c0021ddf:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0021de5:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c0021ded:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0021df1:	52                   	push   edx
c0021df2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021df6:	53                   	push   ebx
c0021df7:	68 4f b0 02 c0       	push   0xc002b04f
c0021dfc:	e8 78 09 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c0021e01:	83 c4 20             	add    esp,0x20
c0021e04:	46                   	inc    esi
c0021e05:	eb 96                	jmp    c0021d9d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0021e07:	31 d2                	xor    edx,edx
c0021e09:	83 ec 0c             	sub    esp,0xc
c0021e0c:	55                   	push   ebp
c0021e0d:	53                   	push   ebx
c0021e0e:	57                   	push   edi
c0021e0f:	52                   	push   edx
c0021e10:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0021e14:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0021e1b:	e8 7c fc ff ff       	call   c0021a9c <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021e20:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0021e24:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021e28:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0021e2c:	42                   	inc    edx
c0021e2d:	83 c4 20             	add    esp,0x20
c0021e30:	83 fa 06             	cmp    edx,0x6
c0021e33:	75 d4                	jne    c0021e09 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0021e35:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0021e39:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0021e3d:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0021e41:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0021e45:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0021e49:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0021e4d:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0021e52:	86 e0                	xchg   al,ah
c0021e54:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0021e59:	55                   	push   ebp
c0021e5a:	53                   	push   ebx
c0021e5b:	57                   	push   edi
c0021e5c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0021e60:	e8 ab fb ff ff       	call   c0021a10 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0021e65:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0021e69:	55                   	push   ebp
c0021e6a:	53                   	push   ebx
c0021e6b:	57                   	push   edi
c0021e6c:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0021e73:	e8 0e fb ff ff       	call   c0021986 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0021e78:	83 ec 0c             	sub    esp,0xc
c0021e7b:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0021e80:	b9 09 00 00 00       	mov    ecx,0x9
c0021e85:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0021e89:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0021e8d:	fc                   	cld    
c0021e8e:	89 e7                	mov    edi,esp
c0021e90:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0021e92:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0021e99:	e8 ee fc ff ff       	call   c0021b8c <PCI::foundDevice(PCIDeviceInfo)>
c0021e9e:	81 c4 8c 00 00 00    	add    esp,0x8c
c0021ea4:	5b                   	pop    ebx
c0021ea5:	5e                   	pop    esi
c0021ea6:	5f                   	pop    edi
c0021ea7:	5d                   	pop    ebp
c0021ea8:	c3                   	ret    
c0021ea9:	90                   	nop

c0021eaa <PCI::checkDevice(unsigned char, unsigned char)>:
c0021eaa:	55                   	push   ebp
c0021eab:	57                   	push   edi
c0021eac:	56                   	push   esi
c0021ead:	53                   	push   ebx
c0021eae:	83 ec 0c             	sub    esp,0xc
c0021eb1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0021eb5:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0021eba:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0021ebf:	6a 00                	push   0x0
c0021ec1:	56                   	push   esi
c0021ec2:	57                   	push   edi
c0021ec3:	55                   	push   ebp
c0021ec4:	e8 bd fa ff ff       	call   c0021986 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0021ec9:	6a 00                	push   0x0
c0021ecb:	56                   	push   esi
c0021ecc:	57                   	push   edi
c0021ecd:	55                   	push   ebp
c0021ece:	e8 2b fe ff ff       	call   c0021cfe <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0021ed3:	83 c4 20             	add    esp,0x20
c0021ed6:	6a 00                	push   0x0
c0021ed8:	56                   	push   esi
c0021ed9:	57                   	push   edi
c0021eda:	55                   	push   ebp
c0021edb:	e8 c8 fa ff ff       	call   c00219a8 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0021ee0:	83 c4 10             	add    esp,0x10
c0021ee3:	84 c0                	test   al,al
c0021ee5:	79 27                	jns    c0021f0e <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0021ee7:	bb 01 00 00 00       	mov    ebx,0x1
c0021eec:	53                   	push   ebx
c0021eed:	56                   	push   esi
c0021eee:	57                   	push   edi
c0021eef:	55                   	push   ebp
c0021ef0:	e8 91 fa ff ff       	call   c0021986 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0021ef5:	83 c4 10             	add    esp,0x10
c0021ef8:	66 40                	inc    ax
c0021efa:	74 0c                	je     c0021f08 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0021efc:	53                   	push   ebx
c0021efd:	56                   	push   esi
c0021efe:	57                   	push   edi
c0021eff:	55                   	push   ebp
c0021f00:	e8 f9 fd ff ff       	call   c0021cfe <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0021f05:	83 c4 10             	add    esp,0x10
c0021f08:	43                   	inc    ebx
c0021f09:	83 fb 08             	cmp    ebx,0x8
c0021f0c:	75 de                	jne    c0021eec <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0021f0e:	83 c4 0c             	add    esp,0xc
c0021f11:	5b                   	pop    ebx
c0021f12:	5e                   	pop    esi
c0021f13:	5f                   	pop    edi
c0021f14:	5d                   	pop    ebp
c0021f15:	c3                   	ret    

c0021f16 <PCI::detect()>:
c0021f16:	56                   	push   esi
c0021f17:	53                   	push   ebx
c0021f18:	53                   	push   ebx
c0021f19:	31 db                	xor    ebx,ebx
c0021f1b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0021f1f:	6a 00                	push   0x0
c0021f21:	6a 00                	push   0x0
c0021f23:	6a 00                	push   0x0
c0021f25:	56                   	push   esi
c0021f26:	e8 7d fa ff ff       	call   c00219a8 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0021f2b:	83 c4 10             	add    esp,0x10
c0021f2e:	a8 80                	test   al,0x80
c0021f30:	75 21                	jne    c0021f53 <PCI::detect()+0x3d>
c0021f32:	51                   	push   ecx
c0021f33:	51                   	push   ecx
c0021f34:	6a 00                	push   0x0
c0021f36:	56                   	push   esi
c0021f37:	e8 2c fc ff ff       	call   c0021b68 <PCI::checkBus(unsigned char)>
c0021f3c:	83 c4 10             	add    esp,0x10
c0021f3f:	eb 24                	jmp    c0021f65 <PCI::detect()+0x4f>
c0021f41:	52                   	push   edx
c0021f42:	52                   	push   edx
c0021f43:	53                   	push   ebx
c0021f44:	43                   	inc    ebx
c0021f45:	56                   	push   esi
c0021f46:	e8 1d fc ff ff       	call   c0021b68 <PCI::checkBus(unsigned char)>
c0021f4b:	83 c4 10             	add    esp,0x10
c0021f4e:	83 fb 08             	cmp    ebx,0x8
c0021f51:	74 12                	je     c0021f65 <PCI::detect()+0x4f>
c0021f53:	53                   	push   ebx
c0021f54:	6a 00                	push   0x0
c0021f56:	6a 00                	push   0x0
c0021f58:	56                   	push   esi
c0021f59:	e8 28 fa ff ff       	call   c0021986 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0021f5e:	83 c4 10             	add    esp,0x10
c0021f61:	66 40                	inc    ax
c0021f63:	74 dc                	je     c0021f41 <PCI::detect()+0x2b>
c0021f65:	58                   	pop    eax
c0021f66:	5b                   	pop    ebx
c0021f67:	5e                   	pop    esi
c0021f68:	c3                   	ret    
c0021f69:	90                   	nop

c0021f6a <IDE::close(int, int, void*)>:
c0021f6a:	83 c8 ff             	or     eax,0xffffffff
c0021f6d:	c3                   	ret    

c0021f6e <IDE::IDE()>:
c0021f6e:	83 ec 0c             	sub    esp,0xc
c0021f71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f75:	83 ec 08             	sub    esp,0x8
c0021f78:	68 98 b0 02 c0       	push   0xc002b098
c0021f7d:	50                   	push   eax
c0021f7e:	e8 71 1f ff ff       	call   c0013ef4 <HardDiskController::HardDiskController(char const*)>
c0021f83:	83 c4 10             	add    esp,0x10
c0021f86:	ba d8 b2 02 c0       	mov    edx,0xc002b2d8
c0021f8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f8f:	89 10                	mov    DWORD PTR [eax],edx
c0021f91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f95:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0021f9c:	90                   	nop
c0021f9d:	83 c4 0c             	add    esp,0xc
c0021fa0:	c3                   	ret    
c0021fa1:	90                   	nop

c0021fa2 <IDE::prepareInterrupt(unsigned char)>:
c0021fa2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021fa7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021fab:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0021fb3:	c3                   	ret    

c0021fb4 <selectDrive(unsigned char, unsigned char)>:
c0021fb4:	c3                   	ret    
c0021fb5:	90                   	nop

c0021fb6 <IDE::getBase(unsigned char)>:
c0021fb6:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0021fbb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021fbf:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0021fc7:	c3                   	ret    

c0021fc8 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0021fc8:	55                   	push   ebp
c0021fc9:	57                   	push   edi
c0021fca:	56                   	push   esi
c0021fcb:	53                   	push   ebx
c0021fcc:	83 ec 1c             	sub    esp,0x1c
c0021fcf:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021fd3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0021fd7:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0021fda:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0021fde:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0021fe2:	80 f9 03             	cmp    cl,0x3
c0021fe5:	77 51                	ja     c0022038 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0021fe7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021feb:	0f b6 f2             	movzx  esi,dl
c0021fee:	0f b6 db             	movzx  ebx,bl
c0021ff1:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0021ff4:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0021ff8:	83 ca 80             	or     edx,0xffffff80
c0021ffb:	0f b6 d2             	movzx  edx,dl
c0021ffe:	52                   	push   edx
c0021fff:	6a 0c                	push   0xc
c0022001:	56                   	push   esi
c0022002:	57                   	push   edi
c0022003:	e8 c0 ff ff ff       	call   c0021fc8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022008:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c002200d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022011:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0022015:	ee                   	out    dx,al
c0022016:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c002201b:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c002201f:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0022023:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0022027:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002202f:	83 c4 2c             	add    esp,0x2c
c0022032:	5b                   	pop    ebx
c0022033:	5e                   	pop    esi
c0022034:	5f                   	pop    edi
c0022035:	5d                   	pop    ebp
c0022036:	eb 90                	jmp    c0021fc8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022038:	80 fb 07             	cmp    bl,0x7
c002203b:	77 12                	ja     c002204f <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c002203d:	0f b6 d2             	movzx  edx,dl
c0022040:	0f b6 db             	movzx  ebx,bl
c0022043:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c002204b:	89 da                	mov    edx,ebx
c002204d:	eb 2f                	jmp    c002207e <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c002204f:	80 fb 0d             	cmp    bl,0xd
c0022052:	77 13                	ja     c0022067 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0022054:	0f b6 d2             	movzx  edx,dl
c0022057:	0f b6 db             	movzx  ebx,bl
c002205a:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0022061:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0022065:	eb 17                	jmp    c002207e <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0022067:	80 fb 15             	cmp    bl,0x15
c002206a:	77 13                	ja     c002207f <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c002206c:	0f b6 d2             	movzx  edx,dl
c002206f:	0f b6 db             	movzx  ebx,bl
c0022072:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c002207a:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c002207e:	ee                   	out    dx,al
c002207f:	83 c4 1c             	add    esp,0x1c
c0022082:	5b                   	pop    ebx
c0022083:	5e                   	pop    esi
c0022084:	5f                   	pop    edi
c0022085:	5d                   	pop    ebp
c0022086:	c3                   	ret    
c0022087:	90                   	nop

c0022088 <IDE::read(unsigned char, unsigned char)>:
c0022088:	55                   	push   ebp
c0022089:	57                   	push   edi
c002208a:	56                   	push   esi
c002208b:	53                   	push   ebx
c002208c:	83 ec 1c             	sub    esp,0x1c
c002208f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022093:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022097:	8d 43 f8             	lea    eax,[ebx-0x8]
c002209a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002209e:	3c 03                	cmp    al,0x3
c00220a0:	77 43                	ja     c00220e5 <IDE::read(unsigned char, unsigned char)+0x5d>
c00220a2:	0f b6 f2             	movzx  esi,dl
c00220a5:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00220a8:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c00220ac:	83 c8 80             	or     eax,0xffffff80
c00220af:	0f b6 c0             	movzx  eax,al
c00220b2:	50                   	push   eax
c00220b3:	6a 0c                	push   0xc
c00220b5:	56                   	push   esi
c00220b6:	57                   	push   edi
c00220b7:	e8 0c ff ff ff       	call   c0021fc8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00220bc:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c00220c1:	0f b6 c3             	movzx  eax,bl
c00220c4:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c00220c8:	ec                   	in     al,dx
c00220c9:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00220cd:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c00220d2:	52                   	push   edx
c00220d3:	6a 0c                	push   0xc
c00220d5:	56                   	push   esi
c00220d6:	57                   	push   edi
c00220d7:	e8 ec fe ff ff       	call   c0021fc8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00220dc:	83 c4 20             	add    esp,0x20
c00220df:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00220e3:	eb 49                	jmp    c002212e <IDE::read(unsigned char, unsigned char)+0xa6>
c00220e5:	80 fb 07             	cmp    bl,0x7
c00220e8:	77 12                	ja     c00220fc <IDE::read(unsigned char, unsigned char)+0x74>
c00220ea:	0f b6 d2             	movzx  edx,dl
c00220ed:	0f b6 c3             	movzx  eax,bl
c00220f0:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c00220f8:	89 c2                	mov    edx,eax
c00220fa:	eb 31                	jmp    c002212d <IDE::read(unsigned char, unsigned char)+0xa5>
c00220fc:	80 fb 0d             	cmp    bl,0xd
c00220ff:	77 13                	ja     c0022114 <IDE::read(unsigned char, unsigned char)+0x8c>
c0022101:	0f b6 d2             	movzx  edx,dl
c0022104:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c002210b:	0f b6 d3             	movzx  edx,bl
c002210e:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0022112:	eb 19                	jmp    c002212d <IDE::read(unsigned char, unsigned char)+0xa5>
c0022114:	31 c0                	xor    eax,eax
c0022116:	80 fb 15             	cmp    bl,0x15
c0022119:	77 13                	ja     c002212e <IDE::read(unsigned char, unsigned char)+0xa6>
c002211b:	0f b6 d2             	movzx  edx,dl
c002211e:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0022126:	0f b6 d3             	movzx  edx,bl
c0022129:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c002212d:	ec                   	in     al,dx
c002212e:	83 c4 1c             	add    esp,0x1c
c0022131:	5b                   	pop    ebx
c0022132:	5e                   	pop    esi
c0022133:	5f                   	pop    edi
c0022134:	5d                   	pop    ebp
c0022135:	c3                   	ret    

c0022136 <IDE::waitInterrupt(unsigned char)>:
c0022136:	55                   	push   ebp
c0022137:	57                   	push   edi
c0022138:	56                   	push   esi
c0022139:	53                   	push   ebx
c002213a:	31 db                	xor    ebx,ebx
c002213c:	83 ec 0c             	sub    esp,0xc
c002213f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0022143:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0022148:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0022150:	89 e8                	mov    eax,ebp
c0022152:	84 c0                	test   al,al
c0022154:	75 34                	jne    c002218a <IDE::waitInterrupt(unsigned char)+0x54>
c0022156:	52                   	push   edx
c0022157:	6a 0c                	push   0xc
c0022159:	56                   	push   esi
c002215a:	57                   	push   edi
c002215b:	e8 28 ff ff ff       	call   c0022088 <IDE::read(unsigned char, unsigned char)>
c0022160:	83 c4 10             	add    esp,0x10
c0022163:	a8 01                	test   al,0x1
c0022165:	75 2b                	jne    c0022192 <IDE::waitInterrupt(unsigned char)+0x5c>
c0022167:	f6 c3 04             	test   bl,0x4
c002216a:	75 16                	jne    c0022182 <IDE::waitInterrupt(unsigned char)+0x4c>
c002216c:	83 fb 32             	cmp    ebx,0x32
c002216f:	7e 11                	jle    c0022182 <IDE::waitInterrupt(unsigned char)+0x4c>
c0022171:	50                   	push   eax
c0022172:	50                   	push   eax
c0022173:	6a 00                	push   0x0
c0022175:	68 80 96 98 00       	push   0x989680
c002217a:	e8 8b b1 ff ff       	call   c001d30a <nanoSleep(unsigned long long)>
c002217f:	83 c4 10             	add    esp,0x10
c0022182:	83 fb 3c             	cmp    ebx,0x3c
c0022185:	74 0b                	je     c0022192 <IDE::waitInterrupt(unsigned char)+0x5c>
c0022187:	43                   	inc    ebx
c0022188:	eb be                	jmp    c0022148 <IDE::waitInterrupt(unsigned char)+0x12>
c002218a:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0022192:	83 c4 0c             	add    esp,0xc
c0022195:	89 e8                	mov    eax,ebp
c0022197:	5b                   	pop    ebx
c0022198:	5e                   	pop    esi
c0022199:	5f                   	pop    edi
c002219a:	5d                   	pop    ebp
c002219b:	c3                   	ret    

c002219c <ideChannel0IRQHandler(regs*, void*)>:
c002219c:	83 ec 10             	sub    esp,0x10
c002219f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00221a3:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c00221aa:	6a 07                	push   0x7
c00221ac:	6a 00                	push   0x0
c00221ae:	50                   	push   eax
c00221af:	e8 d4 fe ff ff       	call   c0022088 <IDE::read(unsigned char, unsigned char)>
c00221b4:	83 c4 1c             	add    esp,0x1c
c00221b7:	c3                   	ret    

c00221b8 <ideChannel1IRQHandler(regs*, void*)>:
c00221b8:	83 ec 10             	sub    esp,0x10
c00221bb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00221bf:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c00221c6:	6a 07                	push   0x7
c00221c8:	6a 01                	push   0x1
c00221ca:	50                   	push   eax
c00221cb:	e8 b8 fe ff ff       	call   c0022088 <IDE::read(unsigned char, unsigned char)>
c00221d0:	83 c4 1c             	add    esp,0x1c
c00221d3:	c3                   	ret    

c00221d4 <IDE::enableIRQs(unsigned char, bool)>:
c00221d4:	57                   	push   edi
c00221d5:	56                   	push   esi
c00221d6:	be 04 00 00 00       	mov    esi,0x4
c00221db:	53                   	push   ebx
c00221dc:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00221e1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00221e5:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c00221ea:	0f 94 c0             	sete   al
c00221ed:	d1 e0                	shl    eax,1
c00221ef:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c00221f6:	0f b6 c0             	movzx  eax,al
c00221f9:	50                   	push   eax
c00221fa:	6a 0c                	push   0xc
c00221fc:	57                   	push   edi
c00221fd:	53                   	push   ebx
c00221fe:	e8 c5 fd ff ff       	call   c0021fc8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022203:	83 c4 10             	add    esp,0x10
c0022206:	50                   	push   eax
c0022207:	6a 0c                	push   0xc
c0022209:	57                   	push   edi
c002220a:	53                   	push   ebx
c002220b:	e8 78 fe ff ff       	call   c0022088 <IDE::read(unsigned char, unsigned char)>
c0022210:	83 c4 10             	add    esp,0x10
c0022213:	4e                   	dec    esi
c0022214:	75 f0                	jne    c0022206 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0022216:	5b                   	pop    ebx
c0022217:	5e                   	pop    esi
c0022218:	5f                   	pop    edi
c0022219:	c3                   	ret    

c002221a <IDE::open(int, int, void*)>:
c002221a:	55                   	push   ebp
c002221b:	57                   	push   edi
c002221c:	56                   	push   esi
c002221d:	53                   	push   ebx
c002221e:	83 ec 1c             	sub    esp,0x1c
c0022221:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0022225:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c002222e:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0022237:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c002223e:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0022245:	0f 85 b0 02 00 00    	jne    c00224fb <IDE::open(int, int, void*)+0x2e1>
c002224b:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0022251:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0022255:	83 e0 7f             	and    eax,0x7f
c0022258:	3c 05                	cmp    al,0x5
c002225a:	74 04                	je     c0022260 <IDE::open(int, int, void*)+0x46>
c002225c:	3c 0f                	cmp    al,0xf
c002225e:	75 32                	jne    c0022292 <IDE::open(int, int, void*)+0x78>
c0022260:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0022266:	83 e0 fc             	and    eax,0xfffffffc
c0022269:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0022270:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0022276:	83 e0 fc             	and    eax,0xfffffffc
c0022279:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0022280:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0022286:	83 e0 fc             	and    eax,0xfffffffc
c0022289:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0022290:	eb 14                	jmp    c00222a6 <IDE::open(int, int, void*)+0x8c>
c0022292:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c002229c:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00222a6:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c00222ad:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c00222b4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00222b8:	89 c6                	mov    esi,eax
c00222ba:	bf f8 0c 00 00       	mov    edi,0xcf8
c00222bf:	c1 e6 10             	shl    esi,0x10
c00222c2:	89 e8                	mov    eax,ebp
c00222c4:	89 fa                	mov    edx,edi
c00222c6:	c1 e0 0b             	shl    eax,0xb
c00222c9:	09 f0                	or     eax,esi
c00222cb:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c00222d2:	c1 e6 08             	shl    esi,0x8
c00222d5:	09 c6                	or     esi,eax
c00222d7:	89 f0                	mov    eax,esi
c00222d9:	0d 08 00 00 80       	or     eax,0x80000008
c00222de:	ef                   	out    dx,eax
c00222df:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c00222e4:	89 ca                	mov    edx,ecx
c00222e6:	ed                   	in     eax,dx
c00222e7:	c1 e8 10             	shr    eax,0x10
c00222ea:	3d ff ff 00 00       	cmp    eax,0xffff
c00222ef:	0f 84 f5 00 00 00    	je     c00223ea <IDE::open(int, int, void*)+0x1d0>
c00222f5:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c00222fb:	89 fa                	mov    edx,edi
c00222fd:	89 f0                	mov    eax,esi
c00222ff:	ef                   	out    dx,eax
c0022300:	b0 fe                	mov    al,0xfe
c0022302:	89 ca                	mov    edx,ecx
c0022304:	ee                   	out    dx,al
c0022305:	89 f0                	mov    eax,esi
c0022307:	89 fa                	mov    edx,edi
c0022309:	ef                   	out    dx,eax
c002230a:	89 ca                	mov    edx,ecx
c002230c:	ed                   	in     eax,dx
c002230d:	3c fe                	cmp    al,0xfe
c002230f:	0f 85 a9 00 00 00    	jne    c00223be <IDE::open(int, int, void*)+0x1a4>
c0022315:	8b 15 e8 c9 02 c0    	mov    edx,DWORD PTR ds:0xc002c9e8
c002231b:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0022322:	74 33                	je     c0022357 <IDE::open(int, int, void*)+0x13d>
c0022324:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c002232a:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c002232e:	40                   	inc    eax
c002232f:	83 ec 0c             	sub    esp,0xc
c0022332:	0f b6 c0             	movzx  eax,al
c0022335:	50                   	push   eax
c0022336:	55                   	push   ebp
c0022337:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002233b:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0022341:	51                   	push   ecx
c0022342:	e8 41 54 ff ff       	call   c0017788 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0022347:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c002234c:	83 c4 1c             	add    esp,0x1c
c002234f:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0022355:	eb 0a                	jmp    c0022361 <IDE::open(int, int, void*)+0x147>
c0022357:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0022361:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0022368:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c002236f:	c1 e1 10             	shl    ecx,0x10
c0022372:	c1 e0 08             	shl    eax,0x8
c0022375:	bf f8 0c 00 00       	mov    edi,0xcf8
c002237a:	09 c1                	or     ecx,eax
c002237c:	89 fa                	mov    edx,edi
c002237e:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0022385:	c1 e0 0b             	shl    eax,0xb
c0022388:	09 c1                	or     ecx,eax
c002238a:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0022390:	89 c8                	mov    eax,ecx
c0022392:	ef                   	out    dx,eax
c0022393:	be fc 0c 00 00       	mov    esi,0xcfc
c0022398:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c002239e:	89 f2                	mov    edx,esi
c00223a0:	ee                   	out    dx,al
c00223a1:	89 c8                	mov    eax,ecx
c00223a3:	89 fa                	mov    edx,edi
c00223a5:	ef                   	out    dx,eax
c00223a6:	89 f2                	mov    edx,esi
c00223a8:	ed                   	in     eax,dx
c00223a9:	0f b6 c0             	movzx  eax,al
c00223ac:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c00223b2:	74 46                	je     c00223fa <IDE::open(int, int, void*)+0x1e0>
c00223b4:	83 ec 0c             	sub    esp,0xc
c00223b7:	68 b0 b0 02 c0       	push   0xc002b0b0
c00223bc:	eb 34                	jmp    c00223f2 <IDE::open(int, int, void*)+0x1d8>
c00223be:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c00223c7:	75 17                	jne    c00223e0 <IDE::open(int, int, void*)+0x1c6>
c00223c9:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c00223ce:	74 07                	je     c00223d7 <IDE::open(int, int, void*)+0x1bd>
c00223d0:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c00223d5:	75 09                	jne    c00223e0 <IDE::open(int, int, void*)+0x1c6>
c00223d7:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00223de:	eb 1a                	jmp    c00223fa <IDE::open(int, int, void*)+0x1e0>
c00223e0:	83 ec 0c             	sub    esp,0xc
c00223e3:	68 b8 b0 02 c0       	push   0xc002b0b8
c00223e8:	eb 08                	jmp    c00223f2 <IDE::open(int, int, void*)+0x1d8>
c00223ea:	83 ec 0c             	sub    esp,0xc
c00223ed:	68 e9 b0 02 c0       	push   0xc002b0e9
c00223f2:	e8 9c 74 ff ff       	call   c0019893 <Krnl::panic(char const*)>
c00223f7:	83 c4 10             	add    esp,0x10
c00223fa:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0022401:	79 1a                	jns    c002241d <IDE::open(int, int, void*)+0x203>
c0022403:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0022409:	83 e0 fc             	and    eax,0xfffffffc
c002240c:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0022413:	83 c0 08             	add    eax,0x8
c0022416:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c002241d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0022423:	89 c2                	mov    edx,eax
c0022425:	83 e2 0f             	and    edx,0xf
c0022428:	66 83 fa 08          	cmp    dx,0x8
c002242c:	75 0a                	jne    c0022438 <IDE::open(int, int, void*)+0x21e>
c002242e:	83 e8 02             	sub    eax,0x2
c0022431:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0022438:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c002243e:	89 c2                	mov    edx,eax
c0022440:	83 e2 0f             	and    edx,0xf
c0022443:	66 83 fa 08          	cmp    dx,0x8
c0022447:	75 0a                	jne    c0022453 <IDE::open(int, int, void*)+0x239>
c0022449:	83 e8 02             	sub    eax,0x2
c002244c:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0022453:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c002245a:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0022461:	89 d0                	mov    eax,edx
c0022463:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0022466:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002246a:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c002246e:	8d 4a 01             	lea    ecx,[edx+0x1]
c0022471:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0022476:	0f b6 c9             	movzx  ecx,cl
c0022479:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0022480:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0022483:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0022487:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c002248b:	8d 50 02             	lea    edx,[eax+0x2]
c002248e:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0022493:	0f b6 d2             	movzx  edx,dl
c0022496:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c002249c:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002249f:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00224a3:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c00224a7:	8d 48 03             	lea    ecx,[eax+0x3]
c00224aa:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00224af:	0f b6 c9             	movzx  ecx,cl
c00224b2:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c00224b8:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00224bb:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00224bf:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c00224c3:	8d 50 04             	lea    edx,[eax+0x4]
c00224c6:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c00224cc:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00224d1:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c00224d8:	66 85 f6             	test   si,si
c00224db:	74 3e                	je     c002251b <IDE::open(int, int, void*)+0x301>
c00224dd:	0f b6 d2             	movzx  edx,dl
c00224e0:	83 c0 05             	add    eax,0x5
c00224e3:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00224e6:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00224ea:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c00224ee:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00224f4:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00224f9:	eb 20                	jmp    c002251b <IDE::open(int, int, void*)+0x301>
c00224fb:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0022505:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c002250f:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0022516:	e9 02 ff ff ff       	jmp    c002241d <IDE::open(int, int, void*)+0x203>
c002251b:	52                   	push   edx
c002251c:	52                   	push   edx
c002251d:	6a 00                	push   0x0
c002251f:	53                   	push   ebx
c0022520:	e8 7d fa ff ff       	call   c0021fa2 <IDE::prepareInterrupt(unsigned char)>
c0022525:	59                   	pop    ecx
c0022526:	5e                   	pop    esi
c0022527:	6a 01                	push   0x1
c0022529:	53                   	push   ebx
c002252a:	e8 73 fa ff ff       	call   c0021fa2 <IDE::prepareInterrupt(unsigned char)>
c002252f:	83 c4 0c             	add    esp,0xc
c0022532:	6a 00                	push   0x0
c0022534:	6a 00                	push   0x0
c0022536:	53                   	push   ebx
c0022537:	e8 98 fc ff ff       	call   c00221d4 <IDE::enableIRQs(unsigned char, bool)>
c002253c:	83 c4 0c             	add    esp,0xc
c002253f:	6a 00                	push   0x0
c0022541:	6a 01                	push   0x1
c0022543:	53                   	push   ebx
c0022544:	e8 8b fc ff ff       	call   c00221d4 <IDE::enableIRQs(unsigned char, bool)>
c0022549:	83 c4 10             	add    esp,0x10
c002254c:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0022553:	74 40                	je     c0022595 <IDE::open(int, int, void*)+0x37b>
c0022555:	83 ec 0c             	sub    esp,0xc
c0022558:	68 13 b1 02 c0       	push   0xc002b113
c002255d:	e8 17 02 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c0022562:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0022565:	6a 01                	push   0x1
c0022567:	68 9c 21 02 c0       	push   0xc002219c
c002256c:	6a 0e                	push   0xe
c002256e:	53                   	push   ebx
c002256f:	e8 78 15 ff ff       	call   c0013aec <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022574:	83 c4 14             	add    esp,0x14
c0022577:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002257d:	53                   	push   ebx
c002257e:	6a 01                	push   0x1
c0022580:	68 b8 21 02 c0       	push   0xc00221b8
c0022585:	6a 0f                	push   0xf
c0022587:	53                   	push   ebx
c0022588:	e8 5f 15 ff ff       	call   c0013aec <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002258d:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0022593:	eb 4a                	jmp    c00225df <IDE::open(int, int, void*)+0x3c5>
c0022595:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c002259f:	50                   	push   eax
c00225a0:	6a 0f                	push   0xf
c00225a2:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00225a8:	68 2f b1 02 c0       	push   0xc002b12f
c00225ad:	e8 c7 01 ff ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c00225b2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00225b5:	6a 00                	push   0x0
c00225b7:	68 9c 21 02 c0       	push   0xc002219c
c00225bc:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00225c2:	53                   	push   ebx
c00225c3:	e8 24 15 ff ff       	call   c0013aec <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00225c8:	83 c4 14             	add    esp,0x14
c00225cb:	53                   	push   ebx
c00225cc:	6a 00                	push   0x0
c00225ce:	68 b8 21 02 c0       	push   0xc00221b8
c00225d3:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c00225d9:	53                   	push   ebx
c00225da:	e8 0d 15 ff ff       	call   c0013aec <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00225df:	8b 03                	mov    eax,DWORD PTR [ebx]
c00225e1:	83 c4 20             	add    esp,0x20
c00225e4:	83 ec 0c             	sub    esp,0xc
c00225e7:	53                   	push   ebx
c00225e8:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00225eb:	83 c4 0c             	add    esp,0xc
c00225ee:	6a 07                	push   0x7
c00225f0:	6a 00                	push   0x0
c00225f2:	53                   	push   ebx
c00225f3:	e8 90 fa ff ff       	call   c0022088 <IDE::read(unsigned char, unsigned char)>
c00225f8:	83 c4 0c             	add    esp,0xc
c00225fb:	6a 07                	push   0x7
c00225fd:	6a 01                	push   0x1
c00225ff:	53                   	push   ebx
c0022600:	e8 83 fa ff ff       	call   c0022088 <IDE::read(unsigned char, unsigned char)>
c0022605:	83 c4 0c             	add    esp,0xc
c0022608:	6a 01                	push   0x1
c002260a:	6a 00                	push   0x0
c002260c:	53                   	push   ebx
c002260d:	e8 c2 fb ff ff       	call   c00221d4 <IDE::enableIRQs(unsigned char, bool)>
c0022612:	83 c4 0c             	add    esp,0xc
c0022615:	6a 01                	push   0x1
c0022617:	6a 01                	push   0x1
c0022619:	53                   	push   ebx
c002261a:	e8 b5 fb ff ff       	call   c00221d4 <IDE::enableIRQs(unsigned char, bool)>
c002261f:	83 c4 2c             	add    esp,0x2c
c0022622:	31 c0                	xor    eax,eax
c0022624:	5b                   	pop    ebx
c0022625:	5e                   	pop    esi
c0022626:	5f                   	pop    edi
c0022627:	5d                   	pop    ebp
c0022628:	c3                   	ret    
c0022629:	90                   	nop

c002262a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c002262a:	55                   	push   ebp
c002262b:	57                   	push   edi
c002262c:	56                   	push   esi
c002262d:	53                   	push   ebx
c002262e:	83 ec 1c             	sub    esp,0x1c
c0022631:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0022635:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022639:	8d 50 f8             	lea    edx,[eax-0x8]
c002263c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022640:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0022644:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0022648:	80 fa 03             	cmp    dl,0x3
c002264b:	77 5d                	ja     c00226aa <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c002264d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0022651:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022655:	0f b6 db             	movzx  ebx,bl
c0022658:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c002265b:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c002265f:	83 ca 80             	or     edx,0xffffff80
c0022662:	0f b6 d2             	movzx  edx,dl
c0022665:	52                   	push   edx
c0022666:	6a 0c                	push   0xc
c0022668:	53                   	push   ebx
c0022669:	56                   	push   esi
c002266a:	e8 59 f9 ff ff       	call   c0021fc8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002266f:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0022674:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022678:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002267c:	0f b6 c0             	movzx  eax,al
c002267f:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0022683:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0022685:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c002268a:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c002268e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022692:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0022696:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002269e:	83 c4 2c             	add    esp,0x2c
c00226a1:	5b                   	pop    ebx
c00226a2:	5e                   	pop    esi
c00226a3:	5f                   	pop    edi
c00226a4:	5d                   	pop    ebp
c00226a5:	e9 1e f9 ff ff       	jmp    c0021fc8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00226aa:	3c 07                	cmp    al,0x7
c00226ac:	77 10                	ja     c00226be <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c00226ae:	0f b6 db             	movzx  ebx,bl
c00226b1:	0f b6 d0             	movzx  edx,al
c00226b4:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c00226bc:	eb 2d                	jmp    c00226eb <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00226be:	3c 0d                	cmp    al,0xd
c00226c0:	77 13                	ja     c00226d5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c00226c2:	0f b6 db             	movzx  ebx,bl
c00226c5:	0f b6 c0             	movzx  eax,al
c00226c8:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c00226cf:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c00226d3:	eb 16                	jmp    c00226eb <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00226d5:	3c 15                	cmp    al,0x15
c00226d7:	77 14                	ja     c00226ed <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c00226d9:	0f b6 db             	movzx  ebx,bl
c00226dc:	0f b6 c0             	movzx  eax,al
c00226df:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c00226e7:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c00226eb:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00226ed:	83 c4 1c             	add    esp,0x1c
c00226f0:	5b                   	pop    ebx
c00226f1:	5e                   	pop    esi
c00226f2:	5f                   	pop    edi
c00226f3:	5d                   	pop    ebp
c00226f4:	c3                   	ret    
c00226f5:	90                   	nop

c00226f6 <IDE::detect()>:
c00226f6:	55                   	push   ebp
c00226f7:	57                   	push   edi
c00226f8:	56                   	push   esi
c00226f9:	53                   	push   ebx
c00226fa:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0022700:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0022707:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c002270e:	0f 85 be 02 00 00    	jne    c00229d2 <IDE::detect()+0x2dc>
c0022714:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c002271b:	31 f6                	xor    esi,esi
c002271d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0022725:	31 ed                	xor    ebp,ebp
c0022727:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002272b:	c1 e0 06             	shl    eax,0x6
c002272e:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0022736:	89 e8                	mov    eax,ebp
c0022738:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002273c:	c1 e0 04             	shl    eax,0x4
c002273f:	83 c8 a0             	or     eax,0xffffffa0
c0022742:	0f b6 c0             	movzx  eax,al
c0022745:	50                   	push   eax
c0022746:	6a 06                	push   0x6
c0022748:	56                   	push   esi
c0022749:	53                   	push   ebx
c002274a:	e8 79 f8 ff ff       	call   c0021fc8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002274f:	83 c4 0c             	add    esp,0xc
c0022752:	6a 0c                	push   0xc
c0022754:	56                   	push   esi
c0022755:	53                   	push   ebx
c0022756:	e8 2d f9 ff ff       	call   c0022088 <IDE::read(unsigned char, unsigned char)>
c002275b:	83 c4 0c             	add    esp,0xc
c002275e:	6a 0c                	push   0xc
c0022760:	56                   	push   esi
c0022761:	53                   	push   ebx
c0022762:	e8 21 f9 ff ff       	call   c0022088 <IDE::read(unsigned char, unsigned char)>
c0022767:	83 c4 0c             	add    esp,0xc
c002276a:	6a 0c                	push   0xc
c002276c:	56                   	push   esi
c002276d:	53                   	push   ebx
c002276e:	e8 15 f9 ff ff       	call   c0022088 <IDE::read(unsigned char, unsigned char)>
c0022773:	83 c4 0c             	add    esp,0xc
c0022776:	6a 0c                	push   0xc
c0022778:	56                   	push   esi
c0022779:	53                   	push   ebx
c002277a:	e8 09 f9 ff ff       	call   c0022088 <IDE::read(unsigned char, unsigned char)>
c002277f:	68 ec 00 00 00       	push   0xec
c0022784:	6a 07                	push   0x7
c0022786:	56                   	push   esi
c0022787:	53                   	push   ebx
c0022788:	e8 3b f8 ff ff       	call   c0021fc8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002278d:	83 c4 1c             	add    esp,0x1c
c0022790:	6a 0c                	push   0xc
c0022792:	56                   	push   esi
c0022793:	53                   	push   ebx
c0022794:	e8 ef f8 ff ff       	call   c0022088 <IDE::read(unsigned char, unsigned char)>
c0022799:	83 c4 0c             	add    esp,0xc
c002279c:	6a 0c                	push   0xc
c002279e:	56                   	push   esi
c002279f:	53                   	push   ebx
c00227a0:	e8 e3 f8 ff ff       	call   c0022088 <IDE::read(unsigned char, unsigned char)>
c00227a5:	83 c4 0c             	add    esp,0xc
c00227a8:	6a 0c                	push   0xc
c00227aa:	56                   	push   esi
c00227ab:	53                   	push   ebx
c00227ac:	e8 d7 f8 ff ff       	call   c0022088 <IDE::read(unsigned char, unsigned char)>
c00227b1:	83 c4 0c             	add    esp,0xc
c00227b4:	6a 0c                	push   0xc
c00227b6:	56                   	push   esi
c00227b7:	53                   	push   ebx
c00227b8:	e8 cb f8 ff ff       	call   c0022088 <IDE::read(unsigned char, unsigned char)>
c00227bd:	83 c4 0c             	add    esp,0xc
c00227c0:	6a 0c                	push   0xc
c00227c2:	56                   	push   esi
c00227c3:	53                   	push   ebx
c00227c4:	e8 bf f8 ff ff       	call   c0022088 <IDE::read(unsigned char, unsigned char)>
c00227c9:	83 c4 10             	add    esp,0x10
c00227cc:	84 c0                	test   al,al
c00227ce:	0f 84 8b 01 00 00    	je     c002295f <IDE::detect()+0x269>
c00227d4:	31 ff                	xor    edi,edi
c00227d6:	50                   	push   eax
c00227d7:	6a 0c                	push   0xc
c00227d9:	56                   	push   esi
c00227da:	53                   	push   ebx
c00227db:	e8 a8 f8 ff ff       	call   c0022088 <IDE::read(unsigned char, unsigned char)>
c00227e0:	83 c4 10             	add    esp,0x10
c00227e3:	a8 01                	test   al,0x1
c00227e5:	0f 85 8e 01 00 00    	jne    c0022979 <IDE::detect()+0x283>
c00227eb:	84 c0                	test   al,al
c00227ed:	78 04                	js     c00227f3 <IDE::detect()+0xfd>
c00227ef:	a8 08                	test   al,0x8
c00227f1:	75 27                	jne    c002281a <IDE::detect()+0x124>
c00227f3:	47                   	inc    edi
c00227f4:	81 ff 17 01 00 00    	cmp    edi,0x117
c00227fa:	7e da                	jle    c00227d6 <IDE::detect()+0xe0>
c00227fc:	50                   	push   eax
c00227fd:	50                   	push   eax
c00227fe:	6a 00                	push   0x0
c0022800:	68 40 4b 4c 00       	push   0x4c4b40
c0022805:	e8 00 ab ff ff       	call   c001d30a <nanoSleep(unsigned long long)>
c002280a:	83 c4 10             	add    esp,0x10
c002280d:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0022813:	75 c1                	jne    c00227d6 <IDE::detect()+0xe0>
c0022815:	e9 5f 01 00 00       	jmp    c0022979 <IDE::detect()+0x283>
c002281a:	31 c9                	xor    ecx,ecx
c002281c:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0022820:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0022824:	83 ec 0c             	sub    esp,0xc
c0022827:	68 80 00 00 00       	push   0x80
c002282c:	57                   	push   edi
c002282d:	6a 00                	push   0x0
c002282f:	56                   	push   esi
c0022830:	53                   	push   ebx
c0022831:	e8 f4 fd ff ff       	call   c002262a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0022836:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c002283b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002283f:	89 d1                	mov    ecx,edx
c0022841:	c1 e0 06             	shl    eax,0x6
c0022844:	01 d8                	add    eax,ebx
c0022846:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c002284d:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0022854:	89 f2                	mov    edx,esi
c0022856:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c002285c:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0022860:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0022866:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002286a:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0022871:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0022879:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0022880:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0022888:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c002288e:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0022895:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c002289b:	8d 54 24 58          	lea    edx,[esp+0x58]
c002289f:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00228a3:	83 c4 20             	add    esp,0x20
c00228a6:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c00228a9:	83 c0 02             	add    eax,0x2
c00228ac:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c00228b2:	83 c7 02             	add    edi,0x2
c00228b5:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c00228b8:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c00228be:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00228c2:	75 e2                	jne    c00228a6 <IDE::detect()+0x1b0>
c00228c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00228c8:	c1 e0 06             	shl    eax,0x6
c00228cb:	01 d8                	add    eax,ebx
c00228cd:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c00228d3:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c00228da:	66 c1 ea 09          	shr    dx,0x9
c00228de:	83 e2 01             	and    edx,0x1
c00228e1:	84 c9                	test   cl,cl
c00228e3:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c00228e9:	75 2f                	jne    c002291a <IDE::detect()+0x224>
c00228eb:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c00228f1:	85 c0                	test   eax,eax
c00228f3:	74 66                	je     c002295b <IDE::detect()+0x265>
c00228f5:	50                   	push   eax
c00228f6:	55                   	push   ebp
c00228f7:	56                   	push   esi
c00228f8:	68 4b b1 02 c0       	push   0xc002b14b
c00228fd:	e8 77 fe fe ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c0022902:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0022909:	e8 c6 cb fe ff       	call   c000f4d4 <malloc>
c002290e:	89 c7                	mov    edi,eax
c0022910:	89 04 24             	mov    DWORD PTR [esp],eax
c0022913:	e8 62 06 00 00       	call   c0022f7a <ATA::ATA()>
c0022918:	eb 28                	jmp    c0022942 <IDE::detect()+0x24c>
c002291a:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c0022920:	55                   	push   ebp
c0022921:	56                   	push   esi
c0022922:	68 7a b1 02 c0       	push   0xc002b17a
c0022927:	e8 4d fe fe ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c002292c:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0022933:	e8 9c cb fe ff       	call   c000f4d4 <malloc>
c0022938:	89 c7                	mov    edi,eax
c002293a:	89 04 24             	mov    DWORD PTR [esp],eax
c002293d:	e8 68 0c 00 00       	call   c00235aa <ATAPI::ATAPI()>
c0022942:	5a                   	pop    edx
c0022943:	59                   	pop    ecx
c0022944:	57                   	push   edi
c0022945:	53                   	push   ebx
c0022946:	e8 1d 12 ff ff       	call   c0013b68 <Device::addChild(Device*)>
c002294b:	8b 07                	mov    eax,DWORD PTR [edi]
c002294d:	53                   	push   ebx
c002294e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0022952:	6a 00                	push   0x0
c0022954:	57                   	push   edi
c0022955:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0022958:	83 c4 20             	add    esp,0x20
c002295b:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c002295f:	4d                   	dec    ebp
c0022960:	74 0a                	je     c002296c <IDE::detect()+0x276>
c0022962:	bd 01 00 00 00       	mov    ebp,0x1
c0022967:	e9 bb fd ff ff       	jmp    c0022727 <IDE::detect()+0x31>
c002296c:	4e                   	dec    esi
c002296d:	74 63                	je     c00229d2 <IDE::detect()+0x2dc>
c002296f:	be 01 00 00 00       	mov    esi,0x1
c0022974:	e9 ac fd ff ff       	jmp    c0022725 <IDE::detect()+0x2f>
c0022979:	50                   	push   eax
c002297a:	6a 04                	push   0x4
c002297c:	56                   	push   esi
c002297d:	53                   	push   ebx
c002297e:	e8 05 f7 ff ff       	call   c0022088 <IDE::read(unsigned char, unsigned char)>
c0022983:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0022987:	83 c4 0c             	add    esp,0xc
c002298a:	6a 05                	push   0x5
c002298c:	56                   	push   esi
c002298d:	53                   	push   ebx
c002298e:	e8 f5 f6 ff ff       	call   c0022088 <IDE::read(unsigned char, unsigned char)>
c0022993:	83 c4 10             	add    esp,0x10
c0022996:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c002299a:	80 fa 14             	cmp    dl,0x14
c002299d:	75 04                	jne    c00229a3 <IDE::detect()+0x2ad>
c002299f:	3c eb                	cmp    al,0xeb
c00229a1:	eb 07                	jmp    c00229aa <IDE::detect()+0x2b4>
c00229a3:	3c 96                	cmp    al,0x96
c00229a5:	75 b8                	jne    c002295f <IDE::detect()+0x269>
c00229a7:	80 fa 69             	cmp    dl,0x69
c00229aa:	75 b3                	jne    c002295f <IDE::detect()+0x269>
c00229ac:	68 a1 00 00 00       	push   0xa1
c00229b1:	6a 07                	push   0x7
c00229b3:	56                   	push   esi
c00229b4:	53                   	push   ebx
c00229b5:	e8 0e f6 ff ff       	call   c0021fc8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00229ba:	5f                   	pop    edi
c00229bb:	58                   	pop    eax
c00229bc:	6a 00                	push   0x0
c00229be:	68 40 42 0f 00       	push   0xf4240
c00229c3:	e8 42 a9 ff ff       	call   c001d30a <nanoSleep(unsigned long long)>
c00229c8:	83 c4 10             	add    esp,0x10
c00229cb:	b1 01                	mov    cl,0x1
c00229cd:	e9 4a fe ff ff       	jmp    c002281c <IDE::detect()+0x126>
c00229d2:	81 c4 1c 02 00 00    	add    esp,0x21c
c00229d8:	5b                   	pop    ebx
c00229d9:	5e                   	pop    esi
c00229da:	5f                   	pop    edi
c00229db:	5d                   	pop    ebp
c00229dc:	c3                   	ret    
c00229dd:	90                   	nop

c00229de <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c00229de:	55                   	push   ebp
c00229df:	57                   	push   edi
c00229e0:	56                   	push   esi
c00229e1:	53                   	push   ebx
c00229e2:	83 ec 1c             	sub    esp,0x1c
c00229e5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00229e9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00229ed:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00229f1:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00229f5:	88 c3                	mov    bl,al
c00229f7:	84 c0                	test   al,al
c00229f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00229fd:	0f 84 67 01 00 00    	je     c0022b6a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c0022a03:	83 ec 0c             	sub    esp,0xc
c0022a06:	68 ab b1 02 c0       	push   0xc002b1ab
c0022a0b:	e8 69 fd fe ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c0022a10:	83 c4 10             	add    esp,0x10
c0022a13:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022a17:	3c 01                	cmp    al,0x1
c0022a19:	75 17                	jne    c0022a32 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c0022a1b:	83 ec 0c             	sub    esp,0xc
c0022a1e:	b3 13                	mov    bl,0x13
c0022a20:	68 b7 b1 02 c0       	push   0xc002b1b7
c0022a25:	e8 4f fd fe ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c0022a2a:	83 c4 10             	add    esp,0x10
c0022a2d:	e9 25 01 00 00       	jmp    c0022b57 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0022a32:	3c 02                	cmp    al,0x2
c0022a34:	0f 85 ef 00 00 00    	jne    c0022b29 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0022a3a:	d1 e6                	shl    esi,1
c0022a3c:	09 ee                	or     esi,ebp
c0022a3e:	52                   	push   edx
c0022a3f:	89 f0                	mov    eax,esi
c0022a41:	6a 01                	push   0x1
c0022a43:	0f b6 f0             	movzx  esi,al
c0022a46:	c1 e6 06             	shl    esi,0x6
c0022a49:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0022a51:	50                   	push   eax
c0022a52:	57                   	push   edi
c0022a53:	e8 30 f6 ff ff       	call   c0022088 <IDE::read(unsigned char, unsigned char)>
c0022a58:	83 c4 10             	add    esp,0x10
c0022a5b:	89 c6                	mov    esi,eax
c0022a5d:	a8 01                	test   al,0x1
c0022a5f:	74 12                	je     c0022a73 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0022a61:	83 ec 0c             	sub    esp,0xc
c0022a64:	b3 07                	mov    bl,0x7
c0022a66:	68 cc b1 02 c0       	push   0xc002b1cc
c0022a6b:	e8 09 fd fe ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c0022a70:	83 c4 10             	add    esp,0x10
c0022a73:	f7 c6 02 00 00 00    	test   esi,0x2
c0022a79:	74 12                	je     c0022a8d <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0022a7b:	83 ec 0c             	sub    esp,0xc
c0022a7e:	b3 03                	mov    bl,0x3
c0022a80:	68 ea b1 02 c0       	push   0xc002b1ea
c0022a85:	e8 ef fc fe ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c0022a8a:	83 c4 10             	add    esp,0x10
c0022a8d:	f7 c6 04 00 00 00    	test   esi,0x4
c0022a93:	74 12                	je     c0022aa7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0022a95:	83 ec 0c             	sub    esp,0xc
c0022a98:	b3 14                	mov    bl,0x14
c0022a9a:	68 0a b2 02 c0       	push   0xc002b20a
c0022a9f:	e8 d5 fc fe ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c0022aa4:	83 c4 10             	add    esp,0x10
c0022aa7:	f7 c6 08 00 00 00    	test   esi,0x8
c0022aad:	74 12                	je     c0022ac1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c0022aaf:	83 ec 0c             	sub    esp,0xc
c0022ab2:	b3 03                	mov    bl,0x3
c0022ab4:	68 ea b1 02 c0       	push   0xc002b1ea
c0022ab9:	e8 bb fc fe ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c0022abe:	83 c4 10             	add    esp,0x10
c0022ac1:	f7 c6 10 00 00 00    	test   esi,0x10
c0022ac7:	74 12                	je     c0022adb <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c0022ac9:	83 ec 0c             	sub    esp,0xc
c0022acc:	b3 15                	mov    bl,0x15
c0022ace:	68 22 b2 02 c0       	push   0xc002b222
c0022ad3:	e8 a1 fc fe ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c0022ad8:	83 c4 10             	add    esp,0x10
c0022adb:	f7 c6 20 00 00 00    	test   esi,0x20
c0022ae1:	74 12                	je     c0022af5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c0022ae3:	83 ec 0c             	sub    esp,0xc
c0022ae6:	b3 03                	mov    bl,0x3
c0022ae8:	68 ea b1 02 c0       	push   0xc002b1ea
c0022aed:	e8 87 fc fe ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c0022af2:	83 c4 10             	add    esp,0x10
c0022af5:	f7 c6 40 00 00 00    	test   esi,0x40
c0022afb:	74 12                	je     c0022b0f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c0022afd:	83 ec 0c             	sub    esp,0xc
c0022b00:	b3 16                	mov    bl,0x16
c0022b02:	68 3c b2 02 c0       	push   0xc002b23c
c0022b07:	e8 6d fc fe ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c0022b0c:	83 c4 10             	add    esp,0x10
c0022b0f:	89 f0                	mov    eax,esi
c0022b11:	84 c0                	test   al,al
c0022b13:	79 42                	jns    c0022b57 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0022b15:	83 ec 0c             	sub    esp,0xc
c0022b18:	b3 0d                	mov    bl,0xd
c0022b1a:	68 5d b2 02 c0       	push   0xc002b25d
c0022b1f:	e8 55 fc fe ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c0022b24:	83 c4 10             	add    esp,0x10
c0022b27:	eb 2e                	jmp    c0022b57 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0022b29:	3c 03                	cmp    al,0x3
c0022b2b:	75 14                	jne    c0022b41 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0022b2d:	83 ec 0c             	sub    esp,0xc
c0022b30:	b3 17                	mov    bl,0x17
c0022b32:	68 71 b2 02 c0       	push   0xc002b271
c0022b37:	e8 3d fc fe ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c0022b3c:	83 c4 10             	add    esp,0x10
c0022b3f:	eb 16                	jmp    c0022b57 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0022b41:	3c 04                	cmp    al,0x4
c0022b43:	75 12                	jne    c0022b57 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0022b45:	83 ec 0c             	sub    esp,0xc
c0022b48:	b3 08                	mov    bl,0x8
c0022b4a:	68 87 b2 02 c0       	push   0xc002b287
c0022b4f:	e8 25 fc fe ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c0022b54:	83 c4 10             	add    esp,0x10
c0022b57:	50                   	push   eax
c0022b58:	50                   	push   eax
c0022b59:	0f b6 c3             	movzx  eax,bl
c0022b5c:	50                   	push   eax
c0022b5d:	68 9f b2 02 c0       	push   0xc002b29f
c0022b62:	e8 12 fc fe ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c0022b67:	83 c4 10             	add    esp,0x10
c0022b6a:	83 c4 1c             	add    esp,0x1c
c0022b6d:	88 d8                	mov    al,bl
c0022b6f:	5b                   	pop    ebx
c0022b70:	5e                   	pop    esi
c0022b71:	5f                   	pop    edi
c0022b72:	5d                   	pop    ebp
c0022b73:	c3                   	ret    

c0022b74 <IDE::polling(unsigned char, unsigned int)>:
c0022b74:	57                   	push   edi
c0022b75:	56                   	push   esi
c0022b76:	53                   	push   ebx
c0022b77:	bb 04 00 00 00       	mov    ebx,0x4
c0022b7c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0022b80:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022b85:	52                   	push   edx
c0022b86:	6a 0c                	push   0xc
c0022b88:	56                   	push   esi
c0022b89:	57                   	push   edi
c0022b8a:	e8 f9 f4 ff ff       	call   c0022088 <IDE::read(unsigned char, unsigned char)>
c0022b8f:	83 c4 10             	add    esp,0x10
c0022b92:	4b                   	dec    ebx
c0022b93:	75 f0                	jne    c0022b85 <IDE::polling(unsigned char, unsigned int)+0x11>
c0022b95:	bb a0 86 01 00       	mov    ebx,0x186a0
c0022b9a:	50                   	push   eax
c0022b9b:	6a 0c                	push   0xc
c0022b9d:	56                   	push   esi
c0022b9e:	57                   	push   edi
c0022b9f:	e8 e4 f4 ff ff       	call   c0022088 <IDE::read(unsigned char, unsigned char)>
c0022ba4:	83 c4 10             	add    esp,0x10
c0022ba7:	a8 01                	test   al,0x1
c0022ba9:	74 12                	je     c0022bbd <IDE::polling(unsigned char, unsigned int)+0x49>
c0022bab:	83 ec 0c             	sub    esp,0xc
c0022bae:	68 b9 b2 02 c0       	push   0xc002b2b9
c0022bb3:	e8 c1 fb fe ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c0022bb8:	83 c4 10             	add    esp,0x10
c0022bbb:	eb 17                	jmp    c0022bd4 <IDE::polling(unsigned char, unsigned int)+0x60>
c0022bbd:	a8 20                	test   al,0x20
c0022bbf:	75 0f                	jne    c0022bd0 <IDE::polling(unsigned char, unsigned int)+0x5c>
c0022bc1:	4b                   	dec    ebx
c0022bc2:	74 10                	je     c0022bd4 <IDE::polling(unsigned char, unsigned int)+0x60>
c0022bc4:	84 c0                	test   al,al
c0022bc6:	78 d2                	js     c0022b9a <IDE::polling(unsigned char, unsigned int)+0x26>
c0022bc8:	a8 08                	test   al,0x8
c0022bca:	74 ce                	je     c0022b9a <IDE::polling(unsigned char, unsigned int)+0x26>
c0022bcc:	31 c0                	xor    eax,eax
c0022bce:	eb 06                	jmp    c0022bd6 <IDE::polling(unsigned char, unsigned int)+0x62>
c0022bd0:	b0 01                	mov    al,0x1
c0022bd2:	eb 02                	jmp    c0022bd6 <IDE::polling(unsigned char, unsigned int)+0x62>
c0022bd4:	b0 02                	mov    al,0x2
c0022bd6:	5b                   	pop    ebx
c0022bd7:	5e                   	pop    esi
c0022bd8:	5f                   	pop    edi
c0022bd9:	c3                   	ret    

c0022bda <SATABus::close(int, int, void*)>:
c0022bda:	31 c0                	xor    eax,eax
c0022bdc:	c3                   	ret    
c0022bdd:	90                   	nop

c0022bde <SATABus::detect()>:
c0022bde:	c3                   	ret    
c0022bdf:	90                   	nop

c0022be0 <SATABus::SATABus()>:
c0022be0:	83 ec 0c             	sub    esp,0xc
c0022be3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022be7:	83 ec 08             	sub    esp,0x8
c0022bea:	68 fc b2 02 c0       	push   0xc002b2fc
c0022bef:	50                   	push   eax
c0022bf0:	e8 ff 12 ff ff       	call   c0013ef4 <HardDiskController::HardDiskController(char const*)>
c0022bf5:	83 c4 10             	add    esp,0x10
c0022bf8:	ba b8 b3 02 c0       	mov    edx,0xc002b3b8
c0022bfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c01:	89 10                	mov    DWORD PTR [eax],edx
c0022c03:	83 ec 0c             	sub    esp,0xc
c0022c06:	6a 50                	push   0x50
c0022c08:	e8 02 d0 fe ff       	call   c000fc0f <Phys::allocateContiguousPages(int)>
c0022c0d:	83 c4 10             	add    esp,0x10
c0022c10:	89 c2                	mov    edx,eax
c0022c12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c16:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0022c1c:	83 ec 0c             	sub    esp,0xc
c0022c1f:	6a 50                	push   0x50
c0022c21:	e8 63 eb fe ff       	call   c0011789 <Virt::allocateKernelVirtualPages(int)>
c0022c26:	83 c4 10             	add    esp,0x10
c0022c29:	89 c2                	mov    edx,eax
c0022c2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c2f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022c35:	e8 df ec fe ff       	call   c0011919 <Virt::getAKernelVAS()>
c0022c3a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022c3e:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0022c44:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022c48:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0022c4e:	83 ec 0c             	sub    esp,0xc
c0022c51:	6a 03                	push   0x3
c0022c53:	6a 50                	push   0x50
c0022c55:	51                   	push   ecx
c0022c56:	52                   	push   edx
c0022c57:	50                   	push   eax
c0022c58:	e8 eb f4 fe ff       	call   c0012148 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0022c5d:	83 c4 20             	add    esp,0x20
c0022c60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c64:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0022c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c6e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0022c74:	83 ec 04             	sub    esp,0x4
c0022c77:	52                   	push   edx
c0022c78:	50                   	push   eax
c0022c79:	68 20 b3 02 c0       	push   0xc002b320
c0022c7e:	e8 f6 fa fe ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c0022c83:	83 c4 10             	add    esp,0x10
c0022c86:	90                   	nop
c0022c87:	83 c4 0c             	add    esp,0xc
c0022c8a:	c3                   	ret    
c0022c8b:	90                   	nop

c0022c8c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0022c8c:	83 ec 0c             	sub    esp,0xc
c0022c8f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022c93:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0022c96:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0022c99:	09 c2                	or     edx,eax
c0022c9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c9f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0022ca5:	8b 08                	mov    ecx,DWORD PTR [eax]
c0022ca7:	31 c0                	xor    eax,eax
c0022ca9:	c1 e9 08             	shr    ecx,0x8
c0022cac:	83 e1 0f             	and    ecx,0xf
c0022caf:	39 c8                	cmp    eax,ecx
c0022cb1:	74 0a                	je     c0022cbd <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0022cb3:	f6 c2 01             	test   dl,0x1
c0022cb6:	74 18                	je     c0022cd0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0022cb8:	d1 ea                	shr    edx,1
c0022cba:	40                   	inc    eax
c0022cbb:	eb f2                	jmp    c0022caf <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0022cbd:	83 ec 0c             	sub    esp,0xc
c0022cc0:	68 44 b3 02 c0       	push   0xc002b344
c0022cc5:	e8 c9 6b ff ff       	call   c0019893 <Krnl::panic(char const*)>
c0022cca:	83 c4 10             	add    esp,0x10
c0022ccd:	83 c8 ff             	or     eax,0xffffffff
c0022cd0:	83 c4 0c             	add    esp,0xc
c0022cd3:	c3                   	ret    

c0022cd4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0022cd4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022cd8:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0022cdb:	89 c2                	mov    edx,eax
c0022cdd:	c1 ea 08             	shr    edx,0x8
c0022ce0:	83 e2 0f             	and    edx,0xf
c0022ce3:	fe ca                	dec    dl
c0022ce5:	75 31                	jne    c0022d18 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0022ce7:	83 e0 0f             	and    eax,0xf
c0022cea:	3c 03                	cmp    al,0x3
c0022cec:	75 2a                	jne    c0022d18 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0022cee:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0022cf1:	b8 02 00 00 00       	mov    eax,0x2
c0022cf6:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0022cfc:	74 1c                	je     c0022d1a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0022cfe:	b8 04 00 00 00       	mov    eax,0x4
c0022d03:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0022d09:	74 0f                	je     c0022d1a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0022d0b:	31 c0                	xor    eax,eax
c0022d0d:	83 fa 03             	cmp    edx,0x3
c0022d10:	0f 94 c0             	sete   al
c0022d13:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0022d17:	c3                   	ret    
c0022d18:	31 c0                	xor    eax,eax
c0022d1a:	c3                   	ret    
c0022d1b:	90                   	nop

c0022d1c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0022d1c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022d20:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022d23:	0f ba e2 0f          	bt     edx,0xf
c0022d27:	72 f7                	jb     c0022d20 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0022d29:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022d2c:	83 ca 10             	or     edx,0x10
c0022d2f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0022d32:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022d35:	83 ca 01             	or     edx,0x1
c0022d38:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0022d3b:	c3                   	ret    

c0022d3c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0022d3c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022d40:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022d43:	83 e2 fe             	and    edx,0xfffffffe
c0022d46:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0022d49:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022d4c:	83 e2 ef             	and    edx,0xffffffef
c0022d4f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0022d52:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022d55:	0f ba e2 0e          	bt     edx,0xe
c0022d59:	72 f7                	jb     c0022d52 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0022d5b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022d5e:	0f ba e2 0f          	bt     edx,0xf
c0022d62:	72 ee                	jb     c0022d52 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0022d64:	c3                   	ret    
c0022d65:	90                   	nop

c0022d66 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0022d66:	55                   	push   ebp
c0022d67:	57                   	push   edi
c0022d68:	56                   	push   esi
c0022d69:	53                   	push   ebx
c0022d6a:	83 ec 1c             	sub    esp,0x1c
c0022d6d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022d71:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022d75:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0022d79:	53                   	push   ebx
c0022d7a:	89 fd                	mov    ebp,edi
c0022d7c:	56                   	push   esi
c0022d7d:	c1 e5 0a             	shl    ebp,0xa
c0022d80:	e8 b7 ff ff ff       	call   c0022d3c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0022d85:	83 ec 0c             	sub    esp,0xc
c0022d88:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0022d8e:	01 e8                	add    eax,ebp
c0022d90:	89 03                	mov    DWORD PTR [ebx],eax
c0022d92:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022d94:	68 00 04 00 00       	push   0x400
c0022d99:	6a 00                	push   0x0
c0022d9b:	50                   	push   eax
c0022d9c:	e8 ea d8 fd ff       	call   c000068b <memset>
c0022da1:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0022da7:	89 fa                	mov    edx,edi
c0022da9:	01 e8                	add    eax,ebp
c0022dab:	c1 e7 0d             	shl    edi,0xd
c0022dae:	89 03                	mov    DWORD PTR [ebx],eax
c0022db0:	c1 e2 08             	shl    edx,0x8
c0022db3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022dba:	81 c2 00 80 00 00    	add    edx,0x8000
c0022dc0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0022dc4:	89 d0                	mov    eax,edx
c0022dc6:	83 c4 1c             	add    esp,0x1c
c0022dc9:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0022dcf:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022dd2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0022dd5:	68 00 01 00 00       	push   0x100
c0022dda:	6a 00                	push   0x0
c0022ddc:	50                   	push   eax
c0022ddd:	e8 a9 d8 fd ff       	call   c000068b <memset>
c0022de2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0022de6:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0022dec:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0022df2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022df6:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0022df9:	83 c4 10             	add    esp,0x10
c0022dfc:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0022e03:	31 ff                	xor    edi,edi
c0022e05:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0022e0b:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0022e11:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022e15:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0022e1b:	83 c5 20             	add    ebp,0x20
c0022e1e:	01 f8                	add    eax,edi
c0022e20:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0022e23:	52                   	push   edx
c0022e24:	68 00 01 00 00       	push   0x100
c0022e29:	6a 00                	push   0x0
c0022e2b:	50                   	push   eax
c0022e2c:	e8 5a d8 fd ff       	call   c000068b <memset>
c0022e31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022e35:	83 c4 10             	add    esp,0x10
c0022e38:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0022e3e:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0022e45:	01 f8                	add    eax,edi
c0022e47:	81 c7 00 01 00 00    	add    edi,0x100
c0022e4d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0022e50:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0022e56:	75 b3                	jne    c0022e0b <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0022e58:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0022e5c:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0022e60:	83 c4 1c             	add    esp,0x1c
c0022e63:	5b                   	pop    ebx
c0022e64:	5e                   	pop    esi
c0022e65:	5f                   	pop    edi
c0022e66:	5d                   	pop    ebp
c0022e67:	e9 b0 fe ff ff       	jmp    c0022d1c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0022e6c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0022e6c:	55                   	push   ebp
c0022e6d:	57                   	push   edi
c0022e6e:	56                   	push   esi
c0022e6f:	53                   	push   ebx
c0022e70:	31 db                	xor    ebx,ebx
c0022e72:	83 ec 0c             	sub    esp,0xc
c0022e75:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0022e79:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0022e7d:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0022e80:	f7 c7 01 00 00 00    	test   edi,0x1
c0022e86:	0f 84 94 00 00 00    	je     c0022f20 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb4>
c0022e8c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0022e90:	89 d8                	mov    eax,ebx
c0022e92:	c1 e0 07             	shl    eax,0x7
c0022e95:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0022e9c:	55                   	push   ebp
c0022e9d:	56                   	push   esi
c0022e9e:	e8 31 fe ff ff       	call   c0022cd4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0022ea3:	59                   	pop    ecx
c0022ea4:	83 f8 01             	cmp    eax,0x1
c0022ea7:	5a                   	pop    edx
c0022ea8:	75 47                	jne    c0022ef1 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x85>
c0022eaa:	51                   	push   ecx
c0022eab:	51                   	push   ecx
c0022eac:	53                   	push   ebx
c0022ead:	68 69 b3 02 c0       	push   0xc002b369
c0022eb2:	e8 c2 f8 fe ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c0022eb7:	83 c4 0c             	add    esp,0xc
c0022eba:	53                   	push   ebx
c0022ebb:	55                   	push   ebp
c0022ebc:	56                   	push   esi
c0022ebd:	e8 a4 fe ff ff       	call   c0022d66 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0022ec2:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0022ec9:	e8 06 c6 fe ff       	call   c000f4d4 <malloc>
c0022ece:	89 04 24             	mov    DWORD PTR [esp],eax
c0022ed1:	89 c5                	mov    ebp,eax
c0022ed3:	e8 de 0c 00 00       	call   c0023bb6 <SATA::SATA()>
c0022ed8:	58                   	pop    eax
c0022ed9:	5a                   	pop    edx
c0022eda:	55                   	push   ebp
c0022edb:	56                   	push   esi
c0022edc:	e8 87 0c ff ff       	call   c0013b68 <Device::addChild(Device*)>
c0022ee1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022ee4:	56                   	push   esi
c0022ee5:	6a 00                	push   0x0
c0022ee7:	53                   	push   ebx
c0022ee8:	55                   	push   ebp
c0022ee9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0022eec:	83 c4 20             	add    esp,0x20
c0022eef:	eb 2f                	jmp    c0022f20 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb4>
c0022ef1:	83 f8 04             	cmp    eax,0x4
c0022ef4:	75 1a                	jne    c0022f10 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa4>
c0022ef6:	52                   	push   edx
c0022ef7:	52                   	push   edx
c0022ef8:	53                   	push   ebx
c0022ef9:	68 80 b3 02 c0       	push   0xc002b380
c0022efe:	e8 76 f8 fe ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c0022f03:	83 c4 0c             	add    esp,0xc
c0022f06:	53                   	push   ebx
c0022f07:	55                   	push   ebp
c0022f08:	56                   	push   esi
c0022f09:	e8 58 fe ff ff       	call   c0022d66 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0022f0e:	eb 0d                	jmp    c0022f1d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb1>
c0022f10:	50                   	push   eax
c0022f11:	50                   	push   eax
c0022f12:	53                   	push   ebx
c0022f13:	68 99 b3 02 c0       	push   0xc002b399
c0022f18:	e8 5c f8 fe ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c0022f1d:	83 c4 10             	add    esp,0x10
c0022f20:	d1 ef                	shr    edi,1
c0022f22:	43                   	inc    ebx
c0022f23:	83 fb 20             	cmp    ebx,0x20
c0022f26:	0f 85 54 ff ff ff    	jne    c0022e80 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0022f2c:	83 c4 0c             	add    esp,0xc
c0022f2f:	5b                   	pop    ebx
c0022f30:	5e                   	pop    esi
c0022f31:	5f                   	pop    edi
c0022f32:	5d                   	pop    ebp
c0022f33:	c3                   	ret    

c0022f34 <SATABus::open(int, int, void*)>:
c0022f34:	83 ec 14             	sub    esp,0x14
c0022f37:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022f3b:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0022f41:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0022f47:	52                   	push   edx
c0022f48:	50                   	push   eax
c0022f49:	e8 1e ff ff ff       	call   c0022e6c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0022f4e:	31 c0                	xor    eax,eax
c0022f50:	83 c4 1c             	add    esp,0x1c
c0022f53:	c3                   	ret    

c0022f54 <ATA::close(int, int, void*)>:
c0022f54:	83 ec 0c             	sub    esp,0xc
c0022f57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f5b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0022f61:	85 c0                	test   eax,eax
c0022f63:	74 0c                	je     c0022f71 <ATA::close(int, int, void*)+0x1d>
c0022f65:	83 ec 0c             	sub    esp,0xc
c0022f68:	8b 10                	mov    edx,DWORD PTR [eax]
c0022f6a:	50                   	push   eax
c0022f6b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0022f6e:	83 c4 10             	add    esp,0x10
c0022f71:	31 c0                	xor    eax,eax
c0022f73:	83 c4 0c             	add    esp,0xc
c0022f76:	c3                   	ret    
c0022f77:	90                   	nop

c0022f78 <ATA::powerSaving(PowerSavingLevel)>:
c0022f78:	c3                   	ret    
c0022f79:	90                   	nop

c0022f7a <ATA::ATA()>:
c0022f7a:	83 ec 0c             	sub    esp,0xc
c0022f7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f81:	83 ec 04             	sub    esp,0x4
c0022f84:	68 00 02 00 00       	push   0x200
c0022f89:	68 ac b4 02 c0       	push   0xc002b4ac
c0022f8e:	50                   	push   eax
c0022f8f:	e8 e4 0f ff ff       	call   c0013f78 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0022f94:	83 c4 10             	add    esp,0x10
c0022f97:	ba f8 b3 02 c0       	mov    edx,0xc002b3f8
c0022f9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fa0:	89 10                	mov    DWORD PTR [eax],edx
c0022fa2:	90                   	nop
c0022fa3:	83 c4 0c             	add    esp,0xc
c0022fa6:	c3                   	ret    
c0022fa7:	90                   	nop

c0022fa8 <ATA::flush(bool)>:
c0022fa8:	53                   	push   ebx
c0022fa9:	83 ec 08             	sub    esp,0x8
c0022fac:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0022fb1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022fb5:	19 c0                	sbb    eax,eax
c0022fb7:	83 e0 fd             	and    eax,0xfffffffd
c0022fba:	05 ea 00 00 00       	add    eax,0xea
c0022fbf:	50                   	push   eax
c0022fc0:	6a 07                	push   0x7
c0022fc2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022fc9:	50                   	push   eax
c0022fca:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022fd0:	e8 f3 ef ff ff       	call   c0021fc8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022fd5:	83 c4 0c             	add    esp,0xc
c0022fd8:	6a 00                	push   0x0
c0022fda:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022fe1:	50                   	push   eax
c0022fe2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022fe8:	e8 87 fb ff ff       	call   c0022b74 <IDE::polling(unsigned char, unsigned int)>
c0022fed:	83 c4 18             	add    esp,0x18
c0022ff0:	5b                   	pop    ebx
c0022ff1:	c3                   	ret    

c0022ff2 <ATA::readyForCommand()>:
c0022ff2:	56                   	push   esi
c0022ff3:	53                   	push   ebx
c0022ff4:	31 db                	xor    ebx,ebx
c0022ff6:	50                   	push   eax
c0022ff7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022ffb:	50                   	push   eax
c0022ffc:	6a 0c                	push   0xc
c0022ffe:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0023005:	50                   	push   eax
c0023006:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002300c:	e8 77 f0 ff ff       	call   c0022088 <IDE::read(unsigned char, unsigned char)>
c0023011:	83 c4 10             	add    esp,0x10
c0023014:	a8 88                	test   al,0x88
c0023016:	74 23                	je     c002303b <ATA::readyForCommand()+0x49>
c0023018:	43                   	inc    ebx
c0023019:	83 fb 63             	cmp    ebx,0x63
c002301c:	7e dd                	jle    c0022ffb <ATA::readyForCommand()+0x9>
c002301e:	51                   	push   ecx
c002301f:	51                   	push   ecx
c0023020:	6a 00                	push   0x0
c0023022:	68 40 42 0f 00       	push   0xf4240
c0023027:	e8 de a2 ff ff       	call   c001d30a <nanoSleep(unsigned long long)>
c002302c:	83 c4 10             	add    esp,0x10
c002302f:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0023035:	75 c4                	jne    c0022ffb <ATA::readyForCommand()+0x9>
c0023037:	31 c0                	xor    eax,eax
c0023039:	eb 02                	jmp    c002303d <ATA::readyForCommand()+0x4b>
c002303b:	b0 01                	mov    al,0x1
c002303d:	5a                   	pop    edx
c002303e:	5b                   	pop    ebx
c002303f:	5e                   	pop    esi
c0023040:	c3                   	ret    
c0023041:	90                   	nop

c0023042 <ATA::access(unsigned long long, int, void*, bool)>:
c0023042:	55                   	push   ebp
c0023043:	57                   	push   edi
c0023044:	56                   	push   esi
c0023045:	53                   	push   ebx
c0023046:	83 ec 2c             	sub    esp,0x2c
c0023049:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002304d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0023051:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0023055:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023059:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c002305d:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0023061:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0023065:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c002306b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002306f:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0023075:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023079:	c1 e0 06             	shl    eax,0x6
c002307c:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0023084:	74 5d                	je     c00230e3 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0023086:	89 fa                	mov    edx,edi
c0023088:	89 f0                	mov    eax,esi
c002308a:	0f ac d0 1c          	shrd   eax,edx,0x1c
c002308e:	c1 ea 1c             	shr    edx,0x1c
c0023091:	89 d1                	mov    ecx,edx
c0023093:	09 c1                	or     ecx,eax
c0023095:	74 25                	je     c00230bc <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0023097:	31 ed                	xor    ebp,ebp
c0023099:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c00230a0:	89 fa                	mov    edx,edi
c00230a2:	89 f0                	mov    eax,esi
c00230a4:	0f ad d0             	shrd   eax,edx,cl
c00230a7:	d3 ea                	shr    edx,cl
c00230a9:	f6 c1 20             	test   cl,0x20
c00230ac:	74 02                	je     c00230b0 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c00230ae:	89 d0                	mov    eax,edx
c00230b0:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c00230b4:	45                   	inc    ebp
c00230b5:	83 fd 06             	cmp    ebp,0x6
c00230b8:	75 df                	jne    c0023099 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c00230ba:	eb 76                	jmp    c0023132 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c00230bc:	89 f0                	mov    eax,esi
c00230be:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c00230c3:	89 fa                	mov    edx,edi
c00230c5:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00230cc:	0f ac d0 10          	shrd   eax,edx,0x10
c00230d0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00230d5:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00230d9:	c1 ee 18             	shr    esi,0x18
c00230dc:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c00230e1:	eb 56                	jmp    c0023139 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c00230e3:	6a 00                	push   0x0
c00230e5:	6a 3f                	push   0x3f
c00230e7:	57                   	push   edi
c00230e8:	56                   	push   esi
c00230e9:	e8 3e 24 00 00       	call   c002552c <__umoddi3>
c00230ee:	83 c4 10             	add    esp,0x10
c00230f1:	40                   	inc    eax
c00230f2:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c00230f6:	6a 00                	push   0x0
c00230f8:	68 f0 03 00 00       	push   0x3f0
c00230fd:	57                   	push   edi
c00230fe:	56                   	push   esi
c00230ff:	e8 28 23 00 00       	call   c002542c <__udivdi3>
c0023104:	83 c4 10             	add    esp,0x10
c0023107:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c002310c:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0023113:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0023118:	6a 00                	push   0x0
c002311a:	6a 3f                	push   0x3f
c002311c:	57                   	push   edi
c002311d:	56                   	push   esi
c002311e:	e8 09 23 00 00       	call   c002542c <__udivdi3>
c0023123:	83 c4 10             	add    esp,0x10
c0023126:	89 c6                	mov    esi,eax
c0023128:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c002312d:	83 e6 0f             	and    esi,0xf
c0023130:	eb 07                	jmp    c0023139 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0023132:	31 f6                	xor    esi,esi
c0023134:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0023139:	bf 01 00 00 00       	mov    edi,0x1
c002313e:	50                   	push   eax
c002313f:	6a 00                	push   0x0
c0023141:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023148:	50                   	push   eax
c0023149:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002314d:	e8 82 f0 ff ff       	call   c00221d4 <IDE::enableIRQs(unsigned char, bool)>
c0023152:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023155:	e8 98 fe ff ff       	call   c0022ff2 <ATA::readyForCommand()>
c002315a:	83 c4 10             	add    esp,0x10
c002315d:	84 c0                	test   al,al
c002315f:	0f 84 50 02 00 00    	je     c00233b5 <ATA::access(unsigned long long, int, void*, bool)+0x373>
c0023165:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c002316b:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0023171:	c1 e0 04             	shl    eax,0x4
c0023174:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c002317b:	09 c6                	or     esi,eax
c002317d:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0023182:	75 05                	jne    c0023189 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0023184:	83 ce a0             	or     esi,0xffffffa0
c0023187:	eb 03                	jmp    c002318c <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0023189:	83 ce e0             	or     esi,0xffffffe0
c002318c:	89 f0                	mov    eax,esi
c002318e:	0f b6 f0             	movzx  esi,al
c0023191:	56                   	push   esi
c0023192:	6a 06                	push   0x6
c0023194:	51                   	push   ecx
c0023195:	52                   	push   edx
c0023196:	e8 2d ee ff ff       	call   c0021fc8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002319b:	83 c4 10             	add    esp,0x10
c002319e:	6a 00                	push   0x0
c00231a0:	6a 01                	push   0x1
c00231a2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00231a9:	50                   	push   eax
c00231aa:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00231b0:	e8 13 ee ff ff       	call   c0021fc8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00231b5:	83 c4 10             	add    esp,0x10
c00231b8:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00231bd:	75 6e                	jne    c002322d <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c00231bf:	6a 00                	push   0x0
c00231c1:	6a 08                	push   0x8
c00231c3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00231ca:	50                   	push   eax
c00231cb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00231d1:	e8 f2 ed ff ff       	call   c0021fc8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00231d6:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00231db:	50                   	push   eax
c00231dc:	6a 09                	push   0x9
c00231de:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00231e5:	50                   	push   eax
c00231e6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00231ec:	e8 d7 ed ff ff       	call   c0021fc8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00231f1:	83 c4 20             	add    esp,0x20
c00231f4:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c00231f9:	50                   	push   eax
c00231fa:	6a 0a                	push   0xa
c00231fc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023203:	50                   	push   eax
c0023204:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002320a:	e8 b9 ed ff ff       	call   c0021fc8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002320f:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0023214:	50                   	push   eax
c0023215:	6a 0b                	push   0xb
c0023217:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002321e:	50                   	push   eax
c002321f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023225:	e8 9e ed ff ff       	call   c0021fc8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002322a:	83 c4 20             	add    esp,0x20
c002322d:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0023232:	50                   	push   eax
c0023233:	6a 02                	push   0x2
c0023235:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002323c:	50                   	push   eax
c002323d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023243:	e8 80 ed ff ff       	call   c0021fc8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023248:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c002324d:	50                   	push   eax
c002324e:	6a 03                	push   0x3
c0023250:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023257:	50                   	push   eax
c0023258:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002325e:	e8 65 ed ff ff       	call   c0021fc8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023263:	83 c4 20             	add    esp,0x20
c0023266:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c002326b:	50                   	push   eax
c002326c:	6a 04                	push   0x4
c002326e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023275:	50                   	push   eax
c0023276:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002327c:	e8 47 ed ff ff       	call   c0021fc8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023281:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0023286:	50                   	push   eax
c0023287:	6a 05                	push   0x5
c0023289:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023290:	50                   	push   eax
c0023291:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023297:	e8 2c ed ff ff       	call   c0021fc8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002329c:	83 c4 20             	add    esp,0x20
c002329f:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00232a4:	0f 94 c0             	sete   al
c00232a7:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00232ac:	74 09                	je     c00232b7 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c00232ae:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c00232b5:	eb 07                	jmp    c00232be <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c00232b7:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c00232be:	0f b6 c0             	movzx  eax,al
c00232c1:	50                   	push   eax
c00232c2:	6a 07                	push   0x7
c00232c4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00232cb:	50                   	push   eax
c00232cc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00232d2:	e8 f1 ec ff ff       	call   c0021fc8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00232d7:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c00232db:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c00232df:	83 c4 10             	add    esp,0x10
c00232e2:	85 f6                	test   esi,esi
c00232e4:	0f 84 ac 00 00 00    	je     c0023396 <ATA::access(unsigned long long, int, void*, bool)+0x354>
c00232ea:	50                   	push   eax
c00232eb:	6a 01                	push   0x1
c00232ed:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00232f4:	50                   	push   eax
c00232f5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00232fb:	e8 74 f8 ff ff       	call   c0022b74 <IDE::polling(unsigned char, unsigned int)>
c0023300:	83 c4 10             	add    esp,0x10
c0023303:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0023309:	84 c0                	test   al,al
c002330b:	74 20                	je     c002332d <ATA::access(unsigned long long, int, void*, bool)+0x2eb>
c002330d:	0f b6 f8             	movzx  edi,al
c0023310:	0f b6 d2             	movzx  edx,dl
c0023313:	57                   	push   edi
c0023314:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c002331b:	50                   	push   eax
c002331c:	52                   	push   edx
c002331d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023323:	e8 b6 f6 ff ff       	call   c00229de <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0023328:	e9 85 00 00 00       	jmp    c00233b2 <ATA::access(unsigned long long, int, void*, bool)+0x370>
c002332d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0023332:	74 41                	je     c0023375 <ATA::access(unsigned long long, int, void*, bool)+0x333>
c0023334:	31 c9                	xor    ecx,ecx
c0023336:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c002333a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002333e:	50                   	push   eax
c002333f:	50                   	push   eax
c0023340:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023347:	50                   	push   eax
c0023348:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002334e:	e8 63 ec ff ff       	call   c0021fb6 <IDE::getBase(unsigned char)>
c0023353:	89 c2                	mov    edx,eax
c0023355:	89 e8                	mov    eax,ebp
c0023357:	66 ef                	out    dx,ax
c0023359:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c002335d:	83 c4 10             	add    esp,0x10
c0023360:	41                   	inc    ecx
c0023361:	81 f9 00 01 00 00    	cmp    ecx,0x100
c0023367:	75 cd                	jne    c0023336 <ATA::access(unsigned long long, int, void*, bool)+0x2f4>
c0023369:	4e                   	dec    esi
c002336a:	81 c7 00 02 00 00    	add    edi,0x200
c0023370:	e9 6d ff ff ff       	jmp    c00232e2 <ATA::access(unsigned long long, int, void*, bool)+0x2a0>
c0023375:	0f b6 d2             	movzx  edx,dl
c0023378:	51                   	push   ecx
c0023379:	51                   	push   ecx
c002337a:	52                   	push   edx
c002337b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023381:	e8 30 ec ff ff       	call   c0021fb6 <IDE::getBase(unsigned char)>
c0023386:	b9 00 01 00 00       	mov    ecx,0x100
c002338b:	89 c2                	mov    edx,eax
c002338d:	fc                   	cld    
c002338e:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0023391:	83 c4 10             	add    esp,0x10
c0023394:	eb d3                	jmp    c0023369 <ATA::access(unsigned long long, int, void*, bool)+0x327>
c0023396:	31 ff                	xor    edi,edi
c0023398:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002339d:	74 16                	je     c00233b5 <ATA::access(unsigned long long, int, void*, bool)+0x373>
c002339f:	50                   	push   eax
c00233a0:	50                   	push   eax
c00233a1:	31 c0                	xor    eax,eax
c00233a3:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c00233a8:	0f 94 c0             	sete   al
c00233ab:	50                   	push   eax
c00233ac:	53                   	push   ebx
c00233ad:	e8 f6 fb ff ff       	call   c0022fa8 <ATA::flush(bool)>
c00233b2:	83 c4 10             	add    esp,0x10
c00233b5:	83 c4 2c             	add    esp,0x2c
c00233b8:	89 f8                	mov    eax,edi
c00233ba:	5b                   	pop    ebx
c00233bb:	5e                   	pop    esi
c00233bc:	5f                   	pop    edi
c00233bd:	5d                   	pop    ebp
c00233be:	c3                   	ret    
c00233bf:	90                   	nop

c00233c0 <ATA::read(unsigned long long, int, void*)>:
c00233c0:	57                   	push   edi
c00233c1:	b8 04 00 00 00       	mov    eax,0x4
c00233c6:	56                   	push   esi
c00233c7:	53                   	push   ebx
c00233c8:	83 ec 10             	sub    esp,0x10
c00233cb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00233cf:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00233d3:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00233d6:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00233da:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00233de:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00233e4:	77 3b                	ja     c0023421 <ATA::read(unsigned long long, int, void*)+0x61>
c00233e6:	b8 06 00 00 00       	mov    eax,0x6
c00233eb:	85 d2                	test   edx,edx
c00233ed:	74 32                	je     c0023421 <ATA::read(unsigned long long, int, void*)+0x61>
c00233ef:	50                   	push   eax
c00233f0:	50                   	push   eax
c00233f1:	6a 00                	push   0x0
c00233f3:	52                   	push   edx
c00233f4:	53                   	push   ebx
c00233f5:	57                   	push   edi
c00233f6:	56                   	push   esi
c00233f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00233fb:	e8 42 fc ff ff       	call   c0023042 <ATA::access(unsigned long long, int, void*, bool)>
c0023400:	83 c4 20             	add    esp,0x20
c0023403:	85 c0                	test   eax,eax
c0023405:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023409:	75 11                	jne    c002341c <ATA::read(unsigned long long, int, void*)+0x5c>
c002340b:	01 1d 28 ed 02 c0    	add    DWORD PTR ds:0xc002ed28,ebx
c0023411:	e8 c8 d1 fe ff       	call   c00105de <VgaText::updateDiskUsage()>
c0023416:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002341a:	eb 05                	jmp    c0023421 <ATA::read(unsigned long long, int, void*)+0x61>
c002341c:	b8 01 00 00 00       	mov    eax,0x1
c0023421:	83 c4 10             	add    esp,0x10
c0023424:	5b                   	pop    ebx
c0023425:	5e                   	pop    esi
c0023426:	5f                   	pop    edi
c0023427:	c3                   	ret    

c0023428 <ATA::write(unsigned long long, int, void*)>:
c0023428:	57                   	push   edi
c0023429:	b8 04 00 00 00       	mov    eax,0x4
c002342e:	56                   	push   esi
c002342f:	53                   	push   ebx
c0023430:	83 ec 10             	sub    esp,0x10
c0023433:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0023437:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002343b:	8d 4b ff             	lea    ecx,[ebx-0x1]
c002343e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0023442:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023446:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c002344c:	77 3b                	ja     c0023489 <ATA::write(unsigned long long, int, void*)+0x61>
c002344e:	b8 06 00 00 00       	mov    eax,0x6
c0023453:	85 d2                	test   edx,edx
c0023455:	74 32                	je     c0023489 <ATA::write(unsigned long long, int, void*)+0x61>
c0023457:	50                   	push   eax
c0023458:	50                   	push   eax
c0023459:	6a 01                	push   0x1
c002345b:	52                   	push   edx
c002345c:	53                   	push   ebx
c002345d:	57                   	push   edi
c002345e:	56                   	push   esi
c002345f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0023463:	e8 da fb ff ff       	call   c0023042 <ATA::access(unsigned long long, int, void*, bool)>
c0023468:	83 c4 20             	add    esp,0x20
c002346b:	85 c0                	test   eax,eax
c002346d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023471:	75 11                	jne    c0023484 <ATA::write(unsigned long long, int, void*)+0x5c>
c0023473:	01 1d 24 ed 02 c0    	add    DWORD PTR ds:0xc002ed24,ebx
c0023479:	e8 60 d1 fe ff       	call   c00105de <VgaText::updateDiskUsage()>
c002347e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023482:	eb 05                	jmp    c0023489 <ATA::write(unsigned long long, int, void*)+0x61>
c0023484:	b8 01 00 00 00       	mov    eax,0x1
c0023489:	83 c4 10             	add    esp,0x10
c002348c:	5b                   	pop    ebx
c002348d:	5e                   	pop    esi
c002348e:	5f                   	pop    edi
c002348f:	c3                   	ret    

c0023490 <ATA::detectCHS()>:
c0023490:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0023494:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c002349a:	c1 e0 06             	shl    eax,0x6
c002349d:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c00234a3:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c00234ad:	c7 44 24 04 dc b3 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b3dc
c00234b5:	e9 d9 63 ff ff       	jmp    c0019893 <Krnl::panic(char const*)>

c00234ba <ATA::open(int, int, void*)>:
c00234ba:	53                   	push   ebx
c00234bb:	83 ec 08             	sub    esp,0x8
c00234be:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00234c2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00234c6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00234ca:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00234d0:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00234d6:	c1 e0 06             	shl    eax,0x6
c00234d9:	01 d0                	add    eax,edx
c00234db:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c00234e2:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c00234e8:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c00234ef:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00234f9:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c00234ff:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0023506:	75 0c                	jne    c0023514 <ATA::open(int, int, void*)+0x5a>
c0023508:	83 ec 0c             	sub    esp,0xc
c002350b:	53                   	push   ebx
c002350c:	e8 7f ff ff ff       	call   c0023490 <ATA::detectCHS()>
c0023511:	83 c4 10             	add    esp,0x10
c0023514:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002351a:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0023520:	c1 e0 06             	shl    eax,0x6
c0023523:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c002352a:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0023534:	d1 e8                	shr    eax,1
c0023536:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c002353c:	6a 04                	push   0x4
c002353e:	6a 0c                	push   0xc
c0023540:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023547:	50                   	push   eax
c0023548:	52                   	push   edx
c0023549:	e8 7a ea ff ff       	call   c0021fc8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002354e:	90                   	nop
c002354f:	90                   	nop
c0023550:	6a 00                	push   0x0
c0023552:	6a 0c                	push   0xc
c0023554:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002355b:	50                   	push   eax
c002355c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023562:	e8 61 ea ff ff       	call   c0021fc8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023567:	83 c4 14             	add    esp,0x14
c002356a:	53                   	push   ebx
c002356b:	e8 70 0a ff ff       	call   c0013fe0 <PhysicalDisk::startCache()>
c0023570:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023573:	e8 92 2a ff ff       	call   c001600a <createPartitionsForDisk(PhysicalDisk*)>
c0023578:	31 c0                	xor    eax,eax
c002357a:	83 c4 18             	add    esp,0x18
c002357d:	5b                   	pop    ebx
c002357e:	c3                   	ret    
c002357f:	90                   	nop

c0023580 <ATAPI::write(unsigned long long, int, void*)>:
c0023580:	b8 03 00 00 00       	mov    eax,0x3
c0023585:	c3                   	ret    

c0023586 <ATAPI::close(int, int, void*)>:
c0023586:	83 ec 0c             	sub    esp,0xc
c0023589:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002358d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023593:	85 c0                	test   eax,eax
c0023595:	74 0c                	je     c00235a3 <ATAPI::close(int, int, void*)+0x1d>
c0023597:	83 ec 0c             	sub    esp,0xc
c002359a:	8b 10                	mov    edx,DWORD PTR [eax]
c002359c:	50                   	push   eax
c002359d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00235a0:	83 c4 10             	add    esp,0x10
c00235a3:	31 c0                	xor    eax,eax
c00235a5:	83 c4 0c             	add    esp,0xc
c00235a8:	c3                   	ret    
c00235a9:	90                   	nop

c00235aa <ATAPI::ATAPI()>:
c00235aa:	83 ec 0c             	sub    esp,0xc
c00235ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00235b1:	83 ec 04             	sub    esp,0x4
c00235b4:	68 00 08 00 00       	push   0x800
c00235b9:	68 24 b4 02 c0       	push   0xc002b424
c00235be:	50                   	push   eax
c00235bf:	e8 b4 09 ff ff       	call   c0013f78 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00235c4:	83 c4 10             	add    esp,0x10
c00235c7:	ba 64 b4 02 c0       	mov    edx,0xc002b464
c00235cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00235d0:	89 10                	mov    DWORD PTR [eax],edx
c00235d2:	90                   	nop
c00235d3:	83 c4 0c             	add    esp,0xc
c00235d6:	c3                   	ret    
c00235d7:	90                   	nop

c00235d8 <ATAPI::readyForCommand()>:
c00235d8:	56                   	push   esi
c00235d9:	53                   	push   ebx
c00235da:	31 db                	xor    ebx,ebx
c00235dc:	50                   	push   eax
c00235dd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00235e1:	50                   	push   eax
c00235e2:	6a 0c                	push   0xc
c00235e4:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00235eb:	50                   	push   eax
c00235ec:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00235f2:	e8 91 ea ff ff       	call   c0022088 <IDE::read(unsigned char, unsigned char)>
c00235f7:	83 c4 10             	add    esp,0x10
c00235fa:	a8 88                	test   al,0x88
c00235fc:	74 23                	je     c0023621 <ATAPI::readyForCommand()+0x49>
c00235fe:	43                   	inc    ebx
c00235ff:	83 fb 63             	cmp    ebx,0x63
c0023602:	7e dd                	jle    c00235e1 <ATAPI::readyForCommand()+0x9>
c0023604:	51                   	push   ecx
c0023605:	51                   	push   ecx
c0023606:	6a 00                	push   0x0
c0023608:	68 40 42 0f 00       	push   0xf4240
c002360d:	e8 f8 9c ff ff       	call   c001d30a <nanoSleep(unsigned long long)>
c0023612:	83 c4 10             	add    esp,0x10
c0023615:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c002361b:	75 c4                	jne    c00235e1 <ATAPI::readyForCommand()+0x9>
c002361d:	31 c0                	xor    eax,eax
c002361f:	eb 02                	jmp    c0023623 <ATAPI::readyForCommand()+0x4b>
c0023621:	b0 01                	mov    al,0x1
c0023623:	5a                   	pop    edx
c0023624:	5b                   	pop    ebx
c0023625:	5e                   	pop    esi
c0023626:	c3                   	ret    
c0023627:	90                   	nop

c0023628 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0023628:	55                   	push   ebp
c0023629:	57                   	push   edi
c002362a:	56                   	push   esi
c002362b:	53                   	push   ebx
c002362c:	83 ec 20             	sub    esp,0x20
c002362f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0023633:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0023637:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c002363b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002363f:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0023643:	6a 01                	push   0x1
c0023645:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002364c:	50                   	push   eax
c002364d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023653:	e8 7c eb ff ff       	call   c00221d4 <IDE::enableIRQs(unsigned char, bool)>
c0023658:	5e                   	pop    esi
c0023659:	58                   	pop    eax
c002365a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023661:	50                   	push   eax
c0023662:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023668:	e8 35 e9 ff ff       	call   c0021fa2 <IDE::prepareInterrupt(unsigned char)>
c002366d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0023670:	e8 63 ff ff ff       	call   c00235d8 <ATAPI::readyForCommand()>
c0023675:	83 c4 10             	add    esp,0x10
c0023678:	84 c0                	test   al,al
c002367a:	75 0a                	jne    c0023686 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c002367c:	bb 01 00 00 00       	mov    ebx,0x1
c0023681:	e9 57 02 00 00       	jmp    c00238dd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0023686:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c002368c:	c1 e0 04             	shl    eax,0x4
c002368f:	0f b6 c0             	movzx  eax,al
c0023692:	50                   	push   eax
c0023693:	6a 06                	push   0x6
c0023695:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002369c:	50                   	push   eax
c002369d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00236a3:	e8 20 e9 ff ff       	call   c0021fc8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00236a8:	6a 00                	push   0x0
c00236aa:	6a 01                	push   0x1
c00236ac:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00236b3:	50                   	push   eax
c00236b4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00236ba:	e8 09 e9 ff ff       	call   c0021fc8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00236bf:	83 c4 20             	add    esp,0x20
c00236c2:	0f b6 c3             	movzx  eax,bl
c00236c5:	0f b6 df             	movzx  ebx,bh
c00236c8:	50                   	push   eax
c00236c9:	6a 04                	push   0x4
c00236cb:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00236d2:	50                   	push   eax
c00236d3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00236d9:	e8 ea e8 ff ff       	call   c0021fc8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00236de:	53                   	push   ebx
c00236df:	6a 05                	push   0x5
c00236e1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00236e8:	50                   	push   eax
c00236e9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00236ef:	e8 d4 e8 ff ff       	call   c0021fc8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00236f4:	83 c4 20             	add    esp,0x20
c00236f7:	68 a0 00 00 00       	push   0xa0
c00236fc:	6a 07                	push   0x7
c00236fe:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023705:	50                   	push   eax
c0023706:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002370c:	e8 b7 e8 ff ff       	call   c0021fc8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023711:	83 c4 0c             	add    esp,0xc
c0023714:	6a 01                	push   0x1
c0023716:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002371d:	50                   	push   eax
c002371e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023724:	e8 4b f4 ff ff       	call   c0022b74 <IDE::polling(unsigned char, unsigned int)>
c0023729:	83 c4 10             	add    esp,0x10
c002372c:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0023732:	84 c0                	test   al,al
c0023734:	74 23                	je     c0023759 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0023736:	0f b6 d8             	movzx  ebx,al
c0023739:	0f b6 d2             	movzx  edx,dl
c002373c:	53                   	push   ebx
c002373d:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0023744:	50                   	push   eax
c0023745:	52                   	push   edx
c0023746:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002374c:	e8 8d f2 ff ff       	call   c00229de <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0023751:	83 c4 10             	add    esp,0x10
c0023754:	e9 84 01 00 00       	jmp    c00238dd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0023759:	0f b6 d2             	movzx  edx,dl
c002375c:	53                   	push   ebx
c002375d:	53                   	push   ebx
c002375e:	52                   	push   edx
c002375f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023765:	e8 4c e8 ff ff       	call   c0021fb6 <IDE::getBase(unsigned char)>
c002376a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002376e:	b9 06 00 00 00       	mov    ecx,0x6
c0023773:	89 c2                	mov    edx,eax
c0023775:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0023778:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c002377c:	83 c4 10             	add    esp,0x10
c002377f:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0023785:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002378c:	85 db                	test   ebx,ebx
c002378e:	0f 84 ec 00 00 00    	je     c0023880 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0023794:	51                   	push   ecx
c0023795:	51                   	push   ecx
c0023796:	52                   	push   edx
c0023797:	50                   	push   eax
c0023798:	e8 99 e9 ff ff       	call   c0022136 <IDE::waitInterrupt(unsigned char)>
c002379d:	83 c4 10             	add    esp,0x10
c00237a0:	84 c0                	test   al,al
c00237a2:	0f 84 d4 fe ff ff    	je     c002367c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00237a8:	56                   	push   esi
c00237a9:	56                   	push   esi
c00237aa:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00237b1:	50                   	push   eax
c00237b2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00237b8:	e8 e5 e7 ff ff       	call   c0021fa2 <IDE::prepareInterrupt(unsigned char)>
c00237bd:	83 c4 0c             	add    esp,0xc
c00237c0:	6a 04                	push   0x4
c00237c2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00237c9:	50                   	push   eax
c00237ca:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00237d0:	e8 b3 e8 ff ff       	call   c0022088 <IDE::read(unsigned char, unsigned char)>
c00237d5:	83 c4 0c             	add    esp,0xc
c00237d8:	89 c6                	mov    esi,eax
c00237da:	6a 05                	push   0x5
c00237dc:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00237e3:	50                   	push   eax
c00237e4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00237ea:	e8 99 e8 ff ff       	call   c0022088 <IDE::read(unsigned char, unsigned char)>
c00237ef:	89 f1                	mov    ecx,esi
c00237f1:	0f b6 c0             	movzx  eax,al
c00237f4:	0f b6 f1             	movzx  esi,cl
c00237f7:	c1 e0 08             	shl    eax,0x8
c00237fa:	09 c6                	or     esi,eax
c00237fc:	d1 fe                	sar    esi,1
c00237fe:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0023802:	83 c4 10             	add    esp,0x10
c0023805:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c002380a:	74 41                	je     c002384d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c002380c:	31 c9                	xor    ecx,ecx
c002380e:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0023814:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002381b:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c002381f:	75 0a                	jne    c002382b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0023821:	01 c9                	add    ecx,ecx
c0023823:	01 cd                	add    ebp,ecx
c0023825:	4b                   	dec    ebx
c0023826:	e9 54 ff ff ff       	jmp    c002377f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c002382b:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0023830:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0023834:	51                   	push   ecx
c0023835:	51                   	push   ecx
c0023836:	52                   	push   edx
c0023837:	50                   	push   eax
c0023838:	e8 79 e7 ff ff       	call   c0021fb6 <IDE::getBase(unsigned char)>
c002383d:	89 c2                	mov    edx,eax
c002383f:	89 f0                	mov    eax,esi
c0023841:	66 ef                	out    dx,ax
c0023843:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023847:	83 c4 10             	add    esp,0x10
c002384a:	41                   	inc    ecx
c002384b:	eb c1                	jmp    c002380e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c002384d:	31 f6                	xor    esi,esi
c002384f:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0023855:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002385c:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0023860:	75 06                	jne    c0023868 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0023862:	01 f6                	add    esi,esi
c0023864:	01 f5                	add    ebp,esi
c0023866:	eb bd                	jmp    c0023825 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0023868:	51                   	push   ecx
c0023869:	51                   	push   ecx
c002386a:	52                   	push   edx
c002386b:	50                   	push   eax
c002386c:	e8 45 e7 ff ff       	call   c0021fb6 <IDE::getBase(unsigned char)>
c0023871:	89 c2                	mov    edx,eax
c0023873:	66 ed                	in     ax,dx
c0023875:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c002387a:	83 c4 10             	add    esp,0x10
c002387d:	46                   	inc    esi
c002387e:	eb cf                	jmp    c002384f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0023880:	51                   	push   ecx
c0023881:	51                   	push   ecx
c0023882:	52                   	push   edx
c0023883:	50                   	push   eax
c0023884:	e8 ad e8 ff ff       	call   c0022136 <IDE::waitInterrupt(unsigned char)>
c0023889:	83 c4 10             	add    esp,0x10
c002388c:	84 c0                	test   al,al
c002388e:	0f 84 e8 fd ff ff    	je     c002367c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0023894:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023899:	52                   	push   edx
c002389a:	52                   	push   edx
c002389b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00238a2:	50                   	push   eax
c00238a3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00238a9:	e8 f4 e6 ff ff       	call   c0021fa2 <IDE::prepareInterrupt(unsigned char)>
c00238ae:	83 c4 10             	add    esp,0x10
c00238b1:	50                   	push   eax
c00238b2:	50                   	push   eax
c00238b3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00238ba:	50                   	push   eax
c00238bb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00238c1:	e8 f0 e6 ff ff       	call   c0021fb6 <IDE::getBase(unsigned char)>
c00238c6:	8d 50 07             	lea    edx,[eax+0x7]
c00238c9:	ec                   	in     al,dx
c00238ca:	83 c4 10             	add    esp,0x10
c00238cd:	a8 88                	test   al,0x88
c00238cf:	74 0a                	je     c00238db <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c00238d1:	4b                   	dec    ebx
c00238d2:	75 dd                	jne    c00238b1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c00238d4:	bb 02 00 00 00       	mov    ebx,0x2
c00238d9:	eb 02                	jmp    c00238dd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00238db:	31 db                	xor    ebx,ebx
c00238dd:	83 c4 1c             	add    esp,0x1c
c00238e0:	89 d8                	mov    eax,ebx
c00238e2:	5b                   	pop    ebx
c00238e3:	5e                   	pop    esi
c00238e4:	5f                   	pop    edi
c00238e5:	5d                   	pop    ebp
c00238e6:	c3                   	ret    
c00238e7:	90                   	nop

c00238e8 <ATAPI::diskRemoved()>:
c00238e8:	83 ec 18             	sub    esp,0x18
c00238eb:	68 2f b4 02 c0       	push   0xc002b42f
c00238f0:	e8 84 ee fe ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c00238f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00238f9:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0023900:	83 c4 1c             	add    esp,0x1c
c0023903:	c3                   	ret    

c0023904 <ATAPI::eject()>:
c0023904:	57                   	push   edi
c0023905:	b9 03 00 00 00       	mov    ecx,0x3
c002390a:	53                   	push   ebx
c002390b:	83 ec 14             	sub    esp,0x14
c002390e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0023912:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0023916:	fc                   	cld    
c0023917:	31 c0                	xor    eax,eax
c0023919:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002391b:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0023920:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0023925:	50                   	push   eax
c0023926:	50                   	push   eax
c0023927:	6a 00                	push   0x0
c0023929:	6a 00                	push   0x0
c002392b:	6a 00                	push   0x0
c002392d:	6a 02                	push   0x2
c002392f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0023933:	50                   	push   eax
c0023934:	53                   	push   ebx
c0023935:	e8 ee fc ff ff       	call   c0023628 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002393a:	83 c4 14             	add    esp,0x14
c002393d:	53                   	push   ebx
c002393e:	e8 a5 ff ff ff       	call   c00238e8 <ATAPI::diskRemoved()>
c0023943:	83 c4 24             	add    esp,0x24
c0023946:	5b                   	pop    ebx
c0023947:	5f                   	pop    edi
c0023948:	c3                   	ret    
c0023949:	90                   	nop

c002394a <ATAPI::diskInserted()>:
c002394a:	53                   	push   ebx
c002394b:	83 ec 14             	sub    esp,0x14
c002394e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0023952:	68 45 b4 02 c0       	push   0xc002b445
c0023957:	e8 1d ee fe ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c002395c:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0023963:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023966:	e8 75 06 ff ff       	call   c0013fe0 <PhysicalDisk::startCache()>
c002396b:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c002396f:	83 c4 18             	add    esp,0x18
c0023972:	5b                   	pop    ebx
c0023973:	e9 92 26 ff ff       	jmp    c001600a <createPartitionsForDisk(PhysicalDisk*)>

c0023978 <ATAPI::detectMedia()>:
c0023978:	56                   	push   esi
c0023979:	53                   	push   ebx
c002397a:	83 ec 28             	sub    esp,0x28
c002397d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023981:	6a 0c                	push   0xc
c0023983:	6a 00                	push   0x0
c0023985:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0023989:	56                   	push   esi
c002398a:	e8 fc cc fd ff       	call   c000068b <memset>
c002398f:	58                   	pop    eax
c0023990:	5a                   	pop    edx
c0023991:	6a 00                	push   0x0
c0023993:	6a 00                	push   0x0
c0023995:	6a 00                	push   0x0
c0023997:	6a 00                	push   0x0
c0023999:	56                   	push   esi
c002399a:	53                   	push   ebx
c002399b:	e8 88 fc ff ff       	call   c0023628 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00239a0:	83 c4 1c             	add    esp,0x1c
c00239a3:	6a 0c                	push   0xc
c00239a5:	6a 00                	push   0x0
c00239a7:	56                   	push   esi
c00239a8:	e8 de cc fd ff       	call   c000068b <memset>
c00239ad:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00239b2:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00239b7:	59                   	pop    ecx
c00239b8:	58                   	pop    eax
c00239b9:	6a 01                	push   0x1
c00239bb:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c00239bf:	50                   	push   eax
c00239c0:	6a 00                	push   0x0
c00239c2:	6a 12                	push   0x12
c00239c4:	56                   	push   esi
c00239c5:	53                   	push   ebx
c00239c6:	e8 5d fc ff ff       	call   c0023628 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00239cb:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00239cf:	83 c4 20             	add    esp,0x20
c00239d2:	83 e0 7f             	and    eax,0x7f
c00239d5:	3c 70                	cmp    al,0x70
c00239d7:	74 15                	je     c00239ee <ATAPI::detectMedia()+0x76>
c00239d9:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00239e0:	75 0c                	jne    c00239ee <ATAPI::detectMedia()+0x76>
c00239e2:	83 ec 0c             	sub    esp,0xc
c00239e5:	53                   	push   ebx
c00239e6:	e8 5f ff ff ff       	call   c002394a <ATAPI::diskInserted()>
c00239eb:	83 c4 10             	add    esp,0x10
c00239ee:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00239f2:	83 e0 0f             	and    eax,0xf
c00239f5:	3c 02                	cmp    al,0x2
c00239f7:	75 1b                	jne    c0023a14 <ATAPI::detectMedia()+0x9c>
c00239f9:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00239fe:	75 2d                	jne    c0023a2d <ATAPI::detectMedia()+0xb5>
c0023a00:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0023a07:	74 24                	je     c0023a2d <ATAPI::detectMedia()+0xb5>
c0023a09:	83 ec 0c             	sub    esp,0xc
c0023a0c:	53                   	push   ebx
c0023a0d:	e8 d6 fe ff ff       	call   c00238e8 <ATAPI::diskRemoved()>
c0023a12:	eb 16                	jmp    c0023a2a <ATAPI::detectMedia()+0xb2>
c0023a14:	84 c0                	test   al,al
c0023a16:	75 15                	jne    c0023a2d <ATAPI::detectMedia()+0xb5>
c0023a18:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0023a1f:	75 0c                	jne    c0023a2d <ATAPI::detectMedia()+0xb5>
c0023a21:	83 ec 0c             	sub    esp,0xc
c0023a24:	53                   	push   ebx
c0023a25:	e8 20 ff ff ff       	call   c002394a <ATAPI::diskInserted()>
c0023a2a:	83 c4 10             	add    esp,0x10
c0023a2d:	83 c4 24             	add    esp,0x24
c0023a30:	5b                   	pop    ebx
c0023a31:	5e                   	pop    esi
c0023a32:	c3                   	ret    
c0023a33:	90                   	nop

c0023a34 <ATAPI::open(int, int, void*)>:
c0023a34:	53                   	push   ebx
c0023a35:	83 ec 08             	sub    esp,0x8
c0023a38:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023a3c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023a40:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023a44:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0023a4a:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0023a50:	c1 e0 06             	shl    eax,0x6
c0023a53:	01 d0                	add    eax,edx
c0023a55:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0023a5c:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0023a62:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0023a69:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0023a73:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0023a79:	6a 04                	push   0x4
c0023a7b:	6a 0c                	push   0xc
c0023a7d:	51                   	push   ecx
c0023a7e:	52                   	push   edx
c0023a7f:	e8 44 e5 ff ff       	call   c0021fc8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023a84:	90                   	nop
c0023a85:	90                   	nop
c0023a86:	6a 00                	push   0x0
c0023a88:	6a 0c                	push   0xc
c0023a8a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023a91:	50                   	push   eax
c0023a92:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023a98:	e8 2b e5 ff ff       	call   c0021fc8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023a9d:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0023aa4:	83 c4 14             	add    esp,0x14
c0023aa7:	53                   	push   ebx
c0023aa8:	e8 cb fe ff ff       	call   c0023978 <ATAPI::detectMedia()>
c0023aad:	31 c0                	xor    eax,eax
c0023aaf:	83 c4 18             	add    esp,0x18
c0023ab2:	5b                   	pop    ebx
c0023ab3:	c3                   	ret    

c0023ab4 <ATAPI::read(unsigned long long, int, void*)>:
c0023ab4:	55                   	push   ebp
c0023ab5:	57                   	push   edi
c0023ab6:	56                   	push   esi
c0023ab7:	53                   	push   ebx
c0023ab8:	83 ec 1c             	sub    esp,0x1c
c0023abb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023abf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023ac3:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0023ac7:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0023ace:	74 41                	je     c0023b11 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0023ad0:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0023ad4:	b9 03 00 00 00       	mov    ecx,0x3
c0023ad9:	fc                   	cld    
c0023ada:	31 c0                	xor    eax,eax
c0023adc:	86 fb                	xchg   bl,bh
c0023ade:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0023ae0:	c1 c3 10             	rol    ebx,0x10
c0023ae3:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0023ae8:	89 e8                	mov    eax,ebp
c0023aea:	86 fb                	xchg   bl,bh
c0023aec:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0023af0:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0023af4:	50                   	push   eax
c0023af5:	50                   	push   eax
c0023af6:	55                   	push   ebp
c0023af7:	c1 e5 0b             	shl    ebp,0xb
c0023afa:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0023afe:	6a 00                	push   0x0
c0023b00:	55                   	push   ebp
c0023b01:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0023b05:	50                   	push   eax
c0023b06:	56                   	push   esi
c0023b07:	e8 1c fb ff ff       	call   c0023628 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0023b0c:	83 c4 20             	add    esp,0x20
c0023b0f:	eb 1a                	jmp    c0023b2b <ATAPI::read(unsigned long long, int, void*)+0x77>
c0023b11:	83 ec 0c             	sub    esp,0xc
c0023b14:	56                   	push   esi
c0023b15:	e8 5e fe ff ff       	call   c0023978 <ATAPI::detectMedia()>
c0023b1a:	83 c4 10             	add    esp,0x10
c0023b1d:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0023b24:	75 aa                	jne    c0023ad0 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0023b26:	b8 02 00 00 00       	mov    eax,0x2
c0023b2b:	83 c4 1c             	add    esp,0x1c
c0023b2e:	5b                   	pop    ebx
c0023b2f:	5e                   	pop    esi
c0023b30:	5f                   	pop    edi
c0023b31:	5d                   	pop    ebp
c0023b32:	c3                   	ret    
c0023b33:	90                   	nop

c0023b34 <SATA::close(int, int, void*)>:
c0023b34:	83 ec 0c             	sub    esp,0xc
c0023b37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b3b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023b41:	85 c0                	test   eax,eax
c0023b43:	74 0c                	je     c0023b51 <SATA::close(int, int, void*)+0x1d>
c0023b45:	83 ec 0c             	sub    esp,0xc
c0023b48:	8b 10                	mov    edx,DWORD PTR [eax]
c0023b4a:	50                   	push   eax
c0023b4b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023b4e:	83 c4 10             	add    esp,0x10
c0023b51:	31 c0                	xor    eax,eax
c0023b53:	83 c4 0c             	add    esp,0xc
c0023b56:	c3                   	ret    
c0023b57:	90                   	nop

c0023b58 <SATA::powerSaving(PowerSavingLevel)>:
c0023b58:	c3                   	ret    
c0023b59:	90                   	nop

c0023b5a <SATA::open(int, int, void*)>:
c0023b5a:	53                   	push   ebx
c0023b5b:	83 ec 14             	sub    esp,0x14
c0023b5e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0023b62:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0023b66:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0023b70:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0023b76:	c7 83 60 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x160],0x0
c0023b80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0023b84:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0023b8e:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0023b94:	68 90 b4 02 c0       	push   0xc002b490
c0023b99:	e8 db eb fe ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c0023b9e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023ba1:	e8 3a 04 ff ff       	call   c0013fe0 <PhysicalDisk::startCache()>
c0023ba6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023ba9:	e8 5c 24 ff ff       	call   c001600a <createPartitionsForDisk(PhysicalDisk*)>
c0023bae:	31 c0                	xor    eax,eax
c0023bb0:	83 c4 18             	add    esp,0x18
c0023bb3:	5b                   	pop    ebx
c0023bb4:	c3                   	ret    
c0023bb5:	90                   	nop

c0023bb6 <SATA::SATA()>:
c0023bb6:	83 ec 0c             	sub    esp,0xc
c0023bb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023bbd:	83 ec 04             	sub    esp,0x4
c0023bc0:	68 00 02 00 00       	push   0x200
c0023bc5:	68 ab b4 02 c0       	push   0xc002b4ab
c0023bca:	50                   	push   eax
c0023bcb:	e8 a8 03 ff ff       	call   c0013f78 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023bd0:	83 c4 10             	add    esp,0x10
c0023bd3:	ba 88 b5 02 c0       	mov    edx,0xc002b588
c0023bd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023bdc:	89 10                	mov    DWORD PTR [eax],edx
c0023bde:	90                   	nop
c0023bdf:	83 c4 0c             	add    esp,0xc
c0023be2:	c3                   	ret    
c0023be3:	90                   	nop

c0023be4 <SATA::access(unsigned long long, int, void*, bool)>:
c0023be4:	55                   	push   ebp
c0023be5:	57                   	push   edi
c0023be6:	56                   	push   esi
c0023be7:	53                   	push   ebx
c0023be8:	81 ec 2c 04 00 00    	sub    esp,0x42c
c0023bee:	8b 84 24 48 04 00 00 	mov    eax,DWORD PTR [esp+0x448]
c0023bf5:	8b bc 24 4c 04 00 00 	mov    edi,DWORD PTR [esp+0x44c]
c0023bfc:	8b 9c 24 40 04 00 00 	mov    ebx,DWORD PTR [esp+0x440]
c0023c03:	8b b4 24 44 04 00 00 	mov    esi,DWORD PTR [esp+0x444]
c0023c0a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023c0e:	83 ff 08             	cmp    edi,0x8
c0023c11:	7e 10                	jle    c0023c23 <SATA::access(unsigned long long, int, void*, bool)+0x3f>
c0023c13:	83 ec 0c             	sub    esp,0xc
c0023c16:	68 bb b4 02 c0       	push   0xc002b4bb
c0023c1b:	e8 73 5c ff ff       	call   c0019893 <Krnl::panic(char const*)>
c0023c20:	83 c4 10             	add    esp,0x10
c0023c23:	51                   	push   ecx
c0023c24:	68 00 02 00 00       	push   0x200
c0023c29:	68 ee 00 00 00       	push   0xee
c0023c2e:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0023c32:	55                   	push   ebp
c0023c33:	e8 53 ca fd ff       	call   c000068b <memset>
c0023c38:	83 c4 0c             	add    esp,0xc
c0023c3b:	68 00 02 00 00       	push   0x200
c0023c40:	68 ee 00 00 00       	push   0xee
c0023c45:	8d 84 24 2c 02 00 00 	lea    eax,[esp+0x22c]
c0023c4c:	50                   	push   eax
c0023c4d:	e8 39 ca fd ff       	call   c000068b <memset>
c0023c52:	55                   	push   ebp
c0023c53:	57                   	push   edi
c0023c54:	56                   	push   esi
c0023c55:	68 ed b4 02 c0       	push   0xc002b4ed
c0023c5a:	e8 1a eb fe ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c0023c5f:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0023c65:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023c6b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0023c6f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0023c75:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0023c79:	c1 e0 07             	shl    eax,0x7
c0023c7c:	03 44 24 2c          	add    eax,DWORD PTR [esp+0x2c]
c0023c80:	83 c4 18             	add    esp,0x18
c0023c83:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0023c8d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023c91:	8d 50 02             	lea    edx,[eax+0x2]
c0023c94:	c1 e2 07             	shl    edx,0x7
c0023c97:	03 54 24 14          	add    edx,DWORD PTR [esp+0x14]
c0023c9b:	52                   	push   edx
c0023c9c:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0023ca0:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0023ca6:	e8 e1 ef ff ff       	call   c0022c8c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0023cab:	89 c1                	mov    ecx,eax
c0023cad:	58                   	pop    eax
c0023cae:	5a                   	pop    edx
c0023caf:	51                   	push   ecx
c0023cb0:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0023cb4:	68 22 b5 02 c0       	push   0xc002b522
c0023cb9:	e8 bb ea fe ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c0023cbe:	83 c4 10             	add    esp,0x10
c0023cc1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0023cc5:	83 f9 ff             	cmp    ecx,0xffffffff
c0023cc8:	0f 84 9a 01 00 00    	je     c0023e68 <SATA::access(unsigned long long, int, void*, bool)+0x284>
c0023cce:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0023cd4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023cd8:	8b 12                	mov    edx,DWORD PTR [edx]
c0023cda:	2b 90 5c 01 00 00    	sub    edx,DWORD PTR [eax+0x15c]
c0023ce0:	03 90 58 01 00 00    	add    edx,DWORD PTR [eax+0x158]
c0023ce6:	89 c8                	mov    eax,ecx
c0023ce8:	c1 e0 05             	shl    eax,0x5
c0023ceb:	01 c2                	add    edx,eax
c0023ced:	8a 02                	mov    al,BYTE PTR [edx]
c0023cef:	83 e0 a0             	and    eax,0xffffffa0
c0023cf2:	83 c8 05             	or     eax,0x5
c0023cf5:	88 02                	mov    BYTE PTR [edx],al
c0023cf7:	8d 47 ff             	lea    eax,[edi-0x1]
c0023cfa:	c1 f8 04             	sar    eax,0x4
c0023cfd:	40                   	inc    eax
c0023cfe:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0023d02:	0f b7 c0             	movzx  eax,ax
c0023d05:	8b 9b 70 01 00 00    	mov    ebx,DWORD PTR [ebx+0x170]
c0023d0b:	83 c0 08             	add    eax,0x8
c0023d0e:	8b 8b 58 01 00 00    	mov    ecx,DWORD PTR [ebx+0x158]
c0023d14:	c1 e0 04             	shl    eax,0x4
c0023d17:	2b 8b 5c 01 00 00    	sub    ecx,DWORD PTR [ebx+0x15c]
c0023d1d:	8b 5a 08             	mov    ebx,DWORD PTR [edx+0x8]
c0023d20:	01 cb                	add    ebx,ecx
c0023d22:	52                   	push   edx
c0023d23:	50                   	push   eax
c0023d24:	6a 00                	push   0x0
c0023d26:	53                   	push   ebx
c0023d27:	e8 5f c9 fd ff       	call   c000068b <memset>
c0023d2c:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0023d32:	83 c4 10             	add    esp,0x10
c0023d35:	89 ab 80 00 00 00    	mov    DWORD PTR [ebx+0x80],ebp
c0023d3b:	25 00 00 c0 7f       	and    eax,0x7fc00000
c0023d40:	8d ac 24 20 02 00 00 	lea    ebp,[esp+0x220]
c0023d47:	0d ff 01 00 80       	or     eax,0x800001ff
c0023d4c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0023d50:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0023d56:	b8 01 00 00 00       	mov    eax,0x1
c0023d5b:	89 c2                	mov    edx,eax
c0023d5d:	c1 e2 04             	shl    edx,0x4
c0023d60:	89 ac 13 80 00 00 00 	mov    DWORD PTR [ebx+edx*1+0x80],ebp
c0023d67:	8d 50 08             	lea    edx,[eax+0x8]
c0023d6a:	40                   	inc    eax
c0023d6b:	c1 e2 04             	shl    edx,0x4
c0023d6e:	81 64 13 0c 00 00 c0 7f 	and    DWORD PTR [ebx+edx*1+0xc],0x7fc00000
c0023d76:	83 f8 10             	cmp    eax,0x10
c0023d79:	75 e0                	jne    c0023d5b <SATA::access(unsigned long long, int, void*, bool)+0x177>
c0023d7b:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0023d7e:	c6 43 02 25          	mov    BYTE PTR [ebx+0x2],0x25
c0023d82:	66 25 00 7f          	and    ax,0x7f00
c0023d86:	66 89 73 04          	mov    WORD PTR [ebx+0x4],si
c0023d8a:	66 0d 27 80          	or     ax,0x8027
c0023d8e:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0023d92:	66 89 03             	mov    WORD PTR [ebx],ax
c0023d95:	66 89 7b 0c          	mov    WORD PTR [ebx+0xc],di
c0023d99:	89 f0                	mov    eax,esi
c0023d9b:	31 d2                	xor    edx,edx
c0023d9d:	c1 e8 10             	shr    eax,0x10
c0023da0:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0023da3:	89 f0                	mov    eax,esi
c0023da5:	c1 e8 18             	shr    eax,0x18
c0023da8:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0023dab:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0023daf:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0023db2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023db6:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0023db9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023dbd:	c1 e0 07             	shl    eax,0x7
c0023dc0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0023dc4:	8b 98 20 01 00 00    	mov    ebx,DWORD PTR [eax+0x120]
c0023dca:	80 e3 88             	and    bl,0x88
c0023dcd:	74 0b                	je     c0023dda <SATA::access(unsigned long long, int, void*, bool)+0x1f6>
c0023dcf:	81 fa 40 42 0f 00    	cmp    edx,0xf4240
c0023dd5:	74 0b                	je     c0023de2 <SATA::access(unsigned long long, int, void*, bool)+0x1fe>
c0023dd7:	42                   	inc    edx
c0023dd8:	eb ea                	jmp    c0023dc4 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c0023dda:	81 fa 40 42 0f 00    	cmp    edx,0xf4240
c0023de0:	75 0a                	jne    c0023dec <SATA::access(unsigned long long, int, void*, bool)+0x208>
c0023de2:	83 ec 0c             	sub    esp,0xc
c0023de5:	68 2b b5 02 c0       	push   0xc002b52b
c0023dea:	eb 60                	jmp    c0023e4c <SATA::access(unsigned long long, int, void*, bool)+0x268>
c0023dec:	be 01 00 00 00       	mov    esi,0x1
c0023df1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023df5:	d3 e6                	shl    esi,cl
c0023df7:	c1 e3 07             	shl    ebx,0x7
c0023dfa:	89 b0 38 01 00 00    	mov    DWORD PTR [eax+0x138],esi
c0023e00:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c0023e04:	83 ec 0c             	sub    esp,0xc
c0023e07:	68 39 b5 02 c0       	push   0xc002b539
c0023e0c:	e8 68 e9 fe ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c0023e11:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c0023e17:	83 c4 10             	add    esp,0x10
c0023e1a:	85 c6                	test   esi,eax
c0023e1c:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c0023e22:	74 1a                	je     c0023e3e <SATA::access(unsigned long long, int, void*, bool)+0x25a>
c0023e24:	0f ba e0 1e          	bt     eax,0x1e
c0023e28:	73 da                	jae    c0023e04 <SATA::access(unsigned long long, int, void*, bool)+0x220>
c0023e2a:	83 ec 0c             	sub    esp,0xc
c0023e2d:	68 46 b5 02 c0       	push   0xc002b546
c0023e32:	e8 5c 5a ff ff       	call   c0019893 <Krnl::panic(char const*)>
c0023e37:	83 c4 10             	add    esp,0x10
c0023e3a:	31 c0                	xor    eax,eax
c0023e3c:	eb 2f                	jmp    c0023e6d <SATA::access(unsigned long long, int, void*, bool)+0x289>
c0023e3e:	0f ba e0 1e          	bt     eax,0x1e
c0023e42:	73 12                	jae    c0023e56 <SATA::access(unsigned long long, int, void*, bool)+0x272>
c0023e44:	83 ec 0c             	sub    esp,0xc
c0023e47:	68 46 b5 02 c0       	push   0xc002b546
c0023e4c:	e8 42 5a ff ff       	call   c0019893 <Krnl::panic(char const*)>
c0023e51:	83 c4 10             	add    esp,0x10
c0023e54:	eb 12                	jmp    c0023e68 <SATA::access(unsigned long long, int, void*, bool)+0x284>
c0023e56:	83 ec 0c             	sub    esp,0xc
c0023e59:	68 57 b5 02 c0       	push   0xc002b557
c0023e5e:	e8 30 5a ff ff       	call   c0019893 <Krnl::panic(char const*)>
c0023e63:	83 c4 10             	add    esp,0x10
c0023e66:	eb fe                	jmp    c0023e66 <SATA::access(unsigned long long, int, void*, bool)+0x282>
c0023e68:	b8 01 00 00 00       	mov    eax,0x1
c0023e6d:	81 c4 2c 04 00 00    	add    esp,0x42c
c0023e73:	5b                   	pop    ebx
c0023e74:	5e                   	pop    esi
c0023e75:	5f                   	pop    edi
c0023e76:	5d                   	pop    ebp
c0023e77:	c3                   	ret    

c0023e78 <SATA::read(unsigned long long, int, void*)>:
c0023e78:	57                   	push   edi
c0023e79:	b8 04 00 00 00       	mov    eax,0x4
c0023e7e:	56                   	push   esi
c0023e7f:	53                   	push   ebx
c0023e80:	83 ec 10             	sub    esp,0x10
c0023e83:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0023e87:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0023e8b:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0023e8e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0023e92:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023e96:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0023e9c:	77 3b                	ja     c0023ed9 <SATA::read(unsigned long long, int, void*)+0x61>
c0023e9e:	b8 06 00 00 00       	mov    eax,0x6
c0023ea3:	85 d2                	test   edx,edx
c0023ea5:	74 32                	je     c0023ed9 <SATA::read(unsigned long long, int, void*)+0x61>
c0023ea7:	50                   	push   eax
c0023ea8:	50                   	push   eax
c0023ea9:	6a 00                	push   0x0
c0023eab:	52                   	push   edx
c0023eac:	53                   	push   ebx
c0023ead:	57                   	push   edi
c0023eae:	56                   	push   esi
c0023eaf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0023eb3:	e8 2c fd ff ff       	call   c0023be4 <SATA::access(unsigned long long, int, void*, bool)>
c0023eb8:	83 c4 20             	add    esp,0x20
c0023ebb:	85 c0                	test   eax,eax
c0023ebd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023ec1:	75 11                	jne    c0023ed4 <SATA::read(unsigned long long, int, void*)+0x5c>
c0023ec3:	01 1d 28 ed 02 c0    	add    DWORD PTR ds:0xc002ed28,ebx
c0023ec9:	e8 10 c7 fe ff       	call   c00105de <VgaText::updateDiskUsage()>
c0023ece:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023ed2:	eb 05                	jmp    c0023ed9 <SATA::read(unsigned long long, int, void*)+0x61>
c0023ed4:	b8 01 00 00 00       	mov    eax,0x1
c0023ed9:	83 c4 10             	add    esp,0x10
c0023edc:	5b                   	pop    ebx
c0023edd:	5e                   	pop    esi
c0023ede:	5f                   	pop    edi
c0023edf:	c3                   	ret    

c0023ee0 <SATA::write(unsigned long long, int, void*)>:
c0023ee0:	57                   	push   edi
c0023ee1:	b8 04 00 00 00       	mov    eax,0x4
c0023ee6:	56                   	push   esi
c0023ee7:	53                   	push   ebx
c0023ee8:	83 ec 10             	sub    esp,0x10
c0023eeb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0023eef:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0023ef3:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0023ef6:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0023efa:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023efe:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0023f04:	77 3b                	ja     c0023f41 <SATA::write(unsigned long long, int, void*)+0x61>
c0023f06:	b8 06 00 00 00       	mov    eax,0x6
c0023f0b:	85 d2                	test   edx,edx
c0023f0d:	74 32                	je     c0023f41 <SATA::write(unsigned long long, int, void*)+0x61>
c0023f0f:	50                   	push   eax
c0023f10:	50                   	push   eax
c0023f11:	6a 01                	push   0x1
c0023f13:	52                   	push   edx
c0023f14:	53                   	push   ebx
c0023f15:	57                   	push   edi
c0023f16:	56                   	push   esi
c0023f17:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0023f1b:	e8 c4 fc ff ff       	call   c0023be4 <SATA::access(unsigned long long, int, void*, bool)>
c0023f20:	83 c4 20             	add    esp,0x20
c0023f23:	85 c0                	test   eax,eax
c0023f25:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023f29:	75 11                	jne    c0023f3c <SATA::write(unsigned long long, int, void*)+0x5c>
c0023f2b:	01 1d 24 ed 02 c0    	add    DWORD PTR ds:0xc002ed24,ebx
c0023f31:	e8 a8 c6 fe ff       	call   c00105de <VgaText::updateDiskUsage()>
c0023f36:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023f3a:	eb 05                	jmp    c0023f41 <SATA::write(unsigned long long, int, void*)+0x61>
c0023f3c:	b8 01 00 00 00       	mov    eax,0x1
c0023f41:	83 c4 10             	add    esp,0x10
c0023f44:	5b                   	pop    ebx
c0023f45:	5e                   	pop    esi
c0023f46:	5f                   	pop    edi
c0023f47:	c3                   	ret    

c0023f48 <AVX::open(int, int, void*)>:
c0023f48:	83 ec 0c             	sub    esp,0xc
c0023f4b:	e8 48 11 00 00       	call   c0025098 <avxInit>
c0023f50:	b8 00 00 00 00       	mov    eax,0x0
c0023f55:	83 c4 0c             	add    esp,0xc
c0023f58:	c3                   	ret    
c0023f59:	90                   	nop

c0023f5a <AVX::close(int, int, void*)>:
c0023f5a:	83 ec 0c             	sub    esp,0xc
c0023f5d:	e8 37 11 00 00       	call   c0025099 <avxClose>
c0023f62:	b8 00 00 00 00       	mov    eax,0x0
c0023f67:	83 c4 0c             	add    esp,0xc
c0023f6a:	c3                   	ret    
c0023f6b:	90                   	nop

c0023f6c <AVX::available()>:
c0023f6c:	83 ec 0c             	sub    esp,0xc
c0023f6f:	e8 1c 11 00 00       	call   c0025090 <avxDetect>
c0023f74:	85 c0                	test   eax,eax
c0023f76:	0f 95 c0             	setne  al
c0023f79:	83 c4 0c             	add    esp,0xc
c0023f7c:	c3                   	ret    
c0023f7d:	90                   	nop

c0023f7e <AVX::save(void*)>:
c0023f7e:	83 ec 0c             	sub    esp,0xc
c0023f81:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023f85:	83 ec 0c             	sub    esp,0xc
c0023f88:	50                   	push   eax
c0023f89:	e8 08 11 00 00       	call   c0025096 <avxSave>
c0023f8e:	83 c4 10             	add    esp,0x10
c0023f91:	90                   	nop
c0023f92:	83 c4 0c             	add    esp,0xc
c0023f95:	c3                   	ret    

c0023f96 <AVX::load(void*)>:
c0023f96:	83 ec 0c             	sub    esp,0xc
c0023f99:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023f9d:	83 ec 0c             	sub    esp,0xc
c0023fa0:	50                   	push   eax
c0023fa1:	e8 f1 10 00 00       	call   c0025097 <avxLoad>
c0023fa6:	83 c4 10             	add    esp,0x10
c0023fa9:	90                   	nop
c0023faa:	83 c4 0c             	add    esp,0xc
c0023fad:	c3                   	ret    

c0023fae <AVX::AVX()>:
c0023fae:	83 ec 0c             	sub    esp,0xc
c0023fb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023fb5:	83 ec 08             	sub    esp,0x8
c0023fb8:	68 b4 b5 02 c0       	push   0xc002b5b4
c0023fbd:	50                   	push   eax
c0023fbe:	e8 93 00 ff ff       	call   c0014056 <FPU::FPU(char const*)>
c0023fc3:	83 c4 10             	add    esp,0x10
c0023fc6:	ba c4 b5 02 c0       	mov    edx,0xc002b5c4
c0023fcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023fcf:	89 10                	mov    DWORD PTR [eax],edx
c0023fd1:	90                   	nop
c0023fd2:	83 c4 0c             	add    esp,0xc
c0023fd5:	c3                   	ret    

c0023fd6 <MMX::available()>:
c0023fd6:	a1 e8 c9 02 c0       	mov    eax,ds:0xc002c9e8
c0023fdb:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0023fe1:	83 e0 20             	and    eax,0x20
c0023fe4:	84 c0                	test   al,al
c0023fe6:	0f 95 c0             	setne  al
c0023fe9:	c3                   	ret    

c0023fea <MMX::open(int, int, void*)>:
c0023fea:	83 ec 0c             	sub    esp,0xc
c0023fed:	e8 2a 11 00 00       	call   c002511c <x87Init>
c0023ff2:	b8 00 00 00 00       	mov    eax,0x0
c0023ff7:	83 c4 0c             	add    esp,0xc
c0023ffa:	c3                   	ret    
c0023ffb:	90                   	nop

c0023ffc <MMX::close(int, int, void*)>:
c0023ffc:	83 ec 0c             	sub    esp,0xc
c0023fff:	e8 32 11 00 00       	call   c0025136 <x87Close>
c0024004:	b8 00 00 00 00       	mov    eax,0x0
c0024009:	83 c4 0c             	add    esp,0xc
c002400c:	c3                   	ret    
c002400d:	90                   	nop

c002400e <MMX::save(void*)>:
c002400e:	83 ec 0c             	sub    esp,0xc
c0024011:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024015:	83 ec 0c             	sub    esp,0xc
c0024018:	50                   	push   eax
c0024019:	e8 f3 10 00 00       	call   c0025111 <x87Save>
c002401e:	83 c4 10             	add    esp,0x10
c0024021:	90                   	nop
c0024022:	83 c4 0c             	add    esp,0xc
c0024025:	c3                   	ret    

c0024026 <MMX::load(void*)>:
c0024026:	83 ec 0c             	sub    esp,0xc
c0024029:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002402d:	83 ec 0c             	sub    esp,0xc
c0024030:	50                   	push   eax
c0024031:	e8 e1 10 00 00       	call   c0025117 <x87Load>
c0024036:	83 c4 10             	add    esp,0x10
c0024039:	90                   	nop
c002403a:	83 c4 0c             	add    esp,0xc
c002403d:	c3                   	ret    

c002403e <MMX::MMX()>:
c002403e:	83 ec 0c             	sub    esp,0xc
c0024041:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024045:	83 ec 08             	sub    esp,0x8
c0024048:	68 f4 b5 02 c0       	push   0xc002b5f4
c002404d:	50                   	push   eax
c002404e:	e8 03 00 ff ff       	call   c0014056 <FPU::FPU(char const*)>
c0024053:	83 c4 10             	add    esp,0x10
c0024056:	ba 04 b6 02 c0       	mov    edx,0xc002b604
c002405b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002405f:	89 10                	mov    DWORD PTR [eax],edx
c0024061:	90                   	nop
c0024062:	83 c4 0c             	add    esp,0xc
c0024065:	c3                   	ret    

c0024066 <SSE::open(int, int, void*)>:
c0024066:	83 ec 0c             	sub    esp,0xc
c0024069:	e8 66 10 00 00       	call   c00250d4 <sseInit>
c002406e:	b8 00 00 00 00       	mov    eax,0x0
c0024073:	83 c4 0c             	add    esp,0xc
c0024076:	c3                   	ret    
c0024077:	90                   	nop

c0024078 <SSE::close(int, int, void*)>:
c0024078:	83 ec 0c             	sub    esp,0xc
c002407b:	e8 64 10 00 00       	call   c00250e4 <sseClose>
c0024080:	b8 00 00 00 00       	mov    eax,0x0
c0024085:	83 c4 0c             	add    esp,0xc
c0024088:	c3                   	ret    
c0024089:	90                   	nop

c002408a <SSE::available()>:
c002408a:	83 ec 1c             	sub    esp,0x1c
c002408d:	e8 1e 10 00 00       	call   c00250b0 <absolutelyNoChanceInHell>
c0024092:	85 c0                	test   eax,eax
c0024094:	0f 95 c0             	setne  al
c0024097:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002409b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002409f:	83 c4 1c             	add    esp,0x1c
c00240a2:	c3                   	ret    
c00240a3:	90                   	nop

c00240a4 <SSE::save(void*)>:
c00240a4:	83 ec 0c             	sub    esp,0xc
c00240a7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00240ab:	83 ec 0c             	sub    esp,0xc
c00240ae:	50                   	push   eax
c00240af:	e8 14 10 00 00       	call   c00250c8 <sseSave>
c00240b4:	83 c4 10             	add    esp,0x10
c00240b7:	90                   	nop
c00240b8:	83 c4 0c             	add    esp,0xc
c00240bb:	c3                   	ret    

c00240bc <SSE::load(void*)>:
c00240bc:	83 ec 0c             	sub    esp,0xc
c00240bf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00240c3:	83 ec 0c             	sub    esp,0xc
c00240c6:	50                   	push   eax
c00240c7:	e8 02 10 00 00       	call   c00250ce <sseLoad>
c00240cc:	83 c4 10             	add    esp,0x10
c00240cf:	90                   	nop
c00240d0:	83 c4 0c             	add    esp,0xc
c00240d3:	c3                   	ret    

c00240d4 <SSE::SSE()>:
c00240d4:	83 ec 0c             	sub    esp,0xc
c00240d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00240db:	83 ec 08             	sub    esp,0x8
c00240de:	68 34 b6 02 c0       	push   0xc002b634
c00240e3:	50                   	push   eax
c00240e4:	e8 6d ff fe ff       	call   c0014056 <FPU::FPU(char const*)>
c00240e9:	83 c4 10             	add    esp,0x10
c00240ec:	ba 44 b6 02 c0       	mov    edx,0xc002b644
c00240f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00240f5:	89 10                	mov    DWORD PTR [eax],edx
c00240f7:	90                   	nop
c00240f8:	83 c4 0c             	add    esp,0xc
c00240fb:	c3                   	ret    

c00240fc <x87::open(int, int, void*)>:
c00240fc:	83 ec 0c             	sub    esp,0xc
c00240ff:	e8 18 10 00 00       	call   c002511c <x87Init>
c0024104:	b8 00 00 00 00       	mov    eax,0x0
c0024109:	83 c4 0c             	add    esp,0xc
c002410c:	c3                   	ret    
c002410d:	90                   	nop

c002410e <x87::close(int, int, void*)>:
c002410e:	83 ec 0c             	sub    esp,0xc
c0024111:	e8 20 10 00 00       	call   c0025136 <x87Close>
c0024116:	b8 00 00 00 00       	mov    eax,0x0
c002411b:	83 c4 0c             	add    esp,0xc
c002411e:	c3                   	ret    
c002411f:	90                   	nop

c0024120 <x87::available()>:
c0024120:	83 ec 0c             	sub    esp,0xc
c0024123:	e8 ce 0f 00 00       	call   c00250f6 <x87Detect>
c0024128:	85 c0                	test   eax,eax
c002412a:	0f 95 c0             	setne  al
c002412d:	83 c4 0c             	add    esp,0xc
c0024130:	c3                   	ret    
c0024131:	90                   	nop

c0024132 <x87::save(void*)>:
c0024132:	83 ec 0c             	sub    esp,0xc
c0024135:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024139:	83 ec 0c             	sub    esp,0xc
c002413c:	50                   	push   eax
c002413d:	e8 cf 0f 00 00       	call   c0025111 <x87Save>
c0024142:	83 c4 10             	add    esp,0x10
c0024145:	90                   	nop
c0024146:	83 c4 0c             	add    esp,0xc
c0024149:	c3                   	ret    

c002414a <x87::load(void*)>:
c002414a:	83 ec 0c             	sub    esp,0xc
c002414d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024151:	83 ec 0c             	sub    esp,0xc
c0024154:	50                   	push   eax
c0024155:	e8 bd 0f 00 00       	call   c0025117 <x87Load>
c002415a:	83 c4 10             	add    esp,0x10
c002415d:	90                   	nop
c002415e:	83 c4 0c             	add    esp,0xc
c0024161:	c3                   	ret    

c0024162 <x87::x87()>:
c0024162:	83 ec 0c             	sub    esp,0xc
c0024165:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024169:	83 ec 08             	sub    esp,0x8
c002416c:	68 74 b6 02 c0       	push   0xc002b674
c0024171:	50                   	push   eax
c0024172:	e8 df fe fe ff       	call   c0014056 <FPU::FPU(char const*)>
c0024177:	83 c4 10             	add    esp,0x10
c002417a:	ba 84 b6 02 c0       	mov    edx,0xc002b684
c002417f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024183:	89 10                	mov    DWORD PTR [eax],edx
c0024185:	90                   	nop
c0024186:	83 c4 0c             	add    esp,0xc
c0024189:	c3                   	ret    

c002418a <APIC::disable()>:
c002418a:	90                   	nop
c002418b:	c3                   	ret    

c002418c <APIC::close(int, int, void*)>:
c002418c:	55                   	push   ebp
c002418d:	89 e5                	mov    ebp,esp
c002418f:	83 ec 08             	sub    esp,0x8
c0024192:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024195:	8b 00                	mov    eax,DWORD PTR [eax]
c0024197:	83 c0 3c             	add    eax,0x3c
c002419a:	8b 00                	mov    eax,DWORD PTR [eax]
c002419c:	83 ec 0c             	sub    esp,0xc
c002419f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00241a2:	ff d0                	call   eax
c00241a4:	83 c4 10             	add    esp,0x10
c00241a7:	b8 00 00 00 00       	mov    eax,0x0
c00241ac:	c9                   	leave  
c00241ad:	c3                   	ret    

c00241ae <IOAPIC::close(int, int, void*)>:
c00241ae:	b8 00 00 00 00       	mov    eax,0x0
c00241b3:	c3                   	ret    

c00241b4 <APIC::io_wait()>:
c00241b4:	eb 00                	jmp    c00241b6 <APIC::io_wait()+0x2>
c00241b6:	eb 00                	jmp    c00241b8 <APIC::io_wait()+0x4>
c00241b8:	90                   	nop
c00241b9:	c3                   	ret    

c00241ba <APIC::getBase()>:
c00241ba:	55                   	push   ebp
c00241bb:	89 e5                	mov    ebp,esp
c00241bd:	83 ec 18             	sub    esp,0x18
c00241c0:	a1 e8 c9 02 c0       	mov    eax,ds:0xc002c9e8
c00241c5:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00241cb:	83 e0 08             	and    eax,0x8
c00241ce:	84 c0                	test   al,al
c00241d0:	75 07                	jne    c00241d9 <APIC::getBase()+0x1f>
c00241d2:	b8 00 00 00 00       	mov    eax,0x0
c00241d7:	eb 21                	jmp    c00241fa <APIC::getBase()+0x40>
c00241d9:	a1 e8 c9 02 c0       	mov    eax,ds:0xc002c9e8
c00241de:	83 ec 08             	sub    esp,0x8
c00241e1:	6a 1b                	push   0x1b
c00241e3:	50                   	push   eax
c00241e4:	e8 93 a8 fe ff       	call   c000ea7c <Computer::rdmsr(unsigned int)>
c00241e9:	83 c4 10             	add    esp,0x10
c00241ec:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00241ef:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00241f2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00241f5:	25 00 f0 ff ff       	and    eax,0xfffff000
c00241fa:	c9                   	leave  
c00241fb:	c3                   	ret    

c00241fc <APIC::eoi(unsigned char)>:
c00241fc:	55                   	push   ebp
c00241fd:	89 e5                	mov    ebp,esp
c00241ff:	83 ec 28             	sub    esp,0x28
c0024202:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024205:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0024208:	83 ec 0c             	sub    esp,0xc
c002420b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002420e:	e8 a7 ff ff ff       	call   c00241ba <APIC::getBase()>
c0024213:	83 c4 10             	add    esp,0x10
c0024216:	05 b0 00 00 00       	add    eax,0xb0
c002421b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002421e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0024221:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0024227:	90                   	nop
c0024228:	c9                   	leave  
c0024229:	c3                   	ret    

c002422a <APIC::open(int, int, void*)>:
c002422a:	55                   	push   ebp
c002422b:	89 e5                	mov    ebp,esp
c002422d:	57                   	push   edi
c002422e:	56                   	push   esi
c002422f:	53                   	push   ebx
c0024230:	83 ec 2c             	sub    esp,0x2c
c0024233:	83 ec 0c             	sub    esp,0xc
c0024236:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024239:	e8 7c ff ff ff       	call   c00241ba <APIC::getBase()>
c002423e:	83 c4 10             	add    esp,0x10
c0024241:	89 c2                	mov    edx,eax
c0024243:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024246:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002424c:	0f b6 f8             	movzx  edi,al
c002424f:	89 d0                	mov    eax,edx
c0024251:	ba 00 00 00 00       	mov    edx,0x0
c0024256:	89 c1                	mov    ecx,eax
c0024258:	80 e5 ff             	and    ch,0xff
c002425b:	89 cb                	mov    ebx,ecx
c002425d:	0f b6 f2             	movzx  esi,dl
c0024260:	89 d8                	mov    eax,ebx
c0024262:	89 f2                	mov    edx,esi
c0024264:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0024267:	8d 5f 08             	lea    ebx,[edi+0x8]
c002426a:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002426e:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0024272:	83 e0 00             	and    eax,0x0
c0024275:	09 d0                	or     eax,edx
c0024277:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002427b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002427e:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0024284:	8d 50 01             	lea    edx,[eax+0x1]
c0024287:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002428a:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0024290:	0f b6 d0             	movzx  edx,al
c0024293:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024296:	83 c2 08             	add    edx,0x8
c0024299:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002429d:	0f b6 c9             	movzx  ecx,cl
c00242a0:	81 c9 00 00 01 00    	or     ecx,0x10000
c00242a6:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00242aa:	83 ec 0c             	sub    esp,0xc
c00242ad:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00242b0:	e8 05 ff ff ff       	call   c00241ba <APIC::getBase()>
c00242b5:	83 c4 10             	add    esp,0x10
c00242b8:	05 f0 00 00 00       	add    eax,0xf0
c00242bd:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00242c0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00242c3:	8b 00                	mov    eax,DWORD PTR [eax]
c00242c5:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00242c8:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c00242cf:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c00242d6:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00242d9:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00242dc:	89 10                	mov    DWORD PTR [eax],edx
c00242de:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c00242e5:	a1 b0 d2 02 c0       	mov    eax,ds:0xc002d2b0
c00242ea:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c00242ed:	7d 7c                	jge    c002436b <APIC::open(int, int, void*)+0x141>
c00242ef:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00242f2:	8b 04 85 c0 d2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2d40]
c00242f9:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c00242fc:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00242ff:	8b 04 85 c0 d2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2d40]
c0024306:	c1 e8 08             	shr    eax,0x8
c0024309:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c002430d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0024310:	8b 04 85 c0 d2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2d40]
c0024317:	c1 e8 18             	shr    eax,0x18
c002431a:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c002431d:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c0024321:	75 40                	jne    c0024363 <APIC::open(int, int, void*)+0x139>
c0024323:	83 ec 0c             	sub    esp,0xc
c0024326:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024329:	e8 8c fe ff ff       	call   c00241ba <APIC::getBase()>
c002432e:	83 c4 10             	add    esp,0x10
c0024331:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0024335:	75 07                	jne    c002433e <APIC::open(int, int, void*)+0x114>
c0024337:	ba 60 03 00 00       	mov    edx,0x360
c002433c:	eb 05                	jmp    c0024343 <APIC::open(int, int, void*)+0x119>
c002433e:	ba 50 03 00 00       	mov    edx,0x350
c0024343:	01 d0                	add    eax,edx
c0024345:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0024348:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002434b:	8b 00                	mov    eax,DWORD PTR [eax]
c002434d:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0024350:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0024357:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c002435b:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002435e:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0024361:	89 10                	mov    DWORD PTR [eax],edx
c0024363:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0024366:	e9 7a ff ff ff       	jmp    c00242e5 <APIC::open(int, int, void*)+0xbb>
c002436b:	b8 00 00 00 00       	mov    eax,0x0
c0024370:	8d 65 f4             	lea    esp,[ebp-0xc]
c0024373:	5b                   	pop    ebx
c0024374:	5e                   	pop    esi
c0024375:	5f                   	pop    edi
c0024376:	5d                   	pop    ebp
c0024377:	c3                   	ret    

c0024378 <IOAPIC::IOAPIC()>:
c0024378:	83 ec 0c             	sub    esp,0xc
c002437b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002437f:	83 ec 08             	sub    esp,0x8
c0024382:	68 b4 b6 02 c0       	push   0xc002b6b4
c0024387:	50                   	push   eax
c0024388:	e8 cb f9 fe ff       	call   c0013d58 <Device::Device(char const*)>
c002438d:	83 c4 10             	add    esp,0x10
c0024390:	ba dc b7 02 c0       	mov    edx,0xc002b7dc
c0024395:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024399:	89 10                	mov    DWORD PTR [eax],edx
c002439b:	90                   	nop
c002439c:	83 c4 0c             	add    esp,0xc
c002439f:	c3                   	ret    

c00243a0 <APIC::APIC()>:
c00243a0:	53                   	push   ebx
c00243a1:	83 ec 18             	sub    esp,0x18
c00243a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00243a8:	83 ec 08             	sub    esp,0x8
c00243ab:	68 bc b6 02 c0       	push   0xc002b6bc
c00243b0:	50                   	push   eax
c00243b1:	e8 fa 00 ff ff       	call   c00144b0 <InterruptController::InterruptController(char const*)>
c00243b6:	83 c4 10             	add    esp,0x10
c00243b9:	ba 94 b7 02 c0       	mov    edx,0xc002b794
c00243be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00243c2:	89 10                	mov    DWORD PTR [eax],edx
c00243c4:	a0 80 ed 02 c0       	mov    al,ds:0xc002ed80
c00243c9:	83 f0 01             	xor    eax,0x1
c00243cc:	84 c0                	test   al,al
c00243ce:	0f 84 a1 00 00 00    	je     c0024475 <APIC::APIC()+0xd5>
c00243d4:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00243d9:	a0 60 d3 02 c0       	mov    al,ds:0xc002d360
c00243de:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c00243e2:	0f 83 86 00 00 00    	jae    c002446e <APIC::APIC()+0xce>
c00243e8:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c00243f0:	83 ec 0c             	sub    esp,0xc
c00243f3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00243f7:	e8 d8 b0 fe ff       	call   c000f4d4 <malloc>
c00243fc:	83 c4 10             	add    esp,0x10
c00243ff:	89 c3                	mov    ebx,eax
c0024401:	83 ec 0c             	sub    esp,0xc
c0024404:	53                   	push   ebx
c0024405:	e8 6e ff ff ff       	call   c0024378 <IOAPIC::IOAPIC()>
c002440a:	83 c4 10             	add    esp,0x10
c002440d:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0024411:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0024416:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002441a:	89 14 85 60 ed 02 c0 	mov    DWORD PTR [eax*4-0x3ffd12a0],edx
c0024421:	a1 40 ed 02 c0       	mov    eax,ds:0xc002ed40
c0024426:	40                   	inc    eax
c0024427:	a3 40 ed 02 c0       	mov    ds:0xc002ed40,eax
c002442c:	a1 e8 c9 02 c0       	mov    eax,ds:0xc002c9e8
c0024431:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0024437:	83 ec 08             	sub    esp,0x8
c002443a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002443e:	50                   	push   eax
c002443f:	e8 24 f7 fe ff       	call   c0013b68 <Device::addChild(Device*)>
c0024444:	83 c4 10             	add    esp,0x10
c0024447:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002444b:	8b 00                	mov    eax,DWORD PTR [eax]
c002444d:	83 c0 08             	add    eax,0x8
c0024450:	8b 00                	mov    eax,DWORD PTR [eax]
c0024452:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0024457:	6a 00                	push   0x0
c0024459:	6a 00                	push   0x0
c002445b:	52                   	push   edx
c002445c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024460:	ff d0                	call   eax
c0024462:	83 c4 10             	add    esp,0x10
c0024465:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0024469:	e9 6b ff ff ff       	jmp    c00243d9 <APIC::APIC()+0x39>
c002446e:	c6 05 80 ed 02 c0 01 	mov    BYTE PTR ds:0xc002ed80,0x1
c0024475:	90                   	nop
c0024476:	83 c4 18             	add    esp,0x18
c0024479:	5b                   	pop    ebx
c002447a:	c3                   	ret    
c002447b:	90                   	nop

c002447c <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c002447c:	55                   	push   ebp
c002447d:	89 e5                	mov    ebp,esp
c002447f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024482:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024488:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002448b:	72 1d                	jb     c00244aa <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002448d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024490:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0024496:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024499:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c002449f:	01 d0                	add    eax,edx
c00244a1:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00244a4:	73 04                	jae    c00244aa <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00244a6:	b0 01                	mov    al,0x1
c00244a8:	eb 02                	jmp    c00244ac <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c00244aa:	b0 00                	mov    al,0x0
c00244ac:	5d                   	pop    ebp
c00244ad:	c3                   	ret    

c00244ae <IOAPIC::read(int)>:
c00244ae:	55                   	push   ebp
c00244af:	89 e5                	mov    ebp,esp
c00244b1:	83 ec 10             	sub    esp,0x10
c00244b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00244b7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00244bd:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00244c0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00244c3:	0f b6 d0             	movzx  edx,al
c00244c6:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00244c9:	89 10                	mov    DWORD PTR [eax],edx
c00244cb:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00244ce:	83 c0 10             	add    eax,0x10
c00244d1:	8b 00                	mov    eax,DWORD PTR [eax]
c00244d3:	c9                   	leave  
c00244d4:	c3                   	ret    
c00244d5:	90                   	nop

c00244d6 <IOAPIC::open(int, int, void*)>:
c00244d6:	55                   	push   ebp
c00244d7:	89 e5                	mov    ebp,esp
c00244d9:	57                   	push   edi
c00244da:	56                   	push   esi
c00244db:	53                   	push   ebx
c00244dc:	83 ec 0c             	sub    esp,0xc
c00244df:	83 ec 0c             	sub    esp,0xc
c00244e2:	68 e7 b6 02 c0       	push   0xc002b6e7
c00244e7:	e8 8d e2 fe ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c00244ec:	83 c4 10             	add    esp,0x10
c00244ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00244f2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00244f5:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00244fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00244fe:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024504:	8b 14 85 a0 d3 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2c60]
c002450b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002450e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0024514:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024517:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002451d:	8b 14 85 20 d4 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2be0]
c0024524:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024527:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c002452d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024530:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0024536:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024539:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002453f:	0f b6 f8             	movzx  edi,al
c0024542:	89 d0                	mov    eax,edx
c0024544:	ba 00 00 00 00       	mov    edx,0x0
c0024549:	89 c1                	mov    ecx,eax
c002454b:	80 e5 ff             	and    ch,0xff
c002454e:	89 cb                	mov    ebx,ecx
c0024550:	0f b6 f2             	movzx  esi,dl
c0024553:	89 d8                	mov    eax,ebx
c0024555:	89 f2                	mov    edx,esi
c0024557:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002455a:	8d 5f 08             	lea    ebx,[edi+0x8]
c002455d:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0024561:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0024565:	83 e0 00             	and    eax,0x0
c0024568:	09 d0                	or     eax,edx
c002456a:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002456e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024571:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0024577:	8d 50 01             	lea    edx,[eax+0x1]
c002457a:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002457d:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0024583:	0f b6 d0             	movzx  edx,al
c0024586:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024589:	83 c2 08             	add    edx,0x8
c002458c:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0024590:	0f b6 c9             	movzx  ecx,cl
c0024593:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0024599:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002459d:	83 ec 08             	sub    esp,0x8
c00245a0:	6a 01                	push   0x1
c00245a2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00245a5:	e8 04 ff ff ff       	call   c00244ae <IOAPIC::read(int)>
c00245aa:	83 c4 10             	add    esp,0x10
c00245ad:	c1 f8 10             	sar    eax,0x10
c00245b0:	0f b6 c0             	movzx  eax,al
c00245b3:	8d 50 01             	lea    edx,[eax+0x1]
c00245b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00245b9:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c00245bf:	b8 00 00 00 00       	mov    eax,0x0
c00245c4:	8d 65 f4             	lea    esp,[ebp-0xc]
c00245c7:	5b                   	pop    ebx
c00245c8:	5e                   	pop    esi
c00245c9:	5f                   	pop    edi
c00245ca:	5d                   	pop    ebp
c00245cb:	c3                   	ret    

c00245cc <IOAPIC::write(int, int)>:
c00245cc:	55                   	push   ebp
c00245cd:	89 e5                	mov    ebp,esp
c00245cf:	83 ec 10             	sub    esp,0x10
c00245d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00245d5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00245db:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00245de:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00245e1:	0f b6 d0             	movzx  edx,al
c00245e4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00245e7:	89 10                	mov    DWORD PTR [eax],edx
c00245e9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00245ec:	8d 50 10             	lea    edx,[eax+0x10]
c00245ef:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00245f2:	89 02                	mov    DWORD PTR [edx],eax
c00245f4:	90                   	nop
c00245f5:	c9                   	leave  
c00245f6:	c3                   	ret    
c00245f7:	90                   	nop

c00245f8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c00245f8:	55                   	push   ebp
c00245f9:	89 e5                	mov    ebp,esp
c00245fb:	53                   	push   ebx
c00245fc:	83 ec 2c             	sub    esp,0x2c
c00245ff:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024602:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0024605:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0024608:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c002460b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c002460e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0024611:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0024614:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0024617:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002461a:	88 d8                	mov    al,bl
c002461c:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c002461f:	88 c8                	mov    al,cl
c0024621:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0024624:	88 d0                	mov    al,dl
c0024626:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0024629:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002462d:	83 c0 08             	add    eax,0x8
c0024630:	01 c0                	add    eax,eax
c0024632:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0024635:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0024639:	83 c0 08             	add    eax,0x8
c002463c:	01 c0                	add    eax,eax
c002463e:	40                   	inc    eax
c002463f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0024642:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0024645:	50                   	push   eax
c0024646:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024649:	e8 60 fe ff ff       	call   c00244ae <IOAPIC::read(int)>
c002464e:	83 c4 08             	add    esp,0x8
c0024651:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0024654:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c002465b:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002465e:	c1 e0 18             	shl    eax,0x18
c0024661:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0024664:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0024667:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002466a:	52                   	push   edx
c002466b:	50                   	push   eax
c002466c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002466f:	e8 58 ff ff ff       	call   c00245cc <IOAPIC::write(int, int)>
c0024674:	83 c4 0c             	add    esp,0xc
c0024677:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002467a:	50                   	push   eax
c002467b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002467e:	e8 2b fe ff ff       	call   c00244ae <IOAPIC::read(int)>
c0024683:	83 c4 08             	add    esp,0x8
c0024686:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0024689:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0024690:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0024697:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c002469e:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00246a2:	74 09                	je     c00246ad <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c00246a4:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c00246ab:	eb 07                	jmp    c00246b4 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c00246ad:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c00246b4:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c00246b8:	74 09                	je     c00246c3 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c00246ba:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c00246c1:	eb 07                	jmp    c00246ca <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c00246c3:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c00246ca:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c00246d1:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c00246d5:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c00246d8:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00246db:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00246de:	52                   	push   edx
c00246df:	50                   	push   eax
c00246e0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00246e3:	e8 e4 fe ff ff       	call   c00245cc <IOAPIC::write(int, int)>
c00246e8:	83 c4 0c             	add    esp,0xc
c00246eb:	90                   	nop
c00246ec:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00246ef:	c9                   	leave  
c00246f0:	c3                   	ret    
c00246f1:	90                   	nop

c00246f2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00246f2:	55                   	push   ebp
c00246f3:	89 e5                	mov    ebp,esp
c00246f5:	57                   	push   edi
c00246f6:	56                   	push   esi
c00246f7:	53                   	push   ebx
c00246f8:	83 ec 2c             	sub    esp,0x2c
c00246fb:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00246fe:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0024701:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0024705:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0024709:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c002470d:	74 5a                	je     c0024769 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c002470f:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0024713:	7f 44                	jg     c0024759 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0024715:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024718:	05 40 bc 02 c0       	add    eax,0xc002bc40
c002471d:	8a 00                	mov    al,BYTE PTR [eax]
c002471f:	0f b6 c0             	movzx  eax,al
c0024722:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0024725:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024728:	66 8b 84 00 40 d3 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd2cc0]
c0024730:	0f b7 c0             	movzx  eax,ax
c0024733:	83 e0 02             	and    eax,0x2
c0024736:	85 c0                	test   eax,eax
c0024738:	74 04                	je     c002473e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c002473a:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c002473e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024741:	66 8b 84 00 40 d3 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd2cc0]
c0024749:	0f b7 c0             	movzx  eax,ax
c002474c:	83 e0 08             	and    eax,0x8
c002474f:	85 c0                	test   eax,eax
c0024751:	74 16                	je     c0024769 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0024753:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0024757:	eb 10                	jmp    c0024769 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0024759:	83 ec 0c             	sub    esp,0xc
c002475c:	68 f8 b6 02 c0       	push   0xc002b6f8
c0024761:	e8 2d 51 ff ff       	call   c0019893 <Krnl::panic(char const*)>
c0024766:	83 c4 10             	add    esp,0x10
c0024769:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c002476d:	a1 40 ed 02 c0       	mov    eax,ds:0xc002ed40
c0024772:	83 ec 08             	sub    esp,0x8
c0024775:	50                   	push   eax
c0024776:	68 30 b7 02 c0       	push   0xc002b730
c002477b:	e8 f9 df fe ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c0024780:	83 c4 10             	add    esp,0x10
c0024783:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c002478a:	a1 40 ed 02 c0       	mov    eax,ds:0xc002ed40
c002478f:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0024792:	7d 67                	jge    c00247fb <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0024794:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0024797:	8b 04 85 60 ed 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd12a0]
c002479e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00247a1:	83 ec 08             	sub    esp,0x8
c00247a4:	52                   	push   edx
c00247a5:	50                   	push   eax
c00247a6:	e8 d1 fc ff ff       	call   c002447c <IOAPIC::handlesGSIWithNumber(unsigned int)>
c00247ab:	83 c4 10             	add    esp,0x10
c00247ae:	84 c0                	test   al,al
c00247b0:	74 44                	je     c00247f6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c00247b2:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00247b5:	8b 1c 85 60 ed 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd12a0]
c00247bc:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c00247c0:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00247c3:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c00247c7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00247ca:	83 c0 20             	add    eax,0x20
c00247cd:	0f b6 f0             	movzx  esi,al
c00247d0:	b8 00 00 00 00       	mov    eax,0x0
c00247d5:	99                   	cdq    
c00247d6:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00247d9:	0f b6 c9             	movzx  ecx,cl
c00247dc:	83 ec 04             	sub    esp,0x4
c00247df:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c00247e2:	57                   	push   edi
c00247e3:	56                   	push   esi
c00247e4:	52                   	push   edx
c00247e5:	50                   	push   eax
c00247e6:	51                   	push   ecx
c00247e7:	53                   	push   ebx
c00247e8:	e8 0b fe ff ff       	call   c00245f8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c00247ed:	83 c4 20             	add    esp,0x20
c00247f0:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c00247f4:	eb 05                	jmp    c00247fb <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c00247f6:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c00247f9:	eb 8f                	jmp    c002478a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c00247fb:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c00247fe:	83 f0 01             	xor    eax,0x1
c0024801:	84 c0                	test   al,al
c0024803:	74 10                	je     c0024815 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0024805:	83 ec 0c             	sub    esp,0xc
c0024808:	68 47 b7 02 c0       	push   0xc002b747
c002480d:	e8 81 50 ff ff       	call   c0019893 <Krnl::panic(char const*)>
c0024812:	83 c4 10             	add    esp,0x10
c0024815:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0024819:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0024820:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0024824:	7f 65                	jg     c002488b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0024826:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024829:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002482c:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0024833:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0024836:	01 ca                	add    edx,ecx
c0024838:	83 c2 54             	add    edx,0x54
c002483b:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c002483f:	85 c0                	test   eax,eax
c0024841:	75 43                	jne    c0024886 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0024843:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024846:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0024849:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0024850:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0024853:	01 ca                	add    edx,ecx
c0024855:	8d 4a 54             	lea    ecx,[edx+0x54]
c0024858:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c002485b:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c002485f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024862:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0024865:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c002486c:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002486f:	01 ca                	add    edx,ecx
c0024871:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0024877:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c002487a:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c002487e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024881:	83 e8 20             	sub    eax,0x20
c0024884:	eb 1a                	jmp    c00248a0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0024886:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0024889:	eb 95                	jmp    c0024820 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c002488b:	83 ec 0c             	sub    esp,0xc
c002488e:	68 54 b7 02 c0       	push   0xc002b754
c0024893:	e8 fb 4f ff ff       	call   c0019893 <Krnl::panic(char const*)>
c0024898:	83 c4 10             	add    esp,0x10
c002489b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00248a0:	8d 65 f4             	lea    esp,[ebp-0xc]
c00248a3:	5b                   	pop    ebx
c00248a4:	5e                   	pop    esi
c00248a5:	5f                   	pop    edi
c00248a6:	5d                   	pop    ebp
c00248a7:	c3                   	ret    

c00248a8 <PIC::disable()>:
c00248a8:	55                   	push   ebp
c00248a9:	89 e5                	mov    ebp,esp
c00248ab:	83 ec 10             	sub    esp,0x10
c00248ae:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c00248b4:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c00248b8:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00248bb:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00248bf:	ee                   	out    dx,al
c00248c0:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c00248c6:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c00248ca:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c00248cd:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00248d1:	ee                   	out    dx,al
c00248d2:	90                   	nop
c00248d3:	c9                   	leave  
c00248d4:	c3                   	ret    
c00248d5:	90                   	nop

c00248d6 <PIC::close(int, int, void*)>:
c00248d6:	55                   	push   ebp
c00248d7:	89 e5                	mov    ebp,esp
c00248d9:	83 ec 08             	sub    esp,0x8
c00248dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00248df:	8b 00                	mov    eax,DWORD PTR [eax]
c00248e1:	83 c0 3c             	add    eax,0x3c
c00248e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00248e6:	83 ec 0c             	sub    esp,0xc
c00248e9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00248ec:	ff d0                	call   eax
c00248ee:	83 c4 10             	add    esp,0x10
c00248f1:	b8 00 00 00 00       	mov    eax,0x0
c00248f6:	c9                   	leave  
c00248f7:	c3                   	ret    

c00248f8 <PIC::PIC()>:
c00248f8:	83 ec 0c             	sub    esp,0xc
c00248fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00248ff:	83 ec 08             	sub    esp,0x8
c0024902:	68 00 b8 02 c0       	push   0xc002b800
c0024907:	50                   	push   eax
c0024908:	e8 a3 fb fe ff       	call   c00144b0 <InterruptController::InterruptController(char const*)>
c002490d:	83 c4 10             	add    esp,0x10
c0024910:	ba 2c b8 02 c0       	mov    edx,0xc002b82c
c0024915:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024919:	89 10                	mov    DWORD PTR [eax],edx
c002491b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002491f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024925:	0f b6 d0             	movzx  edx,al
c0024928:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002492c:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0024933:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024937:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002493d:	0f b6 d0             	movzx  edx,al
c0024940:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024944:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0024949:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002494d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024953:	8d 50 01             	lea    edx,[eax+0x1]
c0024956:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002495a:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0024960:	0f b6 d0             	movzx  edx,al
c0024963:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024967:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002496b:	83 e1 3f             	and    ecx,0x3f
c002496e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0024972:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024976:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002497c:	0f b6 d0             	movzx  edx,al
c002497f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024983:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c002498a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002498e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024994:	0f b6 d0             	movzx  edx,al
c0024997:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002499b:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00249a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00249a4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00249aa:	8d 50 01             	lea    edx,[eax+0x1]
c00249ad:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00249b1:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00249b7:	0f b6 d0             	movzx  edx,al
c00249ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00249be:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00249c2:	83 e1 3f             	and    ecx,0x3f
c00249c5:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00249c9:	90                   	nop
c00249ca:	83 c4 0c             	add    esp,0xc
c00249cd:	c3                   	ret    

c00249ce <PIC::ioWait()>:
c00249ce:	eb 00                	jmp    c00249d0 <PIC::ioWait()+0x2>
c00249d0:	eb 00                	jmp    c00249d2 <PIC::ioWait()+0x4>
c00249d2:	90                   	nop
c00249d3:	c3                   	ret    

c00249d4 <PIC::getIRQReg(int)>:
c00249d4:	55                   	push   ebp
c00249d5:	89 e5                	mov    ebp,esp
c00249d7:	83 ec 10             	sub    esp,0x10
c00249da:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00249dd:	0f b6 c0             	movzx  eax,al
c00249e0:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c00249e6:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c00249e9:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00249ec:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00249f0:	ee                   	out    dx,al
c00249f1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00249f4:	0f b6 c0             	movzx  eax,al
c00249f7:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c00249fd:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0024a00:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0024a03:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0024a07:	ee                   	out    dx,al
c0024a08:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0024a0e:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0024a12:	89 c2                	mov    edx,eax
c0024a14:	ec                   	in     al,dx
c0024a15:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0024a18:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0024a1b:	0f b6 c0             	movzx  eax,al
c0024a1e:	c1 e0 08             	shl    eax,0x8
c0024a21:	89 c1                	mov    ecx,eax
c0024a23:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0024a29:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0024a2d:	89 c2                	mov    edx,eax
c0024a2f:	ec                   	in     al,dx
c0024a30:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0024a33:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0024a36:	0f b6 c0             	movzx  eax,al
c0024a39:	09 c8                	or     eax,ecx
c0024a3b:	c9                   	leave  
c0024a3c:	c3                   	ret    
c0024a3d:	90                   	nop

c0024a3e <PIC::eoi(unsigned char)>:
c0024a3e:	55                   	push   ebp
c0024a3f:	89 e5                	mov    ebp,esp
c0024a41:	83 ec 14             	sub    esp,0x14
c0024a44:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024a47:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0024a4a:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0024a4e:	75 1e                	jne    c0024a6e <PIC::eoi(unsigned char)+0x30>
c0024a50:	6a 0b                	push   0xb
c0024a52:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024a55:	e8 7a ff ff ff       	call   c00249d4 <PIC::getIRQReg(int)>
c0024a5a:	83 c4 08             	add    esp,0x8
c0024a5d:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0024a61:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0024a65:	25 80 00 00 00       	and    eax,0x80
c0024a6a:	85 c0                	test   eax,eax
c0024a6c:	74 5f                	je     c0024acd <PIC::eoi(unsigned char)+0x8f>
c0024a6e:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0024a72:	75 2d                	jne    c0024aa1 <PIC::eoi(unsigned char)+0x63>
c0024a74:	6a 0b                	push   0xb
c0024a76:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024a79:	e8 56 ff ff ff       	call   c00249d4 <PIC::getIRQReg(int)>
c0024a7e:	83 c4 08             	add    esp,0x8
c0024a81:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0024a85:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0024a88:	66 85 c0             	test   ax,ax
c0024a8b:	78 14                	js     c0024aa1 <PIC::eoi(unsigned char)+0x63>
c0024a8d:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0024a93:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0024a97:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0024a9a:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0024a9e:	ee                   	out    dx,al
c0024a9f:	eb 2d                	jmp    c0024ace <PIC::eoi(unsigned char)+0x90>
c0024aa1:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0024aa5:	76 12                	jbe    c0024ab9 <PIC::eoi(unsigned char)+0x7b>
c0024aa7:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0024aad:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0024ab1:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0024ab4:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0024ab8:	ee                   	out    dx,al
c0024ab9:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0024abf:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0024ac3:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0024ac6:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0024aca:	ee                   	out    dx,al
c0024acb:	eb 01                	jmp    c0024ace <PIC::eoi(unsigned char)+0x90>
c0024acd:	90                   	nop
c0024ace:	c9                   	leave  
c0024acf:	c3                   	ret    

c0024ad0 <PIC::remap()>:
c0024ad0:	55                   	push   ebp
c0024ad1:	89 e5                	mov    ebp,esp
c0024ad3:	83 ec 48             	sub    esp,0x48
c0024ad6:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0024add:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0024ae4:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0024aea:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0024aed:	89 c2                	mov    edx,eax
c0024aef:	ec                   	in     al,dx
c0024af0:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0024af3:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0024af6:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0024af9:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0024aff:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0024b02:	89 c2                	mov    edx,eax
c0024b04:	ec                   	in     al,dx
c0024b05:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0024b08:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0024b0b:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0024b0e:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0024b14:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0024b18:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0024b1b:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0024b1e:	ee                   	out    dx,al
c0024b1f:	83 ec 0c             	sub    esp,0xc
c0024b22:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024b25:	e8 a4 fe ff ff       	call   c00249ce <PIC::ioWait()>
c0024b2a:	83 c4 10             	add    esp,0x10
c0024b2d:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0024b33:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0024b37:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0024b3a:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0024b3d:	ee                   	out    dx,al
c0024b3e:	83 ec 0c             	sub    esp,0xc
c0024b41:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024b44:	e8 85 fe ff ff       	call   c00249ce <PIC::ioWait()>
c0024b49:	83 c4 10             	add    esp,0x10
c0024b4c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0024b4f:	0f b6 c0             	movzx  eax,al
c0024b52:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0024b58:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0024b5b:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0024b5e:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0024b61:	ee                   	out    dx,al
c0024b62:	83 ec 0c             	sub    esp,0xc
c0024b65:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024b68:	e8 61 fe ff ff       	call   c00249ce <PIC::ioWait()>
c0024b6d:	83 c4 10             	add    esp,0x10
c0024b70:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0024b73:	0f b6 c0             	movzx  eax,al
c0024b76:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0024b7c:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0024b7f:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0024b82:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0024b85:	ee                   	out    dx,al
c0024b86:	83 ec 0c             	sub    esp,0xc
c0024b89:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024b8c:	e8 3d fe ff ff       	call   c00249ce <PIC::ioWait()>
c0024b91:	83 c4 10             	add    esp,0x10
c0024b94:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0024b9a:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0024b9e:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0024ba1:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0024ba4:	ee                   	out    dx,al
c0024ba5:	83 ec 0c             	sub    esp,0xc
c0024ba8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024bab:	e8 1e fe ff ff       	call   c00249ce <PIC::ioWait()>
c0024bb0:	83 c4 10             	add    esp,0x10
c0024bb3:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0024bb9:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0024bbd:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0024bc0:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0024bc3:	ee                   	out    dx,al
c0024bc4:	83 ec 0c             	sub    esp,0xc
c0024bc7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024bca:	e8 ff fd ff ff       	call   c00249ce <PIC::ioWait()>
c0024bcf:	83 c4 10             	add    esp,0x10
c0024bd2:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0024bd8:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0024bdc:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0024bdf:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0024be2:	ee                   	out    dx,al
c0024be3:	83 ec 0c             	sub    esp,0xc
c0024be6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024be9:	e8 e0 fd ff ff       	call   c00249ce <PIC::ioWait()>
c0024bee:	83 c4 10             	add    esp,0x10
c0024bf1:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0024bf7:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0024bfb:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0024bfe:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0024c01:	ee                   	out    dx,al
c0024c02:	83 ec 0c             	sub    esp,0xc
c0024c05:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024c08:	e8 c1 fd ff ff       	call   c00249ce <PIC::ioWait()>
c0024c0d:	83 c4 10             	add    esp,0x10
c0024c10:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0024c14:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0024c1a:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0024c1d:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0024c20:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0024c23:	ee                   	out    dx,al
c0024c24:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0024c28:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0024c2e:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0024c31:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0024c34:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0024c37:	ee                   	out    dx,al
c0024c38:	90                   	nop
c0024c39:	c9                   	leave  
c0024c3a:	c3                   	ret    
c0024c3b:	90                   	nop

c0024c3c <PIC::open(int, int, void*)>:
c0024c3c:	55                   	push   ebp
c0024c3d:	89 e5                	mov    ebp,esp
c0024c3f:	83 ec 18             	sub    esp,0x18
c0024c42:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0024c48:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0024c4c:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0024c4f:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0024c53:	ee                   	out    dx,al
c0024c54:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0024c5a:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0024c5e:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0024c61:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0024c65:	ee                   	out    dx,al
c0024c66:	83 ec 0c             	sub    esp,0xc
c0024c69:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024c6c:	e8 5f fe ff ff       	call   c0024ad0 <PIC::remap()>
c0024c71:	83 c4 10             	add    esp,0x10
c0024c74:	b8 00 00 00 00       	mov    eax,0x0
c0024c79:	c9                   	leave  
c0024c7a:	c3                   	ret    
c0024c7b:	90                   	nop

c0024c7c <APICTimer::close(int, int, void*)>:
c0024c7c:	b8 00 00 00 00       	mov    eax,0x0
c0024c81:	c3                   	ret    

c0024c82 <apicTimerHandler(regs*, void*)>:
c0024c82:	83 ec 0c             	sub    esp,0xc
c0024c85:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024c89:	8b 00                	mov    eax,DWORD PTR [eax]
c0024c8b:	99                   	cdq    
c0024c8c:	52                   	push   edx
c0024c8d:	50                   	push   eax
c0024c8e:	6a 00                	push   0x0
c0024c90:	68 00 ca 9a 3b       	push   0x3b9aca00
c0024c95:	e8 92 07 00 00       	call   c002542c <__udivdi3>
c0024c9a:	83 c4 10             	add    esp,0x10
c0024c9d:	83 ec 08             	sub    esp,0x8
c0024ca0:	52                   	push   edx
c0024ca1:	50                   	push   eax
c0024ca2:	e8 08 17 ff ff       	call   c00163af <timerHandler(unsigned long long)>
c0024ca7:	83 c4 10             	add    esp,0x10
c0024caa:	90                   	nop
c0024cab:	83 c4 0c             	add    esp,0xc
c0024cae:	c3                   	ret    
c0024caf:	90                   	nop

c0024cb0 <APICTimer::write(int)>:
c0024cb0:	53                   	push   ebx
c0024cb1:	83 ec 28             	sub    esp,0x28
c0024cb4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024cb8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0024cbc:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0024cc2:	a1 e8 c9 02 c0       	mov    eax,ds:0xc002c9e8
c0024cc7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024ccd:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0024cd3:	83 ec 0c             	sub    esp,0xc
c0024cd6:	50                   	push   eax
c0024cd7:	e8 de f4 ff ff       	call   c00241ba <APIC::getBase()>
c0024cdc:	83 c4 10             	add    esp,0x10
c0024cdf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024ce3:	a1 70 d0 02 c0       	mov    eax,ds:0xc002d070
c0024ce8:	8b 15 74 d0 02 c0    	mov    edx,DWORD PTR ds:0xc002d074
c0024cee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024cf2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0024cf6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024cfa:	05 e0 03 00 00       	add    eax,0x3e0
c0024cff:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0024d05:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024d09:	05 80 03 00 00       	add    eax,0x380
c0024d0e:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0024d14:	fb                   	sti    
c0024d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d19:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0024d1d:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0024d22:	83 d2 00             	adc    edx,0x0
c0024d25:	89 c1                	mov    ecx,eax
c0024d27:	89 d3                	mov    ebx,edx
c0024d29:	a1 70 d0 02 c0       	mov    eax,ds:0xc002d070
c0024d2e:	8b 15 74 d0 02 c0    	mov    edx,DWORD PTR ds:0xc002d074
c0024d34:	39 c8                	cmp    eax,ecx
c0024d36:	89 d0                	mov    eax,edx
c0024d38:	19 d8                	sbb    eax,ebx
c0024d3a:	73 02                	jae    c0024d3e <APICTimer::write(int)+0x8e>
c0024d3c:	eb d7                	jmp    c0024d15 <APICTimer::write(int)+0x65>
c0024d3e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024d42:	05 20 03 00 00       	add    eax,0x320
c0024d47:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0024d4d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024d51:	05 90 03 00 00       	add    eax,0x390
c0024d56:	8b 00                	mov    eax,DWORD PTR [eax]
c0024d58:	f7 d0                	not    eax
c0024d5a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024d5e:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024d62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024d66:	ba 00 00 00 00       	mov    edx,0x0
c0024d6b:	f7 f3                	div    ebx
c0024d6d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024d71:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024d75:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0024d7b:	0d 00 00 02 00       	or     eax,0x20000
c0024d80:	89 c2                	mov    edx,eax
c0024d82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024d86:	05 20 03 00 00       	add    eax,0x320
c0024d8b:	89 10                	mov    DWORD PTR [eax],edx
c0024d8d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024d91:	05 e0 03 00 00       	add    eax,0x3e0
c0024d96:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0024d9c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024da0:	05 80 03 00 00       	add    eax,0x380
c0024da5:	89 c2                	mov    edx,eax
c0024da7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024dab:	89 02                	mov    DWORD PTR [edx],eax
c0024dad:	90                   	nop
c0024dae:	83 c4 28             	add    esp,0x28
c0024db1:	5b                   	pop    ebx
c0024db2:	c3                   	ret    
c0024db3:	90                   	nop

c0024db4 <APICTimer::open(int, int, void*)>:
c0024db4:	57                   	push   edi
c0024db5:	56                   	push   esi
c0024db6:	53                   	push   ebx
c0024db7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024dbb:	8b 00                	mov    eax,DWORD PTR [eax]
c0024dbd:	83 c0 24             	add    eax,0x24
c0024dc0:	8b 00                	mov    eax,DWORD PTR [eax]
c0024dc2:	83 ec 08             	sub    esp,0x8
c0024dc5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024dc9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024dcd:	ff d0                	call   eax
c0024dcf:	83 c4 10             	add    esp,0x10
c0024dd2:	a1 e8 c9 02 c0       	mov    eax,ds:0xc002c9e8
c0024dd7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024ddd:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0024de3:	83 ec 0c             	sub    esp,0xc
c0024de6:	50                   	push   eax
c0024de7:	e8 ce f3 ff ff       	call   c00241ba <APIC::getBase()>
c0024dec:	83 c4 10             	add    esp,0x10
c0024def:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0024df5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024df9:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0024dff:	0f b6 f8             	movzx  edi,al
c0024e02:	89 d0                	mov    eax,edx
c0024e04:	ba 00 00 00 00       	mov    edx,0x0
c0024e09:	89 c1                	mov    ecx,eax
c0024e0b:	80 e5 ff             	and    ch,0xff
c0024e0e:	89 cb                	mov    ebx,ecx
c0024e10:	0f b6 f2             	movzx  esi,dl
c0024e13:	89 d8                	mov    eax,ebx
c0024e15:	89 f2                	mov    edx,esi
c0024e17:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024e1b:	8d 5f 08             	lea    ebx,[edi+0x8]
c0024e1e:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0024e22:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0024e26:	83 e0 00             	and    eax,0x0
c0024e29:	09 d0                	or     eax,edx
c0024e2b:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0024e2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e33:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0024e39:	8d 50 01             	lea    edx,[eax+0x1]
c0024e3c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024e40:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0024e46:	0f b6 d0             	movzx  edx,al
c0024e49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e4d:	83 c2 08             	add    edx,0x8
c0024e50:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0024e54:	0f b6 c9             	movzx  ecx,cl
c0024e57:	81 c9 00 00 01 00    	or     ecx,0x10000
c0024e5d:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0024e61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e65:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0024e69:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0024e6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e73:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0024e77:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0024e7d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0024e81:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0024e87:	83 ec 0c             	sub    esp,0xc
c0024e8a:	51                   	push   ecx
c0024e8b:	6a 01                	push   0x1
c0024e8d:	68 82 4c 02 c0       	push   0xc0024c82
c0024e92:	52                   	push   edx
c0024e93:	50                   	push   eax
c0024e94:	e8 53 ec fe ff       	call   c0013aec <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0024e99:	83 c4 20             	add    esp,0x20
c0024e9c:	89 c2                	mov    edx,eax
c0024e9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024ea2:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0024ea8:	b8 00 00 00 00       	mov    eax,0x0
c0024ead:	5b                   	pop    ebx
c0024eae:	5e                   	pop    esi
c0024eaf:	5f                   	pop    edi
c0024eb0:	c3                   	ret    
c0024eb1:	90                   	nop

c0024eb2 <APICTimer::APICTimer()>:
c0024eb2:	83 ec 0c             	sub    esp,0xc
c0024eb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024eb9:	83 ec 08             	sub    esp,0x8
c0024ebc:	68 6c b8 02 c0       	push   0xc002b86c
c0024ec1:	50                   	push   eax
c0024ec2:	e8 59 14 ff ff       	call   c0016320 <Timer::Timer(char const*)>
c0024ec7:	83 c4 10             	add    esp,0x10
c0024eca:	ba 80 b8 02 c0       	mov    edx,0xc002b880
c0024ecf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024ed3:	89 10                	mov    DWORD PTR [eax],edx
c0024ed5:	90                   	nop
c0024ed6:	83 c4 0c             	add    esp,0xc
c0024ed9:	c3                   	ret    

c0024eda <PIT::write(int)>:
c0024eda:	83 ec 10             	sub    esp,0x10
c0024edd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024ee1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0024ee5:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0024eeb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024eef:	a3 84 ed 02 c0       	mov    ds:0xc002ed84,eax
c0024ef4:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0024ef9:	99                   	cdq    
c0024efa:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0024efe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024f02:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0024f09:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0024f0e:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0024f12:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0024f17:	ee                   	out    dx,al
c0024f18:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024f1c:	0f b6 c0             	movzx  eax,al
c0024f1f:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0024f26:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0024f2a:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0024f2e:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0024f33:	ee                   	out    dx,al
c0024f34:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024f38:	c1 f8 08             	sar    eax,0x8
c0024f3b:	0f b6 c0             	movzx  eax,al
c0024f3e:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0024f45:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0024f49:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0024f4d:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0024f52:	ee                   	out    dx,al
c0024f53:	90                   	nop
c0024f54:	83 c4 10             	add    esp,0x10
c0024f57:	c3                   	ret    

c0024f58 <pitHandler(regs*, void*)>:
c0024f58:	83 ec 0c             	sub    esp,0xc
c0024f5b:	a1 84 ed 02 c0       	mov    eax,ds:0xc002ed84
c0024f60:	99                   	cdq    
c0024f61:	52                   	push   edx
c0024f62:	50                   	push   eax
c0024f63:	6a 00                	push   0x0
c0024f65:	68 00 ca 9a 3b       	push   0x3b9aca00
c0024f6a:	e8 bd 04 00 00       	call   c002542c <__udivdi3>
c0024f6f:	83 c4 10             	add    esp,0x10
c0024f72:	83 ec 08             	sub    esp,0x8
c0024f75:	52                   	push   edx
c0024f76:	50                   	push   eax
c0024f77:	e8 33 14 ff ff       	call   c00163af <timerHandler(unsigned long long)>
c0024f7c:	83 c4 10             	add    esp,0x10
c0024f7f:	90                   	nop
c0024f80:	83 c4 0c             	add    esp,0xc
c0024f83:	c3                   	ret    

c0024f84 <PIT::open(int, int, void*)>:
c0024f84:	83 ec 0c             	sub    esp,0xc
c0024f87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f8b:	8b 00                	mov    eax,DWORD PTR [eax]
c0024f8d:	83 c0 24             	add    eax,0x24
c0024f90:	8b 00                	mov    eax,DWORD PTR [eax]
c0024f92:	83 ec 08             	sub    esp,0x8
c0024f95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024f99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024f9d:	ff d0                	call   eax
c0024f9f:	83 c4 10             	add    esp,0x10
c0024fa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024fa6:	83 ec 0c             	sub    esp,0xc
c0024fa9:	6a 00                	push   0x0
c0024fab:	6a 01                	push   0x1
c0024fad:	68 58 4f 02 c0       	push   0xc0024f58
c0024fb2:	6a 00                	push   0x0
c0024fb4:	50                   	push   eax
c0024fb5:	e8 32 eb fe ff       	call   c0013aec <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0024fba:	83 c4 20             	add    esp,0x20
c0024fbd:	89 c2                	mov    edx,eax
c0024fbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024fc3:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0024fc9:	b8 00 00 00 00       	mov    eax,0x0
c0024fce:	83 c4 0c             	add    esp,0xc
c0024fd1:	c3                   	ret    

c0024fd2 <PIT::close(int, int, void*)>:
c0024fd2:	83 ec 0c             	sub    esp,0xc
c0024fd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024fd9:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0024fe3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024fe7:	6a 01                	push   0x1
c0024fe9:	68 58 4f 02 c0       	push   0xc0024f58
c0024fee:	6a 00                	push   0x0
c0024ff0:	50                   	push   eax
c0024ff1:	e8 34 eb fe ff       	call   c0013b2a <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0024ff6:	83 c4 10             	add    esp,0x10
c0024ff9:	b8 00 00 00 00       	mov    eax,0x0
c0024ffe:	83 c4 0c             	add    esp,0xc
c0025001:	c3                   	ret    

c0025002 <PIT::PIT()>:
c0025002:	83 ec 0c             	sub    esp,0xc
c0025005:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025009:	83 ec 08             	sub    esp,0x8
c002500c:	68 a8 b8 02 c0       	push   0xc002b8a8
c0025011:	50                   	push   eax
c0025012:	e8 09 13 ff ff       	call   c0016320 <Timer::Timer(char const*)>
c0025017:	83 c4 10             	add    esp,0x10
c002501a:	ba d0 b8 02 c0       	mov    edx,0xc002b8d0
c002501f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025023:	89 10                	mov    DWORD PTR [eax],edx
c0025025:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025029:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002502f:	0f b6 d0             	movzx  edx,al
c0025032:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025036:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c002503d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025041:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025047:	0f b6 d0             	movzx  edx,al
c002504a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002504e:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0025053:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025057:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002505d:	8d 50 01             	lea    edx,[eax+0x1]
c0025060:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025064:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002506a:	0f b6 d0             	movzx  edx,al
c002506d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025071:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025075:	83 e1 3f             	and    ecx,0x3f
c0025078:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002507c:	90                   	nop
c002507d:	83 c4 0c             	add    esp,0xc
c0025080:	c3                   	ret    
c0025081:	66 90                	xchg   ax,ax
c0025083:	66 90                	xchg   ax,ax
c0025085:	66 90                	xchg   ax,ax
c0025087:	66 90                	xchg   ax,ax
c0025089:	66 90                	xchg   ax,ax
c002508b:	66 90                	xchg   ax,ax
c002508d:	66 90                	xchg   ax,ax
c002508f:	90                   	nop

c0025090 <avxDetect>:
c0025090:	b8 00 00 00 00       	mov    eax,0x0
c0025095:	c3                   	ret    

c0025096 <avxSave>:
c0025096:	c3                   	ret    

c0025097 <avxLoad>:
c0025097:	c3                   	ret    

c0025098 <avxInit>:
c0025098:	c3                   	ret    

c0025099 <avxClose>:
c0025099:	c3                   	ret    

c002509a <wouldSheSayYes>:
c002509a:	c3                   	ret    
c002509b:	49                   	dec    ecx
c002509c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c00250a0:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c00250a4:	75 20                	jne    c00250c6 <sseDetect.noSSE+0x1>
c00250a6:	4e                   	dec    esi
c00250a7:	79 61                	jns    c002510a <x87Detect+0x14>
c00250a9:	68 2e 2e 2e 00       	push   0x2e2e2e
c00250ae:	66 90                	xchg   ax,ax

c00250b0 <absolutelyNoChanceInHell>:
c00250b0:	b8 01 00 00 00       	mov    eax,0x1
c00250b5:	0f a2                	cpuid  
c00250b7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c00250bd:	74 06                	je     c00250c5 <sseDetect.noSSE>
c00250bf:	b8 01 00 00 00       	mov    eax,0x1
c00250c4:	c3                   	ret    

c00250c5 <sseDetect.noSSE>:
c00250c5:	31 c0                	xor    eax,eax
c00250c7:	c3                   	ret    

c00250c8 <sseSave>:
c00250c8:	0f ae 44 24 08       	fxsave [esp+0x8]
c00250cd:	c3                   	ret    

c00250ce <sseLoad>:
c00250ce:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c00250d3:	c3                   	ret    

c00250d4 <sseInit>:
c00250d4:	e8 43 00 00 00       	call   c002511c <x87Init>
c00250d9:	0f 20 e0             	mov    eax,cr4
c00250dc:	66 0d 00 06          	or     ax,0x600
c00250e0:	0f 22 e0             	mov    cr4,eax
c00250e3:	c3                   	ret    

c00250e4 <sseClose>:
c00250e4:	c3                   	ret    
c00250e5:	66 90                	xchg   ax,ax
c00250e7:	66 90                	xchg   ax,ax
c00250e9:	66 90                	xchg   ax,ax
c00250eb:	66 90                	xchg   ax,ax
c00250ed:	66 90                	xchg   ax,ax
c00250ef:	90                   	nop

c00250f0 <value_37F>:
c00250f0:	7f 03                	jg     c00250f5 <value_37A+0x1>

c00250f2 <value_37E>:
c00250f2:	7e 03                	jle    c00250f7 <x87Detect+0x1>

c00250f4 <value_37A>:
c00250f4:	7a 03                	jp     c00250f9 <x87Detect+0x3>

c00250f6 <x87Detect>:
c00250f6:	b8 01 00 00 00       	mov    eax,0x1
c00250fb:	0f a2                	cpuid  
c00250fd:	f7 c2 01 00 00 00    	test   edx,0x1
c0025103:	74 06                	je     c002510b <x87Detect.nox87>
c0025105:	b8 01 00 00 00       	mov    eax,0x1
c002510a:	c3                   	ret    

c002510b <x87Detect.nox87>:
c002510b:	b8 00 00 00 00       	mov    eax,0x0
c0025110:	c3                   	ret    

c0025111 <x87Save>:
c0025111:	9b dd 74 24 08       	fsave  [esp+0x8]
c0025116:	c3                   	ret    

c0025117 <x87Load>:
c0025117:	dd 64 24 08          	frstor [esp+0x8]
c002511b:	c3                   	ret    

c002511c <x87Init>:
c002511c:	9b db e3             	finit  
c002511f:	0f 20 c0             	mov    eax,cr0
c0025122:	66 25 fb ff          	and    ax,0xfffb
c0025126:	66 0d 22 00          	or     ax,0x22
c002512a:	0f 22 c0             	mov    cr0,eax
c002512d:	0f 06                	clts   
c002512f:	d9 2d f4 50 02 c0    	fldcw  WORD PTR ds:0xc00250f4
c0025135:	c3                   	ret    

c0025136 <x87Close>:
c0025136:	c3                   	ret    
c0025137:	90                   	nop

c0025138 <__do_global_ctors_aux>:
c0025138:	a1 2c 7c 02 c0       	mov    eax,ds:0xc0027c2c
c002513d:	83 f8 ff             	cmp    eax,0xffffffff
c0025140:	74 1a                	je     c002515c <__do_global_ctors_aux+0x24>
c0025142:	55                   	push   ebp
c0025143:	89 e5                	mov    ebp,esp
c0025145:	53                   	push   ebx
c0025146:	52                   	push   edx
c0025147:	bb 2c 7c 02 c0       	mov    ebx,0xc0027c2c
c002514c:	ff d0                	call   eax
c002514e:	83 eb 04             	sub    ebx,0x4
c0025151:	8b 03                	mov    eax,DWORD PTR [ebx]
c0025153:	83 f8 ff             	cmp    eax,0xffffffff
c0025156:	75 f4                	jne    c002514c <__do_global_ctors_aux+0x14>
c0025158:	58                   	pop    eax
c0025159:	5b                   	pop    ebx
c002515a:	5d                   	pop    ebp
c002515b:	c3                   	ret    
c002515c:	c3                   	ret    
c002515d:	66 90                	xchg   ax,ax
c002515f:	90                   	nop

c0025160 <__divdi3>:
c0025160:	55                   	push   ebp
c0025161:	57                   	push   edi
c0025162:	56                   	push   esi
c0025163:	53                   	push   ebx
c0025164:	83 ec 1c             	sub    esp,0x1c
c0025167:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002516b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002516f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0025172:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0025176:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002517a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002517e:	85 db                	test   ebx,ebx
c0025180:	0f 88 8e 00 00 00    	js     c0025214 <__divdi3+0xb4>
c0025186:	89 dd                	mov    ebp,ebx
c0025188:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0025190:	89 d3                	mov    ebx,edx
c0025192:	85 d2                	test   edx,edx
c0025194:	79 0d                	jns    c00251a3 <__divdi3+0x43>
c0025196:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c002519a:	f7 d8                	neg    eax
c002519c:	83 d2 00             	adc    edx,0x0
c002519f:	f7 da                	neg    edx
c00251a1:	89 d3                	mov    ebx,edx
c00251a3:	89 c7                	mov    edi,eax
c00251a5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00251a8:	85 db                	test   ebx,ebx
c00251aa:	75 48                	jne    c00251f4 <__divdi3+0x94>
c00251ac:	39 ef                	cmp    edi,ebp
c00251ae:	76 24                	jbe    c00251d4 <__divdi3+0x74>
c00251b0:	89 ea                	mov    edx,ebp
c00251b2:	f7 f7                	div    edi
c00251b4:	89 c1                	mov    ecx,eax
c00251b6:	31 f6                	xor    esi,esi
c00251b8:	89 c8                	mov    eax,ecx
c00251ba:	89 f2                	mov    edx,esi
c00251bc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00251c0:	85 c9                	test   ecx,ecx
c00251c2:	74 07                	je     c00251cb <__divdi3+0x6b>
c00251c4:	f7 d8                	neg    eax
c00251c6:	83 d2 00             	adc    edx,0x0
c00251c9:	f7 da                	neg    edx
c00251cb:	83 c4 1c             	add    esp,0x1c
c00251ce:	5b                   	pop    ebx
c00251cf:	5e                   	pop    esi
c00251d0:	5f                   	pop    edi
c00251d1:	5d                   	pop    ebp
c00251d2:	c3                   	ret    
c00251d3:	90                   	nop
c00251d4:	85 ff                	test   edi,edi
c00251d6:	75 0b                	jne    c00251e3 <__divdi3+0x83>
c00251d8:	b8 01 00 00 00       	mov    eax,0x1
c00251dd:	31 d2                	xor    edx,edx
c00251df:	f7 f3                	div    ebx
c00251e1:	89 c7                	mov    edi,eax
c00251e3:	31 d2                	xor    edx,edx
c00251e5:	89 e8                	mov    eax,ebp
c00251e7:	f7 f7                	div    edi
c00251e9:	89 c6                	mov    esi,eax
c00251eb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00251ee:	f7 f7                	div    edi
c00251f0:	89 c1                	mov    ecx,eax
c00251f2:	eb c4                	jmp    c00251b8 <__divdi3+0x58>
c00251f4:	39 eb                	cmp    ebx,ebp
c00251f6:	77 3c                	ja     c0025234 <__divdi3+0xd4>
c00251f8:	0f bd f3             	bsr    esi,ebx
c00251fb:	83 f6 1f             	xor    esi,0x1f
c00251fe:	75 40                	jne    c0025240 <__divdi3+0xe0>
c0025200:	39 eb                	cmp    ebx,ebp
c0025202:	72 09                	jb     c002520d <__divdi3+0xad>
c0025204:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0025207:	0f 87 97 00 00 00    	ja     c00252a4 <__divdi3+0x144>
c002520d:	b9 01 00 00 00       	mov    ecx,0x1
c0025212:	eb a4                	jmp    c00251b8 <__divdi3+0x58>
c0025214:	f7 d9                	neg    ecx
c0025216:	83 d3 00             	adc    ebx,0x0
c0025219:	f7 db                	neg    ebx
c002521b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002521e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0025222:	89 dd                	mov    ebp,ebx
c0025224:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c002522c:	e9 5f ff ff ff       	jmp    c0025190 <__divdi3+0x30>
c0025231:	8d 76 00             	lea    esi,[esi+0x0]
c0025234:	31 f6                	xor    esi,esi
c0025236:	31 c9                	xor    ecx,ecx
c0025238:	e9 7b ff ff ff       	jmp    c00251b8 <__divdi3+0x58>
c002523d:	8d 76 00             	lea    esi,[esi+0x0]
c0025240:	b8 20 00 00 00       	mov    eax,0x20
c0025245:	29 f0                	sub    eax,esi
c0025247:	89 f1                	mov    ecx,esi
c0025249:	d3 e3                	shl    ebx,cl
c002524b:	89 fa                	mov    edx,edi
c002524d:	88 c1                	mov    cl,al
c002524f:	d3 ea                	shr    edx,cl
c0025251:	09 da                	or     edx,ebx
c0025253:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0025257:	89 f1                	mov    ecx,esi
c0025259:	d3 e7                	shl    edi,cl
c002525b:	89 eb                	mov    ebx,ebp
c002525d:	88 c1                	mov    cl,al
c002525f:	d3 eb                	shr    ebx,cl
c0025261:	89 f1                	mov    ecx,esi
c0025263:	d3 e5                	shl    ebp,cl
c0025265:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0025268:	88 c1                	mov    cl,al
c002526a:	d3 ea                	shr    edx,cl
c002526c:	09 d5                	or     ebp,edx
c002526e:	89 e8                	mov    eax,ebp
c0025270:	89 da                	mov    edx,ebx
c0025272:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0025276:	89 d3                	mov    ebx,edx
c0025278:	89 c5                	mov    ebp,eax
c002527a:	f7 e7                	mul    edi
c002527c:	39 d3                	cmp    ebx,edx
c002527e:	72 18                	jb     c0025298 <__divdi3+0x138>
c0025280:	74 0a                	je     c002528c <__divdi3+0x12c>
c0025282:	89 e9                	mov    ecx,ebp
c0025284:	31 f6                	xor    esi,esi
c0025286:	e9 2d ff ff ff       	jmp    c00251b8 <__divdi3+0x58>
c002528b:	90                   	nop
c002528c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c002528f:	89 f1                	mov    ecx,esi
c0025291:	d3 e7                	shl    edi,cl
c0025293:	39 c7                	cmp    edi,eax
c0025295:	73 eb                	jae    c0025282 <__divdi3+0x122>
c0025297:	90                   	nop
c0025298:	8d 4d ff             	lea    ecx,[ebp-0x1]
c002529b:	31 f6                	xor    esi,esi
c002529d:	e9 16 ff ff ff       	jmp    c00251b8 <__divdi3+0x58>
c00252a2:	66 90                	xchg   ax,ax
c00252a4:	31 c9                	xor    ecx,ecx
c00252a6:	e9 0d ff ff ff       	jmp    c00251b8 <__divdi3+0x58>
c00252ab:	90                   	nop

c00252ac <__moddi3>:
c00252ac:	55                   	push   ebp
c00252ad:	57                   	push   edi
c00252ae:	56                   	push   esi
c00252af:	53                   	push   ebx
c00252b0:	83 ec 2c             	sub    esp,0x2c
c00252b3:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00252b7:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00252bb:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00252bf:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00252c3:	85 db                	test   ebx,ebx
c00252c5:	0f 88 85 00 00 00    	js     c0025350 <__moddi3+0xa4>
c00252cb:	89 de                	mov    esi,ebx
c00252cd:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00252d5:	89 d7                	mov    edi,edx
c00252d7:	85 d2                	test   edx,edx
c00252d9:	79 09                	jns    c00252e4 <__moddi3+0x38>
c00252db:	f7 d8                	neg    eax
c00252dd:	83 d2 00             	adc    edx,0x0
c00252e0:	f7 da                	neg    edx
c00252e2:	89 d7                	mov    edi,edx
c00252e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00252e8:	89 cd                	mov    ebp,ecx
c00252ea:	85 ff                	test   edi,edi
c00252ec:	75 52                	jne    c0025340 <__moddi3+0x94>
c00252ee:	89 c3                	mov    ebx,eax
c00252f0:	39 f0                	cmp    eax,esi
c00252f2:	76 24                	jbe    c0025318 <__moddi3+0x6c>
c00252f4:	89 c8                	mov    eax,ecx
c00252f6:	89 f2                	mov    edx,esi
c00252f8:	f7 f3                	div    ebx
c00252fa:	89 d6                	mov    esi,edx
c00252fc:	89 f0                	mov    eax,esi
c00252fe:	31 d2                	xor    edx,edx
c0025300:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025304:	85 c9                	test   ecx,ecx
c0025306:	74 07                	je     c002530f <__moddi3+0x63>
c0025308:	f7 d8                	neg    eax
c002530a:	83 d2 00             	adc    edx,0x0
c002530d:	f7 da                	neg    edx
c002530f:	83 c4 2c             	add    esp,0x2c
c0025312:	5b                   	pop    ebx
c0025313:	5e                   	pop    esi
c0025314:	5f                   	pop    edi
c0025315:	5d                   	pop    ebp
c0025316:	c3                   	ret    
c0025317:	90                   	nop
c0025318:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002531c:	85 db                	test   ebx,ebx
c002531e:	75 0d                	jne    c002532d <__moddi3+0x81>
c0025320:	b8 01 00 00 00       	mov    eax,0x1
c0025325:	31 d2                	xor    edx,edx
c0025327:	f7 f7                	div    edi
c0025329:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002532d:	89 f0                	mov    eax,esi
c002532f:	31 d2                	xor    edx,edx
c0025331:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0025335:	f7 f7                	div    edi
c0025337:	89 e8                	mov    eax,ebp
c0025339:	f7 f7                	div    edi
c002533b:	89 d6                	mov    esi,edx
c002533d:	eb bd                	jmp    c00252fc <__moddi3+0x50>
c002533f:	90                   	nop
c0025340:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0025344:	39 f7                	cmp    edi,esi
c0025346:	76 20                	jbe    c0025368 <__moddi3+0xbc>
c0025348:	89 c8                	mov    eax,ecx
c002534a:	89 f2                	mov    edx,esi
c002534c:	eb b2                	jmp    c0025300 <__moddi3+0x54>
c002534e:	66 90                	xchg   ax,ax
c0025350:	f7 d9                	neg    ecx
c0025352:	83 d3 00             	adc    ebx,0x0
c0025355:	f7 db                	neg    ebx
c0025357:	89 de                	mov    esi,ebx
c0025359:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0025361:	e9 6f ff ff ff       	jmp    c00252d5 <__moddi3+0x29>
c0025366:	66 90                	xchg   ax,ax
c0025368:	0f bd c7             	bsr    eax,edi
c002536b:	83 f0 1f             	xor    eax,0x1f
c002536e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0025372:	75 24                	jne    c0025398 <__moddi3+0xec>
c0025374:	39 f7                	cmp    edi,esi
c0025376:	72 06                	jb     c002537e <__moddi3+0xd2>
c0025378:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c002537c:	77 0c                	ja     c002538a <__moddi3+0xde>
c002537e:	89 e9                	mov    ecx,ebp
c0025380:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0025384:	19 fe                	sbb    esi,edi
c0025386:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002538a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002538e:	89 f2                	mov    edx,esi
c0025390:	e9 6b ff ff ff       	jmp    c0025300 <__moddi3+0x54>
c0025395:	8d 76 00             	lea    esi,[esi+0x0]
c0025398:	b8 20 00 00 00       	mov    eax,0x20
c002539d:	89 c2                	mov    edx,eax
c002539f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00253a3:	29 da                	sub    edx,ebx
c00253a5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00253a9:	88 d9                	mov    cl,bl
c00253ab:	d3 e7                	shl    edi,cl
c00253ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00253b1:	88 d1                	mov    cl,dl
c00253b3:	d3 e8                	shr    eax,cl
c00253b5:	09 c7                	or     edi,eax
c00253b7:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c00253bb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00253bf:	89 d8                	mov    eax,ebx
c00253c1:	88 d9                	mov    cl,bl
c00253c3:	d3 e7                	shl    edi,cl
c00253c5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00253c9:	89 f3                	mov    ebx,esi
c00253cb:	88 d1                	mov    cl,dl
c00253cd:	d3 eb                	shr    ebx,cl
c00253cf:	89 c7                	mov    edi,eax
c00253d1:	88 c1                	mov    cl,al
c00253d3:	d3 e6                	shl    esi,cl
c00253d5:	89 e8                	mov    eax,ebp
c00253d7:	88 d1                	mov    cl,dl
c00253d9:	d3 e8                	shr    eax,cl
c00253db:	09 f0                	or     eax,esi
c00253dd:	89 f9                	mov    ecx,edi
c00253df:	d3 e5                	shl    ebp,cl
c00253e1:	89 da                	mov    edx,ebx
c00253e3:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c00253e7:	89 d3                	mov    ebx,edx
c00253e9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00253ed:	89 c6                	mov    esi,eax
c00253ef:	89 d1                	mov    ecx,edx
c00253f1:	39 d3                	cmp    ebx,edx
c00253f3:	72 27                	jb     c002541c <__moddi3+0x170>
c00253f5:	74 21                	je     c0025418 <__moddi3+0x16c>
c00253f7:	29 f5                	sub    ebp,esi
c00253f9:	19 cb                	sbb    ebx,ecx
c00253fb:	89 de                	mov    esi,ebx
c00253fd:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0025401:	d3 e6                	shl    esi,cl
c0025403:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0025407:	89 f9                	mov    ecx,edi
c0025409:	d3 ed                	shr    ebp,cl
c002540b:	09 ee                	or     esi,ebp
c002540d:	89 f0                	mov    eax,esi
c002540f:	d3 eb                	shr    ebx,cl
c0025411:	89 da                	mov    edx,ebx
c0025413:	e9 e8 fe ff ff       	jmp    c0025300 <__moddi3+0x54>
c0025418:	39 c5                	cmp    ebp,eax
c002541a:	73 db                	jae    c00253f7 <__moddi3+0x14b>
c002541c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0025420:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0025424:	89 d1                	mov    ecx,edx
c0025426:	89 c6                	mov    esi,eax
c0025428:	eb cd                	jmp    c00253f7 <__moddi3+0x14b>
c002542a:	66 90                	xchg   ax,ax

c002542c <__udivdi3>:
c002542c:	55                   	push   ebp
c002542d:	57                   	push   edi
c002542e:	56                   	push   esi
c002542f:	53                   	push   ebx
c0025430:	83 ec 1c             	sub    esp,0x1c
c0025433:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025437:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002543b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002543f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0025443:	85 d2                	test   edx,edx
c0025445:	75 41                	jne    c0025488 <__udivdi3+0x5c>
c0025447:	39 f7                	cmp    edi,esi
c0025449:	76 15                	jbe    c0025460 <__udivdi3+0x34>
c002544b:	89 e8                	mov    eax,ebp
c002544d:	89 f2                	mov    edx,esi
c002544f:	f7 f7                	div    edi
c0025451:	31 db                	xor    ebx,ebx
c0025453:	89 da                	mov    edx,ebx
c0025455:	83 c4 1c             	add    esp,0x1c
c0025458:	5b                   	pop    ebx
c0025459:	5e                   	pop    esi
c002545a:	5f                   	pop    edi
c002545b:	5d                   	pop    ebp
c002545c:	c3                   	ret    
c002545d:	8d 76 00             	lea    esi,[esi+0x0]
c0025460:	89 f9                	mov    ecx,edi
c0025462:	85 ff                	test   edi,edi
c0025464:	75 0b                	jne    c0025471 <__udivdi3+0x45>
c0025466:	b8 01 00 00 00       	mov    eax,0x1
c002546b:	31 d2                	xor    edx,edx
c002546d:	f7 f7                	div    edi
c002546f:	89 c1                	mov    ecx,eax
c0025471:	31 d2                	xor    edx,edx
c0025473:	89 f0                	mov    eax,esi
c0025475:	f7 f1                	div    ecx
c0025477:	89 c3                	mov    ebx,eax
c0025479:	89 e8                	mov    eax,ebp
c002547b:	f7 f1                	div    ecx
c002547d:	89 da                	mov    edx,ebx
c002547f:	83 c4 1c             	add    esp,0x1c
c0025482:	5b                   	pop    ebx
c0025483:	5e                   	pop    esi
c0025484:	5f                   	pop    edi
c0025485:	5d                   	pop    ebp
c0025486:	c3                   	ret    
c0025487:	90                   	nop
c0025488:	39 f2                	cmp    edx,esi
c002548a:	77 1c                	ja     c00254a8 <__udivdi3+0x7c>
c002548c:	0f bd da             	bsr    ebx,edx
c002548f:	83 f3 1f             	xor    ebx,0x1f
c0025492:	75 24                	jne    c00254b8 <__udivdi3+0x8c>
c0025494:	39 f2                	cmp    edx,esi
c0025496:	72 08                	jb     c00254a0 <__udivdi3+0x74>
c0025498:	39 ef                	cmp    edi,ebp
c002549a:	0f 87 84 00 00 00    	ja     c0025524 <__udivdi3+0xf8>
c00254a0:	b8 01 00 00 00       	mov    eax,0x1
c00254a5:	eb ac                	jmp    c0025453 <__udivdi3+0x27>
c00254a7:	90                   	nop
c00254a8:	31 db                	xor    ebx,ebx
c00254aa:	31 c0                	xor    eax,eax
c00254ac:	89 da                	mov    edx,ebx
c00254ae:	83 c4 1c             	add    esp,0x1c
c00254b1:	5b                   	pop    ebx
c00254b2:	5e                   	pop    esi
c00254b3:	5f                   	pop    edi
c00254b4:	5d                   	pop    ebp
c00254b5:	c3                   	ret    
c00254b6:	66 90                	xchg   ax,ax
c00254b8:	b8 20 00 00 00       	mov    eax,0x20
c00254bd:	29 d8                	sub    eax,ebx
c00254bf:	88 d9                	mov    cl,bl
c00254c1:	d3 e2                	shl    edx,cl
c00254c3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00254c7:	89 fa                	mov    edx,edi
c00254c9:	88 c1                	mov    cl,al
c00254cb:	d3 ea                	shr    edx,cl
c00254cd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00254d1:	09 d1                	or     ecx,edx
c00254d3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00254d7:	88 d9                	mov    cl,bl
c00254d9:	d3 e7                	shl    edi,cl
c00254db:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00254df:	89 f7                	mov    edi,esi
c00254e1:	88 c1                	mov    cl,al
c00254e3:	d3 ef                	shr    edi,cl
c00254e5:	88 d9                	mov    cl,bl
c00254e7:	d3 e6                	shl    esi,cl
c00254e9:	89 ea                	mov    edx,ebp
c00254eb:	88 c1                	mov    cl,al
c00254ed:	d3 ea                	shr    edx,cl
c00254ef:	09 d6                	or     esi,edx
c00254f1:	89 f0                	mov    eax,esi
c00254f3:	89 fa                	mov    edx,edi
c00254f5:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00254f9:	89 d7                	mov    edi,edx
c00254fb:	89 c6                	mov    esi,eax
c00254fd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0025501:	39 d7                	cmp    edi,edx
c0025503:	72 13                	jb     c0025518 <__udivdi3+0xec>
c0025505:	74 09                	je     c0025510 <__udivdi3+0xe4>
c0025507:	89 f0                	mov    eax,esi
c0025509:	31 db                	xor    ebx,ebx
c002550b:	e9 43 ff ff ff       	jmp    c0025453 <__udivdi3+0x27>
c0025510:	88 d9                	mov    cl,bl
c0025512:	d3 e5                	shl    ebp,cl
c0025514:	39 c5                	cmp    ebp,eax
c0025516:	73 ef                	jae    c0025507 <__udivdi3+0xdb>
c0025518:	8d 46 ff             	lea    eax,[esi-0x1]
c002551b:	31 db                	xor    ebx,ebx
c002551d:	e9 31 ff ff ff       	jmp    c0025453 <__udivdi3+0x27>
c0025522:	66 90                	xchg   ax,ax
c0025524:	31 c0                	xor    eax,eax
c0025526:	e9 28 ff ff ff       	jmp    c0025453 <__udivdi3+0x27>
c002552b:	90                   	nop

c002552c <__umoddi3>:
c002552c:	55                   	push   ebp
c002552d:	57                   	push   edi
c002552e:	56                   	push   esi
c002552f:	53                   	push   ebx
c0025530:	83 ec 1c             	sub    esp,0x1c
c0025533:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0025537:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002553b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002553f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0025543:	89 da                	mov    edx,ebx
c0025545:	85 c0                	test   eax,eax
c0025547:	75 37                	jne    c0025580 <__umoddi3+0x54>
c0025549:	39 df                	cmp    edi,ebx
c002554b:	76 13                	jbe    c0025560 <__umoddi3+0x34>
c002554d:	89 f0                	mov    eax,esi
c002554f:	f7 f7                	div    edi
c0025551:	89 d0                	mov    eax,edx
c0025553:	31 d2                	xor    edx,edx
c0025555:	83 c4 1c             	add    esp,0x1c
c0025558:	5b                   	pop    ebx
c0025559:	5e                   	pop    esi
c002555a:	5f                   	pop    edi
c002555b:	5d                   	pop    ebp
c002555c:	c3                   	ret    
c002555d:	8d 76 00             	lea    esi,[esi+0x0]
c0025560:	89 fd                	mov    ebp,edi
c0025562:	85 ff                	test   edi,edi
c0025564:	75 0b                	jne    c0025571 <__umoddi3+0x45>
c0025566:	b8 01 00 00 00       	mov    eax,0x1
c002556b:	31 d2                	xor    edx,edx
c002556d:	f7 f7                	div    edi
c002556f:	89 c5                	mov    ebp,eax
c0025571:	89 d8                	mov    eax,ebx
c0025573:	31 d2                	xor    edx,edx
c0025575:	f7 f5                	div    ebp
c0025577:	89 f0                	mov    eax,esi
c0025579:	f7 f5                	div    ebp
c002557b:	89 d0                	mov    eax,edx
c002557d:	eb d4                	jmp    c0025553 <__umoddi3+0x27>
c002557f:	90                   	nop
c0025580:	89 f1                	mov    ecx,esi
c0025582:	39 d8                	cmp    eax,ebx
c0025584:	76 0a                	jbe    c0025590 <__umoddi3+0x64>
c0025586:	89 f0                	mov    eax,esi
c0025588:	83 c4 1c             	add    esp,0x1c
c002558b:	5b                   	pop    ebx
c002558c:	5e                   	pop    esi
c002558d:	5f                   	pop    edi
c002558e:	5d                   	pop    ebp
c002558f:	c3                   	ret    
c0025590:	0f bd e8             	bsr    ebp,eax
c0025593:	83 f5 1f             	xor    ebp,0x1f
c0025596:	75 1c                	jne    c00255b4 <__umoddi3+0x88>
c0025598:	39 d8                	cmp    eax,ebx
c002559a:	72 04                	jb     c00255a0 <__umoddi3+0x74>
c002559c:	39 f7                	cmp    edi,esi
c002559e:	77 08                	ja     c00255a8 <__umoddi3+0x7c>
c00255a0:	89 da                	mov    edx,ebx
c00255a2:	29 fe                	sub    esi,edi
c00255a4:	19 c2                	sbb    edx,eax
c00255a6:	89 f1                	mov    ecx,esi
c00255a8:	89 c8                	mov    eax,ecx
c00255aa:	83 c4 1c             	add    esp,0x1c
c00255ad:	5b                   	pop    ebx
c00255ae:	5e                   	pop    esi
c00255af:	5f                   	pop    edi
c00255b0:	5d                   	pop    ebp
c00255b1:	c3                   	ret    
c00255b2:	66 90                	xchg   ax,ax
c00255b4:	ba 20 00 00 00       	mov    edx,0x20
c00255b9:	29 ea                	sub    edx,ebp
c00255bb:	89 e9                	mov    ecx,ebp
c00255bd:	d3 e0                	shl    eax,cl
c00255bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00255c3:	89 f8                	mov    eax,edi
c00255c5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00255c9:	88 d1                	mov    cl,dl
c00255cb:	d3 e8                	shr    eax,cl
c00255cd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00255d1:	09 c1                	or     ecx,eax
c00255d3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00255d7:	89 e9                	mov    ecx,ebp
c00255d9:	d3 e7                	shl    edi,cl
c00255db:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00255df:	89 d8                	mov    eax,ebx
c00255e1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00255e5:	88 d1                	mov    cl,dl
c00255e7:	d3 e8                	shr    eax,cl
c00255e9:	89 c7                	mov    edi,eax
c00255eb:	89 e9                	mov    ecx,ebp
c00255ed:	d3 e3                	shl    ebx,cl
c00255ef:	89 f0                	mov    eax,esi
c00255f1:	88 d1                	mov    cl,dl
c00255f3:	d3 e8                	shr    eax,cl
c00255f5:	09 d8                	or     eax,ebx
c00255f7:	89 e9                	mov    ecx,ebp
c00255f9:	d3 e6                	shl    esi,cl
c00255fb:	89 f3                	mov    ebx,esi
c00255fd:	89 fa                	mov    edx,edi
c00255ff:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0025603:	89 d1                	mov    ecx,edx
c0025605:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0025609:	89 c6                	mov    esi,eax
c002560b:	89 d7                	mov    edi,edx
c002560d:	39 d1                	cmp    ecx,edx
c002560f:	72 27                	jb     c0025638 <__umoddi3+0x10c>
c0025611:	74 21                	je     c0025634 <__umoddi3+0x108>
c0025613:	89 ca                	mov    edx,ecx
c0025615:	29 f3                	sub    ebx,esi
c0025617:	19 fa                	sbb    edx,edi
c0025619:	89 d0                	mov    eax,edx
c002561b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c002561f:	d3 e0                	shl    eax,cl
c0025621:	89 e9                	mov    ecx,ebp
c0025623:	d3 eb                	shr    ebx,cl
c0025625:	09 d8                	or     eax,ebx
c0025627:	d3 ea                	shr    edx,cl
c0025629:	83 c4 1c             	add    esp,0x1c
c002562c:	5b                   	pop    ebx
c002562d:	5e                   	pop    esi
c002562e:	5f                   	pop    edi
c002562f:	5d                   	pop    ebp
c0025630:	c3                   	ret    
c0025631:	8d 76 00             	lea    esi,[esi+0x0]
c0025634:	39 c3                	cmp    ebx,eax
c0025636:	73 db                	jae    c0025613 <__umoddi3+0xe7>
c0025638:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c002563c:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0025640:	89 d7                	mov    edi,edx
c0025642:	89 c6                	mov    esi,eax
c0025644:	eb cd                	jmp    c0025613 <__umoddi3+0xe7>

c0025646 <__addsf3>:
c0025646:	55                   	push   ebp
c0025647:	89 e5                	mov    ebp,esp
c0025649:	57                   	push   edi
c002564a:	56                   	push   esi
c002564b:	53                   	push   ebx
c002564c:	83 ec 08             	sub    esp,0x8
c002564f:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0025652:	89 fa                	mov    edx,edi
c0025654:	89 f8                	mov    eax,edi
c0025656:	c1 f8 17             	sar    eax,0x17
c0025659:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002565c:	c1 e2 08             	shl    edx,0x8
c002565f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0025665:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0025668:	89 de                	mov    esi,ebx
c002566a:	c1 fe 17             	sar    esi,0x17
c002566d:	c1 e3 08             	shl    ebx,0x8
c0025670:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0025676:	31 f0                	xor    eax,esi
c0025678:	0f 88 3b 01 00 00    	js     c00257b9 <__addsf3+0x173>
c002567e:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0025681:	29 f1                	sub    ecx,esi
c0025683:	85 c9                	test   ecx,ecx
c0025685:	7e 54                	jle    c00256db <__addsf3+0x95>
c0025687:	89 f0                	mov    eax,esi
c0025689:	84 c0                	test   al,al
c002568b:	75 10                	jne    c002569d <__addsf3+0x57>
c002568d:	85 db                	test   ebx,ebx
c002568f:	0f 84 aa 02 00 00    	je     c002593f <__addsf3+0x2f9>
c0025695:	49                   	dec    ecx
c0025696:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0025699:	74 38                	je     c00256d3 <__addsf3+0x8d>
c002569b:	eb 13                	jmp    c00256b0 <__addsf3+0x6a>
c002569d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00256a0:	f7 d0                	not    eax
c00256a2:	84 c0                	test   al,al
c00256a4:	0f 84 95 02 00 00    	je     c002593f <__addsf3+0x2f9>
c00256aa:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00256b0:	83 f9 1f             	cmp    ecx,0x1f
c00256b3:	0f 8f 86 02 00 00    	jg     c002593f <__addsf3+0x2f9>
c00256b9:	89 de                	mov    esi,ebx
c00256bb:	d3 ee                	shr    esi,cl
c00256bd:	b8 20 00 00 00       	mov    eax,0x20
c00256c2:	29 c8                	sub    eax,ecx
c00256c4:	89 c1                	mov    ecx,eax
c00256c6:	d3 e3                	shl    ebx,cl
c00256c8:	31 c0                	xor    eax,eax
c00256ca:	85 db                	test   ebx,ebx
c00256cc:	0f 95 c0             	setne  al
c00256cf:	09 f0                	or     eax,esi
c00256d1:	01 d0                	add    eax,edx
c00256d3:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00256d6:	e9 b6 00 00 00       	jmp    c0025791 <__addsf3+0x14b>
c00256db:	74 5c                	je     c0025739 <__addsf3+0xf3>
c00256dd:	89 f1                	mov    ecx,esi
c00256df:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c00256e2:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00256e5:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c00256e9:	75 14                	jne    c00256ff <__addsf3+0xb9>
c00256eb:	85 d2                	test   edx,edx
c00256ed:	0f 84 4c 02 00 00    	je     c002593f <__addsf3+0x2f9>
c00256f3:	49                   	dec    ecx
c00256f4:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00256f7:	0f 84 94 00 00 00    	je     c0025791 <__addsf3+0x14b>
c00256fd:	eb 12                	jmp    c0025711 <__addsf3+0xcb>
c00256ff:	89 f0                	mov    eax,esi
c0025701:	f7 d0                	not    eax
c0025703:	84 c0                	test   al,al
c0025705:	0f 84 34 02 00 00    	je     c002593f <__addsf3+0x2f9>
c002570b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0025711:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0025714:	83 f9 1f             	cmp    ecx,0x1f
c0025717:	0f 8f 22 02 00 00    	jg     c002593f <__addsf3+0x2f9>
c002571d:	89 d7                	mov    edi,edx
c002571f:	d3 ef                	shr    edi,cl
c0025721:	b8 20 00 00 00       	mov    eax,0x20
c0025726:	29 c8                	sub    eax,ecx
c0025728:	89 c1                	mov    ecx,eax
c002572a:	d3 e2                	shl    edx,cl
c002572c:	31 c0                	xor    eax,eax
c002572e:	85 d2                	test   edx,edx
c0025730:	0f 95 c0             	setne  al
c0025733:	09 f8                	or     eax,edi
c0025735:	01 d8                	add    eax,ebx
c0025737:	eb 58                	jmp    c0025791 <__addsf3+0x14b>
c0025739:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002573c:	8d 70 01             	lea    esi,[eax+0x1]
c002573f:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0025745:	75 32                	jne    c0025779 <__addsf3+0x133>
c0025747:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c002574b:	75 1f                	jne    c002576c <__addsf3+0x126>
c002574d:	85 d2                	test   edx,edx
c002574f:	0f 84 e0 01 00 00    	je     c0025935 <__addsf3+0x2ef>
c0025755:	85 db                	test   ebx,ebx
c0025757:	0f 84 e2 01 00 00    	je     c002593f <__addsf3+0x2f9>
c002575d:	89 d0                	mov    eax,edx
c002575f:	01 d8                	add    eax,ebx
c0025761:	0f 89 a9 01 00 00    	jns    c0025910 <__addsf3+0x2ca>
c0025767:	e9 9d 01 00 00       	jmp    c0025909 <__addsf3+0x2c3>
c002576c:	85 d2                	test   edx,edx
c002576e:	0f 85 cb 01 00 00    	jne    c002593f <__addsf3+0x2f9>
c0025774:	e9 bc 01 00 00       	jmp    c0025935 <__addsf3+0x2ef>
c0025779:	31 c0                	xor    eax,eax
c002577b:	89 f1                	mov    ecx,esi
c002577d:	f7 d1                	not    ecx
c002577f:	84 c9                	test   cl,cl
c0025781:	0f 84 90 01 00 00    	je     c0025917 <__addsf3+0x2d1>
c0025787:	8d 04 1a             	lea    eax,[edx+ebx*1]
c002578a:	d1 e8                	shr    eax,1
c002578c:	e9 86 01 00 00       	jmp    c0025917 <__addsf3+0x2d1>
c0025791:	85 c0                	test   eax,eax
c0025793:	0f 89 7e 01 00 00    	jns    c0025917 <__addsf3+0x2d1>
c0025799:	46                   	inc    esi
c002579a:	89 f2                	mov    edx,esi
c002579c:	f7 d2                	not    edx
c002579e:	84 d2                	test   dl,dl
c00257a0:	0f 84 6f 01 00 00    	je     c0025915 <__addsf3+0x2cf>
c00257a6:	89 c2                	mov    edx,eax
c00257a8:	83 e2 01             	and    edx,0x1
c00257ab:	d1 e8                	shr    eax,1
c00257ad:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00257b2:	09 d0                	or     eax,edx
c00257b4:	e9 5e 01 00 00       	jmp    c0025917 <__addsf3+0x2d1>
c00257b9:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c00257bd:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00257c0:	89 f0                	mov    eax,esi
c00257c2:	0f b6 c0             	movzx  eax,al
c00257c5:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00257c8:	29 c1                	sub    ecx,eax
c00257ca:	85 c9                	test   ecx,ecx
c00257cc:	7e 55                	jle    c0025823 <__addsf3+0x1dd>
c00257ce:	85 c0                	test   eax,eax
c00257d0:	75 11                	jne    c00257e3 <__addsf3+0x19d>
c00257d2:	85 db                	test   ebx,ebx
c00257d4:	0f 84 65 01 00 00    	je     c002593f <__addsf3+0x2f9>
c00257da:	49                   	dec    ecx
c00257db:	75 19                	jne    c00257f6 <__addsf3+0x1b0>
c00257dd:	89 d0                	mov    eax,edx
c00257df:	29 d8                	sub    eax,ebx
c00257e1:	eb 38                	jmp    c002581b <__addsf3+0x1d5>
c00257e3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00257e6:	f7 d0                	not    eax
c00257e8:	84 c0                	test   al,al
c00257ea:	0f 84 4f 01 00 00    	je     c002593f <__addsf3+0x2f9>
c00257f0:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00257f6:	83 f9 1f             	cmp    ecx,0x1f
c00257f9:	0f 8f 40 01 00 00    	jg     c002593f <__addsf3+0x2f9>
c00257ff:	89 de                	mov    esi,ebx
c0025801:	d3 ee                	shr    esi,cl
c0025803:	b8 20 00 00 00       	mov    eax,0x20
c0025808:	29 c8                	sub    eax,ecx
c002580a:	89 c1                	mov    ecx,eax
c002580c:	d3 e3                	shl    ebx,cl
c002580e:	31 c0                	xor    eax,eax
c0025810:	85 db                	test   ebx,ebx
c0025812:	0f 95 c0             	setne  al
c0025815:	09 f0                	or     eax,esi
c0025817:	29 c2                	sub    edx,eax
c0025819:	89 d0                	mov    eax,edx
c002581b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002581e:	e9 af 00 00 00       	jmp    c00258d2 <__addsf3+0x28c>
c0025823:	74 5c                	je     c0025881 <__addsf3+0x23b>
c0025825:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0025828:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002582b:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c002582f:	75 14                	jne    c0025845 <__addsf3+0x1ff>
c0025831:	85 d2                	test   edx,edx
c0025833:	0f 84 06 01 00 00    	je     c002593f <__addsf3+0x2f9>
c0025839:	48                   	dec    eax
c002583a:	75 1b                	jne    c0025857 <__addsf3+0x211>
c002583c:	89 d8                	mov    eax,ebx
c002583e:	29 d0                	sub    eax,edx
c0025840:	e9 8d 00 00 00       	jmp    c00258d2 <__addsf3+0x28c>
c0025845:	89 f1                	mov    ecx,esi
c0025847:	f7 d1                	not    ecx
c0025849:	84 c9                	test   cl,cl
c002584b:	0f 84 ee 00 00 00    	je     c002593f <__addsf3+0x2f9>
c0025851:	81 ca 00 00 00 80    	or     edx,0x80000000
c0025857:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002585a:	83 f8 1f             	cmp    eax,0x1f
c002585d:	0f 8f dc 00 00 00    	jg     c002593f <__addsf3+0x2f9>
c0025863:	89 d7                	mov    edi,edx
c0025865:	88 c1                	mov    cl,al
c0025867:	d3 ef                	shr    edi,cl
c0025869:	b9 20 00 00 00       	mov    ecx,0x20
c002586e:	29 c1                	sub    ecx,eax
c0025870:	d3 e2                	shl    edx,cl
c0025872:	31 c0                	xor    eax,eax
c0025874:	85 d2                	test   edx,edx
c0025876:	0f 95 c0             	setne  al
c0025879:	09 f8                	or     eax,edi
c002587b:	29 c3                	sub    ebx,eax
c002587d:	89 d8                	mov    eax,ebx
c002587f:	eb 51                	jmp    c00258d2 <__addsf3+0x28c>
c0025881:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025884:	40                   	inc    eax
c0025885:	a8 fe                	test   al,0xfe
c0025887:	75 3d                	jne    c00258c6 <__addsf3+0x280>
c0025889:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c002588d:	0f 85 a7 00 00 00    	jne    c002593a <__addsf3+0x2f4>
c0025893:	85 d2                	test   edx,edx
c0025895:	75 12                	jne    c00258a9 <__addsf3+0x263>
c0025897:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002589a:	85 db                	test   ebx,ebx
c002589c:	0f 85 9d 00 00 00    	jne    c002593f <__addsf3+0x2f9>
c00258a2:	31 ff                	xor    edi,edi
c00258a4:	e9 96 00 00 00       	jmp    c002593f <__addsf3+0x2f9>
c00258a9:	85 db                	test   ebx,ebx
c00258ab:	0f 84 8e 00 00 00    	je     c002593f <__addsf3+0x2f9>
c00258b1:	89 d0                	mov    eax,edx
c00258b3:	29 d8                	sub    eax,ebx
c00258b5:	79 06                	jns    c00258bd <__addsf3+0x277>
c00258b7:	89 d8                	mov    eax,ebx
c00258b9:	29 d0                	sub    eax,edx
c00258bb:	eb 5a                	jmp    c0025917 <__addsf3+0x2d1>
c00258bd:	bf 00 00 00 00       	mov    edi,0x0
c00258c2:	74 7b                	je     c002593f <__addsf3+0x2f9>
c00258c4:	eb 4a                	jmp    c0025910 <__addsf3+0x2ca>
c00258c6:	89 d0                	mov    eax,edx
c00258c8:	29 d8                	sub    eax,ebx
c00258ca:	79 12                	jns    c00258de <__addsf3+0x298>
c00258cc:	89 d8                	mov    eax,ebx
c00258ce:	29 d0                	sub    eax,edx
c00258d0:	eb 09                	jmp    c00258db <__addsf3+0x295>
c00258d2:	85 c0                	test   eax,eax
c00258d4:	79 41                	jns    c0025917 <__addsf3+0x2d1>
c00258d6:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00258db:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c00258de:	31 f6                	xor    esi,esi
c00258e0:	85 c0                	test   eax,eax
c00258e2:	74 33                	je     c0025917 <__addsf3+0x2d1>
c00258e4:	0f bd c8             	bsr    ecx,eax
c00258e7:	83 f1 1f             	xor    ecx,0x1f
c00258ea:	d3 e0                	shl    eax,cl
c00258ec:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c00258f0:	39 ca                	cmp    edx,ecx
c00258f2:	7f 10                	jg     c0025904 <__addsf3+0x2be>
c00258f4:	29 d1                	sub    ecx,edx
c00258f6:	41                   	inc    ecx
c00258f7:	d3 e8                	shr    eax,cl
c00258f9:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00258fc:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0025902:	eb 13                	jmp    c0025917 <__addsf3+0x2d1>
c0025904:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0025907:	29 ce                	sub    esi,ecx
c0025909:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002590e:	eb 07                	jmp    c0025917 <__addsf3+0x2d1>
c0025910:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0025913:	eb 02                	jmp    c0025917 <__addsf3+0x2d1>
c0025915:	31 c0                	xor    eax,eax
c0025917:	89 c2                	mov    edx,eax
c0025919:	c1 ea 08             	shr    edx,0x8
c002591c:	a8 7f                	test   al,0x7f
c002591e:	0f 95 c1             	setne  cl
c0025921:	09 d1                	or     ecx,edx
c0025923:	83 e1 01             	and    ecx,0x1
c0025926:	c1 e8 07             	shr    eax,0x7
c0025929:	21 c8                	and    eax,ecx
c002592b:	c1 e6 17             	shl    esi,0x17
c002592e:	09 d6                	or     esi,edx
c0025930:	8d 3c 30             	lea    edi,[eax+esi*1]
c0025933:	eb 0a                	jmp    c002593f <__addsf3+0x2f9>
c0025935:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0025938:	eb 05                	jmp    c002593f <__addsf3+0x2f9>
c002593a:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c002593f:	89 f8                	mov    eax,edi
c0025941:	5a                   	pop    edx
c0025942:	59                   	pop    ecx
c0025943:	5b                   	pop    ebx
c0025944:	5e                   	pop    esi
c0025945:	5f                   	pop    edi
c0025946:	5d                   	pop    ebp
c0025947:	c3                   	ret    

c0025948 <__subsf3>:
c0025948:	55                   	push   ebp
c0025949:	89 e5                	mov    ebp,esp
c002594b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002594e:	05 00 00 00 80       	add    eax,0x80000000
c0025953:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025956:	5d                   	pop    ebp
c0025957:	e9 ea fc ff ff       	jmp    c0025646 <__addsf3>

c002595c <__negsf2>:
c002595c:	55                   	push   ebp
c002595d:	89 e5                	mov    ebp,esp
c002595f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025962:	05 00 00 00 80       	add    eax,0x80000000
c0025967:	5d                   	pop    ebp
c0025968:	c3                   	ret    

c0025969 <__mulsf3>:
c0025969:	55                   	push   ebp
c002596a:	89 e5                	mov    ebp,esp
c002596c:	57                   	push   edi
c002596d:	56                   	push   esi
c002596e:	53                   	push   ebx
c002596f:	83 ec 1c             	sub    esp,0x1c
c0025972:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0025975:	89 f0                	mov    eax,esi
c0025977:	89 f1                	mov    ecx,esi
c0025979:	c1 f9 17             	sar    ecx,0x17
c002597c:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c002597f:	c1 e0 08             	shl    eax,0x8
c0025982:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0025987:	89 c1                	mov    ecx,eax
c0025989:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002598c:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002598f:	89 c7                	mov    edi,eax
c0025991:	c1 ff 17             	sar    edi,0x17
c0025994:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025998:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002599b:	89 f8                	mov    eax,edi
c002599d:	0f b6 c0             	movzx  eax,al
c00259a0:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00259a3:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c00259a7:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00259aa:	42                   	inc    edx
c00259ab:	80 e2 fe             	and    dl,0xfe
c00259ae:	75 7b                	jne    c0025a2b <__mulsf3+0xc2>
c00259b0:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00259b4:	74 54                	je     c0025a0a <__mulsf3+0xa1>
c00259b6:	85 c9                	test   ecx,ecx
c00259b8:	0f 85 64 01 00 00    	jne    c0025b22 <__mulsf3+0x1b9>
c00259be:	8d 57 01             	lea    edx,[edi+0x1]
c00259c1:	80 e2 fe             	and    dl,0xfe
c00259c4:	75 1f                	jne    c00259e5 <__mulsf3+0x7c>
c00259c6:	85 c0                	test   eax,eax
c00259c8:	b8 00 00 00 00       	mov    eax,0x0
c00259cd:	74 29                	je     c00259f8 <__mulsf3+0x8f>
c00259cf:	53                   	push   ebx
c00259d0:	53                   	push   ebx
c00259d1:	50                   	push   eax
c00259d2:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00259d5:	e8 96 05 00 00       	call   c0025f70 <__nesf2>
c00259da:	83 c4 10             	add    esp,0x10
c00259dd:	85 c0                	test   eax,eax
c00259df:	0f 85 3a 01 00 00    	jne    c0025b1f <__mulsf3+0x1b6>
c00259e5:	85 ff                	test   edi,edi
c00259e7:	0f 89 35 01 00 00    	jns    c0025b22 <__mulsf3+0x1b9>
c00259ed:	81 c6 00 00 00 80    	add    esi,0x80000000
c00259f3:	e9 2a 01 00 00       	jmp    c0025b22 <__mulsf3+0x1b9>
c00259f8:	51                   	push   ecx
c00259f9:	51                   	push   ecx
c00259fa:	50                   	push   eax
c00259fb:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00259fe:	e8 6d 05 00 00       	call   c0025f70 <__nesf2>
c0025a03:	83 c4 10             	add    esp,0x10
c0025a06:	85 c0                	test   eax,eax
c0025a08:	eb 15                	jmp    c0025a1f <__mulsf3+0xb6>
c0025a0a:	85 c9                	test   ecx,ecx
c0025a0c:	74 0b                	je     c0025a19 <__mulsf3+0xb0>
c0025a0e:	8d 53 ff             	lea    edx,[ebx-0x1]
c0025a11:	01 c9                	add    ecx,ecx
c0025a13:	78 16                	js     c0025a2b <__mulsf3+0xc2>
c0025a15:	89 d3                	mov    ebx,edx
c0025a17:	eb f5                	jmp    c0025a0e <__mulsf3+0xa5>
c0025a19:	89 f8                	mov    eax,edi
c0025a1b:	f7 d0                	not    eax
c0025a1d:	84 c0                	test   al,al
c0025a1f:	75 c4                	jne    c00259e5 <__mulsf3+0x7c>
c0025a21:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0025a26:	e9 f7 00 00 00       	jmp    c0025b22 <__mulsf3+0x1b9>
c0025a2b:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0025a2e:	c1 e6 08             	shl    esi,0x8
c0025a31:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0025a37:	8d 57 01             	lea    edx,[edi+0x1]
c0025a3a:	80 e2 fe             	and    dl,0xfe
c0025a3d:	75 63                	jne    c0025aa2 <__mulsf3+0x139>
c0025a3f:	85 c0                	test   eax,eax
c0025a41:	74 2f                	je     c0025a72 <__mulsf3+0x109>
c0025a43:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0025a47:	0f 89 d2 00 00 00    	jns    c0025b1f <__mulsf3+0x1b6>
c0025a4d:	52                   	push   edx
c0025a4e:	52                   	push   edx
c0025a4f:	6a 00                	push   0x0
c0025a51:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025a54:	e8 dc 04 00 00       	call   c0025f35 <__eqsf2>
c0025a59:	83 c4 10             	add    esp,0x10
c0025a5c:	85 c0                	test   eax,eax
c0025a5e:	0f 85 bb 00 00 00    	jne    c0025b1f <__mulsf3+0x1b6>
c0025a64:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025a67:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0025a6d:	e9 b0 00 00 00       	jmp    c0025b22 <__mulsf3+0x1b9>
c0025a72:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0025a75:	50                   	push   eax
c0025a76:	50                   	push   eax
c0025a77:	6a 00                	push   0x0
c0025a79:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025a7c:	e8 b4 04 00 00       	call   c0025f35 <__eqsf2>
c0025a81:	83 c4 10             	add    esp,0x10
c0025a84:	85 c0                	test   eax,eax
c0025a86:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0025a89:	75 0c                	jne    c0025a97 <__mulsf3+0x12e>
c0025a8b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0025a8f:	0f 89 8a 00 00 00    	jns    c0025b1f <__mulsf3+0x1b6>
c0025a95:	eb cd                	jmp    c0025a64 <__mulsf3+0xfb>
c0025a97:	8d 43 ff             	lea    eax,[ebx-0x1]
c0025a9a:	01 f6                	add    esi,esi
c0025a9c:	78 04                	js     c0025aa2 <__mulsf3+0x139>
c0025a9e:	89 c3                	mov    ebx,eax
c0025aa0:	eb f5                	jmp    c0025a97 <__mulsf3+0x12e>
c0025aa2:	89 c8                	mov    eax,ecx
c0025aa4:	0d 00 00 00 80       	or     eax,0x80000000
c0025aa9:	81 ce 00 00 00 80    	or     esi,0x80000000
c0025aaf:	f7 e6                	mul    esi
c0025ab1:	85 c0                	test   eax,eax
c0025ab3:	0f 95 c0             	setne  al
c0025ab6:	0f b6 c0             	movzx  eax,al
c0025ab9:	09 c2                	or     edx,eax
c0025abb:	78 03                	js     c0025ac0 <__mulsf3+0x157>
c0025abd:	01 d2                	add    edx,edx
c0025abf:	4b                   	dec    ebx
c0025ac0:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0025ac6:	7f 22                	jg     c0025aea <__mulsf3+0x181>
c0025ac8:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0025ace:	85 db                	test   ebx,ebx
c0025ad0:	7f 23                	jg     c0025af5 <__mulsf3+0x18c>
c0025ad2:	83 fb e9             	cmp    ebx,0xffffffe9
c0025ad5:	7c 1a                	jl     c0025af1 <__mulsf3+0x188>
c0025ad7:	81 ca 00 00 00 80    	or     edx,0x80000000
c0025add:	b9 01 00 00 00       	mov    ecx,0x1
c0025ae2:	29 d9                	sub    ecx,ebx
c0025ae4:	d3 ea                	shr    edx,cl
c0025ae6:	31 db                	xor    ebx,ebx
c0025ae8:	eb 0b                	jmp    c0025af5 <__mulsf3+0x18c>
c0025aea:	bb ff 00 00 00       	mov    ebx,0xff
c0025aef:	eb 02                	jmp    c0025af3 <__mulsf3+0x18a>
c0025af1:	31 db                	xor    ebx,ebx
c0025af3:	31 d2                	xor    edx,edx
c0025af5:	89 d0                	mov    eax,edx
c0025af7:	c1 e8 08             	shr    eax,0x8
c0025afa:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0025afd:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0025b03:	09 fb                	or     ebx,edi
c0025b05:	c1 e3 17             	shl    ebx,0x17
c0025b08:	09 c3                	or     ebx,eax
c0025b0a:	f6 c2 7f             	test   dl,0x7f
c0025b0d:	0f 95 c1             	setne  cl
c0025b10:	09 c8                	or     eax,ecx
c0025b12:	83 e0 01             	and    eax,0x1
c0025b15:	c1 ea 07             	shr    edx,0x7
c0025b18:	21 c2                	and    edx,eax
c0025b1a:	8d 34 13             	lea    esi,[ebx+edx*1]
c0025b1d:	eb 03                	jmp    c0025b22 <__mulsf3+0x1b9>
c0025b1f:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0025b22:	89 f0                	mov    eax,esi
c0025b24:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025b27:	5b                   	pop    ebx
c0025b28:	5e                   	pop    esi
c0025b29:	5f                   	pop    edi
c0025b2a:	5d                   	pop    ebp
c0025b2b:	c3                   	ret    

c0025b2c <__divsf3>:
c0025b2c:	55                   	push   ebp
c0025b2d:	89 e5                	mov    ebp,esp
c0025b2f:	57                   	push   edi
c0025b30:	56                   	push   esi
c0025b31:	53                   	push   ebx
c0025b32:	83 ec 1c             	sub    esp,0x1c
c0025b35:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0025b38:	89 d8                	mov    eax,ebx
c0025b3a:	89 d9                	mov    ecx,ebx
c0025b3c:	c1 f9 17             	sar    ecx,0x17
c0025b3f:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0025b42:	c1 e0 08             	shl    eax,0x8
c0025b45:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0025b4a:	89 c1                	mov    ecx,eax
c0025b4c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b4f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025b52:	89 c7                	mov    edi,eax
c0025b54:	c1 ff 17             	sar    edi,0x17
c0025b57:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025b5b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0025b5e:	89 f8                	mov    eax,edi
c0025b60:	0f b6 c0             	movzx  eax,al
c0025b63:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0025b66:	29 c6                	sub    esi,eax
c0025b68:	83 c6 7f             	add    esi,0x7f
c0025b6b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0025b6e:	42                   	inc    edx
c0025b6f:	80 e2 fe             	and    dl,0xfe
c0025b72:	0f 85 9c 00 00 00    	jne    c0025c14 <__divsf3+0xe8>
c0025b78:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0025b7c:	74 33                	je     c0025bb1 <__divsf3+0x85>
c0025b7e:	85 c9                	test   ecx,ecx
c0025b80:	0f 85 c7 01 00 00    	jne    c0025d4d <__divsf3+0x221>
c0025b86:	8d 57 01             	lea    edx,[edi+0x1]
c0025b89:	80 e2 fe             	and    dl,0xfe
c0025b8c:	75 2f                	jne    c0025bbd <__divsf3+0x91>
c0025b8e:	85 c0                	test   eax,eax
c0025b90:	74 2b                	je     c0025bbd <__divsf3+0x91>
c0025b92:	51                   	push   ecx
c0025b93:	51                   	push   ecx
c0025b94:	6a 00                	push   0x0
c0025b96:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025b99:	e8 d2 03 00 00       	call   c0025f70 <__nesf2>
c0025b9e:	83 c4 10             	add    esp,0x10
c0025ba1:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0025ba4:	85 c0                	test   eax,eax
c0025ba6:	0f 85 a1 01 00 00    	jne    c0025d4d <__divsf3+0x221>
c0025bac:	e9 92 01 00 00       	jmp    c0025d43 <__divsf3+0x217>
c0025bb1:	85 c9                	test   ecx,ecx
c0025bb3:	75 1b                	jne    c0025bd0 <__divsf3+0xa4>
c0025bb5:	8d 57 01             	lea    edx,[edi+0x1]
c0025bb8:	80 e2 fe             	and    dl,0xfe
c0025bbb:	74 1e                	je     c0025bdb <__divsf3+0xaf>
c0025bbd:	85 ff                	test   edi,edi
c0025bbf:	0f 89 88 01 00 00    	jns    c0025d4d <__divsf3+0x221>
c0025bc5:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0025bcb:	e9 7d 01 00 00       	jmp    c0025d4d <__divsf3+0x221>
c0025bd0:	8d 56 ff             	lea    edx,[esi-0x1]
c0025bd3:	01 c9                	add    ecx,ecx
c0025bd5:	78 3d                	js     c0025c14 <__divsf3+0xe8>
c0025bd7:	89 d6                	mov    esi,edx
c0025bd9:	eb f5                	jmp    c0025bd0 <__divsf3+0xa4>
c0025bdb:	85 c0                	test   eax,eax
c0025bdd:	b8 00 00 00 00       	mov    eax,0x0
c0025be2:	74 18                	je     c0025bfc <__divsf3+0xd0>
c0025be4:	52                   	push   edx
c0025be5:	52                   	push   edx
c0025be6:	50                   	push   eax
c0025be7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025bea:	e8 81 03 00 00       	call   c0025f70 <__nesf2>
c0025bef:	83 c4 10             	add    esp,0x10
c0025bf2:	85 c0                	test   eax,eax
c0025bf4:	0f 85 50 01 00 00    	jne    c0025d4a <__divsf3+0x21e>
c0025bfa:	eb c1                	jmp    c0025bbd <__divsf3+0x91>
c0025bfc:	56                   	push   esi
c0025bfd:	56                   	push   esi
c0025bfe:	50                   	push   eax
c0025bff:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025c02:	e8 69 03 00 00       	call   c0025f70 <__nesf2>
c0025c07:	83 c4 10             	add    esp,0x10
c0025c0a:	85 c0                	test   eax,eax
c0025c0c:	0f 84 31 01 00 00    	je     c0025d43 <__divsf3+0x217>
c0025c12:	eb a9                	jmp    c0025bbd <__divsf3+0x91>
c0025c14:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0025c17:	c1 e3 08             	shl    ebx,0x8
c0025c1a:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0025c20:	8d 57 01             	lea    edx,[edi+0x1]
c0025c23:	80 e2 fe             	and    dl,0xfe
c0025c26:	75 71                	jne    c0025c99 <__divsf3+0x16d>
c0025c28:	85 c0                	test   eax,eax
c0025c2a:	ba 00 00 00 00       	mov    edx,0x0
c0025c2f:	74 2f                	je     c0025c60 <__divsf3+0x134>
c0025c31:	51                   	push   ecx
c0025c32:	51                   	push   ecx
c0025c33:	52                   	push   edx
c0025c34:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025c37:	e8 f9 02 00 00       	call   c0025f35 <__eqsf2>
c0025c3c:	83 c4 10             	add    esp,0x10
c0025c3f:	85 c0                	test   eax,eax
c0025c41:	0f 85 03 01 00 00    	jne    c0025d4a <__divsf3+0x21e>
c0025c47:	31 d2                	xor    edx,edx
c0025c49:	89 d3                	mov    ebx,edx
c0025c4b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025c4e:	31 f8                	xor    eax,edi
c0025c50:	0f 89 f7 00 00 00    	jns    c0025d4d <__divsf3+0x221>
c0025c56:	bb 00 00 00 80       	mov    ebx,0x80000000
c0025c5b:	e9 ed 00 00 00       	jmp    c0025d4d <__divsf3+0x221>
c0025c60:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0025c63:	50                   	push   eax
c0025c64:	50                   	push   eax
c0025c65:	52                   	push   edx
c0025c66:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025c69:	e8 c7 02 00 00       	call   c0025f35 <__eqsf2>
c0025c6e:	83 c4 10             	add    esp,0x10
c0025c71:	85 c0                	test   eax,eax
c0025c73:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0025c76:	75 16                	jne    c0025c8e <__divsf3+0x162>
c0025c78:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0025c7b:	31 fb                	xor    ebx,edi
c0025c7d:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0025c83:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0025c89:	e9 bf 00 00 00       	jmp    c0025d4d <__divsf3+0x221>
c0025c8e:	8d 46 01             	lea    eax,[esi+0x1]
c0025c91:	01 db                	add    ebx,ebx
c0025c93:	78 04                	js     c0025c99 <__divsf3+0x16d>
c0025c95:	89 c6                	mov    esi,eax
c0025c97:	eb f5                	jmp    c0025c8e <__divsf3+0x162>
c0025c99:	89 c8                	mov    eax,ecx
c0025c9b:	0d 00 00 00 80       	or     eax,0x80000000
c0025ca0:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0025ca6:	31 d2                	xor    edx,edx
c0025ca8:	39 d8                	cmp    eax,ebx
c0025caa:	72 07                	jb     c0025cb3 <__divsf3+0x187>
c0025cac:	29 d8                	sub    eax,ebx
c0025cae:	ba 01 00 00 00       	mov    edx,0x1
c0025cb3:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0025cba:	01 d2                	add    edx,edx
c0025cbc:	89 c1                	mov    ecx,eax
c0025cbe:	01 c0                	add    eax,eax
c0025cc0:	85 c9                	test   ecx,ecx
c0025cc2:	78 04                	js     c0025cc8 <__divsf3+0x19c>
c0025cc4:	39 c3                	cmp    ebx,eax
c0025cc6:	77 05                	ja     c0025ccd <__divsf3+0x1a1>
c0025cc8:	29 d8                	sub    eax,ebx
c0025cca:	83 ca 01             	or     edx,0x1
c0025ccd:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0025cd0:	75 e8                	jne    c0025cba <__divsf3+0x18e>
c0025cd2:	85 c0                	test   eax,eax
c0025cd4:	0f 95 c0             	setne  al
c0025cd7:	0f b6 c0             	movzx  eax,al
c0025cda:	c1 e2 06             	shl    edx,0x6
c0025cdd:	09 c2                	or     edx,eax
c0025cdf:	78 03                	js     c0025ce4 <__divsf3+0x1b8>
c0025ce1:	01 d2                	add    edx,edx
c0025ce3:	4e                   	dec    esi
c0025ce4:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0025cea:	7f 22                	jg     c0025d0e <__divsf3+0x1e2>
c0025cec:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0025cf2:	85 f6                	test   esi,esi
c0025cf4:	7f 23                	jg     c0025d19 <__divsf3+0x1ed>
c0025cf6:	83 fe e9             	cmp    esi,0xffffffe9
c0025cf9:	7c 1a                	jl     c0025d15 <__divsf3+0x1e9>
c0025cfb:	81 ca 00 00 00 80    	or     edx,0x80000000
c0025d01:	b9 01 00 00 00       	mov    ecx,0x1
c0025d06:	29 f1                	sub    ecx,esi
c0025d08:	d3 ea                	shr    edx,cl
c0025d0a:	31 f6                	xor    esi,esi
c0025d0c:	eb 0b                	jmp    c0025d19 <__divsf3+0x1ed>
c0025d0e:	be ff 00 00 00       	mov    esi,0xff
c0025d13:	eb 02                	jmp    c0025d17 <__divsf3+0x1eb>
c0025d15:	31 f6                	xor    esi,esi
c0025d17:	31 d2                	xor    edx,edx
c0025d19:	89 d0                	mov    eax,edx
c0025d1b:	c1 e8 08             	shr    eax,0x8
c0025d1e:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0025d21:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0025d27:	09 fe                	or     esi,edi
c0025d29:	c1 e6 17             	shl    esi,0x17
c0025d2c:	09 c6                	or     esi,eax
c0025d2e:	f6 c2 7f             	test   dl,0x7f
c0025d31:	0f 95 c1             	setne  cl
c0025d34:	09 c8                	or     eax,ecx
c0025d36:	83 e0 01             	and    eax,0x1
c0025d39:	c1 ea 07             	shr    edx,0x7
c0025d3c:	21 c2                	and    edx,eax
c0025d3e:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0025d41:	eb 0a                	jmp    c0025d4d <__divsf3+0x221>
c0025d43:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0025d48:	eb 03                	jmp    c0025d4d <__divsf3+0x221>
c0025d4a:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0025d4d:	89 d8                	mov    eax,ebx
c0025d4f:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025d52:	5b                   	pop    ebx
c0025d53:	5e                   	pop    esi
c0025d54:	5f                   	pop    edi
c0025d55:	5d                   	pop    ebp
c0025d56:	c3                   	ret    

c0025d57 <__floatsisf>:
c0025d57:	55                   	push   ebp
c0025d58:	89 e5                	mov    ebp,esp
c0025d5a:	53                   	push   ebx
c0025d5b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0025d5e:	85 d2                	test   edx,edx
c0025d60:	7e 2b                	jle    c0025d8d <__floatsisf+0x36>
c0025d62:	0f bd ca             	bsr    ecx,edx
c0025d65:	83 f1 1f             	xor    ecx,0x1f
c0025d68:	d3 e2                	shl    edx,cl
c0025d6a:	89 d0                	mov    eax,edx
c0025d6c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0025d71:	89 c3                	mov    ebx,eax
c0025d73:	c1 eb 08             	shr    ebx,0x8
c0025d76:	80 e2 7f             	and    dl,0x7f
c0025d79:	0f 95 c2             	setne  dl
c0025d7c:	09 da                	or     edx,ebx
c0025d7e:	83 e2 01             	and    edx,0x1
c0025d81:	c1 e8 07             	shr    eax,0x7
c0025d84:	21 c2                	and    edx,eax
c0025d86:	b8 9e 00 00 00       	mov    eax,0x9e
c0025d8b:	eb 32                	jmp    c0025dbf <__floatsisf+0x68>
c0025d8d:	b8 00 00 00 00       	mov    eax,0x0
c0025d92:	74 34                	je     c0025dc8 <__floatsisf+0x71>
c0025d94:	f7 da                	neg    edx
c0025d96:	0f bd ca             	bsr    ecx,edx
c0025d99:	83 f1 1f             	xor    ecx,0x1f
c0025d9c:	d3 e2                	shl    edx,cl
c0025d9e:	89 d0                	mov    eax,edx
c0025da0:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0025da5:	89 c3                	mov    ebx,eax
c0025da7:	c1 eb 08             	shr    ebx,0x8
c0025daa:	80 e2 7f             	and    dl,0x7f
c0025dad:	0f 95 c2             	setne  dl
c0025db0:	09 da                	or     edx,ebx
c0025db2:	83 e2 01             	and    edx,0x1
c0025db5:	c1 e8 07             	shr    eax,0x7
c0025db8:	21 c2                	and    edx,eax
c0025dba:	b8 9e 01 00 00       	mov    eax,0x19e
c0025dbf:	29 c8                	sub    eax,ecx
c0025dc1:	c1 e0 17             	shl    eax,0x17
c0025dc4:	09 d8                	or     eax,ebx
c0025dc6:	01 d0                	add    eax,edx
c0025dc8:	5b                   	pop    ebx
c0025dc9:	5d                   	pop    ebp
c0025dca:	c3                   	ret    

c0025dcb <__floatunsisf>:
c0025dcb:	55                   	push   ebp
c0025dcc:	89 e5                	mov    ebp,esp
c0025dce:	53                   	push   ebx
c0025dcf:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0025dd2:	31 c0                	xor    eax,eax
c0025dd4:	85 d2                	test   edx,edx
c0025dd6:	74 32                	je     c0025e0a <__floatunsisf+0x3f>
c0025dd8:	0f bd ca             	bsr    ecx,edx
c0025ddb:	83 f1 1f             	xor    ecx,0x1f
c0025dde:	d3 e2                	shl    edx,cl
c0025de0:	89 d0                	mov    eax,edx
c0025de2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0025de7:	89 c3                	mov    ebx,eax
c0025de9:	c1 eb 08             	shr    ebx,0x8
c0025dec:	80 e2 7f             	and    dl,0x7f
c0025def:	0f 95 c2             	setne  dl
c0025df2:	09 da                	or     edx,ebx
c0025df4:	83 e2 01             	and    edx,0x1
c0025df7:	c1 e8 07             	shr    eax,0x7
c0025dfa:	21 c2                	and    edx,eax
c0025dfc:	b8 9e 00 00 00       	mov    eax,0x9e
c0025e01:	29 c8                	sub    eax,ecx
c0025e03:	c1 e0 17             	shl    eax,0x17
c0025e06:	09 d8                	or     eax,ebx
c0025e08:	01 d0                	add    eax,edx
c0025e0a:	5b                   	pop    ebx
c0025e0b:	5d                   	pop    ebp
c0025e0c:	c3                   	ret    

c0025e0d <__fixsfsi>:
c0025e0d:	55                   	push   ebp
c0025e0e:	89 e5                	mov    ebp,esp
c0025e10:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0025e13:	89 d1                	mov    ecx,edx
c0025e15:	c1 e1 08             	shl    ecx,0x8
c0025e18:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0025e1e:	c1 fa 17             	sar    edx,0x17
c0025e21:	78 1c                	js     c0025e3f <__fixsfsi+0x32>
c0025e23:	83 ea 7f             	sub    edx,0x7f
c0025e26:	31 c0                	xor    eax,eax
c0025e28:	83 fa 1e             	cmp    edx,0x1e
c0025e2b:	77 40                	ja     c0025e6d <__fixsfsi+0x60>
c0025e2d:	89 c8                	mov    eax,ecx
c0025e2f:	0d 00 00 00 80       	or     eax,0x80000000
c0025e34:	b9 1f 00 00 00       	mov    ecx,0x1f
c0025e39:	29 d1                	sub    ecx,edx
c0025e3b:	d3 e8                	shr    eax,cl
c0025e3d:	eb 2e                	jmp    c0025e6d <__fixsfsi+0x60>
c0025e3f:	31 c0                	xor    eax,eax
c0025e41:	81 c2 81 00 00 00    	add    edx,0x81
c0025e47:	78 24                	js     c0025e6d <__fixsfsi+0x60>
c0025e49:	83 fa 1e             	cmp    edx,0x1e
c0025e4c:	7e 09                	jle    c0025e57 <__fixsfsi+0x4a>
c0025e4e:	83 fa 1f             	cmp    edx,0x1f
c0025e51:	75 18                	jne    c0025e6b <__fixsfsi+0x5e>
c0025e53:	85 c9                	test   ecx,ecx
c0025e55:	75 14                	jne    c0025e6b <__fixsfsi+0x5e>
c0025e57:	89 c8                	mov    eax,ecx
c0025e59:	0d 00 00 00 80       	or     eax,0x80000000
c0025e5e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0025e63:	29 d1                	sub    ecx,edx
c0025e65:	d3 e8                	shr    eax,cl
c0025e67:	f7 d8                	neg    eax
c0025e69:	eb 02                	jmp    c0025e6d <__fixsfsi+0x60>
c0025e6b:	31 c0                	xor    eax,eax
c0025e6d:	5d                   	pop    ebp
c0025e6e:	c3                   	ret    

c0025e6f <__fixunssfsi>:
c0025e6f:	55                   	push   ebp
c0025e70:	89 e5                	mov    ebp,esp
c0025e72:	53                   	push   ebx
c0025e73:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0025e76:	89 d3                	mov    ebx,edx
c0025e78:	c1 fb 17             	sar    ebx,0x17
c0025e7b:	83 eb 7f             	sub    ebx,0x7f
c0025e7e:	31 c0                	xor    eax,eax
c0025e80:	83 fb 1f             	cmp    ebx,0x1f
c0025e83:	77 18                	ja     c0025e9d <__fixunssfsi+0x2e>
c0025e85:	89 d0                	mov    eax,edx
c0025e87:	c1 e0 08             	shl    eax,0x8
c0025e8a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0025e8f:	0d 00 00 00 80       	or     eax,0x80000000
c0025e94:	b9 1f 00 00 00       	mov    ecx,0x1f
c0025e99:	29 d9                	sub    ecx,ebx
c0025e9b:	d3 e8                	shr    eax,cl
c0025e9d:	5b                   	pop    ebx
c0025e9e:	5d                   	pop    ebp
c0025e9f:	c3                   	ret    

c0025ea0 <__cmpsf2>:
c0025ea0:	55                   	push   ebp
c0025ea1:	89 e5                	mov    ebp,esp
c0025ea3:	57                   	push   edi
c0025ea4:	56                   	push   esi
c0025ea5:	53                   	push   ebx
c0025ea6:	83 ec 24             	sub    esp,0x24
c0025ea9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025eac:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025eaf:	e8 4f 10 00 00       	call   c0026f03 <__truncdfsf2>
c0025eb4:	5a                   	pop    edx
c0025eb5:	59                   	pop    ecx
c0025eb6:	89 c3                	mov    ebx,eax
c0025eb8:	c1 e8 17             	shr    eax,0x17
c0025ebb:	0f b6 f0             	movzx  esi,al
c0025ebe:	89 d8                	mov    eax,ebx
c0025ec0:	c1 e8 1f             	shr    eax,0x1f
c0025ec3:	31 c6                	xor    esi,eax
c0025ec5:	c1 e3 08             	shl    ebx,0x8
c0025ec8:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0025ecb:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0025ece:	e8 30 10 00 00       	call   c0026f03 <__truncdfsf2>
c0025ed3:	83 c4 10             	add    esp,0x10
c0025ed6:	89 c1                	mov    ecx,eax
c0025ed8:	c1 e9 17             	shr    ecx,0x17
c0025edb:	0f b6 c9             	movzx  ecx,cl
c0025ede:	89 c7                	mov    edi,eax
c0025ee0:	c1 ef 1f             	shr    edi,0x1f
c0025ee3:	89 ca                	mov    edx,ecx
c0025ee5:	31 fa                	xor    edx,edi
c0025ee7:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0025eea:	c1 e0 08             	shl    eax,0x8
c0025eed:	89 c2                	mov    edx,eax
c0025eef:	89 d8                	mov    eax,ebx
c0025ef1:	09 d0                	or     eax,edx
c0025ef3:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0025ef8:	09 f0                	or     eax,esi
c0025efa:	75 08                	jne    c0025f04 <__cmpsf2+0x64>
c0025efc:	31 c0                	xor    eax,eax
c0025efe:	39 f9                	cmp    ecx,edi
c0025f00:	75 0c                	jne    c0025f0e <__cmpsf2+0x6e>
c0025f02:	eb 29                	jmp    c0025f2d <__cmpsf2+0x8d>
c0025f04:	b8 01 00 00 00       	mov    eax,0x1
c0025f09:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0025f0c:	7f 1f                	jg     c0025f2d <__cmpsf2+0x8d>
c0025f0e:	83 c8 ff             	or     eax,0xffffffff
c0025f11:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0025f14:	7c 17                	jl     c0025f2d <__cmpsf2+0x8d>
c0025f16:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0025f1c:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0025f22:	b8 01 00 00 00       	mov    eax,0x1
c0025f27:	39 d3                	cmp    ebx,edx
c0025f29:	77 02                	ja     c0025f2d <__cmpsf2+0x8d>
c0025f2b:	19 c0                	sbb    eax,eax
c0025f2d:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025f30:	5b                   	pop    ebx
c0025f31:	5e                   	pop    esi
c0025f32:	5f                   	pop    edi
c0025f33:	5d                   	pop    ebp
c0025f34:	c3                   	ret    

c0025f35 <__eqsf2>:
c0025f35:	55                   	push   ebp
c0025f36:	89 e5                	mov    ebp,esp
c0025f38:	83 ec 24             	sub    esp,0x24
c0025f3b:	6a 01                	push   0x1
c0025f3d:	83 ec 0c             	sub    esp,0xc
c0025f40:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025f43:	e8 df 10 00 00       	call   c0027027 <__extendsfdf2>
c0025f48:	83 c4 10             	add    esp,0x10
c0025f4b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025f4e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025f51:	52                   	push   edx
c0025f52:	50                   	push   eax
c0025f53:	50                   	push   eax
c0025f54:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f57:	e8 cb 10 00 00       	call   c0027027 <__extendsfdf2>
c0025f5c:	59                   	pop    ecx
c0025f5d:	59                   	pop    ecx
c0025f5e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025f61:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025f64:	52                   	push   edx
c0025f65:	50                   	push   eax
c0025f66:	e8 35 ff ff ff       	call   c0025ea0 <__cmpsf2>
c0025f6b:	83 c4 20             	add    esp,0x20
c0025f6e:	c9                   	leave  
c0025f6f:	c3                   	ret    

c0025f70 <__nesf2>:
c0025f70:	eb c3                	jmp    c0025f35 <__eqsf2>

c0025f72 <__gtsf2>:
c0025f72:	55                   	push   ebp
c0025f73:	89 e5                	mov    ebp,esp
c0025f75:	83 ec 24             	sub    esp,0x24
c0025f78:	6a ff                	push   0xffffffff
c0025f7a:	83 ec 0c             	sub    esp,0xc
c0025f7d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025f80:	e8 a2 10 00 00       	call   c0027027 <__extendsfdf2>
c0025f85:	83 c4 10             	add    esp,0x10
c0025f88:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025f8b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025f8e:	52                   	push   edx
c0025f8f:	50                   	push   eax
c0025f90:	50                   	push   eax
c0025f91:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f94:	e8 8e 10 00 00       	call   c0027027 <__extendsfdf2>
c0025f99:	59                   	pop    ecx
c0025f9a:	59                   	pop    ecx
c0025f9b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025f9e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025fa1:	52                   	push   edx
c0025fa2:	50                   	push   eax
c0025fa3:	e8 f8 fe ff ff       	call   c0025ea0 <__cmpsf2>
c0025fa8:	83 c4 20             	add    esp,0x20
c0025fab:	c9                   	leave  
c0025fac:	c3                   	ret    

c0025fad <__gesf2>:
c0025fad:	eb c3                	jmp    c0025f72 <__gtsf2>

c0025faf <__ltsf2>:
c0025faf:	eb 84                	jmp    c0025f35 <__eqsf2>

c0025fb1 <__lesf2>:
c0025fb1:	eb 82                	jmp    c0025f35 <__eqsf2>

c0025fb3 <__adddf3>:
c0025fb3:	55                   	push   ebp
c0025fb4:	89 e5                	mov    ebp,esp
c0025fb6:	57                   	push   edi
c0025fb7:	56                   	push   esi
c0025fb8:	53                   	push   ebx
c0025fb9:	83 ec 24             	sub    esp,0x24
c0025fbc:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0025fbf:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025fc2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025fc5:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025fc8:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025fcb:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025fce:	89 c8                	mov    eax,ecx
c0025fd0:	89 ce                	mov    esi,ecx
c0025fd2:	c1 fe 14             	sar    esi,0x14
c0025fd5:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0025fd8:	89 fb                	mov    ebx,edi
c0025fda:	89 fa                	mov    edx,edi
c0025fdc:	c1 e2 0b             	shl    edx,0xb
c0025fdf:	c1 e0 0b             	shl    eax,0xb
c0025fe2:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0025fe7:	c1 eb 15             	shr    ebx,0x15
c0025fea:	09 d8                	or     eax,ebx
c0025fec:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0025fef:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0025ff2:	c1 fe 14             	sar    esi,0x14
c0025ff5:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0025ff8:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0025ffb:	89 f3                	mov    ebx,esi
c0025ffd:	c1 e3 0b             	shl    ebx,0xb
c0026000:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0026003:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0026006:	c1 e3 0b             	shl    ebx,0xb
c0026009:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c002600f:	c1 ee 15             	shr    esi,0x15
c0026012:	09 f3                	or     ebx,esi
c0026014:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0026017:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002601a:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c002601d:	0f 88 5f 02 00 00    	js     c0026282 <__adddf3+0x2cf>
c0026023:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0026026:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0026029:	85 db                	test   ebx,ebx
c002602b:	0f 8e c7 00 00 00    	jle    c00260f8 <__adddf3+0x145>
c0026031:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0026038:	75 1a                	jne    c0026054 <__adddf3+0xa1>
c002603a:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002603d:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0026040:	0f 84 b2 05 00 00    	je     c00265f8 <__adddf3+0x645>
c0026046:	4b                   	dec    ebx
c0026047:	75 23                	jne    c002606c <__adddf3+0xb9>
c0026049:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002604c:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c002604f:	e9 99 00 00 00       	jmp    c00260ed <__adddf3+0x13a>
c0026054:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0026057:	f7 d6                	not    esi
c0026059:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002605f:	0f 84 93 05 00 00    	je     c00265f8 <__adddf3+0x645>
c0026065:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c002606c:	83 fb 1f             	cmp    ebx,0x1f
c002606f:	7e 42                	jle    c00260b3 <__adddf3+0x100>
c0026071:	83 fb 3f             	cmp    ebx,0x3f
c0026074:	0f 8f 7e 05 00 00    	jg     c00265f8 <__adddf3+0x645>
c002607a:	83 e3 1f             	and    ebx,0x1f
c002607d:	89 d9                	mov    ecx,ebx
c002607f:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0026082:	d3 ef                	shr    edi,cl
c0026084:	31 db                	xor    ebx,ebx
c0026086:	85 c9                	test   ecx,ecx
c0026088:	74 15                	je     c002609f <__adddf3+0xec>
c002608a:	be 20 00 00 00       	mov    esi,0x20
c002608f:	29 ce                	sub    esi,ecx
c0026091:	89 f1                	mov    ecx,esi
c0026093:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026096:	d3 e6                	shl    esi,cl
c0026098:	31 db                	xor    ebx,ebx
c002609a:	85 f6                	test   esi,esi
c002609c:	0f 95 c3             	setne  bl
c002609f:	31 c9                	xor    ecx,ecx
c00260a1:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00260a5:	0f 95 c1             	setne  cl
c00260a8:	09 cf                	or     edi,ecx
c00260aa:	09 fb                	or     ebx,edi
c00260ac:	01 da                	add    edx,ebx
c00260ae:	83 d0 00             	adc    eax,0x0
c00260b1:	eb 3a                	jmp    c00260ed <__adddf3+0x13a>
c00260b3:	bf 20 00 00 00       	mov    edi,0x20
c00260b8:	29 df                	sub    edi,ebx
c00260ba:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00260bd:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00260c0:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00260c3:	d3 e6                	shl    esi,cl
c00260c5:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00260c8:	88 d9                	mov    cl,bl
c00260ca:	d3 ef                	shr    edi,cl
c00260cc:	09 fe                	or     esi,edi
c00260ce:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00260d1:	88 d9                	mov    cl,bl
c00260d3:	d3 ef                	shr    edi,cl
c00260d5:	89 fb                	mov    ebx,edi
c00260d7:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00260da:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00260dd:	d3 e7                	shl    edi,cl
c00260df:	85 ff                	test   edi,edi
c00260e1:	0f 95 c1             	setne  cl
c00260e4:	0f b6 c9             	movzx  ecx,cl
c00260e7:	09 ce                	or     esi,ecx
c00260e9:	01 f2                	add    edx,esi
c00260eb:	11 d8                	adc    eax,ebx
c00260ed:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00260f0:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00260f3:	e9 52 01 00 00       	jmp    c002624a <__adddf3+0x297>
c00260f8:	0f 84 d5 00 00 00    	je     c00261d3 <__adddf3+0x220>
c00260fe:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0026101:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0026104:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0026107:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002610a:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0026111:	75 20                	jne    c0026133 <__adddf3+0x180>
c0026113:	89 d6                	mov    esi,edx
c0026115:	09 c6                	or     esi,eax
c0026117:	0f 84 db 04 00 00    	je     c00265f8 <__adddf3+0x645>
c002611d:	4b                   	dec    ebx
c002611e:	75 29                	jne    c0026149 <__adddf3+0x196>
c0026120:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026123:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026126:	01 d1                	add    ecx,edx
c0026128:	11 c6                	adc    esi,eax
c002612a:	89 f0                	mov    eax,esi
c002612c:	89 ca                	mov    edx,ecx
c002612e:	e9 17 01 00 00       	jmp    c002624a <__adddf3+0x297>
c0026133:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0026136:	f7 d6                	not    esi
c0026138:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002613e:	0f 84 b4 04 00 00    	je     c00265f8 <__adddf3+0x645>
c0026144:	0d 00 00 00 80       	or     eax,0x80000000
c0026149:	83 fb 1f             	cmp    ebx,0x1f
c002614c:	7e 48                	jle    c0026196 <__adddf3+0x1e3>
c002614e:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0026151:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0026154:	83 fb 3f             	cmp    ebx,0x3f
c0026157:	0f 8f 9b 04 00 00    	jg     c00265f8 <__adddf3+0x645>
c002615d:	83 e3 1f             	and    ebx,0x1f
c0026160:	89 d9                	mov    ecx,ebx
c0026162:	89 c7                	mov    edi,eax
c0026164:	d3 ef                	shr    edi,cl
c0026166:	31 db                	xor    ebx,ebx
c0026168:	85 c9                	test   ecx,ecx
c002616a:	74 12                	je     c002617e <__adddf3+0x1cb>
c002616c:	be 20 00 00 00       	mov    esi,0x20
c0026171:	29 ce                	sub    esi,ecx
c0026173:	89 f1                	mov    ecx,esi
c0026175:	d3 e0                	shl    eax,cl
c0026177:	31 db                	xor    ebx,ebx
c0026179:	85 c0                	test   eax,eax
c002617b:	0f 95 c3             	setne  bl
c002617e:	31 c0                	xor    eax,eax
c0026180:	85 d2                	test   edx,edx
c0026182:	0f 95 c0             	setne  al
c0026185:	09 c7                	or     edi,eax
c0026187:	09 fb                	or     ebx,edi
c0026189:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002618c:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002618f:	01 da                	add    edx,ebx
c0026191:	83 d6 00             	adc    esi,0x0
c0026194:	eb 39                	jmp    c00261cf <__adddf3+0x21c>
c0026196:	be 20 00 00 00       	mov    esi,0x20
c002619b:	29 de                	sub    esi,ebx
c002619d:	89 c7                	mov    edi,eax
c002619f:	89 f1                	mov    ecx,esi
c00261a1:	d3 e7                	shl    edi,cl
c00261a3:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00261a6:	89 d7                	mov    edi,edx
c00261a8:	88 d9                	mov    cl,bl
c00261aa:	d3 ef                	shr    edi,cl
c00261ac:	89 f9                	mov    ecx,edi
c00261ae:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00261b1:	09 cf                	or     edi,ecx
c00261b3:	88 d9                	mov    cl,bl
c00261b5:	d3 e8                	shr    eax,cl
c00261b7:	89 f1                	mov    ecx,esi
c00261b9:	d3 e2                	shl    edx,cl
c00261bb:	85 d2                	test   edx,edx
c00261bd:	0f 95 c2             	setne  dl
c00261c0:	0f b6 d2             	movzx  edx,dl
c00261c3:	09 d7                	or     edi,edx
c00261c5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00261c8:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00261cb:	01 fa                	add    edx,edi
c00261cd:	11 c6                	adc    esi,eax
c00261cf:	89 f0                	mov    eax,esi
c00261d1:	eb 77                	jmp    c002624a <__adddf3+0x297>
c00261d3:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00261d6:	46                   	inc    esi
c00261d7:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00261da:	81 e6 fe 07 00 00    	and    esi,0x7fe
c00261e0:	75 41                	jne    c0026223 <__adddf3+0x270>
c00261e2:	89 d3                	mov    ebx,edx
c00261e4:	09 c3                	or     ebx,eax
c00261e6:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00261ed:	75 27                	jne    c0026216 <__adddf3+0x263>
c00261ef:	85 db                	test   ebx,ebx
c00261f1:	0f 84 fb 03 00 00    	je     c00265f2 <__adddf3+0x63f>
c00261f7:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00261fa:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00261fd:	0f 84 f5 03 00 00    	je     c00265f8 <__adddf3+0x645>
c0026203:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0026206:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0026209:	85 c0                	test   eax,eax
c002620b:	0f 89 91 03 00 00    	jns    c00265a2 <__adddf3+0x5ef>
c0026211:	e9 85 03 00 00       	jmp    c002659b <__adddf3+0x5e8>
c0026216:	85 db                	test   ebx,ebx
c0026218:	0f 85 da 03 00 00    	jne    c00265f8 <__adddf3+0x645>
c002621e:	e9 cf 03 00 00       	jmp    c00265f2 <__adddf3+0x63f>
c0026223:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0026226:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0026229:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002622c:	f7 d1                	not    ecx
c002622e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0026234:	0f 84 70 03 00 00    	je     c00265aa <__adddf3+0x5f7>
c002623a:	d1 ea                	shr    edx,1
c002623c:	89 c1                	mov    ecx,eax
c002623e:	c1 e1 1f             	shl    ecx,0x1f
c0026241:	09 ca                	or     edx,ecx
c0026243:	d1 e8                	shr    eax,1
c0026245:	e9 6f 03 00 00       	jmp    c00265b9 <__adddf3+0x606>
c002624a:	85 c0                	test   eax,eax
c002624c:	0f 89 67 03 00 00    	jns    c00265b9 <__adddf3+0x606>
c0026252:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c0026255:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026258:	f7 d1                	not    ecx
c002625a:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0026260:	0f 84 44 03 00 00    	je     c00265aa <__adddf3+0x5f7>
c0026266:	89 d1                	mov    ecx,edx
c0026268:	d1 e9                	shr    ecx,1
c002626a:	83 e2 01             	and    edx,0x1
c002626d:	09 ca                	or     edx,ecx
c002626f:	89 c1                	mov    ecx,eax
c0026271:	c1 e1 1f             	shl    ecx,0x1f
c0026274:	09 ca                	or     edx,ecx
c0026276:	d1 e8                	shr    eax,1
c0026278:	25 ff ff ff 3f       	and    eax,0x3fffffff
c002627d:	e9 37 03 00 00       	jmp    c00265b9 <__adddf3+0x606>
c0026282:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0026285:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002628b:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c002628e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0026291:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0026297:	29 de                	sub    esi,ebx
c0026299:	85 f6                	test   esi,esi
c002629b:	0f 8e bd 00 00 00    	jle    c002635e <__adddf3+0x3ab>
c00262a1:	85 db                	test   ebx,ebx
c00262a3:	75 17                	jne    c00262bc <__adddf3+0x309>
c00262a5:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00262a8:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00262ab:	0f 84 47 03 00 00    	je     c00265f8 <__adddf3+0x645>
c00262b1:	4e                   	dec    esi
c00262b2:	75 20                	jne    c00262d4 <__adddf3+0x321>
c00262b4:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00262b7:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00262ba:	eb 5b                	jmp    c0026317 <__adddf3+0x364>
c00262bc:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00262bf:	f7 d3                	not    ebx
c00262c1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00262c7:	0f 84 2b 03 00 00    	je     c00265f8 <__adddf3+0x645>
c00262cd:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00262d4:	83 fe 1f             	cmp    esi,0x1f
c00262d7:	7e 49                	jle    c0026322 <__adddf3+0x36f>
c00262d9:	83 fe 3f             	cmp    esi,0x3f
c00262dc:	0f 8f 16 03 00 00    	jg     c00265f8 <__adddf3+0x645>
c00262e2:	83 e6 1f             	and    esi,0x1f
c00262e5:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00262e8:	89 f1                	mov    ecx,esi
c00262ea:	d3 ef                	shr    edi,cl
c00262ec:	31 db                	xor    ebx,ebx
c00262ee:	85 f6                	test   esi,esi
c00262f0:	74 13                	je     c0026305 <__adddf3+0x352>
c00262f2:	b9 20 00 00 00       	mov    ecx,0x20
c00262f7:	29 f1                	sub    ecx,esi
c00262f9:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00262fc:	d3 e6                	shl    esi,cl
c00262fe:	31 db                	xor    ebx,ebx
c0026300:	85 f6                	test   esi,esi
c0026302:	0f 95 c3             	setne  bl
c0026305:	31 c9                	xor    ecx,ecx
c0026307:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002630b:	0f 95 c1             	setne  cl
c002630e:	09 cf                	or     edi,ecx
c0026310:	09 fb                	or     ebx,edi
c0026312:	29 da                	sub    edx,ebx
c0026314:	83 d8 00             	sbb    eax,0x0
c0026317:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002631a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002631d:	e9 aa 01 00 00       	jmp    c00264cc <__adddf3+0x519>
c0026322:	bf 20 00 00 00       	mov    edi,0x20
c0026327:	29 f7                	sub    edi,esi
c0026329:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002632c:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002632f:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0026332:	d3 e3                	shl    ebx,cl
c0026334:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0026337:	89 f1                	mov    ecx,esi
c0026339:	d3 ef                	shr    edi,cl
c002633b:	09 fb                	or     ebx,edi
c002633d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0026340:	89 f1                	mov    ecx,esi
c0026342:	d3 ef                	shr    edi,cl
c0026344:	89 fe                	mov    esi,edi
c0026346:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0026349:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002634c:	d3 e7                	shl    edi,cl
c002634e:	85 ff                	test   edi,edi
c0026350:	0f 95 c1             	setne  cl
c0026353:	0f b6 c9             	movzx  ecx,cl
c0026356:	09 cb                	or     ebx,ecx
c0026358:	29 da                	sub    edx,ebx
c002635a:	19 f0                	sbb    eax,esi
c002635c:	eb b9                	jmp    c0026317 <__adddf3+0x364>
c002635e:	0f 84 cd 00 00 00    	je     c0026431 <__adddf3+0x47e>
c0026364:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c0026367:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002636a:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002636d:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0026371:	75 1b                	jne    c002638e <__adddf3+0x3db>
c0026373:	89 d6                	mov    esi,edx
c0026375:	09 c6                	or     esi,eax
c0026377:	0f 84 7b 02 00 00    	je     c00265f8 <__adddf3+0x645>
c002637d:	4b                   	dec    ebx
c002637e:	75 24                	jne    c00263a4 <__adddf3+0x3f1>
c0026380:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026383:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026386:	29 d1                	sub    ecx,edx
c0026388:	19 c6                	sbb    esi,eax
c002638a:	89 ca                	mov    edx,ecx
c002638c:	eb 61                	jmp    c00263ef <__adddf3+0x43c>
c002638e:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0026391:	f7 d6                	not    esi
c0026393:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0026399:	0f 84 59 02 00 00    	je     c00265f8 <__adddf3+0x645>
c002639f:	0d 00 00 00 80       	or     eax,0x80000000
c00263a4:	83 fb 1f             	cmp    ebx,0x1f
c00263a7:	7e 4d                	jle    c00263f6 <__adddf3+0x443>
c00263a9:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00263ac:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00263af:	83 fb 3f             	cmp    ebx,0x3f
c00263b2:	0f 8f 40 02 00 00    	jg     c00265f8 <__adddf3+0x645>
c00263b8:	83 e3 1f             	and    ebx,0x1f
c00263bb:	89 d9                	mov    ecx,ebx
c00263bd:	89 c7                	mov    edi,eax
c00263bf:	d3 ef                	shr    edi,cl
c00263c1:	31 db                	xor    ebx,ebx
c00263c3:	85 c9                	test   ecx,ecx
c00263c5:	74 12                	je     c00263d9 <__adddf3+0x426>
c00263c7:	be 20 00 00 00       	mov    esi,0x20
c00263cc:	29 ce                	sub    esi,ecx
c00263ce:	89 f1                	mov    ecx,esi
c00263d0:	d3 e0                	shl    eax,cl
c00263d2:	31 db                	xor    ebx,ebx
c00263d4:	85 c0                	test   eax,eax
c00263d6:	0f 95 c3             	setne  bl
c00263d9:	31 c0                	xor    eax,eax
c00263db:	85 d2                	test   edx,edx
c00263dd:	0f 95 c0             	setne  al
c00263e0:	09 c7                	or     edi,eax
c00263e2:	09 fb                	or     ebx,edi
c00263e4:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00263e7:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00263ea:	29 da                	sub    edx,ebx
c00263ec:	83 de 00             	sbb    esi,0x0
c00263ef:	89 f0                	mov    eax,esi
c00263f1:	e9 d6 00 00 00       	jmp    c00264cc <__adddf3+0x519>
c00263f6:	be 20 00 00 00       	mov    esi,0x20
c00263fb:	29 de                	sub    esi,ebx
c00263fd:	89 c7                	mov    edi,eax
c00263ff:	89 f1                	mov    ecx,esi
c0026401:	d3 e7                	shl    edi,cl
c0026403:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0026406:	89 d7                	mov    edi,edx
c0026408:	88 d9                	mov    cl,bl
c002640a:	d3 ef                	shr    edi,cl
c002640c:	89 f9                	mov    ecx,edi
c002640e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026411:	09 cf                	or     edi,ecx
c0026413:	88 d9                	mov    cl,bl
c0026415:	d3 e8                	shr    eax,cl
c0026417:	89 f1                	mov    ecx,esi
c0026419:	d3 e2                	shl    edx,cl
c002641b:	85 d2                	test   edx,edx
c002641d:	0f 95 c2             	setne  dl
c0026420:	0f b6 d2             	movzx  edx,dl
c0026423:	09 d7                	or     edi,edx
c0026425:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026428:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002642b:	29 fa                	sub    edx,edi
c002642d:	19 c6                	sbb    esi,eax
c002642f:	eb be                	jmp    c00263ef <__adddf3+0x43c>
c0026431:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0026434:	8d 5e 01             	lea    ebx,[esi+0x1]
c0026437:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c002643d:	75 6a                	jne    c00264a9 <__adddf3+0x4f6>
c002643f:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0026443:	75 58                	jne    c002649d <__adddf3+0x4ea>
c0026445:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026448:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002644b:	89 d6                	mov    esi,edx
c002644d:	09 c6                	or     esi,eax
c002644f:	75 17                	jne    c0026468 <__adddf3+0x4b5>
c0026451:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0026454:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0026457:	85 db                	test   ebx,ebx
c0026459:	0f 85 99 01 00 00    	jne    c00265f8 <__adddf3+0x645>
c002645f:	31 ff                	xor    edi,edi
c0026461:	31 c9                	xor    ecx,ecx
c0026463:	e9 90 01 00 00       	jmp    c00265f8 <__adddf3+0x645>
c0026468:	85 db                	test   ebx,ebx
c002646a:	0f 84 88 01 00 00    	je     c00265f8 <__adddf3+0x645>
c0026470:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0026473:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0026476:	85 c0                	test   eax,eax
c0026478:	79 10                	jns    c002648a <__adddf3+0x4d7>
c002647a:	31 c9                	xor    ecx,ecx
c002647c:	f7 da                	neg    edx
c002647e:	0f 95 c1             	setne  cl
c0026481:	01 c8                	add    eax,ecx
c0026483:	f7 d8                	neg    eax
c0026485:	e9 2f 01 00 00       	jmp    c00265b9 <__adddf3+0x606>
c002648a:	31 ff                	xor    edi,edi
c002648c:	31 c9                	xor    ecx,ecx
c002648e:	89 c3                	mov    ebx,eax
c0026490:	09 d3                	or     ebx,edx
c0026492:	0f 84 60 01 00 00    	je     c00265f8 <__adddf3+0x645>
c0026498:	e9 05 01 00 00       	jmp    c00265a2 <__adddf3+0x5ef>
c002649d:	31 ff                	xor    edi,edi
c002649f:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c00264a4:	e9 4f 01 00 00       	jmp    c00265f8 <__adddf3+0x645>
c00264a9:	89 c1                	mov    ecx,eax
c00264ab:	89 d0                	mov    eax,edx
c00264ad:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c00264b0:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c00264b3:	89 ca                	mov    edx,ecx
c00264b5:	85 c9                	test   ecx,ecx
c00264b7:	79 2c                	jns    c00264e5 <__adddf3+0x532>
c00264b9:	31 c9                	xor    ecx,ecx
c00264bb:	f7 d8                	neg    eax
c00264bd:	0f 95 c1             	setne  cl
c00264c0:	01 ca                	add    edx,ecx
c00264c2:	f7 da                	neg    edx
c00264c4:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00264c7:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00264ca:	eb 19                	jmp    c00264e5 <__adddf3+0x532>
c00264cc:	85 c0                	test   eax,eax
c00264ce:	0f 89 e5 00 00 00    	jns    c00265b9 <__adddf3+0x606>
c00264d4:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00264d9:	89 c1                	mov    ecx,eax
c00264db:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00264de:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00264e1:	89 d0                	mov    eax,edx
c00264e3:	89 ca                	mov    edx,ecx
c00264e5:	85 d2                	test   edx,edx
c00264e7:	74 59                	je     c0026542 <__adddf3+0x58f>
c00264e9:	0f bd da             	bsr    ebx,edx
c00264ec:	83 f3 1f             	xor    ebx,0x1f
c00264ef:	88 d9                	mov    cl,bl
c00264f1:	d3 e2                	shl    edx,cl
c00264f3:	bf 20 00 00 00       	mov    edi,0x20
c00264f8:	89 f9                	mov    ecx,edi
c00264fa:	29 d9                	sub    ecx,ebx
c00264fc:	89 c6                	mov    esi,eax
c00264fe:	d3 ee                	shr    esi,cl
c0026500:	09 d6                	or     esi,edx
c0026502:	88 d9                	mov    cl,bl
c0026504:	d3 e0                	shl    eax,cl
c0026506:	89 c2                	mov    edx,eax
c0026508:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002650b:	25 ff 07 00 00       	and    eax,0x7ff
c0026510:	39 d8                	cmp    eax,ebx
c0026512:	7f 22                	jg     c0026536 <__adddf3+0x583>
c0026514:	29 c3                	sub    ebx,eax
c0026516:	43                   	inc    ebx
c0026517:	88 d9                	mov    cl,bl
c0026519:	d3 ea                	shr    edx,cl
c002651b:	29 df                	sub    edi,ebx
c002651d:	89 f9                	mov    ecx,edi
c002651f:	89 f0                	mov    eax,esi
c0026521:	d3 e0                	shl    eax,cl
c0026523:	09 c2                	or     edx,eax
c0026525:	89 f0                	mov    eax,esi
c0026527:	88 d9                	mov    cl,bl
c0026529:	d3 e8                	shr    eax,cl
c002652b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002652e:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0026534:	eb 6f                	jmp    c00265a5 <__adddf3+0x5f2>
c0026536:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026539:	29 d8                	sub    eax,ebx
c002653b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002653e:	89 f0                	mov    eax,esi
c0026540:	eb 59                	jmp    c002659b <__adddf3+0x5e8>
c0026542:	85 c0                	test   eax,eax
c0026544:	74 6a                	je     c00265b0 <__adddf3+0x5fd>
c0026546:	0f bd c8             	bsr    ecx,eax
c0026549:	83 f1 1f             	xor    ecx,0x1f
c002654c:	d3 e0                	shl    eax,cl
c002654e:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0026551:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0026557:	83 c1 20             	add    ecx,0x20
c002655a:	39 cb                	cmp    ebx,ecx
c002655c:	7f 35                	jg     c0026593 <__adddf3+0x5e0>
c002655e:	29 d9                	sub    ecx,ebx
c0026560:	8d 71 01             	lea    esi,[ecx+0x1]
c0026563:	83 fe 1f             	cmp    esi,0x1f
c0026566:	7e 09                	jle    c0026571 <__adddf3+0x5be>
c0026568:	83 e9 1f             	sub    ecx,0x1f
c002656b:	d3 e8                	shr    eax,cl
c002656d:	89 c3                	mov    ebx,eax
c002656f:	eb 11                	jmp    c0026582 <__adddf3+0x5cf>
c0026571:	b9 20 00 00 00       	mov    ecx,0x20
c0026576:	29 f1                	sub    ecx,esi
c0026578:	89 c3                	mov    ebx,eax
c002657a:	d3 e3                	shl    ebx,cl
c002657c:	89 f1                	mov    ecx,esi
c002657e:	d3 e8                	shr    eax,cl
c0026580:	89 c2                	mov    edx,eax
c0026582:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026585:	25 00 f8 ff ff       	and    eax,0xfffff800
c002658a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002658d:	89 d0                	mov    eax,edx
c002658f:	89 da                	mov    edx,ebx
c0026591:	eb 26                	jmp    c00265b9 <__adddf3+0x606>
c0026593:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026596:	29 cf                	sub    edi,ecx
c0026598:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002659b:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00265a0:	eb 17                	jmp    c00265b9 <__adddf3+0x606>
c00265a2:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00265a5:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00265a8:	eb 0f                	jmp    c00265b9 <__adddf3+0x606>
c00265aa:	31 d2                	xor    edx,edx
c00265ac:	31 c0                	xor    eax,eax
c00265ae:	eb 09                	jmp    c00265b9 <__adddf3+0x606>
c00265b0:	89 c2                	mov    edx,eax
c00265b2:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c00265b9:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00265bc:	c1 e1 14             	shl    ecx,0x14
c00265bf:	89 c3                	mov    ebx,eax
c00265c1:	c1 eb 0b             	shr    ebx,0xb
c00265c4:	09 d9                	or     ecx,ebx
c00265c6:	89 d3                	mov    ebx,edx
c00265c8:	c1 eb 0b             	shr    ebx,0xb
c00265cb:	c1 e0 15             	shl    eax,0x15
c00265ce:	09 d8                	or     eax,ebx
c00265d0:	89 c7                	mov    edi,eax
c00265d2:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c00265d8:	0f 95 c0             	setne  al
c00265db:	89 c6                	mov    esi,eax
c00265dd:	09 f3                	or     ebx,esi
c00265df:	83 e3 01             	and    ebx,0x1
c00265e2:	c1 ea 0a             	shr    edx,0xa
c00265e5:	21 da                	and    edx,ebx
c00265e7:	89 f8                	mov    eax,edi
c00265e9:	01 d0                	add    eax,edx
c00265eb:	83 d1 00             	adc    ecx,0x0
c00265ee:	89 c7                	mov    edi,eax
c00265f0:	eb 06                	jmp    c00265f8 <__adddf3+0x645>
c00265f2:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00265f5:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00265f8:	89 f8                	mov    eax,edi
c00265fa:	89 ca                	mov    edx,ecx
c00265fc:	83 c4 24             	add    esp,0x24
c00265ff:	5b                   	pop    ebx
c0026600:	5e                   	pop    esi
c0026601:	5f                   	pop    edi
c0026602:	5d                   	pop    ebp
c0026603:	c3                   	ret    

c0026604 <__subdf3>:
c0026604:	55                   	push   ebp
c0026605:	89 e5                	mov    ebp,esp
c0026607:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002660a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c002660d:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0026613:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0026616:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0026619:	5d                   	pop    ebp
c002661a:	e9 94 f9 ff ff       	jmp    c0025fb3 <__adddf3>

c002661f <__negdf2>:
c002661f:	55                   	push   ebp
c0026620:	89 e5                	mov    ebp,esp
c0026622:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026625:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0026628:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002662e:	5d                   	pop    ebp
c002662f:	c3                   	ret    

c0026630 <__muldf3>:
c0026630:	55                   	push   ebp
c0026631:	89 e5                	mov    ebp,esp
c0026633:	57                   	push   edi
c0026634:	56                   	push   esi
c0026635:	53                   	push   ebx
c0026636:	83 ec 24             	sub    esp,0x24
c0026639:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002663c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002663f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026642:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0026645:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0026648:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c002664b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002664e:	89 c8                	mov    eax,ecx
c0026650:	c1 f8 14             	sar    eax,0x14
c0026653:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026656:	89 f8                	mov    eax,edi
c0026658:	89 fb                	mov    ebx,edi
c002665a:	c1 e3 0b             	shl    ebx,0xb
c002665d:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0026660:	c1 e1 0b             	shl    ecx,0xb
c0026663:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0026669:	c1 e8 15             	shr    eax,0x15
c002666c:	09 c1                	or     ecx,eax
c002666e:	89 d6                	mov    esi,edx
c0026670:	89 d0                	mov    eax,edx
c0026672:	c1 f8 14             	sar    eax,0x14
c0026675:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0026678:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002667b:	89 c3                	mov    ebx,eax
c002667d:	c1 e3 0b             	shl    ebx,0xb
c0026680:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0026683:	c1 e6 0b             	shl    esi,0xb
c0026686:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c002668c:	c1 e8 15             	shr    eax,0x15
c002668f:	09 c6                	or     esi,eax
c0026691:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0026694:	25 ff 07 00 00       	and    eax,0x7ff
c0026699:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002669c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002669f:	25 ff 07 00 00       	and    eax,0x7ff
c00266a4:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c00266a7:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00266aa:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c00266ad:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c00266b4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00266b7:	40                   	inc    eax
c00266b8:	a9 fe 07 00 00       	test   eax,0x7fe
c00266bd:	0f 85 8d 00 00 00    	jne    c0026750 <__muldf3+0x120>
c00266c3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00266c6:	09 c8                	or     eax,ecx
c00266c8:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c00266cc:	74 44                	je     c0026712 <__muldf3+0xe2>
c00266ce:	85 c0                	test   eax,eax
c00266d0:	0f 85 31 02 00 00    	jne    c0026907 <__muldf3+0x2d7>
c00266d6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00266d9:	40                   	inc    eax
c00266da:	a9 fe 07 00 00       	test   eax,0x7fe
c00266df:	75 13                	jne    c00266f4 <__muldf3+0xc4>
c00266e1:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00266e4:	09 f1                	or     ecx,esi
c00266e6:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00266ea:	74 22                	je     c002670e <__muldf3+0xde>
c00266ec:	85 c9                	test   ecx,ecx
c00266ee:	0f 85 0d 02 00 00    	jne    c0026901 <__muldf3+0x2d1>
c00266f4:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c00266f8:	0f 89 09 02 00 00    	jns    c0026907 <__muldf3+0x2d7>
c00266fe:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0026701:	05 00 00 00 80       	add    eax,0x80000000
c0026706:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026709:	e9 f9 01 00 00       	jmp    c0026907 <__muldf3+0x2d7>
c002670e:	85 c9                	test   ecx,ecx
c0026710:	eb 2e                	jmp    c0026740 <__muldf3+0x110>
c0026712:	85 c0                	test   eax,eax
c0026714:	74 20                	je     c0026736 <__muldf3+0x106>
c0026716:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0026719:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002671c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002671f:	c1 ef 1f             	shr    edi,0x1f
c0026722:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0026725:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0026728:	8d 43 ff             	lea    eax,[ebx-0x1]
c002672b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002672e:	09 f9                	or     ecx,edi
c0026730:	78 1e                	js     c0026750 <__muldf3+0x120>
c0026732:	89 c3                	mov    ebx,eax
c0026734:	eb e0                	jmp    c0026716 <__muldf3+0xe6>
c0026736:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0026739:	f7 d0                	not    eax
c002673b:	a9 ff 07 00 00       	test   eax,0x7ff
c0026740:	75 b2                	jne    c00266f4 <__muldf3+0xc4>
c0026742:	31 ff                	xor    edi,edi
c0026744:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c002674b:	e9 b7 01 00 00       	jmp    c0026907 <__muldf3+0x2d7>
c0026750:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0026753:	40                   	inc    eax
c0026754:	a9 fe 07 00 00       	test   eax,0x7fe
c0026759:	75 57                	jne    c00267b2 <__muldf3+0x182>
c002675b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002675e:	09 f0                	or     eax,esi
c0026760:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0026764:	74 23                	je     c0026789 <__muldf3+0x159>
c0026766:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c002676a:	0f 89 91 01 00 00    	jns    c0026901 <__muldf3+0x2d1>
c0026770:	85 c0                	test   eax,eax
c0026772:	0f 85 89 01 00 00    	jne    c0026901 <__muldf3+0x2d1>
c0026778:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c002677b:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0026781:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026784:	e9 7e 01 00 00       	jmp    c0026907 <__muldf3+0x2d7>
c0026789:	85 c0                	test   eax,eax
c002678b:	75 0c                	jne    c0026799 <__muldf3+0x169>
c002678d:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0026791:	0f 89 6a 01 00 00    	jns    c0026901 <__muldf3+0x2d1>
c0026797:	eb df                	jmp    c0026778 <__muldf3+0x148>
c0026799:	01 f6                	add    esi,esi
c002679b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002679e:	c1 ea 1f             	shr    edx,0x1f
c00267a1:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00267a4:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c00267a7:	8d 43 ff             	lea    eax,[ebx-0x1]
c00267aa:	09 d6                	or     esi,edx
c00267ac:	78 04                	js     c00267b2 <__muldf3+0x182>
c00267ae:	89 c3                	mov    ebx,eax
c00267b0:	eb e7                	jmp    c0026799 <__muldf3+0x169>
c00267b2:	81 c9 00 00 00 80    	or     ecx,0x80000000
c00267b8:	81 ce 00 00 00 80    	or     esi,0x80000000
c00267be:	89 c8                	mov    eax,ecx
c00267c0:	f7 e6                	mul    esi
c00267c2:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c00267c5:	89 c7                	mov    edi,eax
c00267c7:	89 c8                	mov    eax,ecx
c00267c9:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c00267cc:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00267cf:	89 c1                	mov    ecx,eax
c00267d1:	89 f0                	mov    eax,esi
c00267d3:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c00267d6:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c00267d9:	89 c6                	mov    esi,eax
c00267db:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00267de:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c00267e1:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00267e4:	31 c0                	xor    eax,eax
c00267e6:	01 f1                	add    ecx,esi
c00267e8:	0f 92 c0             	setb   al
c00267eb:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c00267ee:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c00267f1:	83 d6 00             	adc    esi,0x0
c00267f4:	01 c7                	add    edi,eax
c00267f6:	83 d6 00             	adc    esi,0x0
c00267f9:	01 ca                	add    edx,ecx
c00267fb:	0f 92 c1             	setb   cl
c00267fe:	0f b6 c9             	movzx  ecx,cl
c0026801:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0026804:	83 d6 00             	adc    esi,0x0
c0026807:	01 cf                	add    edi,ecx
c0026809:	83 d6 00             	adc    esi,0x0
c002680c:	31 c9                	xor    ecx,ecx
c002680e:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0026811:	0f 95 c1             	setne  cl
c0026814:	09 cf                	or     edi,ecx
c0026816:	85 f6                	test   esi,esi
c0026818:	78 0c                	js     c0026826 <__muldf3+0x1f6>
c002681a:	01 f6                	add    esi,esi
c002681c:	89 f8                	mov    eax,edi
c002681e:	c1 e8 1f             	shr    eax,0x1f
c0026821:	09 c6                	or     esi,eax
c0026823:	01 ff                	add    edi,edi
c0026825:	4b                   	dec    ebx
c0026826:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c002682c:	0f 8f 85 00 00 00    	jg     c00268b7 <__muldf3+0x287>
c0026832:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0026838:	85 db                	test   ebx,ebx
c002683a:	0f 8f 84 00 00 00    	jg     c00268c4 <__muldf3+0x294>
c0026840:	83 fb cc             	cmp    ebx,0xffffffcc
c0026843:	7c 79                	jl     c00268be <__muldf3+0x28e>
c0026845:	ba 01 00 00 00       	mov    edx,0x1
c002684a:	29 da                	sub    edx,ebx
c002684c:	81 ce 00 00 00 80    	or     esi,0x80000000
c0026852:	83 fa 1f             	cmp    edx,0x1f
c0026855:	7e 30                	jle    c0026887 <__muldf3+0x257>
c0026857:	83 fa 20             	cmp    edx,0x20
c002685a:	75 0b                	jne    c0026867 <__muldf3+0x237>
c002685c:	31 c0                	xor    eax,eax
c002685e:	85 ff                	test   edi,edi
c0026860:	0f 95 c0             	setne  al
c0026863:	89 c7                	mov    edi,eax
c0026865:	eb 1a                	jmp    c0026881 <__muldf3+0x251>
c0026867:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c002686a:	89 f0                	mov    eax,esi
c002686c:	d3 e0                	shl    eax,cl
c002686e:	09 f8                	or     eax,edi
c0026870:	0f 95 c0             	setne  al
c0026873:	0f b6 c0             	movzx  eax,al
c0026876:	89 c7                	mov    edi,eax
c0026878:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c002687d:	29 d9                	sub    ecx,ebx
c002687f:	d3 ee                	shr    esi,cl
c0026881:	09 f7                	or     edi,esi
c0026883:	31 db                	xor    ebx,ebx
c0026885:	eb 3b                	jmp    c00268c2 <__muldf3+0x292>
c0026887:	83 c3 1f             	add    ebx,0x1f
c002688a:	89 f0                	mov    eax,esi
c002688c:	88 d9                	mov    cl,bl
c002688e:	d3 e0                	shl    eax,cl
c0026890:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026893:	89 f8                	mov    eax,edi
c0026895:	88 d1                	mov    cl,dl
c0026897:	d3 e8                	shr    eax,cl
c0026899:	89 c1                	mov    ecx,eax
c002689b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002689e:	09 c8                	or     eax,ecx
c00268a0:	88 d9                	mov    cl,bl
c00268a2:	d3 e7                	shl    edi,cl
c00268a4:	31 db                	xor    ebx,ebx
c00268a6:	85 ff                	test   edi,edi
c00268a8:	0f 95 c3             	setne  bl
c00268ab:	89 df                	mov    edi,ebx
c00268ad:	09 c7                	or     edi,eax
c00268af:	88 d1                	mov    cl,dl
c00268b1:	d3 ee                	shr    esi,cl
c00268b3:	31 db                	xor    ebx,ebx
c00268b5:	eb 0d                	jmp    c00268c4 <__muldf3+0x294>
c00268b7:	bb ff 07 00 00       	mov    ebx,0x7ff
c00268bc:	eb 02                	jmp    c00268c0 <__muldf3+0x290>
c00268be:	31 db                	xor    ebx,ebx
c00268c0:	31 ff                	xor    edi,edi
c00268c2:	31 f6                	xor    esi,esi
c00268c4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00268c7:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c00268ca:	25 00 f8 ff ff       	and    eax,0xfffff800
c00268cf:	09 c3                	or     ebx,eax
c00268d1:	c1 e3 14             	shl    ebx,0x14
c00268d4:	89 f0                	mov    eax,esi
c00268d6:	c1 e8 0b             	shr    eax,0xb
c00268d9:	09 c3                	or     ebx,eax
c00268db:	89 f8                	mov    eax,edi
c00268dd:	c1 e8 0b             	shr    eax,0xb
c00268e0:	c1 e6 15             	shl    esi,0x15
c00268e3:	09 c6                	or     esi,eax
c00268e5:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c00268eb:	0f 95 c1             	setne  cl
c00268ee:	09 c8                	or     eax,ecx
c00268f0:	83 e0 01             	and    eax,0x1
c00268f3:	c1 ef 0a             	shr    edi,0xa
c00268f6:	21 c7                	and    edi,eax
c00268f8:	01 f7                	add    edi,esi
c00268fa:	83 d3 00             	adc    ebx,0x0
c00268fd:	89 da                	mov    edx,ebx
c00268ff:	eb 03                	jmp    c0026904 <__muldf3+0x2d4>
c0026901:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0026904:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0026907:	89 f8                	mov    eax,edi
c0026909:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002690c:	83 c4 24             	add    esp,0x24
c002690f:	5b                   	pop    ebx
c0026910:	5e                   	pop    esi
c0026911:	5f                   	pop    edi
c0026912:	5d                   	pop    ebp
c0026913:	c3                   	ret    

c0026914 <__divdf3>:
c0026914:	55                   	push   ebp
c0026915:	89 e5                	mov    ebp,esp
c0026917:	57                   	push   edi
c0026918:	56                   	push   esi
c0026919:	53                   	push   ebx
c002691a:	83 ec 2c             	sub    esp,0x2c
c002691d:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026920:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0026923:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0026926:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0026929:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002692c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002692f:	89 ce                	mov    esi,ecx
c0026931:	89 c8                	mov    eax,ecx
c0026933:	c1 f8 14             	sar    eax,0x14
c0026936:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026939:	89 f8                	mov    eax,edi
c002693b:	89 fb                	mov    ebx,edi
c002693d:	c1 e3 0b             	shl    ebx,0xb
c0026940:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0026943:	c1 e6 0b             	shl    esi,0xb
c0026946:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c002694c:	c1 e8 15             	shr    eax,0x15
c002694f:	09 c6                	or     esi,eax
c0026951:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0026954:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0026957:	89 c2                	mov    edx,eax
c0026959:	c1 fa 14             	sar    edx,0x14
c002695c:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c002695f:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0026962:	89 de                	mov    esi,ebx
c0026964:	c1 e6 0b             	shl    esi,0xb
c0026967:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c002696a:	c1 e0 0b             	shl    eax,0xb
c002696d:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0026972:	c1 eb 15             	shr    ebx,0x15
c0026975:	09 d8                	or     eax,ebx
c0026977:	89 c2                	mov    edx,eax
c0026979:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002697c:	25 ff 07 00 00       	and    eax,0x7ff
c0026981:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0026984:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0026987:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002698d:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0026990:	29 d8                	sub    eax,ebx
c0026992:	05 ff 03 00 00       	add    eax,0x3ff
c0026997:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002699a:	46                   	inc    esi
c002699b:	81 e6 fe 07 00 00    	and    esi,0x7fe
c00269a1:	0f 85 a5 00 00 00    	jne    c0026a4c <__divdf3+0x138>
c00269a7:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00269aa:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c00269ad:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c00269b1:	74 2a                	je     c00269dd <__divdf3+0xc9>
c00269b3:	85 f6                	test   esi,esi
c00269b5:	0f 85 cc 02 00 00    	jne    c0026c87 <__divdf3+0x373>
c00269bb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00269be:	40                   	inc    eax
c00269bf:	a9 fe 07 00 00       	test   eax,0x7fe
c00269c4:	75 26                	jne    c00269ec <__divdf3+0xd8>
c00269c6:	85 db                	test   ebx,ebx
c00269c8:	74 22                	je     c00269ec <__divdf3+0xd8>
c00269ca:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00269cd:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00269d0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00269d3:	09 d0                	or     eax,edx
c00269d5:	0f 85 ac 02 00 00    	jne    c0026c87 <__divdf3+0x373>
c00269db:	eb 63                	jmp    c0026a40 <__divdf3+0x12c>
c00269dd:	85 f6                	test   esi,esi
c00269df:	75 22                	jne    c0026a03 <__divdf3+0xef>
c00269e1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00269e4:	40                   	inc    eax
c00269e5:	a9 fe 07 00 00       	test   eax,0x7fe
c00269ea:	74 36                	je     c0026a22 <__divdf3+0x10e>
c00269ec:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00269f0:	0f 89 91 02 00 00    	jns    c0026c87 <__divdf3+0x373>
c00269f6:	89 f8                	mov    eax,edi
c00269f8:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00269fe:	e9 80 02 00 00       	jmp    c0026c83 <__divdf3+0x36f>
c0026a03:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026a06:	01 f6                	add    esi,esi
c0026a08:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0026a0b:	c1 ef 1f             	shr    edi,0x1f
c0026a0e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0026a11:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0026a14:	8d 48 ff             	lea    ecx,[eax-0x1]
c0026a17:	09 f7                	or     edi,esi
c0026a19:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0026a1c:	78 2e                	js     c0026a4c <__divdf3+0x138>
c0026a1e:	89 c8                	mov    eax,ecx
c0026a20:	eb e1                	jmp    c0026a03 <__divdf3+0xef>
c0026a22:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0026a25:	09 d0                	or     eax,edx
c0026a27:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0026a2b:	74 0f                	je     c0026a3c <__divdf3+0x128>
c0026a2d:	85 c0                	test   eax,eax
c0026a2f:	74 bb                	je     c00269ec <__divdf3+0xd8>
c0026a31:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0026a34:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0026a37:	e9 4b 02 00 00       	jmp    c0026c87 <__divdf3+0x373>
c0026a3c:	85 c0                	test   eax,eax
c0026a3e:	75 ac                	jne    c00269ec <__divdf3+0xd8>
c0026a40:	31 ff                	xor    edi,edi
c0026a42:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0026a47:	e9 3b 02 00 00       	jmp    c0026c87 <__divdf3+0x373>
c0026a4c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026a4f:	8d 4f 01             	lea    ecx,[edi+0x1]
c0026a52:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0026a58:	75 6b                	jne    c0026ac5 <__divdf3+0x1b1>
c0026a5a:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026a5d:	09 d6                	or     esi,edx
c0026a5f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0026a63:	74 28                	je     c0026a8d <__divdf3+0x179>
c0026a65:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0026a68:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0026a6b:	85 f6                	test   esi,esi
c0026a6d:	0f 85 14 02 00 00    	jne    c0026c87 <__divdf3+0x373>
c0026a73:	31 ff                	xor    edi,edi
c0026a75:	31 c9                	xor    ecx,ecx
c0026a77:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0026a7a:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0026a7d:	0f 89 04 02 00 00    	jns    c0026c87 <__divdf3+0x373>
c0026a83:	b9 00 00 00 80       	mov    ecx,0x80000000
c0026a88:	e9 fa 01 00 00       	jmp    c0026c87 <__divdf3+0x373>
c0026a8d:	85 f6                	test   esi,esi
c0026a8f:	75 1b                	jne    c0026aac <__divdf3+0x198>
c0026a91:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0026a94:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0026a97:	25 00 00 00 80       	and    eax,0x80000000
c0026a9c:	31 c9                	xor    ecx,ecx
c0026a9e:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0026aa3:	89 cf                	mov    edi,ecx
c0026aa5:	89 c1                	mov    ecx,eax
c0026aa7:	e9 db 01 00 00       	jmp    c0026c87 <__divdf3+0x373>
c0026aac:	01 d2                	add    edx,edx
c0026aae:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0026ab1:	c1 eb 1f             	shr    ebx,0x1f
c0026ab4:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026ab7:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0026aba:	8d 48 01             	lea    ecx,[eax+0x1]
c0026abd:	09 da                	or     edx,ebx
c0026abf:	78 04                	js     c0026ac5 <__divdf3+0x1b1>
c0026ac1:	89 c8                	mov    eax,ecx
c0026ac3:	eb e7                	jmp    c0026aac <__divdf3+0x198>
c0026ac5:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026ac8:	81 ce 00 00 00 80    	or     esi,0x80000000
c0026ace:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026ad4:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0026ad7:	39 d6                	cmp    esi,edx
c0026ad9:	77 0d                	ja     c0026ae8 <__divdf3+0x1d4>
c0026adb:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0026ade:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0026ae1:	72 1b                	jb     c0026afe <__divdf3+0x1ea>
c0026ae3:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0026ae6:	75 16                	jne    c0026afe <__divdf3+0x1ea>
c0026ae8:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0026aeb:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0026aee:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0026af1:	83 de 00             	sbb    esi,0x0
c0026af4:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0026af7:	ba 01 00 00 00       	mov    edx,0x1
c0026afc:	eb 02                	jmp    c0026b00 <__divdf3+0x1ec>
c0026afe:	31 d2                	xor    edx,edx
c0026b00:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0026b07:	31 ff                	xor    edi,edi
c0026b09:	01 ff                	add    edi,edi
c0026b0b:	89 d1                	mov    ecx,edx
c0026b0d:	c1 e9 1f             	shr    ecx,0x1f
c0026b10:	09 cf                	or     edi,ecx
c0026b12:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0026b15:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0026b18:	89 da                	mov    edx,ebx
c0026b1a:	89 f3                	mov    ebx,esi
c0026b1c:	8d 34 36             	lea    esi,[esi+esi*1]
c0026b1f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026b22:	c1 e9 1f             	shr    ecx,0x1f
c0026b25:	09 ce                	or     esi,ecx
c0026b27:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026b2a:	01 c9                	add    ecx,ecx
c0026b2c:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0026b2f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0026b32:	85 db                	test   ebx,ebx
c0026b34:	78 29                	js     c0026b5f <__divdf3+0x24b>
c0026b36:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0026b39:	72 07                	jb     c0026b42 <__divdf3+0x22e>
c0026b3b:	75 3c                	jne    c0026b79 <__divdf3+0x265>
c0026b3d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0026b40:	77 37                	ja     c0026b79 <__divdf3+0x265>
c0026b42:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0026b45:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0026b48:	31 d2                	xor    edx,edx
c0026b4a:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0026b4d:	0f 97 c2             	seta   dl
c0026b50:	29 d6                	sub    esi,edx
c0026b52:	89 d9                	mov    ecx,ebx
c0026b54:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0026b57:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0026b5a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0026b5d:	eb 17                	jmp    c0026b76 <__divdf3+0x262>
c0026b5f:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0026b62:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026b65:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0026b68:	0f 97 c1             	seta   cl
c0026b6b:	0f b6 c9             	movzx  ecx,cl
c0026b6e:	29 ce                	sub    esi,ecx
c0026b70:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0026b73:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0026b76:	83 ca 01             	or     edx,0x1
c0026b79:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0026b7c:	75 8b                	jne    c0026b09 <__divdf3+0x1f5>
c0026b7e:	c1 e7 09             	shl    edi,0x9
c0026b81:	89 d1                	mov    ecx,edx
c0026b83:	c1 e9 17             	shr    ecx,0x17
c0026b86:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0026b89:	09 f3                	or     ebx,esi
c0026b8b:	0f 95 c3             	setne  bl
c0026b8e:	0f b6 db             	movzx  ebx,bl
c0026b91:	c1 e2 09             	shl    edx,0x9
c0026b94:	09 d3                	or     ebx,edx
c0026b96:	89 ca                	mov    edx,ecx
c0026b98:	09 fa                	or     edx,edi
c0026b9a:	78 0c                	js     c0026ba8 <__divdf3+0x294>
c0026b9c:	01 d2                	add    edx,edx
c0026b9e:	89 d9                	mov    ecx,ebx
c0026ba0:	c1 e9 1f             	shr    ecx,0x1f
c0026ba3:	09 ca                	or     edx,ecx
c0026ba5:	01 db                	add    ebx,ebx
c0026ba7:	48                   	dec    eax
c0026ba8:	3d fe 07 00 00       	cmp    eax,0x7fe
c0026bad:	0f 8f 83 00 00 00    	jg     c0026c36 <__divdf3+0x322>
c0026bb3:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026bb9:	85 c0                	test   eax,eax
c0026bbb:	0f 8f 82 00 00 00    	jg     c0026c43 <__divdf3+0x32f>
c0026bc1:	83 f8 cc             	cmp    eax,0xffffffcc
c0026bc4:	7c 77                	jl     c0026c3d <__divdf3+0x329>
c0026bc6:	be 01 00 00 00       	mov    esi,0x1
c0026bcb:	29 c6                	sub    esi,eax
c0026bcd:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026bd3:	83 fe 1f             	cmp    esi,0x1f
c0026bd6:	7e 2f                	jle    c0026c07 <__divdf3+0x2f3>
c0026bd8:	83 fe 20             	cmp    esi,0x20
c0026bdb:	75 0a                	jne    c0026be7 <__divdf3+0x2d3>
c0026bdd:	85 db                	test   ebx,ebx
c0026bdf:	0f 95 c3             	setne  bl
c0026be2:	0f b6 db             	movzx  ebx,bl
c0026be5:	eb 1a                	jmp    c0026c01 <__divdf3+0x2ed>
c0026be7:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0026bea:	89 d7                	mov    edi,edx
c0026bec:	d3 e7                	shl    edi,cl
c0026bee:	89 f9                	mov    ecx,edi
c0026bf0:	09 d9                	or     ecx,ebx
c0026bf2:	0f 95 c3             	setne  bl
c0026bf5:	0f b6 db             	movzx  ebx,bl
c0026bf8:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0026bfd:	29 c1                	sub    ecx,eax
c0026bff:	d3 ea                	shr    edx,cl
c0026c01:	09 d3                	or     ebx,edx
c0026c03:	31 c0                	xor    eax,eax
c0026c05:	eb 3a                	jmp    c0026c41 <__divdf3+0x32d>
c0026c07:	83 c0 1f             	add    eax,0x1f
c0026c0a:	89 d7                	mov    edi,edx
c0026c0c:	88 c1                	mov    cl,al
c0026c0e:	d3 e7                	shl    edi,cl
c0026c10:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0026c13:	89 df                	mov    edi,ebx
c0026c15:	89 f1                	mov    ecx,esi
c0026c17:	d3 ef                	shr    edi,cl
c0026c19:	89 f9                	mov    ecx,edi
c0026c1b:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0026c1e:	09 cf                	or     edi,ecx
c0026c20:	88 c1                	mov    cl,al
c0026c22:	d3 e3                	shl    ebx,cl
c0026c24:	85 db                	test   ebx,ebx
c0026c26:	0f 95 c3             	setne  bl
c0026c29:	0f b6 db             	movzx  ebx,bl
c0026c2c:	09 fb                	or     ebx,edi
c0026c2e:	89 f1                	mov    ecx,esi
c0026c30:	d3 ea                	shr    edx,cl
c0026c32:	31 c0                	xor    eax,eax
c0026c34:	eb 0d                	jmp    c0026c43 <__divdf3+0x32f>
c0026c36:	b8 ff 07 00 00       	mov    eax,0x7ff
c0026c3b:	eb 02                	jmp    c0026c3f <__divdf3+0x32b>
c0026c3d:	31 c0                	xor    eax,eax
c0026c3f:	31 db                	xor    ebx,ebx
c0026c41:	31 d2                	xor    edx,edx
c0026c43:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0026c46:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0026c49:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0026c4f:	09 c8                	or     eax,ecx
c0026c51:	c1 e0 14             	shl    eax,0x14
c0026c54:	89 d1                	mov    ecx,edx
c0026c56:	c1 e9 0b             	shr    ecx,0xb
c0026c59:	09 c8                	or     eax,ecx
c0026c5b:	89 c6                	mov    esi,eax
c0026c5d:	89 d9                	mov    ecx,ebx
c0026c5f:	c1 e9 0b             	shr    ecx,0xb
c0026c62:	c1 e2 15             	shl    edx,0x15
c0026c65:	09 ca                	or     edx,ecx
c0026c67:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0026c6d:	0f 95 c0             	setne  al
c0026c70:	09 c1                	or     ecx,eax
c0026c72:	83 e1 01             	and    ecx,0x1
c0026c75:	c1 eb 0a             	shr    ebx,0xa
c0026c78:	21 cb                	and    ebx,ecx
c0026c7a:	01 d3                	add    ebx,edx
c0026c7c:	89 d8                	mov    eax,ebx
c0026c7e:	83 d6 00             	adc    esi,0x0
c0026c81:	89 f2                	mov    edx,esi
c0026c83:	89 c7                	mov    edi,eax
c0026c85:	89 d1                	mov    ecx,edx
c0026c87:	89 f8                	mov    eax,edi
c0026c89:	89 ca                	mov    edx,ecx
c0026c8b:	83 c4 2c             	add    esp,0x2c
c0026c8e:	5b                   	pop    ebx
c0026c8f:	5e                   	pop    esi
c0026c90:	5f                   	pop    edi
c0026c91:	5d                   	pop    ebp
c0026c92:	c3                   	ret    

c0026c93 <__floatsidf>:
c0026c93:	55                   	push   ebp
c0026c94:	89 e5                	mov    ebp,esp
c0026c96:	56                   	push   esi
c0026c97:	53                   	push   ebx
c0026c98:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026c9b:	85 db                	test   ebx,ebx
c0026c9d:	7e 15                	jle    c0026cb4 <__floatsidf+0x21>
c0026c9f:	0f bd cb             	bsr    ecx,ebx
c0026ca2:	83 f1 1f             	xor    ecx,0x1f
c0026ca5:	d3 e3                	shl    ebx,cl
c0026ca7:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0026cad:	b8 1e 04 00 00       	mov    eax,0x41e
c0026cb2:	eb 21                	jmp    c0026cd5 <__floatsidf+0x42>
c0026cb4:	b8 00 00 00 00       	mov    eax,0x0
c0026cb9:	ba 00 00 00 00       	mov    edx,0x0
c0026cbe:	74 2a                	je     c0026cea <__floatsidf+0x57>
c0026cc0:	f7 db                	neg    ebx
c0026cc2:	0f bd cb             	bsr    ecx,ebx
c0026cc5:	83 f1 1f             	xor    ecx,0x1f
c0026cc8:	d3 e3                	shl    ebx,cl
c0026cca:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0026cd0:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0026cd5:	29 c8                	sub    eax,ecx
c0026cd7:	c1 e0 14             	shl    eax,0x14
c0026cda:	89 c1                	mov    ecx,eax
c0026cdc:	89 de                	mov    esi,ebx
c0026cde:	c1 ee 0b             	shr    esi,0xb
c0026ce1:	09 f1                	or     ecx,esi
c0026ce3:	89 ca                	mov    edx,ecx
c0026ce5:	c1 e3 15             	shl    ebx,0x15
c0026ce8:	89 d8                	mov    eax,ebx
c0026cea:	5b                   	pop    ebx
c0026ceb:	5e                   	pop    esi
c0026cec:	5d                   	pop    ebp
c0026ced:	c3                   	ret    

c0026cee <__floatunsidf>:
c0026cee:	55                   	push   ebp
c0026cef:	89 e5                	mov    ebp,esp
c0026cf1:	56                   	push   esi
c0026cf2:	53                   	push   ebx
c0026cf3:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026cf6:	85 db                	test   ebx,ebx
c0026cf8:	74 2a                	je     c0026d24 <__floatunsidf+0x36>
c0026cfa:	0f bd cb             	bsr    ecx,ebx
c0026cfd:	83 f1 1f             	xor    ecx,0x1f
c0026d00:	d3 e3                	shl    ebx,cl
c0026d02:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0026d08:	b8 1e 04 00 00       	mov    eax,0x41e
c0026d0d:	29 c8                	sub    eax,ecx
c0026d0f:	c1 e0 14             	shl    eax,0x14
c0026d12:	89 c1                	mov    ecx,eax
c0026d14:	89 de                	mov    esi,ebx
c0026d16:	c1 ee 0b             	shr    esi,0xb
c0026d19:	09 f1                	or     ecx,esi
c0026d1b:	89 ca                	mov    edx,ecx
c0026d1d:	c1 e3 15             	shl    ebx,0x15
c0026d20:	89 d8                	mov    eax,ebx
c0026d22:	eb 04                	jmp    c0026d28 <__floatunsidf+0x3a>
c0026d24:	31 c0                	xor    eax,eax
c0026d26:	31 d2                	xor    edx,edx
c0026d28:	5b                   	pop    ebx
c0026d29:	5e                   	pop    esi
c0026d2a:	5d                   	pop    ebp
c0026d2b:	c3                   	ret    

c0026d2c <__fixdfsi>:
c0026d2c:	55                   	push   ebp
c0026d2d:	89 e5                	mov    ebp,esp
c0026d2f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026d32:	89 d1                	mov    ecx,edx
c0026d34:	c1 e1 0b             	shl    ecx,0xb
c0026d37:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0026d3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026d40:	c1 e8 15             	shr    eax,0x15
c0026d43:	09 c1                	or     ecx,eax
c0026d45:	c1 fa 14             	sar    edx,0x14
c0026d48:	78 1f                	js     c0026d69 <__fixdfsi+0x3d>
c0026d4a:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0026d50:	31 c0                	xor    eax,eax
c0026d52:	83 fa 1e             	cmp    edx,0x1e
c0026d55:	77 40                	ja     c0026d97 <__fixdfsi+0x6b>
c0026d57:	89 c8                	mov    eax,ecx
c0026d59:	0d 00 00 00 80       	or     eax,0x80000000
c0026d5e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026d63:	29 d1                	sub    ecx,edx
c0026d65:	d3 e8                	shr    eax,cl
c0026d67:	eb 2e                	jmp    c0026d97 <__fixdfsi+0x6b>
c0026d69:	31 c0                	xor    eax,eax
c0026d6b:	81 c2 01 04 00 00    	add    edx,0x401
c0026d71:	78 24                	js     c0026d97 <__fixdfsi+0x6b>
c0026d73:	83 fa 1e             	cmp    edx,0x1e
c0026d76:	7e 09                	jle    c0026d81 <__fixdfsi+0x55>
c0026d78:	83 fa 1f             	cmp    edx,0x1f
c0026d7b:	75 18                	jne    c0026d95 <__fixdfsi+0x69>
c0026d7d:	85 c9                	test   ecx,ecx
c0026d7f:	75 14                	jne    c0026d95 <__fixdfsi+0x69>
c0026d81:	89 c8                	mov    eax,ecx
c0026d83:	0d 00 00 00 80       	or     eax,0x80000000
c0026d88:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026d8d:	29 d1                	sub    ecx,edx
c0026d8f:	d3 e8                	shr    eax,cl
c0026d91:	f7 d8                	neg    eax
c0026d93:	eb 02                	jmp    c0026d97 <__fixdfsi+0x6b>
c0026d95:	31 c0                	xor    eax,eax
c0026d97:	5d                   	pop    ebp
c0026d98:	c3                   	ret    

c0026d99 <__fixunsdfsi>:
c0026d99:	55                   	push   ebp
c0026d9a:	89 e5                	mov    ebp,esp
c0026d9c:	53                   	push   ebx
c0026d9d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0026da0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026da3:	89 d3                	mov    ebx,edx
c0026da5:	c1 fb 14             	sar    ebx,0x14
c0026da8:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0026dae:	31 c0                	xor    eax,eax
c0026db0:	83 fb 1f             	cmp    ebx,0x1f
c0026db3:	77 1d                	ja     c0026dd2 <__fixunsdfsi+0x39>
c0026db5:	89 d0                	mov    eax,edx
c0026db7:	c1 e0 0b             	shl    eax,0xb
c0026dba:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0026dbf:	c1 e9 15             	shr    ecx,0x15
c0026dc2:	09 c8                	or     eax,ecx
c0026dc4:	0d 00 00 00 80       	or     eax,0x80000000
c0026dc9:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026dce:	29 d9                	sub    ecx,ebx
c0026dd0:	d3 e8                	shr    eax,cl
c0026dd2:	5b                   	pop    ebx
c0026dd3:	5d                   	pop    ebp
c0026dd4:	c3                   	ret    

c0026dd5 <__cmpdf2>:
c0026dd5:	55                   	push   ebp
c0026dd6:	89 e5                	mov    ebp,esp
c0026dd8:	57                   	push   edi
c0026dd9:	56                   	push   esi
c0026dda:	53                   	push   ebx
c0026ddb:	83 ec 0c             	sub    esp,0xc
c0026dde:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0026de1:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0026de4:	89 ca                	mov    edx,ecx
c0026de6:	c1 ea 14             	shr    edx,0x14
c0026de9:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0026def:	89 cb                	mov    ebx,ecx
c0026df1:	c1 fb 1f             	sar    ebx,0x1f
c0026df4:	31 da                	xor    edx,ebx
c0026df6:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026df9:	89 df                	mov    edi,ebx
c0026dfb:	c1 e7 0b             	shl    edi,0xb
c0026dfe:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0026e01:	c1 e1 0b             	shl    ecx,0xb
c0026e04:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0026e0a:	c1 eb 15             	shr    ebx,0x15
c0026e0d:	09 d9                	or     ecx,ebx
c0026e0f:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0026e12:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0026e15:	89 ce                	mov    esi,ecx
c0026e17:	c1 ee 14             	shr    esi,0x14
c0026e1a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0026e20:	89 cb                	mov    ebx,ecx
c0026e22:	c1 fb 1f             	sar    ebx,0x1f
c0026e25:	31 de                	xor    esi,ebx
c0026e27:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0026e2a:	89 df                	mov    edi,ebx
c0026e2c:	c1 e7 0b             	shl    edi,0xb
c0026e2f:	c1 e1 0b             	shl    ecx,0xb
c0026e32:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0026e38:	c1 eb 15             	shr    ebx,0x15
c0026e3b:	09 d9                	or     ecx,ebx
c0026e3d:	89 d3                	mov    ebx,edx
c0026e3f:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0026e45:	43                   	inc    ebx
c0026e46:	83 fb 01             	cmp    ebx,0x1
c0026e49:	77 08                	ja     c0026e53 <__cmpdf2+0x7e>
c0026e4b:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0026e4e:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0026e51:	75 68                	jne    c0026ebb <__cmpdf2+0xe6>
c0026e53:	89 f3                	mov    ebx,esi
c0026e55:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0026e5b:	43                   	inc    ebx
c0026e5c:	83 fb 01             	cmp    ebx,0x1
c0026e5f:	77 06                	ja     c0026e67 <__cmpdf2+0x92>
c0026e61:	89 fb                	mov    ebx,edi
c0026e63:	09 cb                	or     ebx,ecx
c0026e65:	75 54                	jne    c0026ebb <__cmpdf2+0xe6>
c0026e67:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0026e6a:	09 f8                	or     eax,edi
c0026e6c:	09 c8                	or     eax,ecx
c0026e6e:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0026e71:	75 12                	jne    c0026e85 <__cmpdf2+0xb0>
c0026e73:	8d 42 01             	lea    eax,[edx+0x1]
c0026e76:	83 f8 01             	cmp    eax,0x1
c0026e79:	77 0a                	ja     c0026e85 <__cmpdf2+0xb0>
c0026e7b:	8d 5e 01             	lea    ebx,[esi+0x1]
c0026e7e:	31 c0                	xor    eax,eax
c0026e80:	83 fb 01             	cmp    ebx,0x1
c0026e83:	76 36                	jbe    c0026ebb <__cmpdf2+0xe6>
c0026e85:	b8 01 00 00 00       	mov    eax,0x1
c0026e8a:	39 f2                	cmp    edx,esi
c0026e8c:	7f 2d                	jg     c0026ebb <__cmpdf2+0xe6>
c0026e8e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0026e93:	7c 26                	jl     c0026ebb <__cmpdf2+0xe6>
c0026e95:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0026e98:	77 07                	ja     c0026ea1 <__cmpdf2+0xcc>
c0026e9a:	72 16                	jb     c0026eb2 <__cmpdf2+0xdd>
c0026e9c:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0026e9f:	76 0a                	jbe    c0026eab <__cmpdf2+0xd6>
c0026ea1:	89 d0                	mov    eax,edx
c0026ea3:	c1 f8 1f             	sar    eax,0x1f
c0026ea6:	83 c8 01             	or     eax,0x1
c0026ea9:	eb 10                	jmp    c0026ebb <__cmpdf2+0xe6>
c0026eab:	b8 00 00 00 00       	mov    eax,0x0
c0026eb0:	73 09                	jae    c0026ebb <__cmpdf2+0xe6>
c0026eb2:	89 d0                	mov    eax,edx
c0026eb4:	c1 f8 1f             	sar    eax,0x1f
c0026eb7:	83 e0 02             	and    eax,0x2
c0026eba:	48                   	dec    eax
c0026ebb:	83 c4 0c             	add    esp,0xc
c0026ebe:	5b                   	pop    ebx
c0026ebf:	5e                   	pop    esi
c0026ec0:	5f                   	pop    edi
c0026ec1:	5d                   	pop    ebp
c0026ec2:	c3                   	ret    

c0026ec3 <__eqdf2>:
c0026ec3:	55                   	push   ebp
c0026ec4:	89 e5                	mov    ebp,esp
c0026ec6:	50                   	push   eax
c0026ec7:	6a 01                	push   0x1
c0026ec9:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0026ecc:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0026ecf:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026ed2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026ed5:	e8 fb fe ff ff       	call   c0026dd5 <__cmpdf2>
c0026eda:	83 c4 18             	add    esp,0x18
c0026edd:	c9                   	leave  
c0026ede:	c3                   	ret    

c0026edf <__nedf2>:
c0026edf:	eb e2                	jmp    c0026ec3 <__eqdf2>

c0026ee1 <__gtdf2>:
c0026ee1:	55                   	push   ebp
c0026ee2:	89 e5                	mov    ebp,esp
c0026ee4:	50                   	push   eax
c0026ee5:	6a ff                	push   0xffffffff
c0026ee7:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0026eea:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0026eed:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026ef0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026ef3:	e8 dd fe ff ff       	call   c0026dd5 <__cmpdf2>
c0026ef8:	83 c4 18             	add    esp,0x18
c0026efb:	c9                   	leave  
c0026efc:	c3                   	ret    

c0026efd <__gedf2>:
c0026efd:	eb e2                	jmp    c0026ee1 <__gtdf2>

c0026eff <__ltdf2>:
c0026eff:	eb c2                	jmp    c0026ec3 <__eqdf2>

c0026f01 <__ledf2>:
c0026f01:	eb c0                	jmp    c0026ec3 <__eqdf2>

c0026f03 <__truncdfsf2>:
c0026f03:	55                   	push   ebp
c0026f04:	89 e5                	mov    ebp,esp
c0026f06:	57                   	push   edi
c0026f07:	56                   	push   esi
c0026f08:	53                   	push   ebx
c0026f09:	83 ec 0c             	sub    esp,0xc
c0026f0c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026f0f:	89 d1                	mov    ecx,edx
c0026f11:	c1 f9 14             	sar    ecx,0x14
c0026f14:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026f17:	89 df                	mov    edi,ebx
c0026f19:	c1 e7 0b             	shl    edi,0xb
c0026f1c:	89 d0                	mov    eax,edx
c0026f1e:	c1 e0 0b             	shl    eax,0xb
c0026f21:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0026f26:	c1 eb 15             	shr    ebx,0x15
c0026f29:	09 d8                	or     eax,ebx
c0026f2b:	89 cb                	mov    ebx,ecx
c0026f2d:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0026f33:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0026f39:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0026f3f:	0f 86 9e 00 00 00    	jbe    c0026fe3 <__truncdfsf2+0xe0>
c0026f45:	85 db                	test   ebx,ebx
c0026f47:	75 0a                	jne    c0026f53 <__truncdfsf2+0x50>
c0026f49:	c1 fa 17             	sar    edx,0x17
c0026f4c:	30 d2                	xor    dl,dl
c0026f4e:	e9 84 00 00 00       	jmp    c0026fd7 <__truncdfsf2+0xd4>
c0026f53:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0026f59:	83 fe 83             	cmp    esi,0xffffff83
c0026f5c:	7d 4b                	jge    c0026fa9 <__truncdfsf2+0xa6>
c0026f5e:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0026f63:	29 f1                	sub    ecx,esi
c0026f65:	83 f9 1f             	cmp    ecx,0x1f
c0026f68:	7f 6b                	jg     c0026fd5 <__truncdfsf2+0xd2>
c0026f6a:	0d 00 00 00 80       	or     eax,0x80000000
c0026f6f:	89 c3                	mov    ebx,eax
c0026f71:	d3 eb                	shr    ebx,cl
c0026f73:	be 01 00 00 00       	mov    esi,0x1
c0026f78:	d3 e6                	shl    esi,cl
c0026f7a:	4e                   	dec    esi
c0026f7b:	21 f0                	and    eax,esi
c0026f7d:	09 f8                	or     eax,edi
c0026f7f:	0f 95 c0             	setne  al
c0026f82:	0f b6 c0             	movzx  eax,al
c0026f85:	09 c3                	or     ebx,eax
c0026f87:	89 d9                	mov    ecx,ebx
c0026f89:	c1 e9 08             	shr    ecx,0x8
c0026f8c:	f6 c3 7f             	test   bl,0x7f
c0026f8f:	0f 95 c0             	setne  al
c0026f92:	09 c8                	or     eax,ecx
c0026f94:	83 e0 01             	and    eax,0x1
c0026f97:	c1 eb 07             	shr    ebx,0x7
c0026f9a:	21 c3                	and    ebx,eax
c0026f9c:	81 e2 00 00 00 80    	and    edx,0x80000000
c0026fa2:	09 d1                	or     ecx,edx
c0026fa4:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0026fa7:	eb 76                	jmp    c002701f <__truncdfsf2+0x11c>
c0026fa9:	83 c6 80             	add    esi,0xffffff80
c0026fac:	7e 1d                	jle    c0026fcb <__truncdfsf2+0xc8>
c0026fae:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0026fb4:	75 0b                	jne    c0026fc1 <__truncdfsf2+0xbe>
c0026fb6:	09 f8                	or     eax,edi
c0026fb8:	74 09                	je     c0026fc3 <__truncdfsf2+0xc0>
c0026fba:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c0026fbf:	eb 02                	jmp    c0026fc3 <__truncdfsf2+0xc0>
c0026fc1:	31 c0                	xor    eax,eax
c0026fc3:	c1 fa 17             	sar    edx,0x17
c0026fc6:	80 ca ff             	or     dl,0xff
c0026fc9:	eb 0e                	jmp    c0026fd9 <__truncdfsf2+0xd6>
c0026fcb:	c1 fa 1f             	sar    edx,0x1f
c0026fce:	c1 e2 08             	shl    edx,0x8
c0026fd1:	09 ca                	or     edx,ecx
c0026fd3:	eb 04                	jmp    c0026fd9 <__truncdfsf2+0xd6>
c0026fd5:	31 d2                	xor    edx,edx
c0026fd7:	31 c0                	xor    eax,eax
c0026fd9:	c1 e2 17             	shl    edx,0x17
c0026fdc:	c1 e8 08             	shr    eax,0x8
c0026fdf:	09 d0                	or     eax,edx
c0026fe1:	eb 3c                	jmp    c002701f <__truncdfsf2+0x11c>
c0026fe3:	81 e9 80 03 00 00    	sub    ecx,0x380
c0026fe9:	89 ca                	mov    edx,ecx
c0026feb:	c1 fa 0b             	sar    edx,0xb
c0026fee:	c1 e2 08             	shl    edx,0x8
c0026ff1:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0026ff4:	31 db                	xor    ebx,ebx
c0026ff6:	85 ff                	test   edi,edi
c0026ff8:	0f 95 c3             	setne  bl
c0026ffb:	09 d8                	or     eax,ebx
c0026ffd:	89 c3                	mov    ebx,eax
c0026fff:	c1 eb 08             	shr    ebx,0x8
c0027002:	a8 7f                	test   al,0x7f
c0027004:	0f 95 c2             	setne  dl
c0027007:	89 d6                	mov    esi,edx
c0027009:	09 de                	or     esi,ebx
c002700b:	83 e6 01             	and    esi,0x1
c002700e:	c1 e8 07             	shr    eax,0x7
c0027011:	21 f0                	and    eax,esi
c0027013:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027016:	09 ca                	or     edx,ecx
c0027018:	c1 e2 17             	shl    edx,0x17
c002701b:	09 da                	or     edx,ebx
c002701d:	01 d0                	add    eax,edx
c002701f:	83 c4 0c             	add    esp,0xc
c0027022:	5b                   	pop    ebx
c0027023:	5e                   	pop    esi
c0027024:	5f                   	pop    edi
c0027025:	5d                   	pop    ebp
c0027026:	c3                   	ret    

c0027027 <__extendsfdf2>:
c0027027:	55                   	push   ebp
c0027028:	89 e5                	mov    ebp,esp
c002702a:	57                   	push   edi
c002702b:	56                   	push   esi
c002702c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002702f:	89 d1                	mov    ecx,edx
c0027031:	c1 f9 17             	sar    ecx,0x17
c0027034:	c1 e2 08             	shl    edx,0x8
c0027037:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002703d:	89 c8                	mov    eax,ecx
c002703f:	80 e4 f8             	and    ah,0xf8
c0027042:	8d 71 01             	lea    esi,[ecx+0x1]
c0027045:	81 e6 fe 00 00 00    	and    esi,0xfe
c002704b:	75 27                	jne    c0027074 <__extendsfdf2+0x4d>
c002704d:	81 e1 ff 00 00 00    	and    ecx,0xff
c0027053:	75 18                	jne    c002706d <__extendsfdf2+0x46>
c0027055:	85 d2                	test   edx,edx
c0027057:	74 20                	je     c0027079 <__extendsfdf2+0x52>
c0027059:	41                   	inc    ecx
c002705a:	01 d2                	add    edx,edx
c002705c:	79 fb                	jns    c0027059 <__extendsfdf2+0x32>
c002705e:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027064:	29 c8                	sub    eax,ecx
c0027066:	05 81 03 00 00       	add    eax,0x381
c002706b:	eb 0c                	jmp    c0027079 <__extendsfdf2+0x52>
c002706d:	05 00 07 00 00       	add    eax,0x700
c0027072:	eb 05                	jmp    c0027079 <__extendsfdf2+0x52>
c0027074:	05 80 03 00 00       	add    eax,0x380
c0027079:	c1 e0 14             	shl    eax,0x14
c002707c:	89 c1                	mov    ecx,eax
c002707e:	89 d0                	mov    eax,edx
c0027080:	c1 e8 0b             	shr    eax,0xb
c0027083:	09 c1                	or     ecx,eax
c0027085:	c1 e2 15             	shl    edx,0x15
c0027088:	89 d0                	mov    eax,edx
c002708a:	89 ca                	mov    edx,ecx
c002708c:	5e                   	pop    esi
c002708d:	5f                   	pop    edi
c002708e:	5d                   	pop    ebp
c002708f:	c3                   	ret    

c0027090 <fabs>:
c0027090:	83 ec 0c             	sub    esp,0xc
c0027093:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027097:	89 04 24             	mov    DWORD PTR [esp],eax
c002709a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002709e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00270a3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00270a7:	dd 04 24             	fld    QWORD PTR [esp]
c00270aa:	83 c4 0c             	add    esp,0xc
c00270ad:	c3                   	ret    
c00270ae:	66 90                	xchg   ax,ax

c00270b0 <lrint>:
c00270b0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c00270b4:	83 ec 04             	sub    esp,0x4
c00270b7:	db 1c 24             	fistp  DWORD PTR [esp]
c00270ba:	58                   	pop    eax
c00270bb:	c3                   	ret    

c00270bc <lrintf>:
c00270bc:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c00270c0:	83 ec 04             	sub    esp,0x4
c00270c3:	db 1c 24             	fistp  DWORD PTR [esp]
c00270c6:	58                   	pop    eax
c00270c7:	c3                   	ret    

Disassembly of section .init:

c00270c8 <_init>:
c00270c8:	55                   	push   ebp
c00270c9:	89 e5                	mov    ebp,esp
c00270cb:	e8 48 90 fd ff       	call   c0000118 <frame_dummy>
c00270d0:	e8 63 e0 ff ff       	call   c0025138 <__do_global_ctors_aux>
c00270d5:	5d                   	pop    ebp
c00270d6:	c3                   	ret    

Disassembly of section .fini:

c00270d7 <_fini>:
c00270d7:	55                   	push   ebp
c00270d8:	89 e5                	mov    ebp,esp
c00270da:	e8 c9 8f fd ff       	call   c00000a8 <__do_global_dtors_aux>
c00270df:	5d                   	pop    ebp
c00270e0:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c00270e2 <Computer::~Computer()>:
c00270e2:	83 ec 0c             	sub    esp,0xc
c00270e5:	ba 70 8b 02 c0       	mov    edx,0xc0028b70
c00270ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00270ee:	89 10                	mov    DWORD PTR [eax],edx
c00270f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00270f4:	83 ec 0c             	sub    esp,0xc
c00270f7:	50                   	push   eax
c00270f8:	e8 3d c9 fe ff       	call   c0013a3a <Device::~Device()>
c00270fd:	83 c4 10             	add    esp,0x10
c0027100:	90                   	nop
c0027101:	83 c4 0c             	add    esp,0xc
c0027104:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0027106 <Computer::~Computer()>:
c0027106:	83 ec 0c             	sub    esp,0xc
c0027109:	83 ec 0c             	sub    esp,0xc
c002710c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027110:	e8 cd ff ff ff       	call   c00270e2 <Computer::~Computer()>
c0027115:	83 c4 10             	add    esp,0x10
c0027118:	83 ec 08             	sub    esp,0x8
c002711b:	68 ec 01 00 00       	push   0x1ec
c0027120:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027124:	e8 70 b5 fe ff       	call   c0012699 <operator delete(void*, unsigned long)>
c0027129:	83 c4 10             	add    esp,0x10
c002712c:	83 c4 0c             	add    esp,0xc
c002712f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0027130 <idleCommon()>:
c0027130:	83 ec 0c             	sub    esp,0xc
c0027133:	e8 82 5c ff ff       	call   c001cdba <lockScheduler()>
c0027138:	e8 b9 5f ff ff       	call   c001d0f6 <schedule()>
c002713d:	83 c4 0c             	add    esp,0xc
c0027140:	e9 77 5c ff ff       	jmp    c001cdbc <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0027146 <LinkedList<UnixFile>::~LinkedList()>:
c0027146:	90                   	nop
c0027147:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0027148 <LinkedList<UnixFile>::LinkedList()>:
c0027148:	83 ec 0c             	sub    esp,0xc
c002714b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002714f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027155:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027159:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0027160:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027164:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002716b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002716f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027175:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027179:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0027180:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027184:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002718b:	83 ec 0c             	sub    esp,0xc
c002718e:	68 e6 8d 02 c0       	push   0xc0028de6
c0027193:	e8 e1 b5 fe ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c0027198:	83 c4 10             	add    esp,0x10
c002719b:	90                   	nop
c002719c:	83 c4 0c             	add    esp,0xc
c002719f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c00271a0 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c00271a0:	83 ec 0c             	sub    esp,0xc
c00271a3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00271a8:	75 10                	jne    c00271ba <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c00271aa:	83 ec 0c             	sub    esp,0xc
c00271ad:	68 00 8e 02 c0       	push   0xc0028e00
c00271b2:	e8 dc 26 ff ff       	call   c0019893 <Krnl::panic(char const*)>
c00271b7:	83 c4 10             	add    esp,0x10
c00271ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00271be:	8b 00                	mov    eax,DWORD PTR [eax]
c00271c0:	85 c0                	test   eax,eax
c00271c2:	74 34                	je     c00271f8 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00271c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00271c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00271cb:	85 c0                	test   eax,eax
c00271cd:	74 29                	je     c00271f8 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00271cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00271d3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00271d6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00271da:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00271dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00271e1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00271e5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00271e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00271ec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00271ef:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00271f6:	eb 65                	jmp    c002725d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00271f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00271fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00271fe:	85 c0                	test   eax,eax
c0027200:	75 4b                	jne    c002724d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0027202:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027206:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027209:	85 c0                	test   eax,eax
c002720b:	75 40                	jne    c002724d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002720d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027211:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027215:	89 10                	mov    DWORD PTR [eax],edx
c0027217:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002721b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002721f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027222:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027226:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027229:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027230:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027234:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027237:	85 c0                	test   eax,eax
c0027239:	74 22                	je     c002725d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002723b:	83 ec 0c             	sub    esp,0xc
c002723e:	68 22 8e 02 c0       	push   0xc0028e22
c0027243:	e8 4b 26 ff ff       	call   c0019893 <Krnl::panic(char const*)>
c0027248:	83 c4 10             	add    esp,0x10
c002724b:	eb 10                	jmp    c002725d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002724d:	83 ec 0c             	sub    esp,0xc
c0027250:	68 2c 8e 02 c0       	push   0xc0028e2c
c0027255:	e8 39 26 ff ff       	call   c0019893 <Krnl::panic(char const*)>
c002725a:	83 c4 10             	add    esp,0x10
c002725d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027261:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027264:	8d 50 01             	lea    edx,[eax+0x1]
c0027267:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002726b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002726e:	90                   	nop
c002726f:	83 c4 0c             	add    esp,0xc
c0027272:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0027274 <LinkedList<UnixFile>::getFirstElement()>:
c0027274:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027278:	8b 00                	mov    eax,DWORD PTR [eax]
c002727a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c002727c <LinkedList<UnixFile>::removeFirst()>:
c002727c:	83 ec 0c             	sub    esp,0xc
c002727f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027283:	8b 00                	mov    eax,DWORD PTR [eax]
c0027285:	85 c0                	test   eax,eax
c0027287:	75 12                	jne    c002729b <LinkedList<UnixFile>::removeFirst()+0x1f>
c0027289:	83 ec 0c             	sub    esp,0xc
c002728c:	68 38 8e 02 c0       	push   0xc0028e38
c0027291:	e8 fd 25 ff ff       	call   c0019893 <Krnl::panic(char const*)>
c0027296:	83 c4 10             	add    esp,0x10
c0027299:	eb 7e                	jmp    c0027319 <LinkedList<UnixFile>::removeFirst()+0x9d>
c002729b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002729f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00272a2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00272a5:	85 c0                	test   eax,eax
c00272a7:	74 10                	je     c00272b9 <LinkedList<UnixFile>::removeFirst()+0x3d>
c00272a9:	83 ec 0c             	sub    esp,0xc
c00272ac:	68 83 8e 02 c0       	push   0xc0028e83
c00272b1:	e8 dd 25 ff ff       	call   c0019893 <Krnl::panic(char const*)>
c00272b6:	83 c4 10             	add    esp,0x10
c00272b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00272bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00272bf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00272c2:	85 c0                	test   eax,eax
c00272c4:	75 33                	jne    c00272f9 <LinkedList<UnixFile>::removeFirst()+0x7d>
c00272c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00272ca:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00272d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00272d4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00272db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00272df:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00272e2:	83 f8 01             	cmp    eax,0x1
c00272e5:	74 21                	je     c0027308 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00272e7:	83 ec 0c             	sub    esp,0xc
c00272ea:	68 5c 8e 02 c0       	push   0xc0028e5c
c00272ef:	e8 9f 25 ff ff       	call   c0019893 <Krnl::panic(char const*)>
c00272f4:	83 c4 10             	add    esp,0x10
c00272f7:	eb 0f                	jmp    c0027308 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00272f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00272fd:	8b 00                	mov    eax,DWORD PTR [eax]
c00272ff:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0027302:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027306:	89 10                	mov    DWORD PTR [eax],edx
c0027308:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002730c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002730f:	8d 50 ff             	lea    edx,[eax-0x1]
c0027312:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027316:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0027319:	83 c4 0c             	add    esp,0xc
c002731c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002731e <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002731e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027322:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027325:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0027326 <DriverlessDevice::~DriverlessDevice()>:
c0027326:	ba 44 95 02 c0       	mov    edx,0xc0029544
c002732b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002732f:	89 10                	mov    DWORD PTR [eax],edx
c0027331:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027335:	50                   	push   eax
c0027336:	e8 ff c6 fe ff       	call   c0013a3a <Device::~Device()>
c002733b:	83 c4 04             	add    esp,0x4
c002733e:	90                   	nop
c002733f:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0027340 <DriverlessDevice::~DriverlessDevice()>:
c0027340:	83 ec 0c             	sub    esp,0xc
c0027343:	83 ec 0c             	sub    esp,0xc
c0027346:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002734a:	e8 d7 ff ff ff       	call   c0027326 <DriverlessDevice::~DriverlessDevice()>
c002734f:	83 c4 10             	add    esp,0x10
c0027352:	83 ec 08             	sub    esp,0x8
c0027355:	68 58 01 00 00       	push   0x158
c002735a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002735e:	e8 36 b3 fe ff       	call   c0012699 <operator delete(void*, unsigned long)>
c0027363:	83 c4 10             	add    esp,0x10
c0027366:	83 c4 0c             	add    esp,0xc
c0027369:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c002736a <LinkedList<Device>::addElement(Device*)>:
c002736a:	83 ec 0c             	sub    esp,0xc
c002736d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0027372:	75 10                	jne    c0027384 <LinkedList<Device>::addElement(Device*)+0x1a>
c0027374:	83 ec 0c             	sub    esp,0xc
c0027377:	68 00 8e 02 c0       	push   0xc0028e00
c002737c:	e8 12 25 ff ff       	call   c0019893 <Krnl::panic(char const*)>
c0027381:	83 c4 10             	add    esp,0x10
c0027384:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027388:	8b 00                	mov    eax,DWORD PTR [eax]
c002738a:	85 c0                	test   eax,eax
c002738c:	74 3a                	je     c00273c8 <LinkedList<Device>::addElement(Device*)+0x5e>
c002738e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027392:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027395:	85 c0                	test   eax,eax
c0027397:	74 2f                	je     c00273c8 <LinkedList<Device>::addElement(Device*)+0x5e>
c0027399:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002739d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00273a0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00273a4:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c00273aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273ae:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00273b2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00273b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273b9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00273bc:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00273c6:	eb 68                	jmp    c0027430 <LinkedList<Device>::addElement(Device*)+0xc6>
c00273c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00273ce:	85 c0                	test   eax,eax
c00273d0:	75 4e                	jne    c0027420 <LinkedList<Device>::addElement(Device*)+0xb6>
c00273d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00273d9:	85 c0                	test   eax,eax
c00273db:	75 43                	jne    c0027420 <LinkedList<Device>::addElement(Device*)+0xb6>
c00273dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273e1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00273e5:	89 10                	mov    DWORD PTR [eax],edx
c00273e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273eb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00273ef:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00273f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00273f9:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0027403:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027407:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002740a:	85 c0                	test   eax,eax
c002740c:	74 22                	je     c0027430 <LinkedList<Device>::addElement(Device*)+0xc6>
c002740e:	83 ec 0c             	sub    esp,0xc
c0027411:	68 22 8e 02 c0       	push   0xc0028e22
c0027416:	e8 78 24 ff ff       	call   c0019893 <Krnl::panic(char const*)>
c002741b:	83 c4 10             	add    esp,0x10
c002741e:	eb 10                	jmp    c0027430 <LinkedList<Device>::addElement(Device*)+0xc6>
c0027420:	83 ec 0c             	sub    esp,0xc
c0027423:	68 2c 8e 02 c0       	push   0xc0028e2c
c0027428:	e8 66 24 ff ff       	call   c0019893 <Krnl::panic(char const*)>
c002742d:	83 c4 10             	add    esp,0x10
c0027430:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027434:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027437:	8d 50 01             	lea    edx,[eax+0x1]
c002743a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002743e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0027441:	90                   	nop
c0027442:	83 c4 0c             	add    esp,0xc
c0027445:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0027446 <LinkedList<Device>::LinkedList()>:
c0027446:	83 ec 0c             	sub    esp,0xc
c0027449:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002744d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027453:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027457:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002745e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027462:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027469:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002746d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027473:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027477:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002747e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027482:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027489:	83 ec 0c             	sub    esp,0xc
c002748c:	68 e6 8d 02 c0       	push   0xc0028de6
c0027491:	e8 e3 b2 fe ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c0027496:	83 c4 10             	add    esp,0x10
c0027499:	90                   	nop
c002749a:	83 c4 0c             	add    esp,0xc
c002749d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c002749e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c002749e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00274a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00274a4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c00274a6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c00274a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00274aa:	8b 00                	mov    eax,DWORD PTR [eax]
c00274ac:	85 c0                	test   eax,eax
c00274ae:	75 0e                	jne    c00274be <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00274b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00274b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00274b7:	85 c0                	test   eax,eax
c00274b9:	75 03                	jne    c00274be <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00274bb:	b0 01                	mov    al,0x1
c00274bd:	c3                   	ret    
c00274be:	b0 00                	mov    al,0x0
c00274c0:	90                   	nop
c00274c1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c00274c2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c00274c2:	83 ec 0c             	sub    esp,0xc
c00274c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00274cb:	85 c0                	test   eax,eax
c00274cd:	75 15                	jne    c00274e4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c00274cf:	83 ec 0c             	sub    esp,0xc
c00274d2:	68 38 8e 02 c0       	push   0xc0028e38
c00274d7:	e8 b7 23 ff ff       	call   c0019893 <Krnl::panic(char const*)>
c00274dc:	83 c4 10             	add    esp,0x10
c00274df:	e9 88 00 00 00       	jmp    c002756c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c00274e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274e8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00274eb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00274ee:	85 c0                	test   eax,eax
c00274f0:	0f 95 c0             	setne  al
c00274f3:	84 c0                	test   al,al
c00274f5:	74 10                	je     c0027507 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c00274f7:	83 ec 0c             	sub    esp,0xc
c00274fa:	68 83 8e 02 c0       	push   0xc0028e83
c00274ff:	e8 8f 23 ff ff       	call   c0019893 <Krnl::panic(char const*)>
c0027504:	83 c4 10             	add    esp,0x10
c0027507:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002750b:	8b 00                	mov    eax,DWORD PTR [eax]
c002750d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0027510:	85 c0                	test   eax,eax
c0027512:	0f 94 c0             	sete   al
c0027515:	84 c0                	test   al,al
c0027517:	74 33                	je     c002754c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0027519:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002751d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027523:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027527:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002752e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027532:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027535:	83 f8 01             	cmp    eax,0x1
c0027538:	74 21                	je     c002755b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002753a:	83 ec 0c             	sub    esp,0xc
c002753d:	68 5c 8e 02 c0       	push   0xc0028e5c
c0027542:	e8 4c 23 ff ff       	call   c0019893 <Krnl::panic(char const*)>
c0027547:	83 c4 10             	add    esp,0x10
c002754a:	eb 0f                	jmp    c002755b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002754c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027550:	8b 00                	mov    eax,DWORD PTR [eax]
c0027552:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0027555:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027559:	89 10                	mov    DWORD PTR [eax],edx
c002755b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002755f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027562:	8d 50 ff             	lea    edx,[eax-0x1]
c0027565:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027569:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002756c:	83 c4 0c             	add    esp,0xc
c002756f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0027570 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0027570:	83 ec 0c             	sub    esp,0xc
c0027573:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0027578:	75 10                	jne    c002758a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c002757a:	83 ec 0c             	sub    esp,0xc
c002757d:	68 00 8e 02 c0       	push   0xc0028e00
c0027582:	e8 0c 23 ff ff       	call   c0019893 <Krnl::panic(char const*)>
c0027587:	83 c4 10             	add    esp,0x10
c002758a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002758e:	8b 00                	mov    eax,DWORD PTR [eax]
c0027590:	85 c0                	test   eax,eax
c0027592:	74 34                	je     c00275c8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0027594:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027598:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002759b:	85 c0                	test   eax,eax
c002759d:	74 29                	je     c00275c8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c002759f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275a3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00275a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00275aa:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00275ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275b1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00275b5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00275b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00275bf:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00275c6:	eb 65                	jmp    c002762d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00275c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00275ce:	85 c0                	test   eax,eax
c00275d0:	75 4b                	jne    c002761d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00275d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00275d9:	85 c0                	test   eax,eax
c00275db:	75 40                	jne    c002761d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00275dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275e1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00275e5:	89 10                	mov    DWORD PTR [eax],edx
c00275e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275eb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00275ef:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00275f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00275f9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0027600:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027604:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027607:	85 c0                	test   eax,eax
c0027609:	74 22                	je     c002762d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c002760b:	83 ec 0c             	sub    esp,0xc
c002760e:	68 22 8e 02 c0       	push   0xc0028e22
c0027613:	e8 7b 22 ff ff       	call   c0019893 <Krnl::panic(char const*)>
c0027618:	83 c4 10             	add    esp,0x10
c002761b:	eb 10                	jmp    c002762d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c002761d:	83 ec 0c             	sub    esp,0xc
c0027620:	68 2c 8e 02 c0       	push   0xc0028e2c
c0027625:	e8 69 22 ff ff       	call   c0019893 <Krnl::panic(char const*)>
c002762a:	83 c4 10             	add    esp,0x10
c002762d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027631:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027634:	8d 50 01             	lea    edx,[eax+0x1]
c0027637:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002763b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002763e:	90                   	nop
c002763f:	83 c4 0c             	add    esp,0xc
c0027642:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0027644 <ACPI::~ACPI()>:
c0027644:	83 ec 0c             	sub    esp,0xc
c0027647:	ba e8 9d 02 c0       	mov    edx,0xc0029de8
c002764c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027650:	89 10                	mov    DWORD PTR [eax],edx
c0027652:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027656:	83 ec 0c             	sub    esp,0xc
c0027659:	50                   	push   eax
c002765a:	e8 db c3 fe ff       	call   c0013a3a <Device::~Device()>
c002765f:	83 c4 10             	add    esp,0x10
c0027662:	90                   	nop
c0027663:	83 c4 0c             	add    esp,0xc
c0027666:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0027668 <ACPI::~ACPI()>:
c0027668:	83 ec 0c             	sub    esp,0xc
c002766b:	83 ec 0c             	sub    esp,0xc
c002766e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027672:	e8 cd ff ff ff       	call   c0027644 <ACPI::~ACPI()>
c0027677:	83 c4 10             	add    esp,0x10
c002767a:	83 ec 08             	sub    esp,0x8
c002767d:	68 68 22 00 00       	push   0x2268
c0027682:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027686:	e8 0e b0 fe ff       	call   c0012699 <operator delete(void*, unsigned long)>
c002768b:	83 c4 10             	add    esp,0x10
c002768e:	83 c4 0c             	add    esp,0xc
c0027691:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0027692 <CPU::~CPU()>:
c0027692:	83 ec 0c             	sub    esp,0xc
c0027695:	ba d8 a1 02 c0       	mov    edx,0xc002a1d8
c002769a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002769e:	89 10                	mov    DWORD PTR [eax],edx
c00276a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00276a4:	83 ec 0c             	sub    esp,0xc
c00276a7:	50                   	push   eax
c00276a8:	e8 8d c3 fe ff       	call   c0013a3a <Device::~Device()>
c00276ad:	83 c4 10             	add    esp,0x10
c00276b0:	90                   	nop
c00276b1:	83 c4 0c             	add    esp,0xc
c00276b4:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c00276b6 <CPU::~CPU()>:
c00276b6:	83 ec 0c             	sub    esp,0xc
c00276b9:	83 ec 0c             	sub    esp,0xc
c00276bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00276c0:	e8 cd ff ff ff       	call   c0027692 <CPU::~CPU()>
c00276c5:	83 c4 10             	add    esp,0x10
c00276c8:	83 ec 08             	sub    esp,0x8
c00276cb:	68 98 11 00 00       	push   0x1198
c00276d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00276d4:	e8 c0 af fe ff       	call   c0012699 <operator delete(void*, unsigned long)>
c00276d9:	83 c4 10             	add    esp,0x10
c00276dc:	83 c4 0c             	add    esp,0xc
c00276df:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c00276e0 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c00276e0:	90                   	nop
c00276e1:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c00276e2 <ThreadControlBlock::ThreadControlBlock()>:
c00276e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00276e6:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00276ed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00276f1:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00276f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00276fc:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0027703:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027707:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c002770e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027712:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0027716:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002771a:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c002771e:	90                   	nop
c002771f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0027720 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0027720:	83 ec 0c             	sub    esp,0xc
c0027723:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027727:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002772d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027731:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0027738:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002773c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027743:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027747:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002774d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027751:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0027758:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002775c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027763:	83 ec 0c             	sub    esp,0xc
c0027766:	68 e6 8d 02 c0       	push   0xc0028de6
c002776b:	e8 09 b0 fe ff       	call   c0012779 <Dbg::kprintf(char const*, ...)>
c0027770:	83 c4 10             	add    esp,0x10
c0027773:	90                   	nop
c0027774:	83 c4 0c             	add    esp,0xc
c0027777:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0027778 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0027778:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002777c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002777f:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0027780 <Vm::_FPUState::_FPUState()>:
c0027780:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027784:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c002778b:	90                   	nop
c002778c:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c002778e <PCI::~PCI()>:
c002778e:	83 ec 0c             	sub    esp,0xc
c0027791:	ba 74 b0 02 c0       	mov    edx,0xc002b074
c0027796:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002779a:	89 10                	mov    DWORD PTR [eax],edx
c002779c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00277a0:	83 ec 0c             	sub    esp,0xc
c00277a3:	50                   	push   eax
c00277a4:	e8 a1 bc fe ff       	call   c001344a <Bus::~Bus()>
c00277a9:	83 c4 10             	add    esp,0x10
c00277ac:	90                   	nop
c00277ad:	83 c4 0c             	add    esp,0xc
c00277b0:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c00277b2 <PCI::~PCI()>:
c00277b2:	83 ec 0c             	sub    esp,0xc
c00277b5:	83 ec 0c             	sub    esp,0xc
c00277b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00277bc:	e8 cd ff ff ff       	call   c002778e <PCI::~PCI()>
c00277c1:	83 c4 10             	add    esp,0x10
c00277c4:	83 ec 08             	sub    esp,0x8
c00277c7:	68 58 01 00 00       	push   0x158
c00277cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00277d0:	e8 c4 ae fe ff       	call   c0012699 <operator delete(void*, unsigned long)>
c00277d5:	83 c4 10             	add    esp,0x10
c00277d8:	83 c4 0c             	add    esp,0xc
c00277db:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c00277dc <IDE::~IDE()>:
c00277dc:	83 ec 0c             	sub    esp,0xc
c00277df:	ba d8 b2 02 c0       	mov    edx,0xc002b2d8
c00277e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00277e8:	89 10                	mov    DWORD PTR [eax],edx
c00277ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00277ee:	83 ec 0c             	sub    esp,0xc
c00277f1:	50                   	push   eax
c00277f2:	e8 33 c7 fe ff       	call   c0013f2a <HardDiskController::~HardDiskController()>
c00277f7:	83 c4 10             	add    esp,0x10
c00277fa:	90                   	nop
c00277fb:	83 c4 0c             	add    esp,0xc
c00277fe:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0027800 <IDE::~IDE()>:
c0027800:	83 ec 0c             	sub    esp,0xc
c0027803:	83 ec 0c             	sub    esp,0xc
c0027806:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002780a:	e8 cd ff ff ff       	call   c00277dc <IDE::~IDE()>
c002780f:	83 c4 10             	add    esp,0x10
c0027812:	83 ec 08             	sub    esp,0x8
c0027815:	68 70 02 00 00       	push   0x270
c002781a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002781e:	e8 76 ae fe ff       	call   c0012699 <operator delete(void*, unsigned long)>
c0027823:	83 c4 10             	add    esp,0x10
c0027826:	83 c4 0c             	add    esp,0xc
c0027829:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c002782a <SATABus::~SATABus()>:
c002782a:	83 ec 0c             	sub    esp,0xc
c002782d:	ba b8 b3 02 c0       	mov    edx,0xc002b3b8
c0027832:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027836:	89 10                	mov    DWORD PTR [eax],edx
c0027838:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002783c:	83 ec 0c             	sub    esp,0xc
c002783f:	50                   	push   eax
c0027840:	e8 e5 c6 fe ff       	call   c0013f2a <HardDiskController::~HardDiskController()>
c0027845:	83 c4 10             	add    esp,0x10
c0027848:	90                   	nop
c0027849:	83 c4 0c             	add    esp,0xc
c002784c:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c002784e <SATABus::~SATABus()>:
c002784e:	83 ec 0c             	sub    esp,0xc
c0027851:	83 ec 0c             	sub    esp,0xc
c0027854:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027858:	e8 cd ff ff ff       	call   c002782a <SATABus::~SATABus()>
c002785d:	83 c4 10             	add    esp,0x10
c0027860:	83 ec 08             	sub    esp,0x8
c0027863:	68 64 01 00 00       	push   0x164
c0027868:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002786c:	e8 28 ae fe ff       	call   c0012699 <operator delete(void*, unsigned long)>
c0027871:	83 c4 10             	add    esp,0x10
c0027874:	83 c4 0c             	add    esp,0xc
c0027877:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0027878 <ATA::~ATA()>:
c0027878:	83 ec 0c             	sub    esp,0xc
c002787b:	ba f8 b3 02 c0       	mov    edx,0xc002b3f8
c0027880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027884:	89 10                	mov    DWORD PTR [eax],edx
c0027886:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002788a:	83 ec 0c             	sub    esp,0xc
c002788d:	50                   	push   eax
c002788e:	e8 75 c7 fe ff       	call   c0014008 <PhysicalDisk::~PhysicalDisk()>
c0027893:	83 c4 10             	add    esp,0x10
c0027896:	90                   	nop
c0027897:	83 c4 0c             	add    esp,0xc
c002789a:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c002789c <ATA::~ATA()>:
c002789c:	83 ec 0c             	sub    esp,0xc
c002789f:	83 ec 0c             	sub    esp,0xc
c00278a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00278a6:	e8 cd ff ff ff       	call   c0027878 <ATA::~ATA()>
c00278ab:	83 c4 10             	add    esp,0x10
c00278ae:	83 ec 08             	sub    esp,0x8
c00278b1:	68 7c 01 00 00       	push   0x17c
c00278b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00278ba:	e8 da ad fe ff       	call   c0012699 <operator delete(void*, unsigned long)>
c00278bf:	83 c4 10             	add    esp,0x10
c00278c2:	83 c4 0c             	add    esp,0xc
c00278c5:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c00278c6 <ATAPI::~ATAPI()>:
c00278c6:	83 ec 0c             	sub    esp,0xc
c00278c9:	ba 64 b4 02 c0       	mov    edx,0xc002b464
c00278ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00278d2:	89 10                	mov    DWORD PTR [eax],edx
c00278d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00278d8:	83 ec 0c             	sub    esp,0xc
c00278db:	50                   	push   eax
c00278dc:	e8 27 c7 fe ff       	call   c0014008 <PhysicalDisk::~PhysicalDisk()>
c00278e1:	83 c4 10             	add    esp,0x10
c00278e4:	90                   	nop
c00278e5:	83 c4 0c             	add    esp,0xc
c00278e8:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c00278ea <ATAPI::~ATAPI()>:
c00278ea:	83 ec 0c             	sub    esp,0xc
c00278ed:	83 ec 0c             	sub    esp,0xc
c00278f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00278f4:	e8 cd ff ff ff       	call   c00278c6 <ATAPI::~ATAPI()>
c00278f9:	83 c4 10             	add    esp,0x10
c00278fc:	83 ec 08             	sub    esp,0x8
c00278ff:	68 80 01 00 00       	push   0x180
c0027904:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027908:	e8 8c ad fe ff       	call   c0012699 <operator delete(void*, unsigned long)>
c002790d:	83 c4 10             	add    esp,0x10
c0027910:	83 c4 0c             	add    esp,0xc
c0027913:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0027914 <SATA::~SATA()>:
c0027914:	83 ec 0c             	sub    esp,0xc
c0027917:	ba 88 b5 02 c0       	mov    edx,0xc002b588
c002791c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027920:	89 10                	mov    DWORD PTR [eax],edx
c0027922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027926:	83 ec 0c             	sub    esp,0xc
c0027929:	50                   	push   eax
c002792a:	e8 d9 c6 fe ff       	call   c0014008 <PhysicalDisk::~PhysicalDisk()>
c002792f:	83 c4 10             	add    esp,0x10
c0027932:	90                   	nop
c0027933:	83 c4 0c             	add    esp,0xc
c0027936:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0027938 <SATA::~SATA()>:
c0027938:	83 ec 0c             	sub    esp,0xc
c002793b:	83 ec 0c             	sub    esp,0xc
c002793e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027942:	e8 cd ff ff ff       	call   c0027914 <SATA::~SATA()>
c0027947:	83 c4 10             	add    esp,0x10
c002794a:	83 ec 08             	sub    esp,0x8
c002794d:	68 74 01 00 00       	push   0x174
c0027952:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027956:	e8 3e ad fe ff       	call   c0012699 <operator delete(void*, unsigned long)>
c002795b:	83 c4 10             	add    esp,0x10
c002795e:	83 c4 0c             	add    esp,0xc
c0027961:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0027962 <AVX::~AVX()>:
c0027962:	83 ec 0c             	sub    esp,0xc
c0027965:	ba c4 b5 02 c0       	mov    edx,0xc002b5c4
c002796a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002796e:	89 10                	mov    DWORD PTR [eax],edx
c0027970:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027974:	83 ec 0c             	sub    esp,0xc
c0027977:	50                   	push   eax
c0027978:	e8 0f c7 fe ff       	call   c001408c <FPU::~FPU()>
c002797d:	83 c4 10             	add    esp,0x10
c0027980:	90                   	nop
c0027981:	83 c4 0c             	add    esp,0xc
c0027984:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0027986 <AVX::~AVX()>:
c0027986:	83 ec 0c             	sub    esp,0xc
c0027989:	83 ec 0c             	sub    esp,0xc
c002798c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027990:	e8 cd ff ff ff       	call   c0027962 <AVX::~AVX()>
c0027995:	83 c4 10             	add    esp,0x10
c0027998:	83 ec 08             	sub    esp,0x8
c002799b:	68 58 01 00 00       	push   0x158
c00279a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00279a4:	e8 f0 ac fe ff       	call   c0012699 <operator delete(void*, unsigned long)>
c00279a9:	83 c4 10             	add    esp,0x10
c00279ac:	83 c4 0c             	add    esp,0xc
c00279af:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c00279b0 <MMX::~MMX()>:
c00279b0:	83 ec 0c             	sub    esp,0xc
c00279b3:	ba 04 b6 02 c0       	mov    edx,0xc002b604
c00279b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00279bc:	89 10                	mov    DWORD PTR [eax],edx
c00279be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00279c2:	83 ec 0c             	sub    esp,0xc
c00279c5:	50                   	push   eax
c00279c6:	e8 c1 c6 fe ff       	call   c001408c <FPU::~FPU()>
c00279cb:	83 c4 10             	add    esp,0x10
c00279ce:	90                   	nop
c00279cf:	83 c4 0c             	add    esp,0xc
c00279d2:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c00279d4 <MMX::~MMX()>:
c00279d4:	83 ec 0c             	sub    esp,0xc
c00279d7:	83 ec 0c             	sub    esp,0xc
c00279da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00279de:	e8 cd ff ff ff       	call   c00279b0 <MMX::~MMX()>
c00279e3:	83 c4 10             	add    esp,0x10
c00279e6:	83 ec 08             	sub    esp,0x8
c00279e9:	68 58 01 00 00       	push   0x158
c00279ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00279f2:	e8 a2 ac fe ff       	call   c0012699 <operator delete(void*, unsigned long)>
c00279f7:	83 c4 10             	add    esp,0x10
c00279fa:	83 c4 0c             	add    esp,0xc
c00279fd:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c00279fe <SSE::~SSE()>:
c00279fe:	83 ec 0c             	sub    esp,0xc
c0027a01:	ba 44 b6 02 c0       	mov    edx,0xc002b644
c0027a06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a0a:	89 10                	mov    DWORD PTR [eax],edx
c0027a0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a10:	83 ec 0c             	sub    esp,0xc
c0027a13:	50                   	push   eax
c0027a14:	e8 73 c6 fe ff       	call   c001408c <FPU::~FPU()>
c0027a19:	83 c4 10             	add    esp,0x10
c0027a1c:	90                   	nop
c0027a1d:	83 c4 0c             	add    esp,0xc
c0027a20:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0027a22 <SSE::~SSE()>:
c0027a22:	83 ec 0c             	sub    esp,0xc
c0027a25:	83 ec 0c             	sub    esp,0xc
c0027a28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027a2c:	e8 cd ff ff ff       	call   c00279fe <SSE::~SSE()>
c0027a31:	83 c4 10             	add    esp,0x10
c0027a34:	83 ec 08             	sub    esp,0x8
c0027a37:	68 58 01 00 00       	push   0x158
c0027a3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027a40:	e8 54 ac fe ff       	call   c0012699 <operator delete(void*, unsigned long)>
c0027a45:	83 c4 10             	add    esp,0x10
c0027a48:	83 c4 0c             	add    esp,0xc
c0027a4b:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0027a4c <x87::~x87()>:
c0027a4c:	83 ec 0c             	sub    esp,0xc
c0027a4f:	ba 84 b6 02 c0       	mov    edx,0xc002b684
c0027a54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a58:	89 10                	mov    DWORD PTR [eax],edx
c0027a5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a5e:	83 ec 0c             	sub    esp,0xc
c0027a61:	50                   	push   eax
c0027a62:	e8 25 c6 fe ff       	call   c001408c <FPU::~FPU()>
c0027a67:	83 c4 10             	add    esp,0x10
c0027a6a:	90                   	nop
c0027a6b:	83 c4 0c             	add    esp,0xc
c0027a6e:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0027a70 <x87::~x87()>:
c0027a70:	83 ec 0c             	sub    esp,0xc
c0027a73:	83 ec 0c             	sub    esp,0xc
c0027a76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027a7a:	e8 cd ff ff ff       	call   c0027a4c <x87::~x87()>
c0027a7f:	83 c4 10             	add    esp,0x10
c0027a82:	83 ec 08             	sub    esp,0x8
c0027a85:	68 58 01 00 00       	push   0x158
c0027a8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027a8e:	e8 06 ac fe ff       	call   c0012699 <operator delete(void*, unsigned long)>
c0027a93:	83 c4 10             	add    esp,0x10
c0027a96:	83 c4 0c             	add    esp,0xc
c0027a99:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0027a9a <IOAPIC::~IOAPIC()>:
c0027a9a:	83 ec 0c             	sub    esp,0xc
c0027a9d:	ba dc b7 02 c0       	mov    edx,0xc002b7dc
c0027aa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027aa6:	89 10                	mov    DWORD PTR [eax],edx
c0027aa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027aac:	83 ec 0c             	sub    esp,0xc
c0027aaf:	50                   	push   eax
c0027ab0:	e8 85 bf fe ff       	call   c0013a3a <Device::~Device()>
c0027ab5:	83 c4 10             	add    esp,0x10
c0027ab8:	90                   	nop
c0027ab9:	83 c4 0c             	add    esp,0xc
c0027abc:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0027abe <IOAPIC::~IOAPIC()>:
c0027abe:	83 ec 0c             	sub    esp,0xc
c0027ac1:	83 ec 0c             	sub    esp,0xc
c0027ac4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027ac8:	e8 cd ff ff ff       	call   c0027a9a <IOAPIC::~IOAPIC()>
c0027acd:	83 c4 10             	add    esp,0x10
c0027ad0:	83 ec 08             	sub    esp,0x8
c0027ad3:	68 68 01 00 00       	push   0x168
c0027ad8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027adc:	e8 b8 ab fe ff       	call   c0012699 <operator delete(void*, unsigned long)>
c0027ae1:	83 c4 10             	add    esp,0x10
c0027ae4:	83 c4 0c             	add    esp,0xc
c0027ae7:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0027ae8 <APIC::~APIC()>:
c0027ae8:	83 ec 0c             	sub    esp,0xc
c0027aeb:	ba 94 b7 02 c0       	mov    edx,0xc002b794
c0027af0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027af4:	89 10                	mov    DWORD PTR [eax],edx
c0027af6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027afa:	83 ec 0c             	sub    esp,0xc
c0027afd:	50                   	push   eax
c0027afe:	e8 53 ca fe ff       	call   c0014556 <InterruptController::~InterruptController()>
c0027b03:	83 c4 10             	add    esp,0x10
c0027b06:	90                   	nop
c0027b07:	83 c4 0c             	add    esp,0xc
c0027b0a:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0027b0c <APIC::~APIC()>:
c0027b0c:	83 ec 0c             	sub    esp,0xc
c0027b0f:	83 ec 0c             	sub    esp,0xc
c0027b12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027b16:	e8 cd ff ff ff       	call   c0027ae8 <APIC::~APIC()>
c0027b1b:	83 c4 10             	add    esp,0x10
c0027b1e:	83 ec 08             	sub    esp,0x8
c0027b21:	68 58 21 00 00       	push   0x2158
c0027b26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027b2a:	e8 6a ab fe ff       	call   c0012699 <operator delete(void*, unsigned long)>
c0027b2f:	83 c4 10             	add    esp,0x10
c0027b32:	83 c4 0c             	add    esp,0xc
c0027b35:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0027b36 <PIC::~PIC()>:
c0027b36:	83 ec 0c             	sub    esp,0xc
c0027b39:	ba 2c b8 02 c0       	mov    edx,0xc002b82c
c0027b3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027b42:	89 10                	mov    DWORD PTR [eax],edx
c0027b44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027b48:	83 ec 0c             	sub    esp,0xc
c0027b4b:	50                   	push   eax
c0027b4c:	e8 05 ca fe ff       	call   c0014556 <InterruptController::~InterruptController()>
c0027b51:	83 c4 10             	add    esp,0x10
c0027b54:	90                   	nop
c0027b55:	83 c4 0c             	add    esp,0xc
c0027b58:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0027b5a <PIC::~PIC()>:
c0027b5a:	83 ec 0c             	sub    esp,0xc
c0027b5d:	83 ec 0c             	sub    esp,0xc
c0027b60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027b64:	e8 cd ff ff ff       	call   c0027b36 <PIC::~PIC()>
c0027b69:	83 c4 10             	add    esp,0x10
c0027b6c:	83 ec 08             	sub    esp,0x8
c0027b6f:	68 58 21 00 00       	push   0x2158
c0027b74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027b78:	e8 1c ab fe ff       	call   c0012699 <operator delete(void*, unsigned long)>
c0027b7d:	83 c4 10             	add    esp,0x10
c0027b80:	83 c4 0c             	add    esp,0xc
c0027b83:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0027b84 <APICTimer::~APICTimer()>:
c0027b84:	83 ec 0c             	sub    esp,0xc
c0027b87:	ba 80 b8 02 c0       	mov    edx,0xc002b880
c0027b8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027b90:	89 10                	mov    DWORD PTR [eax],edx
c0027b92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027b96:	83 ec 0c             	sub    esp,0xc
c0027b99:	50                   	push   eax
c0027b9a:	e8 b7 e7 fe ff       	call   c0016356 <Timer::~Timer()>
c0027b9f:	83 c4 10             	add    esp,0x10
c0027ba2:	90                   	nop
c0027ba3:	83 c4 0c             	add    esp,0xc
c0027ba6:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0027ba8 <APICTimer::~APICTimer()>:
c0027ba8:	83 ec 0c             	sub    esp,0xc
c0027bab:	83 ec 0c             	sub    esp,0xc
c0027bae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027bb2:	e8 cd ff ff ff       	call   c0027b84 <APICTimer::~APICTimer()>
c0027bb7:	83 c4 10             	add    esp,0x10
c0027bba:	83 ec 08             	sub    esp,0x8
c0027bbd:	68 60 01 00 00       	push   0x160
c0027bc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027bc6:	e8 ce aa fe ff       	call   c0012699 <operator delete(void*, unsigned long)>
c0027bcb:	83 c4 10             	add    esp,0x10
c0027bce:	83 c4 0c             	add    esp,0xc
c0027bd1:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0027bd2 <PIT::~PIT()>:
c0027bd2:	83 ec 0c             	sub    esp,0xc
c0027bd5:	ba d0 b8 02 c0       	mov    edx,0xc002b8d0
c0027bda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027bde:	89 10                	mov    DWORD PTR [eax],edx
c0027be0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027be4:	83 ec 0c             	sub    esp,0xc
c0027be7:	50                   	push   eax
c0027be8:	e8 69 e7 fe ff       	call   c0016356 <Timer::~Timer()>
c0027bed:	83 c4 10             	add    esp,0x10
c0027bf0:	90                   	nop
c0027bf1:	83 c4 0c             	add    esp,0xc
c0027bf4:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0027bf6 <PIT::~PIT()>:
c0027bf6:	83 ec 0c             	sub    esp,0xc
c0027bf9:	83 ec 0c             	sub    esp,0xc
c0027bfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027c00:	e8 cd ff ff ff       	call   c0027bd2 <PIT::~PIT()>
c0027c05:	83 c4 10             	add    esp,0x10
c0027c08:	83 ec 08             	sub    esp,0x8
c0027c0b:	68 5c 01 00 00       	push   0x15c
c0027c10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027c14:	e8 80 aa fe ff       	call   c0012699 <operator delete(void*, unsigned long)>
c0027c19:	83 c4 10             	add    esp,0x10
c0027c1c:	83 c4 0c             	add    esp,0xc
c0027c1f:	c3                   	ret    
